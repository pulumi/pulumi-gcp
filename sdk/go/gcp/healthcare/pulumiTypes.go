// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConsentStoreIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// ConsentStoreIamBindingConditionInput is an input type that accepts ConsentStoreIamBindingConditionArgs and ConsentStoreIamBindingConditionOutput values.
// You can construct a concrete instance of `ConsentStoreIamBindingConditionInput` via:
//
//          ConsentStoreIamBindingConditionArgs{...}
type ConsentStoreIamBindingConditionInput interface {
	pulumi.Input

	ToConsentStoreIamBindingConditionOutput() ConsentStoreIamBindingConditionOutput
	ToConsentStoreIamBindingConditionOutputWithContext(context.Context) ConsentStoreIamBindingConditionOutput
}

type ConsentStoreIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (ConsentStoreIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsentStoreIamBindingCondition)(nil)).Elem()
}

func (i ConsentStoreIamBindingConditionArgs) ToConsentStoreIamBindingConditionOutput() ConsentStoreIamBindingConditionOutput {
	return i.ToConsentStoreIamBindingConditionOutputWithContext(context.Background())
}

func (i ConsentStoreIamBindingConditionArgs) ToConsentStoreIamBindingConditionOutputWithContext(ctx context.Context) ConsentStoreIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsentStoreIamBindingConditionOutput)
}

func (i ConsentStoreIamBindingConditionArgs) ToConsentStoreIamBindingConditionPtrOutput() ConsentStoreIamBindingConditionPtrOutput {
	return i.ToConsentStoreIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i ConsentStoreIamBindingConditionArgs) ToConsentStoreIamBindingConditionPtrOutputWithContext(ctx context.Context) ConsentStoreIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsentStoreIamBindingConditionOutput).ToConsentStoreIamBindingConditionPtrOutputWithContext(ctx)
}

// ConsentStoreIamBindingConditionPtrInput is an input type that accepts ConsentStoreIamBindingConditionArgs, ConsentStoreIamBindingConditionPtr and ConsentStoreIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `ConsentStoreIamBindingConditionPtrInput` via:
//
//          ConsentStoreIamBindingConditionArgs{...}
//
//  or:
//
//          nil
type ConsentStoreIamBindingConditionPtrInput interface {
	pulumi.Input

	ToConsentStoreIamBindingConditionPtrOutput() ConsentStoreIamBindingConditionPtrOutput
	ToConsentStoreIamBindingConditionPtrOutputWithContext(context.Context) ConsentStoreIamBindingConditionPtrOutput
}

type consentStoreIamBindingConditionPtrType ConsentStoreIamBindingConditionArgs

func ConsentStoreIamBindingConditionPtr(v *ConsentStoreIamBindingConditionArgs) ConsentStoreIamBindingConditionPtrInput {
	return (*consentStoreIamBindingConditionPtrType)(v)
}

func (*consentStoreIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsentStoreIamBindingCondition)(nil)).Elem()
}

func (i *consentStoreIamBindingConditionPtrType) ToConsentStoreIamBindingConditionPtrOutput() ConsentStoreIamBindingConditionPtrOutput {
	return i.ToConsentStoreIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *consentStoreIamBindingConditionPtrType) ToConsentStoreIamBindingConditionPtrOutputWithContext(ctx context.Context) ConsentStoreIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsentStoreIamBindingConditionPtrOutput)
}

type ConsentStoreIamBindingConditionOutput struct{ *pulumi.OutputState }

func (ConsentStoreIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsentStoreIamBindingCondition)(nil)).Elem()
}

func (o ConsentStoreIamBindingConditionOutput) ToConsentStoreIamBindingConditionOutput() ConsentStoreIamBindingConditionOutput {
	return o
}

func (o ConsentStoreIamBindingConditionOutput) ToConsentStoreIamBindingConditionOutputWithContext(ctx context.Context) ConsentStoreIamBindingConditionOutput {
	return o
}

func (o ConsentStoreIamBindingConditionOutput) ToConsentStoreIamBindingConditionPtrOutput() ConsentStoreIamBindingConditionPtrOutput {
	return o.ToConsentStoreIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o ConsentStoreIamBindingConditionOutput) ToConsentStoreIamBindingConditionPtrOutputWithContext(ctx context.Context) ConsentStoreIamBindingConditionPtrOutput {
	return o.ApplyT(func(v ConsentStoreIamBindingCondition) *ConsentStoreIamBindingCondition {
		return &v
	}).(ConsentStoreIamBindingConditionPtrOutput)
}
func (o ConsentStoreIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsentStoreIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConsentStoreIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ConsentStoreIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o ConsentStoreIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ConsentStoreIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type ConsentStoreIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (ConsentStoreIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsentStoreIamBindingCondition)(nil)).Elem()
}

func (o ConsentStoreIamBindingConditionPtrOutput) ToConsentStoreIamBindingConditionPtrOutput() ConsentStoreIamBindingConditionPtrOutput {
	return o
}

func (o ConsentStoreIamBindingConditionPtrOutput) ToConsentStoreIamBindingConditionPtrOutputWithContext(ctx context.Context) ConsentStoreIamBindingConditionPtrOutput {
	return o
}

func (o ConsentStoreIamBindingConditionPtrOutput) Elem() ConsentStoreIamBindingConditionOutput {
	return o.ApplyT(func(v *ConsentStoreIamBindingCondition) ConsentStoreIamBindingCondition { return *v }).(ConsentStoreIamBindingConditionOutput)
}

func (o ConsentStoreIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsentStoreIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o ConsentStoreIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsentStoreIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o ConsentStoreIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsentStoreIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type ConsentStoreIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// ConsentStoreIamMemberConditionInput is an input type that accepts ConsentStoreIamMemberConditionArgs and ConsentStoreIamMemberConditionOutput values.
// You can construct a concrete instance of `ConsentStoreIamMemberConditionInput` via:
//
//          ConsentStoreIamMemberConditionArgs{...}
type ConsentStoreIamMemberConditionInput interface {
	pulumi.Input

	ToConsentStoreIamMemberConditionOutput() ConsentStoreIamMemberConditionOutput
	ToConsentStoreIamMemberConditionOutputWithContext(context.Context) ConsentStoreIamMemberConditionOutput
}

type ConsentStoreIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (ConsentStoreIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsentStoreIamMemberCondition)(nil)).Elem()
}

func (i ConsentStoreIamMemberConditionArgs) ToConsentStoreIamMemberConditionOutput() ConsentStoreIamMemberConditionOutput {
	return i.ToConsentStoreIamMemberConditionOutputWithContext(context.Background())
}

func (i ConsentStoreIamMemberConditionArgs) ToConsentStoreIamMemberConditionOutputWithContext(ctx context.Context) ConsentStoreIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsentStoreIamMemberConditionOutput)
}

func (i ConsentStoreIamMemberConditionArgs) ToConsentStoreIamMemberConditionPtrOutput() ConsentStoreIamMemberConditionPtrOutput {
	return i.ToConsentStoreIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i ConsentStoreIamMemberConditionArgs) ToConsentStoreIamMemberConditionPtrOutputWithContext(ctx context.Context) ConsentStoreIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsentStoreIamMemberConditionOutput).ToConsentStoreIamMemberConditionPtrOutputWithContext(ctx)
}

// ConsentStoreIamMemberConditionPtrInput is an input type that accepts ConsentStoreIamMemberConditionArgs, ConsentStoreIamMemberConditionPtr and ConsentStoreIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `ConsentStoreIamMemberConditionPtrInput` via:
//
//          ConsentStoreIamMemberConditionArgs{...}
//
//  or:
//
//          nil
type ConsentStoreIamMemberConditionPtrInput interface {
	pulumi.Input

	ToConsentStoreIamMemberConditionPtrOutput() ConsentStoreIamMemberConditionPtrOutput
	ToConsentStoreIamMemberConditionPtrOutputWithContext(context.Context) ConsentStoreIamMemberConditionPtrOutput
}

type consentStoreIamMemberConditionPtrType ConsentStoreIamMemberConditionArgs

func ConsentStoreIamMemberConditionPtr(v *ConsentStoreIamMemberConditionArgs) ConsentStoreIamMemberConditionPtrInput {
	return (*consentStoreIamMemberConditionPtrType)(v)
}

func (*consentStoreIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsentStoreIamMemberCondition)(nil)).Elem()
}

func (i *consentStoreIamMemberConditionPtrType) ToConsentStoreIamMemberConditionPtrOutput() ConsentStoreIamMemberConditionPtrOutput {
	return i.ToConsentStoreIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *consentStoreIamMemberConditionPtrType) ToConsentStoreIamMemberConditionPtrOutputWithContext(ctx context.Context) ConsentStoreIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsentStoreIamMemberConditionPtrOutput)
}

type ConsentStoreIamMemberConditionOutput struct{ *pulumi.OutputState }

func (ConsentStoreIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsentStoreIamMemberCondition)(nil)).Elem()
}

func (o ConsentStoreIamMemberConditionOutput) ToConsentStoreIamMemberConditionOutput() ConsentStoreIamMemberConditionOutput {
	return o
}

func (o ConsentStoreIamMemberConditionOutput) ToConsentStoreIamMemberConditionOutputWithContext(ctx context.Context) ConsentStoreIamMemberConditionOutput {
	return o
}

func (o ConsentStoreIamMemberConditionOutput) ToConsentStoreIamMemberConditionPtrOutput() ConsentStoreIamMemberConditionPtrOutput {
	return o.ToConsentStoreIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o ConsentStoreIamMemberConditionOutput) ToConsentStoreIamMemberConditionPtrOutputWithContext(ctx context.Context) ConsentStoreIamMemberConditionPtrOutput {
	return o.ApplyT(func(v ConsentStoreIamMemberCondition) *ConsentStoreIamMemberCondition {
		return &v
	}).(ConsentStoreIamMemberConditionPtrOutput)
}
func (o ConsentStoreIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsentStoreIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConsentStoreIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ConsentStoreIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o ConsentStoreIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ConsentStoreIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type ConsentStoreIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (ConsentStoreIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsentStoreIamMemberCondition)(nil)).Elem()
}

func (o ConsentStoreIamMemberConditionPtrOutput) ToConsentStoreIamMemberConditionPtrOutput() ConsentStoreIamMemberConditionPtrOutput {
	return o
}

func (o ConsentStoreIamMemberConditionPtrOutput) ToConsentStoreIamMemberConditionPtrOutputWithContext(ctx context.Context) ConsentStoreIamMemberConditionPtrOutput {
	return o
}

func (o ConsentStoreIamMemberConditionPtrOutput) Elem() ConsentStoreIamMemberConditionOutput {
	return o.ApplyT(func(v *ConsentStoreIamMemberCondition) ConsentStoreIamMemberCondition { return *v }).(ConsentStoreIamMemberConditionOutput)
}

func (o ConsentStoreIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsentStoreIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o ConsentStoreIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsentStoreIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o ConsentStoreIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsentStoreIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type DatasetIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// DatasetIamBindingConditionInput is an input type that accepts DatasetIamBindingConditionArgs and DatasetIamBindingConditionOutput values.
// You can construct a concrete instance of `DatasetIamBindingConditionInput` via:
//
//          DatasetIamBindingConditionArgs{...}
type DatasetIamBindingConditionInput interface {
	pulumi.Input

	ToDatasetIamBindingConditionOutput() DatasetIamBindingConditionOutput
	ToDatasetIamBindingConditionOutputWithContext(context.Context) DatasetIamBindingConditionOutput
}

type DatasetIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (DatasetIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetIamBindingCondition)(nil)).Elem()
}

func (i DatasetIamBindingConditionArgs) ToDatasetIamBindingConditionOutput() DatasetIamBindingConditionOutput {
	return i.ToDatasetIamBindingConditionOutputWithContext(context.Background())
}

func (i DatasetIamBindingConditionArgs) ToDatasetIamBindingConditionOutputWithContext(ctx context.Context) DatasetIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetIamBindingConditionOutput)
}

func (i DatasetIamBindingConditionArgs) ToDatasetIamBindingConditionPtrOutput() DatasetIamBindingConditionPtrOutput {
	return i.ToDatasetIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i DatasetIamBindingConditionArgs) ToDatasetIamBindingConditionPtrOutputWithContext(ctx context.Context) DatasetIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetIamBindingConditionOutput).ToDatasetIamBindingConditionPtrOutputWithContext(ctx)
}

// DatasetIamBindingConditionPtrInput is an input type that accepts DatasetIamBindingConditionArgs, DatasetIamBindingConditionPtr and DatasetIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `DatasetIamBindingConditionPtrInput` via:
//
//          DatasetIamBindingConditionArgs{...}
//
//  or:
//
//          nil
type DatasetIamBindingConditionPtrInput interface {
	pulumi.Input

	ToDatasetIamBindingConditionPtrOutput() DatasetIamBindingConditionPtrOutput
	ToDatasetIamBindingConditionPtrOutputWithContext(context.Context) DatasetIamBindingConditionPtrOutput
}

type datasetIamBindingConditionPtrType DatasetIamBindingConditionArgs

func DatasetIamBindingConditionPtr(v *DatasetIamBindingConditionArgs) DatasetIamBindingConditionPtrInput {
	return (*datasetIamBindingConditionPtrType)(v)
}

func (*datasetIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetIamBindingCondition)(nil)).Elem()
}

func (i *datasetIamBindingConditionPtrType) ToDatasetIamBindingConditionPtrOutput() DatasetIamBindingConditionPtrOutput {
	return i.ToDatasetIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *datasetIamBindingConditionPtrType) ToDatasetIamBindingConditionPtrOutputWithContext(ctx context.Context) DatasetIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetIamBindingConditionPtrOutput)
}

type DatasetIamBindingConditionOutput struct{ *pulumi.OutputState }

func (DatasetIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetIamBindingCondition)(nil)).Elem()
}

func (o DatasetIamBindingConditionOutput) ToDatasetIamBindingConditionOutput() DatasetIamBindingConditionOutput {
	return o
}

func (o DatasetIamBindingConditionOutput) ToDatasetIamBindingConditionOutputWithContext(ctx context.Context) DatasetIamBindingConditionOutput {
	return o
}

func (o DatasetIamBindingConditionOutput) ToDatasetIamBindingConditionPtrOutput() DatasetIamBindingConditionPtrOutput {
	return o.ToDatasetIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o DatasetIamBindingConditionOutput) ToDatasetIamBindingConditionPtrOutputWithContext(ctx context.Context) DatasetIamBindingConditionPtrOutput {
	return o.ApplyT(func(v DatasetIamBindingCondition) *DatasetIamBindingCondition {
		return &v
	}).(DatasetIamBindingConditionPtrOutput)
}
func (o DatasetIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DatasetIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DatasetIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type DatasetIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (DatasetIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetIamBindingCondition)(nil)).Elem()
}

func (o DatasetIamBindingConditionPtrOutput) ToDatasetIamBindingConditionPtrOutput() DatasetIamBindingConditionPtrOutput {
	return o
}

func (o DatasetIamBindingConditionPtrOutput) ToDatasetIamBindingConditionPtrOutputWithContext(ctx context.Context) DatasetIamBindingConditionPtrOutput {
	return o
}

func (o DatasetIamBindingConditionPtrOutput) Elem() DatasetIamBindingConditionOutput {
	return o.ApplyT(func(v *DatasetIamBindingCondition) DatasetIamBindingCondition { return *v }).(DatasetIamBindingConditionOutput)
}

func (o DatasetIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DatasetIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DatasetIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type DatasetIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// DatasetIamMemberConditionInput is an input type that accepts DatasetIamMemberConditionArgs and DatasetIamMemberConditionOutput values.
// You can construct a concrete instance of `DatasetIamMemberConditionInput` via:
//
//          DatasetIamMemberConditionArgs{...}
type DatasetIamMemberConditionInput interface {
	pulumi.Input

	ToDatasetIamMemberConditionOutput() DatasetIamMemberConditionOutput
	ToDatasetIamMemberConditionOutputWithContext(context.Context) DatasetIamMemberConditionOutput
}

type DatasetIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (DatasetIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetIamMemberCondition)(nil)).Elem()
}

func (i DatasetIamMemberConditionArgs) ToDatasetIamMemberConditionOutput() DatasetIamMemberConditionOutput {
	return i.ToDatasetIamMemberConditionOutputWithContext(context.Background())
}

func (i DatasetIamMemberConditionArgs) ToDatasetIamMemberConditionOutputWithContext(ctx context.Context) DatasetIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetIamMemberConditionOutput)
}

func (i DatasetIamMemberConditionArgs) ToDatasetIamMemberConditionPtrOutput() DatasetIamMemberConditionPtrOutput {
	return i.ToDatasetIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i DatasetIamMemberConditionArgs) ToDatasetIamMemberConditionPtrOutputWithContext(ctx context.Context) DatasetIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetIamMemberConditionOutput).ToDatasetIamMemberConditionPtrOutputWithContext(ctx)
}

// DatasetIamMemberConditionPtrInput is an input type that accepts DatasetIamMemberConditionArgs, DatasetIamMemberConditionPtr and DatasetIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `DatasetIamMemberConditionPtrInput` via:
//
//          DatasetIamMemberConditionArgs{...}
//
//  or:
//
//          nil
type DatasetIamMemberConditionPtrInput interface {
	pulumi.Input

	ToDatasetIamMemberConditionPtrOutput() DatasetIamMemberConditionPtrOutput
	ToDatasetIamMemberConditionPtrOutputWithContext(context.Context) DatasetIamMemberConditionPtrOutput
}

type datasetIamMemberConditionPtrType DatasetIamMemberConditionArgs

func DatasetIamMemberConditionPtr(v *DatasetIamMemberConditionArgs) DatasetIamMemberConditionPtrInput {
	return (*datasetIamMemberConditionPtrType)(v)
}

func (*datasetIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetIamMemberCondition)(nil)).Elem()
}

func (i *datasetIamMemberConditionPtrType) ToDatasetIamMemberConditionPtrOutput() DatasetIamMemberConditionPtrOutput {
	return i.ToDatasetIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *datasetIamMemberConditionPtrType) ToDatasetIamMemberConditionPtrOutputWithContext(ctx context.Context) DatasetIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetIamMemberConditionPtrOutput)
}

type DatasetIamMemberConditionOutput struct{ *pulumi.OutputState }

func (DatasetIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetIamMemberCondition)(nil)).Elem()
}

func (o DatasetIamMemberConditionOutput) ToDatasetIamMemberConditionOutput() DatasetIamMemberConditionOutput {
	return o
}

func (o DatasetIamMemberConditionOutput) ToDatasetIamMemberConditionOutputWithContext(ctx context.Context) DatasetIamMemberConditionOutput {
	return o
}

func (o DatasetIamMemberConditionOutput) ToDatasetIamMemberConditionPtrOutput() DatasetIamMemberConditionPtrOutput {
	return o.ToDatasetIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o DatasetIamMemberConditionOutput) ToDatasetIamMemberConditionPtrOutputWithContext(ctx context.Context) DatasetIamMemberConditionPtrOutput {
	return o.ApplyT(func(v DatasetIamMemberCondition) *DatasetIamMemberCondition {
		return &v
	}).(DatasetIamMemberConditionPtrOutput)
}
func (o DatasetIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DatasetIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DatasetIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type DatasetIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (DatasetIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetIamMemberCondition)(nil)).Elem()
}

func (o DatasetIamMemberConditionPtrOutput) ToDatasetIamMemberConditionPtrOutput() DatasetIamMemberConditionPtrOutput {
	return o
}

func (o DatasetIamMemberConditionPtrOutput) ToDatasetIamMemberConditionPtrOutputWithContext(ctx context.Context) DatasetIamMemberConditionPtrOutput {
	return o
}

func (o DatasetIamMemberConditionPtrOutput) Elem() DatasetIamMemberConditionOutput {
	return o.ApplyT(func(v *DatasetIamMemberCondition) DatasetIamMemberCondition { return *v }).(DatasetIamMemberConditionOutput)
}

func (o DatasetIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DatasetIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DatasetIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type DicomStoreIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// DicomStoreIamBindingConditionInput is an input type that accepts DicomStoreIamBindingConditionArgs and DicomStoreIamBindingConditionOutput values.
// You can construct a concrete instance of `DicomStoreIamBindingConditionInput` via:
//
//          DicomStoreIamBindingConditionArgs{...}
type DicomStoreIamBindingConditionInput interface {
	pulumi.Input

	ToDicomStoreIamBindingConditionOutput() DicomStoreIamBindingConditionOutput
	ToDicomStoreIamBindingConditionOutputWithContext(context.Context) DicomStoreIamBindingConditionOutput
}

type DicomStoreIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (DicomStoreIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DicomStoreIamBindingCondition)(nil)).Elem()
}

func (i DicomStoreIamBindingConditionArgs) ToDicomStoreIamBindingConditionOutput() DicomStoreIamBindingConditionOutput {
	return i.ToDicomStoreIamBindingConditionOutputWithContext(context.Background())
}

func (i DicomStoreIamBindingConditionArgs) ToDicomStoreIamBindingConditionOutputWithContext(ctx context.Context) DicomStoreIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreIamBindingConditionOutput)
}

func (i DicomStoreIamBindingConditionArgs) ToDicomStoreIamBindingConditionPtrOutput() DicomStoreIamBindingConditionPtrOutput {
	return i.ToDicomStoreIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i DicomStoreIamBindingConditionArgs) ToDicomStoreIamBindingConditionPtrOutputWithContext(ctx context.Context) DicomStoreIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreIamBindingConditionOutput).ToDicomStoreIamBindingConditionPtrOutputWithContext(ctx)
}

// DicomStoreIamBindingConditionPtrInput is an input type that accepts DicomStoreIamBindingConditionArgs, DicomStoreIamBindingConditionPtr and DicomStoreIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `DicomStoreIamBindingConditionPtrInput` via:
//
//          DicomStoreIamBindingConditionArgs{...}
//
//  or:
//
//          nil
type DicomStoreIamBindingConditionPtrInput interface {
	pulumi.Input

	ToDicomStoreIamBindingConditionPtrOutput() DicomStoreIamBindingConditionPtrOutput
	ToDicomStoreIamBindingConditionPtrOutputWithContext(context.Context) DicomStoreIamBindingConditionPtrOutput
}

type dicomStoreIamBindingConditionPtrType DicomStoreIamBindingConditionArgs

func DicomStoreIamBindingConditionPtr(v *DicomStoreIamBindingConditionArgs) DicomStoreIamBindingConditionPtrInput {
	return (*dicomStoreIamBindingConditionPtrType)(v)
}

func (*dicomStoreIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DicomStoreIamBindingCondition)(nil)).Elem()
}

func (i *dicomStoreIamBindingConditionPtrType) ToDicomStoreIamBindingConditionPtrOutput() DicomStoreIamBindingConditionPtrOutput {
	return i.ToDicomStoreIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *dicomStoreIamBindingConditionPtrType) ToDicomStoreIamBindingConditionPtrOutputWithContext(ctx context.Context) DicomStoreIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreIamBindingConditionPtrOutput)
}

type DicomStoreIamBindingConditionOutput struct{ *pulumi.OutputState }

func (DicomStoreIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DicomStoreIamBindingCondition)(nil)).Elem()
}

func (o DicomStoreIamBindingConditionOutput) ToDicomStoreIamBindingConditionOutput() DicomStoreIamBindingConditionOutput {
	return o
}

func (o DicomStoreIamBindingConditionOutput) ToDicomStoreIamBindingConditionOutputWithContext(ctx context.Context) DicomStoreIamBindingConditionOutput {
	return o
}

func (o DicomStoreIamBindingConditionOutput) ToDicomStoreIamBindingConditionPtrOutput() DicomStoreIamBindingConditionPtrOutput {
	return o.ToDicomStoreIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o DicomStoreIamBindingConditionOutput) ToDicomStoreIamBindingConditionPtrOutputWithContext(ctx context.Context) DicomStoreIamBindingConditionPtrOutput {
	return o.ApplyT(func(v DicomStoreIamBindingCondition) *DicomStoreIamBindingCondition {
		return &v
	}).(DicomStoreIamBindingConditionPtrOutput)
}
func (o DicomStoreIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DicomStoreIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DicomStoreIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DicomStoreIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DicomStoreIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DicomStoreIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type DicomStoreIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (DicomStoreIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DicomStoreIamBindingCondition)(nil)).Elem()
}

func (o DicomStoreIamBindingConditionPtrOutput) ToDicomStoreIamBindingConditionPtrOutput() DicomStoreIamBindingConditionPtrOutput {
	return o
}

func (o DicomStoreIamBindingConditionPtrOutput) ToDicomStoreIamBindingConditionPtrOutputWithContext(ctx context.Context) DicomStoreIamBindingConditionPtrOutput {
	return o
}

func (o DicomStoreIamBindingConditionPtrOutput) Elem() DicomStoreIamBindingConditionOutput {
	return o.ApplyT(func(v *DicomStoreIamBindingCondition) DicomStoreIamBindingCondition { return *v }).(DicomStoreIamBindingConditionOutput)
}

func (o DicomStoreIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DicomStoreIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DicomStoreIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DicomStoreIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DicomStoreIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DicomStoreIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type DicomStoreIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// DicomStoreIamMemberConditionInput is an input type that accepts DicomStoreIamMemberConditionArgs and DicomStoreIamMemberConditionOutput values.
// You can construct a concrete instance of `DicomStoreIamMemberConditionInput` via:
//
//          DicomStoreIamMemberConditionArgs{...}
type DicomStoreIamMemberConditionInput interface {
	pulumi.Input

	ToDicomStoreIamMemberConditionOutput() DicomStoreIamMemberConditionOutput
	ToDicomStoreIamMemberConditionOutputWithContext(context.Context) DicomStoreIamMemberConditionOutput
}

type DicomStoreIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (DicomStoreIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DicomStoreIamMemberCondition)(nil)).Elem()
}

func (i DicomStoreIamMemberConditionArgs) ToDicomStoreIamMemberConditionOutput() DicomStoreIamMemberConditionOutput {
	return i.ToDicomStoreIamMemberConditionOutputWithContext(context.Background())
}

func (i DicomStoreIamMemberConditionArgs) ToDicomStoreIamMemberConditionOutputWithContext(ctx context.Context) DicomStoreIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreIamMemberConditionOutput)
}

func (i DicomStoreIamMemberConditionArgs) ToDicomStoreIamMemberConditionPtrOutput() DicomStoreIamMemberConditionPtrOutput {
	return i.ToDicomStoreIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i DicomStoreIamMemberConditionArgs) ToDicomStoreIamMemberConditionPtrOutputWithContext(ctx context.Context) DicomStoreIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreIamMemberConditionOutput).ToDicomStoreIamMemberConditionPtrOutputWithContext(ctx)
}

// DicomStoreIamMemberConditionPtrInput is an input type that accepts DicomStoreIamMemberConditionArgs, DicomStoreIamMemberConditionPtr and DicomStoreIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `DicomStoreIamMemberConditionPtrInput` via:
//
//          DicomStoreIamMemberConditionArgs{...}
//
//  or:
//
//          nil
type DicomStoreIamMemberConditionPtrInput interface {
	pulumi.Input

	ToDicomStoreIamMemberConditionPtrOutput() DicomStoreIamMemberConditionPtrOutput
	ToDicomStoreIamMemberConditionPtrOutputWithContext(context.Context) DicomStoreIamMemberConditionPtrOutput
}

type dicomStoreIamMemberConditionPtrType DicomStoreIamMemberConditionArgs

func DicomStoreIamMemberConditionPtr(v *DicomStoreIamMemberConditionArgs) DicomStoreIamMemberConditionPtrInput {
	return (*dicomStoreIamMemberConditionPtrType)(v)
}

func (*dicomStoreIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DicomStoreIamMemberCondition)(nil)).Elem()
}

func (i *dicomStoreIamMemberConditionPtrType) ToDicomStoreIamMemberConditionPtrOutput() DicomStoreIamMemberConditionPtrOutput {
	return i.ToDicomStoreIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *dicomStoreIamMemberConditionPtrType) ToDicomStoreIamMemberConditionPtrOutputWithContext(ctx context.Context) DicomStoreIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreIamMemberConditionPtrOutput)
}

type DicomStoreIamMemberConditionOutput struct{ *pulumi.OutputState }

func (DicomStoreIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DicomStoreIamMemberCondition)(nil)).Elem()
}

func (o DicomStoreIamMemberConditionOutput) ToDicomStoreIamMemberConditionOutput() DicomStoreIamMemberConditionOutput {
	return o
}

func (o DicomStoreIamMemberConditionOutput) ToDicomStoreIamMemberConditionOutputWithContext(ctx context.Context) DicomStoreIamMemberConditionOutput {
	return o
}

func (o DicomStoreIamMemberConditionOutput) ToDicomStoreIamMemberConditionPtrOutput() DicomStoreIamMemberConditionPtrOutput {
	return o.ToDicomStoreIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o DicomStoreIamMemberConditionOutput) ToDicomStoreIamMemberConditionPtrOutputWithContext(ctx context.Context) DicomStoreIamMemberConditionPtrOutput {
	return o.ApplyT(func(v DicomStoreIamMemberCondition) *DicomStoreIamMemberCondition {
		return &v
	}).(DicomStoreIamMemberConditionPtrOutput)
}
func (o DicomStoreIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DicomStoreIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DicomStoreIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DicomStoreIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DicomStoreIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DicomStoreIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type DicomStoreIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (DicomStoreIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DicomStoreIamMemberCondition)(nil)).Elem()
}

func (o DicomStoreIamMemberConditionPtrOutput) ToDicomStoreIamMemberConditionPtrOutput() DicomStoreIamMemberConditionPtrOutput {
	return o
}

func (o DicomStoreIamMemberConditionPtrOutput) ToDicomStoreIamMemberConditionPtrOutputWithContext(ctx context.Context) DicomStoreIamMemberConditionPtrOutput {
	return o
}

func (o DicomStoreIamMemberConditionPtrOutput) Elem() DicomStoreIamMemberConditionOutput {
	return o.ApplyT(func(v *DicomStoreIamMemberCondition) DicomStoreIamMemberCondition { return *v }).(DicomStoreIamMemberConditionOutput)
}

func (o DicomStoreIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DicomStoreIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DicomStoreIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DicomStoreIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DicomStoreIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DicomStoreIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type DicomStoreNotificationConfig struct {
	// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
	// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
	// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
	// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
	// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
	// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
	PubsubTopic string `pulumi:"pubsubTopic"`
}

// DicomStoreNotificationConfigInput is an input type that accepts DicomStoreNotificationConfigArgs and DicomStoreNotificationConfigOutput values.
// You can construct a concrete instance of `DicomStoreNotificationConfigInput` via:
//
//          DicomStoreNotificationConfigArgs{...}
type DicomStoreNotificationConfigInput interface {
	pulumi.Input

	ToDicomStoreNotificationConfigOutput() DicomStoreNotificationConfigOutput
	ToDicomStoreNotificationConfigOutputWithContext(context.Context) DicomStoreNotificationConfigOutput
}

type DicomStoreNotificationConfigArgs struct {
	// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
	// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
	// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
	// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
	// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
	// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
	PubsubTopic pulumi.StringInput `pulumi:"pubsubTopic"`
}

func (DicomStoreNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DicomStoreNotificationConfig)(nil)).Elem()
}

func (i DicomStoreNotificationConfigArgs) ToDicomStoreNotificationConfigOutput() DicomStoreNotificationConfigOutput {
	return i.ToDicomStoreNotificationConfigOutputWithContext(context.Background())
}

func (i DicomStoreNotificationConfigArgs) ToDicomStoreNotificationConfigOutputWithContext(ctx context.Context) DicomStoreNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreNotificationConfigOutput)
}

func (i DicomStoreNotificationConfigArgs) ToDicomStoreNotificationConfigPtrOutput() DicomStoreNotificationConfigPtrOutput {
	return i.ToDicomStoreNotificationConfigPtrOutputWithContext(context.Background())
}

func (i DicomStoreNotificationConfigArgs) ToDicomStoreNotificationConfigPtrOutputWithContext(ctx context.Context) DicomStoreNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreNotificationConfigOutput).ToDicomStoreNotificationConfigPtrOutputWithContext(ctx)
}

// DicomStoreNotificationConfigPtrInput is an input type that accepts DicomStoreNotificationConfigArgs, DicomStoreNotificationConfigPtr and DicomStoreNotificationConfigPtrOutput values.
// You can construct a concrete instance of `DicomStoreNotificationConfigPtrInput` via:
//
//          DicomStoreNotificationConfigArgs{...}
//
//  or:
//
//          nil
type DicomStoreNotificationConfigPtrInput interface {
	pulumi.Input

	ToDicomStoreNotificationConfigPtrOutput() DicomStoreNotificationConfigPtrOutput
	ToDicomStoreNotificationConfigPtrOutputWithContext(context.Context) DicomStoreNotificationConfigPtrOutput
}

type dicomStoreNotificationConfigPtrType DicomStoreNotificationConfigArgs

func DicomStoreNotificationConfigPtr(v *DicomStoreNotificationConfigArgs) DicomStoreNotificationConfigPtrInput {
	return (*dicomStoreNotificationConfigPtrType)(v)
}

func (*dicomStoreNotificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DicomStoreNotificationConfig)(nil)).Elem()
}

func (i *dicomStoreNotificationConfigPtrType) ToDicomStoreNotificationConfigPtrOutput() DicomStoreNotificationConfigPtrOutput {
	return i.ToDicomStoreNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *dicomStoreNotificationConfigPtrType) ToDicomStoreNotificationConfigPtrOutputWithContext(ctx context.Context) DicomStoreNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreNotificationConfigPtrOutput)
}

type DicomStoreNotificationConfigOutput struct{ *pulumi.OutputState }

func (DicomStoreNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DicomStoreNotificationConfig)(nil)).Elem()
}

func (o DicomStoreNotificationConfigOutput) ToDicomStoreNotificationConfigOutput() DicomStoreNotificationConfigOutput {
	return o
}

func (o DicomStoreNotificationConfigOutput) ToDicomStoreNotificationConfigOutputWithContext(ctx context.Context) DicomStoreNotificationConfigOutput {
	return o
}

func (o DicomStoreNotificationConfigOutput) ToDicomStoreNotificationConfigPtrOutput() DicomStoreNotificationConfigPtrOutput {
	return o.ToDicomStoreNotificationConfigPtrOutputWithContext(context.Background())
}

func (o DicomStoreNotificationConfigOutput) ToDicomStoreNotificationConfigPtrOutputWithContext(ctx context.Context) DicomStoreNotificationConfigPtrOutput {
	return o.ApplyT(func(v DicomStoreNotificationConfig) *DicomStoreNotificationConfig {
		return &v
	}).(DicomStoreNotificationConfigPtrOutput)
}

// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
func (o DicomStoreNotificationConfigOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v DicomStoreNotificationConfig) string { return v.PubsubTopic }).(pulumi.StringOutput)
}

type DicomStoreNotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (DicomStoreNotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DicomStoreNotificationConfig)(nil)).Elem()
}

func (o DicomStoreNotificationConfigPtrOutput) ToDicomStoreNotificationConfigPtrOutput() DicomStoreNotificationConfigPtrOutput {
	return o
}

func (o DicomStoreNotificationConfigPtrOutput) ToDicomStoreNotificationConfigPtrOutputWithContext(ctx context.Context) DicomStoreNotificationConfigPtrOutput {
	return o
}

func (o DicomStoreNotificationConfigPtrOutput) Elem() DicomStoreNotificationConfigOutput {
	return o.ApplyT(func(v *DicomStoreNotificationConfig) DicomStoreNotificationConfig { return *v }).(DicomStoreNotificationConfigOutput)
}

// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
func (o DicomStoreNotificationConfigPtrOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DicomStoreNotificationConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PubsubTopic
	}).(pulumi.StringPtrOutput)
}

type FhirStoreIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// FhirStoreIamBindingConditionInput is an input type that accepts FhirStoreIamBindingConditionArgs and FhirStoreIamBindingConditionOutput values.
// You can construct a concrete instance of `FhirStoreIamBindingConditionInput` via:
//
//          FhirStoreIamBindingConditionArgs{...}
type FhirStoreIamBindingConditionInput interface {
	pulumi.Input

	ToFhirStoreIamBindingConditionOutput() FhirStoreIamBindingConditionOutput
	ToFhirStoreIamBindingConditionOutputWithContext(context.Context) FhirStoreIamBindingConditionOutput
}

type FhirStoreIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (FhirStoreIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirStoreIamBindingCondition)(nil)).Elem()
}

func (i FhirStoreIamBindingConditionArgs) ToFhirStoreIamBindingConditionOutput() FhirStoreIamBindingConditionOutput {
	return i.ToFhirStoreIamBindingConditionOutputWithContext(context.Background())
}

func (i FhirStoreIamBindingConditionArgs) ToFhirStoreIamBindingConditionOutputWithContext(ctx context.Context) FhirStoreIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreIamBindingConditionOutput)
}

func (i FhirStoreIamBindingConditionArgs) ToFhirStoreIamBindingConditionPtrOutput() FhirStoreIamBindingConditionPtrOutput {
	return i.ToFhirStoreIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i FhirStoreIamBindingConditionArgs) ToFhirStoreIamBindingConditionPtrOutputWithContext(ctx context.Context) FhirStoreIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreIamBindingConditionOutput).ToFhirStoreIamBindingConditionPtrOutputWithContext(ctx)
}

// FhirStoreIamBindingConditionPtrInput is an input type that accepts FhirStoreIamBindingConditionArgs, FhirStoreIamBindingConditionPtr and FhirStoreIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `FhirStoreIamBindingConditionPtrInput` via:
//
//          FhirStoreIamBindingConditionArgs{...}
//
//  or:
//
//          nil
type FhirStoreIamBindingConditionPtrInput interface {
	pulumi.Input

	ToFhirStoreIamBindingConditionPtrOutput() FhirStoreIamBindingConditionPtrOutput
	ToFhirStoreIamBindingConditionPtrOutputWithContext(context.Context) FhirStoreIamBindingConditionPtrOutput
}

type fhirStoreIamBindingConditionPtrType FhirStoreIamBindingConditionArgs

func FhirStoreIamBindingConditionPtr(v *FhirStoreIamBindingConditionArgs) FhirStoreIamBindingConditionPtrInput {
	return (*fhirStoreIamBindingConditionPtrType)(v)
}

func (*fhirStoreIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirStoreIamBindingCondition)(nil)).Elem()
}

func (i *fhirStoreIamBindingConditionPtrType) ToFhirStoreIamBindingConditionPtrOutput() FhirStoreIamBindingConditionPtrOutput {
	return i.ToFhirStoreIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *fhirStoreIamBindingConditionPtrType) ToFhirStoreIamBindingConditionPtrOutputWithContext(ctx context.Context) FhirStoreIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreIamBindingConditionPtrOutput)
}

type FhirStoreIamBindingConditionOutput struct{ *pulumi.OutputState }

func (FhirStoreIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirStoreIamBindingCondition)(nil)).Elem()
}

func (o FhirStoreIamBindingConditionOutput) ToFhirStoreIamBindingConditionOutput() FhirStoreIamBindingConditionOutput {
	return o
}

func (o FhirStoreIamBindingConditionOutput) ToFhirStoreIamBindingConditionOutputWithContext(ctx context.Context) FhirStoreIamBindingConditionOutput {
	return o
}

func (o FhirStoreIamBindingConditionOutput) ToFhirStoreIamBindingConditionPtrOutput() FhirStoreIamBindingConditionPtrOutput {
	return o.ToFhirStoreIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o FhirStoreIamBindingConditionOutput) ToFhirStoreIamBindingConditionPtrOutputWithContext(ctx context.Context) FhirStoreIamBindingConditionPtrOutput {
	return o.ApplyT(func(v FhirStoreIamBindingCondition) *FhirStoreIamBindingCondition {
		return &v
	}).(FhirStoreIamBindingConditionPtrOutput)
}
func (o FhirStoreIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FhirStoreIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FhirStoreIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v FhirStoreIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o FhirStoreIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v FhirStoreIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type FhirStoreIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (FhirStoreIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirStoreIamBindingCondition)(nil)).Elem()
}

func (o FhirStoreIamBindingConditionPtrOutput) ToFhirStoreIamBindingConditionPtrOutput() FhirStoreIamBindingConditionPtrOutput {
	return o
}

func (o FhirStoreIamBindingConditionPtrOutput) ToFhirStoreIamBindingConditionPtrOutputWithContext(ctx context.Context) FhirStoreIamBindingConditionPtrOutput {
	return o
}

func (o FhirStoreIamBindingConditionPtrOutput) Elem() FhirStoreIamBindingConditionOutput {
	return o.ApplyT(func(v *FhirStoreIamBindingCondition) FhirStoreIamBindingCondition { return *v }).(FhirStoreIamBindingConditionOutput)
}

func (o FhirStoreIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FhirStoreIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o FhirStoreIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FhirStoreIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o FhirStoreIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FhirStoreIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type FhirStoreIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// FhirStoreIamMemberConditionInput is an input type that accepts FhirStoreIamMemberConditionArgs and FhirStoreIamMemberConditionOutput values.
// You can construct a concrete instance of `FhirStoreIamMemberConditionInput` via:
//
//          FhirStoreIamMemberConditionArgs{...}
type FhirStoreIamMemberConditionInput interface {
	pulumi.Input

	ToFhirStoreIamMemberConditionOutput() FhirStoreIamMemberConditionOutput
	ToFhirStoreIamMemberConditionOutputWithContext(context.Context) FhirStoreIamMemberConditionOutput
}

type FhirStoreIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (FhirStoreIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirStoreIamMemberCondition)(nil)).Elem()
}

func (i FhirStoreIamMemberConditionArgs) ToFhirStoreIamMemberConditionOutput() FhirStoreIamMemberConditionOutput {
	return i.ToFhirStoreIamMemberConditionOutputWithContext(context.Background())
}

func (i FhirStoreIamMemberConditionArgs) ToFhirStoreIamMemberConditionOutputWithContext(ctx context.Context) FhirStoreIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreIamMemberConditionOutput)
}

func (i FhirStoreIamMemberConditionArgs) ToFhirStoreIamMemberConditionPtrOutput() FhirStoreIamMemberConditionPtrOutput {
	return i.ToFhirStoreIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i FhirStoreIamMemberConditionArgs) ToFhirStoreIamMemberConditionPtrOutputWithContext(ctx context.Context) FhirStoreIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreIamMemberConditionOutput).ToFhirStoreIamMemberConditionPtrOutputWithContext(ctx)
}

// FhirStoreIamMemberConditionPtrInput is an input type that accepts FhirStoreIamMemberConditionArgs, FhirStoreIamMemberConditionPtr and FhirStoreIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `FhirStoreIamMemberConditionPtrInput` via:
//
//          FhirStoreIamMemberConditionArgs{...}
//
//  or:
//
//          nil
type FhirStoreIamMemberConditionPtrInput interface {
	pulumi.Input

	ToFhirStoreIamMemberConditionPtrOutput() FhirStoreIamMemberConditionPtrOutput
	ToFhirStoreIamMemberConditionPtrOutputWithContext(context.Context) FhirStoreIamMemberConditionPtrOutput
}

type fhirStoreIamMemberConditionPtrType FhirStoreIamMemberConditionArgs

func FhirStoreIamMemberConditionPtr(v *FhirStoreIamMemberConditionArgs) FhirStoreIamMemberConditionPtrInput {
	return (*fhirStoreIamMemberConditionPtrType)(v)
}

func (*fhirStoreIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirStoreIamMemberCondition)(nil)).Elem()
}

func (i *fhirStoreIamMemberConditionPtrType) ToFhirStoreIamMemberConditionPtrOutput() FhirStoreIamMemberConditionPtrOutput {
	return i.ToFhirStoreIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *fhirStoreIamMemberConditionPtrType) ToFhirStoreIamMemberConditionPtrOutputWithContext(ctx context.Context) FhirStoreIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreIamMemberConditionPtrOutput)
}

type FhirStoreIamMemberConditionOutput struct{ *pulumi.OutputState }

func (FhirStoreIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirStoreIamMemberCondition)(nil)).Elem()
}

func (o FhirStoreIamMemberConditionOutput) ToFhirStoreIamMemberConditionOutput() FhirStoreIamMemberConditionOutput {
	return o
}

func (o FhirStoreIamMemberConditionOutput) ToFhirStoreIamMemberConditionOutputWithContext(ctx context.Context) FhirStoreIamMemberConditionOutput {
	return o
}

func (o FhirStoreIamMemberConditionOutput) ToFhirStoreIamMemberConditionPtrOutput() FhirStoreIamMemberConditionPtrOutput {
	return o.ToFhirStoreIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o FhirStoreIamMemberConditionOutput) ToFhirStoreIamMemberConditionPtrOutputWithContext(ctx context.Context) FhirStoreIamMemberConditionPtrOutput {
	return o.ApplyT(func(v FhirStoreIamMemberCondition) *FhirStoreIamMemberCondition {
		return &v
	}).(FhirStoreIamMemberConditionPtrOutput)
}
func (o FhirStoreIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FhirStoreIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FhirStoreIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v FhirStoreIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o FhirStoreIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v FhirStoreIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type FhirStoreIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (FhirStoreIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirStoreIamMemberCondition)(nil)).Elem()
}

func (o FhirStoreIamMemberConditionPtrOutput) ToFhirStoreIamMemberConditionPtrOutput() FhirStoreIamMemberConditionPtrOutput {
	return o
}

func (o FhirStoreIamMemberConditionPtrOutput) ToFhirStoreIamMemberConditionPtrOutputWithContext(ctx context.Context) FhirStoreIamMemberConditionPtrOutput {
	return o
}

func (o FhirStoreIamMemberConditionPtrOutput) Elem() FhirStoreIamMemberConditionOutput {
	return o.ApplyT(func(v *FhirStoreIamMemberCondition) FhirStoreIamMemberCondition { return *v }).(FhirStoreIamMemberConditionOutput)
}

func (o FhirStoreIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FhirStoreIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o FhirStoreIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FhirStoreIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o FhirStoreIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FhirStoreIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type FhirStoreNotificationConfig struct {
	// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
	// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
	// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
	// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
	// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
	// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
	PubsubTopic string `pulumi:"pubsubTopic"`
}

// FhirStoreNotificationConfigInput is an input type that accepts FhirStoreNotificationConfigArgs and FhirStoreNotificationConfigOutput values.
// You can construct a concrete instance of `FhirStoreNotificationConfigInput` via:
//
//          FhirStoreNotificationConfigArgs{...}
type FhirStoreNotificationConfigInput interface {
	pulumi.Input

	ToFhirStoreNotificationConfigOutput() FhirStoreNotificationConfigOutput
	ToFhirStoreNotificationConfigOutputWithContext(context.Context) FhirStoreNotificationConfigOutput
}

type FhirStoreNotificationConfigArgs struct {
	// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
	// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
	// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
	// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
	// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
	// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
	PubsubTopic pulumi.StringInput `pulumi:"pubsubTopic"`
}

func (FhirStoreNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirStoreNotificationConfig)(nil)).Elem()
}

func (i FhirStoreNotificationConfigArgs) ToFhirStoreNotificationConfigOutput() FhirStoreNotificationConfigOutput {
	return i.ToFhirStoreNotificationConfigOutputWithContext(context.Background())
}

func (i FhirStoreNotificationConfigArgs) ToFhirStoreNotificationConfigOutputWithContext(ctx context.Context) FhirStoreNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreNotificationConfigOutput)
}

func (i FhirStoreNotificationConfigArgs) ToFhirStoreNotificationConfigPtrOutput() FhirStoreNotificationConfigPtrOutput {
	return i.ToFhirStoreNotificationConfigPtrOutputWithContext(context.Background())
}

func (i FhirStoreNotificationConfigArgs) ToFhirStoreNotificationConfigPtrOutputWithContext(ctx context.Context) FhirStoreNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreNotificationConfigOutput).ToFhirStoreNotificationConfigPtrOutputWithContext(ctx)
}

// FhirStoreNotificationConfigPtrInput is an input type that accepts FhirStoreNotificationConfigArgs, FhirStoreNotificationConfigPtr and FhirStoreNotificationConfigPtrOutput values.
// You can construct a concrete instance of `FhirStoreNotificationConfigPtrInput` via:
//
//          FhirStoreNotificationConfigArgs{...}
//
//  or:
//
//          nil
type FhirStoreNotificationConfigPtrInput interface {
	pulumi.Input

	ToFhirStoreNotificationConfigPtrOutput() FhirStoreNotificationConfigPtrOutput
	ToFhirStoreNotificationConfigPtrOutputWithContext(context.Context) FhirStoreNotificationConfigPtrOutput
}

type fhirStoreNotificationConfigPtrType FhirStoreNotificationConfigArgs

func FhirStoreNotificationConfigPtr(v *FhirStoreNotificationConfigArgs) FhirStoreNotificationConfigPtrInput {
	return (*fhirStoreNotificationConfigPtrType)(v)
}

func (*fhirStoreNotificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirStoreNotificationConfig)(nil)).Elem()
}

func (i *fhirStoreNotificationConfigPtrType) ToFhirStoreNotificationConfigPtrOutput() FhirStoreNotificationConfigPtrOutput {
	return i.ToFhirStoreNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *fhirStoreNotificationConfigPtrType) ToFhirStoreNotificationConfigPtrOutputWithContext(ctx context.Context) FhirStoreNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreNotificationConfigPtrOutput)
}

type FhirStoreNotificationConfigOutput struct{ *pulumi.OutputState }

func (FhirStoreNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirStoreNotificationConfig)(nil)).Elem()
}

func (o FhirStoreNotificationConfigOutput) ToFhirStoreNotificationConfigOutput() FhirStoreNotificationConfigOutput {
	return o
}

func (o FhirStoreNotificationConfigOutput) ToFhirStoreNotificationConfigOutputWithContext(ctx context.Context) FhirStoreNotificationConfigOutput {
	return o
}

func (o FhirStoreNotificationConfigOutput) ToFhirStoreNotificationConfigPtrOutput() FhirStoreNotificationConfigPtrOutput {
	return o.ToFhirStoreNotificationConfigPtrOutputWithContext(context.Background())
}

func (o FhirStoreNotificationConfigOutput) ToFhirStoreNotificationConfigPtrOutputWithContext(ctx context.Context) FhirStoreNotificationConfigPtrOutput {
	return o.ApplyT(func(v FhirStoreNotificationConfig) *FhirStoreNotificationConfig {
		return &v
	}).(FhirStoreNotificationConfigPtrOutput)
}

// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
func (o FhirStoreNotificationConfigOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v FhirStoreNotificationConfig) string { return v.PubsubTopic }).(pulumi.StringOutput)
}

type FhirStoreNotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (FhirStoreNotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirStoreNotificationConfig)(nil)).Elem()
}

func (o FhirStoreNotificationConfigPtrOutput) ToFhirStoreNotificationConfigPtrOutput() FhirStoreNotificationConfigPtrOutput {
	return o
}

func (o FhirStoreNotificationConfigPtrOutput) ToFhirStoreNotificationConfigPtrOutputWithContext(ctx context.Context) FhirStoreNotificationConfigPtrOutput {
	return o
}

func (o FhirStoreNotificationConfigPtrOutput) Elem() FhirStoreNotificationConfigOutput {
	return o.ApplyT(func(v *FhirStoreNotificationConfig) FhirStoreNotificationConfig { return *v }).(FhirStoreNotificationConfigOutput)
}

// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
func (o FhirStoreNotificationConfigPtrOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FhirStoreNotificationConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PubsubTopic
	}).(pulumi.StringPtrOutput)
}

type FhirStoreStreamConfig struct {
	// The destination BigQuery structure that contains both the dataset location and corresponding schema config.
	// The output is organized in one table per resource type. The server reuses the existing tables (if any) that
	// are named after the resource types, e.g. "Patient", "Observation". When there is no existing table for a given
	// resource type, the server attempts to create one.
	// See the [streaming config reference](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.fhirStores#streamconfig) for more details.
	// Structure is documented below.
	BigqueryDestination FhirStoreStreamConfigBigqueryDestination `pulumi:"bigqueryDestination"`
	// Supply a FHIR resource type (such as "Patient" or "Observation"). See
	// https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats
	// an empty list as an intent to stream all the supported resource types in this FHIR store.
	ResourceTypes []string `pulumi:"resourceTypes"`
}

// FhirStoreStreamConfigInput is an input type that accepts FhirStoreStreamConfigArgs and FhirStoreStreamConfigOutput values.
// You can construct a concrete instance of `FhirStoreStreamConfigInput` via:
//
//          FhirStoreStreamConfigArgs{...}
type FhirStoreStreamConfigInput interface {
	pulumi.Input

	ToFhirStoreStreamConfigOutput() FhirStoreStreamConfigOutput
	ToFhirStoreStreamConfigOutputWithContext(context.Context) FhirStoreStreamConfigOutput
}

type FhirStoreStreamConfigArgs struct {
	// The destination BigQuery structure that contains both the dataset location and corresponding schema config.
	// The output is organized in one table per resource type. The server reuses the existing tables (if any) that
	// are named after the resource types, e.g. "Patient", "Observation". When there is no existing table for a given
	// resource type, the server attempts to create one.
	// See the [streaming config reference](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.fhirStores#streamconfig) for more details.
	// Structure is documented below.
	BigqueryDestination FhirStoreStreamConfigBigqueryDestinationInput `pulumi:"bigqueryDestination"`
	// Supply a FHIR resource type (such as "Patient" or "Observation"). See
	// https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats
	// an empty list as an intent to stream all the supported resource types in this FHIR store.
	ResourceTypes pulumi.StringArrayInput `pulumi:"resourceTypes"`
}

func (FhirStoreStreamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirStoreStreamConfig)(nil)).Elem()
}

func (i FhirStoreStreamConfigArgs) ToFhirStoreStreamConfigOutput() FhirStoreStreamConfigOutput {
	return i.ToFhirStoreStreamConfigOutputWithContext(context.Background())
}

func (i FhirStoreStreamConfigArgs) ToFhirStoreStreamConfigOutputWithContext(ctx context.Context) FhirStoreStreamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreStreamConfigOutput)
}

// FhirStoreStreamConfigArrayInput is an input type that accepts FhirStoreStreamConfigArray and FhirStoreStreamConfigArrayOutput values.
// You can construct a concrete instance of `FhirStoreStreamConfigArrayInput` via:
//
//          FhirStoreStreamConfigArray{ FhirStoreStreamConfigArgs{...} }
type FhirStoreStreamConfigArrayInput interface {
	pulumi.Input

	ToFhirStoreStreamConfigArrayOutput() FhirStoreStreamConfigArrayOutput
	ToFhirStoreStreamConfigArrayOutputWithContext(context.Context) FhirStoreStreamConfigArrayOutput
}

type FhirStoreStreamConfigArray []FhirStoreStreamConfigInput

func (FhirStoreStreamConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FhirStoreStreamConfig)(nil)).Elem()
}

func (i FhirStoreStreamConfigArray) ToFhirStoreStreamConfigArrayOutput() FhirStoreStreamConfigArrayOutput {
	return i.ToFhirStoreStreamConfigArrayOutputWithContext(context.Background())
}

func (i FhirStoreStreamConfigArray) ToFhirStoreStreamConfigArrayOutputWithContext(ctx context.Context) FhirStoreStreamConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreStreamConfigArrayOutput)
}

type FhirStoreStreamConfigOutput struct{ *pulumi.OutputState }

func (FhirStoreStreamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirStoreStreamConfig)(nil)).Elem()
}

func (o FhirStoreStreamConfigOutput) ToFhirStoreStreamConfigOutput() FhirStoreStreamConfigOutput {
	return o
}

func (o FhirStoreStreamConfigOutput) ToFhirStoreStreamConfigOutputWithContext(ctx context.Context) FhirStoreStreamConfigOutput {
	return o
}

// The destination BigQuery structure that contains both the dataset location and corresponding schema config.
// The output is organized in one table per resource type. The server reuses the existing tables (if any) that
// are named after the resource types, e.g. "Patient", "Observation". When there is no existing table for a given
// resource type, the server attempts to create one.
// See the [streaming config reference](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.fhirStores#streamconfig) for more details.
// Structure is documented below.
func (o FhirStoreStreamConfigOutput) BigqueryDestination() FhirStoreStreamConfigBigqueryDestinationOutput {
	return o.ApplyT(func(v FhirStoreStreamConfig) FhirStoreStreamConfigBigqueryDestination { return v.BigqueryDestination }).(FhirStoreStreamConfigBigqueryDestinationOutput)
}

// Supply a FHIR resource type (such as "Patient" or "Observation"). See
// https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats
// an empty list as an intent to stream all the supported resource types in this FHIR store.
func (o FhirStoreStreamConfigOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FhirStoreStreamConfig) []string { return v.ResourceTypes }).(pulumi.StringArrayOutput)
}

type FhirStoreStreamConfigArrayOutput struct{ *pulumi.OutputState }

func (FhirStoreStreamConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FhirStoreStreamConfig)(nil)).Elem()
}

func (o FhirStoreStreamConfigArrayOutput) ToFhirStoreStreamConfigArrayOutput() FhirStoreStreamConfigArrayOutput {
	return o
}

func (o FhirStoreStreamConfigArrayOutput) ToFhirStoreStreamConfigArrayOutputWithContext(ctx context.Context) FhirStoreStreamConfigArrayOutput {
	return o
}

func (o FhirStoreStreamConfigArrayOutput) Index(i pulumi.IntInput) FhirStoreStreamConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FhirStoreStreamConfig {
		return vs[0].([]FhirStoreStreamConfig)[vs[1].(int)]
	}).(FhirStoreStreamConfigOutput)
}

type FhirStoreStreamConfigBigqueryDestination struct {
	// BigQuery URI to a dataset, up to 2000 characters long, in the format bq://projectId.bqDatasetId
	DatasetUri string `pulumi:"datasetUri"`
	// The configuration for the exported BigQuery schema.
	// Structure is documented below.
	SchemaConfig FhirStoreStreamConfigBigqueryDestinationSchemaConfig `pulumi:"schemaConfig"`
}

// FhirStoreStreamConfigBigqueryDestinationInput is an input type that accepts FhirStoreStreamConfigBigqueryDestinationArgs and FhirStoreStreamConfigBigqueryDestinationOutput values.
// You can construct a concrete instance of `FhirStoreStreamConfigBigqueryDestinationInput` via:
//
//          FhirStoreStreamConfigBigqueryDestinationArgs{...}
type FhirStoreStreamConfigBigqueryDestinationInput interface {
	pulumi.Input

	ToFhirStoreStreamConfigBigqueryDestinationOutput() FhirStoreStreamConfigBigqueryDestinationOutput
	ToFhirStoreStreamConfigBigqueryDestinationOutputWithContext(context.Context) FhirStoreStreamConfigBigqueryDestinationOutput
}

type FhirStoreStreamConfigBigqueryDestinationArgs struct {
	// BigQuery URI to a dataset, up to 2000 characters long, in the format bq://projectId.bqDatasetId
	DatasetUri pulumi.StringInput `pulumi:"datasetUri"`
	// The configuration for the exported BigQuery schema.
	// Structure is documented below.
	SchemaConfig FhirStoreStreamConfigBigqueryDestinationSchemaConfigInput `pulumi:"schemaConfig"`
}

func (FhirStoreStreamConfigBigqueryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirStoreStreamConfigBigqueryDestination)(nil)).Elem()
}

func (i FhirStoreStreamConfigBigqueryDestinationArgs) ToFhirStoreStreamConfigBigqueryDestinationOutput() FhirStoreStreamConfigBigqueryDestinationOutput {
	return i.ToFhirStoreStreamConfigBigqueryDestinationOutputWithContext(context.Background())
}

func (i FhirStoreStreamConfigBigqueryDestinationArgs) ToFhirStoreStreamConfigBigqueryDestinationOutputWithContext(ctx context.Context) FhirStoreStreamConfigBigqueryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreStreamConfigBigqueryDestinationOutput)
}

type FhirStoreStreamConfigBigqueryDestinationOutput struct{ *pulumi.OutputState }

func (FhirStoreStreamConfigBigqueryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirStoreStreamConfigBigqueryDestination)(nil)).Elem()
}

func (o FhirStoreStreamConfigBigqueryDestinationOutput) ToFhirStoreStreamConfigBigqueryDestinationOutput() FhirStoreStreamConfigBigqueryDestinationOutput {
	return o
}

func (o FhirStoreStreamConfigBigqueryDestinationOutput) ToFhirStoreStreamConfigBigqueryDestinationOutputWithContext(ctx context.Context) FhirStoreStreamConfigBigqueryDestinationOutput {
	return o
}

// BigQuery URI to a dataset, up to 2000 characters long, in the format bq://projectId.bqDatasetId
func (o FhirStoreStreamConfigBigqueryDestinationOutput) DatasetUri() pulumi.StringOutput {
	return o.ApplyT(func(v FhirStoreStreamConfigBigqueryDestination) string { return v.DatasetUri }).(pulumi.StringOutput)
}

// The configuration for the exported BigQuery schema.
// Structure is documented below.
func (o FhirStoreStreamConfigBigqueryDestinationOutput) SchemaConfig() FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput {
	return o.ApplyT(func(v FhirStoreStreamConfigBigqueryDestination) FhirStoreStreamConfigBigqueryDestinationSchemaConfig {
		return v.SchemaConfig
	}).(FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput)
}

type FhirStoreStreamConfigBigqueryDestinationSchemaConfig struct {
	// The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
	// resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
	// concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
	// value 2. The maximum depth allowed is 5.
	RecursiveStructureDepth int `pulumi:"recursiveStructureDepth"`
	// Specifies the output schema type. Only ANALYTICS is supported at this time.
	// * ANALYTICS: Analytics schema defined by the FHIR community.
	//   See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
	//   Default value is `ANALYTICS`.
	//   Possible values are `ANALYTICS`.
	SchemaType *string `pulumi:"schemaType"`
}

// FhirStoreStreamConfigBigqueryDestinationSchemaConfigInput is an input type that accepts FhirStoreStreamConfigBigqueryDestinationSchemaConfigArgs and FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput values.
// You can construct a concrete instance of `FhirStoreStreamConfigBigqueryDestinationSchemaConfigInput` via:
//
//          FhirStoreStreamConfigBigqueryDestinationSchemaConfigArgs{...}
type FhirStoreStreamConfigBigqueryDestinationSchemaConfigInput interface {
	pulumi.Input

	ToFhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput() FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput
	ToFhirStoreStreamConfigBigqueryDestinationSchemaConfigOutputWithContext(context.Context) FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput
}

type FhirStoreStreamConfigBigqueryDestinationSchemaConfigArgs struct {
	// The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
	// resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
	// concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
	// value 2. The maximum depth allowed is 5.
	RecursiveStructureDepth pulumi.IntInput `pulumi:"recursiveStructureDepth"`
	// Specifies the output schema type. Only ANALYTICS is supported at this time.
	// * ANALYTICS: Analytics schema defined by the FHIR community.
	//   See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
	//   Default value is `ANALYTICS`.
	//   Possible values are `ANALYTICS`.
	SchemaType pulumi.StringPtrInput `pulumi:"schemaType"`
}

func (FhirStoreStreamConfigBigqueryDestinationSchemaConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirStoreStreamConfigBigqueryDestinationSchemaConfig)(nil)).Elem()
}

func (i FhirStoreStreamConfigBigqueryDestinationSchemaConfigArgs) ToFhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput() FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput {
	return i.ToFhirStoreStreamConfigBigqueryDestinationSchemaConfigOutputWithContext(context.Background())
}

func (i FhirStoreStreamConfigBigqueryDestinationSchemaConfigArgs) ToFhirStoreStreamConfigBigqueryDestinationSchemaConfigOutputWithContext(ctx context.Context) FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput)
}

type FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput struct{ *pulumi.OutputState }

func (FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirStoreStreamConfigBigqueryDestinationSchemaConfig)(nil)).Elem()
}

func (o FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput) ToFhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput() FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput {
	return o
}

func (o FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput) ToFhirStoreStreamConfigBigqueryDestinationSchemaConfigOutputWithContext(ctx context.Context) FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput {
	return o
}

// The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
// resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
// concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
// value 2. The maximum depth allowed is 5.
func (o FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput) RecursiveStructureDepth() pulumi.IntOutput {
	return o.ApplyT(func(v FhirStoreStreamConfigBigqueryDestinationSchemaConfig) int { return v.RecursiveStructureDepth }).(pulumi.IntOutput)
}

// Specifies the output schema type. Only ANALYTICS is supported at this time.
// * ANALYTICS: Analytics schema defined by the FHIR community.
//   See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
//   Default value is `ANALYTICS`.
//   Possible values are `ANALYTICS`.
func (o FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput) SchemaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FhirStoreStreamConfigBigqueryDestinationSchemaConfig) *string { return v.SchemaType }).(pulumi.StringPtrOutput)
}

type Hl7StoreIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// Hl7StoreIamBindingConditionInput is an input type that accepts Hl7StoreIamBindingConditionArgs and Hl7StoreIamBindingConditionOutput values.
// You can construct a concrete instance of `Hl7StoreIamBindingConditionInput` via:
//
//          Hl7StoreIamBindingConditionArgs{...}
type Hl7StoreIamBindingConditionInput interface {
	pulumi.Input

	ToHl7StoreIamBindingConditionOutput() Hl7StoreIamBindingConditionOutput
	ToHl7StoreIamBindingConditionOutputWithContext(context.Context) Hl7StoreIamBindingConditionOutput
}

type Hl7StoreIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (Hl7StoreIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7StoreIamBindingCondition)(nil)).Elem()
}

func (i Hl7StoreIamBindingConditionArgs) ToHl7StoreIamBindingConditionOutput() Hl7StoreIamBindingConditionOutput {
	return i.ToHl7StoreIamBindingConditionOutputWithContext(context.Background())
}

func (i Hl7StoreIamBindingConditionArgs) ToHl7StoreIamBindingConditionOutputWithContext(ctx context.Context) Hl7StoreIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreIamBindingConditionOutput)
}

func (i Hl7StoreIamBindingConditionArgs) ToHl7StoreIamBindingConditionPtrOutput() Hl7StoreIamBindingConditionPtrOutput {
	return i.ToHl7StoreIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i Hl7StoreIamBindingConditionArgs) ToHl7StoreIamBindingConditionPtrOutputWithContext(ctx context.Context) Hl7StoreIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreIamBindingConditionOutput).ToHl7StoreIamBindingConditionPtrOutputWithContext(ctx)
}

// Hl7StoreIamBindingConditionPtrInput is an input type that accepts Hl7StoreIamBindingConditionArgs, Hl7StoreIamBindingConditionPtr and Hl7StoreIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `Hl7StoreIamBindingConditionPtrInput` via:
//
//          Hl7StoreIamBindingConditionArgs{...}
//
//  or:
//
//          nil
type Hl7StoreIamBindingConditionPtrInput interface {
	pulumi.Input

	ToHl7StoreIamBindingConditionPtrOutput() Hl7StoreIamBindingConditionPtrOutput
	ToHl7StoreIamBindingConditionPtrOutputWithContext(context.Context) Hl7StoreIamBindingConditionPtrOutput
}

type hl7StoreIamBindingConditionPtrType Hl7StoreIamBindingConditionArgs

func Hl7StoreIamBindingConditionPtr(v *Hl7StoreIamBindingConditionArgs) Hl7StoreIamBindingConditionPtrInput {
	return (*hl7StoreIamBindingConditionPtrType)(v)
}

func (*hl7StoreIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hl7StoreIamBindingCondition)(nil)).Elem()
}

func (i *hl7StoreIamBindingConditionPtrType) ToHl7StoreIamBindingConditionPtrOutput() Hl7StoreIamBindingConditionPtrOutput {
	return i.ToHl7StoreIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *hl7StoreIamBindingConditionPtrType) ToHl7StoreIamBindingConditionPtrOutputWithContext(ctx context.Context) Hl7StoreIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreIamBindingConditionPtrOutput)
}

type Hl7StoreIamBindingConditionOutput struct{ *pulumi.OutputState }

func (Hl7StoreIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7StoreIamBindingCondition)(nil)).Elem()
}

func (o Hl7StoreIamBindingConditionOutput) ToHl7StoreIamBindingConditionOutput() Hl7StoreIamBindingConditionOutput {
	return o
}

func (o Hl7StoreIamBindingConditionOutput) ToHl7StoreIamBindingConditionOutputWithContext(ctx context.Context) Hl7StoreIamBindingConditionOutput {
	return o
}

func (o Hl7StoreIamBindingConditionOutput) ToHl7StoreIamBindingConditionPtrOutput() Hl7StoreIamBindingConditionPtrOutput {
	return o.ToHl7StoreIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o Hl7StoreIamBindingConditionOutput) ToHl7StoreIamBindingConditionPtrOutputWithContext(ctx context.Context) Hl7StoreIamBindingConditionPtrOutput {
	return o.ApplyT(func(v Hl7StoreIamBindingCondition) *Hl7StoreIamBindingCondition {
		return &v
	}).(Hl7StoreIamBindingConditionPtrOutput)
}
func (o Hl7StoreIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hl7StoreIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o Hl7StoreIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v Hl7StoreIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o Hl7StoreIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v Hl7StoreIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type Hl7StoreIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (Hl7StoreIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hl7StoreIamBindingCondition)(nil)).Elem()
}

func (o Hl7StoreIamBindingConditionPtrOutput) ToHl7StoreIamBindingConditionPtrOutput() Hl7StoreIamBindingConditionPtrOutput {
	return o
}

func (o Hl7StoreIamBindingConditionPtrOutput) ToHl7StoreIamBindingConditionPtrOutputWithContext(ctx context.Context) Hl7StoreIamBindingConditionPtrOutput {
	return o
}

func (o Hl7StoreIamBindingConditionPtrOutput) Elem() Hl7StoreIamBindingConditionOutput {
	return o.ApplyT(func(v *Hl7StoreIamBindingCondition) Hl7StoreIamBindingCondition { return *v }).(Hl7StoreIamBindingConditionOutput)
}

func (o Hl7StoreIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hl7StoreIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o Hl7StoreIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hl7StoreIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o Hl7StoreIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hl7StoreIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type Hl7StoreIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// Hl7StoreIamMemberConditionInput is an input type that accepts Hl7StoreIamMemberConditionArgs and Hl7StoreIamMemberConditionOutput values.
// You can construct a concrete instance of `Hl7StoreIamMemberConditionInput` via:
//
//          Hl7StoreIamMemberConditionArgs{...}
type Hl7StoreIamMemberConditionInput interface {
	pulumi.Input

	ToHl7StoreIamMemberConditionOutput() Hl7StoreIamMemberConditionOutput
	ToHl7StoreIamMemberConditionOutputWithContext(context.Context) Hl7StoreIamMemberConditionOutput
}

type Hl7StoreIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (Hl7StoreIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7StoreIamMemberCondition)(nil)).Elem()
}

func (i Hl7StoreIamMemberConditionArgs) ToHl7StoreIamMemberConditionOutput() Hl7StoreIamMemberConditionOutput {
	return i.ToHl7StoreIamMemberConditionOutputWithContext(context.Background())
}

func (i Hl7StoreIamMemberConditionArgs) ToHl7StoreIamMemberConditionOutputWithContext(ctx context.Context) Hl7StoreIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreIamMemberConditionOutput)
}

func (i Hl7StoreIamMemberConditionArgs) ToHl7StoreIamMemberConditionPtrOutput() Hl7StoreIamMemberConditionPtrOutput {
	return i.ToHl7StoreIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i Hl7StoreIamMemberConditionArgs) ToHl7StoreIamMemberConditionPtrOutputWithContext(ctx context.Context) Hl7StoreIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreIamMemberConditionOutput).ToHl7StoreIamMemberConditionPtrOutputWithContext(ctx)
}

// Hl7StoreIamMemberConditionPtrInput is an input type that accepts Hl7StoreIamMemberConditionArgs, Hl7StoreIamMemberConditionPtr and Hl7StoreIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `Hl7StoreIamMemberConditionPtrInput` via:
//
//          Hl7StoreIamMemberConditionArgs{...}
//
//  or:
//
//          nil
type Hl7StoreIamMemberConditionPtrInput interface {
	pulumi.Input

	ToHl7StoreIamMemberConditionPtrOutput() Hl7StoreIamMemberConditionPtrOutput
	ToHl7StoreIamMemberConditionPtrOutputWithContext(context.Context) Hl7StoreIamMemberConditionPtrOutput
}

type hl7StoreIamMemberConditionPtrType Hl7StoreIamMemberConditionArgs

func Hl7StoreIamMemberConditionPtr(v *Hl7StoreIamMemberConditionArgs) Hl7StoreIamMemberConditionPtrInput {
	return (*hl7StoreIamMemberConditionPtrType)(v)
}

func (*hl7StoreIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hl7StoreIamMemberCondition)(nil)).Elem()
}

func (i *hl7StoreIamMemberConditionPtrType) ToHl7StoreIamMemberConditionPtrOutput() Hl7StoreIamMemberConditionPtrOutput {
	return i.ToHl7StoreIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *hl7StoreIamMemberConditionPtrType) ToHl7StoreIamMemberConditionPtrOutputWithContext(ctx context.Context) Hl7StoreIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreIamMemberConditionPtrOutput)
}

type Hl7StoreIamMemberConditionOutput struct{ *pulumi.OutputState }

func (Hl7StoreIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7StoreIamMemberCondition)(nil)).Elem()
}

func (o Hl7StoreIamMemberConditionOutput) ToHl7StoreIamMemberConditionOutput() Hl7StoreIamMemberConditionOutput {
	return o
}

func (o Hl7StoreIamMemberConditionOutput) ToHl7StoreIamMemberConditionOutputWithContext(ctx context.Context) Hl7StoreIamMemberConditionOutput {
	return o
}

func (o Hl7StoreIamMemberConditionOutput) ToHl7StoreIamMemberConditionPtrOutput() Hl7StoreIamMemberConditionPtrOutput {
	return o.ToHl7StoreIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o Hl7StoreIamMemberConditionOutput) ToHl7StoreIamMemberConditionPtrOutputWithContext(ctx context.Context) Hl7StoreIamMemberConditionPtrOutput {
	return o.ApplyT(func(v Hl7StoreIamMemberCondition) *Hl7StoreIamMemberCondition {
		return &v
	}).(Hl7StoreIamMemberConditionPtrOutput)
}
func (o Hl7StoreIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hl7StoreIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o Hl7StoreIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v Hl7StoreIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o Hl7StoreIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v Hl7StoreIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type Hl7StoreIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (Hl7StoreIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hl7StoreIamMemberCondition)(nil)).Elem()
}

func (o Hl7StoreIamMemberConditionPtrOutput) ToHl7StoreIamMemberConditionPtrOutput() Hl7StoreIamMemberConditionPtrOutput {
	return o
}

func (o Hl7StoreIamMemberConditionPtrOutput) ToHl7StoreIamMemberConditionPtrOutputWithContext(ctx context.Context) Hl7StoreIamMemberConditionPtrOutput {
	return o
}

func (o Hl7StoreIamMemberConditionPtrOutput) Elem() Hl7StoreIamMemberConditionOutput {
	return o.ApplyT(func(v *Hl7StoreIamMemberCondition) Hl7StoreIamMemberCondition { return *v }).(Hl7StoreIamMemberConditionOutput)
}

func (o Hl7StoreIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hl7StoreIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o Hl7StoreIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hl7StoreIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o Hl7StoreIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hl7StoreIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type Hl7StoreNotificationConfig struct {
	// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
	// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
	// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
	// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
	// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
	// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
	PubsubTopic string `pulumi:"pubsubTopic"`
}

// Hl7StoreNotificationConfigInput is an input type that accepts Hl7StoreNotificationConfigArgs and Hl7StoreNotificationConfigOutput values.
// You can construct a concrete instance of `Hl7StoreNotificationConfigInput` via:
//
//          Hl7StoreNotificationConfigArgs{...}
type Hl7StoreNotificationConfigInput interface {
	pulumi.Input

	ToHl7StoreNotificationConfigOutput() Hl7StoreNotificationConfigOutput
	ToHl7StoreNotificationConfigOutputWithContext(context.Context) Hl7StoreNotificationConfigOutput
}

type Hl7StoreNotificationConfigArgs struct {
	// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
	// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
	// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
	// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
	// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
	// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
	PubsubTopic pulumi.StringInput `pulumi:"pubsubTopic"`
}

func (Hl7StoreNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7StoreNotificationConfig)(nil)).Elem()
}

func (i Hl7StoreNotificationConfigArgs) ToHl7StoreNotificationConfigOutput() Hl7StoreNotificationConfigOutput {
	return i.ToHl7StoreNotificationConfigOutputWithContext(context.Background())
}

func (i Hl7StoreNotificationConfigArgs) ToHl7StoreNotificationConfigOutputWithContext(ctx context.Context) Hl7StoreNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreNotificationConfigOutput)
}

func (i Hl7StoreNotificationConfigArgs) ToHl7StoreNotificationConfigPtrOutput() Hl7StoreNotificationConfigPtrOutput {
	return i.ToHl7StoreNotificationConfigPtrOutputWithContext(context.Background())
}

func (i Hl7StoreNotificationConfigArgs) ToHl7StoreNotificationConfigPtrOutputWithContext(ctx context.Context) Hl7StoreNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreNotificationConfigOutput).ToHl7StoreNotificationConfigPtrOutputWithContext(ctx)
}

// Hl7StoreNotificationConfigPtrInput is an input type that accepts Hl7StoreNotificationConfigArgs, Hl7StoreNotificationConfigPtr and Hl7StoreNotificationConfigPtrOutput values.
// You can construct a concrete instance of `Hl7StoreNotificationConfigPtrInput` via:
//
//          Hl7StoreNotificationConfigArgs{...}
//
//  or:
//
//          nil
type Hl7StoreNotificationConfigPtrInput interface {
	pulumi.Input

	ToHl7StoreNotificationConfigPtrOutput() Hl7StoreNotificationConfigPtrOutput
	ToHl7StoreNotificationConfigPtrOutputWithContext(context.Context) Hl7StoreNotificationConfigPtrOutput
}

type hl7StoreNotificationConfigPtrType Hl7StoreNotificationConfigArgs

func Hl7StoreNotificationConfigPtr(v *Hl7StoreNotificationConfigArgs) Hl7StoreNotificationConfigPtrInput {
	return (*hl7StoreNotificationConfigPtrType)(v)
}

func (*hl7StoreNotificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hl7StoreNotificationConfig)(nil)).Elem()
}

func (i *hl7StoreNotificationConfigPtrType) ToHl7StoreNotificationConfigPtrOutput() Hl7StoreNotificationConfigPtrOutput {
	return i.ToHl7StoreNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *hl7StoreNotificationConfigPtrType) ToHl7StoreNotificationConfigPtrOutputWithContext(ctx context.Context) Hl7StoreNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreNotificationConfigPtrOutput)
}

type Hl7StoreNotificationConfigOutput struct{ *pulumi.OutputState }

func (Hl7StoreNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7StoreNotificationConfig)(nil)).Elem()
}

func (o Hl7StoreNotificationConfigOutput) ToHl7StoreNotificationConfigOutput() Hl7StoreNotificationConfigOutput {
	return o
}

func (o Hl7StoreNotificationConfigOutput) ToHl7StoreNotificationConfigOutputWithContext(ctx context.Context) Hl7StoreNotificationConfigOutput {
	return o
}

func (o Hl7StoreNotificationConfigOutput) ToHl7StoreNotificationConfigPtrOutput() Hl7StoreNotificationConfigPtrOutput {
	return o.ToHl7StoreNotificationConfigPtrOutputWithContext(context.Background())
}

func (o Hl7StoreNotificationConfigOutput) ToHl7StoreNotificationConfigPtrOutputWithContext(ctx context.Context) Hl7StoreNotificationConfigPtrOutput {
	return o.ApplyT(func(v Hl7StoreNotificationConfig) *Hl7StoreNotificationConfig {
		return &v
	}).(Hl7StoreNotificationConfigPtrOutput)
}

// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
func (o Hl7StoreNotificationConfigOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v Hl7StoreNotificationConfig) string { return v.PubsubTopic }).(pulumi.StringOutput)
}

type Hl7StoreNotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (Hl7StoreNotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hl7StoreNotificationConfig)(nil)).Elem()
}

func (o Hl7StoreNotificationConfigPtrOutput) ToHl7StoreNotificationConfigPtrOutput() Hl7StoreNotificationConfigPtrOutput {
	return o
}

func (o Hl7StoreNotificationConfigPtrOutput) ToHl7StoreNotificationConfigPtrOutputWithContext(ctx context.Context) Hl7StoreNotificationConfigPtrOutput {
	return o
}

func (o Hl7StoreNotificationConfigPtrOutput) Elem() Hl7StoreNotificationConfigOutput {
	return o.ApplyT(func(v *Hl7StoreNotificationConfig) Hl7StoreNotificationConfig { return *v }).(Hl7StoreNotificationConfigOutput)
}

// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
func (o Hl7StoreNotificationConfigPtrOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hl7StoreNotificationConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PubsubTopic
	}).(pulumi.StringPtrOutput)
}

type Hl7StoreNotificationConfigs struct {
	// Restricts notifications sent for messages matching a filter. If this is empty, all messages
	// are matched. Syntax: https://cloud.google.com/appengine/docs/standard/python/search/query_strings
	// Fields/functions available for filtering are:
	// * messageType, from the MSH-9.1 field. For example, NOT messageType = "ADT".
	// * sendDate or sendDate, the YYYY-MM-DD date the message was sent in the dataset's timeZone, from the MSH-7 segment. For example, sendDate < "2017-01-02".
	// * sendTime, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, sendTime < "2017-01-02T00:00:00-05:00".
	// * sendFacility, the care center that the message came from, from the MSH-4 segment. For example, sendFacility = "ABC".
	// * PatientId(value, type), which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, PatientId("123456", "MRN").
	// * labels.x, a string value of the label with key x as set using the Message.labels map. For example, labels."priority"="high". The operator :* can be used to assert the existence of a label. For example, labels."priority":*.
	Filter *string `pulumi:"filter"`
	// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
	// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
	// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
	// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
	// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
	// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
	PubsubTopic string `pulumi:"pubsubTopic"`
}

// Hl7StoreNotificationConfigsInput is an input type that accepts Hl7StoreNotificationConfigsArgs and Hl7StoreNotificationConfigsOutput values.
// You can construct a concrete instance of `Hl7StoreNotificationConfigsInput` via:
//
//          Hl7StoreNotificationConfigsArgs{...}
type Hl7StoreNotificationConfigsInput interface {
	pulumi.Input

	ToHl7StoreNotificationConfigsOutput() Hl7StoreNotificationConfigsOutput
	ToHl7StoreNotificationConfigsOutputWithContext(context.Context) Hl7StoreNotificationConfigsOutput
}

type Hl7StoreNotificationConfigsArgs struct {
	// Restricts notifications sent for messages matching a filter. If this is empty, all messages
	// are matched. Syntax: https://cloud.google.com/appengine/docs/standard/python/search/query_strings
	// Fields/functions available for filtering are:
	// * messageType, from the MSH-9.1 field. For example, NOT messageType = "ADT".
	// * sendDate or sendDate, the YYYY-MM-DD date the message was sent in the dataset's timeZone, from the MSH-7 segment. For example, sendDate < "2017-01-02".
	// * sendTime, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, sendTime < "2017-01-02T00:00:00-05:00".
	// * sendFacility, the care center that the message came from, from the MSH-4 segment. For example, sendFacility = "ABC".
	// * PatientId(value, type), which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, PatientId("123456", "MRN").
	// * labels.x, a string value of the label with key x as set using the Message.labels map. For example, labels."priority"="high". The operator :* can be used to assert the existence of a label. For example, labels."priority":*.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
	// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
	// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
	// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
	// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
	// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
	PubsubTopic pulumi.StringInput `pulumi:"pubsubTopic"`
}

func (Hl7StoreNotificationConfigsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7StoreNotificationConfigs)(nil)).Elem()
}

func (i Hl7StoreNotificationConfigsArgs) ToHl7StoreNotificationConfigsOutput() Hl7StoreNotificationConfigsOutput {
	return i.ToHl7StoreNotificationConfigsOutputWithContext(context.Background())
}

func (i Hl7StoreNotificationConfigsArgs) ToHl7StoreNotificationConfigsOutputWithContext(ctx context.Context) Hl7StoreNotificationConfigsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreNotificationConfigsOutput)
}

// Hl7StoreNotificationConfigsArrayInput is an input type that accepts Hl7StoreNotificationConfigsArray and Hl7StoreNotificationConfigsArrayOutput values.
// You can construct a concrete instance of `Hl7StoreNotificationConfigsArrayInput` via:
//
//          Hl7StoreNotificationConfigsArray{ Hl7StoreNotificationConfigsArgs{...} }
type Hl7StoreNotificationConfigsArrayInput interface {
	pulumi.Input

	ToHl7StoreNotificationConfigsArrayOutput() Hl7StoreNotificationConfigsArrayOutput
	ToHl7StoreNotificationConfigsArrayOutputWithContext(context.Context) Hl7StoreNotificationConfigsArrayOutput
}

type Hl7StoreNotificationConfigsArray []Hl7StoreNotificationConfigsInput

func (Hl7StoreNotificationConfigsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hl7StoreNotificationConfigs)(nil)).Elem()
}

func (i Hl7StoreNotificationConfigsArray) ToHl7StoreNotificationConfigsArrayOutput() Hl7StoreNotificationConfigsArrayOutput {
	return i.ToHl7StoreNotificationConfigsArrayOutputWithContext(context.Background())
}

func (i Hl7StoreNotificationConfigsArray) ToHl7StoreNotificationConfigsArrayOutputWithContext(ctx context.Context) Hl7StoreNotificationConfigsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreNotificationConfigsArrayOutput)
}

type Hl7StoreNotificationConfigsOutput struct{ *pulumi.OutputState }

func (Hl7StoreNotificationConfigsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7StoreNotificationConfigs)(nil)).Elem()
}

func (o Hl7StoreNotificationConfigsOutput) ToHl7StoreNotificationConfigsOutput() Hl7StoreNotificationConfigsOutput {
	return o
}

func (o Hl7StoreNotificationConfigsOutput) ToHl7StoreNotificationConfigsOutputWithContext(ctx context.Context) Hl7StoreNotificationConfigsOutput {
	return o
}

// Restricts notifications sent for messages matching a filter. If this is empty, all messages
// are matched. Syntax: https://cloud.google.com/appengine/docs/standard/python/search/query_strings
// Fields/functions available for filtering are:
// * messageType, from the MSH-9.1 field. For example, NOT messageType = "ADT".
// * sendDate or sendDate, the YYYY-MM-DD date the message was sent in the dataset's timeZone, from the MSH-7 segment. For example, sendDate < "2017-01-02".
// * sendTime, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, sendTime < "2017-01-02T00:00:00-05:00".
// * sendFacility, the care center that the message came from, from the MSH-4 segment. For example, sendFacility = "ABC".
// * PatientId(value, type), which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, PatientId("123456", "MRN").
// * labels.x, a string value of the label with key x as set using the Message.labels map. For example, labels."priority"="high". The operator :* can be used to assert the existence of a label. For example, labels."priority":*.
func (o Hl7StoreNotificationConfigsOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hl7StoreNotificationConfigs) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
func (o Hl7StoreNotificationConfigsOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v Hl7StoreNotificationConfigs) string { return v.PubsubTopic }).(pulumi.StringOutput)
}

type Hl7StoreNotificationConfigsArrayOutput struct{ *pulumi.OutputState }

func (Hl7StoreNotificationConfigsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hl7StoreNotificationConfigs)(nil)).Elem()
}

func (o Hl7StoreNotificationConfigsArrayOutput) ToHl7StoreNotificationConfigsArrayOutput() Hl7StoreNotificationConfigsArrayOutput {
	return o
}

func (o Hl7StoreNotificationConfigsArrayOutput) ToHl7StoreNotificationConfigsArrayOutputWithContext(ctx context.Context) Hl7StoreNotificationConfigsArrayOutput {
	return o
}

func (o Hl7StoreNotificationConfigsArrayOutput) Index(i pulumi.IntInput) Hl7StoreNotificationConfigsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hl7StoreNotificationConfigs {
		return vs[0].([]Hl7StoreNotificationConfigs)[vs[1].(int)]
	}).(Hl7StoreNotificationConfigsOutput)
}

type Hl7StoreParserConfig struct {
	// Determines whether messages with no header are allowed.
	AllowNullHeader *bool `pulumi:"allowNullHeader"`
	// JSON encoded string for schemas used to parse messages in this
	// store if schematized parsing is desired.
	Schema *string `pulumi:"schema"`
	// Byte(s) to be used as the segment terminator. If this is unset, '\r' will be used as segment terminator.
	// A base64-encoded string.
	SegmentTerminator *string `pulumi:"segmentTerminator"`
	// The version of the unschematized parser to be used when a custom `schema` is not set.
	// Default value is `V1`.
	// Possible values are `V1` and `V2`.
	Version *string `pulumi:"version"`
}

// Hl7StoreParserConfigInput is an input type that accepts Hl7StoreParserConfigArgs and Hl7StoreParserConfigOutput values.
// You can construct a concrete instance of `Hl7StoreParserConfigInput` via:
//
//          Hl7StoreParserConfigArgs{...}
type Hl7StoreParserConfigInput interface {
	pulumi.Input

	ToHl7StoreParserConfigOutput() Hl7StoreParserConfigOutput
	ToHl7StoreParserConfigOutputWithContext(context.Context) Hl7StoreParserConfigOutput
}

type Hl7StoreParserConfigArgs struct {
	// Determines whether messages with no header are allowed.
	AllowNullHeader pulumi.BoolPtrInput `pulumi:"allowNullHeader"`
	// JSON encoded string for schemas used to parse messages in this
	// store if schematized parsing is desired.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Byte(s) to be used as the segment terminator. If this is unset, '\r' will be used as segment terminator.
	// A base64-encoded string.
	SegmentTerminator pulumi.StringPtrInput `pulumi:"segmentTerminator"`
	// The version of the unschematized parser to be used when a custom `schema` is not set.
	// Default value is `V1`.
	// Possible values are `V1` and `V2`.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (Hl7StoreParserConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7StoreParserConfig)(nil)).Elem()
}

func (i Hl7StoreParserConfigArgs) ToHl7StoreParserConfigOutput() Hl7StoreParserConfigOutput {
	return i.ToHl7StoreParserConfigOutputWithContext(context.Background())
}

func (i Hl7StoreParserConfigArgs) ToHl7StoreParserConfigOutputWithContext(ctx context.Context) Hl7StoreParserConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreParserConfigOutput)
}

func (i Hl7StoreParserConfigArgs) ToHl7StoreParserConfigPtrOutput() Hl7StoreParserConfigPtrOutput {
	return i.ToHl7StoreParserConfigPtrOutputWithContext(context.Background())
}

func (i Hl7StoreParserConfigArgs) ToHl7StoreParserConfigPtrOutputWithContext(ctx context.Context) Hl7StoreParserConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreParserConfigOutput).ToHl7StoreParserConfigPtrOutputWithContext(ctx)
}

// Hl7StoreParserConfigPtrInput is an input type that accepts Hl7StoreParserConfigArgs, Hl7StoreParserConfigPtr and Hl7StoreParserConfigPtrOutput values.
// You can construct a concrete instance of `Hl7StoreParserConfigPtrInput` via:
//
//          Hl7StoreParserConfigArgs{...}
//
//  or:
//
//          nil
type Hl7StoreParserConfigPtrInput interface {
	pulumi.Input

	ToHl7StoreParserConfigPtrOutput() Hl7StoreParserConfigPtrOutput
	ToHl7StoreParserConfigPtrOutputWithContext(context.Context) Hl7StoreParserConfigPtrOutput
}

type hl7StoreParserConfigPtrType Hl7StoreParserConfigArgs

func Hl7StoreParserConfigPtr(v *Hl7StoreParserConfigArgs) Hl7StoreParserConfigPtrInput {
	return (*hl7StoreParserConfigPtrType)(v)
}

func (*hl7StoreParserConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hl7StoreParserConfig)(nil)).Elem()
}

func (i *hl7StoreParserConfigPtrType) ToHl7StoreParserConfigPtrOutput() Hl7StoreParserConfigPtrOutput {
	return i.ToHl7StoreParserConfigPtrOutputWithContext(context.Background())
}

func (i *hl7StoreParserConfigPtrType) ToHl7StoreParserConfigPtrOutputWithContext(ctx context.Context) Hl7StoreParserConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7StoreParserConfigPtrOutput)
}

type Hl7StoreParserConfigOutput struct{ *pulumi.OutputState }

func (Hl7StoreParserConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7StoreParserConfig)(nil)).Elem()
}

func (o Hl7StoreParserConfigOutput) ToHl7StoreParserConfigOutput() Hl7StoreParserConfigOutput {
	return o
}

func (o Hl7StoreParserConfigOutput) ToHl7StoreParserConfigOutputWithContext(ctx context.Context) Hl7StoreParserConfigOutput {
	return o
}

func (o Hl7StoreParserConfigOutput) ToHl7StoreParserConfigPtrOutput() Hl7StoreParserConfigPtrOutput {
	return o.ToHl7StoreParserConfigPtrOutputWithContext(context.Background())
}

func (o Hl7StoreParserConfigOutput) ToHl7StoreParserConfigPtrOutputWithContext(ctx context.Context) Hl7StoreParserConfigPtrOutput {
	return o.ApplyT(func(v Hl7StoreParserConfig) *Hl7StoreParserConfig {
		return &v
	}).(Hl7StoreParserConfigPtrOutput)
}

// Determines whether messages with no header are allowed.
func (o Hl7StoreParserConfigOutput) AllowNullHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Hl7StoreParserConfig) *bool { return v.AllowNullHeader }).(pulumi.BoolPtrOutput)
}

// JSON encoded string for schemas used to parse messages in this
// store if schematized parsing is desired.
func (o Hl7StoreParserConfigOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hl7StoreParserConfig) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Byte(s) to be used as the segment terminator. If this is unset, '\r' will be used as segment terminator.
// A base64-encoded string.
func (o Hl7StoreParserConfigOutput) SegmentTerminator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hl7StoreParserConfig) *string { return v.SegmentTerminator }).(pulumi.StringPtrOutput)
}

// The version of the unschematized parser to be used when a custom `schema` is not set.
// Default value is `V1`.
// Possible values are `V1` and `V2`.
func (o Hl7StoreParserConfigOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hl7StoreParserConfig) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type Hl7StoreParserConfigPtrOutput struct{ *pulumi.OutputState }

func (Hl7StoreParserConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hl7StoreParserConfig)(nil)).Elem()
}

func (o Hl7StoreParserConfigPtrOutput) ToHl7StoreParserConfigPtrOutput() Hl7StoreParserConfigPtrOutput {
	return o
}

func (o Hl7StoreParserConfigPtrOutput) ToHl7StoreParserConfigPtrOutputWithContext(ctx context.Context) Hl7StoreParserConfigPtrOutput {
	return o
}

func (o Hl7StoreParserConfigPtrOutput) Elem() Hl7StoreParserConfigOutput {
	return o.ApplyT(func(v *Hl7StoreParserConfig) Hl7StoreParserConfig { return *v }).(Hl7StoreParserConfigOutput)
}

// Determines whether messages with no header are allowed.
func (o Hl7StoreParserConfigPtrOutput) AllowNullHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hl7StoreParserConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AllowNullHeader
	}).(pulumi.BoolPtrOutput)
}

// JSON encoded string for schemas used to parse messages in this
// store if schematized parsing is desired.
func (o Hl7StoreParserConfigPtrOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hl7StoreParserConfig) *string {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(pulumi.StringPtrOutput)
}

// Byte(s) to be used as the segment terminator. If this is unset, '\r' will be used as segment terminator.
// A base64-encoded string.
func (o Hl7StoreParserConfigPtrOutput) SegmentTerminator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hl7StoreParserConfig) *string {
		if v == nil {
			return nil
		}
		return v.SegmentTerminator
	}).(pulumi.StringPtrOutput)
}

// The version of the unschematized parser to be used when a custom `schema` is not set.
// Default value is `V1`.
// Possible values are `V1` and `V2`.
func (o Hl7StoreParserConfigPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hl7StoreParserConfig) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ConsentStoreIamBindingConditionOutput{})
	pulumi.RegisterOutputType(ConsentStoreIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(ConsentStoreIamMemberConditionOutput{})
	pulumi.RegisterOutputType(ConsentStoreIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(DatasetIamBindingConditionOutput{})
	pulumi.RegisterOutputType(DatasetIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(DatasetIamMemberConditionOutput{})
	pulumi.RegisterOutputType(DatasetIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(DicomStoreIamBindingConditionOutput{})
	pulumi.RegisterOutputType(DicomStoreIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(DicomStoreIamMemberConditionOutput{})
	pulumi.RegisterOutputType(DicomStoreIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(DicomStoreNotificationConfigOutput{})
	pulumi.RegisterOutputType(DicomStoreNotificationConfigPtrOutput{})
	pulumi.RegisterOutputType(FhirStoreIamBindingConditionOutput{})
	pulumi.RegisterOutputType(FhirStoreIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(FhirStoreIamMemberConditionOutput{})
	pulumi.RegisterOutputType(FhirStoreIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(FhirStoreNotificationConfigOutput{})
	pulumi.RegisterOutputType(FhirStoreNotificationConfigPtrOutput{})
	pulumi.RegisterOutputType(FhirStoreStreamConfigOutput{})
	pulumi.RegisterOutputType(FhirStoreStreamConfigArrayOutput{})
	pulumi.RegisterOutputType(FhirStoreStreamConfigBigqueryDestinationOutput{})
	pulumi.RegisterOutputType(FhirStoreStreamConfigBigqueryDestinationSchemaConfigOutput{})
	pulumi.RegisterOutputType(Hl7StoreIamBindingConditionOutput{})
	pulumi.RegisterOutputType(Hl7StoreIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(Hl7StoreIamMemberConditionOutput{})
	pulumi.RegisterOutputType(Hl7StoreIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(Hl7StoreNotificationConfigOutput{})
	pulumi.RegisterOutputType(Hl7StoreNotificationConfigPtrOutput{})
	pulumi.RegisterOutputType(Hl7StoreNotificationConfigsOutput{})
	pulumi.RegisterOutputType(Hl7StoreNotificationConfigsArrayOutput{})
	pulumi.RegisterOutputType(Hl7StoreParserConfigOutput{})
	pulumi.RegisterOutputType(Hl7StoreParserConfigPtrOutput{})
}
