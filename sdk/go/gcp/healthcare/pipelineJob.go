// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PipelineJobs are Long Running Operations on Healthcare API to Map or Reconcile
// incoming data into FHIR format
//
// To get more information about PipelineJob, see:
//
// * [API documentation](https://cloud.google.com/healthcare-api/healthcare-data-engine/docs/reference/rest/v1/projects.locations.datasets.pipelineJobs)
// * How-to Guides
//   - [Creating a PipelineJob](https://cloud.google.com/healthcare-api/private/healthcare-data-engine/docs/reference/rest/v1/projects.locations.datasets.pipelineJobs#PipelineJob)
//
// ## Example Usage
//
// ### Healthcare Pipeline Job Reconciliation
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/healthcare"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			dataset, err := healthcare.NewDataset(ctx, "dataset", &healthcare.DatasetArgs{
//				Name:     pulumi.String("example_dataset"),
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			fhirstore, err := healthcare.NewFhirStore(ctx, "fhirstore", &healthcare.FhirStoreArgs{
//				Name:                        pulumi.String("fhir_store"),
//				Dataset:                     dataset.ID(),
//				Version:                     pulumi.String("R4"),
//				EnableUpdateCreate:          pulumi.Bool(true),
//				DisableReferentialIntegrity: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:                     pulumi.String("example_bucket_name"),
//				Location:                 pulumi.String("us-central1"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			mergeFile, err := storage.NewBucketObject(ctx, "merge_file", &storage.BucketObjectArgs{
//				Name:    pulumi.String("merge.wstl"),
//				Content: pulumi.String(" "),
//				Bucket:  bucket.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = healthcare.NewPipelineJob(ctx, "example-pipeline", &healthcare.PipelineJobArgs{
//				Name:           pulumi.String("example_pipeline_job"),
//				Location:       pulumi.String("us-central1"),
//				Dataset:        dataset.ID(),
//				DisableLineage: pulumi.Bool(true),
//				ReconciliationPipelineJob: &healthcare.PipelineJobReconciliationPipelineJobArgs{
//					MergeConfig: &healthcare.PipelineJobReconciliationPipelineJobMergeConfigArgs{
//						Description: pulumi.String("sample description for reconciliation rules"),
//						WhistleConfigSource: &healthcare.PipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceArgs{
//							Uri: pulumi.All(bucket.Name, mergeFile.Name).ApplyT(func(_args []interface{}) (string, error) {
//								bucketName := _args[0].(string)
//								mergeFileName := _args[1].(string)
//								return fmt.Sprintf("gs://%v/%v", bucketName, mergeFileName), nil
//							}).(pulumi.StringOutput),
//							ImportUriPrefix: bucket.Name.ApplyT(func(name string) (string, error) {
//								return fmt.Sprintf("gs://%v", name), nil
//							}).(pulumi.StringOutput),
//						},
//					},
//					MatchingUriPrefix: bucket.Name.ApplyT(func(name string) (string, error) {
//						return fmt.Sprintf("gs://%v", name), nil
//					}).(pulumi.StringOutput),
//					FhirStoreDestination: pulumi.All(dataset.ID(), fhirstore.Name).ApplyT(func(_args []interface{}) (string, error) {
//						id := _args[0].(string)
//						name := _args[1].(string)
//						return fmt.Sprintf("%v/fhirStores/%v", id, name), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewBucketIAMMember(ctx, "hsa", &storage.BucketIAMMemberArgs{
//				Bucket: bucket.Name,
//				Role:   pulumi.String("roles/storage.objectUser"),
//				Member: pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-healthcare.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Healthcare Pipeline Job Backfill
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/healthcare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			dataset, err := healthcare.NewDataset(ctx, "dataset", &healthcare.DatasetArgs{
//				Name:     pulumi.String("example_dataset"),
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = healthcare.NewPipelineJob(ctx, "example-pipeline", &healthcare.PipelineJobArgs{
//				Name:     pulumi.String("example_backfill_pipeline"),
//				Location: pulumi.String("us-central1"),
//				Dataset:  dataset.ID(),
//				BackfillPipelineJob: &healthcare.PipelineJobBackfillPipelineJobArgs{
//					MappingPipelineJob: dataset.ID().ApplyT(func(id string) (string, error) {
//						return fmt.Sprintf("%v/pipelineJobs/example_mapping_pipeline_job", id), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Healthcare Pipeline Job Whistle Mapping
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/healthcare"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			dataset, err := healthcare.NewDataset(ctx, "dataset", &healthcare.DatasetArgs{
//				Name:     pulumi.String("example_dataset"),
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			sourceFhirstore, err := healthcare.NewFhirStore(ctx, "source_fhirstore", &healthcare.FhirStoreArgs{
//				Name:                        pulumi.String("source_fhir_store"),
//				Dataset:                     dataset.ID(),
//				Version:                     pulumi.String("R4"),
//				EnableUpdateCreate:          pulumi.Bool(true),
//				DisableReferentialIntegrity: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			destFhirstore, err := healthcare.NewFhirStore(ctx, "dest_fhirstore", &healthcare.FhirStoreArgs{
//				Name:                        pulumi.String("dest_fhir_store"),
//				Dataset:                     dataset.ID(),
//				Version:                     pulumi.String("R4"),
//				EnableUpdateCreate:          pulumi.Bool(true),
//				DisableReferentialIntegrity: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:                     pulumi.String("example_bucket_name"),
//				Location:                 pulumi.String("us-central1"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			mappingFile, err := storage.NewBucketObject(ctx, "mapping_file", &storage.BucketObjectArgs{
//				Name:    pulumi.String("mapping.wstl"),
//				Content: pulumi.String(" "),
//				Bucket:  bucket.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = healthcare.NewPipelineJob(ctx, "example-mapping-pipeline", &healthcare.PipelineJobArgs{
//				Name:           pulumi.String("example_mapping_pipeline_job"),
//				Location:       pulumi.String("us-central1"),
//				Dataset:        dataset.ID(),
//				DisableLineage: pulumi.Bool(true),
//				Labels: pulumi.StringMap{
//					"example_label_key": pulumi.String("example_label_value"),
//				},
//				MappingPipelineJob: &healthcare.PipelineJobMappingPipelineJobArgs{
//					MappingConfig: &healthcare.PipelineJobMappingPipelineJobMappingConfigArgs{
//						WhistleConfigSource: &healthcare.PipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceArgs{
//							Uri: pulumi.All(bucket.Name, mappingFile.Name).ApplyT(func(_args []interface{}) (string, error) {
//								bucketName := _args[0].(string)
//								mappingFileName := _args[1].(string)
//								return fmt.Sprintf("gs://%v/%v", bucketName, mappingFileName), nil
//							}).(pulumi.StringOutput),
//							ImportUriPrefix: bucket.Name.ApplyT(func(name string) (string, error) {
//								return fmt.Sprintf("gs://%v", name), nil
//							}).(pulumi.StringOutput),
//						},
//						Description: pulumi.String("example description for mapping configuration"),
//					},
//					FhirStreamingSource: &healthcare.PipelineJobMappingPipelineJobFhirStreamingSourceArgs{
//						FhirStore: pulumi.All(dataset.ID(), sourceFhirstore.Name).ApplyT(func(_args []interface{}) (string, error) {
//							id := _args[0].(string)
//							name := _args[1].(string)
//							return fmt.Sprintf("%v/fhirStores/%v", id, name), nil
//						}).(pulumi.StringOutput),
//						Description: pulumi.String("example description for streaming fhirstore"),
//					},
//					FhirStoreDestination: pulumi.All(dataset.ID(), destFhirstore.Name).ApplyT(func(_args []interface{}) (string, error) {
//						id := _args[0].(string)
//						name := _args[1].(string)
//						return fmt.Sprintf("%v/fhirStores/%v", id, name), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewBucketIAMMember(ctx, "hsa", &storage.BucketIAMMemberArgs{
//				Bucket: bucket.Name,
//				Role:   pulumi.String("roles/storage.objectUser"),
//				Member: pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-healthcare.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Healthcare Pipeline Job Mapping Recon Dest
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/healthcare"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			dataset, err := healthcare.NewDataset(ctx, "dataset", &healthcare.DatasetArgs{
//				Name:     pulumi.String("example_dataset"),
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			destFhirstore, err := healthcare.NewFhirStore(ctx, "dest_fhirstore", &healthcare.FhirStoreArgs{
//				Name:                        pulumi.String("dest_fhir_store"),
//				Dataset:                     dataset.ID(),
//				Version:                     pulumi.String("R4"),
//				EnableUpdateCreate:          pulumi.Bool(true),
//				DisableReferentialIntegrity: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:                     pulumi.String("example_bucket_name"),
//				Location:                 pulumi.String("us-central1"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			mergeFile, err := storage.NewBucketObject(ctx, "merge_file", &storage.BucketObjectArgs{
//				Name:    pulumi.String("merge.wstl"),
//				Content: pulumi.String(" "),
//				Bucket:  bucket.Name,
//			})
//			if err != nil {
//				return err
//			}
//			recon, err := healthcare.NewPipelineJob(ctx, "recon", &healthcare.PipelineJobArgs{
//				Name:           pulumi.String("example_recon_pipeline_job"),
//				Location:       pulumi.String("us-central1"),
//				Dataset:        dataset.ID(),
//				DisableLineage: pulumi.Bool(true),
//				ReconciliationPipelineJob: &healthcare.PipelineJobReconciliationPipelineJobArgs{
//					MergeConfig: &healthcare.PipelineJobReconciliationPipelineJobMergeConfigArgs{
//						Description: pulumi.String("sample description for reconciliation rules"),
//						WhistleConfigSource: &healthcare.PipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceArgs{
//							Uri: pulumi.All(bucket.Name, mergeFile.Name).ApplyT(func(_args []interface{}) (string, error) {
//								bucketName := _args[0].(string)
//								mergeFileName := _args[1].(string)
//								return fmt.Sprintf("gs://%v/%v", bucketName, mergeFileName), nil
//							}).(pulumi.StringOutput),
//							ImportUriPrefix: bucket.Name.ApplyT(func(name string) (string, error) {
//								return fmt.Sprintf("gs://%v", name), nil
//							}).(pulumi.StringOutput),
//						},
//					},
//					MatchingUriPrefix: bucket.Name.ApplyT(func(name string) (string, error) {
//						return fmt.Sprintf("gs://%v", name), nil
//					}).(pulumi.StringOutput),
//					FhirStoreDestination: pulumi.All(dataset.ID(), destFhirstore.Name).ApplyT(func(_args []interface{}) (string, error) {
//						id := _args[0].(string)
//						name := _args[1].(string)
//						return fmt.Sprintf("%v/fhirStores/%v", id, name), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			sourceFhirstore, err := healthcare.NewFhirStore(ctx, "source_fhirstore", &healthcare.FhirStoreArgs{
//				Name:                        pulumi.String("source_fhir_store"),
//				Dataset:                     dataset.ID(),
//				Version:                     pulumi.String("R4"),
//				EnableUpdateCreate:          pulumi.Bool(true),
//				DisableReferentialIntegrity: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			mappingFile, err := storage.NewBucketObject(ctx, "mapping_file", &storage.BucketObjectArgs{
//				Name:    pulumi.String("mapping.wstl"),
//				Content: pulumi.String(" "),
//				Bucket:  bucket.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = healthcare.NewPipelineJob(ctx, "example-mapping-pipeline", &healthcare.PipelineJobArgs{
//				Name:           pulumi.String("example_mapping_pipeline_job"),
//				Location:       pulumi.String("us-central1"),
//				Dataset:        dataset.ID(),
//				DisableLineage: pulumi.Bool(true),
//				Labels: pulumi.StringMap{
//					"example_label_key": pulumi.String("example_label_value"),
//				},
//				MappingPipelineJob: &healthcare.PipelineJobMappingPipelineJobArgs{
//					MappingConfig: &healthcare.PipelineJobMappingPipelineJobMappingConfigArgs{
//						WhistleConfigSource: &healthcare.PipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceArgs{
//							Uri: pulumi.All(bucket.Name, mappingFile.Name).ApplyT(func(_args []interface{}) (string, error) {
//								bucketName := _args[0].(string)
//								mappingFileName := _args[1].(string)
//								return fmt.Sprintf("gs://%v/%v", bucketName, mappingFileName), nil
//							}).(pulumi.StringOutput),
//							ImportUriPrefix: bucket.Name.ApplyT(func(name string) (string, error) {
//								return fmt.Sprintf("gs://%v", name), nil
//							}).(pulumi.StringOutput),
//						},
//						Description: pulumi.String("example description for mapping configuration"),
//					},
//					FhirStreamingSource: &healthcare.PipelineJobMappingPipelineJobFhirStreamingSourceArgs{
//						FhirStore: pulumi.All(dataset.ID(), sourceFhirstore.Name).ApplyT(func(_args []interface{}) (string, error) {
//							id := _args[0].(string)
//							name := _args[1].(string)
//							return fmt.Sprintf("%v/fhirStores/%v", id, name), nil
//						}).(pulumi.StringOutput),
//						Description: pulumi.String("example description for streaming fhirstore"),
//					},
//					ReconciliationDestination: pulumi.Bool(true),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				recon,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewBucketIAMMember(ctx, "hsa", &storage.BucketIAMMemberArgs{
//				Bucket: bucket.Name,
//				Role:   pulumi.String("roles/storage.objectUser"),
//				Member: pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-healthcare.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PipelineJob can be imported using any of these accepted formats:
//
// * `{{dataset}}/pipelineJobs/{{name}}`
//
// * `{{dataset}}/pipelineJobs?pipelineJobId={{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, PipelineJob can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:healthcare/pipelineJob:PipelineJob default {{dataset}}/pipelineJobs/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:healthcare/pipelineJob:PipelineJob default {{dataset}}/pipelineJobs?pipelineJobId={{name}}
// ```
//
// ```sh
// $ pulumi import gcp:healthcare/pipelineJob:PipelineJob default {{name}}
// ```
type PipelineJob struct {
	pulumi.CustomResourceState

	// Specifies the backfill configuration.
	// Structure is documented below.
	BackfillPipelineJob PipelineJobBackfillPipelineJobPtrOutput `pulumi:"backfillPipelineJob"`
	// Healthcare Dataset under which the Pipeline Job is to run
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// If true, disables writing lineage for the pipeline.
	DisableLineage pulumi.BoolPtrOutput `pulumi:"disableLineage"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// User-supplied key-value pairs used to organize Pipeline Jobs.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
	// maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values are optional, must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
	// regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be associated with a given pipeline.
	// An object containing a list of "key": value pairs.
	// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Location where the Pipeline Job is to run
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies mapping configuration.
	// Structure is documented below.
	MappingPipelineJob PipelineJobMappingPipelineJobPtrOutput `pulumi:"mappingPipelineJob"`
	// Specifies the name of the pipeline job. This field is user-assigned.
	Name pulumi.StringOutput `pulumi:"name"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Specifies reconciliation configuration.
	// Structure is documented below.
	ReconciliationPipelineJob PipelineJobReconciliationPipelineJobPtrOutput `pulumi:"reconciliationPipelineJob"`
	// The fully qualified name of this dataset
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
}

// NewPipelineJob registers a new resource with the given unique name, arguments, and options.
func NewPipelineJob(ctx *pulumi.Context,
	name string, args *PipelineJobArgs, opts ...pulumi.ResourceOption) (*PipelineJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PipelineJob
	err := ctx.RegisterResource("gcp:healthcare/pipelineJob:PipelineJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipelineJob gets an existing PipelineJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipelineJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineJobState, opts ...pulumi.ResourceOption) (*PipelineJob, error) {
	var resource PipelineJob
	err := ctx.ReadResource("gcp:healthcare/pipelineJob:PipelineJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PipelineJob resources.
type pipelineJobState struct {
	// Specifies the backfill configuration.
	// Structure is documented below.
	BackfillPipelineJob *PipelineJobBackfillPipelineJob `pulumi:"backfillPipelineJob"`
	// Healthcare Dataset under which the Pipeline Job is to run
	Dataset *string `pulumi:"dataset"`
	// If true, disables writing lineage for the pipeline.
	DisableLineage *bool `pulumi:"disableLineage"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// User-supplied key-value pairs used to organize Pipeline Jobs.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
	// maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values are optional, must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
	// regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be associated with a given pipeline.
	// An object containing a list of "key": value pairs.
	// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location where the Pipeline Job is to run
	Location *string `pulumi:"location"`
	// Specifies mapping configuration.
	// Structure is documented below.
	MappingPipelineJob *PipelineJobMappingPipelineJob `pulumi:"mappingPipelineJob"`
	// Specifies the name of the pipeline job. This field is user-assigned.
	Name *string `pulumi:"name"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Specifies reconciliation configuration.
	// Structure is documented below.
	ReconciliationPipelineJob *PipelineJobReconciliationPipelineJob `pulumi:"reconciliationPipelineJob"`
	// The fully qualified name of this dataset
	SelfLink *string `pulumi:"selfLink"`
}

type PipelineJobState struct {
	// Specifies the backfill configuration.
	// Structure is documented below.
	BackfillPipelineJob PipelineJobBackfillPipelineJobPtrInput
	// Healthcare Dataset under which the Pipeline Job is to run
	Dataset pulumi.StringPtrInput
	// If true, disables writing lineage for the pipeline.
	DisableLineage pulumi.BoolPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// User-supplied key-value pairs used to organize Pipeline Jobs.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
	// maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values are optional, must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
	// regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be associated with a given pipeline.
	// An object containing a list of "key": value pairs.
	// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location where the Pipeline Job is to run
	Location pulumi.StringPtrInput
	// Specifies mapping configuration.
	// Structure is documented below.
	MappingPipelineJob PipelineJobMappingPipelineJobPtrInput
	// Specifies the name of the pipeline job. This field is user-assigned.
	Name pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Specifies reconciliation configuration.
	// Structure is documented below.
	ReconciliationPipelineJob PipelineJobReconciliationPipelineJobPtrInput
	// The fully qualified name of this dataset
	SelfLink pulumi.StringPtrInput
}

func (PipelineJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineJobState)(nil)).Elem()
}

type pipelineJobArgs struct {
	// Specifies the backfill configuration.
	// Structure is documented below.
	BackfillPipelineJob *PipelineJobBackfillPipelineJob `pulumi:"backfillPipelineJob"`
	// Healthcare Dataset under which the Pipeline Job is to run
	Dataset string `pulumi:"dataset"`
	// If true, disables writing lineage for the pipeline.
	DisableLineage *bool `pulumi:"disableLineage"`
	// User-supplied key-value pairs used to organize Pipeline Jobs.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
	// maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values are optional, must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
	// regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be associated with a given pipeline.
	// An object containing a list of "key": value pairs.
	// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location where the Pipeline Job is to run
	Location string `pulumi:"location"`
	// Specifies mapping configuration.
	// Structure is documented below.
	MappingPipelineJob *PipelineJobMappingPipelineJob `pulumi:"mappingPipelineJob"`
	// Specifies the name of the pipeline job. This field is user-assigned.
	Name *string `pulumi:"name"`
	// Specifies reconciliation configuration.
	// Structure is documented below.
	ReconciliationPipelineJob *PipelineJobReconciliationPipelineJob `pulumi:"reconciliationPipelineJob"`
}

// The set of arguments for constructing a PipelineJob resource.
type PipelineJobArgs struct {
	// Specifies the backfill configuration.
	// Structure is documented below.
	BackfillPipelineJob PipelineJobBackfillPipelineJobPtrInput
	// Healthcare Dataset under which the Pipeline Job is to run
	Dataset pulumi.StringInput
	// If true, disables writing lineage for the pipeline.
	DisableLineage pulumi.BoolPtrInput
	// User-supplied key-value pairs used to organize Pipeline Jobs.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
	// maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values are optional, must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
	// regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be associated with a given pipeline.
	// An object containing a list of "key": value pairs.
	// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location where the Pipeline Job is to run
	Location pulumi.StringInput
	// Specifies mapping configuration.
	// Structure is documented below.
	MappingPipelineJob PipelineJobMappingPipelineJobPtrInput
	// Specifies the name of the pipeline job. This field is user-assigned.
	Name pulumi.StringPtrInput
	// Specifies reconciliation configuration.
	// Structure is documented below.
	ReconciliationPipelineJob PipelineJobReconciliationPipelineJobPtrInput
}

func (PipelineJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineJobArgs)(nil)).Elem()
}

type PipelineJobInput interface {
	pulumi.Input

	ToPipelineJobOutput() PipelineJobOutput
	ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput
}

func (*PipelineJob) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineJob)(nil)).Elem()
}

func (i *PipelineJob) ToPipelineJobOutput() PipelineJobOutput {
	return i.ToPipelineJobOutputWithContext(context.Background())
}

func (i *PipelineJob) ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineJobOutput)
}

// PipelineJobArrayInput is an input type that accepts PipelineJobArray and PipelineJobArrayOutput values.
// You can construct a concrete instance of `PipelineJobArrayInput` via:
//
//	PipelineJobArray{ PipelineJobArgs{...} }
type PipelineJobArrayInput interface {
	pulumi.Input

	ToPipelineJobArrayOutput() PipelineJobArrayOutput
	ToPipelineJobArrayOutputWithContext(context.Context) PipelineJobArrayOutput
}

type PipelineJobArray []PipelineJobInput

func (PipelineJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PipelineJob)(nil)).Elem()
}

func (i PipelineJobArray) ToPipelineJobArrayOutput() PipelineJobArrayOutput {
	return i.ToPipelineJobArrayOutputWithContext(context.Background())
}

func (i PipelineJobArray) ToPipelineJobArrayOutputWithContext(ctx context.Context) PipelineJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineJobArrayOutput)
}

// PipelineJobMapInput is an input type that accepts PipelineJobMap and PipelineJobMapOutput values.
// You can construct a concrete instance of `PipelineJobMapInput` via:
//
//	PipelineJobMap{ "key": PipelineJobArgs{...} }
type PipelineJobMapInput interface {
	pulumi.Input

	ToPipelineJobMapOutput() PipelineJobMapOutput
	ToPipelineJobMapOutputWithContext(context.Context) PipelineJobMapOutput
}

type PipelineJobMap map[string]PipelineJobInput

func (PipelineJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PipelineJob)(nil)).Elem()
}

func (i PipelineJobMap) ToPipelineJobMapOutput() PipelineJobMapOutput {
	return i.ToPipelineJobMapOutputWithContext(context.Background())
}

func (i PipelineJobMap) ToPipelineJobMapOutputWithContext(ctx context.Context) PipelineJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineJobMapOutput)
}

type PipelineJobOutput struct{ *pulumi.OutputState }

func (PipelineJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineJob)(nil)).Elem()
}

func (o PipelineJobOutput) ToPipelineJobOutput() PipelineJobOutput {
	return o
}

func (o PipelineJobOutput) ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput {
	return o
}

// Specifies the backfill configuration.
// Structure is documented below.
func (o PipelineJobOutput) BackfillPipelineJob() PipelineJobBackfillPipelineJobPtrOutput {
	return o.ApplyT(func(v *PipelineJob) PipelineJobBackfillPipelineJobPtrOutput { return v.BackfillPipelineJob }).(PipelineJobBackfillPipelineJobPtrOutput)
}

// Healthcare Dataset under which the Pipeline Job is to run
func (o PipelineJobOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

// If true, disables writing lineage for the pipeline.
func (o PipelineJobOutput) DisableLineage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.BoolPtrOutput { return v.DisableLineage }).(pulumi.BoolPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o PipelineJobOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// User-supplied key-value pairs used to organize Pipeline Jobs.
// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
// maximum 128 bytes, and must conform to the following PCRE regular expression:
// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
// Label values are optional, must be between 1 and 63 characters long, have a
// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
// regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
// No more than 64 labels can be associated with a given pipeline.
// An object containing a list of "key": value pairs.
// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o PipelineJobOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Location where the Pipeline Job is to run
func (o PipelineJobOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies mapping configuration.
// Structure is documented below.
func (o PipelineJobOutput) MappingPipelineJob() PipelineJobMappingPipelineJobPtrOutput {
	return o.ApplyT(func(v *PipelineJob) PipelineJobMappingPipelineJobPtrOutput { return v.MappingPipelineJob }).(PipelineJobMappingPipelineJobPtrOutput)
}

// Specifies the name of the pipeline job. This field is user-assigned.
func (o PipelineJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o PipelineJobOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Specifies reconciliation configuration.
// Structure is documented below.
func (o PipelineJobOutput) ReconciliationPipelineJob() PipelineJobReconciliationPipelineJobPtrOutput {
	return o.ApplyT(func(v *PipelineJob) PipelineJobReconciliationPipelineJobPtrOutput { return v.ReconciliationPipelineJob }).(PipelineJobReconciliationPipelineJobPtrOutput)
}

// The fully qualified name of this dataset
func (o PipelineJobOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

type PipelineJobArrayOutput struct{ *pulumi.OutputState }

func (PipelineJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PipelineJob)(nil)).Elem()
}

func (o PipelineJobArrayOutput) ToPipelineJobArrayOutput() PipelineJobArrayOutput {
	return o
}

func (o PipelineJobArrayOutput) ToPipelineJobArrayOutputWithContext(ctx context.Context) PipelineJobArrayOutput {
	return o
}

func (o PipelineJobArrayOutput) Index(i pulumi.IntInput) PipelineJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PipelineJob {
		return vs[0].([]*PipelineJob)[vs[1].(int)]
	}).(PipelineJobOutput)
}

type PipelineJobMapOutput struct{ *pulumi.OutputState }

func (PipelineJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PipelineJob)(nil)).Elem()
}

func (o PipelineJobMapOutput) ToPipelineJobMapOutput() PipelineJobMapOutput {
	return o
}

func (o PipelineJobMapOutput) ToPipelineJobMapOutputWithContext(ctx context.Context) PipelineJobMapOutput {
	return o
}

func (o PipelineJobMapOutput) MapIndex(k pulumi.StringInput) PipelineJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PipelineJob {
		return vs[0].(map[string]*PipelineJob)[vs[1].(string)]
	}).(PipelineJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineJobInput)(nil)).Elem(), &PipelineJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineJobArrayInput)(nil)).Elem(), PipelineJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineJobMapInput)(nil)).Elem(), PipelineJobMap{})
	pulumi.RegisterOutputType(PipelineJobOutput{})
	pulumi.RegisterOutputType(PipelineJobArrayOutput{})
	pulumi.RegisterOutputType(PipelineJobMapOutput{})
}
