// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A DicomStore is a datastore inside a Healthcare dataset that conforms to the DICOM
// (https://www.dicomstandard.org/about/) standard for Healthcare information exchange
// 
// To get more information about DicomStore, see:
// 
// * [API documentation](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.dicomStores)
// * How-to Guides
//     * [Creating a DICOM store](https://cloud.google.com/healthcare/docs/how-tos/dicom)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/healthcare_dicom_store.html.markdown.
type DicomStore struct {
	s *pulumi.ResourceState
}

// NewDicomStore registers a new resource with the given unique name, arguments, and options.
func NewDicomStore(ctx *pulumi.Context,
	name string, args *DicomStoreArgs, opts ...pulumi.ResourceOpt) (*DicomStore, error) {
	if args == nil || args.Dataset == nil {
		return nil, errors.New("missing required argument 'Dataset'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dataset"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["notificationConfig"] = nil
	} else {
		inputs["dataset"] = args.Dataset
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["notificationConfig"] = args.NotificationConfig
	}
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:healthcare/dicomStore:DicomStore", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DicomStore{s: s}, nil
}

// GetDicomStore gets an existing DicomStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDicomStore(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DicomStoreState, opts ...pulumi.ResourceOpt) (*DicomStore, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dataset"] = state.Dataset
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["notificationConfig"] = state.NotificationConfig
		inputs["selfLink"] = state.SelfLink
	}
	s, err := ctx.ReadResource("gcp:healthcare/dicomStore:DicomStore", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DicomStore{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DicomStore) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DicomStore) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *DicomStore) Dataset() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dataset"])
}

func (r *DicomStore) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *DicomStore) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *DicomStore) NotificationConfig() *pulumi.Output {
	return r.s.State["notificationConfig"]
}

func (r *DicomStore) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// Input properties used for looking up and filtering DicomStore resources.
type DicomStoreState struct {
	Dataset interface{}
	Labels interface{}
	Name interface{}
	NotificationConfig interface{}
	SelfLink interface{}
}

// The set of arguments for constructing a DicomStore resource.
type DicomStoreArgs struct {
	Dataset interface{}
	Labels interface{}
	Name interface{}
	NotificationConfig interface{}
}
