// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Three different resources help you manage your IAM policy for Healthcare DICOM store. Each of these resources serves a different use case:
//
// * `healthcare.DicomStoreIamPolicy`: Authoritative. Sets the IAM policy for the DICOM store and replaces any existing policy already attached.
// * `healthcare.DicomStoreIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the DICOM store are preserved.
// * `healthcare.DicomStoreIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the DICOM store are preserved.
//
// > **Note:** `healthcare.DicomStoreIamPolicy` **cannot** be used in conjunction with `healthcare.DicomStoreIamBinding` and `healthcare.DicomStoreIamMember` or they will fight over what your policy should be.
//
// > **Note:** `healthcare.DicomStoreIamBinding` resources **can be** used in conjunction with `healthcare.DicomStoreIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_healthcare\_dicom\_store\_iam\_policy
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/healthcare"
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/organizations"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
// 			Bindings: []organizations.GetIAMPolicyBinding{
// 				organizations.GetIAMPolicyBinding{
// 					Role: "roles/editor",
// 					Members: []string{
// 						"user:jane@example.com",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = healthcare.NewDicomStoreIamPolicy(ctx, "dicomStore", &healthcare.DicomStoreIamPolicyArgs{
// 			DicomStoreId: pulumi.String("your-dicom-store-id"),
// 			PolicyData:   pulumi.String(admin.PolicyData),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_healthcare\_dicom\_store\_iam\_binding
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/healthcare"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := healthcare.NewDicomStoreIamBinding(ctx, "dicomStore", &healthcare.DicomStoreIamBindingArgs{
// 			DicomStoreId: pulumi.String("your-dicom-store-id"),
// 			Members: pulumi.StringArray{
// 				pulumi.String("user:jane@example.com"),
// 			},
// 			Role: pulumi.String("roles/editor"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_healthcare\_dicom\_store\_iam\_member
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/healthcare"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := healthcare.NewDicomStoreIamMember(ctx, "dicomStore", &healthcare.DicomStoreIamMemberArgs{
// 			DicomStoreId: pulumi.String("your-dicom-store-id"),
// 			Member:       pulumi.String("user:jane@example.com"),
// 			Role:         pulumi.String("roles/editor"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// IAM member imports use space-delimited identifiers; the resource in question, the role, and the account.
//
// This member resource can be imported using the `dicom_store_id`, role, and account e.g.
//
// ```sh
//  $ pulumi import gcp:healthcare/dicomStoreIamPolicy:DicomStoreIamPolicy dicom_store_iam "your-project-id/location-name/dataset-name/dicom-store-name roles/viewer user:foo@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiers; the resource in question and the role.
//
// This binding resource can be imported using the `dicom_store_id` and role, e.g.
//
// ```sh
//  $ pulumi import gcp:healthcare/dicomStoreIamPolicy:DicomStoreIamPolicy dicom_store_iam "your-project-id/location-name/dataset-name/dicom-store-name roles/viewer"
// ```
//
//  IAM policy imports use the identifier of the resource in question.
//
// This policy resource can be imported using the `dicom_store_id`, role, and account e.g.
//
// ```sh
//  $ pulumi import gcp:healthcare/dicomStoreIamPolicy:DicomStoreIamPolicy dicom_store_iam your-project-id/location-name/dataset-name/dicom-store-name
// ```
type DicomStoreIamPolicy struct {
	pulumi.CustomResourceState

	// The DICOM store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
	// `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	DicomStoreId pulumi.StringOutput `pulumi:"dicomStoreId"`
	// (Computed) The etag of the DICOM store's IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
}

// NewDicomStoreIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewDicomStoreIamPolicy(ctx *pulumi.Context,
	name string, args *DicomStoreIamPolicyArgs, opts ...pulumi.ResourceOption) (*DicomStoreIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DicomStoreId == nil {
		return nil, errors.New("invalid value for required argument 'DicomStoreId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource DicomStoreIamPolicy
	err := ctx.RegisterResource("gcp:healthcare/dicomStoreIamPolicy:DicomStoreIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDicomStoreIamPolicy gets an existing DicomStoreIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDicomStoreIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DicomStoreIamPolicyState, opts ...pulumi.ResourceOption) (*DicomStoreIamPolicy, error) {
	var resource DicomStoreIamPolicy
	err := ctx.ReadResource("gcp:healthcare/dicomStoreIamPolicy:DicomStoreIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DicomStoreIamPolicy resources.
type dicomStoreIamPolicyState struct {
	// The DICOM store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
	// `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	DicomStoreId *string `pulumi:"dicomStoreId"`
	// (Computed) The etag of the DICOM store's IAM policy.
	Etag *string `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
}

type DicomStoreIamPolicyState struct {
	// The DICOM store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
	// `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	DicomStoreId pulumi.StringPtrInput
	// (Computed) The etag of the DICOM store's IAM policy.
	Etag pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
}

func (DicomStoreIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dicomStoreIamPolicyState)(nil)).Elem()
}

type dicomStoreIamPolicyArgs struct {
	// The DICOM store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
	// `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	DicomStoreId string `pulumi:"dicomStoreId"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
}

// The set of arguments for constructing a DicomStoreIamPolicy resource.
type DicomStoreIamPolicyArgs struct {
	// The DICOM store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
	// `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	DicomStoreId pulumi.StringInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
}

func (DicomStoreIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dicomStoreIamPolicyArgs)(nil)).Elem()
}

type DicomStoreIamPolicyInput interface {
	pulumi.Input

	ToDicomStoreIamPolicyOutput() DicomStoreIamPolicyOutput
	ToDicomStoreIamPolicyOutputWithContext(ctx context.Context) DicomStoreIamPolicyOutput
}

func (*DicomStoreIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*DicomStoreIamPolicy)(nil))
}

func (i *DicomStoreIamPolicy) ToDicomStoreIamPolicyOutput() DicomStoreIamPolicyOutput {
	return i.ToDicomStoreIamPolicyOutputWithContext(context.Background())
}

func (i *DicomStoreIamPolicy) ToDicomStoreIamPolicyOutputWithContext(ctx context.Context) DicomStoreIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreIamPolicyOutput)
}

func (i *DicomStoreIamPolicy) ToDicomStoreIamPolicyPtrOutput() DicomStoreIamPolicyPtrOutput {
	return i.ToDicomStoreIamPolicyPtrOutputWithContext(context.Background())
}

func (i *DicomStoreIamPolicy) ToDicomStoreIamPolicyPtrOutputWithContext(ctx context.Context) DicomStoreIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreIamPolicyPtrOutput)
}

type DicomStoreIamPolicyPtrInput interface {
	pulumi.Input

	ToDicomStoreIamPolicyPtrOutput() DicomStoreIamPolicyPtrOutput
	ToDicomStoreIamPolicyPtrOutputWithContext(ctx context.Context) DicomStoreIamPolicyPtrOutput
}

type dicomStoreIamPolicyPtrType DicomStoreIamPolicyArgs

func (*dicomStoreIamPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DicomStoreIamPolicy)(nil))
}

func (i *dicomStoreIamPolicyPtrType) ToDicomStoreIamPolicyPtrOutput() DicomStoreIamPolicyPtrOutput {
	return i.ToDicomStoreIamPolicyPtrOutputWithContext(context.Background())
}

func (i *dicomStoreIamPolicyPtrType) ToDicomStoreIamPolicyPtrOutputWithContext(ctx context.Context) DicomStoreIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreIamPolicyPtrOutput)
}

// DicomStoreIamPolicyArrayInput is an input type that accepts DicomStoreIamPolicyArray and DicomStoreIamPolicyArrayOutput values.
// You can construct a concrete instance of `DicomStoreIamPolicyArrayInput` via:
//
//          DicomStoreIamPolicyArray{ DicomStoreIamPolicyArgs{...} }
type DicomStoreIamPolicyArrayInput interface {
	pulumi.Input

	ToDicomStoreIamPolicyArrayOutput() DicomStoreIamPolicyArrayOutput
	ToDicomStoreIamPolicyArrayOutputWithContext(context.Context) DicomStoreIamPolicyArrayOutput
}

type DicomStoreIamPolicyArray []DicomStoreIamPolicyInput

func (DicomStoreIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*DicomStoreIamPolicy)(nil))
}

func (i DicomStoreIamPolicyArray) ToDicomStoreIamPolicyArrayOutput() DicomStoreIamPolicyArrayOutput {
	return i.ToDicomStoreIamPolicyArrayOutputWithContext(context.Background())
}

func (i DicomStoreIamPolicyArray) ToDicomStoreIamPolicyArrayOutputWithContext(ctx context.Context) DicomStoreIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreIamPolicyArrayOutput)
}

// DicomStoreIamPolicyMapInput is an input type that accepts DicomStoreIamPolicyMap and DicomStoreIamPolicyMapOutput values.
// You can construct a concrete instance of `DicomStoreIamPolicyMapInput` via:
//
//          DicomStoreIamPolicyMap{ "key": DicomStoreIamPolicyArgs{...} }
type DicomStoreIamPolicyMapInput interface {
	pulumi.Input

	ToDicomStoreIamPolicyMapOutput() DicomStoreIamPolicyMapOutput
	ToDicomStoreIamPolicyMapOutputWithContext(context.Context) DicomStoreIamPolicyMapOutput
}

type DicomStoreIamPolicyMap map[string]DicomStoreIamPolicyInput

func (DicomStoreIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*DicomStoreIamPolicy)(nil))
}

func (i DicomStoreIamPolicyMap) ToDicomStoreIamPolicyMapOutput() DicomStoreIamPolicyMapOutput {
	return i.ToDicomStoreIamPolicyMapOutputWithContext(context.Background())
}

func (i DicomStoreIamPolicyMap) ToDicomStoreIamPolicyMapOutputWithContext(ctx context.Context) DicomStoreIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomStoreIamPolicyMapOutput)
}

type DicomStoreIamPolicyOutput struct {
	*pulumi.OutputState
}

func (DicomStoreIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DicomStoreIamPolicy)(nil))
}

func (o DicomStoreIamPolicyOutput) ToDicomStoreIamPolicyOutput() DicomStoreIamPolicyOutput {
	return o
}

func (o DicomStoreIamPolicyOutput) ToDicomStoreIamPolicyOutputWithContext(ctx context.Context) DicomStoreIamPolicyOutput {
	return o
}

func (o DicomStoreIamPolicyOutput) ToDicomStoreIamPolicyPtrOutput() DicomStoreIamPolicyPtrOutput {
	return o.ToDicomStoreIamPolicyPtrOutputWithContext(context.Background())
}

func (o DicomStoreIamPolicyOutput) ToDicomStoreIamPolicyPtrOutputWithContext(ctx context.Context) DicomStoreIamPolicyPtrOutput {
	return o.ApplyT(func(v DicomStoreIamPolicy) *DicomStoreIamPolicy {
		return &v
	}).(DicomStoreIamPolicyPtrOutput)
}

type DicomStoreIamPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (DicomStoreIamPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DicomStoreIamPolicy)(nil))
}

func (o DicomStoreIamPolicyPtrOutput) ToDicomStoreIamPolicyPtrOutput() DicomStoreIamPolicyPtrOutput {
	return o
}

func (o DicomStoreIamPolicyPtrOutput) ToDicomStoreIamPolicyPtrOutputWithContext(ctx context.Context) DicomStoreIamPolicyPtrOutput {
	return o
}

type DicomStoreIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (DicomStoreIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DicomStoreIamPolicy)(nil))
}

func (o DicomStoreIamPolicyArrayOutput) ToDicomStoreIamPolicyArrayOutput() DicomStoreIamPolicyArrayOutput {
	return o
}

func (o DicomStoreIamPolicyArrayOutput) ToDicomStoreIamPolicyArrayOutputWithContext(ctx context.Context) DicomStoreIamPolicyArrayOutput {
	return o
}

func (o DicomStoreIamPolicyArrayOutput) Index(i pulumi.IntInput) DicomStoreIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DicomStoreIamPolicy {
		return vs[0].([]DicomStoreIamPolicy)[vs[1].(int)]
	}).(DicomStoreIamPolicyOutput)
}

type DicomStoreIamPolicyMapOutput struct{ *pulumi.OutputState }

func (DicomStoreIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DicomStoreIamPolicy)(nil))
}

func (o DicomStoreIamPolicyMapOutput) ToDicomStoreIamPolicyMapOutput() DicomStoreIamPolicyMapOutput {
	return o
}

func (o DicomStoreIamPolicyMapOutput) ToDicomStoreIamPolicyMapOutputWithContext(ctx context.Context) DicomStoreIamPolicyMapOutput {
	return o
}

func (o DicomStoreIamPolicyMapOutput) MapIndex(k pulumi.StringInput) DicomStoreIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DicomStoreIamPolicy {
		return vs[0].(map[string]DicomStoreIamPolicy)[vs[1].(string)]
	}).(DicomStoreIamPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(DicomStoreIamPolicyOutput{})
	pulumi.RegisterOutputType(DicomStoreIamPolicyPtrOutput{})
	pulumi.RegisterOutputType(DicomStoreIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(DicomStoreIamPolicyMapOutput{})
}
