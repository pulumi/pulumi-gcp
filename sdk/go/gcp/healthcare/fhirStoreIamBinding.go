// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// IAM member imports use space-delimited identifiers; the resource in question, the role, and the account.
//
// This member resource can be imported using the `fhir_store_id`, role, and account e.g.
//
// ```sh
//
//	$ pulumi import gcp:healthcare/fhirStoreIamBinding:FhirStoreIamBinding fhir_store_iam "your-project-id/location-name/dataset-name/fhir-store-name roles/viewer user:foo@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiers; the resource in question and the role.
//
// This binding resource can be imported using the `fhir_store_id` and role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:healthcare/fhirStoreIamBinding:FhirStoreIamBinding fhir_store_iam "your-project-id/location-name/dataset-name/fhir-store-name roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question.
//
// This policy resource can be imported using the `fhir_store_id`, role, and account e.g.
//
// ```sh
//
//	$ pulumi import gcp:healthcare/fhirStoreIamBinding:FhirStoreIamBinding fhir_store_iam your-project-id/location-name/dataset-name/fhir-store-name
//
// ```
type FhirStoreIamBinding struct {
	pulumi.CustomResourceState

	Condition FhirStoreIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the FHIR store's IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The FHIR store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{fhir_store_name}` or
	// `{location_name}/{dataset_name}/{fhir_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	FhirStoreId pulumi.StringOutput      `pulumi:"fhirStoreId"`
	Members     pulumi.StringArrayOutput `pulumi:"members"`
	// The role that should be applied. Only one
	// `healthcare.FhirStoreIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewFhirStoreIamBinding registers a new resource with the given unique name, arguments, and options.
func NewFhirStoreIamBinding(ctx *pulumi.Context,
	name string, args *FhirStoreIamBindingArgs, opts ...pulumi.ResourceOption) (*FhirStoreIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FhirStoreId == nil {
		return nil, errors.New("invalid value for required argument 'FhirStoreId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource FhirStoreIamBinding
	err := ctx.RegisterResource("gcp:healthcare/fhirStoreIamBinding:FhirStoreIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFhirStoreIamBinding gets an existing FhirStoreIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFhirStoreIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FhirStoreIamBindingState, opts ...pulumi.ResourceOption) (*FhirStoreIamBinding, error) {
	var resource FhirStoreIamBinding
	err := ctx.ReadResource("gcp:healthcare/fhirStoreIamBinding:FhirStoreIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FhirStoreIamBinding resources.
type fhirStoreIamBindingState struct {
	Condition *FhirStoreIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the FHIR store's IAM policy.
	Etag *string `pulumi:"etag"`
	// The FHIR store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{fhir_store_name}` or
	// `{location_name}/{dataset_name}/{fhir_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	FhirStoreId *string  `pulumi:"fhirStoreId"`
	Members     []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `healthcare.FhirStoreIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type FhirStoreIamBindingState struct {
	Condition FhirStoreIamBindingConditionPtrInput
	// (Computed) The etag of the FHIR store's IAM policy.
	Etag pulumi.StringPtrInput
	// The FHIR store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{fhir_store_name}` or
	// `{location_name}/{dataset_name}/{fhir_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	FhirStoreId pulumi.StringPtrInput
	Members     pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `healthcare.FhirStoreIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (FhirStoreIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*fhirStoreIamBindingState)(nil)).Elem()
}

type fhirStoreIamBindingArgs struct {
	Condition *FhirStoreIamBindingCondition `pulumi:"condition"`
	// The FHIR store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{fhir_store_name}` or
	// `{location_name}/{dataset_name}/{fhir_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	FhirStoreId string   `pulumi:"fhirStoreId"`
	Members     []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `healthcare.FhirStoreIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a FhirStoreIamBinding resource.
type FhirStoreIamBindingArgs struct {
	Condition FhirStoreIamBindingConditionPtrInput
	// The FHIR store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{fhir_store_name}` or
	// `{location_name}/{dataset_name}/{fhir_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	FhirStoreId pulumi.StringInput
	Members     pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `healthcare.FhirStoreIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (FhirStoreIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fhirStoreIamBindingArgs)(nil)).Elem()
}

type FhirStoreIamBindingInput interface {
	pulumi.Input

	ToFhirStoreIamBindingOutput() FhirStoreIamBindingOutput
	ToFhirStoreIamBindingOutputWithContext(ctx context.Context) FhirStoreIamBindingOutput
}

func (*FhirStoreIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirStoreIamBinding)(nil)).Elem()
}

func (i *FhirStoreIamBinding) ToFhirStoreIamBindingOutput() FhirStoreIamBindingOutput {
	return i.ToFhirStoreIamBindingOutputWithContext(context.Background())
}

func (i *FhirStoreIamBinding) ToFhirStoreIamBindingOutputWithContext(ctx context.Context) FhirStoreIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreIamBindingOutput)
}

// FhirStoreIamBindingArrayInput is an input type that accepts FhirStoreIamBindingArray and FhirStoreIamBindingArrayOutput values.
// You can construct a concrete instance of `FhirStoreIamBindingArrayInput` via:
//
//	FhirStoreIamBindingArray{ FhirStoreIamBindingArgs{...} }
type FhirStoreIamBindingArrayInput interface {
	pulumi.Input

	ToFhirStoreIamBindingArrayOutput() FhirStoreIamBindingArrayOutput
	ToFhirStoreIamBindingArrayOutputWithContext(context.Context) FhirStoreIamBindingArrayOutput
}

type FhirStoreIamBindingArray []FhirStoreIamBindingInput

func (FhirStoreIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FhirStoreIamBinding)(nil)).Elem()
}

func (i FhirStoreIamBindingArray) ToFhirStoreIamBindingArrayOutput() FhirStoreIamBindingArrayOutput {
	return i.ToFhirStoreIamBindingArrayOutputWithContext(context.Background())
}

func (i FhirStoreIamBindingArray) ToFhirStoreIamBindingArrayOutputWithContext(ctx context.Context) FhirStoreIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreIamBindingArrayOutput)
}

// FhirStoreIamBindingMapInput is an input type that accepts FhirStoreIamBindingMap and FhirStoreIamBindingMapOutput values.
// You can construct a concrete instance of `FhirStoreIamBindingMapInput` via:
//
//	FhirStoreIamBindingMap{ "key": FhirStoreIamBindingArgs{...} }
type FhirStoreIamBindingMapInput interface {
	pulumi.Input

	ToFhirStoreIamBindingMapOutput() FhirStoreIamBindingMapOutput
	ToFhirStoreIamBindingMapOutputWithContext(context.Context) FhirStoreIamBindingMapOutput
}

type FhirStoreIamBindingMap map[string]FhirStoreIamBindingInput

func (FhirStoreIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FhirStoreIamBinding)(nil)).Elem()
}

func (i FhirStoreIamBindingMap) ToFhirStoreIamBindingMapOutput() FhirStoreIamBindingMapOutput {
	return i.ToFhirStoreIamBindingMapOutputWithContext(context.Background())
}

func (i FhirStoreIamBindingMap) ToFhirStoreIamBindingMapOutputWithContext(ctx context.Context) FhirStoreIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirStoreIamBindingMapOutput)
}

type FhirStoreIamBindingOutput struct{ *pulumi.OutputState }

func (FhirStoreIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirStoreIamBinding)(nil)).Elem()
}

func (o FhirStoreIamBindingOutput) ToFhirStoreIamBindingOutput() FhirStoreIamBindingOutput {
	return o
}

func (o FhirStoreIamBindingOutput) ToFhirStoreIamBindingOutputWithContext(ctx context.Context) FhirStoreIamBindingOutput {
	return o
}

func (o FhirStoreIamBindingOutput) Condition() FhirStoreIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *FhirStoreIamBinding) FhirStoreIamBindingConditionPtrOutput { return v.Condition }).(FhirStoreIamBindingConditionPtrOutput)
}

// (Computed) The etag of the FHIR store's IAM policy.
func (o FhirStoreIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *FhirStoreIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The FHIR store ID, in the form
// `{project_id}/{location_name}/{dataset_name}/{fhir_store_name}` or
// `{location_name}/{dataset_name}/{fhir_store_name}`. In the second form, the provider's
// project setting will be used as a fallback.
func (o FhirStoreIamBindingOutput) FhirStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *FhirStoreIamBinding) pulumi.StringOutput { return v.FhirStoreId }).(pulumi.StringOutput)
}

func (o FhirStoreIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FhirStoreIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The role that should be applied. Only one
// `healthcare.FhirStoreIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o FhirStoreIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *FhirStoreIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type FhirStoreIamBindingArrayOutput struct{ *pulumi.OutputState }

func (FhirStoreIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FhirStoreIamBinding)(nil)).Elem()
}

func (o FhirStoreIamBindingArrayOutput) ToFhirStoreIamBindingArrayOutput() FhirStoreIamBindingArrayOutput {
	return o
}

func (o FhirStoreIamBindingArrayOutput) ToFhirStoreIamBindingArrayOutputWithContext(ctx context.Context) FhirStoreIamBindingArrayOutput {
	return o
}

func (o FhirStoreIamBindingArrayOutput) Index(i pulumi.IntInput) FhirStoreIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FhirStoreIamBinding {
		return vs[0].([]*FhirStoreIamBinding)[vs[1].(int)]
	}).(FhirStoreIamBindingOutput)
}

type FhirStoreIamBindingMapOutput struct{ *pulumi.OutputState }

func (FhirStoreIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FhirStoreIamBinding)(nil)).Elem()
}

func (o FhirStoreIamBindingMapOutput) ToFhirStoreIamBindingMapOutput() FhirStoreIamBindingMapOutput {
	return o
}

func (o FhirStoreIamBindingMapOutput) ToFhirStoreIamBindingMapOutputWithContext(ctx context.Context) FhirStoreIamBindingMapOutput {
	return o
}

func (o FhirStoreIamBindingMapOutput) MapIndex(k pulumi.StringInput) FhirStoreIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FhirStoreIamBinding {
		return vs[0].(map[string]*FhirStoreIamBinding)[vs[1].(string)]
	}).(FhirStoreIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FhirStoreIamBindingInput)(nil)).Elem(), &FhirStoreIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirStoreIamBindingArrayInput)(nil)).Elem(), FhirStoreIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirStoreIamBindingMapInput)(nil)).Elem(), FhirStoreIamBindingMap{})
	pulumi.RegisterOutputType(FhirStoreIamBindingOutput{})
	pulumi.RegisterOutputType(FhirStoreIamBindingArrayOutput{})
	pulumi.RegisterOutputType(FhirStoreIamBindingMapOutput{})
}
