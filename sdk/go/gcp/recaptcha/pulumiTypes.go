// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package recaptcha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EnterpriseKeyAndroidSettings struct {
	// If set to true, it means allowedPackageNames will not be enforced.
	AllowAllPackageNames *bool `pulumi:"allowAllPackageNames"`
	// Android package names of apps allowed to use the key. Example: 'com.companyname.appname'
	AllowedPackageNames []string `pulumi:"allowedPackageNames"`
}

// EnterpriseKeyAndroidSettingsInput is an input type that accepts EnterpriseKeyAndroidSettingsArgs and EnterpriseKeyAndroidSettingsOutput values.
// You can construct a concrete instance of `EnterpriseKeyAndroidSettingsInput` via:
//
//          EnterpriseKeyAndroidSettingsArgs{...}
type EnterpriseKeyAndroidSettingsInput interface {
	pulumi.Input

	ToEnterpriseKeyAndroidSettingsOutput() EnterpriseKeyAndroidSettingsOutput
	ToEnterpriseKeyAndroidSettingsOutputWithContext(context.Context) EnterpriseKeyAndroidSettingsOutput
}

type EnterpriseKeyAndroidSettingsArgs struct {
	// If set to true, it means allowedPackageNames will not be enforced.
	AllowAllPackageNames pulumi.BoolPtrInput `pulumi:"allowAllPackageNames"`
	// Android package names of apps allowed to use the key. Example: 'com.companyname.appname'
	AllowedPackageNames pulumi.StringArrayInput `pulumi:"allowedPackageNames"`
}

func (EnterpriseKeyAndroidSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseKeyAndroidSettings)(nil)).Elem()
}

func (i EnterpriseKeyAndroidSettingsArgs) ToEnterpriseKeyAndroidSettingsOutput() EnterpriseKeyAndroidSettingsOutput {
	return i.ToEnterpriseKeyAndroidSettingsOutputWithContext(context.Background())
}

func (i EnterpriseKeyAndroidSettingsArgs) ToEnterpriseKeyAndroidSettingsOutputWithContext(ctx context.Context) EnterpriseKeyAndroidSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseKeyAndroidSettingsOutput)
}

func (i EnterpriseKeyAndroidSettingsArgs) ToEnterpriseKeyAndroidSettingsPtrOutput() EnterpriseKeyAndroidSettingsPtrOutput {
	return i.ToEnterpriseKeyAndroidSettingsPtrOutputWithContext(context.Background())
}

func (i EnterpriseKeyAndroidSettingsArgs) ToEnterpriseKeyAndroidSettingsPtrOutputWithContext(ctx context.Context) EnterpriseKeyAndroidSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseKeyAndroidSettingsOutput).ToEnterpriseKeyAndroidSettingsPtrOutputWithContext(ctx)
}

// EnterpriseKeyAndroidSettingsPtrInput is an input type that accepts EnterpriseKeyAndroidSettingsArgs, EnterpriseKeyAndroidSettingsPtr and EnterpriseKeyAndroidSettingsPtrOutput values.
// You can construct a concrete instance of `EnterpriseKeyAndroidSettingsPtrInput` via:
//
//          EnterpriseKeyAndroidSettingsArgs{...}
//
//  or:
//
//          nil
type EnterpriseKeyAndroidSettingsPtrInput interface {
	pulumi.Input

	ToEnterpriseKeyAndroidSettingsPtrOutput() EnterpriseKeyAndroidSettingsPtrOutput
	ToEnterpriseKeyAndroidSettingsPtrOutputWithContext(context.Context) EnterpriseKeyAndroidSettingsPtrOutput
}

type enterpriseKeyAndroidSettingsPtrType EnterpriseKeyAndroidSettingsArgs

func EnterpriseKeyAndroidSettingsPtr(v *EnterpriseKeyAndroidSettingsArgs) EnterpriseKeyAndroidSettingsPtrInput {
	return (*enterpriseKeyAndroidSettingsPtrType)(v)
}

func (*enterpriseKeyAndroidSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseKeyAndroidSettings)(nil)).Elem()
}

func (i *enterpriseKeyAndroidSettingsPtrType) ToEnterpriseKeyAndroidSettingsPtrOutput() EnterpriseKeyAndroidSettingsPtrOutput {
	return i.ToEnterpriseKeyAndroidSettingsPtrOutputWithContext(context.Background())
}

func (i *enterpriseKeyAndroidSettingsPtrType) ToEnterpriseKeyAndroidSettingsPtrOutputWithContext(ctx context.Context) EnterpriseKeyAndroidSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseKeyAndroidSettingsPtrOutput)
}

type EnterpriseKeyAndroidSettingsOutput struct{ *pulumi.OutputState }

func (EnterpriseKeyAndroidSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseKeyAndroidSettings)(nil)).Elem()
}

func (o EnterpriseKeyAndroidSettingsOutput) ToEnterpriseKeyAndroidSettingsOutput() EnterpriseKeyAndroidSettingsOutput {
	return o
}

func (o EnterpriseKeyAndroidSettingsOutput) ToEnterpriseKeyAndroidSettingsOutputWithContext(ctx context.Context) EnterpriseKeyAndroidSettingsOutput {
	return o
}

func (o EnterpriseKeyAndroidSettingsOutput) ToEnterpriseKeyAndroidSettingsPtrOutput() EnterpriseKeyAndroidSettingsPtrOutput {
	return o.ToEnterpriseKeyAndroidSettingsPtrOutputWithContext(context.Background())
}

func (o EnterpriseKeyAndroidSettingsOutput) ToEnterpriseKeyAndroidSettingsPtrOutputWithContext(ctx context.Context) EnterpriseKeyAndroidSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseKeyAndroidSettings) *EnterpriseKeyAndroidSettings {
		return &v
	}).(EnterpriseKeyAndroidSettingsPtrOutput)
}

// If set to true, it means allowedPackageNames will not be enforced.
func (o EnterpriseKeyAndroidSettingsOutput) AllowAllPackageNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseKeyAndroidSettings) *bool { return v.AllowAllPackageNames }).(pulumi.BoolPtrOutput)
}

// Android package names of apps allowed to use the key. Example: 'com.companyname.appname'
func (o EnterpriseKeyAndroidSettingsOutput) AllowedPackageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseKeyAndroidSettings) []string { return v.AllowedPackageNames }).(pulumi.StringArrayOutput)
}

type EnterpriseKeyAndroidSettingsPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseKeyAndroidSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseKeyAndroidSettings)(nil)).Elem()
}

func (o EnterpriseKeyAndroidSettingsPtrOutput) ToEnterpriseKeyAndroidSettingsPtrOutput() EnterpriseKeyAndroidSettingsPtrOutput {
	return o
}

func (o EnterpriseKeyAndroidSettingsPtrOutput) ToEnterpriseKeyAndroidSettingsPtrOutputWithContext(ctx context.Context) EnterpriseKeyAndroidSettingsPtrOutput {
	return o
}

func (o EnterpriseKeyAndroidSettingsPtrOutput) Elem() EnterpriseKeyAndroidSettingsOutput {
	return o.ApplyT(func(v *EnterpriseKeyAndroidSettings) EnterpriseKeyAndroidSettings {
		if v != nil {
			return *v
		}
		var ret EnterpriseKeyAndroidSettings
		return ret
	}).(EnterpriseKeyAndroidSettingsOutput)
}

// If set to true, it means allowedPackageNames will not be enforced.
func (o EnterpriseKeyAndroidSettingsPtrOutput) AllowAllPackageNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseKeyAndroidSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowAllPackageNames
	}).(pulumi.BoolPtrOutput)
}

// Android package names of apps allowed to use the key. Example: 'com.companyname.appname'
func (o EnterpriseKeyAndroidSettingsPtrOutput) AllowedPackageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseKeyAndroidSettings) []string {
		if v == nil {
			return nil
		}
		return v.AllowedPackageNames
	}).(pulumi.StringArrayOutput)
}

type EnterpriseKeyIosSettings struct {
	// If set to true, it means allowedBundleIds will not be enforced.
	AllowAllBundleIds *bool `pulumi:"allowAllBundleIds"`
	// iOS bundle ids of apps allowed to use the key. Example: 'com.companyname.productname.appname'
	AllowedBundleIds []string `pulumi:"allowedBundleIds"`
}

// EnterpriseKeyIosSettingsInput is an input type that accepts EnterpriseKeyIosSettingsArgs and EnterpriseKeyIosSettingsOutput values.
// You can construct a concrete instance of `EnterpriseKeyIosSettingsInput` via:
//
//          EnterpriseKeyIosSettingsArgs{...}
type EnterpriseKeyIosSettingsInput interface {
	pulumi.Input

	ToEnterpriseKeyIosSettingsOutput() EnterpriseKeyIosSettingsOutput
	ToEnterpriseKeyIosSettingsOutputWithContext(context.Context) EnterpriseKeyIosSettingsOutput
}

type EnterpriseKeyIosSettingsArgs struct {
	// If set to true, it means allowedBundleIds will not be enforced.
	AllowAllBundleIds pulumi.BoolPtrInput `pulumi:"allowAllBundleIds"`
	// iOS bundle ids of apps allowed to use the key. Example: 'com.companyname.productname.appname'
	AllowedBundleIds pulumi.StringArrayInput `pulumi:"allowedBundleIds"`
}

func (EnterpriseKeyIosSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseKeyIosSettings)(nil)).Elem()
}

func (i EnterpriseKeyIosSettingsArgs) ToEnterpriseKeyIosSettingsOutput() EnterpriseKeyIosSettingsOutput {
	return i.ToEnterpriseKeyIosSettingsOutputWithContext(context.Background())
}

func (i EnterpriseKeyIosSettingsArgs) ToEnterpriseKeyIosSettingsOutputWithContext(ctx context.Context) EnterpriseKeyIosSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseKeyIosSettingsOutput)
}

func (i EnterpriseKeyIosSettingsArgs) ToEnterpriseKeyIosSettingsPtrOutput() EnterpriseKeyIosSettingsPtrOutput {
	return i.ToEnterpriseKeyIosSettingsPtrOutputWithContext(context.Background())
}

func (i EnterpriseKeyIosSettingsArgs) ToEnterpriseKeyIosSettingsPtrOutputWithContext(ctx context.Context) EnterpriseKeyIosSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseKeyIosSettingsOutput).ToEnterpriseKeyIosSettingsPtrOutputWithContext(ctx)
}

// EnterpriseKeyIosSettingsPtrInput is an input type that accepts EnterpriseKeyIosSettingsArgs, EnterpriseKeyIosSettingsPtr and EnterpriseKeyIosSettingsPtrOutput values.
// You can construct a concrete instance of `EnterpriseKeyIosSettingsPtrInput` via:
//
//          EnterpriseKeyIosSettingsArgs{...}
//
//  or:
//
//          nil
type EnterpriseKeyIosSettingsPtrInput interface {
	pulumi.Input

	ToEnterpriseKeyIosSettingsPtrOutput() EnterpriseKeyIosSettingsPtrOutput
	ToEnterpriseKeyIosSettingsPtrOutputWithContext(context.Context) EnterpriseKeyIosSettingsPtrOutput
}

type enterpriseKeyIosSettingsPtrType EnterpriseKeyIosSettingsArgs

func EnterpriseKeyIosSettingsPtr(v *EnterpriseKeyIosSettingsArgs) EnterpriseKeyIosSettingsPtrInput {
	return (*enterpriseKeyIosSettingsPtrType)(v)
}

func (*enterpriseKeyIosSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseKeyIosSettings)(nil)).Elem()
}

func (i *enterpriseKeyIosSettingsPtrType) ToEnterpriseKeyIosSettingsPtrOutput() EnterpriseKeyIosSettingsPtrOutput {
	return i.ToEnterpriseKeyIosSettingsPtrOutputWithContext(context.Background())
}

func (i *enterpriseKeyIosSettingsPtrType) ToEnterpriseKeyIosSettingsPtrOutputWithContext(ctx context.Context) EnterpriseKeyIosSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseKeyIosSettingsPtrOutput)
}

type EnterpriseKeyIosSettingsOutput struct{ *pulumi.OutputState }

func (EnterpriseKeyIosSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseKeyIosSettings)(nil)).Elem()
}

func (o EnterpriseKeyIosSettingsOutput) ToEnterpriseKeyIosSettingsOutput() EnterpriseKeyIosSettingsOutput {
	return o
}

func (o EnterpriseKeyIosSettingsOutput) ToEnterpriseKeyIosSettingsOutputWithContext(ctx context.Context) EnterpriseKeyIosSettingsOutput {
	return o
}

func (o EnterpriseKeyIosSettingsOutput) ToEnterpriseKeyIosSettingsPtrOutput() EnterpriseKeyIosSettingsPtrOutput {
	return o.ToEnterpriseKeyIosSettingsPtrOutputWithContext(context.Background())
}

func (o EnterpriseKeyIosSettingsOutput) ToEnterpriseKeyIosSettingsPtrOutputWithContext(ctx context.Context) EnterpriseKeyIosSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseKeyIosSettings) *EnterpriseKeyIosSettings {
		return &v
	}).(EnterpriseKeyIosSettingsPtrOutput)
}

// If set to true, it means allowedBundleIds will not be enforced.
func (o EnterpriseKeyIosSettingsOutput) AllowAllBundleIds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseKeyIosSettings) *bool { return v.AllowAllBundleIds }).(pulumi.BoolPtrOutput)
}

// iOS bundle ids of apps allowed to use the key. Example: 'com.companyname.productname.appname'
func (o EnterpriseKeyIosSettingsOutput) AllowedBundleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseKeyIosSettings) []string { return v.AllowedBundleIds }).(pulumi.StringArrayOutput)
}

type EnterpriseKeyIosSettingsPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseKeyIosSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseKeyIosSettings)(nil)).Elem()
}

func (o EnterpriseKeyIosSettingsPtrOutput) ToEnterpriseKeyIosSettingsPtrOutput() EnterpriseKeyIosSettingsPtrOutput {
	return o
}

func (o EnterpriseKeyIosSettingsPtrOutput) ToEnterpriseKeyIosSettingsPtrOutputWithContext(ctx context.Context) EnterpriseKeyIosSettingsPtrOutput {
	return o
}

func (o EnterpriseKeyIosSettingsPtrOutput) Elem() EnterpriseKeyIosSettingsOutput {
	return o.ApplyT(func(v *EnterpriseKeyIosSettings) EnterpriseKeyIosSettings {
		if v != nil {
			return *v
		}
		var ret EnterpriseKeyIosSettings
		return ret
	}).(EnterpriseKeyIosSettingsOutput)
}

// If set to true, it means allowedBundleIds will not be enforced.
func (o EnterpriseKeyIosSettingsPtrOutput) AllowAllBundleIds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseKeyIosSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowAllBundleIds
	}).(pulumi.BoolPtrOutput)
}

// iOS bundle ids of apps allowed to use the key. Example: 'com.companyname.productname.appname'
func (o EnterpriseKeyIosSettingsPtrOutput) AllowedBundleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseKeyIosSettings) []string {
		if v == nil {
			return nil
		}
		return v.AllowedBundleIds
	}).(pulumi.StringArrayOutput)
}

type EnterpriseKeyTestingOptions struct {
	// For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if UNSOLVABLE_CHALLENGE. Possible values: TESTING_CHALLENGE_UNSPECIFIED, NOCAPTCHA, UNSOLVABLE_CHALLENGE
	TestingChallenge *string `pulumi:"testingChallenge"`
	// All assessments for this Key will return this score. Must be between 0 (likely not legitimate) and 1 (likely legitimate) inclusive.
	TestingScore *float64 `pulumi:"testingScore"`
}

// EnterpriseKeyTestingOptionsInput is an input type that accepts EnterpriseKeyTestingOptionsArgs and EnterpriseKeyTestingOptionsOutput values.
// You can construct a concrete instance of `EnterpriseKeyTestingOptionsInput` via:
//
//          EnterpriseKeyTestingOptionsArgs{...}
type EnterpriseKeyTestingOptionsInput interface {
	pulumi.Input

	ToEnterpriseKeyTestingOptionsOutput() EnterpriseKeyTestingOptionsOutput
	ToEnterpriseKeyTestingOptionsOutputWithContext(context.Context) EnterpriseKeyTestingOptionsOutput
}

type EnterpriseKeyTestingOptionsArgs struct {
	// For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if UNSOLVABLE_CHALLENGE. Possible values: TESTING_CHALLENGE_UNSPECIFIED, NOCAPTCHA, UNSOLVABLE_CHALLENGE
	TestingChallenge pulumi.StringPtrInput `pulumi:"testingChallenge"`
	// All assessments for this Key will return this score. Must be between 0 (likely not legitimate) and 1 (likely legitimate) inclusive.
	TestingScore pulumi.Float64PtrInput `pulumi:"testingScore"`
}

func (EnterpriseKeyTestingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseKeyTestingOptions)(nil)).Elem()
}

func (i EnterpriseKeyTestingOptionsArgs) ToEnterpriseKeyTestingOptionsOutput() EnterpriseKeyTestingOptionsOutput {
	return i.ToEnterpriseKeyTestingOptionsOutputWithContext(context.Background())
}

func (i EnterpriseKeyTestingOptionsArgs) ToEnterpriseKeyTestingOptionsOutputWithContext(ctx context.Context) EnterpriseKeyTestingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseKeyTestingOptionsOutput)
}

func (i EnterpriseKeyTestingOptionsArgs) ToEnterpriseKeyTestingOptionsPtrOutput() EnterpriseKeyTestingOptionsPtrOutput {
	return i.ToEnterpriseKeyTestingOptionsPtrOutputWithContext(context.Background())
}

func (i EnterpriseKeyTestingOptionsArgs) ToEnterpriseKeyTestingOptionsPtrOutputWithContext(ctx context.Context) EnterpriseKeyTestingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseKeyTestingOptionsOutput).ToEnterpriseKeyTestingOptionsPtrOutputWithContext(ctx)
}

// EnterpriseKeyTestingOptionsPtrInput is an input type that accepts EnterpriseKeyTestingOptionsArgs, EnterpriseKeyTestingOptionsPtr and EnterpriseKeyTestingOptionsPtrOutput values.
// You can construct a concrete instance of `EnterpriseKeyTestingOptionsPtrInput` via:
//
//          EnterpriseKeyTestingOptionsArgs{...}
//
//  or:
//
//          nil
type EnterpriseKeyTestingOptionsPtrInput interface {
	pulumi.Input

	ToEnterpriseKeyTestingOptionsPtrOutput() EnterpriseKeyTestingOptionsPtrOutput
	ToEnterpriseKeyTestingOptionsPtrOutputWithContext(context.Context) EnterpriseKeyTestingOptionsPtrOutput
}

type enterpriseKeyTestingOptionsPtrType EnterpriseKeyTestingOptionsArgs

func EnterpriseKeyTestingOptionsPtr(v *EnterpriseKeyTestingOptionsArgs) EnterpriseKeyTestingOptionsPtrInput {
	return (*enterpriseKeyTestingOptionsPtrType)(v)
}

func (*enterpriseKeyTestingOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseKeyTestingOptions)(nil)).Elem()
}

func (i *enterpriseKeyTestingOptionsPtrType) ToEnterpriseKeyTestingOptionsPtrOutput() EnterpriseKeyTestingOptionsPtrOutput {
	return i.ToEnterpriseKeyTestingOptionsPtrOutputWithContext(context.Background())
}

func (i *enterpriseKeyTestingOptionsPtrType) ToEnterpriseKeyTestingOptionsPtrOutputWithContext(ctx context.Context) EnterpriseKeyTestingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseKeyTestingOptionsPtrOutput)
}

type EnterpriseKeyTestingOptionsOutput struct{ *pulumi.OutputState }

func (EnterpriseKeyTestingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseKeyTestingOptions)(nil)).Elem()
}

func (o EnterpriseKeyTestingOptionsOutput) ToEnterpriseKeyTestingOptionsOutput() EnterpriseKeyTestingOptionsOutput {
	return o
}

func (o EnterpriseKeyTestingOptionsOutput) ToEnterpriseKeyTestingOptionsOutputWithContext(ctx context.Context) EnterpriseKeyTestingOptionsOutput {
	return o
}

func (o EnterpriseKeyTestingOptionsOutput) ToEnterpriseKeyTestingOptionsPtrOutput() EnterpriseKeyTestingOptionsPtrOutput {
	return o.ToEnterpriseKeyTestingOptionsPtrOutputWithContext(context.Background())
}

func (o EnterpriseKeyTestingOptionsOutput) ToEnterpriseKeyTestingOptionsPtrOutputWithContext(ctx context.Context) EnterpriseKeyTestingOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseKeyTestingOptions) *EnterpriseKeyTestingOptions {
		return &v
	}).(EnterpriseKeyTestingOptionsPtrOutput)
}

// For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if UNSOLVABLE_CHALLENGE. Possible values: TESTING_CHALLENGE_UNSPECIFIED, NOCAPTCHA, UNSOLVABLE_CHALLENGE
func (o EnterpriseKeyTestingOptionsOutput) TestingChallenge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseKeyTestingOptions) *string { return v.TestingChallenge }).(pulumi.StringPtrOutput)
}

// All assessments for this Key will return this score. Must be between 0 (likely not legitimate) and 1 (likely legitimate) inclusive.
func (o EnterpriseKeyTestingOptionsOutput) TestingScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v EnterpriseKeyTestingOptions) *float64 { return v.TestingScore }).(pulumi.Float64PtrOutput)
}

type EnterpriseKeyTestingOptionsPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseKeyTestingOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseKeyTestingOptions)(nil)).Elem()
}

func (o EnterpriseKeyTestingOptionsPtrOutput) ToEnterpriseKeyTestingOptionsPtrOutput() EnterpriseKeyTestingOptionsPtrOutput {
	return o
}

func (o EnterpriseKeyTestingOptionsPtrOutput) ToEnterpriseKeyTestingOptionsPtrOutputWithContext(ctx context.Context) EnterpriseKeyTestingOptionsPtrOutput {
	return o
}

func (o EnterpriseKeyTestingOptionsPtrOutput) Elem() EnterpriseKeyTestingOptionsOutput {
	return o.ApplyT(func(v *EnterpriseKeyTestingOptions) EnterpriseKeyTestingOptions {
		if v != nil {
			return *v
		}
		var ret EnterpriseKeyTestingOptions
		return ret
	}).(EnterpriseKeyTestingOptionsOutput)
}

// For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if UNSOLVABLE_CHALLENGE. Possible values: TESTING_CHALLENGE_UNSPECIFIED, NOCAPTCHA, UNSOLVABLE_CHALLENGE
func (o EnterpriseKeyTestingOptionsPtrOutput) TestingChallenge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseKeyTestingOptions) *string {
		if v == nil {
			return nil
		}
		return v.TestingChallenge
	}).(pulumi.StringPtrOutput)
}

// All assessments for this Key will return this score. Must be between 0 (likely not legitimate) and 1 (likely legitimate) inclusive.
func (o EnterpriseKeyTestingOptionsPtrOutput) TestingScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EnterpriseKeyTestingOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.TestingScore
	}).(pulumi.Float64PtrOutput)
}

type EnterpriseKeyWebSettings struct {
	// If set to true, it means allowedDomains will not be enforced.
	AllowAllDomains *bool `pulumi:"allowAllDomains"`
	// If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.
	AllowAmpTraffic *bool `pulumi:"allowAmpTraffic"`
	// Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: 'example.com' or 'subdomain.example.com'
	AllowedDomains []string `pulumi:"allowedDomains"`
	// Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE. Possible values: CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED, USABILITY, BALANCE, SECURITY
	ChallengeSecurityPreference *string `pulumi:"challengeSecurityPreference"`
	// Required. Describes how this key is integrated with the website. Possible values: SCORE, CHECKBOX, INVISIBLE
	IntegrationType string `pulumi:"integrationType"`
}

// EnterpriseKeyWebSettingsInput is an input type that accepts EnterpriseKeyWebSettingsArgs and EnterpriseKeyWebSettingsOutput values.
// You can construct a concrete instance of `EnterpriseKeyWebSettingsInput` via:
//
//          EnterpriseKeyWebSettingsArgs{...}
type EnterpriseKeyWebSettingsInput interface {
	pulumi.Input

	ToEnterpriseKeyWebSettingsOutput() EnterpriseKeyWebSettingsOutput
	ToEnterpriseKeyWebSettingsOutputWithContext(context.Context) EnterpriseKeyWebSettingsOutput
}

type EnterpriseKeyWebSettingsArgs struct {
	// If set to true, it means allowedDomains will not be enforced.
	AllowAllDomains pulumi.BoolPtrInput `pulumi:"allowAllDomains"`
	// If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.
	AllowAmpTraffic pulumi.BoolPtrInput `pulumi:"allowAmpTraffic"`
	// Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: 'example.com' or 'subdomain.example.com'
	AllowedDomains pulumi.StringArrayInput `pulumi:"allowedDomains"`
	// Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE. Possible values: CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED, USABILITY, BALANCE, SECURITY
	ChallengeSecurityPreference pulumi.StringPtrInput `pulumi:"challengeSecurityPreference"`
	// Required. Describes how this key is integrated with the website. Possible values: SCORE, CHECKBOX, INVISIBLE
	IntegrationType pulumi.StringInput `pulumi:"integrationType"`
}

func (EnterpriseKeyWebSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseKeyWebSettings)(nil)).Elem()
}

func (i EnterpriseKeyWebSettingsArgs) ToEnterpriseKeyWebSettingsOutput() EnterpriseKeyWebSettingsOutput {
	return i.ToEnterpriseKeyWebSettingsOutputWithContext(context.Background())
}

func (i EnterpriseKeyWebSettingsArgs) ToEnterpriseKeyWebSettingsOutputWithContext(ctx context.Context) EnterpriseKeyWebSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseKeyWebSettingsOutput)
}

func (i EnterpriseKeyWebSettingsArgs) ToEnterpriseKeyWebSettingsPtrOutput() EnterpriseKeyWebSettingsPtrOutput {
	return i.ToEnterpriseKeyWebSettingsPtrOutputWithContext(context.Background())
}

func (i EnterpriseKeyWebSettingsArgs) ToEnterpriseKeyWebSettingsPtrOutputWithContext(ctx context.Context) EnterpriseKeyWebSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseKeyWebSettingsOutput).ToEnterpriseKeyWebSettingsPtrOutputWithContext(ctx)
}

// EnterpriseKeyWebSettingsPtrInput is an input type that accepts EnterpriseKeyWebSettingsArgs, EnterpriseKeyWebSettingsPtr and EnterpriseKeyWebSettingsPtrOutput values.
// You can construct a concrete instance of `EnterpriseKeyWebSettingsPtrInput` via:
//
//          EnterpriseKeyWebSettingsArgs{...}
//
//  or:
//
//          nil
type EnterpriseKeyWebSettingsPtrInput interface {
	pulumi.Input

	ToEnterpriseKeyWebSettingsPtrOutput() EnterpriseKeyWebSettingsPtrOutput
	ToEnterpriseKeyWebSettingsPtrOutputWithContext(context.Context) EnterpriseKeyWebSettingsPtrOutput
}

type enterpriseKeyWebSettingsPtrType EnterpriseKeyWebSettingsArgs

func EnterpriseKeyWebSettingsPtr(v *EnterpriseKeyWebSettingsArgs) EnterpriseKeyWebSettingsPtrInput {
	return (*enterpriseKeyWebSettingsPtrType)(v)
}

func (*enterpriseKeyWebSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseKeyWebSettings)(nil)).Elem()
}

func (i *enterpriseKeyWebSettingsPtrType) ToEnterpriseKeyWebSettingsPtrOutput() EnterpriseKeyWebSettingsPtrOutput {
	return i.ToEnterpriseKeyWebSettingsPtrOutputWithContext(context.Background())
}

func (i *enterpriseKeyWebSettingsPtrType) ToEnterpriseKeyWebSettingsPtrOutputWithContext(ctx context.Context) EnterpriseKeyWebSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseKeyWebSettingsPtrOutput)
}

type EnterpriseKeyWebSettingsOutput struct{ *pulumi.OutputState }

func (EnterpriseKeyWebSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseKeyWebSettings)(nil)).Elem()
}

func (o EnterpriseKeyWebSettingsOutput) ToEnterpriseKeyWebSettingsOutput() EnterpriseKeyWebSettingsOutput {
	return o
}

func (o EnterpriseKeyWebSettingsOutput) ToEnterpriseKeyWebSettingsOutputWithContext(ctx context.Context) EnterpriseKeyWebSettingsOutput {
	return o
}

func (o EnterpriseKeyWebSettingsOutput) ToEnterpriseKeyWebSettingsPtrOutput() EnterpriseKeyWebSettingsPtrOutput {
	return o.ToEnterpriseKeyWebSettingsPtrOutputWithContext(context.Background())
}

func (o EnterpriseKeyWebSettingsOutput) ToEnterpriseKeyWebSettingsPtrOutputWithContext(ctx context.Context) EnterpriseKeyWebSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseKeyWebSettings) *EnterpriseKeyWebSettings {
		return &v
	}).(EnterpriseKeyWebSettingsPtrOutput)
}

// If set to true, it means allowedDomains will not be enforced.
func (o EnterpriseKeyWebSettingsOutput) AllowAllDomains() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseKeyWebSettings) *bool { return v.AllowAllDomains }).(pulumi.BoolPtrOutput)
}

// If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.
func (o EnterpriseKeyWebSettingsOutput) AllowAmpTraffic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseKeyWebSettings) *bool { return v.AllowAmpTraffic }).(pulumi.BoolPtrOutput)
}

// Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: 'example.com' or 'subdomain.example.com'
func (o EnterpriseKeyWebSettingsOutput) AllowedDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseKeyWebSettings) []string { return v.AllowedDomains }).(pulumi.StringArrayOutput)
}

// Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE. Possible values: CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED, USABILITY, BALANCE, SECURITY
func (o EnterpriseKeyWebSettingsOutput) ChallengeSecurityPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseKeyWebSettings) *string { return v.ChallengeSecurityPreference }).(pulumi.StringPtrOutput)
}

// Required. Describes how this key is integrated with the website. Possible values: SCORE, CHECKBOX, INVISIBLE
func (o EnterpriseKeyWebSettingsOutput) IntegrationType() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseKeyWebSettings) string { return v.IntegrationType }).(pulumi.StringOutput)
}

type EnterpriseKeyWebSettingsPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseKeyWebSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseKeyWebSettings)(nil)).Elem()
}

func (o EnterpriseKeyWebSettingsPtrOutput) ToEnterpriseKeyWebSettingsPtrOutput() EnterpriseKeyWebSettingsPtrOutput {
	return o
}

func (o EnterpriseKeyWebSettingsPtrOutput) ToEnterpriseKeyWebSettingsPtrOutputWithContext(ctx context.Context) EnterpriseKeyWebSettingsPtrOutput {
	return o
}

func (o EnterpriseKeyWebSettingsPtrOutput) Elem() EnterpriseKeyWebSettingsOutput {
	return o.ApplyT(func(v *EnterpriseKeyWebSettings) EnterpriseKeyWebSettings {
		if v != nil {
			return *v
		}
		var ret EnterpriseKeyWebSettings
		return ret
	}).(EnterpriseKeyWebSettingsOutput)
}

// If set to true, it means allowedDomains will not be enforced.
func (o EnterpriseKeyWebSettingsPtrOutput) AllowAllDomains() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseKeyWebSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowAllDomains
	}).(pulumi.BoolPtrOutput)
}

// If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.
func (o EnterpriseKeyWebSettingsPtrOutput) AllowAmpTraffic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseKeyWebSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowAmpTraffic
	}).(pulumi.BoolPtrOutput)
}

// Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: 'example.com' or 'subdomain.example.com'
func (o EnterpriseKeyWebSettingsPtrOutput) AllowedDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseKeyWebSettings) []string {
		if v == nil {
			return nil
		}
		return v.AllowedDomains
	}).(pulumi.StringArrayOutput)
}

// Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE. Possible values: CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED, USABILITY, BALANCE, SECURITY
func (o EnterpriseKeyWebSettingsPtrOutput) ChallengeSecurityPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseKeyWebSettings) *string {
		if v == nil {
			return nil
		}
		return v.ChallengeSecurityPreference
	}).(pulumi.StringPtrOutput)
}

// Required. Describes how this key is integrated with the website. Possible values: SCORE, CHECKBOX, INVISIBLE
func (o EnterpriseKeyWebSettingsPtrOutput) IntegrationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseKeyWebSettings) *string {
		if v == nil {
			return nil
		}
		return &v.IntegrationType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseKeyAndroidSettingsInput)(nil)).Elem(), EnterpriseKeyAndroidSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseKeyAndroidSettingsPtrInput)(nil)).Elem(), EnterpriseKeyAndroidSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseKeyIosSettingsInput)(nil)).Elem(), EnterpriseKeyIosSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseKeyIosSettingsPtrInput)(nil)).Elem(), EnterpriseKeyIosSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseKeyTestingOptionsInput)(nil)).Elem(), EnterpriseKeyTestingOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseKeyTestingOptionsPtrInput)(nil)).Elem(), EnterpriseKeyTestingOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseKeyWebSettingsInput)(nil)).Elem(), EnterpriseKeyWebSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseKeyWebSettingsPtrInput)(nil)).Elem(), EnterpriseKeyWebSettingsArgs{})
	pulumi.RegisterOutputType(EnterpriseKeyAndroidSettingsOutput{})
	pulumi.RegisterOutputType(EnterpriseKeyAndroidSettingsPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseKeyIosSettingsOutput{})
	pulumi.RegisterOutputType(EnterpriseKeyIosSettingsPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseKeyTestingOptionsOutput{})
	pulumi.RegisterOutputType(EnterpriseKeyTestingOptionsPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseKeyWebSettingsOutput{})
	pulumi.RegisterOutputType(EnterpriseKeyWebSettingsPtrOutput{})
}
