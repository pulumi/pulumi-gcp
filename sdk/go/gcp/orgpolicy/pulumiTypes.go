// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package orgpolicy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type PolicyDryRunSpec struct {
	// (Output)
	// An opaque tag indicating the current version of the policy, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the policy`is returned from either a`GetPolicy`or a`ListPolicies`request, this`etag`indicates the version of the current policy to use when executing a read-modify-write loop. When the policy is returned from a`GetEffectivePolicy`request, the`etag` will be unset.
	Etag *string `pulumi:"etag"`
	// Determines the inheritance behavior for this policy. If `inheritFromParent` is true, policy rules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this policy becomes the new root for evaluation. This field can be set only for policies which configure list constraints.
	InheritFromParent *bool `pulumi:"inheritFromParent"`
	// Ignores policies set above this resource and restores the `constraintDefault` enforcement behavior of the specific constraint at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inheritFromParent` must be set to false.
	Reset *bool `pulumi:"reset"`
	// In policies for boolean constraints, the following requirements apply: - There must be one and only one policy rule where condition is unset. - Boolean policy rules with conditions must set `enforced` to the opposite of the policy rule without a condition. - During policy evaluation, policy rules with conditions that are true for a target resource take precedence.
	// Structure is documented below.
	Rules []PolicyDryRunSpecRule `pulumi:"rules"`
	// (Output)
	// Output only. The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that policy.
	UpdateTime *string `pulumi:"updateTime"`
}

// PolicyDryRunSpecInput is an input type that accepts PolicyDryRunSpecArgs and PolicyDryRunSpecOutput values.
// You can construct a concrete instance of `PolicyDryRunSpecInput` via:
//
//	PolicyDryRunSpecArgs{...}
type PolicyDryRunSpecInput interface {
	pulumi.Input

	ToPolicyDryRunSpecOutput() PolicyDryRunSpecOutput
	ToPolicyDryRunSpecOutputWithContext(context.Context) PolicyDryRunSpecOutput
}

type PolicyDryRunSpecArgs struct {
	// (Output)
	// An opaque tag indicating the current version of the policy, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the policy`is returned from either a`GetPolicy`or a`ListPolicies`request, this`etag`indicates the version of the current policy to use when executing a read-modify-write loop. When the policy is returned from a`GetEffectivePolicy`request, the`etag` will be unset.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Determines the inheritance behavior for this policy. If `inheritFromParent` is true, policy rules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this policy becomes the new root for evaluation. This field can be set only for policies which configure list constraints.
	InheritFromParent pulumi.BoolPtrInput `pulumi:"inheritFromParent"`
	// Ignores policies set above this resource and restores the `constraintDefault` enforcement behavior of the specific constraint at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inheritFromParent` must be set to false.
	Reset pulumi.BoolPtrInput `pulumi:"reset"`
	// In policies for boolean constraints, the following requirements apply: - There must be one and only one policy rule where condition is unset. - Boolean policy rules with conditions must set `enforced` to the opposite of the policy rule without a condition. - During policy evaluation, policy rules with conditions that are true for a target resource take precedence.
	// Structure is documented below.
	Rules PolicyDryRunSpecRuleArrayInput `pulumi:"rules"`
	// (Output)
	// Output only. The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that policy.
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
}

func (PolicyDryRunSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDryRunSpec)(nil)).Elem()
}

func (i PolicyDryRunSpecArgs) ToPolicyDryRunSpecOutput() PolicyDryRunSpecOutput {
	return i.ToPolicyDryRunSpecOutputWithContext(context.Background())
}

func (i PolicyDryRunSpecArgs) ToPolicyDryRunSpecOutputWithContext(ctx context.Context) PolicyDryRunSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDryRunSpecOutput)
}

func (i PolicyDryRunSpecArgs) ToPolicyDryRunSpecPtrOutput() PolicyDryRunSpecPtrOutput {
	return i.ToPolicyDryRunSpecPtrOutputWithContext(context.Background())
}

func (i PolicyDryRunSpecArgs) ToPolicyDryRunSpecPtrOutputWithContext(ctx context.Context) PolicyDryRunSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDryRunSpecOutput).ToPolicyDryRunSpecPtrOutputWithContext(ctx)
}

// PolicyDryRunSpecPtrInput is an input type that accepts PolicyDryRunSpecArgs, PolicyDryRunSpecPtr and PolicyDryRunSpecPtrOutput values.
// You can construct a concrete instance of `PolicyDryRunSpecPtrInput` via:
//
//	        PolicyDryRunSpecArgs{...}
//
//	or:
//
//	        nil
type PolicyDryRunSpecPtrInput interface {
	pulumi.Input

	ToPolicyDryRunSpecPtrOutput() PolicyDryRunSpecPtrOutput
	ToPolicyDryRunSpecPtrOutputWithContext(context.Context) PolicyDryRunSpecPtrOutput
}

type policyDryRunSpecPtrType PolicyDryRunSpecArgs

func PolicyDryRunSpecPtr(v *PolicyDryRunSpecArgs) PolicyDryRunSpecPtrInput {
	return (*policyDryRunSpecPtrType)(v)
}

func (*policyDryRunSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDryRunSpec)(nil)).Elem()
}

func (i *policyDryRunSpecPtrType) ToPolicyDryRunSpecPtrOutput() PolicyDryRunSpecPtrOutput {
	return i.ToPolicyDryRunSpecPtrOutputWithContext(context.Background())
}

func (i *policyDryRunSpecPtrType) ToPolicyDryRunSpecPtrOutputWithContext(ctx context.Context) PolicyDryRunSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDryRunSpecPtrOutput)
}

type PolicyDryRunSpecOutput struct{ *pulumi.OutputState }

func (PolicyDryRunSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDryRunSpec)(nil)).Elem()
}

func (o PolicyDryRunSpecOutput) ToPolicyDryRunSpecOutput() PolicyDryRunSpecOutput {
	return o
}

func (o PolicyDryRunSpecOutput) ToPolicyDryRunSpecOutputWithContext(ctx context.Context) PolicyDryRunSpecOutput {
	return o
}

func (o PolicyDryRunSpecOutput) ToPolicyDryRunSpecPtrOutput() PolicyDryRunSpecPtrOutput {
	return o.ToPolicyDryRunSpecPtrOutputWithContext(context.Background())
}

func (o PolicyDryRunSpecOutput) ToPolicyDryRunSpecPtrOutputWithContext(ctx context.Context) PolicyDryRunSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyDryRunSpec) *PolicyDryRunSpec {
		return &v
	}).(PolicyDryRunSpecPtrOutput)
}

// (Output)
// An opaque tag indicating the current version of the policy, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the policy`is returned from either a`GetPolicy`or a`ListPolicies`request, this`etag`indicates the version of the current policy to use when executing a read-modify-write loop. When the policy is returned from a`GetEffectivePolicy`request, the`etag` will be unset.
func (o PolicyDryRunSpecOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpec) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Determines the inheritance behavior for this policy. If `inheritFromParent` is true, policy rules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this policy becomes the new root for evaluation. This field can be set only for policies which configure list constraints.
func (o PolicyDryRunSpecOutput) InheritFromParent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpec) *bool { return v.InheritFromParent }).(pulumi.BoolPtrOutput)
}

// Ignores policies set above this resource and restores the `constraintDefault` enforcement behavior of the specific constraint at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inheritFromParent` must be set to false.
func (o PolicyDryRunSpecOutput) Reset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpec) *bool { return v.Reset }).(pulumi.BoolPtrOutput)
}

// In policies for boolean constraints, the following requirements apply: - There must be one and only one policy rule where condition is unset. - Boolean policy rules with conditions must set `enforced` to the opposite of the policy rule without a condition. - During policy evaluation, policy rules with conditions that are true for a target resource take precedence.
// Structure is documented below.
func (o PolicyDryRunSpecOutput) Rules() PolicyDryRunSpecRuleArrayOutput {
	return o.ApplyT(func(v PolicyDryRunSpec) []PolicyDryRunSpecRule { return v.Rules }).(PolicyDryRunSpecRuleArrayOutput)
}

// (Output)
// Output only. The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that policy.
func (o PolicyDryRunSpecOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpec) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

type PolicyDryRunSpecPtrOutput struct{ *pulumi.OutputState }

func (PolicyDryRunSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDryRunSpec)(nil)).Elem()
}

func (o PolicyDryRunSpecPtrOutput) ToPolicyDryRunSpecPtrOutput() PolicyDryRunSpecPtrOutput {
	return o
}

func (o PolicyDryRunSpecPtrOutput) ToPolicyDryRunSpecPtrOutputWithContext(ctx context.Context) PolicyDryRunSpecPtrOutput {
	return o
}

func (o PolicyDryRunSpecPtrOutput) Elem() PolicyDryRunSpecOutput {
	return o.ApplyT(func(v *PolicyDryRunSpec) PolicyDryRunSpec {
		if v != nil {
			return *v
		}
		var ret PolicyDryRunSpec
		return ret
	}).(PolicyDryRunSpecOutput)
}

// (Output)
// An opaque tag indicating the current version of the policy, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the policy`is returned from either a`GetPolicy`or a`ListPolicies`request, this`etag`indicates the version of the current policy to use when executing a read-modify-write loop. When the policy is returned from a`GetEffectivePolicy`request, the`etag` will be unset.
func (o PolicyDryRunSpecPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDryRunSpec) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Determines the inheritance behavior for this policy. If `inheritFromParent` is true, policy rules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this policy becomes the new root for evaluation. This field can be set only for policies which configure list constraints.
func (o PolicyDryRunSpecPtrOutput) InheritFromParent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyDryRunSpec) *bool {
		if v == nil {
			return nil
		}
		return v.InheritFromParent
	}).(pulumi.BoolPtrOutput)
}

// Ignores policies set above this resource and restores the `constraintDefault` enforcement behavior of the specific constraint at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inheritFromParent` must be set to false.
func (o PolicyDryRunSpecPtrOutput) Reset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyDryRunSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Reset
	}).(pulumi.BoolPtrOutput)
}

// In policies for boolean constraints, the following requirements apply: - There must be one and only one policy rule where condition is unset. - Boolean policy rules with conditions must set `enforced` to the opposite of the policy rule without a condition. - During policy evaluation, policy rules with conditions that are true for a target resource take precedence.
// Structure is documented below.
func (o PolicyDryRunSpecPtrOutput) Rules() PolicyDryRunSpecRuleArrayOutput {
	return o.ApplyT(func(v *PolicyDryRunSpec) []PolicyDryRunSpecRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(PolicyDryRunSpecRuleArrayOutput)
}

// (Output)
// Output only. The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that policy.
func (o PolicyDryRunSpecPtrOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDryRunSpec) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTime
	}).(pulumi.StringPtrOutput)
}

type PolicyDryRunSpecRule struct {
	// Setting this to `"TRUE"` means that all values are allowed. This field can be set only in Policies for list constraints.
	AllowAll *string `pulumi:"allowAll"`
	// A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where keyName and valueName are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
	// Structure is documented below.
	Condition *PolicyDryRunSpecRuleCondition `pulumi:"condition"`
	// Setting this to `"TRUE"` means that all values are denied. This field can be set only in Policies for list constraints.
	DenyAll *string `pulumi:"denyAll"`
	// If `"TRUE"`, then the `Policy` is enforced. If `"FALSE"`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
	Enforce *string `pulumi:"enforce"`
	// Optional. Required for Managed Constraints if parameters defined in constraints. Pass parameter values when policy enforcement is enabled. Ensure that parameter value types match those defined in the constraint definition. For example: { \"allowedLocations\" : [\"us-east1\", \"us-west1\"], \"allowAll\" : true }
	Parameters *string `pulumi:"parameters"`
	// List of values to be used for this policy rule. This field can be set only in policies for list constraints.
	// Structure is documented below.
	Values *PolicyDryRunSpecRuleValues `pulumi:"values"`
}

// PolicyDryRunSpecRuleInput is an input type that accepts PolicyDryRunSpecRuleArgs and PolicyDryRunSpecRuleOutput values.
// You can construct a concrete instance of `PolicyDryRunSpecRuleInput` via:
//
//	PolicyDryRunSpecRuleArgs{...}
type PolicyDryRunSpecRuleInput interface {
	pulumi.Input

	ToPolicyDryRunSpecRuleOutput() PolicyDryRunSpecRuleOutput
	ToPolicyDryRunSpecRuleOutputWithContext(context.Context) PolicyDryRunSpecRuleOutput
}

type PolicyDryRunSpecRuleArgs struct {
	// Setting this to `"TRUE"` means that all values are allowed. This field can be set only in Policies for list constraints.
	AllowAll pulumi.StringPtrInput `pulumi:"allowAll"`
	// A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where keyName and valueName are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
	// Structure is documented below.
	Condition PolicyDryRunSpecRuleConditionPtrInput `pulumi:"condition"`
	// Setting this to `"TRUE"` means that all values are denied. This field can be set only in Policies for list constraints.
	DenyAll pulumi.StringPtrInput `pulumi:"denyAll"`
	// If `"TRUE"`, then the `Policy` is enforced. If `"FALSE"`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
	Enforce pulumi.StringPtrInput `pulumi:"enforce"`
	// Optional. Required for Managed Constraints if parameters defined in constraints. Pass parameter values when policy enforcement is enabled. Ensure that parameter value types match those defined in the constraint definition. For example: { \"allowedLocations\" : [\"us-east1\", \"us-west1\"], \"allowAll\" : true }
	Parameters pulumi.StringPtrInput `pulumi:"parameters"`
	// List of values to be used for this policy rule. This field can be set only in policies for list constraints.
	// Structure is documented below.
	Values PolicyDryRunSpecRuleValuesPtrInput `pulumi:"values"`
}

func (PolicyDryRunSpecRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDryRunSpecRule)(nil)).Elem()
}

func (i PolicyDryRunSpecRuleArgs) ToPolicyDryRunSpecRuleOutput() PolicyDryRunSpecRuleOutput {
	return i.ToPolicyDryRunSpecRuleOutputWithContext(context.Background())
}

func (i PolicyDryRunSpecRuleArgs) ToPolicyDryRunSpecRuleOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDryRunSpecRuleOutput)
}

// PolicyDryRunSpecRuleArrayInput is an input type that accepts PolicyDryRunSpecRuleArray and PolicyDryRunSpecRuleArrayOutput values.
// You can construct a concrete instance of `PolicyDryRunSpecRuleArrayInput` via:
//
//	PolicyDryRunSpecRuleArray{ PolicyDryRunSpecRuleArgs{...} }
type PolicyDryRunSpecRuleArrayInput interface {
	pulumi.Input

	ToPolicyDryRunSpecRuleArrayOutput() PolicyDryRunSpecRuleArrayOutput
	ToPolicyDryRunSpecRuleArrayOutputWithContext(context.Context) PolicyDryRunSpecRuleArrayOutput
}

type PolicyDryRunSpecRuleArray []PolicyDryRunSpecRuleInput

func (PolicyDryRunSpecRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDryRunSpecRule)(nil)).Elem()
}

func (i PolicyDryRunSpecRuleArray) ToPolicyDryRunSpecRuleArrayOutput() PolicyDryRunSpecRuleArrayOutput {
	return i.ToPolicyDryRunSpecRuleArrayOutputWithContext(context.Background())
}

func (i PolicyDryRunSpecRuleArray) ToPolicyDryRunSpecRuleArrayOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDryRunSpecRuleArrayOutput)
}

type PolicyDryRunSpecRuleOutput struct{ *pulumi.OutputState }

func (PolicyDryRunSpecRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDryRunSpecRule)(nil)).Elem()
}

func (o PolicyDryRunSpecRuleOutput) ToPolicyDryRunSpecRuleOutput() PolicyDryRunSpecRuleOutput {
	return o
}

func (o PolicyDryRunSpecRuleOutput) ToPolicyDryRunSpecRuleOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleOutput {
	return o
}

// Setting this to `"TRUE"` means that all values are allowed. This field can be set only in Policies for list constraints.
func (o PolicyDryRunSpecRuleOutput) AllowAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpecRule) *string { return v.AllowAll }).(pulumi.StringPtrOutput)
}

// A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where keyName and valueName are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
// Structure is documented below.
func (o PolicyDryRunSpecRuleOutput) Condition() PolicyDryRunSpecRuleConditionPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpecRule) *PolicyDryRunSpecRuleCondition { return v.Condition }).(PolicyDryRunSpecRuleConditionPtrOutput)
}

// Setting this to `"TRUE"` means that all values are denied. This field can be set only in Policies for list constraints.
func (o PolicyDryRunSpecRuleOutput) DenyAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpecRule) *string { return v.DenyAll }).(pulumi.StringPtrOutput)
}

// If `"TRUE"`, then the `Policy` is enforced. If `"FALSE"`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
func (o PolicyDryRunSpecRuleOutput) Enforce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpecRule) *string { return v.Enforce }).(pulumi.StringPtrOutput)
}

// Optional. Required for Managed Constraints if parameters defined in constraints. Pass parameter values when policy enforcement is enabled. Ensure that parameter value types match those defined in the constraint definition. For example: { \"allowedLocations\" : [\"us-east1\", \"us-west1\"], \"allowAll\" : true }
func (o PolicyDryRunSpecRuleOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpecRule) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// List of values to be used for this policy rule. This field can be set only in policies for list constraints.
// Structure is documented below.
func (o PolicyDryRunSpecRuleOutput) Values() PolicyDryRunSpecRuleValuesPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpecRule) *PolicyDryRunSpecRuleValues { return v.Values }).(PolicyDryRunSpecRuleValuesPtrOutput)
}

type PolicyDryRunSpecRuleArrayOutput struct{ *pulumi.OutputState }

func (PolicyDryRunSpecRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDryRunSpecRule)(nil)).Elem()
}

func (o PolicyDryRunSpecRuleArrayOutput) ToPolicyDryRunSpecRuleArrayOutput() PolicyDryRunSpecRuleArrayOutput {
	return o
}

func (o PolicyDryRunSpecRuleArrayOutput) ToPolicyDryRunSpecRuleArrayOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleArrayOutput {
	return o
}

func (o PolicyDryRunSpecRuleArrayOutput) Index(i pulumi.IntInput) PolicyDryRunSpecRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDryRunSpecRule {
		return vs[0].([]PolicyDryRunSpecRule)[vs[1].(int)]
	}).(PolicyDryRunSpecRuleOutput)
}

type PolicyDryRunSpecRuleCondition struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// PolicyDryRunSpecRuleConditionInput is an input type that accepts PolicyDryRunSpecRuleConditionArgs and PolicyDryRunSpecRuleConditionOutput values.
// You can construct a concrete instance of `PolicyDryRunSpecRuleConditionInput` via:
//
//	PolicyDryRunSpecRuleConditionArgs{...}
type PolicyDryRunSpecRuleConditionInput interface {
	pulumi.Input

	ToPolicyDryRunSpecRuleConditionOutput() PolicyDryRunSpecRuleConditionOutput
	ToPolicyDryRunSpecRuleConditionOutputWithContext(context.Context) PolicyDryRunSpecRuleConditionOutput
}

type PolicyDryRunSpecRuleConditionArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (PolicyDryRunSpecRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDryRunSpecRuleCondition)(nil)).Elem()
}

func (i PolicyDryRunSpecRuleConditionArgs) ToPolicyDryRunSpecRuleConditionOutput() PolicyDryRunSpecRuleConditionOutput {
	return i.ToPolicyDryRunSpecRuleConditionOutputWithContext(context.Background())
}

func (i PolicyDryRunSpecRuleConditionArgs) ToPolicyDryRunSpecRuleConditionOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDryRunSpecRuleConditionOutput)
}

func (i PolicyDryRunSpecRuleConditionArgs) ToPolicyDryRunSpecRuleConditionPtrOutput() PolicyDryRunSpecRuleConditionPtrOutput {
	return i.ToPolicyDryRunSpecRuleConditionPtrOutputWithContext(context.Background())
}

func (i PolicyDryRunSpecRuleConditionArgs) ToPolicyDryRunSpecRuleConditionPtrOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDryRunSpecRuleConditionOutput).ToPolicyDryRunSpecRuleConditionPtrOutputWithContext(ctx)
}

// PolicyDryRunSpecRuleConditionPtrInput is an input type that accepts PolicyDryRunSpecRuleConditionArgs, PolicyDryRunSpecRuleConditionPtr and PolicyDryRunSpecRuleConditionPtrOutput values.
// You can construct a concrete instance of `PolicyDryRunSpecRuleConditionPtrInput` via:
//
//	        PolicyDryRunSpecRuleConditionArgs{...}
//
//	or:
//
//	        nil
type PolicyDryRunSpecRuleConditionPtrInput interface {
	pulumi.Input

	ToPolicyDryRunSpecRuleConditionPtrOutput() PolicyDryRunSpecRuleConditionPtrOutput
	ToPolicyDryRunSpecRuleConditionPtrOutputWithContext(context.Context) PolicyDryRunSpecRuleConditionPtrOutput
}

type policyDryRunSpecRuleConditionPtrType PolicyDryRunSpecRuleConditionArgs

func PolicyDryRunSpecRuleConditionPtr(v *PolicyDryRunSpecRuleConditionArgs) PolicyDryRunSpecRuleConditionPtrInput {
	return (*policyDryRunSpecRuleConditionPtrType)(v)
}

func (*policyDryRunSpecRuleConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDryRunSpecRuleCondition)(nil)).Elem()
}

func (i *policyDryRunSpecRuleConditionPtrType) ToPolicyDryRunSpecRuleConditionPtrOutput() PolicyDryRunSpecRuleConditionPtrOutput {
	return i.ToPolicyDryRunSpecRuleConditionPtrOutputWithContext(context.Background())
}

func (i *policyDryRunSpecRuleConditionPtrType) ToPolicyDryRunSpecRuleConditionPtrOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDryRunSpecRuleConditionPtrOutput)
}

type PolicyDryRunSpecRuleConditionOutput struct{ *pulumi.OutputState }

func (PolicyDryRunSpecRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDryRunSpecRuleCondition)(nil)).Elem()
}

func (o PolicyDryRunSpecRuleConditionOutput) ToPolicyDryRunSpecRuleConditionOutput() PolicyDryRunSpecRuleConditionOutput {
	return o
}

func (o PolicyDryRunSpecRuleConditionOutput) ToPolicyDryRunSpecRuleConditionOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleConditionOutput {
	return o
}

func (o PolicyDryRunSpecRuleConditionOutput) ToPolicyDryRunSpecRuleConditionPtrOutput() PolicyDryRunSpecRuleConditionPtrOutput {
	return o.ToPolicyDryRunSpecRuleConditionPtrOutputWithContext(context.Background())
}

func (o PolicyDryRunSpecRuleConditionOutput) ToPolicyDryRunSpecRuleConditionPtrOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyDryRunSpecRuleCondition) *PolicyDryRunSpecRuleCondition {
		return &v
	}).(PolicyDryRunSpecRuleConditionPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o PolicyDryRunSpecRuleConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpecRuleCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o PolicyDryRunSpecRuleConditionOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpecRuleCondition) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o PolicyDryRunSpecRuleConditionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpecRuleCondition) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o PolicyDryRunSpecRuleConditionOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDryRunSpecRuleCondition) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type PolicyDryRunSpecRuleConditionPtrOutput struct{ *pulumi.OutputState }

func (PolicyDryRunSpecRuleConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDryRunSpecRuleCondition)(nil)).Elem()
}

func (o PolicyDryRunSpecRuleConditionPtrOutput) ToPolicyDryRunSpecRuleConditionPtrOutput() PolicyDryRunSpecRuleConditionPtrOutput {
	return o
}

func (o PolicyDryRunSpecRuleConditionPtrOutput) ToPolicyDryRunSpecRuleConditionPtrOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleConditionPtrOutput {
	return o
}

func (o PolicyDryRunSpecRuleConditionPtrOutput) Elem() PolicyDryRunSpecRuleConditionOutput {
	return o.ApplyT(func(v *PolicyDryRunSpecRuleCondition) PolicyDryRunSpecRuleCondition {
		if v != nil {
			return *v
		}
		var ret PolicyDryRunSpecRuleCondition
		return ret
	}).(PolicyDryRunSpecRuleConditionOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o PolicyDryRunSpecRuleConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDryRunSpecRuleCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o PolicyDryRunSpecRuleConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDryRunSpecRuleCondition) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o PolicyDryRunSpecRuleConditionPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDryRunSpecRuleCondition) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o PolicyDryRunSpecRuleConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDryRunSpecRuleCondition) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

type PolicyDryRunSpecRuleValues struct {
	// List of values allowed at this resource.
	AllowedValues []string `pulumi:"allowedValues"`
	// List of values denied at this resource.
	DeniedValues []string `pulumi:"deniedValues"`
}

// PolicyDryRunSpecRuleValuesInput is an input type that accepts PolicyDryRunSpecRuleValuesArgs and PolicyDryRunSpecRuleValuesOutput values.
// You can construct a concrete instance of `PolicyDryRunSpecRuleValuesInput` via:
//
//	PolicyDryRunSpecRuleValuesArgs{...}
type PolicyDryRunSpecRuleValuesInput interface {
	pulumi.Input

	ToPolicyDryRunSpecRuleValuesOutput() PolicyDryRunSpecRuleValuesOutput
	ToPolicyDryRunSpecRuleValuesOutputWithContext(context.Context) PolicyDryRunSpecRuleValuesOutput
}

type PolicyDryRunSpecRuleValuesArgs struct {
	// List of values allowed at this resource.
	AllowedValues pulumi.StringArrayInput `pulumi:"allowedValues"`
	// List of values denied at this resource.
	DeniedValues pulumi.StringArrayInput `pulumi:"deniedValues"`
}

func (PolicyDryRunSpecRuleValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDryRunSpecRuleValues)(nil)).Elem()
}

func (i PolicyDryRunSpecRuleValuesArgs) ToPolicyDryRunSpecRuleValuesOutput() PolicyDryRunSpecRuleValuesOutput {
	return i.ToPolicyDryRunSpecRuleValuesOutputWithContext(context.Background())
}

func (i PolicyDryRunSpecRuleValuesArgs) ToPolicyDryRunSpecRuleValuesOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDryRunSpecRuleValuesOutput)
}

func (i PolicyDryRunSpecRuleValuesArgs) ToPolicyDryRunSpecRuleValuesPtrOutput() PolicyDryRunSpecRuleValuesPtrOutput {
	return i.ToPolicyDryRunSpecRuleValuesPtrOutputWithContext(context.Background())
}

func (i PolicyDryRunSpecRuleValuesArgs) ToPolicyDryRunSpecRuleValuesPtrOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDryRunSpecRuleValuesOutput).ToPolicyDryRunSpecRuleValuesPtrOutputWithContext(ctx)
}

// PolicyDryRunSpecRuleValuesPtrInput is an input type that accepts PolicyDryRunSpecRuleValuesArgs, PolicyDryRunSpecRuleValuesPtr and PolicyDryRunSpecRuleValuesPtrOutput values.
// You can construct a concrete instance of `PolicyDryRunSpecRuleValuesPtrInput` via:
//
//	        PolicyDryRunSpecRuleValuesArgs{...}
//
//	or:
//
//	        nil
type PolicyDryRunSpecRuleValuesPtrInput interface {
	pulumi.Input

	ToPolicyDryRunSpecRuleValuesPtrOutput() PolicyDryRunSpecRuleValuesPtrOutput
	ToPolicyDryRunSpecRuleValuesPtrOutputWithContext(context.Context) PolicyDryRunSpecRuleValuesPtrOutput
}

type policyDryRunSpecRuleValuesPtrType PolicyDryRunSpecRuleValuesArgs

func PolicyDryRunSpecRuleValuesPtr(v *PolicyDryRunSpecRuleValuesArgs) PolicyDryRunSpecRuleValuesPtrInput {
	return (*policyDryRunSpecRuleValuesPtrType)(v)
}

func (*policyDryRunSpecRuleValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDryRunSpecRuleValues)(nil)).Elem()
}

func (i *policyDryRunSpecRuleValuesPtrType) ToPolicyDryRunSpecRuleValuesPtrOutput() PolicyDryRunSpecRuleValuesPtrOutput {
	return i.ToPolicyDryRunSpecRuleValuesPtrOutputWithContext(context.Background())
}

func (i *policyDryRunSpecRuleValuesPtrType) ToPolicyDryRunSpecRuleValuesPtrOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDryRunSpecRuleValuesPtrOutput)
}

type PolicyDryRunSpecRuleValuesOutput struct{ *pulumi.OutputState }

func (PolicyDryRunSpecRuleValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDryRunSpecRuleValues)(nil)).Elem()
}

func (o PolicyDryRunSpecRuleValuesOutput) ToPolicyDryRunSpecRuleValuesOutput() PolicyDryRunSpecRuleValuesOutput {
	return o
}

func (o PolicyDryRunSpecRuleValuesOutput) ToPolicyDryRunSpecRuleValuesOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleValuesOutput {
	return o
}

func (o PolicyDryRunSpecRuleValuesOutput) ToPolicyDryRunSpecRuleValuesPtrOutput() PolicyDryRunSpecRuleValuesPtrOutput {
	return o.ToPolicyDryRunSpecRuleValuesPtrOutputWithContext(context.Background())
}

func (o PolicyDryRunSpecRuleValuesOutput) ToPolicyDryRunSpecRuleValuesPtrOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyDryRunSpecRuleValues) *PolicyDryRunSpecRuleValues {
		return &v
	}).(PolicyDryRunSpecRuleValuesPtrOutput)
}

// List of values allowed at this resource.
func (o PolicyDryRunSpecRuleValuesOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDryRunSpecRuleValues) []string { return v.AllowedValues }).(pulumi.StringArrayOutput)
}

// List of values denied at this resource.
func (o PolicyDryRunSpecRuleValuesOutput) DeniedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDryRunSpecRuleValues) []string { return v.DeniedValues }).(pulumi.StringArrayOutput)
}

type PolicyDryRunSpecRuleValuesPtrOutput struct{ *pulumi.OutputState }

func (PolicyDryRunSpecRuleValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDryRunSpecRuleValues)(nil)).Elem()
}

func (o PolicyDryRunSpecRuleValuesPtrOutput) ToPolicyDryRunSpecRuleValuesPtrOutput() PolicyDryRunSpecRuleValuesPtrOutput {
	return o
}

func (o PolicyDryRunSpecRuleValuesPtrOutput) ToPolicyDryRunSpecRuleValuesPtrOutputWithContext(ctx context.Context) PolicyDryRunSpecRuleValuesPtrOutput {
	return o
}

func (o PolicyDryRunSpecRuleValuesPtrOutput) Elem() PolicyDryRunSpecRuleValuesOutput {
	return o.ApplyT(func(v *PolicyDryRunSpecRuleValues) PolicyDryRunSpecRuleValues {
		if v != nil {
			return *v
		}
		var ret PolicyDryRunSpecRuleValues
		return ret
	}).(PolicyDryRunSpecRuleValuesOutput)
}

// List of values allowed at this resource.
func (o PolicyDryRunSpecRuleValuesPtrOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyDryRunSpecRuleValues) []string {
		if v == nil {
			return nil
		}
		return v.AllowedValues
	}).(pulumi.StringArrayOutput)
}

// List of values denied at this resource.
func (o PolicyDryRunSpecRuleValuesPtrOutput) DeniedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyDryRunSpecRuleValues) []string {
		if v == nil {
			return nil
		}
		return v.DeniedValues
	}).(pulumi.StringArrayOutput)
}

type PolicySpec struct {
	// (Output)
	// An opaque tag indicating the current version of the `Policy`, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the `Policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
	Etag *string `pulumi:"etag"`
	// Determines the inheritance behavior for this `Policy`. If `inheritFromParent` is true, PolicyRules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this Policy becomes the new root for evaluation. This field can be set only for Policies which configure list constraints.
	InheritFromParent *bool `pulumi:"inheritFromParent"`
	// Ignores policies set above this resource and restores the `constraintDefault` enforcement behavior of the specific `Constraint` at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inheritFromParent` must be set to false.
	Reset *bool `pulumi:"reset"`
	// In Policies for boolean constraints, the following requirements apply: - There must be one and only one PolicyRule where condition is unset. - BooleanPolicyRules with conditions must set `enforced` to the opposite of the PolicyRule without a condition. - During policy evaluation, PolicyRules with conditions that are true for a target resource take precedence.
	// Structure is documented below.
	Rules []PolicySpecRule `pulumi:"rules"`
	// (Output)
	// Output only. The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that `Policy`.
	UpdateTime *string `pulumi:"updateTime"`
}

// PolicySpecInput is an input type that accepts PolicySpecArgs and PolicySpecOutput values.
// You can construct a concrete instance of `PolicySpecInput` via:
//
//	PolicySpecArgs{...}
type PolicySpecInput interface {
	pulumi.Input

	ToPolicySpecOutput() PolicySpecOutput
	ToPolicySpecOutputWithContext(context.Context) PolicySpecOutput
}

type PolicySpecArgs struct {
	// (Output)
	// An opaque tag indicating the current version of the `Policy`, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the `Policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Determines the inheritance behavior for this `Policy`. If `inheritFromParent` is true, PolicyRules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this Policy becomes the new root for evaluation. This field can be set only for Policies which configure list constraints.
	InheritFromParent pulumi.BoolPtrInput `pulumi:"inheritFromParent"`
	// Ignores policies set above this resource and restores the `constraintDefault` enforcement behavior of the specific `Constraint` at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inheritFromParent` must be set to false.
	Reset pulumi.BoolPtrInput `pulumi:"reset"`
	// In Policies for boolean constraints, the following requirements apply: - There must be one and only one PolicyRule where condition is unset. - BooleanPolicyRules with conditions must set `enforced` to the opposite of the PolicyRule without a condition. - During policy evaluation, PolicyRules with conditions that are true for a target resource take precedence.
	// Structure is documented below.
	Rules PolicySpecRuleArrayInput `pulumi:"rules"`
	// (Output)
	// Output only. The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that `Policy`.
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
}

func (PolicySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySpec)(nil)).Elem()
}

func (i PolicySpecArgs) ToPolicySpecOutput() PolicySpecOutput {
	return i.ToPolicySpecOutputWithContext(context.Background())
}

func (i PolicySpecArgs) ToPolicySpecOutputWithContext(ctx context.Context) PolicySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySpecOutput)
}

func (i PolicySpecArgs) ToPolicySpecPtrOutput() PolicySpecPtrOutput {
	return i.ToPolicySpecPtrOutputWithContext(context.Background())
}

func (i PolicySpecArgs) ToPolicySpecPtrOutputWithContext(ctx context.Context) PolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySpecOutput).ToPolicySpecPtrOutputWithContext(ctx)
}

// PolicySpecPtrInput is an input type that accepts PolicySpecArgs, PolicySpecPtr and PolicySpecPtrOutput values.
// You can construct a concrete instance of `PolicySpecPtrInput` via:
//
//	        PolicySpecArgs{...}
//
//	or:
//
//	        nil
type PolicySpecPtrInput interface {
	pulumi.Input

	ToPolicySpecPtrOutput() PolicySpecPtrOutput
	ToPolicySpecPtrOutputWithContext(context.Context) PolicySpecPtrOutput
}

type policySpecPtrType PolicySpecArgs

func PolicySpecPtr(v *PolicySpecArgs) PolicySpecPtrInput {
	return (*policySpecPtrType)(v)
}

func (*policySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySpec)(nil)).Elem()
}

func (i *policySpecPtrType) ToPolicySpecPtrOutput() PolicySpecPtrOutput {
	return i.ToPolicySpecPtrOutputWithContext(context.Background())
}

func (i *policySpecPtrType) ToPolicySpecPtrOutputWithContext(ctx context.Context) PolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySpecPtrOutput)
}

type PolicySpecOutput struct{ *pulumi.OutputState }

func (PolicySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySpec)(nil)).Elem()
}

func (o PolicySpecOutput) ToPolicySpecOutput() PolicySpecOutput {
	return o
}

func (o PolicySpecOutput) ToPolicySpecOutputWithContext(ctx context.Context) PolicySpecOutput {
	return o
}

func (o PolicySpecOutput) ToPolicySpecPtrOutput() PolicySpecPtrOutput {
	return o.ToPolicySpecPtrOutputWithContext(context.Background())
}

func (o PolicySpecOutput) ToPolicySpecPtrOutputWithContext(ctx context.Context) PolicySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicySpec) *PolicySpec {
		return &v
	}).(PolicySpecPtrOutput)
}

// (Output)
// An opaque tag indicating the current version of the `Policy`, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the `Policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
func (o PolicySpecOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySpec) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Determines the inheritance behavior for this `Policy`. If `inheritFromParent` is true, PolicyRules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this Policy becomes the new root for evaluation. This field can be set only for Policies which configure list constraints.
func (o PolicySpecOutput) InheritFromParent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicySpec) *bool { return v.InheritFromParent }).(pulumi.BoolPtrOutput)
}

// Ignores policies set above this resource and restores the `constraintDefault` enforcement behavior of the specific `Constraint` at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inheritFromParent` must be set to false.
func (o PolicySpecOutput) Reset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicySpec) *bool { return v.Reset }).(pulumi.BoolPtrOutput)
}

// In Policies for boolean constraints, the following requirements apply: - There must be one and only one PolicyRule where condition is unset. - BooleanPolicyRules with conditions must set `enforced` to the opposite of the PolicyRule without a condition. - During policy evaluation, PolicyRules with conditions that are true for a target resource take precedence.
// Structure is documented below.
func (o PolicySpecOutput) Rules() PolicySpecRuleArrayOutput {
	return o.ApplyT(func(v PolicySpec) []PolicySpecRule { return v.Rules }).(PolicySpecRuleArrayOutput)
}

// (Output)
// Output only. The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that `Policy`.
func (o PolicySpecOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySpec) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

type PolicySpecPtrOutput struct{ *pulumi.OutputState }

func (PolicySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySpec)(nil)).Elem()
}

func (o PolicySpecPtrOutput) ToPolicySpecPtrOutput() PolicySpecPtrOutput {
	return o
}

func (o PolicySpecPtrOutput) ToPolicySpecPtrOutputWithContext(ctx context.Context) PolicySpecPtrOutput {
	return o
}

func (o PolicySpecPtrOutput) Elem() PolicySpecOutput {
	return o.ApplyT(func(v *PolicySpec) PolicySpec {
		if v != nil {
			return *v
		}
		var ret PolicySpec
		return ret
	}).(PolicySpecOutput)
}

// (Output)
// An opaque tag indicating the current version of the `Policy`, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the `Policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
func (o PolicySpecPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySpec) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Determines the inheritance behavior for this `Policy`. If `inheritFromParent` is true, PolicyRules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this Policy becomes the new root for evaluation. This field can be set only for Policies which configure list constraints.
func (o PolicySpecPtrOutput) InheritFromParent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicySpec) *bool {
		if v == nil {
			return nil
		}
		return v.InheritFromParent
	}).(pulumi.BoolPtrOutput)
}

// Ignores policies set above this resource and restores the `constraintDefault` enforcement behavior of the specific `Constraint` at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inheritFromParent` must be set to false.
func (o PolicySpecPtrOutput) Reset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicySpec) *bool {
		if v == nil {
			return nil
		}
		return v.Reset
	}).(pulumi.BoolPtrOutput)
}

// In Policies for boolean constraints, the following requirements apply: - There must be one and only one PolicyRule where condition is unset. - BooleanPolicyRules with conditions must set `enforced` to the opposite of the PolicyRule without a condition. - During policy evaluation, PolicyRules with conditions that are true for a target resource take precedence.
// Structure is documented below.
func (o PolicySpecPtrOutput) Rules() PolicySpecRuleArrayOutput {
	return o.ApplyT(func(v *PolicySpec) []PolicySpecRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(PolicySpecRuleArrayOutput)
}

// (Output)
// Output only. The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that `Policy`.
func (o PolicySpecPtrOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySpec) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTime
	}).(pulumi.StringPtrOutput)
}

type PolicySpecRule struct {
	// Setting this to `"TRUE"` means that all values are allowed. This field can be set only in Policies for list constraints.
	AllowAll *string `pulumi:"allowAll"`
	// A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where keyName and valueName are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
	// Structure is documented below.
	Condition *PolicySpecRuleCondition `pulumi:"condition"`
	// Setting this to `"TRUE"` means that all values are denied. This field can be set only in Policies for list constraints.
	DenyAll *string `pulumi:"denyAll"`
	// If `"TRUE"`, then the `Policy` is enforced. If `"FALSE"`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
	Enforce *string `pulumi:"enforce"`
	// Optional. Required for Managed Constraints if parameters defined in constraints. Pass parameter values when policy enforcement is enabled. Ensure that parameter value types match those defined in the constraint definition. For example: { \"allowedLocations\" : [\"us-east1\", \"us-west1\"], \"allowAll\" : true }
	Parameters *string `pulumi:"parameters"`
	// List of values to be used for this policy rule. This field can be set only in policies for list constraints.
	// Structure is documented below.
	Values *PolicySpecRuleValues `pulumi:"values"`
}

// PolicySpecRuleInput is an input type that accepts PolicySpecRuleArgs and PolicySpecRuleOutput values.
// You can construct a concrete instance of `PolicySpecRuleInput` via:
//
//	PolicySpecRuleArgs{...}
type PolicySpecRuleInput interface {
	pulumi.Input

	ToPolicySpecRuleOutput() PolicySpecRuleOutput
	ToPolicySpecRuleOutputWithContext(context.Context) PolicySpecRuleOutput
}

type PolicySpecRuleArgs struct {
	// Setting this to `"TRUE"` means that all values are allowed. This field can be set only in Policies for list constraints.
	AllowAll pulumi.StringPtrInput `pulumi:"allowAll"`
	// A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where keyName and valueName are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
	// Structure is documented below.
	Condition PolicySpecRuleConditionPtrInput `pulumi:"condition"`
	// Setting this to `"TRUE"` means that all values are denied. This field can be set only in Policies for list constraints.
	DenyAll pulumi.StringPtrInput `pulumi:"denyAll"`
	// If `"TRUE"`, then the `Policy` is enforced. If `"FALSE"`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
	Enforce pulumi.StringPtrInput `pulumi:"enforce"`
	// Optional. Required for Managed Constraints if parameters defined in constraints. Pass parameter values when policy enforcement is enabled. Ensure that parameter value types match those defined in the constraint definition. For example: { \"allowedLocations\" : [\"us-east1\", \"us-west1\"], \"allowAll\" : true }
	Parameters pulumi.StringPtrInput `pulumi:"parameters"`
	// List of values to be used for this policy rule. This field can be set only in policies for list constraints.
	// Structure is documented below.
	Values PolicySpecRuleValuesPtrInput `pulumi:"values"`
}

func (PolicySpecRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySpecRule)(nil)).Elem()
}

func (i PolicySpecRuleArgs) ToPolicySpecRuleOutput() PolicySpecRuleOutput {
	return i.ToPolicySpecRuleOutputWithContext(context.Background())
}

func (i PolicySpecRuleArgs) ToPolicySpecRuleOutputWithContext(ctx context.Context) PolicySpecRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySpecRuleOutput)
}

// PolicySpecRuleArrayInput is an input type that accepts PolicySpecRuleArray and PolicySpecRuleArrayOutput values.
// You can construct a concrete instance of `PolicySpecRuleArrayInput` via:
//
//	PolicySpecRuleArray{ PolicySpecRuleArgs{...} }
type PolicySpecRuleArrayInput interface {
	pulumi.Input

	ToPolicySpecRuleArrayOutput() PolicySpecRuleArrayOutput
	ToPolicySpecRuleArrayOutputWithContext(context.Context) PolicySpecRuleArrayOutput
}

type PolicySpecRuleArray []PolicySpecRuleInput

func (PolicySpecRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicySpecRule)(nil)).Elem()
}

func (i PolicySpecRuleArray) ToPolicySpecRuleArrayOutput() PolicySpecRuleArrayOutput {
	return i.ToPolicySpecRuleArrayOutputWithContext(context.Background())
}

func (i PolicySpecRuleArray) ToPolicySpecRuleArrayOutputWithContext(ctx context.Context) PolicySpecRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySpecRuleArrayOutput)
}

type PolicySpecRuleOutput struct{ *pulumi.OutputState }

func (PolicySpecRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySpecRule)(nil)).Elem()
}

func (o PolicySpecRuleOutput) ToPolicySpecRuleOutput() PolicySpecRuleOutput {
	return o
}

func (o PolicySpecRuleOutput) ToPolicySpecRuleOutputWithContext(ctx context.Context) PolicySpecRuleOutput {
	return o
}

// Setting this to `"TRUE"` means that all values are allowed. This field can be set only in Policies for list constraints.
func (o PolicySpecRuleOutput) AllowAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySpecRule) *string { return v.AllowAll }).(pulumi.StringPtrOutput)
}

// A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where keyName and valueName are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
// Structure is documented below.
func (o PolicySpecRuleOutput) Condition() PolicySpecRuleConditionPtrOutput {
	return o.ApplyT(func(v PolicySpecRule) *PolicySpecRuleCondition { return v.Condition }).(PolicySpecRuleConditionPtrOutput)
}

// Setting this to `"TRUE"` means that all values are denied. This field can be set only in Policies for list constraints.
func (o PolicySpecRuleOutput) DenyAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySpecRule) *string { return v.DenyAll }).(pulumi.StringPtrOutput)
}

// If `"TRUE"`, then the `Policy` is enforced. If `"FALSE"`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
func (o PolicySpecRuleOutput) Enforce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySpecRule) *string { return v.Enforce }).(pulumi.StringPtrOutput)
}

// Optional. Required for Managed Constraints if parameters defined in constraints. Pass parameter values when policy enforcement is enabled. Ensure that parameter value types match those defined in the constraint definition. For example: { \"allowedLocations\" : [\"us-east1\", \"us-west1\"], \"allowAll\" : true }
func (o PolicySpecRuleOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySpecRule) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// List of values to be used for this policy rule. This field can be set only in policies for list constraints.
// Structure is documented below.
func (o PolicySpecRuleOutput) Values() PolicySpecRuleValuesPtrOutput {
	return o.ApplyT(func(v PolicySpecRule) *PolicySpecRuleValues { return v.Values }).(PolicySpecRuleValuesPtrOutput)
}

type PolicySpecRuleArrayOutput struct{ *pulumi.OutputState }

func (PolicySpecRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicySpecRule)(nil)).Elem()
}

func (o PolicySpecRuleArrayOutput) ToPolicySpecRuleArrayOutput() PolicySpecRuleArrayOutput {
	return o
}

func (o PolicySpecRuleArrayOutput) ToPolicySpecRuleArrayOutputWithContext(ctx context.Context) PolicySpecRuleArrayOutput {
	return o
}

func (o PolicySpecRuleArrayOutput) Index(i pulumi.IntInput) PolicySpecRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicySpecRule {
		return vs[0].([]PolicySpecRule)[vs[1].(int)]
	}).(PolicySpecRuleOutput)
}

type PolicySpecRuleCondition struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// PolicySpecRuleConditionInput is an input type that accepts PolicySpecRuleConditionArgs and PolicySpecRuleConditionOutput values.
// You can construct a concrete instance of `PolicySpecRuleConditionInput` via:
//
//	PolicySpecRuleConditionArgs{...}
type PolicySpecRuleConditionInput interface {
	pulumi.Input

	ToPolicySpecRuleConditionOutput() PolicySpecRuleConditionOutput
	ToPolicySpecRuleConditionOutputWithContext(context.Context) PolicySpecRuleConditionOutput
}

type PolicySpecRuleConditionArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (PolicySpecRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySpecRuleCondition)(nil)).Elem()
}

func (i PolicySpecRuleConditionArgs) ToPolicySpecRuleConditionOutput() PolicySpecRuleConditionOutput {
	return i.ToPolicySpecRuleConditionOutputWithContext(context.Background())
}

func (i PolicySpecRuleConditionArgs) ToPolicySpecRuleConditionOutputWithContext(ctx context.Context) PolicySpecRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySpecRuleConditionOutput)
}

func (i PolicySpecRuleConditionArgs) ToPolicySpecRuleConditionPtrOutput() PolicySpecRuleConditionPtrOutput {
	return i.ToPolicySpecRuleConditionPtrOutputWithContext(context.Background())
}

func (i PolicySpecRuleConditionArgs) ToPolicySpecRuleConditionPtrOutputWithContext(ctx context.Context) PolicySpecRuleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySpecRuleConditionOutput).ToPolicySpecRuleConditionPtrOutputWithContext(ctx)
}

// PolicySpecRuleConditionPtrInput is an input type that accepts PolicySpecRuleConditionArgs, PolicySpecRuleConditionPtr and PolicySpecRuleConditionPtrOutput values.
// You can construct a concrete instance of `PolicySpecRuleConditionPtrInput` via:
//
//	        PolicySpecRuleConditionArgs{...}
//
//	or:
//
//	        nil
type PolicySpecRuleConditionPtrInput interface {
	pulumi.Input

	ToPolicySpecRuleConditionPtrOutput() PolicySpecRuleConditionPtrOutput
	ToPolicySpecRuleConditionPtrOutputWithContext(context.Context) PolicySpecRuleConditionPtrOutput
}

type policySpecRuleConditionPtrType PolicySpecRuleConditionArgs

func PolicySpecRuleConditionPtr(v *PolicySpecRuleConditionArgs) PolicySpecRuleConditionPtrInput {
	return (*policySpecRuleConditionPtrType)(v)
}

func (*policySpecRuleConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySpecRuleCondition)(nil)).Elem()
}

func (i *policySpecRuleConditionPtrType) ToPolicySpecRuleConditionPtrOutput() PolicySpecRuleConditionPtrOutput {
	return i.ToPolicySpecRuleConditionPtrOutputWithContext(context.Background())
}

func (i *policySpecRuleConditionPtrType) ToPolicySpecRuleConditionPtrOutputWithContext(ctx context.Context) PolicySpecRuleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySpecRuleConditionPtrOutput)
}

type PolicySpecRuleConditionOutput struct{ *pulumi.OutputState }

func (PolicySpecRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySpecRuleCondition)(nil)).Elem()
}

func (o PolicySpecRuleConditionOutput) ToPolicySpecRuleConditionOutput() PolicySpecRuleConditionOutput {
	return o
}

func (o PolicySpecRuleConditionOutput) ToPolicySpecRuleConditionOutputWithContext(ctx context.Context) PolicySpecRuleConditionOutput {
	return o
}

func (o PolicySpecRuleConditionOutput) ToPolicySpecRuleConditionPtrOutput() PolicySpecRuleConditionPtrOutput {
	return o.ToPolicySpecRuleConditionPtrOutputWithContext(context.Background())
}

func (o PolicySpecRuleConditionOutput) ToPolicySpecRuleConditionPtrOutputWithContext(ctx context.Context) PolicySpecRuleConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicySpecRuleCondition) *PolicySpecRuleCondition {
		return &v
	}).(PolicySpecRuleConditionPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o PolicySpecRuleConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySpecRuleCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o PolicySpecRuleConditionOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySpecRuleCondition) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o PolicySpecRuleConditionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySpecRuleCondition) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o PolicySpecRuleConditionOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySpecRuleCondition) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type PolicySpecRuleConditionPtrOutput struct{ *pulumi.OutputState }

func (PolicySpecRuleConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySpecRuleCondition)(nil)).Elem()
}

func (o PolicySpecRuleConditionPtrOutput) ToPolicySpecRuleConditionPtrOutput() PolicySpecRuleConditionPtrOutput {
	return o
}

func (o PolicySpecRuleConditionPtrOutput) ToPolicySpecRuleConditionPtrOutputWithContext(ctx context.Context) PolicySpecRuleConditionPtrOutput {
	return o
}

func (o PolicySpecRuleConditionPtrOutput) Elem() PolicySpecRuleConditionOutput {
	return o.ApplyT(func(v *PolicySpecRuleCondition) PolicySpecRuleCondition {
		if v != nil {
			return *v
		}
		var ret PolicySpecRuleCondition
		return ret
	}).(PolicySpecRuleConditionOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o PolicySpecRuleConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySpecRuleCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o PolicySpecRuleConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySpecRuleCondition) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o PolicySpecRuleConditionPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySpecRuleCondition) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o PolicySpecRuleConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySpecRuleCondition) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

type PolicySpecRuleValues struct {
	// List of values allowed at this resource.
	AllowedValues []string `pulumi:"allowedValues"`
	// List of values denied at this resource.
	DeniedValues []string `pulumi:"deniedValues"`
}

// PolicySpecRuleValuesInput is an input type that accepts PolicySpecRuleValuesArgs and PolicySpecRuleValuesOutput values.
// You can construct a concrete instance of `PolicySpecRuleValuesInput` via:
//
//	PolicySpecRuleValuesArgs{...}
type PolicySpecRuleValuesInput interface {
	pulumi.Input

	ToPolicySpecRuleValuesOutput() PolicySpecRuleValuesOutput
	ToPolicySpecRuleValuesOutputWithContext(context.Context) PolicySpecRuleValuesOutput
}

type PolicySpecRuleValuesArgs struct {
	// List of values allowed at this resource.
	AllowedValues pulumi.StringArrayInput `pulumi:"allowedValues"`
	// List of values denied at this resource.
	DeniedValues pulumi.StringArrayInput `pulumi:"deniedValues"`
}

func (PolicySpecRuleValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySpecRuleValues)(nil)).Elem()
}

func (i PolicySpecRuleValuesArgs) ToPolicySpecRuleValuesOutput() PolicySpecRuleValuesOutput {
	return i.ToPolicySpecRuleValuesOutputWithContext(context.Background())
}

func (i PolicySpecRuleValuesArgs) ToPolicySpecRuleValuesOutputWithContext(ctx context.Context) PolicySpecRuleValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySpecRuleValuesOutput)
}

func (i PolicySpecRuleValuesArgs) ToPolicySpecRuleValuesPtrOutput() PolicySpecRuleValuesPtrOutput {
	return i.ToPolicySpecRuleValuesPtrOutputWithContext(context.Background())
}

func (i PolicySpecRuleValuesArgs) ToPolicySpecRuleValuesPtrOutputWithContext(ctx context.Context) PolicySpecRuleValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySpecRuleValuesOutput).ToPolicySpecRuleValuesPtrOutputWithContext(ctx)
}

// PolicySpecRuleValuesPtrInput is an input type that accepts PolicySpecRuleValuesArgs, PolicySpecRuleValuesPtr and PolicySpecRuleValuesPtrOutput values.
// You can construct a concrete instance of `PolicySpecRuleValuesPtrInput` via:
//
//	        PolicySpecRuleValuesArgs{...}
//
//	or:
//
//	        nil
type PolicySpecRuleValuesPtrInput interface {
	pulumi.Input

	ToPolicySpecRuleValuesPtrOutput() PolicySpecRuleValuesPtrOutput
	ToPolicySpecRuleValuesPtrOutputWithContext(context.Context) PolicySpecRuleValuesPtrOutput
}

type policySpecRuleValuesPtrType PolicySpecRuleValuesArgs

func PolicySpecRuleValuesPtr(v *PolicySpecRuleValuesArgs) PolicySpecRuleValuesPtrInput {
	return (*policySpecRuleValuesPtrType)(v)
}

func (*policySpecRuleValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySpecRuleValues)(nil)).Elem()
}

func (i *policySpecRuleValuesPtrType) ToPolicySpecRuleValuesPtrOutput() PolicySpecRuleValuesPtrOutput {
	return i.ToPolicySpecRuleValuesPtrOutputWithContext(context.Background())
}

func (i *policySpecRuleValuesPtrType) ToPolicySpecRuleValuesPtrOutputWithContext(ctx context.Context) PolicySpecRuleValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySpecRuleValuesPtrOutput)
}

type PolicySpecRuleValuesOutput struct{ *pulumi.OutputState }

func (PolicySpecRuleValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySpecRuleValues)(nil)).Elem()
}

func (o PolicySpecRuleValuesOutput) ToPolicySpecRuleValuesOutput() PolicySpecRuleValuesOutput {
	return o
}

func (o PolicySpecRuleValuesOutput) ToPolicySpecRuleValuesOutputWithContext(ctx context.Context) PolicySpecRuleValuesOutput {
	return o
}

func (o PolicySpecRuleValuesOutput) ToPolicySpecRuleValuesPtrOutput() PolicySpecRuleValuesPtrOutput {
	return o.ToPolicySpecRuleValuesPtrOutputWithContext(context.Background())
}

func (o PolicySpecRuleValuesOutput) ToPolicySpecRuleValuesPtrOutputWithContext(ctx context.Context) PolicySpecRuleValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicySpecRuleValues) *PolicySpecRuleValues {
		return &v
	}).(PolicySpecRuleValuesPtrOutput)
}

// List of values allowed at this resource.
func (o PolicySpecRuleValuesOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicySpecRuleValues) []string { return v.AllowedValues }).(pulumi.StringArrayOutput)
}

// List of values denied at this resource.
func (o PolicySpecRuleValuesOutput) DeniedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicySpecRuleValues) []string { return v.DeniedValues }).(pulumi.StringArrayOutput)
}

type PolicySpecRuleValuesPtrOutput struct{ *pulumi.OutputState }

func (PolicySpecRuleValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySpecRuleValues)(nil)).Elem()
}

func (o PolicySpecRuleValuesPtrOutput) ToPolicySpecRuleValuesPtrOutput() PolicySpecRuleValuesPtrOutput {
	return o
}

func (o PolicySpecRuleValuesPtrOutput) ToPolicySpecRuleValuesPtrOutputWithContext(ctx context.Context) PolicySpecRuleValuesPtrOutput {
	return o
}

func (o PolicySpecRuleValuesPtrOutput) Elem() PolicySpecRuleValuesOutput {
	return o.ApplyT(func(v *PolicySpecRuleValues) PolicySpecRuleValues {
		if v != nil {
			return *v
		}
		var ret PolicySpecRuleValues
		return ret
	}).(PolicySpecRuleValuesOutput)
}

// List of values allowed at this resource.
func (o PolicySpecRuleValuesPtrOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicySpecRuleValues) []string {
		if v == nil {
			return nil
		}
		return v.AllowedValues
	}).(pulumi.StringArrayOutput)
}

// List of values denied at this resource.
func (o PolicySpecRuleValuesPtrOutput) DeniedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicySpecRuleValues) []string {
		if v == nil {
			return nil
		}
		return v.DeniedValues
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDryRunSpecInput)(nil)).Elem(), PolicyDryRunSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDryRunSpecPtrInput)(nil)).Elem(), PolicyDryRunSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDryRunSpecRuleInput)(nil)).Elem(), PolicyDryRunSpecRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDryRunSpecRuleArrayInput)(nil)).Elem(), PolicyDryRunSpecRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDryRunSpecRuleConditionInput)(nil)).Elem(), PolicyDryRunSpecRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDryRunSpecRuleConditionPtrInput)(nil)).Elem(), PolicyDryRunSpecRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDryRunSpecRuleValuesInput)(nil)).Elem(), PolicyDryRunSpecRuleValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDryRunSpecRuleValuesPtrInput)(nil)).Elem(), PolicyDryRunSpecRuleValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySpecInput)(nil)).Elem(), PolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySpecPtrInput)(nil)).Elem(), PolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySpecRuleInput)(nil)).Elem(), PolicySpecRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySpecRuleArrayInput)(nil)).Elem(), PolicySpecRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySpecRuleConditionInput)(nil)).Elem(), PolicySpecRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySpecRuleConditionPtrInput)(nil)).Elem(), PolicySpecRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySpecRuleValuesInput)(nil)).Elem(), PolicySpecRuleValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySpecRuleValuesPtrInput)(nil)).Elem(), PolicySpecRuleValuesArgs{})
	pulumi.RegisterOutputType(PolicyDryRunSpecOutput{})
	pulumi.RegisterOutputType(PolicyDryRunSpecPtrOutput{})
	pulumi.RegisterOutputType(PolicyDryRunSpecRuleOutput{})
	pulumi.RegisterOutputType(PolicyDryRunSpecRuleArrayOutput{})
	pulumi.RegisterOutputType(PolicyDryRunSpecRuleConditionOutput{})
	pulumi.RegisterOutputType(PolicyDryRunSpecRuleConditionPtrOutput{})
	pulumi.RegisterOutputType(PolicyDryRunSpecRuleValuesOutput{})
	pulumi.RegisterOutputType(PolicyDryRunSpecRuleValuesPtrOutput{})
	pulumi.RegisterOutputType(PolicySpecOutput{})
	pulumi.RegisterOutputType(PolicySpecPtrOutput{})
	pulumi.RegisterOutputType(PolicySpecRuleOutput{})
	pulumi.RegisterOutputType(PolicySpecRuleArrayOutput{})
	pulumi.RegisterOutputType(PolicySpecRuleConditionOutput{})
	pulumi.RegisterOutputType(PolicySpecRuleConditionPtrOutput{})
	pulumi.RegisterOutputType(PolicySpecRuleValuesOutput{})
	pulumi.RegisterOutputType(PolicySpecRuleValuesPtrOutput{})
}
