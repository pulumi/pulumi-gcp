// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudbuild

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of custom Cloud Build WorkerPools for running jobs with custom configuration and custom networking.
//
// > This resource is not currently public, and requires allow-listing of projects prior to use.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudbuild"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cloudbuild.NewWorkerPool(ctx, "pool", &cloudbuild.WorkerPoolArgs{
// 			Location: pulumi.String("europe-west1"),
// 			WorkerConfig: &cloudbuild.WorkerPoolWorkerConfigArgs{
// 				DiskSizeGb:   pulumi.Int(100),
// 				MachineType:  pulumi.String("e2-standard-4"),
// 				NoExternalIp: pulumi.Bool(false),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Network Config
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudbuild"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicenetworking"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		servicenetworking, err := projects.NewService(ctx, "servicenetworking", &projects.ServiceArgs{
// 			Service:          pulumi.String("servicenetworking.googleapis.com"),
// 			DisableOnDestroy: pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
// 			AutoCreateSubnetworks: pulumi.Bool(false),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			servicenetworking,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		workerRange, err := compute.NewGlobalAddress(ctx, "workerRange", &compute.GlobalAddressArgs{
// 			Purpose:      pulumi.String("VPC_PEERING"),
// 			AddressType:  pulumi.String("INTERNAL"),
// 			PrefixLength: pulumi.Int(16),
// 			Network:      network.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		workerPoolConn, err := servicenetworking.NewConnection(ctx, "workerPoolConn", &servicenetworking.ConnectionArgs{
// 			Network: network.ID(),
// 			Service: pulumi.String("servicenetworking.googleapis.com"),
// 			ReservedPeeringRanges: pulumi.StringArray{
// 				workerRange.Name,
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			servicenetworking,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = cloudbuild.NewWorkerPool(ctx, "pool", &cloudbuild.WorkerPoolArgs{
// 			Location: pulumi.String("europe-west1"),
// 			WorkerConfig: &cloudbuild.WorkerPoolWorkerConfigArgs{
// 				DiskSizeGb:   pulumi.Int(100),
// 				MachineType:  pulumi.String("e2-standard-4"),
// 				NoExternalIp: pulumi.Bool(false),
// 			},
// 			NetworkConfig: &cloudbuild.WorkerPoolNetworkConfigArgs{
// 				PeeredNetwork: network.ID(),
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			workerPoolConn,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// WorkerPool can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:cloudbuild/workerPool:WorkerPool default projects/{{project}}/locations/{{location}}/workerPools/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:cloudbuild/workerPool:WorkerPool default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:cloudbuild/workerPool:WorkerPool default {{location}}/{{name}}
// ```
type WorkerPool struct {
	pulumi.CustomResourceState

	// User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size
	// limitations.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Output only. Time at which the request to create the `WorkerPool` was received.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Output only. Time at which the request to delete the `WorkerPool` was received.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// User-defined name of the `WorkerPool`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network configuration for the `WorkerPool`. Structure is documented below.
	NetworkConfig WorkerPoolNetworkConfigPtrOutput `pulumi:"networkConfig"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. `WorkerPool` state. Possible values: STATE_UNSPECIFIED, PENDING, APPROVED, REJECTED, CANCELLED
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. A unique identifier for the `WorkerPool`.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. Time at which the request to update the `WorkerPool` was received.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Configuration to be used for a creating workers in the `WorkerPool`. Structure is documented below.
	WorkerConfig WorkerPoolWorkerConfigOutput `pulumi:"workerConfig"`
}

// NewWorkerPool registers a new resource with the given unique name, arguments, and options.
func NewWorkerPool(ctx *pulumi.Context,
	name string, args *WorkerPoolArgs, opts ...pulumi.ResourceOption) (*WorkerPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	var resource WorkerPool
	err := ctx.RegisterResource("gcp:cloudbuild/workerPool:WorkerPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkerPool gets an existing WorkerPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkerPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerPoolState, opts ...pulumi.ResourceOption) (*WorkerPool, error) {
	var resource WorkerPool
	err := ctx.ReadResource("gcp:cloudbuild/workerPool:WorkerPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkerPool resources.
type workerPoolState struct {
	// User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size
	// limitations.
	Annotations map[string]string `pulumi:"annotations"`
	// Output only. Time at which the request to create the `WorkerPool` was received.
	CreateTime *string `pulumi:"createTime"`
	// Output only. Time at which the request to delete the `WorkerPool` was received.
	DeleteTime *string `pulumi:"deleteTime"`
	// A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.
	DisplayName *string `pulumi:"displayName"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// User-defined name of the `WorkerPool`.
	Name *string `pulumi:"name"`
	// Network configuration for the `WorkerPool`. Structure is documented below.
	NetworkConfig *WorkerPoolNetworkConfig `pulumi:"networkConfig"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Output only. `WorkerPool` state. Possible values: STATE_UNSPECIFIED, PENDING, APPROVED, REJECTED, CANCELLED
	State *string `pulumi:"state"`
	// Output only. A unique identifier for the `WorkerPool`.
	Uid *string `pulumi:"uid"`
	// Output only. Time at which the request to update the `WorkerPool` was received.
	UpdateTime *string `pulumi:"updateTime"`
	// Configuration to be used for a creating workers in the `WorkerPool`. Structure is documented below.
	WorkerConfig *WorkerPoolWorkerConfig `pulumi:"workerConfig"`
}

type WorkerPoolState struct {
	// User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size
	// limitations.
	Annotations pulumi.StringMapInput
	// Output only. Time at which the request to create the `WorkerPool` was received.
	CreateTime pulumi.StringPtrInput
	// Output only. Time at which the request to delete the `WorkerPool` was received.
	DeleteTime pulumi.StringPtrInput
	// A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.
	DisplayName pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// User-defined name of the `WorkerPool`.
	Name pulumi.StringPtrInput
	// Network configuration for the `WorkerPool`. Structure is documented below.
	NetworkConfig WorkerPoolNetworkConfigPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Output only. `WorkerPool` state. Possible values: STATE_UNSPECIFIED, PENDING, APPROVED, REJECTED, CANCELLED
	State pulumi.StringPtrInput
	// Output only. A unique identifier for the `WorkerPool`.
	Uid pulumi.StringPtrInput
	// Output only. Time at which the request to update the `WorkerPool` was received.
	UpdateTime pulumi.StringPtrInput
	// Configuration to be used for a creating workers in the `WorkerPool`. Structure is documented below.
	WorkerConfig WorkerPoolWorkerConfigPtrInput
}

func (WorkerPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolState)(nil)).Elem()
}

type workerPoolArgs struct {
	// User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size
	// limitations.
	Annotations map[string]string `pulumi:"annotations"`
	// A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.
	DisplayName *string `pulumi:"displayName"`
	// The location for the resource
	Location string `pulumi:"location"`
	// User-defined name of the `WorkerPool`.
	Name *string `pulumi:"name"`
	// Network configuration for the `WorkerPool`. Structure is documented below.
	NetworkConfig *WorkerPoolNetworkConfig `pulumi:"networkConfig"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Configuration to be used for a creating workers in the `WorkerPool`. Structure is documented below.
	WorkerConfig *WorkerPoolWorkerConfig `pulumi:"workerConfig"`
}

// The set of arguments for constructing a WorkerPool resource.
type WorkerPoolArgs struct {
	// User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size
	// limitations.
	Annotations pulumi.StringMapInput
	// A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.
	DisplayName pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringInput
	// User-defined name of the `WorkerPool`.
	Name pulumi.StringPtrInput
	// Network configuration for the `WorkerPool`. Structure is documented below.
	NetworkConfig WorkerPoolNetworkConfigPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Configuration to be used for a creating workers in the `WorkerPool`. Structure is documented below.
	WorkerConfig WorkerPoolWorkerConfigPtrInput
}

func (WorkerPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolArgs)(nil)).Elem()
}

type WorkerPoolInput interface {
	pulumi.Input

	ToWorkerPoolOutput() WorkerPoolOutput
	ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput
}

func (*WorkerPool) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerPool)(nil)).Elem()
}

func (i *WorkerPool) ToWorkerPoolOutput() WorkerPoolOutput {
	return i.ToWorkerPoolOutputWithContext(context.Background())
}

func (i *WorkerPool) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolOutput)
}

// WorkerPoolArrayInput is an input type that accepts WorkerPoolArray and WorkerPoolArrayOutput values.
// You can construct a concrete instance of `WorkerPoolArrayInput` via:
//
//          WorkerPoolArray{ WorkerPoolArgs{...} }
type WorkerPoolArrayInput interface {
	pulumi.Input

	ToWorkerPoolArrayOutput() WorkerPoolArrayOutput
	ToWorkerPoolArrayOutputWithContext(context.Context) WorkerPoolArrayOutput
}

type WorkerPoolArray []WorkerPoolInput

func (WorkerPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerPool)(nil)).Elem()
}

func (i WorkerPoolArray) ToWorkerPoolArrayOutput() WorkerPoolArrayOutput {
	return i.ToWorkerPoolArrayOutputWithContext(context.Background())
}

func (i WorkerPoolArray) ToWorkerPoolArrayOutputWithContext(ctx context.Context) WorkerPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolArrayOutput)
}

// WorkerPoolMapInput is an input type that accepts WorkerPoolMap and WorkerPoolMapOutput values.
// You can construct a concrete instance of `WorkerPoolMapInput` via:
//
//          WorkerPoolMap{ "key": WorkerPoolArgs{...} }
type WorkerPoolMapInput interface {
	pulumi.Input

	ToWorkerPoolMapOutput() WorkerPoolMapOutput
	ToWorkerPoolMapOutputWithContext(context.Context) WorkerPoolMapOutput
}

type WorkerPoolMap map[string]WorkerPoolInput

func (WorkerPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerPool)(nil)).Elem()
}

func (i WorkerPoolMap) ToWorkerPoolMapOutput() WorkerPoolMapOutput {
	return i.ToWorkerPoolMapOutputWithContext(context.Background())
}

func (i WorkerPoolMap) ToWorkerPoolMapOutputWithContext(ctx context.Context) WorkerPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolMapOutput)
}

type WorkerPoolOutput struct{ *pulumi.OutputState }

func (WorkerPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerPool)(nil)).Elem()
}

func (o WorkerPoolOutput) ToWorkerPoolOutput() WorkerPoolOutput {
	return o
}

func (o WorkerPoolOutput) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return o
}

type WorkerPoolArrayOutput struct{ *pulumi.OutputState }

func (WorkerPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerPool)(nil)).Elem()
}

func (o WorkerPoolArrayOutput) ToWorkerPoolArrayOutput() WorkerPoolArrayOutput {
	return o
}

func (o WorkerPoolArrayOutput) ToWorkerPoolArrayOutputWithContext(ctx context.Context) WorkerPoolArrayOutput {
	return o
}

func (o WorkerPoolArrayOutput) Index(i pulumi.IntInput) WorkerPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkerPool {
		return vs[0].([]*WorkerPool)[vs[1].(int)]
	}).(WorkerPoolOutput)
}

type WorkerPoolMapOutput struct{ *pulumi.OutputState }

func (WorkerPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerPool)(nil)).Elem()
}

func (o WorkerPoolMapOutput) ToWorkerPoolMapOutput() WorkerPoolMapOutput {
	return o
}

func (o WorkerPoolMapOutput) ToWorkerPoolMapOutputWithContext(ctx context.Context) WorkerPoolMapOutput {
	return o
}

func (o WorkerPoolMapOutput) MapIndex(k pulumi.StringInput) WorkerPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkerPool {
		return vs[0].(map[string]*WorkerPool)[vs[1].(string)]
	}).(WorkerPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolInput)(nil)).Elem(), &WorkerPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolArrayInput)(nil)).Elem(), WorkerPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolMapInput)(nil)).Elem(), WorkerPoolMap{})
	pulumi.RegisterOutputType(WorkerPoolOutput{})
	pulumi.RegisterOutputType(WorkerPoolArrayOutput{})
	pulumi.RegisterOutputType(WorkerPoolMapOutput{})
}
