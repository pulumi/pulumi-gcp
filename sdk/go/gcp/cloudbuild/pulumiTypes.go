// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudbuild

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type TriggerBuild struct {
	Images  []string           `pulumi:"images"`
	Steps   []TriggerBuildStep `pulumi:"steps"`
	Tags    []string           `pulumi:"tags"`
	Timeout *string            `pulumi:"timeout"`
}

// TriggerBuildInput is an input type that accepts TriggerBuildArgs and TriggerBuildOutput values.
// You can construct a concrete instance of `TriggerBuildInput` via:
//
// 		 TriggerBuildArgs{...}
//
type TriggerBuildInput interface {
	pulumi.Input

	ToTriggerBuildOutput() TriggerBuildOutput
	ToTriggerBuildOutputWithContext(context.Context) TriggerBuildOutput
}

type TriggerBuildArgs struct {
	Images  pulumi.StringArrayInput    `pulumi:"images"`
	Steps   TriggerBuildStepArrayInput `pulumi:"steps"`
	Tags    pulumi.StringArrayInput    `pulumi:"tags"`
	Timeout pulumi.StringPtrInput      `pulumi:"timeout"`
}

func (TriggerBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuild)(nil)).Elem()
}

func (i TriggerBuildArgs) ToTriggerBuildOutput() TriggerBuildOutput {
	return i.ToTriggerBuildOutputWithContext(context.Background())
}

func (i TriggerBuildArgs) ToTriggerBuildOutputWithContext(ctx context.Context) TriggerBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildOutput)
}

func (i TriggerBuildArgs) ToTriggerBuildPtrOutput() TriggerBuildPtrOutput {
	return i.ToTriggerBuildPtrOutputWithContext(context.Background())
}

func (i TriggerBuildArgs) ToTriggerBuildPtrOutputWithContext(ctx context.Context) TriggerBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildOutput).ToTriggerBuildPtrOutputWithContext(ctx)
}

// TriggerBuildPtrInput is an input type that accepts TriggerBuildArgs, TriggerBuildPtr and TriggerBuildPtrOutput values.
// You can construct a concrete instance of `TriggerBuildPtrInput` via:
//
// 		 TriggerBuildArgs{...}
//
//  or:
//
// 		 nil
//
type TriggerBuildPtrInput interface {
	pulumi.Input

	ToTriggerBuildPtrOutput() TriggerBuildPtrOutput
	ToTriggerBuildPtrOutputWithContext(context.Context) TriggerBuildPtrOutput
}

type triggerBuildPtrType TriggerBuildArgs

func TriggerBuildPtr(v *TriggerBuildArgs) TriggerBuildPtrInput {
	return (*triggerBuildPtrType)(v)
}

func (*triggerBuildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuild)(nil)).Elem()
}

func (i *triggerBuildPtrType) ToTriggerBuildPtrOutput() TriggerBuildPtrOutput {
	return i.ToTriggerBuildPtrOutputWithContext(context.Background())
}

func (i *triggerBuildPtrType) ToTriggerBuildPtrOutputWithContext(ctx context.Context) TriggerBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildPtrOutput)
}

type TriggerBuildOutput struct{ *pulumi.OutputState }

func (TriggerBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuild)(nil)).Elem()
}

func (o TriggerBuildOutput) ToTriggerBuildOutput() TriggerBuildOutput {
	return o
}

func (o TriggerBuildOutput) ToTriggerBuildOutputWithContext(ctx context.Context) TriggerBuildOutput {
	return o
}

func (o TriggerBuildOutput) ToTriggerBuildPtrOutput() TriggerBuildPtrOutput {
	return o.ToTriggerBuildPtrOutputWithContext(context.Background())
}

func (o TriggerBuildOutput) ToTriggerBuildPtrOutputWithContext(ctx context.Context) TriggerBuildPtrOutput {
	return o.ApplyT(func(v TriggerBuild) *TriggerBuild {
		return &v
	}).(TriggerBuildPtrOutput)
}
func (o TriggerBuildOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuild) []string { return v.Images }).(pulumi.StringArrayOutput)
}

func (o TriggerBuildOutput) Steps() TriggerBuildStepArrayOutput {
	return o.ApplyT(func(v TriggerBuild) []TriggerBuildStep { return v.Steps }).(TriggerBuildStepArrayOutput)
}

func (o TriggerBuildOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuild) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o TriggerBuildOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuild) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type TriggerBuildPtrOutput struct{ *pulumi.OutputState }

func (TriggerBuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuild)(nil)).Elem()
}

func (o TriggerBuildPtrOutput) ToTriggerBuildPtrOutput() TriggerBuildPtrOutput {
	return o
}

func (o TriggerBuildPtrOutput) ToTriggerBuildPtrOutputWithContext(ctx context.Context) TriggerBuildPtrOutput {
	return o
}

func (o TriggerBuildPtrOutput) Elem() TriggerBuildOutput {
	return o.ApplyT(func(v *TriggerBuild) TriggerBuild { return *v }).(TriggerBuildOutput)
}

func (o TriggerBuildPtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuild) []string { return v.Images }).(pulumi.StringArrayOutput)
}

func (o TriggerBuildPtrOutput) Steps() TriggerBuildStepArrayOutput {
	return o.ApplyT(func(v TriggerBuild) []TriggerBuildStep { return v.Steps }).(TriggerBuildStepArrayOutput)
}

func (o TriggerBuildPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuild) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o TriggerBuildPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuild) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type TriggerBuildStep struct {
	Args       []string `pulumi:"args"`
	Dir        *string  `pulumi:"dir"`
	Entrypoint *string  `pulumi:"entrypoint"`
	Envs       []string `pulumi:"envs"`
	// an identifier for the resource with format `projects/{{project}}/triggers/{{trigger_id}}`
	Id         *string                  `pulumi:"id"`
	Name       string                   `pulumi:"name"`
	SecretEnvs []string                 `pulumi:"secretEnvs"`
	Timeout    *string                  `pulumi:"timeout"`
	Timing     *string                  `pulumi:"timing"`
	Volumes    []TriggerBuildStepVolume `pulumi:"volumes"`
	WaitFors   []string                 `pulumi:"waitFors"`
}

// TriggerBuildStepInput is an input type that accepts TriggerBuildStepArgs and TriggerBuildStepOutput values.
// You can construct a concrete instance of `TriggerBuildStepInput` via:
//
// 		 TriggerBuildStepArgs{...}
//
type TriggerBuildStepInput interface {
	pulumi.Input

	ToTriggerBuildStepOutput() TriggerBuildStepOutput
	ToTriggerBuildStepOutputWithContext(context.Context) TriggerBuildStepOutput
}

type TriggerBuildStepArgs struct {
	Args       pulumi.StringArrayInput `pulumi:"args"`
	Dir        pulumi.StringPtrInput   `pulumi:"dir"`
	Entrypoint pulumi.StringPtrInput   `pulumi:"entrypoint"`
	Envs       pulumi.StringArrayInput `pulumi:"envs"`
	// an identifier for the resource with format `projects/{{project}}/triggers/{{trigger_id}}`
	Id         pulumi.StringPtrInput            `pulumi:"id"`
	Name       pulumi.StringInput               `pulumi:"name"`
	SecretEnvs pulumi.StringArrayInput          `pulumi:"secretEnvs"`
	Timeout    pulumi.StringPtrInput            `pulumi:"timeout"`
	Timing     pulumi.StringPtrInput            `pulumi:"timing"`
	Volumes    TriggerBuildStepVolumeArrayInput `pulumi:"volumes"`
	WaitFors   pulumi.StringArrayInput          `pulumi:"waitFors"`
}

func (TriggerBuildStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildStep)(nil)).Elem()
}

func (i TriggerBuildStepArgs) ToTriggerBuildStepOutput() TriggerBuildStepOutput {
	return i.ToTriggerBuildStepOutputWithContext(context.Background())
}

func (i TriggerBuildStepArgs) ToTriggerBuildStepOutputWithContext(ctx context.Context) TriggerBuildStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildStepOutput)
}

// TriggerBuildStepArrayInput is an input type that accepts TriggerBuildStepArray and TriggerBuildStepArrayOutput values.
// You can construct a concrete instance of `TriggerBuildStepArrayInput` via:
//
// 		 TriggerBuildStepArray{ TriggerBuildStepArgs{...} }
//
type TriggerBuildStepArrayInput interface {
	pulumi.Input

	ToTriggerBuildStepArrayOutput() TriggerBuildStepArrayOutput
	ToTriggerBuildStepArrayOutputWithContext(context.Context) TriggerBuildStepArrayOutput
}

type TriggerBuildStepArray []TriggerBuildStepInput

func (TriggerBuildStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildStep)(nil)).Elem()
}

func (i TriggerBuildStepArray) ToTriggerBuildStepArrayOutput() TriggerBuildStepArrayOutput {
	return i.ToTriggerBuildStepArrayOutputWithContext(context.Background())
}

func (i TriggerBuildStepArray) ToTriggerBuildStepArrayOutputWithContext(ctx context.Context) TriggerBuildStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildStepArrayOutput)
}

type TriggerBuildStepOutput struct{ *pulumi.OutputState }

func (TriggerBuildStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildStep)(nil)).Elem()
}

func (o TriggerBuildStepOutput) ToTriggerBuildStepOutput() TriggerBuildStepOutput {
	return o
}

func (o TriggerBuildStepOutput) ToTriggerBuildStepOutputWithContext(ctx context.Context) TriggerBuildStepOutput {
	return o
}

func (o TriggerBuildStepOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildStep) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o TriggerBuildStepOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildStep) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

func (o TriggerBuildStepOutput) Entrypoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildStep) *string { return v.Entrypoint }).(pulumi.StringPtrOutput)
}

func (o TriggerBuildStepOutput) Envs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildStep) []string { return v.Envs }).(pulumi.StringArrayOutput)
}

// an identifier for the resource with format `projects/{{project}}/triggers/{{trigger_id}}`
func (o TriggerBuildStepOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildStep) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o TriggerBuildStepOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerBuildStep) string { return v.Name }).(pulumi.StringOutput)
}

func (o TriggerBuildStepOutput) SecretEnvs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildStep) []string { return v.SecretEnvs }).(pulumi.StringArrayOutput)
}

func (o TriggerBuildStepOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildStep) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

func (o TriggerBuildStepOutput) Timing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildStep) *string { return v.Timing }).(pulumi.StringPtrOutput)
}

func (o TriggerBuildStepOutput) Volumes() TriggerBuildStepVolumeArrayOutput {
	return o.ApplyT(func(v TriggerBuildStep) []TriggerBuildStepVolume { return v.Volumes }).(TriggerBuildStepVolumeArrayOutput)
}

func (o TriggerBuildStepOutput) WaitFors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildStep) []string { return v.WaitFors }).(pulumi.StringArrayOutput)
}

type TriggerBuildStepArrayOutput struct{ *pulumi.OutputState }

func (TriggerBuildStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildStep)(nil)).Elem()
}

func (o TriggerBuildStepArrayOutput) ToTriggerBuildStepArrayOutput() TriggerBuildStepArrayOutput {
	return o
}

func (o TriggerBuildStepArrayOutput) ToTriggerBuildStepArrayOutputWithContext(ctx context.Context) TriggerBuildStepArrayOutput {
	return o
}

func (o TriggerBuildStepArrayOutput) Index(i pulumi.IntInput) TriggerBuildStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerBuildStep {
		return vs[0].([]TriggerBuildStep)[vs[1].(int)]
	}).(TriggerBuildStepOutput)
}

type TriggerBuildStepVolume struct {
	Name string `pulumi:"name"`
	Path string `pulumi:"path"`
}

// TriggerBuildStepVolumeInput is an input type that accepts TriggerBuildStepVolumeArgs and TriggerBuildStepVolumeOutput values.
// You can construct a concrete instance of `TriggerBuildStepVolumeInput` via:
//
// 		 TriggerBuildStepVolumeArgs{...}
//
type TriggerBuildStepVolumeInput interface {
	pulumi.Input

	ToTriggerBuildStepVolumeOutput() TriggerBuildStepVolumeOutput
	ToTriggerBuildStepVolumeOutputWithContext(context.Context) TriggerBuildStepVolumeOutput
}

type TriggerBuildStepVolumeArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Path pulumi.StringInput `pulumi:"path"`
}

func (TriggerBuildStepVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildStepVolume)(nil)).Elem()
}

func (i TriggerBuildStepVolumeArgs) ToTriggerBuildStepVolumeOutput() TriggerBuildStepVolumeOutput {
	return i.ToTriggerBuildStepVolumeOutputWithContext(context.Background())
}

func (i TriggerBuildStepVolumeArgs) ToTriggerBuildStepVolumeOutputWithContext(ctx context.Context) TriggerBuildStepVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildStepVolumeOutput)
}

// TriggerBuildStepVolumeArrayInput is an input type that accepts TriggerBuildStepVolumeArray and TriggerBuildStepVolumeArrayOutput values.
// You can construct a concrete instance of `TriggerBuildStepVolumeArrayInput` via:
//
// 		 TriggerBuildStepVolumeArray{ TriggerBuildStepVolumeArgs{...} }
//
type TriggerBuildStepVolumeArrayInput interface {
	pulumi.Input

	ToTriggerBuildStepVolumeArrayOutput() TriggerBuildStepVolumeArrayOutput
	ToTriggerBuildStepVolumeArrayOutputWithContext(context.Context) TriggerBuildStepVolumeArrayOutput
}

type TriggerBuildStepVolumeArray []TriggerBuildStepVolumeInput

func (TriggerBuildStepVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildStepVolume)(nil)).Elem()
}

func (i TriggerBuildStepVolumeArray) ToTriggerBuildStepVolumeArrayOutput() TriggerBuildStepVolumeArrayOutput {
	return i.ToTriggerBuildStepVolumeArrayOutputWithContext(context.Background())
}

func (i TriggerBuildStepVolumeArray) ToTriggerBuildStepVolumeArrayOutputWithContext(ctx context.Context) TriggerBuildStepVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildStepVolumeArrayOutput)
}

type TriggerBuildStepVolumeOutput struct{ *pulumi.OutputState }

func (TriggerBuildStepVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildStepVolume)(nil)).Elem()
}

func (o TriggerBuildStepVolumeOutput) ToTriggerBuildStepVolumeOutput() TriggerBuildStepVolumeOutput {
	return o
}

func (o TriggerBuildStepVolumeOutput) ToTriggerBuildStepVolumeOutputWithContext(ctx context.Context) TriggerBuildStepVolumeOutput {
	return o
}

func (o TriggerBuildStepVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerBuildStepVolume) string { return v.Name }).(pulumi.StringOutput)
}

func (o TriggerBuildStepVolumeOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerBuildStepVolume) string { return v.Path }).(pulumi.StringOutput)
}

type TriggerBuildStepVolumeArrayOutput struct{ *pulumi.OutputState }

func (TriggerBuildStepVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildStepVolume)(nil)).Elem()
}

func (o TriggerBuildStepVolumeArrayOutput) ToTriggerBuildStepVolumeArrayOutput() TriggerBuildStepVolumeArrayOutput {
	return o
}

func (o TriggerBuildStepVolumeArrayOutput) ToTriggerBuildStepVolumeArrayOutputWithContext(ctx context.Context) TriggerBuildStepVolumeArrayOutput {
	return o
}

func (o TriggerBuildStepVolumeArrayOutput) Index(i pulumi.IntInput) TriggerBuildStepVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerBuildStepVolume {
		return vs[0].([]TriggerBuildStepVolume)[vs[1].(int)]
	}).(TriggerBuildStepVolumeOutput)
}

type TriggerGithub struct {
	Name        *string                   `pulumi:"name"`
	Owner       *string                   `pulumi:"owner"`
	PullRequest *TriggerGithubPullRequest `pulumi:"pullRequest"`
	Push        *TriggerGithubPush        `pulumi:"push"`
}

// TriggerGithubInput is an input type that accepts TriggerGithubArgs and TriggerGithubOutput values.
// You can construct a concrete instance of `TriggerGithubInput` via:
//
// 		 TriggerGithubArgs{...}
//
type TriggerGithubInput interface {
	pulumi.Input

	ToTriggerGithubOutput() TriggerGithubOutput
	ToTriggerGithubOutputWithContext(context.Context) TriggerGithubOutput
}

type TriggerGithubArgs struct {
	Name        pulumi.StringPtrInput            `pulumi:"name"`
	Owner       pulumi.StringPtrInput            `pulumi:"owner"`
	PullRequest TriggerGithubPullRequestPtrInput `pulumi:"pullRequest"`
	Push        TriggerGithubPushPtrInput        `pulumi:"push"`
}

func (TriggerGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerGithub)(nil)).Elem()
}

func (i TriggerGithubArgs) ToTriggerGithubOutput() TriggerGithubOutput {
	return i.ToTriggerGithubOutputWithContext(context.Background())
}

func (i TriggerGithubArgs) ToTriggerGithubOutputWithContext(ctx context.Context) TriggerGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubOutput)
}

func (i TriggerGithubArgs) ToTriggerGithubPtrOutput() TriggerGithubPtrOutput {
	return i.ToTriggerGithubPtrOutputWithContext(context.Background())
}

func (i TriggerGithubArgs) ToTriggerGithubPtrOutputWithContext(ctx context.Context) TriggerGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubOutput).ToTriggerGithubPtrOutputWithContext(ctx)
}

// TriggerGithubPtrInput is an input type that accepts TriggerGithubArgs, TriggerGithubPtr and TriggerGithubPtrOutput values.
// You can construct a concrete instance of `TriggerGithubPtrInput` via:
//
// 		 TriggerGithubArgs{...}
//
//  or:
//
// 		 nil
//
type TriggerGithubPtrInput interface {
	pulumi.Input

	ToTriggerGithubPtrOutput() TriggerGithubPtrOutput
	ToTriggerGithubPtrOutputWithContext(context.Context) TriggerGithubPtrOutput
}

type triggerGithubPtrType TriggerGithubArgs

func TriggerGithubPtr(v *TriggerGithubArgs) TriggerGithubPtrInput {
	return (*triggerGithubPtrType)(v)
}

func (*triggerGithubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerGithub)(nil)).Elem()
}

func (i *triggerGithubPtrType) ToTriggerGithubPtrOutput() TriggerGithubPtrOutput {
	return i.ToTriggerGithubPtrOutputWithContext(context.Background())
}

func (i *triggerGithubPtrType) ToTriggerGithubPtrOutputWithContext(ctx context.Context) TriggerGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPtrOutput)
}

type TriggerGithubOutput struct{ *pulumi.OutputState }

func (TriggerGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerGithub)(nil)).Elem()
}

func (o TriggerGithubOutput) ToTriggerGithubOutput() TriggerGithubOutput {
	return o
}

func (o TriggerGithubOutput) ToTriggerGithubOutputWithContext(ctx context.Context) TriggerGithubOutput {
	return o
}

func (o TriggerGithubOutput) ToTriggerGithubPtrOutput() TriggerGithubPtrOutput {
	return o.ToTriggerGithubPtrOutputWithContext(context.Background())
}

func (o TriggerGithubOutput) ToTriggerGithubPtrOutputWithContext(ctx context.Context) TriggerGithubPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *TriggerGithub {
		return &v
	}).(TriggerGithubPtrOutput)
}
func (o TriggerGithubOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o TriggerGithubOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

func (o TriggerGithubOutput) PullRequest() TriggerGithubPullRequestPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *TriggerGithubPullRequest { return v.PullRequest }).(TriggerGithubPullRequestPtrOutput)
}

func (o TriggerGithubOutput) Push() TriggerGithubPushPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *TriggerGithubPush { return v.Push }).(TriggerGithubPushPtrOutput)
}

type TriggerGithubPtrOutput struct{ *pulumi.OutputState }

func (TriggerGithubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerGithub)(nil)).Elem()
}

func (o TriggerGithubPtrOutput) ToTriggerGithubPtrOutput() TriggerGithubPtrOutput {
	return o
}

func (o TriggerGithubPtrOutput) ToTriggerGithubPtrOutputWithContext(ctx context.Context) TriggerGithubPtrOutput {
	return o
}

func (o TriggerGithubPtrOutput) Elem() TriggerGithubOutput {
	return o.ApplyT(func(v *TriggerGithub) TriggerGithub { return *v }).(TriggerGithubOutput)
}

func (o TriggerGithubPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o TriggerGithubPtrOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

func (o TriggerGithubPtrOutput) PullRequest() TriggerGithubPullRequestPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *TriggerGithubPullRequest { return v.PullRequest }).(TriggerGithubPullRequestPtrOutput)
}

func (o TriggerGithubPtrOutput) Push() TriggerGithubPushPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *TriggerGithubPush { return v.Push }).(TriggerGithubPushPtrOutput)
}

type TriggerGithubPullRequest struct {
	Branch         string  `pulumi:"branch"`
	CommentControl *string `pulumi:"commentControl"`
}

// TriggerGithubPullRequestInput is an input type that accepts TriggerGithubPullRequestArgs and TriggerGithubPullRequestOutput values.
// You can construct a concrete instance of `TriggerGithubPullRequestInput` via:
//
// 		 TriggerGithubPullRequestArgs{...}
//
type TriggerGithubPullRequestInput interface {
	pulumi.Input

	ToTriggerGithubPullRequestOutput() TriggerGithubPullRequestOutput
	ToTriggerGithubPullRequestOutputWithContext(context.Context) TriggerGithubPullRequestOutput
}

type TriggerGithubPullRequestArgs struct {
	Branch         pulumi.StringInput    `pulumi:"branch"`
	CommentControl pulumi.StringPtrInput `pulumi:"commentControl"`
}

func (TriggerGithubPullRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerGithubPullRequest)(nil)).Elem()
}

func (i TriggerGithubPullRequestArgs) ToTriggerGithubPullRequestOutput() TriggerGithubPullRequestOutput {
	return i.ToTriggerGithubPullRequestOutputWithContext(context.Background())
}

func (i TriggerGithubPullRequestArgs) ToTriggerGithubPullRequestOutputWithContext(ctx context.Context) TriggerGithubPullRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPullRequestOutput)
}

func (i TriggerGithubPullRequestArgs) ToTriggerGithubPullRequestPtrOutput() TriggerGithubPullRequestPtrOutput {
	return i.ToTriggerGithubPullRequestPtrOutputWithContext(context.Background())
}

func (i TriggerGithubPullRequestArgs) ToTriggerGithubPullRequestPtrOutputWithContext(ctx context.Context) TriggerGithubPullRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPullRequestOutput).ToTriggerGithubPullRequestPtrOutputWithContext(ctx)
}

// TriggerGithubPullRequestPtrInput is an input type that accepts TriggerGithubPullRequestArgs, TriggerGithubPullRequestPtr and TriggerGithubPullRequestPtrOutput values.
// You can construct a concrete instance of `TriggerGithubPullRequestPtrInput` via:
//
// 		 TriggerGithubPullRequestArgs{...}
//
//  or:
//
// 		 nil
//
type TriggerGithubPullRequestPtrInput interface {
	pulumi.Input

	ToTriggerGithubPullRequestPtrOutput() TriggerGithubPullRequestPtrOutput
	ToTriggerGithubPullRequestPtrOutputWithContext(context.Context) TriggerGithubPullRequestPtrOutput
}

type triggerGithubPullRequestPtrType TriggerGithubPullRequestArgs

func TriggerGithubPullRequestPtr(v *TriggerGithubPullRequestArgs) TriggerGithubPullRequestPtrInput {
	return (*triggerGithubPullRequestPtrType)(v)
}

func (*triggerGithubPullRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerGithubPullRequest)(nil)).Elem()
}

func (i *triggerGithubPullRequestPtrType) ToTriggerGithubPullRequestPtrOutput() TriggerGithubPullRequestPtrOutput {
	return i.ToTriggerGithubPullRequestPtrOutputWithContext(context.Background())
}

func (i *triggerGithubPullRequestPtrType) ToTriggerGithubPullRequestPtrOutputWithContext(ctx context.Context) TriggerGithubPullRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPullRequestPtrOutput)
}

type TriggerGithubPullRequestOutput struct{ *pulumi.OutputState }

func (TriggerGithubPullRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerGithubPullRequest)(nil)).Elem()
}

func (o TriggerGithubPullRequestOutput) ToTriggerGithubPullRequestOutput() TriggerGithubPullRequestOutput {
	return o
}

func (o TriggerGithubPullRequestOutput) ToTriggerGithubPullRequestOutputWithContext(ctx context.Context) TriggerGithubPullRequestOutput {
	return o
}

func (o TriggerGithubPullRequestOutput) ToTriggerGithubPullRequestPtrOutput() TriggerGithubPullRequestPtrOutput {
	return o.ToTriggerGithubPullRequestPtrOutputWithContext(context.Background())
}

func (o TriggerGithubPullRequestOutput) ToTriggerGithubPullRequestPtrOutputWithContext(ctx context.Context) TriggerGithubPullRequestPtrOutput {
	return o.ApplyT(func(v TriggerGithubPullRequest) *TriggerGithubPullRequest {
		return &v
	}).(TriggerGithubPullRequestPtrOutput)
}
func (o TriggerGithubPullRequestOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerGithubPullRequest) string { return v.Branch }).(pulumi.StringOutput)
}

func (o TriggerGithubPullRequestOutput) CommentControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithubPullRequest) *string { return v.CommentControl }).(pulumi.StringPtrOutput)
}

type TriggerGithubPullRequestPtrOutput struct{ *pulumi.OutputState }

func (TriggerGithubPullRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerGithubPullRequest)(nil)).Elem()
}

func (o TriggerGithubPullRequestPtrOutput) ToTriggerGithubPullRequestPtrOutput() TriggerGithubPullRequestPtrOutput {
	return o
}

func (o TriggerGithubPullRequestPtrOutput) ToTriggerGithubPullRequestPtrOutputWithContext(ctx context.Context) TriggerGithubPullRequestPtrOutput {
	return o
}

func (o TriggerGithubPullRequestPtrOutput) Elem() TriggerGithubPullRequestOutput {
	return o.ApplyT(func(v *TriggerGithubPullRequest) TriggerGithubPullRequest { return *v }).(TriggerGithubPullRequestOutput)
}

func (o TriggerGithubPullRequestPtrOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerGithubPullRequest) string { return v.Branch }).(pulumi.StringOutput)
}

func (o TriggerGithubPullRequestPtrOutput) CommentControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithubPullRequest) *string { return v.CommentControl }).(pulumi.StringPtrOutput)
}

type TriggerGithubPush struct {
	Branch *string `pulumi:"branch"`
	Tag    *string `pulumi:"tag"`
}

// TriggerGithubPushInput is an input type that accepts TriggerGithubPushArgs and TriggerGithubPushOutput values.
// You can construct a concrete instance of `TriggerGithubPushInput` via:
//
// 		 TriggerGithubPushArgs{...}
//
type TriggerGithubPushInput interface {
	pulumi.Input

	ToTriggerGithubPushOutput() TriggerGithubPushOutput
	ToTriggerGithubPushOutputWithContext(context.Context) TriggerGithubPushOutput
}

type TriggerGithubPushArgs struct {
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	Tag    pulumi.StringPtrInput `pulumi:"tag"`
}

func (TriggerGithubPushArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerGithubPush)(nil)).Elem()
}

func (i TriggerGithubPushArgs) ToTriggerGithubPushOutput() TriggerGithubPushOutput {
	return i.ToTriggerGithubPushOutputWithContext(context.Background())
}

func (i TriggerGithubPushArgs) ToTriggerGithubPushOutputWithContext(ctx context.Context) TriggerGithubPushOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPushOutput)
}

func (i TriggerGithubPushArgs) ToTriggerGithubPushPtrOutput() TriggerGithubPushPtrOutput {
	return i.ToTriggerGithubPushPtrOutputWithContext(context.Background())
}

func (i TriggerGithubPushArgs) ToTriggerGithubPushPtrOutputWithContext(ctx context.Context) TriggerGithubPushPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPushOutput).ToTriggerGithubPushPtrOutputWithContext(ctx)
}

// TriggerGithubPushPtrInput is an input type that accepts TriggerGithubPushArgs, TriggerGithubPushPtr and TriggerGithubPushPtrOutput values.
// You can construct a concrete instance of `TriggerGithubPushPtrInput` via:
//
// 		 TriggerGithubPushArgs{...}
//
//  or:
//
// 		 nil
//
type TriggerGithubPushPtrInput interface {
	pulumi.Input

	ToTriggerGithubPushPtrOutput() TriggerGithubPushPtrOutput
	ToTriggerGithubPushPtrOutputWithContext(context.Context) TriggerGithubPushPtrOutput
}

type triggerGithubPushPtrType TriggerGithubPushArgs

func TriggerGithubPushPtr(v *TriggerGithubPushArgs) TriggerGithubPushPtrInput {
	return (*triggerGithubPushPtrType)(v)
}

func (*triggerGithubPushPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerGithubPush)(nil)).Elem()
}

func (i *triggerGithubPushPtrType) ToTriggerGithubPushPtrOutput() TriggerGithubPushPtrOutput {
	return i.ToTriggerGithubPushPtrOutputWithContext(context.Background())
}

func (i *triggerGithubPushPtrType) ToTriggerGithubPushPtrOutputWithContext(ctx context.Context) TriggerGithubPushPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPushPtrOutput)
}

type TriggerGithubPushOutput struct{ *pulumi.OutputState }

func (TriggerGithubPushOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerGithubPush)(nil)).Elem()
}

func (o TriggerGithubPushOutput) ToTriggerGithubPushOutput() TriggerGithubPushOutput {
	return o
}

func (o TriggerGithubPushOutput) ToTriggerGithubPushOutputWithContext(ctx context.Context) TriggerGithubPushOutput {
	return o
}

func (o TriggerGithubPushOutput) ToTriggerGithubPushPtrOutput() TriggerGithubPushPtrOutput {
	return o.ToTriggerGithubPushPtrOutputWithContext(context.Background())
}

func (o TriggerGithubPushOutput) ToTriggerGithubPushPtrOutputWithContext(ctx context.Context) TriggerGithubPushPtrOutput {
	return o.ApplyT(func(v TriggerGithubPush) *TriggerGithubPush {
		return &v
	}).(TriggerGithubPushPtrOutput)
}
func (o TriggerGithubPushOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithubPush) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o TriggerGithubPushOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithubPush) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type TriggerGithubPushPtrOutput struct{ *pulumi.OutputState }

func (TriggerGithubPushPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerGithubPush)(nil)).Elem()
}

func (o TriggerGithubPushPtrOutput) ToTriggerGithubPushPtrOutput() TriggerGithubPushPtrOutput {
	return o
}

func (o TriggerGithubPushPtrOutput) ToTriggerGithubPushPtrOutputWithContext(ctx context.Context) TriggerGithubPushPtrOutput {
	return o
}

func (o TriggerGithubPushPtrOutput) Elem() TriggerGithubPushOutput {
	return o.ApplyT(func(v *TriggerGithubPush) TriggerGithubPush { return *v }).(TriggerGithubPushOutput)
}

func (o TriggerGithubPushPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithubPush) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o TriggerGithubPushPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithubPush) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type TriggerTriggerTemplate struct {
	BranchName *string `pulumi:"branchName"`
	CommitSha  *string `pulumi:"commitSha"`
	Dir        *string `pulumi:"dir"`
	ProjectId  *string `pulumi:"projectId"`
	RepoName   *string `pulumi:"repoName"`
	TagName    *string `pulumi:"tagName"`
}

// TriggerTriggerTemplateInput is an input type that accepts TriggerTriggerTemplateArgs and TriggerTriggerTemplateOutput values.
// You can construct a concrete instance of `TriggerTriggerTemplateInput` via:
//
// 		 TriggerTriggerTemplateArgs{...}
//
type TriggerTriggerTemplateInput interface {
	pulumi.Input

	ToTriggerTriggerTemplateOutput() TriggerTriggerTemplateOutput
	ToTriggerTriggerTemplateOutputWithContext(context.Context) TriggerTriggerTemplateOutput
}

type TriggerTriggerTemplateArgs struct {
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	CommitSha  pulumi.StringPtrInput `pulumi:"commitSha"`
	Dir        pulumi.StringPtrInput `pulumi:"dir"`
	ProjectId  pulumi.StringPtrInput `pulumi:"projectId"`
	RepoName   pulumi.StringPtrInput `pulumi:"repoName"`
	TagName    pulumi.StringPtrInput `pulumi:"tagName"`
}

func (TriggerTriggerTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerTriggerTemplate)(nil)).Elem()
}

func (i TriggerTriggerTemplateArgs) ToTriggerTriggerTemplateOutput() TriggerTriggerTemplateOutput {
	return i.ToTriggerTriggerTemplateOutputWithContext(context.Background())
}

func (i TriggerTriggerTemplateArgs) ToTriggerTriggerTemplateOutputWithContext(ctx context.Context) TriggerTriggerTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTriggerTemplateOutput)
}

func (i TriggerTriggerTemplateArgs) ToTriggerTriggerTemplatePtrOutput() TriggerTriggerTemplatePtrOutput {
	return i.ToTriggerTriggerTemplatePtrOutputWithContext(context.Background())
}

func (i TriggerTriggerTemplateArgs) ToTriggerTriggerTemplatePtrOutputWithContext(ctx context.Context) TriggerTriggerTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTriggerTemplateOutput).ToTriggerTriggerTemplatePtrOutputWithContext(ctx)
}

// TriggerTriggerTemplatePtrInput is an input type that accepts TriggerTriggerTemplateArgs, TriggerTriggerTemplatePtr and TriggerTriggerTemplatePtrOutput values.
// You can construct a concrete instance of `TriggerTriggerTemplatePtrInput` via:
//
// 		 TriggerTriggerTemplateArgs{...}
//
//  or:
//
// 		 nil
//
type TriggerTriggerTemplatePtrInput interface {
	pulumi.Input

	ToTriggerTriggerTemplatePtrOutput() TriggerTriggerTemplatePtrOutput
	ToTriggerTriggerTemplatePtrOutputWithContext(context.Context) TriggerTriggerTemplatePtrOutput
}

type triggerTriggerTemplatePtrType TriggerTriggerTemplateArgs

func TriggerTriggerTemplatePtr(v *TriggerTriggerTemplateArgs) TriggerTriggerTemplatePtrInput {
	return (*triggerTriggerTemplatePtrType)(v)
}

func (*triggerTriggerTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerTriggerTemplate)(nil)).Elem()
}

func (i *triggerTriggerTemplatePtrType) ToTriggerTriggerTemplatePtrOutput() TriggerTriggerTemplatePtrOutput {
	return i.ToTriggerTriggerTemplatePtrOutputWithContext(context.Background())
}

func (i *triggerTriggerTemplatePtrType) ToTriggerTriggerTemplatePtrOutputWithContext(ctx context.Context) TriggerTriggerTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTriggerTemplatePtrOutput)
}

type TriggerTriggerTemplateOutput struct{ *pulumi.OutputState }

func (TriggerTriggerTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerTriggerTemplate)(nil)).Elem()
}

func (o TriggerTriggerTemplateOutput) ToTriggerTriggerTemplateOutput() TriggerTriggerTemplateOutput {
	return o
}

func (o TriggerTriggerTemplateOutput) ToTriggerTriggerTemplateOutputWithContext(ctx context.Context) TriggerTriggerTemplateOutput {
	return o
}

func (o TriggerTriggerTemplateOutput) ToTriggerTriggerTemplatePtrOutput() TriggerTriggerTemplatePtrOutput {
	return o.ToTriggerTriggerTemplatePtrOutputWithContext(context.Background())
}

func (o TriggerTriggerTemplateOutput) ToTriggerTriggerTemplatePtrOutputWithContext(ctx context.Context) TriggerTriggerTemplatePtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *TriggerTriggerTemplate {
		return &v
	}).(TriggerTriggerTemplatePtrOutput)
}
func (o TriggerTriggerTemplateOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

func (o TriggerTriggerTemplateOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.CommitSha }).(pulumi.StringPtrOutput)
}

func (o TriggerTriggerTemplateOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

func (o TriggerTriggerTemplateOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o TriggerTriggerTemplateOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

func (o TriggerTriggerTemplateOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

type TriggerTriggerTemplatePtrOutput struct{ *pulumi.OutputState }

func (TriggerTriggerTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerTriggerTemplate)(nil)).Elem()
}

func (o TriggerTriggerTemplatePtrOutput) ToTriggerTriggerTemplatePtrOutput() TriggerTriggerTemplatePtrOutput {
	return o
}

func (o TriggerTriggerTemplatePtrOutput) ToTriggerTriggerTemplatePtrOutputWithContext(ctx context.Context) TriggerTriggerTemplatePtrOutput {
	return o
}

func (o TriggerTriggerTemplatePtrOutput) Elem() TriggerTriggerTemplateOutput {
	return o.ApplyT(func(v *TriggerTriggerTemplate) TriggerTriggerTemplate { return *v }).(TriggerTriggerTemplateOutput)
}

func (o TriggerTriggerTemplatePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

func (o TriggerTriggerTemplatePtrOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.CommitSha }).(pulumi.StringPtrOutput)
}

func (o TriggerTriggerTemplatePtrOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

func (o TriggerTriggerTemplatePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o TriggerTriggerTemplatePtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

func (o TriggerTriggerTemplatePtrOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(TriggerBuildOutput{})
	pulumi.RegisterOutputType(TriggerBuildPtrOutput{})
	pulumi.RegisterOutputType(TriggerBuildStepOutput{})
	pulumi.RegisterOutputType(TriggerBuildStepArrayOutput{})
	pulumi.RegisterOutputType(TriggerBuildStepVolumeOutput{})
	pulumi.RegisterOutputType(TriggerBuildStepVolumeArrayOutput{})
	pulumi.RegisterOutputType(TriggerGithubOutput{})
	pulumi.RegisterOutputType(TriggerGithubPtrOutput{})
	pulumi.RegisterOutputType(TriggerGithubPullRequestOutput{})
	pulumi.RegisterOutputType(TriggerGithubPullRequestPtrOutput{})
	pulumi.RegisterOutputType(TriggerGithubPushOutput{})
	pulumi.RegisterOutputType(TriggerGithubPushPtrOutput{})
	pulumi.RegisterOutputType(TriggerTriggerTemplateOutput{})
	pulumi.RegisterOutputType(TriggerTriggerTemplatePtrOutput{})
}
