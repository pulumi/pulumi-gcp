// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudbuild

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TriggerBuild struct {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	// Structure is documented below.
	Artifacts *TriggerBuildArtifacts `pulumi:"artifacts"`
	// A list of images to be pushed upon the successful completion of all build steps.
	// The images will be pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build is marked FAILURE.
	Images []string `pulumi:"images"`
	// Google Cloud Storage bucket where logs should be written.
	// Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
	LogsBucket *string `pulumi:"logsBucket"`
	// Special options for this build.
	// Structure is documented below.
	Options *TriggerBuildOptions `pulumi:"options"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value,
	// the build will expire and the build status will be EXPIRED.
	// The TTL starts ticking from createTime.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	QueueTtl *string `pulumi:"queueTtl"`
	// Secrets to decrypt using Cloud Key Management Service.
	// Structure is documented below.
	Secrets []TriggerBuildSecret `pulumi:"secrets"`
	// The location of the source files to build.
	// One of `storageSource` or `repoSource` must be provided.
	// Structure is documented below.
	Source *TriggerBuildSource `pulumi:"source"`
	// The operations to be performed on the workspace.
	// Structure is documented below.
	Steps []TriggerBuildStep `pulumi:"steps"`
	// Substitutions to use in a triggered build. Should only be used with triggers.run
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a Build. These are not docker tags.
	Tags []string `pulumi:"tags"`
	// Time limit for executing this build step. If not defined,
	// the step has no
	// time limit and will be allowed to continue to run until either it
	// completes or the build itself times out.
	Timeout *string `pulumi:"timeout"`
}

// TriggerBuildInput is an input type that accepts TriggerBuildArgs and TriggerBuildOutput values.
// You can construct a concrete instance of `TriggerBuildInput` via:
//
//          TriggerBuildArgs{...}
type TriggerBuildInput interface {
	pulumi.Input

	ToTriggerBuildOutput() TriggerBuildOutput
	ToTriggerBuildOutputWithContext(context.Context) TriggerBuildOutput
}

type TriggerBuildArgs struct {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	// Structure is documented below.
	Artifacts TriggerBuildArtifactsPtrInput `pulumi:"artifacts"`
	// A list of images to be pushed upon the successful completion of all build steps.
	// The images will be pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build is marked FAILURE.
	Images pulumi.StringArrayInput `pulumi:"images"`
	// Google Cloud Storage bucket where logs should be written.
	// Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
	LogsBucket pulumi.StringPtrInput `pulumi:"logsBucket"`
	// Special options for this build.
	// Structure is documented below.
	Options TriggerBuildOptionsPtrInput `pulumi:"options"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value,
	// the build will expire and the build status will be EXPIRED.
	// The TTL starts ticking from createTime.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	QueueTtl pulumi.StringPtrInput `pulumi:"queueTtl"`
	// Secrets to decrypt using Cloud Key Management Service.
	// Structure is documented below.
	Secrets TriggerBuildSecretArrayInput `pulumi:"secrets"`
	// The location of the source files to build.
	// One of `storageSource` or `repoSource` must be provided.
	// Structure is documented below.
	Source TriggerBuildSourcePtrInput `pulumi:"source"`
	// The operations to be performed on the workspace.
	// Structure is documented below.
	Steps TriggerBuildStepArrayInput `pulumi:"steps"`
	// Substitutions to use in a triggered build. Should only be used with triggers.run
	Substitutions pulumi.StringMapInput `pulumi:"substitutions"`
	// Tags for annotation of a Build. These are not docker tags.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// Time limit for executing this build step. If not defined,
	// the step has no
	// time limit and will be allowed to continue to run until either it
	// completes or the build itself times out.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (TriggerBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuild)(nil)).Elem()
}

func (i TriggerBuildArgs) ToTriggerBuildOutput() TriggerBuildOutput {
	return i.ToTriggerBuildOutputWithContext(context.Background())
}

func (i TriggerBuildArgs) ToTriggerBuildOutputWithContext(ctx context.Context) TriggerBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildOutput)
}

func (i TriggerBuildArgs) ToTriggerBuildPtrOutput() TriggerBuildPtrOutput {
	return i.ToTriggerBuildPtrOutputWithContext(context.Background())
}

func (i TriggerBuildArgs) ToTriggerBuildPtrOutputWithContext(ctx context.Context) TriggerBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildOutput).ToTriggerBuildPtrOutputWithContext(ctx)
}

// TriggerBuildPtrInput is an input type that accepts TriggerBuildArgs, TriggerBuildPtr and TriggerBuildPtrOutput values.
// You can construct a concrete instance of `TriggerBuildPtrInput` via:
//
//          TriggerBuildArgs{...}
//
//  or:
//
//          nil
type TriggerBuildPtrInput interface {
	pulumi.Input

	ToTriggerBuildPtrOutput() TriggerBuildPtrOutput
	ToTriggerBuildPtrOutputWithContext(context.Context) TriggerBuildPtrOutput
}

type triggerBuildPtrType TriggerBuildArgs

func TriggerBuildPtr(v *TriggerBuildArgs) TriggerBuildPtrInput {
	return (*triggerBuildPtrType)(v)
}

func (*triggerBuildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuild)(nil)).Elem()
}

func (i *triggerBuildPtrType) ToTriggerBuildPtrOutput() TriggerBuildPtrOutput {
	return i.ToTriggerBuildPtrOutputWithContext(context.Background())
}

func (i *triggerBuildPtrType) ToTriggerBuildPtrOutputWithContext(ctx context.Context) TriggerBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildPtrOutput)
}

type TriggerBuildOutput struct{ *pulumi.OutputState }

func (TriggerBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuild)(nil)).Elem()
}

func (o TriggerBuildOutput) ToTriggerBuildOutput() TriggerBuildOutput {
	return o
}

func (o TriggerBuildOutput) ToTriggerBuildOutputWithContext(ctx context.Context) TriggerBuildOutput {
	return o
}

func (o TriggerBuildOutput) ToTriggerBuildPtrOutput() TriggerBuildPtrOutput {
	return o.ToTriggerBuildPtrOutputWithContext(context.Background())
}

func (o TriggerBuildOutput) ToTriggerBuildPtrOutputWithContext(ctx context.Context) TriggerBuildPtrOutput {
	return o.ApplyT(func(v TriggerBuild) *TriggerBuild {
		return &v
	}).(TriggerBuildPtrOutput)
}

// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
// Structure is documented below.
func (o TriggerBuildOutput) Artifacts() TriggerBuildArtifactsPtrOutput {
	return o.ApplyT(func(v TriggerBuild) *TriggerBuildArtifacts { return v.Artifacts }).(TriggerBuildArtifactsPtrOutput)
}

// A list of images to be pushed upon the successful completion of all build steps.
// The images will be pushed using the builder service account's credentials.
// The digests of the pushed images will be stored in the Build resource's results field.
// If any of the images fail to be pushed, the build is marked FAILURE.
func (o TriggerBuildOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuild) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// Google Cloud Storage bucket where logs should be written.
// Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
func (o TriggerBuildOutput) LogsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuild) *string { return v.LogsBucket }).(pulumi.StringPtrOutput)
}

// Special options for this build.
// Structure is documented below.
func (o TriggerBuildOutput) Options() TriggerBuildOptionsPtrOutput {
	return o.ApplyT(func(v TriggerBuild) *TriggerBuildOptions { return v.Options }).(TriggerBuildOptionsPtrOutput)
}

// TTL in queue for this build. If provided and the build is enqueued longer than this value,
// the build will expire and the build status will be EXPIRED.
// The TTL starts ticking from createTime.
// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o TriggerBuildOutput) QueueTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuild) *string { return v.QueueTtl }).(pulumi.StringPtrOutput)
}

// Secrets to decrypt using Cloud Key Management Service.
// Structure is documented below.
func (o TriggerBuildOutput) Secrets() TriggerBuildSecretArrayOutput {
	return o.ApplyT(func(v TriggerBuild) []TriggerBuildSecret { return v.Secrets }).(TriggerBuildSecretArrayOutput)
}

// The location of the source files to build.
// One of `storageSource` or `repoSource` must be provided.
// Structure is documented below.
func (o TriggerBuildOutput) Source() TriggerBuildSourcePtrOutput {
	return o.ApplyT(func(v TriggerBuild) *TriggerBuildSource { return v.Source }).(TriggerBuildSourcePtrOutput)
}

// The operations to be performed on the workspace.
// Structure is documented below.
func (o TriggerBuildOutput) Steps() TriggerBuildStepArrayOutput {
	return o.ApplyT(func(v TriggerBuild) []TriggerBuildStep { return v.Steps }).(TriggerBuildStepArrayOutput)
}

// Substitutions to use in a triggered build. Should only be used with triggers.run
func (o TriggerBuildOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v TriggerBuild) map[string]string { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Tags for annotation of a Build. These are not docker tags.
func (o TriggerBuildOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuild) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Time limit for executing this build step. If not defined,
// the step has no
// time limit and will be allowed to continue to run until either it
// completes or the build itself times out.
func (o TriggerBuildOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuild) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type TriggerBuildPtrOutput struct{ *pulumi.OutputState }

func (TriggerBuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuild)(nil)).Elem()
}

func (o TriggerBuildPtrOutput) ToTriggerBuildPtrOutput() TriggerBuildPtrOutput {
	return o
}

func (o TriggerBuildPtrOutput) ToTriggerBuildPtrOutputWithContext(ctx context.Context) TriggerBuildPtrOutput {
	return o
}

func (o TriggerBuildPtrOutput) Elem() TriggerBuildOutput {
	return o.ApplyT(func(v *TriggerBuild) TriggerBuild { return *v }).(TriggerBuildOutput)
}

// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
// Structure is documented below.
func (o TriggerBuildPtrOutput) Artifacts() TriggerBuildArtifactsPtrOutput {
	return o.ApplyT(func(v *TriggerBuild) *TriggerBuildArtifacts {
		if v == nil {
			return nil
		}
		return v.Artifacts
	}).(TriggerBuildArtifactsPtrOutput)
}

// A list of images to be pushed upon the successful completion of all build steps.
// The images will be pushed using the builder service account's credentials.
// The digests of the pushed images will be stored in the Build resource's results field.
// If any of the images fail to be pushed, the build is marked FAILURE.
func (o TriggerBuildPtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TriggerBuild) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// Google Cloud Storage bucket where logs should be written.
// Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
func (o TriggerBuildPtrOutput) LogsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuild) *string {
		if v == nil {
			return nil
		}
		return v.LogsBucket
	}).(pulumi.StringPtrOutput)
}

// Special options for this build.
// Structure is documented below.
func (o TriggerBuildPtrOutput) Options() TriggerBuildOptionsPtrOutput {
	return o.ApplyT(func(v *TriggerBuild) *TriggerBuildOptions {
		if v == nil {
			return nil
		}
		return v.Options
	}).(TriggerBuildOptionsPtrOutput)
}

// TTL in queue for this build. If provided and the build is enqueued longer than this value,
// the build will expire and the build status will be EXPIRED.
// The TTL starts ticking from createTime.
// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o TriggerBuildPtrOutput) QueueTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuild) *string {
		if v == nil {
			return nil
		}
		return v.QueueTtl
	}).(pulumi.StringPtrOutput)
}

// Secrets to decrypt using Cloud Key Management Service.
// Structure is documented below.
func (o TriggerBuildPtrOutput) Secrets() TriggerBuildSecretArrayOutput {
	return o.ApplyT(func(v *TriggerBuild) []TriggerBuildSecret {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(TriggerBuildSecretArrayOutput)
}

// The location of the source files to build.
// One of `storageSource` or `repoSource` must be provided.
// Structure is documented below.
func (o TriggerBuildPtrOutput) Source() TriggerBuildSourcePtrOutput {
	return o.ApplyT(func(v *TriggerBuild) *TriggerBuildSource {
		if v == nil {
			return nil
		}
		return v.Source
	}).(TriggerBuildSourcePtrOutput)
}

// The operations to be performed on the workspace.
// Structure is documented below.
func (o TriggerBuildPtrOutput) Steps() TriggerBuildStepArrayOutput {
	return o.ApplyT(func(v *TriggerBuild) []TriggerBuildStep {
		if v == nil {
			return nil
		}
		return v.Steps
	}).(TriggerBuildStepArrayOutput)
}

// Substitutions to use in a triggered build. Should only be used with triggers.run
func (o TriggerBuildPtrOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TriggerBuild) map[string]string {
		if v == nil {
			return nil
		}
		return v.Substitutions
	}).(pulumi.StringMapOutput)
}

// Tags for annotation of a Build. These are not docker tags.
func (o TriggerBuildPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TriggerBuild) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// Time limit for executing this build step. If not defined,
// the step has no
// time limit and will be allowed to continue to run until either it
// completes or the build itself times out.
func (o TriggerBuildPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuild) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type TriggerBuildArtifacts struct {
	// A list of images to be pushed upon the successful completion of all build steps.
	// The images will be pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build is marked FAILURE.
	Images []string `pulumi:"images"`
	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
	// Files in the workspace matching specified paths globs will be uploaded to the
	// Cloud Storage location using the builder service account's credentials.
	// The location and generation of the uploaded objects will be stored in the Build resource's results field.
	// If any objects fail to be pushed, the build is marked FAILURE.
	// Structure is documented below.
	Objects *TriggerBuildArtifactsObjects `pulumi:"objects"`
}

// TriggerBuildArtifactsInput is an input type that accepts TriggerBuildArtifactsArgs and TriggerBuildArtifactsOutput values.
// You can construct a concrete instance of `TriggerBuildArtifactsInput` via:
//
//          TriggerBuildArtifactsArgs{...}
type TriggerBuildArtifactsInput interface {
	pulumi.Input

	ToTriggerBuildArtifactsOutput() TriggerBuildArtifactsOutput
	ToTriggerBuildArtifactsOutputWithContext(context.Context) TriggerBuildArtifactsOutput
}

type TriggerBuildArtifactsArgs struct {
	// A list of images to be pushed upon the successful completion of all build steps.
	// The images will be pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build is marked FAILURE.
	Images pulumi.StringArrayInput `pulumi:"images"`
	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
	// Files in the workspace matching specified paths globs will be uploaded to the
	// Cloud Storage location using the builder service account's credentials.
	// The location and generation of the uploaded objects will be stored in the Build resource's results field.
	// If any objects fail to be pushed, the build is marked FAILURE.
	// Structure is documented below.
	Objects TriggerBuildArtifactsObjectsPtrInput `pulumi:"objects"`
}

func (TriggerBuildArtifactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildArtifacts)(nil)).Elem()
}

func (i TriggerBuildArtifactsArgs) ToTriggerBuildArtifactsOutput() TriggerBuildArtifactsOutput {
	return i.ToTriggerBuildArtifactsOutputWithContext(context.Background())
}

func (i TriggerBuildArtifactsArgs) ToTriggerBuildArtifactsOutputWithContext(ctx context.Context) TriggerBuildArtifactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildArtifactsOutput)
}

func (i TriggerBuildArtifactsArgs) ToTriggerBuildArtifactsPtrOutput() TriggerBuildArtifactsPtrOutput {
	return i.ToTriggerBuildArtifactsPtrOutputWithContext(context.Background())
}

func (i TriggerBuildArtifactsArgs) ToTriggerBuildArtifactsPtrOutputWithContext(ctx context.Context) TriggerBuildArtifactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildArtifactsOutput).ToTriggerBuildArtifactsPtrOutputWithContext(ctx)
}

// TriggerBuildArtifactsPtrInput is an input type that accepts TriggerBuildArtifactsArgs, TriggerBuildArtifactsPtr and TriggerBuildArtifactsPtrOutput values.
// You can construct a concrete instance of `TriggerBuildArtifactsPtrInput` via:
//
//          TriggerBuildArtifactsArgs{...}
//
//  or:
//
//          nil
type TriggerBuildArtifactsPtrInput interface {
	pulumi.Input

	ToTriggerBuildArtifactsPtrOutput() TriggerBuildArtifactsPtrOutput
	ToTriggerBuildArtifactsPtrOutputWithContext(context.Context) TriggerBuildArtifactsPtrOutput
}

type triggerBuildArtifactsPtrType TriggerBuildArtifactsArgs

func TriggerBuildArtifactsPtr(v *TriggerBuildArtifactsArgs) TriggerBuildArtifactsPtrInput {
	return (*triggerBuildArtifactsPtrType)(v)
}

func (*triggerBuildArtifactsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuildArtifacts)(nil)).Elem()
}

func (i *triggerBuildArtifactsPtrType) ToTriggerBuildArtifactsPtrOutput() TriggerBuildArtifactsPtrOutput {
	return i.ToTriggerBuildArtifactsPtrOutputWithContext(context.Background())
}

func (i *triggerBuildArtifactsPtrType) ToTriggerBuildArtifactsPtrOutputWithContext(ctx context.Context) TriggerBuildArtifactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildArtifactsPtrOutput)
}

type TriggerBuildArtifactsOutput struct{ *pulumi.OutputState }

func (TriggerBuildArtifactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildArtifacts)(nil)).Elem()
}

func (o TriggerBuildArtifactsOutput) ToTriggerBuildArtifactsOutput() TriggerBuildArtifactsOutput {
	return o
}

func (o TriggerBuildArtifactsOutput) ToTriggerBuildArtifactsOutputWithContext(ctx context.Context) TriggerBuildArtifactsOutput {
	return o
}

func (o TriggerBuildArtifactsOutput) ToTriggerBuildArtifactsPtrOutput() TriggerBuildArtifactsPtrOutput {
	return o.ToTriggerBuildArtifactsPtrOutputWithContext(context.Background())
}

func (o TriggerBuildArtifactsOutput) ToTriggerBuildArtifactsPtrOutputWithContext(ctx context.Context) TriggerBuildArtifactsPtrOutput {
	return o.ApplyT(func(v TriggerBuildArtifacts) *TriggerBuildArtifacts {
		return &v
	}).(TriggerBuildArtifactsPtrOutput)
}

// A list of images to be pushed upon the successful completion of all build steps.
// The images will be pushed using the builder service account's credentials.
// The digests of the pushed images will be stored in the Build resource's results field.
// If any of the images fail to be pushed, the build is marked FAILURE.
func (o TriggerBuildArtifactsOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildArtifacts) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
// Files in the workspace matching specified paths globs will be uploaded to the
// Cloud Storage location using the builder service account's credentials.
// The location and generation of the uploaded objects will be stored in the Build resource's results field.
// If any objects fail to be pushed, the build is marked FAILURE.
// Structure is documented below.
func (o TriggerBuildArtifactsOutput) Objects() TriggerBuildArtifactsObjectsPtrOutput {
	return o.ApplyT(func(v TriggerBuildArtifacts) *TriggerBuildArtifactsObjects { return v.Objects }).(TriggerBuildArtifactsObjectsPtrOutput)
}

type TriggerBuildArtifactsPtrOutput struct{ *pulumi.OutputState }

func (TriggerBuildArtifactsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuildArtifacts)(nil)).Elem()
}

func (o TriggerBuildArtifactsPtrOutput) ToTriggerBuildArtifactsPtrOutput() TriggerBuildArtifactsPtrOutput {
	return o
}

func (o TriggerBuildArtifactsPtrOutput) ToTriggerBuildArtifactsPtrOutputWithContext(ctx context.Context) TriggerBuildArtifactsPtrOutput {
	return o
}

func (o TriggerBuildArtifactsPtrOutput) Elem() TriggerBuildArtifactsOutput {
	return o.ApplyT(func(v *TriggerBuildArtifacts) TriggerBuildArtifacts { return *v }).(TriggerBuildArtifactsOutput)
}

// A list of images to be pushed upon the successful completion of all build steps.
// The images will be pushed using the builder service account's credentials.
// The digests of the pushed images will be stored in the Build resource's results field.
// If any of the images fail to be pushed, the build is marked FAILURE.
func (o TriggerBuildArtifactsPtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TriggerBuildArtifacts) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
// Files in the workspace matching specified paths globs will be uploaded to the
// Cloud Storage location using the builder service account's credentials.
// The location and generation of the uploaded objects will be stored in the Build resource's results field.
// If any objects fail to be pushed, the build is marked FAILURE.
// Structure is documented below.
func (o TriggerBuildArtifactsPtrOutput) Objects() TriggerBuildArtifactsObjectsPtrOutput {
	return o.ApplyT(func(v *TriggerBuildArtifacts) *TriggerBuildArtifactsObjects {
		if v == nil {
			return nil
		}
		return v.Objects
	}).(TriggerBuildArtifactsObjectsPtrOutput)
}

type TriggerBuildArtifactsObjects struct {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".
	// Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
	// this location as a prefix.
	Location *string `pulumi:"location"`
	// Path globs used to match files in the build's workspace.
	Paths []string `pulumi:"paths"`
	// -
	// Output only. Stores timing information for pushing all artifact objects.
	// Structure is documented below.
	Timings []TriggerBuildArtifactsObjectsTiming `pulumi:"timings"`
}

// TriggerBuildArtifactsObjectsInput is an input type that accepts TriggerBuildArtifactsObjectsArgs and TriggerBuildArtifactsObjectsOutput values.
// You can construct a concrete instance of `TriggerBuildArtifactsObjectsInput` via:
//
//          TriggerBuildArtifactsObjectsArgs{...}
type TriggerBuildArtifactsObjectsInput interface {
	pulumi.Input

	ToTriggerBuildArtifactsObjectsOutput() TriggerBuildArtifactsObjectsOutput
	ToTriggerBuildArtifactsObjectsOutputWithContext(context.Context) TriggerBuildArtifactsObjectsOutput
}

type TriggerBuildArtifactsObjectsArgs struct {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".
	// Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
	// this location as a prefix.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Path globs used to match files in the build's workspace.
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// -
	// Output only. Stores timing information for pushing all artifact objects.
	// Structure is documented below.
	Timings TriggerBuildArtifactsObjectsTimingArrayInput `pulumi:"timings"`
}

func (TriggerBuildArtifactsObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildArtifactsObjects)(nil)).Elem()
}

func (i TriggerBuildArtifactsObjectsArgs) ToTriggerBuildArtifactsObjectsOutput() TriggerBuildArtifactsObjectsOutput {
	return i.ToTriggerBuildArtifactsObjectsOutputWithContext(context.Background())
}

func (i TriggerBuildArtifactsObjectsArgs) ToTriggerBuildArtifactsObjectsOutputWithContext(ctx context.Context) TriggerBuildArtifactsObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildArtifactsObjectsOutput)
}

func (i TriggerBuildArtifactsObjectsArgs) ToTriggerBuildArtifactsObjectsPtrOutput() TriggerBuildArtifactsObjectsPtrOutput {
	return i.ToTriggerBuildArtifactsObjectsPtrOutputWithContext(context.Background())
}

func (i TriggerBuildArtifactsObjectsArgs) ToTriggerBuildArtifactsObjectsPtrOutputWithContext(ctx context.Context) TriggerBuildArtifactsObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildArtifactsObjectsOutput).ToTriggerBuildArtifactsObjectsPtrOutputWithContext(ctx)
}

// TriggerBuildArtifactsObjectsPtrInput is an input type that accepts TriggerBuildArtifactsObjectsArgs, TriggerBuildArtifactsObjectsPtr and TriggerBuildArtifactsObjectsPtrOutput values.
// You can construct a concrete instance of `TriggerBuildArtifactsObjectsPtrInput` via:
//
//          TriggerBuildArtifactsObjectsArgs{...}
//
//  or:
//
//          nil
type TriggerBuildArtifactsObjectsPtrInput interface {
	pulumi.Input

	ToTriggerBuildArtifactsObjectsPtrOutput() TriggerBuildArtifactsObjectsPtrOutput
	ToTriggerBuildArtifactsObjectsPtrOutputWithContext(context.Context) TriggerBuildArtifactsObjectsPtrOutput
}

type triggerBuildArtifactsObjectsPtrType TriggerBuildArtifactsObjectsArgs

func TriggerBuildArtifactsObjectsPtr(v *TriggerBuildArtifactsObjectsArgs) TriggerBuildArtifactsObjectsPtrInput {
	return (*triggerBuildArtifactsObjectsPtrType)(v)
}

func (*triggerBuildArtifactsObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuildArtifactsObjects)(nil)).Elem()
}

func (i *triggerBuildArtifactsObjectsPtrType) ToTriggerBuildArtifactsObjectsPtrOutput() TriggerBuildArtifactsObjectsPtrOutput {
	return i.ToTriggerBuildArtifactsObjectsPtrOutputWithContext(context.Background())
}

func (i *triggerBuildArtifactsObjectsPtrType) ToTriggerBuildArtifactsObjectsPtrOutputWithContext(ctx context.Context) TriggerBuildArtifactsObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildArtifactsObjectsPtrOutput)
}

type TriggerBuildArtifactsObjectsOutput struct{ *pulumi.OutputState }

func (TriggerBuildArtifactsObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildArtifactsObjects)(nil)).Elem()
}

func (o TriggerBuildArtifactsObjectsOutput) ToTriggerBuildArtifactsObjectsOutput() TriggerBuildArtifactsObjectsOutput {
	return o
}

func (o TriggerBuildArtifactsObjectsOutput) ToTriggerBuildArtifactsObjectsOutputWithContext(ctx context.Context) TriggerBuildArtifactsObjectsOutput {
	return o
}

func (o TriggerBuildArtifactsObjectsOutput) ToTriggerBuildArtifactsObjectsPtrOutput() TriggerBuildArtifactsObjectsPtrOutput {
	return o.ToTriggerBuildArtifactsObjectsPtrOutputWithContext(context.Background())
}

func (o TriggerBuildArtifactsObjectsOutput) ToTriggerBuildArtifactsObjectsPtrOutputWithContext(ctx context.Context) TriggerBuildArtifactsObjectsPtrOutput {
	return o.ApplyT(func(v TriggerBuildArtifactsObjects) *TriggerBuildArtifactsObjects {
		return &v
	}).(TriggerBuildArtifactsObjectsPtrOutput)
}

// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".
// Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
// this location as a prefix.
func (o TriggerBuildArtifactsObjectsOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildArtifactsObjects) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Path globs used to match files in the build's workspace.
func (o TriggerBuildArtifactsObjectsOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildArtifactsObjects) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// -
// Output only. Stores timing information for pushing all artifact objects.
// Structure is documented below.
func (o TriggerBuildArtifactsObjectsOutput) Timings() TriggerBuildArtifactsObjectsTimingArrayOutput {
	return o.ApplyT(func(v TriggerBuildArtifactsObjects) []TriggerBuildArtifactsObjectsTiming { return v.Timings }).(TriggerBuildArtifactsObjectsTimingArrayOutput)
}

type TriggerBuildArtifactsObjectsPtrOutput struct{ *pulumi.OutputState }

func (TriggerBuildArtifactsObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuildArtifactsObjects)(nil)).Elem()
}

func (o TriggerBuildArtifactsObjectsPtrOutput) ToTriggerBuildArtifactsObjectsPtrOutput() TriggerBuildArtifactsObjectsPtrOutput {
	return o
}

func (o TriggerBuildArtifactsObjectsPtrOutput) ToTriggerBuildArtifactsObjectsPtrOutputWithContext(ctx context.Context) TriggerBuildArtifactsObjectsPtrOutput {
	return o
}

func (o TriggerBuildArtifactsObjectsPtrOutput) Elem() TriggerBuildArtifactsObjectsOutput {
	return o.ApplyT(func(v *TriggerBuildArtifactsObjects) TriggerBuildArtifactsObjects { return *v }).(TriggerBuildArtifactsObjectsOutput)
}

// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".
// Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
// this location as a prefix.
func (o TriggerBuildArtifactsObjectsPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildArtifactsObjects) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Path globs used to match files in the build's workspace.
func (o TriggerBuildArtifactsObjectsPtrOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TriggerBuildArtifactsObjects) []string {
		if v == nil {
			return nil
		}
		return v.Paths
	}).(pulumi.StringArrayOutput)
}

// -
// Output only. Stores timing information for pushing all artifact objects.
// Structure is documented below.
func (o TriggerBuildArtifactsObjectsPtrOutput) Timings() TriggerBuildArtifactsObjectsTimingArrayOutput {
	return o.ApplyT(func(v *TriggerBuildArtifactsObjects) []TriggerBuildArtifactsObjectsTiming {
		if v == nil {
			return nil
		}
		return v.Timings
	}).(TriggerBuildArtifactsObjectsTimingArrayOutput)
}

type TriggerBuildArtifactsObjectsTiming struct {
	// End of time span.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	EndTime *string `pulumi:"endTime"`
	// Start of time span.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	StartTime *string `pulumi:"startTime"`
}

// TriggerBuildArtifactsObjectsTimingInput is an input type that accepts TriggerBuildArtifactsObjectsTimingArgs and TriggerBuildArtifactsObjectsTimingOutput values.
// You can construct a concrete instance of `TriggerBuildArtifactsObjectsTimingInput` via:
//
//          TriggerBuildArtifactsObjectsTimingArgs{...}
type TriggerBuildArtifactsObjectsTimingInput interface {
	pulumi.Input

	ToTriggerBuildArtifactsObjectsTimingOutput() TriggerBuildArtifactsObjectsTimingOutput
	ToTriggerBuildArtifactsObjectsTimingOutputWithContext(context.Context) TriggerBuildArtifactsObjectsTimingOutput
}

type TriggerBuildArtifactsObjectsTimingArgs struct {
	// End of time span.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Start of time span.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (TriggerBuildArtifactsObjectsTimingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildArtifactsObjectsTiming)(nil)).Elem()
}

func (i TriggerBuildArtifactsObjectsTimingArgs) ToTriggerBuildArtifactsObjectsTimingOutput() TriggerBuildArtifactsObjectsTimingOutput {
	return i.ToTriggerBuildArtifactsObjectsTimingOutputWithContext(context.Background())
}

func (i TriggerBuildArtifactsObjectsTimingArgs) ToTriggerBuildArtifactsObjectsTimingOutputWithContext(ctx context.Context) TriggerBuildArtifactsObjectsTimingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildArtifactsObjectsTimingOutput)
}

// TriggerBuildArtifactsObjectsTimingArrayInput is an input type that accepts TriggerBuildArtifactsObjectsTimingArray and TriggerBuildArtifactsObjectsTimingArrayOutput values.
// You can construct a concrete instance of `TriggerBuildArtifactsObjectsTimingArrayInput` via:
//
//          TriggerBuildArtifactsObjectsTimingArray{ TriggerBuildArtifactsObjectsTimingArgs{...} }
type TriggerBuildArtifactsObjectsTimingArrayInput interface {
	pulumi.Input

	ToTriggerBuildArtifactsObjectsTimingArrayOutput() TriggerBuildArtifactsObjectsTimingArrayOutput
	ToTriggerBuildArtifactsObjectsTimingArrayOutputWithContext(context.Context) TriggerBuildArtifactsObjectsTimingArrayOutput
}

type TriggerBuildArtifactsObjectsTimingArray []TriggerBuildArtifactsObjectsTimingInput

func (TriggerBuildArtifactsObjectsTimingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildArtifactsObjectsTiming)(nil)).Elem()
}

func (i TriggerBuildArtifactsObjectsTimingArray) ToTriggerBuildArtifactsObjectsTimingArrayOutput() TriggerBuildArtifactsObjectsTimingArrayOutput {
	return i.ToTriggerBuildArtifactsObjectsTimingArrayOutputWithContext(context.Background())
}

func (i TriggerBuildArtifactsObjectsTimingArray) ToTriggerBuildArtifactsObjectsTimingArrayOutputWithContext(ctx context.Context) TriggerBuildArtifactsObjectsTimingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildArtifactsObjectsTimingArrayOutput)
}

type TriggerBuildArtifactsObjectsTimingOutput struct{ *pulumi.OutputState }

func (TriggerBuildArtifactsObjectsTimingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildArtifactsObjectsTiming)(nil)).Elem()
}

func (o TriggerBuildArtifactsObjectsTimingOutput) ToTriggerBuildArtifactsObjectsTimingOutput() TriggerBuildArtifactsObjectsTimingOutput {
	return o
}

func (o TriggerBuildArtifactsObjectsTimingOutput) ToTriggerBuildArtifactsObjectsTimingOutputWithContext(ctx context.Context) TriggerBuildArtifactsObjectsTimingOutput {
	return o
}

// End of time span.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o TriggerBuildArtifactsObjectsTimingOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildArtifactsObjectsTiming) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Start of time span.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o TriggerBuildArtifactsObjectsTimingOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildArtifactsObjectsTiming) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type TriggerBuildArtifactsObjectsTimingArrayOutput struct{ *pulumi.OutputState }

func (TriggerBuildArtifactsObjectsTimingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildArtifactsObjectsTiming)(nil)).Elem()
}

func (o TriggerBuildArtifactsObjectsTimingArrayOutput) ToTriggerBuildArtifactsObjectsTimingArrayOutput() TriggerBuildArtifactsObjectsTimingArrayOutput {
	return o
}

func (o TriggerBuildArtifactsObjectsTimingArrayOutput) ToTriggerBuildArtifactsObjectsTimingArrayOutputWithContext(ctx context.Context) TriggerBuildArtifactsObjectsTimingArrayOutput {
	return o
}

func (o TriggerBuildArtifactsObjectsTimingArrayOutput) Index(i pulumi.IntInput) TriggerBuildArtifactsObjectsTimingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerBuildArtifactsObjectsTiming {
		return vs[0].([]TriggerBuildArtifactsObjectsTiming)[vs[1].(int)]
	}).(TriggerBuildArtifactsObjectsTimingOutput)
}

type TriggerBuildOptions struct {
	// Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
	// some of the space will be used by the operating system and build utilities.
	// Also note that this is the minimum disk size that will be allocated for the build --
	// the build may run with a larger disk than requested. At present, the maximum disk size
	// is 1000GB; builds that request more than the maximum are rejected with an error.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Option to specify whether or not to apply bash style string operations to the substitutions.
	// NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	DynamicSubstitutions *bool `pulumi:"dynamicSubstitutions"`
	// A list of global environment variable definitions that will exist for all build steps
	// in this build. If a variable is defined in both globally and in a build step,
	// the variable will use the build step value.
	// The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Envs []string `pulumi:"envs"`
	// Option to define build log streaming behavior to Google Cloud Storage.
	// Possible values are `STREAM_DEFAULT`, `STREAM_ON`, and `STREAM_OFF`.
	LogStreamingOption *string `pulumi:"logStreamingOption"`
	// Option to specify the logging mode, which determines if and where build logs are stored.
	// Possible values are `LOGGING_UNSPECIFIED`, `LEGACY`, `GCS_ONLY`, `STACKDRIVER_ONLY`, and `NONE`.
	Logging *string `pulumi:"logging"`
	// Compute Engine machine type on which to run the build.
	// Possible values are `UNSPECIFIED`, `N1_HIGHCPU_8`, `N1_HIGHCPU_32`, `E2_HIGHCPU_8`, and `E2_HIGHCPU_32`.
	MachineType *string `pulumi:"machineType"`
	// Requested verifiability options.
	// Possible values are `NOT_VERIFIED` and `VERIFIED`.
	RequestedVerifyOption *string `pulumi:"requestedVerifyOption"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management
	// Service crypto key. These values must be specified in the build's Secret. These variables
	// will be available to all build steps in this build.
	SecretEnvs []string `pulumi:"secretEnvs"`
	// Requested hash for SourceProvenance.
	// Each value may be one of `NONE`, `SHA256`, and `MD5`.
	SourceProvenanceHashes []string `pulumi:"sourceProvenanceHashes"`
	// Option to specify behavior when there is an error in the substitution checks.
	// NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
	// in the build configuration file.
	// Possible values are `MUST_MATCH` and `ALLOW_LOOSE`.
	SubstitutionOption *string `pulumi:"substitutionOption"`
	// Global list of volumes to mount for ALL build steps
	// Each volume is created as an empty volume prior to starting the build process.
	// Upon completion of the build, volumes and their contents are discarded. Global
	// volume names and paths cannot conflict with the volumes defined a build step.
	// Using a global volume in a build with only one step is not valid as it is indicative
	// of a build request with an incorrect configuration.
	// Structure is documented below.
	Volumes []TriggerBuildOptionsVolume `pulumi:"volumes"`
	// Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
	// This field is experimental.
	WorkerPool *string `pulumi:"workerPool"`
}

// TriggerBuildOptionsInput is an input type that accepts TriggerBuildOptionsArgs and TriggerBuildOptionsOutput values.
// You can construct a concrete instance of `TriggerBuildOptionsInput` via:
//
//          TriggerBuildOptionsArgs{...}
type TriggerBuildOptionsInput interface {
	pulumi.Input

	ToTriggerBuildOptionsOutput() TriggerBuildOptionsOutput
	ToTriggerBuildOptionsOutputWithContext(context.Context) TriggerBuildOptionsOutput
}

type TriggerBuildOptionsArgs struct {
	// Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
	// some of the space will be used by the operating system and build utilities.
	// Also note that this is the minimum disk size that will be allocated for the build --
	// the build may run with a larger disk than requested. At present, the maximum disk size
	// is 1000GB; builds that request more than the maximum are rejected with an error.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Option to specify whether or not to apply bash style string operations to the substitutions.
	// NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	DynamicSubstitutions pulumi.BoolPtrInput `pulumi:"dynamicSubstitutions"`
	// A list of global environment variable definitions that will exist for all build steps
	// in this build. If a variable is defined in both globally and in a build step,
	// the variable will use the build step value.
	// The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Envs pulumi.StringArrayInput `pulumi:"envs"`
	// Option to define build log streaming behavior to Google Cloud Storage.
	// Possible values are `STREAM_DEFAULT`, `STREAM_ON`, and `STREAM_OFF`.
	LogStreamingOption pulumi.StringPtrInput `pulumi:"logStreamingOption"`
	// Option to specify the logging mode, which determines if and where build logs are stored.
	// Possible values are `LOGGING_UNSPECIFIED`, `LEGACY`, `GCS_ONLY`, `STACKDRIVER_ONLY`, and `NONE`.
	Logging pulumi.StringPtrInput `pulumi:"logging"`
	// Compute Engine machine type on which to run the build.
	// Possible values are `UNSPECIFIED`, `N1_HIGHCPU_8`, `N1_HIGHCPU_32`, `E2_HIGHCPU_8`, and `E2_HIGHCPU_32`.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// Requested verifiability options.
	// Possible values are `NOT_VERIFIED` and `VERIFIED`.
	RequestedVerifyOption pulumi.StringPtrInput `pulumi:"requestedVerifyOption"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management
	// Service crypto key. These values must be specified in the build's Secret. These variables
	// will be available to all build steps in this build.
	SecretEnvs pulumi.StringArrayInput `pulumi:"secretEnvs"`
	// Requested hash for SourceProvenance.
	// Each value may be one of `NONE`, `SHA256`, and `MD5`.
	SourceProvenanceHashes pulumi.StringArrayInput `pulumi:"sourceProvenanceHashes"`
	// Option to specify behavior when there is an error in the substitution checks.
	// NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
	// in the build configuration file.
	// Possible values are `MUST_MATCH` and `ALLOW_LOOSE`.
	SubstitutionOption pulumi.StringPtrInput `pulumi:"substitutionOption"`
	// Global list of volumes to mount for ALL build steps
	// Each volume is created as an empty volume prior to starting the build process.
	// Upon completion of the build, volumes and their contents are discarded. Global
	// volume names and paths cannot conflict with the volumes defined a build step.
	// Using a global volume in a build with only one step is not valid as it is indicative
	// of a build request with an incorrect configuration.
	// Structure is documented below.
	Volumes TriggerBuildOptionsVolumeArrayInput `pulumi:"volumes"`
	// Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
	// This field is experimental.
	WorkerPool pulumi.StringPtrInput `pulumi:"workerPool"`
}

func (TriggerBuildOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildOptions)(nil)).Elem()
}

func (i TriggerBuildOptionsArgs) ToTriggerBuildOptionsOutput() TriggerBuildOptionsOutput {
	return i.ToTriggerBuildOptionsOutputWithContext(context.Background())
}

func (i TriggerBuildOptionsArgs) ToTriggerBuildOptionsOutputWithContext(ctx context.Context) TriggerBuildOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildOptionsOutput)
}

func (i TriggerBuildOptionsArgs) ToTriggerBuildOptionsPtrOutput() TriggerBuildOptionsPtrOutput {
	return i.ToTriggerBuildOptionsPtrOutputWithContext(context.Background())
}

func (i TriggerBuildOptionsArgs) ToTriggerBuildOptionsPtrOutputWithContext(ctx context.Context) TriggerBuildOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildOptionsOutput).ToTriggerBuildOptionsPtrOutputWithContext(ctx)
}

// TriggerBuildOptionsPtrInput is an input type that accepts TriggerBuildOptionsArgs, TriggerBuildOptionsPtr and TriggerBuildOptionsPtrOutput values.
// You can construct a concrete instance of `TriggerBuildOptionsPtrInput` via:
//
//          TriggerBuildOptionsArgs{...}
//
//  or:
//
//          nil
type TriggerBuildOptionsPtrInput interface {
	pulumi.Input

	ToTriggerBuildOptionsPtrOutput() TriggerBuildOptionsPtrOutput
	ToTriggerBuildOptionsPtrOutputWithContext(context.Context) TriggerBuildOptionsPtrOutput
}

type triggerBuildOptionsPtrType TriggerBuildOptionsArgs

func TriggerBuildOptionsPtr(v *TriggerBuildOptionsArgs) TriggerBuildOptionsPtrInput {
	return (*triggerBuildOptionsPtrType)(v)
}

func (*triggerBuildOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuildOptions)(nil)).Elem()
}

func (i *triggerBuildOptionsPtrType) ToTriggerBuildOptionsPtrOutput() TriggerBuildOptionsPtrOutput {
	return i.ToTriggerBuildOptionsPtrOutputWithContext(context.Background())
}

func (i *triggerBuildOptionsPtrType) ToTriggerBuildOptionsPtrOutputWithContext(ctx context.Context) TriggerBuildOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildOptionsPtrOutput)
}

type TriggerBuildOptionsOutput struct{ *pulumi.OutputState }

func (TriggerBuildOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildOptions)(nil)).Elem()
}

func (o TriggerBuildOptionsOutput) ToTriggerBuildOptionsOutput() TriggerBuildOptionsOutput {
	return o
}

func (o TriggerBuildOptionsOutput) ToTriggerBuildOptionsOutputWithContext(ctx context.Context) TriggerBuildOptionsOutput {
	return o
}

func (o TriggerBuildOptionsOutput) ToTriggerBuildOptionsPtrOutput() TriggerBuildOptionsPtrOutput {
	return o.ToTriggerBuildOptionsPtrOutputWithContext(context.Background())
}

func (o TriggerBuildOptionsOutput) ToTriggerBuildOptionsPtrOutputWithContext(ctx context.Context) TriggerBuildOptionsPtrOutput {
	return o.ApplyT(func(v TriggerBuildOptions) *TriggerBuildOptions {
		return &v
	}).(TriggerBuildOptionsPtrOutput)
}

// Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
// some of the space will be used by the operating system and build utilities.
// Also note that this is the minimum disk size that will be allocated for the build --
// the build may run with a larger disk than requested. At present, the maximum disk size
// is 1000GB; builds that request more than the maximum are rejected with an error.
func (o TriggerBuildOptionsOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerBuildOptions) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Option to specify whether or not to apply bash style string operations to the substitutions.
// NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
func (o TriggerBuildOptionsOutput) DynamicSubstitutions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TriggerBuildOptions) *bool { return v.DynamicSubstitutions }).(pulumi.BoolPtrOutput)
}

// A list of global environment variable definitions that will exist for all build steps
// in this build. If a variable is defined in both globally and in a build step,
// the variable will use the build step value.
// The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o TriggerBuildOptionsOutput) Envs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildOptions) []string { return v.Envs }).(pulumi.StringArrayOutput)
}

// Option to define build log streaming behavior to Google Cloud Storage.
// Possible values are `STREAM_DEFAULT`, `STREAM_ON`, and `STREAM_OFF`.
func (o TriggerBuildOptionsOutput) LogStreamingOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildOptions) *string { return v.LogStreamingOption }).(pulumi.StringPtrOutput)
}

// Option to specify the logging mode, which determines if and where build logs are stored.
// Possible values are `LOGGING_UNSPECIFIED`, `LEGACY`, `GCS_ONLY`, `STACKDRIVER_ONLY`, and `NONE`.
func (o TriggerBuildOptionsOutput) Logging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildOptions) *string { return v.Logging }).(pulumi.StringPtrOutput)
}

// Compute Engine machine type on which to run the build.
// Possible values are `UNSPECIFIED`, `N1_HIGHCPU_8`, `N1_HIGHCPU_32`, `E2_HIGHCPU_8`, and `E2_HIGHCPU_32`.
func (o TriggerBuildOptionsOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildOptions) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Requested verifiability options.
// Possible values are `NOT_VERIFIED` and `VERIFIED`.
func (o TriggerBuildOptionsOutput) RequestedVerifyOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildOptions) *string { return v.RequestedVerifyOption }).(pulumi.StringPtrOutput)
}

// A list of global environment variables, which are encrypted using a Cloud Key Management
// Service crypto key. These values must be specified in the build's Secret. These variables
// will be available to all build steps in this build.
func (o TriggerBuildOptionsOutput) SecretEnvs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildOptions) []string { return v.SecretEnvs }).(pulumi.StringArrayOutput)
}

// Requested hash for SourceProvenance.
// Each value may be one of `NONE`, `SHA256`, and `MD5`.
func (o TriggerBuildOptionsOutput) SourceProvenanceHashes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildOptions) []string { return v.SourceProvenanceHashes }).(pulumi.StringArrayOutput)
}

// Option to specify behavior when there is an error in the substitution checks.
// NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
// in the build configuration file.
// Possible values are `MUST_MATCH` and `ALLOW_LOOSE`.
func (o TriggerBuildOptionsOutput) SubstitutionOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildOptions) *string { return v.SubstitutionOption }).(pulumi.StringPtrOutput)
}

// Global list of volumes to mount for ALL build steps
// Each volume is created as an empty volume prior to starting the build process.
// Upon completion of the build, volumes and their contents are discarded. Global
// volume names and paths cannot conflict with the volumes defined a build step.
// Using a global volume in a build with only one step is not valid as it is indicative
// of a build request with an incorrect configuration.
// Structure is documented below.
func (o TriggerBuildOptionsOutput) Volumes() TriggerBuildOptionsVolumeArrayOutput {
	return o.ApplyT(func(v TriggerBuildOptions) []TriggerBuildOptionsVolume { return v.Volumes }).(TriggerBuildOptionsVolumeArrayOutput)
}

// Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
// This field is experimental.
func (o TriggerBuildOptionsOutput) WorkerPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildOptions) *string { return v.WorkerPool }).(pulumi.StringPtrOutput)
}

type TriggerBuildOptionsPtrOutput struct{ *pulumi.OutputState }

func (TriggerBuildOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuildOptions)(nil)).Elem()
}

func (o TriggerBuildOptionsPtrOutput) ToTriggerBuildOptionsPtrOutput() TriggerBuildOptionsPtrOutput {
	return o
}

func (o TriggerBuildOptionsPtrOutput) ToTriggerBuildOptionsPtrOutputWithContext(ctx context.Context) TriggerBuildOptionsPtrOutput {
	return o
}

func (o TriggerBuildOptionsPtrOutput) Elem() TriggerBuildOptionsOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) TriggerBuildOptions { return *v }).(TriggerBuildOptionsOutput)
}

// Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
// some of the space will be used by the operating system and build utilities.
// Also note that this is the minimum disk size that will be allocated for the build --
// the build may run with a larger disk than requested. At present, the maximum disk size
// is 1000GB; builds that request more than the maximum are rejected with an error.
func (o TriggerBuildOptionsPtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Option to specify whether or not to apply bash style string operations to the substitutions.
// NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
func (o TriggerBuildOptionsPtrOutput) DynamicSubstitutions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DynamicSubstitutions
	}).(pulumi.BoolPtrOutput)
}

// A list of global environment variable definitions that will exist for all build steps
// in this build. If a variable is defined in both globally and in a build step,
// the variable will use the build step value.
// The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o TriggerBuildOptionsPtrOutput) Envs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) []string {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(pulumi.StringArrayOutput)
}

// Option to define build log streaming behavior to Google Cloud Storage.
// Possible values are `STREAM_DEFAULT`, `STREAM_ON`, and `STREAM_OFF`.
func (o TriggerBuildOptionsPtrOutput) LogStreamingOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.LogStreamingOption
	}).(pulumi.StringPtrOutput)
}

// Option to specify the logging mode, which determines if and where build logs are stored.
// Possible values are `LOGGING_UNSPECIFIED`, `LEGACY`, `GCS_ONLY`, `STACKDRIVER_ONLY`, and `NONE`.
func (o TriggerBuildOptionsPtrOutput) Logging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.Logging
	}).(pulumi.StringPtrOutput)
}

// Compute Engine machine type on which to run the build.
// Possible values are `UNSPECIFIED`, `N1_HIGHCPU_8`, `N1_HIGHCPU_32`, `E2_HIGHCPU_8`, and `E2_HIGHCPU_32`.
func (o TriggerBuildOptionsPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Requested verifiability options.
// Possible values are `NOT_VERIFIED` and `VERIFIED`.
func (o TriggerBuildOptionsPtrOutput) RequestedVerifyOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.RequestedVerifyOption
	}).(pulumi.StringPtrOutput)
}

// A list of global environment variables, which are encrypted using a Cloud Key Management
// Service crypto key. These values must be specified in the build's Secret. These variables
// will be available to all build steps in this build.
func (o TriggerBuildOptionsPtrOutput) SecretEnvs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) []string {
		if v == nil {
			return nil
		}
		return v.SecretEnvs
	}).(pulumi.StringArrayOutput)
}

// Requested hash for SourceProvenance.
// Each value may be one of `NONE`, `SHA256`, and `MD5`.
func (o TriggerBuildOptionsPtrOutput) SourceProvenanceHashes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) []string {
		if v == nil {
			return nil
		}
		return v.SourceProvenanceHashes
	}).(pulumi.StringArrayOutput)
}

// Option to specify behavior when there is an error in the substitution checks.
// NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
// in the build configuration file.
// Possible values are `MUST_MATCH` and `ALLOW_LOOSE`.
func (o TriggerBuildOptionsPtrOutput) SubstitutionOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.SubstitutionOption
	}).(pulumi.StringPtrOutput)
}

// Global list of volumes to mount for ALL build steps
// Each volume is created as an empty volume prior to starting the build process.
// Upon completion of the build, volumes and their contents are discarded. Global
// volume names and paths cannot conflict with the volumes defined a build step.
// Using a global volume in a build with only one step is not valid as it is indicative
// of a build request with an incorrect configuration.
// Structure is documented below.
func (o TriggerBuildOptionsPtrOutput) Volumes() TriggerBuildOptionsVolumeArrayOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) []TriggerBuildOptionsVolume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(TriggerBuildOptionsVolumeArrayOutput)
}

// Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
// This field is experimental.
func (o TriggerBuildOptionsPtrOutput) WorkerPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.WorkerPool
	}).(pulumi.StringPtrOutput)
}

type TriggerBuildOptionsVolume struct {
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for Docker volumes.
	// Each named volume must be used by at least two build steps.
	Name *string `pulumi:"name"`
	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on the same
	// build step or with certain reserved volume paths.
	Path *string `pulumi:"path"`
}

// TriggerBuildOptionsVolumeInput is an input type that accepts TriggerBuildOptionsVolumeArgs and TriggerBuildOptionsVolumeOutput values.
// You can construct a concrete instance of `TriggerBuildOptionsVolumeInput` via:
//
//          TriggerBuildOptionsVolumeArgs{...}
type TriggerBuildOptionsVolumeInput interface {
	pulumi.Input

	ToTriggerBuildOptionsVolumeOutput() TriggerBuildOptionsVolumeOutput
	ToTriggerBuildOptionsVolumeOutputWithContext(context.Context) TriggerBuildOptionsVolumeOutput
}

type TriggerBuildOptionsVolumeArgs struct {
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for Docker volumes.
	// Each named volume must be used by at least two build steps.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on the same
	// build step or with certain reserved volume paths.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (TriggerBuildOptionsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildOptionsVolume)(nil)).Elem()
}

func (i TriggerBuildOptionsVolumeArgs) ToTriggerBuildOptionsVolumeOutput() TriggerBuildOptionsVolumeOutput {
	return i.ToTriggerBuildOptionsVolumeOutputWithContext(context.Background())
}

func (i TriggerBuildOptionsVolumeArgs) ToTriggerBuildOptionsVolumeOutputWithContext(ctx context.Context) TriggerBuildOptionsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildOptionsVolumeOutput)
}

// TriggerBuildOptionsVolumeArrayInput is an input type that accepts TriggerBuildOptionsVolumeArray and TriggerBuildOptionsVolumeArrayOutput values.
// You can construct a concrete instance of `TriggerBuildOptionsVolumeArrayInput` via:
//
//          TriggerBuildOptionsVolumeArray{ TriggerBuildOptionsVolumeArgs{...} }
type TriggerBuildOptionsVolumeArrayInput interface {
	pulumi.Input

	ToTriggerBuildOptionsVolumeArrayOutput() TriggerBuildOptionsVolumeArrayOutput
	ToTriggerBuildOptionsVolumeArrayOutputWithContext(context.Context) TriggerBuildOptionsVolumeArrayOutput
}

type TriggerBuildOptionsVolumeArray []TriggerBuildOptionsVolumeInput

func (TriggerBuildOptionsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildOptionsVolume)(nil)).Elem()
}

func (i TriggerBuildOptionsVolumeArray) ToTriggerBuildOptionsVolumeArrayOutput() TriggerBuildOptionsVolumeArrayOutput {
	return i.ToTriggerBuildOptionsVolumeArrayOutputWithContext(context.Background())
}

func (i TriggerBuildOptionsVolumeArray) ToTriggerBuildOptionsVolumeArrayOutputWithContext(ctx context.Context) TriggerBuildOptionsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildOptionsVolumeArrayOutput)
}

type TriggerBuildOptionsVolumeOutput struct{ *pulumi.OutputState }

func (TriggerBuildOptionsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildOptionsVolume)(nil)).Elem()
}

func (o TriggerBuildOptionsVolumeOutput) ToTriggerBuildOptionsVolumeOutput() TriggerBuildOptionsVolumeOutput {
	return o
}

func (o TriggerBuildOptionsVolumeOutput) ToTriggerBuildOptionsVolumeOutputWithContext(ctx context.Context) TriggerBuildOptionsVolumeOutput {
	return o
}

// Name of the volume to mount.
// Volume names must be unique per build step and must be valid names for Docker volumes.
// Each named volume must be used by at least two build steps.
func (o TriggerBuildOptionsVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildOptionsVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path at which to mount the volume.
// Paths must be absolute and cannot conflict with other volume paths on the same
// build step or with certain reserved volume paths.
func (o TriggerBuildOptionsVolumeOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildOptionsVolume) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type TriggerBuildOptionsVolumeArrayOutput struct{ *pulumi.OutputState }

func (TriggerBuildOptionsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildOptionsVolume)(nil)).Elem()
}

func (o TriggerBuildOptionsVolumeArrayOutput) ToTriggerBuildOptionsVolumeArrayOutput() TriggerBuildOptionsVolumeArrayOutput {
	return o
}

func (o TriggerBuildOptionsVolumeArrayOutput) ToTriggerBuildOptionsVolumeArrayOutputWithContext(ctx context.Context) TriggerBuildOptionsVolumeArrayOutput {
	return o
}

func (o TriggerBuildOptionsVolumeArrayOutput) Index(i pulumi.IntInput) TriggerBuildOptionsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerBuildOptionsVolume {
		return vs[0].([]TriggerBuildOptionsVolume)[vs[1].(int)]
	}).(TriggerBuildOptionsVolumeOutput)
}

type TriggerBuildSecret struct {
	// Cloud KMS key name to use to decrypt these envs.
	KmsKeyName string `pulumi:"kmsKeyName"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management
	// Service crypto key. These values must be specified in the build's Secret. These variables
	// will be available to all build steps in this build.
	SecretEnv map[string]string `pulumi:"secretEnv"`
}

// TriggerBuildSecretInput is an input type that accepts TriggerBuildSecretArgs and TriggerBuildSecretOutput values.
// You can construct a concrete instance of `TriggerBuildSecretInput` via:
//
//          TriggerBuildSecretArgs{...}
type TriggerBuildSecretInput interface {
	pulumi.Input

	ToTriggerBuildSecretOutput() TriggerBuildSecretOutput
	ToTriggerBuildSecretOutputWithContext(context.Context) TriggerBuildSecretOutput
}

type TriggerBuildSecretArgs struct {
	// Cloud KMS key name to use to decrypt these envs.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management
	// Service crypto key. These values must be specified in the build's Secret. These variables
	// will be available to all build steps in this build.
	SecretEnv pulumi.StringMapInput `pulumi:"secretEnv"`
}

func (TriggerBuildSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildSecret)(nil)).Elem()
}

func (i TriggerBuildSecretArgs) ToTriggerBuildSecretOutput() TriggerBuildSecretOutput {
	return i.ToTriggerBuildSecretOutputWithContext(context.Background())
}

func (i TriggerBuildSecretArgs) ToTriggerBuildSecretOutputWithContext(ctx context.Context) TriggerBuildSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildSecretOutput)
}

// TriggerBuildSecretArrayInput is an input type that accepts TriggerBuildSecretArray and TriggerBuildSecretArrayOutput values.
// You can construct a concrete instance of `TriggerBuildSecretArrayInput` via:
//
//          TriggerBuildSecretArray{ TriggerBuildSecretArgs{...} }
type TriggerBuildSecretArrayInput interface {
	pulumi.Input

	ToTriggerBuildSecretArrayOutput() TriggerBuildSecretArrayOutput
	ToTriggerBuildSecretArrayOutputWithContext(context.Context) TriggerBuildSecretArrayOutput
}

type TriggerBuildSecretArray []TriggerBuildSecretInput

func (TriggerBuildSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildSecret)(nil)).Elem()
}

func (i TriggerBuildSecretArray) ToTriggerBuildSecretArrayOutput() TriggerBuildSecretArrayOutput {
	return i.ToTriggerBuildSecretArrayOutputWithContext(context.Background())
}

func (i TriggerBuildSecretArray) ToTriggerBuildSecretArrayOutputWithContext(ctx context.Context) TriggerBuildSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildSecretArrayOutput)
}

type TriggerBuildSecretOutput struct{ *pulumi.OutputState }

func (TriggerBuildSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildSecret)(nil)).Elem()
}

func (o TriggerBuildSecretOutput) ToTriggerBuildSecretOutput() TriggerBuildSecretOutput {
	return o
}

func (o TriggerBuildSecretOutput) ToTriggerBuildSecretOutputWithContext(ctx context.Context) TriggerBuildSecretOutput {
	return o
}

// Cloud KMS key name to use to decrypt these envs.
func (o TriggerBuildSecretOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerBuildSecret) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// A list of global environment variables, which are encrypted using a Cloud Key Management
// Service crypto key. These values must be specified in the build's Secret. These variables
// will be available to all build steps in this build.
func (o TriggerBuildSecretOutput) SecretEnv() pulumi.StringMapOutput {
	return o.ApplyT(func(v TriggerBuildSecret) map[string]string { return v.SecretEnv }).(pulumi.StringMapOutput)
}

type TriggerBuildSecretArrayOutput struct{ *pulumi.OutputState }

func (TriggerBuildSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildSecret)(nil)).Elem()
}

func (o TriggerBuildSecretArrayOutput) ToTriggerBuildSecretArrayOutput() TriggerBuildSecretArrayOutput {
	return o
}

func (o TriggerBuildSecretArrayOutput) ToTriggerBuildSecretArrayOutputWithContext(ctx context.Context) TriggerBuildSecretArrayOutput {
	return o
}

func (o TriggerBuildSecretArrayOutput) Index(i pulumi.IntInput) TriggerBuildSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerBuildSecret {
		return vs[0].([]TriggerBuildSecret)[vs[1].(int)]
	}).(TriggerBuildSecretOutput)
}

type TriggerBuildSource struct {
	// Location of the source in a Google Cloud Source Repository.
	// Structure is documented below.
	RepoSource *TriggerBuildSourceRepoSource `pulumi:"repoSource"`
	// Location of the source in an archive file in Google Cloud Storage.
	// Structure is documented below.
	StorageSource *TriggerBuildSourceStorageSource `pulumi:"storageSource"`
}

// TriggerBuildSourceInput is an input type that accepts TriggerBuildSourceArgs and TriggerBuildSourceOutput values.
// You can construct a concrete instance of `TriggerBuildSourceInput` via:
//
//          TriggerBuildSourceArgs{...}
type TriggerBuildSourceInput interface {
	pulumi.Input

	ToTriggerBuildSourceOutput() TriggerBuildSourceOutput
	ToTriggerBuildSourceOutputWithContext(context.Context) TriggerBuildSourceOutput
}

type TriggerBuildSourceArgs struct {
	// Location of the source in a Google Cloud Source Repository.
	// Structure is documented below.
	RepoSource TriggerBuildSourceRepoSourcePtrInput `pulumi:"repoSource"`
	// Location of the source in an archive file in Google Cloud Storage.
	// Structure is documented below.
	StorageSource TriggerBuildSourceStorageSourcePtrInput `pulumi:"storageSource"`
}

func (TriggerBuildSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildSource)(nil)).Elem()
}

func (i TriggerBuildSourceArgs) ToTriggerBuildSourceOutput() TriggerBuildSourceOutput {
	return i.ToTriggerBuildSourceOutputWithContext(context.Background())
}

func (i TriggerBuildSourceArgs) ToTriggerBuildSourceOutputWithContext(ctx context.Context) TriggerBuildSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildSourceOutput)
}

func (i TriggerBuildSourceArgs) ToTriggerBuildSourcePtrOutput() TriggerBuildSourcePtrOutput {
	return i.ToTriggerBuildSourcePtrOutputWithContext(context.Background())
}

func (i TriggerBuildSourceArgs) ToTriggerBuildSourcePtrOutputWithContext(ctx context.Context) TriggerBuildSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildSourceOutput).ToTriggerBuildSourcePtrOutputWithContext(ctx)
}

// TriggerBuildSourcePtrInput is an input type that accepts TriggerBuildSourceArgs, TriggerBuildSourcePtr and TriggerBuildSourcePtrOutput values.
// You can construct a concrete instance of `TriggerBuildSourcePtrInput` via:
//
//          TriggerBuildSourceArgs{...}
//
//  or:
//
//          nil
type TriggerBuildSourcePtrInput interface {
	pulumi.Input

	ToTriggerBuildSourcePtrOutput() TriggerBuildSourcePtrOutput
	ToTriggerBuildSourcePtrOutputWithContext(context.Context) TriggerBuildSourcePtrOutput
}

type triggerBuildSourcePtrType TriggerBuildSourceArgs

func TriggerBuildSourcePtr(v *TriggerBuildSourceArgs) TriggerBuildSourcePtrInput {
	return (*triggerBuildSourcePtrType)(v)
}

func (*triggerBuildSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuildSource)(nil)).Elem()
}

func (i *triggerBuildSourcePtrType) ToTriggerBuildSourcePtrOutput() TriggerBuildSourcePtrOutput {
	return i.ToTriggerBuildSourcePtrOutputWithContext(context.Background())
}

func (i *triggerBuildSourcePtrType) ToTriggerBuildSourcePtrOutputWithContext(ctx context.Context) TriggerBuildSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildSourcePtrOutput)
}

type TriggerBuildSourceOutput struct{ *pulumi.OutputState }

func (TriggerBuildSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildSource)(nil)).Elem()
}

func (o TriggerBuildSourceOutput) ToTriggerBuildSourceOutput() TriggerBuildSourceOutput {
	return o
}

func (o TriggerBuildSourceOutput) ToTriggerBuildSourceOutputWithContext(ctx context.Context) TriggerBuildSourceOutput {
	return o
}

func (o TriggerBuildSourceOutput) ToTriggerBuildSourcePtrOutput() TriggerBuildSourcePtrOutput {
	return o.ToTriggerBuildSourcePtrOutputWithContext(context.Background())
}

func (o TriggerBuildSourceOutput) ToTriggerBuildSourcePtrOutputWithContext(ctx context.Context) TriggerBuildSourcePtrOutput {
	return o.ApplyT(func(v TriggerBuildSource) *TriggerBuildSource {
		return &v
	}).(TriggerBuildSourcePtrOutput)
}

// Location of the source in a Google Cloud Source Repository.
// Structure is documented below.
func (o TriggerBuildSourceOutput) RepoSource() TriggerBuildSourceRepoSourcePtrOutput {
	return o.ApplyT(func(v TriggerBuildSource) *TriggerBuildSourceRepoSource { return v.RepoSource }).(TriggerBuildSourceRepoSourcePtrOutput)
}

// Location of the source in an archive file in Google Cloud Storage.
// Structure is documented below.
func (o TriggerBuildSourceOutput) StorageSource() TriggerBuildSourceStorageSourcePtrOutput {
	return o.ApplyT(func(v TriggerBuildSource) *TriggerBuildSourceStorageSource { return v.StorageSource }).(TriggerBuildSourceStorageSourcePtrOutput)
}

type TriggerBuildSourcePtrOutput struct{ *pulumi.OutputState }

func (TriggerBuildSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuildSource)(nil)).Elem()
}

func (o TriggerBuildSourcePtrOutput) ToTriggerBuildSourcePtrOutput() TriggerBuildSourcePtrOutput {
	return o
}

func (o TriggerBuildSourcePtrOutput) ToTriggerBuildSourcePtrOutputWithContext(ctx context.Context) TriggerBuildSourcePtrOutput {
	return o
}

func (o TriggerBuildSourcePtrOutput) Elem() TriggerBuildSourceOutput {
	return o.ApplyT(func(v *TriggerBuildSource) TriggerBuildSource { return *v }).(TriggerBuildSourceOutput)
}

// Location of the source in a Google Cloud Source Repository.
// Structure is documented below.
func (o TriggerBuildSourcePtrOutput) RepoSource() TriggerBuildSourceRepoSourcePtrOutput {
	return o.ApplyT(func(v *TriggerBuildSource) *TriggerBuildSourceRepoSource {
		if v == nil {
			return nil
		}
		return v.RepoSource
	}).(TriggerBuildSourceRepoSourcePtrOutput)
}

// Location of the source in an archive file in Google Cloud Storage.
// Structure is documented below.
func (o TriggerBuildSourcePtrOutput) StorageSource() TriggerBuildSourceStorageSourcePtrOutput {
	return o.ApplyT(func(v *TriggerBuildSource) *TriggerBuildSourceStorageSource {
		if v == nil {
			return nil
		}
		return v.StorageSource
	}).(TriggerBuildSourceStorageSourcePtrOutput)
}

type TriggerBuildSourceRepoSource struct {
	// Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
	// described at https://github.com/google/re2/wiki/Syntax
	BranchName *string `pulumi:"branchName"`
	// Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	CommitSha *string `pulumi:"commitSha"`
	// Working directory to use when running this step's container.
	// If this value is a relative path, it is relative to the build's working
	// directory. If this value is absolute, it may be outside the build's working
	// directory, in which case the contents of the path may not be persisted
	// across build step executions, unless a `volume` for that path is specified.
	// If the build specifies a `RepoSource` with `dir` and a step with a
	// `dir`,
	// which specifies an absolute path, the `RepoSource` `dir` is ignored
	// for the step's execution.
	Dir *string `pulumi:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `pulumi:"invertRegex"`
	// ID of the project that owns the Cloud Source Repository.
	// If omitted, the project ID requesting the build is assumed.
	ProjectId *string `pulumi:"projectId"`
	// Name of the Cloud Source Repository.
	RepoName string `pulumi:"repoName"`
	// Substitutions to use in a triggered build. Should only be used with triggers.run
	Substitutions map[string]string `pulumi:"substitutions"`
	// Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
	// described at https://github.com/google/re2/wiki/Syntax
	TagName *string `pulumi:"tagName"`
}

// TriggerBuildSourceRepoSourceInput is an input type that accepts TriggerBuildSourceRepoSourceArgs and TriggerBuildSourceRepoSourceOutput values.
// You can construct a concrete instance of `TriggerBuildSourceRepoSourceInput` via:
//
//          TriggerBuildSourceRepoSourceArgs{...}
type TriggerBuildSourceRepoSourceInput interface {
	pulumi.Input

	ToTriggerBuildSourceRepoSourceOutput() TriggerBuildSourceRepoSourceOutput
	ToTriggerBuildSourceRepoSourceOutputWithContext(context.Context) TriggerBuildSourceRepoSourceOutput
}

type TriggerBuildSourceRepoSourceArgs struct {
	// Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
	// described at https://github.com/google/re2/wiki/Syntax
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	// Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	CommitSha pulumi.StringPtrInput `pulumi:"commitSha"`
	// Working directory to use when running this step's container.
	// If this value is a relative path, it is relative to the build's working
	// directory. If this value is absolute, it may be outside the build's working
	// directory, in which case the contents of the path may not be persisted
	// across build step executions, unless a `volume` for that path is specified.
	// If the build specifies a `RepoSource` with `dir` and a step with a
	// `dir`,
	// which specifies an absolute path, the `RepoSource` `dir` is ignored
	// for the step's execution.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex pulumi.BoolPtrInput `pulumi:"invertRegex"`
	// ID of the project that owns the Cloud Source Repository.
	// If omitted, the project ID requesting the build is assumed.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Name of the Cloud Source Repository.
	RepoName pulumi.StringInput `pulumi:"repoName"`
	// Substitutions to use in a triggered build. Should only be used with triggers.run
	Substitutions pulumi.StringMapInput `pulumi:"substitutions"`
	// Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
	// described at https://github.com/google/re2/wiki/Syntax
	TagName pulumi.StringPtrInput `pulumi:"tagName"`
}

func (TriggerBuildSourceRepoSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildSourceRepoSource)(nil)).Elem()
}

func (i TriggerBuildSourceRepoSourceArgs) ToTriggerBuildSourceRepoSourceOutput() TriggerBuildSourceRepoSourceOutput {
	return i.ToTriggerBuildSourceRepoSourceOutputWithContext(context.Background())
}

func (i TriggerBuildSourceRepoSourceArgs) ToTriggerBuildSourceRepoSourceOutputWithContext(ctx context.Context) TriggerBuildSourceRepoSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildSourceRepoSourceOutput)
}

func (i TriggerBuildSourceRepoSourceArgs) ToTriggerBuildSourceRepoSourcePtrOutput() TriggerBuildSourceRepoSourcePtrOutput {
	return i.ToTriggerBuildSourceRepoSourcePtrOutputWithContext(context.Background())
}

func (i TriggerBuildSourceRepoSourceArgs) ToTriggerBuildSourceRepoSourcePtrOutputWithContext(ctx context.Context) TriggerBuildSourceRepoSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildSourceRepoSourceOutput).ToTriggerBuildSourceRepoSourcePtrOutputWithContext(ctx)
}

// TriggerBuildSourceRepoSourcePtrInput is an input type that accepts TriggerBuildSourceRepoSourceArgs, TriggerBuildSourceRepoSourcePtr and TriggerBuildSourceRepoSourcePtrOutput values.
// You can construct a concrete instance of `TriggerBuildSourceRepoSourcePtrInput` via:
//
//          TriggerBuildSourceRepoSourceArgs{...}
//
//  or:
//
//          nil
type TriggerBuildSourceRepoSourcePtrInput interface {
	pulumi.Input

	ToTriggerBuildSourceRepoSourcePtrOutput() TriggerBuildSourceRepoSourcePtrOutput
	ToTriggerBuildSourceRepoSourcePtrOutputWithContext(context.Context) TriggerBuildSourceRepoSourcePtrOutput
}

type triggerBuildSourceRepoSourcePtrType TriggerBuildSourceRepoSourceArgs

func TriggerBuildSourceRepoSourcePtr(v *TriggerBuildSourceRepoSourceArgs) TriggerBuildSourceRepoSourcePtrInput {
	return (*triggerBuildSourceRepoSourcePtrType)(v)
}

func (*triggerBuildSourceRepoSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuildSourceRepoSource)(nil)).Elem()
}

func (i *triggerBuildSourceRepoSourcePtrType) ToTriggerBuildSourceRepoSourcePtrOutput() TriggerBuildSourceRepoSourcePtrOutput {
	return i.ToTriggerBuildSourceRepoSourcePtrOutputWithContext(context.Background())
}

func (i *triggerBuildSourceRepoSourcePtrType) ToTriggerBuildSourceRepoSourcePtrOutputWithContext(ctx context.Context) TriggerBuildSourceRepoSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildSourceRepoSourcePtrOutput)
}

type TriggerBuildSourceRepoSourceOutput struct{ *pulumi.OutputState }

func (TriggerBuildSourceRepoSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildSourceRepoSource)(nil)).Elem()
}

func (o TriggerBuildSourceRepoSourceOutput) ToTriggerBuildSourceRepoSourceOutput() TriggerBuildSourceRepoSourceOutput {
	return o
}

func (o TriggerBuildSourceRepoSourceOutput) ToTriggerBuildSourceRepoSourceOutputWithContext(ctx context.Context) TriggerBuildSourceRepoSourceOutput {
	return o
}

func (o TriggerBuildSourceRepoSourceOutput) ToTriggerBuildSourceRepoSourcePtrOutput() TriggerBuildSourceRepoSourcePtrOutput {
	return o.ToTriggerBuildSourceRepoSourcePtrOutputWithContext(context.Background())
}

func (o TriggerBuildSourceRepoSourceOutput) ToTriggerBuildSourceRepoSourcePtrOutputWithContext(ctx context.Context) TriggerBuildSourceRepoSourcePtrOutput {
	return o.ApplyT(func(v TriggerBuildSourceRepoSource) *TriggerBuildSourceRepoSource {
		return &v
	}).(TriggerBuildSourceRepoSourcePtrOutput)
}

// Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
// described at https://github.com/google/re2/wiki/Syntax
func (o TriggerBuildSourceRepoSourceOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildSourceRepoSource) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
func (o TriggerBuildSourceRepoSourceOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildSourceRepoSource) *string { return v.CommitSha }).(pulumi.StringPtrOutput)
}

// Working directory to use when running this step's container.
// If this value is a relative path, it is relative to the build's working
// directory. If this value is absolute, it may be outside the build's working
// directory, in which case the contents of the path may not be persisted
// across build step executions, unless a `volume` for that path is specified.
// If the build specifies a `RepoSource` with `dir` and a step with a
// `dir`,
// which specifies an absolute path, the `RepoSource` `dir` is ignored
// for the step's execution.
func (o TriggerBuildSourceRepoSourceOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildSourceRepoSource) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o TriggerBuildSourceRepoSourceOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TriggerBuildSourceRepoSource) *bool { return v.InvertRegex }).(pulumi.BoolPtrOutput)
}

// ID of the project that owns the Cloud Source Repository.
// If omitted, the project ID requesting the build is assumed.
func (o TriggerBuildSourceRepoSourceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildSourceRepoSource) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Name of the Cloud Source Repository.
func (o TriggerBuildSourceRepoSourceOutput) RepoName() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerBuildSourceRepoSource) string { return v.RepoName }).(pulumi.StringOutput)
}

// Substitutions to use in a triggered build. Should only be used with triggers.run
func (o TriggerBuildSourceRepoSourceOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v TriggerBuildSourceRepoSource) map[string]string { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
// described at https://github.com/google/re2/wiki/Syntax
func (o TriggerBuildSourceRepoSourceOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildSourceRepoSource) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

type TriggerBuildSourceRepoSourcePtrOutput struct{ *pulumi.OutputState }

func (TriggerBuildSourceRepoSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuildSourceRepoSource)(nil)).Elem()
}

func (o TriggerBuildSourceRepoSourcePtrOutput) ToTriggerBuildSourceRepoSourcePtrOutput() TriggerBuildSourceRepoSourcePtrOutput {
	return o
}

func (o TriggerBuildSourceRepoSourcePtrOutput) ToTriggerBuildSourceRepoSourcePtrOutputWithContext(ctx context.Context) TriggerBuildSourceRepoSourcePtrOutput {
	return o
}

func (o TriggerBuildSourceRepoSourcePtrOutput) Elem() TriggerBuildSourceRepoSourceOutput {
	return o.ApplyT(func(v *TriggerBuildSourceRepoSource) TriggerBuildSourceRepoSource { return *v }).(TriggerBuildSourceRepoSourceOutput)
}

// Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
// described at https://github.com/google/re2/wiki/Syntax
func (o TriggerBuildSourceRepoSourcePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildSourceRepoSource) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
func (o TriggerBuildSourceRepoSourcePtrOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildSourceRepoSource) *string {
		if v == nil {
			return nil
		}
		return v.CommitSha
	}).(pulumi.StringPtrOutput)
}

// Working directory to use when running this step's container.
// If this value is a relative path, it is relative to the build's working
// directory. If this value is absolute, it may be outside the build's working
// directory, in which case the contents of the path may not be persisted
// across build step executions, unless a `volume` for that path is specified.
// If the build specifies a `RepoSource` with `dir` and a step with a
// `dir`,
// which specifies an absolute path, the `RepoSource` `dir` is ignored
// for the step's execution.
func (o TriggerBuildSourceRepoSourcePtrOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildSourceRepoSource) *string {
		if v == nil {
			return nil
		}
		return v.Dir
	}).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o TriggerBuildSourceRepoSourcePtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TriggerBuildSourceRepoSource) *bool {
		if v == nil {
			return nil
		}
		return v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

// ID of the project that owns the Cloud Source Repository.
// If omitted, the project ID requesting the build is assumed.
func (o TriggerBuildSourceRepoSourcePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildSourceRepoSource) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Name of the Cloud Source Repository.
func (o TriggerBuildSourceRepoSourcePtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildSourceRepoSource) *string {
		if v == nil {
			return nil
		}
		return &v.RepoName
	}).(pulumi.StringPtrOutput)
}

// Substitutions to use in a triggered build. Should only be used with triggers.run
func (o TriggerBuildSourceRepoSourcePtrOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TriggerBuildSourceRepoSource) map[string]string {
		if v == nil {
			return nil
		}
		return v.Substitutions
	}).(pulumi.StringMapOutput)
}

// Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
// described at https://github.com/google/re2/wiki/Syntax
func (o TriggerBuildSourceRepoSourcePtrOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildSourceRepoSource) *string {
		if v == nil {
			return nil
		}
		return v.TagName
	}).(pulumi.StringPtrOutput)
}

type TriggerBuildSourceStorageSource struct {
	// Google Cloud Storage bucket containing the source.
	Bucket string `pulumi:"bucket"`
	// Google Cloud Storage generation for the object.
	// If the generation is omitted, the latest generation will be used
	Generation *string `pulumi:"generation"`
	// Google Cloud Storage object containing the source.
	// This object must be a gzipped archive file (.tar.gz) containing source to build.
	Object string `pulumi:"object"`
}

// TriggerBuildSourceStorageSourceInput is an input type that accepts TriggerBuildSourceStorageSourceArgs and TriggerBuildSourceStorageSourceOutput values.
// You can construct a concrete instance of `TriggerBuildSourceStorageSourceInput` via:
//
//          TriggerBuildSourceStorageSourceArgs{...}
type TriggerBuildSourceStorageSourceInput interface {
	pulumi.Input

	ToTriggerBuildSourceStorageSourceOutput() TriggerBuildSourceStorageSourceOutput
	ToTriggerBuildSourceStorageSourceOutputWithContext(context.Context) TriggerBuildSourceStorageSourceOutput
}

type TriggerBuildSourceStorageSourceArgs struct {
	// Google Cloud Storage bucket containing the source.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Google Cloud Storage generation for the object.
	// If the generation is omitted, the latest generation will be used
	Generation pulumi.StringPtrInput `pulumi:"generation"`
	// Google Cloud Storage object containing the source.
	// This object must be a gzipped archive file (.tar.gz) containing source to build.
	Object pulumi.StringInput `pulumi:"object"`
}

func (TriggerBuildSourceStorageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildSourceStorageSource)(nil)).Elem()
}

func (i TriggerBuildSourceStorageSourceArgs) ToTriggerBuildSourceStorageSourceOutput() TriggerBuildSourceStorageSourceOutput {
	return i.ToTriggerBuildSourceStorageSourceOutputWithContext(context.Background())
}

func (i TriggerBuildSourceStorageSourceArgs) ToTriggerBuildSourceStorageSourceOutputWithContext(ctx context.Context) TriggerBuildSourceStorageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildSourceStorageSourceOutput)
}

func (i TriggerBuildSourceStorageSourceArgs) ToTriggerBuildSourceStorageSourcePtrOutput() TriggerBuildSourceStorageSourcePtrOutput {
	return i.ToTriggerBuildSourceStorageSourcePtrOutputWithContext(context.Background())
}

func (i TriggerBuildSourceStorageSourceArgs) ToTriggerBuildSourceStorageSourcePtrOutputWithContext(ctx context.Context) TriggerBuildSourceStorageSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildSourceStorageSourceOutput).ToTriggerBuildSourceStorageSourcePtrOutputWithContext(ctx)
}

// TriggerBuildSourceStorageSourcePtrInput is an input type that accepts TriggerBuildSourceStorageSourceArgs, TriggerBuildSourceStorageSourcePtr and TriggerBuildSourceStorageSourcePtrOutput values.
// You can construct a concrete instance of `TriggerBuildSourceStorageSourcePtrInput` via:
//
//          TriggerBuildSourceStorageSourceArgs{...}
//
//  or:
//
//          nil
type TriggerBuildSourceStorageSourcePtrInput interface {
	pulumi.Input

	ToTriggerBuildSourceStorageSourcePtrOutput() TriggerBuildSourceStorageSourcePtrOutput
	ToTriggerBuildSourceStorageSourcePtrOutputWithContext(context.Context) TriggerBuildSourceStorageSourcePtrOutput
}

type triggerBuildSourceStorageSourcePtrType TriggerBuildSourceStorageSourceArgs

func TriggerBuildSourceStorageSourcePtr(v *TriggerBuildSourceStorageSourceArgs) TriggerBuildSourceStorageSourcePtrInput {
	return (*triggerBuildSourceStorageSourcePtrType)(v)
}

func (*triggerBuildSourceStorageSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuildSourceStorageSource)(nil)).Elem()
}

func (i *triggerBuildSourceStorageSourcePtrType) ToTriggerBuildSourceStorageSourcePtrOutput() TriggerBuildSourceStorageSourcePtrOutput {
	return i.ToTriggerBuildSourceStorageSourcePtrOutputWithContext(context.Background())
}

func (i *triggerBuildSourceStorageSourcePtrType) ToTriggerBuildSourceStorageSourcePtrOutputWithContext(ctx context.Context) TriggerBuildSourceStorageSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildSourceStorageSourcePtrOutput)
}

type TriggerBuildSourceStorageSourceOutput struct{ *pulumi.OutputState }

func (TriggerBuildSourceStorageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildSourceStorageSource)(nil)).Elem()
}

func (o TriggerBuildSourceStorageSourceOutput) ToTriggerBuildSourceStorageSourceOutput() TriggerBuildSourceStorageSourceOutput {
	return o
}

func (o TriggerBuildSourceStorageSourceOutput) ToTriggerBuildSourceStorageSourceOutputWithContext(ctx context.Context) TriggerBuildSourceStorageSourceOutput {
	return o
}

func (o TriggerBuildSourceStorageSourceOutput) ToTriggerBuildSourceStorageSourcePtrOutput() TriggerBuildSourceStorageSourcePtrOutput {
	return o.ToTriggerBuildSourceStorageSourcePtrOutputWithContext(context.Background())
}

func (o TriggerBuildSourceStorageSourceOutput) ToTriggerBuildSourceStorageSourcePtrOutputWithContext(ctx context.Context) TriggerBuildSourceStorageSourcePtrOutput {
	return o.ApplyT(func(v TriggerBuildSourceStorageSource) *TriggerBuildSourceStorageSource {
		return &v
	}).(TriggerBuildSourceStorageSourcePtrOutput)
}

// Google Cloud Storage bucket containing the source.
func (o TriggerBuildSourceStorageSourceOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerBuildSourceStorageSource) string { return v.Bucket }).(pulumi.StringOutput)
}

// Google Cloud Storage generation for the object.
// If the generation is omitted, the latest generation will be used
func (o TriggerBuildSourceStorageSourceOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildSourceStorageSource) *string { return v.Generation }).(pulumi.StringPtrOutput)
}

// Google Cloud Storage object containing the source.
// This object must be a gzipped archive file (.tar.gz) containing source to build.
func (o TriggerBuildSourceStorageSourceOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerBuildSourceStorageSource) string { return v.Object }).(pulumi.StringOutput)
}

type TriggerBuildSourceStorageSourcePtrOutput struct{ *pulumi.OutputState }

func (TriggerBuildSourceStorageSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerBuildSourceStorageSource)(nil)).Elem()
}

func (o TriggerBuildSourceStorageSourcePtrOutput) ToTriggerBuildSourceStorageSourcePtrOutput() TriggerBuildSourceStorageSourcePtrOutput {
	return o
}

func (o TriggerBuildSourceStorageSourcePtrOutput) ToTriggerBuildSourceStorageSourcePtrOutputWithContext(ctx context.Context) TriggerBuildSourceStorageSourcePtrOutput {
	return o
}

func (o TriggerBuildSourceStorageSourcePtrOutput) Elem() TriggerBuildSourceStorageSourceOutput {
	return o.ApplyT(func(v *TriggerBuildSourceStorageSource) TriggerBuildSourceStorageSource { return *v }).(TriggerBuildSourceStorageSourceOutput)
}

// Google Cloud Storage bucket containing the source.
func (o TriggerBuildSourceStorageSourcePtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildSourceStorageSource) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage generation for the object.
// If the generation is omitted, the latest generation will be used
func (o TriggerBuildSourceStorageSourcePtrOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildSourceStorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage object containing the source.
// This object must be a gzipped archive file (.tar.gz) containing source to build.
func (o TriggerBuildSourceStorageSourcePtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerBuildSourceStorageSource) *string {
		if v == nil {
			return nil
		}
		return &v.Object
	}).(pulumi.StringPtrOutput)
}

type TriggerBuildStep struct {
	// A list of arguments that will be presented to the step when it is started.
	// If the image used to run the step's container has an entrypoint, the args
	// are used as arguments to that entrypoint. If the image does not define an
	// entrypoint, the first element in args is used as the entrypoint, and the
	// remainder will be used as arguments.
	Args []string `pulumi:"args"`
	// Working directory to use when running this step's container.
	// If this value is a relative path, it is relative to the build's working
	// directory. If this value is absolute, it may be outside the build's working
	// directory, in which case the contents of the path may not be persisted
	// across build step executions, unless a `volume` for that path is specified.
	// If the build specifies a `RepoSource` with `dir` and a step with a
	// `dir`,
	// which specifies an absolute path, the `RepoSource` `dir` is ignored
	// for the step's execution.
	Dir *string `pulumi:"dir"`
	// Entrypoint to be used instead of the build step image's
	// default entrypoint.
	// If unset, the image's default entrypoint is used
	Entrypoint *string `pulumi:"entrypoint"`
	// A list of global environment variable definitions that will exist for all build steps
	// in this build. If a variable is defined in both globally and in a build step,
	// the variable will use the build step value.
	// The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Envs []string `pulumi:"envs"`
	// Unique identifier for this build step, used in `waitFor` to
	// reference this build step as a dependency.
	Id *string `pulumi:"id"`
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for Docker volumes.
	// Each named volume must be used by at least two build steps.
	Name string `pulumi:"name"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management
	// Service crypto key. These values must be specified in the build's Secret. These variables
	// will be available to all build steps in this build.
	SecretEnvs []string `pulumi:"secretEnvs"`
	// Time limit for executing this build step. If not defined,
	// the step has no
	// time limit and will be allowed to continue to run until either it
	// completes or the build itself times out.
	Timeout *string `pulumi:"timeout"`
	// -
	// Output only. Stores timing information for pushing all artifact objects.
	// Structure is documented below.
	Timing *string `pulumi:"timing"`
	// Global list of volumes to mount for ALL build steps
	// Each volume is created as an empty volume prior to starting the build process.
	// Upon completion of the build, volumes and their contents are discarded. Global
	// volume names and paths cannot conflict with the volumes defined a build step.
	// Using a global volume in a build with only one step is not valid as it is indicative
	// of a build request with an incorrect configuration.
	// Structure is documented below.
	Volumes []TriggerBuildStepVolume `pulumi:"volumes"`
	// The ID(s) of the step(s) that this build step depends on.
	// This build step will not start until all the build steps in `waitFor`
	// have completed successfully. If `waitFor` is empty, this build step
	// will start when all previous build steps in the `Build.Steps` list
	// have completed successfully.
	WaitFors []string `pulumi:"waitFors"`
}

// TriggerBuildStepInput is an input type that accepts TriggerBuildStepArgs and TriggerBuildStepOutput values.
// You can construct a concrete instance of `TriggerBuildStepInput` via:
//
//          TriggerBuildStepArgs{...}
type TriggerBuildStepInput interface {
	pulumi.Input

	ToTriggerBuildStepOutput() TriggerBuildStepOutput
	ToTriggerBuildStepOutputWithContext(context.Context) TriggerBuildStepOutput
}

type TriggerBuildStepArgs struct {
	// A list of arguments that will be presented to the step when it is started.
	// If the image used to run the step's container has an entrypoint, the args
	// are used as arguments to that entrypoint. If the image does not define an
	// entrypoint, the first element in args is used as the entrypoint, and the
	// remainder will be used as arguments.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Working directory to use when running this step's container.
	// If this value is a relative path, it is relative to the build's working
	// directory. If this value is absolute, it may be outside the build's working
	// directory, in which case the contents of the path may not be persisted
	// across build step executions, unless a `volume` for that path is specified.
	// If the build specifies a `RepoSource` with `dir` and a step with a
	// `dir`,
	// which specifies an absolute path, the `RepoSource` `dir` is ignored
	// for the step's execution.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Entrypoint to be used instead of the build step image's
	// default entrypoint.
	// If unset, the image's default entrypoint is used
	Entrypoint pulumi.StringPtrInput `pulumi:"entrypoint"`
	// A list of global environment variable definitions that will exist for all build steps
	// in this build. If a variable is defined in both globally and in a build step,
	// the variable will use the build step value.
	// The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Envs pulumi.StringArrayInput `pulumi:"envs"`
	// Unique identifier for this build step, used in `waitFor` to
	// reference this build step as a dependency.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for Docker volumes.
	// Each named volume must be used by at least two build steps.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management
	// Service crypto key. These values must be specified in the build's Secret. These variables
	// will be available to all build steps in this build.
	SecretEnvs pulumi.StringArrayInput `pulumi:"secretEnvs"`
	// Time limit for executing this build step. If not defined,
	// the step has no
	// time limit and will be allowed to continue to run until either it
	// completes or the build itself times out.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// -
	// Output only. Stores timing information for pushing all artifact objects.
	// Structure is documented below.
	Timing pulumi.StringPtrInput `pulumi:"timing"`
	// Global list of volumes to mount for ALL build steps
	// Each volume is created as an empty volume prior to starting the build process.
	// Upon completion of the build, volumes and their contents are discarded. Global
	// volume names and paths cannot conflict with the volumes defined a build step.
	// Using a global volume in a build with only one step is not valid as it is indicative
	// of a build request with an incorrect configuration.
	// Structure is documented below.
	Volumes TriggerBuildStepVolumeArrayInput `pulumi:"volumes"`
	// The ID(s) of the step(s) that this build step depends on.
	// This build step will not start until all the build steps in `waitFor`
	// have completed successfully. If `waitFor` is empty, this build step
	// will start when all previous build steps in the `Build.Steps` list
	// have completed successfully.
	WaitFors pulumi.StringArrayInput `pulumi:"waitFors"`
}

func (TriggerBuildStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildStep)(nil)).Elem()
}

func (i TriggerBuildStepArgs) ToTriggerBuildStepOutput() TriggerBuildStepOutput {
	return i.ToTriggerBuildStepOutputWithContext(context.Background())
}

func (i TriggerBuildStepArgs) ToTriggerBuildStepOutputWithContext(ctx context.Context) TriggerBuildStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildStepOutput)
}

// TriggerBuildStepArrayInput is an input type that accepts TriggerBuildStepArray and TriggerBuildStepArrayOutput values.
// You can construct a concrete instance of `TriggerBuildStepArrayInput` via:
//
//          TriggerBuildStepArray{ TriggerBuildStepArgs{...} }
type TriggerBuildStepArrayInput interface {
	pulumi.Input

	ToTriggerBuildStepArrayOutput() TriggerBuildStepArrayOutput
	ToTriggerBuildStepArrayOutputWithContext(context.Context) TriggerBuildStepArrayOutput
}

type TriggerBuildStepArray []TriggerBuildStepInput

func (TriggerBuildStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildStep)(nil)).Elem()
}

func (i TriggerBuildStepArray) ToTriggerBuildStepArrayOutput() TriggerBuildStepArrayOutput {
	return i.ToTriggerBuildStepArrayOutputWithContext(context.Background())
}

func (i TriggerBuildStepArray) ToTriggerBuildStepArrayOutputWithContext(ctx context.Context) TriggerBuildStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildStepArrayOutput)
}

type TriggerBuildStepOutput struct{ *pulumi.OutputState }

func (TriggerBuildStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildStep)(nil)).Elem()
}

func (o TriggerBuildStepOutput) ToTriggerBuildStepOutput() TriggerBuildStepOutput {
	return o
}

func (o TriggerBuildStepOutput) ToTriggerBuildStepOutputWithContext(ctx context.Context) TriggerBuildStepOutput {
	return o
}

// A list of arguments that will be presented to the step when it is started.
// If the image used to run the step's container has an entrypoint, the args
// are used as arguments to that entrypoint. If the image does not define an
// entrypoint, the first element in args is used as the entrypoint, and the
// remainder will be used as arguments.
func (o TriggerBuildStepOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildStep) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Working directory to use when running this step's container.
// If this value is a relative path, it is relative to the build's working
// directory. If this value is absolute, it may be outside the build's working
// directory, in which case the contents of the path may not be persisted
// across build step executions, unless a `volume` for that path is specified.
// If the build specifies a `RepoSource` with `dir` and a step with a
// `dir`,
// which specifies an absolute path, the `RepoSource` `dir` is ignored
// for the step's execution.
func (o TriggerBuildStepOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildStep) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Entrypoint to be used instead of the build step image's
// default entrypoint.
// If unset, the image's default entrypoint is used
func (o TriggerBuildStepOutput) Entrypoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildStep) *string { return v.Entrypoint }).(pulumi.StringPtrOutput)
}

// A list of global environment variable definitions that will exist for all build steps
// in this build. If a variable is defined in both globally and in a build step,
// the variable will use the build step value.
// The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o TriggerBuildStepOutput) Envs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildStep) []string { return v.Envs }).(pulumi.StringArrayOutput)
}

// Unique identifier for this build step, used in `waitFor` to
// reference this build step as a dependency.
func (o TriggerBuildStepOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildStep) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the volume to mount.
// Volume names must be unique per build step and must be valid names for Docker volumes.
// Each named volume must be used by at least two build steps.
func (o TriggerBuildStepOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerBuildStep) string { return v.Name }).(pulumi.StringOutput)
}

// A list of global environment variables, which are encrypted using a Cloud Key Management
// Service crypto key. These values must be specified in the build's Secret. These variables
// will be available to all build steps in this build.
func (o TriggerBuildStepOutput) SecretEnvs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildStep) []string { return v.SecretEnvs }).(pulumi.StringArrayOutput)
}

// Time limit for executing this build step. If not defined,
// the step has no
// time limit and will be allowed to continue to run until either it
// completes or the build itself times out.
func (o TriggerBuildStepOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildStep) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// -
// Output only. Stores timing information for pushing all artifact objects.
// Structure is documented below.
func (o TriggerBuildStepOutput) Timing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerBuildStep) *string { return v.Timing }).(pulumi.StringPtrOutput)
}

// Global list of volumes to mount for ALL build steps
// Each volume is created as an empty volume prior to starting the build process.
// Upon completion of the build, volumes and their contents are discarded. Global
// volume names and paths cannot conflict with the volumes defined a build step.
// Using a global volume in a build with only one step is not valid as it is indicative
// of a build request with an incorrect configuration.
// Structure is documented below.
func (o TriggerBuildStepOutput) Volumes() TriggerBuildStepVolumeArrayOutput {
	return o.ApplyT(func(v TriggerBuildStep) []TriggerBuildStepVolume { return v.Volumes }).(TriggerBuildStepVolumeArrayOutput)
}

// The ID(s) of the step(s) that this build step depends on.
// This build step will not start until all the build steps in `waitFor`
// have completed successfully. If `waitFor` is empty, this build step
// will start when all previous build steps in the `Build.Steps` list
// have completed successfully.
func (o TriggerBuildStepOutput) WaitFors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerBuildStep) []string { return v.WaitFors }).(pulumi.StringArrayOutput)
}

type TriggerBuildStepArrayOutput struct{ *pulumi.OutputState }

func (TriggerBuildStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildStep)(nil)).Elem()
}

func (o TriggerBuildStepArrayOutput) ToTriggerBuildStepArrayOutput() TriggerBuildStepArrayOutput {
	return o
}

func (o TriggerBuildStepArrayOutput) ToTriggerBuildStepArrayOutputWithContext(ctx context.Context) TriggerBuildStepArrayOutput {
	return o
}

func (o TriggerBuildStepArrayOutput) Index(i pulumi.IntInput) TriggerBuildStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerBuildStep {
		return vs[0].([]TriggerBuildStep)[vs[1].(int)]
	}).(TriggerBuildStepOutput)
}

type TriggerBuildStepVolume struct {
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for Docker volumes.
	// Each named volume must be used by at least two build steps.
	Name string `pulumi:"name"`
	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on the same
	// build step or with certain reserved volume paths.
	Path string `pulumi:"path"`
}

// TriggerBuildStepVolumeInput is an input type that accepts TriggerBuildStepVolumeArgs and TriggerBuildStepVolumeOutput values.
// You can construct a concrete instance of `TriggerBuildStepVolumeInput` via:
//
//          TriggerBuildStepVolumeArgs{...}
type TriggerBuildStepVolumeInput interface {
	pulumi.Input

	ToTriggerBuildStepVolumeOutput() TriggerBuildStepVolumeOutput
	ToTriggerBuildStepVolumeOutputWithContext(context.Context) TriggerBuildStepVolumeOutput
}

type TriggerBuildStepVolumeArgs struct {
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for Docker volumes.
	// Each named volume must be used by at least two build steps.
	Name pulumi.StringInput `pulumi:"name"`
	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on the same
	// build step or with certain reserved volume paths.
	Path pulumi.StringInput `pulumi:"path"`
}

func (TriggerBuildStepVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildStepVolume)(nil)).Elem()
}

func (i TriggerBuildStepVolumeArgs) ToTriggerBuildStepVolumeOutput() TriggerBuildStepVolumeOutput {
	return i.ToTriggerBuildStepVolumeOutputWithContext(context.Background())
}

func (i TriggerBuildStepVolumeArgs) ToTriggerBuildStepVolumeOutputWithContext(ctx context.Context) TriggerBuildStepVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildStepVolumeOutput)
}

// TriggerBuildStepVolumeArrayInput is an input type that accepts TriggerBuildStepVolumeArray and TriggerBuildStepVolumeArrayOutput values.
// You can construct a concrete instance of `TriggerBuildStepVolumeArrayInput` via:
//
//          TriggerBuildStepVolumeArray{ TriggerBuildStepVolumeArgs{...} }
type TriggerBuildStepVolumeArrayInput interface {
	pulumi.Input

	ToTriggerBuildStepVolumeArrayOutput() TriggerBuildStepVolumeArrayOutput
	ToTriggerBuildStepVolumeArrayOutputWithContext(context.Context) TriggerBuildStepVolumeArrayOutput
}

type TriggerBuildStepVolumeArray []TriggerBuildStepVolumeInput

func (TriggerBuildStepVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildStepVolume)(nil)).Elem()
}

func (i TriggerBuildStepVolumeArray) ToTriggerBuildStepVolumeArrayOutput() TriggerBuildStepVolumeArrayOutput {
	return i.ToTriggerBuildStepVolumeArrayOutputWithContext(context.Background())
}

func (i TriggerBuildStepVolumeArray) ToTriggerBuildStepVolumeArrayOutputWithContext(ctx context.Context) TriggerBuildStepVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerBuildStepVolumeArrayOutput)
}

type TriggerBuildStepVolumeOutput struct{ *pulumi.OutputState }

func (TriggerBuildStepVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerBuildStepVolume)(nil)).Elem()
}

func (o TriggerBuildStepVolumeOutput) ToTriggerBuildStepVolumeOutput() TriggerBuildStepVolumeOutput {
	return o
}

func (o TriggerBuildStepVolumeOutput) ToTriggerBuildStepVolumeOutputWithContext(ctx context.Context) TriggerBuildStepVolumeOutput {
	return o
}

// Name of the volume to mount.
// Volume names must be unique per build step and must be valid names for Docker volumes.
// Each named volume must be used by at least two build steps.
func (o TriggerBuildStepVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerBuildStepVolume) string { return v.Name }).(pulumi.StringOutput)
}

// Path at which to mount the volume.
// Paths must be absolute and cannot conflict with other volume paths on the same
// build step or with certain reserved volume paths.
func (o TriggerBuildStepVolumeOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerBuildStepVolume) string { return v.Path }).(pulumi.StringOutput)
}

type TriggerBuildStepVolumeArrayOutput struct{ *pulumi.OutputState }

func (TriggerBuildStepVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerBuildStepVolume)(nil)).Elem()
}

func (o TriggerBuildStepVolumeArrayOutput) ToTriggerBuildStepVolumeArrayOutput() TriggerBuildStepVolumeArrayOutput {
	return o
}

func (o TriggerBuildStepVolumeArrayOutput) ToTriggerBuildStepVolumeArrayOutputWithContext(ctx context.Context) TriggerBuildStepVolumeArrayOutput {
	return o
}

func (o TriggerBuildStepVolumeArrayOutput) Index(i pulumi.IntInput) TriggerBuildStepVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerBuildStepVolume {
		return vs[0].([]TriggerBuildStepVolume)[vs[1].(int)]
	}).(TriggerBuildStepVolumeOutput)
}

type TriggerGithub struct {
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for Docker volumes.
	// Each named volume must be used by at least two build steps.
	Name *string `pulumi:"name"`
	// Owner of the repository. For example: The owner for
	// https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	Owner *string `pulumi:"owner"`
	// filter to match changes in pull requests.  Specify only one of pullRequest or push.
	// Structure is documented below.
	PullRequest *TriggerGithubPullRequest `pulumi:"pullRequest"`
	// filter to match changes in refs, like branches or tags.  Specify only one of pullRequest or push.
	// Structure is documented below.
	Push *TriggerGithubPush `pulumi:"push"`
}

// TriggerGithubInput is an input type that accepts TriggerGithubArgs and TriggerGithubOutput values.
// You can construct a concrete instance of `TriggerGithubInput` via:
//
//          TriggerGithubArgs{...}
type TriggerGithubInput interface {
	pulumi.Input

	ToTriggerGithubOutput() TriggerGithubOutput
	ToTriggerGithubOutputWithContext(context.Context) TriggerGithubOutput
}

type TriggerGithubArgs struct {
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for Docker volumes.
	// Each named volume must be used by at least two build steps.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Owner of the repository. For example: The owner for
	// https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	Owner pulumi.StringPtrInput `pulumi:"owner"`
	// filter to match changes in pull requests.  Specify only one of pullRequest or push.
	// Structure is documented below.
	PullRequest TriggerGithubPullRequestPtrInput `pulumi:"pullRequest"`
	// filter to match changes in refs, like branches or tags.  Specify only one of pullRequest or push.
	// Structure is documented below.
	Push TriggerGithubPushPtrInput `pulumi:"push"`
}

func (TriggerGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerGithub)(nil)).Elem()
}

func (i TriggerGithubArgs) ToTriggerGithubOutput() TriggerGithubOutput {
	return i.ToTriggerGithubOutputWithContext(context.Background())
}

func (i TriggerGithubArgs) ToTriggerGithubOutputWithContext(ctx context.Context) TriggerGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubOutput)
}

func (i TriggerGithubArgs) ToTriggerGithubPtrOutput() TriggerGithubPtrOutput {
	return i.ToTriggerGithubPtrOutputWithContext(context.Background())
}

func (i TriggerGithubArgs) ToTriggerGithubPtrOutputWithContext(ctx context.Context) TriggerGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubOutput).ToTriggerGithubPtrOutputWithContext(ctx)
}

// TriggerGithubPtrInput is an input type that accepts TriggerGithubArgs, TriggerGithubPtr and TriggerGithubPtrOutput values.
// You can construct a concrete instance of `TriggerGithubPtrInput` via:
//
//          TriggerGithubArgs{...}
//
//  or:
//
//          nil
type TriggerGithubPtrInput interface {
	pulumi.Input

	ToTriggerGithubPtrOutput() TriggerGithubPtrOutput
	ToTriggerGithubPtrOutputWithContext(context.Context) TriggerGithubPtrOutput
}

type triggerGithubPtrType TriggerGithubArgs

func TriggerGithubPtr(v *TriggerGithubArgs) TriggerGithubPtrInput {
	return (*triggerGithubPtrType)(v)
}

func (*triggerGithubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerGithub)(nil)).Elem()
}

func (i *triggerGithubPtrType) ToTriggerGithubPtrOutput() TriggerGithubPtrOutput {
	return i.ToTriggerGithubPtrOutputWithContext(context.Background())
}

func (i *triggerGithubPtrType) ToTriggerGithubPtrOutputWithContext(ctx context.Context) TriggerGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPtrOutput)
}

type TriggerGithubOutput struct{ *pulumi.OutputState }

func (TriggerGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerGithub)(nil)).Elem()
}

func (o TriggerGithubOutput) ToTriggerGithubOutput() TriggerGithubOutput {
	return o
}

func (o TriggerGithubOutput) ToTriggerGithubOutputWithContext(ctx context.Context) TriggerGithubOutput {
	return o
}

func (o TriggerGithubOutput) ToTriggerGithubPtrOutput() TriggerGithubPtrOutput {
	return o.ToTriggerGithubPtrOutputWithContext(context.Background())
}

func (o TriggerGithubOutput) ToTriggerGithubPtrOutputWithContext(ctx context.Context) TriggerGithubPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *TriggerGithub {
		return &v
	}).(TriggerGithubPtrOutput)
}

// Name of the volume to mount.
// Volume names must be unique per build step and must be valid names for Docker volumes.
// Each named volume must be used by at least two build steps.
func (o TriggerGithubOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Owner of the repository. For example: The owner for
// https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
func (o TriggerGithubOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

// filter to match changes in pull requests.  Specify only one of pullRequest or push.
// Structure is documented below.
func (o TriggerGithubOutput) PullRequest() TriggerGithubPullRequestPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *TriggerGithubPullRequest { return v.PullRequest }).(TriggerGithubPullRequestPtrOutput)
}

// filter to match changes in refs, like branches or tags.  Specify only one of pullRequest or push.
// Structure is documented below.
func (o TriggerGithubOutput) Push() TriggerGithubPushPtrOutput {
	return o.ApplyT(func(v TriggerGithub) *TriggerGithubPush { return v.Push }).(TriggerGithubPushPtrOutput)
}

type TriggerGithubPtrOutput struct{ *pulumi.OutputState }

func (TriggerGithubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerGithub)(nil)).Elem()
}

func (o TriggerGithubPtrOutput) ToTriggerGithubPtrOutput() TriggerGithubPtrOutput {
	return o
}

func (o TriggerGithubPtrOutput) ToTriggerGithubPtrOutputWithContext(ctx context.Context) TriggerGithubPtrOutput {
	return o
}

func (o TriggerGithubPtrOutput) Elem() TriggerGithubOutput {
	return o.ApplyT(func(v *TriggerGithub) TriggerGithub { return *v }).(TriggerGithubOutput)
}

// Name of the volume to mount.
// Volume names must be unique per build step and must be valid names for Docker volumes.
// Each named volume must be used by at least two build steps.
func (o TriggerGithubPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerGithub) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Owner of the repository. For example: The owner for
// https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
func (o TriggerGithubPtrOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerGithub) *string {
		if v == nil {
			return nil
		}
		return v.Owner
	}).(pulumi.StringPtrOutput)
}

// filter to match changes in pull requests.  Specify only one of pullRequest or push.
// Structure is documented below.
func (o TriggerGithubPtrOutput) PullRequest() TriggerGithubPullRequestPtrOutput {
	return o.ApplyT(func(v *TriggerGithub) *TriggerGithubPullRequest {
		if v == nil {
			return nil
		}
		return v.PullRequest
	}).(TriggerGithubPullRequestPtrOutput)
}

// filter to match changes in refs, like branches or tags.  Specify only one of pullRequest or push.
// Structure is documented below.
func (o TriggerGithubPtrOutput) Push() TriggerGithubPushPtrOutput {
	return o.ApplyT(func(v *TriggerGithub) *TriggerGithubPush {
		if v == nil {
			return nil
		}
		return v.Push
	}).(TriggerGithubPushPtrOutput)
}

type TriggerGithubPullRequest struct {
	// Regex of branches to match.  Specify only one of branch or tag.
	Branch string `pulumi:"branch"`
	// Whether to block builds on a "/gcbrun" comment from a repository owner or collaborator.
	// Possible values are `COMMENTS_DISABLED`, `COMMENTS_ENABLED`, and `COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY`.
	CommentControl *string `pulumi:"commentControl"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `pulumi:"invertRegex"`
}

// TriggerGithubPullRequestInput is an input type that accepts TriggerGithubPullRequestArgs and TriggerGithubPullRequestOutput values.
// You can construct a concrete instance of `TriggerGithubPullRequestInput` via:
//
//          TriggerGithubPullRequestArgs{...}
type TriggerGithubPullRequestInput interface {
	pulumi.Input

	ToTriggerGithubPullRequestOutput() TriggerGithubPullRequestOutput
	ToTriggerGithubPullRequestOutputWithContext(context.Context) TriggerGithubPullRequestOutput
}

type TriggerGithubPullRequestArgs struct {
	// Regex of branches to match.  Specify only one of branch or tag.
	Branch pulumi.StringInput `pulumi:"branch"`
	// Whether to block builds on a "/gcbrun" comment from a repository owner or collaborator.
	// Possible values are `COMMENTS_DISABLED`, `COMMENTS_ENABLED`, and `COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY`.
	CommentControl pulumi.StringPtrInput `pulumi:"commentControl"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex pulumi.BoolPtrInput `pulumi:"invertRegex"`
}

func (TriggerGithubPullRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerGithubPullRequest)(nil)).Elem()
}

func (i TriggerGithubPullRequestArgs) ToTriggerGithubPullRequestOutput() TriggerGithubPullRequestOutput {
	return i.ToTriggerGithubPullRequestOutputWithContext(context.Background())
}

func (i TriggerGithubPullRequestArgs) ToTriggerGithubPullRequestOutputWithContext(ctx context.Context) TriggerGithubPullRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPullRequestOutput)
}

func (i TriggerGithubPullRequestArgs) ToTriggerGithubPullRequestPtrOutput() TriggerGithubPullRequestPtrOutput {
	return i.ToTriggerGithubPullRequestPtrOutputWithContext(context.Background())
}

func (i TriggerGithubPullRequestArgs) ToTriggerGithubPullRequestPtrOutputWithContext(ctx context.Context) TriggerGithubPullRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPullRequestOutput).ToTriggerGithubPullRequestPtrOutputWithContext(ctx)
}

// TriggerGithubPullRequestPtrInput is an input type that accepts TriggerGithubPullRequestArgs, TriggerGithubPullRequestPtr and TriggerGithubPullRequestPtrOutput values.
// You can construct a concrete instance of `TriggerGithubPullRequestPtrInput` via:
//
//          TriggerGithubPullRequestArgs{...}
//
//  or:
//
//          nil
type TriggerGithubPullRequestPtrInput interface {
	pulumi.Input

	ToTriggerGithubPullRequestPtrOutput() TriggerGithubPullRequestPtrOutput
	ToTriggerGithubPullRequestPtrOutputWithContext(context.Context) TriggerGithubPullRequestPtrOutput
}

type triggerGithubPullRequestPtrType TriggerGithubPullRequestArgs

func TriggerGithubPullRequestPtr(v *TriggerGithubPullRequestArgs) TriggerGithubPullRequestPtrInput {
	return (*triggerGithubPullRequestPtrType)(v)
}

func (*triggerGithubPullRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerGithubPullRequest)(nil)).Elem()
}

func (i *triggerGithubPullRequestPtrType) ToTriggerGithubPullRequestPtrOutput() TriggerGithubPullRequestPtrOutput {
	return i.ToTriggerGithubPullRequestPtrOutputWithContext(context.Background())
}

func (i *triggerGithubPullRequestPtrType) ToTriggerGithubPullRequestPtrOutputWithContext(ctx context.Context) TriggerGithubPullRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPullRequestPtrOutput)
}

type TriggerGithubPullRequestOutput struct{ *pulumi.OutputState }

func (TriggerGithubPullRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerGithubPullRequest)(nil)).Elem()
}

func (o TriggerGithubPullRequestOutput) ToTriggerGithubPullRequestOutput() TriggerGithubPullRequestOutput {
	return o
}

func (o TriggerGithubPullRequestOutput) ToTriggerGithubPullRequestOutputWithContext(ctx context.Context) TriggerGithubPullRequestOutput {
	return o
}

func (o TriggerGithubPullRequestOutput) ToTriggerGithubPullRequestPtrOutput() TriggerGithubPullRequestPtrOutput {
	return o.ToTriggerGithubPullRequestPtrOutputWithContext(context.Background())
}

func (o TriggerGithubPullRequestOutput) ToTriggerGithubPullRequestPtrOutputWithContext(ctx context.Context) TriggerGithubPullRequestPtrOutput {
	return o.ApplyT(func(v TriggerGithubPullRequest) *TriggerGithubPullRequest {
		return &v
	}).(TriggerGithubPullRequestPtrOutput)
}

// Regex of branches to match.  Specify only one of branch or tag.
func (o TriggerGithubPullRequestOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerGithubPullRequest) string { return v.Branch }).(pulumi.StringOutput)
}

// Whether to block builds on a "/gcbrun" comment from a repository owner or collaborator.
// Possible values are `COMMENTS_DISABLED`, `COMMENTS_ENABLED`, and `COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY`.
func (o TriggerGithubPullRequestOutput) CommentControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithubPullRequest) *string { return v.CommentControl }).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o TriggerGithubPullRequestOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TriggerGithubPullRequest) *bool { return v.InvertRegex }).(pulumi.BoolPtrOutput)
}

type TriggerGithubPullRequestPtrOutput struct{ *pulumi.OutputState }

func (TriggerGithubPullRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerGithubPullRequest)(nil)).Elem()
}

func (o TriggerGithubPullRequestPtrOutput) ToTriggerGithubPullRequestPtrOutput() TriggerGithubPullRequestPtrOutput {
	return o
}

func (o TriggerGithubPullRequestPtrOutput) ToTriggerGithubPullRequestPtrOutputWithContext(ctx context.Context) TriggerGithubPullRequestPtrOutput {
	return o
}

func (o TriggerGithubPullRequestPtrOutput) Elem() TriggerGithubPullRequestOutput {
	return o.ApplyT(func(v *TriggerGithubPullRequest) TriggerGithubPullRequest { return *v }).(TriggerGithubPullRequestOutput)
}

// Regex of branches to match.  Specify only one of branch or tag.
func (o TriggerGithubPullRequestPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerGithubPullRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Branch
	}).(pulumi.StringPtrOutput)
}

// Whether to block builds on a "/gcbrun" comment from a repository owner or collaborator.
// Possible values are `COMMENTS_DISABLED`, `COMMENTS_ENABLED`, and `COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY`.
func (o TriggerGithubPullRequestPtrOutput) CommentControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerGithubPullRequest) *string {
		if v == nil {
			return nil
		}
		return v.CommentControl
	}).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o TriggerGithubPullRequestPtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TriggerGithubPullRequest) *bool {
		if v == nil {
			return nil
		}
		return v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

type TriggerGithubPush struct {
	// Regex of branches to match.  Specify only one of branch or tag.
	Branch *string `pulumi:"branch"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `pulumi:"invertRegex"`
	// Regex of tags to match.  Specify only one of branch or tag.
	Tag *string `pulumi:"tag"`
}

// TriggerGithubPushInput is an input type that accepts TriggerGithubPushArgs and TriggerGithubPushOutput values.
// You can construct a concrete instance of `TriggerGithubPushInput` via:
//
//          TriggerGithubPushArgs{...}
type TriggerGithubPushInput interface {
	pulumi.Input

	ToTriggerGithubPushOutput() TriggerGithubPushOutput
	ToTriggerGithubPushOutputWithContext(context.Context) TriggerGithubPushOutput
}

type TriggerGithubPushArgs struct {
	// Regex of branches to match.  Specify only one of branch or tag.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex pulumi.BoolPtrInput `pulumi:"invertRegex"`
	// Regex of tags to match.  Specify only one of branch or tag.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (TriggerGithubPushArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerGithubPush)(nil)).Elem()
}

func (i TriggerGithubPushArgs) ToTriggerGithubPushOutput() TriggerGithubPushOutput {
	return i.ToTriggerGithubPushOutputWithContext(context.Background())
}

func (i TriggerGithubPushArgs) ToTriggerGithubPushOutputWithContext(ctx context.Context) TriggerGithubPushOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPushOutput)
}

func (i TriggerGithubPushArgs) ToTriggerGithubPushPtrOutput() TriggerGithubPushPtrOutput {
	return i.ToTriggerGithubPushPtrOutputWithContext(context.Background())
}

func (i TriggerGithubPushArgs) ToTriggerGithubPushPtrOutputWithContext(ctx context.Context) TriggerGithubPushPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPushOutput).ToTriggerGithubPushPtrOutputWithContext(ctx)
}

// TriggerGithubPushPtrInput is an input type that accepts TriggerGithubPushArgs, TriggerGithubPushPtr and TriggerGithubPushPtrOutput values.
// You can construct a concrete instance of `TriggerGithubPushPtrInput` via:
//
//          TriggerGithubPushArgs{...}
//
//  or:
//
//          nil
type TriggerGithubPushPtrInput interface {
	pulumi.Input

	ToTriggerGithubPushPtrOutput() TriggerGithubPushPtrOutput
	ToTriggerGithubPushPtrOutputWithContext(context.Context) TriggerGithubPushPtrOutput
}

type triggerGithubPushPtrType TriggerGithubPushArgs

func TriggerGithubPushPtr(v *TriggerGithubPushArgs) TriggerGithubPushPtrInput {
	return (*triggerGithubPushPtrType)(v)
}

func (*triggerGithubPushPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerGithubPush)(nil)).Elem()
}

func (i *triggerGithubPushPtrType) ToTriggerGithubPushPtrOutput() TriggerGithubPushPtrOutput {
	return i.ToTriggerGithubPushPtrOutputWithContext(context.Background())
}

func (i *triggerGithubPushPtrType) ToTriggerGithubPushPtrOutputWithContext(ctx context.Context) TriggerGithubPushPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerGithubPushPtrOutput)
}

type TriggerGithubPushOutput struct{ *pulumi.OutputState }

func (TriggerGithubPushOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerGithubPush)(nil)).Elem()
}

func (o TriggerGithubPushOutput) ToTriggerGithubPushOutput() TriggerGithubPushOutput {
	return o
}

func (o TriggerGithubPushOutput) ToTriggerGithubPushOutputWithContext(ctx context.Context) TriggerGithubPushOutput {
	return o
}

func (o TriggerGithubPushOutput) ToTriggerGithubPushPtrOutput() TriggerGithubPushPtrOutput {
	return o.ToTriggerGithubPushPtrOutputWithContext(context.Background())
}

func (o TriggerGithubPushOutput) ToTriggerGithubPushPtrOutputWithContext(ctx context.Context) TriggerGithubPushPtrOutput {
	return o.ApplyT(func(v TriggerGithubPush) *TriggerGithubPush {
		return &v
	}).(TriggerGithubPushPtrOutput)
}

// Regex of branches to match.  Specify only one of branch or tag.
func (o TriggerGithubPushOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithubPush) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o TriggerGithubPushOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TriggerGithubPush) *bool { return v.InvertRegex }).(pulumi.BoolPtrOutput)
}

// Regex of tags to match.  Specify only one of branch or tag.
func (o TriggerGithubPushOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerGithubPush) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type TriggerGithubPushPtrOutput struct{ *pulumi.OutputState }

func (TriggerGithubPushPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerGithubPush)(nil)).Elem()
}

func (o TriggerGithubPushPtrOutput) ToTriggerGithubPushPtrOutput() TriggerGithubPushPtrOutput {
	return o
}

func (o TriggerGithubPushPtrOutput) ToTriggerGithubPushPtrOutputWithContext(ctx context.Context) TriggerGithubPushPtrOutput {
	return o
}

func (o TriggerGithubPushPtrOutput) Elem() TriggerGithubPushOutput {
	return o.ApplyT(func(v *TriggerGithubPush) TriggerGithubPush { return *v }).(TriggerGithubPushOutput)
}

// Regex of branches to match.  Specify only one of branch or tag.
func (o TriggerGithubPushPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerGithubPush) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o TriggerGithubPushPtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TriggerGithubPush) *bool {
		if v == nil {
			return nil
		}
		return v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

// Regex of tags to match.  Specify only one of branch or tag.
func (o TriggerGithubPushPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerGithubPush) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

type TriggerTriggerTemplate struct {
	// Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
	// described at https://github.com/google/re2/wiki/Syntax
	BranchName *string `pulumi:"branchName"`
	// Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	CommitSha *string `pulumi:"commitSha"`
	// Working directory to use when running this step's container.
	// If this value is a relative path, it is relative to the build's working
	// directory. If this value is absolute, it may be outside the build's working
	// directory, in which case the contents of the path may not be persisted
	// across build step executions, unless a `volume` for that path is specified.
	// If the build specifies a `RepoSource` with `dir` and a step with a
	// `dir`,
	// which specifies an absolute path, the `RepoSource` `dir` is ignored
	// for the step's execution.
	Dir *string `pulumi:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `pulumi:"invertRegex"`
	// ID of the project that owns the Cloud Source Repository.
	// If omitted, the project ID requesting the build is assumed.
	ProjectId *string `pulumi:"projectId"`
	// Name of the Cloud Source Repository.
	RepoName *string `pulumi:"repoName"`
	// Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
	// described at https://github.com/google/re2/wiki/Syntax
	TagName *string `pulumi:"tagName"`
}

// TriggerTriggerTemplateInput is an input type that accepts TriggerTriggerTemplateArgs and TriggerTriggerTemplateOutput values.
// You can construct a concrete instance of `TriggerTriggerTemplateInput` via:
//
//          TriggerTriggerTemplateArgs{...}
type TriggerTriggerTemplateInput interface {
	pulumi.Input

	ToTriggerTriggerTemplateOutput() TriggerTriggerTemplateOutput
	ToTriggerTriggerTemplateOutputWithContext(context.Context) TriggerTriggerTemplateOutput
}

type TriggerTriggerTemplateArgs struct {
	// Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
	// described at https://github.com/google/re2/wiki/Syntax
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	// Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	CommitSha pulumi.StringPtrInput `pulumi:"commitSha"`
	// Working directory to use when running this step's container.
	// If this value is a relative path, it is relative to the build's working
	// directory. If this value is absolute, it may be outside the build's working
	// directory, in which case the contents of the path may not be persisted
	// across build step executions, unless a `volume` for that path is specified.
	// If the build specifies a `RepoSource` with `dir` and a step with a
	// `dir`,
	// which specifies an absolute path, the `RepoSource` `dir` is ignored
	// for the step's execution.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex pulumi.BoolPtrInput `pulumi:"invertRegex"`
	// ID of the project that owns the Cloud Source Repository.
	// If omitted, the project ID requesting the build is assumed.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Name of the Cloud Source Repository.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
	// Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
	// described at https://github.com/google/re2/wiki/Syntax
	TagName pulumi.StringPtrInput `pulumi:"tagName"`
}

func (TriggerTriggerTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerTriggerTemplate)(nil)).Elem()
}

func (i TriggerTriggerTemplateArgs) ToTriggerTriggerTemplateOutput() TriggerTriggerTemplateOutput {
	return i.ToTriggerTriggerTemplateOutputWithContext(context.Background())
}

func (i TriggerTriggerTemplateArgs) ToTriggerTriggerTemplateOutputWithContext(ctx context.Context) TriggerTriggerTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTriggerTemplateOutput)
}

func (i TriggerTriggerTemplateArgs) ToTriggerTriggerTemplatePtrOutput() TriggerTriggerTemplatePtrOutput {
	return i.ToTriggerTriggerTemplatePtrOutputWithContext(context.Background())
}

func (i TriggerTriggerTemplateArgs) ToTriggerTriggerTemplatePtrOutputWithContext(ctx context.Context) TriggerTriggerTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTriggerTemplateOutput).ToTriggerTriggerTemplatePtrOutputWithContext(ctx)
}

// TriggerTriggerTemplatePtrInput is an input type that accepts TriggerTriggerTemplateArgs, TriggerTriggerTemplatePtr and TriggerTriggerTemplatePtrOutput values.
// You can construct a concrete instance of `TriggerTriggerTemplatePtrInput` via:
//
//          TriggerTriggerTemplateArgs{...}
//
//  or:
//
//          nil
type TriggerTriggerTemplatePtrInput interface {
	pulumi.Input

	ToTriggerTriggerTemplatePtrOutput() TriggerTriggerTemplatePtrOutput
	ToTriggerTriggerTemplatePtrOutputWithContext(context.Context) TriggerTriggerTemplatePtrOutput
}

type triggerTriggerTemplatePtrType TriggerTriggerTemplateArgs

func TriggerTriggerTemplatePtr(v *TriggerTriggerTemplateArgs) TriggerTriggerTemplatePtrInput {
	return (*triggerTriggerTemplatePtrType)(v)
}

func (*triggerTriggerTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerTriggerTemplate)(nil)).Elem()
}

func (i *triggerTriggerTemplatePtrType) ToTriggerTriggerTemplatePtrOutput() TriggerTriggerTemplatePtrOutput {
	return i.ToTriggerTriggerTemplatePtrOutputWithContext(context.Background())
}

func (i *triggerTriggerTemplatePtrType) ToTriggerTriggerTemplatePtrOutputWithContext(ctx context.Context) TriggerTriggerTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTriggerTemplatePtrOutput)
}

type TriggerTriggerTemplateOutput struct{ *pulumi.OutputState }

func (TriggerTriggerTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerTriggerTemplate)(nil)).Elem()
}

func (o TriggerTriggerTemplateOutput) ToTriggerTriggerTemplateOutput() TriggerTriggerTemplateOutput {
	return o
}

func (o TriggerTriggerTemplateOutput) ToTriggerTriggerTemplateOutputWithContext(ctx context.Context) TriggerTriggerTemplateOutput {
	return o
}

func (o TriggerTriggerTemplateOutput) ToTriggerTriggerTemplatePtrOutput() TriggerTriggerTemplatePtrOutput {
	return o.ToTriggerTriggerTemplatePtrOutputWithContext(context.Background())
}

func (o TriggerTriggerTemplateOutput) ToTriggerTriggerTemplatePtrOutputWithContext(ctx context.Context) TriggerTriggerTemplatePtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *TriggerTriggerTemplate {
		return &v
	}).(TriggerTriggerTemplatePtrOutput)
}

// Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
// described at https://github.com/google/re2/wiki/Syntax
func (o TriggerTriggerTemplateOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
func (o TriggerTriggerTemplateOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.CommitSha }).(pulumi.StringPtrOutput)
}

// Working directory to use when running this step's container.
// If this value is a relative path, it is relative to the build's working
// directory. If this value is absolute, it may be outside the build's working
// directory, in which case the contents of the path may not be persisted
// across build step executions, unless a `volume` for that path is specified.
// If the build specifies a `RepoSource` with `dir` and a step with a
// `dir`,
// which specifies an absolute path, the `RepoSource` `dir` is ignored
// for the step's execution.
func (o TriggerTriggerTemplateOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o TriggerTriggerTemplateOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *bool { return v.InvertRegex }).(pulumi.BoolPtrOutput)
}

// ID of the project that owns the Cloud Source Repository.
// If omitted, the project ID requesting the build is assumed.
func (o TriggerTriggerTemplateOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Name of the Cloud Source Repository.
func (o TriggerTriggerTemplateOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

// Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
// described at https://github.com/google/re2/wiki/Syntax
func (o TriggerTriggerTemplateOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTriggerTemplate) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

type TriggerTriggerTemplatePtrOutput struct{ *pulumi.OutputState }

func (TriggerTriggerTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerTriggerTemplate)(nil)).Elem()
}

func (o TriggerTriggerTemplatePtrOutput) ToTriggerTriggerTemplatePtrOutput() TriggerTriggerTemplatePtrOutput {
	return o
}

func (o TriggerTriggerTemplatePtrOutput) ToTriggerTriggerTemplatePtrOutputWithContext(ctx context.Context) TriggerTriggerTemplatePtrOutput {
	return o
}

func (o TriggerTriggerTemplatePtrOutput) Elem() TriggerTriggerTemplateOutput {
	return o.ApplyT(func(v *TriggerTriggerTemplate) TriggerTriggerTemplate { return *v }).(TriggerTriggerTemplateOutput)
}

// Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
// described at https://github.com/google/re2/wiki/Syntax
func (o TriggerTriggerTemplatePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerTriggerTemplate) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
func (o TriggerTriggerTemplatePtrOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerTriggerTemplate) *string {
		if v == nil {
			return nil
		}
		return v.CommitSha
	}).(pulumi.StringPtrOutput)
}

// Working directory to use when running this step's container.
// If this value is a relative path, it is relative to the build's working
// directory. If this value is absolute, it may be outside the build's working
// directory, in which case the contents of the path may not be persisted
// across build step executions, unless a `volume` for that path is specified.
// If the build specifies a `RepoSource` with `dir` and a step with a
// `dir`,
// which specifies an absolute path, the `RepoSource` `dir` is ignored
// for the step's execution.
func (o TriggerTriggerTemplatePtrOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerTriggerTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Dir
	}).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o TriggerTriggerTemplatePtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TriggerTriggerTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

// ID of the project that owns the Cloud Source Repository.
// If omitted, the project ID requesting the build is assumed.
func (o TriggerTriggerTemplatePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerTriggerTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Name of the Cloud Source Repository.
func (o TriggerTriggerTemplatePtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerTriggerTemplate) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
// described at https://github.com/google/re2/wiki/Syntax
func (o TriggerTriggerTemplatePtrOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerTriggerTemplate) *string {
		if v == nil {
			return nil
		}
		return v.TagName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(TriggerBuildOutput{})
	pulumi.RegisterOutputType(TriggerBuildPtrOutput{})
	pulumi.RegisterOutputType(TriggerBuildArtifactsOutput{})
	pulumi.RegisterOutputType(TriggerBuildArtifactsPtrOutput{})
	pulumi.RegisterOutputType(TriggerBuildArtifactsObjectsOutput{})
	pulumi.RegisterOutputType(TriggerBuildArtifactsObjectsPtrOutput{})
	pulumi.RegisterOutputType(TriggerBuildArtifactsObjectsTimingOutput{})
	pulumi.RegisterOutputType(TriggerBuildArtifactsObjectsTimingArrayOutput{})
	pulumi.RegisterOutputType(TriggerBuildOptionsOutput{})
	pulumi.RegisterOutputType(TriggerBuildOptionsPtrOutput{})
	pulumi.RegisterOutputType(TriggerBuildOptionsVolumeOutput{})
	pulumi.RegisterOutputType(TriggerBuildOptionsVolumeArrayOutput{})
	pulumi.RegisterOutputType(TriggerBuildSecretOutput{})
	pulumi.RegisterOutputType(TriggerBuildSecretArrayOutput{})
	pulumi.RegisterOutputType(TriggerBuildSourceOutput{})
	pulumi.RegisterOutputType(TriggerBuildSourcePtrOutput{})
	pulumi.RegisterOutputType(TriggerBuildSourceRepoSourceOutput{})
	pulumi.RegisterOutputType(TriggerBuildSourceRepoSourcePtrOutput{})
	pulumi.RegisterOutputType(TriggerBuildSourceStorageSourceOutput{})
	pulumi.RegisterOutputType(TriggerBuildSourceStorageSourcePtrOutput{})
	pulumi.RegisterOutputType(TriggerBuildStepOutput{})
	pulumi.RegisterOutputType(TriggerBuildStepArrayOutput{})
	pulumi.RegisterOutputType(TriggerBuildStepVolumeOutput{})
	pulumi.RegisterOutputType(TriggerBuildStepVolumeArrayOutput{})
	pulumi.RegisterOutputType(TriggerGithubOutput{})
	pulumi.RegisterOutputType(TriggerGithubPtrOutput{})
	pulumi.RegisterOutputType(TriggerGithubPullRequestOutput{})
	pulumi.RegisterOutputType(TriggerGithubPullRequestPtrOutput{})
	pulumi.RegisterOutputType(TriggerGithubPushOutput{})
	pulumi.RegisterOutputType(TriggerGithubPushPtrOutput{})
	pulumi.RegisterOutputType(TriggerTriggerTemplateOutput{})
	pulumi.RegisterOutputType(TriggerTriggerTemplatePtrOutput{})
}
