// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Dns Response Policy Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/container"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewNetwork(ctx, "network-1", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewNetwork(ctx, "network-2", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewSubnetwork(ctx, "subnetwork-1", &compute.SubnetworkArgs{
//				Network:               network_1.Name,
//				IpCidrRange:           pulumi.String("10.0.36.0/24"),
//				Region:                pulumi.String("us-central1"),
//				PrivateIpGoogleAccess: pulumi.Bool(true),
//				SecondaryIpRanges: compute.SubnetworkSecondaryIpRangeArray{
//					&compute.SubnetworkSecondaryIpRangeArgs{
//						RangeName:   pulumi.String("pod"),
//						IpCidrRange: pulumi.String("10.0.0.0/19"),
//					},
//					&compute.SubnetworkSecondaryIpRangeArgs{
//						RangeName:   pulumi.String("svc"),
//						IpCidrRange: pulumi.String("10.0.32.0/22"),
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = container.NewCluster(ctx, "cluster-1", &container.ClusterArgs{
//				Location:         pulumi.String("us-central1-c"),
//				InitialNodeCount: pulumi.Int(1),
//				NetworkingMode:   pulumi.String("VPC_NATIVE"),
//				DefaultSnatStatus: &container.ClusterDefaultSnatStatusArgs{
//					Disabled: pulumi.Bool(true),
//				},
//				Network:    network_1.Name,
//				Subnetwork: subnetwork_1.Name,
//				PrivateClusterConfig: &container.ClusterPrivateClusterConfigArgs{
//					EnablePrivateEndpoint: pulumi.Bool(true),
//					EnablePrivateNodes:    pulumi.Bool(true),
//					MasterIpv4CidrBlock:   pulumi.String("10.42.0.0/28"),
//					MasterGlobalAccessConfig: &container.ClusterPrivateClusterConfigMasterGlobalAccessConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//				MasterAuthorizedNetworksConfig: nil,
//				IpAllocationPolicy: &container.ClusterIpAllocationPolicyArgs{
//					ClusterSecondaryRangeName: subnetwork_1.SecondaryIpRanges.ApplyT(func(secondaryIpRanges []compute.SubnetworkSecondaryIpRange) (*string, error) {
//						return &secondaryIpRanges[0].RangeName, nil
//					}).(pulumi.StringPtrOutput),
//					ServicesSecondaryRangeName: subnetwork_1.SecondaryIpRanges.ApplyT(func(secondaryIpRanges []compute.SubnetworkSecondaryIpRange) (*string, error) {
//						return &secondaryIpRanges[1].RangeName, nil
//					}).(pulumi.StringPtrOutput),
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = dns.NewResponsePolicy(ctx, "example-response-policy", &dns.ResponsePolicyArgs{
//				ResponsePolicyName: pulumi.String("example-response-policy"),
//				Networks: dns.ResponsePolicyNetworkArray{
//					&dns.ResponsePolicyNetworkArgs{
//						NetworkUrl: network_1.ID(),
//					},
//					&dns.ResponsePolicyNetworkArgs{
//						NetworkUrl: network_2.ID(),
//					},
//				},
//				GkeClusters: dns.ResponsePolicyGkeClusterArray{
//					&dns.ResponsePolicyGkeClusterArgs{
//						GkeClusterName: cluster_1.ID(),
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # ResponsePolicy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:dns/responsePolicy:ResponsePolicy default projects/{{project}}/responsePolicies/{{response_policy_name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dns/responsePolicy:ResponsePolicy default {{project}}/{{response_policy_name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dns/responsePolicy:ResponsePolicy default {{response_policy_name}}
//
// ```
type ResponsePolicy struct {
	pulumi.CustomResourceState

	// The description of the response policy, such as `My new response policy`.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The list of Google Kubernetes Engine clusters that can see this zone.
	// Structure is documented below.
	GkeClusters ResponsePolicyGkeClusterArrayOutput `pulumi:"gkeClusters"`
	// The list of network names specifying networks to which this policy is applied.
	// Structure is documented below.
	Networks ResponsePolicyNetworkArrayOutput `pulumi:"networks"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The user assigned name for this Response Policy, such as `myresponsepolicy`.
	ResponsePolicyName pulumi.StringOutput `pulumi:"responsePolicyName"`
}

// NewResponsePolicy registers a new resource with the given unique name, arguments, and options.
func NewResponsePolicy(ctx *pulumi.Context,
	name string, args *ResponsePolicyArgs, opts ...pulumi.ResourceOption) (*ResponsePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResponsePolicyName == nil {
		return nil, errors.New("invalid value for required argument 'ResponsePolicyName'")
	}
	var resource ResponsePolicy
	err := ctx.RegisterResource("gcp:dns/responsePolicy:ResponsePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResponsePolicy gets an existing ResponsePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResponsePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResponsePolicyState, opts ...pulumi.ResourceOption) (*ResponsePolicy, error) {
	var resource ResponsePolicy
	err := ctx.ReadResource("gcp:dns/responsePolicy:ResponsePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResponsePolicy resources.
type responsePolicyState struct {
	// The description of the response policy, such as `My new response policy`.
	Description *string `pulumi:"description"`
	// The list of Google Kubernetes Engine clusters that can see this zone.
	// Structure is documented below.
	GkeClusters []ResponsePolicyGkeCluster `pulumi:"gkeClusters"`
	// The list of network names specifying networks to which this policy is applied.
	// Structure is documented below.
	Networks []ResponsePolicyNetwork `pulumi:"networks"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The user assigned name for this Response Policy, such as `myresponsepolicy`.
	ResponsePolicyName *string `pulumi:"responsePolicyName"`
}

type ResponsePolicyState struct {
	// The description of the response policy, such as `My new response policy`.
	Description pulumi.StringPtrInput
	// The list of Google Kubernetes Engine clusters that can see this zone.
	// Structure is documented below.
	GkeClusters ResponsePolicyGkeClusterArrayInput
	// The list of network names specifying networks to which this policy is applied.
	// Structure is documented below.
	Networks ResponsePolicyNetworkArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The user assigned name for this Response Policy, such as `myresponsepolicy`.
	ResponsePolicyName pulumi.StringPtrInput
}

func (ResponsePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*responsePolicyState)(nil)).Elem()
}

type responsePolicyArgs struct {
	// The description of the response policy, such as `My new response policy`.
	Description *string `pulumi:"description"`
	// The list of Google Kubernetes Engine clusters that can see this zone.
	// Structure is documented below.
	GkeClusters []ResponsePolicyGkeCluster `pulumi:"gkeClusters"`
	// The list of network names specifying networks to which this policy is applied.
	// Structure is documented below.
	Networks []ResponsePolicyNetwork `pulumi:"networks"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The user assigned name for this Response Policy, such as `myresponsepolicy`.
	ResponsePolicyName string `pulumi:"responsePolicyName"`
}

// The set of arguments for constructing a ResponsePolicy resource.
type ResponsePolicyArgs struct {
	// The description of the response policy, such as `My new response policy`.
	Description pulumi.StringPtrInput
	// The list of Google Kubernetes Engine clusters that can see this zone.
	// Structure is documented below.
	GkeClusters ResponsePolicyGkeClusterArrayInput
	// The list of network names specifying networks to which this policy is applied.
	// Structure is documented below.
	Networks ResponsePolicyNetworkArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The user assigned name for this Response Policy, such as `myresponsepolicy`.
	ResponsePolicyName pulumi.StringInput
}

func (ResponsePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*responsePolicyArgs)(nil)).Elem()
}

type ResponsePolicyInput interface {
	pulumi.Input

	ToResponsePolicyOutput() ResponsePolicyOutput
	ToResponsePolicyOutputWithContext(ctx context.Context) ResponsePolicyOutput
}

func (*ResponsePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponsePolicy)(nil)).Elem()
}

func (i *ResponsePolicy) ToResponsePolicyOutput() ResponsePolicyOutput {
	return i.ToResponsePolicyOutputWithContext(context.Background())
}

func (i *ResponsePolicy) ToResponsePolicyOutputWithContext(ctx context.Context) ResponsePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyOutput)
}

// ResponsePolicyArrayInput is an input type that accepts ResponsePolicyArray and ResponsePolicyArrayOutput values.
// You can construct a concrete instance of `ResponsePolicyArrayInput` via:
//
//	ResponsePolicyArray{ ResponsePolicyArgs{...} }
type ResponsePolicyArrayInput interface {
	pulumi.Input

	ToResponsePolicyArrayOutput() ResponsePolicyArrayOutput
	ToResponsePolicyArrayOutputWithContext(context.Context) ResponsePolicyArrayOutput
}

type ResponsePolicyArray []ResponsePolicyInput

func (ResponsePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResponsePolicy)(nil)).Elem()
}

func (i ResponsePolicyArray) ToResponsePolicyArrayOutput() ResponsePolicyArrayOutput {
	return i.ToResponsePolicyArrayOutputWithContext(context.Background())
}

func (i ResponsePolicyArray) ToResponsePolicyArrayOutputWithContext(ctx context.Context) ResponsePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyArrayOutput)
}

// ResponsePolicyMapInput is an input type that accepts ResponsePolicyMap and ResponsePolicyMapOutput values.
// You can construct a concrete instance of `ResponsePolicyMapInput` via:
//
//	ResponsePolicyMap{ "key": ResponsePolicyArgs{...} }
type ResponsePolicyMapInput interface {
	pulumi.Input

	ToResponsePolicyMapOutput() ResponsePolicyMapOutput
	ToResponsePolicyMapOutputWithContext(context.Context) ResponsePolicyMapOutput
}

type ResponsePolicyMap map[string]ResponsePolicyInput

func (ResponsePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResponsePolicy)(nil)).Elem()
}

func (i ResponsePolicyMap) ToResponsePolicyMapOutput() ResponsePolicyMapOutput {
	return i.ToResponsePolicyMapOutputWithContext(context.Background())
}

func (i ResponsePolicyMap) ToResponsePolicyMapOutputWithContext(ctx context.Context) ResponsePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyMapOutput)
}

type ResponsePolicyOutput struct{ *pulumi.OutputState }

func (ResponsePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponsePolicy)(nil)).Elem()
}

func (o ResponsePolicyOutput) ToResponsePolicyOutput() ResponsePolicyOutput {
	return o
}

func (o ResponsePolicyOutput) ToResponsePolicyOutputWithContext(ctx context.Context) ResponsePolicyOutput {
	return o
}

// The description of the response policy, such as `My new response policy`.
func (o ResponsePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResponsePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The list of Google Kubernetes Engine clusters that can see this zone.
// Structure is documented below.
func (o ResponsePolicyOutput) GkeClusters() ResponsePolicyGkeClusterArrayOutput {
	return o.ApplyT(func(v *ResponsePolicy) ResponsePolicyGkeClusterArrayOutput { return v.GkeClusters }).(ResponsePolicyGkeClusterArrayOutput)
}

// The list of network names specifying networks to which this policy is applied.
// Structure is documented below.
func (o ResponsePolicyOutput) Networks() ResponsePolicyNetworkArrayOutput {
	return o.ApplyT(func(v *ResponsePolicy) ResponsePolicyNetworkArrayOutput { return v.Networks }).(ResponsePolicyNetworkArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ResponsePolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ResponsePolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The user assigned name for this Response Policy, such as `myresponsepolicy`.
func (o ResponsePolicyOutput) ResponsePolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResponsePolicy) pulumi.StringOutput { return v.ResponsePolicyName }).(pulumi.StringOutput)
}

type ResponsePolicyArrayOutput struct{ *pulumi.OutputState }

func (ResponsePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResponsePolicy)(nil)).Elem()
}

func (o ResponsePolicyArrayOutput) ToResponsePolicyArrayOutput() ResponsePolicyArrayOutput {
	return o
}

func (o ResponsePolicyArrayOutput) ToResponsePolicyArrayOutputWithContext(ctx context.Context) ResponsePolicyArrayOutput {
	return o
}

func (o ResponsePolicyArrayOutput) Index(i pulumi.IntInput) ResponsePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResponsePolicy {
		return vs[0].([]*ResponsePolicy)[vs[1].(int)]
	}).(ResponsePolicyOutput)
}

type ResponsePolicyMapOutput struct{ *pulumi.OutputState }

func (ResponsePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResponsePolicy)(nil)).Elem()
}

func (o ResponsePolicyMapOutput) ToResponsePolicyMapOutput() ResponsePolicyMapOutput {
	return o
}

func (o ResponsePolicyMapOutput) ToResponsePolicyMapOutputWithContext(ctx context.Context) ResponsePolicyMapOutput {
	return o
}

func (o ResponsePolicyMapOutput) MapIndex(k pulumi.StringInput) ResponsePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResponsePolicy {
		return vs[0].(map[string]*ResponsePolicy)[vs[1].(string)]
	}).(ResponsePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyInput)(nil)).Elem(), &ResponsePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyArrayInput)(nil)).Elem(), ResponsePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyMapInput)(nil)).Elem(), ResponsePolicyMap{})
	pulumi.RegisterOutputType(ResponsePolicyOutput{})
	pulumi.RegisterOutputType(ResponsePolicyArrayOutput{})
	pulumi.RegisterOutputType(ResponsePolicyMapOutput{})
}
