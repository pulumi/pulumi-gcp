// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a set of DNS records within Google Cloud DNS. For more information see [the official documentation](https://cloud.google.com/dns/records/) and
// [API](https://cloud.google.com/dns/api/v1/resourceRecordSets).
//
// > **Note:** The provider treats this resource as an authoritative record set. This means existing records (including
// the default records) for the given type will be overwritten when you create this resource in the provider.
// In addition, the Google Cloud DNS API requires NS records to be present at all times, so the provider
// will not actually remove NS records during destroy but will report that it did.
//
// ## Example Usage
// ### Binding a DNS name to the ephemeral IP of a new instance:
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/compute"
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/dns"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		frontendInstance, err := compute.NewInstance(ctx, "frontendInstance", &compute.InstanceArgs{
// 			MachineType: pulumi.String("g1-small"),
// 			Zone:        pulumi.String("us-central1-b"),
// 			BootDisk: &compute.InstanceBootDiskArgs{
// 				InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
// 					Image: pulumi.String("debian-cloud/debian-9"),
// 				},
// 			},
// 			NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
// 				&compute.InstanceNetworkInterfaceArgs{
// 					Network: pulumi.String("default"),
// 					AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
// 						nil,
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		prod, err := dns.NewManagedZone(ctx, "prod", &dns.ManagedZoneArgs{
// 			DnsName: pulumi.String("prod.mydomain.com."),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = dns.NewRecordSet(ctx, "frontendRecordSet", &dns.RecordSetArgs{
// 			Name: prod.DnsName.ApplyT(func(dnsName string) (string, error) {
// 				return fmt.Sprintf("%v%v", "frontend.", dnsName), nil
// 			}).(pulumi.StringOutput),
// 			Type:        pulumi.String("A"),
// 			Ttl:         pulumi.Int(300),
// 			ManagedZone: prod.Name,
// 			Rrdatas: pulumi.StringArray{
// 				pulumi.String(frontendInstance.NetworkInterfaces.ApplyT(func(networkInterfaces []compute.InstanceNetworkInterface) (string, error) {
// 					return networkInterfaces[0].AccessConfigs[0].NatIp, nil
// 				}).(pulumi.StringOutput)),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Adding an A record
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/dns"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		prod, err := dns.NewManagedZone(ctx, "prod", &dns.ManagedZoneArgs{
// 			DnsName: pulumi.String("prod.mydomain.com."),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = dns.NewRecordSet(ctx, "recordSet", &dns.RecordSetArgs{
// 			Name: prod.DnsName.ApplyT(func(dnsName string) (string, error) {
// 				return fmt.Sprintf("%v%v", "backend.", dnsName), nil
// 			}).(pulumi.StringOutput),
// 			ManagedZone: prod.Name,
// 			Type:        pulumi.String("A"),
// 			Ttl:         pulumi.Int(300),
// 			Rrdatas: pulumi.StringArray{
// 				pulumi.String("8.8.8.8"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Adding an MX record
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/dns"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		prod, err := dns.NewManagedZone(ctx, "prod", &dns.ManagedZoneArgs{
// 			DnsName: pulumi.String("prod.mydomain.com."),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = dns.NewRecordSet(ctx, "mx", &dns.RecordSetArgs{
// 			Name:        prod.DnsName,
// 			ManagedZone: prod.Name,
// 			Type:        pulumi.String("MX"),
// 			Ttl:         pulumi.Int(3600),
// 			Rrdatas: pulumi.StringArray{
// 				pulumi.String("1 aspmx.l.google.com."),
// 				pulumi.String("5 alt1.aspmx.l.google.com."),
// 				pulumi.String("5 alt2.aspmx.l.google.com."),
// 				pulumi.String("10 alt3.aspmx.l.google.com."),
// 				pulumi.String("10 alt4.aspmx.l.google.com."),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Adding an SPF record
//
// Quotes (`""`) must be added around your `rrdatas` for a SPF record. Otherwise `rrdatas` string gets split on spaces.
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/dns"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		prod, err := dns.NewManagedZone(ctx, "prod", &dns.ManagedZoneArgs{
// 			DnsName: pulumi.String("prod.mydomain.com."),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = dns.NewRecordSet(ctx, "spf", &dns.RecordSetArgs{
// 			Name: prod.DnsName.ApplyT(func(dnsName string) (string, error) {
// 				return fmt.Sprintf("%v%v", "frontend.", dnsName), nil
// 			}).(pulumi.StringOutput),
// 			ManagedZone: prod.Name,
// 			Type:        pulumi.String("TXT"),
// 			Ttl:         pulumi.Int(300),
// 			Rrdatas: pulumi.StringArray{
// 				pulumi.String("\"v=spf1 ip4:111.111.111.111 include:backoff.email-example.com -all\""),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Adding a CNAME record
//
//  The list of `rrdatas` should only contain a single string corresponding to the Canonical Name intended.
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/dns"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		prod, err := dns.NewManagedZone(ctx, "prod", &dns.ManagedZoneArgs{
// 			DnsName: pulumi.String("prod.mydomain.com."),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = dns.NewRecordSet(ctx, "cname", &dns.RecordSetArgs{
// 			Name: prod.DnsName.ApplyT(func(dnsName string) (string, error) {
// 				return fmt.Sprintf("%v%v", "frontend.", dnsName), nil
// 			}).(pulumi.StringOutput),
// 			ManagedZone: prod.Name,
// 			Type:        pulumi.String("CNAME"),
// 			Ttl:         pulumi.Int(300),
// 			Rrdatas: pulumi.StringArray{
// 				pulumi.String("frontend.mydomain.com."),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// DNS record sets can be imported using either of these accepted formats
//
// ```sh
//  $ pulumi import gcp:dns/recordSet:RecordSet frontend {{project}}/{{zone}}/{{name}}/{{type}}
// ```
//
// ```sh
//  $ pulumi import gcp:dns/recordSet:RecordSet frontend {{zone}}/{{name}}/{{type}}
// ```
//
//  NoteThe record name must include the trailing dot at the end.
type RecordSet struct {
	pulumi.CustomResourceState

	// The name of the zone in which this record set will
	// reside.
	ManagedZone pulumi.StringOutput `pulumi:"managedZone"`
	// The DNS name this record set will apply to.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The string data for the records in this record set
	// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding `\"` if you don't want your string to get split on spaces. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g. `"first255characters\"\"morecharacters"`).
	Rrdatas pulumi.StringArrayOutput `pulumi:"rrdatas"`
	// The time-to-live of this record set (seconds).
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// The DNS record set type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRecordSet registers a new resource with the given unique name, arguments, and options.
func NewRecordSet(ctx *pulumi.Context,
	name string, args *RecordSetArgs, opts ...pulumi.ResourceOption) (*RecordSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagedZone == nil {
		return nil, errors.New("invalid value for required argument 'ManagedZone'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Rrdatas == nil {
		return nil, errors.New("invalid value for required argument 'Rrdatas'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource RecordSet
	err := ctx.RegisterResource("gcp:dns/recordSet:RecordSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecordSet gets an existing RecordSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecordSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordSetState, opts ...pulumi.ResourceOption) (*RecordSet, error) {
	var resource RecordSet
	err := ctx.ReadResource("gcp:dns/recordSet:RecordSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecordSet resources.
type recordSetState struct {
	// The name of the zone in which this record set will
	// reside.
	ManagedZone *string `pulumi:"managedZone"`
	// The DNS name this record set will apply to.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The string data for the records in this record set
	// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding `\"` if you don't want your string to get split on spaces. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g. `"first255characters\"\"morecharacters"`).
	Rrdatas []string `pulumi:"rrdatas"`
	// The time-to-live of this record set (seconds).
	Ttl *int `pulumi:"ttl"`
	// The DNS record set type.
	Type *string `pulumi:"type"`
}

type RecordSetState struct {
	// The name of the zone in which this record set will
	// reside.
	ManagedZone pulumi.StringPtrInput
	// The DNS name this record set will apply to.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The string data for the records in this record set
	// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding `\"` if you don't want your string to get split on spaces. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g. `"first255characters\"\"morecharacters"`).
	Rrdatas pulumi.StringArrayInput
	// The time-to-live of this record set (seconds).
	Ttl pulumi.IntPtrInput
	// The DNS record set type.
	Type pulumi.StringPtrInput
}

func (RecordSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordSetState)(nil)).Elem()
}

type recordSetArgs struct {
	// The name of the zone in which this record set will
	// reside.
	ManagedZone string `pulumi:"managedZone"`
	// The DNS name this record set will apply to.
	Name string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The string data for the records in this record set
	// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding `\"` if you don't want your string to get split on spaces. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g. `"first255characters\"\"morecharacters"`).
	Rrdatas []string `pulumi:"rrdatas"`
	// The time-to-live of this record set (seconds).
	Ttl int `pulumi:"ttl"`
	// The DNS record set type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a RecordSet resource.
type RecordSetArgs struct {
	// The name of the zone in which this record set will
	// reside.
	ManagedZone pulumi.StringInput
	// The DNS name this record set will apply to.
	Name pulumi.StringInput
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The string data for the records in this record set
	// whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding `\"` if you don't want your string to get split on spaces. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g. `"first255characters\"\"morecharacters"`).
	Rrdatas pulumi.StringArrayInput
	// The time-to-live of this record set (seconds).
	Ttl pulumi.IntInput
	// The DNS record set type.
	Type pulumi.StringInput
}

func (RecordSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordSetArgs)(nil)).Elem()
}

type RecordSetInput interface {
	pulumi.Input

	ToRecordSetOutput() RecordSetOutput
	ToRecordSetOutputWithContext(ctx context.Context) RecordSetOutput
}

func (*RecordSet) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSet)(nil))
}

func (i *RecordSet) ToRecordSetOutput() RecordSetOutput {
	return i.ToRecordSetOutputWithContext(context.Background())
}

func (i *RecordSet) ToRecordSetOutputWithContext(ctx context.Context) RecordSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetOutput)
}

type RecordSetOutput struct {
	*pulumi.OutputState
}

func (RecordSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSet)(nil))
}

func (o RecordSetOutput) ToRecordSetOutput() RecordSetOutput {
	return o
}

func (o RecordSetOutput) ToRecordSetOutputWithContext(ctx context.Context) RecordSetOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RecordSetOutput{})
}
