// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ManagedZoneDnssecConfig struct {
	// Specifies parameters that will be used for generating initial DnsKeys
	// for this ManagedZone. If you provide a spec for keySigning or zoneSigning,
	// you must also provide one for the other.
	// defaultKeySpecs can only be updated when the state is `off`.  Structure is documented below.
	DefaultKeySpecs []ManagedZoneDnssecConfigDefaultKeySpec `pulumi:"defaultKeySpecs"`
	// Identifies what kind of resource this is
	Kind *string `pulumi:"kind"`
	// Specifies the mechanism used to provide authenticated denial-of-existence responses.
	// nonExistence can only be updated when the state is `off`.
	NonExistence *string `pulumi:"nonExistence"`
	// Specifies whether DNSSEC is enabled, and what mode it is in
	State *string `pulumi:"state"`
}

// ManagedZoneDnssecConfigInput is an input type that accepts ManagedZoneDnssecConfigArgs and ManagedZoneDnssecConfigOutput values.
// You can construct a concrete instance of `ManagedZoneDnssecConfigInput` via:
//
// 		 ManagedZoneDnssecConfigArgs{...}
//
type ManagedZoneDnssecConfigInput interface {
	pulumi.Input

	ToManagedZoneDnssecConfigOutput() ManagedZoneDnssecConfigOutput
	ToManagedZoneDnssecConfigOutputWithContext(context.Context) ManagedZoneDnssecConfigOutput
}

type ManagedZoneDnssecConfigArgs struct {
	// Specifies parameters that will be used for generating initial DnsKeys
	// for this ManagedZone. If you provide a spec for keySigning or zoneSigning,
	// you must also provide one for the other.
	// defaultKeySpecs can only be updated when the state is `off`.  Structure is documented below.
	DefaultKeySpecs ManagedZoneDnssecConfigDefaultKeySpecArrayInput `pulumi:"defaultKeySpecs"`
	// Identifies what kind of resource this is
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Specifies the mechanism used to provide authenticated denial-of-existence responses.
	// nonExistence can only be updated when the state is `off`.
	NonExistence pulumi.StringPtrInput `pulumi:"nonExistence"`
	// Specifies whether DNSSEC is enabled, and what mode it is in
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (ManagedZoneDnssecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnssecConfig)(nil)).Elem()
}

func (i ManagedZoneDnssecConfigArgs) ToManagedZoneDnssecConfigOutput() ManagedZoneDnssecConfigOutput {
	return i.ToManagedZoneDnssecConfigOutputWithContext(context.Background())
}

func (i ManagedZoneDnssecConfigArgs) ToManagedZoneDnssecConfigOutputWithContext(ctx context.Context) ManagedZoneDnssecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnssecConfigOutput)
}

func (i ManagedZoneDnssecConfigArgs) ToManagedZoneDnssecConfigPtrOutput() ManagedZoneDnssecConfigPtrOutput {
	return i.ToManagedZoneDnssecConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneDnssecConfigArgs) ToManagedZoneDnssecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnssecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnssecConfigOutput).ToManagedZoneDnssecConfigPtrOutputWithContext(ctx)
}

// ManagedZoneDnssecConfigPtrInput is an input type that accepts ManagedZoneDnssecConfigArgs, ManagedZoneDnssecConfigPtr and ManagedZoneDnssecConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneDnssecConfigPtrInput` via:
//
// 		 ManagedZoneDnssecConfigArgs{...}
//
//  or:
//
// 		 nil
//
type ManagedZoneDnssecConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneDnssecConfigPtrOutput() ManagedZoneDnssecConfigPtrOutput
	ToManagedZoneDnssecConfigPtrOutputWithContext(context.Context) ManagedZoneDnssecConfigPtrOutput
}

type managedZoneDnssecConfigPtrType ManagedZoneDnssecConfigArgs

func ManagedZoneDnssecConfigPtr(v *ManagedZoneDnssecConfigArgs) ManagedZoneDnssecConfigPtrInput {
	return (*managedZoneDnssecConfigPtrType)(v)
}

func (*managedZoneDnssecConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneDnssecConfig)(nil)).Elem()
}

func (i *managedZoneDnssecConfigPtrType) ToManagedZoneDnssecConfigPtrOutput() ManagedZoneDnssecConfigPtrOutput {
	return i.ToManagedZoneDnssecConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneDnssecConfigPtrType) ToManagedZoneDnssecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnssecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnssecConfigPtrOutput)
}

type ManagedZoneDnssecConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnssecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnssecConfig)(nil)).Elem()
}

func (o ManagedZoneDnssecConfigOutput) ToManagedZoneDnssecConfigOutput() ManagedZoneDnssecConfigOutput {
	return o
}

func (o ManagedZoneDnssecConfigOutput) ToManagedZoneDnssecConfigOutputWithContext(ctx context.Context) ManagedZoneDnssecConfigOutput {
	return o
}

func (o ManagedZoneDnssecConfigOutput) ToManagedZoneDnssecConfigPtrOutput() ManagedZoneDnssecConfigPtrOutput {
	return o.ToManagedZoneDnssecConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneDnssecConfigOutput) ToManagedZoneDnssecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnssecConfigPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnssecConfig) *ManagedZoneDnssecConfig {
		return &v
	}).(ManagedZoneDnssecConfigPtrOutput)
}

// Specifies parameters that will be used for generating initial DnsKeys
// for this ManagedZone. If you provide a spec for keySigning or zoneSigning,
// you must also provide one for the other.
// defaultKeySpecs can only be updated when the state is `off`.  Structure is documented below.
func (o ManagedZoneDnssecConfigOutput) DefaultKeySpecs() ManagedZoneDnssecConfigDefaultKeySpecArrayOutput {
	return o.ApplyT(func(v ManagedZoneDnssecConfig) []ManagedZoneDnssecConfigDefaultKeySpec { return v.DefaultKeySpecs }).(ManagedZoneDnssecConfigDefaultKeySpecArrayOutput)
}

// Identifies what kind of resource this is
func (o ManagedZoneDnssecConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnssecConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Specifies the mechanism used to provide authenticated denial-of-existence responses.
// nonExistence can only be updated when the state is `off`.
func (o ManagedZoneDnssecConfigOutput) NonExistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnssecConfig) *string { return v.NonExistence }).(pulumi.StringPtrOutput)
}

// Specifies whether DNSSEC is enabled, and what mode it is in
func (o ManagedZoneDnssecConfigOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnssecConfig) *string { return v.State }).(pulumi.StringPtrOutput)
}

type ManagedZoneDnssecConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnssecConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneDnssecConfig)(nil)).Elem()
}

func (o ManagedZoneDnssecConfigPtrOutput) ToManagedZoneDnssecConfigPtrOutput() ManagedZoneDnssecConfigPtrOutput {
	return o
}

func (o ManagedZoneDnssecConfigPtrOutput) ToManagedZoneDnssecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnssecConfigPtrOutput {
	return o
}

func (o ManagedZoneDnssecConfigPtrOutput) Elem() ManagedZoneDnssecConfigOutput {
	return o.ApplyT(func(v *ManagedZoneDnssecConfig) ManagedZoneDnssecConfig { return *v }).(ManagedZoneDnssecConfigOutput)
}

// Specifies parameters that will be used for generating initial DnsKeys
// for this ManagedZone. If you provide a spec for keySigning or zoneSigning,
// you must also provide one for the other.
// defaultKeySpecs can only be updated when the state is `off`.  Structure is documented below.
func (o ManagedZoneDnssecConfigPtrOutput) DefaultKeySpecs() ManagedZoneDnssecConfigDefaultKeySpecArrayOutput {
	return o.ApplyT(func(v *ManagedZoneDnssecConfig) []ManagedZoneDnssecConfigDefaultKeySpec {
		if v == nil {
			return nil
		}
		return v.DefaultKeySpecs
	}).(ManagedZoneDnssecConfigDefaultKeySpecArrayOutput)
}

// Identifies what kind of resource this is
func (o ManagedZoneDnssecConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnssecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Specifies the mechanism used to provide authenticated denial-of-existence responses.
// nonExistence can only be updated when the state is `off`.
func (o ManagedZoneDnssecConfigPtrOutput) NonExistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnssecConfig) *string {
		if v == nil {
			return nil
		}
		return v.NonExistence
	}).(pulumi.StringPtrOutput)
}

// Specifies whether DNSSEC is enabled, and what mode it is in
func (o ManagedZoneDnssecConfigPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnssecConfig) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

type ManagedZoneDnssecConfigDefaultKeySpec struct {
	// String mnemonic specifying the DNSSEC algorithm of this key
	Algorithm *string `pulumi:"algorithm"`
	// Length of the keys in bits
	KeyLength *int `pulumi:"keyLength"`
	// Specifies whether this is a key signing key (KSK) or a zone
	// signing key (ZSK). Key signing keys have the Secure Entry
	// Point flag set and, when active, will only be used to sign
	// resource record sets of type DNSKEY. Zone signing keys do
	// not have the Secure Entry Point flag set and will be used
	// to sign all other types of resource record sets.
	KeyType *string `pulumi:"keyType"`
	// Identifies what kind of resource this is
	Kind *string `pulumi:"kind"`
}

// ManagedZoneDnssecConfigDefaultKeySpecInput is an input type that accepts ManagedZoneDnssecConfigDefaultKeySpecArgs and ManagedZoneDnssecConfigDefaultKeySpecOutput values.
// You can construct a concrete instance of `ManagedZoneDnssecConfigDefaultKeySpecInput` via:
//
// 		 ManagedZoneDnssecConfigDefaultKeySpecArgs{...}
//
type ManagedZoneDnssecConfigDefaultKeySpecInput interface {
	pulumi.Input

	ToManagedZoneDnssecConfigDefaultKeySpecOutput() ManagedZoneDnssecConfigDefaultKeySpecOutput
	ToManagedZoneDnssecConfigDefaultKeySpecOutputWithContext(context.Context) ManagedZoneDnssecConfigDefaultKeySpecOutput
}

type ManagedZoneDnssecConfigDefaultKeySpecArgs struct {
	// String mnemonic specifying the DNSSEC algorithm of this key
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// Length of the keys in bits
	KeyLength pulumi.IntPtrInput `pulumi:"keyLength"`
	// Specifies whether this is a key signing key (KSK) or a zone
	// signing key (ZSK). Key signing keys have the Secure Entry
	// Point flag set and, when active, will only be used to sign
	// resource record sets of type DNSKEY. Zone signing keys do
	// not have the Secure Entry Point flag set and will be used
	// to sign all other types of resource record sets.
	KeyType pulumi.StringPtrInput `pulumi:"keyType"`
	// Identifies what kind of resource this is
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (ManagedZoneDnssecConfigDefaultKeySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnssecConfigDefaultKeySpec)(nil)).Elem()
}

func (i ManagedZoneDnssecConfigDefaultKeySpecArgs) ToManagedZoneDnssecConfigDefaultKeySpecOutput() ManagedZoneDnssecConfigDefaultKeySpecOutput {
	return i.ToManagedZoneDnssecConfigDefaultKeySpecOutputWithContext(context.Background())
}

func (i ManagedZoneDnssecConfigDefaultKeySpecArgs) ToManagedZoneDnssecConfigDefaultKeySpecOutputWithContext(ctx context.Context) ManagedZoneDnssecConfigDefaultKeySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnssecConfigDefaultKeySpecOutput)
}

// ManagedZoneDnssecConfigDefaultKeySpecArrayInput is an input type that accepts ManagedZoneDnssecConfigDefaultKeySpecArray and ManagedZoneDnssecConfigDefaultKeySpecArrayOutput values.
// You can construct a concrete instance of `ManagedZoneDnssecConfigDefaultKeySpecArrayInput` via:
//
// 		 ManagedZoneDnssecConfigDefaultKeySpecArray{ ManagedZoneDnssecConfigDefaultKeySpecArgs{...} }
//
type ManagedZoneDnssecConfigDefaultKeySpecArrayInput interface {
	pulumi.Input

	ToManagedZoneDnssecConfigDefaultKeySpecArrayOutput() ManagedZoneDnssecConfigDefaultKeySpecArrayOutput
	ToManagedZoneDnssecConfigDefaultKeySpecArrayOutputWithContext(context.Context) ManagedZoneDnssecConfigDefaultKeySpecArrayOutput
}

type ManagedZoneDnssecConfigDefaultKeySpecArray []ManagedZoneDnssecConfigDefaultKeySpecInput

func (ManagedZoneDnssecConfigDefaultKeySpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneDnssecConfigDefaultKeySpec)(nil)).Elem()
}

func (i ManagedZoneDnssecConfigDefaultKeySpecArray) ToManagedZoneDnssecConfigDefaultKeySpecArrayOutput() ManagedZoneDnssecConfigDefaultKeySpecArrayOutput {
	return i.ToManagedZoneDnssecConfigDefaultKeySpecArrayOutputWithContext(context.Background())
}

func (i ManagedZoneDnssecConfigDefaultKeySpecArray) ToManagedZoneDnssecConfigDefaultKeySpecArrayOutputWithContext(ctx context.Context) ManagedZoneDnssecConfigDefaultKeySpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnssecConfigDefaultKeySpecArrayOutput)
}

type ManagedZoneDnssecConfigDefaultKeySpecOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnssecConfigDefaultKeySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnssecConfigDefaultKeySpec)(nil)).Elem()
}

func (o ManagedZoneDnssecConfigDefaultKeySpecOutput) ToManagedZoneDnssecConfigDefaultKeySpecOutput() ManagedZoneDnssecConfigDefaultKeySpecOutput {
	return o
}

func (o ManagedZoneDnssecConfigDefaultKeySpecOutput) ToManagedZoneDnssecConfigDefaultKeySpecOutputWithContext(ctx context.Context) ManagedZoneDnssecConfigDefaultKeySpecOutput {
	return o
}

// String mnemonic specifying the DNSSEC algorithm of this key
func (o ManagedZoneDnssecConfigDefaultKeySpecOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnssecConfigDefaultKeySpec) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// Length of the keys in bits
func (o ManagedZoneDnssecConfigDefaultKeySpecOutput) KeyLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnssecConfigDefaultKeySpec) *int { return v.KeyLength }).(pulumi.IntPtrOutput)
}

// Specifies whether this is a key signing key (KSK) or a zone
// signing key (ZSK). Key signing keys have the Secure Entry
// Point flag set and, when active, will only be used to sign
// resource record sets of type DNSKEY. Zone signing keys do
// not have the Secure Entry Point flag set and will be used
// to sign all other types of resource record sets.
func (o ManagedZoneDnssecConfigDefaultKeySpecOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnssecConfigDefaultKeySpec) *string { return v.KeyType }).(pulumi.StringPtrOutput)
}

// Identifies what kind of resource this is
func (o ManagedZoneDnssecConfigDefaultKeySpecOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnssecConfigDefaultKeySpec) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ManagedZoneDnssecConfigDefaultKeySpecArrayOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnssecConfigDefaultKeySpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneDnssecConfigDefaultKeySpec)(nil)).Elem()
}

func (o ManagedZoneDnssecConfigDefaultKeySpecArrayOutput) ToManagedZoneDnssecConfigDefaultKeySpecArrayOutput() ManagedZoneDnssecConfigDefaultKeySpecArrayOutput {
	return o
}

func (o ManagedZoneDnssecConfigDefaultKeySpecArrayOutput) ToManagedZoneDnssecConfigDefaultKeySpecArrayOutputWithContext(ctx context.Context) ManagedZoneDnssecConfigDefaultKeySpecArrayOutput {
	return o
}

func (o ManagedZoneDnssecConfigDefaultKeySpecArrayOutput) Index(i pulumi.IntInput) ManagedZoneDnssecConfigDefaultKeySpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZoneDnssecConfigDefaultKeySpec {
		return vs[0].([]ManagedZoneDnssecConfigDefaultKeySpec)[vs[1].(int)]
	}).(ManagedZoneDnssecConfigDefaultKeySpecOutput)
}

type ManagedZoneForwardingConfig struct {
	// List of target name servers to forward to. Cloud DNS will
	// select the best available name server if more than
	// one target is given.  Structure is documented below.
	TargetNameServers []ManagedZoneForwardingConfigTargetNameServer `pulumi:"targetNameServers"`
}

// ManagedZoneForwardingConfigInput is an input type that accepts ManagedZoneForwardingConfigArgs and ManagedZoneForwardingConfigOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigInput` via:
//
// 		 ManagedZoneForwardingConfigArgs{...}
//
type ManagedZoneForwardingConfigInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigOutput() ManagedZoneForwardingConfigOutput
	ToManagedZoneForwardingConfigOutputWithContext(context.Context) ManagedZoneForwardingConfigOutput
}

type ManagedZoneForwardingConfigArgs struct {
	// List of target name servers to forward to. Cloud DNS will
	// select the best available name server if more than
	// one target is given.  Structure is documented below.
	TargetNameServers ManagedZoneForwardingConfigTargetNameServerArrayInput `pulumi:"targetNameServers"`
}

func (ManagedZoneForwardingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfig)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigOutput() ManagedZoneForwardingConfigOutput {
	return i.ToManagedZoneForwardingConfigOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigOutput)
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return i.ToManagedZoneForwardingConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigOutput).ToManagedZoneForwardingConfigPtrOutputWithContext(ctx)
}

// ManagedZoneForwardingConfigPtrInput is an input type that accepts ManagedZoneForwardingConfigArgs, ManagedZoneForwardingConfigPtr and ManagedZoneForwardingConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigPtrInput` via:
//
// 		 ManagedZoneForwardingConfigArgs{...}
//
//  or:
//
// 		 nil
//
type ManagedZoneForwardingConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput
	ToManagedZoneForwardingConfigPtrOutputWithContext(context.Context) ManagedZoneForwardingConfigPtrOutput
}

type managedZoneForwardingConfigPtrType ManagedZoneForwardingConfigArgs

func ManagedZoneForwardingConfigPtr(v *ManagedZoneForwardingConfigArgs) ManagedZoneForwardingConfigPtrInput {
	return (*managedZoneForwardingConfigPtrType)(v)
}

func (*managedZoneForwardingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneForwardingConfig)(nil)).Elem()
}

func (i *managedZoneForwardingConfigPtrType) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return i.ToManagedZoneForwardingConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneForwardingConfigPtrType) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigPtrOutput)
}

type ManagedZoneForwardingConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfig)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigOutput() ManagedZoneForwardingConfigOutput {
	return o
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigOutput {
	return o
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return o.ToManagedZoneForwardingConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfig) *ManagedZoneForwardingConfig {
		return &v
	}).(ManagedZoneForwardingConfigPtrOutput)
}

// List of target name servers to forward to. Cloud DNS will
// select the best available name server if more than
// one target is given.  Structure is documented below.
func (o ManagedZoneForwardingConfigOutput) TargetNameServers() ManagedZoneForwardingConfigTargetNameServerArrayOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfig) []ManagedZoneForwardingConfigTargetNameServer {
		return v.TargetNameServers
	}).(ManagedZoneForwardingConfigTargetNameServerArrayOutput)
}

type ManagedZoneForwardingConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneForwardingConfig)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigPtrOutput) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return o
}

func (o ManagedZoneForwardingConfigPtrOutput) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return o
}

func (o ManagedZoneForwardingConfigPtrOutput) Elem() ManagedZoneForwardingConfigOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfig) ManagedZoneForwardingConfig { return *v }).(ManagedZoneForwardingConfigOutput)
}

// List of target name servers to forward to. Cloud DNS will
// select the best available name server if more than
// one target is given.  Structure is documented below.
func (o ManagedZoneForwardingConfigPtrOutput) TargetNameServers() ManagedZoneForwardingConfigTargetNameServerArrayOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfig) []ManagedZoneForwardingConfigTargetNameServer {
		if v == nil {
			return nil
		}
		return v.TargetNameServers
	}).(ManagedZoneForwardingConfigTargetNameServerArrayOutput)
}

type ManagedZoneForwardingConfigTargetNameServer struct {
	// Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
	// decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
	// to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
	ForwardingPath *string `pulumi:"forwardingPath"`
	// IPv4 address of a target name server.
	Ipv4Address string `pulumi:"ipv4Address"`
}

// ManagedZoneForwardingConfigTargetNameServerInput is an input type that accepts ManagedZoneForwardingConfigTargetNameServerArgs and ManagedZoneForwardingConfigTargetNameServerOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigTargetNameServerInput` via:
//
// 		 ManagedZoneForwardingConfigTargetNameServerArgs{...}
//
type ManagedZoneForwardingConfigTargetNameServerInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigTargetNameServerOutput() ManagedZoneForwardingConfigTargetNameServerOutput
	ToManagedZoneForwardingConfigTargetNameServerOutputWithContext(context.Context) ManagedZoneForwardingConfigTargetNameServerOutput
}

type ManagedZoneForwardingConfigTargetNameServerArgs struct {
	// Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
	// decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
	// to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
	ForwardingPath pulumi.StringPtrInput `pulumi:"forwardingPath"`
	// IPv4 address of a target name server.
	Ipv4Address pulumi.StringInput `pulumi:"ipv4Address"`
}

func (ManagedZoneForwardingConfigTargetNameServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigTargetNameServer)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigTargetNameServerArgs) ToManagedZoneForwardingConfigTargetNameServerOutput() ManagedZoneForwardingConfigTargetNameServerOutput {
	return i.ToManagedZoneForwardingConfigTargetNameServerOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigTargetNameServerArgs) ToManagedZoneForwardingConfigTargetNameServerOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigTargetNameServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigTargetNameServerOutput)
}

// ManagedZoneForwardingConfigTargetNameServerArrayInput is an input type that accepts ManagedZoneForwardingConfigTargetNameServerArray and ManagedZoneForwardingConfigTargetNameServerArrayOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigTargetNameServerArrayInput` via:
//
// 		 ManagedZoneForwardingConfigTargetNameServerArray{ ManagedZoneForwardingConfigTargetNameServerArgs{...} }
//
type ManagedZoneForwardingConfigTargetNameServerArrayInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigTargetNameServerArrayOutput() ManagedZoneForwardingConfigTargetNameServerArrayOutput
	ToManagedZoneForwardingConfigTargetNameServerArrayOutputWithContext(context.Context) ManagedZoneForwardingConfigTargetNameServerArrayOutput
}

type ManagedZoneForwardingConfigTargetNameServerArray []ManagedZoneForwardingConfigTargetNameServerInput

func (ManagedZoneForwardingConfigTargetNameServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneForwardingConfigTargetNameServer)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigTargetNameServerArray) ToManagedZoneForwardingConfigTargetNameServerArrayOutput() ManagedZoneForwardingConfigTargetNameServerArrayOutput {
	return i.ToManagedZoneForwardingConfigTargetNameServerArrayOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigTargetNameServerArray) ToManagedZoneForwardingConfigTargetNameServerArrayOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigTargetNameServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigTargetNameServerArrayOutput)
}

type ManagedZoneForwardingConfigTargetNameServerOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigTargetNameServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigTargetNameServer)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigTargetNameServerOutput) ToManagedZoneForwardingConfigTargetNameServerOutput() ManagedZoneForwardingConfigTargetNameServerOutput {
	return o
}

func (o ManagedZoneForwardingConfigTargetNameServerOutput) ToManagedZoneForwardingConfigTargetNameServerOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigTargetNameServerOutput {
	return o
}

// Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
// decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
// to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
func (o ManagedZoneForwardingConfigTargetNameServerOutput) ForwardingPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigTargetNameServer) *string { return v.ForwardingPath }).(pulumi.StringPtrOutput)
}

// IPv4 address of a target name server.
func (o ManagedZoneForwardingConfigTargetNameServerOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigTargetNameServer) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

type ManagedZoneForwardingConfigTargetNameServerArrayOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigTargetNameServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneForwardingConfigTargetNameServer)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigTargetNameServerArrayOutput) ToManagedZoneForwardingConfigTargetNameServerArrayOutput() ManagedZoneForwardingConfigTargetNameServerArrayOutput {
	return o
}

func (o ManagedZoneForwardingConfigTargetNameServerArrayOutput) ToManagedZoneForwardingConfigTargetNameServerArrayOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigTargetNameServerArrayOutput {
	return o
}

func (o ManagedZoneForwardingConfigTargetNameServerArrayOutput) Index(i pulumi.IntInput) ManagedZoneForwardingConfigTargetNameServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZoneForwardingConfigTargetNameServer {
		return vs[0].([]ManagedZoneForwardingConfigTargetNameServer)[vs[1].(int)]
	}).(ManagedZoneForwardingConfigTargetNameServerOutput)
}

type ManagedZonePeeringConfig struct {
	// The network with which to peer.  Structure is documented below.
	TargetNetwork ManagedZonePeeringConfigTargetNetwork `pulumi:"targetNetwork"`
}

// ManagedZonePeeringConfigInput is an input type that accepts ManagedZonePeeringConfigArgs and ManagedZonePeeringConfigOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigInput` via:
//
// 		 ManagedZonePeeringConfigArgs{...}
//
type ManagedZonePeeringConfigInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigOutput() ManagedZonePeeringConfigOutput
	ToManagedZonePeeringConfigOutputWithContext(context.Context) ManagedZonePeeringConfigOutput
}

type ManagedZonePeeringConfigArgs struct {
	// The network with which to peer.  Structure is documented below.
	TargetNetwork ManagedZonePeeringConfigTargetNetworkInput `pulumi:"targetNetwork"`
}

func (ManagedZonePeeringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfig)(nil)).Elem()
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigOutput() ManagedZonePeeringConfigOutput {
	return i.ToManagedZonePeeringConfigOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigOutputWithContext(ctx context.Context) ManagedZonePeeringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigOutput)
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return i.ToManagedZonePeeringConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigOutput).ToManagedZonePeeringConfigPtrOutputWithContext(ctx)
}

// ManagedZonePeeringConfigPtrInput is an input type that accepts ManagedZonePeeringConfigArgs, ManagedZonePeeringConfigPtr and ManagedZonePeeringConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigPtrInput` via:
//
// 		 ManagedZonePeeringConfigArgs{...}
//
//  or:
//
// 		 nil
//
type ManagedZonePeeringConfigPtrInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput
	ToManagedZonePeeringConfigPtrOutputWithContext(context.Context) ManagedZonePeeringConfigPtrOutput
}

type managedZonePeeringConfigPtrType ManagedZonePeeringConfigArgs

func ManagedZonePeeringConfigPtr(v *ManagedZonePeeringConfigArgs) ManagedZonePeeringConfigPtrInput {
	return (*managedZonePeeringConfigPtrType)(v)
}

func (*managedZonePeeringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfig)(nil)).Elem()
}

func (i *managedZonePeeringConfigPtrType) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return i.ToManagedZonePeeringConfigPtrOutputWithContext(context.Background())
}

func (i *managedZonePeeringConfigPtrType) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigPtrOutput)
}

type ManagedZonePeeringConfigOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfig)(nil)).Elem()
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigOutput() ManagedZonePeeringConfigOutput {
	return o
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigOutputWithContext(ctx context.Context) ManagedZonePeeringConfigOutput {
	return o
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return o.ToManagedZonePeeringConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfig) *ManagedZonePeeringConfig {
		return &v
	}).(ManagedZonePeeringConfigPtrOutput)
}

// The network with which to peer.  Structure is documented below.
func (o ManagedZonePeeringConfigOutput) TargetNetwork() ManagedZonePeeringConfigTargetNetworkOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfig) ManagedZonePeeringConfigTargetNetwork { return v.TargetNetwork }).(ManagedZonePeeringConfigTargetNetworkOutput)
}

type ManagedZonePeeringConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfig)(nil)).Elem()
}

func (o ManagedZonePeeringConfigPtrOutput) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigPtrOutput) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigPtrOutput) Elem() ManagedZonePeeringConfigOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfig) ManagedZonePeeringConfig { return *v }).(ManagedZonePeeringConfigOutput)
}

// The network with which to peer.  Structure is documented below.
func (o ManagedZonePeeringConfigPtrOutput) TargetNetwork() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfig) *ManagedZonePeeringConfigTargetNetwork {
		if v == nil {
			return nil
		}
		return &v.TargetNetwork
	}).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

type ManagedZonePeeringConfigTargetNetwork struct {
	// The fully qualified URL of the VPC network to forward queries to.
	// This should be formatted like
	// `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
	NetworkUrl string `pulumi:"networkUrl"`
}

// ManagedZonePeeringConfigTargetNetworkInput is an input type that accepts ManagedZonePeeringConfigTargetNetworkArgs and ManagedZonePeeringConfigTargetNetworkOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigTargetNetworkInput` via:
//
// 		 ManagedZonePeeringConfigTargetNetworkArgs{...}
//
type ManagedZonePeeringConfigTargetNetworkInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigTargetNetworkOutput() ManagedZonePeeringConfigTargetNetworkOutput
	ToManagedZonePeeringConfigTargetNetworkOutputWithContext(context.Context) ManagedZonePeeringConfigTargetNetworkOutput
}

type ManagedZonePeeringConfigTargetNetworkArgs struct {
	// The fully qualified URL of the VPC network to forward queries to.
	// This should be formatted like
	// `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
	NetworkUrl pulumi.StringInput `pulumi:"networkUrl"`
}

func (ManagedZonePeeringConfigTargetNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkOutput() ManagedZonePeeringConfigTargetNetworkOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkOutput)
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkOutput).ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx)
}

// ManagedZonePeeringConfigTargetNetworkPtrInput is an input type that accepts ManagedZonePeeringConfigTargetNetworkArgs, ManagedZonePeeringConfigTargetNetworkPtr and ManagedZonePeeringConfigTargetNetworkPtrOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigTargetNetworkPtrInput` via:
//
// 		 ManagedZonePeeringConfigTargetNetworkArgs{...}
//
//  or:
//
// 		 nil
//
type ManagedZonePeeringConfigTargetNetworkPtrInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput
	ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput
}

type managedZonePeeringConfigTargetNetworkPtrType ManagedZonePeeringConfigTargetNetworkArgs

func ManagedZonePeeringConfigTargetNetworkPtr(v *ManagedZonePeeringConfigTargetNetworkArgs) ManagedZonePeeringConfigTargetNetworkPtrInput {
	return (*managedZonePeeringConfigTargetNetworkPtrType)(v)
}

func (*managedZonePeeringConfigTargetNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (i *managedZonePeeringConfigTargetNetworkPtrType) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Background())
}

func (i *managedZonePeeringConfigTargetNetworkPtrType) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

type ManagedZonePeeringConfigTargetNetworkOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigTargetNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkOutput() ManagedZonePeeringConfigTargetNetworkOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Background())
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetwork) *ManagedZonePeeringConfigTargetNetwork {
		return &v
	}).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

// The fully qualified URL of the VPC network to forward queries to.
// This should be formatted like
// `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
func (o ManagedZonePeeringConfigTargetNetworkOutput) NetworkUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetwork) string { return v.NetworkUrl }).(pulumi.StringOutput)
}

type ManagedZonePeeringConfigTargetNetworkPtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigTargetNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) Elem() ManagedZonePeeringConfigTargetNetworkOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) ManagedZonePeeringConfigTargetNetwork { return *v }).(ManagedZonePeeringConfigTargetNetworkOutput)
}

// The fully qualified URL of the VPC network to forward queries to.
// This should be formatted like
// `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.NetworkUrl
	}).(pulumi.StringPtrOutput)
}

type ManagedZonePrivateVisibilityConfig struct {
	Networks []ManagedZonePrivateVisibilityConfigNetwork `pulumi:"networks"`
}

// ManagedZonePrivateVisibilityConfigInput is an input type that accepts ManagedZonePrivateVisibilityConfigArgs and ManagedZonePrivateVisibilityConfigOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigInput` via:
//
// 		 ManagedZonePrivateVisibilityConfigArgs{...}
//
type ManagedZonePrivateVisibilityConfigInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigOutput() ManagedZonePrivateVisibilityConfigOutput
	ToManagedZonePrivateVisibilityConfigOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigOutput
}

type ManagedZonePrivateVisibilityConfigArgs struct {
	Networks ManagedZonePrivateVisibilityConfigNetworkArrayInput `pulumi:"networks"`
}

func (ManagedZonePrivateVisibilityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigOutput() ManagedZonePrivateVisibilityConfigOutput {
	return i.ToManagedZonePrivateVisibilityConfigOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigOutput)
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return i.ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigOutput).ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx)
}

// ManagedZonePrivateVisibilityConfigPtrInput is an input type that accepts ManagedZonePrivateVisibilityConfigArgs, ManagedZonePrivateVisibilityConfigPtr and ManagedZonePrivateVisibilityConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigPtrInput` via:
//
// 		 ManagedZonePrivateVisibilityConfigArgs{...}
//
//  or:
//
// 		 nil
//
type ManagedZonePrivateVisibilityConfigPtrInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput
	ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigPtrOutput
}

type managedZonePrivateVisibilityConfigPtrType ManagedZonePrivateVisibilityConfigArgs

func ManagedZonePrivateVisibilityConfigPtr(v *ManagedZonePrivateVisibilityConfigArgs) ManagedZonePrivateVisibilityConfigPtrInput {
	return (*managedZonePrivateVisibilityConfigPtrType)(v)
}

func (*managedZonePrivateVisibilityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (i *managedZonePrivateVisibilityConfigPtrType) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return i.ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Background())
}

func (i *managedZonePrivateVisibilityConfigPtrType) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigPtrOutput)
}

type ManagedZonePrivateVisibilityConfigOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigOutput() ManagedZonePrivateVisibilityConfigOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return o.ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfig) *ManagedZonePrivateVisibilityConfig {
		return &v
	}).(ManagedZonePrivateVisibilityConfigPtrOutput)
}
func (o ManagedZonePrivateVisibilityConfigOutput) Networks() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfig) []ManagedZonePrivateVisibilityConfigNetwork {
		return v.Networks
	}).(ManagedZonePrivateVisibilityConfigNetworkArrayOutput)
}

type ManagedZonePrivateVisibilityConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) Elem() ManagedZonePrivateVisibilityConfigOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) ManagedZonePrivateVisibilityConfig { return *v }).(ManagedZonePrivateVisibilityConfigOutput)
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) Networks() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) []ManagedZonePrivateVisibilityConfigNetwork {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(ManagedZonePrivateVisibilityConfigNetworkArrayOutput)
}

type ManagedZonePrivateVisibilityConfigNetwork struct {
	// The fully qualified URL of the VPC network to forward queries to.
	// This should be formatted like
	// `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
	NetworkUrl string `pulumi:"networkUrl"`
}

// ManagedZonePrivateVisibilityConfigNetworkInput is an input type that accepts ManagedZonePrivateVisibilityConfigNetworkArgs and ManagedZonePrivateVisibilityConfigNetworkOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigNetworkInput` via:
//
// 		 ManagedZonePrivateVisibilityConfigNetworkArgs{...}
//
type ManagedZonePrivateVisibilityConfigNetworkInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigNetworkOutput() ManagedZonePrivateVisibilityConfigNetworkOutput
	ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigNetworkOutput
}

type ManagedZonePrivateVisibilityConfigNetworkArgs struct {
	// The fully qualified URL of the VPC network to forward queries to.
	// This should be formatted like
	// `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
	NetworkUrl pulumi.StringInput `pulumi:"networkUrl"`
}

func (ManagedZonePrivateVisibilityConfigNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigNetworkArgs) ToManagedZonePrivateVisibilityConfigNetworkOutput() ManagedZonePrivateVisibilityConfigNetworkOutput {
	return i.ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigNetworkArgs) ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigNetworkOutput)
}

// ManagedZonePrivateVisibilityConfigNetworkArrayInput is an input type that accepts ManagedZonePrivateVisibilityConfigNetworkArray and ManagedZonePrivateVisibilityConfigNetworkArrayOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigNetworkArrayInput` via:
//
// 		 ManagedZonePrivateVisibilityConfigNetworkArray{ ManagedZonePrivateVisibilityConfigNetworkArgs{...} }
//
type ManagedZonePrivateVisibilityConfigNetworkArrayInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigNetworkArrayOutput() ManagedZonePrivateVisibilityConfigNetworkArrayOutput
	ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigNetworkArrayOutput
}

type ManagedZonePrivateVisibilityConfigNetworkArray []ManagedZonePrivateVisibilityConfigNetworkInput

func (ManagedZonePrivateVisibilityConfigNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigNetworkArray) ToManagedZonePrivateVisibilityConfigNetworkArrayOutput() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return i.ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigNetworkArray) ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigNetworkArrayOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigNetworkOutput) ToManagedZonePrivateVisibilityConfigNetworkOutput() ManagedZonePrivateVisibilityConfigNetworkOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkOutput) ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkOutput {
	return o
}

// The fully qualified URL of the VPC network to forward queries to.
// This should be formatted like
// `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
func (o ManagedZonePrivateVisibilityConfigNetworkOutput) NetworkUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigNetwork) string { return v.NetworkUrl }).(pulumi.StringOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkArrayOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigNetworkArrayOutput) ToManagedZonePrivateVisibilityConfigNetworkArrayOutput() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkArrayOutput) ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkArrayOutput) Index(i pulumi.IntInput) ManagedZonePrivateVisibilityConfigNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZonePrivateVisibilityConfigNetwork {
		return vs[0].([]ManagedZonePrivateVisibilityConfigNetwork)[vs[1].(int)]
	}).(ManagedZonePrivateVisibilityConfigNetworkOutput)
}

type PolicyAlternativeNameServerConfig struct {
	// Sets an alternative name server for the associated networks. When specified,
	// all DNS queries are forwarded to a name server that you choose. Names such as .internal
	// are not available when an alternative name server is specified.  Structure is documented below.
	TargetNameServers []PolicyAlternativeNameServerConfigTargetNameServer `pulumi:"targetNameServers"`
}

// PolicyAlternativeNameServerConfigInput is an input type that accepts PolicyAlternativeNameServerConfigArgs and PolicyAlternativeNameServerConfigOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigInput` via:
//
// 		 PolicyAlternativeNameServerConfigArgs{...}
//
type PolicyAlternativeNameServerConfigInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigOutput() PolicyAlternativeNameServerConfigOutput
	ToPolicyAlternativeNameServerConfigOutputWithContext(context.Context) PolicyAlternativeNameServerConfigOutput
}

type PolicyAlternativeNameServerConfigArgs struct {
	// Sets an alternative name server for the associated networks. When specified,
	// all DNS queries are forwarded to a name server that you choose. Names such as .internal
	// are not available when an alternative name server is specified.  Structure is documented below.
	TargetNameServers PolicyAlternativeNameServerConfigTargetNameServerArrayInput `pulumi:"targetNameServers"`
}

func (PolicyAlternativeNameServerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigOutput() PolicyAlternativeNameServerConfigOutput {
	return i.ToPolicyAlternativeNameServerConfigOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigOutput)
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return i.ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigOutput).ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx)
}

// PolicyAlternativeNameServerConfigPtrInput is an input type that accepts PolicyAlternativeNameServerConfigArgs, PolicyAlternativeNameServerConfigPtr and PolicyAlternativeNameServerConfigPtrOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigPtrInput` via:
//
// 		 PolicyAlternativeNameServerConfigArgs{...}
//
//  or:
//
// 		 nil
//
type PolicyAlternativeNameServerConfigPtrInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput
	ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Context) PolicyAlternativeNameServerConfigPtrOutput
}

type policyAlternativeNameServerConfigPtrType PolicyAlternativeNameServerConfigArgs

func PolicyAlternativeNameServerConfigPtr(v *PolicyAlternativeNameServerConfigArgs) PolicyAlternativeNameServerConfigPtrInput {
	return (*policyAlternativeNameServerConfigPtrType)(v)
}

func (*policyAlternativeNameServerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (i *policyAlternativeNameServerConfigPtrType) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return i.ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Background())
}

func (i *policyAlternativeNameServerConfigPtrType) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigPtrOutput)
}

type PolicyAlternativeNameServerConfigOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigOutput() PolicyAlternativeNameServerConfigOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return o.ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Background())
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfig) *PolicyAlternativeNameServerConfig {
		return &v
	}).(PolicyAlternativeNameServerConfigPtrOutput)
}

// Sets an alternative name server for the associated networks. When specified,
// all DNS queries are forwarded to a name server that you choose. Names such as .internal
// are not available when an alternative name server is specified.  Structure is documented below.
func (o PolicyAlternativeNameServerConfigOutput) TargetNameServers() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfig) []PolicyAlternativeNameServerConfigTargetNameServer {
		return v.TargetNameServers
	}).(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput)
}

type PolicyAlternativeNameServerConfigPtrOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigPtrOutput) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigPtrOutput) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigPtrOutput) Elem() PolicyAlternativeNameServerConfigOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfig) PolicyAlternativeNameServerConfig { return *v }).(PolicyAlternativeNameServerConfigOutput)
}

// Sets an alternative name server for the associated networks. When specified,
// all DNS queries are forwarded to a name server that you choose. Names such as .internal
// are not available when an alternative name server is specified.  Structure is documented below.
func (o PolicyAlternativeNameServerConfigPtrOutput) TargetNameServers() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfig) []PolicyAlternativeNameServerConfigTargetNameServer {
		if v == nil {
			return nil
		}
		return v.TargetNameServers
	}).(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServer struct {
	// IPv4 address to forward to.
	Ipv4Address string `pulumi:"ipv4Address"`
}

// PolicyAlternativeNameServerConfigTargetNameServerInput is an input type that accepts PolicyAlternativeNameServerConfigTargetNameServerArgs and PolicyAlternativeNameServerConfigTargetNameServerOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigTargetNameServerInput` via:
//
// 		 PolicyAlternativeNameServerConfigTargetNameServerArgs{...}
//
type PolicyAlternativeNameServerConfigTargetNameServerInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigTargetNameServerOutput() PolicyAlternativeNameServerConfigTargetNameServerOutput
	ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(context.Context) PolicyAlternativeNameServerConfigTargetNameServerOutput
}

type PolicyAlternativeNameServerConfigTargetNameServerArgs struct {
	// IPv4 address to forward to.
	Ipv4Address pulumi.StringInput `pulumi:"ipv4Address"`
}

func (PolicyAlternativeNameServerConfigTargetNameServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArgs) ToPolicyAlternativeNameServerConfigTargetNameServerOutput() PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return i.ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArgs) ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigTargetNameServerOutput)
}

// PolicyAlternativeNameServerConfigTargetNameServerArrayInput is an input type that accepts PolicyAlternativeNameServerConfigTargetNameServerArray and PolicyAlternativeNameServerConfigTargetNameServerArrayOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigTargetNameServerArrayInput` via:
//
// 		 PolicyAlternativeNameServerConfigTargetNameServerArray{ PolicyAlternativeNameServerConfigTargetNameServerArgs{...} }
//
type PolicyAlternativeNameServerConfigTargetNameServerArrayInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput
	ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(context.Context) PolicyAlternativeNameServerConfigTargetNameServerArrayOutput
}

type PolicyAlternativeNameServerConfigTargetNameServerArray []PolicyAlternativeNameServerConfigTargetNameServerInput

func (PolicyAlternativeNameServerConfigTargetNameServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArray) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return i.ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArray) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigTargetNameServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) ToPolicyAlternativeNameServerConfigTargetNameServerOutput() PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return o
}

// IPv4 address to forward to.
func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServer) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerArrayOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) Index(i pulumi.IntInput) PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyAlternativeNameServerConfigTargetNameServer {
		return vs[0].([]PolicyAlternativeNameServerConfigTargetNameServer)[vs[1].(int)]
	}).(PolicyAlternativeNameServerConfigTargetNameServerOutput)
}

type PolicyNetwork struct {
	// The fully qualified URL of the VPC network to bind to.
	// This should be formatted like
	// `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
	NetworkUrl string `pulumi:"networkUrl"`
}

// PolicyNetworkInput is an input type that accepts PolicyNetworkArgs and PolicyNetworkOutput values.
// You can construct a concrete instance of `PolicyNetworkInput` via:
//
// 		 PolicyNetworkArgs{...}
//
type PolicyNetworkInput interface {
	pulumi.Input

	ToPolicyNetworkOutput() PolicyNetworkOutput
	ToPolicyNetworkOutputWithContext(context.Context) PolicyNetworkOutput
}

type PolicyNetworkArgs struct {
	// The fully qualified URL of the VPC network to bind to.
	// This should be formatted like
	// `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
	NetworkUrl pulumi.StringInput `pulumi:"networkUrl"`
}

func (PolicyNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyNetwork)(nil)).Elem()
}

func (i PolicyNetworkArgs) ToPolicyNetworkOutput() PolicyNetworkOutput {
	return i.ToPolicyNetworkOutputWithContext(context.Background())
}

func (i PolicyNetworkArgs) ToPolicyNetworkOutputWithContext(ctx context.Context) PolicyNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyNetworkOutput)
}

// PolicyNetworkArrayInput is an input type that accepts PolicyNetworkArray and PolicyNetworkArrayOutput values.
// You can construct a concrete instance of `PolicyNetworkArrayInput` via:
//
// 		 PolicyNetworkArray{ PolicyNetworkArgs{...} }
//
type PolicyNetworkArrayInput interface {
	pulumi.Input

	ToPolicyNetworkArrayOutput() PolicyNetworkArrayOutput
	ToPolicyNetworkArrayOutputWithContext(context.Context) PolicyNetworkArrayOutput
}

type PolicyNetworkArray []PolicyNetworkInput

func (PolicyNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyNetwork)(nil)).Elem()
}

func (i PolicyNetworkArray) ToPolicyNetworkArrayOutput() PolicyNetworkArrayOutput {
	return i.ToPolicyNetworkArrayOutputWithContext(context.Background())
}

func (i PolicyNetworkArray) ToPolicyNetworkArrayOutputWithContext(ctx context.Context) PolicyNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyNetworkArrayOutput)
}

type PolicyNetworkOutput struct{ *pulumi.OutputState }

func (PolicyNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyNetwork)(nil)).Elem()
}

func (o PolicyNetworkOutput) ToPolicyNetworkOutput() PolicyNetworkOutput {
	return o
}

func (o PolicyNetworkOutput) ToPolicyNetworkOutputWithContext(ctx context.Context) PolicyNetworkOutput {
	return o
}

// The fully qualified URL of the VPC network to bind to.
// This should be formatted like
// `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
func (o PolicyNetworkOutput) NetworkUrl() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyNetwork) string { return v.NetworkUrl }).(pulumi.StringOutput)
}

type PolicyNetworkArrayOutput struct{ *pulumi.OutputState }

func (PolicyNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyNetwork)(nil)).Elem()
}

func (o PolicyNetworkArrayOutput) ToPolicyNetworkArrayOutput() PolicyNetworkArrayOutput {
	return o
}

func (o PolicyNetworkArrayOutput) ToPolicyNetworkArrayOutputWithContext(ctx context.Context) PolicyNetworkArrayOutput {
	return o
}

func (o PolicyNetworkArrayOutput) Index(i pulumi.IntInput) PolicyNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyNetwork {
		return vs[0].([]PolicyNetwork)[vs[1].(int)]
	}).(PolicyNetworkOutput)
}

type GetKeysKeySigningKey struct {
	// String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time. Possible values are `ecdsap256sha256`, `ecdsap384sha384`, `rsasha1`, `rsasha256`, and `rsasha512`.
	Algorithm string `pulumi:"algorithm"`
	// The time that this resource was created in the control plane. This is in RFC3339 text format.
	CreationTime string `pulumi:"creationTime"`
	// A mutable string of at most 1024 characters associated with this resource for the user's convenience.
	Description string `pulumi:"description"`
	// A list of cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Each contains:
	// - `digest` - The base-16 encoded bytes of this digest. Suitable for use in a DS resource record.
	// - `type` - Specifies the algorithm used to calculate this digest. Possible values are `sha1`, `sha256` and `sha384`
	Digests []GetKeysKeySigningKeyDigest `pulumi:"digests"`
	// The DS record based on the KSK record. This is used when [delegating](https://cloud.google.com/dns/docs/dnssec-advanced#subdelegation) DNSSEC-signed subdomains.
	DsRecord string `pulumi:"dsRecord"`
	// Unique identifier for the resource; defined by the server.
	Id string `pulumi:"id"`
	// Active keys will be used to sign subsequent changes to the ManagedZone. Inactive keys will still be present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
	IsActive bool `pulumi:"isActive"`
	// Length of the key in bits. Specified at creation time then immutable.
	KeyLength int `pulumi:"keyLength"`
	// The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B.
	KeyTag int `pulumi:"keyTag"`
	// Base64 encoded public half of this key.
	PublicKey string `pulumi:"publicKey"`
}

// GetKeysKeySigningKeyInput is an input type that accepts GetKeysKeySigningKeyArgs and GetKeysKeySigningKeyOutput values.
// You can construct a concrete instance of `GetKeysKeySigningKeyInput` via:
//
// 		 GetKeysKeySigningKeyArgs{...}
//
type GetKeysKeySigningKeyInput interface {
	pulumi.Input

	ToGetKeysKeySigningKeyOutput() GetKeysKeySigningKeyOutput
	ToGetKeysKeySigningKeyOutputWithContext(context.Context) GetKeysKeySigningKeyOutput
}

type GetKeysKeySigningKeyArgs struct {
	// String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time. Possible values are `ecdsap256sha256`, `ecdsap384sha384`, `rsasha1`, `rsasha256`, and `rsasha512`.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The time that this resource was created in the control plane. This is in RFC3339 text format.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// A mutable string of at most 1024 characters associated with this resource for the user's convenience.
	Description pulumi.StringInput `pulumi:"description"`
	// A list of cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Each contains:
	// - `digest` - The base-16 encoded bytes of this digest. Suitable for use in a DS resource record.
	// - `type` - Specifies the algorithm used to calculate this digest. Possible values are `sha1`, `sha256` and `sha384`
	Digests GetKeysKeySigningKeyDigestArrayInput `pulumi:"digests"`
	// The DS record based on the KSK record. This is used when [delegating](https://cloud.google.com/dns/docs/dnssec-advanced#subdelegation) DNSSEC-signed subdomains.
	DsRecord pulumi.StringInput `pulumi:"dsRecord"`
	// Unique identifier for the resource; defined by the server.
	Id pulumi.StringInput `pulumi:"id"`
	// Active keys will be used to sign subsequent changes to the ManagedZone. Inactive keys will still be present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
	IsActive pulumi.BoolInput `pulumi:"isActive"`
	// Length of the key in bits. Specified at creation time then immutable.
	KeyLength pulumi.IntInput `pulumi:"keyLength"`
	// The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B.
	KeyTag pulumi.IntInput `pulumi:"keyTag"`
	// Base64 encoded public half of this key.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
}

func (GetKeysKeySigningKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKeySigningKey)(nil)).Elem()
}

func (i GetKeysKeySigningKeyArgs) ToGetKeysKeySigningKeyOutput() GetKeysKeySigningKeyOutput {
	return i.ToGetKeysKeySigningKeyOutputWithContext(context.Background())
}

func (i GetKeysKeySigningKeyArgs) ToGetKeysKeySigningKeyOutputWithContext(ctx context.Context) GetKeysKeySigningKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeySigningKeyOutput)
}

// GetKeysKeySigningKeyArrayInput is an input type that accepts GetKeysKeySigningKeyArray and GetKeysKeySigningKeyArrayOutput values.
// You can construct a concrete instance of `GetKeysKeySigningKeyArrayInput` via:
//
// 		 GetKeysKeySigningKeyArray{ GetKeysKeySigningKeyArgs{...} }
//
type GetKeysKeySigningKeyArrayInput interface {
	pulumi.Input

	ToGetKeysKeySigningKeyArrayOutput() GetKeysKeySigningKeyArrayOutput
	ToGetKeysKeySigningKeyArrayOutputWithContext(context.Context) GetKeysKeySigningKeyArrayOutput
}

type GetKeysKeySigningKeyArray []GetKeysKeySigningKeyInput

func (GetKeysKeySigningKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysKeySigningKey)(nil)).Elem()
}

func (i GetKeysKeySigningKeyArray) ToGetKeysKeySigningKeyArrayOutput() GetKeysKeySigningKeyArrayOutput {
	return i.ToGetKeysKeySigningKeyArrayOutputWithContext(context.Background())
}

func (i GetKeysKeySigningKeyArray) ToGetKeysKeySigningKeyArrayOutputWithContext(ctx context.Context) GetKeysKeySigningKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeySigningKeyArrayOutput)
}

type GetKeysKeySigningKeyOutput struct{ *pulumi.OutputState }

func (GetKeysKeySigningKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKeySigningKey)(nil)).Elem()
}

func (o GetKeysKeySigningKeyOutput) ToGetKeysKeySigningKeyOutput() GetKeysKeySigningKeyOutput {
	return o
}

func (o GetKeysKeySigningKeyOutput) ToGetKeysKeySigningKeyOutputWithContext(ctx context.Context) GetKeysKeySigningKeyOutput {
	return o
}

// String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time. Possible values are `ecdsap256sha256`, `ecdsap384sha384`, `rsasha1`, `rsasha256`, and `rsasha512`.
func (o GetKeysKeySigningKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeySigningKey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The time that this resource was created in the control plane. This is in RFC3339 text format.
func (o GetKeysKeySigningKeyOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeySigningKey) string { return v.CreationTime }).(pulumi.StringOutput)
}

// A mutable string of at most 1024 characters associated with this resource for the user's convenience.
func (o GetKeysKeySigningKeyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeySigningKey) string { return v.Description }).(pulumi.StringOutput)
}

// A list of cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Each contains:
// - `digest` - The base-16 encoded bytes of this digest. Suitable for use in a DS resource record.
// - `type` - Specifies the algorithm used to calculate this digest. Possible values are `sha1`, `sha256` and `sha384`
func (o GetKeysKeySigningKeyOutput) Digests() GetKeysKeySigningKeyDigestArrayOutput {
	return o.ApplyT(func(v GetKeysKeySigningKey) []GetKeysKeySigningKeyDigest { return v.Digests }).(GetKeysKeySigningKeyDigestArrayOutput)
}

// The DS record based on the KSK record. This is used when [delegating](https://cloud.google.com/dns/docs/dnssec-advanced#subdelegation) DNSSEC-signed subdomains.
func (o GetKeysKeySigningKeyOutput) DsRecord() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeySigningKey) string { return v.DsRecord }).(pulumi.StringOutput)
}

// Unique identifier for the resource; defined by the server.
func (o GetKeysKeySigningKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeySigningKey) string { return v.Id }).(pulumi.StringOutput)
}

// Active keys will be used to sign subsequent changes to the ManagedZone. Inactive keys will still be present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
func (o GetKeysKeySigningKeyOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetKeysKeySigningKey) bool { return v.IsActive }).(pulumi.BoolOutput)
}

// Length of the key in bits. Specified at creation time then immutable.
func (o GetKeysKeySigningKeyOutput) KeyLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetKeysKeySigningKey) int { return v.KeyLength }).(pulumi.IntOutput)
}

// The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B.
func (o GetKeysKeySigningKeyOutput) KeyTag() pulumi.IntOutput {
	return o.ApplyT(func(v GetKeysKeySigningKey) int { return v.KeyTag }).(pulumi.IntOutput)
}

// Base64 encoded public half of this key.
func (o GetKeysKeySigningKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeySigningKey) string { return v.PublicKey }).(pulumi.StringOutput)
}

type GetKeysKeySigningKeyArrayOutput struct{ *pulumi.OutputState }

func (GetKeysKeySigningKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysKeySigningKey)(nil)).Elem()
}

func (o GetKeysKeySigningKeyArrayOutput) ToGetKeysKeySigningKeyArrayOutput() GetKeysKeySigningKeyArrayOutput {
	return o
}

func (o GetKeysKeySigningKeyArrayOutput) ToGetKeysKeySigningKeyArrayOutputWithContext(ctx context.Context) GetKeysKeySigningKeyArrayOutput {
	return o
}

func (o GetKeysKeySigningKeyArrayOutput) Index(i pulumi.IntInput) GetKeysKeySigningKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeysKeySigningKey {
		return vs[0].([]GetKeysKeySigningKey)[vs[1].(int)]
	}).(GetKeysKeySigningKeyOutput)
}

type GetKeysKeySigningKeyDigest struct {
	Digest *string `pulumi:"digest"`
	Type   *string `pulumi:"type"`
}

// GetKeysKeySigningKeyDigestInput is an input type that accepts GetKeysKeySigningKeyDigestArgs and GetKeysKeySigningKeyDigestOutput values.
// You can construct a concrete instance of `GetKeysKeySigningKeyDigestInput` via:
//
// 		 GetKeysKeySigningKeyDigestArgs{...}
//
type GetKeysKeySigningKeyDigestInput interface {
	pulumi.Input

	ToGetKeysKeySigningKeyDigestOutput() GetKeysKeySigningKeyDigestOutput
	ToGetKeysKeySigningKeyDigestOutputWithContext(context.Context) GetKeysKeySigningKeyDigestOutput
}

type GetKeysKeySigningKeyDigestArgs struct {
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	Type   pulumi.StringPtrInput `pulumi:"type"`
}

func (GetKeysKeySigningKeyDigestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKeySigningKeyDigest)(nil)).Elem()
}

func (i GetKeysKeySigningKeyDigestArgs) ToGetKeysKeySigningKeyDigestOutput() GetKeysKeySigningKeyDigestOutput {
	return i.ToGetKeysKeySigningKeyDigestOutputWithContext(context.Background())
}

func (i GetKeysKeySigningKeyDigestArgs) ToGetKeysKeySigningKeyDigestOutputWithContext(ctx context.Context) GetKeysKeySigningKeyDigestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeySigningKeyDigestOutput)
}

// GetKeysKeySigningKeyDigestArrayInput is an input type that accepts GetKeysKeySigningKeyDigestArray and GetKeysKeySigningKeyDigestArrayOutput values.
// You can construct a concrete instance of `GetKeysKeySigningKeyDigestArrayInput` via:
//
// 		 GetKeysKeySigningKeyDigestArray{ GetKeysKeySigningKeyDigestArgs{...} }
//
type GetKeysKeySigningKeyDigestArrayInput interface {
	pulumi.Input

	ToGetKeysKeySigningKeyDigestArrayOutput() GetKeysKeySigningKeyDigestArrayOutput
	ToGetKeysKeySigningKeyDigestArrayOutputWithContext(context.Context) GetKeysKeySigningKeyDigestArrayOutput
}

type GetKeysKeySigningKeyDigestArray []GetKeysKeySigningKeyDigestInput

func (GetKeysKeySigningKeyDigestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysKeySigningKeyDigest)(nil)).Elem()
}

func (i GetKeysKeySigningKeyDigestArray) ToGetKeysKeySigningKeyDigestArrayOutput() GetKeysKeySigningKeyDigestArrayOutput {
	return i.ToGetKeysKeySigningKeyDigestArrayOutputWithContext(context.Background())
}

func (i GetKeysKeySigningKeyDigestArray) ToGetKeysKeySigningKeyDigestArrayOutputWithContext(ctx context.Context) GetKeysKeySigningKeyDigestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeySigningKeyDigestArrayOutput)
}

type GetKeysKeySigningKeyDigestOutput struct{ *pulumi.OutputState }

func (GetKeysKeySigningKeyDigestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKeySigningKeyDigest)(nil)).Elem()
}

func (o GetKeysKeySigningKeyDigestOutput) ToGetKeysKeySigningKeyDigestOutput() GetKeysKeySigningKeyDigestOutput {
	return o
}

func (o GetKeysKeySigningKeyDigestOutput) ToGetKeysKeySigningKeyDigestOutputWithContext(ctx context.Context) GetKeysKeySigningKeyDigestOutput {
	return o
}

func (o GetKeysKeySigningKeyDigestOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeysKeySigningKeyDigest) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

func (o GetKeysKeySigningKeyDigestOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeysKeySigningKeyDigest) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetKeysKeySigningKeyDigestArrayOutput struct{ *pulumi.OutputState }

func (GetKeysKeySigningKeyDigestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysKeySigningKeyDigest)(nil)).Elem()
}

func (o GetKeysKeySigningKeyDigestArrayOutput) ToGetKeysKeySigningKeyDigestArrayOutput() GetKeysKeySigningKeyDigestArrayOutput {
	return o
}

func (o GetKeysKeySigningKeyDigestArrayOutput) ToGetKeysKeySigningKeyDigestArrayOutputWithContext(ctx context.Context) GetKeysKeySigningKeyDigestArrayOutput {
	return o
}

func (o GetKeysKeySigningKeyDigestArrayOutput) Index(i pulumi.IntInput) GetKeysKeySigningKeyDigestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeysKeySigningKeyDigest {
		return vs[0].([]GetKeysKeySigningKeyDigest)[vs[1].(int)]
	}).(GetKeysKeySigningKeyDigestOutput)
}

type GetKeysZoneSigningKey struct {
	// String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time. Possible values are `ecdsap256sha256`, `ecdsap384sha384`, `rsasha1`, `rsasha256`, and `rsasha512`.
	Algorithm string `pulumi:"algorithm"`
	// The time that this resource was created in the control plane. This is in RFC3339 text format.
	CreationTime string `pulumi:"creationTime"`
	// A mutable string of at most 1024 characters associated with this resource for the user's convenience.
	Description string `pulumi:"description"`
	// A list of cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Each contains:
	// - `digest` - The base-16 encoded bytes of this digest. Suitable for use in a DS resource record.
	// - `type` - Specifies the algorithm used to calculate this digest. Possible values are `sha1`, `sha256` and `sha384`
	Digests []GetKeysZoneSigningKeyDigest `pulumi:"digests"`
	// Unique identifier for the resource; defined by the server.
	Id string `pulumi:"id"`
	// Active keys will be used to sign subsequent changes to the ManagedZone. Inactive keys will still be present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
	IsActive bool `pulumi:"isActive"`
	// Length of the key in bits. Specified at creation time then immutable.
	KeyLength int `pulumi:"keyLength"`
	// The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B.
	KeyTag int `pulumi:"keyTag"`
	// Base64 encoded public half of this key.
	PublicKey string `pulumi:"publicKey"`
}

// GetKeysZoneSigningKeyInput is an input type that accepts GetKeysZoneSigningKeyArgs and GetKeysZoneSigningKeyOutput values.
// You can construct a concrete instance of `GetKeysZoneSigningKeyInput` via:
//
// 		 GetKeysZoneSigningKeyArgs{...}
//
type GetKeysZoneSigningKeyInput interface {
	pulumi.Input

	ToGetKeysZoneSigningKeyOutput() GetKeysZoneSigningKeyOutput
	ToGetKeysZoneSigningKeyOutputWithContext(context.Context) GetKeysZoneSigningKeyOutput
}

type GetKeysZoneSigningKeyArgs struct {
	// String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time. Possible values are `ecdsap256sha256`, `ecdsap384sha384`, `rsasha1`, `rsasha256`, and `rsasha512`.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The time that this resource was created in the control plane. This is in RFC3339 text format.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// A mutable string of at most 1024 characters associated with this resource for the user's convenience.
	Description pulumi.StringInput `pulumi:"description"`
	// A list of cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Each contains:
	// - `digest` - The base-16 encoded bytes of this digest. Suitable for use in a DS resource record.
	// - `type` - Specifies the algorithm used to calculate this digest. Possible values are `sha1`, `sha256` and `sha384`
	Digests GetKeysZoneSigningKeyDigestArrayInput `pulumi:"digests"`
	// Unique identifier for the resource; defined by the server.
	Id pulumi.StringInput `pulumi:"id"`
	// Active keys will be used to sign subsequent changes to the ManagedZone. Inactive keys will still be present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
	IsActive pulumi.BoolInput `pulumi:"isActive"`
	// Length of the key in bits. Specified at creation time then immutable.
	KeyLength pulumi.IntInput `pulumi:"keyLength"`
	// The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B.
	KeyTag pulumi.IntInput `pulumi:"keyTag"`
	// Base64 encoded public half of this key.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
}

func (GetKeysZoneSigningKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysZoneSigningKey)(nil)).Elem()
}

func (i GetKeysZoneSigningKeyArgs) ToGetKeysZoneSigningKeyOutput() GetKeysZoneSigningKeyOutput {
	return i.ToGetKeysZoneSigningKeyOutputWithContext(context.Background())
}

func (i GetKeysZoneSigningKeyArgs) ToGetKeysZoneSigningKeyOutputWithContext(ctx context.Context) GetKeysZoneSigningKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysZoneSigningKeyOutput)
}

// GetKeysZoneSigningKeyArrayInput is an input type that accepts GetKeysZoneSigningKeyArray and GetKeysZoneSigningKeyArrayOutput values.
// You can construct a concrete instance of `GetKeysZoneSigningKeyArrayInput` via:
//
// 		 GetKeysZoneSigningKeyArray{ GetKeysZoneSigningKeyArgs{...} }
//
type GetKeysZoneSigningKeyArrayInput interface {
	pulumi.Input

	ToGetKeysZoneSigningKeyArrayOutput() GetKeysZoneSigningKeyArrayOutput
	ToGetKeysZoneSigningKeyArrayOutputWithContext(context.Context) GetKeysZoneSigningKeyArrayOutput
}

type GetKeysZoneSigningKeyArray []GetKeysZoneSigningKeyInput

func (GetKeysZoneSigningKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysZoneSigningKey)(nil)).Elem()
}

func (i GetKeysZoneSigningKeyArray) ToGetKeysZoneSigningKeyArrayOutput() GetKeysZoneSigningKeyArrayOutput {
	return i.ToGetKeysZoneSigningKeyArrayOutputWithContext(context.Background())
}

func (i GetKeysZoneSigningKeyArray) ToGetKeysZoneSigningKeyArrayOutputWithContext(ctx context.Context) GetKeysZoneSigningKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysZoneSigningKeyArrayOutput)
}

type GetKeysZoneSigningKeyOutput struct{ *pulumi.OutputState }

func (GetKeysZoneSigningKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysZoneSigningKey)(nil)).Elem()
}

func (o GetKeysZoneSigningKeyOutput) ToGetKeysZoneSigningKeyOutput() GetKeysZoneSigningKeyOutput {
	return o
}

func (o GetKeysZoneSigningKeyOutput) ToGetKeysZoneSigningKeyOutputWithContext(ctx context.Context) GetKeysZoneSigningKeyOutput {
	return o
}

// String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time. Possible values are `ecdsap256sha256`, `ecdsap384sha384`, `rsasha1`, `rsasha256`, and `rsasha512`.
func (o GetKeysZoneSigningKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysZoneSigningKey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The time that this resource was created in the control plane. This is in RFC3339 text format.
func (o GetKeysZoneSigningKeyOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysZoneSigningKey) string { return v.CreationTime }).(pulumi.StringOutput)
}

// A mutable string of at most 1024 characters associated with this resource for the user's convenience.
func (o GetKeysZoneSigningKeyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysZoneSigningKey) string { return v.Description }).(pulumi.StringOutput)
}

// A list of cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Each contains:
// - `digest` - The base-16 encoded bytes of this digest. Suitable for use in a DS resource record.
// - `type` - Specifies the algorithm used to calculate this digest. Possible values are `sha1`, `sha256` and `sha384`
func (o GetKeysZoneSigningKeyOutput) Digests() GetKeysZoneSigningKeyDigestArrayOutput {
	return o.ApplyT(func(v GetKeysZoneSigningKey) []GetKeysZoneSigningKeyDigest { return v.Digests }).(GetKeysZoneSigningKeyDigestArrayOutput)
}

// Unique identifier for the resource; defined by the server.
func (o GetKeysZoneSigningKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysZoneSigningKey) string { return v.Id }).(pulumi.StringOutput)
}

// Active keys will be used to sign subsequent changes to the ManagedZone. Inactive keys will still be present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
func (o GetKeysZoneSigningKeyOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetKeysZoneSigningKey) bool { return v.IsActive }).(pulumi.BoolOutput)
}

// Length of the key in bits. Specified at creation time then immutable.
func (o GetKeysZoneSigningKeyOutput) KeyLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetKeysZoneSigningKey) int { return v.KeyLength }).(pulumi.IntOutput)
}

// The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B.
func (o GetKeysZoneSigningKeyOutput) KeyTag() pulumi.IntOutput {
	return o.ApplyT(func(v GetKeysZoneSigningKey) int { return v.KeyTag }).(pulumi.IntOutput)
}

// Base64 encoded public half of this key.
func (o GetKeysZoneSigningKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysZoneSigningKey) string { return v.PublicKey }).(pulumi.StringOutput)
}

type GetKeysZoneSigningKeyArrayOutput struct{ *pulumi.OutputState }

func (GetKeysZoneSigningKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysZoneSigningKey)(nil)).Elem()
}

func (o GetKeysZoneSigningKeyArrayOutput) ToGetKeysZoneSigningKeyArrayOutput() GetKeysZoneSigningKeyArrayOutput {
	return o
}

func (o GetKeysZoneSigningKeyArrayOutput) ToGetKeysZoneSigningKeyArrayOutputWithContext(ctx context.Context) GetKeysZoneSigningKeyArrayOutput {
	return o
}

func (o GetKeysZoneSigningKeyArrayOutput) Index(i pulumi.IntInput) GetKeysZoneSigningKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeysZoneSigningKey {
		return vs[0].([]GetKeysZoneSigningKey)[vs[1].(int)]
	}).(GetKeysZoneSigningKeyOutput)
}

type GetKeysZoneSigningKeyDigest struct {
	Digest *string `pulumi:"digest"`
	Type   *string `pulumi:"type"`
}

// GetKeysZoneSigningKeyDigestInput is an input type that accepts GetKeysZoneSigningKeyDigestArgs and GetKeysZoneSigningKeyDigestOutput values.
// You can construct a concrete instance of `GetKeysZoneSigningKeyDigestInput` via:
//
// 		 GetKeysZoneSigningKeyDigestArgs{...}
//
type GetKeysZoneSigningKeyDigestInput interface {
	pulumi.Input

	ToGetKeysZoneSigningKeyDigestOutput() GetKeysZoneSigningKeyDigestOutput
	ToGetKeysZoneSigningKeyDigestOutputWithContext(context.Context) GetKeysZoneSigningKeyDigestOutput
}

type GetKeysZoneSigningKeyDigestArgs struct {
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	Type   pulumi.StringPtrInput `pulumi:"type"`
}

func (GetKeysZoneSigningKeyDigestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysZoneSigningKeyDigest)(nil)).Elem()
}

func (i GetKeysZoneSigningKeyDigestArgs) ToGetKeysZoneSigningKeyDigestOutput() GetKeysZoneSigningKeyDigestOutput {
	return i.ToGetKeysZoneSigningKeyDigestOutputWithContext(context.Background())
}

func (i GetKeysZoneSigningKeyDigestArgs) ToGetKeysZoneSigningKeyDigestOutputWithContext(ctx context.Context) GetKeysZoneSigningKeyDigestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysZoneSigningKeyDigestOutput)
}

// GetKeysZoneSigningKeyDigestArrayInput is an input type that accepts GetKeysZoneSigningKeyDigestArray and GetKeysZoneSigningKeyDigestArrayOutput values.
// You can construct a concrete instance of `GetKeysZoneSigningKeyDigestArrayInput` via:
//
// 		 GetKeysZoneSigningKeyDigestArray{ GetKeysZoneSigningKeyDigestArgs{...} }
//
type GetKeysZoneSigningKeyDigestArrayInput interface {
	pulumi.Input

	ToGetKeysZoneSigningKeyDigestArrayOutput() GetKeysZoneSigningKeyDigestArrayOutput
	ToGetKeysZoneSigningKeyDigestArrayOutputWithContext(context.Context) GetKeysZoneSigningKeyDigestArrayOutput
}

type GetKeysZoneSigningKeyDigestArray []GetKeysZoneSigningKeyDigestInput

func (GetKeysZoneSigningKeyDigestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysZoneSigningKeyDigest)(nil)).Elem()
}

func (i GetKeysZoneSigningKeyDigestArray) ToGetKeysZoneSigningKeyDigestArrayOutput() GetKeysZoneSigningKeyDigestArrayOutput {
	return i.ToGetKeysZoneSigningKeyDigestArrayOutputWithContext(context.Background())
}

func (i GetKeysZoneSigningKeyDigestArray) ToGetKeysZoneSigningKeyDigestArrayOutputWithContext(ctx context.Context) GetKeysZoneSigningKeyDigestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysZoneSigningKeyDigestArrayOutput)
}

type GetKeysZoneSigningKeyDigestOutput struct{ *pulumi.OutputState }

func (GetKeysZoneSigningKeyDigestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysZoneSigningKeyDigest)(nil)).Elem()
}

func (o GetKeysZoneSigningKeyDigestOutput) ToGetKeysZoneSigningKeyDigestOutput() GetKeysZoneSigningKeyDigestOutput {
	return o
}

func (o GetKeysZoneSigningKeyDigestOutput) ToGetKeysZoneSigningKeyDigestOutputWithContext(ctx context.Context) GetKeysZoneSigningKeyDigestOutput {
	return o
}

func (o GetKeysZoneSigningKeyDigestOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeysZoneSigningKeyDigest) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

func (o GetKeysZoneSigningKeyDigestOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeysZoneSigningKeyDigest) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetKeysZoneSigningKeyDigestArrayOutput struct{ *pulumi.OutputState }

func (GetKeysZoneSigningKeyDigestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysZoneSigningKeyDigest)(nil)).Elem()
}

func (o GetKeysZoneSigningKeyDigestArrayOutput) ToGetKeysZoneSigningKeyDigestArrayOutput() GetKeysZoneSigningKeyDigestArrayOutput {
	return o
}

func (o GetKeysZoneSigningKeyDigestArrayOutput) ToGetKeysZoneSigningKeyDigestArrayOutputWithContext(ctx context.Context) GetKeysZoneSigningKeyDigestArrayOutput {
	return o
}

func (o GetKeysZoneSigningKeyDigestArrayOutput) Index(i pulumi.IntInput) GetKeysZoneSigningKeyDigestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeysZoneSigningKeyDigest {
		return vs[0].([]GetKeysZoneSigningKeyDigest)[vs[1].(int)]
	}).(GetKeysZoneSigningKeyDigestOutput)
}

func init() {
	pulumi.RegisterOutputType(ManagedZoneDnssecConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneDnssecConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneDnssecConfigDefaultKeySpecOutput{})
	pulumi.RegisterOutputType(ManagedZoneDnssecConfigDefaultKeySpecArrayOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigTargetNameServerOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigTargetNameServerArrayOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigTargetNetworkOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigTargetNetworkPtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigNetworkOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigNetworkArrayOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigPtrOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigTargetNameServerOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput{})
	pulumi.RegisterOutputType(PolicyNetworkOutput{})
	pulumi.RegisterOutputType(PolicyNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetKeysKeySigningKeyOutput{})
	pulumi.RegisterOutputType(GetKeysKeySigningKeyArrayOutput{})
	pulumi.RegisterOutputType(GetKeysKeySigningKeyDigestOutput{})
	pulumi.RegisterOutputType(GetKeysKeySigningKeyDigestArrayOutput{})
	pulumi.RegisterOutputType(GetKeysZoneSigningKeyOutput{})
	pulumi.RegisterOutputType(GetKeysZoneSigningKeyArrayOutput{})
	pulumi.RegisterOutputType(GetKeysZoneSigningKeyDigestOutput{})
	pulumi.RegisterOutputType(GetKeysZoneSigningKeyDigestArrayOutput{})
}
