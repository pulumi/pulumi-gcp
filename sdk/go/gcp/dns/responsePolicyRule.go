// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Dns Response Policy Rule Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dns"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewNetwork(ctx, "network-1", &compute.NetworkArgs{
// 			AutoCreateSubnetworks: pulumi.Bool(false),
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewNetwork(ctx, "network-2", &compute.NetworkArgs{
// 			AutoCreateSubnetworks: pulumi.Bool(false),
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = dns.NewResponsePolicy(ctx, "response-policy", &dns.ResponsePolicyArgs{
// 			ResponsePolicyName: pulumi.String("example-response-policy"),
// 			Networks: dns.ResponsePolicyNetworkArray{
// 				&dns.ResponsePolicyNetworkArgs{
// 					NetworkUrl: network_1.ID(),
// 				},
// 				&dns.ResponsePolicyNetworkArgs{
// 					NetworkUrl: network_2.ID(),
// 				},
// 			},
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = dns.NewResponsePolicyRule(ctx, "example-response-policy-rule", &dns.ResponsePolicyRuleArgs{
// 			ResponsePolicy: response_policy.ResponsePolicyName,
// 			RuleName:       pulumi.String("example-rule"),
// 			DnsName:        pulumi.String("dns.example.com."),
// 			LocalData: &dns.ResponsePolicyRuleLocalDataArgs{
// 				LocalDatas: dns.ResponsePolicyRuleLocalDataLocalDataArray{
// 					&dns.ResponsePolicyRuleLocalDataLocalDataArgs{
// 						Name: pulumi.String("dns.example.com."),
// 						Type: pulumi.String("A"),
// 						Ttl:  pulumi.Int(300),
// 						Rrdatas: pulumi.StringArray{
// 							pulumi.String("192.0.2.91"),
// 						},
// 					},
// 				},
// 			},
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ResponsePolicyRule can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:dns/responsePolicyRule:ResponsePolicyRule default projects/{{project}}/responsePolicies/{{response_policy}}/rules/{{rule_name}}
// ```
//
// ```sh
//  $ pulumi import gcp:dns/responsePolicyRule:ResponsePolicyRule default {{project}}/{{response_policy}}/{{rule_name}}
// ```
//
// ```sh
//  $ pulumi import gcp:dns/responsePolicyRule:ResponsePolicyRule default {{response_policy}}/{{rule_name}}
// ```
type ResponsePolicyRule struct {
	pulumi.CustomResourceState

	// The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// Answer this query directly with DNS data. These ResourceRecordSets override any other DNS behavior for the matched name;
	// in particular they override private zones, the public internet, and GCP internal DNS. No SOA nor NS types are allowed.
	// Structure is documented below.
	LocalData ResponsePolicyRuleLocalDataPtrOutput `pulumi:"localData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Identifies the response policy addressed by this request.
	ResponsePolicy pulumi.StringOutput `pulumi:"responsePolicy"`
	// An identifier for this rule. Must be unique with the ResponsePolicy.
	RuleName pulumi.StringOutput `pulumi:"ruleName"`
}

// NewResponsePolicyRule registers a new resource with the given unique name, arguments, and options.
func NewResponsePolicyRule(ctx *pulumi.Context,
	name string, args *ResponsePolicyRuleArgs, opts ...pulumi.ResourceOption) (*ResponsePolicyRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DnsName == nil {
		return nil, errors.New("invalid value for required argument 'DnsName'")
	}
	if args.ResponsePolicy == nil {
		return nil, errors.New("invalid value for required argument 'ResponsePolicy'")
	}
	if args.RuleName == nil {
		return nil, errors.New("invalid value for required argument 'RuleName'")
	}
	var resource ResponsePolicyRule
	err := ctx.RegisterResource("gcp:dns/responsePolicyRule:ResponsePolicyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResponsePolicyRule gets an existing ResponsePolicyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResponsePolicyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResponsePolicyRuleState, opts ...pulumi.ResourceOption) (*ResponsePolicyRule, error) {
	var resource ResponsePolicyRule
	err := ctx.ReadResource("gcp:dns/responsePolicyRule:ResponsePolicyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResponsePolicyRule resources.
type responsePolicyRuleState struct {
	// The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
	DnsName *string `pulumi:"dnsName"`
	// Answer this query directly with DNS data. These ResourceRecordSets override any other DNS behavior for the matched name;
	// in particular they override private zones, the public internet, and GCP internal DNS. No SOA nor NS types are allowed.
	// Structure is documented below.
	LocalData *ResponsePolicyRuleLocalData `pulumi:"localData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Identifies the response policy addressed by this request.
	ResponsePolicy *string `pulumi:"responsePolicy"`
	// An identifier for this rule. Must be unique with the ResponsePolicy.
	RuleName *string `pulumi:"ruleName"`
}

type ResponsePolicyRuleState struct {
	// The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
	DnsName pulumi.StringPtrInput
	// Answer this query directly with DNS data. These ResourceRecordSets override any other DNS behavior for the matched name;
	// in particular they override private zones, the public internet, and GCP internal DNS. No SOA nor NS types are allowed.
	// Structure is documented below.
	LocalData ResponsePolicyRuleLocalDataPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Identifies the response policy addressed by this request.
	ResponsePolicy pulumi.StringPtrInput
	// An identifier for this rule. Must be unique with the ResponsePolicy.
	RuleName pulumi.StringPtrInput
}

func (ResponsePolicyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*responsePolicyRuleState)(nil)).Elem()
}

type responsePolicyRuleArgs struct {
	// The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
	DnsName string `pulumi:"dnsName"`
	// Answer this query directly with DNS data. These ResourceRecordSets override any other DNS behavior for the matched name;
	// in particular they override private zones, the public internet, and GCP internal DNS. No SOA nor NS types are allowed.
	// Structure is documented below.
	LocalData *ResponsePolicyRuleLocalData `pulumi:"localData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Identifies the response policy addressed by this request.
	ResponsePolicy string `pulumi:"responsePolicy"`
	// An identifier for this rule. Must be unique with the ResponsePolicy.
	RuleName string `pulumi:"ruleName"`
}

// The set of arguments for constructing a ResponsePolicyRule resource.
type ResponsePolicyRuleArgs struct {
	// The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
	DnsName pulumi.StringInput
	// Answer this query directly with DNS data. These ResourceRecordSets override any other DNS behavior for the matched name;
	// in particular they override private zones, the public internet, and GCP internal DNS. No SOA nor NS types are allowed.
	// Structure is documented below.
	LocalData ResponsePolicyRuleLocalDataPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Identifies the response policy addressed by this request.
	ResponsePolicy pulumi.StringInput
	// An identifier for this rule. Must be unique with the ResponsePolicy.
	RuleName pulumi.StringInput
}

func (ResponsePolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*responsePolicyRuleArgs)(nil)).Elem()
}

type ResponsePolicyRuleInput interface {
	pulumi.Input

	ToResponsePolicyRuleOutput() ResponsePolicyRuleOutput
	ToResponsePolicyRuleOutputWithContext(ctx context.Context) ResponsePolicyRuleOutput
}

func (*ResponsePolicyRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponsePolicyRule)(nil)).Elem()
}

func (i *ResponsePolicyRule) ToResponsePolicyRuleOutput() ResponsePolicyRuleOutput {
	return i.ToResponsePolicyRuleOutputWithContext(context.Background())
}

func (i *ResponsePolicyRule) ToResponsePolicyRuleOutputWithContext(ctx context.Context) ResponsePolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyRuleOutput)
}

// ResponsePolicyRuleArrayInput is an input type that accepts ResponsePolicyRuleArray and ResponsePolicyRuleArrayOutput values.
// You can construct a concrete instance of `ResponsePolicyRuleArrayInput` via:
//
//          ResponsePolicyRuleArray{ ResponsePolicyRuleArgs{...} }
type ResponsePolicyRuleArrayInput interface {
	pulumi.Input

	ToResponsePolicyRuleArrayOutput() ResponsePolicyRuleArrayOutput
	ToResponsePolicyRuleArrayOutputWithContext(context.Context) ResponsePolicyRuleArrayOutput
}

type ResponsePolicyRuleArray []ResponsePolicyRuleInput

func (ResponsePolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResponsePolicyRule)(nil)).Elem()
}

func (i ResponsePolicyRuleArray) ToResponsePolicyRuleArrayOutput() ResponsePolicyRuleArrayOutput {
	return i.ToResponsePolicyRuleArrayOutputWithContext(context.Background())
}

func (i ResponsePolicyRuleArray) ToResponsePolicyRuleArrayOutputWithContext(ctx context.Context) ResponsePolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyRuleArrayOutput)
}

// ResponsePolicyRuleMapInput is an input type that accepts ResponsePolicyRuleMap and ResponsePolicyRuleMapOutput values.
// You can construct a concrete instance of `ResponsePolicyRuleMapInput` via:
//
//          ResponsePolicyRuleMap{ "key": ResponsePolicyRuleArgs{...} }
type ResponsePolicyRuleMapInput interface {
	pulumi.Input

	ToResponsePolicyRuleMapOutput() ResponsePolicyRuleMapOutput
	ToResponsePolicyRuleMapOutputWithContext(context.Context) ResponsePolicyRuleMapOutput
}

type ResponsePolicyRuleMap map[string]ResponsePolicyRuleInput

func (ResponsePolicyRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResponsePolicyRule)(nil)).Elem()
}

func (i ResponsePolicyRuleMap) ToResponsePolicyRuleMapOutput() ResponsePolicyRuleMapOutput {
	return i.ToResponsePolicyRuleMapOutputWithContext(context.Background())
}

func (i ResponsePolicyRuleMap) ToResponsePolicyRuleMapOutputWithContext(ctx context.Context) ResponsePolicyRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyRuleMapOutput)
}

type ResponsePolicyRuleOutput struct{ *pulumi.OutputState }

func (ResponsePolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponsePolicyRule)(nil)).Elem()
}

func (o ResponsePolicyRuleOutput) ToResponsePolicyRuleOutput() ResponsePolicyRuleOutput {
	return o
}

func (o ResponsePolicyRuleOutput) ToResponsePolicyRuleOutputWithContext(ctx context.Context) ResponsePolicyRuleOutput {
	return o
}

type ResponsePolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (ResponsePolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResponsePolicyRule)(nil)).Elem()
}

func (o ResponsePolicyRuleArrayOutput) ToResponsePolicyRuleArrayOutput() ResponsePolicyRuleArrayOutput {
	return o
}

func (o ResponsePolicyRuleArrayOutput) ToResponsePolicyRuleArrayOutputWithContext(ctx context.Context) ResponsePolicyRuleArrayOutput {
	return o
}

func (o ResponsePolicyRuleArrayOutput) Index(i pulumi.IntInput) ResponsePolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResponsePolicyRule {
		return vs[0].([]*ResponsePolicyRule)[vs[1].(int)]
	}).(ResponsePolicyRuleOutput)
}

type ResponsePolicyRuleMapOutput struct{ *pulumi.OutputState }

func (ResponsePolicyRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResponsePolicyRule)(nil)).Elem()
}

func (o ResponsePolicyRuleMapOutput) ToResponsePolicyRuleMapOutput() ResponsePolicyRuleMapOutput {
	return o
}

func (o ResponsePolicyRuleMapOutput) ToResponsePolicyRuleMapOutputWithContext(ctx context.Context) ResponsePolicyRuleMapOutput {
	return o
}

func (o ResponsePolicyRuleMapOutput) MapIndex(k pulumi.StringInput) ResponsePolicyRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResponsePolicyRule {
		return vs[0].(map[string]*ResponsePolicyRule)[vs[1].(string)]
	}).(ResponsePolicyRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyRuleInput)(nil)).Elem(), &ResponsePolicyRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyRuleArrayInput)(nil)).Elem(), ResponsePolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyRuleMapInput)(nil)).Elem(), ResponsePolicyRuleMap{})
	pulumi.RegisterOutputType(ResponsePolicyRuleOutput{})
	pulumi.RegisterOutputType(ResponsePolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(ResponsePolicyRuleMapOutput{})
}
