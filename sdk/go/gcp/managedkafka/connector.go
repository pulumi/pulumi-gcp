// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package managedkafka

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Managedkafka Connector Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/managedkafka"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("tf-test_32706"),
//				Name:           pulumi.String("tf-test_49082"),
//				OrgId:          pulumi.String("123456789"),
//				BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
//				DeletionPolicy: pulumi.String("DELETE"),
//			})
//			if err != nil {
//				return err
//			}
//			wait60Seconds, err := time.NewSleep(ctx, "wait_60_seconds", &time.SleepArgs{
//				CreateDuration: "60s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				project,
//			}))
//			if err != nil {
//				return err
//			}
//			compute, err := projects.NewService(ctx, "compute", &projects.ServiceArgs{
//				Project: project.ProjectId,
//				Service: pulumi.String("compute.googleapis.com"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait60Seconds,
//			}))
//			if err != nil {
//				return err
//			}
//			managedkafka, err := projects.NewService(ctx, "managedkafka", &projects.ServiceArgs{
//				Project: project.ProjectId,
//				Service: pulumi.String("managedkafka.googleapis.com"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				compute,
//			}))
//			if err != nil {
//				return err
//			}
//			wait120Seconds, err := time.NewSleep(ctx, "wait_120_seconds", &time.SleepArgs{
//				CreateDuration: "120s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				managedkafka,
//			}))
//			if err != nil {
//				return err
//			}
//			mkcSecondarySubnet, err := compute.NewSubnetwork(ctx, "mkc_secondary_subnet", &compute.SubnetworkArgs{
//				Project:     project.ProjectId,
//				Name:        pulumi.String("my-secondary-subnetwork-00"),
//				IpCidrRange: pulumi.String("10.5.0.0/16"),
//				Region:      pulumi.String("us-central1"),
//				Network:     pulumi.String("default"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait120Seconds,
//			}))
//			if err != nil {
//				return err
//			}
//			cpsTopic, err := pubsub.NewTopic(ctx, "cps_topic", &pubsub.TopicArgs{
//				Project:                  project.ProjectId,
//				Name:                     pulumi.String("my-cps-topic"),
//				MessageRetentionDuration: pulumi.String("86600s"),
//			})
//			if err != nil {
//				return err
//			}
//			gmkCluster, err := managedkafka.NewCluster(ctx, "gmk_cluster", &managedkafka.ClusterArgs{
//				Project:   project.ProjectId,
//				ClusterId: pulumi.String("my-cluster"),
//				Location:  pulumi.String("us-central1"),
//				CapacityConfig: &managedkafka.ClusterCapacityConfigArgs{
//					VcpuCount:   pulumi.String("3"),
//					MemoryBytes: pulumi.String("3221225472"),
//				},
//				GcpConfig: &managedkafka.ClusterGcpConfigArgs{
//					AccessConfig: &managedkafka.ClusterGcpConfigAccessConfigArgs{
//						NetworkConfigs: managedkafka.ClusterGcpConfigAccessConfigNetworkConfigArray{
//							&managedkafka.ClusterGcpConfigAccessConfigNetworkConfigArgs{
//								Subnet: project.ProjectId.ApplyT(func(projectId string) (string, error) {
//									return fmt.Sprintf("projects/%v/regions/us-central1/subnetworks/default", projectId), nil
//								}).(pulumi.StringOutput),
//							},
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				managedkafka,
//			}))
//			if err != nil {
//				return err
//			}
//			gmkTopic, err := managedkafka.NewTopic(ctx, "gmk_topic", &managedkafka.TopicArgs{
//				Project:           project.ProjectId,
//				TopicId:           pulumi.String("my-topic"),
//				Cluster:           gmkCluster.ClusterId,
//				Location:          pulumi.String("us-central1"),
//				PartitionCount:    pulumi.Int(2),
//				ReplicationFactor: pulumi.Int(3),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				managedkafka,
//			}))
//			if err != nil {
//				return err
//			}
//			mkcCluster, err := managedkafka.NewConnectCluster(ctx, "mkc_cluster", &managedkafka.ConnectClusterArgs{
//				Project:          project.ProjectId,
//				ConnectClusterId: pulumi.String("my-connect-cluster"),
//				KafkaCluster: pulumi.All(project.ProjectId, gmkCluster.ClusterId).ApplyT(func(_args []interface{}) (string, error) {
//					projectId := _args[0].(string)
//					clusterId := _args[1].(string)
//					return fmt.Sprintf("projects/%v/locations/us-central1/clusters/%v", projectId, clusterId), nil
//				}).(pulumi.StringOutput),
//				Location: pulumi.String("us-central1"),
//				CapacityConfig: &managedkafka.ConnectClusterCapacityConfigArgs{
//					VcpuCount:   pulumi.String("12"),
//					MemoryBytes: pulumi.String("21474836480"),
//				},
//				GcpConfig: &managedkafka.ConnectClusterGcpConfigArgs{
//					AccessConfig: &managedkafka.ConnectClusterGcpConfigAccessConfigArgs{
//						NetworkConfigs: managedkafka.ConnectClusterGcpConfigAccessConfigNetworkConfigArray{
//							&managedkafka.ConnectClusterGcpConfigAccessConfigNetworkConfigArgs{
//								PrimarySubnet: project.ProjectId.ApplyT(func(projectId string) (string, error) {
//									return fmt.Sprintf("projects/%v/regions/us-central1/subnetworks/default", projectId), nil
//								}).(pulumi.StringOutput),
//								AdditionalSubnets: pulumi.StringArray{
//									mkcSecondarySubnet.ID(),
//								},
//								DnsDomainNames: pulumi.StringArray{
//									pulumi.All(gmkCluster.ClusterId, project.ProjectId).ApplyT(func(_args []interface{}) (string, error) {
//										clusterId := _args[0].(string)
//										projectId := _args[1].(string)
//										return fmt.Sprintf("%v.us-central1.managedkafka.%v.cloud.goog", clusterId, projectId), nil
//									}).(pulumi.StringOutput),
//								},
//							},
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				managedkafka,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = managedkafka.NewConnector(ctx, "example", &managedkafka.ConnectorArgs{
//				Project:        project.ProjectId,
//				ConnectorId:    pulumi.String("my-connector"),
//				ConnectCluster: mkcCluster.ConnectClusterId,
//				Location:       pulumi.String("us-central1"),
//				Configs: pulumi.StringMap{
//					"connector.class": pulumi.String("com.google.pubsub.kafka.sink.CloudPubSubSinkConnector"),
//					"name":            pulumi.String("my-connector"),
//					"tasks.max":       pulumi.String("1"),
//					"topics":          gmkTopic.TopicId,
//					"cps.topic":       cpsTopic.Name,
//					"cps.project":     project.ProjectId,
//					"value.converter": pulumi.String("org.apache.kafka.connect.storage.StringConverter"),
//					"key.converter":   pulumi.String("org.apache.kafka.connect.storage.StringConverter"),
//				},
//				TaskRestartPolicy: &managedkafka.ConnectorTaskRestartPolicyArgs{
//					MinimumBackoff: pulumi.String("60s"),
//					MaximumBackoff: pulumi.String("1800s"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				managedkafka,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Connector can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/connectClusters/{{connect_cluster}}/connectors/{{connector_id}}`
//
// * `{{project}}/{{location}}/{{connect_cluster}}/{{connector_id}}`
//
// * `{{location}}/{{connect_cluster}}/{{connector_id}}`
//
// When using the `pulumi import` command, Connector can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:managedkafka/connector:Connector default projects/{{project}}/locations/{{location}}/connectClusters/{{connect_cluster}}/connectors/{{connector_id}}
// ```
//
// ```sh
// $ pulumi import gcp:managedkafka/connector:Connector default {{project}}/{{location}}/{{connect_cluster}}/{{connector_id}}
// ```
//
// ```sh
// $ pulumi import gcp:managedkafka/connector:Connector default {{location}}/{{connect_cluster}}/{{connector_id}}
// ```
type Connector struct {
	pulumi.CustomResourceState

	// Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
	Configs pulumi.StringMapOutput `pulumi:"configs"`
	// The connect cluster name.
	ConnectCluster pulumi.StringOutput `pulumi:"connectCluster"`
	// The ID to use for the connector, which will become the final component of the connector's name. This value is structured like: `my-connector-id`.
	//
	// ***
	ConnectorId pulumi.StringOutput `pulumi:"connectorId"`
	// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the connector. The `connector` segment is used when connecting directly to the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER/connectors/CONNECTOR_ID`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The current state of the connect. Possible values: `STATE_UNSPECIFIED`, `UNASSIGNED`, `RUNNING`, `PAUSED`, `FAILED`, `RESTARTING`, and `STOPPED`.
	State pulumi.StringOutput `pulumi:"state"`
	// A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won't be restarted.
	// Structure is documented below.
	TaskRestartPolicy ConnectorTaskRestartPolicyPtrOutput `pulumi:"taskRestartPolicy"`
}

// NewConnector registers a new resource with the given unique name, arguments, and options.
func NewConnector(ctx *pulumi.Context,
	name string, args *ConnectorArgs, opts ...pulumi.ResourceOption) (*Connector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectCluster == nil {
		return nil, errors.New("invalid value for required argument 'ConnectCluster'")
	}
	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connector
	err := ctx.RegisterResource("gcp:managedkafka/connector:Connector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnector gets an existing Connector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorState, opts ...pulumi.ResourceOption) (*Connector, error) {
	var resource Connector
	err := ctx.ReadResource("gcp:managedkafka/connector:Connector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connector resources.
type connectorState struct {
	// Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
	Configs map[string]string `pulumi:"configs"`
	// The connect cluster name.
	ConnectCluster *string `pulumi:"connectCluster"`
	// The ID to use for the connector, which will become the final component of the connector's name. This value is structured like: `my-connector-id`.
	//
	// ***
	ConnectorId *string `pulumi:"connectorId"`
	// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location *string `pulumi:"location"`
	// The name of the connector. The `connector` segment is used when connecting directly to the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER/connectors/CONNECTOR_ID`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The current state of the connect. Possible values: `STATE_UNSPECIFIED`, `UNASSIGNED`, `RUNNING`, `PAUSED`, `FAILED`, `RESTARTING`, and `STOPPED`.
	State *string `pulumi:"state"`
	// A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won't be restarted.
	// Structure is documented below.
	TaskRestartPolicy *ConnectorTaskRestartPolicy `pulumi:"taskRestartPolicy"`
}

type ConnectorState struct {
	// Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
	Configs pulumi.StringMapInput
	// The connect cluster name.
	ConnectCluster pulumi.StringPtrInput
	// The ID to use for the connector, which will become the final component of the connector's name. This value is structured like: `my-connector-id`.
	//
	// ***
	ConnectorId pulumi.StringPtrInput
	// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location pulumi.StringPtrInput
	// The name of the connector. The `connector` segment is used when connecting directly to the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER/connectors/CONNECTOR_ID`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The current state of the connect. Possible values: `STATE_UNSPECIFIED`, `UNASSIGNED`, `RUNNING`, `PAUSED`, `FAILED`, `RESTARTING`, and `STOPPED`.
	State pulumi.StringPtrInput
	// A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won't be restarted.
	// Structure is documented below.
	TaskRestartPolicy ConnectorTaskRestartPolicyPtrInput
}

func (ConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorState)(nil)).Elem()
}

type connectorArgs struct {
	// Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
	Configs map[string]string `pulumi:"configs"`
	// The connect cluster name.
	ConnectCluster string `pulumi:"connectCluster"`
	// The ID to use for the connector, which will become the final component of the connector's name. This value is structured like: `my-connector-id`.
	//
	// ***
	ConnectorId string `pulumi:"connectorId"`
	// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won't be restarted.
	// Structure is documented below.
	TaskRestartPolicy *ConnectorTaskRestartPolicy `pulumi:"taskRestartPolicy"`
}

// The set of arguments for constructing a Connector resource.
type ConnectorArgs struct {
	// Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
	Configs pulumi.StringMapInput
	// The connect cluster name.
	ConnectCluster pulumi.StringInput
	// The ID to use for the connector, which will become the final component of the connector's name. This value is structured like: `my-connector-id`.
	//
	// ***
	ConnectorId pulumi.StringInput
	// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won't be restarted.
	// Structure is documented below.
	TaskRestartPolicy ConnectorTaskRestartPolicyPtrInput
}

func (ConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorArgs)(nil)).Elem()
}

type ConnectorInput interface {
	pulumi.Input

	ToConnectorOutput() ConnectorOutput
	ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput
}

func (*Connector) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (i *Connector) ToConnectorOutput() ConnectorOutput {
	return i.ToConnectorOutputWithContext(context.Background())
}

func (i *Connector) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorOutput)
}

// ConnectorArrayInput is an input type that accepts ConnectorArray and ConnectorArrayOutput values.
// You can construct a concrete instance of `ConnectorArrayInput` via:
//
//	ConnectorArray{ ConnectorArgs{...} }
type ConnectorArrayInput interface {
	pulumi.Input

	ToConnectorArrayOutput() ConnectorArrayOutput
	ToConnectorArrayOutputWithContext(context.Context) ConnectorArrayOutput
}

type ConnectorArray []ConnectorInput

func (ConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connector)(nil)).Elem()
}

func (i ConnectorArray) ToConnectorArrayOutput() ConnectorArrayOutput {
	return i.ToConnectorArrayOutputWithContext(context.Background())
}

func (i ConnectorArray) ToConnectorArrayOutputWithContext(ctx context.Context) ConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorArrayOutput)
}

// ConnectorMapInput is an input type that accepts ConnectorMap and ConnectorMapOutput values.
// You can construct a concrete instance of `ConnectorMapInput` via:
//
//	ConnectorMap{ "key": ConnectorArgs{...} }
type ConnectorMapInput interface {
	pulumi.Input

	ToConnectorMapOutput() ConnectorMapOutput
	ToConnectorMapOutputWithContext(context.Context) ConnectorMapOutput
}

type ConnectorMap map[string]ConnectorInput

func (ConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connector)(nil)).Elem()
}

func (i ConnectorMap) ToConnectorMapOutput() ConnectorMapOutput {
	return i.ToConnectorMapOutputWithContext(context.Background())
}

func (i ConnectorMap) ToConnectorMapOutputWithContext(ctx context.Context) ConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMapOutput)
}

type ConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (o ConnectorOutput) ToConnectorOutput() ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return o
}

// Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
func (o ConnectorOutput) Configs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringMapOutput { return v.Configs }).(pulumi.StringMapOutput)
}

// The connect cluster name.
func (o ConnectorOutput) ConnectCluster() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.ConnectCluster }).(pulumi.StringOutput)
}

// The ID to use for the connector, which will become the final component of the connector's name. This value is structured like: `my-connector-id`.
//
// ***
func (o ConnectorOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
func (o ConnectorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the connector. The `connector` segment is used when connecting directly to the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER/connectors/CONNECTOR_ID`.
func (o ConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ConnectorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The current state of the connect. Possible values: `STATE_UNSPECIFIED`, `UNASSIGNED`, `RUNNING`, `PAUSED`, `FAILED`, `RESTARTING`, and `STOPPED`.
func (o ConnectorOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won't be restarted.
// Structure is documented below.
func (o ConnectorOutput) TaskRestartPolicy() ConnectorTaskRestartPolicyPtrOutput {
	return o.ApplyT(func(v *Connector) ConnectorTaskRestartPolicyPtrOutput { return v.TaskRestartPolicy }).(ConnectorTaskRestartPolicyPtrOutput)
}

type ConnectorArrayOutput struct{ *pulumi.OutputState }

func (ConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connector)(nil)).Elem()
}

func (o ConnectorArrayOutput) ToConnectorArrayOutput() ConnectorArrayOutput {
	return o
}

func (o ConnectorArrayOutput) ToConnectorArrayOutputWithContext(ctx context.Context) ConnectorArrayOutput {
	return o
}

func (o ConnectorArrayOutput) Index(i pulumi.IntInput) ConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connector {
		return vs[0].([]*Connector)[vs[1].(int)]
	}).(ConnectorOutput)
}

type ConnectorMapOutput struct{ *pulumi.OutputState }

func (ConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connector)(nil)).Elem()
}

func (o ConnectorMapOutput) ToConnectorMapOutput() ConnectorMapOutput {
	return o
}

func (o ConnectorMapOutput) ToConnectorMapOutputWithContext(ctx context.Context) ConnectorMapOutput {
	return o
}

func (o ConnectorMapOutput) MapIndex(k pulumi.StringInput) ConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connector {
		return vs[0].(map[string]*Connector)[vs[1].(string)]
	}).(ConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorInput)(nil)).Elem(), &Connector{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorArrayInput)(nil)).Elem(), ConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorMapInput)(nil)).Elem(), ConnectorMap{})
	pulumi.RegisterOutputType(ConnectorOutput{})
	pulumi.RegisterOutputType(ConnectorArrayOutput{})
	pulumi.RegisterOutputType(ConnectorMapOutput{})
}
