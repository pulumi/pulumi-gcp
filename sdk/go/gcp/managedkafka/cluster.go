// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package managedkafka

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Managedkafka Cluster Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/managedkafka"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = managedkafka.NewCluster(ctx, "example", &managedkafka.ClusterArgs{
//				ClusterId: pulumi.String("my-cluster"),
//				Location:  pulumi.String("us-central1"),
//				CapacityConfig: &managedkafka.ClusterCapacityConfigArgs{
//					VcpuCount:   pulumi.String("3"),
//					MemoryBytes: pulumi.String("3221225472"),
//				},
//				GcpConfig: &managedkafka.ClusterGcpConfigArgs{
//					AccessConfig: &managedkafka.ClusterGcpConfigAccessConfigArgs{
//						NetworkConfigs: managedkafka.ClusterGcpConfigAccessConfigNetworkConfigArray{
//							&managedkafka.ClusterGcpConfigAccessConfigNetworkConfigArgs{
//								Subnet: pulumi.String(fmt.Sprintf("projects/%v/regions/us-central1/subnetworks/default", project.Number)),
//							},
//						},
//					},
//				},
//				RebalanceConfig: &managedkafka.ClusterRebalanceConfigArgs{
//					Mode: pulumi.String("NO_REBALANCE"),
//				},
//				Labels: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Managedkafka Cluster Cmek
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/managedkafka"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			keyRing, err := kms.NewKeyRing(ctx, "key_ring", &kms.KeyRingArgs{
//				Name:     pulumi.String("example-key-ring"),
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			key, err := kms.NewCryptoKey(ctx, "key", &kms.CryptoKeyArgs{
//				Name:    pulumi.String("example-key"),
//				KeyRing: keyRing.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = managedkafka.NewCluster(ctx, "example", &managedkafka.ClusterArgs{
//				ClusterId: pulumi.String("my-cluster"),
//				Location:  pulumi.String("us-central1"),
//				CapacityConfig: &managedkafka.ClusterCapacityConfigArgs{
//					VcpuCount:   pulumi.String("3"),
//					MemoryBytes: pulumi.String("3221225472"),
//				},
//				GcpConfig: &managedkafka.ClusterGcpConfigArgs{
//					AccessConfig: &managedkafka.ClusterGcpConfigAccessConfigArgs{
//						NetworkConfigs: managedkafka.ClusterGcpConfigAccessConfigNetworkConfigArray{
//							&managedkafka.ClusterGcpConfigAccessConfigNetworkConfigArgs{
//								Subnet: pulumi.String(fmt.Sprintf("projects/%v/regions/us-central1/subnetworks/default", project.Number)),
//							},
//						},
//					},
//					KmsKey: key.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewServiceIdentity(ctx, "kafka_service_identity", &projects.ServiceIdentityArgs{
//				Project: pulumi.String(project.ProjectId),
//				Service: pulumi.String("managedkafka.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewCryptoKeyIAMBinding(ctx, "crypto_key_binding", &kms.CryptoKeyIAMBindingArgs{
//				CryptoKeyId: key.ID(),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
//				Members: pulumi.StringArray{
//					pulumi.String(fmt.Sprintf("serviceAccount:service-%v@gcp-sa-managedkafka.iam.gserviceaccount.com", project.Number)),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cluster can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/clusters/{{cluster_id}}`
//
// * `{{project}}/{{location}}/{{cluster_id}}`
//
// * `{{location}}/{{cluster_id}}`
//
// When using the `pulumi import` command, Cluster can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:managedkafka/cluster:Cluster default projects/{{project}}/locations/{{location}}/clusters/{{cluster_id}}
// ```
//
// ```sh
// $ pulumi import gcp:managedkafka/cluster:Cluster default {{project}}/{{location}}/{{cluster_id}}
// ```
//
// ```sh
// $ pulumi import gcp:managedkafka/cluster:Cluster default {{location}}/{{cluster_id}}
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// A capacity configuration of a Kafka cluster.
	// Structure is documented below.
	CapacityConfig ClusterCapacityConfigOutput `pulumi:"capacityConfig"`
	// The ID to use for the cluster, which will become the final component of the cluster's name. The ID must be 1-63 characters long, and match the regular expression `a-z?` to comply with RFC 1035. This value is structured like: `my-cluster-id`.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The time when the cluster was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Configuration properties for a Kafka cluster deployed to Google Cloud Platform.
	// Structure is documented below.
	GcpConfig ClusterGcpConfigOutput `pulumi:"gcpConfig"`
	// List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-),
	// underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase
	// characters, and numbers. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// ID of the location of the Apache Kafka for BigQuery resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Defines rebalancing behavior of a Kafka cluster.
	RebalanceConfig ClusterRebalanceConfigPtrOutput `pulumi:"rebalanceConfig"`
	// The current state of the cluster. Possible values: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`.
	State pulumi.StringOutput `pulumi:"state"`
	// The time when the cluster was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CapacityConfig == nil {
		return nil, errors.New("invalid value for required argument 'CapacityConfig'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.GcpConfig == nil {
		return nil, errors.New("invalid value for required argument 'GcpConfig'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("gcp:managedkafka/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("gcp:managedkafka/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// A capacity configuration of a Kafka cluster.
	// Structure is documented below.
	CapacityConfig *ClusterCapacityConfig `pulumi:"capacityConfig"`
	// The ID to use for the cluster, which will become the final component of the cluster's name. The ID must be 1-63 characters long, and match the regular expression `a-z?` to comply with RFC 1035. This value is structured like: `my-cluster-id`.
	ClusterId *string `pulumi:"clusterId"`
	// The time when the cluster was created.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Configuration properties for a Kafka cluster deployed to Google Cloud Platform.
	// Structure is documented below.
	GcpConfig *ClusterGcpConfig `pulumi:"gcpConfig"`
	// List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-),
	// underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase
	// characters, and numbers. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// ID of the location of the Apache Kafka for BigQuery resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location *string `pulumi:"location"`
	// The name of the cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Defines rebalancing behavior of a Kafka cluster.
	RebalanceConfig *ClusterRebalanceConfig `pulumi:"rebalanceConfig"`
	// The current state of the cluster. Possible values: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`.
	State *string `pulumi:"state"`
	// The time when the cluster was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ClusterState struct {
	// A capacity configuration of a Kafka cluster.
	// Structure is documented below.
	CapacityConfig ClusterCapacityConfigPtrInput
	// The ID to use for the cluster, which will become the final component of the cluster's name. The ID must be 1-63 characters long, and match the regular expression `a-z?` to comply with RFC 1035. This value is structured like: `my-cluster-id`.
	ClusterId pulumi.StringPtrInput
	// The time when the cluster was created.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Configuration properties for a Kafka cluster deployed to Google Cloud Platform.
	// Structure is documented below.
	GcpConfig ClusterGcpConfigPtrInput
	// List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-),
	// underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase
	// characters, and numbers. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// ID of the location of the Apache Kafka for BigQuery resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location pulumi.StringPtrInput
	// The name of the cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Defines rebalancing behavior of a Kafka cluster.
	RebalanceConfig ClusterRebalanceConfigPtrInput
	// The current state of the cluster. Possible values: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`.
	State pulumi.StringPtrInput
	// The time when the cluster was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// A capacity configuration of a Kafka cluster.
	// Structure is documented below.
	CapacityConfig ClusterCapacityConfig `pulumi:"capacityConfig"`
	// The ID to use for the cluster, which will become the final component of the cluster's name. The ID must be 1-63 characters long, and match the regular expression `a-z?` to comply with RFC 1035. This value is structured like: `my-cluster-id`.
	ClusterId string `pulumi:"clusterId"`
	// Configuration properties for a Kafka cluster deployed to Google Cloud Platform.
	// Structure is documented below.
	GcpConfig ClusterGcpConfig `pulumi:"gcpConfig"`
	// List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-),
	// underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase
	// characters, and numbers. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// ID of the location of the Apache Kafka for BigQuery resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// Defines rebalancing behavior of a Kafka cluster.
	RebalanceConfig *ClusterRebalanceConfig `pulumi:"rebalanceConfig"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// A capacity configuration of a Kafka cluster.
	// Structure is documented below.
	CapacityConfig ClusterCapacityConfigInput
	// The ID to use for the cluster, which will become the final component of the cluster's name. The ID must be 1-63 characters long, and match the regular expression `a-z?` to comply with RFC 1035. This value is structured like: `my-cluster-id`.
	ClusterId pulumi.StringInput
	// Configuration properties for a Kafka cluster deployed to Google Cloud Platform.
	// Structure is documented below.
	GcpConfig ClusterGcpConfigInput
	// List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-),
	// underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase
	// characters, and numbers. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// ID of the location of the Apache Kafka for BigQuery resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	// Defines rebalancing behavior of a Kafka cluster.
	RebalanceConfig ClusterRebalanceConfigPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// A capacity configuration of a Kafka cluster.
// Structure is documented below.
func (o ClusterOutput) CapacityConfig() ClusterCapacityConfigOutput {
	return o.ApplyT(func(v *Cluster) ClusterCapacityConfigOutput { return v.CapacityConfig }).(ClusterCapacityConfigOutput)
}

// The ID to use for the cluster, which will become the final component of the cluster's name. The ID must be 1-63 characters long, and match the regular expression `a-z?` to comply with RFC 1035. This value is structured like: `my-cluster-id`.
func (o ClusterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The time when the cluster was created.
func (o ClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o ClusterOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Configuration properties for a Kafka cluster deployed to Google Cloud Platform.
// Structure is documented below.
func (o ClusterOutput) GcpConfig() ClusterGcpConfigOutput {
	return o.ApplyT(func(v *Cluster) ClusterGcpConfigOutput { return v.GcpConfig }).(ClusterGcpConfigOutput)
}

// List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-),
// underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase
// characters, and numbers. **Note**: This field is non-authoritative, and will only manage the labels present in your
// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o ClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// ID of the location of the Apache Kafka for BigQuery resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
func (o ClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ClusterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o ClusterOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Defines rebalancing behavior of a Kafka cluster.
func (o ClusterOutput) RebalanceConfig() ClusterRebalanceConfigPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterRebalanceConfigPtrOutput { return v.RebalanceConfig }).(ClusterRebalanceConfigPtrOutput)
}

// The current state of the cluster. Possible values: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`.
func (o ClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The time when the cluster was last updated.
func (o ClusterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
