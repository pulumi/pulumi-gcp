// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package managedkafka

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Managed Service for Kafka Connect cluster.
//
// ## Example Usage
//
// ### Managedkafka Connect Cluster Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/managedkafka"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			mkcSecondarySubnet, err := compute.NewSubnetwork(ctx, "mkc_secondary_subnet", &compute.SubnetworkArgs{
//				Project:     pulumi.String(project.ProjectId),
//				Name:        pulumi.String("my-secondary-subnetwork"),
//				IpCidrRange: pulumi.String("10.3.0.0/16"),
//				Region:      pulumi.String("us-central1"),
//				Network:     pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			cluster, err := managedkafka.NewCluster(ctx, "cluster", &managedkafka.ClusterArgs{
//				ClusterId: pulumi.String("my-cluster"),
//				Location:  pulumi.String("us-central1"),
//				CapacityConfig: &managedkafka.ClusterCapacityConfigArgs{
//					VcpuCount:   pulumi.String("3"),
//					MemoryBytes: pulumi.String("3221225472"),
//				},
//				GcpConfig: &managedkafka.ClusterGcpConfigArgs{
//					AccessConfig: &managedkafka.ClusterGcpConfigAccessConfigArgs{
//						NetworkConfigs: managedkafka.ClusterGcpConfigAccessConfigNetworkConfigArray{
//							&managedkafka.ClusterGcpConfigAccessConfigNetworkConfigArgs{
//								Subnet: pulumi.Sprintf("projects/%v/regions/us-central1/subnetworks/default", project.Number),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = managedkafka.NewConnectCluster(ctx, "example", &managedkafka.ConnectClusterArgs{
//				ConnectClusterId: pulumi.String("my-connect-cluster"),
//				KafkaCluster: cluster.ClusterId.ApplyT(func(clusterId string) (string, error) {
//					return fmt.Sprintf("projects/%v/locations/us-central1/clusters/%v", project.ProjectId, clusterId), nil
//				}).(pulumi.StringOutput),
//				Location: pulumi.String("us-central1"),
//				CapacityConfig: &managedkafka.ConnectClusterCapacityConfigArgs{
//					VcpuCount:   pulumi.String("12"),
//					MemoryBytes: pulumi.String("21474836480"),
//				},
//				GcpConfig: &managedkafka.ConnectClusterGcpConfigArgs{
//					AccessConfig: &managedkafka.ConnectClusterGcpConfigAccessConfigArgs{
//						NetworkConfigs: managedkafka.ConnectClusterGcpConfigAccessConfigNetworkConfigArray{
//							&managedkafka.ConnectClusterGcpConfigAccessConfigNetworkConfigArgs{
//								PrimarySubnet: pulumi.Sprintf("projects/%v/regions/us-central1/subnetworks/default", project.Number),
//								AdditionalSubnets: pulumi.StringArray{
//									mkcSecondarySubnet.ID(),
//								},
//								DnsDomainNames: pulumi.StringArray{
//									cluster.ClusterId.ApplyT(func(clusterId string) (string, error) {
//										return fmt.Sprintf("%v.us-central1.managedkafka.%v.cloud.goog", clusterId, project.ProjectId), nil
//									}).(pulumi.StringOutput),
//								},
//							},
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ConnectCluster can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/connectClusters/{{connect_cluster_id}}`
//
// * `{{project}}/{{location}}/{{connect_cluster_id}}`
//
// * `{{location}}/{{connect_cluster_id}}`
//
// When using the `pulumi import` command, ConnectCluster can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:managedkafka/connectCluster:ConnectCluster default projects/{{project}}/locations/{{location}}/connectClusters/{{connect_cluster_id}}
// ```
//
// ```sh
// $ pulumi import gcp:managedkafka/connectCluster:ConnectCluster default {{project}}/{{location}}/{{connect_cluster_id}}
// ```
//
// ```sh
// $ pulumi import gcp:managedkafka/connectCluster:ConnectCluster default {{location}}/{{connect_cluster_id}}
// ```
type ConnectCluster struct {
	pulumi.CustomResourceState

	// A capacity configuration of a Kafka cluster.
	// Structure is documented below.
	CapacityConfig ConnectClusterCapacityConfigOutput `pulumi:"capacityConfig"`
	// The ID to use for the Connect Cluster, which will become the final component of the connect cluster's name. This value is structured like: `my-connect-cluster-id`.
	ConnectClusterId pulumi.StringOutput `pulumi:"connectClusterId"`
	// The time when the cluster was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Configuration properties for a Kafka Connect cluster deployed to Google Cloud Platform.
	// Structure is documented below.
	GcpConfig ConnectClusterGcpConfigOutput `pulumi:"gcpConfig"`
	// The name of the Kafka cluster this Kafka Connect cluster is attached to. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
	KafkaCluster pulumi.StringOutput `pulumi:"kafkaCluster"`
	// List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-), underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase characters, and numbers.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER_ID`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The current state of the connect cluster. Possible values: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`.
	State pulumi.StringOutput `pulumi:"state"`
	// The time when the cluster was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewConnectCluster registers a new resource with the given unique name, arguments, and options.
func NewConnectCluster(ctx *pulumi.Context,
	name string, args *ConnectClusterArgs, opts ...pulumi.ResourceOption) (*ConnectCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CapacityConfig == nil {
		return nil, errors.New("invalid value for required argument 'CapacityConfig'")
	}
	if args.ConnectClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectClusterId'")
	}
	if args.GcpConfig == nil {
		return nil, errors.New("invalid value for required argument 'GcpConfig'")
	}
	if args.KafkaCluster == nil {
		return nil, errors.New("invalid value for required argument 'KafkaCluster'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectCluster
	err := ctx.RegisterResource("gcp:managedkafka/connectCluster:ConnectCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectCluster gets an existing ConnectCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectClusterState, opts ...pulumi.ResourceOption) (*ConnectCluster, error) {
	var resource ConnectCluster
	err := ctx.ReadResource("gcp:managedkafka/connectCluster:ConnectCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectCluster resources.
type connectClusterState struct {
	// A capacity configuration of a Kafka cluster.
	// Structure is documented below.
	CapacityConfig *ConnectClusterCapacityConfig `pulumi:"capacityConfig"`
	// The ID to use for the Connect Cluster, which will become the final component of the connect cluster's name. This value is structured like: `my-connect-cluster-id`.
	ConnectClusterId *string `pulumi:"connectClusterId"`
	// The time when the cluster was created.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Configuration properties for a Kafka Connect cluster deployed to Google Cloud Platform.
	// Structure is documented below.
	GcpConfig *ConnectClusterGcpConfig `pulumi:"gcpConfig"`
	// The name of the Kafka cluster this Kafka Connect cluster is attached to. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
	KafkaCluster *string `pulumi:"kafkaCluster"`
	// List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-), underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase characters, and numbers.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location *string `pulumi:"location"`
	// The name of the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER_ID`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The current state of the connect cluster. Possible values: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`.
	State *string `pulumi:"state"`
	// The time when the cluster was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ConnectClusterState struct {
	// A capacity configuration of a Kafka cluster.
	// Structure is documented below.
	CapacityConfig ConnectClusterCapacityConfigPtrInput
	// The ID to use for the Connect Cluster, which will become the final component of the connect cluster's name. This value is structured like: `my-connect-cluster-id`.
	ConnectClusterId pulumi.StringPtrInput
	// The time when the cluster was created.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Configuration properties for a Kafka Connect cluster deployed to Google Cloud Platform.
	// Structure is documented below.
	GcpConfig ConnectClusterGcpConfigPtrInput
	// The name of the Kafka cluster this Kafka Connect cluster is attached to. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
	KafkaCluster pulumi.StringPtrInput
	// List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-), underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase characters, and numbers.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location pulumi.StringPtrInput
	// The name of the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER_ID`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The current state of the connect cluster. Possible values: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`.
	State pulumi.StringPtrInput
	// The time when the cluster was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (ConnectClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectClusterState)(nil)).Elem()
}

type connectClusterArgs struct {
	// A capacity configuration of a Kafka cluster.
	// Structure is documented below.
	CapacityConfig ConnectClusterCapacityConfig `pulumi:"capacityConfig"`
	// The ID to use for the Connect Cluster, which will become the final component of the connect cluster's name. This value is structured like: `my-connect-cluster-id`.
	ConnectClusterId string `pulumi:"connectClusterId"`
	// Configuration properties for a Kafka Connect cluster deployed to Google Cloud Platform.
	// Structure is documented below.
	GcpConfig ConnectClusterGcpConfig `pulumi:"gcpConfig"`
	// The name of the Kafka cluster this Kafka Connect cluster is attached to. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
	KafkaCluster string `pulumi:"kafkaCluster"`
	// List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-), underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase characters, and numbers.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a ConnectCluster resource.
type ConnectClusterArgs struct {
	// A capacity configuration of a Kafka cluster.
	// Structure is documented below.
	CapacityConfig ConnectClusterCapacityConfigInput
	// The ID to use for the Connect Cluster, which will become the final component of the connect cluster's name. This value is structured like: `my-connect-cluster-id`.
	ConnectClusterId pulumi.StringInput
	// Configuration properties for a Kafka Connect cluster deployed to Google Cloud Platform.
	// Structure is documented below.
	GcpConfig ConnectClusterGcpConfigInput
	// The name of the Kafka cluster this Kafka Connect cluster is attached to. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
	KafkaCluster pulumi.StringInput
	// List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-), underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase characters, and numbers.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ConnectClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectClusterArgs)(nil)).Elem()
}

type ConnectClusterInput interface {
	pulumi.Input

	ToConnectClusterOutput() ConnectClusterOutput
	ToConnectClusterOutputWithContext(ctx context.Context) ConnectClusterOutput
}

func (*ConnectCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectCluster)(nil)).Elem()
}

func (i *ConnectCluster) ToConnectClusterOutput() ConnectClusterOutput {
	return i.ToConnectClusterOutputWithContext(context.Background())
}

func (i *ConnectCluster) ToConnectClusterOutputWithContext(ctx context.Context) ConnectClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectClusterOutput)
}

// ConnectClusterArrayInput is an input type that accepts ConnectClusterArray and ConnectClusterArrayOutput values.
// You can construct a concrete instance of `ConnectClusterArrayInput` via:
//
//	ConnectClusterArray{ ConnectClusterArgs{...} }
type ConnectClusterArrayInput interface {
	pulumi.Input

	ToConnectClusterArrayOutput() ConnectClusterArrayOutput
	ToConnectClusterArrayOutputWithContext(context.Context) ConnectClusterArrayOutput
}

type ConnectClusterArray []ConnectClusterInput

func (ConnectClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectCluster)(nil)).Elem()
}

func (i ConnectClusterArray) ToConnectClusterArrayOutput() ConnectClusterArrayOutput {
	return i.ToConnectClusterArrayOutputWithContext(context.Background())
}

func (i ConnectClusterArray) ToConnectClusterArrayOutputWithContext(ctx context.Context) ConnectClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectClusterArrayOutput)
}

// ConnectClusterMapInput is an input type that accepts ConnectClusterMap and ConnectClusterMapOutput values.
// You can construct a concrete instance of `ConnectClusterMapInput` via:
//
//	ConnectClusterMap{ "key": ConnectClusterArgs{...} }
type ConnectClusterMapInput interface {
	pulumi.Input

	ToConnectClusterMapOutput() ConnectClusterMapOutput
	ToConnectClusterMapOutputWithContext(context.Context) ConnectClusterMapOutput
}

type ConnectClusterMap map[string]ConnectClusterInput

func (ConnectClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectCluster)(nil)).Elem()
}

func (i ConnectClusterMap) ToConnectClusterMapOutput() ConnectClusterMapOutput {
	return i.ToConnectClusterMapOutputWithContext(context.Background())
}

func (i ConnectClusterMap) ToConnectClusterMapOutputWithContext(ctx context.Context) ConnectClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectClusterMapOutput)
}

type ConnectClusterOutput struct{ *pulumi.OutputState }

func (ConnectClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectCluster)(nil)).Elem()
}

func (o ConnectClusterOutput) ToConnectClusterOutput() ConnectClusterOutput {
	return o
}

func (o ConnectClusterOutput) ToConnectClusterOutputWithContext(ctx context.Context) ConnectClusterOutput {
	return o
}

// A capacity configuration of a Kafka cluster.
// Structure is documented below.
func (o ConnectClusterOutput) CapacityConfig() ConnectClusterCapacityConfigOutput {
	return o.ApplyT(func(v *ConnectCluster) ConnectClusterCapacityConfigOutput { return v.CapacityConfig }).(ConnectClusterCapacityConfigOutput)
}

// The ID to use for the Connect Cluster, which will become the final component of the connect cluster's name. This value is structured like: `my-connect-cluster-id`.
func (o ConnectClusterOutput) ConnectClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectCluster) pulumi.StringOutput { return v.ConnectClusterId }).(pulumi.StringOutput)
}

// The time when the cluster was created.
func (o ConnectClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectCluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o ConnectClusterOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectCluster) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Configuration properties for a Kafka Connect cluster deployed to Google Cloud Platform.
// Structure is documented below.
func (o ConnectClusterOutput) GcpConfig() ConnectClusterGcpConfigOutput {
	return o.ApplyT(func(v *ConnectCluster) ConnectClusterGcpConfigOutput { return v.GcpConfig }).(ConnectClusterGcpConfigOutput)
}

// The name of the Kafka cluster this Kafka Connect cluster is attached to. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
func (o ConnectClusterOutput) KafkaCluster() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectCluster) pulumi.StringOutput { return v.KafkaCluster }).(pulumi.StringOutput)
}

// List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-), underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase characters, and numbers.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o ConnectClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectCluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
func (o ConnectClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER_ID`.
func (o ConnectClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ConnectClusterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectCluster) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o ConnectClusterOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectCluster) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The current state of the connect cluster. Possible values: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`.
func (o ConnectClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectCluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The time when the cluster was last updated.
func (o ConnectClusterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectCluster) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ConnectClusterArrayOutput struct{ *pulumi.OutputState }

func (ConnectClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectCluster)(nil)).Elem()
}

func (o ConnectClusterArrayOutput) ToConnectClusterArrayOutput() ConnectClusterArrayOutput {
	return o
}

func (o ConnectClusterArrayOutput) ToConnectClusterArrayOutputWithContext(ctx context.Context) ConnectClusterArrayOutput {
	return o
}

func (o ConnectClusterArrayOutput) Index(i pulumi.IntInput) ConnectClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectCluster {
		return vs[0].([]*ConnectCluster)[vs[1].(int)]
	}).(ConnectClusterOutput)
}

type ConnectClusterMapOutput struct{ *pulumi.OutputState }

func (ConnectClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectCluster)(nil)).Elem()
}

func (o ConnectClusterMapOutput) ToConnectClusterMapOutput() ConnectClusterMapOutput {
	return o
}

func (o ConnectClusterMapOutput) ToConnectClusterMapOutputWithContext(ctx context.Context) ConnectClusterMapOutput {
	return o
}

func (o ConnectClusterMapOutput) MapIndex(k pulumi.StringInput) ConnectClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectCluster {
		return vs[0].(map[string]*ConnectCluster)[vs[1].(string)]
	}).(ConnectClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectClusterInput)(nil)).Elem(), &ConnectCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectClusterArrayInput)(nil)).Elem(), ConnectClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectClusterMapInput)(nil)).Elem(), ConnectClusterMap{})
	pulumi.RegisterOutputType(ConnectClusterOutput{})
	pulumi.RegisterOutputType(ConnectClusterArrayOutput{})
	pulumi.RegisterOutputType(ConnectClusterMapOutput{})
}
