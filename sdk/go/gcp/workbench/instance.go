// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workbench

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Workbench instance.
//
// ## Example Usage
// ### Workbench Instance Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/workbench"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workbench.NewInstance(ctx, "instance", &workbench.InstanceArgs{
//				Location: pulumi.String("us-west1-a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Workbench Instance Basic Gpu
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/workbench"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workbench.NewInstance(ctx, "instance", &workbench.InstanceArgs{
//				GceSetup: &workbench.InstanceGceSetupArgs{
//					AcceleratorConfigs: workbench.InstanceGceSetupAcceleratorConfigArray{
//						&workbench.InstanceGceSetupAcceleratorConfigArgs{
//							CoreCount: pulumi.String("1"),
//							Type:      pulumi.String("NVIDIA_TESLA_T4"),
//						},
//					},
//					MachineType: pulumi.String("n1-standard-1"),
//					VmImage: &workbench.InstanceGceSetupVmImageArgs{
//						Family:  pulumi.String("tf-latest-gpu"),
//						Project: pulumi.String("deeplearning-platform-release"),
//					},
//				},
//				Location: pulumi.String("us-central1-a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Workbench Instance Labels
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/workbench"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workbench.NewInstance(ctx, "instance", &workbench.InstanceArgs{
//				GceSetup: &workbench.InstanceGceSetupArgs{
//					MachineType: pulumi.String("e2-standard-4"),
//					Metadata: pulumi.StringMap{
//						"terraform": pulumi.String("true"),
//					},
//					ServiceAccounts: workbench.InstanceGceSetupServiceAccountArray{
//						&workbench.InstanceGceSetupServiceAccountArgs{
//							Email: pulumi.String("my@service-account.com"),
//						},
//					},
//				},
//				InstanceOwners: pulumi.StringArray{
//					pulumi.String("my@service-account.com"),
//				},
//				Labels: pulumi.StringMap{
//					"k": pulumi.String("val"),
//				},
//				Location: pulumi.String("us-central1-a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Workbench Instance Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/workbench"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myNetwork, err := compute.NewNetwork(ctx, "myNetwork", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			mySubnetwork, err := compute.NewSubnetwork(ctx, "mySubnetwork", &compute.SubnetworkArgs{
//				Network:     myNetwork.ID(),
//				Region:      pulumi.String("us-central1"),
//				IpCidrRange: pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewCryptoKey(ctx, "crypto-key", &kms.CryptoKeyArgs{
//				KeyRing: keyring.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = workbench.NewInstance(ctx, "instance", &workbench.InstanceArgs{
//				Location: pulumi.String("us-central1-a"),
//				GceSetup: &workbench.InstanceGceSetupArgs{
//					MachineType: pulumi.String("n1-standard-4"),
//					AcceleratorConfigs: workbench.InstanceGceSetupAcceleratorConfigArray{
//						&workbench.InstanceGceSetupAcceleratorConfigArgs{
//							Type:      pulumi.String("NVIDIA_TESLA_T4"),
//							CoreCount: pulumi.String("1"),
//						},
//					},
//					DisablePublicIp: pulumi.Bool(false),
//					ServiceAccounts: workbench.InstanceGceSetupServiceAccountArray{
//						&workbench.InstanceGceSetupServiceAccountArgs{
//							Email: pulumi.String("my@service-account.com"),
//						},
//					},
//					BootDisk: &workbench.InstanceGceSetupBootDiskArgs{
//						DiskSizeGb:     pulumi.String("310"),
//						DiskType:       pulumi.String("PD_SSD"),
//						DiskEncryption: pulumi.String("GMEK"),
//						KmsKey:         crypto_key.ID(),
//					},
//					DataDisks: &workbench.InstanceGceSetupDataDisksArgs{
//						DiskSizeGb:     pulumi.String("330"),
//						DiskType:       pulumi.String("PD_SSD"),
//						DiskEncryption: pulumi.String("GMEK"),
//						KmsKey:         crypto_key.ID(),
//					},
//					NetworkInterfaces: workbench.InstanceGceSetupNetworkInterfaceArray{
//						&workbench.InstanceGceSetupNetworkInterfaceArgs{
//							Network: myNetwork.ID(),
//							Subnet:  mySubnetwork.ID(),
//							NicType: pulumi.String("GVNIC"),
//						},
//					},
//					Metadata: pulumi.StringMap{
//						"terraform": pulumi.String("true"),
//					},
//					EnableIpForwarding: pulumi.Bool(true),
//					Tags: pulumi.StringArray{
//						pulumi.String("abc"),
//						pulumi.String("def"),
//					},
//				},
//				DisableProxyAccess: pulumi.Bool(true),
//				InstanceOwners: pulumi.StringArray{
//					pulumi.String("my@service-account.com"),
//				},
//				Labels: pulumi.StringMap{
//					"k": pulumi.String("val"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Instance can be imported using any of these accepted formats* `projects/{{project}}/locations/{{location}}/instances/{{name}}` * `{{project}}/{{location}}/{{name}}` * `{{location}}/{{name}}` When using the `pulumi import` command, Instance can be imported using one of the formats above. For example
//
// ```sh
//
//	$ pulumi import gcp:workbench/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:workbench/instance:Instance default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:workbench/instance:Instance default {{location}}/{{name}}
//
// ```
type Instance struct {
	pulumi.CustomResourceState

	// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
	// The milliseconds portion (".SSS") is optional.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Output only. Email address of entity that sent original CreateInstance request.
	Creator pulumi.StringOutput `pulumi:"creator"`
	// Optional. If true, the workbench instance will not register with the proxy.
	DisableProxyAccess pulumi.BoolPtrOutput `pulumi:"disableProxyAccess"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The definition of how to configure a VM instance outside of Resources and Identity.
	// Structure is documented below.
	GceSetup InstanceGceSetupOutput `pulumi:"gceSetup"`
	// 'Output only. Additional information about instance health. Example:
	// healthInfo": { "dockerProxyAgentStatus": "1", "dockerStatus": "1", "jupyterlabApiStatus":
	// "-1", "jupyterlabStatus": "-1", "updated": "2020-10-18 09:40:03.573409" }'
	HealthInfos InstanceHealthInfoArrayOutput `pulumi:"healthInfos"`
	// Output only. Instance health_state.
	HealthState pulumi.StringOutput `pulumi:"healthState"`
	// Required. User-defined unique ID of this instance.
	InstanceId pulumi.StringPtrOutput `pulumi:"instanceId"`
	// 'Optional. Input only. The owner of this instance after creation. Format:
	// `alias@example.com` Currently supports one owner only. If not specified, all of
	// the service account users of your VM instance''s service account can use the instance.'
	InstanceOwners pulumi.StringArrayOutput `pulumi:"instanceOwners"`
	// Optional. Labels to apply to this instance. These can be later modified
	// by the UpdateInstance method.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Part of `parent`. See documentation of `projectsId`.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. The proxy endpoint that is used to access the Jupyter notebook.
	ProxyUri pulumi.StringOutput `pulumi:"proxyUri"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// (Output)
	// Output only. The state of this instance upgrade history entry.
	State pulumi.StringOutput `pulumi:"state"`
	// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
	// The milliseconds portion (".SSS") is optional.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Output only. The upgrade history of this instance.
	// Structure is documented below.
	UpgradeHistories InstanceUpgradeHistoryArrayOutput `pulumi:"upgradeHistories"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("gcp:workbench/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("gcp:workbench/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
	// The milliseconds portion (".SSS") is optional.
	CreateTime *string `pulumi:"createTime"`
	// Output only. Email address of entity that sent original CreateInstance request.
	Creator *string `pulumi:"creator"`
	// Optional. If true, the workbench instance will not register with the proxy.
	DisableProxyAccess *bool `pulumi:"disableProxyAccess"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The definition of how to configure a VM instance outside of Resources and Identity.
	// Structure is documented below.
	GceSetup *InstanceGceSetup `pulumi:"gceSetup"`
	// 'Output only. Additional information about instance health. Example:
	// healthInfo": { "dockerProxyAgentStatus": "1", "dockerStatus": "1", "jupyterlabApiStatus":
	// "-1", "jupyterlabStatus": "-1", "updated": "2020-10-18 09:40:03.573409" }'
	HealthInfos []InstanceHealthInfo `pulumi:"healthInfos"`
	// Output only. Instance health_state.
	HealthState *string `pulumi:"healthState"`
	// Required. User-defined unique ID of this instance.
	InstanceId *string `pulumi:"instanceId"`
	// 'Optional. Input only. The owner of this instance after creation. Format:
	// `alias@example.com` Currently supports one owner only. If not specified, all of
	// the service account users of your VM instance''s service account can use the instance.'
	InstanceOwners []string `pulumi:"instanceOwners"`
	// Optional. Labels to apply to this instance. These can be later modified
	// by the UpdateInstance method.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Part of `parent`. See documentation of `projectsId`.
	//
	// ***
	Location *string `pulumi:"location"`
	// The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Output only. The proxy endpoint that is used to access the Jupyter notebook.
	ProxyUri *string `pulumi:"proxyUri"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// (Output)
	// Output only. The state of this instance upgrade history entry.
	State *string `pulumi:"state"`
	// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
	// The milliseconds portion (".SSS") is optional.
	UpdateTime *string `pulumi:"updateTime"`
	// Output only. The upgrade history of this instance.
	// Structure is documented below.
	UpgradeHistories []InstanceUpgradeHistory `pulumi:"upgradeHistories"`
}

type InstanceState struct {
	// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
	// The milliseconds portion (".SSS") is optional.
	CreateTime pulumi.StringPtrInput
	// Output only. Email address of entity that sent original CreateInstance request.
	Creator pulumi.StringPtrInput
	// Optional. If true, the workbench instance will not register with the proxy.
	DisableProxyAccess pulumi.BoolPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The definition of how to configure a VM instance outside of Resources and Identity.
	// Structure is documented below.
	GceSetup InstanceGceSetupPtrInput
	// 'Output only. Additional information about instance health. Example:
	// healthInfo": { "dockerProxyAgentStatus": "1", "dockerStatus": "1", "jupyterlabApiStatus":
	// "-1", "jupyterlabStatus": "-1", "updated": "2020-10-18 09:40:03.573409" }'
	HealthInfos InstanceHealthInfoArrayInput
	// Output only. Instance health_state.
	HealthState pulumi.StringPtrInput
	// Required. User-defined unique ID of this instance.
	InstanceId pulumi.StringPtrInput
	// 'Optional. Input only. The owner of this instance after creation. Format:
	// `alias@example.com` Currently supports one owner only. If not specified, all of
	// the service account users of your VM instance''s service account can use the instance.'
	InstanceOwners pulumi.StringArrayInput
	// Optional. Labels to apply to this instance. These can be later modified
	// by the UpdateInstance method.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Part of `parent`. See documentation of `projectsId`.
	//
	// ***
	Location pulumi.StringPtrInput
	// The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Output only. The proxy endpoint that is used to access the Jupyter notebook.
	ProxyUri pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// (Output)
	// Output only. The state of this instance upgrade history entry.
	State pulumi.StringPtrInput
	// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
	// The milliseconds portion (".SSS") is optional.
	UpdateTime pulumi.StringPtrInput
	// Output only. The upgrade history of this instance.
	// Structure is documented below.
	UpgradeHistories InstanceUpgradeHistoryArrayInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Optional. If true, the workbench instance will not register with the proxy.
	DisableProxyAccess *bool `pulumi:"disableProxyAccess"`
	// The definition of how to configure a VM instance outside of Resources and Identity.
	// Structure is documented below.
	GceSetup *InstanceGceSetup `pulumi:"gceSetup"`
	// Required. User-defined unique ID of this instance.
	InstanceId *string `pulumi:"instanceId"`
	// 'Optional. Input only. The owner of this instance after creation. Format:
	// `alias@example.com` Currently supports one owner only. If not specified, all of
	// the service account users of your VM instance''s service account can use the instance.'
	InstanceOwners []string `pulumi:"instanceOwners"`
	// Optional. Labels to apply to this instance. These can be later modified
	// by the UpdateInstance method.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Part of `parent`. See documentation of `projectsId`.
	//
	// ***
	Location string `pulumi:"location"`
	// The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Optional. If true, the workbench instance will not register with the proxy.
	DisableProxyAccess pulumi.BoolPtrInput
	// The definition of how to configure a VM instance outside of Resources and Identity.
	// Structure is documented below.
	GceSetup InstanceGceSetupPtrInput
	// Required. User-defined unique ID of this instance.
	InstanceId pulumi.StringPtrInput
	// 'Optional. Input only. The owner of this instance after creation. Format:
	// `alias@example.com` Currently supports one owner only. If not specified, all of
	// the service account users of your VM instance''s service account can use the instance.'
	InstanceOwners pulumi.StringArrayInput
	// Optional. Labels to apply to this instance. These can be later modified
	// by the UpdateInstance method.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Part of `parent`. See documentation of `projectsId`.
	//
	// ***
	Location pulumi.StringInput
	// The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
// The milliseconds portion (".SSS") is optional.
func (o InstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Output only. Email address of entity that sent original CreateInstance request.
func (o InstanceOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

// Optional. If true, the workbench instance will not register with the proxy.
func (o InstanceOutput) DisableProxyAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.DisableProxyAccess }).(pulumi.BoolPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o InstanceOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The definition of how to configure a VM instance outside of Resources and Identity.
// Structure is documented below.
func (o InstanceOutput) GceSetup() InstanceGceSetupOutput {
	return o.ApplyT(func(v *Instance) InstanceGceSetupOutput { return v.GceSetup }).(InstanceGceSetupOutput)
}

// 'Output only. Additional information about instance health. Example:
// healthInfo": { "dockerProxyAgentStatus": "1", "dockerStatus": "1", "jupyterlabApiStatus":
// "-1", "jupyterlabStatus": "-1", "updated": "2020-10-18 09:40:03.573409" }'
func (o InstanceOutput) HealthInfos() InstanceHealthInfoArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceHealthInfoArrayOutput { return v.HealthInfos }).(InstanceHealthInfoArrayOutput)
}

// Output only. Instance health_state.
func (o InstanceOutput) HealthState() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.HealthState }).(pulumi.StringOutput)
}

// Required. User-defined unique ID of this instance.
func (o InstanceOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// 'Optional. Input only. The owner of this instance after creation. Format:
// `alias@example.com` Currently supports one owner only. If not specified, all of
// the service account users of your VM instance”s service account can use the instance.'
func (o InstanceOutput) InstanceOwners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.InstanceOwners }).(pulumi.StringArrayOutput)
}

// Optional. Labels to apply to this instance. These can be later modified
// by the UpdateInstance method.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o InstanceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Part of `parent`. See documentation of `projectsId`.
//
// ***
func (o InstanceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o InstanceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. The proxy endpoint that is used to access the Jupyter notebook.
func (o InstanceOutput) ProxyUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ProxyUri }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o InstanceOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// (Output)
// Output only. The state of this instance upgrade history entry.
func (o InstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
// The milliseconds portion (".SSS") is optional.
func (o InstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Output only. The upgrade history of this instance.
// Structure is documented below.
func (o InstanceOutput) UpgradeHistories() InstanceUpgradeHistoryArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceUpgradeHistoryArrayOutput { return v.UpgradeHistories }).(InstanceUpgradeHistoryArrayOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
