// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package siteverification

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## subcategory: "Site Verification"
//
// description: |-
//
//	Manages additional owners on verified web resources.
//
// ---
//
// # siteverification.Owner
//
// An owner is an additional user that may manage a verified web site in the
// [Google Search Console](https://www.google.com/webmasters/tools/). There
// are two types of web resource owners:
//
//   - Verified owners, which are added to a web resource automatically when it
//     is created (i.e., when the resource is verified). A verified owner is
//     determined by the identity of the user requesting verification.
//   - Additional owners, which can be added to the resource by verified owners.
//
// `siteverification.Owner` creates additional owners. If your web site
// was verified using the
// `siteverification.WebResource`
// resource then you (or the identity was used to create the resource, such as a
// service account) are already an owner.
//
// > **Note:** The email address of the owner must belong to a Google account,
// such as a Gmail account, a Google Workspace account, or a GCP service account.
//
// Working with site verification requires the `https://www.googleapis.com/auth/siteverification`
// authentication scope. See the
// Google Provider authentication documentation
// to learn how to configure additional scopes.
//
// To get more information about site owners, see:
//
// * [API documentation](https://developers.google.com/site-verification/v1)
// * How-to Guides
//   - [Getting Started](https://developers.google.com/site-verification/v1/getting_started)
//
// ## Example Usage
//
// ### Site Verification Storage Bucket
//
// This example uses the `FILE` verification method to verify ownership of web site hosted
// in a Google Cloud Storage bucket. Ownership is proved by creating a file with a Google-provided
// value in a known location. The user applying this configuration will automatically be
// added as a verified owner, and the `siteverification.Owner` resource will add
// `user@example.com` as an additional owner.
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/siteverification"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:     pulumi.String("example-storage-bucket"),
//				Location: pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			token := siteverification.GetTokenOutput(ctx, siteverification.GetTokenOutputArgs{
//				Type: pulumi.String("SITE"),
//				Identifier: bucket.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("https://%v.storage.googleapis.com/", name), nil
//				}).(pulumi.StringOutput),
//				VerificationMethod: pulumi.String("FILE"),
//			}, nil)
//			object, err := storage.NewBucketObject(ctx, "object", &storage.BucketObjectArgs{
//				Name: pulumi.String(token.ApplyT(func(token siteverification.GetTokenResult) (*string, error) {
//					return &token.Token, nil
//				}).(pulumi.StringPtrOutput)),
//				Content: token.ApplyT(func(token siteverification.GetTokenResult) (string, error) {
//					return fmt.Sprintf("google-site-verification: %v", token.Token), nil
//				}).(pulumi.StringOutput),
//				Bucket: bucket.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewObjectAccessControl(ctx, "public_rule", &storage.ObjectAccessControlArgs{
//				Bucket: bucket.Name,
//				Object: object.Name,
//				Role:   pulumi.String("READER"),
//				Entity: pulumi.String("allUsers"),
//			})
//			if err != nil {
//				return err
//			}
//			example, err := siteverification.NewWebResource(ctx, "example", &siteverification.WebResourceArgs{
//				Site: &siteverification.WebResourceSiteArgs{
//					Type: token.ApplyT(func(token siteverification.GetTokenResult) (*string, error) {
//						return &token.Type, nil
//					}).(pulumi.StringPtrOutput),
//					Identifier: token.ApplyT(func(token siteverification.GetTokenResult) (*string, error) {
//						return &token.Identifier, nil
//					}).(pulumi.StringPtrOutput),
//				},
//				VerificationMethod: pulumi.String(token.ApplyT(func(token siteverification.GetTokenResult) (*string, error) {
//					return &token.VerificationMethod, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = siteverification.NewOwner(ctx, "example", &siteverification.OwnerArgs{
//				WebResourceId: example.ID(),
//				Email:         pulumi.String("user@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Owner can be imported using this format:
//
// * `webResource/{{web_resource_id}}/{{email}}`
//
// When using the `pulumi import` command, Site owners can be imported using the format above. For example:
//
// ```sh
// $ pulumi import gcp:siteverification/owner:Owner default webResource/{{web_resource_id}}/{{email}}
// ```
//
// verified owners is to delete the web resource itself.
type Owner struct {
	pulumi.CustomResourceState

	// The email of the user to be added as an owner.
	//
	// ***
	Email pulumi.StringOutput `pulumi:"email"`
	// The id of of the web resource to which the owner will be added, in the form `webResource/<resource_id>`,
	// such as `webResource/https://www.example.com/`
	WebResourceId pulumi.StringOutput `pulumi:"webResourceId"`
}

// NewOwner registers a new resource with the given unique name, arguments, and options.
func NewOwner(ctx *pulumi.Context,
	name string, args *OwnerArgs, opts ...pulumi.ResourceOption) (*Owner, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.WebResourceId == nil {
		return nil, errors.New("invalid value for required argument 'WebResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Owner
	err := ctx.RegisterResource("gcp:siteverification/owner:Owner", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOwner gets an existing Owner resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOwner(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OwnerState, opts ...pulumi.ResourceOption) (*Owner, error) {
	var resource Owner
	err := ctx.ReadResource("gcp:siteverification/owner:Owner", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Owner resources.
type ownerState struct {
	// The email of the user to be added as an owner.
	//
	// ***
	Email *string `pulumi:"email"`
	// The id of of the web resource to which the owner will be added, in the form `webResource/<resource_id>`,
	// such as `webResource/https://www.example.com/`
	WebResourceId *string `pulumi:"webResourceId"`
}

type OwnerState struct {
	// The email of the user to be added as an owner.
	//
	// ***
	Email pulumi.StringPtrInput
	// The id of of the web resource to which the owner will be added, in the form `webResource/<resource_id>`,
	// such as `webResource/https://www.example.com/`
	WebResourceId pulumi.StringPtrInput
}

func (OwnerState) ElementType() reflect.Type {
	return reflect.TypeOf((*ownerState)(nil)).Elem()
}

type ownerArgs struct {
	// The email of the user to be added as an owner.
	//
	// ***
	Email string `pulumi:"email"`
	// The id of of the web resource to which the owner will be added, in the form `webResource/<resource_id>`,
	// such as `webResource/https://www.example.com/`
	WebResourceId string `pulumi:"webResourceId"`
}

// The set of arguments for constructing a Owner resource.
type OwnerArgs struct {
	// The email of the user to be added as an owner.
	//
	// ***
	Email pulumi.StringInput
	// The id of of the web resource to which the owner will be added, in the form `webResource/<resource_id>`,
	// such as `webResource/https://www.example.com/`
	WebResourceId pulumi.StringInput
}

func (OwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ownerArgs)(nil)).Elem()
}

type OwnerInput interface {
	pulumi.Input

	ToOwnerOutput() OwnerOutput
	ToOwnerOutputWithContext(ctx context.Context) OwnerOutput
}

func (*Owner) ElementType() reflect.Type {
	return reflect.TypeOf((**Owner)(nil)).Elem()
}

func (i *Owner) ToOwnerOutput() OwnerOutput {
	return i.ToOwnerOutputWithContext(context.Background())
}

func (i *Owner) ToOwnerOutputWithContext(ctx context.Context) OwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerOutput)
}

// OwnerArrayInput is an input type that accepts OwnerArray and OwnerArrayOutput values.
// You can construct a concrete instance of `OwnerArrayInput` via:
//
//	OwnerArray{ OwnerArgs{...} }
type OwnerArrayInput interface {
	pulumi.Input

	ToOwnerArrayOutput() OwnerArrayOutput
	ToOwnerArrayOutputWithContext(context.Context) OwnerArrayOutput
}

type OwnerArray []OwnerInput

func (OwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Owner)(nil)).Elem()
}

func (i OwnerArray) ToOwnerArrayOutput() OwnerArrayOutput {
	return i.ToOwnerArrayOutputWithContext(context.Background())
}

func (i OwnerArray) ToOwnerArrayOutputWithContext(ctx context.Context) OwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerArrayOutput)
}

// OwnerMapInput is an input type that accepts OwnerMap and OwnerMapOutput values.
// You can construct a concrete instance of `OwnerMapInput` via:
//
//	OwnerMap{ "key": OwnerArgs{...} }
type OwnerMapInput interface {
	pulumi.Input

	ToOwnerMapOutput() OwnerMapOutput
	ToOwnerMapOutputWithContext(context.Context) OwnerMapOutput
}

type OwnerMap map[string]OwnerInput

func (OwnerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Owner)(nil)).Elem()
}

func (i OwnerMap) ToOwnerMapOutput() OwnerMapOutput {
	return i.ToOwnerMapOutputWithContext(context.Background())
}

func (i OwnerMap) ToOwnerMapOutputWithContext(ctx context.Context) OwnerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerMapOutput)
}

type OwnerOutput struct{ *pulumi.OutputState }

func (OwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Owner)(nil)).Elem()
}

func (o OwnerOutput) ToOwnerOutput() OwnerOutput {
	return o
}

func (o OwnerOutput) ToOwnerOutputWithContext(ctx context.Context) OwnerOutput {
	return o
}

// The email of the user to be added as an owner.
//
// ***
func (o OwnerOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *Owner) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// The id of of the web resource to which the owner will be added, in the form `webResource/<resource_id>`,
// such as `webResource/https://www.example.com/`
func (o OwnerOutput) WebResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Owner) pulumi.StringOutput { return v.WebResourceId }).(pulumi.StringOutput)
}

type OwnerArrayOutput struct{ *pulumi.OutputState }

func (OwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Owner)(nil)).Elem()
}

func (o OwnerArrayOutput) ToOwnerArrayOutput() OwnerArrayOutput {
	return o
}

func (o OwnerArrayOutput) ToOwnerArrayOutputWithContext(ctx context.Context) OwnerArrayOutput {
	return o
}

func (o OwnerArrayOutput) Index(i pulumi.IntInput) OwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Owner {
		return vs[0].([]*Owner)[vs[1].(int)]
	}).(OwnerOutput)
}

type OwnerMapOutput struct{ *pulumi.OutputState }

func (OwnerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Owner)(nil)).Elem()
}

func (o OwnerMapOutput) ToOwnerMapOutput() OwnerMapOutput {
	return o
}

func (o OwnerMapOutput) ToOwnerMapOutputWithContext(ctx context.Context) OwnerMapOutput {
	return o
}

func (o OwnerMapOutput) MapIndex(k pulumi.StringInput) OwnerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Owner {
		return vs[0].(map[string]*Owner)[vs[1].(string)]
	}).(OwnerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerInput)(nil)).Elem(), &Owner{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerArrayInput)(nil)).Elem(), OwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerMapInput)(nil)).Elem(), OwnerMap{})
	pulumi.RegisterOutputType(OwnerOutput{})
	pulumi.RegisterOutputType(OwnerArrayOutput{})
	pulumi.RegisterOutputType(OwnerMapOutput{})
}
