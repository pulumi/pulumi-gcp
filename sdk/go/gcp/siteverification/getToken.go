// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package siteverification

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// subcategory: "Site Verification"
// description: |-
// A verification token is used to demonstrate ownership of a website or domain.
// ---
//
// # siteverification.getToken
//
// A verification token is used to demonstrate ownership of a website or domain.
//
// To get more information about Token, see:
//
// * [API documentation](https://developers.google.com/site-verification/v1)
// * How-to Guides
//   - [Getting Started](https://developers.google.com/site-verification/v1/getting_started)
//
// ## Example Usage
//
// ### Site Verification via Site META Tag
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/siteverification"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := siteverification.GetToken(ctx, &siteverification.GetTokenArgs{
//				Type:               "SITE",
//				Identifier:         "https://www.example.com",
//				VerificationMethod: "META",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Site Verification via DNS TXT Record
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/siteverification"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := siteverification.GetToken(ctx, &siteverification.GetTokenArgs{
//				Type:               "INET_DOMAIN",
//				Identifier:         "www.example.com",
//				VerificationMethod: "DNS_TXT",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetToken(ctx *pulumi.Context, args *GetTokenArgs, opts ...pulumi.InvokeOption) (*GetTokenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTokenResult
	err := ctx.Invoke("gcp:siteverification/getToken:getToken", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getToken.
type GetTokenArgs struct {
	// The site identifier. If the type is set to SITE, the identifier is a URL. If the type is
	// set to INET_DOMAIN, the identifier is a domain name.
	Identifier string `pulumi:"identifier"`
	// The type of resource to be verified, either a domain or a web site.
	// Possible values are: `INET_DOMAIN`, `SITE`.
	Type string `pulumi:"type"`
	// The verification method for the Site Verification system to use to verify
	// this site or domain.
	// Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.
	VerificationMethod string `pulumi:"verificationMethod"`
}

// A collection of values returned by getToken.
type GetTokenResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	Identifier string `pulumi:"identifier"`
	// The generated token for use in subsequent verification steps.
	Token              string `pulumi:"token"`
	Type               string `pulumi:"type"`
	VerificationMethod string `pulumi:"verificationMethod"`
}

func GetTokenOutput(ctx *pulumi.Context, args GetTokenOutputArgs, opts ...pulumi.InvokeOption) GetTokenResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTokenResult, error) {
			args := v.(GetTokenArgs)
			r, err := GetToken(ctx, &args, opts...)
			var s GetTokenResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTokenResultOutput)
}

// A collection of arguments for invoking getToken.
type GetTokenOutputArgs struct {
	// The site identifier. If the type is set to SITE, the identifier is a URL. If the type is
	// set to INET_DOMAIN, the identifier is a domain name.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// The type of resource to be verified, either a domain or a web site.
	// Possible values are: `INET_DOMAIN`, `SITE`.
	Type pulumi.StringInput `pulumi:"type"`
	// The verification method for the Site Verification system to use to verify
	// this site or domain.
	// Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.
	VerificationMethod pulumi.StringInput `pulumi:"verificationMethod"`
}

func (GetTokenOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTokenArgs)(nil)).Elem()
}

// A collection of values returned by getToken.
type GetTokenResultOutput struct{ *pulumi.OutputState }

func (GetTokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTokenResult)(nil)).Elem()
}

func (o GetTokenResultOutput) ToGetTokenResultOutput() GetTokenResultOutput {
	return o
}

func (o GetTokenResultOutput) ToGetTokenResultOutputWithContext(ctx context.Context) GetTokenResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetTokenResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTokenResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetTokenResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v GetTokenResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// The generated token for use in subsequent verification steps.
func (o GetTokenResultOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v GetTokenResult) string { return v.Token }).(pulumi.StringOutput)
}

func (o GetTokenResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetTokenResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetTokenResultOutput) VerificationMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GetTokenResult) string { return v.VerificationMethod }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTokenResultOutput{})
}
