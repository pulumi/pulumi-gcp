// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identityplatform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ConfigBlockingFunctions struct {
	// The user credentials to include in the JWT payload that is sent to the registered Blocking Functions.
	// Structure is documented below.
	ForwardInboundCredentials *ConfigBlockingFunctionsForwardInboundCredentials `pulumi:"forwardInboundCredentials"`
	// Map of Trigger to event type. Key should be one of the supported event types: "beforeCreate", "beforeSignIn".
	// Structure is documented below.
	Triggers []ConfigBlockingFunctionsTrigger `pulumi:"triggers"`
}

// ConfigBlockingFunctionsInput is an input type that accepts ConfigBlockingFunctionsArgs and ConfigBlockingFunctionsOutput values.
// You can construct a concrete instance of `ConfigBlockingFunctionsInput` via:
//
//	ConfigBlockingFunctionsArgs{...}
type ConfigBlockingFunctionsInput interface {
	pulumi.Input

	ToConfigBlockingFunctionsOutput() ConfigBlockingFunctionsOutput
	ToConfigBlockingFunctionsOutputWithContext(context.Context) ConfigBlockingFunctionsOutput
}

type ConfigBlockingFunctionsArgs struct {
	// The user credentials to include in the JWT payload that is sent to the registered Blocking Functions.
	// Structure is documented below.
	ForwardInboundCredentials ConfigBlockingFunctionsForwardInboundCredentialsPtrInput `pulumi:"forwardInboundCredentials"`
	// Map of Trigger to event type. Key should be one of the supported event types: "beforeCreate", "beforeSignIn".
	// Structure is documented below.
	Triggers ConfigBlockingFunctionsTriggerArrayInput `pulumi:"triggers"`
}

func (ConfigBlockingFunctionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigBlockingFunctions)(nil)).Elem()
}

func (i ConfigBlockingFunctionsArgs) ToConfigBlockingFunctionsOutput() ConfigBlockingFunctionsOutput {
	return i.ToConfigBlockingFunctionsOutputWithContext(context.Background())
}

func (i ConfigBlockingFunctionsArgs) ToConfigBlockingFunctionsOutputWithContext(ctx context.Context) ConfigBlockingFunctionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBlockingFunctionsOutput)
}

func (i ConfigBlockingFunctionsArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigBlockingFunctions] {
	return pulumix.Output[ConfigBlockingFunctions]{
		OutputState: i.ToConfigBlockingFunctionsOutputWithContext(ctx).OutputState,
	}
}

func (i ConfigBlockingFunctionsArgs) ToConfigBlockingFunctionsPtrOutput() ConfigBlockingFunctionsPtrOutput {
	return i.ToConfigBlockingFunctionsPtrOutputWithContext(context.Background())
}

func (i ConfigBlockingFunctionsArgs) ToConfigBlockingFunctionsPtrOutputWithContext(ctx context.Context) ConfigBlockingFunctionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBlockingFunctionsOutput).ToConfigBlockingFunctionsPtrOutputWithContext(ctx)
}

// ConfigBlockingFunctionsPtrInput is an input type that accepts ConfigBlockingFunctionsArgs, ConfigBlockingFunctionsPtr and ConfigBlockingFunctionsPtrOutput values.
// You can construct a concrete instance of `ConfigBlockingFunctionsPtrInput` via:
//
//	        ConfigBlockingFunctionsArgs{...}
//
//	or:
//
//	        nil
type ConfigBlockingFunctionsPtrInput interface {
	pulumi.Input

	ToConfigBlockingFunctionsPtrOutput() ConfigBlockingFunctionsPtrOutput
	ToConfigBlockingFunctionsPtrOutputWithContext(context.Context) ConfigBlockingFunctionsPtrOutput
}

type configBlockingFunctionsPtrType ConfigBlockingFunctionsArgs

func ConfigBlockingFunctionsPtr(v *ConfigBlockingFunctionsArgs) ConfigBlockingFunctionsPtrInput {
	return (*configBlockingFunctionsPtrType)(v)
}

func (*configBlockingFunctionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigBlockingFunctions)(nil)).Elem()
}

func (i *configBlockingFunctionsPtrType) ToConfigBlockingFunctionsPtrOutput() ConfigBlockingFunctionsPtrOutput {
	return i.ToConfigBlockingFunctionsPtrOutputWithContext(context.Background())
}

func (i *configBlockingFunctionsPtrType) ToConfigBlockingFunctionsPtrOutputWithContext(ctx context.Context) ConfigBlockingFunctionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBlockingFunctionsPtrOutput)
}

func (i *configBlockingFunctionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConfigBlockingFunctions] {
	return pulumix.Output[*ConfigBlockingFunctions]{
		OutputState: i.ToConfigBlockingFunctionsPtrOutputWithContext(ctx).OutputState,
	}
}

type ConfigBlockingFunctionsOutput struct{ *pulumi.OutputState }

func (ConfigBlockingFunctionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigBlockingFunctions)(nil)).Elem()
}

func (o ConfigBlockingFunctionsOutput) ToConfigBlockingFunctionsOutput() ConfigBlockingFunctionsOutput {
	return o
}

func (o ConfigBlockingFunctionsOutput) ToConfigBlockingFunctionsOutputWithContext(ctx context.Context) ConfigBlockingFunctionsOutput {
	return o
}

func (o ConfigBlockingFunctionsOutput) ToConfigBlockingFunctionsPtrOutput() ConfigBlockingFunctionsPtrOutput {
	return o.ToConfigBlockingFunctionsPtrOutputWithContext(context.Background())
}

func (o ConfigBlockingFunctionsOutput) ToConfigBlockingFunctionsPtrOutputWithContext(ctx context.Context) ConfigBlockingFunctionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigBlockingFunctions) *ConfigBlockingFunctions {
		return &v
	}).(ConfigBlockingFunctionsPtrOutput)
}

func (o ConfigBlockingFunctionsOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigBlockingFunctions] {
	return pulumix.Output[ConfigBlockingFunctions]{
		OutputState: o.OutputState,
	}
}

// The user credentials to include in the JWT payload that is sent to the registered Blocking Functions.
// Structure is documented below.
func (o ConfigBlockingFunctionsOutput) ForwardInboundCredentials() ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput {
	return o.ApplyT(func(v ConfigBlockingFunctions) *ConfigBlockingFunctionsForwardInboundCredentials {
		return v.ForwardInboundCredentials
	}).(ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput)
}

// Map of Trigger to event type. Key should be one of the supported event types: "beforeCreate", "beforeSignIn".
// Structure is documented below.
func (o ConfigBlockingFunctionsOutput) Triggers() ConfigBlockingFunctionsTriggerArrayOutput {
	return o.ApplyT(func(v ConfigBlockingFunctions) []ConfigBlockingFunctionsTrigger { return v.Triggers }).(ConfigBlockingFunctionsTriggerArrayOutput)
}

type ConfigBlockingFunctionsPtrOutput struct{ *pulumi.OutputState }

func (ConfigBlockingFunctionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigBlockingFunctions)(nil)).Elem()
}

func (o ConfigBlockingFunctionsPtrOutput) ToConfigBlockingFunctionsPtrOutput() ConfigBlockingFunctionsPtrOutput {
	return o
}

func (o ConfigBlockingFunctionsPtrOutput) ToConfigBlockingFunctionsPtrOutputWithContext(ctx context.Context) ConfigBlockingFunctionsPtrOutput {
	return o
}

func (o ConfigBlockingFunctionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigBlockingFunctions] {
	return pulumix.Output[*ConfigBlockingFunctions]{
		OutputState: o.OutputState,
	}
}

func (o ConfigBlockingFunctionsPtrOutput) Elem() ConfigBlockingFunctionsOutput {
	return o.ApplyT(func(v *ConfigBlockingFunctions) ConfigBlockingFunctions {
		if v != nil {
			return *v
		}
		var ret ConfigBlockingFunctions
		return ret
	}).(ConfigBlockingFunctionsOutput)
}

// The user credentials to include in the JWT payload that is sent to the registered Blocking Functions.
// Structure is documented below.
func (o ConfigBlockingFunctionsPtrOutput) ForwardInboundCredentials() ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput {
	return o.ApplyT(func(v *ConfigBlockingFunctions) *ConfigBlockingFunctionsForwardInboundCredentials {
		if v == nil {
			return nil
		}
		return v.ForwardInboundCredentials
	}).(ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput)
}

// Map of Trigger to event type. Key should be one of the supported event types: "beforeCreate", "beforeSignIn".
// Structure is documented below.
func (o ConfigBlockingFunctionsPtrOutput) Triggers() ConfigBlockingFunctionsTriggerArrayOutput {
	return o.ApplyT(func(v *ConfigBlockingFunctions) []ConfigBlockingFunctionsTrigger {
		if v == nil {
			return nil
		}
		return v.Triggers
	}).(ConfigBlockingFunctionsTriggerArrayOutput)
}

type ConfigBlockingFunctionsForwardInboundCredentials struct {
	// Whether to pass the user's OAuth identity provider's access token.
	AccessToken *bool `pulumi:"accessToken"`
	// Whether to pass the user's OIDC identity provider's ID token.
	IdToken *bool `pulumi:"idToken"`
	// Whether to pass the user's OAuth identity provider's refresh token.
	RefreshToken *bool `pulumi:"refreshToken"`
}

// ConfigBlockingFunctionsForwardInboundCredentialsInput is an input type that accepts ConfigBlockingFunctionsForwardInboundCredentialsArgs and ConfigBlockingFunctionsForwardInboundCredentialsOutput values.
// You can construct a concrete instance of `ConfigBlockingFunctionsForwardInboundCredentialsInput` via:
//
//	ConfigBlockingFunctionsForwardInboundCredentialsArgs{...}
type ConfigBlockingFunctionsForwardInboundCredentialsInput interface {
	pulumi.Input

	ToConfigBlockingFunctionsForwardInboundCredentialsOutput() ConfigBlockingFunctionsForwardInboundCredentialsOutput
	ToConfigBlockingFunctionsForwardInboundCredentialsOutputWithContext(context.Context) ConfigBlockingFunctionsForwardInboundCredentialsOutput
}

type ConfigBlockingFunctionsForwardInboundCredentialsArgs struct {
	// Whether to pass the user's OAuth identity provider's access token.
	AccessToken pulumi.BoolPtrInput `pulumi:"accessToken"`
	// Whether to pass the user's OIDC identity provider's ID token.
	IdToken pulumi.BoolPtrInput `pulumi:"idToken"`
	// Whether to pass the user's OAuth identity provider's refresh token.
	RefreshToken pulumi.BoolPtrInput `pulumi:"refreshToken"`
}

func (ConfigBlockingFunctionsForwardInboundCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigBlockingFunctionsForwardInboundCredentials)(nil)).Elem()
}

func (i ConfigBlockingFunctionsForwardInboundCredentialsArgs) ToConfigBlockingFunctionsForwardInboundCredentialsOutput() ConfigBlockingFunctionsForwardInboundCredentialsOutput {
	return i.ToConfigBlockingFunctionsForwardInboundCredentialsOutputWithContext(context.Background())
}

func (i ConfigBlockingFunctionsForwardInboundCredentialsArgs) ToConfigBlockingFunctionsForwardInboundCredentialsOutputWithContext(ctx context.Context) ConfigBlockingFunctionsForwardInboundCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBlockingFunctionsForwardInboundCredentialsOutput)
}

func (i ConfigBlockingFunctionsForwardInboundCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigBlockingFunctionsForwardInboundCredentials] {
	return pulumix.Output[ConfigBlockingFunctionsForwardInboundCredentials]{
		OutputState: i.ToConfigBlockingFunctionsForwardInboundCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i ConfigBlockingFunctionsForwardInboundCredentialsArgs) ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutput() ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput {
	return i.ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutputWithContext(context.Background())
}

func (i ConfigBlockingFunctionsForwardInboundCredentialsArgs) ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutputWithContext(ctx context.Context) ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBlockingFunctionsForwardInboundCredentialsOutput).ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutputWithContext(ctx)
}

// ConfigBlockingFunctionsForwardInboundCredentialsPtrInput is an input type that accepts ConfigBlockingFunctionsForwardInboundCredentialsArgs, ConfigBlockingFunctionsForwardInboundCredentialsPtr and ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput values.
// You can construct a concrete instance of `ConfigBlockingFunctionsForwardInboundCredentialsPtrInput` via:
//
//	        ConfigBlockingFunctionsForwardInboundCredentialsArgs{...}
//
//	or:
//
//	        nil
type ConfigBlockingFunctionsForwardInboundCredentialsPtrInput interface {
	pulumi.Input

	ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutput() ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput
	ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutputWithContext(context.Context) ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput
}

type configBlockingFunctionsForwardInboundCredentialsPtrType ConfigBlockingFunctionsForwardInboundCredentialsArgs

func ConfigBlockingFunctionsForwardInboundCredentialsPtr(v *ConfigBlockingFunctionsForwardInboundCredentialsArgs) ConfigBlockingFunctionsForwardInboundCredentialsPtrInput {
	return (*configBlockingFunctionsForwardInboundCredentialsPtrType)(v)
}

func (*configBlockingFunctionsForwardInboundCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigBlockingFunctionsForwardInboundCredentials)(nil)).Elem()
}

func (i *configBlockingFunctionsForwardInboundCredentialsPtrType) ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutput() ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput {
	return i.ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutputWithContext(context.Background())
}

func (i *configBlockingFunctionsForwardInboundCredentialsPtrType) ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutputWithContext(ctx context.Context) ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput)
}

func (i *configBlockingFunctionsForwardInboundCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConfigBlockingFunctionsForwardInboundCredentials] {
	return pulumix.Output[*ConfigBlockingFunctionsForwardInboundCredentials]{
		OutputState: i.ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type ConfigBlockingFunctionsForwardInboundCredentialsOutput struct{ *pulumi.OutputState }

func (ConfigBlockingFunctionsForwardInboundCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigBlockingFunctionsForwardInboundCredentials)(nil)).Elem()
}

func (o ConfigBlockingFunctionsForwardInboundCredentialsOutput) ToConfigBlockingFunctionsForwardInboundCredentialsOutput() ConfigBlockingFunctionsForwardInboundCredentialsOutput {
	return o
}

func (o ConfigBlockingFunctionsForwardInboundCredentialsOutput) ToConfigBlockingFunctionsForwardInboundCredentialsOutputWithContext(ctx context.Context) ConfigBlockingFunctionsForwardInboundCredentialsOutput {
	return o
}

func (o ConfigBlockingFunctionsForwardInboundCredentialsOutput) ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutput() ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput {
	return o.ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutputWithContext(context.Background())
}

func (o ConfigBlockingFunctionsForwardInboundCredentialsOutput) ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutputWithContext(ctx context.Context) ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigBlockingFunctionsForwardInboundCredentials) *ConfigBlockingFunctionsForwardInboundCredentials {
		return &v
	}).(ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput)
}

func (o ConfigBlockingFunctionsForwardInboundCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigBlockingFunctionsForwardInboundCredentials] {
	return pulumix.Output[ConfigBlockingFunctionsForwardInboundCredentials]{
		OutputState: o.OutputState,
	}
}

// Whether to pass the user's OAuth identity provider's access token.
func (o ConfigBlockingFunctionsForwardInboundCredentialsOutput) AccessToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigBlockingFunctionsForwardInboundCredentials) *bool { return v.AccessToken }).(pulumi.BoolPtrOutput)
}

// Whether to pass the user's OIDC identity provider's ID token.
func (o ConfigBlockingFunctionsForwardInboundCredentialsOutput) IdToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigBlockingFunctionsForwardInboundCredentials) *bool { return v.IdToken }).(pulumi.BoolPtrOutput)
}

// Whether to pass the user's OAuth identity provider's refresh token.
func (o ConfigBlockingFunctionsForwardInboundCredentialsOutput) RefreshToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigBlockingFunctionsForwardInboundCredentials) *bool { return v.RefreshToken }).(pulumi.BoolPtrOutput)
}

type ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput struct{ *pulumi.OutputState }

func (ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigBlockingFunctionsForwardInboundCredentials)(nil)).Elem()
}

func (o ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput) ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutput() ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput {
	return o
}

func (o ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput) ToConfigBlockingFunctionsForwardInboundCredentialsPtrOutputWithContext(ctx context.Context) ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput {
	return o
}

func (o ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigBlockingFunctionsForwardInboundCredentials] {
	return pulumix.Output[*ConfigBlockingFunctionsForwardInboundCredentials]{
		OutputState: o.OutputState,
	}
}

func (o ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput) Elem() ConfigBlockingFunctionsForwardInboundCredentialsOutput {
	return o.ApplyT(func(v *ConfigBlockingFunctionsForwardInboundCredentials) ConfigBlockingFunctionsForwardInboundCredentials {
		if v != nil {
			return *v
		}
		var ret ConfigBlockingFunctionsForwardInboundCredentials
		return ret
	}).(ConfigBlockingFunctionsForwardInboundCredentialsOutput)
}

// Whether to pass the user's OAuth identity provider's access token.
func (o ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput) AccessToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigBlockingFunctionsForwardInboundCredentials) *bool {
		if v == nil {
			return nil
		}
		return v.AccessToken
	}).(pulumi.BoolPtrOutput)
}

// Whether to pass the user's OIDC identity provider's ID token.
func (o ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput) IdToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigBlockingFunctionsForwardInboundCredentials) *bool {
		if v == nil {
			return nil
		}
		return v.IdToken
	}).(pulumi.BoolPtrOutput)
}

// Whether to pass the user's OAuth identity provider's refresh token.
func (o ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput) RefreshToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigBlockingFunctionsForwardInboundCredentials) *bool {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.BoolPtrOutput)
}

type ConfigBlockingFunctionsTrigger struct {
	// The identifier for this object. Format specified above.
	EventType string `pulumi:"eventType"`
	// HTTP URI trigger for the Cloud Function.
	FunctionUri string `pulumi:"functionUri"`
	// (Output)
	// When the trigger was changed.
	UpdateTime *string `pulumi:"updateTime"`
}

// ConfigBlockingFunctionsTriggerInput is an input type that accepts ConfigBlockingFunctionsTriggerArgs and ConfigBlockingFunctionsTriggerOutput values.
// You can construct a concrete instance of `ConfigBlockingFunctionsTriggerInput` via:
//
//	ConfigBlockingFunctionsTriggerArgs{...}
type ConfigBlockingFunctionsTriggerInput interface {
	pulumi.Input

	ToConfigBlockingFunctionsTriggerOutput() ConfigBlockingFunctionsTriggerOutput
	ToConfigBlockingFunctionsTriggerOutputWithContext(context.Context) ConfigBlockingFunctionsTriggerOutput
}

type ConfigBlockingFunctionsTriggerArgs struct {
	// The identifier for this object. Format specified above.
	EventType pulumi.StringInput `pulumi:"eventType"`
	// HTTP URI trigger for the Cloud Function.
	FunctionUri pulumi.StringInput `pulumi:"functionUri"`
	// (Output)
	// When the trigger was changed.
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
}

func (ConfigBlockingFunctionsTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigBlockingFunctionsTrigger)(nil)).Elem()
}

func (i ConfigBlockingFunctionsTriggerArgs) ToConfigBlockingFunctionsTriggerOutput() ConfigBlockingFunctionsTriggerOutput {
	return i.ToConfigBlockingFunctionsTriggerOutputWithContext(context.Background())
}

func (i ConfigBlockingFunctionsTriggerArgs) ToConfigBlockingFunctionsTriggerOutputWithContext(ctx context.Context) ConfigBlockingFunctionsTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBlockingFunctionsTriggerOutput)
}

func (i ConfigBlockingFunctionsTriggerArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigBlockingFunctionsTrigger] {
	return pulumix.Output[ConfigBlockingFunctionsTrigger]{
		OutputState: i.ToConfigBlockingFunctionsTriggerOutputWithContext(ctx).OutputState,
	}
}

// ConfigBlockingFunctionsTriggerArrayInput is an input type that accepts ConfigBlockingFunctionsTriggerArray and ConfigBlockingFunctionsTriggerArrayOutput values.
// You can construct a concrete instance of `ConfigBlockingFunctionsTriggerArrayInput` via:
//
//	ConfigBlockingFunctionsTriggerArray{ ConfigBlockingFunctionsTriggerArgs{...} }
type ConfigBlockingFunctionsTriggerArrayInput interface {
	pulumi.Input

	ToConfigBlockingFunctionsTriggerArrayOutput() ConfigBlockingFunctionsTriggerArrayOutput
	ToConfigBlockingFunctionsTriggerArrayOutputWithContext(context.Context) ConfigBlockingFunctionsTriggerArrayOutput
}

type ConfigBlockingFunctionsTriggerArray []ConfigBlockingFunctionsTriggerInput

func (ConfigBlockingFunctionsTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigBlockingFunctionsTrigger)(nil)).Elem()
}

func (i ConfigBlockingFunctionsTriggerArray) ToConfigBlockingFunctionsTriggerArrayOutput() ConfigBlockingFunctionsTriggerArrayOutput {
	return i.ToConfigBlockingFunctionsTriggerArrayOutputWithContext(context.Background())
}

func (i ConfigBlockingFunctionsTriggerArray) ToConfigBlockingFunctionsTriggerArrayOutputWithContext(ctx context.Context) ConfigBlockingFunctionsTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBlockingFunctionsTriggerArrayOutput)
}

func (i ConfigBlockingFunctionsTriggerArray) ToOutput(ctx context.Context) pulumix.Output[[]ConfigBlockingFunctionsTrigger] {
	return pulumix.Output[[]ConfigBlockingFunctionsTrigger]{
		OutputState: i.ToConfigBlockingFunctionsTriggerArrayOutputWithContext(ctx).OutputState,
	}
}

type ConfigBlockingFunctionsTriggerOutput struct{ *pulumi.OutputState }

func (ConfigBlockingFunctionsTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigBlockingFunctionsTrigger)(nil)).Elem()
}

func (o ConfigBlockingFunctionsTriggerOutput) ToConfigBlockingFunctionsTriggerOutput() ConfigBlockingFunctionsTriggerOutput {
	return o
}

func (o ConfigBlockingFunctionsTriggerOutput) ToConfigBlockingFunctionsTriggerOutputWithContext(ctx context.Context) ConfigBlockingFunctionsTriggerOutput {
	return o
}

func (o ConfigBlockingFunctionsTriggerOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigBlockingFunctionsTrigger] {
	return pulumix.Output[ConfigBlockingFunctionsTrigger]{
		OutputState: o.OutputState,
	}
}

// The identifier for this object. Format specified above.
func (o ConfigBlockingFunctionsTriggerOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigBlockingFunctionsTrigger) string { return v.EventType }).(pulumi.StringOutput)
}

// HTTP URI trigger for the Cloud Function.
func (o ConfigBlockingFunctionsTriggerOutput) FunctionUri() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigBlockingFunctionsTrigger) string { return v.FunctionUri }).(pulumi.StringOutput)
}

// (Output)
// When the trigger was changed.
func (o ConfigBlockingFunctionsTriggerOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigBlockingFunctionsTrigger) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

type ConfigBlockingFunctionsTriggerArrayOutput struct{ *pulumi.OutputState }

func (ConfigBlockingFunctionsTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigBlockingFunctionsTrigger)(nil)).Elem()
}

func (o ConfigBlockingFunctionsTriggerArrayOutput) ToConfigBlockingFunctionsTriggerArrayOutput() ConfigBlockingFunctionsTriggerArrayOutput {
	return o
}

func (o ConfigBlockingFunctionsTriggerArrayOutput) ToConfigBlockingFunctionsTriggerArrayOutputWithContext(ctx context.Context) ConfigBlockingFunctionsTriggerArrayOutput {
	return o
}

func (o ConfigBlockingFunctionsTriggerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConfigBlockingFunctionsTrigger] {
	return pulumix.Output[[]ConfigBlockingFunctionsTrigger]{
		OutputState: o.OutputState,
	}
}

func (o ConfigBlockingFunctionsTriggerArrayOutput) Index(i pulumi.IntInput) ConfigBlockingFunctionsTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigBlockingFunctionsTrigger {
		return vs[0].([]ConfigBlockingFunctionsTrigger)[vs[1].(int)]
	}).(ConfigBlockingFunctionsTriggerOutput)
}

type ConfigQuota struct {
	// Quota for the Signup endpoint, if overwritten. Signup quota is measured in sign ups per project per hour per IP.
	// Structure is documented below.
	SignUpQuotaConfig *ConfigQuotaSignUpQuotaConfig `pulumi:"signUpQuotaConfig"`
}

// ConfigQuotaInput is an input type that accepts ConfigQuotaArgs and ConfigQuotaOutput values.
// You can construct a concrete instance of `ConfigQuotaInput` via:
//
//	ConfigQuotaArgs{...}
type ConfigQuotaInput interface {
	pulumi.Input

	ToConfigQuotaOutput() ConfigQuotaOutput
	ToConfigQuotaOutputWithContext(context.Context) ConfigQuotaOutput
}

type ConfigQuotaArgs struct {
	// Quota for the Signup endpoint, if overwritten. Signup quota is measured in sign ups per project per hour per IP.
	// Structure is documented below.
	SignUpQuotaConfig ConfigQuotaSignUpQuotaConfigPtrInput `pulumi:"signUpQuotaConfig"`
}

func (ConfigQuotaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigQuota)(nil)).Elem()
}

func (i ConfigQuotaArgs) ToConfigQuotaOutput() ConfigQuotaOutput {
	return i.ToConfigQuotaOutputWithContext(context.Background())
}

func (i ConfigQuotaArgs) ToConfigQuotaOutputWithContext(ctx context.Context) ConfigQuotaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigQuotaOutput)
}

func (i ConfigQuotaArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigQuota] {
	return pulumix.Output[ConfigQuota]{
		OutputState: i.ToConfigQuotaOutputWithContext(ctx).OutputState,
	}
}

func (i ConfigQuotaArgs) ToConfigQuotaPtrOutput() ConfigQuotaPtrOutput {
	return i.ToConfigQuotaPtrOutputWithContext(context.Background())
}

func (i ConfigQuotaArgs) ToConfigQuotaPtrOutputWithContext(ctx context.Context) ConfigQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigQuotaOutput).ToConfigQuotaPtrOutputWithContext(ctx)
}

// ConfigQuotaPtrInput is an input type that accepts ConfigQuotaArgs, ConfigQuotaPtr and ConfigQuotaPtrOutput values.
// You can construct a concrete instance of `ConfigQuotaPtrInput` via:
//
//	        ConfigQuotaArgs{...}
//
//	or:
//
//	        nil
type ConfigQuotaPtrInput interface {
	pulumi.Input

	ToConfigQuotaPtrOutput() ConfigQuotaPtrOutput
	ToConfigQuotaPtrOutputWithContext(context.Context) ConfigQuotaPtrOutput
}

type configQuotaPtrType ConfigQuotaArgs

func ConfigQuotaPtr(v *ConfigQuotaArgs) ConfigQuotaPtrInput {
	return (*configQuotaPtrType)(v)
}

func (*configQuotaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigQuota)(nil)).Elem()
}

func (i *configQuotaPtrType) ToConfigQuotaPtrOutput() ConfigQuotaPtrOutput {
	return i.ToConfigQuotaPtrOutputWithContext(context.Background())
}

func (i *configQuotaPtrType) ToConfigQuotaPtrOutputWithContext(ctx context.Context) ConfigQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigQuotaPtrOutput)
}

func (i *configQuotaPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConfigQuota] {
	return pulumix.Output[*ConfigQuota]{
		OutputState: i.ToConfigQuotaPtrOutputWithContext(ctx).OutputState,
	}
}

type ConfigQuotaOutput struct{ *pulumi.OutputState }

func (ConfigQuotaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigQuota)(nil)).Elem()
}

func (o ConfigQuotaOutput) ToConfigQuotaOutput() ConfigQuotaOutput {
	return o
}

func (o ConfigQuotaOutput) ToConfigQuotaOutputWithContext(ctx context.Context) ConfigQuotaOutput {
	return o
}

func (o ConfigQuotaOutput) ToConfigQuotaPtrOutput() ConfigQuotaPtrOutput {
	return o.ToConfigQuotaPtrOutputWithContext(context.Background())
}

func (o ConfigQuotaOutput) ToConfigQuotaPtrOutputWithContext(ctx context.Context) ConfigQuotaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigQuota) *ConfigQuota {
		return &v
	}).(ConfigQuotaPtrOutput)
}

func (o ConfigQuotaOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigQuota] {
	return pulumix.Output[ConfigQuota]{
		OutputState: o.OutputState,
	}
}

// Quota for the Signup endpoint, if overwritten. Signup quota is measured in sign ups per project per hour per IP.
// Structure is documented below.
func (o ConfigQuotaOutput) SignUpQuotaConfig() ConfigQuotaSignUpQuotaConfigPtrOutput {
	return o.ApplyT(func(v ConfigQuota) *ConfigQuotaSignUpQuotaConfig { return v.SignUpQuotaConfig }).(ConfigQuotaSignUpQuotaConfigPtrOutput)
}

type ConfigQuotaPtrOutput struct{ *pulumi.OutputState }

func (ConfigQuotaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigQuota)(nil)).Elem()
}

func (o ConfigQuotaPtrOutput) ToConfigQuotaPtrOutput() ConfigQuotaPtrOutput {
	return o
}

func (o ConfigQuotaPtrOutput) ToConfigQuotaPtrOutputWithContext(ctx context.Context) ConfigQuotaPtrOutput {
	return o
}

func (o ConfigQuotaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigQuota] {
	return pulumix.Output[*ConfigQuota]{
		OutputState: o.OutputState,
	}
}

func (o ConfigQuotaPtrOutput) Elem() ConfigQuotaOutput {
	return o.ApplyT(func(v *ConfigQuota) ConfigQuota {
		if v != nil {
			return *v
		}
		var ret ConfigQuota
		return ret
	}).(ConfigQuotaOutput)
}

// Quota for the Signup endpoint, if overwritten. Signup quota is measured in sign ups per project per hour per IP.
// Structure is documented below.
func (o ConfigQuotaPtrOutput) SignUpQuotaConfig() ConfigQuotaSignUpQuotaConfigPtrOutput {
	return o.ApplyT(func(v *ConfigQuota) *ConfigQuotaSignUpQuotaConfig {
		if v == nil {
			return nil
		}
		return v.SignUpQuotaConfig
	}).(ConfigQuotaSignUpQuotaConfigPtrOutput)
}

type ConfigQuotaSignUpQuotaConfig struct {
	// A sign up APIs quota that customers can override temporarily.
	Quota *int `pulumi:"quota"`
	// How long this quota will be active for. It is measurred in seconds, e.g., Example: "9.615s".
	QuotaDuration *string `pulumi:"quotaDuration"`
	// When this quota will take affect.
	StartTime *string `pulumi:"startTime"`
}

// ConfigQuotaSignUpQuotaConfigInput is an input type that accepts ConfigQuotaSignUpQuotaConfigArgs and ConfigQuotaSignUpQuotaConfigOutput values.
// You can construct a concrete instance of `ConfigQuotaSignUpQuotaConfigInput` via:
//
//	ConfigQuotaSignUpQuotaConfigArgs{...}
type ConfigQuotaSignUpQuotaConfigInput interface {
	pulumi.Input

	ToConfigQuotaSignUpQuotaConfigOutput() ConfigQuotaSignUpQuotaConfigOutput
	ToConfigQuotaSignUpQuotaConfigOutputWithContext(context.Context) ConfigQuotaSignUpQuotaConfigOutput
}

type ConfigQuotaSignUpQuotaConfigArgs struct {
	// A sign up APIs quota that customers can override temporarily.
	Quota pulumi.IntPtrInput `pulumi:"quota"`
	// How long this quota will be active for. It is measurred in seconds, e.g., Example: "9.615s".
	QuotaDuration pulumi.StringPtrInput `pulumi:"quotaDuration"`
	// When this quota will take affect.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (ConfigQuotaSignUpQuotaConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigQuotaSignUpQuotaConfig)(nil)).Elem()
}

func (i ConfigQuotaSignUpQuotaConfigArgs) ToConfigQuotaSignUpQuotaConfigOutput() ConfigQuotaSignUpQuotaConfigOutput {
	return i.ToConfigQuotaSignUpQuotaConfigOutputWithContext(context.Background())
}

func (i ConfigQuotaSignUpQuotaConfigArgs) ToConfigQuotaSignUpQuotaConfigOutputWithContext(ctx context.Context) ConfigQuotaSignUpQuotaConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigQuotaSignUpQuotaConfigOutput)
}

func (i ConfigQuotaSignUpQuotaConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigQuotaSignUpQuotaConfig] {
	return pulumix.Output[ConfigQuotaSignUpQuotaConfig]{
		OutputState: i.ToConfigQuotaSignUpQuotaConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ConfigQuotaSignUpQuotaConfigArgs) ToConfigQuotaSignUpQuotaConfigPtrOutput() ConfigQuotaSignUpQuotaConfigPtrOutput {
	return i.ToConfigQuotaSignUpQuotaConfigPtrOutputWithContext(context.Background())
}

func (i ConfigQuotaSignUpQuotaConfigArgs) ToConfigQuotaSignUpQuotaConfigPtrOutputWithContext(ctx context.Context) ConfigQuotaSignUpQuotaConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigQuotaSignUpQuotaConfigOutput).ToConfigQuotaSignUpQuotaConfigPtrOutputWithContext(ctx)
}

// ConfigQuotaSignUpQuotaConfigPtrInput is an input type that accepts ConfigQuotaSignUpQuotaConfigArgs, ConfigQuotaSignUpQuotaConfigPtr and ConfigQuotaSignUpQuotaConfigPtrOutput values.
// You can construct a concrete instance of `ConfigQuotaSignUpQuotaConfigPtrInput` via:
//
//	        ConfigQuotaSignUpQuotaConfigArgs{...}
//
//	or:
//
//	        nil
type ConfigQuotaSignUpQuotaConfigPtrInput interface {
	pulumi.Input

	ToConfigQuotaSignUpQuotaConfigPtrOutput() ConfigQuotaSignUpQuotaConfigPtrOutput
	ToConfigQuotaSignUpQuotaConfigPtrOutputWithContext(context.Context) ConfigQuotaSignUpQuotaConfigPtrOutput
}

type configQuotaSignUpQuotaConfigPtrType ConfigQuotaSignUpQuotaConfigArgs

func ConfigQuotaSignUpQuotaConfigPtr(v *ConfigQuotaSignUpQuotaConfigArgs) ConfigQuotaSignUpQuotaConfigPtrInput {
	return (*configQuotaSignUpQuotaConfigPtrType)(v)
}

func (*configQuotaSignUpQuotaConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigQuotaSignUpQuotaConfig)(nil)).Elem()
}

func (i *configQuotaSignUpQuotaConfigPtrType) ToConfigQuotaSignUpQuotaConfigPtrOutput() ConfigQuotaSignUpQuotaConfigPtrOutput {
	return i.ToConfigQuotaSignUpQuotaConfigPtrOutputWithContext(context.Background())
}

func (i *configQuotaSignUpQuotaConfigPtrType) ToConfigQuotaSignUpQuotaConfigPtrOutputWithContext(ctx context.Context) ConfigQuotaSignUpQuotaConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigQuotaSignUpQuotaConfigPtrOutput)
}

func (i *configQuotaSignUpQuotaConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConfigQuotaSignUpQuotaConfig] {
	return pulumix.Output[*ConfigQuotaSignUpQuotaConfig]{
		OutputState: i.ToConfigQuotaSignUpQuotaConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type ConfigQuotaSignUpQuotaConfigOutput struct{ *pulumi.OutputState }

func (ConfigQuotaSignUpQuotaConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigQuotaSignUpQuotaConfig)(nil)).Elem()
}

func (o ConfigQuotaSignUpQuotaConfigOutput) ToConfigQuotaSignUpQuotaConfigOutput() ConfigQuotaSignUpQuotaConfigOutput {
	return o
}

func (o ConfigQuotaSignUpQuotaConfigOutput) ToConfigQuotaSignUpQuotaConfigOutputWithContext(ctx context.Context) ConfigQuotaSignUpQuotaConfigOutput {
	return o
}

func (o ConfigQuotaSignUpQuotaConfigOutput) ToConfigQuotaSignUpQuotaConfigPtrOutput() ConfigQuotaSignUpQuotaConfigPtrOutput {
	return o.ToConfigQuotaSignUpQuotaConfigPtrOutputWithContext(context.Background())
}

func (o ConfigQuotaSignUpQuotaConfigOutput) ToConfigQuotaSignUpQuotaConfigPtrOutputWithContext(ctx context.Context) ConfigQuotaSignUpQuotaConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigQuotaSignUpQuotaConfig) *ConfigQuotaSignUpQuotaConfig {
		return &v
	}).(ConfigQuotaSignUpQuotaConfigPtrOutput)
}

func (o ConfigQuotaSignUpQuotaConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigQuotaSignUpQuotaConfig] {
	return pulumix.Output[ConfigQuotaSignUpQuotaConfig]{
		OutputState: o.OutputState,
	}
}

// A sign up APIs quota that customers can override temporarily.
func (o ConfigQuotaSignUpQuotaConfigOutput) Quota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConfigQuotaSignUpQuotaConfig) *int { return v.Quota }).(pulumi.IntPtrOutput)
}

// How long this quota will be active for. It is measurred in seconds, e.g., Example: "9.615s".
func (o ConfigQuotaSignUpQuotaConfigOutput) QuotaDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigQuotaSignUpQuotaConfig) *string { return v.QuotaDuration }).(pulumi.StringPtrOutput)
}

// When this quota will take affect.
func (o ConfigQuotaSignUpQuotaConfigOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigQuotaSignUpQuotaConfig) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type ConfigQuotaSignUpQuotaConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigQuotaSignUpQuotaConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigQuotaSignUpQuotaConfig)(nil)).Elem()
}

func (o ConfigQuotaSignUpQuotaConfigPtrOutput) ToConfigQuotaSignUpQuotaConfigPtrOutput() ConfigQuotaSignUpQuotaConfigPtrOutput {
	return o
}

func (o ConfigQuotaSignUpQuotaConfigPtrOutput) ToConfigQuotaSignUpQuotaConfigPtrOutputWithContext(ctx context.Context) ConfigQuotaSignUpQuotaConfigPtrOutput {
	return o
}

func (o ConfigQuotaSignUpQuotaConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigQuotaSignUpQuotaConfig] {
	return pulumix.Output[*ConfigQuotaSignUpQuotaConfig]{
		OutputState: o.OutputState,
	}
}

func (o ConfigQuotaSignUpQuotaConfigPtrOutput) Elem() ConfigQuotaSignUpQuotaConfigOutput {
	return o.ApplyT(func(v *ConfigQuotaSignUpQuotaConfig) ConfigQuotaSignUpQuotaConfig {
		if v != nil {
			return *v
		}
		var ret ConfigQuotaSignUpQuotaConfig
		return ret
	}).(ConfigQuotaSignUpQuotaConfigOutput)
}

// A sign up APIs quota that customers can override temporarily.
func (o ConfigQuotaSignUpQuotaConfigPtrOutput) Quota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigQuotaSignUpQuotaConfig) *int {
		if v == nil {
			return nil
		}
		return v.Quota
	}).(pulumi.IntPtrOutput)
}

// How long this quota will be active for. It is measurred in seconds, e.g., Example: "9.615s".
func (o ConfigQuotaSignUpQuotaConfigPtrOutput) QuotaDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigQuotaSignUpQuotaConfig) *string {
		if v == nil {
			return nil
		}
		return v.QuotaDuration
	}).(pulumi.StringPtrOutput)
}

// When this quota will take affect.
func (o ConfigQuotaSignUpQuotaConfigPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigQuotaSignUpQuotaConfig) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

type ConfigSignIn struct {
	// Whether to allow more than one account to have the same email.
	AllowDuplicateEmails *bool `pulumi:"allowDuplicateEmails"`
	// Configuration options related to authenticating an anonymous user.
	// Structure is documented below.
	Anonymous *ConfigSignInAnonymous `pulumi:"anonymous"`
	// Configuration options related to authenticating a user by their email address.
	// Structure is documented below.
	Email *ConfigSignInEmail `pulumi:"email"`
	// (Output)
	// Output only. Hash config information.
	// Structure is documented below.
	HashConfigs []ConfigSignInHashConfig `pulumi:"hashConfigs"`
	// Configuration options related to authenticated a user by their phone number.
	// Structure is documented below.
	PhoneNumber *ConfigSignInPhoneNumber `pulumi:"phoneNumber"`
}

// ConfigSignInInput is an input type that accepts ConfigSignInArgs and ConfigSignInOutput values.
// You can construct a concrete instance of `ConfigSignInInput` via:
//
//	ConfigSignInArgs{...}
type ConfigSignInInput interface {
	pulumi.Input

	ToConfigSignInOutput() ConfigSignInOutput
	ToConfigSignInOutputWithContext(context.Context) ConfigSignInOutput
}

type ConfigSignInArgs struct {
	// Whether to allow more than one account to have the same email.
	AllowDuplicateEmails pulumi.BoolPtrInput `pulumi:"allowDuplicateEmails"`
	// Configuration options related to authenticating an anonymous user.
	// Structure is documented below.
	Anonymous ConfigSignInAnonymousPtrInput `pulumi:"anonymous"`
	// Configuration options related to authenticating a user by their email address.
	// Structure is documented below.
	Email ConfigSignInEmailPtrInput `pulumi:"email"`
	// (Output)
	// Output only. Hash config information.
	// Structure is documented below.
	HashConfigs ConfigSignInHashConfigArrayInput `pulumi:"hashConfigs"`
	// Configuration options related to authenticated a user by their phone number.
	// Structure is documented below.
	PhoneNumber ConfigSignInPhoneNumberPtrInput `pulumi:"phoneNumber"`
}

func (ConfigSignInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigSignIn)(nil)).Elem()
}

func (i ConfigSignInArgs) ToConfigSignInOutput() ConfigSignInOutput {
	return i.ToConfigSignInOutputWithContext(context.Background())
}

func (i ConfigSignInArgs) ToConfigSignInOutputWithContext(ctx context.Context) ConfigSignInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInOutput)
}

func (i ConfigSignInArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigSignIn] {
	return pulumix.Output[ConfigSignIn]{
		OutputState: i.ToConfigSignInOutputWithContext(ctx).OutputState,
	}
}

func (i ConfigSignInArgs) ToConfigSignInPtrOutput() ConfigSignInPtrOutput {
	return i.ToConfigSignInPtrOutputWithContext(context.Background())
}

func (i ConfigSignInArgs) ToConfigSignInPtrOutputWithContext(ctx context.Context) ConfigSignInPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInOutput).ToConfigSignInPtrOutputWithContext(ctx)
}

// ConfigSignInPtrInput is an input type that accepts ConfigSignInArgs, ConfigSignInPtr and ConfigSignInPtrOutput values.
// You can construct a concrete instance of `ConfigSignInPtrInput` via:
//
//	        ConfigSignInArgs{...}
//
//	or:
//
//	        nil
type ConfigSignInPtrInput interface {
	pulumi.Input

	ToConfigSignInPtrOutput() ConfigSignInPtrOutput
	ToConfigSignInPtrOutputWithContext(context.Context) ConfigSignInPtrOutput
}

type configSignInPtrType ConfigSignInArgs

func ConfigSignInPtr(v *ConfigSignInArgs) ConfigSignInPtrInput {
	return (*configSignInPtrType)(v)
}

func (*configSignInPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigSignIn)(nil)).Elem()
}

func (i *configSignInPtrType) ToConfigSignInPtrOutput() ConfigSignInPtrOutput {
	return i.ToConfigSignInPtrOutputWithContext(context.Background())
}

func (i *configSignInPtrType) ToConfigSignInPtrOutputWithContext(ctx context.Context) ConfigSignInPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInPtrOutput)
}

func (i *configSignInPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConfigSignIn] {
	return pulumix.Output[*ConfigSignIn]{
		OutputState: i.ToConfigSignInPtrOutputWithContext(ctx).OutputState,
	}
}

type ConfigSignInOutput struct{ *pulumi.OutputState }

func (ConfigSignInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigSignIn)(nil)).Elem()
}

func (o ConfigSignInOutput) ToConfigSignInOutput() ConfigSignInOutput {
	return o
}

func (o ConfigSignInOutput) ToConfigSignInOutputWithContext(ctx context.Context) ConfigSignInOutput {
	return o
}

func (o ConfigSignInOutput) ToConfigSignInPtrOutput() ConfigSignInPtrOutput {
	return o.ToConfigSignInPtrOutputWithContext(context.Background())
}

func (o ConfigSignInOutput) ToConfigSignInPtrOutputWithContext(ctx context.Context) ConfigSignInPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigSignIn) *ConfigSignIn {
		return &v
	}).(ConfigSignInPtrOutput)
}

func (o ConfigSignInOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigSignIn] {
	return pulumix.Output[ConfigSignIn]{
		OutputState: o.OutputState,
	}
}

// Whether to allow more than one account to have the same email.
func (o ConfigSignInOutput) AllowDuplicateEmails() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigSignIn) *bool { return v.AllowDuplicateEmails }).(pulumi.BoolPtrOutput)
}

// Configuration options related to authenticating an anonymous user.
// Structure is documented below.
func (o ConfigSignInOutput) Anonymous() ConfigSignInAnonymousPtrOutput {
	return o.ApplyT(func(v ConfigSignIn) *ConfigSignInAnonymous { return v.Anonymous }).(ConfigSignInAnonymousPtrOutput)
}

// Configuration options related to authenticating a user by their email address.
// Structure is documented below.
func (o ConfigSignInOutput) Email() ConfigSignInEmailPtrOutput {
	return o.ApplyT(func(v ConfigSignIn) *ConfigSignInEmail { return v.Email }).(ConfigSignInEmailPtrOutput)
}

// (Output)
// Output only. Hash config information.
// Structure is documented below.
func (o ConfigSignInOutput) HashConfigs() ConfigSignInHashConfigArrayOutput {
	return o.ApplyT(func(v ConfigSignIn) []ConfigSignInHashConfig { return v.HashConfigs }).(ConfigSignInHashConfigArrayOutput)
}

// Configuration options related to authenticated a user by their phone number.
// Structure is documented below.
func (o ConfigSignInOutput) PhoneNumber() ConfigSignInPhoneNumberPtrOutput {
	return o.ApplyT(func(v ConfigSignIn) *ConfigSignInPhoneNumber { return v.PhoneNumber }).(ConfigSignInPhoneNumberPtrOutput)
}

type ConfigSignInPtrOutput struct{ *pulumi.OutputState }

func (ConfigSignInPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigSignIn)(nil)).Elem()
}

func (o ConfigSignInPtrOutput) ToConfigSignInPtrOutput() ConfigSignInPtrOutput {
	return o
}

func (o ConfigSignInPtrOutput) ToConfigSignInPtrOutputWithContext(ctx context.Context) ConfigSignInPtrOutput {
	return o
}

func (o ConfigSignInPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigSignIn] {
	return pulumix.Output[*ConfigSignIn]{
		OutputState: o.OutputState,
	}
}

func (o ConfigSignInPtrOutput) Elem() ConfigSignInOutput {
	return o.ApplyT(func(v *ConfigSignIn) ConfigSignIn {
		if v != nil {
			return *v
		}
		var ret ConfigSignIn
		return ret
	}).(ConfigSignInOutput)
}

// Whether to allow more than one account to have the same email.
func (o ConfigSignInPtrOutput) AllowDuplicateEmails() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigSignIn) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDuplicateEmails
	}).(pulumi.BoolPtrOutput)
}

// Configuration options related to authenticating an anonymous user.
// Structure is documented below.
func (o ConfigSignInPtrOutput) Anonymous() ConfigSignInAnonymousPtrOutput {
	return o.ApplyT(func(v *ConfigSignIn) *ConfigSignInAnonymous {
		if v == nil {
			return nil
		}
		return v.Anonymous
	}).(ConfigSignInAnonymousPtrOutput)
}

// Configuration options related to authenticating a user by their email address.
// Structure is documented below.
func (o ConfigSignInPtrOutput) Email() ConfigSignInEmailPtrOutput {
	return o.ApplyT(func(v *ConfigSignIn) *ConfigSignInEmail {
		if v == nil {
			return nil
		}
		return v.Email
	}).(ConfigSignInEmailPtrOutput)
}

// (Output)
// Output only. Hash config information.
// Structure is documented below.
func (o ConfigSignInPtrOutput) HashConfigs() ConfigSignInHashConfigArrayOutput {
	return o.ApplyT(func(v *ConfigSignIn) []ConfigSignInHashConfig {
		if v == nil {
			return nil
		}
		return v.HashConfigs
	}).(ConfigSignInHashConfigArrayOutput)
}

// Configuration options related to authenticated a user by their phone number.
// Structure is documented below.
func (o ConfigSignInPtrOutput) PhoneNumber() ConfigSignInPhoneNumberPtrOutput {
	return o.ApplyT(func(v *ConfigSignIn) *ConfigSignInPhoneNumber {
		if v == nil {
			return nil
		}
		return v.PhoneNumber
	}).(ConfigSignInPhoneNumberPtrOutput)
}

type ConfigSignInAnonymous struct {
	// Whether anonymous user auth is enabled for the project or not.
	//
	// <a name="nestedHashConfig"></a>The `hashConfig` block contains:
	Enabled bool `pulumi:"enabled"`
}

// ConfigSignInAnonymousInput is an input type that accepts ConfigSignInAnonymousArgs and ConfigSignInAnonymousOutput values.
// You can construct a concrete instance of `ConfigSignInAnonymousInput` via:
//
//	ConfigSignInAnonymousArgs{...}
type ConfigSignInAnonymousInput interface {
	pulumi.Input

	ToConfigSignInAnonymousOutput() ConfigSignInAnonymousOutput
	ToConfigSignInAnonymousOutputWithContext(context.Context) ConfigSignInAnonymousOutput
}

type ConfigSignInAnonymousArgs struct {
	// Whether anonymous user auth is enabled for the project or not.
	//
	// <a name="nestedHashConfig"></a>The `hashConfig` block contains:
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ConfigSignInAnonymousArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigSignInAnonymous)(nil)).Elem()
}

func (i ConfigSignInAnonymousArgs) ToConfigSignInAnonymousOutput() ConfigSignInAnonymousOutput {
	return i.ToConfigSignInAnonymousOutputWithContext(context.Background())
}

func (i ConfigSignInAnonymousArgs) ToConfigSignInAnonymousOutputWithContext(ctx context.Context) ConfigSignInAnonymousOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInAnonymousOutput)
}

func (i ConfigSignInAnonymousArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigSignInAnonymous] {
	return pulumix.Output[ConfigSignInAnonymous]{
		OutputState: i.ToConfigSignInAnonymousOutputWithContext(ctx).OutputState,
	}
}

func (i ConfigSignInAnonymousArgs) ToConfigSignInAnonymousPtrOutput() ConfigSignInAnonymousPtrOutput {
	return i.ToConfigSignInAnonymousPtrOutputWithContext(context.Background())
}

func (i ConfigSignInAnonymousArgs) ToConfigSignInAnonymousPtrOutputWithContext(ctx context.Context) ConfigSignInAnonymousPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInAnonymousOutput).ToConfigSignInAnonymousPtrOutputWithContext(ctx)
}

// ConfigSignInAnonymousPtrInput is an input type that accepts ConfigSignInAnonymousArgs, ConfigSignInAnonymousPtr and ConfigSignInAnonymousPtrOutput values.
// You can construct a concrete instance of `ConfigSignInAnonymousPtrInput` via:
//
//	        ConfigSignInAnonymousArgs{...}
//
//	or:
//
//	        nil
type ConfigSignInAnonymousPtrInput interface {
	pulumi.Input

	ToConfigSignInAnonymousPtrOutput() ConfigSignInAnonymousPtrOutput
	ToConfigSignInAnonymousPtrOutputWithContext(context.Context) ConfigSignInAnonymousPtrOutput
}

type configSignInAnonymousPtrType ConfigSignInAnonymousArgs

func ConfigSignInAnonymousPtr(v *ConfigSignInAnonymousArgs) ConfigSignInAnonymousPtrInput {
	return (*configSignInAnonymousPtrType)(v)
}

func (*configSignInAnonymousPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigSignInAnonymous)(nil)).Elem()
}

func (i *configSignInAnonymousPtrType) ToConfigSignInAnonymousPtrOutput() ConfigSignInAnonymousPtrOutput {
	return i.ToConfigSignInAnonymousPtrOutputWithContext(context.Background())
}

func (i *configSignInAnonymousPtrType) ToConfigSignInAnonymousPtrOutputWithContext(ctx context.Context) ConfigSignInAnonymousPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInAnonymousPtrOutput)
}

func (i *configSignInAnonymousPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConfigSignInAnonymous] {
	return pulumix.Output[*ConfigSignInAnonymous]{
		OutputState: i.ToConfigSignInAnonymousPtrOutputWithContext(ctx).OutputState,
	}
}

type ConfigSignInAnonymousOutput struct{ *pulumi.OutputState }

func (ConfigSignInAnonymousOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigSignInAnonymous)(nil)).Elem()
}

func (o ConfigSignInAnonymousOutput) ToConfigSignInAnonymousOutput() ConfigSignInAnonymousOutput {
	return o
}

func (o ConfigSignInAnonymousOutput) ToConfigSignInAnonymousOutputWithContext(ctx context.Context) ConfigSignInAnonymousOutput {
	return o
}

func (o ConfigSignInAnonymousOutput) ToConfigSignInAnonymousPtrOutput() ConfigSignInAnonymousPtrOutput {
	return o.ToConfigSignInAnonymousPtrOutputWithContext(context.Background())
}

func (o ConfigSignInAnonymousOutput) ToConfigSignInAnonymousPtrOutputWithContext(ctx context.Context) ConfigSignInAnonymousPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigSignInAnonymous) *ConfigSignInAnonymous {
		return &v
	}).(ConfigSignInAnonymousPtrOutput)
}

func (o ConfigSignInAnonymousOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigSignInAnonymous] {
	return pulumix.Output[ConfigSignInAnonymous]{
		OutputState: o.OutputState,
	}
}

// Whether anonymous user auth is enabled for the project or not.
//
// <a name="nestedHashConfig"></a>The `hashConfig` block contains:
func (o ConfigSignInAnonymousOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigSignInAnonymous) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ConfigSignInAnonymousPtrOutput struct{ *pulumi.OutputState }

func (ConfigSignInAnonymousPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigSignInAnonymous)(nil)).Elem()
}

func (o ConfigSignInAnonymousPtrOutput) ToConfigSignInAnonymousPtrOutput() ConfigSignInAnonymousPtrOutput {
	return o
}

func (o ConfigSignInAnonymousPtrOutput) ToConfigSignInAnonymousPtrOutputWithContext(ctx context.Context) ConfigSignInAnonymousPtrOutput {
	return o
}

func (o ConfigSignInAnonymousPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigSignInAnonymous] {
	return pulumix.Output[*ConfigSignInAnonymous]{
		OutputState: o.OutputState,
	}
}

func (o ConfigSignInAnonymousPtrOutput) Elem() ConfigSignInAnonymousOutput {
	return o.ApplyT(func(v *ConfigSignInAnonymous) ConfigSignInAnonymous {
		if v != nil {
			return *v
		}
		var ret ConfigSignInAnonymous
		return ret
	}).(ConfigSignInAnonymousOutput)
}

// Whether anonymous user auth is enabled for the project or not.
//
// <a name="nestedHashConfig"></a>The `hashConfig` block contains:
func (o ConfigSignInAnonymousPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigSignInAnonymous) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ConfigSignInEmail struct {
	// Whether email auth is enabled for the project or not.
	Enabled bool `pulumi:"enabled"`
	// Whether a password is required for email auth or not. If true, both an email and
	// password must be provided to sign in. If false, a user may sign in via either
	// email/password or email link.
	PasswordRequired *bool `pulumi:"passwordRequired"`
}

// ConfigSignInEmailInput is an input type that accepts ConfigSignInEmailArgs and ConfigSignInEmailOutput values.
// You can construct a concrete instance of `ConfigSignInEmailInput` via:
//
//	ConfigSignInEmailArgs{...}
type ConfigSignInEmailInput interface {
	pulumi.Input

	ToConfigSignInEmailOutput() ConfigSignInEmailOutput
	ToConfigSignInEmailOutputWithContext(context.Context) ConfigSignInEmailOutput
}

type ConfigSignInEmailArgs struct {
	// Whether email auth is enabled for the project or not.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Whether a password is required for email auth or not. If true, both an email and
	// password must be provided to sign in. If false, a user may sign in via either
	// email/password or email link.
	PasswordRequired pulumi.BoolPtrInput `pulumi:"passwordRequired"`
}

func (ConfigSignInEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigSignInEmail)(nil)).Elem()
}

func (i ConfigSignInEmailArgs) ToConfigSignInEmailOutput() ConfigSignInEmailOutput {
	return i.ToConfigSignInEmailOutputWithContext(context.Background())
}

func (i ConfigSignInEmailArgs) ToConfigSignInEmailOutputWithContext(ctx context.Context) ConfigSignInEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInEmailOutput)
}

func (i ConfigSignInEmailArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigSignInEmail] {
	return pulumix.Output[ConfigSignInEmail]{
		OutputState: i.ToConfigSignInEmailOutputWithContext(ctx).OutputState,
	}
}

func (i ConfigSignInEmailArgs) ToConfigSignInEmailPtrOutput() ConfigSignInEmailPtrOutput {
	return i.ToConfigSignInEmailPtrOutputWithContext(context.Background())
}

func (i ConfigSignInEmailArgs) ToConfigSignInEmailPtrOutputWithContext(ctx context.Context) ConfigSignInEmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInEmailOutput).ToConfigSignInEmailPtrOutputWithContext(ctx)
}

// ConfigSignInEmailPtrInput is an input type that accepts ConfigSignInEmailArgs, ConfigSignInEmailPtr and ConfigSignInEmailPtrOutput values.
// You can construct a concrete instance of `ConfigSignInEmailPtrInput` via:
//
//	        ConfigSignInEmailArgs{...}
//
//	or:
//
//	        nil
type ConfigSignInEmailPtrInput interface {
	pulumi.Input

	ToConfigSignInEmailPtrOutput() ConfigSignInEmailPtrOutput
	ToConfigSignInEmailPtrOutputWithContext(context.Context) ConfigSignInEmailPtrOutput
}

type configSignInEmailPtrType ConfigSignInEmailArgs

func ConfigSignInEmailPtr(v *ConfigSignInEmailArgs) ConfigSignInEmailPtrInput {
	return (*configSignInEmailPtrType)(v)
}

func (*configSignInEmailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigSignInEmail)(nil)).Elem()
}

func (i *configSignInEmailPtrType) ToConfigSignInEmailPtrOutput() ConfigSignInEmailPtrOutput {
	return i.ToConfigSignInEmailPtrOutputWithContext(context.Background())
}

func (i *configSignInEmailPtrType) ToConfigSignInEmailPtrOutputWithContext(ctx context.Context) ConfigSignInEmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInEmailPtrOutput)
}

func (i *configSignInEmailPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConfigSignInEmail] {
	return pulumix.Output[*ConfigSignInEmail]{
		OutputState: i.ToConfigSignInEmailPtrOutputWithContext(ctx).OutputState,
	}
}

type ConfigSignInEmailOutput struct{ *pulumi.OutputState }

func (ConfigSignInEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigSignInEmail)(nil)).Elem()
}

func (o ConfigSignInEmailOutput) ToConfigSignInEmailOutput() ConfigSignInEmailOutput {
	return o
}

func (o ConfigSignInEmailOutput) ToConfigSignInEmailOutputWithContext(ctx context.Context) ConfigSignInEmailOutput {
	return o
}

func (o ConfigSignInEmailOutput) ToConfigSignInEmailPtrOutput() ConfigSignInEmailPtrOutput {
	return o.ToConfigSignInEmailPtrOutputWithContext(context.Background())
}

func (o ConfigSignInEmailOutput) ToConfigSignInEmailPtrOutputWithContext(ctx context.Context) ConfigSignInEmailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigSignInEmail) *ConfigSignInEmail {
		return &v
	}).(ConfigSignInEmailPtrOutput)
}

func (o ConfigSignInEmailOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigSignInEmail] {
	return pulumix.Output[ConfigSignInEmail]{
		OutputState: o.OutputState,
	}
}

// Whether email auth is enabled for the project or not.
func (o ConfigSignInEmailOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigSignInEmail) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Whether a password is required for email auth or not. If true, both an email and
// password must be provided to sign in. If false, a user may sign in via either
// email/password or email link.
func (o ConfigSignInEmailOutput) PasswordRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigSignInEmail) *bool { return v.PasswordRequired }).(pulumi.BoolPtrOutput)
}

type ConfigSignInEmailPtrOutput struct{ *pulumi.OutputState }

func (ConfigSignInEmailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigSignInEmail)(nil)).Elem()
}

func (o ConfigSignInEmailPtrOutput) ToConfigSignInEmailPtrOutput() ConfigSignInEmailPtrOutput {
	return o
}

func (o ConfigSignInEmailPtrOutput) ToConfigSignInEmailPtrOutputWithContext(ctx context.Context) ConfigSignInEmailPtrOutput {
	return o
}

func (o ConfigSignInEmailPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigSignInEmail] {
	return pulumix.Output[*ConfigSignInEmail]{
		OutputState: o.OutputState,
	}
}

func (o ConfigSignInEmailPtrOutput) Elem() ConfigSignInEmailOutput {
	return o.ApplyT(func(v *ConfigSignInEmail) ConfigSignInEmail {
		if v != nil {
			return *v
		}
		var ret ConfigSignInEmail
		return ret
	}).(ConfigSignInEmailOutput)
}

// Whether email auth is enabled for the project or not.
func (o ConfigSignInEmailPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigSignInEmail) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Whether a password is required for email auth or not. If true, both an email and
// password must be provided to sign in. If false, a user may sign in via either
// email/password or email link.
func (o ConfigSignInEmailPtrOutput) PasswordRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigSignInEmail) *bool {
		if v == nil {
			return nil
		}
		return v.PasswordRequired
	}).(pulumi.BoolPtrOutput)
}

type ConfigSignInHashConfig struct {
	// (Output)
	// Different password hash algorithms used in Identity Toolkit.
	Algorithm *string `pulumi:"algorithm"`
	// (Output)
	// Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
	MemoryCost *int `pulumi:"memoryCost"`
	// (Output)
	// How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.
	Rounds *int `pulumi:"rounds"`
	// (Output)
	// Non-printable character to be inserted between the salt and plain text password in base64.
	SaltSeparator *string `pulumi:"saltSeparator"`
	// (Output)
	// Signer key in base64.
	SignerKey *string `pulumi:"signerKey"`
}

// ConfigSignInHashConfigInput is an input type that accepts ConfigSignInHashConfigArgs and ConfigSignInHashConfigOutput values.
// You can construct a concrete instance of `ConfigSignInHashConfigInput` via:
//
//	ConfigSignInHashConfigArgs{...}
type ConfigSignInHashConfigInput interface {
	pulumi.Input

	ToConfigSignInHashConfigOutput() ConfigSignInHashConfigOutput
	ToConfigSignInHashConfigOutputWithContext(context.Context) ConfigSignInHashConfigOutput
}

type ConfigSignInHashConfigArgs struct {
	// (Output)
	// Different password hash algorithms used in Identity Toolkit.
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// (Output)
	// Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
	MemoryCost pulumi.IntPtrInput `pulumi:"memoryCost"`
	// (Output)
	// How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.
	Rounds pulumi.IntPtrInput `pulumi:"rounds"`
	// (Output)
	// Non-printable character to be inserted between the salt and plain text password in base64.
	SaltSeparator pulumi.StringPtrInput `pulumi:"saltSeparator"`
	// (Output)
	// Signer key in base64.
	SignerKey pulumi.StringPtrInput `pulumi:"signerKey"`
}

func (ConfigSignInHashConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigSignInHashConfig)(nil)).Elem()
}

func (i ConfigSignInHashConfigArgs) ToConfigSignInHashConfigOutput() ConfigSignInHashConfigOutput {
	return i.ToConfigSignInHashConfigOutputWithContext(context.Background())
}

func (i ConfigSignInHashConfigArgs) ToConfigSignInHashConfigOutputWithContext(ctx context.Context) ConfigSignInHashConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInHashConfigOutput)
}

func (i ConfigSignInHashConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigSignInHashConfig] {
	return pulumix.Output[ConfigSignInHashConfig]{
		OutputState: i.ToConfigSignInHashConfigOutputWithContext(ctx).OutputState,
	}
}

// ConfigSignInHashConfigArrayInput is an input type that accepts ConfigSignInHashConfigArray and ConfigSignInHashConfigArrayOutput values.
// You can construct a concrete instance of `ConfigSignInHashConfigArrayInput` via:
//
//	ConfigSignInHashConfigArray{ ConfigSignInHashConfigArgs{...} }
type ConfigSignInHashConfigArrayInput interface {
	pulumi.Input

	ToConfigSignInHashConfigArrayOutput() ConfigSignInHashConfigArrayOutput
	ToConfigSignInHashConfigArrayOutputWithContext(context.Context) ConfigSignInHashConfigArrayOutput
}

type ConfigSignInHashConfigArray []ConfigSignInHashConfigInput

func (ConfigSignInHashConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigSignInHashConfig)(nil)).Elem()
}

func (i ConfigSignInHashConfigArray) ToConfigSignInHashConfigArrayOutput() ConfigSignInHashConfigArrayOutput {
	return i.ToConfigSignInHashConfigArrayOutputWithContext(context.Background())
}

func (i ConfigSignInHashConfigArray) ToConfigSignInHashConfigArrayOutputWithContext(ctx context.Context) ConfigSignInHashConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInHashConfigArrayOutput)
}

func (i ConfigSignInHashConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]ConfigSignInHashConfig] {
	return pulumix.Output[[]ConfigSignInHashConfig]{
		OutputState: i.ToConfigSignInHashConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type ConfigSignInHashConfigOutput struct{ *pulumi.OutputState }

func (ConfigSignInHashConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigSignInHashConfig)(nil)).Elem()
}

func (o ConfigSignInHashConfigOutput) ToConfigSignInHashConfigOutput() ConfigSignInHashConfigOutput {
	return o
}

func (o ConfigSignInHashConfigOutput) ToConfigSignInHashConfigOutputWithContext(ctx context.Context) ConfigSignInHashConfigOutput {
	return o
}

func (o ConfigSignInHashConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigSignInHashConfig] {
	return pulumix.Output[ConfigSignInHashConfig]{
		OutputState: o.OutputState,
	}
}

// (Output)
// Different password hash algorithms used in Identity Toolkit.
func (o ConfigSignInHashConfigOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigSignInHashConfig) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// (Output)
// Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
func (o ConfigSignInHashConfigOutput) MemoryCost() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConfigSignInHashConfig) *int { return v.MemoryCost }).(pulumi.IntPtrOutput)
}

// (Output)
// How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.
func (o ConfigSignInHashConfigOutput) Rounds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConfigSignInHashConfig) *int { return v.Rounds }).(pulumi.IntPtrOutput)
}

// (Output)
// Non-printable character to be inserted between the salt and plain text password in base64.
func (o ConfigSignInHashConfigOutput) SaltSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigSignInHashConfig) *string { return v.SaltSeparator }).(pulumi.StringPtrOutput)
}

// (Output)
// Signer key in base64.
func (o ConfigSignInHashConfigOutput) SignerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigSignInHashConfig) *string { return v.SignerKey }).(pulumi.StringPtrOutput)
}

type ConfigSignInHashConfigArrayOutput struct{ *pulumi.OutputState }

func (ConfigSignInHashConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigSignInHashConfig)(nil)).Elem()
}

func (o ConfigSignInHashConfigArrayOutput) ToConfigSignInHashConfigArrayOutput() ConfigSignInHashConfigArrayOutput {
	return o
}

func (o ConfigSignInHashConfigArrayOutput) ToConfigSignInHashConfigArrayOutputWithContext(ctx context.Context) ConfigSignInHashConfigArrayOutput {
	return o
}

func (o ConfigSignInHashConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConfigSignInHashConfig] {
	return pulumix.Output[[]ConfigSignInHashConfig]{
		OutputState: o.OutputState,
	}
}

func (o ConfigSignInHashConfigArrayOutput) Index(i pulumi.IntInput) ConfigSignInHashConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigSignInHashConfig {
		return vs[0].([]ConfigSignInHashConfig)[vs[1].(int)]
	}).(ConfigSignInHashConfigOutput)
}

type ConfigSignInPhoneNumber struct {
	// Whether phone number auth is enabled for the project or not.
	Enabled bool `pulumi:"enabled"`
	// A map of <test phone number, fake code> that can be used for phone auth testing.
	TestPhoneNumbers map[string]string `pulumi:"testPhoneNumbers"`
}

// ConfigSignInPhoneNumberInput is an input type that accepts ConfigSignInPhoneNumberArgs and ConfigSignInPhoneNumberOutput values.
// You can construct a concrete instance of `ConfigSignInPhoneNumberInput` via:
//
//	ConfigSignInPhoneNumberArgs{...}
type ConfigSignInPhoneNumberInput interface {
	pulumi.Input

	ToConfigSignInPhoneNumberOutput() ConfigSignInPhoneNumberOutput
	ToConfigSignInPhoneNumberOutputWithContext(context.Context) ConfigSignInPhoneNumberOutput
}

type ConfigSignInPhoneNumberArgs struct {
	// Whether phone number auth is enabled for the project or not.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A map of <test phone number, fake code> that can be used for phone auth testing.
	TestPhoneNumbers pulumi.StringMapInput `pulumi:"testPhoneNumbers"`
}

func (ConfigSignInPhoneNumberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigSignInPhoneNumber)(nil)).Elem()
}

func (i ConfigSignInPhoneNumberArgs) ToConfigSignInPhoneNumberOutput() ConfigSignInPhoneNumberOutput {
	return i.ToConfigSignInPhoneNumberOutputWithContext(context.Background())
}

func (i ConfigSignInPhoneNumberArgs) ToConfigSignInPhoneNumberOutputWithContext(ctx context.Context) ConfigSignInPhoneNumberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInPhoneNumberOutput)
}

func (i ConfigSignInPhoneNumberArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigSignInPhoneNumber] {
	return pulumix.Output[ConfigSignInPhoneNumber]{
		OutputState: i.ToConfigSignInPhoneNumberOutputWithContext(ctx).OutputState,
	}
}

func (i ConfigSignInPhoneNumberArgs) ToConfigSignInPhoneNumberPtrOutput() ConfigSignInPhoneNumberPtrOutput {
	return i.ToConfigSignInPhoneNumberPtrOutputWithContext(context.Background())
}

func (i ConfigSignInPhoneNumberArgs) ToConfigSignInPhoneNumberPtrOutputWithContext(ctx context.Context) ConfigSignInPhoneNumberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInPhoneNumberOutput).ToConfigSignInPhoneNumberPtrOutputWithContext(ctx)
}

// ConfigSignInPhoneNumberPtrInput is an input type that accepts ConfigSignInPhoneNumberArgs, ConfigSignInPhoneNumberPtr and ConfigSignInPhoneNumberPtrOutput values.
// You can construct a concrete instance of `ConfigSignInPhoneNumberPtrInput` via:
//
//	        ConfigSignInPhoneNumberArgs{...}
//
//	or:
//
//	        nil
type ConfigSignInPhoneNumberPtrInput interface {
	pulumi.Input

	ToConfigSignInPhoneNumberPtrOutput() ConfigSignInPhoneNumberPtrOutput
	ToConfigSignInPhoneNumberPtrOutputWithContext(context.Context) ConfigSignInPhoneNumberPtrOutput
}

type configSignInPhoneNumberPtrType ConfigSignInPhoneNumberArgs

func ConfigSignInPhoneNumberPtr(v *ConfigSignInPhoneNumberArgs) ConfigSignInPhoneNumberPtrInput {
	return (*configSignInPhoneNumberPtrType)(v)
}

func (*configSignInPhoneNumberPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigSignInPhoneNumber)(nil)).Elem()
}

func (i *configSignInPhoneNumberPtrType) ToConfigSignInPhoneNumberPtrOutput() ConfigSignInPhoneNumberPtrOutput {
	return i.ToConfigSignInPhoneNumberPtrOutputWithContext(context.Background())
}

func (i *configSignInPhoneNumberPtrType) ToConfigSignInPhoneNumberPtrOutputWithContext(ctx context.Context) ConfigSignInPhoneNumberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSignInPhoneNumberPtrOutput)
}

func (i *configSignInPhoneNumberPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConfigSignInPhoneNumber] {
	return pulumix.Output[*ConfigSignInPhoneNumber]{
		OutputState: i.ToConfigSignInPhoneNumberPtrOutputWithContext(ctx).OutputState,
	}
}

type ConfigSignInPhoneNumberOutput struct{ *pulumi.OutputState }

func (ConfigSignInPhoneNumberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigSignInPhoneNumber)(nil)).Elem()
}

func (o ConfigSignInPhoneNumberOutput) ToConfigSignInPhoneNumberOutput() ConfigSignInPhoneNumberOutput {
	return o
}

func (o ConfigSignInPhoneNumberOutput) ToConfigSignInPhoneNumberOutputWithContext(ctx context.Context) ConfigSignInPhoneNumberOutput {
	return o
}

func (o ConfigSignInPhoneNumberOutput) ToConfigSignInPhoneNumberPtrOutput() ConfigSignInPhoneNumberPtrOutput {
	return o.ToConfigSignInPhoneNumberPtrOutputWithContext(context.Background())
}

func (o ConfigSignInPhoneNumberOutput) ToConfigSignInPhoneNumberPtrOutputWithContext(ctx context.Context) ConfigSignInPhoneNumberPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigSignInPhoneNumber) *ConfigSignInPhoneNumber {
		return &v
	}).(ConfigSignInPhoneNumberPtrOutput)
}

func (o ConfigSignInPhoneNumberOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigSignInPhoneNumber] {
	return pulumix.Output[ConfigSignInPhoneNumber]{
		OutputState: o.OutputState,
	}
}

// Whether phone number auth is enabled for the project or not.
func (o ConfigSignInPhoneNumberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigSignInPhoneNumber) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A map of <test phone number, fake code> that can be used for phone auth testing.
func (o ConfigSignInPhoneNumberOutput) TestPhoneNumbers() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConfigSignInPhoneNumber) map[string]string { return v.TestPhoneNumbers }).(pulumi.StringMapOutput)
}

type ConfigSignInPhoneNumberPtrOutput struct{ *pulumi.OutputState }

func (ConfigSignInPhoneNumberPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigSignInPhoneNumber)(nil)).Elem()
}

func (o ConfigSignInPhoneNumberPtrOutput) ToConfigSignInPhoneNumberPtrOutput() ConfigSignInPhoneNumberPtrOutput {
	return o
}

func (o ConfigSignInPhoneNumberPtrOutput) ToConfigSignInPhoneNumberPtrOutputWithContext(ctx context.Context) ConfigSignInPhoneNumberPtrOutput {
	return o
}

func (o ConfigSignInPhoneNumberPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigSignInPhoneNumber] {
	return pulumix.Output[*ConfigSignInPhoneNumber]{
		OutputState: o.OutputState,
	}
}

func (o ConfigSignInPhoneNumberPtrOutput) Elem() ConfigSignInPhoneNumberOutput {
	return o.ApplyT(func(v *ConfigSignInPhoneNumber) ConfigSignInPhoneNumber {
		if v != nil {
			return *v
		}
		var ret ConfigSignInPhoneNumber
		return ret
	}).(ConfigSignInPhoneNumberOutput)
}

// Whether phone number auth is enabled for the project or not.
func (o ConfigSignInPhoneNumberPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigSignInPhoneNumber) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A map of <test phone number, fake code> that can be used for phone auth testing.
func (o ConfigSignInPhoneNumberPtrOutput) TestPhoneNumbers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigSignInPhoneNumber) map[string]string {
		if v == nil {
			return nil
		}
		return v.TestPhoneNumbers
	}).(pulumi.StringMapOutput)
}

type InboundSamlConfigIdpConfig struct {
	// The IdP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
	// Structure is documented below.
	IdpCertificates []InboundSamlConfigIdpConfigIdpCertificate `pulumi:"idpCertificates"`
	// Unique identifier for all SAML entities
	IdpEntityId string `pulumi:"idpEntityId"`
	// Indicates if outbounding SAMLRequest should be signed.
	SignRequest *bool `pulumi:"signRequest"`
	// URL to send Authentication request to.
	SsoUrl string `pulumi:"ssoUrl"`
}

// InboundSamlConfigIdpConfigInput is an input type that accepts InboundSamlConfigIdpConfigArgs and InboundSamlConfigIdpConfigOutput values.
// You can construct a concrete instance of `InboundSamlConfigIdpConfigInput` via:
//
//	InboundSamlConfigIdpConfigArgs{...}
type InboundSamlConfigIdpConfigInput interface {
	pulumi.Input

	ToInboundSamlConfigIdpConfigOutput() InboundSamlConfigIdpConfigOutput
	ToInboundSamlConfigIdpConfigOutputWithContext(context.Context) InboundSamlConfigIdpConfigOutput
}

type InboundSamlConfigIdpConfigArgs struct {
	// The IdP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
	// Structure is documented below.
	IdpCertificates InboundSamlConfigIdpConfigIdpCertificateArrayInput `pulumi:"idpCertificates"`
	// Unique identifier for all SAML entities
	IdpEntityId pulumi.StringInput `pulumi:"idpEntityId"`
	// Indicates if outbounding SAMLRequest should be signed.
	SignRequest pulumi.BoolPtrInput `pulumi:"signRequest"`
	// URL to send Authentication request to.
	SsoUrl pulumi.StringInput `pulumi:"ssoUrl"`
}

func (InboundSamlConfigIdpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundSamlConfigIdpConfig)(nil)).Elem()
}

func (i InboundSamlConfigIdpConfigArgs) ToInboundSamlConfigIdpConfigOutput() InboundSamlConfigIdpConfigOutput {
	return i.ToInboundSamlConfigIdpConfigOutputWithContext(context.Background())
}

func (i InboundSamlConfigIdpConfigArgs) ToInboundSamlConfigIdpConfigOutputWithContext(ctx context.Context) InboundSamlConfigIdpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundSamlConfigIdpConfigOutput)
}

func (i InboundSamlConfigIdpConfigArgs) ToOutput(ctx context.Context) pulumix.Output[InboundSamlConfigIdpConfig] {
	return pulumix.Output[InboundSamlConfigIdpConfig]{
		OutputState: i.ToInboundSamlConfigIdpConfigOutputWithContext(ctx).OutputState,
	}
}

func (i InboundSamlConfigIdpConfigArgs) ToInboundSamlConfigIdpConfigPtrOutput() InboundSamlConfigIdpConfigPtrOutput {
	return i.ToInboundSamlConfigIdpConfigPtrOutputWithContext(context.Background())
}

func (i InboundSamlConfigIdpConfigArgs) ToInboundSamlConfigIdpConfigPtrOutputWithContext(ctx context.Context) InboundSamlConfigIdpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundSamlConfigIdpConfigOutput).ToInboundSamlConfigIdpConfigPtrOutputWithContext(ctx)
}

// InboundSamlConfigIdpConfigPtrInput is an input type that accepts InboundSamlConfigIdpConfigArgs, InboundSamlConfigIdpConfigPtr and InboundSamlConfigIdpConfigPtrOutput values.
// You can construct a concrete instance of `InboundSamlConfigIdpConfigPtrInput` via:
//
//	        InboundSamlConfigIdpConfigArgs{...}
//
//	or:
//
//	        nil
type InboundSamlConfigIdpConfigPtrInput interface {
	pulumi.Input

	ToInboundSamlConfigIdpConfigPtrOutput() InboundSamlConfigIdpConfigPtrOutput
	ToInboundSamlConfigIdpConfigPtrOutputWithContext(context.Context) InboundSamlConfigIdpConfigPtrOutput
}

type inboundSamlConfigIdpConfigPtrType InboundSamlConfigIdpConfigArgs

func InboundSamlConfigIdpConfigPtr(v *InboundSamlConfigIdpConfigArgs) InboundSamlConfigIdpConfigPtrInput {
	return (*inboundSamlConfigIdpConfigPtrType)(v)
}

func (*inboundSamlConfigIdpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InboundSamlConfigIdpConfig)(nil)).Elem()
}

func (i *inboundSamlConfigIdpConfigPtrType) ToInboundSamlConfigIdpConfigPtrOutput() InboundSamlConfigIdpConfigPtrOutput {
	return i.ToInboundSamlConfigIdpConfigPtrOutputWithContext(context.Background())
}

func (i *inboundSamlConfigIdpConfigPtrType) ToInboundSamlConfigIdpConfigPtrOutputWithContext(ctx context.Context) InboundSamlConfigIdpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundSamlConfigIdpConfigPtrOutput)
}

func (i *inboundSamlConfigIdpConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*InboundSamlConfigIdpConfig] {
	return pulumix.Output[*InboundSamlConfigIdpConfig]{
		OutputState: i.ToInboundSamlConfigIdpConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type InboundSamlConfigIdpConfigOutput struct{ *pulumi.OutputState }

func (InboundSamlConfigIdpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundSamlConfigIdpConfig)(nil)).Elem()
}

func (o InboundSamlConfigIdpConfigOutput) ToInboundSamlConfigIdpConfigOutput() InboundSamlConfigIdpConfigOutput {
	return o
}

func (o InboundSamlConfigIdpConfigOutput) ToInboundSamlConfigIdpConfigOutputWithContext(ctx context.Context) InboundSamlConfigIdpConfigOutput {
	return o
}

func (o InboundSamlConfigIdpConfigOutput) ToInboundSamlConfigIdpConfigPtrOutput() InboundSamlConfigIdpConfigPtrOutput {
	return o.ToInboundSamlConfigIdpConfigPtrOutputWithContext(context.Background())
}

func (o InboundSamlConfigIdpConfigOutput) ToInboundSamlConfigIdpConfigPtrOutputWithContext(ctx context.Context) InboundSamlConfigIdpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InboundSamlConfigIdpConfig) *InboundSamlConfigIdpConfig {
		return &v
	}).(InboundSamlConfigIdpConfigPtrOutput)
}

func (o InboundSamlConfigIdpConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InboundSamlConfigIdpConfig] {
	return pulumix.Output[InboundSamlConfigIdpConfig]{
		OutputState: o.OutputState,
	}
}

// The IdP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
// Structure is documented below.
func (o InboundSamlConfigIdpConfigOutput) IdpCertificates() InboundSamlConfigIdpConfigIdpCertificateArrayOutput {
	return o.ApplyT(func(v InboundSamlConfigIdpConfig) []InboundSamlConfigIdpConfigIdpCertificate {
		return v.IdpCertificates
	}).(InboundSamlConfigIdpConfigIdpCertificateArrayOutput)
}

// Unique identifier for all SAML entities
func (o InboundSamlConfigIdpConfigOutput) IdpEntityId() pulumi.StringOutput {
	return o.ApplyT(func(v InboundSamlConfigIdpConfig) string { return v.IdpEntityId }).(pulumi.StringOutput)
}

// Indicates if outbounding SAMLRequest should be signed.
func (o InboundSamlConfigIdpConfigOutput) SignRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InboundSamlConfigIdpConfig) *bool { return v.SignRequest }).(pulumi.BoolPtrOutput)
}

// URL to send Authentication request to.
func (o InboundSamlConfigIdpConfigOutput) SsoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v InboundSamlConfigIdpConfig) string { return v.SsoUrl }).(pulumi.StringOutput)
}

type InboundSamlConfigIdpConfigPtrOutput struct{ *pulumi.OutputState }

func (InboundSamlConfigIdpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InboundSamlConfigIdpConfig)(nil)).Elem()
}

func (o InboundSamlConfigIdpConfigPtrOutput) ToInboundSamlConfigIdpConfigPtrOutput() InboundSamlConfigIdpConfigPtrOutput {
	return o
}

func (o InboundSamlConfigIdpConfigPtrOutput) ToInboundSamlConfigIdpConfigPtrOutputWithContext(ctx context.Context) InboundSamlConfigIdpConfigPtrOutput {
	return o
}

func (o InboundSamlConfigIdpConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InboundSamlConfigIdpConfig] {
	return pulumix.Output[*InboundSamlConfigIdpConfig]{
		OutputState: o.OutputState,
	}
}

func (o InboundSamlConfigIdpConfigPtrOutput) Elem() InboundSamlConfigIdpConfigOutput {
	return o.ApplyT(func(v *InboundSamlConfigIdpConfig) InboundSamlConfigIdpConfig {
		if v != nil {
			return *v
		}
		var ret InboundSamlConfigIdpConfig
		return ret
	}).(InboundSamlConfigIdpConfigOutput)
}

// The IdP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
// Structure is documented below.
func (o InboundSamlConfigIdpConfigPtrOutput) IdpCertificates() InboundSamlConfigIdpConfigIdpCertificateArrayOutput {
	return o.ApplyT(func(v *InboundSamlConfigIdpConfig) []InboundSamlConfigIdpConfigIdpCertificate {
		if v == nil {
			return nil
		}
		return v.IdpCertificates
	}).(InboundSamlConfigIdpConfigIdpCertificateArrayOutput)
}

// Unique identifier for all SAML entities
func (o InboundSamlConfigIdpConfigPtrOutput) IdpEntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InboundSamlConfigIdpConfig) *string {
		if v == nil {
			return nil
		}
		return &v.IdpEntityId
	}).(pulumi.StringPtrOutput)
}

// Indicates if outbounding SAMLRequest should be signed.
func (o InboundSamlConfigIdpConfigPtrOutput) SignRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InboundSamlConfigIdpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.SignRequest
	}).(pulumi.BoolPtrOutput)
}

// URL to send Authentication request to.
func (o InboundSamlConfigIdpConfigPtrOutput) SsoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InboundSamlConfigIdpConfig) *string {
		if v == nil {
			return nil
		}
		return &v.SsoUrl
	}).(pulumi.StringPtrOutput)
}

type InboundSamlConfigIdpConfigIdpCertificate struct {
	// The IdP's x509 certificate.
	X509Certificate *string `pulumi:"x509Certificate"`
}

// InboundSamlConfigIdpConfigIdpCertificateInput is an input type that accepts InboundSamlConfigIdpConfigIdpCertificateArgs and InboundSamlConfigIdpConfigIdpCertificateOutput values.
// You can construct a concrete instance of `InboundSamlConfigIdpConfigIdpCertificateInput` via:
//
//	InboundSamlConfigIdpConfigIdpCertificateArgs{...}
type InboundSamlConfigIdpConfigIdpCertificateInput interface {
	pulumi.Input

	ToInboundSamlConfigIdpConfigIdpCertificateOutput() InboundSamlConfigIdpConfigIdpCertificateOutput
	ToInboundSamlConfigIdpConfigIdpCertificateOutputWithContext(context.Context) InboundSamlConfigIdpConfigIdpCertificateOutput
}

type InboundSamlConfigIdpConfigIdpCertificateArgs struct {
	// The IdP's x509 certificate.
	X509Certificate pulumi.StringPtrInput `pulumi:"x509Certificate"`
}

func (InboundSamlConfigIdpConfigIdpCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundSamlConfigIdpConfigIdpCertificate)(nil)).Elem()
}

func (i InboundSamlConfigIdpConfigIdpCertificateArgs) ToInboundSamlConfigIdpConfigIdpCertificateOutput() InboundSamlConfigIdpConfigIdpCertificateOutput {
	return i.ToInboundSamlConfigIdpConfigIdpCertificateOutputWithContext(context.Background())
}

func (i InboundSamlConfigIdpConfigIdpCertificateArgs) ToInboundSamlConfigIdpConfigIdpCertificateOutputWithContext(ctx context.Context) InboundSamlConfigIdpConfigIdpCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundSamlConfigIdpConfigIdpCertificateOutput)
}

func (i InboundSamlConfigIdpConfigIdpCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[InboundSamlConfigIdpConfigIdpCertificate] {
	return pulumix.Output[InboundSamlConfigIdpConfigIdpCertificate]{
		OutputState: i.ToInboundSamlConfigIdpConfigIdpCertificateOutputWithContext(ctx).OutputState,
	}
}

// InboundSamlConfigIdpConfigIdpCertificateArrayInput is an input type that accepts InboundSamlConfigIdpConfigIdpCertificateArray and InboundSamlConfigIdpConfigIdpCertificateArrayOutput values.
// You can construct a concrete instance of `InboundSamlConfigIdpConfigIdpCertificateArrayInput` via:
//
//	InboundSamlConfigIdpConfigIdpCertificateArray{ InboundSamlConfigIdpConfigIdpCertificateArgs{...} }
type InboundSamlConfigIdpConfigIdpCertificateArrayInput interface {
	pulumi.Input

	ToInboundSamlConfigIdpConfigIdpCertificateArrayOutput() InboundSamlConfigIdpConfigIdpCertificateArrayOutput
	ToInboundSamlConfigIdpConfigIdpCertificateArrayOutputWithContext(context.Context) InboundSamlConfigIdpConfigIdpCertificateArrayOutput
}

type InboundSamlConfigIdpConfigIdpCertificateArray []InboundSamlConfigIdpConfigIdpCertificateInput

func (InboundSamlConfigIdpConfigIdpCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundSamlConfigIdpConfigIdpCertificate)(nil)).Elem()
}

func (i InboundSamlConfigIdpConfigIdpCertificateArray) ToInboundSamlConfigIdpConfigIdpCertificateArrayOutput() InboundSamlConfigIdpConfigIdpCertificateArrayOutput {
	return i.ToInboundSamlConfigIdpConfigIdpCertificateArrayOutputWithContext(context.Background())
}

func (i InboundSamlConfigIdpConfigIdpCertificateArray) ToInboundSamlConfigIdpConfigIdpCertificateArrayOutputWithContext(ctx context.Context) InboundSamlConfigIdpConfigIdpCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundSamlConfigIdpConfigIdpCertificateArrayOutput)
}

func (i InboundSamlConfigIdpConfigIdpCertificateArray) ToOutput(ctx context.Context) pulumix.Output[[]InboundSamlConfigIdpConfigIdpCertificate] {
	return pulumix.Output[[]InboundSamlConfigIdpConfigIdpCertificate]{
		OutputState: i.ToInboundSamlConfigIdpConfigIdpCertificateArrayOutputWithContext(ctx).OutputState,
	}
}

type InboundSamlConfigIdpConfigIdpCertificateOutput struct{ *pulumi.OutputState }

func (InboundSamlConfigIdpConfigIdpCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundSamlConfigIdpConfigIdpCertificate)(nil)).Elem()
}

func (o InboundSamlConfigIdpConfigIdpCertificateOutput) ToInboundSamlConfigIdpConfigIdpCertificateOutput() InboundSamlConfigIdpConfigIdpCertificateOutput {
	return o
}

func (o InboundSamlConfigIdpConfigIdpCertificateOutput) ToInboundSamlConfigIdpConfigIdpCertificateOutputWithContext(ctx context.Context) InboundSamlConfigIdpConfigIdpCertificateOutput {
	return o
}

func (o InboundSamlConfigIdpConfigIdpCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[InboundSamlConfigIdpConfigIdpCertificate] {
	return pulumix.Output[InboundSamlConfigIdpConfigIdpCertificate]{
		OutputState: o.OutputState,
	}
}

// The IdP's x509 certificate.
func (o InboundSamlConfigIdpConfigIdpCertificateOutput) X509Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InboundSamlConfigIdpConfigIdpCertificate) *string { return v.X509Certificate }).(pulumi.StringPtrOutput)
}

type InboundSamlConfigIdpConfigIdpCertificateArrayOutput struct{ *pulumi.OutputState }

func (InboundSamlConfigIdpConfigIdpCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundSamlConfigIdpConfigIdpCertificate)(nil)).Elem()
}

func (o InboundSamlConfigIdpConfigIdpCertificateArrayOutput) ToInboundSamlConfigIdpConfigIdpCertificateArrayOutput() InboundSamlConfigIdpConfigIdpCertificateArrayOutput {
	return o
}

func (o InboundSamlConfigIdpConfigIdpCertificateArrayOutput) ToInboundSamlConfigIdpConfigIdpCertificateArrayOutputWithContext(ctx context.Context) InboundSamlConfigIdpConfigIdpCertificateArrayOutput {
	return o
}

func (o InboundSamlConfigIdpConfigIdpCertificateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InboundSamlConfigIdpConfigIdpCertificate] {
	return pulumix.Output[[]InboundSamlConfigIdpConfigIdpCertificate]{
		OutputState: o.OutputState,
	}
}

func (o InboundSamlConfigIdpConfigIdpCertificateArrayOutput) Index(i pulumi.IntInput) InboundSamlConfigIdpConfigIdpCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InboundSamlConfigIdpConfigIdpCertificate {
		return vs[0].([]InboundSamlConfigIdpConfigIdpCertificate)[vs[1].(int)]
	}).(InboundSamlConfigIdpConfigIdpCertificateOutput)
}

type InboundSamlConfigSpConfig struct {
	// Callback URI where responses from IDP are handled. Must start with `https://`.
	CallbackUri *string `pulumi:"callbackUri"`
	// (Output)
	// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
	// Structure is documented below.
	//
	// <a name="nestedSpCertificates"></a>The `spCertificates` block contains:
	SpCertificates []InboundSamlConfigSpConfigSpCertificate `pulumi:"spCertificates"`
	// Unique identifier for all SAML entities.
	SpEntityId *string `pulumi:"spEntityId"`
}

// InboundSamlConfigSpConfigInput is an input type that accepts InboundSamlConfigSpConfigArgs and InboundSamlConfigSpConfigOutput values.
// You can construct a concrete instance of `InboundSamlConfigSpConfigInput` via:
//
//	InboundSamlConfigSpConfigArgs{...}
type InboundSamlConfigSpConfigInput interface {
	pulumi.Input

	ToInboundSamlConfigSpConfigOutput() InboundSamlConfigSpConfigOutput
	ToInboundSamlConfigSpConfigOutputWithContext(context.Context) InboundSamlConfigSpConfigOutput
}

type InboundSamlConfigSpConfigArgs struct {
	// Callback URI where responses from IDP are handled. Must start with `https://`.
	CallbackUri pulumi.StringPtrInput `pulumi:"callbackUri"`
	// (Output)
	// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
	// Structure is documented below.
	//
	// <a name="nestedSpCertificates"></a>The `spCertificates` block contains:
	SpCertificates InboundSamlConfigSpConfigSpCertificateArrayInput `pulumi:"spCertificates"`
	// Unique identifier for all SAML entities.
	SpEntityId pulumi.StringPtrInput `pulumi:"spEntityId"`
}

func (InboundSamlConfigSpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundSamlConfigSpConfig)(nil)).Elem()
}

func (i InboundSamlConfigSpConfigArgs) ToInboundSamlConfigSpConfigOutput() InboundSamlConfigSpConfigOutput {
	return i.ToInboundSamlConfigSpConfigOutputWithContext(context.Background())
}

func (i InboundSamlConfigSpConfigArgs) ToInboundSamlConfigSpConfigOutputWithContext(ctx context.Context) InboundSamlConfigSpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundSamlConfigSpConfigOutput)
}

func (i InboundSamlConfigSpConfigArgs) ToOutput(ctx context.Context) pulumix.Output[InboundSamlConfigSpConfig] {
	return pulumix.Output[InboundSamlConfigSpConfig]{
		OutputState: i.ToInboundSamlConfigSpConfigOutputWithContext(ctx).OutputState,
	}
}

func (i InboundSamlConfigSpConfigArgs) ToInboundSamlConfigSpConfigPtrOutput() InboundSamlConfigSpConfigPtrOutput {
	return i.ToInboundSamlConfigSpConfigPtrOutputWithContext(context.Background())
}

func (i InboundSamlConfigSpConfigArgs) ToInboundSamlConfigSpConfigPtrOutputWithContext(ctx context.Context) InboundSamlConfigSpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundSamlConfigSpConfigOutput).ToInboundSamlConfigSpConfigPtrOutputWithContext(ctx)
}

// InboundSamlConfigSpConfigPtrInput is an input type that accepts InboundSamlConfigSpConfigArgs, InboundSamlConfigSpConfigPtr and InboundSamlConfigSpConfigPtrOutput values.
// You can construct a concrete instance of `InboundSamlConfigSpConfigPtrInput` via:
//
//	        InboundSamlConfigSpConfigArgs{...}
//
//	or:
//
//	        nil
type InboundSamlConfigSpConfigPtrInput interface {
	pulumi.Input

	ToInboundSamlConfigSpConfigPtrOutput() InboundSamlConfigSpConfigPtrOutput
	ToInboundSamlConfigSpConfigPtrOutputWithContext(context.Context) InboundSamlConfigSpConfigPtrOutput
}

type inboundSamlConfigSpConfigPtrType InboundSamlConfigSpConfigArgs

func InboundSamlConfigSpConfigPtr(v *InboundSamlConfigSpConfigArgs) InboundSamlConfigSpConfigPtrInput {
	return (*inboundSamlConfigSpConfigPtrType)(v)
}

func (*inboundSamlConfigSpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InboundSamlConfigSpConfig)(nil)).Elem()
}

func (i *inboundSamlConfigSpConfigPtrType) ToInboundSamlConfigSpConfigPtrOutput() InboundSamlConfigSpConfigPtrOutput {
	return i.ToInboundSamlConfigSpConfigPtrOutputWithContext(context.Background())
}

func (i *inboundSamlConfigSpConfigPtrType) ToInboundSamlConfigSpConfigPtrOutputWithContext(ctx context.Context) InboundSamlConfigSpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundSamlConfigSpConfigPtrOutput)
}

func (i *inboundSamlConfigSpConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*InboundSamlConfigSpConfig] {
	return pulumix.Output[*InboundSamlConfigSpConfig]{
		OutputState: i.ToInboundSamlConfigSpConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type InboundSamlConfigSpConfigOutput struct{ *pulumi.OutputState }

func (InboundSamlConfigSpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundSamlConfigSpConfig)(nil)).Elem()
}

func (o InboundSamlConfigSpConfigOutput) ToInboundSamlConfigSpConfigOutput() InboundSamlConfigSpConfigOutput {
	return o
}

func (o InboundSamlConfigSpConfigOutput) ToInboundSamlConfigSpConfigOutputWithContext(ctx context.Context) InboundSamlConfigSpConfigOutput {
	return o
}

func (o InboundSamlConfigSpConfigOutput) ToInboundSamlConfigSpConfigPtrOutput() InboundSamlConfigSpConfigPtrOutput {
	return o.ToInboundSamlConfigSpConfigPtrOutputWithContext(context.Background())
}

func (o InboundSamlConfigSpConfigOutput) ToInboundSamlConfigSpConfigPtrOutputWithContext(ctx context.Context) InboundSamlConfigSpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InboundSamlConfigSpConfig) *InboundSamlConfigSpConfig {
		return &v
	}).(InboundSamlConfigSpConfigPtrOutput)
}

func (o InboundSamlConfigSpConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InboundSamlConfigSpConfig] {
	return pulumix.Output[InboundSamlConfigSpConfig]{
		OutputState: o.OutputState,
	}
}

// Callback URI where responses from IDP are handled. Must start with `https://`.
func (o InboundSamlConfigSpConfigOutput) CallbackUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InboundSamlConfigSpConfig) *string { return v.CallbackUri }).(pulumi.StringPtrOutput)
}

// (Output)
// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
// Structure is documented below.
//
// <a name="nestedSpCertificates"></a>The `spCertificates` block contains:
func (o InboundSamlConfigSpConfigOutput) SpCertificates() InboundSamlConfigSpConfigSpCertificateArrayOutput {
	return o.ApplyT(func(v InboundSamlConfigSpConfig) []InboundSamlConfigSpConfigSpCertificate { return v.SpCertificates }).(InboundSamlConfigSpConfigSpCertificateArrayOutput)
}

// Unique identifier for all SAML entities.
func (o InboundSamlConfigSpConfigOutput) SpEntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InboundSamlConfigSpConfig) *string { return v.SpEntityId }).(pulumi.StringPtrOutput)
}

type InboundSamlConfigSpConfigPtrOutput struct{ *pulumi.OutputState }

func (InboundSamlConfigSpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InboundSamlConfigSpConfig)(nil)).Elem()
}

func (o InboundSamlConfigSpConfigPtrOutput) ToInboundSamlConfigSpConfigPtrOutput() InboundSamlConfigSpConfigPtrOutput {
	return o
}

func (o InboundSamlConfigSpConfigPtrOutput) ToInboundSamlConfigSpConfigPtrOutputWithContext(ctx context.Context) InboundSamlConfigSpConfigPtrOutput {
	return o
}

func (o InboundSamlConfigSpConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InboundSamlConfigSpConfig] {
	return pulumix.Output[*InboundSamlConfigSpConfig]{
		OutputState: o.OutputState,
	}
}

func (o InboundSamlConfigSpConfigPtrOutput) Elem() InboundSamlConfigSpConfigOutput {
	return o.ApplyT(func(v *InboundSamlConfigSpConfig) InboundSamlConfigSpConfig {
		if v != nil {
			return *v
		}
		var ret InboundSamlConfigSpConfig
		return ret
	}).(InboundSamlConfigSpConfigOutput)
}

// Callback URI where responses from IDP are handled. Must start with `https://`.
func (o InboundSamlConfigSpConfigPtrOutput) CallbackUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InboundSamlConfigSpConfig) *string {
		if v == nil {
			return nil
		}
		return v.CallbackUri
	}).(pulumi.StringPtrOutput)
}

// (Output)
// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
// Structure is documented below.
//
// <a name="nestedSpCertificates"></a>The `spCertificates` block contains:
func (o InboundSamlConfigSpConfigPtrOutput) SpCertificates() InboundSamlConfigSpConfigSpCertificateArrayOutput {
	return o.ApplyT(func(v *InboundSamlConfigSpConfig) []InboundSamlConfigSpConfigSpCertificate {
		if v == nil {
			return nil
		}
		return v.SpCertificates
	}).(InboundSamlConfigSpConfigSpCertificateArrayOutput)
}

// Unique identifier for all SAML entities.
func (o InboundSamlConfigSpConfigPtrOutput) SpEntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InboundSamlConfigSpConfig) *string {
		if v == nil {
			return nil
		}
		return v.SpEntityId
	}).(pulumi.StringPtrOutput)
}

type InboundSamlConfigSpConfigSpCertificate struct {
	// The IdP's x509 certificate.
	//
	// (Output)
	// The x509 certificate
	//
	// ***
	X509Certificate *string `pulumi:"x509Certificate"`
}

// InboundSamlConfigSpConfigSpCertificateInput is an input type that accepts InboundSamlConfigSpConfigSpCertificateArgs and InboundSamlConfigSpConfigSpCertificateOutput values.
// You can construct a concrete instance of `InboundSamlConfigSpConfigSpCertificateInput` via:
//
//	InboundSamlConfigSpConfigSpCertificateArgs{...}
type InboundSamlConfigSpConfigSpCertificateInput interface {
	pulumi.Input

	ToInboundSamlConfigSpConfigSpCertificateOutput() InboundSamlConfigSpConfigSpCertificateOutput
	ToInboundSamlConfigSpConfigSpCertificateOutputWithContext(context.Context) InboundSamlConfigSpConfigSpCertificateOutput
}

type InboundSamlConfigSpConfigSpCertificateArgs struct {
	// The IdP's x509 certificate.
	//
	// (Output)
	// The x509 certificate
	//
	// ***
	X509Certificate pulumi.StringPtrInput `pulumi:"x509Certificate"`
}

func (InboundSamlConfigSpConfigSpCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundSamlConfigSpConfigSpCertificate)(nil)).Elem()
}

func (i InboundSamlConfigSpConfigSpCertificateArgs) ToInboundSamlConfigSpConfigSpCertificateOutput() InboundSamlConfigSpConfigSpCertificateOutput {
	return i.ToInboundSamlConfigSpConfigSpCertificateOutputWithContext(context.Background())
}

func (i InboundSamlConfigSpConfigSpCertificateArgs) ToInboundSamlConfigSpConfigSpCertificateOutputWithContext(ctx context.Context) InboundSamlConfigSpConfigSpCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundSamlConfigSpConfigSpCertificateOutput)
}

func (i InboundSamlConfigSpConfigSpCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[InboundSamlConfigSpConfigSpCertificate] {
	return pulumix.Output[InboundSamlConfigSpConfigSpCertificate]{
		OutputState: i.ToInboundSamlConfigSpConfigSpCertificateOutputWithContext(ctx).OutputState,
	}
}

// InboundSamlConfigSpConfigSpCertificateArrayInput is an input type that accepts InboundSamlConfigSpConfigSpCertificateArray and InboundSamlConfigSpConfigSpCertificateArrayOutput values.
// You can construct a concrete instance of `InboundSamlConfigSpConfigSpCertificateArrayInput` via:
//
//	InboundSamlConfigSpConfigSpCertificateArray{ InboundSamlConfigSpConfigSpCertificateArgs{...} }
type InboundSamlConfigSpConfigSpCertificateArrayInput interface {
	pulumi.Input

	ToInboundSamlConfigSpConfigSpCertificateArrayOutput() InboundSamlConfigSpConfigSpCertificateArrayOutput
	ToInboundSamlConfigSpConfigSpCertificateArrayOutputWithContext(context.Context) InboundSamlConfigSpConfigSpCertificateArrayOutput
}

type InboundSamlConfigSpConfigSpCertificateArray []InboundSamlConfigSpConfigSpCertificateInput

func (InboundSamlConfigSpConfigSpCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundSamlConfigSpConfigSpCertificate)(nil)).Elem()
}

func (i InboundSamlConfigSpConfigSpCertificateArray) ToInboundSamlConfigSpConfigSpCertificateArrayOutput() InboundSamlConfigSpConfigSpCertificateArrayOutput {
	return i.ToInboundSamlConfigSpConfigSpCertificateArrayOutputWithContext(context.Background())
}

func (i InboundSamlConfigSpConfigSpCertificateArray) ToInboundSamlConfigSpConfigSpCertificateArrayOutputWithContext(ctx context.Context) InboundSamlConfigSpConfigSpCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundSamlConfigSpConfigSpCertificateArrayOutput)
}

func (i InboundSamlConfigSpConfigSpCertificateArray) ToOutput(ctx context.Context) pulumix.Output[[]InboundSamlConfigSpConfigSpCertificate] {
	return pulumix.Output[[]InboundSamlConfigSpConfigSpCertificate]{
		OutputState: i.ToInboundSamlConfigSpConfigSpCertificateArrayOutputWithContext(ctx).OutputState,
	}
}

type InboundSamlConfigSpConfigSpCertificateOutput struct{ *pulumi.OutputState }

func (InboundSamlConfigSpConfigSpCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundSamlConfigSpConfigSpCertificate)(nil)).Elem()
}

func (o InboundSamlConfigSpConfigSpCertificateOutput) ToInboundSamlConfigSpConfigSpCertificateOutput() InboundSamlConfigSpConfigSpCertificateOutput {
	return o
}

func (o InboundSamlConfigSpConfigSpCertificateOutput) ToInboundSamlConfigSpConfigSpCertificateOutputWithContext(ctx context.Context) InboundSamlConfigSpConfigSpCertificateOutput {
	return o
}

func (o InboundSamlConfigSpConfigSpCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[InboundSamlConfigSpConfigSpCertificate] {
	return pulumix.Output[InboundSamlConfigSpConfigSpCertificate]{
		OutputState: o.OutputState,
	}
}

// The IdP's x509 certificate.
//
// (Output)
// The x509 certificate
//
// ***
func (o InboundSamlConfigSpConfigSpCertificateOutput) X509Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InboundSamlConfigSpConfigSpCertificate) *string { return v.X509Certificate }).(pulumi.StringPtrOutput)
}

type InboundSamlConfigSpConfigSpCertificateArrayOutput struct{ *pulumi.OutputState }

func (InboundSamlConfigSpConfigSpCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundSamlConfigSpConfigSpCertificate)(nil)).Elem()
}

func (o InboundSamlConfigSpConfigSpCertificateArrayOutput) ToInboundSamlConfigSpConfigSpCertificateArrayOutput() InboundSamlConfigSpConfigSpCertificateArrayOutput {
	return o
}

func (o InboundSamlConfigSpConfigSpCertificateArrayOutput) ToInboundSamlConfigSpConfigSpCertificateArrayOutputWithContext(ctx context.Context) InboundSamlConfigSpConfigSpCertificateArrayOutput {
	return o
}

func (o InboundSamlConfigSpConfigSpCertificateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InboundSamlConfigSpConfigSpCertificate] {
	return pulumix.Output[[]InboundSamlConfigSpConfigSpCertificate]{
		OutputState: o.OutputState,
	}
}

func (o InboundSamlConfigSpConfigSpCertificateArrayOutput) Index(i pulumi.IntInput) InboundSamlConfigSpConfigSpCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InboundSamlConfigSpConfigSpCertificate {
		return vs[0].([]InboundSamlConfigSpConfigSpCertificate)[vs[1].(int)]
	}).(InboundSamlConfigSpConfigSpCertificateOutput)
}

type ProjectDefaultConfigSignIn struct {
	// Whether to allow more than one account to have the same email.
	AllowDuplicateEmails *bool `pulumi:"allowDuplicateEmails"`
	// Configuration options related to authenticating an anonymous user.
	// Structure is documented below.
	Anonymous *ProjectDefaultConfigSignInAnonymous `pulumi:"anonymous"`
	// Configuration options related to authenticating a user by their email address.
	// Structure is documented below.
	Email *ProjectDefaultConfigSignInEmail `pulumi:"email"`
	// (Output)
	// Output only. Hash config information.
	// Structure is documented below.
	HashConfigs []ProjectDefaultConfigSignInHashConfig `pulumi:"hashConfigs"`
	// Configuration options related to authenticated a user by their phone number.
	// Structure is documented below.
	PhoneNumber *ProjectDefaultConfigSignInPhoneNumber `pulumi:"phoneNumber"`
}

// ProjectDefaultConfigSignInInput is an input type that accepts ProjectDefaultConfigSignInArgs and ProjectDefaultConfigSignInOutput values.
// You can construct a concrete instance of `ProjectDefaultConfigSignInInput` via:
//
//	ProjectDefaultConfigSignInArgs{...}
type ProjectDefaultConfigSignInInput interface {
	pulumi.Input

	ToProjectDefaultConfigSignInOutput() ProjectDefaultConfigSignInOutput
	ToProjectDefaultConfigSignInOutputWithContext(context.Context) ProjectDefaultConfigSignInOutput
}

type ProjectDefaultConfigSignInArgs struct {
	// Whether to allow more than one account to have the same email.
	AllowDuplicateEmails pulumi.BoolPtrInput `pulumi:"allowDuplicateEmails"`
	// Configuration options related to authenticating an anonymous user.
	// Structure is documented below.
	Anonymous ProjectDefaultConfigSignInAnonymousPtrInput `pulumi:"anonymous"`
	// Configuration options related to authenticating a user by their email address.
	// Structure is documented below.
	Email ProjectDefaultConfigSignInEmailPtrInput `pulumi:"email"`
	// (Output)
	// Output only. Hash config information.
	// Structure is documented below.
	HashConfigs ProjectDefaultConfigSignInHashConfigArrayInput `pulumi:"hashConfigs"`
	// Configuration options related to authenticated a user by their phone number.
	// Structure is documented below.
	PhoneNumber ProjectDefaultConfigSignInPhoneNumberPtrInput `pulumi:"phoneNumber"`
}

func (ProjectDefaultConfigSignInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDefaultConfigSignIn)(nil)).Elem()
}

func (i ProjectDefaultConfigSignInArgs) ToProjectDefaultConfigSignInOutput() ProjectDefaultConfigSignInOutput {
	return i.ToProjectDefaultConfigSignInOutputWithContext(context.Background())
}

func (i ProjectDefaultConfigSignInArgs) ToProjectDefaultConfigSignInOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInOutput)
}

func (i ProjectDefaultConfigSignInArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectDefaultConfigSignIn] {
	return pulumix.Output[ProjectDefaultConfigSignIn]{
		OutputState: i.ToProjectDefaultConfigSignInOutputWithContext(ctx).OutputState,
	}
}

func (i ProjectDefaultConfigSignInArgs) ToProjectDefaultConfigSignInPtrOutput() ProjectDefaultConfigSignInPtrOutput {
	return i.ToProjectDefaultConfigSignInPtrOutputWithContext(context.Background())
}

func (i ProjectDefaultConfigSignInArgs) ToProjectDefaultConfigSignInPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInOutput).ToProjectDefaultConfigSignInPtrOutputWithContext(ctx)
}

// ProjectDefaultConfigSignInPtrInput is an input type that accepts ProjectDefaultConfigSignInArgs, ProjectDefaultConfigSignInPtr and ProjectDefaultConfigSignInPtrOutput values.
// You can construct a concrete instance of `ProjectDefaultConfigSignInPtrInput` via:
//
//	        ProjectDefaultConfigSignInArgs{...}
//
//	or:
//
//	        nil
type ProjectDefaultConfigSignInPtrInput interface {
	pulumi.Input

	ToProjectDefaultConfigSignInPtrOutput() ProjectDefaultConfigSignInPtrOutput
	ToProjectDefaultConfigSignInPtrOutputWithContext(context.Context) ProjectDefaultConfigSignInPtrOutput
}

type projectDefaultConfigSignInPtrType ProjectDefaultConfigSignInArgs

func ProjectDefaultConfigSignInPtr(v *ProjectDefaultConfigSignInArgs) ProjectDefaultConfigSignInPtrInput {
	return (*projectDefaultConfigSignInPtrType)(v)
}

func (*projectDefaultConfigSignInPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDefaultConfigSignIn)(nil)).Elem()
}

func (i *projectDefaultConfigSignInPtrType) ToProjectDefaultConfigSignInPtrOutput() ProjectDefaultConfigSignInPtrOutput {
	return i.ToProjectDefaultConfigSignInPtrOutputWithContext(context.Background())
}

func (i *projectDefaultConfigSignInPtrType) ToProjectDefaultConfigSignInPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInPtrOutput)
}

func (i *projectDefaultConfigSignInPtrType) ToOutput(ctx context.Context) pulumix.Output[*ProjectDefaultConfigSignIn] {
	return pulumix.Output[*ProjectDefaultConfigSignIn]{
		OutputState: i.ToProjectDefaultConfigSignInPtrOutputWithContext(ctx).OutputState,
	}
}

type ProjectDefaultConfigSignInOutput struct{ *pulumi.OutputState }

func (ProjectDefaultConfigSignInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDefaultConfigSignIn)(nil)).Elem()
}

func (o ProjectDefaultConfigSignInOutput) ToProjectDefaultConfigSignInOutput() ProjectDefaultConfigSignInOutput {
	return o
}

func (o ProjectDefaultConfigSignInOutput) ToProjectDefaultConfigSignInOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInOutput {
	return o
}

func (o ProjectDefaultConfigSignInOutput) ToProjectDefaultConfigSignInPtrOutput() ProjectDefaultConfigSignInPtrOutput {
	return o.ToProjectDefaultConfigSignInPtrOutputWithContext(context.Background())
}

func (o ProjectDefaultConfigSignInOutput) ToProjectDefaultConfigSignInPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectDefaultConfigSignIn) *ProjectDefaultConfigSignIn {
		return &v
	}).(ProjectDefaultConfigSignInPtrOutput)
}

func (o ProjectDefaultConfigSignInOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectDefaultConfigSignIn] {
	return pulumix.Output[ProjectDefaultConfigSignIn]{
		OutputState: o.OutputState,
	}
}

// Whether to allow more than one account to have the same email.
func (o ProjectDefaultConfigSignInOutput) AllowDuplicateEmails() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignIn) *bool { return v.AllowDuplicateEmails }).(pulumi.BoolPtrOutput)
}

// Configuration options related to authenticating an anonymous user.
// Structure is documented below.
func (o ProjectDefaultConfigSignInOutput) Anonymous() ProjectDefaultConfigSignInAnonymousPtrOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignIn) *ProjectDefaultConfigSignInAnonymous { return v.Anonymous }).(ProjectDefaultConfigSignInAnonymousPtrOutput)
}

// Configuration options related to authenticating a user by their email address.
// Structure is documented below.
func (o ProjectDefaultConfigSignInOutput) Email() ProjectDefaultConfigSignInEmailPtrOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignIn) *ProjectDefaultConfigSignInEmail { return v.Email }).(ProjectDefaultConfigSignInEmailPtrOutput)
}

// (Output)
// Output only. Hash config information.
// Structure is documented below.
func (o ProjectDefaultConfigSignInOutput) HashConfigs() ProjectDefaultConfigSignInHashConfigArrayOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignIn) []ProjectDefaultConfigSignInHashConfig { return v.HashConfigs }).(ProjectDefaultConfigSignInHashConfigArrayOutput)
}

// Configuration options related to authenticated a user by their phone number.
// Structure is documented below.
func (o ProjectDefaultConfigSignInOutput) PhoneNumber() ProjectDefaultConfigSignInPhoneNumberPtrOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignIn) *ProjectDefaultConfigSignInPhoneNumber { return v.PhoneNumber }).(ProjectDefaultConfigSignInPhoneNumberPtrOutput)
}

type ProjectDefaultConfigSignInPtrOutput struct{ *pulumi.OutputState }

func (ProjectDefaultConfigSignInPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDefaultConfigSignIn)(nil)).Elem()
}

func (o ProjectDefaultConfigSignInPtrOutput) ToProjectDefaultConfigSignInPtrOutput() ProjectDefaultConfigSignInPtrOutput {
	return o
}

func (o ProjectDefaultConfigSignInPtrOutput) ToProjectDefaultConfigSignInPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInPtrOutput {
	return o
}

func (o ProjectDefaultConfigSignInPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ProjectDefaultConfigSignIn] {
	return pulumix.Output[*ProjectDefaultConfigSignIn]{
		OutputState: o.OutputState,
	}
}

func (o ProjectDefaultConfigSignInPtrOutput) Elem() ProjectDefaultConfigSignInOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignIn) ProjectDefaultConfigSignIn {
		if v != nil {
			return *v
		}
		var ret ProjectDefaultConfigSignIn
		return ret
	}).(ProjectDefaultConfigSignInOutput)
}

// Whether to allow more than one account to have the same email.
func (o ProjectDefaultConfigSignInPtrOutput) AllowDuplicateEmails() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignIn) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDuplicateEmails
	}).(pulumi.BoolPtrOutput)
}

// Configuration options related to authenticating an anonymous user.
// Structure is documented below.
func (o ProjectDefaultConfigSignInPtrOutput) Anonymous() ProjectDefaultConfigSignInAnonymousPtrOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignIn) *ProjectDefaultConfigSignInAnonymous {
		if v == nil {
			return nil
		}
		return v.Anonymous
	}).(ProjectDefaultConfigSignInAnonymousPtrOutput)
}

// Configuration options related to authenticating a user by their email address.
// Structure is documented below.
func (o ProjectDefaultConfigSignInPtrOutput) Email() ProjectDefaultConfigSignInEmailPtrOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignIn) *ProjectDefaultConfigSignInEmail {
		if v == nil {
			return nil
		}
		return v.Email
	}).(ProjectDefaultConfigSignInEmailPtrOutput)
}

// (Output)
// Output only. Hash config information.
// Structure is documented below.
func (o ProjectDefaultConfigSignInPtrOutput) HashConfigs() ProjectDefaultConfigSignInHashConfigArrayOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignIn) []ProjectDefaultConfigSignInHashConfig {
		if v == nil {
			return nil
		}
		return v.HashConfigs
	}).(ProjectDefaultConfigSignInHashConfigArrayOutput)
}

// Configuration options related to authenticated a user by their phone number.
// Structure is documented below.
func (o ProjectDefaultConfigSignInPtrOutput) PhoneNumber() ProjectDefaultConfigSignInPhoneNumberPtrOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignIn) *ProjectDefaultConfigSignInPhoneNumber {
		if v == nil {
			return nil
		}
		return v.PhoneNumber
	}).(ProjectDefaultConfigSignInPhoneNumberPtrOutput)
}

type ProjectDefaultConfigSignInAnonymous struct {
	// Whether anonymous user auth is enabled for the project or not.
	//
	// <a name="nestedHashConfig"></a>The `hashConfig` block contains:
	Enabled bool `pulumi:"enabled"`
}

// ProjectDefaultConfigSignInAnonymousInput is an input type that accepts ProjectDefaultConfigSignInAnonymousArgs and ProjectDefaultConfigSignInAnonymousOutput values.
// You can construct a concrete instance of `ProjectDefaultConfigSignInAnonymousInput` via:
//
//	ProjectDefaultConfigSignInAnonymousArgs{...}
type ProjectDefaultConfigSignInAnonymousInput interface {
	pulumi.Input

	ToProjectDefaultConfigSignInAnonymousOutput() ProjectDefaultConfigSignInAnonymousOutput
	ToProjectDefaultConfigSignInAnonymousOutputWithContext(context.Context) ProjectDefaultConfigSignInAnonymousOutput
}

type ProjectDefaultConfigSignInAnonymousArgs struct {
	// Whether anonymous user auth is enabled for the project or not.
	//
	// <a name="nestedHashConfig"></a>The `hashConfig` block contains:
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ProjectDefaultConfigSignInAnonymousArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDefaultConfigSignInAnonymous)(nil)).Elem()
}

func (i ProjectDefaultConfigSignInAnonymousArgs) ToProjectDefaultConfigSignInAnonymousOutput() ProjectDefaultConfigSignInAnonymousOutput {
	return i.ToProjectDefaultConfigSignInAnonymousOutputWithContext(context.Background())
}

func (i ProjectDefaultConfigSignInAnonymousArgs) ToProjectDefaultConfigSignInAnonymousOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInAnonymousOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInAnonymousOutput)
}

func (i ProjectDefaultConfigSignInAnonymousArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectDefaultConfigSignInAnonymous] {
	return pulumix.Output[ProjectDefaultConfigSignInAnonymous]{
		OutputState: i.ToProjectDefaultConfigSignInAnonymousOutputWithContext(ctx).OutputState,
	}
}

func (i ProjectDefaultConfigSignInAnonymousArgs) ToProjectDefaultConfigSignInAnonymousPtrOutput() ProjectDefaultConfigSignInAnonymousPtrOutput {
	return i.ToProjectDefaultConfigSignInAnonymousPtrOutputWithContext(context.Background())
}

func (i ProjectDefaultConfigSignInAnonymousArgs) ToProjectDefaultConfigSignInAnonymousPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInAnonymousPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInAnonymousOutput).ToProjectDefaultConfigSignInAnonymousPtrOutputWithContext(ctx)
}

// ProjectDefaultConfigSignInAnonymousPtrInput is an input type that accepts ProjectDefaultConfigSignInAnonymousArgs, ProjectDefaultConfigSignInAnonymousPtr and ProjectDefaultConfigSignInAnonymousPtrOutput values.
// You can construct a concrete instance of `ProjectDefaultConfigSignInAnonymousPtrInput` via:
//
//	        ProjectDefaultConfigSignInAnonymousArgs{...}
//
//	or:
//
//	        nil
type ProjectDefaultConfigSignInAnonymousPtrInput interface {
	pulumi.Input

	ToProjectDefaultConfigSignInAnonymousPtrOutput() ProjectDefaultConfigSignInAnonymousPtrOutput
	ToProjectDefaultConfigSignInAnonymousPtrOutputWithContext(context.Context) ProjectDefaultConfigSignInAnonymousPtrOutput
}

type projectDefaultConfigSignInAnonymousPtrType ProjectDefaultConfigSignInAnonymousArgs

func ProjectDefaultConfigSignInAnonymousPtr(v *ProjectDefaultConfigSignInAnonymousArgs) ProjectDefaultConfigSignInAnonymousPtrInput {
	return (*projectDefaultConfigSignInAnonymousPtrType)(v)
}

func (*projectDefaultConfigSignInAnonymousPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDefaultConfigSignInAnonymous)(nil)).Elem()
}

func (i *projectDefaultConfigSignInAnonymousPtrType) ToProjectDefaultConfigSignInAnonymousPtrOutput() ProjectDefaultConfigSignInAnonymousPtrOutput {
	return i.ToProjectDefaultConfigSignInAnonymousPtrOutputWithContext(context.Background())
}

func (i *projectDefaultConfigSignInAnonymousPtrType) ToProjectDefaultConfigSignInAnonymousPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInAnonymousPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInAnonymousPtrOutput)
}

func (i *projectDefaultConfigSignInAnonymousPtrType) ToOutput(ctx context.Context) pulumix.Output[*ProjectDefaultConfigSignInAnonymous] {
	return pulumix.Output[*ProjectDefaultConfigSignInAnonymous]{
		OutputState: i.ToProjectDefaultConfigSignInAnonymousPtrOutputWithContext(ctx).OutputState,
	}
}

type ProjectDefaultConfigSignInAnonymousOutput struct{ *pulumi.OutputState }

func (ProjectDefaultConfigSignInAnonymousOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDefaultConfigSignInAnonymous)(nil)).Elem()
}

func (o ProjectDefaultConfigSignInAnonymousOutput) ToProjectDefaultConfigSignInAnonymousOutput() ProjectDefaultConfigSignInAnonymousOutput {
	return o
}

func (o ProjectDefaultConfigSignInAnonymousOutput) ToProjectDefaultConfigSignInAnonymousOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInAnonymousOutput {
	return o
}

func (o ProjectDefaultConfigSignInAnonymousOutput) ToProjectDefaultConfigSignInAnonymousPtrOutput() ProjectDefaultConfigSignInAnonymousPtrOutput {
	return o.ToProjectDefaultConfigSignInAnonymousPtrOutputWithContext(context.Background())
}

func (o ProjectDefaultConfigSignInAnonymousOutput) ToProjectDefaultConfigSignInAnonymousPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInAnonymousPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectDefaultConfigSignInAnonymous) *ProjectDefaultConfigSignInAnonymous {
		return &v
	}).(ProjectDefaultConfigSignInAnonymousPtrOutput)
}

func (o ProjectDefaultConfigSignInAnonymousOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectDefaultConfigSignInAnonymous] {
	return pulumix.Output[ProjectDefaultConfigSignInAnonymous]{
		OutputState: o.OutputState,
	}
}

// Whether anonymous user auth is enabled for the project or not.
//
// <a name="nestedHashConfig"></a>The `hashConfig` block contains:
func (o ProjectDefaultConfigSignInAnonymousOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignInAnonymous) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ProjectDefaultConfigSignInAnonymousPtrOutput struct{ *pulumi.OutputState }

func (ProjectDefaultConfigSignInAnonymousPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDefaultConfigSignInAnonymous)(nil)).Elem()
}

func (o ProjectDefaultConfigSignInAnonymousPtrOutput) ToProjectDefaultConfigSignInAnonymousPtrOutput() ProjectDefaultConfigSignInAnonymousPtrOutput {
	return o
}

func (o ProjectDefaultConfigSignInAnonymousPtrOutput) ToProjectDefaultConfigSignInAnonymousPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInAnonymousPtrOutput {
	return o
}

func (o ProjectDefaultConfigSignInAnonymousPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ProjectDefaultConfigSignInAnonymous] {
	return pulumix.Output[*ProjectDefaultConfigSignInAnonymous]{
		OutputState: o.OutputState,
	}
}

func (o ProjectDefaultConfigSignInAnonymousPtrOutput) Elem() ProjectDefaultConfigSignInAnonymousOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignInAnonymous) ProjectDefaultConfigSignInAnonymous {
		if v != nil {
			return *v
		}
		var ret ProjectDefaultConfigSignInAnonymous
		return ret
	}).(ProjectDefaultConfigSignInAnonymousOutput)
}

// Whether anonymous user auth is enabled for the project or not.
//
// <a name="nestedHashConfig"></a>The `hashConfig` block contains:
func (o ProjectDefaultConfigSignInAnonymousPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignInAnonymous) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ProjectDefaultConfigSignInEmail struct {
	// Whether email auth is enabled for the project or not.
	Enabled *bool `pulumi:"enabled"`
	// Whether a password is required for email auth or not. If true, both an email and
	// password must be provided to sign in. If false, a user may sign in via either
	// email/password or email link.
	PasswordRequired *bool `pulumi:"passwordRequired"`
}

// ProjectDefaultConfigSignInEmailInput is an input type that accepts ProjectDefaultConfigSignInEmailArgs and ProjectDefaultConfigSignInEmailOutput values.
// You can construct a concrete instance of `ProjectDefaultConfigSignInEmailInput` via:
//
//	ProjectDefaultConfigSignInEmailArgs{...}
type ProjectDefaultConfigSignInEmailInput interface {
	pulumi.Input

	ToProjectDefaultConfigSignInEmailOutput() ProjectDefaultConfigSignInEmailOutput
	ToProjectDefaultConfigSignInEmailOutputWithContext(context.Context) ProjectDefaultConfigSignInEmailOutput
}

type ProjectDefaultConfigSignInEmailArgs struct {
	// Whether email auth is enabled for the project or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Whether a password is required for email auth or not. If true, both an email and
	// password must be provided to sign in. If false, a user may sign in via either
	// email/password or email link.
	PasswordRequired pulumi.BoolPtrInput `pulumi:"passwordRequired"`
}

func (ProjectDefaultConfigSignInEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDefaultConfigSignInEmail)(nil)).Elem()
}

func (i ProjectDefaultConfigSignInEmailArgs) ToProjectDefaultConfigSignInEmailOutput() ProjectDefaultConfigSignInEmailOutput {
	return i.ToProjectDefaultConfigSignInEmailOutputWithContext(context.Background())
}

func (i ProjectDefaultConfigSignInEmailArgs) ToProjectDefaultConfigSignInEmailOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInEmailOutput)
}

func (i ProjectDefaultConfigSignInEmailArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectDefaultConfigSignInEmail] {
	return pulumix.Output[ProjectDefaultConfigSignInEmail]{
		OutputState: i.ToProjectDefaultConfigSignInEmailOutputWithContext(ctx).OutputState,
	}
}

func (i ProjectDefaultConfigSignInEmailArgs) ToProjectDefaultConfigSignInEmailPtrOutput() ProjectDefaultConfigSignInEmailPtrOutput {
	return i.ToProjectDefaultConfigSignInEmailPtrOutputWithContext(context.Background())
}

func (i ProjectDefaultConfigSignInEmailArgs) ToProjectDefaultConfigSignInEmailPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInEmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInEmailOutput).ToProjectDefaultConfigSignInEmailPtrOutputWithContext(ctx)
}

// ProjectDefaultConfigSignInEmailPtrInput is an input type that accepts ProjectDefaultConfigSignInEmailArgs, ProjectDefaultConfigSignInEmailPtr and ProjectDefaultConfigSignInEmailPtrOutput values.
// You can construct a concrete instance of `ProjectDefaultConfigSignInEmailPtrInput` via:
//
//	        ProjectDefaultConfigSignInEmailArgs{...}
//
//	or:
//
//	        nil
type ProjectDefaultConfigSignInEmailPtrInput interface {
	pulumi.Input

	ToProjectDefaultConfigSignInEmailPtrOutput() ProjectDefaultConfigSignInEmailPtrOutput
	ToProjectDefaultConfigSignInEmailPtrOutputWithContext(context.Context) ProjectDefaultConfigSignInEmailPtrOutput
}

type projectDefaultConfigSignInEmailPtrType ProjectDefaultConfigSignInEmailArgs

func ProjectDefaultConfigSignInEmailPtr(v *ProjectDefaultConfigSignInEmailArgs) ProjectDefaultConfigSignInEmailPtrInput {
	return (*projectDefaultConfigSignInEmailPtrType)(v)
}

func (*projectDefaultConfigSignInEmailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDefaultConfigSignInEmail)(nil)).Elem()
}

func (i *projectDefaultConfigSignInEmailPtrType) ToProjectDefaultConfigSignInEmailPtrOutput() ProjectDefaultConfigSignInEmailPtrOutput {
	return i.ToProjectDefaultConfigSignInEmailPtrOutputWithContext(context.Background())
}

func (i *projectDefaultConfigSignInEmailPtrType) ToProjectDefaultConfigSignInEmailPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInEmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInEmailPtrOutput)
}

func (i *projectDefaultConfigSignInEmailPtrType) ToOutput(ctx context.Context) pulumix.Output[*ProjectDefaultConfigSignInEmail] {
	return pulumix.Output[*ProjectDefaultConfigSignInEmail]{
		OutputState: i.ToProjectDefaultConfigSignInEmailPtrOutputWithContext(ctx).OutputState,
	}
}

type ProjectDefaultConfigSignInEmailOutput struct{ *pulumi.OutputState }

func (ProjectDefaultConfigSignInEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDefaultConfigSignInEmail)(nil)).Elem()
}

func (o ProjectDefaultConfigSignInEmailOutput) ToProjectDefaultConfigSignInEmailOutput() ProjectDefaultConfigSignInEmailOutput {
	return o
}

func (o ProjectDefaultConfigSignInEmailOutput) ToProjectDefaultConfigSignInEmailOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInEmailOutput {
	return o
}

func (o ProjectDefaultConfigSignInEmailOutput) ToProjectDefaultConfigSignInEmailPtrOutput() ProjectDefaultConfigSignInEmailPtrOutput {
	return o.ToProjectDefaultConfigSignInEmailPtrOutputWithContext(context.Background())
}

func (o ProjectDefaultConfigSignInEmailOutput) ToProjectDefaultConfigSignInEmailPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInEmailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectDefaultConfigSignInEmail) *ProjectDefaultConfigSignInEmail {
		return &v
	}).(ProjectDefaultConfigSignInEmailPtrOutput)
}

func (o ProjectDefaultConfigSignInEmailOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectDefaultConfigSignInEmail] {
	return pulumix.Output[ProjectDefaultConfigSignInEmail]{
		OutputState: o.OutputState,
	}
}

// Whether email auth is enabled for the project or not.
func (o ProjectDefaultConfigSignInEmailOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignInEmail) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Whether a password is required for email auth or not. If true, both an email and
// password must be provided to sign in. If false, a user may sign in via either
// email/password or email link.
func (o ProjectDefaultConfigSignInEmailOutput) PasswordRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignInEmail) *bool { return v.PasswordRequired }).(pulumi.BoolPtrOutput)
}

type ProjectDefaultConfigSignInEmailPtrOutput struct{ *pulumi.OutputState }

func (ProjectDefaultConfigSignInEmailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDefaultConfigSignInEmail)(nil)).Elem()
}

func (o ProjectDefaultConfigSignInEmailPtrOutput) ToProjectDefaultConfigSignInEmailPtrOutput() ProjectDefaultConfigSignInEmailPtrOutput {
	return o
}

func (o ProjectDefaultConfigSignInEmailPtrOutput) ToProjectDefaultConfigSignInEmailPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInEmailPtrOutput {
	return o
}

func (o ProjectDefaultConfigSignInEmailPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ProjectDefaultConfigSignInEmail] {
	return pulumix.Output[*ProjectDefaultConfigSignInEmail]{
		OutputState: o.OutputState,
	}
}

func (o ProjectDefaultConfigSignInEmailPtrOutput) Elem() ProjectDefaultConfigSignInEmailOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignInEmail) ProjectDefaultConfigSignInEmail {
		if v != nil {
			return *v
		}
		var ret ProjectDefaultConfigSignInEmail
		return ret
	}).(ProjectDefaultConfigSignInEmailOutput)
}

// Whether email auth is enabled for the project or not.
func (o ProjectDefaultConfigSignInEmailPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignInEmail) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Whether a password is required for email auth or not. If true, both an email and
// password must be provided to sign in. If false, a user may sign in via either
// email/password or email link.
func (o ProjectDefaultConfigSignInEmailPtrOutput) PasswordRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignInEmail) *bool {
		if v == nil {
			return nil
		}
		return v.PasswordRequired
	}).(pulumi.BoolPtrOutput)
}

type ProjectDefaultConfigSignInHashConfig struct {
	// (Output)
	// Different password hash algorithms used in Identity Toolkit.
	Algorithm *string `pulumi:"algorithm"`
	// (Output)
	// Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
	MemoryCost *int `pulumi:"memoryCost"`
	// (Output)
	// How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.
	Rounds *int `pulumi:"rounds"`
	// (Output)
	// Non-printable character to be inserted between the salt and plain text password in base64.
	SaltSeparator *string `pulumi:"saltSeparator"`
	// (Output)
	// Signer key in base64.
	SignerKey *string `pulumi:"signerKey"`
}

// ProjectDefaultConfigSignInHashConfigInput is an input type that accepts ProjectDefaultConfigSignInHashConfigArgs and ProjectDefaultConfigSignInHashConfigOutput values.
// You can construct a concrete instance of `ProjectDefaultConfigSignInHashConfigInput` via:
//
//	ProjectDefaultConfigSignInHashConfigArgs{...}
type ProjectDefaultConfigSignInHashConfigInput interface {
	pulumi.Input

	ToProjectDefaultConfigSignInHashConfigOutput() ProjectDefaultConfigSignInHashConfigOutput
	ToProjectDefaultConfigSignInHashConfigOutputWithContext(context.Context) ProjectDefaultConfigSignInHashConfigOutput
}

type ProjectDefaultConfigSignInHashConfigArgs struct {
	// (Output)
	// Different password hash algorithms used in Identity Toolkit.
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// (Output)
	// Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
	MemoryCost pulumi.IntPtrInput `pulumi:"memoryCost"`
	// (Output)
	// How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.
	Rounds pulumi.IntPtrInput `pulumi:"rounds"`
	// (Output)
	// Non-printable character to be inserted between the salt and plain text password in base64.
	SaltSeparator pulumi.StringPtrInput `pulumi:"saltSeparator"`
	// (Output)
	// Signer key in base64.
	SignerKey pulumi.StringPtrInput `pulumi:"signerKey"`
}

func (ProjectDefaultConfigSignInHashConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDefaultConfigSignInHashConfig)(nil)).Elem()
}

func (i ProjectDefaultConfigSignInHashConfigArgs) ToProjectDefaultConfigSignInHashConfigOutput() ProjectDefaultConfigSignInHashConfigOutput {
	return i.ToProjectDefaultConfigSignInHashConfigOutputWithContext(context.Background())
}

func (i ProjectDefaultConfigSignInHashConfigArgs) ToProjectDefaultConfigSignInHashConfigOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInHashConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInHashConfigOutput)
}

func (i ProjectDefaultConfigSignInHashConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectDefaultConfigSignInHashConfig] {
	return pulumix.Output[ProjectDefaultConfigSignInHashConfig]{
		OutputState: i.ToProjectDefaultConfigSignInHashConfigOutputWithContext(ctx).OutputState,
	}
}

// ProjectDefaultConfigSignInHashConfigArrayInput is an input type that accepts ProjectDefaultConfigSignInHashConfigArray and ProjectDefaultConfigSignInHashConfigArrayOutput values.
// You can construct a concrete instance of `ProjectDefaultConfigSignInHashConfigArrayInput` via:
//
//	ProjectDefaultConfigSignInHashConfigArray{ ProjectDefaultConfigSignInHashConfigArgs{...} }
type ProjectDefaultConfigSignInHashConfigArrayInput interface {
	pulumi.Input

	ToProjectDefaultConfigSignInHashConfigArrayOutput() ProjectDefaultConfigSignInHashConfigArrayOutput
	ToProjectDefaultConfigSignInHashConfigArrayOutputWithContext(context.Context) ProjectDefaultConfigSignInHashConfigArrayOutput
}

type ProjectDefaultConfigSignInHashConfigArray []ProjectDefaultConfigSignInHashConfigInput

func (ProjectDefaultConfigSignInHashConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectDefaultConfigSignInHashConfig)(nil)).Elem()
}

func (i ProjectDefaultConfigSignInHashConfigArray) ToProjectDefaultConfigSignInHashConfigArrayOutput() ProjectDefaultConfigSignInHashConfigArrayOutput {
	return i.ToProjectDefaultConfigSignInHashConfigArrayOutputWithContext(context.Background())
}

func (i ProjectDefaultConfigSignInHashConfigArray) ToProjectDefaultConfigSignInHashConfigArrayOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInHashConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInHashConfigArrayOutput)
}

func (i ProjectDefaultConfigSignInHashConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]ProjectDefaultConfigSignInHashConfig] {
	return pulumix.Output[[]ProjectDefaultConfigSignInHashConfig]{
		OutputState: i.ToProjectDefaultConfigSignInHashConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type ProjectDefaultConfigSignInHashConfigOutput struct{ *pulumi.OutputState }

func (ProjectDefaultConfigSignInHashConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDefaultConfigSignInHashConfig)(nil)).Elem()
}

func (o ProjectDefaultConfigSignInHashConfigOutput) ToProjectDefaultConfigSignInHashConfigOutput() ProjectDefaultConfigSignInHashConfigOutput {
	return o
}

func (o ProjectDefaultConfigSignInHashConfigOutput) ToProjectDefaultConfigSignInHashConfigOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInHashConfigOutput {
	return o
}

func (o ProjectDefaultConfigSignInHashConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectDefaultConfigSignInHashConfig] {
	return pulumix.Output[ProjectDefaultConfigSignInHashConfig]{
		OutputState: o.OutputState,
	}
}

// (Output)
// Different password hash algorithms used in Identity Toolkit.
func (o ProjectDefaultConfigSignInHashConfigOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignInHashConfig) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// (Output)
// Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
func (o ProjectDefaultConfigSignInHashConfigOutput) MemoryCost() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignInHashConfig) *int { return v.MemoryCost }).(pulumi.IntPtrOutput)
}

// (Output)
// How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.
func (o ProjectDefaultConfigSignInHashConfigOutput) Rounds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignInHashConfig) *int { return v.Rounds }).(pulumi.IntPtrOutput)
}

// (Output)
// Non-printable character to be inserted between the salt and plain text password in base64.
func (o ProjectDefaultConfigSignInHashConfigOutput) SaltSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignInHashConfig) *string { return v.SaltSeparator }).(pulumi.StringPtrOutput)
}

// (Output)
// Signer key in base64.
func (o ProjectDefaultConfigSignInHashConfigOutput) SignerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignInHashConfig) *string { return v.SignerKey }).(pulumi.StringPtrOutput)
}

type ProjectDefaultConfigSignInHashConfigArrayOutput struct{ *pulumi.OutputState }

func (ProjectDefaultConfigSignInHashConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectDefaultConfigSignInHashConfig)(nil)).Elem()
}

func (o ProjectDefaultConfigSignInHashConfigArrayOutput) ToProjectDefaultConfigSignInHashConfigArrayOutput() ProjectDefaultConfigSignInHashConfigArrayOutput {
	return o
}

func (o ProjectDefaultConfigSignInHashConfigArrayOutput) ToProjectDefaultConfigSignInHashConfigArrayOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInHashConfigArrayOutput {
	return o
}

func (o ProjectDefaultConfigSignInHashConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProjectDefaultConfigSignInHashConfig] {
	return pulumix.Output[[]ProjectDefaultConfigSignInHashConfig]{
		OutputState: o.OutputState,
	}
}

func (o ProjectDefaultConfigSignInHashConfigArrayOutput) Index(i pulumi.IntInput) ProjectDefaultConfigSignInHashConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectDefaultConfigSignInHashConfig {
		return vs[0].([]ProjectDefaultConfigSignInHashConfig)[vs[1].(int)]
	}).(ProjectDefaultConfigSignInHashConfigOutput)
}

type ProjectDefaultConfigSignInPhoneNumber struct {
	// Whether phone number auth is enabled for the project or not.
	Enabled *bool `pulumi:"enabled"`
	// A map of <test phone number, fake code> that can be used for phone auth testing.
	TestPhoneNumbers map[string]string `pulumi:"testPhoneNumbers"`
}

// ProjectDefaultConfigSignInPhoneNumberInput is an input type that accepts ProjectDefaultConfigSignInPhoneNumberArgs and ProjectDefaultConfigSignInPhoneNumberOutput values.
// You can construct a concrete instance of `ProjectDefaultConfigSignInPhoneNumberInput` via:
//
//	ProjectDefaultConfigSignInPhoneNumberArgs{...}
type ProjectDefaultConfigSignInPhoneNumberInput interface {
	pulumi.Input

	ToProjectDefaultConfigSignInPhoneNumberOutput() ProjectDefaultConfigSignInPhoneNumberOutput
	ToProjectDefaultConfigSignInPhoneNumberOutputWithContext(context.Context) ProjectDefaultConfigSignInPhoneNumberOutput
}

type ProjectDefaultConfigSignInPhoneNumberArgs struct {
	// Whether phone number auth is enabled for the project or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// A map of <test phone number, fake code> that can be used for phone auth testing.
	TestPhoneNumbers pulumi.StringMapInput `pulumi:"testPhoneNumbers"`
}

func (ProjectDefaultConfigSignInPhoneNumberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDefaultConfigSignInPhoneNumber)(nil)).Elem()
}

func (i ProjectDefaultConfigSignInPhoneNumberArgs) ToProjectDefaultConfigSignInPhoneNumberOutput() ProjectDefaultConfigSignInPhoneNumberOutput {
	return i.ToProjectDefaultConfigSignInPhoneNumberOutputWithContext(context.Background())
}

func (i ProjectDefaultConfigSignInPhoneNumberArgs) ToProjectDefaultConfigSignInPhoneNumberOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInPhoneNumberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInPhoneNumberOutput)
}

func (i ProjectDefaultConfigSignInPhoneNumberArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectDefaultConfigSignInPhoneNumber] {
	return pulumix.Output[ProjectDefaultConfigSignInPhoneNumber]{
		OutputState: i.ToProjectDefaultConfigSignInPhoneNumberOutputWithContext(ctx).OutputState,
	}
}

func (i ProjectDefaultConfigSignInPhoneNumberArgs) ToProjectDefaultConfigSignInPhoneNumberPtrOutput() ProjectDefaultConfigSignInPhoneNumberPtrOutput {
	return i.ToProjectDefaultConfigSignInPhoneNumberPtrOutputWithContext(context.Background())
}

func (i ProjectDefaultConfigSignInPhoneNumberArgs) ToProjectDefaultConfigSignInPhoneNumberPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInPhoneNumberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInPhoneNumberOutput).ToProjectDefaultConfigSignInPhoneNumberPtrOutputWithContext(ctx)
}

// ProjectDefaultConfigSignInPhoneNumberPtrInput is an input type that accepts ProjectDefaultConfigSignInPhoneNumberArgs, ProjectDefaultConfigSignInPhoneNumberPtr and ProjectDefaultConfigSignInPhoneNumberPtrOutput values.
// You can construct a concrete instance of `ProjectDefaultConfigSignInPhoneNumberPtrInput` via:
//
//	        ProjectDefaultConfigSignInPhoneNumberArgs{...}
//
//	or:
//
//	        nil
type ProjectDefaultConfigSignInPhoneNumberPtrInput interface {
	pulumi.Input

	ToProjectDefaultConfigSignInPhoneNumberPtrOutput() ProjectDefaultConfigSignInPhoneNumberPtrOutput
	ToProjectDefaultConfigSignInPhoneNumberPtrOutputWithContext(context.Context) ProjectDefaultConfigSignInPhoneNumberPtrOutput
}

type projectDefaultConfigSignInPhoneNumberPtrType ProjectDefaultConfigSignInPhoneNumberArgs

func ProjectDefaultConfigSignInPhoneNumberPtr(v *ProjectDefaultConfigSignInPhoneNumberArgs) ProjectDefaultConfigSignInPhoneNumberPtrInput {
	return (*projectDefaultConfigSignInPhoneNumberPtrType)(v)
}

func (*projectDefaultConfigSignInPhoneNumberPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDefaultConfigSignInPhoneNumber)(nil)).Elem()
}

func (i *projectDefaultConfigSignInPhoneNumberPtrType) ToProjectDefaultConfigSignInPhoneNumberPtrOutput() ProjectDefaultConfigSignInPhoneNumberPtrOutput {
	return i.ToProjectDefaultConfigSignInPhoneNumberPtrOutputWithContext(context.Background())
}

func (i *projectDefaultConfigSignInPhoneNumberPtrType) ToProjectDefaultConfigSignInPhoneNumberPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInPhoneNumberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultConfigSignInPhoneNumberPtrOutput)
}

func (i *projectDefaultConfigSignInPhoneNumberPtrType) ToOutput(ctx context.Context) pulumix.Output[*ProjectDefaultConfigSignInPhoneNumber] {
	return pulumix.Output[*ProjectDefaultConfigSignInPhoneNumber]{
		OutputState: i.ToProjectDefaultConfigSignInPhoneNumberPtrOutputWithContext(ctx).OutputState,
	}
}

type ProjectDefaultConfigSignInPhoneNumberOutput struct{ *pulumi.OutputState }

func (ProjectDefaultConfigSignInPhoneNumberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDefaultConfigSignInPhoneNumber)(nil)).Elem()
}

func (o ProjectDefaultConfigSignInPhoneNumberOutput) ToProjectDefaultConfigSignInPhoneNumberOutput() ProjectDefaultConfigSignInPhoneNumberOutput {
	return o
}

func (o ProjectDefaultConfigSignInPhoneNumberOutput) ToProjectDefaultConfigSignInPhoneNumberOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInPhoneNumberOutput {
	return o
}

func (o ProjectDefaultConfigSignInPhoneNumberOutput) ToProjectDefaultConfigSignInPhoneNumberPtrOutput() ProjectDefaultConfigSignInPhoneNumberPtrOutput {
	return o.ToProjectDefaultConfigSignInPhoneNumberPtrOutputWithContext(context.Background())
}

func (o ProjectDefaultConfigSignInPhoneNumberOutput) ToProjectDefaultConfigSignInPhoneNumberPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInPhoneNumberPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectDefaultConfigSignInPhoneNumber) *ProjectDefaultConfigSignInPhoneNumber {
		return &v
	}).(ProjectDefaultConfigSignInPhoneNumberPtrOutput)
}

func (o ProjectDefaultConfigSignInPhoneNumberOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectDefaultConfigSignInPhoneNumber] {
	return pulumix.Output[ProjectDefaultConfigSignInPhoneNumber]{
		OutputState: o.OutputState,
	}
}

// Whether phone number auth is enabled for the project or not.
func (o ProjectDefaultConfigSignInPhoneNumberOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignInPhoneNumber) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A map of <test phone number, fake code> that can be used for phone auth testing.
func (o ProjectDefaultConfigSignInPhoneNumberOutput) TestPhoneNumbers() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectDefaultConfigSignInPhoneNumber) map[string]string { return v.TestPhoneNumbers }).(pulumi.StringMapOutput)
}

type ProjectDefaultConfigSignInPhoneNumberPtrOutput struct{ *pulumi.OutputState }

func (ProjectDefaultConfigSignInPhoneNumberPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDefaultConfigSignInPhoneNumber)(nil)).Elem()
}

func (o ProjectDefaultConfigSignInPhoneNumberPtrOutput) ToProjectDefaultConfigSignInPhoneNumberPtrOutput() ProjectDefaultConfigSignInPhoneNumberPtrOutput {
	return o
}

func (o ProjectDefaultConfigSignInPhoneNumberPtrOutput) ToProjectDefaultConfigSignInPhoneNumberPtrOutputWithContext(ctx context.Context) ProjectDefaultConfigSignInPhoneNumberPtrOutput {
	return o
}

func (o ProjectDefaultConfigSignInPhoneNumberPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ProjectDefaultConfigSignInPhoneNumber] {
	return pulumix.Output[*ProjectDefaultConfigSignInPhoneNumber]{
		OutputState: o.OutputState,
	}
}

func (o ProjectDefaultConfigSignInPhoneNumberPtrOutput) Elem() ProjectDefaultConfigSignInPhoneNumberOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignInPhoneNumber) ProjectDefaultConfigSignInPhoneNumber {
		if v != nil {
			return *v
		}
		var ret ProjectDefaultConfigSignInPhoneNumber
		return ret
	}).(ProjectDefaultConfigSignInPhoneNumberOutput)
}

// Whether phone number auth is enabled for the project or not.
func (o ProjectDefaultConfigSignInPhoneNumberPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignInPhoneNumber) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A map of <test phone number, fake code> that can be used for phone auth testing.
func (o ProjectDefaultConfigSignInPhoneNumberPtrOutput) TestPhoneNumbers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectDefaultConfigSignInPhoneNumber) map[string]string {
		if v == nil {
			return nil
		}
		return v.TestPhoneNumbers
	}).(pulumi.StringMapOutput)
}

type TenantInboundSamlConfigIdpConfig struct {
	// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
	// Structure is documented below.
	IdpCertificates []TenantInboundSamlConfigIdpConfigIdpCertificate `pulumi:"idpCertificates"`
	// Unique identifier for all SAML entities
	IdpEntityId string `pulumi:"idpEntityId"`
	// Indicates if outbounding SAMLRequest should be signed.
	SignRequest *bool `pulumi:"signRequest"`
	// URL to send Authentication request to.
	SsoUrl string `pulumi:"ssoUrl"`
}

// TenantInboundSamlConfigIdpConfigInput is an input type that accepts TenantInboundSamlConfigIdpConfigArgs and TenantInboundSamlConfigIdpConfigOutput values.
// You can construct a concrete instance of `TenantInboundSamlConfigIdpConfigInput` via:
//
//	TenantInboundSamlConfigIdpConfigArgs{...}
type TenantInboundSamlConfigIdpConfigInput interface {
	pulumi.Input

	ToTenantInboundSamlConfigIdpConfigOutput() TenantInboundSamlConfigIdpConfigOutput
	ToTenantInboundSamlConfigIdpConfigOutputWithContext(context.Context) TenantInboundSamlConfigIdpConfigOutput
}

type TenantInboundSamlConfigIdpConfigArgs struct {
	// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
	// Structure is documented below.
	IdpCertificates TenantInboundSamlConfigIdpConfigIdpCertificateArrayInput `pulumi:"idpCertificates"`
	// Unique identifier for all SAML entities
	IdpEntityId pulumi.StringInput `pulumi:"idpEntityId"`
	// Indicates if outbounding SAMLRequest should be signed.
	SignRequest pulumi.BoolPtrInput `pulumi:"signRequest"`
	// URL to send Authentication request to.
	SsoUrl pulumi.StringInput `pulumi:"ssoUrl"`
}

func (TenantInboundSamlConfigIdpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantInboundSamlConfigIdpConfig)(nil)).Elem()
}

func (i TenantInboundSamlConfigIdpConfigArgs) ToTenantInboundSamlConfigIdpConfigOutput() TenantInboundSamlConfigIdpConfigOutput {
	return i.ToTenantInboundSamlConfigIdpConfigOutputWithContext(context.Background())
}

func (i TenantInboundSamlConfigIdpConfigArgs) ToTenantInboundSamlConfigIdpConfigOutputWithContext(ctx context.Context) TenantInboundSamlConfigIdpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantInboundSamlConfigIdpConfigOutput)
}

func (i TenantInboundSamlConfigIdpConfigArgs) ToOutput(ctx context.Context) pulumix.Output[TenantInboundSamlConfigIdpConfig] {
	return pulumix.Output[TenantInboundSamlConfigIdpConfig]{
		OutputState: i.ToTenantInboundSamlConfigIdpConfigOutputWithContext(ctx).OutputState,
	}
}

func (i TenantInboundSamlConfigIdpConfigArgs) ToTenantInboundSamlConfigIdpConfigPtrOutput() TenantInboundSamlConfigIdpConfigPtrOutput {
	return i.ToTenantInboundSamlConfigIdpConfigPtrOutputWithContext(context.Background())
}

func (i TenantInboundSamlConfigIdpConfigArgs) ToTenantInboundSamlConfigIdpConfigPtrOutputWithContext(ctx context.Context) TenantInboundSamlConfigIdpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantInboundSamlConfigIdpConfigOutput).ToTenantInboundSamlConfigIdpConfigPtrOutputWithContext(ctx)
}

// TenantInboundSamlConfigIdpConfigPtrInput is an input type that accepts TenantInboundSamlConfigIdpConfigArgs, TenantInboundSamlConfigIdpConfigPtr and TenantInboundSamlConfigIdpConfigPtrOutput values.
// You can construct a concrete instance of `TenantInboundSamlConfigIdpConfigPtrInput` via:
//
//	        TenantInboundSamlConfigIdpConfigArgs{...}
//
//	or:
//
//	        nil
type TenantInboundSamlConfigIdpConfigPtrInput interface {
	pulumi.Input

	ToTenantInboundSamlConfigIdpConfigPtrOutput() TenantInboundSamlConfigIdpConfigPtrOutput
	ToTenantInboundSamlConfigIdpConfigPtrOutputWithContext(context.Context) TenantInboundSamlConfigIdpConfigPtrOutput
}

type tenantInboundSamlConfigIdpConfigPtrType TenantInboundSamlConfigIdpConfigArgs

func TenantInboundSamlConfigIdpConfigPtr(v *TenantInboundSamlConfigIdpConfigArgs) TenantInboundSamlConfigIdpConfigPtrInput {
	return (*tenantInboundSamlConfigIdpConfigPtrType)(v)
}

func (*tenantInboundSamlConfigIdpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantInboundSamlConfigIdpConfig)(nil)).Elem()
}

func (i *tenantInboundSamlConfigIdpConfigPtrType) ToTenantInboundSamlConfigIdpConfigPtrOutput() TenantInboundSamlConfigIdpConfigPtrOutput {
	return i.ToTenantInboundSamlConfigIdpConfigPtrOutputWithContext(context.Background())
}

func (i *tenantInboundSamlConfigIdpConfigPtrType) ToTenantInboundSamlConfigIdpConfigPtrOutputWithContext(ctx context.Context) TenantInboundSamlConfigIdpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantInboundSamlConfigIdpConfigPtrOutput)
}

func (i *tenantInboundSamlConfigIdpConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*TenantInboundSamlConfigIdpConfig] {
	return pulumix.Output[*TenantInboundSamlConfigIdpConfig]{
		OutputState: i.ToTenantInboundSamlConfigIdpConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type TenantInboundSamlConfigIdpConfigOutput struct{ *pulumi.OutputState }

func (TenantInboundSamlConfigIdpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantInboundSamlConfigIdpConfig)(nil)).Elem()
}

func (o TenantInboundSamlConfigIdpConfigOutput) ToTenantInboundSamlConfigIdpConfigOutput() TenantInboundSamlConfigIdpConfigOutput {
	return o
}

func (o TenantInboundSamlConfigIdpConfigOutput) ToTenantInboundSamlConfigIdpConfigOutputWithContext(ctx context.Context) TenantInboundSamlConfigIdpConfigOutput {
	return o
}

func (o TenantInboundSamlConfigIdpConfigOutput) ToTenantInboundSamlConfigIdpConfigPtrOutput() TenantInboundSamlConfigIdpConfigPtrOutput {
	return o.ToTenantInboundSamlConfigIdpConfigPtrOutputWithContext(context.Background())
}

func (o TenantInboundSamlConfigIdpConfigOutput) ToTenantInboundSamlConfigIdpConfigPtrOutputWithContext(ctx context.Context) TenantInboundSamlConfigIdpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TenantInboundSamlConfigIdpConfig) *TenantInboundSamlConfigIdpConfig {
		return &v
	}).(TenantInboundSamlConfigIdpConfigPtrOutput)
}

func (o TenantInboundSamlConfigIdpConfigOutput) ToOutput(ctx context.Context) pulumix.Output[TenantInboundSamlConfigIdpConfig] {
	return pulumix.Output[TenantInboundSamlConfigIdpConfig]{
		OutputState: o.OutputState,
	}
}

// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
// Structure is documented below.
func (o TenantInboundSamlConfigIdpConfigOutput) IdpCertificates() TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput {
	return o.ApplyT(func(v TenantInboundSamlConfigIdpConfig) []TenantInboundSamlConfigIdpConfigIdpCertificate {
		return v.IdpCertificates
	}).(TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput)
}

// Unique identifier for all SAML entities
func (o TenantInboundSamlConfigIdpConfigOutput) IdpEntityId() pulumi.StringOutput {
	return o.ApplyT(func(v TenantInboundSamlConfigIdpConfig) string { return v.IdpEntityId }).(pulumi.StringOutput)
}

// Indicates if outbounding SAMLRequest should be signed.
func (o TenantInboundSamlConfigIdpConfigOutput) SignRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TenantInboundSamlConfigIdpConfig) *bool { return v.SignRequest }).(pulumi.BoolPtrOutput)
}

// URL to send Authentication request to.
func (o TenantInboundSamlConfigIdpConfigOutput) SsoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v TenantInboundSamlConfigIdpConfig) string { return v.SsoUrl }).(pulumi.StringOutput)
}

type TenantInboundSamlConfigIdpConfigPtrOutput struct{ *pulumi.OutputState }

func (TenantInboundSamlConfigIdpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantInboundSamlConfigIdpConfig)(nil)).Elem()
}

func (o TenantInboundSamlConfigIdpConfigPtrOutput) ToTenantInboundSamlConfigIdpConfigPtrOutput() TenantInboundSamlConfigIdpConfigPtrOutput {
	return o
}

func (o TenantInboundSamlConfigIdpConfigPtrOutput) ToTenantInboundSamlConfigIdpConfigPtrOutputWithContext(ctx context.Context) TenantInboundSamlConfigIdpConfigPtrOutput {
	return o
}

func (o TenantInboundSamlConfigIdpConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TenantInboundSamlConfigIdpConfig] {
	return pulumix.Output[*TenantInboundSamlConfigIdpConfig]{
		OutputState: o.OutputState,
	}
}

func (o TenantInboundSamlConfigIdpConfigPtrOutput) Elem() TenantInboundSamlConfigIdpConfigOutput {
	return o.ApplyT(func(v *TenantInboundSamlConfigIdpConfig) TenantInboundSamlConfigIdpConfig {
		if v != nil {
			return *v
		}
		var ret TenantInboundSamlConfigIdpConfig
		return ret
	}).(TenantInboundSamlConfigIdpConfigOutput)
}

// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
// Structure is documented below.
func (o TenantInboundSamlConfigIdpConfigPtrOutput) IdpCertificates() TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput {
	return o.ApplyT(func(v *TenantInboundSamlConfigIdpConfig) []TenantInboundSamlConfigIdpConfigIdpCertificate {
		if v == nil {
			return nil
		}
		return v.IdpCertificates
	}).(TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput)
}

// Unique identifier for all SAML entities
func (o TenantInboundSamlConfigIdpConfigPtrOutput) IdpEntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantInboundSamlConfigIdpConfig) *string {
		if v == nil {
			return nil
		}
		return &v.IdpEntityId
	}).(pulumi.StringPtrOutput)
}

// Indicates if outbounding SAMLRequest should be signed.
func (o TenantInboundSamlConfigIdpConfigPtrOutput) SignRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TenantInboundSamlConfigIdpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.SignRequest
	}).(pulumi.BoolPtrOutput)
}

// URL to send Authentication request to.
func (o TenantInboundSamlConfigIdpConfigPtrOutput) SsoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantInboundSamlConfigIdpConfig) *string {
		if v == nil {
			return nil
		}
		return &v.SsoUrl
	}).(pulumi.StringPtrOutput)
}

type TenantInboundSamlConfigIdpConfigIdpCertificate struct {
	// The x509 certificate
	X509Certificate *string `pulumi:"x509Certificate"`
}

// TenantInboundSamlConfigIdpConfigIdpCertificateInput is an input type that accepts TenantInboundSamlConfigIdpConfigIdpCertificateArgs and TenantInboundSamlConfigIdpConfigIdpCertificateOutput values.
// You can construct a concrete instance of `TenantInboundSamlConfigIdpConfigIdpCertificateInput` via:
//
//	TenantInboundSamlConfigIdpConfigIdpCertificateArgs{...}
type TenantInboundSamlConfigIdpConfigIdpCertificateInput interface {
	pulumi.Input

	ToTenantInboundSamlConfigIdpConfigIdpCertificateOutput() TenantInboundSamlConfigIdpConfigIdpCertificateOutput
	ToTenantInboundSamlConfigIdpConfigIdpCertificateOutputWithContext(context.Context) TenantInboundSamlConfigIdpConfigIdpCertificateOutput
}

type TenantInboundSamlConfigIdpConfigIdpCertificateArgs struct {
	// The x509 certificate
	X509Certificate pulumi.StringPtrInput `pulumi:"x509Certificate"`
}

func (TenantInboundSamlConfigIdpConfigIdpCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantInboundSamlConfigIdpConfigIdpCertificate)(nil)).Elem()
}

func (i TenantInboundSamlConfigIdpConfigIdpCertificateArgs) ToTenantInboundSamlConfigIdpConfigIdpCertificateOutput() TenantInboundSamlConfigIdpConfigIdpCertificateOutput {
	return i.ToTenantInboundSamlConfigIdpConfigIdpCertificateOutputWithContext(context.Background())
}

func (i TenantInboundSamlConfigIdpConfigIdpCertificateArgs) ToTenantInboundSamlConfigIdpConfigIdpCertificateOutputWithContext(ctx context.Context) TenantInboundSamlConfigIdpConfigIdpCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantInboundSamlConfigIdpConfigIdpCertificateOutput)
}

func (i TenantInboundSamlConfigIdpConfigIdpCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[TenantInboundSamlConfigIdpConfigIdpCertificate] {
	return pulumix.Output[TenantInboundSamlConfigIdpConfigIdpCertificate]{
		OutputState: i.ToTenantInboundSamlConfigIdpConfigIdpCertificateOutputWithContext(ctx).OutputState,
	}
}

// TenantInboundSamlConfigIdpConfigIdpCertificateArrayInput is an input type that accepts TenantInboundSamlConfigIdpConfigIdpCertificateArray and TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput values.
// You can construct a concrete instance of `TenantInboundSamlConfigIdpConfigIdpCertificateArrayInput` via:
//
//	TenantInboundSamlConfigIdpConfigIdpCertificateArray{ TenantInboundSamlConfigIdpConfigIdpCertificateArgs{...} }
type TenantInboundSamlConfigIdpConfigIdpCertificateArrayInput interface {
	pulumi.Input

	ToTenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput() TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput
	ToTenantInboundSamlConfigIdpConfigIdpCertificateArrayOutputWithContext(context.Context) TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput
}

type TenantInboundSamlConfigIdpConfigIdpCertificateArray []TenantInboundSamlConfigIdpConfigIdpCertificateInput

func (TenantInboundSamlConfigIdpConfigIdpCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TenantInboundSamlConfigIdpConfigIdpCertificate)(nil)).Elem()
}

func (i TenantInboundSamlConfigIdpConfigIdpCertificateArray) ToTenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput() TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput {
	return i.ToTenantInboundSamlConfigIdpConfigIdpCertificateArrayOutputWithContext(context.Background())
}

func (i TenantInboundSamlConfigIdpConfigIdpCertificateArray) ToTenantInboundSamlConfigIdpConfigIdpCertificateArrayOutputWithContext(ctx context.Context) TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput)
}

func (i TenantInboundSamlConfigIdpConfigIdpCertificateArray) ToOutput(ctx context.Context) pulumix.Output[[]TenantInboundSamlConfigIdpConfigIdpCertificate] {
	return pulumix.Output[[]TenantInboundSamlConfigIdpConfigIdpCertificate]{
		OutputState: i.ToTenantInboundSamlConfigIdpConfigIdpCertificateArrayOutputWithContext(ctx).OutputState,
	}
}

type TenantInboundSamlConfigIdpConfigIdpCertificateOutput struct{ *pulumi.OutputState }

func (TenantInboundSamlConfigIdpConfigIdpCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantInboundSamlConfigIdpConfigIdpCertificate)(nil)).Elem()
}

func (o TenantInboundSamlConfigIdpConfigIdpCertificateOutput) ToTenantInboundSamlConfigIdpConfigIdpCertificateOutput() TenantInboundSamlConfigIdpConfigIdpCertificateOutput {
	return o
}

func (o TenantInboundSamlConfigIdpConfigIdpCertificateOutput) ToTenantInboundSamlConfigIdpConfigIdpCertificateOutputWithContext(ctx context.Context) TenantInboundSamlConfigIdpConfigIdpCertificateOutput {
	return o
}

func (o TenantInboundSamlConfigIdpConfigIdpCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[TenantInboundSamlConfigIdpConfigIdpCertificate] {
	return pulumix.Output[TenantInboundSamlConfigIdpConfigIdpCertificate]{
		OutputState: o.OutputState,
	}
}

// The x509 certificate
func (o TenantInboundSamlConfigIdpConfigIdpCertificateOutput) X509Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantInboundSamlConfigIdpConfigIdpCertificate) *string { return v.X509Certificate }).(pulumi.StringPtrOutput)
}

type TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput struct{ *pulumi.OutputState }

func (TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TenantInboundSamlConfigIdpConfigIdpCertificate)(nil)).Elem()
}

func (o TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput) ToTenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput() TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput {
	return o
}

func (o TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput) ToTenantInboundSamlConfigIdpConfigIdpCertificateArrayOutputWithContext(ctx context.Context) TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput {
	return o
}

func (o TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TenantInboundSamlConfigIdpConfigIdpCertificate] {
	return pulumix.Output[[]TenantInboundSamlConfigIdpConfigIdpCertificate]{
		OutputState: o.OutputState,
	}
}

func (o TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput) Index(i pulumi.IntInput) TenantInboundSamlConfigIdpConfigIdpCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TenantInboundSamlConfigIdpConfigIdpCertificate {
		return vs[0].([]TenantInboundSamlConfigIdpConfigIdpCertificate)[vs[1].(int)]
	}).(TenantInboundSamlConfigIdpConfigIdpCertificateOutput)
}

type TenantInboundSamlConfigSpConfig struct {
	// Callback URI where responses from IDP are handled. Must start with `https://`.
	CallbackUri string `pulumi:"callbackUri"`
	// (Output)
	// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
	// Structure is documented below.
	//
	// <a name="nestedSpCertificates"></a>The `spCertificates` block contains:
	SpCertificates []TenantInboundSamlConfigSpConfigSpCertificate `pulumi:"spCertificates"`
	// Unique identifier for all SAML entities.
	SpEntityId string `pulumi:"spEntityId"`
}

// TenantInboundSamlConfigSpConfigInput is an input type that accepts TenantInboundSamlConfigSpConfigArgs and TenantInboundSamlConfigSpConfigOutput values.
// You can construct a concrete instance of `TenantInboundSamlConfigSpConfigInput` via:
//
//	TenantInboundSamlConfigSpConfigArgs{...}
type TenantInboundSamlConfigSpConfigInput interface {
	pulumi.Input

	ToTenantInboundSamlConfigSpConfigOutput() TenantInboundSamlConfigSpConfigOutput
	ToTenantInboundSamlConfigSpConfigOutputWithContext(context.Context) TenantInboundSamlConfigSpConfigOutput
}

type TenantInboundSamlConfigSpConfigArgs struct {
	// Callback URI where responses from IDP are handled. Must start with `https://`.
	CallbackUri pulumi.StringInput `pulumi:"callbackUri"`
	// (Output)
	// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
	// Structure is documented below.
	//
	// <a name="nestedSpCertificates"></a>The `spCertificates` block contains:
	SpCertificates TenantInboundSamlConfigSpConfigSpCertificateArrayInput `pulumi:"spCertificates"`
	// Unique identifier for all SAML entities.
	SpEntityId pulumi.StringInput `pulumi:"spEntityId"`
}

func (TenantInboundSamlConfigSpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantInboundSamlConfigSpConfig)(nil)).Elem()
}

func (i TenantInboundSamlConfigSpConfigArgs) ToTenantInboundSamlConfigSpConfigOutput() TenantInboundSamlConfigSpConfigOutput {
	return i.ToTenantInboundSamlConfigSpConfigOutputWithContext(context.Background())
}

func (i TenantInboundSamlConfigSpConfigArgs) ToTenantInboundSamlConfigSpConfigOutputWithContext(ctx context.Context) TenantInboundSamlConfigSpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantInboundSamlConfigSpConfigOutput)
}

func (i TenantInboundSamlConfigSpConfigArgs) ToOutput(ctx context.Context) pulumix.Output[TenantInboundSamlConfigSpConfig] {
	return pulumix.Output[TenantInboundSamlConfigSpConfig]{
		OutputState: i.ToTenantInboundSamlConfigSpConfigOutputWithContext(ctx).OutputState,
	}
}

func (i TenantInboundSamlConfigSpConfigArgs) ToTenantInboundSamlConfigSpConfigPtrOutput() TenantInboundSamlConfigSpConfigPtrOutput {
	return i.ToTenantInboundSamlConfigSpConfigPtrOutputWithContext(context.Background())
}

func (i TenantInboundSamlConfigSpConfigArgs) ToTenantInboundSamlConfigSpConfigPtrOutputWithContext(ctx context.Context) TenantInboundSamlConfigSpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantInboundSamlConfigSpConfigOutput).ToTenantInboundSamlConfigSpConfigPtrOutputWithContext(ctx)
}

// TenantInboundSamlConfigSpConfigPtrInput is an input type that accepts TenantInboundSamlConfigSpConfigArgs, TenantInboundSamlConfigSpConfigPtr and TenantInboundSamlConfigSpConfigPtrOutput values.
// You can construct a concrete instance of `TenantInboundSamlConfigSpConfigPtrInput` via:
//
//	        TenantInboundSamlConfigSpConfigArgs{...}
//
//	or:
//
//	        nil
type TenantInboundSamlConfigSpConfigPtrInput interface {
	pulumi.Input

	ToTenantInboundSamlConfigSpConfigPtrOutput() TenantInboundSamlConfigSpConfigPtrOutput
	ToTenantInboundSamlConfigSpConfigPtrOutputWithContext(context.Context) TenantInboundSamlConfigSpConfigPtrOutput
}

type tenantInboundSamlConfigSpConfigPtrType TenantInboundSamlConfigSpConfigArgs

func TenantInboundSamlConfigSpConfigPtr(v *TenantInboundSamlConfigSpConfigArgs) TenantInboundSamlConfigSpConfigPtrInput {
	return (*tenantInboundSamlConfigSpConfigPtrType)(v)
}

func (*tenantInboundSamlConfigSpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantInboundSamlConfigSpConfig)(nil)).Elem()
}

func (i *tenantInboundSamlConfigSpConfigPtrType) ToTenantInboundSamlConfigSpConfigPtrOutput() TenantInboundSamlConfigSpConfigPtrOutput {
	return i.ToTenantInboundSamlConfigSpConfigPtrOutputWithContext(context.Background())
}

func (i *tenantInboundSamlConfigSpConfigPtrType) ToTenantInboundSamlConfigSpConfigPtrOutputWithContext(ctx context.Context) TenantInboundSamlConfigSpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantInboundSamlConfigSpConfigPtrOutput)
}

func (i *tenantInboundSamlConfigSpConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*TenantInboundSamlConfigSpConfig] {
	return pulumix.Output[*TenantInboundSamlConfigSpConfig]{
		OutputState: i.ToTenantInboundSamlConfigSpConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type TenantInboundSamlConfigSpConfigOutput struct{ *pulumi.OutputState }

func (TenantInboundSamlConfigSpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantInboundSamlConfigSpConfig)(nil)).Elem()
}

func (o TenantInboundSamlConfigSpConfigOutput) ToTenantInboundSamlConfigSpConfigOutput() TenantInboundSamlConfigSpConfigOutput {
	return o
}

func (o TenantInboundSamlConfigSpConfigOutput) ToTenantInboundSamlConfigSpConfigOutputWithContext(ctx context.Context) TenantInboundSamlConfigSpConfigOutput {
	return o
}

func (o TenantInboundSamlConfigSpConfigOutput) ToTenantInboundSamlConfigSpConfigPtrOutput() TenantInboundSamlConfigSpConfigPtrOutput {
	return o.ToTenantInboundSamlConfigSpConfigPtrOutputWithContext(context.Background())
}

func (o TenantInboundSamlConfigSpConfigOutput) ToTenantInboundSamlConfigSpConfigPtrOutputWithContext(ctx context.Context) TenantInboundSamlConfigSpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TenantInboundSamlConfigSpConfig) *TenantInboundSamlConfigSpConfig {
		return &v
	}).(TenantInboundSamlConfigSpConfigPtrOutput)
}

func (o TenantInboundSamlConfigSpConfigOutput) ToOutput(ctx context.Context) pulumix.Output[TenantInboundSamlConfigSpConfig] {
	return pulumix.Output[TenantInboundSamlConfigSpConfig]{
		OutputState: o.OutputState,
	}
}

// Callback URI where responses from IDP are handled. Must start with `https://`.
func (o TenantInboundSamlConfigSpConfigOutput) CallbackUri() pulumi.StringOutput {
	return o.ApplyT(func(v TenantInboundSamlConfigSpConfig) string { return v.CallbackUri }).(pulumi.StringOutput)
}

// (Output)
// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
// Structure is documented below.
//
// <a name="nestedSpCertificates"></a>The `spCertificates` block contains:
func (o TenantInboundSamlConfigSpConfigOutput) SpCertificates() TenantInboundSamlConfigSpConfigSpCertificateArrayOutput {
	return o.ApplyT(func(v TenantInboundSamlConfigSpConfig) []TenantInboundSamlConfigSpConfigSpCertificate {
		return v.SpCertificates
	}).(TenantInboundSamlConfigSpConfigSpCertificateArrayOutput)
}

// Unique identifier for all SAML entities.
func (o TenantInboundSamlConfigSpConfigOutput) SpEntityId() pulumi.StringOutput {
	return o.ApplyT(func(v TenantInboundSamlConfigSpConfig) string { return v.SpEntityId }).(pulumi.StringOutput)
}

type TenantInboundSamlConfigSpConfigPtrOutput struct{ *pulumi.OutputState }

func (TenantInboundSamlConfigSpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantInboundSamlConfigSpConfig)(nil)).Elem()
}

func (o TenantInboundSamlConfigSpConfigPtrOutput) ToTenantInboundSamlConfigSpConfigPtrOutput() TenantInboundSamlConfigSpConfigPtrOutput {
	return o
}

func (o TenantInboundSamlConfigSpConfigPtrOutput) ToTenantInboundSamlConfigSpConfigPtrOutputWithContext(ctx context.Context) TenantInboundSamlConfigSpConfigPtrOutput {
	return o
}

func (o TenantInboundSamlConfigSpConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TenantInboundSamlConfigSpConfig] {
	return pulumix.Output[*TenantInboundSamlConfigSpConfig]{
		OutputState: o.OutputState,
	}
}

func (o TenantInboundSamlConfigSpConfigPtrOutput) Elem() TenantInboundSamlConfigSpConfigOutput {
	return o.ApplyT(func(v *TenantInboundSamlConfigSpConfig) TenantInboundSamlConfigSpConfig {
		if v != nil {
			return *v
		}
		var ret TenantInboundSamlConfigSpConfig
		return ret
	}).(TenantInboundSamlConfigSpConfigOutput)
}

// Callback URI where responses from IDP are handled. Must start with `https://`.
func (o TenantInboundSamlConfigSpConfigPtrOutput) CallbackUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantInboundSamlConfigSpConfig) *string {
		if v == nil {
			return nil
		}
		return &v.CallbackUri
	}).(pulumi.StringPtrOutput)
}

// (Output)
// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
// Structure is documented below.
//
// <a name="nestedSpCertificates"></a>The `spCertificates` block contains:
func (o TenantInboundSamlConfigSpConfigPtrOutput) SpCertificates() TenantInboundSamlConfigSpConfigSpCertificateArrayOutput {
	return o.ApplyT(func(v *TenantInboundSamlConfigSpConfig) []TenantInboundSamlConfigSpConfigSpCertificate {
		if v == nil {
			return nil
		}
		return v.SpCertificates
	}).(TenantInboundSamlConfigSpConfigSpCertificateArrayOutput)
}

// Unique identifier for all SAML entities.
func (o TenantInboundSamlConfigSpConfigPtrOutput) SpEntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantInboundSamlConfigSpConfig) *string {
		if v == nil {
			return nil
		}
		return &v.SpEntityId
	}).(pulumi.StringPtrOutput)
}

type TenantInboundSamlConfigSpConfigSpCertificate struct {
	// The x509 certificate
	//
	// (Output)
	// The x509 certificate
	//
	// ***
	X509Certificate *string `pulumi:"x509Certificate"`
}

// TenantInboundSamlConfigSpConfigSpCertificateInput is an input type that accepts TenantInboundSamlConfigSpConfigSpCertificateArgs and TenantInboundSamlConfigSpConfigSpCertificateOutput values.
// You can construct a concrete instance of `TenantInboundSamlConfigSpConfigSpCertificateInput` via:
//
//	TenantInboundSamlConfigSpConfigSpCertificateArgs{...}
type TenantInboundSamlConfigSpConfigSpCertificateInput interface {
	pulumi.Input

	ToTenantInboundSamlConfigSpConfigSpCertificateOutput() TenantInboundSamlConfigSpConfigSpCertificateOutput
	ToTenantInboundSamlConfigSpConfigSpCertificateOutputWithContext(context.Context) TenantInboundSamlConfigSpConfigSpCertificateOutput
}

type TenantInboundSamlConfigSpConfigSpCertificateArgs struct {
	// The x509 certificate
	//
	// (Output)
	// The x509 certificate
	//
	// ***
	X509Certificate pulumi.StringPtrInput `pulumi:"x509Certificate"`
}

func (TenantInboundSamlConfigSpConfigSpCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantInboundSamlConfigSpConfigSpCertificate)(nil)).Elem()
}

func (i TenantInboundSamlConfigSpConfigSpCertificateArgs) ToTenantInboundSamlConfigSpConfigSpCertificateOutput() TenantInboundSamlConfigSpConfigSpCertificateOutput {
	return i.ToTenantInboundSamlConfigSpConfigSpCertificateOutputWithContext(context.Background())
}

func (i TenantInboundSamlConfigSpConfigSpCertificateArgs) ToTenantInboundSamlConfigSpConfigSpCertificateOutputWithContext(ctx context.Context) TenantInboundSamlConfigSpConfigSpCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantInboundSamlConfigSpConfigSpCertificateOutput)
}

func (i TenantInboundSamlConfigSpConfigSpCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[TenantInboundSamlConfigSpConfigSpCertificate] {
	return pulumix.Output[TenantInboundSamlConfigSpConfigSpCertificate]{
		OutputState: i.ToTenantInboundSamlConfigSpConfigSpCertificateOutputWithContext(ctx).OutputState,
	}
}

// TenantInboundSamlConfigSpConfigSpCertificateArrayInput is an input type that accepts TenantInboundSamlConfigSpConfigSpCertificateArray and TenantInboundSamlConfigSpConfigSpCertificateArrayOutput values.
// You can construct a concrete instance of `TenantInboundSamlConfigSpConfigSpCertificateArrayInput` via:
//
//	TenantInboundSamlConfigSpConfigSpCertificateArray{ TenantInboundSamlConfigSpConfigSpCertificateArgs{...} }
type TenantInboundSamlConfigSpConfigSpCertificateArrayInput interface {
	pulumi.Input

	ToTenantInboundSamlConfigSpConfigSpCertificateArrayOutput() TenantInboundSamlConfigSpConfigSpCertificateArrayOutput
	ToTenantInboundSamlConfigSpConfigSpCertificateArrayOutputWithContext(context.Context) TenantInboundSamlConfigSpConfigSpCertificateArrayOutput
}

type TenantInboundSamlConfigSpConfigSpCertificateArray []TenantInboundSamlConfigSpConfigSpCertificateInput

func (TenantInboundSamlConfigSpConfigSpCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TenantInboundSamlConfigSpConfigSpCertificate)(nil)).Elem()
}

func (i TenantInboundSamlConfigSpConfigSpCertificateArray) ToTenantInboundSamlConfigSpConfigSpCertificateArrayOutput() TenantInboundSamlConfigSpConfigSpCertificateArrayOutput {
	return i.ToTenantInboundSamlConfigSpConfigSpCertificateArrayOutputWithContext(context.Background())
}

func (i TenantInboundSamlConfigSpConfigSpCertificateArray) ToTenantInboundSamlConfigSpConfigSpCertificateArrayOutputWithContext(ctx context.Context) TenantInboundSamlConfigSpConfigSpCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantInboundSamlConfigSpConfigSpCertificateArrayOutput)
}

func (i TenantInboundSamlConfigSpConfigSpCertificateArray) ToOutput(ctx context.Context) pulumix.Output[[]TenantInboundSamlConfigSpConfigSpCertificate] {
	return pulumix.Output[[]TenantInboundSamlConfigSpConfigSpCertificate]{
		OutputState: i.ToTenantInboundSamlConfigSpConfigSpCertificateArrayOutputWithContext(ctx).OutputState,
	}
}

type TenantInboundSamlConfigSpConfigSpCertificateOutput struct{ *pulumi.OutputState }

func (TenantInboundSamlConfigSpConfigSpCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantInboundSamlConfigSpConfigSpCertificate)(nil)).Elem()
}

func (o TenantInboundSamlConfigSpConfigSpCertificateOutput) ToTenantInboundSamlConfigSpConfigSpCertificateOutput() TenantInboundSamlConfigSpConfigSpCertificateOutput {
	return o
}

func (o TenantInboundSamlConfigSpConfigSpCertificateOutput) ToTenantInboundSamlConfigSpConfigSpCertificateOutputWithContext(ctx context.Context) TenantInboundSamlConfigSpConfigSpCertificateOutput {
	return o
}

func (o TenantInboundSamlConfigSpConfigSpCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[TenantInboundSamlConfigSpConfigSpCertificate] {
	return pulumix.Output[TenantInboundSamlConfigSpConfigSpCertificate]{
		OutputState: o.OutputState,
	}
}

// The x509 certificate
//
// (Output)
// The x509 certificate
//
// ***
func (o TenantInboundSamlConfigSpConfigSpCertificateOutput) X509Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantInboundSamlConfigSpConfigSpCertificate) *string { return v.X509Certificate }).(pulumi.StringPtrOutput)
}

type TenantInboundSamlConfigSpConfigSpCertificateArrayOutput struct{ *pulumi.OutputState }

func (TenantInboundSamlConfigSpConfigSpCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TenantInboundSamlConfigSpConfigSpCertificate)(nil)).Elem()
}

func (o TenantInboundSamlConfigSpConfigSpCertificateArrayOutput) ToTenantInboundSamlConfigSpConfigSpCertificateArrayOutput() TenantInboundSamlConfigSpConfigSpCertificateArrayOutput {
	return o
}

func (o TenantInboundSamlConfigSpConfigSpCertificateArrayOutput) ToTenantInboundSamlConfigSpConfigSpCertificateArrayOutputWithContext(ctx context.Context) TenantInboundSamlConfigSpConfigSpCertificateArrayOutput {
	return o
}

func (o TenantInboundSamlConfigSpConfigSpCertificateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TenantInboundSamlConfigSpConfigSpCertificate] {
	return pulumix.Output[[]TenantInboundSamlConfigSpConfigSpCertificate]{
		OutputState: o.OutputState,
	}
}

func (o TenantInboundSamlConfigSpConfigSpCertificateArrayOutput) Index(i pulumi.IntInput) TenantInboundSamlConfigSpConfigSpCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TenantInboundSamlConfigSpConfigSpCertificate {
		return vs[0].([]TenantInboundSamlConfigSpConfigSpCertificate)[vs[1].(int)]
	}).(TenantInboundSamlConfigSpConfigSpCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigBlockingFunctionsInput)(nil)).Elem(), ConfigBlockingFunctionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigBlockingFunctionsPtrInput)(nil)).Elem(), ConfigBlockingFunctionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigBlockingFunctionsForwardInboundCredentialsInput)(nil)).Elem(), ConfigBlockingFunctionsForwardInboundCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigBlockingFunctionsForwardInboundCredentialsPtrInput)(nil)).Elem(), ConfigBlockingFunctionsForwardInboundCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigBlockingFunctionsTriggerInput)(nil)).Elem(), ConfigBlockingFunctionsTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigBlockingFunctionsTriggerArrayInput)(nil)).Elem(), ConfigBlockingFunctionsTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigQuotaInput)(nil)).Elem(), ConfigQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigQuotaPtrInput)(nil)).Elem(), ConfigQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigQuotaSignUpQuotaConfigInput)(nil)).Elem(), ConfigQuotaSignUpQuotaConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigQuotaSignUpQuotaConfigPtrInput)(nil)).Elem(), ConfigQuotaSignUpQuotaConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigSignInInput)(nil)).Elem(), ConfigSignInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigSignInPtrInput)(nil)).Elem(), ConfigSignInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigSignInAnonymousInput)(nil)).Elem(), ConfigSignInAnonymousArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigSignInAnonymousPtrInput)(nil)).Elem(), ConfigSignInAnonymousArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigSignInEmailInput)(nil)).Elem(), ConfigSignInEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigSignInEmailPtrInput)(nil)).Elem(), ConfigSignInEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigSignInHashConfigInput)(nil)).Elem(), ConfigSignInHashConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigSignInHashConfigArrayInput)(nil)).Elem(), ConfigSignInHashConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigSignInPhoneNumberInput)(nil)).Elem(), ConfigSignInPhoneNumberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigSignInPhoneNumberPtrInput)(nil)).Elem(), ConfigSignInPhoneNumberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InboundSamlConfigIdpConfigInput)(nil)).Elem(), InboundSamlConfigIdpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InboundSamlConfigIdpConfigPtrInput)(nil)).Elem(), InboundSamlConfigIdpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InboundSamlConfigIdpConfigIdpCertificateInput)(nil)).Elem(), InboundSamlConfigIdpConfigIdpCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InboundSamlConfigIdpConfigIdpCertificateArrayInput)(nil)).Elem(), InboundSamlConfigIdpConfigIdpCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InboundSamlConfigSpConfigInput)(nil)).Elem(), InboundSamlConfigSpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InboundSamlConfigSpConfigPtrInput)(nil)).Elem(), InboundSamlConfigSpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InboundSamlConfigSpConfigSpCertificateInput)(nil)).Elem(), InboundSamlConfigSpConfigSpCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InboundSamlConfigSpConfigSpCertificateArrayInput)(nil)).Elem(), InboundSamlConfigSpConfigSpCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultConfigSignInInput)(nil)).Elem(), ProjectDefaultConfigSignInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultConfigSignInPtrInput)(nil)).Elem(), ProjectDefaultConfigSignInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultConfigSignInAnonymousInput)(nil)).Elem(), ProjectDefaultConfigSignInAnonymousArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultConfigSignInAnonymousPtrInput)(nil)).Elem(), ProjectDefaultConfigSignInAnonymousArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultConfigSignInEmailInput)(nil)).Elem(), ProjectDefaultConfigSignInEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultConfigSignInEmailPtrInput)(nil)).Elem(), ProjectDefaultConfigSignInEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultConfigSignInHashConfigInput)(nil)).Elem(), ProjectDefaultConfigSignInHashConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultConfigSignInHashConfigArrayInput)(nil)).Elem(), ProjectDefaultConfigSignInHashConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultConfigSignInPhoneNumberInput)(nil)).Elem(), ProjectDefaultConfigSignInPhoneNumberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultConfigSignInPhoneNumberPtrInput)(nil)).Elem(), ProjectDefaultConfigSignInPhoneNumberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInboundSamlConfigIdpConfigInput)(nil)).Elem(), TenantInboundSamlConfigIdpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInboundSamlConfigIdpConfigPtrInput)(nil)).Elem(), TenantInboundSamlConfigIdpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInboundSamlConfigIdpConfigIdpCertificateInput)(nil)).Elem(), TenantInboundSamlConfigIdpConfigIdpCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInboundSamlConfigIdpConfigIdpCertificateArrayInput)(nil)).Elem(), TenantInboundSamlConfigIdpConfigIdpCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInboundSamlConfigSpConfigInput)(nil)).Elem(), TenantInboundSamlConfigSpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInboundSamlConfigSpConfigPtrInput)(nil)).Elem(), TenantInboundSamlConfigSpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInboundSamlConfigSpConfigSpCertificateInput)(nil)).Elem(), TenantInboundSamlConfigSpConfigSpCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInboundSamlConfigSpConfigSpCertificateArrayInput)(nil)).Elem(), TenantInboundSamlConfigSpConfigSpCertificateArray{})
	pulumi.RegisterOutputType(ConfigBlockingFunctionsOutput{})
	pulumi.RegisterOutputType(ConfigBlockingFunctionsPtrOutput{})
	pulumi.RegisterOutputType(ConfigBlockingFunctionsForwardInboundCredentialsOutput{})
	pulumi.RegisterOutputType(ConfigBlockingFunctionsForwardInboundCredentialsPtrOutput{})
	pulumi.RegisterOutputType(ConfigBlockingFunctionsTriggerOutput{})
	pulumi.RegisterOutputType(ConfigBlockingFunctionsTriggerArrayOutput{})
	pulumi.RegisterOutputType(ConfigQuotaOutput{})
	pulumi.RegisterOutputType(ConfigQuotaPtrOutput{})
	pulumi.RegisterOutputType(ConfigQuotaSignUpQuotaConfigOutput{})
	pulumi.RegisterOutputType(ConfigQuotaSignUpQuotaConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigSignInOutput{})
	pulumi.RegisterOutputType(ConfigSignInPtrOutput{})
	pulumi.RegisterOutputType(ConfigSignInAnonymousOutput{})
	pulumi.RegisterOutputType(ConfigSignInAnonymousPtrOutput{})
	pulumi.RegisterOutputType(ConfigSignInEmailOutput{})
	pulumi.RegisterOutputType(ConfigSignInEmailPtrOutput{})
	pulumi.RegisterOutputType(ConfigSignInHashConfigOutput{})
	pulumi.RegisterOutputType(ConfigSignInHashConfigArrayOutput{})
	pulumi.RegisterOutputType(ConfigSignInPhoneNumberOutput{})
	pulumi.RegisterOutputType(ConfigSignInPhoneNumberPtrOutput{})
	pulumi.RegisterOutputType(InboundSamlConfigIdpConfigOutput{})
	pulumi.RegisterOutputType(InboundSamlConfigIdpConfigPtrOutput{})
	pulumi.RegisterOutputType(InboundSamlConfigIdpConfigIdpCertificateOutput{})
	pulumi.RegisterOutputType(InboundSamlConfigIdpConfigIdpCertificateArrayOutput{})
	pulumi.RegisterOutputType(InboundSamlConfigSpConfigOutput{})
	pulumi.RegisterOutputType(InboundSamlConfigSpConfigPtrOutput{})
	pulumi.RegisterOutputType(InboundSamlConfigSpConfigSpCertificateOutput{})
	pulumi.RegisterOutputType(InboundSamlConfigSpConfigSpCertificateArrayOutput{})
	pulumi.RegisterOutputType(ProjectDefaultConfigSignInOutput{})
	pulumi.RegisterOutputType(ProjectDefaultConfigSignInPtrOutput{})
	pulumi.RegisterOutputType(ProjectDefaultConfigSignInAnonymousOutput{})
	pulumi.RegisterOutputType(ProjectDefaultConfigSignInAnonymousPtrOutput{})
	pulumi.RegisterOutputType(ProjectDefaultConfigSignInEmailOutput{})
	pulumi.RegisterOutputType(ProjectDefaultConfigSignInEmailPtrOutput{})
	pulumi.RegisterOutputType(ProjectDefaultConfigSignInHashConfigOutput{})
	pulumi.RegisterOutputType(ProjectDefaultConfigSignInHashConfigArrayOutput{})
	pulumi.RegisterOutputType(ProjectDefaultConfigSignInPhoneNumberOutput{})
	pulumi.RegisterOutputType(ProjectDefaultConfigSignInPhoneNumberPtrOutput{})
	pulumi.RegisterOutputType(TenantInboundSamlConfigIdpConfigOutput{})
	pulumi.RegisterOutputType(TenantInboundSamlConfigIdpConfigPtrOutput{})
	pulumi.RegisterOutputType(TenantInboundSamlConfigIdpConfigIdpCertificateOutput{})
	pulumi.RegisterOutputType(TenantInboundSamlConfigIdpConfigIdpCertificateArrayOutput{})
	pulumi.RegisterOutputType(TenantInboundSamlConfigSpConfigOutput{})
	pulumi.RegisterOutputType(TenantInboundSamlConfigSpConfigPtrOutput{})
	pulumi.RegisterOutputType(TenantInboundSamlConfigSpConfigSpCertificateOutput{})
	pulumi.RegisterOutputType(TenantInboundSamlConfigSpConfigSpCertificateArrayOutput{})
}
