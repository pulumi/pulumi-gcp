// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigtable

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A schema bundle object that can be referenced in SQL queries.
//
// To get more information about SchemaBundle, see:
//
// * [API documentation](https://cloud.google.com/bigtable/docs/reference/admin/rest/v2/projects.instances.tables.schemaBundles)
//
// ## Example Usage
//
// ### Bigtable Schema Bundle
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigtable"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			instance, err := bigtable.NewInstance(ctx, "instance", &bigtable.InstanceArgs{
//				Name: pulumi.String("bt-instance"),
//				Clusters: bigtable.InstanceClusterArray{
//					&bigtable.InstanceClusterArgs{
//						ClusterId:   pulumi.String("cluster-1"),
//						Zone:        pulumi.String("us-east1-b"),
//						NumNodes:    pulumi.Int(1),
//						StorageType: pulumi.String("HDD"),
//					},
//				},
//				DeletionProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			table, err := bigtable.NewTable(ctx, "table", &bigtable.TableArgs{
//				Name:         pulumi.String("bt-table"),
//				InstanceName: instance.Name,
//				ColumnFamilies: bigtable.TableColumnFamilyArray{
//					&bigtable.TableColumnFamilyArgs{
//						Family: pulumi.String("CF"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeFilebase64, err := std.Filebase64(ctx, &std.Filebase64Args{
//				Input: "test-fixtures/proto_schema_bundle.pb",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = bigtable.NewSchemaBundle(ctx, "schema_bundle", &bigtable.SchemaBundleArgs{
//				SchemaBundleId: pulumi.String("bt-schema-bundle"),
//				Instance:       instance.Name,
//				Table:          table.Name,
//				ProtoSchema: &bigtable.SchemaBundleProtoSchemaArgs{
//					ProtoDescriptors: pulumi.String(invokeFilebase64.Result),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SchemaBundle can be imported using any of these accepted formats:
//
// * `projects/{{project}}/instances/{{instance}}/tables/{{table}}/schemaBundles/{{schema_bundle_id}}`
//
// * `{{project}}/{{instance}}/{{table}}/{{schema_bundle_id}}`
//
// * `{{instance}}/{{table}}/{{schema_bundle_id}}`
//
// When using the `pulumi import` command, SchemaBundle can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:bigtable/schemaBundle:SchemaBundle default projects/{{project}}/instances/{{instance}}/tables/{{table}}/schemaBundles/{{schema_bundle_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigtable/schemaBundle:SchemaBundle default {{project}}/{{instance}}/{{table}}/{{schema_bundle_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigtable/schemaBundle:SchemaBundle default {{instance}}/{{table}}/{{schema_bundle_id}}
// ```
type SchemaBundle struct {
	pulumi.CustomResourceState

	// If true, allow backwards incompatible changes.
	IgnoreWarnings pulumi.BoolPtrOutput `pulumi:"ignoreWarnings"`
	// The name of the instance to create the schema bundle within.
	Instance pulumi.StringPtrOutput `pulumi:"instance"`
	// The unique name of the requested schema bundle. Values are of the form `projects/<project>/instances/<instance>/tables/<table>/schemaBundles/<schemaBundleId>`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// File descriptor set, generated by protoc.
	// To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
	// $ protoc --include_imports --include_source_info test.proto -o out.pb
	// Structure is documented below.
	ProtoSchema SchemaBundleProtoSchemaOutput `pulumi:"protoSchema"`
	// The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
	SchemaBundleId pulumi.StringOutput `pulumi:"schemaBundleId"`
	// The name of the table to create the schema bundle within.
	Table pulumi.StringPtrOutput `pulumi:"table"`
}

// NewSchemaBundle registers a new resource with the given unique name, arguments, and options.
func NewSchemaBundle(ctx *pulumi.Context,
	name string, args *SchemaBundleArgs, opts ...pulumi.ResourceOption) (*SchemaBundle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProtoSchema == nil {
		return nil, errors.New("invalid value for required argument 'ProtoSchema'")
	}
	if args.SchemaBundleId == nil {
		return nil, errors.New("invalid value for required argument 'SchemaBundleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SchemaBundle
	err := ctx.RegisterResource("gcp:bigtable/schemaBundle:SchemaBundle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaBundle gets an existing SchemaBundle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaBundle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaBundleState, opts ...pulumi.ResourceOption) (*SchemaBundle, error) {
	var resource SchemaBundle
	err := ctx.ReadResource("gcp:bigtable/schemaBundle:SchemaBundle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaBundle resources.
type schemaBundleState struct {
	// If true, allow backwards incompatible changes.
	IgnoreWarnings *bool `pulumi:"ignoreWarnings"`
	// The name of the instance to create the schema bundle within.
	Instance *string `pulumi:"instance"`
	// The unique name of the requested schema bundle. Values are of the form `projects/<project>/instances/<instance>/tables/<table>/schemaBundles/<schemaBundleId>`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// File descriptor set, generated by protoc.
	// To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
	// $ protoc --include_imports --include_source_info test.proto -o out.pb
	// Structure is documented below.
	ProtoSchema *SchemaBundleProtoSchema `pulumi:"protoSchema"`
	// The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
	SchemaBundleId *string `pulumi:"schemaBundleId"`
	// The name of the table to create the schema bundle within.
	Table *string `pulumi:"table"`
}

type SchemaBundleState struct {
	// If true, allow backwards incompatible changes.
	IgnoreWarnings pulumi.BoolPtrInput
	// The name of the instance to create the schema bundle within.
	Instance pulumi.StringPtrInput
	// The unique name of the requested schema bundle. Values are of the form `projects/<project>/instances/<instance>/tables/<table>/schemaBundles/<schemaBundleId>`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// File descriptor set, generated by protoc.
	// To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
	// $ protoc --include_imports --include_source_info test.proto -o out.pb
	// Structure is documented below.
	ProtoSchema SchemaBundleProtoSchemaPtrInput
	// The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
	SchemaBundleId pulumi.StringPtrInput
	// The name of the table to create the schema bundle within.
	Table pulumi.StringPtrInput
}

func (SchemaBundleState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaBundleState)(nil)).Elem()
}

type schemaBundleArgs struct {
	// If true, allow backwards incompatible changes.
	IgnoreWarnings *bool `pulumi:"ignoreWarnings"`
	// The name of the instance to create the schema bundle within.
	Instance *string `pulumi:"instance"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// File descriptor set, generated by protoc.
	// To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
	// $ protoc --include_imports --include_source_info test.proto -o out.pb
	// Structure is documented below.
	ProtoSchema SchemaBundleProtoSchema `pulumi:"protoSchema"`
	// The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
	SchemaBundleId string `pulumi:"schemaBundleId"`
	// The name of the table to create the schema bundle within.
	Table *string `pulumi:"table"`
}

// The set of arguments for constructing a SchemaBundle resource.
type SchemaBundleArgs struct {
	// If true, allow backwards incompatible changes.
	IgnoreWarnings pulumi.BoolPtrInput
	// The name of the instance to create the schema bundle within.
	Instance pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// File descriptor set, generated by protoc.
	// To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
	// $ protoc --include_imports --include_source_info test.proto -o out.pb
	// Structure is documented below.
	ProtoSchema SchemaBundleProtoSchemaInput
	// The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
	SchemaBundleId pulumi.StringInput
	// The name of the table to create the schema bundle within.
	Table pulumi.StringPtrInput
}

func (SchemaBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaBundleArgs)(nil)).Elem()
}

type SchemaBundleInput interface {
	pulumi.Input

	ToSchemaBundleOutput() SchemaBundleOutput
	ToSchemaBundleOutputWithContext(ctx context.Context) SchemaBundleOutput
}

func (*SchemaBundle) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaBundle)(nil)).Elem()
}

func (i *SchemaBundle) ToSchemaBundleOutput() SchemaBundleOutput {
	return i.ToSchemaBundleOutputWithContext(context.Background())
}

func (i *SchemaBundle) ToSchemaBundleOutputWithContext(ctx context.Context) SchemaBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaBundleOutput)
}

// SchemaBundleArrayInput is an input type that accepts SchemaBundleArray and SchemaBundleArrayOutput values.
// You can construct a concrete instance of `SchemaBundleArrayInput` via:
//
//	SchemaBundleArray{ SchemaBundleArgs{...} }
type SchemaBundleArrayInput interface {
	pulumi.Input

	ToSchemaBundleArrayOutput() SchemaBundleArrayOutput
	ToSchemaBundleArrayOutputWithContext(context.Context) SchemaBundleArrayOutput
}

type SchemaBundleArray []SchemaBundleInput

func (SchemaBundleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaBundle)(nil)).Elem()
}

func (i SchemaBundleArray) ToSchemaBundleArrayOutput() SchemaBundleArrayOutput {
	return i.ToSchemaBundleArrayOutputWithContext(context.Background())
}

func (i SchemaBundleArray) ToSchemaBundleArrayOutputWithContext(ctx context.Context) SchemaBundleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaBundleArrayOutput)
}

// SchemaBundleMapInput is an input type that accepts SchemaBundleMap and SchemaBundleMapOutput values.
// You can construct a concrete instance of `SchemaBundleMapInput` via:
//
//	SchemaBundleMap{ "key": SchemaBundleArgs{...} }
type SchemaBundleMapInput interface {
	pulumi.Input

	ToSchemaBundleMapOutput() SchemaBundleMapOutput
	ToSchemaBundleMapOutputWithContext(context.Context) SchemaBundleMapOutput
}

type SchemaBundleMap map[string]SchemaBundleInput

func (SchemaBundleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaBundle)(nil)).Elem()
}

func (i SchemaBundleMap) ToSchemaBundleMapOutput() SchemaBundleMapOutput {
	return i.ToSchemaBundleMapOutputWithContext(context.Background())
}

func (i SchemaBundleMap) ToSchemaBundleMapOutputWithContext(ctx context.Context) SchemaBundleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaBundleMapOutput)
}

type SchemaBundleOutput struct{ *pulumi.OutputState }

func (SchemaBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaBundle)(nil)).Elem()
}

func (o SchemaBundleOutput) ToSchemaBundleOutput() SchemaBundleOutput {
	return o
}

func (o SchemaBundleOutput) ToSchemaBundleOutputWithContext(ctx context.Context) SchemaBundleOutput {
	return o
}

// If true, allow backwards incompatible changes.
func (o SchemaBundleOutput) IgnoreWarnings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchemaBundle) pulumi.BoolPtrOutput { return v.IgnoreWarnings }).(pulumi.BoolPtrOutput)
}

// The name of the instance to create the schema bundle within.
func (o SchemaBundleOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaBundle) pulumi.StringPtrOutput { return v.Instance }).(pulumi.StringPtrOutput)
}

// The unique name of the requested schema bundle. Values are of the form `projects/<project>/instances/<instance>/tables/<table>/schemaBundles/<schemaBundleId>`.
func (o SchemaBundleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaBundle) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o SchemaBundleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaBundle) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// File descriptor set, generated by protoc.
// To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
// $ protoc --include_imports --include_source_info test.proto -o out.pb
// Structure is documented below.
func (o SchemaBundleOutput) ProtoSchema() SchemaBundleProtoSchemaOutput {
	return o.ApplyT(func(v *SchemaBundle) SchemaBundleProtoSchemaOutput { return v.ProtoSchema }).(SchemaBundleProtoSchemaOutput)
}

// The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
func (o SchemaBundleOutput) SchemaBundleId() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaBundle) pulumi.StringOutput { return v.SchemaBundleId }).(pulumi.StringOutput)
}

// The name of the table to create the schema bundle within.
func (o SchemaBundleOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaBundle) pulumi.StringPtrOutput { return v.Table }).(pulumi.StringPtrOutput)
}

type SchemaBundleArrayOutput struct{ *pulumi.OutputState }

func (SchemaBundleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaBundle)(nil)).Elem()
}

func (o SchemaBundleArrayOutput) ToSchemaBundleArrayOutput() SchemaBundleArrayOutput {
	return o
}

func (o SchemaBundleArrayOutput) ToSchemaBundleArrayOutputWithContext(ctx context.Context) SchemaBundleArrayOutput {
	return o
}

func (o SchemaBundleArrayOutput) Index(i pulumi.IntInput) SchemaBundleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchemaBundle {
		return vs[0].([]*SchemaBundle)[vs[1].(int)]
	}).(SchemaBundleOutput)
}

type SchemaBundleMapOutput struct{ *pulumi.OutputState }

func (SchemaBundleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaBundle)(nil)).Elem()
}

func (o SchemaBundleMapOutput) ToSchemaBundleMapOutput() SchemaBundleMapOutput {
	return o
}

func (o SchemaBundleMapOutput) ToSchemaBundleMapOutputWithContext(ctx context.Context) SchemaBundleMapOutput {
	return o
}

func (o SchemaBundleMapOutput) MapIndex(k pulumi.StringInput) SchemaBundleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchemaBundle {
		return vs[0].(map[string]*SchemaBundle)[vs[1].(string)]
	}).(SchemaBundleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaBundleInput)(nil)).Elem(), &SchemaBundle{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaBundleArrayInput)(nil)).Elem(), SchemaBundleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaBundleMapInput)(nil)).Elem(), SchemaBundleMap{})
	pulumi.RegisterOutputType(SchemaBundleOutput{})
	pulumi.RegisterOutputType(SchemaBundleArrayOutput{})
	pulumi.RegisterOutputType(SchemaBundleMapOutput{})
}
