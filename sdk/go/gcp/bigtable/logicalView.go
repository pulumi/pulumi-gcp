// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigtable

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A logical view object that can be referenced in SQL queries.
//
// To get more information about LogicalView, see:
//
// * [API documentation](https://cloud.google.com/bigtable/docs/reference/admin/rest/v2/projects.instances.logicalViews)
//
// ## Example Usage
//
// ### Bigtable Logical View
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigtable"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			instance, err := bigtable.NewInstance(ctx, "instance", &bigtable.InstanceArgs{
//				Name: pulumi.String("bt-instance"),
//				Clusters: bigtable.InstanceClusterArray{
//					&bigtable.InstanceClusterArgs{
//						ClusterId:   pulumi.String("cluster-1"),
//						Zone:        pulumi.String("us-east1-b"),
//						NumNodes:    pulumi.Int(3),
//						StorageType: pulumi.String("HDD"),
//					},
//				},
//				DeletionProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			table, err := bigtable.NewTable(ctx, "table", &bigtable.TableArgs{
//				Name:         pulumi.String("bt-table"),
//				InstanceName: instance.Name,
//				ColumnFamilies: bigtable.TableColumnFamilyArray{
//					&bigtable.TableColumnFamilyArgs{
//						Family: pulumi.String("CF"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigtable.NewLogicalView(ctx, "logical_view", &bigtable.LogicalViewArgs{
//				LogicalViewId:      pulumi.String("bt-logical-view"),
//				Instance:           instance.Name,
//				DeletionProtection: pulumi.Bool(false),
//				Query:              pulumi.String("SELECT _key, CF\nFROM ` + \"`bt-table`\" + `\n"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				table,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// LogicalView can be imported using any of these accepted formats:
//
// * `projects/{{project}}/instances/{{instance}}/logicalViews/{{logical_view_id}}`
//
// * `{{project}}/{{instance}}/{{logical_view_id}}`
//
// * `{{instance}}/{{logical_view_id}}`
//
// When using the `pulumi import` command, LogicalView can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:bigtable/logicalView:LogicalView default projects/{{project}}/instances/{{instance}}/logicalViews/{{logical_view_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigtable/logicalView:LogicalView default {{project}}/{{instance}}/{{logical_view_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigtable/logicalView:LogicalView default {{instance}}/{{logical_view_id}}
// ```
type LogicalView struct {
	pulumi.CustomResourceState

	// Set to true to make the logical view protected against deletion.
	DeletionProtection pulumi.BoolPtrOutput `pulumi:"deletionProtection"`
	// The name of the instance to create the logical view within.
	Instance pulumi.StringPtrOutput `pulumi:"instance"`
	// The unique name of the logical view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
	LogicalViewId pulumi.StringOutput `pulumi:"logicalViewId"`
	// The unique name of the requested logical view. Values are of the form `projects/<project>/instances/<instance>/logicalViews/<logicalViewId>`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The logical view's select query.
	Query pulumi.StringOutput `pulumi:"query"`
}

// NewLogicalView registers a new resource with the given unique name, arguments, and options.
func NewLogicalView(ctx *pulumi.Context,
	name string, args *LogicalViewArgs, opts ...pulumi.ResourceOption) (*LogicalView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogicalViewId == nil {
		return nil, errors.New("invalid value for required argument 'LogicalViewId'")
	}
	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogicalView
	err := ctx.RegisterResource("gcp:bigtable/logicalView:LogicalView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogicalView gets an existing LogicalView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogicalView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogicalViewState, opts ...pulumi.ResourceOption) (*LogicalView, error) {
	var resource LogicalView
	err := ctx.ReadResource("gcp:bigtable/logicalView:LogicalView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogicalView resources.
type logicalViewState struct {
	// Set to true to make the logical view protected against deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The name of the instance to create the logical view within.
	Instance *string `pulumi:"instance"`
	// The unique name of the logical view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
	LogicalViewId *string `pulumi:"logicalViewId"`
	// The unique name of the requested logical view. Values are of the form `projects/<project>/instances/<instance>/logicalViews/<logicalViewId>`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The logical view's select query.
	Query *string `pulumi:"query"`
}

type LogicalViewState struct {
	// Set to true to make the logical view protected against deletion.
	DeletionProtection pulumi.BoolPtrInput
	// The name of the instance to create the logical view within.
	Instance pulumi.StringPtrInput
	// The unique name of the logical view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
	LogicalViewId pulumi.StringPtrInput
	// The unique name of the requested logical view. Values are of the form `projects/<project>/instances/<instance>/logicalViews/<logicalViewId>`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The logical view's select query.
	Query pulumi.StringPtrInput
}

func (LogicalViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*logicalViewState)(nil)).Elem()
}

type logicalViewArgs struct {
	// Set to true to make the logical view protected against deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The name of the instance to create the logical view within.
	Instance *string `pulumi:"instance"`
	// The unique name of the logical view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
	LogicalViewId string `pulumi:"logicalViewId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The logical view's select query.
	Query string `pulumi:"query"`
}

// The set of arguments for constructing a LogicalView resource.
type LogicalViewArgs struct {
	// Set to true to make the logical view protected against deletion.
	DeletionProtection pulumi.BoolPtrInput
	// The name of the instance to create the logical view within.
	Instance pulumi.StringPtrInput
	// The unique name of the logical view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
	LogicalViewId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The logical view's select query.
	Query pulumi.StringInput
}

func (LogicalViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logicalViewArgs)(nil)).Elem()
}

type LogicalViewInput interface {
	pulumi.Input

	ToLogicalViewOutput() LogicalViewOutput
	ToLogicalViewOutputWithContext(ctx context.Context) LogicalViewOutput
}

func (*LogicalView) ElementType() reflect.Type {
	return reflect.TypeOf((**LogicalView)(nil)).Elem()
}

func (i *LogicalView) ToLogicalViewOutput() LogicalViewOutput {
	return i.ToLogicalViewOutputWithContext(context.Background())
}

func (i *LogicalView) ToLogicalViewOutputWithContext(ctx context.Context) LogicalViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicalViewOutput)
}

// LogicalViewArrayInput is an input type that accepts LogicalViewArray and LogicalViewArrayOutput values.
// You can construct a concrete instance of `LogicalViewArrayInput` via:
//
//	LogicalViewArray{ LogicalViewArgs{...} }
type LogicalViewArrayInput interface {
	pulumi.Input

	ToLogicalViewArrayOutput() LogicalViewArrayOutput
	ToLogicalViewArrayOutputWithContext(context.Context) LogicalViewArrayOutput
}

type LogicalViewArray []LogicalViewInput

func (LogicalViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogicalView)(nil)).Elem()
}

func (i LogicalViewArray) ToLogicalViewArrayOutput() LogicalViewArrayOutput {
	return i.ToLogicalViewArrayOutputWithContext(context.Background())
}

func (i LogicalViewArray) ToLogicalViewArrayOutputWithContext(ctx context.Context) LogicalViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicalViewArrayOutput)
}

// LogicalViewMapInput is an input type that accepts LogicalViewMap and LogicalViewMapOutput values.
// You can construct a concrete instance of `LogicalViewMapInput` via:
//
//	LogicalViewMap{ "key": LogicalViewArgs{...} }
type LogicalViewMapInput interface {
	pulumi.Input

	ToLogicalViewMapOutput() LogicalViewMapOutput
	ToLogicalViewMapOutputWithContext(context.Context) LogicalViewMapOutput
}

type LogicalViewMap map[string]LogicalViewInput

func (LogicalViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogicalView)(nil)).Elem()
}

func (i LogicalViewMap) ToLogicalViewMapOutput() LogicalViewMapOutput {
	return i.ToLogicalViewMapOutputWithContext(context.Background())
}

func (i LogicalViewMap) ToLogicalViewMapOutputWithContext(ctx context.Context) LogicalViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicalViewMapOutput)
}

type LogicalViewOutput struct{ *pulumi.OutputState }

func (LogicalViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogicalView)(nil)).Elem()
}

func (o LogicalViewOutput) ToLogicalViewOutput() LogicalViewOutput {
	return o
}

func (o LogicalViewOutput) ToLogicalViewOutputWithContext(ctx context.Context) LogicalViewOutput {
	return o
}

// Set to true to make the logical view protected against deletion.
func (o LogicalViewOutput) DeletionProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogicalView) pulumi.BoolPtrOutput { return v.DeletionProtection }).(pulumi.BoolPtrOutput)
}

// The name of the instance to create the logical view within.
func (o LogicalViewOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogicalView) pulumi.StringPtrOutput { return v.Instance }).(pulumi.StringPtrOutput)
}

// The unique name of the logical view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
func (o LogicalViewOutput) LogicalViewId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogicalView) pulumi.StringOutput { return v.LogicalViewId }).(pulumi.StringOutput)
}

// The unique name of the requested logical view. Values are of the form `projects/<project>/instances/<instance>/logicalViews/<logicalViewId>`.
func (o LogicalViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogicalView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o LogicalViewOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *LogicalView) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The logical view's select query.
func (o LogicalViewOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *LogicalView) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

type LogicalViewArrayOutput struct{ *pulumi.OutputState }

func (LogicalViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogicalView)(nil)).Elem()
}

func (o LogicalViewArrayOutput) ToLogicalViewArrayOutput() LogicalViewArrayOutput {
	return o
}

func (o LogicalViewArrayOutput) ToLogicalViewArrayOutputWithContext(ctx context.Context) LogicalViewArrayOutput {
	return o
}

func (o LogicalViewArrayOutput) Index(i pulumi.IntInput) LogicalViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogicalView {
		return vs[0].([]*LogicalView)[vs[1].(int)]
	}).(LogicalViewOutput)
}

type LogicalViewMapOutput struct{ *pulumi.OutputState }

func (LogicalViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogicalView)(nil)).Elem()
}

func (o LogicalViewMapOutput) ToLogicalViewMapOutput() LogicalViewMapOutput {
	return o
}

func (o LogicalViewMapOutput) ToLogicalViewMapOutputWithContext(ctx context.Context) LogicalViewMapOutput {
	return o
}

func (o LogicalViewMapOutput) MapIndex(k pulumi.StringInput) LogicalViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogicalView {
		return vs[0].(map[string]*LogicalView)[vs[1].(string)]
	}).(LogicalViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogicalViewInput)(nil)).Elem(), &LogicalView{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogicalViewArrayInput)(nil)).Elem(), LogicalViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogicalViewMapInput)(nil)).Elem(), LogicalViewMap{})
	pulumi.RegisterOutputType(LogicalViewOutput{})
	pulumi.RegisterOutputType(LogicalViewArrayOutput{})
	pulumi.RegisterOutputType(LogicalViewMapOutput{})
}
