// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VPC Flow Logs Config is a resource that lets you configure Flow Logs for VPC, Interconnect attachments or VPN Tunnels.
//
// ## Example Usage
//
// ### Network Management Vpc Flow Logs Config Interconnect Full
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkmanagement"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
//				Name: pulumi.String("full-interconnect-test-network"),
//			})
//			if err != nil {
//				return err
//			}
//			router, err := compute.NewRouter(ctx, "router", &compute.RouterArgs{
//				Name:    pulumi.String("full-interconnect-test-router"),
//				Network: network.Name,
//				Bgp: &compute.RouterBgpArgs{
//					Asn: pulumi.Int(16550),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			attachment, err := compute.NewInterconnectAttachment(ctx, "attachment", &compute.InterconnectAttachmentArgs{
//				Name:                   pulumi.String("full-interconnect-test-id"),
//				EdgeAvailabilityDomain: pulumi.String("AVAILABILITY_DOMAIN_1"),
//				Type:                   pulumi.String("PARTNER"),
//				Router:                 router.ID(),
//				Mtu:                    pulumi.String("1500"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkmanagement.NewVpcFlowLogsConfig(ctx, "interconnect-test", &networkmanagement.VpcFlowLogsConfigArgs{
//				VpcFlowLogsConfigId: pulumi.String("full-interconnect-test-id"),
//				Location:            pulumi.String("global"),
//				InterconnectAttachment: attachment.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("projects/%v/regions/us-east4/interconnectAttachments/%v", project.Number, name), nil
//				}).(pulumi.StringOutput),
//				State:               pulumi.String("ENABLED"),
//				AggregationInterval: pulumi.String("INTERVAL_5_SEC"),
//				Description:         pulumi.String("VPC Flow Logs over a VPN Gateway."),
//				FlowSampling:        pulumi.Float64(0.5),
//				Metadata:            pulumi.String("INCLUDE_ALL_METADATA"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Management Vpc Flow Logs Config Interconnect Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkmanagement"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
//				Name: pulumi.String("basic-interconnect-test-network"),
//			})
//			if err != nil {
//				return err
//			}
//			router, err := compute.NewRouter(ctx, "router", &compute.RouterArgs{
//				Name:    pulumi.String("basic-interconnect-test-router"),
//				Network: network.Name,
//				Bgp: &compute.RouterBgpArgs{
//					Asn: pulumi.Int(16550),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			attachment, err := compute.NewInterconnectAttachment(ctx, "attachment", &compute.InterconnectAttachmentArgs{
//				Name:                   pulumi.String("basic-interconnect-test-id"),
//				EdgeAvailabilityDomain: pulumi.String("AVAILABILITY_DOMAIN_1"),
//				Type:                   pulumi.String("PARTNER"),
//				Router:                 router.ID(),
//				Mtu:                    pulumi.String("1500"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkmanagement.NewVpcFlowLogsConfig(ctx, "interconnect-test", &networkmanagement.VpcFlowLogsConfigArgs{
//				VpcFlowLogsConfigId: pulumi.String("basic-interconnect-test-id"),
//				Location:            pulumi.String("global"),
//				InterconnectAttachment: attachment.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("projects/%v/regions/us-east4/interconnectAttachments/%v", project.Number, name), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Management Vpc Flow Logs Config Vpn Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkmanagement"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
//				Name: pulumi.String("basic-test-network"),
//			})
//			if err != nil {
//				return err
//			}
//			targetGateway, err := compute.NewVPNGateway(ctx, "target_gateway", &compute.VPNGatewayArgs{
//				Name:    pulumi.String("basic-test-gateway"),
//				Network: network.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			vpnStaticIp, err := compute.NewAddress(ctx, "vpn_static_ip", &compute.AddressArgs{
//				Name: pulumi.String("basic-test-address"),
//			})
//			if err != nil {
//				return err
//			}
//			frEsp, err := compute.NewForwardingRule(ctx, "fr_esp", &compute.ForwardingRuleArgs{
//				Name:       pulumi.String("basic-test-fresp"),
//				IpProtocol: pulumi.String("ESP"),
//				IpAddress:  vpnStaticIp.Address,
//				Target:     targetGateway.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			frUdp500, err := compute.NewForwardingRule(ctx, "fr_udp500", &compute.ForwardingRuleArgs{
//				Name:       pulumi.String("basic-test-fr500"),
//				IpProtocol: pulumi.String("UDP"),
//				PortRange:  pulumi.String("500"),
//				IpAddress:  vpnStaticIp.Address,
//				Target:     targetGateway.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			frUdp4500, err := compute.NewForwardingRule(ctx, "fr_udp4500", &compute.ForwardingRuleArgs{
//				Name:       pulumi.String("basic-test-fr4500"),
//				IpProtocol: pulumi.String("UDP"),
//				PortRange:  pulumi.String("4500"),
//				IpAddress:  vpnStaticIp.Address,
//				Target:     targetGateway.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			tunnel, err := compute.NewVPNTunnel(ctx, "tunnel", &compute.VPNTunnelArgs{
//				Name:             pulumi.String("basic-test-tunnel"),
//				PeerIp:           pulumi.String("15.0.0.120"),
//				SharedSecret:     pulumi.String("a secret message"),
//				TargetVpnGateway: targetGateway.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				frEsp,
//				frUdp500,
//				frUdp4500,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = networkmanagement.NewVpcFlowLogsConfig(ctx, "vpn-test", &networkmanagement.VpcFlowLogsConfigArgs{
//				VpcFlowLogsConfigId: pulumi.String("basic-test-id"),
//				Location:            pulumi.String("global"),
//				VpnTunnel: tunnel.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("projects/%v/regions/us-central1/vpnTunnels/%v", project.Number, name), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRoute(ctx, "route", &compute.RouteArgs{
//				Name:             pulumi.String("basic-test-route"),
//				Network:          network.Name,
//				DestRange:        pulumi.String("15.0.0.0/24"),
//				Priority:         pulumi.Int(1000),
//				NextHopVpnTunnel: tunnel.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Management Vpc Flow Logs Config Vpn Full
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkmanagement"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
//				Name: pulumi.String("full-test-network"),
//			})
//			if err != nil {
//				return err
//			}
//			targetGateway, err := compute.NewVPNGateway(ctx, "target_gateway", &compute.VPNGatewayArgs{
//				Name:    pulumi.String("full-test-gateway"),
//				Network: network.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			vpnStaticIp, err := compute.NewAddress(ctx, "vpn_static_ip", &compute.AddressArgs{
//				Name: pulumi.String("full-test-address"),
//			})
//			if err != nil {
//				return err
//			}
//			frEsp, err := compute.NewForwardingRule(ctx, "fr_esp", &compute.ForwardingRuleArgs{
//				Name:       pulumi.String("full-test-fresp"),
//				IpProtocol: pulumi.String("ESP"),
//				IpAddress:  vpnStaticIp.Address,
//				Target:     targetGateway.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			frUdp500, err := compute.NewForwardingRule(ctx, "fr_udp500", &compute.ForwardingRuleArgs{
//				Name:       pulumi.String("full-test-fr500"),
//				IpProtocol: pulumi.String("UDP"),
//				PortRange:  pulumi.String("500"),
//				IpAddress:  vpnStaticIp.Address,
//				Target:     targetGateway.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			frUdp4500, err := compute.NewForwardingRule(ctx, "fr_udp4500", &compute.ForwardingRuleArgs{
//				Name:       pulumi.String("full-test-fr4500"),
//				IpProtocol: pulumi.String("UDP"),
//				PortRange:  pulumi.String("4500"),
//				IpAddress:  vpnStaticIp.Address,
//				Target:     targetGateway.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			tunnel, err := compute.NewVPNTunnel(ctx, "tunnel", &compute.VPNTunnelArgs{
//				Name:             pulumi.String("full-test-tunnel"),
//				PeerIp:           pulumi.String("15.0.0.120"),
//				SharedSecret:     pulumi.String("a secret message"),
//				TargetVpnGateway: targetGateway.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				frEsp,
//				frUdp500,
//				frUdp4500,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = networkmanagement.NewVpcFlowLogsConfig(ctx, "vpn-test", &networkmanagement.VpcFlowLogsConfigArgs{
//				VpcFlowLogsConfigId: pulumi.String("full-test-id"),
//				Location:            pulumi.String("global"),
//				VpnTunnel: tunnel.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("projects/%v/regions/us-central1/vpnTunnels/%v", project.Number, name), nil
//				}).(pulumi.StringOutput),
//				State:               pulumi.String("ENABLED"),
//				AggregationInterval: pulumi.String("INTERVAL_5_SEC"),
//				Description:         pulumi.String("VPC Flow Logs over a VPN Gateway."),
//				FlowSampling:        pulumi.Float64(0.5),
//				Metadata:            pulumi.String("INCLUDE_ALL_METADATA"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRoute(ctx, "route", &compute.RouteArgs{
//				Name:             pulumi.String("full-test-route"),
//				Network:          network.Name,
//				DestRange:        pulumi.String("15.0.0.0/24"),
//				Priority:         pulumi.Int(1000),
//				NextHopVpnTunnel: tunnel.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VpcFlowLogsConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs/{{vpc_flow_logs_config_id}}`
//
// * `{{project}}/{{location}}/{{vpc_flow_logs_config_id}}`
//
// * `{{location}}/{{vpc_flow_logs_config_id}}`
//
// When using the `pulumi import` command, VpcFlowLogsConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig default projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs/{{vpc_flow_logs_config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig default {{project}}/{{location}}/{{vpc_flow_logs_config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig default {{location}}/{{vpc_flow_logs_config_id}}
// ```
type VpcFlowLogsConfig struct {
	pulumi.CustomResourceState

	// Optional. The aggregation interval for the logs. Default value is
	// INTERVAL_5_SEC.   Possible values:  AGGREGATION_INTERVAL_UNSPECIFIED INTERVAL_5_SEC INTERVAL_30_SEC INTERVAL_1_MIN INTERVAL_5_MIN INTERVAL_10_MIN INTERVAL_15_MIN"
	AggregationInterval pulumi.StringOutput `pulumi:"aggregationInterval"`
	// Output only. The time the config was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. The user-supplied description of the VPC Flow Logs configuration. Maximum
	// of 512 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. Export filter used to define which VPC Flow Logs should be logged.
	FilterExpr pulumi.StringPtrOutput `pulumi:"filterExpr"`
	// Optional. The value of the field must be in (0, 1]. The sampling rate
	// of VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
	// sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs, use
	// the state field instead. Default value is 1.0.
	FlowSampling pulumi.Float64Output `pulumi:"flowSampling"`
	// Traffic will be logged from the Interconnect Attachment. Format: projects/{project_id}/regions/{region}/interconnectAttachments/{name}
	InterconnectAttachment pulumi.StringPtrOutput `pulumi:"interconnectAttachment"`
	// Optional. Resource labels to represent user-provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource
	// within its parent collection as described in https://google.aip.dev/122. See documentation
	// for resource type `networkmanagement.googleapis.com/VpcFlowLogsConfig`.
	Location pulumi.StringOutput `pulumi:"location"`
	// Optional. Configures whether all, none or a subset of metadata fields
	// should be added to the reported VPC flow logs. Default value is INCLUDE_ALL_METADATA.
	// Possible values:  METADATA_UNSPECIFIED INCLUDE_ALL_METADATA EXCLUDE_ALL_METADATA CUSTOM_METADATA
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// Optional. Custom metadata fields to include in the reported VPC flow
	// logs. Can only be specified if \"metadata\" was set to CUSTOM_METADATA.
	MetadataFields pulumi.StringArrayOutput `pulumi:"metadataFields"`
	// Identifier. Unique name of the configuration using the form:     `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Optional. The state of the VPC Flow Log configuration. Default value
	// is ENABLED. When creating a new configuration, it must be enabled.   Possible
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. The time the config was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Required. ID of the `VpcFlowLogsConfig`.
	VpcFlowLogsConfigId pulumi.StringOutput `pulumi:"vpcFlowLogsConfigId"`
	// Traffic will be logged from the VPN Tunnel. Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}
	VpnTunnel pulumi.StringPtrOutput `pulumi:"vpnTunnel"`
}

// NewVpcFlowLogsConfig registers a new resource with the given unique name, arguments, and options.
func NewVpcFlowLogsConfig(ctx *pulumi.Context,
	name string, args *VpcFlowLogsConfigArgs, opts ...pulumi.ResourceOption) (*VpcFlowLogsConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.VpcFlowLogsConfigId == nil {
		return nil, errors.New("invalid value for required argument 'VpcFlowLogsConfigId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcFlowLogsConfig
	err := ctx.RegisterResource("gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcFlowLogsConfig gets an existing VpcFlowLogsConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcFlowLogsConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcFlowLogsConfigState, opts ...pulumi.ResourceOption) (*VpcFlowLogsConfig, error) {
	var resource VpcFlowLogsConfig
	err := ctx.ReadResource("gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcFlowLogsConfig resources.
type vpcFlowLogsConfigState struct {
	// Optional. The aggregation interval for the logs. Default value is
	// INTERVAL_5_SEC.   Possible values:  AGGREGATION_INTERVAL_UNSPECIFIED INTERVAL_5_SEC INTERVAL_30_SEC INTERVAL_1_MIN INTERVAL_5_MIN INTERVAL_10_MIN INTERVAL_15_MIN"
	AggregationInterval *string `pulumi:"aggregationInterval"`
	// Output only. The time the config was created.
	CreateTime *string `pulumi:"createTime"`
	// Optional. The user-supplied description of the VPC Flow Logs configuration. Maximum
	// of 512 characters.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Optional. Export filter used to define which VPC Flow Logs should be logged.
	FilterExpr *string `pulumi:"filterExpr"`
	// Optional. The value of the field must be in (0, 1]. The sampling rate
	// of VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
	// sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs, use
	// the state field instead. Default value is 1.0.
	FlowSampling *float64 `pulumi:"flowSampling"`
	// Traffic will be logged from the Interconnect Attachment. Format: projects/{project_id}/regions/{region}/interconnectAttachments/{name}
	InterconnectAttachment *string `pulumi:"interconnectAttachment"`
	// Optional. Resource labels to represent user-provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource
	// within its parent collection as described in https://google.aip.dev/122. See documentation
	// for resource type `networkmanagement.googleapis.com/VpcFlowLogsConfig`.
	Location *string `pulumi:"location"`
	// Optional. Configures whether all, none or a subset of metadata fields
	// should be added to the reported VPC flow logs. Default value is INCLUDE_ALL_METADATA.
	// Possible values:  METADATA_UNSPECIFIED INCLUDE_ALL_METADATA EXCLUDE_ALL_METADATA CUSTOM_METADATA
	Metadata *string `pulumi:"metadata"`
	// Optional. Custom metadata fields to include in the reported VPC flow
	// logs. Can only be specified if \"metadata\" was set to CUSTOM_METADATA.
	MetadataFields []string `pulumi:"metadataFields"`
	// Identifier. Unique name of the configuration using the form:     `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}`
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Optional. The state of the VPC Flow Log configuration. Default value
	// is ENABLED. When creating a new configuration, it must be enabled.   Possible
	State *string `pulumi:"state"`
	// Output only. The time the config was updated.
	UpdateTime *string `pulumi:"updateTime"`
	// Required. ID of the `VpcFlowLogsConfig`.
	VpcFlowLogsConfigId *string `pulumi:"vpcFlowLogsConfigId"`
	// Traffic will be logged from the VPN Tunnel. Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}
	VpnTunnel *string `pulumi:"vpnTunnel"`
}

type VpcFlowLogsConfigState struct {
	// Optional. The aggregation interval for the logs. Default value is
	// INTERVAL_5_SEC.   Possible values:  AGGREGATION_INTERVAL_UNSPECIFIED INTERVAL_5_SEC INTERVAL_30_SEC INTERVAL_1_MIN INTERVAL_5_MIN INTERVAL_10_MIN INTERVAL_15_MIN"
	AggregationInterval pulumi.StringPtrInput
	// Output only. The time the config was created.
	CreateTime pulumi.StringPtrInput
	// Optional. The user-supplied description of the VPC Flow Logs configuration. Maximum
	// of 512 characters.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Optional. Export filter used to define which VPC Flow Logs should be logged.
	FilterExpr pulumi.StringPtrInput
	// Optional. The value of the field must be in (0, 1]. The sampling rate
	// of VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
	// sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs, use
	// the state field instead. Default value is 1.0.
	FlowSampling pulumi.Float64PtrInput
	// Traffic will be logged from the Interconnect Attachment. Format: projects/{project_id}/regions/{region}/interconnectAttachments/{name}
	InterconnectAttachment pulumi.StringPtrInput
	// Optional. Resource labels to represent user-provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource
	// within its parent collection as described in https://google.aip.dev/122. See documentation
	// for resource type `networkmanagement.googleapis.com/VpcFlowLogsConfig`.
	Location pulumi.StringPtrInput
	// Optional. Configures whether all, none or a subset of metadata fields
	// should be added to the reported VPC flow logs. Default value is INCLUDE_ALL_METADATA.
	// Possible values:  METADATA_UNSPECIFIED INCLUDE_ALL_METADATA EXCLUDE_ALL_METADATA CUSTOM_METADATA
	Metadata pulumi.StringPtrInput
	// Optional. Custom metadata fields to include in the reported VPC flow
	// logs. Can only be specified if \"metadata\" was set to CUSTOM_METADATA.
	MetadataFields pulumi.StringArrayInput
	// Identifier. Unique name of the configuration using the form:     `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}`
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Optional. The state of the VPC Flow Log configuration. Default value
	// is ENABLED. When creating a new configuration, it must be enabled.   Possible
	State pulumi.StringPtrInput
	// Output only. The time the config was updated.
	UpdateTime pulumi.StringPtrInput
	// Required. ID of the `VpcFlowLogsConfig`.
	VpcFlowLogsConfigId pulumi.StringPtrInput
	// Traffic will be logged from the VPN Tunnel. Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}
	VpnTunnel pulumi.StringPtrInput
}

func (VpcFlowLogsConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcFlowLogsConfigState)(nil)).Elem()
}

type vpcFlowLogsConfigArgs struct {
	// Optional. The aggregation interval for the logs. Default value is
	// INTERVAL_5_SEC.   Possible values:  AGGREGATION_INTERVAL_UNSPECIFIED INTERVAL_5_SEC INTERVAL_30_SEC INTERVAL_1_MIN INTERVAL_5_MIN INTERVAL_10_MIN INTERVAL_15_MIN"
	AggregationInterval *string `pulumi:"aggregationInterval"`
	// Optional. The user-supplied description of the VPC Flow Logs configuration. Maximum
	// of 512 characters.
	Description *string `pulumi:"description"`
	// Optional. Export filter used to define which VPC Flow Logs should be logged.
	FilterExpr *string `pulumi:"filterExpr"`
	// Optional. The value of the field must be in (0, 1]. The sampling rate
	// of VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
	// sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs, use
	// the state field instead. Default value is 1.0.
	FlowSampling *float64 `pulumi:"flowSampling"`
	// Traffic will be logged from the Interconnect Attachment. Format: projects/{project_id}/regions/{region}/interconnectAttachments/{name}
	InterconnectAttachment *string `pulumi:"interconnectAttachment"`
	// Optional. Resource labels to represent user-provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource
	// within its parent collection as described in https://google.aip.dev/122. See documentation
	// for resource type `networkmanagement.googleapis.com/VpcFlowLogsConfig`.
	Location string `pulumi:"location"`
	// Optional. Configures whether all, none or a subset of metadata fields
	// should be added to the reported VPC flow logs. Default value is INCLUDE_ALL_METADATA.
	// Possible values:  METADATA_UNSPECIFIED INCLUDE_ALL_METADATA EXCLUDE_ALL_METADATA CUSTOM_METADATA
	Metadata *string `pulumi:"metadata"`
	// Optional. Custom metadata fields to include in the reported VPC flow
	// logs. Can only be specified if \"metadata\" was set to CUSTOM_METADATA.
	MetadataFields []string `pulumi:"metadataFields"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Optional. The state of the VPC Flow Log configuration. Default value
	// is ENABLED. When creating a new configuration, it must be enabled.   Possible
	State *string `pulumi:"state"`
	// Required. ID of the `VpcFlowLogsConfig`.
	VpcFlowLogsConfigId string `pulumi:"vpcFlowLogsConfigId"`
	// Traffic will be logged from the VPN Tunnel. Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}
	VpnTunnel *string `pulumi:"vpnTunnel"`
}

// The set of arguments for constructing a VpcFlowLogsConfig resource.
type VpcFlowLogsConfigArgs struct {
	// Optional. The aggregation interval for the logs. Default value is
	// INTERVAL_5_SEC.   Possible values:  AGGREGATION_INTERVAL_UNSPECIFIED INTERVAL_5_SEC INTERVAL_30_SEC INTERVAL_1_MIN INTERVAL_5_MIN INTERVAL_10_MIN INTERVAL_15_MIN"
	AggregationInterval pulumi.StringPtrInput
	// Optional. The user-supplied description of the VPC Flow Logs configuration. Maximum
	// of 512 characters.
	Description pulumi.StringPtrInput
	// Optional. Export filter used to define which VPC Flow Logs should be logged.
	FilterExpr pulumi.StringPtrInput
	// Optional. The value of the field must be in (0, 1]. The sampling rate
	// of VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
	// sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs, use
	// the state field instead. Default value is 1.0.
	FlowSampling pulumi.Float64PtrInput
	// Traffic will be logged from the Interconnect Attachment. Format: projects/{project_id}/regions/{region}/interconnectAttachments/{name}
	InterconnectAttachment pulumi.StringPtrInput
	// Optional. Resource labels to represent user-provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource
	// within its parent collection as described in https://google.aip.dev/122. See documentation
	// for resource type `networkmanagement.googleapis.com/VpcFlowLogsConfig`.
	Location pulumi.StringInput
	// Optional. Configures whether all, none or a subset of metadata fields
	// should be added to the reported VPC flow logs. Default value is INCLUDE_ALL_METADATA.
	// Possible values:  METADATA_UNSPECIFIED INCLUDE_ALL_METADATA EXCLUDE_ALL_METADATA CUSTOM_METADATA
	Metadata pulumi.StringPtrInput
	// Optional. Custom metadata fields to include in the reported VPC flow
	// logs. Can only be specified if \"metadata\" was set to CUSTOM_METADATA.
	MetadataFields pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Optional. The state of the VPC Flow Log configuration. Default value
	// is ENABLED. When creating a new configuration, it must be enabled.   Possible
	State pulumi.StringPtrInput
	// Required. ID of the `VpcFlowLogsConfig`.
	VpcFlowLogsConfigId pulumi.StringInput
	// Traffic will be logged from the VPN Tunnel. Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}
	VpnTunnel pulumi.StringPtrInput
}

func (VpcFlowLogsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcFlowLogsConfigArgs)(nil)).Elem()
}

type VpcFlowLogsConfigInput interface {
	pulumi.Input

	ToVpcFlowLogsConfigOutput() VpcFlowLogsConfigOutput
	ToVpcFlowLogsConfigOutputWithContext(ctx context.Context) VpcFlowLogsConfigOutput
}

func (*VpcFlowLogsConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcFlowLogsConfig)(nil)).Elem()
}

func (i *VpcFlowLogsConfig) ToVpcFlowLogsConfigOutput() VpcFlowLogsConfigOutput {
	return i.ToVpcFlowLogsConfigOutputWithContext(context.Background())
}

func (i *VpcFlowLogsConfig) ToVpcFlowLogsConfigOutputWithContext(ctx context.Context) VpcFlowLogsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcFlowLogsConfigOutput)
}

// VpcFlowLogsConfigArrayInput is an input type that accepts VpcFlowLogsConfigArray and VpcFlowLogsConfigArrayOutput values.
// You can construct a concrete instance of `VpcFlowLogsConfigArrayInput` via:
//
//	VpcFlowLogsConfigArray{ VpcFlowLogsConfigArgs{...} }
type VpcFlowLogsConfigArrayInput interface {
	pulumi.Input

	ToVpcFlowLogsConfigArrayOutput() VpcFlowLogsConfigArrayOutput
	ToVpcFlowLogsConfigArrayOutputWithContext(context.Context) VpcFlowLogsConfigArrayOutput
}

type VpcFlowLogsConfigArray []VpcFlowLogsConfigInput

func (VpcFlowLogsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcFlowLogsConfig)(nil)).Elem()
}

func (i VpcFlowLogsConfigArray) ToVpcFlowLogsConfigArrayOutput() VpcFlowLogsConfigArrayOutput {
	return i.ToVpcFlowLogsConfigArrayOutputWithContext(context.Background())
}

func (i VpcFlowLogsConfigArray) ToVpcFlowLogsConfigArrayOutputWithContext(ctx context.Context) VpcFlowLogsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcFlowLogsConfigArrayOutput)
}

// VpcFlowLogsConfigMapInput is an input type that accepts VpcFlowLogsConfigMap and VpcFlowLogsConfigMapOutput values.
// You can construct a concrete instance of `VpcFlowLogsConfigMapInput` via:
//
//	VpcFlowLogsConfigMap{ "key": VpcFlowLogsConfigArgs{...} }
type VpcFlowLogsConfigMapInput interface {
	pulumi.Input

	ToVpcFlowLogsConfigMapOutput() VpcFlowLogsConfigMapOutput
	ToVpcFlowLogsConfigMapOutputWithContext(context.Context) VpcFlowLogsConfigMapOutput
}

type VpcFlowLogsConfigMap map[string]VpcFlowLogsConfigInput

func (VpcFlowLogsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcFlowLogsConfig)(nil)).Elem()
}

func (i VpcFlowLogsConfigMap) ToVpcFlowLogsConfigMapOutput() VpcFlowLogsConfigMapOutput {
	return i.ToVpcFlowLogsConfigMapOutputWithContext(context.Background())
}

func (i VpcFlowLogsConfigMap) ToVpcFlowLogsConfigMapOutputWithContext(ctx context.Context) VpcFlowLogsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcFlowLogsConfigMapOutput)
}

type VpcFlowLogsConfigOutput struct{ *pulumi.OutputState }

func (VpcFlowLogsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcFlowLogsConfig)(nil)).Elem()
}

func (o VpcFlowLogsConfigOutput) ToVpcFlowLogsConfigOutput() VpcFlowLogsConfigOutput {
	return o
}

func (o VpcFlowLogsConfigOutput) ToVpcFlowLogsConfigOutputWithContext(ctx context.Context) VpcFlowLogsConfigOutput {
	return o
}

// Optional. The aggregation interval for the logs. Default value is
// INTERVAL_5_SEC.   Possible values:  AGGREGATION_INTERVAL_UNSPECIFIED INTERVAL_5_SEC INTERVAL_30_SEC INTERVAL_1_MIN INTERVAL_5_MIN INTERVAL_10_MIN INTERVAL_15_MIN"
func (o VpcFlowLogsConfigOutput) AggregationInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringOutput { return v.AggregationInterval }).(pulumi.StringOutput)
}

// Output only. The time the config was created.
func (o VpcFlowLogsConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. The user-supplied description of the VPC Flow Logs configuration. Maximum
// of 512 characters.
func (o VpcFlowLogsConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o VpcFlowLogsConfigOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. Export filter used to define which VPC Flow Logs should be logged.
func (o VpcFlowLogsConfigOutput) FilterExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringPtrOutput { return v.FilterExpr }).(pulumi.StringPtrOutput)
}

// Optional. The value of the field must be in (0, 1]. The sampling rate
// of VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
// sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs, use
// the state field instead. Default value is 1.0.
func (o VpcFlowLogsConfigOutput) FlowSampling() pulumi.Float64Output {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.Float64Output { return v.FlowSampling }).(pulumi.Float64Output)
}

// Traffic will be logged from the Interconnect Attachment. Format: projects/{project_id}/regions/{region}/interconnectAttachments/{name}
func (o VpcFlowLogsConfigOutput) InterconnectAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringPtrOutput { return v.InterconnectAttachment }).(pulumi.StringPtrOutput)
}

// Optional. Resource labels to represent user-provided metadata.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o VpcFlowLogsConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource
// within its parent collection as described in https://google.aip.dev/122. See documentation
// for resource type `networkmanagement.googleapis.com/VpcFlowLogsConfig`.
func (o VpcFlowLogsConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional. Configures whether all, none or a subset of metadata fields
// should be added to the reported VPC flow logs. Default value is INCLUDE_ALL_METADATA.
// Possible values:  METADATA_UNSPECIFIED INCLUDE_ALL_METADATA EXCLUDE_ALL_METADATA CUSTOM_METADATA
func (o VpcFlowLogsConfigOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// Optional. Custom metadata fields to include in the reported VPC flow
// logs. Can only be specified if \"metadata\" was set to CUSTOM_METADATA.
func (o VpcFlowLogsConfigOutput) MetadataFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringArrayOutput { return v.MetadataFields }).(pulumi.StringArrayOutput)
}

// Identifier. Unique name of the configuration using the form:     `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}`
func (o VpcFlowLogsConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o VpcFlowLogsConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o VpcFlowLogsConfigOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Optional. The state of the VPC Flow Log configuration. Default value
// is ENABLED. When creating a new configuration, it must be enabled.   Possible
func (o VpcFlowLogsConfigOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. The time the config was updated.
func (o VpcFlowLogsConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Required. ID of the `VpcFlowLogsConfig`.
func (o VpcFlowLogsConfigOutput) VpcFlowLogsConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringOutput { return v.VpcFlowLogsConfigId }).(pulumi.StringOutput)
}

// Traffic will be logged from the VPN Tunnel. Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}
func (o VpcFlowLogsConfigOutput) VpnTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcFlowLogsConfig) pulumi.StringPtrOutput { return v.VpnTunnel }).(pulumi.StringPtrOutput)
}

type VpcFlowLogsConfigArrayOutput struct{ *pulumi.OutputState }

func (VpcFlowLogsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcFlowLogsConfig)(nil)).Elem()
}

func (o VpcFlowLogsConfigArrayOutput) ToVpcFlowLogsConfigArrayOutput() VpcFlowLogsConfigArrayOutput {
	return o
}

func (o VpcFlowLogsConfigArrayOutput) ToVpcFlowLogsConfigArrayOutputWithContext(ctx context.Context) VpcFlowLogsConfigArrayOutput {
	return o
}

func (o VpcFlowLogsConfigArrayOutput) Index(i pulumi.IntInput) VpcFlowLogsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcFlowLogsConfig {
		return vs[0].([]*VpcFlowLogsConfig)[vs[1].(int)]
	}).(VpcFlowLogsConfigOutput)
}

type VpcFlowLogsConfigMapOutput struct{ *pulumi.OutputState }

func (VpcFlowLogsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcFlowLogsConfig)(nil)).Elem()
}

func (o VpcFlowLogsConfigMapOutput) ToVpcFlowLogsConfigMapOutput() VpcFlowLogsConfigMapOutput {
	return o
}

func (o VpcFlowLogsConfigMapOutput) ToVpcFlowLogsConfigMapOutputWithContext(ctx context.Context) VpcFlowLogsConfigMapOutput {
	return o
}

func (o VpcFlowLogsConfigMapOutput) MapIndex(k pulumi.StringInput) VpcFlowLogsConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcFlowLogsConfig {
		return vs[0].(map[string]*VpcFlowLogsConfig)[vs[1].(string)]
	}).(VpcFlowLogsConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcFlowLogsConfigInput)(nil)).Elem(), &VpcFlowLogsConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcFlowLogsConfigArrayInput)(nil)).Elem(), VpcFlowLogsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcFlowLogsConfigMapInput)(nil)).Elem(), VpcFlowLogsConfigMap{})
	pulumi.RegisterOutputType(VpcFlowLogsConfigOutput{})
	pulumi.RegisterOutputType(VpcFlowLogsConfigArrayOutput{})
	pulumi.RegisterOutputType(VpcFlowLogsConfigMapOutput{})
}
