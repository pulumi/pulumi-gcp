// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> This datasource triggers side effects on the target resource. It will take a long time to refresh (i.e. `pulumi preview` will take much longer than usual) and may modify the state of the parent resource or other copies of the resource copying the same parent.
//
// A connectivity test is a static analysis of your resource configurations
// that enables you to evaluate connectivity to and from Google Cloud
// resources in your Virtual Private Cloud (VPC) network. This data source allows
// you to trigger a rerun operation on a connectivity test and return the results.
//
// To get more information about connectivity tests, see:
//
// * [API documentation](https://cloud.google.com/network-intelligence-center/docs/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests/rerun)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
//
// ## Example Usage
//
// ### Network Management Connectivity Test Run Instances
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/networkmanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc, err := compute.NewNetwork(ctx, "vpc", &compute.NetworkArgs{
//				Name: pulumi.String("conn-test-net"),
//			})
//			if err != nil {
//				return err
//			}
//			debian9, err := compute.LookupImage(ctx, &compute.LookupImageArgs{
//				Family:  pulumi.StringRef("debian-11"),
//				Project: pulumi.StringRef("debian-cloud"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			source, err := compute.NewInstance(ctx, "source", &compute.InstanceArgs{
//				NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
//					&compute.InstanceNetworkInterfaceArgs{
//						AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
//							&compute.InstanceNetworkInterfaceAccessConfigArgs{},
//						},
//						Network: vpc.ID(),
//					},
//				},
//				Name:        pulumi.String("source-vm"),
//				MachineType: pulumi.String("e2-medium"),
//				BootDisk: &compute.InstanceBootDiskArgs{
//					InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
//						Image: pulumi.String(debian9.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			destination, err := compute.NewInstance(ctx, "destination", &compute.InstanceArgs{
//				NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
//					&compute.InstanceNetworkInterfaceArgs{
//						AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
//							&compute.InstanceNetworkInterfaceAccessConfigArgs{},
//						},
//						Network: vpc.ID(),
//					},
//				},
//				Name:        pulumi.String("dest-vm"),
//				MachineType: pulumi.String("e2-medium"),
//				BootDisk: &compute.InstanceBootDiskArgs{
//					InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
//						Image: pulumi.String(debian9.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			instance_test, err := networkmanagement.NewConnectivityTest(ctx, "instance-test", &networkmanagement.ConnectivityTestArgs{
//				Name: pulumi.String("conn-test-instances"),
//				Source: &networkmanagement.ConnectivityTestSourceArgs{
//					Instance: source.ID(),
//				},
//				Destination: &networkmanagement.ConnectivityTestDestinationArgs{
//					Instance: destination.ID(),
//				},
//				Protocol: pulumi.String("TCP"),
//				Labels: pulumi.StringMap{
//					"env": pulumi.String("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = networkmanagement.GetConnectivityTestRunOutput(ctx, networkmanagement.GetConnectivityTestRunOutputArgs{
//				Name: instance_test.Name,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetConnectivityTestRun(ctx *pulumi.Context, args *GetConnectivityTestRunArgs, opts ...pulumi.InvokeOption) (*GetConnectivityTestRunResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetConnectivityTestRunResult
	err := ctx.Invoke("gcp:networkmanagement/getConnectivityTestRun:getConnectivityTestRun", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectivityTestRun.
type GetConnectivityTestRunArgs struct {
	// Unique name for the connectivity test.
	//
	// ***
	Name string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getConnectivityTestRun.
type GetConnectivityTestRunResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	Name    string `pulumi:"name"`
	Project string `pulumi:"project"`
	// Connectivity test reachability details.
	// Structure is documented below.
	ReachabilityDetails []GetConnectivityTestRunReachabilityDetail `pulumi:"reachabilityDetails"`
}

func GetConnectivityTestRunOutput(ctx *pulumi.Context, args GetConnectivityTestRunOutputArgs, opts ...pulumi.InvokeOption) GetConnectivityTestRunResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetConnectivityTestRunResultOutput, error) {
			args := v.(GetConnectivityTestRunArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:networkmanagement/getConnectivityTestRun:getConnectivityTestRun", args, GetConnectivityTestRunResultOutput{}, options).(GetConnectivityTestRunResultOutput), nil
		}).(GetConnectivityTestRunResultOutput)
}

// A collection of arguments for invoking getConnectivityTestRun.
type GetConnectivityTestRunOutputArgs struct {
	// Unique name for the connectivity test.
	//
	// ***
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GetConnectivityTestRunOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectivityTestRunArgs)(nil)).Elem()
}

// A collection of values returned by getConnectivityTestRun.
type GetConnectivityTestRunResultOutput struct{ *pulumi.OutputState }

func (GetConnectivityTestRunResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectivityTestRunResult)(nil)).Elem()
}

func (o GetConnectivityTestRunResultOutput) ToGetConnectivityTestRunResultOutput() GetConnectivityTestRunResultOutput {
	return o
}

func (o GetConnectivityTestRunResultOutput) ToGetConnectivityTestRunResultOutputWithContext(ctx context.Context) GetConnectivityTestRunResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetConnectivityTestRunResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectivityTestRunResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetConnectivityTestRunResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectivityTestRunResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetConnectivityTestRunResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectivityTestRunResult) string { return v.Project }).(pulumi.StringOutput)
}

// Connectivity test reachability details.
// Structure is documented below.
func (o GetConnectivityTestRunResultOutput) ReachabilityDetails() GetConnectivityTestRunReachabilityDetailArrayOutput {
	return o.ApplyT(func(v GetConnectivityTestRunResult) []GetConnectivityTestRunReachabilityDetail {
		return v.ReachabilityDetails
	}).(GetConnectivityTestRunReachabilityDetailArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetConnectivityTestRunResultOutput{})
}
