// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A connectivity test are a static analysis of your resource configurations
// that enables you to evaluate connectivity to and from Google Cloud
// resources in your Virtual Private Cloud (VPC) network.
//
// To get more information about ConnectivityTest, see:
//
// * [API documentation](https://cloud.google.com/network-intelligence-center/docs/connectivity-tests/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
//
// ## Example Usage
//
// ### Network Management Connectivity Test Instances
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkmanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc, err := compute.NewNetwork(ctx, "vpc", &compute.NetworkArgs{
//				Name: pulumi.String("conn-test-net"),
//			})
//			if err != nil {
//				return err
//			}
//			debian9, err := compute.LookupImage(ctx, &compute.LookupImageArgs{
//				Family:  pulumi.StringRef("debian-11"),
//				Project: pulumi.StringRef("debian-cloud"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			source, err := compute.NewInstance(ctx, "source", &compute.InstanceArgs{
//				NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
//					&compute.InstanceNetworkInterfaceArgs{
//						AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
//							&compute.InstanceNetworkInterfaceAccessConfigArgs{},
//						},
//						Network: vpc.ID(),
//					},
//				},
//				Name:        pulumi.String("source-vm"),
//				MachineType: pulumi.String("e2-medium"),
//				BootDisk: &compute.InstanceBootDiskArgs{
//					InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
//						Image: pulumi.String(debian9.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			destination, err := compute.NewInstance(ctx, "destination", &compute.InstanceArgs{
//				NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
//					&compute.InstanceNetworkInterfaceArgs{
//						AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
//							&compute.InstanceNetworkInterfaceAccessConfigArgs{},
//						},
//						Network: vpc.ID(),
//					},
//				},
//				Name:        pulumi.String("dest-vm"),
//				MachineType: pulumi.String("e2-medium"),
//				BootDisk: &compute.InstanceBootDiskArgs{
//					InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
//						Image: pulumi.String(debian9.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkmanagement.NewConnectivityTest(ctx, "instance-test", &networkmanagement.ConnectivityTestArgs{
//				Name: pulumi.String("conn-test-instances"),
//				Source: &networkmanagement.ConnectivityTestSourceArgs{
//					Instance: source.ID(),
//				},
//				Destination: &networkmanagement.ConnectivityTestDestinationArgs{
//					Instance: destination.ID(),
//				},
//				Protocol: pulumi.String("TCP"),
//				Labels: pulumi.StringMap{
//					"env": pulumi.String("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Management Connectivity Test Addresses
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkmanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc, err := compute.NewNetwork(ctx, "vpc", &compute.NetworkArgs{
//				Name: pulumi.String("connectivity-vpc"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := compute.NewSubnetwork(ctx, "subnet", &compute.SubnetworkArgs{
//				Name:        pulumi.String("connectivity-vpc-subnet"),
//				IpCidrRange: pulumi.String("10.0.0.0/16"),
//				Region:      pulumi.String("us-central1"),
//				Network:     vpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			source_addr, err := compute.NewAddress(ctx, "source-addr", &compute.AddressArgs{
//				Name:        pulumi.String("src-addr"),
//				Subnetwork:  subnet.ID(),
//				AddressType: pulumi.String("INTERNAL"),
//				Address:     pulumi.String("10.0.42.42"),
//				Region:      pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			dest_addr, err := compute.NewAddress(ctx, "dest-addr", &compute.AddressArgs{
//				Name:        pulumi.String("dest-addr"),
//				Subnetwork:  subnet.ID(),
//				AddressType: pulumi.String("INTERNAL"),
//				Address:     pulumi.String("10.0.43.43"),
//				Region:      pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkmanagement.NewConnectivityTest(ctx, "address-test", &networkmanagement.ConnectivityTestArgs{
//				Name: pulumi.String("conn-test-addr"),
//				Source: &networkmanagement.ConnectivityTestSourceArgs{
//					IpAddress:   source_addr.Address,
//					ProjectId:   source_addr.Project,
//					Network:     vpc.ID(),
//					NetworkType: pulumi.String("GCP_NETWORK"),
//				},
//				Destination: &networkmanagement.ConnectivityTestDestinationArgs{
//					IpAddress: dest_addr.Address,
//					ProjectId: dest_addr.Project,
//					Network:   vpc.ID(),
//				},
//				Protocol: pulumi.String("UDP"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Management Connectivity Test Endpoints
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkmanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkmanagement.NewConnectivityTest(ctx, "endpoints-test", &networkmanagement.ConnectivityTestArgs{
//				Name: pulumi.String("conn-test-endpoints"),
//				Source: &networkmanagement.ConnectivityTestSourceArgs{
//					GkeMasterCluster: pulumi.String("projects/test-project/locations/us-central1/clusters/name"),
//					CloudSqlInstance: pulumi.String("projects/test-project/instances/name"),
//					AppEngineVersion: &networkmanagement.ConnectivityTestSourceAppEngineVersionArgs{
//						Uri: pulumi.String("apps/test-project/services/default/versions/name"),
//					},
//					CloudFunction: &networkmanagement.ConnectivityTestSourceCloudFunctionArgs{
//						Uri: pulumi.String("projects/test-project/locations/us-central1/functions/name"),
//					},
//					CloudRunRevision: &networkmanagement.ConnectivityTestSourceCloudRunRevisionArgs{
//						Uri: pulumi.String("projects/test-project/locations/us-central1/revisions/name"),
//					},
//					Port: pulumi.Int(80),
//				},
//				Destination: &networkmanagement.ConnectivityTestDestinationArgs{
//					Port:             pulumi.Int(443),
//					ForwardingRule:   pulumi.String("projects/test-project/regions/us-central1/forwardingRules/name"),
//					GkeMasterCluster: pulumi.String("projects/test-project/locations/us-central1/clusters/name"),
//					Fqdn:             pulumi.String("name.us-central1.gke.goog"),
//					CloudSqlInstance: pulumi.String("projects/test-project/instances/name"),
//					RedisInstance:    pulumi.String("projects/test-project/locations/us-central1/instances/name"),
//					RedisCluster:     pulumi.String("projects/test-project/locations/us-central1/clusters/name"),
//				},
//				BypassFirewallChecks: pulumi.Bool(true),
//				RoundTrip:            pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ConnectivityTest can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/global/connectivityTests/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, ConnectivityTest can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networkmanagement/connectivityTest:ConnectivityTest default projects/{{project}}/locations/global/connectivityTests/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkmanagement/connectivityTest:ConnectivityTest default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkmanagement/connectivityTest:ConnectivityTest default {{name}}
// ```
type ConnectivityTest struct {
	pulumi.CustomResourceState

	// Whether the analysis should skip firewall checking. Default value is false.
	BypassFirewallChecks pulumi.BoolPtrOutput `pulumi:"bypassFirewallChecks"`
	// The user-supplied description of the Connectivity Test.
	// Maximum of 512 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Required. Destination specification of the Connectivity Test.
	// You can use a combination of destination IP address, URI of a supported
	// endpoint, project ID, or VPC network to identify the destination location.
	// Reachability analysis proceeds even if the destination location is
	// ambiguous. However, the test result might include endpoints or use a
	// destination that you don't intend to test.
	// Structure is documented below.
	Destination ConnectivityTestDestinationOutput `pulumi:"destination"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Resource labels to represent user-provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Unique name for the connectivity test.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Other projects that may be relevant for reachability analysis.
	// This is applicable to scenarios where a test can cross project
	// boundaries.
	RelatedProjects pulumi.StringArrayOutput `pulumi:"relatedProjects"`
	// Whether run analysis for the return path from destination to source.
	// Default value is false.
	RoundTrip pulumi.BoolPtrOutput `pulumi:"roundTrip"`
	// Required. Source specification of the Connectivity Test.
	// You can use a combination of source IP address, URI of a supported
	// endpoint, project ID, or VPC network to identify the source location.
	// Reachability analysis might proceed even if the source location is
	// ambiguous. However, the test result might include endpoints or use a source
	// that you don't intend to test.
	// Structure is documented below.
	Source ConnectivityTestSourceOutput `pulumi:"source"`
}

// NewConnectivityTest registers a new resource with the given unique name, arguments, and options.
func NewConnectivityTest(ctx *pulumi.Context,
	name string, args *ConnectivityTestArgs, opts ...pulumi.ResourceOption) (*ConnectivityTest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectivityTest
	err := ctx.RegisterResource("gcp:networkmanagement/connectivityTest:ConnectivityTest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectivityTest gets an existing ConnectivityTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectivityTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectivityTestState, opts ...pulumi.ResourceOption) (*ConnectivityTest, error) {
	var resource ConnectivityTest
	err := ctx.ReadResource("gcp:networkmanagement/connectivityTest:ConnectivityTest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectivityTest resources.
type connectivityTestState struct {
	// Whether the analysis should skip firewall checking. Default value is false.
	BypassFirewallChecks *bool `pulumi:"bypassFirewallChecks"`
	// The user-supplied description of the Connectivity Test.
	// Maximum of 512 characters.
	Description *string `pulumi:"description"`
	// Required. Destination specification of the Connectivity Test.
	// You can use a combination of destination IP address, URI of a supported
	// endpoint, project ID, or VPC network to identify the destination location.
	// Reachability analysis proceeds even if the destination location is
	// ambiguous. However, the test result might include endpoints or use a
	// destination that you don't intend to test.
	// Structure is documented below.
	Destination *ConnectivityTestDestination `pulumi:"destination"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Resource labels to represent user-provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Unique name for the connectivity test.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol *string `pulumi:"protocol"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Other projects that may be relevant for reachability analysis.
	// This is applicable to scenarios where a test can cross project
	// boundaries.
	RelatedProjects []string `pulumi:"relatedProjects"`
	// Whether run analysis for the return path from destination to source.
	// Default value is false.
	RoundTrip *bool `pulumi:"roundTrip"`
	// Required. Source specification of the Connectivity Test.
	// You can use a combination of source IP address, URI of a supported
	// endpoint, project ID, or VPC network to identify the source location.
	// Reachability analysis might proceed even if the source location is
	// ambiguous. However, the test result might include endpoints or use a source
	// that you don't intend to test.
	// Structure is documented below.
	Source *ConnectivityTestSource `pulumi:"source"`
}

type ConnectivityTestState struct {
	// Whether the analysis should skip firewall checking. Default value is false.
	BypassFirewallChecks pulumi.BoolPtrInput
	// The user-supplied description of the Connectivity Test.
	// Maximum of 512 characters.
	Description pulumi.StringPtrInput
	// Required. Destination specification of the Connectivity Test.
	// You can use a combination of destination IP address, URI of a supported
	// endpoint, project ID, or VPC network to identify the destination location.
	// Reachability analysis proceeds even if the destination location is
	// ambiguous. However, the test result might include endpoints or use a
	// destination that you don't intend to test.
	// Structure is documented below.
	Destination ConnectivityTestDestinationPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Resource labels to represent user-provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Unique name for the connectivity test.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Other projects that may be relevant for reachability analysis.
	// This is applicable to scenarios where a test can cross project
	// boundaries.
	RelatedProjects pulumi.StringArrayInput
	// Whether run analysis for the return path from destination to source.
	// Default value is false.
	RoundTrip pulumi.BoolPtrInput
	// Required. Source specification of the Connectivity Test.
	// You can use a combination of source IP address, URI of a supported
	// endpoint, project ID, or VPC network to identify the source location.
	// Reachability analysis might proceed even if the source location is
	// ambiguous. However, the test result might include endpoints or use a source
	// that you don't intend to test.
	// Structure is documented below.
	Source ConnectivityTestSourcePtrInput
}

func (ConnectivityTestState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectivityTestState)(nil)).Elem()
}

type connectivityTestArgs struct {
	// Whether the analysis should skip firewall checking. Default value is false.
	BypassFirewallChecks *bool `pulumi:"bypassFirewallChecks"`
	// The user-supplied description of the Connectivity Test.
	// Maximum of 512 characters.
	Description *string `pulumi:"description"`
	// Required. Destination specification of the Connectivity Test.
	// You can use a combination of destination IP address, URI of a supported
	// endpoint, project ID, or VPC network to identify the destination location.
	// Reachability analysis proceeds even if the destination location is
	// ambiguous. However, the test result might include endpoints or use a
	// destination that you don't intend to test.
	// Structure is documented below.
	Destination ConnectivityTestDestination `pulumi:"destination"`
	// Resource labels to represent user-provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Unique name for the connectivity test.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol *string `pulumi:"protocol"`
	// Other projects that may be relevant for reachability analysis.
	// This is applicable to scenarios where a test can cross project
	// boundaries.
	RelatedProjects []string `pulumi:"relatedProjects"`
	// Whether run analysis for the return path from destination to source.
	// Default value is false.
	RoundTrip *bool `pulumi:"roundTrip"`
	// Required. Source specification of the Connectivity Test.
	// You can use a combination of source IP address, URI of a supported
	// endpoint, project ID, or VPC network to identify the source location.
	// Reachability analysis might proceed even if the source location is
	// ambiguous. However, the test result might include endpoints or use a source
	// that you don't intend to test.
	// Structure is documented below.
	Source ConnectivityTestSource `pulumi:"source"`
}

// The set of arguments for constructing a ConnectivityTest resource.
type ConnectivityTestArgs struct {
	// Whether the analysis should skip firewall checking. Default value is false.
	BypassFirewallChecks pulumi.BoolPtrInput
	// The user-supplied description of the Connectivity Test.
	// Maximum of 512 characters.
	Description pulumi.StringPtrInput
	// Required. Destination specification of the Connectivity Test.
	// You can use a combination of destination IP address, URI of a supported
	// endpoint, project ID, or VPC network to identify the destination location.
	// Reachability analysis proceeds even if the destination location is
	// ambiguous. However, the test result might include endpoints or use a
	// destination that you don't intend to test.
	// Structure is documented below.
	Destination ConnectivityTestDestinationInput
	// Resource labels to represent user-provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Unique name for the connectivity test.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol pulumi.StringPtrInput
	// Other projects that may be relevant for reachability analysis.
	// This is applicable to scenarios where a test can cross project
	// boundaries.
	RelatedProjects pulumi.StringArrayInput
	// Whether run analysis for the return path from destination to source.
	// Default value is false.
	RoundTrip pulumi.BoolPtrInput
	// Required. Source specification of the Connectivity Test.
	// You can use a combination of source IP address, URI of a supported
	// endpoint, project ID, or VPC network to identify the source location.
	// Reachability analysis might proceed even if the source location is
	// ambiguous. However, the test result might include endpoints or use a source
	// that you don't intend to test.
	// Structure is documented below.
	Source ConnectivityTestSourceInput
}

func (ConnectivityTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectivityTestArgs)(nil)).Elem()
}

type ConnectivityTestInput interface {
	pulumi.Input

	ToConnectivityTestOutput() ConnectivityTestOutput
	ToConnectivityTestOutputWithContext(ctx context.Context) ConnectivityTestOutput
}

func (*ConnectivityTest) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectivityTest)(nil)).Elem()
}

func (i *ConnectivityTest) ToConnectivityTestOutput() ConnectivityTestOutput {
	return i.ToConnectivityTestOutputWithContext(context.Background())
}

func (i *ConnectivityTest) ToConnectivityTestOutputWithContext(ctx context.Context) ConnectivityTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectivityTestOutput)
}

// ConnectivityTestArrayInput is an input type that accepts ConnectivityTestArray and ConnectivityTestArrayOutput values.
// You can construct a concrete instance of `ConnectivityTestArrayInput` via:
//
//	ConnectivityTestArray{ ConnectivityTestArgs{...} }
type ConnectivityTestArrayInput interface {
	pulumi.Input

	ToConnectivityTestArrayOutput() ConnectivityTestArrayOutput
	ToConnectivityTestArrayOutputWithContext(context.Context) ConnectivityTestArrayOutput
}

type ConnectivityTestArray []ConnectivityTestInput

func (ConnectivityTestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectivityTest)(nil)).Elem()
}

func (i ConnectivityTestArray) ToConnectivityTestArrayOutput() ConnectivityTestArrayOutput {
	return i.ToConnectivityTestArrayOutputWithContext(context.Background())
}

func (i ConnectivityTestArray) ToConnectivityTestArrayOutputWithContext(ctx context.Context) ConnectivityTestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectivityTestArrayOutput)
}

// ConnectivityTestMapInput is an input type that accepts ConnectivityTestMap and ConnectivityTestMapOutput values.
// You can construct a concrete instance of `ConnectivityTestMapInput` via:
//
//	ConnectivityTestMap{ "key": ConnectivityTestArgs{...} }
type ConnectivityTestMapInput interface {
	pulumi.Input

	ToConnectivityTestMapOutput() ConnectivityTestMapOutput
	ToConnectivityTestMapOutputWithContext(context.Context) ConnectivityTestMapOutput
}

type ConnectivityTestMap map[string]ConnectivityTestInput

func (ConnectivityTestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectivityTest)(nil)).Elem()
}

func (i ConnectivityTestMap) ToConnectivityTestMapOutput() ConnectivityTestMapOutput {
	return i.ToConnectivityTestMapOutputWithContext(context.Background())
}

func (i ConnectivityTestMap) ToConnectivityTestMapOutputWithContext(ctx context.Context) ConnectivityTestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectivityTestMapOutput)
}

type ConnectivityTestOutput struct{ *pulumi.OutputState }

func (ConnectivityTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectivityTest)(nil)).Elem()
}

func (o ConnectivityTestOutput) ToConnectivityTestOutput() ConnectivityTestOutput {
	return o
}

func (o ConnectivityTestOutput) ToConnectivityTestOutputWithContext(ctx context.Context) ConnectivityTestOutput {
	return o
}

// Whether the analysis should skip firewall checking. Default value is false.
func (o ConnectivityTestOutput) BypassFirewallChecks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.BoolPtrOutput { return v.BypassFirewallChecks }).(pulumi.BoolPtrOutput)
}

// The user-supplied description of the Connectivity Test.
// Maximum of 512 characters.
func (o ConnectivityTestOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Required. Destination specification of the Connectivity Test.
// You can use a combination of destination IP address, URI of a supported
// endpoint, project ID, or VPC network to identify the destination location.
// Reachability analysis proceeds even if the destination location is
// ambiguous. However, the test result might include endpoints or use a
// destination that you don't intend to test.
// Structure is documented below.
func (o ConnectivityTestOutput) Destination() ConnectivityTestDestinationOutput {
	return o.ApplyT(func(v *ConnectivityTest) ConnectivityTestDestinationOutput { return v.Destination }).(ConnectivityTestDestinationOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o ConnectivityTestOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Resource labels to represent user-provided metadata.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o ConnectivityTestOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Unique name for the connectivity test.
func (o ConnectivityTestOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ConnectivityTestOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// IP Protocol of the test. When not provided, "TCP" is assumed.
func (o ConnectivityTestOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o ConnectivityTestOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Other projects that may be relevant for reachability analysis.
// This is applicable to scenarios where a test can cross project
// boundaries.
func (o ConnectivityTestOutput) RelatedProjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringArrayOutput { return v.RelatedProjects }).(pulumi.StringArrayOutput)
}

// Whether run analysis for the return path from destination to source.
// Default value is false.
func (o ConnectivityTestOutput) RoundTrip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.BoolPtrOutput { return v.RoundTrip }).(pulumi.BoolPtrOutput)
}

// Required. Source specification of the Connectivity Test.
// You can use a combination of source IP address, URI of a supported
// endpoint, project ID, or VPC network to identify the source location.
// Reachability analysis might proceed even if the source location is
// ambiguous. However, the test result might include endpoints or use a source
// that you don't intend to test.
// Structure is documented below.
func (o ConnectivityTestOutput) Source() ConnectivityTestSourceOutput {
	return o.ApplyT(func(v *ConnectivityTest) ConnectivityTestSourceOutput { return v.Source }).(ConnectivityTestSourceOutput)
}

type ConnectivityTestArrayOutput struct{ *pulumi.OutputState }

func (ConnectivityTestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectivityTest)(nil)).Elem()
}

func (o ConnectivityTestArrayOutput) ToConnectivityTestArrayOutput() ConnectivityTestArrayOutput {
	return o
}

func (o ConnectivityTestArrayOutput) ToConnectivityTestArrayOutputWithContext(ctx context.Context) ConnectivityTestArrayOutput {
	return o
}

func (o ConnectivityTestArrayOutput) Index(i pulumi.IntInput) ConnectivityTestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectivityTest {
		return vs[0].([]*ConnectivityTest)[vs[1].(int)]
	}).(ConnectivityTestOutput)
}

type ConnectivityTestMapOutput struct{ *pulumi.OutputState }

func (ConnectivityTestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectivityTest)(nil)).Elem()
}

func (o ConnectivityTestMapOutput) ToConnectivityTestMapOutput() ConnectivityTestMapOutput {
	return o
}

func (o ConnectivityTestMapOutput) ToConnectivityTestMapOutputWithContext(ctx context.Context) ConnectivityTestMapOutput {
	return o
}

func (o ConnectivityTestMapOutput) MapIndex(k pulumi.StringInput) ConnectivityTestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectivityTest {
		return vs[0].(map[string]*ConnectivityTest)[vs[1].(string)]
	}).(ConnectivityTestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectivityTestInput)(nil)).Elem(), &ConnectivityTest{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectivityTestArrayInput)(nil)).Elem(), ConnectivityTestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectivityTestMapInput)(nil)).Elem(), ConnectivityTestMap{})
	pulumi.RegisterOutputType(ConnectivityTestOutput{})
	pulumi.RegisterOutputType(ConnectivityTestArrayOutput{})
	pulumi.RegisterOutputType(ConnectivityTestMapOutput{})
}
