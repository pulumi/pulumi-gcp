// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkconnectivity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The internal range resource for IPAM operations within a VPC network. Used to represent a private address range along with behavioral characterstics of that range (its usage and peering behavior). Networking resources can link to this range if they are created as belonging to it.
//
// To get more information about InternalRange, see:
//
// * [API documentation](https://cloud.google.com/network-connectivity/docs/reference/networkconnectivity/rest/v1/projects.locations.internalRanges)
// * How-to Guides
//   - [Use internal ranges](https://cloud.google.com/vpc/docs/create-use-internal-ranges)
//
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/networkconnectivity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
//				Name:                  pulumi.String("internal-ranges"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkconnectivity.NewInternalRange(ctx, "default", &networkconnectivity.InternalRangeArgs{
//				Name:        pulumi.String("basic"),
//				Description: pulumi.String("Test internal range"),
//				Network:     defaultNetwork.SelfLink,
//				Usage:       pulumi.String("FOR_VPC"),
//				Peering:     pulumi.String("FOR_SELF"),
//				IpCidrRange: pulumi.String("10.0.0.0/24"),
//				Labels: pulumi.StringMap{
//					"label-a": pulumi.String("b"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/networkconnectivity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
//				Name:                  pulumi.String("internal-ranges"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkconnectivity.NewInternalRange(ctx, "default", &networkconnectivity.InternalRangeArgs{
//				Name:         pulumi.String("automatic-reservation"),
//				Network:      defaultNetwork.ID(),
//				Usage:        pulumi.String("FOR_VPC"),
//				Peering:      pulumi.String("FOR_SELF"),
//				PrefixLength: pulumi.Int(24),
//				TargetCidrRanges: pulumi.StringArray{
//					pulumi.String("192.16.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/networkconnectivity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
//				Name:                  pulumi.String("internal-ranges"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkconnectivity.NewInternalRange(ctx, "default", &networkconnectivity.InternalRangeArgs{
//				Name:        pulumi.String("external-ranges"),
//				Network:     defaultNetwork.ID(),
//				Usage:       pulumi.String("EXTERNAL_TO_VPC"),
//				Peering:     pulumi.String("FOR_SELF"),
//				IpCidrRange: pulumi.String("172.16.0.0/24"),
//				Labels: pulumi.StringMap{
//					"external-reserved-range": pulumi.String("on-premises"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/networkconnectivity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
//				Name:                  pulumi.String("internal-ranges"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSubnetwork, err := compute.NewSubnetwork(ctx, "default", &compute.SubnetworkArgs{
//				Name:        pulumi.String("overlapping-subnet"),
//				IpCidrRange: pulumi.String("10.0.0.0/24"),
//				Region:      pulumi.String("us-central1"),
//				Network:     defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkconnectivity.NewInternalRange(ctx, "default", &networkconnectivity.InternalRangeArgs{
//				Name:        pulumi.String("overlap-range"),
//				Description: pulumi.String("Test internal range"),
//				Network:     defaultNetwork.ID(),
//				Usage:       pulumi.String("FOR_VPC"),
//				Peering:     pulumi.String("FOR_SELF"),
//				IpCidrRange: pulumi.String("10.0.0.0/30"),
//				Overlaps: pulumi.StringArray{
//					pulumi.String("OVERLAP_EXISTING_SUBNET_RANGE"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				defaultSubnetwork,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// InternalRange can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/global/internalRanges/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, InternalRange can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networkconnectivity/internalRange:InternalRange default projects/{{project}}/locations/global/internalRanges/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkconnectivity/internalRange:InternalRange default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkconnectivity/internalRange:InternalRange default {{name}}
// ```
type InternalRange struct {
	pulumi.CustomResourceState

	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The IP range that this internal range defines.
	IpCidrRange pulumi.StringOutput `pulumi:"ipCidrRange"`
	// User-defined labels.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the policy based route.
	Name pulumi.StringOutput `pulumi:"name"`
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network pulumi.StringOutput `pulumi:"network"`
	// Optional. Types of resources that are allowed to overlap with the current internal range.
	// Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
	Overlaps pulumi.StringArrayOutput `pulumi:"overlaps"`
	// The type of peering set for this internal range.
	// Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
	Peering pulumi.StringOutput `pulumi:"peering"`
	// An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
	// If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
	PrefixLength pulumi.IntPtrOutput `pulumi:"prefixLength"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Optional. Can be set to narrow down or pick a different address space while searching for a free range.
	// If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
	TargetCidrRanges pulumi.StringArrayOutput `pulumi:"targetCidrRanges"`
	// The type of usage set for this InternalRange.
	// Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`.
	Usage pulumi.StringOutput `pulumi:"usage"`
	// Output only. The list of resources that refer to this internal range.
	// Resources that use the internal range for their range allocation are referred to as users of the range.
	// Other resources mark themselves as users while doing so by creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal range referred to. Can be empty.
	Users pulumi.StringArrayOutput `pulumi:"users"`
}

// NewInternalRange registers a new resource with the given unique name, arguments, and options.
func NewInternalRange(ctx *pulumi.Context,
	name string, args *InternalRangeArgs, opts ...pulumi.ResourceOption) (*InternalRange, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.Peering == nil {
		return nil, errors.New("invalid value for required argument 'Peering'")
	}
	if args.Usage == nil {
		return nil, errors.New("invalid value for required argument 'Usage'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InternalRange
	err := ctx.RegisterResource("gcp:networkconnectivity/internalRange:InternalRange", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInternalRange gets an existing InternalRange resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInternalRange(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InternalRangeState, opts ...pulumi.ResourceOption) (*InternalRange, error) {
	var resource InternalRange
	err := ctx.ReadResource("gcp:networkconnectivity/internalRange:InternalRange", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InternalRange resources.
type internalRangeState struct {
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The IP range that this internal range defines.
	IpCidrRange *string `pulumi:"ipCidrRange"`
	// User-defined labels.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The name of the policy based route.
	Name *string `pulumi:"name"`
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network *string `pulumi:"network"`
	// Optional. Types of resources that are allowed to overlap with the current internal range.
	// Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
	Overlaps []string `pulumi:"overlaps"`
	// The type of peering set for this internal range.
	// Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
	Peering *string `pulumi:"peering"`
	// An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
	// If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
	PrefixLength *int `pulumi:"prefixLength"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Optional. Can be set to narrow down or pick a different address space while searching for a free range.
	// If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
	TargetCidrRanges []string `pulumi:"targetCidrRanges"`
	// The type of usage set for this InternalRange.
	// Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`.
	Usage *string `pulumi:"usage"`
	// Output only. The list of resources that refer to this internal range.
	// Resources that use the internal range for their range allocation are referred to as users of the range.
	// Other resources mark themselves as users while doing so by creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal range referred to. Can be empty.
	Users []string `pulumi:"users"`
}

type InternalRangeState struct {
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The IP range that this internal range defines.
	IpCidrRange pulumi.StringPtrInput
	// User-defined labels.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The name of the policy based route.
	Name pulumi.StringPtrInput
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network pulumi.StringPtrInput
	// Optional. Types of resources that are allowed to overlap with the current internal range.
	// Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
	Overlaps pulumi.StringArrayInput
	// The type of peering set for this internal range.
	// Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
	Peering pulumi.StringPtrInput
	// An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
	// If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
	PrefixLength pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Optional. Can be set to narrow down or pick a different address space while searching for a free range.
	// If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
	TargetCidrRanges pulumi.StringArrayInput
	// The type of usage set for this InternalRange.
	// Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`.
	Usage pulumi.StringPtrInput
	// Output only. The list of resources that refer to this internal range.
	// Resources that use the internal range for their range allocation are referred to as users of the range.
	// Other resources mark themselves as users while doing so by creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal range referred to. Can be empty.
	Users pulumi.StringArrayInput
}

func (InternalRangeState) ElementType() reflect.Type {
	return reflect.TypeOf((*internalRangeState)(nil)).Elem()
}

type internalRangeArgs struct {
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// The IP range that this internal range defines.
	IpCidrRange *string `pulumi:"ipCidrRange"`
	// User-defined labels.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The name of the policy based route.
	Name *string `pulumi:"name"`
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network string `pulumi:"network"`
	// Optional. Types of resources that are allowed to overlap with the current internal range.
	// Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
	Overlaps []string `pulumi:"overlaps"`
	// The type of peering set for this internal range.
	// Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
	Peering string `pulumi:"peering"`
	// An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
	// If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
	PrefixLength *int `pulumi:"prefixLength"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Optional. Can be set to narrow down or pick a different address space while searching for a free range.
	// If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
	TargetCidrRanges []string `pulumi:"targetCidrRanges"`
	// The type of usage set for this InternalRange.
	// Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`.
	Usage string `pulumi:"usage"`
}

// The set of arguments for constructing a InternalRange resource.
type InternalRangeArgs struct {
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// The IP range that this internal range defines.
	IpCidrRange pulumi.StringPtrInput
	// User-defined labels.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The name of the policy based route.
	Name pulumi.StringPtrInput
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network pulumi.StringInput
	// Optional. Types of resources that are allowed to overlap with the current internal range.
	// Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
	Overlaps pulumi.StringArrayInput
	// The type of peering set for this internal range.
	// Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
	Peering pulumi.StringInput
	// An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
	// If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
	PrefixLength pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Optional. Can be set to narrow down or pick a different address space while searching for a free range.
	// If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
	TargetCidrRanges pulumi.StringArrayInput
	// The type of usage set for this InternalRange.
	// Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`.
	Usage pulumi.StringInput
}

func (InternalRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*internalRangeArgs)(nil)).Elem()
}

type InternalRangeInput interface {
	pulumi.Input

	ToInternalRangeOutput() InternalRangeOutput
	ToInternalRangeOutputWithContext(ctx context.Context) InternalRangeOutput
}

func (*InternalRange) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalRange)(nil)).Elem()
}

func (i *InternalRange) ToInternalRangeOutput() InternalRangeOutput {
	return i.ToInternalRangeOutputWithContext(context.Background())
}

func (i *InternalRange) ToInternalRangeOutputWithContext(ctx context.Context) InternalRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalRangeOutput)
}

// InternalRangeArrayInput is an input type that accepts InternalRangeArray and InternalRangeArrayOutput values.
// You can construct a concrete instance of `InternalRangeArrayInput` via:
//
//	InternalRangeArray{ InternalRangeArgs{...} }
type InternalRangeArrayInput interface {
	pulumi.Input

	ToInternalRangeArrayOutput() InternalRangeArrayOutput
	ToInternalRangeArrayOutputWithContext(context.Context) InternalRangeArrayOutput
}

type InternalRangeArray []InternalRangeInput

func (InternalRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InternalRange)(nil)).Elem()
}

func (i InternalRangeArray) ToInternalRangeArrayOutput() InternalRangeArrayOutput {
	return i.ToInternalRangeArrayOutputWithContext(context.Background())
}

func (i InternalRangeArray) ToInternalRangeArrayOutputWithContext(ctx context.Context) InternalRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalRangeArrayOutput)
}

// InternalRangeMapInput is an input type that accepts InternalRangeMap and InternalRangeMapOutput values.
// You can construct a concrete instance of `InternalRangeMapInput` via:
//
//	InternalRangeMap{ "key": InternalRangeArgs{...} }
type InternalRangeMapInput interface {
	pulumi.Input

	ToInternalRangeMapOutput() InternalRangeMapOutput
	ToInternalRangeMapOutputWithContext(context.Context) InternalRangeMapOutput
}

type InternalRangeMap map[string]InternalRangeInput

func (InternalRangeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InternalRange)(nil)).Elem()
}

func (i InternalRangeMap) ToInternalRangeMapOutput() InternalRangeMapOutput {
	return i.ToInternalRangeMapOutputWithContext(context.Background())
}

func (i InternalRangeMap) ToInternalRangeMapOutputWithContext(ctx context.Context) InternalRangeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalRangeMapOutput)
}

type InternalRangeOutput struct{ *pulumi.OutputState }

func (InternalRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalRange)(nil)).Elem()
}

func (o InternalRangeOutput) ToInternalRangeOutput() InternalRangeOutput {
	return o
}

func (o InternalRangeOutput) ToInternalRangeOutputWithContext(ctx context.Context) InternalRangeOutput {
	return o
}

// An optional description of this resource.
func (o InternalRangeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o InternalRangeOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The IP range that this internal range defines.
func (o InternalRangeOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringOutput { return v.IpCidrRange }).(pulumi.StringOutput)
}

// User-defined labels.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o InternalRangeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the policy based route.
func (o InternalRangeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
func (o InternalRangeOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// Optional. Types of resources that are allowed to overlap with the current internal range.
// Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
func (o InternalRangeOutput) Overlaps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringArrayOutput { return v.Overlaps }).(pulumi.StringArrayOutput)
}

// The type of peering set for this internal range.
// Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
func (o InternalRangeOutput) Peering() pulumi.StringOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringOutput { return v.Peering }).(pulumi.StringOutput)
}

// An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
// If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
func (o InternalRangeOutput) PrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.IntPtrOutput { return v.PrefixLength }).(pulumi.IntPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o InternalRangeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o InternalRangeOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Optional. Can be set to narrow down or pick a different address space while searching for a free range.
// If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
func (o InternalRangeOutput) TargetCidrRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringArrayOutput { return v.TargetCidrRanges }).(pulumi.StringArrayOutput)
}

// The type of usage set for this InternalRange.
// Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`.
func (o InternalRangeOutput) Usage() pulumi.StringOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringOutput { return v.Usage }).(pulumi.StringOutput)
}

// Output only. The list of resources that refer to this internal range.
// Resources that use the internal range for their range allocation are referred to as users of the range.
// Other resources mark themselves as users while doing so by creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal range referred to. Can be empty.
func (o InternalRangeOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InternalRange) pulumi.StringArrayOutput { return v.Users }).(pulumi.StringArrayOutput)
}

type InternalRangeArrayOutput struct{ *pulumi.OutputState }

func (InternalRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InternalRange)(nil)).Elem()
}

func (o InternalRangeArrayOutput) ToInternalRangeArrayOutput() InternalRangeArrayOutput {
	return o
}

func (o InternalRangeArrayOutput) ToInternalRangeArrayOutputWithContext(ctx context.Context) InternalRangeArrayOutput {
	return o
}

func (o InternalRangeArrayOutput) Index(i pulumi.IntInput) InternalRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InternalRange {
		return vs[0].([]*InternalRange)[vs[1].(int)]
	}).(InternalRangeOutput)
}

type InternalRangeMapOutput struct{ *pulumi.OutputState }

func (InternalRangeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InternalRange)(nil)).Elem()
}

func (o InternalRangeMapOutput) ToInternalRangeMapOutput() InternalRangeMapOutput {
	return o
}

func (o InternalRangeMapOutput) ToInternalRangeMapOutputWithContext(ctx context.Context) InternalRangeMapOutput {
	return o
}

func (o InternalRangeMapOutput) MapIndex(k pulumi.StringInput) InternalRangeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InternalRange {
		return vs[0].(map[string]*InternalRange)[vs[1].(string)]
	}).(InternalRangeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InternalRangeInput)(nil)).Elem(), &InternalRange{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternalRangeArrayInput)(nil)).Elem(), InternalRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternalRangeMapInput)(nil)).Elem(), InternalRangeMap{})
	pulumi.RegisterOutputType(InternalRangeOutput{})
	pulumi.RegisterOutputType(InternalRangeArrayOutput{})
	pulumi.RegisterOutputType(InternalRangeMapOutput{})
}
