// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkconnectivity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The NetworkConnectivity Hub resource
//
// ## Example Usage
// ### Basic_hub
// A basic test of a networkconnectivity hub
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/networkconnectivity"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := networkconnectivity.NewHub(ctx, "primary", &networkconnectivity.HubArgs{
// 			Description: pulumi.String("A sample hub"),
// 			Labels: pulumi.StringMap{
// 				"label-one": pulumi.String("value-one"),
// 			},
// 			Project: pulumi.String("my-project-name"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Hub can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:networkconnectivity/hub:Hub default projects/{{project}}/locations/global/hubs/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:networkconnectivity/hub:Hub default {{project}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:networkconnectivity/hub:Hub default {{name}}
// ```
type Hub struct {
	pulumi.CustomResourceState

	// Output only. The time the hub was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// An optional description of the hub.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// The VPC network associated with this hub's spokes. All of the VPN tunnels, VLAN attachments, and router appliance
	// instances referenced by this hub's spokes must belong to this VPC network. This field is read-only. Network Connectivity
	// Center automatically populates it based on the set of spokes attached to the hub.
	RoutingVpcs HubRoutingVpcArrayOutput `pulumi:"routingVpcs"`
	// Output only. The current lifecycle state of this hub. Possible values: STATE_UNSPECIFIED, CREATING, ACTIVE, DELETING
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. The Google-generated UUID for the hub. This value is unique across all hub resources. If a hub is deleted
	// and another with the same name is created, the new hub is assigned a different unique_id.
	UniqueId pulumi.StringOutput `pulumi:"uniqueId"`
	// Output only. The time the hub was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewHub registers a new resource with the given unique name, arguments, and options.
func NewHub(ctx *pulumi.Context,
	name string, args *HubArgs, opts ...pulumi.ResourceOption) (*Hub, error) {
	if args == nil {
		args = &HubArgs{}
	}

	var resource Hub
	err := ctx.RegisterResource("gcp:networkconnectivity/hub:Hub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHub gets an existing Hub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubState, opts ...pulumi.ResourceOption) (*Hub, error) {
	var resource Hub
	err := ctx.ReadResource("gcp:networkconnectivity/hub:Hub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hub resources.
type hubState struct {
	// Output only. The time the hub was created.
	CreateTime *string `pulumi:"createTime"`
	// An optional description of the hub.
	Description *string `pulumi:"description"`
	// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
	Labels map[string]string `pulumi:"labels"`
	// Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// The VPC network associated with this hub's spokes. All of the VPN tunnels, VLAN attachments, and router appliance
	// instances referenced by this hub's spokes must belong to this VPC network. This field is read-only. Network Connectivity
	// Center automatically populates it based on the set of spokes attached to the hub.
	RoutingVpcs []HubRoutingVpc `pulumi:"routingVpcs"`
	// Output only. The current lifecycle state of this hub. Possible values: STATE_UNSPECIFIED, CREATING, ACTIVE, DELETING
	State *string `pulumi:"state"`
	// Output only. The Google-generated UUID for the hub. This value is unique across all hub resources. If a hub is deleted
	// and another with the same name is created, the new hub is assigned a different unique_id.
	UniqueId *string `pulumi:"uniqueId"`
	// Output only. The time the hub was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type HubState struct {
	// Output only. The time the hub was created.
	CreateTime pulumi.StringPtrInput
	// An optional description of the hub.
	Description pulumi.StringPtrInput
	// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
	Labels pulumi.StringMapInput
	// Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// The VPC network associated with this hub's spokes. All of the VPN tunnels, VLAN attachments, and router appliance
	// instances referenced by this hub's spokes must belong to this VPC network. This field is read-only. Network Connectivity
	// Center automatically populates it based on the set of spokes attached to the hub.
	RoutingVpcs HubRoutingVpcArrayInput
	// Output only. The current lifecycle state of this hub. Possible values: STATE_UNSPECIFIED, CREATING, ACTIVE, DELETING
	State pulumi.StringPtrInput
	// Output only. The Google-generated UUID for the hub. This value is unique across all hub resources. If a hub is deleted
	// and another with the same name is created, the new hub is assigned a different unique_id.
	UniqueId pulumi.StringPtrInput
	// Output only. The time the hub was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (HubState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubState)(nil)).Elem()
}

type hubArgs struct {
	// An optional description of the hub.
	Description *string `pulumi:"description"`
	// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
	Labels map[string]string `pulumi:"labels"`
	// Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Hub resource.
type HubArgs struct {
	// An optional description of the hub.
	Description pulumi.StringPtrInput
	// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
	Labels pulumi.StringMapInput
	// Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
}

func (HubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubArgs)(nil)).Elem()
}

type HubInput interface {
	pulumi.Input

	ToHubOutput() HubOutput
	ToHubOutputWithContext(ctx context.Context) HubOutput
}

func (*Hub) ElementType() reflect.Type {
	return reflect.TypeOf((**Hub)(nil)).Elem()
}

func (i *Hub) ToHubOutput() HubOutput {
	return i.ToHubOutputWithContext(context.Background())
}

func (i *Hub) ToHubOutputWithContext(ctx context.Context) HubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubOutput)
}

// HubArrayInput is an input type that accepts HubArray and HubArrayOutput values.
// You can construct a concrete instance of `HubArrayInput` via:
//
//          HubArray{ HubArgs{...} }
type HubArrayInput interface {
	pulumi.Input

	ToHubArrayOutput() HubArrayOutput
	ToHubArrayOutputWithContext(context.Context) HubArrayOutput
}

type HubArray []HubInput

func (HubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hub)(nil)).Elem()
}

func (i HubArray) ToHubArrayOutput() HubArrayOutput {
	return i.ToHubArrayOutputWithContext(context.Background())
}

func (i HubArray) ToHubArrayOutputWithContext(ctx context.Context) HubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubArrayOutput)
}

// HubMapInput is an input type that accepts HubMap and HubMapOutput values.
// You can construct a concrete instance of `HubMapInput` via:
//
//          HubMap{ "key": HubArgs{...} }
type HubMapInput interface {
	pulumi.Input

	ToHubMapOutput() HubMapOutput
	ToHubMapOutputWithContext(context.Context) HubMapOutput
}

type HubMap map[string]HubInput

func (HubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hub)(nil)).Elem()
}

func (i HubMap) ToHubMapOutput() HubMapOutput {
	return i.ToHubMapOutputWithContext(context.Background())
}

func (i HubMap) ToHubMapOutputWithContext(ctx context.Context) HubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubMapOutput)
}

type HubOutput struct{ *pulumi.OutputState }

func (HubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hub)(nil)).Elem()
}

func (o HubOutput) ToHubOutput() HubOutput {
	return o
}

func (o HubOutput) ToHubOutputWithContext(ctx context.Context) HubOutput {
	return o
}

// Output only. The time the hub was created.
func (o HubOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// An optional description of the hub.
func (o HubOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
func (o HubOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`
func (o HubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project for the resource
func (o HubOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The VPC network associated with this hub's spokes. All of the VPN tunnels, VLAN attachments, and router appliance
// instances referenced by this hub's spokes must belong to this VPC network. This field is read-only. Network Connectivity
// Center automatically populates it based on the set of spokes attached to the hub.
func (o HubOutput) RoutingVpcs() HubRoutingVpcArrayOutput {
	return o.ApplyT(func(v *Hub) HubRoutingVpcArrayOutput { return v.RoutingVpcs }).(HubRoutingVpcArrayOutput)
}

// Output only. The current lifecycle state of this hub. Possible values: STATE_UNSPECIFIED, CREATING, ACTIVE, DELETING
func (o HubOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. The Google-generated UUID for the hub. This value is unique across all hub resources. If a hub is deleted
// and another with the same name is created, the new hub is assigned a different unique_id.
func (o HubOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.UniqueId }).(pulumi.StringOutput)
}

// Output only. The time the hub was last updated.
func (o HubOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type HubArrayOutput struct{ *pulumi.OutputState }

func (HubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hub)(nil)).Elem()
}

func (o HubArrayOutput) ToHubArrayOutput() HubArrayOutput {
	return o
}

func (o HubArrayOutput) ToHubArrayOutputWithContext(ctx context.Context) HubArrayOutput {
	return o
}

func (o HubArrayOutput) Index(i pulumi.IntInput) HubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hub {
		return vs[0].([]*Hub)[vs[1].(int)]
	}).(HubOutput)
}

type HubMapOutput struct{ *pulumi.OutputState }

func (HubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hub)(nil)).Elem()
}

func (o HubMapOutput) ToHubMapOutput() HubMapOutput {
	return o
}

func (o HubMapOutput) ToHubMapOutputWithContext(ctx context.Context) HubMapOutput {
	return o
}

func (o HubMapOutput) MapIndex(k pulumi.StringInput) HubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hub {
		return vs[0].(map[string]*Hub)[vs[1].(string)]
	}).(HubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubInput)(nil)).Elem(), &Hub{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubArrayInput)(nil)).Elem(), HubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubMapInput)(nil)).Elem(), HubMap{})
	pulumi.RegisterOutputType(HubOutput{})
	pulumi.RegisterOutputType(HubArrayOutput{})
	pulumi.RegisterOutputType(HubMapOutput{})
}
