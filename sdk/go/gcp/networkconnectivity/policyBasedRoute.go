// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkconnectivity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Policy-based Routes are more powerful routes that route L4 network traffic based on not just destination IP, but also source IP, protocol and more. A Policy-based Route always take precedence when it conflicts with other types of routes.
//
// To get more information about PolicyBasedRoute, see:
//
// * [API documentation](https://cloud.google.com/network-connectivity/docs/reference/networkconnectivity/rest/v1/projects.locations.global.policyBasedRoutes)
// * How-to Guides
//   - [Use policy-based routes](https://cloud.google.com/vpc/docs/use-policy-based-routes#api)
//
// ## Example Usage
//
// ### Network Connectivity Policy Based Route Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkconnectivity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myNetwork, err := compute.NewNetwork(ctx, "my_network", &compute.NetworkArgs{
//				Name:                  pulumi.String("my-network"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkconnectivity.NewPolicyBasedRoute(ctx, "default", &networkconnectivity.PolicyBasedRouteArgs{
//				Name:    pulumi.String("my-pbr"),
//				Network: myNetwork.ID(),
//				Filter: &networkconnectivity.PolicyBasedRouteFilterArgs{
//					ProtocolVersion: pulumi.String("IPV4"),
//				},
//				NextHopOtherRoutes: pulumi.String("DEFAULT_ROUTING"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Network Connectivity Policy Based Route Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkconnectivity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myNetwork, err := compute.NewNetwork(ctx, "my_network", &compute.NetworkArgs{
//				Name:                  pulumi.String("my-network"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// This example substitutes an arbitrary internal IP for an internal network
//			// load balancer for brevity. Consult https://cloud.google.com/load-balancing/docs/internal
//			// to set one up.
//			ilb, err := compute.NewGlobalAddress(ctx, "ilb", &compute.GlobalAddressArgs{
//				Name: pulumi.String("my-ilb"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkconnectivity.NewPolicyBasedRoute(ctx, "default", &networkconnectivity.PolicyBasedRouteArgs{
//				Name:        pulumi.String("my-pbr"),
//				Description: pulumi.String("My routing policy"),
//				Network:     myNetwork.ID(),
//				Priority:    pulumi.Int(2302),
//				Filter: &networkconnectivity.PolicyBasedRouteFilterArgs{
//					ProtocolVersion: pulumi.String("IPV4"),
//					IpProtocol:      pulumi.String("UDP"),
//					SrcRange:        pulumi.String("10.0.0.0/24"),
//					DestRange:       pulumi.String("0.0.0.0/0"),
//				},
//				NextHopIlbIp: ilb.Address,
//				VirtualMachine: &networkconnectivity.PolicyBasedRouteVirtualMachineArgs{
//					Tags: pulumi.StringArray{
//						pulumi.String("restricted"),
//					},
//				},
//				Labels: pulumi.StringMap{
//					"env": pulumi.String("default"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PolicyBasedRoute can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/global/policyBasedRoutes/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, PolicyBasedRoute can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute default projects/{{project}}/locations/global/policyBasedRoutes/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute default {{name}}
// ```
type PolicyBasedRoute struct {
	pulumi.CustomResourceState

	// Time when the policy-based route was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The filter to match L4 traffic.
	// Structure is documented below.
	Filter PolicyBasedRouteFilterOutput `pulumi:"filter"`
	// The interconnect attachments that this policy-based route applies to.
	InterconnectAttachment PolicyBasedRouteInterconnectAttachmentPtrOutput `pulumi:"interconnectAttachment"`
	// Type of this resource.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the policy based route.
	Name pulumi.StringOutput `pulumi:"name"`
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network pulumi.StringOutput `pulumi:"network"`
	// The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
	NextHopIlbIp pulumi.StringPtrOutput `pulumi:"nextHopIlbIp"`
	// Other routes that will be referenced to determine the next hop of the packet. Possible values: ["DEFAULT_ROUTING"]
	NextHopOtherRoutes pulumi.StringPtrOutput `pulumi:"nextHopOtherRoutes"`
	// The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching
	// policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered
	// priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	Project  pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Time when the policy-based route was created.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// VM instances to which this policy-based route applies to.
	VirtualMachine PolicyBasedRouteVirtualMachinePtrOutput `pulumi:"virtualMachine"`
	// If potential misconfigurations are detected for this route, this field will be populated with warning messages.
	// Structure is documented below.
	Warnings PolicyBasedRouteWarningArrayOutput `pulumi:"warnings"`
}

// NewPolicyBasedRoute registers a new resource with the given unique name, arguments, and options.
func NewPolicyBasedRoute(ctx *pulumi.Context,
	name string, args *PolicyBasedRouteArgs, opts ...pulumi.ResourceOption) (*PolicyBasedRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyBasedRoute
	err := ctx.RegisterResource("gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyBasedRoute gets an existing PolicyBasedRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyBasedRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyBasedRouteState, opts ...pulumi.ResourceOption) (*PolicyBasedRoute, error) {
	var resource PolicyBasedRoute
	err := ctx.ReadResource("gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyBasedRoute resources.
type policyBasedRouteState struct {
	// Time when the policy-based route was created.
	CreateTime *string `pulumi:"createTime"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The filter to match L4 traffic.
	// Structure is documented below.
	Filter *PolicyBasedRouteFilter `pulumi:"filter"`
	// The interconnect attachments that this policy-based route applies to.
	InterconnectAttachment *PolicyBasedRouteInterconnectAttachment `pulumi:"interconnectAttachment"`
	// Type of this resource.
	Kind *string `pulumi:"kind"`
	// User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The name of the policy based route.
	Name *string `pulumi:"name"`
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network *string `pulumi:"network"`
	// The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
	NextHopIlbIp *string `pulumi:"nextHopIlbIp"`
	// Other routes that will be referenced to determine the next hop of the packet. Possible values: ["DEFAULT_ROUTING"]
	NextHopOtherRoutes *string `pulumi:"nextHopOtherRoutes"`
	// The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching
	// policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered
	// priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
	Priority *int    `pulumi:"priority"`
	Project  *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Time when the policy-based route was created.
	UpdateTime *string `pulumi:"updateTime"`
	// VM instances to which this policy-based route applies to.
	VirtualMachine *PolicyBasedRouteVirtualMachine `pulumi:"virtualMachine"`
	// If potential misconfigurations are detected for this route, this field will be populated with warning messages.
	// Structure is documented below.
	Warnings []PolicyBasedRouteWarning `pulumi:"warnings"`
}

type PolicyBasedRouteState struct {
	// Time when the policy-based route was created.
	CreateTime pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The filter to match L4 traffic.
	// Structure is documented below.
	Filter PolicyBasedRouteFilterPtrInput
	// The interconnect attachments that this policy-based route applies to.
	InterconnectAttachment PolicyBasedRouteInterconnectAttachmentPtrInput
	// Type of this resource.
	Kind pulumi.StringPtrInput
	// User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The name of the policy based route.
	Name pulumi.StringPtrInput
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network pulumi.StringPtrInput
	// The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
	NextHopIlbIp pulumi.StringPtrInput
	// Other routes that will be referenced to determine the next hop of the packet. Possible values: ["DEFAULT_ROUTING"]
	NextHopOtherRoutes pulumi.StringPtrInput
	// The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching
	// policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered
	// priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
	Priority pulumi.IntPtrInput
	Project  pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Time when the policy-based route was created.
	UpdateTime pulumi.StringPtrInput
	// VM instances to which this policy-based route applies to.
	VirtualMachine PolicyBasedRouteVirtualMachinePtrInput
	// If potential misconfigurations are detected for this route, this field will be populated with warning messages.
	// Structure is documented below.
	Warnings PolicyBasedRouteWarningArrayInput
}

func (PolicyBasedRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyBasedRouteState)(nil)).Elem()
}

type policyBasedRouteArgs struct {
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// The filter to match L4 traffic.
	// Structure is documented below.
	Filter PolicyBasedRouteFilter `pulumi:"filter"`
	// The interconnect attachments that this policy-based route applies to.
	InterconnectAttachment *PolicyBasedRouteInterconnectAttachment `pulumi:"interconnectAttachment"`
	// User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The name of the policy based route.
	Name *string `pulumi:"name"`
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network string `pulumi:"network"`
	// The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
	NextHopIlbIp *string `pulumi:"nextHopIlbIp"`
	// Other routes that will be referenced to determine the next hop of the packet. Possible values: ["DEFAULT_ROUTING"]
	NextHopOtherRoutes *string `pulumi:"nextHopOtherRoutes"`
	// The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching
	// policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered
	// priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
	Priority *int    `pulumi:"priority"`
	Project  *string `pulumi:"project"`
	// VM instances to which this policy-based route applies to.
	VirtualMachine *PolicyBasedRouteVirtualMachine `pulumi:"virtualMachine"`
}

// The set of arguments for constructing a PolicyBasedRoute resource.
type PolicyBasedRouteArgs struct {
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// The filter to match L4 traffic.
	// Structure is documented below.
	Filter PolicyBasedRouteFilterInput
	// The interconnect attachments that this policy-based route applies to.
	InterconnectAttachment PolicyBasedRouteInterconnectAttachmentPtrInput
	// User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The name of the policy based route.
	Name pulumi.StringPtrInput
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network pulumi.StringInput
	// The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
	NextHopIlbIp pulumi.StringPtrInput
	// Other routes that will be referenced to determine the next hop of the packet. Possible values: ["DEFAULT_ROUTING"]
	NextHopOtherRoutes pulumi.StringPtrInput
	// The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching
	// policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered
	// priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
	Priority pulumi.IntPtrInput
	Project  pulumi.StringPtrInput
	// VM instances to which this policy-based route applies to.
	VirtualMachine PolicyBasedRouteVirtualMachinePtrInput
}

func (PolicyBasedRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyBasedRouteArgs)(nil)).Elem()
}

type PolicyBasedRouteInput interface {
	pulumi.Input

	ToPolicyBasedRouteOutput() PolicyBasedRouteOutput
	ToPolicyBasedRouteOutputWithContext(ctx context.Context) PolicyBasedRouteOutput
}

func (*PolicyBasedRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyBasedRoute)(nil)).Elem()
}

func (i *PolicyBasedRoute) ToPolicyBasedRouteOutput() PolicyBasedRouteOutput {
	return i.ToPolicyBasedRouteOutputWithContext(context.Background())
}

func (i *PolicyBasedRoute) ToPolicyBasedRouteOutputWithContext(ctx context.Context) PolicyBasedRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyBasedRouteOutput)
}

// PolicyBasedRouteArrayInput is an input type that accepts PolicyBasedRouteArray and PolicyBasedRouteArrayOutput values.
// You can construct a concrete instance of `PolicyBasedRouteArrayInput` via:
//
//	PolicyBasedRouteArray{ PolicyBasedRouteArgs{...} }
type PolicyBasedRouteArrayInput interface {
	pulumi.Input

	ToPolicyBasedRouteArrayOutput() PolicyBasedRouteArrayOutput
	ToPolicyBasedRouteArrayOutputWithContext(context.Context) PolicyBasedRouteArrayOutput
}

type PolicyBasedRouteArray []PolicyBasedRouteInput

func (PolicyBasedRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyBasedRoute)(nil)).Elem()
}

func (i PolicyBasedRouteArray) ToPolicyBasedRouteArrayOutput() PolicyBasedRouteArrayOutput {
	return i.ToPolicyBasedRouteArrayOutputWithContext(context.Background())
}

func (i PolicyBasedRouteArray) ToPolicyBasedRouteArrayOutputWithContext(ctx context.Context) PolicyBasedRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyBasedRouteArrayOutput)
}

// PolicyBasedRouteMapInput is an input type that accepts PolicyBasedRouteMap and PolicyBasedRouteMapOutput values.
// You can construct a concrete instance of `PolicyBasedRouteMapInput` via:
//
//	PolicyBasedRouteMap{ "key": PolicyBasedRouteArgs{...} }
type PolicyBasedRouteMapInput interface {
	pulumi.Input

	ToPolicyBasedRouteMapOutput() PolicyBasedRouteMapOutput
	ToPolicyBasedRouteMapOutputWithContext(context.Context) PolicyBasedRouteMapOutput
}

type PolicyBasedRouteMap map[string]PolicyBasedRouteInput

func (PolicyBasedRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyBasedRoute)(nil)).Elem()
}

func (i PolicyBasedRouteMap) ToPolicyBasedRouteMapOutput() PolicyBasedRouteMapOutput {
	return i.ToPolicyBasedRouteMapOutputWithContext(context.Background())
}

func (i PolicyBasedRouteMap) ToPolicyBasedRouteMapOutputWithContext(ctx context.Context) PolicyBasedRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyBasedRouteMapOutput)
}

type PolicyBasedRouteOutput struct{ *pulumi.OutputState }

func (PolicyBasedRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyBasedRoute)(nil)).Elem()
}

func (o PolicyBasedRouteOutput) ToPolicyBasedRouteOutput() PolicyBasedRouteOutput {
	return o
}

func (o PolicyBasedRouteOutput) ToPolicyBasedRouteOutputWithContext(ctx context.Context) PolicyBasedRouteOutput {
	return o
}

// Time when the policy-based route was created.
func (o PolicyBasedRouteOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o PolicyBasedRouteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o PolicyBasedRouteOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The filter to match L4 traffic.
// Structure is documented below.
func (o PolicyBasedRouteOutput) Filter() PolicyBasedRouteFilterOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) PolicyBasedRouteFilterOutput { return v.Filter }).(PolicyBasedRouteFilterOutput)
}

// The interconnect attachments that this policy-based route applies to.
func (o PolicyBasedRouteOutput) InterconnectAttachment() PolicyBasedRouteInterconnectAttachmentPtrOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) PolicyBasedRouteInterconnectAttachmentPtrOutput {
		return v.InterconnectAttachment
	}).(PolicyBasedRouteInterconnectAttachmentPtrOutput)
}

// Type of this resource.
func (o PolicyBasedRouteOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o PolicyBasedRouteOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the policy based route.
func (o PolicyBasedRouteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
func (o PolicyBasedRouteOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
func (o PolicyBasedRouteOutput) NextHopIlbIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringPtrOutput { return v.NextHopIlbIp }).(pulumi.StringPtrOutput)
}

// Other routes that will be referenced to determine the next hop of the packet. Possible values: ["DEFAULT_ROUTING"]
func (o PolicyBasedRouteOutput) NextHopOtherRoutes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringPtrOutput { return v.NextHopOtherRoutes }).(pulumi.StringPtrOutput)
}

// The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching
// policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered
// priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
func (o PolicyBasedRouteOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o PolicyBasedRouteOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o PolicyBasedRouteOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Time when the policy-based route was created.
func (o PolicyBasedRouteOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// VM instances to which this policy-based route applies to.
func (o PolicyBasedRouteOutput) VirtualMachine() PolicyBasedRouteVirtualMachinePtrOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) PolicyBasedRouteVirtualMachinePtrOutput { return v.VirtualMachine }).(PolicyBasedRouteVirtualMachinePtrOutput)
}

// If potential misconfigurations are detected for this route, this field will be populated with warning messages.
// Structure is documented below.
func (o PolicyBasedRouteOutput) Warnings() PolicyBasedRouteWarningArrayOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) PolicyBasedRouteWarningArrayOutput { return v.Warnings }).(PolicyBasedRouteWarningArrayOutput)
}

type PolicyBasedRouteArrayOutput struct{ *pulumi.OutputState }

func (PolicyBasedRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyBasedRoute)(nil)).Elem()
}

func (o PolicyBasedRouteArrayOutput) ToPolicyBasedRouteArrayOutput() PolicyBasedRouteArrayOutput {
	return o
}

func (o PolicyBasedRouteArrayOutput) ToPolicyBasedRouteArrayOutputWithContext(ctx context.Context) PolicyBasedRouteArrayOutput {
	return o
}

func (o PolicyBasedRouteArrayOutput) Index(i pulumi.IntInput) PolicyBasedRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyBasedRoute {
		return vs[0].([]*PolicyBasedRoute)[vs[1].(int)]
	}).(PolicyBasedRouteOutput)
}

type PolicyBasedRouteMapOutput struct{ *pulumi.OutputState }

func (PolicyBasedRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyBasedRoute)(nil)).Elem()
}

func (o PolicyBasedRouteMapOutput) ToPolicyBasedRouteMapOutput() PolicyBasedRouteMapOutput {
	return o
}

func (o PolicyBasedRouteMapOutput) ToPolicyBasedRouteMapOutputWithContext(ctx context.Context) PolicyBasedRouteMapOutput {
	return o
}

func (o PolicyBasedRouteMapOutput) MapIndex(k pulumi.StringInput) PolicyBasedRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyBasedRoute {
		return vs[0].(map[string]*PolicyBasedRoute)[vs[1].(string)]
	}).(PolicyBasedRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyBasedRouteInput)(nil)).Elem(), &PolicyBasedRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyBasedRouteArrayInput)(nil)).Elem(), PolicyBasedRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyBasedRouteMapInput)(nil)).Elem(), PolicyBasedRouteMap{})
	pulumi.RegisterOutputType(PolicyBasedRouteOutput{})
	pulumi.RegisterOutputType(PolicyBasedRouteArrayOutput{})
	pulumi.RegisterOutputType(PolicyBasedRouteMapOutput{})
}
