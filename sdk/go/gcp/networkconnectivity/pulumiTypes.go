// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkconnectivity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type HubRoutingVpc struct {
	Uri *string `pulumi:"uri"`
}

// HubRoutingVpcInput is an input type that accepts HubRoutingVpcArgs and HubRoutingVpcOutput values.
// You can construct a concrete instance of `HubRoutingVpcInput` via:
//
//	HubRoutingVpcArgs{...}
type HubRoutingVpcInput interface {
	pulumi.Input

	ToHubRoutingVpcOutput() HubRoutingVpcOutput
	ToHubRoutingVpcOutputWithContext(context.Context) HubRoutingVpcOutput
}

type HubRoutingVpcArgs struct {
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (HubRoutingVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubRoutingVpc)(nil)).Elem()
}

func (i HubRoutingVpcArgs) ToHubRoutingVpcOutput() HubRoutingVpcOutput {
	return i.ToHubRoutingVpcOutputWithContext(context.Background())
}

func (i HubRoutingVpcArgs) ToHubRoutingVpcOutputWithContext(ctx context.Context) HubRoutingVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubRoutingVpcOutput)
}

func (i HubRoutingVpcArgs) ToOutput(ctx context.Context) pulumix.Output[HubRoutingVpc] {
	return pulumix.Output[HubRoutingVpc]{
		OutputState: i.ToHubRoutingVpcOutputWithContext(ctx).OutputState,
	}
}

// HubRoutingVpcArrayInput is an input type that accepts HubRoutingVpcArray and HubRoutingVpcArrayOutput values.
// You can construct a concrete instance of `HubRoutingVpcArrayInput` via:
//
//	HubRoutingVpcArray{ HubRoutingVpcArgs{...} }
type HubRoutingVpcArrayInput interface {
	pulumi.Input

	ToHubRoutingVpcArrayOutput() HubRoutingVpcArrayOutput
	ToHubRoutingVpcArrayOutputWithContext(context.Context) HubRoutingVpcArrayOutput
}

type HubRoutingVpcArray []HubRoutingVpcInput

func (HubRoutingVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HubRoutingVpc)(nil)).Elem()
}

func (i HubRoutingVpcArray) ToHubRoutingVpcArrayOutput() HubRoutingVpcArrayOutput {
	return i.ToHubRoutingVpcArrayOutputWithContext(context.Background())
}

func (i HubRoutingVpcArray) ToHubRoutingVpcArrayOutputWithContext(ctx context.Context) HubRoutingVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubRoutingVpcArrayOutput)
}

func (i HubRoutingVpcArray) ToOutput(ctx context.Context) pulumix.Output[[]HubRoutingVpc] {
	return pulumix.Output[[]HubRoutingVpc]{
		OutputState: i.ToHubRoutingVpcArrayOutputWithContext(ctx).OutputState,
	}
}

type HubRoutingVpcOutput struct{ *pulumi.OutputState }

func (HubRoutingVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubRoutingVpc)(nil)).Elem()
}

func (o HubRoutingVpcOutput) ToHubRoutingVpcOutput() HubRoutingVpcOutput {
	return o
}

func (o HubRoutingVpcOutput) ToHubRoutingVpcOutputWithContext(ctx context.Context) HubRoutingVpcOutput {
	return o
}

func (o HubRoutingVpcOutput) ToOutput(ctx context.Context) pulumix.Output[HubRoutingVpc] {
	return pulumix.Output[HubRoutingVpc]{
		OutputState: o.OutputState,
	}
}

func (o HubRoutingVpcOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubRoutingVpc) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type HubRoutingVpcArrayOutput struct{ *pulumi.OutputState }

func (HubRoutingVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HubRoutingVpc)(nil)).Elem()
}

func (o HubRoutingVpcArrayOutput) ToHubRoutingVpcArrayOutput() HubRoutingVpcArrayOutput {
	return o
}

func (o HubRoutingVpcArrayOutput) ToHubRoutingVpcArrayOutputWithContext(ctx context.Context) HubRoutingVpcArrayOutput {
	return o
}

func (o HubRoutingVpcArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]HubRoutingVpc] {
	return pulumix.Output[[]HubRoutingVpc]{
		OutputState: o.OutputState,
	}
}

func (o HubRoutingVpcArrayOutput) Index(i pulumi.IntInput) HubRoutingVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HubRoutingVpc {
		return vs[0].([]HubRoutingVpc)[vs[1].(int)]
	}).(HubRoutingVpcOutput)
}

type ServiceConnectionPolicyPscConfig struct {
	// Max number of PSC connections for this policy.
	Limit *string `pulumi:"limit"`
	// IDs of the subnetworks or fully qualified identifiers for the subnetworks
	Subnetworks []string `pulumi:"subnetworks"`
}

// ServiceConnectionPolicyPscConfigInput is an input type that accepts ServiceConnectionPolicyPscConfigArgs and ServiceConnectionPolicyPscConfigOutput values.
// You can construct a concrete instance of `ServiceConnectionPolicyPscConfigInput` via:
//
//	ServiceConnectionPolicyPscConfigArgs{...}
type ServiceConnectionPolicyPscConfigInput interface {
	pulumi.Input

	ToServiceConnectionPolicyPscConfigOutput() ServiceConnectionPolicyPscConfigOutput
	ToServiceConnectionPolicyPscConfigOutputWithContext(context.Context) ServiceConnectionPolicyPscConfigOutput
}

type ServiceConnectionPolicyPscConfigArgs struct {
	// Max number of PSC connections for this policy.
	Limit pulumi.StringPtrInput `pulumi:"limit"`
	// IDs of the subnetworks or fully qualified identifiers for the subnetworks
	Subnetworks pulumi.StringArrayInput `pulumi:"subnetworks"`
}

func (ServiceConnectionPolicyPscConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectionPolicyPscConfig)(nil)).Elem()
}

func (i ServiceConnectionPolicyPscConfigArgs) ToServiceConnectionPolicyPscConfigOutput() ServiceConnectionPolicyPscConfigOutput {
	return i.ToServiceConnectionPolicyPscConfigOutputWithContext(context.Background())
}

func (i ServiceConnectionPolicyPscConfigArgs) ToServiceConnectionPolicyPscConfigOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionPolicyPscConfigOutput)
}

func (i ServiceConnectionPolicyPscConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceConnectionPolicyPscConfig] {
	return pulumix.Output[ServiceConnectionPolicyPscConfig]{
		OutputState: i.ToServiceConnectionPolicyPscConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceConnectionPolicyPscConfigArgs) ToServiceConnectionPolicyPscConfigPtrOutput() ServiceConnectionPolicyPscConfigPtrOutput {
	return i.ToServiceConnectionPolicyPscConfigPtrOutputWithContext(context.Background())
}

func (i ServiceConnectionPolicyPscConfigArgs) ToServiceConnectionPolicyPscConfigPtrOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionPolicyPscConfigOutput).ToServiceConnectionPolicyPscConfigPtrOutputWithContext(ctx)
}

// ServiceConnectionPolicyPscConfigPtrInput is an input type that accepts ServiceConnectionPolicyPscConfigArgs, ServiceConnectionPolicyPscConfigPtr and ServiceConnectionPolicyPscConfigPtrOutput values.
// You can construct a concrete instance of `ServiceConnectionPolicyPscConfigPtrInput` via:
//
//	        ServiceConnectionPolicyPscConfigArgs{...}
//
//	or:
//
//	        nil
type ServiceConnectionPolicyPscConfigPtrInput interface {
	pulumi.Input

	ToServiceConnectionPolicyPscConfigPtrOutput() ServiceConnectionPolicyPscConfigPtrOutput
	ToServiceConnectionPolicyPscConfigPtrOutputWithContext(context.Context) ServiceConnectionPolicyPscConfigPtrOutput
}

type serviceConnectionPolicyPscConfigPtrType ServiceConnectionPolicyPscConfigArgs

func ServiceConnectionPolicyPscConfigPtr(v *ServiceConnectionPolicyPscConfigArgs) ServiceConnectionPolicyPscConfigPtrInput {
	return (*serviceConnectionPolicyPscConfigPtrType)(v)
}

func (*serviceConnectionPolicyPscConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectionPolicyPscConfig)(nil)).Elem()
}

func (i *serviceConnectionPolicyPscConfigPtrType) ToServiceConnectionPolicyPscConfigPtrOutput() ServiceConnectionPolicyPscConfigPtrOutput {
	return i.ToServiceConnectionPolicyPscConfigPtrOutputWithContext(context.Background())
}

func (i *serviceConnectionPolicyPscConfigPtrType) ToServiceConnectionPolicyPscConfigPtrOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionPolicyPscConfigPtrOutput)
}

func (i *serviceConnectionPolicyPscConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceConnectionPolicyPscConfig] {
	return pulumix.Output[*ServiceConnectionPolicyPscConfig]{
		OutputState: i.ToServiceConnectionPolicyPscConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceConnectionPolicyPscConfigOutput struct{ *pulumi.OutputState }

func (ServiceConnectionPolicyPscConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectionPolicyPscConfig)(nil)).Elem()
}

func (o ServiceConnectionPolicyPscConfigOutput) ToServiceConnectionPolicyPscConfigOutput() ServiceConnectionPolicyPscConfigOutput {
	return o
}

func (o ServiceConnectionPolicyPscConfigOutput) ToServiceConnectionPolicyPscConfigOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConfigOutput {
	return o
}

func (o ServiceConnectionPolicyPscConfigOutput) ToServiceConnectionPolicyPscConfigPtrOutput() ServiceConnectionPolicyPscConfigPtrOutput {
	return o.ToServiceConnectionPolicyPscConfigPtrOutputWithContext(context.Background())
}

func (o ServiceConnectionPolicyPscConfigOutput) ToServiceConnectionPolicyPscConfigPtrOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConnectionPolicyPscConfig) *ServiceConnectionPolicyPscConfig {
		return &v
	}).(ServiceConnectionPolicyPscConfigPtrOutput)
}

func (o ServiceConnectionPolicyPscConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceConnectionPolicyPscConfig] {
	return pulumix.Output[ServiceConnectionPolicyPscConfig]{
		OutputState: o.OutputState,
	}
}

// Max number of PSC connections for this policy.
func (o ServiceConnectionPolicyPscConfigOutput) Limit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConfig) *string { return v.Limit }).(pulumi.StringPtrOutput)
}

// IDs of the subnetworks or fully qualified identifiers for the subnetworks
func (o ServiceConnectionPolicyPscConfigOutput) Subnetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConfig) []string { return v.Subnetworks }).(pulumi.StringArrayOutput)
}

type ServiceConnectionPolicyPscConfigPtrOutput struct{ *pulumi.OutputState }

func (ServiceConnectionPolicyPscConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectionPolicyPscConfig)(nil)).Elem()
}

func (o ServiceConnectionPolicyPscConfigPtrOutput) ToServiceConnectionPolicyPscConfigPtrOutput() ServiceConnectionPolicyPscConfigPtrOutput {
	return o
}

func (o ServiceConnectionPolicyPscConfigPtrOutput) ToServiceConnectionPolicyPscConfigPtrOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConfigPtrOutput {
	return o
}

func (o ServiceConnectionPolicyPscConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceConnectionPolicyPscConfig] {
	return pulumix.Output[*ServiceConnectionPolicyPscConfig]{
		OutputState: o.OutputState,
	}
}

func (o ServiceConnectionPolicyPscConfigPtrOutput) Elem() ServiceConnectionPolicyPscConfigOutput {
	return o.ApplyT(func(v *ServiceConnectionPolicyPscConfig) ServiceConnectionPolicyPscConfig {
		if v != nil {
			return *v
		}
		var ret ServiceConnectionPolicyPscConfig
		return ret
	}).(ServiceConnectionPolicyPscConfigOutput)
}

// Max number of PSC connections for this policy.
func (o ServiceConnectionPolicyPscConfigPtrOutput) Limit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectionPolicyPscConfig) *string {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.StringPtrOutput)
}

// IDs of the subnetworks or fully qualified identifiers for the subnetworks
func (o ServiceConnectionPolicyPscConfigPtrOutput) Subnetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceConnectionPolicyPscConfig) []string {
		if v == nil {
			return nil
		}
		return v.Subnetworks
	}).(pulumi.StringArrayOutput)
}

type ServiceConnectionPolicyPscConnection struct {
	// The resource reference of the consumer address.
	ConsumerAddress *string `pulumi:"consumerAddress"`
	// The resource reference of the PSC Forwarding Rule within the consumer VPC.
	ConsumerForwardingRule *string `pulumi:"consumerForwardingRule"`
	// The project where the PSC connection is created.
	ConsumerTargetProject *string `pulumi:"consumerTargetProject"`
	// The most recent error during operating this connection.
	// Structure is documented below.
	Error *ServiceConnectionPolicyPscConnectionError `pulumi:"error"`
	// The error info for the latest error during operating this connection.
	// Structure is documented below.
	ErrorInfo *ServiceConnectionPolicyPscConnectionErrorInfo `pulumi:"errorInfo"`
	// The error type indicates whether the error is consumer facing, producer
	// facing or system internal.
	// Possible values are: `CONNECTION_ERROR_TYPE_UNSPECIFIED`, `ERROR_INTERNAL`, `ERROR_CONSUMER_SIDE`, `ERROR_PRODUCER_SIDE`.
	ErrorType *string `pulumi:"errorType"`
	// The last Compute Engine operation to setup PSC connection.
	GceOperation *string `pulumi:"gceOperation"`
	// The PSC connection id of the PSC forwarding rule.
	PscConnectionId *string `pulumi:"pscConnectionId"`
	// The state of the PSC connection.
	// Possible values are: `STATE_UNSPECIFIED`, `ACTIVE`, `CREATING`, `DELETING`, `FAILED`.
	State *string `pulumi:"state"`
}

// ServiceConnectionPolicyPscConnectionInput is an input type that accepts ServiceConnectionPolicyPscConnectionArgs and ServiceConnectionPolicyPscConnectionOutput values.
// You can construct a concrete instance of `ServiceConnectionPolicyPscConnectionInput` via:
//
//	ServiceConnectionPolicyPscConnectionArgs{...}
type ServiceConnectionPolicyPscConnectionInput interface {
	pulumi.Input

	ToServiceConnectionPolicyPscConnectionOutput() ServiceConnectionPolicyPscConnectionOutput
	ToServiceConnectionPolicyPscConnectionOutputWithContext(context.Context) ServiceConnectionPolicyPscConnectionOutput
}

type ServiceConnectionPolicyPscConnectionArgs struct {
	// The resource reference of the consumer address.
	ConsumerAddress pulumi.StringPtrInput `pulumi:"consumerAddress"`
	// The resource reference of the PSC Forwarding Rule within the consumer VPC.
	ConsumerForwardingRule pulumi.StringPtrInput `pulumi:"consumerForwardingRule"`
	// The project where the PSC connection is created.
	ConsumerTargetProject pulumi.StringPtrInput `pulumi:"consumerTargetProject"`
	// The most recent error during operating this connection.
	// Structure is documented below.
	Error ServiceConnectionPolicyPscConnectionErrorPtrInput `pulumi:"error"`
	// The error info for the latest error during operating this connection.
	// Structure is documented below.
	ErrorInfo ServiceConnectionPolicyPscConnectionErrorInfoPtrInput `pulumi:"errorInfo"`
	// The error type indicates whether the error is consumer facing, producer
	// facing or system internal.
	// Possible values are: `CONNECTION_ERROR_TYPE_UNSPECIFIED`, `ERROR_INTERNAL`, `ERROR_CONSUMER_SIDE`, `ERROR_PRODUCER_SIDE`.
	ErrorType pulumi.StringPtrInput `pulumi:"errorType"`
	// The last Compute Engine operation to setup PSC connection.
	GceOperation pulumi.StringPtrInput `pulumi:"gceOperation"`
	// The PSC connection id of the PSC forwarding rule.
	PscConnectionId pulumi.StringPtrInput `pulumi:"pscConnectionId"`
	// The state of the PSC connection.
	// Possible values are: `STATE_UNSPECIFIED`, `ACTIVE`, `CREATING`, `DELETING`, `FAILED`.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (ServiceConnectionPolicyPscConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectionPolicyPscConnection)(nil)).Elem()
}

func (i ServiceConnectionPolicyPscConnectionArgs) ToServiceConnectionPolicyPscConnectionOutput() ServiceConnectionPolicyPscConnectionOutput {
	return i.ToServiceConnectionPolicyPscConnectionOutputWithContext(context.Background())
}

func (i ServiceConnectionPolicyPscConnectionArgs) ToServiceConnectionPolicyPscConnectionOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionPolicyPscConnectionOutput)
}

func (i ServiceConnectionPolicyPscConnectionArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceConnectionPolicyPscConnection] {
	return pulumix.Output[ServiceConnectionPolicyPscConnection]{
		OutputState: i.ToServiceConnectionPolicyPscConnectionOutputWithContext(ctx).OutputState,
	}
}

// ServiceConnectionPolicyPscConnectionArrayInput is an input type that accepts ServiceConnectionPolicyPscConnectionArray and ServiceConnectionPolicyPscConnectionArrayOutput values.
// You can construct a concrete instance of `ServiceConnectionPolicyPscConnectionArrayInput` via:
//
//	ServiceConnectionPolicyPscConnectionArray{ ServiceConnectionPolicyPscConnectionArgs{...} }
type ServiceConnectionPolicyPscConnectionArrayInput interface {
	pulumi.Input

	ToServiceConnectionPolicyPscConnectionArrayOutput() ServiceConnectionPolicyPscConnectionArrayOutput
	ToServiceConnectionPolicyPscConnectionArrayOutputWithContext(context.Context) ServiceConnectionPolicyPscConnectionArrayOutput
}

type ServiceConnectionPolicyPscConnectionArray []ServiceConnectionPolicyPscConnectionInput

func (ServiceConnectionPolicyPscConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConnectionPolicyPscConnection)(nil)).Elem()
}

func (i ServiceConnectionPolicyPscConnectionArray) ToServiceConnectionPolicyPscConnectionArrayOutput() ServiceConnectionPolicyPscConnectionArrayOutput {
	return i.ToServiceConnectionPolicyPscConnectionArrayOutputWithContext(context.Background())
}

func (i ServiceConnectionPolicyPscConnectionArray) ToServiceConnectionPolicyPscConnectionArrayOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionPolicyPscConnectionArrayOutput)
}

func (i ServiceConnectionPolicyPscConnectionArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceConnectionPolicyPscConnection] {
	return pulumix.Output[[]ServiceConnectionPolicyPscConnection]{
		OutputState: i.ToServiceConnectionPolicyPscConnectionArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceConnectionPolicyPscConnectionOutput struct{ *pulumi.OutputState }

func (ServiceConnectionPolicyPscConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectionPolicyPscConnection)(nil)).Elem()
}

func (o ServiceConnectionPolicyPscConnectionOutput) ToServiceConnectionPolicyPscConnectionOutput() ServiceConnectionPolicyPscConnectionOutput {
	return o
}

func (o ServiceConnectionPolicyPscConnectionOutput) ToServiceConnectionPolicyPscConnectionOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionOutput {
	return o
}

func (o ServiceConnectionPolicyPscConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceConnectionPolicyPscConnection] {
	return pulumix.Output[ServiceConnectionPolicyPscConnection]{
		OutputState: o.OutputState,
	}
}

// The resource reference of the consumer address.
func (o ServiceConnectionPolicyPscConnectionOutput) ConsumerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnection) *string { return v.ConsumerAddress }).(pulumi.StringPtrOutput)
}

// The resource reference of the PSC Forwarding Rule within the consumer VPC.
func (o ServiceConnectionPolicyPscConnectionOutput) ConsumerForwardingRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnection) *string { return v.ConsumerForwardingRule }).(pulumi.StringPtrOutput)
}

// The project where the PSC connection is created.
func (o ServiceConnectionPolicyPscConnectionOutput) ConsumerTargetProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnection) *string { return v.ConsumerTargetProject }).(pulumi.StringPtrOutput)
}

// The most recent error during operating this connection.
// Structure is documented below.
func (o ServiceConnectionPolicyPscConnectionOutput) Error() ServiceConnectionPolicyPscConnectionErrorPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnection) *ServiceConnectionPolicyPscConnectionError {
		return v.Error
	}).(ServiceConnectionPolicyPscConnectionErrorPtrOutput)
}

// The error info for the latest error during operating this connection.
// Structure is documented below.
func (o ServiceConnectionPolicyPscConnectionOutput) ErrorInfo() ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnection) *ServiceConnectionPolicyPscConnectionErrorInfo {
		return v.ErrorInfo
	}).(ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput)
}

// The error type indicates whether the error is consumer facing, producer
// facing or system internal.
// Possible values are: `CONNECTION_ERROR_TYPE_UNSPECIFIED`, `ERROR_INTERNAL`, `ERROR_CONSUMER_SIDE`, `ERROR_PRODUCER_SIDE`.
func (o ServiceConnectionPolicyPscConnectionOutput) ErrorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnection) *string { return v.ErrorType }).(pulumi.StringPtrOutput)
}

// The last Compute Engine operation to setup PSC connection.
func (o ServiceConnectionPolicyPscConnectionOutput) GceOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnection) *string { return v.GceOperation }).(pulumi.StringPtrOutput)
}

// The PSC connection id of the PSC forwarding rule.
func (o ServiceConnectionPolicyPscConnectionOutput) PscConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnection) *string { return v.PscConnectionId }).(pulumi.StringPtrOutput)
}

// The state of the PSC connection.
// Possible values are: `STATE_UNSPECIFIED`, `ACTIVE`, `CREATING`, `DELETING`, `FAILED`.
func (o ServiceConnectionPolicyPscConnectionOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnection) *string { return v.State }).(pulumi.StringPtrOutput)
}

type ServiceConnectionPolicyPscConnectionArrayOutput struct{ *pulumi.OutputState }

func (ServiceConnectionPolicyPscConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConnectionPolicyPscConnection)(nil)).Elem()
}

func (o ServiceConnectionPolicyPscConnectionArrayOutput) ToServiceConnectionPolicyPscConnectionArrayOutput() ServiceConnectionPolicyPscConnectionArrayOutput {
	return o
}

func (o ServiceConnectionPolicyPscConnectionArrayOutput) ToServiceConnectionPolicyPscConnectionArrayOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionArrayOutput {
	return o
}

func (o ServiceConnectionPolicyPscConnectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceConnectionPolicyPscConnection] {
	return pulumix.Output[[]ServiceConnectionPolicyPscConnection]{
		OutputState: o.OutputState,
	}
}

func (o ServiceConnectionPolicyPscConnectionArrayOutput) Index(i pulumi.IntInput) ServiceConnectionPolicyPscConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceConnectionPolicyPscConnection {
		return vs[0].([]ServiceConnectionPolicyPscConnection)[vs[1].(int)]
	}).(ServiceConnectionPolicyPscConnectionOutput)
}

type ServiceConnectionPolicyPscConnectionError struct {
	// The status code, which should be an enum value of [google.rpc.Code][].
	Code *int `pulumi:"code"`
	// (Output)
	// A list of messages that carry the error details.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message.
	Message *string `pulumi:"message"`
}

// ServiceConnectionPolicyPscConnectionErrorInput is an input type that accepts ServiceConnectionPolicyPscConnectionErrorArgs and ServiceConnectionPolicyPscConnectionErrorOutput values.
// You can construct a concrete instance of `ServiceConnectionPolicyPscConnectionErrorInput` via:
//
//	ServiceConnectionPolicyPscConnectionErrorArgs{...}
type ServiceConnectionPolicyPscConnectionErrorInput interface {
	pulumi.Input

	ToServiceConnectionPolicyPscConnectionErrorOutput() ServiceConnectionPolicyPscConnectionErrorOutput
	ToServiceConnectionPolicyPscConnectionErrorOutputWithContext(context.Context) ServiceConnectionPolicyPscConnectionErrorOutput
}

type ServiceConnectionPolicyPscConnectionErrorArgs struct {
	// The status code, which should be an enum value of [google.rpc.Code][].
	Code pulumi.IntPtrInput `pulumi:"code"`
	// (Output)
	// A list of messages that carry the error details.
	Details pulumi.MapArrayInput `pulumi:"details"`
	// A developer-facing error message.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (ServiceConnectionPolicyPscConnectionErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectionPolicyPscConnectionError)(nil)).Elem()
}

func (i ServiceConnectionPolicyPscConnectionErrorArgs) ToServiceConnectionPolicyPscConnectionErrorOutput() ServiceConnectionPolicyPscConnectionErrorOutput {
	return i.ToServiceConnectionPolicyPscConnectionErrorOutputWithContext(context.Background())
}

func (i ServiceConnectionPolicyPscConnectionErrorArgs) ToServiceConnectionPolicyPscConnectionErrorOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionPolicyPscConnectionErrorOutput)
}

func (i ServiceConnectionPolicyPscConnectionErrorArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceConnectionPolicyPscConnectionError] {
	return pulumix.Output[ServiceConnectionPolicyPscConnectionError]{
		OutputState: i.ToServiceConnectionPolicyPscConnectionErrorOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceConnectionPolicyPscConnectionErrorArgs) ToServiceConnectionPolicyPscConnectionErrorPtrOutput() ServiceConnectionPolicyPscConnectionErrorPtrOutput {
	return i.ToServiceConnectionPolicyPscConnectionErrorPtrOutputWithContext(context.Background())
}

func (i ServiceConnectionPolicyPscConnectionErrorArgs) ToServiceConnectionPolicyPscConnectionErrorPtrOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionPolicyPscConnectionErrorOutput).ToServiceConnectionPolicyPscConnectionErrorPtrOutputWithContext(ctx)
}

// ServiceConnectionPolicyPscConnectionErrorPtrInput is an input type that accepts ServiceConnectionPolicyPscConnectionErrorArgs, ServiceConnectionPolicyPscConnectionErrorPtr and ServiceConnectionPolicyPscConnectionErrorPtrOutput values.
// You can construct a concrete instance of `ServiceConnectionPolicyPscConnectionErrorPtrInput` via:
//
//	        ServiceConnectionPolicyPscConnectionErrorArgs{...}
//
//	or:
//
//	        nil
type ServiceConnectionPolicyPscConnectionErrorPtrInput interface {
	pulumi.Input

	ToServiceConnectionPolicyPscConnectionErrorPtrOutput() ServiceConnectionPolicyPscConnectionErrorPtrOutput
	ToServiceConnectionPolicyPscConnectionErrorPtrOutputWithContext(context.Context) ServiceConnectionPolicyPscConnectionErrorPtrOutput
}

type serviceConnectionPolicyPscConnectionErrorPtrType ServiceConnectionPolicyPscConnectionErrorArgs

func ServiceConnectionPolicyPscConnectionErrorPtr(v *ServiceConnectionPolicyPscConnectionErrorArgs) ServiceConnectionPolicyPscConnectionErrorPtrInput {
	return (*serviceConnectionPolicyPscConnectionErrorPtrType)(v)
}

func (*serviceConnectionPolicyPscConnectionErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectionPolicyPscConnectionError)(nil)).Elem()
}

func (i *serviceConnectionPolicyPscConnectionErrorPtrType) ToServiceConnectionPolicyPscConnectionErrorPtrOutput() ServiceConnectionPolicyPscConnectionErrorPtrOutput {
	return i.ToServiceConnectionPolicyPscConnectionErrorPtrOutputWithContext(context.Background())
}

func (i *serviceConnectionPolicyPscConnectionErrorPtrType) ToServiceConnectionPolicyPscConnectionErrorPtrOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionPolicyPscConnectionErrorPtrOutput)
}

func (i *serviceConnectionPolicyPscConnectionErrorPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceConnectionPolicyPscConnectionError] {
	return pulumix.Output[*ServiceConnectionPolicyPscConnectionError]{
		OutputState: i.ToServiceConnectionPolicyPscConnectionErrorPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceConnectionPolicyPscConnectionErrorOutput struct{ *pulumi.OutputState }

func (ServiceConnectionPolicyPscConnectionErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectionPolicyPscConnectionError)(nil)).Elem()
}

func (o ServiceConnectionPolicyPscConnectionErrorOutput) ToServiceConnectionPolicyPscConnectionErrorOutput() ServiceConnectionPolicyPscConnectionErrorOutput {
	return o
}

func (o ServiceConnectionPolicyPscConnectionErrorOutput) ToServiceConnectionPolicyPscConnectionErrorOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionErrorOutput {
	return o
}

func (o ServiceConnectionPolicyPscConnectionErrorOutput) ToServiceConnectionPolicyPscConnectionErrorPtrOutput() ServiceConnectionPolicyPscConnectionErrorPtrOutput {
	return o.ToServiceConnectionPolicyPscConnectionErrorPtrOutputWithContext(context.Background())
}

func (o ServiceConnectionPolicyPscConnectionErrorOutput) ToServiceConnectionPolicyPscConnectionErrorPtrOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionErrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConnectionPolicyPscConnectionError) *ServiceConnectionPolicyPscConnectionError {
		return &v
	}).(ServiceConnectionPolicyPscConnectionErrorPtrOutput)
}

func (o ServiceConnectionPolicyPscConnectionErrorOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceConnectionPolicyPscConnectionError] {
	return pulumix.Output[ServiceConnectionPolicyPscConnectionError]{
		OutputState: o.OutputState,
	}
}

// The status code, which should be an enum value of [google.rpc.Code][].
func (o ServiceConnectionPolicyPscConnectionErrorOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnectionError) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// (Output)
// A list of messages that carry the error details.
func (o ServiceConnectionPolicyPscConnectionErrorOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnectionError) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message.
func (o ServiceConnectionPolicyPscConnectionErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnectionError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type ServiceConnectionPolicyPscConnectionErrorPtrOutput struct{ *pulumi.OutputState }

func (ServiceConnectionPolicyPscConnectionErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectionPolicyPscConnectionError)(nil)).Elem()
}

func (o ServiceConnectionPolicyPscConnectionErrorPtrOutput) ToServiceConnectionPolicyPscConnectionErrorPtrOutput() ServiceConnectionPolicyPscConnectionErrorPtrOutput {
	return o
}

func (o ServiceConnectionPolicyPscConnectionErrorPtrOutput) ToServiceConnectionPolicyPscConnectionErrorPtrOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionErrorPtrOutput {
	return o
}

func (o ServiceConnectionPolicyPscConnectionErrorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceConnectionPolicyPscConnectionError] {
	return pulumix.Output[*ServiceConnectionPolicyPscConnectionError]{
		OutputState: o.OutputState,
	}
}

func (o ServiceConnectionPolicyPscConnectionErrorPtrOutput) Elem() ServiceConnectionPolicyPscConnectionErrorOutput {
	return o.ApplyT(func(v *ServiceConnectionPolicyPscConnectionError) ServiceConnectionPolicyPscConnectionError {
		if v != nil {
			return *v
		}
		var ret ServiceConnectionPolicyPscConnectionError
		return ret
	}).(ServiceConnectionPolicyPscConnectionErrorOutput)
}

// The status code, which should be an enum value of [google.rpc.Code][].
func (o ServiceConnectionPolicyPscConnectionErrorPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceConnectionPolicyPscConnectionError) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// (Output)
// A list of messages that carry the error details.
func (o ServiceConnectionPolicyPscConnectionErrorPtrOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *ServiceConnectionPolicyPscConnectionError) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.MapArrayOutput)
}

// A developer-facing error message.
func (o ServiceConnectionPolicyPscConnectionErrorPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectionPolicyPscConnectionError) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

type ServiceConnectionPolicyPscConnectionErrorInfo struct {
	// The logical grouping to which the "reason" belongs.
	Domain *string `pulumi:"domain"`
	// Additional structured details about this error.
	Metadata map[string]string `pulumi:"metadata"`
	// The reason of the error.
	Reason *string `pulumi:"reason"`
}

// ServiceConnectionPolicyPscConnectionErrorInfoInput is an input type that accepts ServiceConnectionPolicyPscConnectionErrorInfoArgs and ServiceConnectionPolicyPscConnectionErrorInfoOutput values.
// You can construct a concrete instance of `ServiceConnectionPolicyPscConnectionErrorInfoInput` via:
//
//	ServiceConnectionPolicyPscConnectionErrorInfoArgs{...}
type ServiceConnectionPolicyPscConnectionErrorInfoInput interface {
	pulumi.Input

	ToServiceConnectionPolicyPscConnectionErrorInfoOutput() ServiceConnectionPolicyPscConnectionErrorInfoOutput
	ToServiceConnectionPolicyPscConnectionErrorInfoOutputWithContext(context.Context) ServiceConnectionPolicyPscConnectionErrorInfoOutput
}

type ServiceConnectionPolicyPscConnectionErrorInfoArgs struct {
	// The logical grouping to which the "reason" belongs.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Additional structured details about this error.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The reason of the error.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (ServiceConnectionPolicyPscConnectionErrorInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectionPolicyPscConnectionErrorInfo)(nil)).Elem()
}

func (i ServiceConnectionPolicyPscConnectionErrorInfoArgs) ToServiceConnectionPolicyPscConnectionErrorInfoOutput() ServiceConnectionPolicyPscConnectionErrorInfoOutput {
	return i.ToServiceConnectionPolicyPscConnectionErrorInfoOutputWithContext(context.Background())
}

func (i ServiceConnectionPolicyPscConnectionErrorInfoArgs) ToServiceConnectionPolicyPscConnectionErrorInfoOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionErrorInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionPolicyPscConnectionErrorInfoOutput)
}

func (i ServiceConnectionPolicyPscConnectionErrorInfoArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceConnectionPolicyPscConnectionErrorInfo] {
	return pulumix.Output[ServiceConnectionPolicyPscConnectionErrorInfo]{
		OutputState: i.ToServiceConnectionPolicyPscConnectionErrorInfoOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceConnectionPolicyPscConnectionErrorInfoArgs) ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutput() ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput {
	return i.ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutputWithContext(context.Background())
}

func (i ServiceConnectionPolicyPscConnectionErrorInfoArgs) ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionPolicyPscConnectionErrorInfoOutput).ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutputWithContext(ctx)
}

// ServiceConnectionPolicyPscConnectionErrorInfoPtrInput is an input type that accepts ServiceConnectionPolicyPscConnectionErrorInfoArgs, ServiceConnectionPolicyPscConnectionErrorInfoPtr and ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput values.
// You can construct a concrete instance of `ServiceConnectionPolicyPscConnectionErrorInfoPtrInput` via:
//
//	        ServiceConnectionPolicyPscConnectionErrorInfoArgs{...}
//
//	or:
//
//	        nil
type ServiceConnectionPolicyPscConnectionErrorInfoPtrInput interface {
	pulumi.Input

	ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutput() ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput
	ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutputWithContext(context.Context) ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput
}

type serviceConnectionPolicyPscConnectionErrorInfoPtrType ServiceConnectionPolicyPscConnectionErrorInfoArgs

func ServiceConnectionPolicyPscConnectionErrorInfoPtr(v *ServiceConnectionPolicyPscConnectionErrorInfoArgs) ServiceConnectionPolicyPscConnectionErrorInfoPtrInput {
	return (*serviceConnectionPolicyPscConnectionErrorInfoPtrType)(v)
}

func (*serviceConnectionPolicyPscConnectionErrorInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectionPolicyPscConnectionErrorInfo)(nil)).Elem()
}

func (i *serviceConnectionPolicyPscConnectionErrorInfoPtrType) ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutput() ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput {
	return i.ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutputWithContext(context.Background())
}

func (i *serviceConnectionPolicyPscConnectionErrorInfoPtrType) ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput)
}

func (i *serviceConnectionPolicyPscConnectionErrorInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceConnectionPolicyPscConnectionErrorInfo] {
	return pulumix.Output[*ServiceConnectionPolicyPscConnectionErrorInfo]{
		OutputState: i.ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceConnectionPolicyPscConnectionErrorInfoOutput struct{ *pulumi.OutputState }

func (ServiceConnectionPolicyPscConnectionErrorInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectionPolicyPscConnectionErrorInfo)(nil)).Elem()
}

func (o ServiceConnectionPolicyPscConnectionErrorInfoOutput) ToServiceConnectionPolicyPscConnectionErrorInfoOutput() ServiceConnectionPolicyPscConnectionErrorInfoOutput {
	return o
}

func (o ServiceConnectionPolicyPscConnectionErrorInfoOutput) ToServiceConnectionPolicyPscConnectionErrorInfoOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionErrorInfoOutput {
	return o
}

func (o ServiceConnectionPolicyPscConnectionErrorInfoOutput) ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutput() ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput {
	return o.ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutputWithContext(context.Background())
}

func (o ServiceConnectionPolicyPscConnectionErrorInfoOutput) ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConnectionPolicyPscConnectionErrorInfo) *ServiceConnectionPolicyPscConnectionErrorInfo {
		return &v
	}).(ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput)
}

func (o ServiceConnectionPolicyPscConnectionErrorInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceConnectionPolicyPscConnectionErrorInfo] {
	return pulumix.Output[ServiceConnectionPolicyPscConnectionErrorInfo]{
		OutputState: o.OutputState,
	}
}

// The logical grouping to which the "reason" belongs.
func (o ServiceConnectionPolicyPscConnectionErrorInfoOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnectionErrorInfo) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Additional structured details about this error.
func (o ServiceConnectionPolicyPscConnectionErrorInfoOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnectionErrorInfo) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The reason of the error.
func (o ServiceConnectionPolicyPscConnectionErrorInfoOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectionPolicyPscConnectionErrorInfo) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput struct{ *pulumi.OutputState }

func (ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectionPolicyPscConnectionErrorInfo)(nil)).Elem()
}

func (o ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput) ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutput() ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput {
	return o
}

func (o ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput) ToServiceConnectionPolicyPscConnectionErrorInfoPtrOutputWithContext(ctx context.Context) ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput {
	return o
}

func (o ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceConnectionPolicyPscConnectionErrorInfo] {
	return pulumix.Output[*ServiceConnectionPolicyPscConnectionErrorInfo]{
		OutputState: o.OutputState,
	}
}

func (o ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput) Elem() ServiceConnectionPolicyPscConnectionErrorInfoOutput {
	return o.ApplyT(func(v *ServiceConnectionPolicyPscConnectionErrorInfo) ServiceConnectionPolicyPscConnectionErrorInfo {
		if v != nil {
			return *v
		}
		var ret ServiceConnectionPolicyPscConnectionErrorInfo
		return ret
	}).(ServiceConnectionPolicyPscConnectionErrorInfoOutput)
}

// The logical grouping to which the "reason" belongs.
func (o ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectionPolicyPscConnectionErrorInfo) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// Additional structured details about this error.
func (o ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceConnectionPolicyPscConnectionErrorInfo) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The reason of the error.
func (o ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectionPolicyPscConnectionErrorInfo) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

type SpokeLinkedInterconnectAttachments struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	SiteToSiteDataTransfer bool `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked interconnect attachment resources
	Uris []string `pulumi:"uris"`
}

// SpokeLinkedInterconnectAttachmentsInput is an input type that accepts SpokeLinkedInterconnectAttachmentsArgs and SpokeLinkedInterconnectAttachmentsOutput values.
// You can construct a concrete instance of `SpokeLinkedInterconnectAttachmentsInput` via:
//
//	SpokeLinkedInterconnectAttachmentsArgs{...}
type SpokeLinkedInterconnectAttachmentsInput interface {
	pulumi.Input

	ToSpokeLinkedInterconnectAttachmentsOutput() SpokeLinkedInterconnectAttachmentsOutput
	ToSpokeLinkedInterconnectAttachmentsOutputWithContext(context.Context) SpokeLinkedInterconnectAttachmentsOutput
}

type SpokeLinkedInterconnectAttachmentsArgs struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	SiteToSiteDataTransfer pulumi.BoolInput `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked interconnect attachment resources
	Uris pulumi.StringArrayInput `pulumi:"uris"`
}

func (SpokeLinkedInterconnectAttachmentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeLinkedInterconnectAttachments)(nil)).Elem()
}

func (i SpokeLinkedInterconnectAttachmentsArgs) ToSpokeLinkedInterconnectAttachmentsOutput() SpokeLinkedInterconnectAttachmentsOutput {
	return i.ToSpokeLinkedInterconnectAttachmentsOutputWithContext(context.Background())
}

func (i SpokeLinkedInterconnectAttachmentsArgs) ToSpokeLinkedInterconnectAttachmentsOutputWithContext(ctx context.Context) SpokeLinkedInterconnectAttachmentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedInterconnectAttachmentsOutput)
}

func (i SpokeLinkedInterconnectAttachmentsArgs) ToOutput(ctx context.Context) pulumix.Output[SpokeLinkedInterconnectAttachments] {
	return pulumix.Output[SpokeLinkedInterconnectAttachments]{
		OutputState: i.ToSpokeLinkedInterconnectAttachmentsOutputWithContext(ctx).OutputState,
	}
}

func (i SpokeLinkedInterconnectAttachmentsArgs) ToSpokeLinkedInterconnectAttachmentsPtrOutput() SpokeLinkedInterconnectAttachmentsPtrOutput {
	return i.ToSpokeLinkedInterconnectAttachmentsPtrOutputWithContext(context.Background())
}

func (i SpokeLinkedInterconnectAttachmentsArgs) ToSpokeLinkedInterconnectAttachmentsPtrOutputWithContext(ctx context.Context) SpokeLinkedInterconnectAttachmentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedInterconnectAttachmentsOutput).ToSpokeLinkedInterconnectAttachmentsPtrOutputWithContext(ctx)
}

// SpokeLinkedInterconnectAttachmentsPtrInput is an input type that accepts SpokeLinkedInterconnectAttachmentsArgs, SpokeLinkedInterconnectAttachmentsPtr and SpokeLinkedInterconnectAttachmentsPtrOutput values.
// You can construct a concrete instance of `SpokeLinkedInterconnectAttachmentsPtrInput` via:
//
//	        SpokeLinkedInterconnectAttachmentsArgs{...}
//
//	or:
//
//	        nil
type SpokeLinkedInterconnectAttachmentsPtrInput interface {
	pulumi.Input

	ToSpokeLinkedInterconnectAttachmentsPtrOutput() SpokeLinkedInterconnectAttachmentsPtrOutput
	ToSpokeLinkedInterconnectAttachmentsPtrOutputWithContext(context.Context) SpokeLinkedInterconnectAttachmentsPtrOutput
}

type spokeLinkedInterconnectAttachmentsPtrType SpokeLinkedInterconnectAttachmentsArgs

func SpokeLinkedInterconnectAttachmentsPtr(v *SpokeLinkedInterconnectAttachmentsArgs) SpokeLinkedInterconnectAttachmentsPtrInput {
	return (*spokeLinkedInterconnectAttachmentsPtrType)(v)
}

func (*spokeLinkedInterconnectAttachmentsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpokeLinkedInterconnectAttachments)(nil)).Elem()
}

func (i *spokeLinkedInterconnectAttachmentsPtrType) ToSpokeLinkedInterconnectAttachmentsPtrOutput() SpokeLinkedInterconnectAttachmentsPtrOutput {
	return i.ToSpokeLinkedInterconnectAttachmentsPtrOutputWithContext(context.Background())
}

func (i *spokeLinkedInterconnectAttachmentsPtrType) ToSpokeLinkedInterconnectAttachmentsPtrOutputWithContext(ctx context.Context) SpokeLinkedInterconnectAttachmentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedInterconnectAttachmentsPtrOutput)
}

func (i *spokeLinkedInterconnectAttachmentsPtrType) ToOutput(ctx context.Context) pulumix.Output[*SpokeLinkedInterconnectAttachments] {
	return pulumix.Output[*SpokeLinkedInterconnectAttachments]{
		OutputState: i.ToSpokeLinkedInterconnectAttachmentsPtrOutputWithContext(ctx).OutputState,
	}
}

type SpokeLinkedInterconnectAttachmentsOutput struct{ *pulumi.OutputState }

func (SpokeLinkedInterconnectAttachmentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeLinkedInterconnectAttachments)(nil)).Elem()
}

func (o SpokeLinkedInterconnectAttachmentsOutput) ToSpokeLinkedInterconnectAttachmentsOutput() SpokeLinkedInterconnectAttachmentsOutput {
	return o
}

func (o SpokeLinkedInterconnectAttachmentsOutput) ToSpokeLinkedInterconnectAttachmentsOutputWithContext(ctx context.Context) SpokeLinkedInterconnectAttachmentsOutput {
	return o
}

func (o SpokeLinkedInterconnectAttachmentsOutput) ToSpokeLinkedInterconnectAttachmentsPtrOutput() SpokeLinkedInterconnectAttachmentsPtrOutput {
	return o.ToSpokeLinkedInterconnectAttachmentsPtrOutputWithContext(context.Background())
}

func (o SpokeLinkedInterconnectAttachmentsOutput) ToSpokeLinkedInterconnectAttachmentsPtrOutputWithContext(ctx context.Context) SpokeLinkedInterconnectAttachmentsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpokeLinkedInterconnectAttachments) *SpokeLinkedInterconnectAttachments {
		return &v
	}).(SpokeLinkedInterconnectAttachmentsPtrOutput)
}

func (o SpokeLinkedInterconnectAttachmentsOutput) ToOutput(ctx context.Context) pulumix.Output[SpokeLinkedInterconnectAttachments] {
	return pulumix.Output[SpokeLinkedInterconnectAttachments]{
		OutputState: o.OutputState,
	}
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
func (o SpokeLinkedInterconnectAttachmentsOutput) SiteToSiteDataTransfer() pulumi.BoolOutput {
	return o.ApplyT(func(v SpokeLinkedInterconnectAttachments) bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolOutput)
}

// The URIs of linked interconnect attachment resources
func (o SpokeLinkedInterconnectAttachmentsOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpokeLinkedInterconnectAttachments) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

type SpokeLinkedInterconnectAttachmentsPtrOutput struct{ *pulumi.OutputState }

func (SpokeLinkedInterconnectAttachmentsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpokeLinkedInterconnectAttachments)(nil)).Elem()
}

func (o SpokeLinkedInterconnectAttachmentsPtrOutput) ToSpokeLinkedInterconnectAttachmentsPtrOutput() SpokeLinkedInterconnectAttachmentsPtrOutput {
	return o
}

func (o SpokeLinkedInterconnectAttachmentsPtrOutput) ToSpokeLinkedInterconnectAttachmentsPtrOutputWithContext(ctx context.Context) SpokeLinkedInterconnectAttachmentsPtrOutput {
	return o
}

func (o SpokeLinkedInterconnectAttachmentsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SpokeLinkedInterconnectAttachments] {
	return pulumix.Output[*SpokeLinkedInterconnectAttachments]{
		OutputState: o.OutputState,
	}
}

func (o SpokeLinkedInterconnectAttachmentsPtrOutput) Elem() SpokeLinkedInterconnectAttachmentsOutput {
	return o.ApplyT(func(v *SpokeLinkedInterconnectAttachments) SpokeLinkedInterconnectAttachments {
		if v != nil {
			return *v
		}
		var ret SpokeLinkedInterconnectAttachments
		return ret
	}).(SpokeLinkedInterconnectAttachmentsOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
func (o SpokeLinkedInterconnectAttachmentsPtrOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpokeLinkedInterconnectAttachments) *bool {
		if v == nil {
			return nil
		}
		return &v.SiteToSiteDataTransfer
	}).(pulumi.BoolPtrOutput)
}

// The URIs of linked interconnect attachment resources
func (o SpokeLinkedInterconnectAttachmentsPtrOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpokeLinkedInterconnectAttachments) []string {
		if v == nil {
			return nil
		}
		return v.Uris
	}).(pulumi.StringArrayOutput)
}

type SpokeLinkedRouterApplianceInstances struct {
	// The list of router appliance instances
	Instances []SpokeLinkedRouterApplianceInstancesInstance `pulumi:"instances"`
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	SiteToSiteDataTransfer bool `pulumi:"siteToSiteDataTransfer"`
}

// SpokeLinkedRouterApplianceInstancesInput is an input type that accepts SpokeLinkedRouterApplianceInstancesArgs and SpokeLinkedRouterApplianceInstancesOutput values.
// You can construct a concrete instance of `SpokeLinkedRouterApplianceInstancesInput` via:
//
//	SpokeLinkedRouterApplianceInstancesArgs{...}
type SpokeLinkedRouterApplianceInstancesInput interface {
	pulumi.Input

	ToSpokeLinkedRouterApplianceInstancesOutput() SpokeLinkedRouterApplianceInstancesOutput
	ToSpokeLinkedRouterApplianceInstancesOutputWithContext(context.Context) SpokeLinkedRouterApplianceInstancesOutput
}

type SpokeLinkedRouterApplianceInstancesArgs struct {
	// The list of router appliance instances
	Instances SpokeLinkedRouterApplianceInstancesInstanceArrayInput `pulumi:"instances"`
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	SiteToSiteDataTransfer pulumi.BoolInput `pulumi:"siteToSiteDataTransfer"`
}

func (SpokeLinkedRouterApplianceInstancesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeLinkedRouterApplianceInstances)(nil)).Elem()
}

func (i SpokeLinkedRouterApplianceInstancesArgs) ToSpokeLinkedRouterApplianceInstancesOutput() SpokeLinkedRouterApplianceInstancesOutput {
	return i.ToSpokeLinkedRouterApplianceInstancesOutputWithContext(context.Background())
}

func (i SpokeLinkedRouterApplianceInstancesArgs) ToSpokeLinkedRouterApplianceInstancesOutputWithContext(ctx context.Context) SpokeLinkedRouterApplianceInstancesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedRouterApplianceInstancesOutput)
}

func (i SpokeLinkedRouterApplianceInstancesArgs) ToOutput(ctx context.Context) pulumix.Output[SpokeLinkedRouterApplianceInstances] {
	return pulumix.Output[SpokeLinkedRouterApplianceInstances]{
		OutputState: i.ToSpokeLinkedRouterApplianceInstancesOutputWithContext(ctx).OutputState,
	}
}

func (i SpokeLinkedRouterApplianceInstancesArgs) ToSpokeLinkedRouterApplianceInstancesPtrOutput() SpokeLinkedRouterApplianceInstancesPtrOutput {
	return i.ToSpokeLinkedRouterApplianceInstancesPtrOutputWithContext(context.Background())
}

func (i SpokeLinkedRouterApplianceInstancesArgs) ToSpokeLinkedRouterApplianceInstancesPtrOutputWithContext(ctx context.Context) SpokeLinkedRouterApplianceInstancesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedRouterApplianceInstancesOutput).ToSpokeLinkedRouterApplianceInstancesPtrOutputWithContext(ctx)
}

// SpokeLinkedRouterApplianceInstancesPtrInput is an input type that accepts SpokeLinkedRouterApplianceInstancesArgs, SpokeLinkedRouterApplianceInstancesPtr and SpokeLinkedRouterApplianceInstancesPtrOutput values.
// You can construct a concrete instance of `SpokeLinkedRouterApplianceInstancesPtrInput` via:
//
//	        SpokeLinkedRouterApplianceInstancesArgs{...}
//
//	or:
//
//	        nil
type SpokeLinkedRouterApplianceInstancesPtrInput interface {
	pulumi.Input

	ToSpokeLinkedRouterApplianceInstancesPtrOutput() SpokeLinkedRouterApplianceInstancesPtrOutput
	ToSpokeLinkedRouterApplianceInstancesPtrOutputWithContext(context.Context) SpokeLinkedRouterApplianceInstancesPtrOutput
}

type spokeLinkedRouterApplianceInstancesPtrType SpokeLinkedRouterApplianceInstancesArgs

func SpokeLinkedRouterApplianceInstancesPtr(v *SpokeLinkedRouterApplianceInstancesArgs) SpokeLinkedRouterApplianceInstancesPtrInput {
	return (*spokeLinkedRouterApplianceInstancesPtrType)(v)
}

func (*spokeLinkedRouterApplianceInstancesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpokeLinkedRouterApplianceInstances)(nil)).Elem()
}

func (i *spokeLinkedRouterApplianceInstancesPtrType) ToSpokeLinkedRouterApplianceInstancesPtrOutput() SpokeLinkedRouterApplianceInstancesPtrOutput {
	return i.ToSpokeLinkedRouterApplianceInstancesPtrOutputWithContext(context.Background())
}

func (i *spokeLinkedRouterApplianceInstancesPtrType) ToSpokeLinkedRouterApplianceInstancesPtrOutputWithContext(ctx context.Context) SpokeLinkedRouterApplianceInstancesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedRouterApplianceInstancesPtrOutput)
}

func (i *spokeLinkedRouterApplianceInstancesPtrType) ToOutput(ctx context.Context) pulumix.Output[*SpokeLinkedRouterApplianceInstances] {
	return pulumix.Output[*SpokeLinkedRouterApplianceInstances]{
		OutputState: i.ToSpokeLinkedRouterApplianceInstancesPtrOutputWithContext(ctx).OutputState,
	}
}

type SpokeLinkedRouterApplianceInstancesOutput struct{ *pulumi.OutputState }

func (SpokeLinkedRouterApplianceInstancesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeLinkedRouterApplianceInstances)(nil)).Elem()
}

func (o SpokeLinkedRouterApplianceInstancesOutput) ToSpokeLinkedRouterApplianceInstancesOutput() SpokeLinkedRouterApplianceInstancesOutput {
	return o
}

func (o SpokeLinkedRouterApplianceInstancesOutput) ToSpokeLinkedRouterApplianceInstancesOutputWithContext(ctx context.Context) SpokeLinkedRouterApplianceInstancesOutput {
	return o
}

func (o SpokeLinkedRouterApplianceInstancesOutput) ToSpokeLinkedRouterApplianceInstancesPtrOutput() SpokeLinkedRouterApplianceInstancesPtrOutput {
	return o.ToSpokeLinkedRouterApplianceInstancesPtrOutputWithContext(context.Background())
}

func (o SpokeLinkedRouterApplianceInstancesOutput) ToSpokeLinkedRouterApplianceInstancesPtrOutputWithContext(ctx context.Context) SpokeLinkedRouterApplianceInstancesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpokeLinkedRouterApplianceInstances) *SpokeLinkedRouterApplianceInstances {
		return &v
	}).(SpokeLinkedRouterApplianceInstancesPtrOutput)
}

func (o SpokeLinkedRouterApplianceInstancesOutput) ToOutput(ctx context.Context) pulumix.Output[SpokeLinkedRouterApplianceInstances] {
	return pulumix.Output[SpokeLinkedRouterApplianceInstances]{
		OutputState: o.OutputState,
	}
}

// The list of router appliance instances
func (o SpokeLinkedRouterApplianceInstancesOutput) Instances() SpokeLinkedRouterApplianceInstancesInstanceArrayOutput {
	return o.ApplyT(func(v SpokeLinkedRouterApplianceInstances) []SpokeLinkedRouterApplianceInstancesInstance {
		return v.Instances
	}).(SpokeLinkedRouterApplianceInstancesInstanceArrayOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
func (o SpokeLinkedRouterApplianceInstancesOutput) SiteToSiteDataTransfer() pulumi.BoolOutput {
	return o.ApplyT(func(v SpokeLinkedRouterApplianceInstances) bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolOutput)
}

type SpokeLinkedRouterApplianceInstancesPtrOutput struct{ *pulumi.OutputState }

func (SpokeLinkedRouterApplianceInstancesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpokeLinkedRouterApplianceInstances)(nil)).Elem()
}

func (o SpokeLinkedRouterApplianceInstancesPtrOutput) ToSpokeLinkedRouterApplianceInstancesPtrOutput() SpokeLinkedRouterApplianceInstancesPtrOutput {
	return o
}

func (o SpokeLinkedRouterApplianceInstancesPtrOutput) ToSpokeLinkedRouterApplianceInstancesPtrOutputWithContext(ctx context.Context) SpokeLinkedRouterApplianceInstancesPtrOutput {
	return o
}

func (o SpokeLinkedRouterApplianceInstancesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SpokeLinkedRouterApplianceInstances] {
	return pulumix.Output[*SpokeLinkedRouterApplianceInstances]{
		OutputState: o.OutputState,
	}
}

func (o SpokeLinkedRouterApplianceInstancesPtrOutput) Elem() SpokeLinkedRouterApplianceInstancesOutput {
	return o.ApplyT(func(v *SpokeLinkedRouterApplianceInstances) SpokeLinkedRouterApplianceInstances {
		if v != nil {
			return *v
		}
		var ret SpokeLinkedRouterApplianceInstances
		return ret
	}).(SpokeLinkedRouterApplianceInstancesOutput)
}

// The list of router appliance instances
func (o SpokeLinkedRouterApplianceInstancesPtrOutput) Instances() SpokeLinkedRouterApplianceInstancesInstanceArrayOutput {
	return o.ApplyT(func(v *SpokeLinkedRouterApplianceInstances) []SpokeLinkedRouterApplianceInstancesInstance {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(SpokeLinkedRouterApplianceInstancesInstanceArrayOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
func (o SpokeLinkedRouterApplianceInstancesPtrOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpokeLinkedRouterApplianceInstances) *bool {
		if v == nil {
			return nil
		}
		return &v.SiteToSiteDataTransfer
	}).(pulumi.BoolPtrOutput)
}

type SpokeLinkedRouterApplianceInstancesInstance struct {
	// The IP address on the VM to use for peering.
	IpAddress *string `pulumi:"ipAddress"`
	// The URI of the virtual machine resource
	//
	// ***
	VirtualMachine *string `pulumi:"virtualMachine"`
}

// SpokeLinkedRouterApplianceInstancesInstanceInput is an input type that accepts SpokeLinkedRouterApplianceInstancesInstanceArgs and SpokeLinkedRouterApplianceInstancesInstanceOutput values.
// You can construct a concrete instance of `SpokeLinkedRouterApplianceInstancesInstanceInput` via:
//
//	SpokeLinkedRouterApplianceInstancesInstanceArgs{...}
type SpokeLinkedRouterApplianceInstancesInstanceInput interface {
	pulumi.Input

	ToSpokeLinkedRouterApplianceInstancesInstanceOutput() SpokeLinkedRouterApplianceInstancesInstanceOutput
	ToSpokeLinkedRouterApplianceInstancesInstanceOutputWithContext(context.Context) SpokeLinkedRouterApplianceInstancesInstanceOutput
}

type SpokeLinkedRouterApplianceInstancesInstanceArgs struct {
	// The IP address on the VM to use for peering.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// The URI of the virtual machine resource
	//
	// ***
	VirtualMachine pulumi.StringPtrInput `pulumi:"virtualMachine"`
}

func (SpokeLinkedRouterApplianceInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeLinkedRouterApplianceInstancesInstance)(nil)).Elem()
}

func (i SpokeLinkedRouterApplianceInstancesInstanceArgs) ToSpokeLinkedRouterApplianceInstancesInstanceOutput() SpokeLinkedRouterApplianceInstancesInstanceOutput {
	return i.ToSpokeLinkedRouterApplianceInstancesInstanceOutputWithContext(context.Background())
}

func (i SpokeLinkedRouterApplianceInstancesInstanceArgs) ToSpokeLinkedRouterApplianceInstancesInstanceOutputWithContext(ctx context.Context) SpokeLinkedRouterApplianceInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedRouterApplianceInstancesInstanceOutput)
}

func (i SpokeLinkedRouterApplianceInstancesInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[SpokeLinkedRouterApplianceInstancesInstance] {
	return pulumix.Output[SpokeLinkedRouterApplianceInstancesInstance]{
		OutputState: i.ToSpokeLinkedRouterApplianceInstancesInstanceOutputWithContext(ctx).OutputState,
	}
}

// SpokeLinkedRouterApplianceInstancesInstanceArrayInput is an input type that accepts SpokeLinkedRouterApplianceInstancesInstanceArray and SpokeLinkedRouterApplianceInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `SpokeLinkedRouterApplianceInstancesInstanceArrayInput` via:
//
//	SpokeLinkedRouterApplianceInstancesInstanceArray{ SpokeLinkedRouterApplianceInstancesInstanceArgs{...} }
type SpokeLinkedRouterApplianceInstancesInstanceArrayInput interface {
	pulumi.Input

	ToSpokeLinkedRouterApplianceInstancesInstanceArrayOutput() SpokeLinkedRouterApplianceInstancesInstanceArrayOutput
	ToSpokeLinkedRouterApplianceInstancesInstanceArrayOutputWithContext(context.Context) SpokeLinkedRouterApplianceInstancesInstanceArrayOutput
}

type SpokeLinkedRouterApplianceInstancesInstanceArray []SpokeLinkedRouterApplianceInstancesInstanceInput

func (SpokeLinkedRouterApplianceInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpokeLinkedRouterApplianceInstancesInstance)(nil)).Elem()
}

func (i SpokeLinkedRouterApplianceInstancesInstanceArray) ToSpokeLinkedRouterApplianceInstancesInstanceArrayOutput() SpokeLinkedRouterApplianceInstancesInstanceArrayOutput {
	return i.ToSpokeLinkedRouterApplianceInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i SpokeLinkedRouterApplianceInstancesInstanceArray) ToSpokeLinkedRouterApplianceInstancesInstanceArrayOutputWithContext(ctx context.Context) SpokeLinkedRouterApplianceInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedRouterApplianceInstancesInstanceArrayOutput)
}

func (i SpokeLinkedRouterApplianceInstancesInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]SpokeLinkedRouterApplianceInstancesInstance] {
	return pulumix.Output[[]SpokeLinkedRouterApplianceInstancesInstance]{
		OutputState: i.ToSpokeLinkedRouterApplianceInstancesInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

type SpokeLinkedRouterApplianceInstancesInstanceOutput struct{ *pulumi.OutputState }

func (SpokeLinkedRouterApplianceInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeLinkedRouterApplianceInstancesInstance)(nil)).Elem()
}

func (o SpokeLinkedRouterApplianceInstancesInstanceOutput) ToSpokeLinkedRouterApplianceInstancesInstanceOutput() SpokeLinkedRouterApplianceInstancesInstanceOutput {
	return o
}

func (o SpokeLinkedRouterApplianceInstancesInstanceOutput) ToSpokeLinkedRouterApplianceInstancesInstanceOutputWithContext(ctx context.Context) SpokeLinkedRouterApplianceInstancesInstanceOutput {
	return o
}

func (o SpokeLinkedRouterApplianceInstancesInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[SpokeLinkedRouterApplianceInstancesInstance] {
	return pulumix.Output[SpokeLinkedRouterApplianceInstancesInstance]{
		OutputState: o.OutputState,
	}
}

// The IP address on the VM to use for peering.
func (o SpokeLinkedRouterApplianceInstancesInstanceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpokeLinkedRouterApplianceInstancesInstance) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The URI of the virtual machine resource
//
// ***
func (o SpokeLinkedRouterApplianceInstancesInstanceOutput) VirtualMachine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpokeLinkedRouterApplianceInstancesInstance) *string { return v.VirtualMachine }).(pulumi.StringPtrOutput)
}

type SpokeLinkedRouterApplianceInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (SpokeLinkedRouterApplianceInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpokeLinkedRouterApplianceInstancesInstance)(nil)).Elem()
}

func (o SpokeLinkedRouterApplianceInstancesInstanceArrayOutput) ToSpokeLinkedRouterApplianceInstancesInstanceArrayOutput() SpokeLinkedRouterApplianceInstancesInstanceArrayOutput {
	return o
}

func (o SpokeLinkedRouterApplianceInstancesInstanceArrayOutput) ToSpokeLinkedRouterApplianceInstancesInstanceArrayOutputWithContext(ctx context.Context) SpokeLinkedRouterApplianceInstancesInstanceArrayOutput {
	return o
}

func (o SpokeLinkedRouterApplianceInstancesInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SpokeLinkedRouterApplianceInstancesInstance] {
	return pulumix.Output[[]SpokeLinkedRouterApplianceInstancesInstance]{
		OutputState: o.OutputState,
	}
}

func (o SpokeLinkedRouterApplianceInstancesInstanceArrayOutput) Index(i pulumi.IntInput) SpokeLinkedRouterApplianceInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpokeLinkedRouterApplianceInstancesInstance {
		return vs[0].([]SpokeLinkedRouterApplianceInstancesInstance)[vs[1].(int)]
	}).(SpokeLinkedRouterApplianceInstancesInstanceOutput)
}

type SpokeLinkedVpcNetwork struct {
	// IP ranges encompassing the subnets to be excluded from peering.
	ExcludeExportRanges []string `pulumi:"excludeExportRanges"`
	// The URI of the VPC network resource.
	Uri string `pulumi:"uri"`
}

// SpokeLinkedVpcNetworkInput is an input type that accepts SpokeLinkedVpcNetworkArgs and SpokeLinkedVpcNetworkOutput values.
// You can construct a concrete instance of `SpokeLinkedVpcNetworkInput` via:
//
//	SpokeLinkedVpcNetworkArgs{...}
type SpokeLinkedVpcNetworkInput interface {
	pulumi.Input

	ToSpokeLinkedVpcNetworkOutput() SpokeLinkedVpcNetworkOutput
	ToSpokeLinkedVpcNetworkOutputWithContext(context.Context) SpokeLinkedVpcNetworkOutput
}

type SpokeLinkedVpcNetworkArgs struct {
	// IP ranges encompassing the subnets to be excluded from peering.
	ExcludeExportRanges pulumi.StringArrayInput `pulumi:"excludeExportRanges"`
	// The URI of the VPC network resource.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (SpokeLinkedVpcNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeLinkedVpcNetwork)(nil)).Elem()
}

func (i SpokeLinkedVpcNetworkArgs) ToSpokeLinkedVpcNetworkOutput() SpokeLinkedVpcNetworkOutput {
	return i.ToSpokeLinkedVpcNetworkOutputWithContext(context.Background())
}

func (i SpokeLinkedVpcNetworkArgs) ToSpokeLinkedVpcNetworkOutputWithContext(ctx context.Context) SpokeLinkedVpcNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedVpcNetworkOutput)
}

func (i SpokeLinkedVpcNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[SpokeLinkedVpcNetwork] {
	return pulumix.Output[SpokeLinkedVpcNetwork]{
		OutputState: i.ToSpokeLinkedVpcNetworkOutputWithContext(ctx).OutputState,
	}
}

func (i SpokeLinkedVpcNetworkArgs) ToSpokeLinkedVpcNetworkPtrOutput() SpokeLinkedVpcNetworkPtrOutput {
	return i.ToSpokeLinkedVpcNetworkPtrOutputWithContext(context.Background())
}

func (i SpokeLinkedVpcNetworkArgs) ToSpokeLinkedVpcNetworkPtrOutputWithContext(ctx context.Context) SpokeLinkedVpcNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedVpcNetworkOutput).ToSpokeLinkedVpcNetworkPtrOutputWithContext(ctx)
}

// SpokeLinkedVpcNetworkPtrInput is an input type that accepts SpokeLinkedVpcNetworkArgs, SpokeLinkedVpcNetworkPtr and SpokeLinkedVpcNetworkPtrOutput values.
// You can construct a concrete instance of `SpokeLinkedVpcNetworkPtrInput` via:
//
//	        SpokeLinkedVpcNetworkArgs{...}
//
//	or:
//
//	        nil
type SpokeLinkedVpcNetworkPtrInput interface {
	pulumi.Input

	ToSpokeLinkedVpcNetworkPtrOutput() SpokeLinkedVpcNetworkPtrOutput
	ToSpokeLinkedVpcNetworkPtrOutputWithContext(context.Context) SpokeLinkedVpcNetworkPtrOutput
}

type spokeLinkedVpcNetworkPtrType SpokeLinkedVpcNetworkArgs

func SpokeLinkedVpcNetworkPtr(v *SpokeLinkedVpcNetworkArgs) SpokeLinkedVpcNetworkPtrInput {
	return (*spokeLinkedVpcNetworkPtrType)(v)
}

func (*spokeLinkedVpcNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpokeLinkedVpcNetwork)(nil)).Elem()
}

func (i *spokeLinkedVpcNetworkPtrType) ToSpokeLinkedVpcNetworkPtrOutput() SpokeLinkedVpcNetworkPtrOutput {
	return i.ToSpokeLinkedVpcNetworkPtrOutputWithContext(context.Background())
}

func (i *spokeLinkedVpcNetworkPtrType) ToSpokeLinkedVpcNetworkPtrOutputWithContext(ctx context.Context) SpokeLinkedVpcNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedVpcNetworkPtrOutput)
}

func (i *spokeLinkedVpcNetworkPtrType) ToOutput(ctx context.Context) pulumix.Output[*SpokeLinkedVpcNetwork] {
	return pulumix.Output[*SpokeLinkedVpcNetwork]{
		OutputState: i.ToSpokeLinkedVpcNetworkPtrOutputWithContext(ctx).OutputState,
	}
}

type SpokeLinkedVpcNetworkOutput struct{ *pulumi.OutputState }

func (SpokeLinkedVpcNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeLinkedVpcNetwork)(nil)).Elem()
}

func (o SpokeLinkedVpcNetworkOutput) ToSpokeLinkedVpcNetworkOutput() SpokeLinkedVpcNetworkOutput {
	return o
}

func (o SpokeLinkedVpcNetworkOutput) ToSpokeLinkedVpcNetworkOutputWithContext(ctx context.Context) SpokeLinkedVpcNetworkOutput {
	return o
}

func (o SpokeLinkedVpcNetworkOutput) ToSpokeLinkedVpcNetworkPtrOutput() SpokeLinkedVpcNetworkPtrOutput {
	return o.ToSpokeLinkedVpcNetworkPtrOutputWithContext(context.Background())
}

func (o SpokeLinkedVpcNetworkOutput) ToSpokeLinkedVpcNetworkPtrOutputWithContext(ctx context.Context) SpokeLinkedVpcNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpokeLinkedVpcNetwork) *SpokeLinkedVpcNetwork {
		return &v
	}).(SpokeLinkedVpcNetworkPtrOutput)
}

func (o SpokeLinkedVpcNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[SpokeLinkedVpcNetwork] {
	return pulumix.Output[SpokeLinkedVpcNetwork]{
		OutputState: o.OutputState,
	}
}

// IP ranges encompassing the subnets to be excluded from peering.
func (o SpokeLinkedVpcNetworkOutput) ExcludeExportRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpokeLinkedVpcNetwork) []string { return v.ExcludeExportRanges }).(pulumi.StringArrayOutput)
}

// The URI of the VPC network resource.
func (o SpokeLinkedVpcNetworkOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v SpokeLinkedVpcNetwork) string { return v.Uri }).(pulumi.StringOutput)
}

type SpokeLinkedVpcNetworkPtrOutput struct{ *pulumi.OutputState }

func (SpokeLinkedVpcNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpokeLinkedVpcNetwork)(nil)).Elem()
}

func (o SpokeLinkedVpcNetworkPtrOutput) ToSpokeLinkedVpcNetworkPtrOutput() SpokeLinkedVpcNetworkPtrOutput {
	return o
}

func (o SpokeLinkedVpcNetworkPtrOutput) ToSpokeLinkedVpcNetworkPtrOutputWithContext(ctx context.Context) SpokeLinkedVpcNetworkPtrOutput {
	return o
}

func (o SpokeLinkedVpcNetworkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SpokeLinkedVpcNetwork] {
	return pulumix.Output[*SpokeLinkedVpcNetwork]{
		OutputState: o.OutputState,
	}
}

func (o SpokeLinkedVpcNetworkPtrOutput) Elem() SpokeLinkedVpcNetworkOutput {
	return o.ApplyT(func(v *SpokeLinkedVpcNetwork) SpokeLinkedVpcNetwork {
		if v != nil {
			return *v
		}
		var ret SpokeLinkedVpcNetwork
		return ret
	}).(SpokeLinkedVpcNetworkOutput)
}

// IP ranges encompassing the subnets to be excluded from peering.
func (o SpokeLinkedVpcNetworkPtrOutput) ExcludeExportRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpokeLinkedVpcNetwork) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeExportRanges
	}).(pulumi.StringArrayOutput)
}

// The URI of the VPC network resource.
func (o SpokeLinkedVpcNetworkPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpokeLinkedVpcNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type SpokeLinkedVpnTunnels struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	SiteToSiteDataTransfer bool `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked VPN tunnel resources.
	Uris []string `pulumi:"uris"`
}

// SpokeLinkedVpnTunnelsInput is an input type that accepts SpokeLinkedVpnTunnelsArgs and SpokeLinkedVpnTunnelsOutput values.
// You can construct a concrete instance of `SpokeLinkedVpnTunnelsInput` via:
//
//	SpokeLinkedVpnTunnelsArgs{...}
type SpokeLinkedVpnTunnelsInput interface {
	pulumi.Input

	ToSpokeLinkedVpnTunnelsOutput() SpokeLinkedVpnTunnelsOutput
	ToSpokeLinkedVpnTunnelsOutputWithContext(context.Context) SpokeLinkedVpnTunnelsOutput
}

type SpokeLinkedVpnTunnelsArgs struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	SiteToSiteDataTransfer pulumi.BoolInput `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked VPN tunnel resources.
	Uris pulumi.StringArrayInput `pulumi:"uris"`
}

func (SpokeLinkedVpnTunnelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeLinkedVpnTunnels)(nil)).Elem()
}

func (i SpokeLinkedVpnTunnelsArgs) ToSpokeLinkedVpnTunnelsOutput() SpokeLinkedVpnTunnelsOutput {
	return i.ToSpokeLinkedVpnTunnelsOutputWithContext(context.Background())
}

func (i SpokeLinkedVpnTunnelsArgs) ToSpokeLinkedVpnTunnelsOutputWithContext(ctx context.Context) SpokeLinkedVpnTunnelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedVpnTunnelsOutput)
}

func (i SpokeLinkedVpnTunnelsArgs) ToOutput(ctx context.Context) pulumix.Output[SpokeLinkedVpnTunnels] {
	return pulumix.Output[SpokeLinkedVpnTunnels]{
		OutputState: i.ToSpokeLinkedVpnTunnelsOutputWithContext(ctx).OutputState,
	}
}

func (i SpokeLinkedVpnTunnelsArgs) ToSpokeLinkedVpnTunnelsPtrOutput() SpokeLinkedVpnTunnelsPtrOutput {
	return i.ToSpokeLinkedVpnTunnelsPtrOutputWithContext(context.Background())
}

func (i SpokeLinkedVpnTunnelsArgs) ToSpokeLinkedVpnTunnelsPtrOutputWithContext(ctx context.Context) SpokeLinkedVpnTunnelsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedVpnTunnelsOutput).ToSpokeLinkedVpnTunnelsPtrOutputWithContext(ctx)
}

// SpokeLinkedVpnTunnelsPtrInput is an input type that accepts SpokeLinkedVpnTunnelsArgs, SpokeLinkedVpnTunnelsPtr and SpokeLinkedVpnTunnelsPtrOutput values.
// You can construct a concrete instance of `SpokeLinkedVpnTunnelsPtrInput` via:
//
//	        SpokeLinkedVpnTunnelsArgs{...}
//
//	or:
//
//	        nil
type SpokeLinkedVpnTunnelsPtrInput interface {
	pulumi.Input

	ToSpokeLinkedVpnTunnelsPtrOutput() SpokeLinkedVpnTunnelsPtrOutput
	ToSpokeLinkedVpnTunnelsPtrOutputWithContext(context.Context) SpokeLinkedVpnTunnelsPtrOutput
}

type spokeLinkedVpnTunnelsPtrType SpokeLinkedVpnTunnelsArgs

func SpokeLinkedVpnTunnelsPtr(v *SpokeLinkedVpnTunnelsArgs) SpokeLinkedVpnTunnelsPtrInput {
	return (*spokeLinkedVpnTunnelsPtrType)(v)
}

func (*spokeLinkedVpnTunnelsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpokeLinkedVpnTunnels)(nil)).Elem()
}

func (i *spokeLinkedVpnTunnelsPtrType) ToSpokeLinkedVpnTunnelsPtrOutput() SpokeLinkedVpnTunnelsPtrOutput {
	return i.ToSpokeLinkedVpnTunnelsPtrOutputWithContext(context.Background())
}

func (i *spokeLinkedVpnTunnelsPtrType) ToSpokeLinkedVpnTunnelsPtrOutputWithContext(ctx context.Context) SpokeLinkedVpnTunnelsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeLinkedVpnTunnelsPtrOutput)
}

func (i *spokeLinkedVpnTunnelsPtrType) ToOutput(ctx context.Context) pulumix.Output[*SpokeLinkedVpnTunnels] {
	return pulumix.Output[*SpokeLinkedVpnTunnels]{
		OutputState: i.ToSpokeLinkedVpnTunnelsPtrOutputWithContext(ctx).OutputState,
	}
}

type SpokeLinkedVpnTunnelsOutput struct{ *pulumi.OutputState }

func (SpokeLinkedVpnTunnelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeLinkedVpnTunnels)(nil)).Elem()
}

func (o SpokeLinkedVpnTunnelsOutput) ToSpokeLinkedVpnTunnelsOutput() SpokeLinkedVpnTunnelsOutput {
	return o
}

func (o SpokeLinkedVpnTunnelsOutput) ToSpokeLinkedVpnTunnelsOutputWithContext(ctx context.Context) SpokeLinkedVpnTunnelsOutput {
	return o
}

func (o SpokeLinkedVpnTunnelsOutput) ToSpokeLinkedVpnTunnelsPtrOutput() SpokeLinkedVpnTunnelsPtrOutput {
	return o.ToSpokeLinkedVpnTunnelsPtrOutputWithContext(context.Background())
}

func (o SpokeLinkedVpnTunnelsOutput) ToSpokeLinkedVpnTunnelsPtrOutputWithContext(ctx context.Context) SpokeLinkedVpnTunnelsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpokeLinkedVpnTunnels) *SpokeLinkedVpnTunnels {
		return &v
	}).(SpokeLinkedVpnTunnelsPtrOutput)
}

func (o SpokeLinkedVpnTunnelsOutput) ToOutput(ctx context.Context) pulumix.Output[SpokeLinkedVpnTunnels] {
	return pulumix.Output[SpokeLinkedVpnTunnels]{
		OutputState: o.OutputState,
	}
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
func (o SpokeLinkedVpnTunnelsOutput) SiteToSiteDataTransfer() pulumi.BoolOutput {
	return o.ApplyT(func(v SpokeLinkedVpnTunnels) bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolOutput)
}

// The URIs of linked VPN tunnel resources.
func (o SpokeLinkedVpnTunnelsOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpokeLinkedVpnTunnels) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

type SpokeLinkedVpnTunnelsPtrOutput struct{ *pulumi.OutputState }

func (SpokeLinkedVpnTunnelsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpokeLinkedVpnTunnels)(nil)).Elem()
}

func (o SpokeLinkedVpnTunnelsPtrOutput) ToSpokeLinkedVpnTunnelsPtrOutput() SpokeLinkedVpnTunnelsPtrOutput {
	return o
}

func (o SpokeLinkedVpnTunnelsPtrOutput) ToSpokeLinkedVpnTunnelsPtrOutputWithContext(ctx context.Context) SpokeLinkedVpnTunnelsPtrOutput {
	return o
}

func (o SpokeLinkedVpnTunnelsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SpokeLinkedVpnTunnels] {
	return pulumix.Output[*SpokeLinkedVpnTunnels]{
		OutputState: o.OutputState,
	}
}

func (o SpokeLinkedVpnTunnelsPtrOutput) Elem() SpokeLinkedVpnTunnelsOutput {
	return o.ApplyT(func(v *SpokeLinkedVpnTunnels) SpokeLinkedVpnTunnels {
		if v != nil {
			return *v
		}
		var ret SpokeLinkedVpnTunnels
		return ret
	}).(SpokeLinkedVpnTunnelsOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
func (o SpokeLinkedVpnTunnelsPtrOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpokeLinkedVpnTunnels) *bool {
		if v == nil {
			return nil
		}
		return &v.SiteToSiteDataTransfer
	}).(pulumi.BoolPtrOutput)
}

// The URIs of linked VPN tunnel resources.
func (o SpokeLinkedVpnTunnelsPtrOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpokeLinkedVpnTunnels) []string {
		if v == nil {
			return nil
		}
		return v.Uris
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubRoutingVpcInput)(nil)).Elem(), HubRoutingVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubRoutingVpcArrayInput)(nil)).Elem(), HubRoutingVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectionPolicyPscConfigInput)(nil)).Elem(), ServiceConnectionPolicyPscConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectionPolicyPscConfigPtrInput)(nil)).Elem(), ServiceConnectionPolicyPscConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectionPolicyPscConnectionInput)(nil)).Elem(), ServiceConnectionPolicyPscConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectionPolicyPscConnectionArrayInput)(nil)).Elem(), ServiceConnectionPolicyPscConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectionPolicyPscConnectionErrorInput)(nil)).Elem(), ServiceConnectionPolicyPscConnectionErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectionPolicyPscConnectionErrorPtrInput)(nil)).Elem(), ServiceConnectionPolicyPscConnectionErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectionPolicyPscConnectionErrorInfoInput)(nil)).Elem(), ServiceConnectionPolicyPscConnectionErrorInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectionPolicyPscConnectionErrorInfoPtrInput)(nil)).Elem(), ServiceConnectionPolicyPscConnectionErrorInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeLinkedInterconnectAttachmentsInput)(nil)).Elem(), SpokeLinkedInterconnectAttachmentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeLinkedInterconnectAttachmentsPtrInput)(nil)).Elem(), SpokeLinkedInterconnectAttachmentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeLinkedRouterApplianceInstancesInput)(nil)).Elem(), SpokeLinkedRouterApplianceInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeLinkedRouterApplianceInstancesPtrInput)(nil)).Elem(), SpokeLinkedRouterApplianceInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeLinkedRouterApplianceInstancesInstanceInput)(nil)).Elem(), SpokeLinkedRouterApplianceInstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeLinkedRouterApplianceInstancesInstanceArrayInput)(nil)).Elem(), SpokeLinkedRouterApplianceInstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeLinkedVpcNetworkInput)(nil)).Elem(), SpokeLinkedVpcNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeLinkedVpcNetworkPtrInput)(nil)).Elem(), SpokeLinkedVpcNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeLinkedVpnTunnelsInput)(nil)).Elem(), SpokeLinkedVpnTunnelsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeLinkedVpnTunnelsPtrInput)(nil)).Elem(), SpokeLinkedVpnTunnelsArgs{})
	pulumi.RegisterOutputType(HubRoutingVpcOutput{})
	pulumi.RegisterOutputType(HubRoutingVpcArrayOutput{})
	pulumi.RegisterOutputType(ServiceConnectionPolicyPscConfigOutput{})
	pulumi.RegisterOutputType(ServiceConnectionPolicyPscConfigPtrOutput{})
	pulumi.RegisterOutputType(ServiceConnectionPolicyPscConnectionOutput{})
	pulumi.RegisterOutputType(ServiceConnectionPolicyPscConnectionArrayOutput{})
	pulumi.RegisterOutputType(ServiceConnectionPolicyPscConnectionErrorOutput{})
	pulumi.RegisterOutputType(ServiceConnectionPolicyPscConnectionErrorPtrOutput{})
	pulumi.RegisterOutputType(ServiceConnectionPolicyPscConnectionErrorInfoOutput{})
	pulumi.RegisterOutputType(ServiceConnectionPolicyPscConnectionErrorInfoPtrOutput{})
	pulumi.RegisterOutputType(SpokeLinkedInterconnectAttachmentsOutput{})
	pulumi.RegisterOutputType(SpokeLinkedInterconnectAttachmentsPtrOutput{})
	pulumi.RegisterOutputType(SpokeLinkedRouterApplianceInstancesOutput{})
	pulumi.RegisterOutputType(SpokeLinkedRouterApplianceInstancesPtrOutput{})
	pulumi.RegisterOutputType(SpokeLinkedRouterApplianceInstancesInstanceOutput{})
	pulumi.RegisterOutputType(SpokeLinkedRouterApplianceInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(SpokeLinkedVpcNetworkOutput{})
	pulumi.RegisterOutputType(SpokeLinkedVpcNetworkPtrOutput{})
	pulumi.RegisterOutputType(SpokeLinkedVpnTunnelsOutput{})
	pulumi.RegisterOutputType(SpokeLinkedVpnTunnelsPtrOutput{})
}
