// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Cloud Security Command Center's (Cloud SCC) finding source. A finding
// source is an entity or a mechanism that can produce a finding. A source is
// like a container of findings that come from the same scanner, logger,
// monitor, etc.
//
// To get more information about Source, see:
//
// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.sources)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/security-command-center/docs)
//
// ## Example Usage
// ### Scc Source Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/securitycenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := securitycenter.NewSource(ctx, "customSource", &securitycenter.SourceArgs{
//				Description:  pulumi.String("My custom Cloud Security Command Center Finding Source"),
//				DisplayName:  pulumi.String("My Source"),
//				Organization: pulumi.String("123456789"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Source can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:securitycenter/sourceIamMember:SourceIamMember default organizations/{{organization}}/sources/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:securitycenter/sourceIamMember:SourceIamMember default {{organization}}/{{name}}
//
// ```
type SourceIamMember struct {
	pulumi.CustomResourceState

	Condition SourceIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput               `pulumi:"etag"`
	Member    pulumi.StringOutput               `pulumi:"member"`
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization pulumi.StringOutput `pulumi:"organization"`
	Role         pulumi.StringOutput `pulumi:"role"`
	Source       pulumi.StringOutput `pulumi:"source"`
}

// NewSourceIamMember registers a new resource with the given unique name, arguments, and options.
func NewSourceIamMember(ctx *pulumi.Context,
	name string, args *SourceIamMemberArgs, opts ...pulumi.ResourceOption) (*SourceIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	var resource SourceIamMember
	err := ctx.RegisterResource("gcp:securitycenter/sourceIamMember:SourceIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceIamMember gets an existing SourceIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceIamMemberState, opts ...pulumi.ResourceOption) (*SourceIamMember, error) {
	var resource SourceIamMember
	err := ctx.ReadResource("gcp:securitycenter/sourceIamMember:SourceIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceIamMember resources.
type sourceIamMemberState struct {
	Condition *SourceIamMemberCondition `pulumi:"condition"`
	Etag      *string                   `pulumi:"etag"`
	Member    *string                   `pulumi:"member"`
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization *string `pulumi:"organization"`
	Role         *string `pulumi:"role"`
	Source       *string `pulumi:"source"`
}

type SourceIamMemberState struct {
	Condition SourceIamMemberConditionPtrInput
	Etag      pulumi.StringPtrInput
	Member    pulumi.StringPtrInput
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization pulumi.StringPtrInput
	Role         pulumi.StringPtrInput
	Source       pulumi.StringPtrInput
}

func (SourceIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceIamMemberState)(nil)).Elem()
}

type sourceIamMemberArgs struct {
	Condition *SourceIamMemberCondition `pulumi:"condition"`
	Member    string                    `pulumi:"member"`
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization string `pulumi:"organization"`
	Role         string `pulumi:"role"`
	Source       string `pulumi:"source"`
}

// The set of arguments for constructing a SourceIamMember resource.
type SourceIamMemberArgs struct {
	Condition SourceIamMemberConditionPtrInput
	Member    pulumi.StringInput
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization pulumi.StringInput
	Role         pulumi.StringInput
	Source       pulumi.StringInput
}

func (SourceIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceIamMemberArgs)(nil)).Elem()
}

type SourceIamMemberInput interface {
	pulumi.Input

	ToSourceIamMemberOutput() SourceIamMemberOutput
	ToSourceIamMemberOutputWithContext(ctx context.Context) SourceIamMemberOutput
}

func (*SourceIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceIamMember)(nil)).Elem()
}

func (i *SourceIamMember) ToSourceIamMemberOutput() SourceIamMemberOutput {
	return i.ToSourceIamMemberOutputWithContext(context.Background())
}

func (i *SourceIamMember) ToSourceIamMemberOutputWithContext(ctx context.Context) SourceIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamMemberOutput)
}

// SourceIamMemberArrayInput is an input type that accepts SourceIamMemberArray and SourceIamMemberArrayOutput values.
// You can construct a concrete instance of `SourceIamMemberArrayInput` via:
//
//	SourceIamMemberArray{ SourceIamMemberArgs{...} }
type SourceIamMemberArrayInput interface {
	pulumi.Input

	ToSourceIamMemberArrayOutput() SourceIamMemberArrayOutput
	ToSourceIamMemberArrayOutputWithContext(context.Context) SourceIamMemberArrayOutput
}

type SourceIamMemberArray []SourceIamMemberInput

func (SourceIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceIamMember)(nil)).Elem()
}

func (i SourceIamMemberArray) ToSourceIamMemberArrayOutput() SourceIamMemberArrayOutput {
	return i.ToSourceIamMemberArrayOutputWithContext(context.Background())
}

func (i SourceIamMemberArray) ToSourceIamMemberArrayOutputWithContext(ctx context.Context) SourceIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamMemberArrayOutput)
}

// SourceIamMemberMapInput is an input type that accepts SourceIamMemberMap and SourceIamMemberMapOutput values.
// You can construct a concrete instance of `SourceIamMemberMapInput` via:
//
//	SourceIamMemberMap{ "key": SourceIamMemberArgs{...} }
type SourceIamMemberMapInput interface {
	pulumi.Input

	ToSourceIamMemberMapOutput() SourceIamMemberMapOutput
	ToSourceIamMemberMapOutputWithContext(context.Context) SourceIamMemberMapOutput
}

type SourceIamMemberMap map[string]SourceIamMemberInput

func (SourceIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceIamMember)(nil)).Elem()
}

func (i SourceIamMemberMap) ToSourceIamMemberMapOutput() SourceIamMemberMapOutput {
	return i.ToSourceIamMemberMapOutputWithContext(context.Background())
}

func (i SourceIamMemberMap) ToSourceIamMemberMapOutputWithContext(ctx context.Context) SourceIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamMemberMapOutput)
}

type SourceIamMemberOutput struct{ *pulumi.OutputState }

func (SourceIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceIamMember)(nil)).Elem()
}

func (o SourceIamMemberOutput) ToSourceIamMemberOutput() SourceIamMemberOutput {
	return o
}

func (o SourceIamMemberOutput) ToSourceIamMemberOutputWithContext(ctx context.Context) SourceIamMemberOutput {
	return o
}

func (o SourceIamMemberOutput) Condition() SourceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *SourceIamMember) SourceIamMemberConditionPtrOutput { return v.Condition }).(SourceIamMemberConditionPtrOutput)
}

func (o SourceIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SourceIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The organization whose Cloud Security Command Center the Source
// lives in.
func (o SourceIamMemberOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamMember) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

func (o SourceIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o SourceIamMemberOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamMember) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

type SourceIamMemberArrayOutput struct{ *pulumi.OutputState }

func (SourceIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceIamMember)(nil)).Elem()
}

func (o SourceIamMemberArrayOutput) ToSourceIamMemberArrayOutput() SourceIamMemberArrayOutput {
	return o
}

func (o SourceIamMemberArrayOutput) ToSourceIamMemberArrayOutputWithContext(ctx context.Context) SourceIamMemberArrayOutput {
	return o
}

func (o SourceIamMemberArrayOutput) Index(i pulumi.IntInput) SourceIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceIamMember {
		return vs[0].([]*SourceIamMember)[vs[1].(int)]
	}).(SourceIamMemberOutput)
}

type SourceIamMemberMapOutput struct{ *pulumi.OutputState }

func (SourceIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceIamMember)(nil)).Elem()
}

func (o SourceIamMemberMapOutput) ToSourceIamMemberMapOutput() SourceIamMemberMapOutput {
	return o
}

func (o SourceIamMemberMapOutput) ToSourceIamMemberMapOutputWithContext(ctx context.Context) SourceIamMemberMapOutput {
	return o
}

func (o SourceIamMemberMapOutput) MapIndex(k pulumi.StringInput) SourceIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceIamMember {
		return vs[0].(map[string]*SourceIamMember)[vs[1].(string)]
	}).(SourceIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamMemberInput)(nil)).Elem(), &SourceIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamMemberArrayInput)(nil)).Elem(), SourceIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamMemberMapInput)(nil)).Elem(), SourceIamMemberMap{})
	pulumi.RegisterOutputType(SourceIamMemberOutput{})
	pulumi.RegisterOutputType(SourceIamMemberArrayOutput{})
	pulumi.RegisterOutputType(SourceIamMemberMapOutput{})
}
