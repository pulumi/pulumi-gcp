// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Mute Findings is a volume management feature in Security Command Center
// that lets you manually or programmatically hide irrelevant findings,
// and create filters to automatically silence existing and future
// findings based on criteria you specify.
//
// To get more information about MuteConfig, see:
//
// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.muteConfigs)
//
// ## Example Usage
// ### Scc Mute Config
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/securitycenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := securitycenter.NewMuteConfig(ctx, "default", &securitycenter.MuteConfigArgs{
//				Description:  pulumi.String("My Mute Config"),
//				Filter:       pulumi.String("category: \"OS_VULNERABILITY\""),
//				MuteConfigId: pulumi.String("my-config"),
//				Parent:       pulumi.String("organizations/123456789"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # MuteConfig can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:securitycenter/muteConfig:MuteConfig default {{name}}
//
// ```
type MuteConfig struct {
	pulumi.CustomResourceState

	// The time at which the mute config was created. This field is set by
	// the server and will be ignored if provided on config creation.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of the mute config.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// Email address of the user who last edited the mute config. This
	// field is set by the server and will be ignored if provided on
	// config creation or update.
	MostRecentEditor pulumi.StringOutput `pulumi:"mostRecentEditor"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringOutput `pulumi:"muteConfigId"`
	// Name of the mute config. Its format is
	// organizations/{organization}/muteConfigs/{configId},
	// folders/{folder}/muteConfigs/{configId},
	// or projects/{project}/muteConfigs/{configId}
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource name of the new mute configs's parent. Its format is
	// "organizations/[organizationId]", "folders/[folderId]", or
	// "projects/[projectId]".
	Parent pulumi.StringOutput `pulumi:"parent"`
	// Output only. The most recent time at which the mute config was
	// updated. This field is set by the server and will be ignored if
	// provided on config creation or update.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewMuteConfig registers a new resource with the given unique name, arguments, and options.
func NewMuteConfig(ctx *pulumi.Context,
	name string, args *MuteConfigArgs, opts ...pulumi.ResourceOption) (*MuteConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.MuteConfigId == nil {
		return nil, errors.New("invalid value for required argument 'MuteConfigId'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource MuteConfig
	err := ctx.RegisterResource("gcp:securitycenter/muteConfig:MuteConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMuteConfig gets an existing MuteConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMuteConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MuteConfigState, opts ...pulumi.ResourceOption) (*MuteConfig, error) {
	var resource MuteConfig
	err := ctx.ReadResource("gcp:securitycenter/muteConfig:MuteConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MuteConfig resources.
type muteConfigState struct {
	// The time at which the mute config was created. This field is set by
	// the server and will be ignored if provided on config creation.
	CreateTime *string `pulumi:"createTime"`
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter *string `pulumi:"filter"`
	// Email address of the user who last edited the mute config. This
	// field is set by the server and will be ignored if provided on
	// config creation or update.
	MostRecentEditor *string `pulumi:"mostRecentEditor"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId *string `pulumi:"muteConfigId"`
	// Name of the mute config. Its format is
	// organizations/{organization}/muteConfigs/{configId},
	// folders/{folder}/muteConfigs/{configId},
	// or projects/{project}/muteConfigs/{configId}
	Name *string `pulumi:"name"`
	// Resource name of the new mute configs's parent. Its format is
	// "organizations/[organizationId]", "folders/[folderId]", or
	// "projects/[projectId]".
	Parent *string `pulumi:"parent"`
	// Output only. The most recent time at which the mute config was
	// updated. This field is set by the server and will be ignored if
	// provided on config creation or update.
	UpdateTime *string `pulumi:"updateTime"`
}

type MuteConfigState struct {
	// The time at which the mute config was created. This field is set by
	// the server and will be ignored if provided on config creation.
	CreateTime pulumi.StringPtrInput
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter pulumi.StringPtrInput
	// Email address of the user who last edited the mute config. This
	// field is set by the server and will be ignored if provided on
	// config creation or update.
	MostRecentEditor pulumi.StringPtrInput
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringPtrInput
	// Name of the mute config. Its format is
	// organizations/{organization}/muteConfigs/{configId},
	// folders/{folder}/muteConfigs/{configId},
	// or projects/{project}/muteConfigs/{configId}
	Name pulumi.StringPtrInput
	// Resource name of the new mute configs's parent. Its format is
	// "organizations/[organizationId]", "folders/[folderId]", or
	// "projects/[projectId]".
	Parent pulumi.StringPtrInput
	// Output only. The most recent time at which the mute config was
	// updated. This field is set by the server and will be ignored if
	// provided on config creation or update.
	UpdateTime pulumi.StringPtrInput
}

func (MuteConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*muteConfigState)(nil)).Elem()
}

type muteConfigArgs struct {
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter string `pulumi:"filter"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId string `pulumi:"muteConfigId"`
	// Resource name of the new mute configs's parent. Its format is
	// "organizations/[organizationId]", "folders/[folderId]", or
	// "projects/[projectId]".
	Parent string `pulumi:"parent"`
}

// The set of arguments for constructing a MuteConfig resource.
type MuteConfigArgs struct {
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter pulumi.StringInput
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringInput
	// Resource name of the new mute configs's parent. Its format is
	// "organizations/[organizationId]", "folders/[folderId]", or
	// "projects/[projectId]".
	Parent pulumi.StringInput
}

func (MuteConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*muteConfigArgs)(nil)).Elem()
}

type MuteConfigInput interface {
	pulumi.Input

	ToMuteConfigOutput() MuteConfigOutput
	ToMuteConfigOutputWithContext(ctx context.Context) MuteConfigOutput
}

func (*MuteConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**MuteConfig)(nil)).Elem()
}

func (i *MuteConfig) ToMuteConfigOutput() MuteConfigOutput {
	return i.ToMuteConfigOutputWithContext(context.Background())
}

func (i *MuteConfig) ToMuteConfigOutputWithContext(ctx context.Context) MuteConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteConfigOutput)
}

// MuteConfigArrayInput is an input type that accepts MuteConfigArray and MuteConfigArrayOutput values.
// You can construct a concrete instance of `MuteConfigArrayInput` via:
//
//	MuteConfigArray{ MuteConfigArgs{...} }
type MuteConfigArrayInput interface {
	pulumi.Input

	ToMuteConfigArrayOutput() MuteConfigArrayOutput
	ToMuteConfigArrayOutputWithContext(context.Context) MuteConfigArrayOutput
}

type MuteConfigArray []MuteConfigInput

func (MuteConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MuteConfig)(nil)).Elem()
}

func (i MuteConfigArray) ToMuteConfigArrayOutput() MuteConfigArrayOutput {
	return i.ToMuteConfigArrayOutputWithContext(context.Background())
}

func (i MuteConfigArray) ToMuteConfigArrayOutputWithContext(ctx context.Context) MuteConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteConfigArrayOutput)
}

// MuteConfigMapInput is an input type that accepts MuteConfigMap and MuteConfigMapOutput values.
// You can construct a concrete instance of `MuteConfigMapInput` via:
//
//	MuteConfigMap{ "key": MuteConfigArgs{...} }
type MuteConfigMapInput interface {
	pulumi.Input

	ToMuteConfigMapOutput() MuteConfigMapOutput
	ToMuteConfigMapOutputWithContext(context.Context) MuteConfigMapOutput
}

type MuteConfigMap map[string]MuteConfigInput

func (MuteConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MuteConfig)(nil)).Elem()
}

func (i MuteConfigMap) ToMuteConfigMapOutput() MuteConfigMapOutput {
	return i.ToMuteConfigMapOutputWithContext(context.Background())
}

func (i MuteConfigMap) ToMuteConfigMapOutputWithContext(ctx context.Context) MuteConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteConfigMapOutput)
}

type MuteConfigOutput struct{ *pulumi.OutputState }

func (MuteConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MuteConfig)(nil)).Elem()
}

func (o MuteConfigOutput) ToMuteConfigOutput() MuteConfigOutput {
	return o
}

func (o MuteConfigOutput) ToMuteConfigOutputWithContext(ctx context.Context) MuteConfigOutput {
	return o
}

// The time at which the mute config was created. This field is set by
// the server and will be ignored if provided on config creation.
func (o MuteConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of the mute config.
func (o MuteConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An expression that defines the filter to apply across create/update
// events of findings. While creating a filter string, be mindful of
// the scope in which the mute configuration is being created. E.g.,
// If a filter contains project = X but is created under the
// project = Y scope, it might not match any findings.
func (o MuteConfigOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// Email address of the user who last edited the mute config. This
// field is set by the server and will be ignored if provided on
// config creation or update.
func (o MuteConfigOutput) MostRecentEditor() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.MostRecentEditor }).(pulumi.StringOutput)
}

// Unique identifier provided by the client within the parent scope.
func (o MuteConfigOutput) MuteConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.MuteConfigId }).(pulumi.StringOutput)
}

// Name of the mute config. Its format is
// organizations/{organization}/muteConfigs/{configId},
// folders/{folder}/muteConfigs/{configId},
// or projects/{project}/muteConfigs/{configId}
func (o MuteConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resource name of the new mute configs's parent. Its format is
// "organizations/[organizationId]", "folders/[folderId]", or
// "projects/[projectId]".
func (o MuteConfigOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// Output only. The most recent time at which the mute config was
// updated. This field is set by the server and will be ignored if
// provided on config creation or update.
func (o MuteConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type MuteConfigArrayOutput struct{ *pulumi.OutputState }

func (MuteConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MuteConfig)(nil)).Elem()
}

func (o MuteConfigArrayOutput) ToMuteConfigArrayOutput() MuteConfigArrayOutput {
	return o
}

func (o MuteConfigArrayOutput) ToMuteConfigArrayOutputWithContext(ctx context.Context) MuteConfigArrayOutput {
	return o
}

func (o MuteConfigArrayOutput) Index(i pulumi.IntInput) MuteConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MuteConfig {
		return vs[0].([]*MuteConfig)[vs[1].(int)]
	}).(MuteConfigOutput)
}

type MuteConfigMapOutput struct{ *pulumi.OutputState }

func (MuteConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MuteConfig)(nil)).Elem()
}

func (o MuteConfigMapOutput) ToMuteConfigMapOutput() MuteConfigMapOutput {
	return o
}

func (o MuteConfigMapOutput) ToMuteConfigMapOutputWithContext(ctx context.Context) MuteConfigMapOutput {
	return o
}

func (o MuteConfigMapOutput) MapIndex(k pulumi.StringInput) MuteConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MuteConfig {
		return vs[0].(map[string]*MuteConfig)[vs[1].(string)]
	}).(MuteConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MuteConfigInput)(nil)).Elem(), &MuteConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteConfigArrayInput)(nil)).Elem(), MuteConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteConfigMapInput)(nil)).Elem(), MuteConfigMap{})
	pulumi.RegisterOutputType(MuteConfigOutput{})
	pulumi.RegisterOutputType(MuteConfigArrayOutput{})
	pulumi.RegisterOutputType(MuteConfigMapOutput{})
}
