// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Cloud Security Command Center (Cloud SCC) notification configs. A
// notification config is a Cloud SCC resource that contains the
// configuration to send notifications for create/update events of
// findings, assets and etc.
// > **Note:** In order to use Cloud SCC resources, your organization must be enrolled
// in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
// Without doing so, you may run into errors during resource creation.
//
// To get more information about ProjectNotificationConfig, see:
//
// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/projects.notificationConfigs)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/security-command-center/docs)
//
// ## Example Usage
//
// ### Scc Project Notification Config Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sccProjectNotification, err := pubsub.NewTopic(ctx, "scc_project_notification", &pubsub.TopicArgs{
//				Name: pulumi.String("my-topic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securitycenter.NewProjectNotificationConfig(ctx, "custom_notification_config", &securitycenter.ProjectNotificationConfigArgs{
//				ConfigId:    pulumi.String("my-config"),
//				Project:     pulumi.String("my-project-name"),
//				Description: pulumi.String("My custom Cloud Security Command Center Finding Notification Configuration"),
//				PubsubTopic: sccProjectNotification.ID(),
//				StreamingConfig: &securitycenter.ProjectNotificationConfigStreamingConfigArgs{
//					Filter: pulumi.String("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\""),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ProjectNotificationConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/notificationConfigs/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, ProjectNotificationConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:securitycenter/projectNotificationConfig:ProjectNotificationConfig default projects/{{project}}/notificationConfigs/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:securitycenter/projectNotificationConfig:ProjectNotificationConfig default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:securitycenter/projectNotificationConfig:ProjectNotificationConfig default {{name}}
// ```
type ProjectNotificationConfig struct {
	pulumi.CustomResourceState

	// This must be unique within the organization.
	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The resource name of this notification config, in the format
	// `projects/{{projectId}}/notificationConfigs/{{config_id}}`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringOutput `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig ProjectNotificationConfigStreamingConfigOutput `pulumi:"streamingConfig"`
}

// NewProjectNotificationConfig registers a new resource with the given unique name, arguments, and options.
func NewProjectNotificationConfig(ctx *pulumi.Context,
	name string, args *ProjectNotificationConfigArgs, opts ...pulumi.ResourceOption) (*ProjectNotificationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.PubsubTopic == nil {
		return nil, errors.New("invalid value for required argument 'PubsubTopic'")
	}
	if args.StreamingConfig == nil {
		return nil, errors.New("invalid value for required argument 'StreamingConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectNotificationConfig
	err := ctx.RegisterResource("gcp:securitycenter/projectNotificationConfig:ProjectNotificationConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectNotificationConfig gets an existing ProjectNotificationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectNotificationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectNotificationConfigState, opts ...pulumi.ResourceOption) (*ProjectNotificationConfig, error) {
	var resource ProjectNotificationConfig
	err := ctx.ReadResource("gcp:securitycenter/projectNotificationConfig:ProjectNotificationConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectNotificationConfig resources.
type projectNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId *string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// The resource name of this notification config, in the format
	// `projects/{{projectId}}/notificationConfigs/{{config_id}}`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig *ProjectNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
}

type ProjectNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringPtrInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// The resource name of this notification config, in the format
	// `projects/{{projectId}}/notificationConfigs/{{config_id}}`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringPtrInput
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig ProjectNotificationConfigStreamingConfigPtrInput
}

func (ProjectNotificationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectNotificationConfigState)(nil)).Elem()
}

type projectNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	Project     *string `pulumi:"project"`
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic string `pulumi:"pubsubTopic"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig ProjectNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
}

// The set of arguments for constructing a ProjectNotificationConfig resource.
type ProjectNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	Project     pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringInput
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig ProjectNotificationConfigStreamingConfigInput
}

func (ProjectNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectNotificationConfigArgs)(nil)).Elem()
}

type ProjectNotificationConfigInput interface {
	pulumi.Input

	ToProjectNotificationConfigOutput() ProjectNotificationConfigOutput
	ToProjectNotificationConfigOutputWithContext(ctx context.Context) ProjectNotificationConfigOutput
}

func (*ProjectNotificationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectNotificationConfig)(nil)).Elem()
}

func (i *ProjectNotificationConfig) ToProjectNotificationConfigOutput() ProjectNotificationConfigOutput {
	return i.ToProjectNotificationConfigOutputWithContext(context.Background())
}

func (i *ProjectNotificationConfig) ToProjectNotificationConfigOutputWithContext(ctx context.Context) ProjectNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectNotificationConfigOutput)
}

// ProjectNotificationConfigArrayInput is an input type that accepts ProjectNotificationConfigArray and ProjectNotificationConfigArrayOutput values.
// You can construct a concrete instance of `ProjectNotificationConfigArrayInput` via:
//
//	ProjectNotificationConfigArray{ ProjectNotificationConfigArgs{...} }
type ProjectNotificationConfigArrayInput interface {
	pulumi.Input

	ToProjectNotificationConfigArrayOutput() ProjectNotificationConfigArrayOutput
	ToProjectNotificationConfigArrayOutputWithContext(context.Context) ProjectNotificationConfigArrayOutput
}

type ProjectNotificationConfigArray []ProjectNotificationConfigInput

func (ProjectNotificationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectNotificationConfig)(nil)).Elem()
}

func (i ProjectNotificationConfigArray) ToProjectNotificationConfigArrayOutput() ProjectNotificationConfigArrayOutput {
	return i.ToProjectNotificationConfigArrayOutputWithContext(context.Background())
}

func (i ProjectNotificationConfigArray) ToProjectNotificationConfigArrayOutputWithContext(ctx context.Context) ProjectNotificationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectNotificationConfigArrayOutput)
}

// ProjectNotificationConfigMapInput is an input type that accepts ProjectNotificationConfigMap and ProjectNotificationConfigMapOutput values.
// You can construct a concrete instance of `ProjectNotificationConfigMapInput` via:
//
//	ProjectNotificationConfigMap{ "key": ProjectNotificationConfigArgs{...} }
type ProjectNotificationConfigMapInput interface {
	pulumi.Input

	ToProjectNotificationConfigMapOutput() ProjectNotificationConfigMapOutput
	ToProjectNotificationConfigMapOutputWithContext(context.Context) ProjectNotificationConfigMapOutput
}

type ProjectNotificationConfigMap map[string]ProjectNotificationConfigInput

func (ProjectNotificationConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectNotificationConfig)(nil)).Elem()
}

func (i ProjectNotificationConfigMap) ToProjectNotificationConfigMapOutput() ProjectNotificationConfigMapOutput {
	return i.ToProjectNotificationConfigMapOutputWithContext(context.Background())
}

func (i ProjectNotificationConfigMap) ToProjectNotificationConfigMapOutputWithContext(ctx context.Context) ProjectNotificationConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectNotificationConfigMapOutput)
}

type ProjectNotificationConfigOutput struct{ *pulumi.OutputState }

func (ProjectNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectNotificationConfig)(nil)).Elem()
}

func (o ProjectNotificationConfigOutput) ToProjectNotificationConfigOutput() ProjectNotificationConfigOutput {
	return o
}

func (o ProjectNotificationConfigOutput) ToProjectNotificationConfigOutputWithContext(ctx context.Context) ProjectNotificationConfigOutput {
	return o
}

// This must be unique within the organization.
func (o ProjectNotificationConfigOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectNotificationConfig) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

// The description of the notification config (max of 1024 characters).
func (o ProjectNotificationConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectNotificationConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The resource name of this notification config, in the format
// `projects/{{projectId}}/notificationConfigs/{{config_id}}`.
func (o ProjectNotificationConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectNotificationConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProjectNotificationConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectNotificationConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Pub/Sub topic to send notifications to. Its format is
// "projects/[projectId]/topics/[topic]".
func (o ProjectNotificationConfigOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectNotificationConfig) pulumi.StringOutput { return v.PubsubTopic }).(pulumi.StringOutput)
}

// The service account that needs "pubsub.topics.publish" permission to
// publish to the Pub/Sub topic.
func (o ProjectNotificationConfigOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectNotificationConfig) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The config for triggering streaming-based notifications.
// Structure is documented below.
func (o ProjectNotificationConfigOutput) StreamingConfig() ProjectNotificationConfigStreamingConfigOutput {
	return o.ApplyT(func(v *ProjectNotificationConfig) ProjectNotificationConfigStreamingConfigOutput {
		return v.StreamingConfig
	}).(ProjectNotificationConfigStreamingConfigOutput)
}

type ProjectNotificationConfigArrayOutput struct{ *pulumi.OutputState }

func (ProjectNotificationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectNotificationConfig)(nil)).Elem()
}

func (o ProjectNotificationConfigArrayOutput) ToProjectNotificationConfigArrayOutput() ProjectNotificationConfigArrayOutput {
	return o
}

func (o ProjectNotificationConfigArrayOutput) ToProjectNotificationConfigArrayOutputWithContext(ctx context.Context) ProjectNotificationConfigArrayOutput {
	return o
}

func (o ProjectNotificationConfigArrayOutput) Index(i pulumi.IntInput) ProjectNotificationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectNotificationConfig {
		return vs[0].([]*ProjectNotificationConfig)[vs[1].(int)]
	}).(ProjectNotificationConfigOutput)
}

type ProjectNotificationConfigMapOutput struct{ *pulumi.OutputState }

func (ProjectNotificationConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectNotificationConfig)(nil)).Elem()
}

func (o ProjectNotificationConfigMapOutput) ToProjectNotificationConfigMapOutput() ProjectNotificationConfigMapOutput {
	return o
}

func (o ProjectNotificationConfigMapOutput) ToProjectNotificationConfigMapOutputWithContext(ctx context.Context) ProjectNotificationConfigMapOutput {
	return o
}

func (o ProjectNotificationConfigMapOutput) MapIndex(k pulumi.StringInput) ProjectNotificationConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectNotificationConfig {
		return vs[0].(map[string]*ProjectNotificationConfig)[vs[1].(string)]
	}).(ProjectNotificationConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectNotificationConfigInput)(nil)).Elem(), &ProjectNotificationConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectNotificationConfigArrayInput)(nil)).Elem(), ProjectNotificationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectNotificationConfigMapInput)(nil)).Elem(), ProjectNotificationConfigMap{})
	pulumi.RegisterOutputType(ProjectNotificationConfigOutput{})
	pulumi.RegisterOutputType(ProjectNotificationConfigArrayOutput{})
	pulumi.RegisterOutputType(ProjectNotificationConfigMapOutput{})
}
