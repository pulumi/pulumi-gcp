// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Cloud Security Command Center (Cloud SCC) notification configs. A
// notification config is a Cloud SCC resource that contains the
// configuration to send notifications for create/update events of
// findings, assets and etc.
// > **Note:** In order to use Cloud SCC resources, your organization must be enrolled
// in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
// Without doing so, you may run into errors during resource creation.
//
// To get more information about FolderNotificationConfig, see:
//
// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/folders.locations.notificationConfigs)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/security-command-center/docs)
//
// ## Example Usage
//
// ### Scc V2 Folder Notification Config Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			folder, err := organizations.NewFolder(ctx, "folder", &organizations.FolderArgs{
//				Parent:      pulumi.String("organizations/123456789"),
//				DisplayName: pulumi.String("folder-name"),
//			})
//			if err != nil {
//				return err
//			}
//			sccV2FolderNotificationConfig, err := pubsub.NewTopic(ctx, "scc_v2_folder_notification_config", &pubsub.TopicArgs{
//				Name: pulumi.String("my-topic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securitycenter.NewV2FolderNotificationConfig(ctx, "custom_notification_config", &securitycenter.V2FolderNotificationConfigArgs{
//				ConfigId:    pulumi.String("my-config"),
//				Folder:      folder.FolderId,
//				Location:    pulumi.String("global"),
//				Description: pulumi.String("My custom Cloud Security Command Center Finding Notification Configuration"),
//				PubsubTopic: sccV2FolderNotificationConfig.ID(),
//				StreamingConfig: &securitycenter.V2FolderNotificationConfigStreamingConfigArgs{
//					Filter: pulumi.String("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\""),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FolderNotificationConfig can be imported using any of these accepted formats:
//
// * `folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}`
//
// * `{{folder}}/{{location}}/{{config_id}}`
//
// When using the `pulumi import` command, FolderNotificationConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:securitycenter/v2FolderNotificationConfig:V2FolderNotificationConfig default folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securitycenter/v2FolderNotificationConfig:V2FolderNotificationConfig default {{folder}}/{{location}}/{{config_id}}
// ```
type V2FolderNotificationConfig struct {
	pulumi.CustomResourceState

	// This must be unique within the organization.
	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Numerical ID of the parent folder.
	Folder pulumi.StringOutput `pulumi:"folder"`
	// Location ID of the parent organization. If not provided, 'global' will be used as the default location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name of this notification config, in the format
	// `folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringOutput `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig V2FolderNotificationConfigStreamingConfigOutput `pulumi:"streamingConfig"`
}

// NewV2FolderNotificationConfig registers a new resource with the given unique name, arguments, and options.
func NewV2FolderNotificationConfig(ctx *pulumi.Context,
	name string, args *V2FolderNotificationConfigArgs, opts ...pulumi.ResourceOption) (*V2FolderNotificationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	if args.PubsubTopic == nil {
		return nil, errors.New("invalid value for required argument 'PubsubTopic'")
	}
	if args.StreamingConfig == nil {
		return nil, errors.New("invalid value for required argument 'StreamingConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2FolderNotificationConfig
	err := ctx.RegisterResource("gcp:securitycenter/v2FolderNotificationConfig:V2FolderNotificationConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2FolderNotificationConfig gets an existing V2FolderNotificationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2FolderNotificationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2FolderNotificationConfigState, opts ...pulumi.ResourceOption) (*V2FolderNotificationConfig, error) {
	var resource V2FolderNotificationConfig
	err := ctx.ReadResource("gcp:securitycenter/v2FolderNotificationConfig:V2FolderNotificationConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2FolderNotificationConfig resources.
type v2folderNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId *string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// Numerical ID of the parent folder.
	Folder *string `pulumi:"folder"`
	// Location ID of the parent organization. If not provided, 'global' will be used as the default location.
	Location *string `pulumi:"location"`
	// The resource name of this notification config, in the format
	// `folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}`.
	Name *string `pulumi:"name"`
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig *V2FolderNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
}

type V2FolderNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringPtrInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// Numerical ID of the parent folder.
	Folder pulumi.StringPtrInput
	// Location ID of the parent organization. If not provided, 'global' will be used as the default location.
	Location pulumi.StringPtrInput
	// The resource name of this notification config, in the format
	// `folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}`.
	Name pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringPtrInput
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig V2FolderNotificationConfigStreamingConfigPtrInput
}

func (V2FolderNotificationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2folderNotificationConfigState)(nil)).Elem()
}

type v2folderNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// Numerical ID of the parent folder.
	Folder string `pulumi:"folder"`
	// Location ID of the parent organization. If not provided, 'global' will be used as the default location.
	Location *string `pulumi:"location"`
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic string `pulumi:"pubsubTopic"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig V2FolderNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
}

// The set of arguments for constructing a V2FolderNotificationConfig resource.
type V2FolderNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// Numerical ID of the parent folder.
	Folder pulumi.StringInput
	// Location ID of the parent organization. If not provided, 'global' will be used as the default location.
	Location pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringInput
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig V2FolderNotificationConfigStreamingConfigInput
}

func (V2FolderNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2folderNotificationConfigArgs)(nil)).Elem()
}

type V2FolderNotificationConfigInput interface {
	pulumi.Input

	ToV2FolderNotificationConfigOutput() V2FolderNotificationConfigOutput
	ToV2FolderNotificationConfigOutputWithContext(ctx context.Context) V2FolderNotificationConfigOutput
}

func (*V2FolderNotificationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**V2FolderNotificationConfig)(nil)).Elem()
}

func (i *V2FolderNotificationConfig) ToV2FolderNotificationConfigOutput() V2FolderNotificationConfigOutput {
	return i.ToV2FolderNotificationConfigOutputWithContext(context.Background())
}

func (i *V2FolderNotificationConfig) ToV2FolderNotificationConfigOutputWithContext(ctx context.Context) V2FolderNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2FolderNotificationConfigOutput)
}

// V2FolderNotificationConfigArrayInput is an input type that accepts V2FolderNotificationConfigArray and V2FolderNotificationConfigArrayOutput values.
// You can construct a concrete instance of `V2FolderNotificationConfigArrayInput` via:
//
//	V2FolderNotificationConfigArray{ V2FolderNotificationConfigArgs{...} }
type V2FolderNotificationConfigArrayInput interface {
	pulumi.Input

	ToV2FolderNotificationConfigArrayOutput() V2FolderNotificationConfigArrayOutput
	ToV2FolderNotificationConfigArrayOutputWithContext(context.Context) V2FolderNotificationConfigArrayOutput
}

type V2FolderNotificationConfigArray []V2FolderNotificationConfigInput

func (V2FolderNotificationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2FolderNotificationConfig)(nil)).Elem()
}

func (i V2FolderNotificationConfigArray) ToV2FolderNotificationConfigArrayOutput() V2FolderNotificationConfigArrayOutput {
	return i.ToV2FolderNotificationConfigArrayOutputWithContext(context.Background())
}

func (i V2FolderNotificationConfigArray) ToV2FolderNotificationConfigArrayOutputWithContext(ctx context.Context) V2FolderNotificationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2FolderNotificationConfigArrayOutput)
}

// V2FolderNotificationConfigMapInput is an input type that accepts V2FolderNotificationConfigMap and V2FolderNotificationConfigMapOutput values.
// You can construct a concrete instance of `V2FolderNotificationConfigMapInput` via:
//
//	V2FolderNotificationConfigMap{ "key": V2FolderNotificationConfigArgs{...} }
type V2FolderNotificationConfigMapInput interface {
	pulumi.Input

	ToV2FolderNotificationConfigMapOutput() V2FolderNotificationConfigMapOutput
	ToV2FolderNotificationConfigMapOutputWithContext(context.Context) V2FolderNotificationConfigMapOutput
}

type V2FolderNotificationConfigMap map[string]V2FolderNotificationConfigInput

func (V2FolderNotificationConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2FolderNotificationConfig)(nil)).Elem()
}

func (i V2FolderNotificationConfigMap) ToV2FolderNotificationConfigMapOutput() V2FolderNotificationConfigMapOutput {
	return i.ToV2FolderNotificationConfigMapOutputWithContext(context.Background())
}

func (i V2FolderNotificationConfigMap) ToV2FolderNotificationConfigMapOutputWithContext(ctx context.Context) V2FolderNotificationConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2FolderNotificationConfigMapOutput)
}

type V2FolderNotificationConfigOutput struct{ *pulumi.OutputState }

func (V2FolderNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2FolderNotificationConfig)(nil)).Elem()
}

func (o V2FolderNotificationConfigOutput) ToV2FolderNotificationConfigOutput() V2FolderNotificationConfigOutput {
	return o
}

func (o V2FolderNotificationConfigOutput) ToV2FolderNotificationConfigOutputWithContext(ctx context.Context) V2FolderNotificationConfigOutput {
	return o
}

// This must be unique within the organization.
func (o V2FolderNotificationConfigOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2FolderNotificationConfig) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

// The description of the notification config (max of 1024 characters).
func (o V2FolderNotificationConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2FolderNotificationConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Numerical ID of the parent folder.
func (o V2FolderNotificationConfigOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *V2FolderNotificationConfig) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// Location ID of the parent organization. If not provided, 'global' will be used as the default location.
func (o V2FolderNotificationConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2FolderNotificationConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name of this notification config, in the format
// `folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}`.
func (o V2FolderNotificationConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2FolderNotificationConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Pub/Sub topic to send notifications to. Its format is
// "projects/[projectId]/topics/[topic]".
func (o V2FolderNotificationConfigOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v *V2FolderNotificationConfig) pulumi.StringOutput { return v.PubsubTopic }).(pulumi.StringOutput)
}

// The service account that needs "pubsub.topics.publish" permission to
// publish to the Pub/Sub topic.
func (o V2FolderNotificationConfigOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *V2FolderNotificationConfig) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The config for triggering streaming-based notifications.
// Structure is documented below.
func (o V2FolderNotificationConfigOutput) StreamingConfig() V2FolderNotificationConfigStreamingConfigOutput {
	return o.ApplyT(func(v *V2FolderNotificationConfig) V2FolderNotificationConfigStreamingConfigOutput {
		return v.StreamingConfig
	}).(V2FolderNotificationConfigStreamingConfigOutput)
}

type V2FolderNotificationConfigArrayOutput struct{ *pulumi.OutputState }

func (V2FolderNotificationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2FolderNotificationConfig)(nil)).Elem()
}

func (o V2FolderNotificationConfigArrayOutput) ToV2FolderNotificationConfigArrayOutput() V2FolderNotificationConfigArrayOutput {
	return o
}

func (o V2FolderNotificationConfigArrayOutput) ToV2FolderNotificationConfigArrayOutputWithContext(ctx context.Context) V2FolderNotificationConfigArrayOutput {
	return o
}

func (o V2FolderNotificationConfigArrayOutput) Index(i pulumi.IntInput) V2FolderNotificationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2FolderNotificationConfig {
		return vs[0].([]*V2FolderNotificationConfig)[vs[1].(int)]
	}).(V2FolderNotificationConfigOutput)
}

type V2FolderNotificationConfigMapOutput struct{ *pulumi.OutputState }

func (V2FolderNotificationConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2FolderNotificationConfig)(nil)).Elem()
}

func (o V2FolderNotificationConfigMapOutput) ToV2FolderNotificationConfigMapOutput() V2FolderNotificationConfigMapOutput {
	return o
}

func (o V2FolderNotificationConfigMapOutput) ToV2FolderNotificationConfigMapOutputWithContext(ctx context.Context) V2FolderNotificationConfigMapOutput {
	return o
}

func (o V2FolderNotificationConfigMapOutput) MapIndex(k pulumi.StringInput) V2FolderNotificationConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2FolderNotificationConfig {
		return vs[0].(map[string]*V2FolderNotificationConfig)[vs[1].(string)]
	}).(V2FolderNotificationConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2FolderNotificationConfigInput)(nil)).Elem(), &V2FolderNotificationConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2FolderNotificationConfigArrayInput)(nil)).Elem(), V2FolderNotificationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2FolderNotificationConfigMapInput)(nil)).Elem(), V2FolderNotificationConfigMap{})
	pulumi.RegisterOutputType(V2FolderNotificationConfigOutput{})
	pulumi.RegisterOutputType(V2FolderNotificationConfigArrayOutput{})
	pulumi.RegisterOutputType(V2FolderNotificationConfigMapOutput{})
}
