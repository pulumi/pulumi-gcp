// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a Data Fusion instance.
//
// To get more information about Instance, see:
//
// * [API documentation](https://cloud.google.com/data-fusion/docs/reference/rest/v1beta1/projects.locations.instances)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/data-fusion/docs/)
//
// ## Example Usage
//
// ## Import
//
// # Instance can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:securitycenter/instanceIamBinding:InstanceIamBinding default projects/{{project}}/locations/{{region}}/instances/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:securitycenter/instanceIamBinding:InstanceIamBinding default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:securitycenter/instanceIamBinding:InstanceIamBinding default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:securitycenter/instanceIamBinding:InstanceIamBinding default {{name}}
//
// ```
type InstanceIamBinding struct {
	pulumi.CustomResourceState

	Condition InstanceIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput                  `pulumi:"etag"`
	Members   pulumi.StringArrayOutput             `pulumi:"members"`
	// The ID of the instance or a fully qualified identifier for the instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of the Data Fusion instance.
	Region pulumi.StringOutput `pulumi:"region"`
	Role   pulumi.StringOutput `pulumi:"role"`
}

// NewInstanceIamBinding registers a new resource with the given unique name, arguments, and options.
func NewInstanceIamBinding(ctx *pulumi.Context,
	name string, args *InstanceIamBindingArgs, opts ...pulumi.ResourceOption) (*InstanceIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstanceIamBinding
	err := ctx.RegisterResource("gcp:securitycenter/instanceIamBinding:InstanceIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceIamBinding gets an existing InstanceIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceIamBindingState, opts ...pulumi.ResourceOption) (*InstanceIamBinding, error) {
	var resource InstanceIamBinding
	err := ctx.ReadResource("gcp:securitycenter/instanceIamBinding:InstanceIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceIamBinding resources.
type instanceIamBindingState struct {
	Condition *InstanceIamBindingCondition `pulumi:"condition"`
	Etag      *string                      `pulumi:"etag"`
	Members   []string                     `pulumi:"members"`
	// The ID of the instance or a fully qualified identifier for the instance.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the Data Fusion instance.
	Region *string `pulumi:"region"`
	Role   *string `pulumi:"role"`
}

type InstanceIamBindingState struct {
	Condition InstanceIamBindingConditionPtrInput
	Etag      pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	// The ID of the instance or a fully qualified identifier for the instance.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the Data Fusion instance.
	Region pulumi.StringPtrInput
	Role   pulumi.StringPtrInput
}

func (InstanceIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceIamBindingState)(nil)).Elem()
}

type instanceIamBindingArgs struct {
	Condition *InstanceIamBindingCondition `pulumi:"condition"`
	Members   []string                     `pulumi:"members"`
	// The ID of the instance or a fully qualified identifier for the instance.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region of the Data Fusion instance.
	Region *string `pulumi:"region"`
	Role   string  `pulumi:"role"`
}

// The set of arguments for constructing a InstanceIamBinding resource.
type InstanceIamBindingArgs struct {
	Condition InstanceIamBindingConditionPtrInput
	Members   pulumi.StringArrayInput
	// The ID of the instance or a fully qualified identifier for the instance.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region of the Data Fusion instance.
	Region pulumi.StringPtrInput
	Role   pulumi.StringInput
}

func (InstanceIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceIamBindingArgs)(nil)).Elem()
}

type InstanceIamBindingInput interface {
	pulumi.Input

	ToInstanceIamBindingOutput() InstanceIamBindingOutput
	ToInstanceIamBindingOutputWithContext(ctx context.Context) InstanceIamBindingOutput
}

func (*InstanceIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamBinding)(nil)).Elem()
}

func (i *InstanceIamBinding) ToInstanceIamBindingOutput() InstanceIamBindingOutput {
	return i.ToInstanceIamBindingOutputWithContext(context.Background())
}

func (i *InstanceIamBinding) ToInstanceIamBindingOutputWithContext(ctx context.Context) InstanceIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingOutput)
}

func (i *InstanceIamBinding) ToOutput(ctx context.Context) pulumix.Output[*InstanceIamBinding] {
	return pulumix.Output[*InstanceIamBinding]{
		OutputState: i.ToInstanceIamBindingOutputWithContext(ctx).OutputState,
	}
}

// InstanceIamBindingArrayInput is an input type that accepts InstanceIamBindingArray and InstanceIamBindingArrayOutput values.
// You can construct a concrete instance of `InstanceIamBindingArrayInput` via:
//
//	InstanceIamBindingArray{ InstanceIamBindingArgs{...} }
type InstanceIamBindingArrayInput interface {
	pulumi.Input

	ToInstanceIamBindingArrayOutput() InstanceIamBindingArrayOutput
	ToInstanceIamBindingArrayOutputWithContext(context.Context) InstanceIamBindingArrayOutput
}

type InstanceIamBindingArray []InstanceIamBindingInput

func (InstanceIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceIamBinding)(nil)).Elem()
}

func (i InstanceIamBindingArray) ToInstanceIamBindingArrayOutput() InstanceIamBindingArrayOutput {
	return i.ToInstanceIamBindingArrayOutputWithContext(context.Background())
}

func (i InstanceIamBindingArray) ToInstanceIamBindingArrayOutputWithContext(ctx context.Context) InstanceIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingArrayOutput)
}

func (i InstanceIamBindingArray) ToOutput(ctx context.Context) pulumix.Output[[]*InstanceIamBinding] {
	return pulumix.Output[[]*InstanceIamBinding]{
		OutputState: i.ToInstanceIamBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// InstanceIamBindingMapInput is an input type that accepts InstanceIamBindingMap and InstanceIamBindingMapOutput values.
// You can construct a concrete instance of `InstanceIamBindingMapInput` via:
//
//	InstanceIamBindingMap{ "key": InstanceIamBindingArgs{...} }
type InstanceIamBindingMapInput interface {
	pulumi.Input

	ToInstanceIamBindingMapOutput() InstanceIamBindingMapOutput
	ToInstanceIamBindingMapOutputWithContext(context.Context) InstanceIamBindingMapOutput
}

type InstanceIamBindingMap map[string]InstanceIamBindingInput

func (InstanceIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceIamBinding)(nil)).Elem()
}

func (i InstanceIamBindingMap) ToInstanceIamBindingMapOutput() InstanceIamBindingMapOutput {
	return i.ToInstanceIamBindingMapOutputWithContext(context.Background())
}

func (i InstanceIamBindingMap) ToInstanceIamBindingMapOutputWithContext(ctx context.Context) InstanceIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingMapOutput)
}

func (i InstanceIamBindingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InstanceIamBinding] {
	return pulumix.Output[map[string]*InstanceIamBinding]{
		OutputState: i.ToInstanceIamBindingMapOutputWithContext(ctx).OutputState,
	}
}

type InstanceIamBindingOutput struct{ *pulumi.OutputState }

func (InstanceIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamBinding)(nil)).Elem()
}

func (o InstanceIamBindingOutput) ToInstanceIamBindingOutput() InstanceIamBindingOutput {
	return o
}

func (o InstanceIamBindingOutput) ToInstanceIamBindingOutputWithContext(ctx context.Context) InstanceIamBindingOutput {
	return o
}

func (o InstanceIamBindingOutput) ToOutput(ctx context.Context) pulumix.Output[*InstanceIamBinding] {
	return pulumix.Output[*InstanceIamBinding]{
		OutputState: o.OutputState,
	}
}

func (o InstanceIamBindingOutput) Condition() InstanceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *InstanceIamBinding) InstanceIamBindingConditionPtrOutput { return v.Condition }).(InstanceIamBindingConditionPtrOutput)
}

func (o InstanceIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o InstanceIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the instance or a fully qualified identifier for the instance.
func (o InstanceIamBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIamBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o InstanceIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of the Data Fusion instance.
func (o InstanceIamBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIamBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o InstanceIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type InstanceIamBindingArrayOutput struct{ *pulumi.OutputState }

func (InstanceIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceIamBinding)(nil)).Elem()
}

func (o InstanceIamBindingArrayOutput) ToInstanceIamBindingArrayOutput() InstanceIamBindingArrayOutput {
	return o
}

func (o InstanceIamBindingArrayOutput) ToInstanceIamBindingArrayOutputWithContext(ctx context.Context) InstanceIamBindingArrayOutput {
	return o
}

func (o InstanceIamBindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InstanceIamBinding] {
	return pulumix.Output[[]*InstanceIamBinding]{
		OutputState: o.OutputState,
	}
}

func (o InstanceIamBindingArrayOutput) Index(i pulumi.IntInput) InstanceIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceIamBinding {
		return vs[0].([]*InstanceIamBinding)[vs[1].(int)]
	}).(InstanceIamBindingOutput)
}

type InstanceIamBindingMapOutput struct{ *pulumi.OutputState }

func (InstanceIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceIamBinding)(nil)).Elem()
}

func (o InstanceIamBindingMapOutput) ToInstanceIamBindingMapOutput() InstanceIamBindingMapOutput {
	return o
}

func (o InstanceIamBindingMapOutput) ToInstanceIamBindingMapOutputWithContext(ctx context.Context) InstanceIamBindingMapOutput {
	return o
}

func (o InstanceIamBindingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InstanceIamBinding] {
	return pulumix.Output[map[string]*InstanceIamBinding]{
		OutputState: o.OutputState,
	}
}

func (o InstanceIamBindingMapOutput) MapIndex(k pulumi.StringInput) InstanceIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceIamBinding {
		return vs[0].(map[string]*InstanceIamBinding)[vs[1].(string)]
	}).(InstanceIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIamBindingInput)(nil)).Elem(), &InstanceIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIamBindingArrayInput)(nil)).Elem(), InstanceIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIamBindingMapInput)(nil)).Elem(), InstanceIamBindingMap{})
	pulumi.RegisterOutputType(InstanceIamBindingOutput{})
	pulumi.RegisterOutputType(InstanceIamBindingArrayOutput{})
	pulumi.RegisterOutputType(InstanceIamBindingMapOutput{})
}
