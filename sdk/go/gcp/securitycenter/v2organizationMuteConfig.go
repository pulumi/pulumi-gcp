// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Mute Findings is a volume management feature in Security Command Center
// that lets you manually or programmatically hide irrelevant findings,
// and create filters to automatically silence existing and future
// findings based on criteria you specify.
//
// To get more information about OrganizationMuteConfig, see:
//
// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/organizations.muteConfigs)
//
// ## Example Usage
//
// ### Scc V2 Organization Mute Config Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/securitycenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := securitycenter.NewV2OrganizationMuteConfig(ctx, "default", &securitycenter.V2OrganizationMuteConfigArgs{
//				MuteConfigId: pulumi.String("my-config"),
//				Organization: pulumi.String("123456789"),
//				Location:     pulumi.String("global"),
//				Description:  pulumi.String("My custom Cloud Security Command Center Finding Organization mute Configuration"),
//				Filter:       pulumi.String("severity = \"HIGH\""),
//				Type:         pulumi.String("STATIC"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OrganizationMuteConfig can be imported using any of these accepted formats:
//
// * `organizations/{{organization}}/locations/{{location}}/muteConfigs/{{mute_config_id}}`
//
// * `{{organization}}/{{location}}/{{mute_config_id}}`
//
// When using the `pulumi import` command, OrganizationMuteConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:securitycenter/v2OrganizationMuteConfig:V2OrganizationMuteConfig default organizations/{{organization}}/locations/{{location}}/muteConfigs/{{mute_config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securitycenter/v2OrganizationMuteConfig:V2OrganizationMuteConfig default {{organization}}/{{location}}/{{mute_config_id}}
// ```
type V2OrganizationMuteConfig struct {
	pulumi.CustomResourceState

	// The time at which the mute config was created. This field is set by
	// the server and will be ignored if provided on config creation.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of the mute config.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// location Id is provided by organization. If not provided, Use global as default.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Email address of the user who last edited the mute config. This
	// field is set by the server and will be ignored if provided on
	// config creation or update.
	MostRecentEditor pulumi.StringOutput `pulumi:"mostRecentEditor"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringOutput `pulumi:"muteConfigId"`
	// Name of the mute config. Its format is
	// organizations/{organization}/locations/global/muteConfigs/{configId},
	// folders/{folder}/locations/global/muteConfigs/{configId},
	// or projects/{project}/locations/global/muteConfigs/{configId}
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization whose Cloud Security Command Center the Mute
	// Config lives in.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The type of the mute config.
	Type pulumi.StringOutput `pulumi:"type"`
	// Output only. The most recent time at which the mute config was
	// updated. This field is set by the server and will be ignored if
	// provided on config creation or update.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewV2OrganizationMuteConfig registers a new resource with the given unique name, arguments, and options.
func NewV2OrganizationMuteConfig(ctx *pulumi.Context,
	name string, args *V2OrganizationMuteConfigArgs, opts ...pulumi.ResourceOption) (*V2OrganizationMuteConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.MuteConfigId == nil {
		return nil, errors.New("invalid value for required argument 'MuteConfigId'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2OrganizationMuteConfig
	err := ctx.RegisterResource("gcp:securitycenter/v2OrganizationMuteConfig:V2OrganizationMuteConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2OrganizationMuteConfig gets an existing V2OrganizationMuteConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2OrganizationMuteConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2OrganizationMuteConfigState, opts ...pulumi.ResourceOption) (*V2OrganizationMuteConfig, error) {
	var resource V2OrganizationMuteConfig
	err := ctx.ReadResource("gcp:securitycenter/v2OrganizationMuteConfig:V2OrganizationMuteConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2OrganizationMuteConfig resources.
type v2organizationMuteConfigState struct {
	// The time at which the mute config was created. This field is set by
	// the server and will be ignored if provided on config creation.
	CreateTime *string `pulumi:"createTime"`
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter *string `pulumi:"filter"`
	// location Id is provided by organization. If not provided, Use global as default.
	Location *string `pulumi:"location"`
	// Email address of the user who last edited the mute config. This
	// field is set by the server and will be ignored if provided on
	// config creation or update.
	MostRecentEditor *string `pulumi:"mostRecentEditor"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId *string `pulumi:"muteConfigId"`
	// Name of the mute config. Its format is
	// organizations/{organization}/locations/global/muteConfigs/{configId},
	// folders/{folder}/locations/global/muteConfigs/{configId},
	// or projects/{project}/locations/global/muteConfigs/{configId}
	Name *string `pulumi:"name"`
	// The organization whose Cloud Security Command Center the Mute
	// Config lives in.
	Organization *string `pulumi:"organization"`
	// The type of the mute config.
	Type *string `pulumi:"type"`
	// Output only. The most recent time at which the mute config was
	// updated. This field is set by the server and will be ignored if
	// provided on config creation or update.
	UpdateTime *string `pulumi:"updateTime"`
}

type V2OrganizationMuteConfigState struct {
	// The time at which the mute config was created. This field is set by
	// the server and will be ignored if provided on config creation.
	CreateTime pulumi.StringPtrInput
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter pulumi.StringPtrInput
	// location Id is provided by organization. If not provided, Use global as default.
	Location pulumi.StringPtrInput
	// Email address of the user who last edited the mute config. This
	// field is set by the server and will be ignored if provided on
	// config creation or update.
	MostRecentEditor pulumi.StringPtrInput
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringPtrInput
	// Name of the mute config. Its format is
	// organizations/{organization}/locations/global/muteConfigs/{configId},
	// folders/{folder}/locations/global/muteConfigs/{configId},
	// or projects/{project}/locations/global/muteConfigs/{configId}
	Name pulumi.StringPtrInput
	// The organization whose Cloud Security Command Center the Mute
	// Config lives in.
	Organization pulumi.StringPtrInput
	// The type of the mute config.
	Type pulumi.StringPtrInput
	// Output only. The most recent time at which the mute config was
	// updated. This field is set by the server and will be ignored if
	// provided on config creation or update.
	UpdateTime pulumi.StringPtrInput
}

func (V2OrganizationMuteConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2organizationMuteConfigState)(nil)).Elem()
}

type v2organizationMuteConfigArgs struct {
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter string `pulumi:"filter"`
	// location Id is provided by organization. If not provided, Use global as default.
	Location *string `pulumi:"location"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId string `pulumi:"muteConfigId"`
	// The organization whose Cloud Security Command Center the Mute
	// Config lives in.
	Organization string `pulumi:"organization"`
	// The type of the mute config.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a V2OrganizationMuteConfig resource.
type V2OrganizationMuteConfigArgs struct {
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter pulumi.StringInput
	// location Id is provided by organization. If not provided, Use global as default.
	Location pulumi.StringPtrInput
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringInput
	// The organization whose Cloud Security Command Center the Mute
	// Config lives in.
	Organization pulumi.StringInput
	// The type of the mute config.
	Type pulumi.StringInput
}

func (V2OrganizationMuteConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2organizationMuteConfigArgs)(nil)).Elem()
}

type V2OrganizationMuteConfigInput interface {
	pulumi.Input

	ToV2OrganizationMuteConfigOutput() V2OrganizationMuteConfigOutput
	ToV2OrganizationMuteConfigOutputWithContext(ctx context.Context) V2OrganizationMuteConfigOutput
}

func (*V2OrganizationMuteConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**V2OrganizationMuteConfig)(nil)).Elem()
}

func (i *V2OrganizationMuteConfig) ToV2OrganizationMuteConfigOutput() V2OrganizationMuteConfigOutput {
	return i.ToV2OrganizationMuteConfigOutputWithContext(context.Background())
}

func (i *V2OrganizationMuteConfig) ToV2OrganizationMuteConfigOutputWithContext(ctx context.Context) V2OrganizationMuteConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2OrganizationMuteConfigOutput)
}

// V2OrganizationMuteConfigArrayInput is an input type that accepts V2OrganizationMuteConfigArray and V2OrganizationMuteConfigArrayOutput values.
// You can construct a concrete instance of `V2OrganizationMuteConfigArrayInput` via:
//
//	V2OrganizationMuteConfigArray{ V2OrganizationMuteConfigArgs{...} }
type V2OrganizationMuteConfigArrayInput interface {
	pulumi.Input

	ToV2OrganizationMuteConfigArrayOutput() V2OrganizationMuteConfigArrayOutput
	ToV2OrganizationMuteConfigArrayOutputWithContext(context.Context) V2OrganizationMuteConfigArrayOutput
}

type V2OrganizationMuteConfigArray []V2OrganizationMuteConfigInput

func (V2OrganizationMuteConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2OrganizationMuteConfig)(nil)).Elem()
}

func (i V2OrganizationMuteConfigArray) ToV2OrganizationMuteConfigArrayOutput() V2OrganizationMuteConfigArrayOutput {
	return i.ToV2OrganizationMuteConfigArrayOutputWithContext(context.Background())
}

func (i V2OrganizationMuteConfigArray) ToV2OrganizationMuteConfigArrayOutputWithContext(ctx context.Context) V2OrganizationMuteConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2OrganizationMuteConfigArrayOutput)
}

// V2OrganizationMuteConfigMapInput is an input type that accepts V2OrganizationMuteConfigMap and V2OrganizationMuteConfigMapOutput values.
// You can construct a concrete instance of `V2OrganizationMuteConfigMapInput` via:
//
//	V2OrganizationMuteConfigMap{ "key": V2OrganizationMuteConfigArgs{...} }
type V2OrganizationMuteConfigMapInput interface {
	pulumi.Input

	ToV2OrganizationMuteConfigMapOutput() V2OrganizationMuteConfigMapOutput
	ToV2OrganizationMuteConfigMapOutputWithContext(context.Context) V2OrganizationMuteConfigMapOutput
}

type V2OrganizationMuteConfigMap map[string]V2OrganizationMuteConfigInput

func (V2OrganizationMuteConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2OrganizationMuteConfig)(nil)).Elem()
}

func (i V2OrganizationMuteConfigMap) ToV2OrganizationMuteConfigMapOutput() V2OrganizationMuteConfigMapOutput {
	return i.ToV2OrganizationMuteConfigMapOutputWithContext(context.Background())
}

func (i V2OrganizationMuteConfigMap) ToV2OrganizationMuteConfigMapOutputWithContext(ctx context.Context) V2OrganizationMuteConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2OrganizationMuteConfigMapOutput)
}

type V2OrganizationMuteConfigOutput struct{ *pulumi.OutputState }

func (V2OrganizationMuteConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2OrganizationMuteConfig)(nil)).Elem()
}

func (o V2OrganizationMuteConfigOutput) ToV2OrganizationMuteConfigOutput() V2OrganizationMuteConfigOutput {
	return o
}

func (o V2OrganizationMuteConfigOutput) ToV2OrganizationMuteConfigOutputWithContext(ctx context.Context) V2OrganizationMuteConfigOutput {
	return o
}

// The time at which the mute config was created. This field is set by
// the server and will be ignored if provided on config creation.
func (o V2OrganizationMuteConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationMuteConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of the mute config.
func (o V2OrganizationMuteConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2OrganizationMuteConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An expression that defines the filter to apply across create/update
// events of findings. While creating a filter string, be mindful of
// the scope in which the mute configuration is being created. E.g.,
// If a filter contains project = X but is created under the
// project = Y scope, it might not match any findings.
func (o V2OrganizationMuteConfigOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationMuteConfig) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// location Id is provided by organization. If not provided, Use global as default.
func (o V2OrganizationMuteConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2OrganizationMuteConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Email address of the user who last edited the mute config. This
// field is set by the server and will be ignored if provided on
// config creation or update.
func (o V2OrganizationMuteConfigOutput) MostRecentEditor() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationMuteConfig) pulumi.StringOutput { return v.MostRecentEditor }).(pulumi.StringOutput)
}

// Unique identifier provided by the client within the parent scope.
func (o V2OrganizationMuteConfigOutput) MuteConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationMuteConfig) pulumi.StringOutput { return v.MuteConfigId }).(pulumi.StringOutput)
}

// Name of the mute config. Its format is
// organizations/{organization}/locations/global/muteConfigs/{configId},
// folders/{folder}/locations/global/muteConfigs/{configId},
// or projects/{project}/locations/global/muteConfigs/{configId}
func (o V2OrganizationMuteConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationMuteConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization whose Cloud Security Command Center the Mute
// Config lives in.
func (o V2OrganizationMuteConfigOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationMuteConfig) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The type of the mute config.
func (o V2OrganizationMuteConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationMuteConfig) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Output only. The most recent time at which the mute config was
// updated. This field is set by the server and will be ignored if
// provided on config creation or update.
func (o V2OrganizationMuteConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationMuteConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type V2OrganizationMuteConfigArrayOutput struct{ *pulumi.OutputState }

func (V2OrganizationMuteConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2OrganizationMuteConfig)(nil)).Elem()
}

func (o V2OrganizationMuteConfigArrayOutput) ToV2OrganizationMuteConfigArrayOutput() V2OrganizationMuteConfigArrayOutput {
	return o
}

func (o V2OrganizationMuteConfigArrayOutput) ToV2OrganizationMuteConfigArrayOutputWithContext(ctx context.Context) V2OrganizationMuteConfigArrayOutput {
	return o
}

func (o V2OrganizationMuteConfigArrayOutput) Index(i pulumi.IntInput) V2OrganizationMuteConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2OrganizationMuteConfig {
		return vs[0].([]*V2OrganizationMuteConfig)[vs[1].(int)]
	}).(V2OrganizationMuteConfigOutput)
}

type V2OrganizationMuteConfigMapOutput struct{ *pulumi.OutputState }

func (V2OrganizationMuteConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2OrganizationMuteConfig)(nil)).Elem()
}

func (o V2OrganizationMuteConfigMapOutput) ToV2OrganizationMuteConfigMapOutput() V2OrganizationMuteConfigMapOutput {
	return o
}

func (o V2OrganizationMuteConfigMapOutput) ToV2OrganizationMuteConfigMapOutputWithContext(ctx context.Context) V2OrganizationMuteConfigMapOutput {
	return o
}

func (o V2OrganizationMuteConfigMapOutput) MapIndex(k pulumi.StringInput) V2OrganizationMuteConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2OrganizationMuteConfig {
		return vs[0].(map[string]*V2OrganizationMuteConfig)[vs[1].(string)]
	}).(V2OrganizationMuteConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2OrganizationMuteConfigInput)(nil)).Elem(), &V2OrganizationMuteConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2OrganizationMuteConfigArrayInput)(nil)).Elem(), V2OrganizationMuteConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2OrganizationMuteConfigMapInput)(nil)).Elem(), V2OrganizationMuteConfigMap{})
	pulumi.RegisterOutputType(V2OrganizationMuteConfigOutput{})
	pulumi.RegisterOutputType(V2OrganizationMuteConfigArrayOutput{})
	pulumi.RegisterOutputType(V2OrganizationMuteConfigMapOutput{})
}
