// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Mute Findings is a volume management feature in Security Command Center
// that lets you manually or programmatically hide irrelevant findings,
// and create filters to automatically silence existing and future
// findings based on criteria you specify.
//
// To get more information about ProjectMuteConfig, see:
//
// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/projects.muteConfigs)
//
// ## Example Usage
//
// ### Scc V2 Project Mute Config Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := securitycenter.NewV2ProjectMuteConfig(ctx, "default", &securitycenter.V2ProjectMuteConfigArgs{
//				MuteConfigId: pulumi.String("my-config"),
//				Project:      pulumi.String("my-project-name"),
//				Location:     pulumi.String("global"),
//				Description:  pulumi.String("My custom Cloud Security Command Center Finding Project mute Configuration"),
//				Filter:       pulumi.String("severity = \"HIGH\""),
//				Type:         pulumi.String("STATIC"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ProjectMuteConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/muteConfigs/{{mute_config_id}}`
//
// * `{{project}}/{{location}}/{{mute_config_id}}`
//
// * `{{location}}/{{mute_config_id}}`
//
// When using the `pulumi import` command, ProjectMuteConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig default projects/{{project}}/locations/{{location}}/muteConfigs/{{mute_config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig default {{project}}/{{location}}/{{mute_config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig default {{location}}/{{mute_config_id}}
// ```
type V2ProjectMuteConfig struct {
	pulumi.CustomResourceState

	// The time at which the mute config was created. This field is set by
	// the server and will be ignored if provided on config creation.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of the mute config.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// location Id is provided by project. If not provided, Use global as default.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Email address of the user who last edited the mute config. This
	// field is set by the server and will be ignored if provided on
	// config creation or update.
	MostRecentEditor pulumi.StringOutput `pulumi:"mostRecentEditor"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringOutput `pulumi:"muteConfigId"`
	// Name of the mute config. Its format is
	// projects/{project}/locations/global/muteConfigs/{configId},
	// folders/{folder}/locations/global/muteConfigs/{configId},
	// or organizations/{organization}/locations/global/muteConfigs/{configId}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The type of the mute config.
	Type pulumi.StringOutput `pulumi:"type"`
	// Output only. The most recent time at which the mute config was
	// updated. This field is set by the server and will be ignored if
	// provided on config creation or update.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewV2ProjectMuteConfig registers a new resource with the given unique name, arguments, and options.
func NewV2ProjectMuteConfig(ctx *pulumi.Context,
	name string, args *V2ProjectMuteConfigArgs, opts ...pulumi.ResourceOption) (*V2ProjectMuteConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.MuteConfigId == nil {
		return nil, errors.New("invalid value for required argument 'MuteConfigId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2ProjectMuteConfig
	err := ctx.RegisterResource("gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2ProjectMuteConfig gets an existing V2ProjectMuteConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2ProjectMuteConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2ProjectMuteConfigState, opts ...pulumi.ResourceOption) (*V2ProjectMuteConfig, error) {
	var resource V2ProjectMuteConfig
	err := ctx.ReadResource("gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2ProjectMuteConfig resources.
type v2projectMuteConfigState struct {
	// The time at which the mute config was created. This field is set by
	// the server and will be ignored if provided on config creation.
	CreateTime *string `pulumi:"createTime"`
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter *string `pulumi:"filter"`
	// location Id is provided by project. If not provided, Use global as default.
	Location *string `pulumi:"location"`
	// Email address of the user who last edited the mute config. This
	// field is set by the server and will be ignored if provided on
	// config creation or update.
	MostRecentEditor *string `pulumi:"mostRecentEditor"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId *string `pulumi:"muteConfigId"`
	// Name of the mute config. Its format is
	// projects/{project}/locations/global/muteConfigs/{configId},
	// folders/{folder}/locations/global/muteConfigs/{configId},
	// or organizations/{organization}/locations/global/muteConfigs/{configId}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The type of the mute config.
	Type *string `pulumi:"type"`
	// Output only. The most recent time at which the mute config was
	// updated. This field is set by the server and will be ignored if
	// provided on config creation or update.
	UpdateTime *string `pulumi:"updateTime"`
}

type V2ProjectMuteConfigState struct {
	// The time at which the mute config was created. This field is set by
	// the server and will be ignored if provided on config creation.
	CreateTime pulumi.StringPtrInput
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter pulumi.StringPtrInput
	// location Id is provided by project. If not provided, Use global as default.
	Location pulumi.StringPtrInput
	// Email address of the user who last edited the mute config. This
	// field is set by the server and will be ignored if provided on
	// config creation or update.
	MostRecentEditor pulumi.StringPtrInput
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringPtrInput
	// Name of the mute config. Its format is
	// projects/{project}/locations/global/muteConfigs/{configId},
	// folders/{folder}/locations/global/muteConfigs/{configId},
	// or organizations/{organization}/locations/global/muteConfigs/{configId}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The type of the mute config.
	Type pulumi.StringPtrInput
	// Output only. The most recent time at which the mute config was
	// updated. This field is set by the server and will be ignored if
	// provided on config creation or update.
	UpdateTime pulumi.StringPtrInput
}

func (V2ProjectMuteConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2projectMuteConfigState)(nil)).Elem()
}

type v2projectMuteConfigArgs struct {
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter string `pulumi:"filter"`
	// location Id is provided by project. If not provided, Use global as default.
	Location *string `pulumi:"location"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId string `pulumi:"muteConfigId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The type of the mute config.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a V2ProjectMuteConfig resource.
type V2ProjectMuteConfigArgs struct {
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update
	// events of findings. While creating a filter string, be mindful of
	// the scope in which the mute configuration is being created. E.g.,
	// If a filter contains project = X but is created under the
	// project = Y scope, it might not match any findings.
	Filter pulumi.StringInput
	// location Id is provided by project. If not provided, Use global as default.
	Location pulumi.StringPtrInput
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The type of the mute config.
	Type pulumi.StringInput
}

func (V2ProjectMuteConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2projectMuteConfigArgs)(nil)).Elem()
}

type V2ProjectMuteConfigInput interface {
	pulumi.Input

	ToV2ProjectMuteConfigOutput() V2ProjectMuteConfigOutput
	ToV2ProjectMuteConfigOutputWithContext(ctx context.Context) V2ProjectMuteConfigOutput
}

func (*V2ProjectMuteConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**V2ProjectMuteConfig)(nil)).Elem()
}

func (i *V2ProjectMuteConfig) ToV2ProjectMuteConfigOutput() V2ProjectMuteConfigOutput {
	return i.ToV2ProjectMuteConfigOutputWithContext(context.Background())
}

func (i *V2ProjectMuteConfig) ToV2ProjectMuteConfigOutputWithContext(ctx context.Context) V2ProjectMuteConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ProjectMuteConfigOutput)
}

// V2ProjectMuteConfigArrayInput is an input type that accepts V2ProjectMuteConfigArray and V2ProjectMuteConfigArrayOutput values.
// You can construct a concrete instance of `V2ProjectMuteConfigArrayInput` via:
//
//	V2ProjectMuteConfigArray{ V2ProjectMuteConfigArgs{...} }
type V2ProjectMuteConfigArrayInput interface {
	pulumi.Input

	ToV2ProjectMuteConfigArrayOutput() V2ProjectMuteConfigArrayOutput
	ToV2ProjectMuteConfigArrayOutputWithContext(context.Context) V2ProjectMuteConfigArrayOutput
}

type V2ProjectMuteConfigArray []V2ProjectMuteConfigInput

func (V2ProjectMuteConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2ProjectMuteConfig)(nil)).Elem()
}

func (i V2ProjectMuteConfigArray) ToV2ProjectMuteConfigArrayOutput() V2ProjectMuteConfigArrayOutput {
	return i.ToV2ProjectMuteConfigArrayOutputWithContext(context.Background())
}

func (i V2ProjectMuteConfigArray) ToV2ProjectMuteConfigArrayOutputWithContext(ctx context.Context) V2ProjectMuteConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ProjectMuteConfigArrayOutput)
}

// V2ProjectMuteConfigMapInput is an input type that accepts V2ProjectMuteConfigMap and V2ProjectMuteConfigMapOutput values.
// You can construct a concrete instance of `V2ProjectMuteConfigMapInput` via:
//
//	V2ProjectMuteConfigMap{ "key": V2ProjectMuteConfigArgs{...} }
type V2ProjectMuteConfigMapInput interface {
	pulumi.Input

	ToV2ProjectMuteConfigMapOutput() V2ProjectMuteConfigMapOutput
	ToV2ProjectMuteConfigMapOutputWithContext(context.Context) V2ProjectMuteConfigMapOutput
}

type V2ProjectMuteConfigMap map[string]V2ProjectMuteConfigInput

func (V2ProjectMuteConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2ProjectMuteConfig)(nil)).Elem()
}

func (i V2ProjectMuteConfigMap) ToV2ProjectMuteConfigMapOutput() V2ProjectMuteConfigMapOutput {
	return i.ToV2ProjectMuteConfigMapOutputWithContext(context.Background())
}

func (i V2ProjectMuteConfigMap) ToV2ProjectMuteConfigMapOutputWithContext(ctx context.Context) V2ProjectMuteConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ProjectMuteConfigMapOutput)
}

type V2ProjectMuteConfigOutput struct{ *pulumi.OutputState }

func (V2ProjectMuteConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2ProjectMuteConfig)(nil)).Elem()
}

func (o V2ProjectMuteConfigOutput) ToV2ProjectMuteConfigOutput() V2ProjectMuteConfigOutput {
	return o
}

func (o V2ProjectMuteConfigOutput) ToV2ProjectMuteConfigOutputWithContext(ctx context.Context) V2ProjectMuteConfigOutput {
	return o
}

// The time at which the mute config was created. This field is set by
// the server and will be ignored if provided on config creation.
func (o V2ProjectMuteConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ProjectMuteConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of the mute config.
func (o V2ProjectMuteConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2ProjectMuteConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An expression that defines the filter to apply across create/update
// events of findings. While creating a filter string, be mindful of
// the scope in which the mute configuration is being created. E.g.,
// If a filter contains project = X but is created under the
// project = Y scope, it might not match any findings.
func (o V2ProjectMuteConfigOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ProjectMuteConfig) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// location Id is provided by project. If not provided, Use global as default.
func (o V2ProjectMuteConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2ProjectMuteConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Email address of the user who last edited the mute config. This
// field is set by the server and will be ignored if provided on
// config creation or update.
func (o V2ProjectMuteConfigOutput) MostRecentEditor() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ProjectMuteConfig) pulumi.StringOutput { return v.MostRecentEditor }).(pulumi.StringOutput)
}

// Unique identifier provided by the client within the parent scope.
func (o V2ProjectMuteConfigOutput) MuteConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ProjectMuteConfig) pulumi.StringOutput { return v.MuteConfigId }).(pulumi.StringOutput)
}

// Name of the mute config. Its format is
// projects/{project}/locations/global/muteConfigs/{configId},
// folders/{folder}/locations/global/muteConfigs/{configId},
// or organizations/{organization}/locations/global/muteConfigs/{configId}
func (o V2ProjectMuteConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ProjectMuteConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o V2ProjectMuteConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ProjectMuteConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The type of the mute config.
func (o V2ProjectMuteConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ProjectMuteConfig) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Output only. The most recent time at which the mute config was
// updated. This field is set by the server and will be ignored if
// provided on config creation or update.
func (o V2ProjectMuteConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ProjectMuteConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type V2ProjectMuteConfigArrayOutput struct{ *pulumi.OutputState }

func (V2ProjectMuteConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2ProjectMuteConfig)(nil)).Elem()
}

func (o V2ProjectMuteConfigArrayOutput) ToV2ProjectMuteConfigArrayOutput() V2ProjectMuteConfigArrayOutput {
	return o
}

func (o V2ProjectMuteConfigArrayOutput) ToV2ProjectMuteConfigArrayOutputWithContext(ctx context.Context) V2ProjectMuteConfigArrayOutput {
	return o
}

func (o V2ProjectMuteConfigArrayOutput) Index(i pulumi.IntInput) V2ProjectMuteConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2ProjectMuteConfig {
		return vs[0].([]*V2ProjectMuteConfig)[vs[1].(int)]
	}).(V2ProjectMuteConfigOutput)
}

type V2ProjectMuteConfigMapOutput struct{ *pulumi.OutputState }

func (V2ProjectMuteConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2ProjectMuteConfig)(nil)).Elem()
}

func (o V2ProjectMuteConfigMapOutput) ToV2ProjectMuteConfigMapOutput() V2ProjectMuteConfigMapOutput {
	return o
}

func (o V2ProjectMuteConfigMapOutput) ToV2ProjectMuteConfigMapOutputWithContext(ctx context.Context) V2ProjectMuteConfigMapOutput {
	return o
}

func (o V2ProjectMuteConfigMapOutput) MapIndex(k pulumi.StringInput) V2ProjectMuteConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2ProjectMuteConfig {
		return vs[0].(map[string]*V2ProjectMuteConfig)[vs[1].(string)]
	}).(V2ProjectMuteConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2ProjectMuteConfigInput)(nil)).Elem(), &V2ProjectMuteConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ProjectMuteConfigArrayInput)(nil)).Elem(), V2ProjectMuteConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ProjectMuteConfigMapInput)(nil)).Elem(), V2ProjectMuteConfigMap{})
	pulumi.RegisterOutputType(V2ProjectMuteConfigOutput{})
	pulumi.RegisterOutputType(V2ProjectMuteConfigArrayOutput{})
	pulumi.RegisterOutputType(V2ProjectMuteConfigMapOutput{})
}
