// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Cloud Security Command Center's (Cloud SCC) finding source. A finding
// source is an entity or a mechanism that can produce a finding. A source is
// like a container of findings that come from the same scanner, logger,
// monitor, etc.
//
// To get more information about Source, see:
//
// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.sources)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/security-command-center/docs)
//
// ## Example Usage
// ### Scc Source Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/securitycenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := securitycenter.NewSource(ctx, "customSource", &securitycenter.SourceArgs{
//				Description:  pulumi.String("My custom Cloud Security Command Center Finding Source"),
//				DisplayName:  pulumi.String("My Source"),
//				Organization: pulumi.String("123456789"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Source can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:securitycenter/sourceIamBinding:SourceIamBinding default organizations/{{organization}}/sources/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:securitycenter/sourceIamBinding:SourceIamBinding default {{organization}}/{{name}}
//
// ```
type SourceIamBinding struct {
	pulumi.CustomResourceState

	Condition SourceIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput                `pulumi:"etag"`
	Members   pulumi.StringArrayOutput           `pulumi:"members"`
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization pulumi.StringOutput `pulumi:"organization"`
	Role         pulumi.StringOutput `pulumi:"role"`
	Source       pulumi.StringOutput `pulumi:"source"`
}

// NewSourceIamBinding registers a new resource with the given unique name, arguments, and options.
func NewSourceIamBinding(ctx *pulumi.Context,
	name string, args *SourceIamBindingArgs, opts ...pulumi.ResourceOption) (*SourceIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	var resource SourceIamBinding
	err := ctx.RegisterResource("gcp:securitycenter/sourceIamBinding:SourceIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceIamBinding gets an existing SourceIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceIamBindingState, opts ...pulumi.ResourceOption) (*SourceIamBinding, error) {
	var resource SourceIamBinding
	err := ctx.ReadResource("gcp:securitycenter/sourceIamBinding:SourceIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceIamBinding resources.
type sourceIamBindingState struct {
	Condition *SourceIamBindingCondition `pulumi:"condition"`
	Etag      *string                    `pulumi:"etag"`
	Members   []string                   `pulumi:"members"`
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization *string `pulumi:"organization"`
	Role         *string `pulumi:"role"`
	Source       *string `pulumi:"source"`
}

type SourceIamBindingState struct {
	Condition SourceIamBindingConditionPtrInput
	Etag      pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization pulumi.StringPtrInput
	Role         pulumi.StringPtrInput
	Source       pulumi.StringPtrInput
}

func (SourceIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceIamBindingState)(nil)).Elem()
}

type sourceIamBindingArgs struct {
	Condition *SourceIamBindingCondition `pulumi:"condition"`
	Members   []string                   `pulumi:"members"`
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization string `pulumi:"organization"`
	Role         string `pulumi:"role"`
	Source       string `pulumi:"source"`
}

// The set of arguments for constructing a SourceIamBinding resource.
type SourceIamBindingArgs struct {
	Condition SourceIamBindingConditionPtrInput
	Members   pulumi.StringArrayInput
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization pulumi.StringInput
	Role         pulumi.StringInput
	Source       pulumi.StringInput
}

func (SourceIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceIamBindingArgs)(nil)).Elem()
}

type SourceIamBindingInput interface {
	pulumi.Input

	ToSourceIamBindingOutput() SourceIamBindingOutput
	ToSourceIamBindingOutputWithContext(ctx context.Context) SourceIamBindingOutput
}

func (*SourceIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceIamBinding)(nil)).Elem()
}

func (i *SourceIamBinding) ToSourceIamBindingOutput() SourceIamBindingOutput {
	return i.ToSourceIamBindingOutputWithContext(context.Background())
}

func (i *SourceIamBinding) ToSourceIamBindingOutputWithContext(ctx context.Context) SourceIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamBindingOutput)
}

// SourceIamBindingArrayInput is an input type that accepts SourceIamBindingArray and SourceIamBindingArrayOutput values.
// You can construct a concrete instance of `SourceIamBindingArrayInput` via:
//
//	SourceIamBindingArray{ SourceIamBindingArgs{...} }
type SourceIamBindingArrayInput interface {
	pulumi.Input

	ToSourceIamBindingArrayOutput() SourceIamBindingArrayOutput
	ToSourceIamBindingArrayOutputWithContext(context.Context) SourceIamBindingArrayOutput
}

type SourceIamBindingArray []SourceIamBindingInput

func (SourceIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceIamBinding)(nil)).Elem()
}

func (i SourceIamBindingArray) ToSourceIamBindingArrayOutput() SourceIamBindingArrayOutput {
	return i.ToSourceIamBindingArrayOutputWithContext(context.Background())
}

func (i SourceIamBindingArray) ToSourceIamBindingArrayOutputWithContext(ctx context.Context) SourceIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamBindingArrayOutput)
}

// SourceIamBindingMapInput is an input type that accepts SourceIamBindingMap and SourceIamBindingMapOutput values.
// You can construct a concrete instance of `SourceIamBindingMapInput` via:
//
//	SourceIamBindingMap{ "key": SourceIamBindingArgs{...} }
type SourceIamBindingMapInput interface {
	pulumi.Input

	ToSourceIamBindingMapOutput() SourceIamBindingMapOutput
	ToSourceIamBindingMapOutputWithContext(context.Context) SourceIamBindingMapOutput
}

type SourceIamBindingMap map[string]SourceIamBindingInput

func (SourceIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceIamBinding)(nil)).Elem()
}

func (i SourceIamBindingMap) ToSourceIamBindingMapOutput() SourceIamBindingMapOutput {
	return i.ToSourceIamBindingMapOutputWithContext(context.Background())
}

func (i SourceIamBindingMap) ToSourceIamBindingMapOutputWithContext(ctx context.Context) SourceIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamBindingMapOutput)
}

type SourceIamBindingOutput struct{ *pulumi.OutputState }

func (SourceIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceIamBinding)(nil)).Elem()
}

func (o SourceIamBindingOutput) ToSourceIamBindingOutput() SourceIamBindingOutput {
	return o
}

func (o SourceIamBindingOutput) ToSourceIamBindingOutputWithContext(ctx context.Context) SourceIamBindingOutput {
	return o
}

func (o SourceIamBindingOutput) Condition() SourceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *SourceIamBinding) SourceIamBindingConditionPtrOutput { return v.Condition }).(SourceIamBindingConditionPtrOutput)
}

func (o SourceIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SourceIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SourceIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The organization whose Cloud Security Command Center the Source
// lives in.
func (o SourceIamBindingOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamBinding) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

func (o SourceIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o SourceIamBindingOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamBinding) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

type SourceIamBindingArrayOutput struct{ *pulumi.OutputState }

func (SourceIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceIamBinding)(nil)).Elem()
}

func (o SourceIamBindingArrayOutput) ToSourceIamBindingArrayOutput() SourceIamBindingArrayOutput {
	return o
}

func (o SourceIamBindingArrayOutput) ToSourceIamBindingArrayOutputWithContext(ctx context.Context) SourceIamBindingArrayOutput {
	return o
}

func (o SourceIamBindingArrayOutput) Index(i pulumi.IntInput) SourceIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceIamBinding {
		return vs[0].([]*SourceIamBinding)[vs[1].(int)]
	}).(SourceIamBindingOutput)
}

type SourceIamBindingMapOutput struct{ *pulumi.OutputState }

func (SourceIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceIamBinding)(nil)).Elem()
}

func (o SourceIamBindingMapOutput) ToSourceIamBindingMapOutput() SourceIamBindingMapOutput {
	return o
}

func (o SourceIamBindingMapOutput) ToSourceIamBindingMapOutputWithContext(ctx context.Context) SourceIamBindingMapOutput {
	return o
}

func (o SourceIamBindingMapOutput) MapIndex(k pulumi.StringInput) SourceIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceIamBinding {
		return vs[0].(map[string]*SourceIamBinding)[vs[1].(string)]
	}).(SourceIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamBindingInput)(nil)).Elem(), &SourceIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamBindingArrayInput)(nil)).Elem(), SourceIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamBindingMapInput)(nil)).Elem(), SourceIamBindingMap{})
	pulumi.RegisterOutputType(SourceIamBindingOutput{})
	pulumi.RegisterOutputType(SourceIamBindingArrayOutput{})
	pulumi.RegisterOutputType(SourceIamBindingMapOutput{})
}
