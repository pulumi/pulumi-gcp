// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Cloud Security Command Center's (Cloud SCC) finding source. A finding
// source is an entity or a mechanism that can produce a finding. A source is
// like a container of findings that come from the same scanner, logger,
// monitor, etc.
//
// To get more information about Source, see:
//
// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.sources)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/security-command-center/docs)
//
// ## Example Usage
// ### Scc Source Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/securitycenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := securitycenter.NewSource(ctx, "customSource", &securitycenter.SourceArgs{
//				Description:  pulumi.String("My custom Cloud Security Command Center Finding Source"),
//				DisplayName:  pulumi.String("My Source"),
//				Organization: pulumi.String("123456789"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Source can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:securitycenter/sourceIamPolicy:SourceIamPolicy default organizations/{{organization}}/sources/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:securitycenter/sourceIamPolicy:SourceIamPolicy default {{organization}}/{{name}}
//
// ```
type SourceIamPolicy struct {
	pulumi.CustomResourceState

	Etag pulumi.StringOutput `pulumi:"etag"`
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization pulumi.StringOutput `pulumi:"organization"`
	PolicyData   pulumi.StringOutput `pulumi:"policyData"`
	Source       pulumi.StringOutput `pulumi:"source"`
}

// NewSourceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewSourceIamPolicy(ctx *pulumi.Context,
	name string, args *SourceIamPolicyArgs, opts ...pulumi.ResourceOption) (*SourceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	var resource SourceIamPolicy
	err := ctx.RegisterResource("gcp:securitycenter/sourceIamPolicy:SourceIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceIamPolicy gets an existing SourceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceIamPolicyState, opts ...pulumi.ResourceOption) (*SourceIamPolicy, error) {
	var resource SourceIamPolicy
	err := ctx.ReadResource("gcp:securitycenter/sourceIamPolicy:SourceIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceIamPolicy resources.
type sourceIamPolicyState struct {
	Etag *string `pulumi:"etag"`
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization *string `pulumi:"organization"`
	PolicyData   *string `pulumi:"policyData"`
	Source       *string `pulumi:"source"`
}

type SourceIamPolicyState struct {
	Etag pulumi.StringPtrInput
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization pulumi.StringPtrInput
	PolicyData   pulumi.StringPtrInput
	Source       pulumi.StringPtrInput
}

func (SourceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceIamPolicyState)(nil)).Elem()
}

type sourceIamPolicyArgs struct {
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization string `pulumi:"organization"`
	PolicyData   string `pulumi:"policyData"`
	Source       string `pulumi:"source"`
}

// The set of arguments for constructing a SourceIamPolicy resource.
type SourceIamPolicyArgs struct {
	// The organization whose Cloud Security Command Center the Source
	// lives in.
	Organization pulumi.StringInput
	PolicyData   pulumi.StringInput
	Source       pulumi.StringInput
}

func (SourceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceIamPolicyArgs)(nil)).Elem()
}

type SourceIamPolicyInput interface {
	pulumi.Input

	ToSourceIamPolicyOutput() SourceIamPolicyOutput
	ToSourceIamPolicyOutputWithContext(ctx context.Context) SourceIamPolicyOutput
}

func (*SourceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceIamPolicy)(nil)).Elem()
}

func (i *SourceIamPolicy) ToSourceIamPolicyOutput() SourceIamPolicyOutput {
	return i.ToSourceIamPolicyOutputWithContext(context.Background())
}

func (i *SourceIamPolicy) ToSourceIamPolicyOutputWithContext(ctx context.Context) SourceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamPolicyOutput)
}

// SourceIamPolicyArrayInput is an input type that accepts SourceIamPolicyArray and SourceIamPolicyArrayOutput values.
// You can construct a concrete instance of `SourceIamPolicyArrayInput` via:
//
//	SourceIamPolicyArray{ SourceIamPolicyArgs{...} }
type SourceIamPolicyArrayInput interface {
	pulumi.Input

	ToSourceIamPolicyArrayOutput() SourceIamPolicyArrayOutput
	ToSourceIamPolicyArrayOutputWithContext(context.Context) SourceIamPolicyArrayOutput
}

type SourceIamPolicyArray []SourceIamPolicyInput

func (SourceIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceIamPolicy)(nil)).Elem()
}

func (i SourceIamPolicyArray) ToSourceIamPolicyArrayOutput() SourceIamPolicyArrayOutput {
	return i.ToSourceIamPolicyArrayOutputWithContext(context.Background())
}

func (i SourceIamPolicyArray) ToSourceIamPolicyArrayOutputWithContext(ctx context.Context) SourceIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamPolicyArrayOutput)
}

// SourceIamPolicyMapInput is an input type that accepts SourceIamPolicyMap and SourceIamPolicyMapOutput values.
// You can construct a concrete instance of `SourceIamPolicyMapInput` via:
//
//	SourceIamPolicyMap{ "key": SourceIamPolicyArgs{...} }
type SourceIamPolicyMapInput interface {
	pulumi.Input

	ToSourceIamPolicyMapOutput() SourceIamPolicyMapOutput
	ToSourceIamPolicyMapOutputWithContext(context.Context) SourceIamPolicyMapOutput
}

type SourceIamPolicyMap map[string]SourceIamPolicyInput

func (SourceIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceIamPolicy)(nil)).Elem()
}

func (i SourceIamPolicyMap) ToSourceIamPolicyMapOutput() SourceIamPolicyMapOutput {
	return i.ToSourceIamPolicyMapOutputWithContext(context.Background())
}

func (i SourceIamPolicyMap) ToSourceIamPolicyMapOutputWithContext(ctx context.Context) SourceIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamPolicyMapOutput)
}

type SourceIamPolicyOutput struct{ *pulumi.OutputState }

func (SourceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceIamPolicy)(nil)).Elem()
}

func (o SourceIamPolicyOutput) ToSourceIamPolicyOutput() SourceIamPolicyOutput {
	return o
}

func (o SourceIamPolicyOutput) ToSourceIamPolicyOutputWithContext(ctx context.Context) SourceIamPolicyOutput {
	return o
}

func (o SourceIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The organization whose Cloud Security Command Center the Source
// lives in.
func (o SourceIamPolicyOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamPolicy) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

func (o SourceIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o SourceIamPolicyOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceIamPolicy) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

type SourceIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (SourceIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceIamPolicy)(nil)).Elem()
}

func (o SourceIamPolicyArrayOutput) ToSourceIamPolicyArrayOutput() SourceIamPolicyArrayOutput {
	return o
}

func (o SourceIamPolicyArrayOutput) ToSourceIamPolicyArrayOutputWithContext(ctx context.Context) SourceIamPolicyArrayOutput {
	return o
}

func (o SourceIamPolicyArrayOutput) Index(i pulumi.IntInput) SourceIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceIamPolicy {
		return vs[0].([]*SourceIamPolicy)[vs[1].(int)]
	}).(SourceIamPolicyOutput)
}

type SourceIamPolicyMapOutput struct{ *pulumi.OutputState }

func (SourceIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceIamPolicy)(nil)).Elem()
}

func (o SourceIamPolicyMapOutput) ToSourceIamPolicyMapOutput() SourceIamPolicyMapOutput {
	return o
}

func (o SourceIamPolicyMapOutput) ToSourceIamPolicyMapOutputWithContext(ctx context.Context) SourceIamPolicyMapOutput {
	return o
}

func (o SourceIamPolicyMapOutput) MapIndex(k pulumi.StringInput) SourceIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceIamPolicy {
		return vs[0].(map[string]*SourceIamPolicy)[vs[1].(string)]
	}).(SourceIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamPolicyInput)(nil)).Elem(), &SourceIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamPolicyArrayInput)(nil)).Elem(), SourceIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamPolicyMapInput)(nil)).Elem(), SourceIamPolicyMap{})
	pulumi.RegisterOutputType(SourceIamPolicyOutput{})
	pulumi.RegisterOutputType(SourceIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(SourceIamPolicyMapOutput{})
}
