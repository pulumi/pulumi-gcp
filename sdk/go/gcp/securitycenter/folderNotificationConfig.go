// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Cloud Security Command Center (Cloud SCC) notification configs. A
// notification config is a Cloud SCC resource that contains the
// configuration to send notifications for create/update events of
// findings, assets and etc.
// > **Note:** In order to use Cloud SCC resources, your organization must be enrolled
// in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
// Without doing so, you may run into errors during resource creation.
//
// To get more information about FolderNotificationConfig, see:
//
// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/folders.notificationConfigs)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/security-command-center/docs)
//
// ## Example Usage
//
// ## Import
//
// FolderNotificationConfig can be imported using any of these accepted formats:
//
// * `folders/{{folder}}/notificationConfigs/{{config_id}}`
//
// * `{{folder}}/{{config_id}}`
//
// When using the `pulumi import` command, FolderNotificationConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:securitycenter/folderNotificationConfig:FolderNotificationConfig default folders/{{folder}}/notificationConfigs/{{config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securitycenter/folderNotificationConfig:FolderNotificationConfig default {{folder}}/{{config_id}}
// ```
type FolderNotificationConfig struct {
	pulumi.CustomResourceState

	// This must be unique within the organization.
	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Numerical ID of the parent folder.
	Folder pulumi.StringOutput `pulumi:"folder"`
	// The resource name of this notification config, in the format
	// `folders/{{folder}}/notificationConfigs/{{config_id}}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringOutput `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig FolderNotificationConfigStreamingConfigOutput `pulumi:"streamingConfig"`
}

// NewFolderNotificationConfig registers a new resource with the given unique name, arguments, and options.
func NewFolderNotificationConfig(ctx *pulumi.Context,
	name string, args *FolderNotificationConfigArgs, opts ...pulumi.ResourceOption) (*FolderNotificationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	if args.PubsubTopic == nil {
		return nil, errors.New("invalid value for required argument 'PubsubTopic'")
	}
	if args.StreamingConfig == nil {
		return nil, errors.New("invalid value for required argument 'StreamingConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FolderNotificationConfig
	err := ctx.RegisterResource("gcp:securitycenter/folderNotificationConfig:FolderNotificationConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolderNotificationConfig gets an existing FolderNotificationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolderNotificationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderNotificationConfigState, opts ...pulumi.ResourceOption) (*FolderNotificationConfig, error) {
	var resource FolderNotificationConfig
	err := ctx.ReadResource("gcp:securitycenter/folderNotificationConfig:FolderNotificationConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FolderNotificationConfig resources.
type folderNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId *string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// Numerical ID of the parent folder.
	Folder *string `pulumi:"folder"`
	// The resource name of this notification config, in the format
	// `folders/{{folder}}/notificationConfigs/{{config_id}}`.
	Name *string `pulumi:"name"`
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig *FolderNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
}

type FolderNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringPtrInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// Numerical ID of the parent folder.
	Folder pulumi.StringPtrInput
	// The resource name of this notification config, in the format
	// `folders/{{folder}}/notificationConfigs/{{config_id}}`.
	Name pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringPtrInput
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig FolderNotificationConfigStreamingConfigPtrInput
}

func (FolderNotificationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderNotificationConfigState)(nil)).Elem()
}

type folderNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// Numerical ID of the parent folder.
	Folder string `pulumi:"folder"`
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic string `pulumi:"pubsubTopic"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig FolderNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
}

// The set of arguments for constructing a FolderNotificationConfig resource.
type FolderNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// Numerical ID of the parent folder.
	Folder pulumi.StringInput
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringInput
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig FolderNotificationConfigStreamingConfigInput
}

func (FolderNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderNotificationConfigArgs)(nil)).Elem()
}

type FolderNotificationConfigInput interface {
	pulumi.Input

	ToFolderNotificationConfigOutput() FolderNotificationConfigOutput
	ToFolderNotificationConfigOutputWithContext(ctx context.Context) FolderNotificationConfigOutput
}

func (*FolderNotificationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderNotificationConfig)(nil)).Elem()
}

func (i *FolderNotificationConfig) ToFolderNotificationConfigOutput() FolderNotificationConfigOutput {
	return i.ToFolderNotificationConfigOutputWithContext(context.Background())
}

func (i *FolderNotificationConfig) ToFolderNotificationConfigOutputWithContext(ctx context.Context) FolderNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderNotificationConfigOutput)
}

// FolderNotificationConfigArrayInput is an input type that accepts FolderNotificationConfigArray and FolderNotificationConfigArrayOutput values.
// You can construct a concrete instance of `FolderNotificationConfigArrayInput` via:
//
//	FolderNotificationConfigArray{ FolderNotificationConfigArgs{...} }
type FolderNotificationConfigArrayInput interface {
	pulumi.Input

	ToFolderNotificationConfigArrayOutput() FolderNotificationConfigArrayOutput
	ToFolderNotificationConfigArrayOutputWithContext(context.Context) FolderNotificationConfigArrayOutput
}

type FolderNotificationConfigArray []FolderNotificationConfigInput

func (FolderNotificationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FolderNotificationConfig)(nil)).Elem()
}

func (i FolderNotificationConfigArray) ToFolderNotificationConfigArrayOutput() FolderNotificationConfigArrayOutput {
	return i.ToFolderNotificationConfigArrayOutputWithContext(context.Background())
}

func (i FolderNotificationConfigArray) ToFolderNotificationConfigArrayOutputWithContext(ctx context.Context) FolderNotificationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderNotificationConfigArrayOutput)
}

// FolderNotificationConfigMapInput is an input type that accepts FolderNotificationConfigMap and FolderNotificationConfigMapOutput values.
// You can construct a concrete instance of `FolderNotificationConfigMapInput` via:
//
//	FolderNotificationConfigMap{ "key": FolderNotificationConfigArgs{...} }
type FolderNotificationConfigMapInput interface {
	pulumi.Input

	ToFolderNotificationConfigMapOutput() FolderNotificationConfigMapOutput
	ToFolderNotificationConfigMapOutputWithContext(context.Context) FolderNotificationConfigMapOutput
}

type FolderNotificationConfigMap map[string]FolderNotificationConfigInput

func (FolderNotificationConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FolderNotificationConfig)(nil)).Elem()
}

func (i FolderNotificationConfigMap) ToFolderNotificationConfigMapOutput() FolderNotificationConfigMapOutput {
	return i.ToFolderNotificationConfigMapOutputWithContext(context.Background())
}

func (i FolderNotificationConfigMap) ToFolderNotificationConfigMapOutputWithContext(ctx context.Context) FolderNotificationConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderNotificationConfigMapOutput)
}

type FolderNotificationConfigOutput struct{ *pulumi.OutputState }

func (FolderNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderNotificationConfig)(nil)).Elem()
}

func (o FolderNotificationConfigOutput) ToFolderNotificationConfigOutput() FolderNotificationConfigOutput {
	return o
}

func (o FolderNotificationConfigOutput) ToFolderNotificationConfigOutputWithContext(ctx context.Context) FolderNotificationConfigOutput {
	return o
}

// This must be unique within the organization.
func (o FolderNotificationConfigOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderNotificationConfig) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

// The description of the notification config (max of 1024 characters).
func (o FolderNotificationConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FolderNotificationConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Numerical ID of the parent folder.
func (o FolderNotificationConfigOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderNotificationConfig) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// The resource name of this notification config, in the format
// `folders/{{folder}}/notificationConfigs/{{config_id}}`.
func (o FolderNotificationConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderNotificationConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Pub/Sub topic to send notifications to. Its format is
// "projects/[projectId]/topics/[topic]".
func (o FolderNotificationConfigOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderNotificationConfig) pulumi.StringOutput { return v.PubsubTopic }).(pulumi.StringOutput)
}

// The service account that needs "pubsub.topics.publish" permission to
// publish to the Pub/Sub topic.
func (o FolderNotificationConfigOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderNotificationConfig) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The config for triggering streaming-based notifications.
// Structure is documented below.
func (o FolderNotificationConfigOutput) StreamingConfig() FolderNotificationConfigStreamingConfigOutput {
	return o.ApplyT(func(v *FolderNotificationConfig) FolderNotificationConfigStreamingConfigOutput {
		return v.StreamingConfig
	}).(FolderNotificationConfigStreamingConfigOutput)
}

type FolderNotificationConfigArrayOutput struct{ *pulumi.OutputState }

func (FolderNotificationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FolderNotificationConfig)(nil)).Elem()
}

func (o FolderNotificationConfigArrayOutput) ToFolderNotificationConfigArrayOutput() FolderNotificationConfigArrayOutput {
	return o
}

func (o FolderNotificationConfigArrayOutput) ToFolderNotificationConfigArrayOutputWithContext(ctx context.Context) FolderNotificationConfigArrayOutput {
	return o
}

func (o FolderNotificationConfigArrayOutput) Index(i pulumi.IntInput) FolderNotificationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FolderNotificationConfig {
		return vs[0].([]*FolderNotificationConfig)[vs[1].(int)]
	}).(FolderNotificationConfigOutput)
}

type FolderNotificationConfigMapOutput struct{ *pulumi.OutputState }

func (FolderNotificationConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FolderNotificationConfig)(nil)).Elem()
}

func (o FolderNotificationConfigMapOutput) ToFolderNotificationConfigMapOutput() FolderNotificationConfigMapOutput {
	return o
}

func (o FolderNotificationConfigMapOutput) ToFolderNotificationConfigMapOutputWithContext(ctx context.Context) FolderNotificationConfigMapOutput {
	return o
}

func (o FolderNotificationConfigMapOutput) MapIndex(k pulumi.StringInput) FolderNotificationConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FolderNotificationConfig {
		return vs[0].(map[string]*FolderNotificationConfig)[vs[1].(string)]
	}).(FolderNotificationConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FolderNotificationConfigInput)(nil)).Elem(), &FolderNotificationConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderNotificationConfigArrayInput)(nil)).Elem(), FolderNotificationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderNotificationConfigMapInput)(nil)).Elem(), FolderNotificationConfigMap{})
	pulumi.RegisterOutputType(FolderNotificationConfigOutput{})
	pulumi.RegisterOutputType(FolderNotificationConfigArrayOutput{})
	pulumi.RegisterOutputType(FolderNotificationConfigMapOutput{})
}
