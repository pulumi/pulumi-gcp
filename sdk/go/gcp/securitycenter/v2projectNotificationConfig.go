// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Cloud Security Command Center (Cloud SCC) notification configs. A
// notification config is a Cloud SCC resource that contains the
// configuration to send notifications for create/update events of
// findings, assets and etc.
// > **Note:** In order to use Cloud SCC resources, your organization must be enrolled
// in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
// Without doing so, you may run into errors during resource creation.
//
// To get more information about ProjectNotificationConfig, see:
//
// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/projects.locations.notificationConfigs)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/security-command-center/docs)
//
// ## Example Usage
//
// ### Scc V2 Project Notification Config Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/pubsub"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/securitycenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sccV2ProjectNotification, err := pubsub.NewTopic(ctx, "scc_v2_project_notification", &pubsub.TopicArgs{
//				Name: pulumi.String("my-topic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securitycenter.NewV2ProjectNotificationConfig(ctx, "custom_notification_config", &securitycenter.V2ProjectNotificationConfigArgs{
//				ConfigId:    pulumi.String("my-config"),
//				Project:     pulumi.String("my-project-name"),
//				Location:    pulumi.String("global"),
//				Description: pulumi.String("My custom Cloud Security Command Center Finding Notification Configuration"),
//				PubsubTopic: sccV2ProjectNotification.ID(),
//				StreamingConfig: &securitycenter.V2ProjectNotificationConfigStreamingConfigArgs{
//					Filter: pulumi.String("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\""),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ProjectNotificationConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/notificationConfigs/{{config_id}}`
//
// * `{{project}}/{{location}}/{{config_id}}`
//
// * `{{location}}/{{config_id}}`
//
// When using the `pulumi import` command, ProjectNotificationConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig default projects/{{project}}/locations/{{location}}/notificationConfigs/{{config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig default {{project}}/{{location}}/{{config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig default {{location}}/{{config_id}}
// ```
type V2ProjectNotificationConfig struct {
	pulumi.CustomResourceState

	// This must be unique within the project.
	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Location ID of the parent organization. Only global is supported at the moment.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name of this notification config, in the format
	// `projects/{{projectId}}/locations/{{location}}/notificationConfigs/{{config_id}}`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringPtrOutput `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig V2ProjectNotificationConfigStreamingConfigOutput `pulumi:"streamingConfig"`
}

// NewV2ProjectNotificationConfig registers a new resource with the given unique name, arguments, and options.
func NewV2ProjectNotificationConfig(ctx *pulumi.Context,
	name string, args *V2ProjectNotificationConfigArgs, opts ...pulumi.ResourceOption) (*V2ProjectNotificationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.StreamingConfig == nil {
		return nil, errors.New("invalid value for required argument 'StreamingConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2ProjectNotificationConfig
	err := ctx.RegisterResource("gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2ProjectNotificationConfig gets an existing V2ProjectNotificationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2ProjectNotificationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2ProjectNotificationConfigState, opts ...pulumi.ResourceOption) (*V2ProjectNotificationConfig, error) {
	var resource V2ProjectNotificationConfig
	err := ctx.ReadResource("gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2ProjectNotificationConfig resources.
type v2projectNotificationConfigState struct {
	// This must be unique within the project.
	ConfigId *string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// Location ID of the parent organization. Only global is supported at the moment.
	Location *string `pulumi:"location"`
	// The resource name of this notification config, in the format
	// `projects/{{projectId}}/locations/{{location}}/notificationConfigs/{{config_id}}`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[projectId]/topics/[topic]".
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig *V2ProjectNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
}

type V2ProjectNotificationConfigState struct {
	// This must be unique within the project.
	ConfigId pulumi.StringPtrInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// Location ID of the parent organization. Only global is supported at the moment.
	Location pulumi.StringPtrInput
	// The resource name of this notification config, in the format
	// `projects/{{projectId}}/locations/{{location}}/notificationConfigs/{{config_id}}`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringPtrInput
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig V2ProjectNotificationConfigStreamingConfigPtrInput
}

func (V2ProjectNotificationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2projectNotificationConfigState)(nil)).Elem()
}

type v2projectNotificationConfigArgs struct {
	// This must be unique within the project.
	ConfigId string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// Location ID of the parent organization. Only global is supported at the moment.
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[projectId]/topics/[topic]".
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig V2ProjectNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
}

// The set of arguments for constructing a V2ProjectNotificationConfig resource.
type V2ProjectNotificationConfigArgs struct {
	// This must be unique within the project.
	ConfigId pulumi.StringInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// Location ID of the parent organization. Only global is supported at the moment.
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig V2ProjectNotificationConfigStreamingConfigInput
}

func (V2ProjectNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2projectNotificationConfigArgs)(nil)).Elem()
}

type V2ProjectNotificationConfigInput interface {
	pulumi.Input

	ToV2ProjectNotificationConfigOutput() V2ProjectNotificationConfigOutput
	ToV2ProjectNotificationConfigOutputWithContext(ctx context.Context) V2ProjectNotificationConfigOutput
}

func (*V2ProjectNotificationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**V2ProjectNotificationConfig)(nil)).Elem()
}

func (i *V2ProjectNotificationConfig) ToV2ProjectNotificationConfigOutput() V2ProjectNotificationConfigOutput {
	return i.ToV2ProjectNotificationConfigOutputWithContext(context.Background())
}

func (i *V2ProjectNotificationConfig) ToV2ProjectNotificationConfigOutputWithContext(ctx context.Context) V2ProjectNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ProjectNotificationConfigOutput)
}

// V2ProjectNotificationConfigArrayInput is an input type that accepts V2ProjectNotificationConfigArray and V2ProjectNotificationConfigArrayOutput values.
// You can construct a concrete instance of `V2ProjectNotificationConfigArrayInput` via:
//
//	V2ProjectNotificationConfigArray{ V2ProjectNotificationConfigArgs{...} }
type V2ProjectNotificationConfigArrayInput interface {
	pulumi.Input

	ToV2ProjectNotificationConfigArrayOutput() V2ProjectNotificationConfigArrayOutput
	ToV2ProjectNotificationConfigArrayOutputWithContext(context.Context) V2ProjectNotificationConfigArrayOutput
}

type V2ProjectNotificationConfigArray []V2ProjectNotificationConfigInput

func (V2ProjectNotificationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2ProjectNotificationConfig)(nil)).Elem()
}

func (i V2ProjectNotificationConfigArray) ToV2ProjectNotificationConfigArrayOutput() V2ProjectNotificationConfigArrayOutput {
	return i.ToV2ProjectNotificationConfigArrayOutputWithContext(context.Background())
}

func (i V2ProjectNotificationConfigArray) ToV2ProjectNotificationConfigArrayOutputWithContext(ctx context.Context) V2ProjectNotificationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ProjectNotificationConfigArrayOutput)
}

// V2ProjectNotificationConfigMapInput is an input type that accepts V2ProjectNotificationConfigMap and V2ProjectNotificationConfigMapOutput values.
// You can construct a concrete instance of `V2ProjectNotificationConfigMapInput` via:
//
//	V2ProjectNotificationConfigMap{ "key": V2ProjectNotificationConfigArgs{...} }
type V2ProjectNotificationConfigMapInput interface {
	pulumi.Input

	ToV2ProjectNotificationConfigMapOutput() V2ProjectNotificationConfigMapOutput
	ToV2ProjectNotificationConfigMapOutputWithContext(context.Context) V2ProjectNotificationConfigMapOutput
}

type V2ProjectNotificationConfigMap map[string]V2ProjectNotificationConfigInput

func (V2ProjectNotificationConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2ProjectNotificationConfig)(nil)).Elem()
}

func (i V2ProjectNotificationConfigMap) ToV2ProjectNotificationConfigMapOutput() V2ProjectNotificationConfigMapOutput {
	return i.ToV2ProjectNotificationConfigMapOutputWithContext(context.Background())
}

func (i V2ProjectNotificationConfigMap) ToV2ProjectNotificationConfigMapOutputWithContext(ctx context.Context) V2ProjectNotificationConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ProjectNotificationConfigMapOutput)
}

type V2ProjectNotificationConfigOutput struct{ *pulumi.OutputState }

func (V2ProjectNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2ProjectNotificationConfig)(nil)).Elem()
}

func (o V2ProjectNotificationConfigOutput) ToV2ProjectNotificationConfigOutput() V2ProjectNotificationConfigOutput {
	return o
}

func (o V2ProjectNotificationConfigOutput) ToV2ProjectNotificationConfigOutputWithContext(ctx context.Context) V2ProjectNotificationConfigOutput {
	return o
}

// This must be unique within the project.
func (o V2ProjectNotificationConfigOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ProjectNotificationConfig) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

// The description of the notification config (max of 1024 characters).
func (o V2ProjectNotificationConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2ProjectNotificationConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Location ID of the parent organization. Only global is supported at the moment.
func (o V2ProjectNotificationConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2ProjectNotificationConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name of this notification config, in the format
// `projects/{{projectId}}/locations/{{location}}/notificationConfigs/{{config_id}}`.
func (o V2ProjectNotificationConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ProjectNotificationConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o V2ProjectNotificationConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ProjectNotificationConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Pub/Sub topic to send notifications to. Its format is "projects/[projectId]/topics/[topic]".
func (o V2ProjectNotificationConfigOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2ProjectNotificationConfig) pulumi.StringPtrOutput { return v.PubsubTopic }).(pulumi.StringPtrOutput)
}

// The service account that needs "pubsub.topics.publish" permission to
// publish to the Pub/Sub topic.
func (o V2ProjectNotificationConfigOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ProjectNotificationConfig) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The config for triggering streaming-based notifications.
// Structure is documented below.
func (o V2ProjectNotificationConfigOutput) StreamingConfig() V2ProjectNotificationConfigStreamingConfigOutput {
	return o.ApplyT(func(v *V2ProjectNotificationConfig) V2ProjectNotificationConfigStreamingConfigOutput {
		return v.StreamingConfig
	}).(V2ProjectNotificationConfigStreamingConfigOutput)
}

type V2ProjectNotificationConfigArrayOutput struct{ *pulumi.OutputState }

func (V2ProjectNotificationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2ProjectNotificationConfig)(nil)).Elem()
}

func (o V2ProjectNotificationConfigArrayOutput) ToV2ProjectNotificationConfigArrayOutput() V2ProjectNotificationConfigArrayOutput {
	return o
}

func (o V2ProjectNotificationConfigArrayOutput) ToV2ProjectNotificationConfigArrayOutputWithContext(ctx context.Context) V2ProjectNotificationConfigArrayOutput {
	return o
}

func (o V2ProjectNotificationConfigArrayOutput) Index(i pulumi.IntInput) V2ProjectNotificationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2ProjectNotificationConfig {
		return vs[0].([]*V2ProjectNotificationConfig)[vs[1].(int)]
	}).(V2ProjectNotificationConfigOutput)
}

type V2ProjectNotificationConfigMapOutput struct{ *pulumi.OutputState }

func (V2ProjectNotificationConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2ProjectNotificationConfig)(nil)).Elem()
}

func (o V2ProjectNotificationConfigMapOutput) ToV2ProjectNotificationConfigMapOutput() V2ProjectNotificationConfigMapOutput {
	return o
}

func (o V2ProjectNotificationConfigMapOutput) ToV2ProjectNotificationConfigMapOutputWithContext(ctx context.Context) V2ProjectNotificationConfigMapOutput {
	return o
}

func (o V2ProjectNotificationConfigMapOutput) MapIndex(k pulumi.StringInput) V2ProjectNotificationConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2ProjectNotificationConfig {
		return vs[0].(map[string]*V2ProjectNotificationConfig)[vs[1].(string)]
	}).(V2ProjectNotificationConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2ProjectNotificationConfigInput)(nil)).Elem(), &V2ProjectNotificationConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ProjectNotificationConfigArrayInput)(nil)).Elem(), V2ProjectNotificationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ProjectNotificationConfigMapInput)(nil)).Elem(), V2ProjectNotificationConfigMap{})
	pulumi.RegisterOutputType(V2ProjectNotificationConfigOutput{})
	pulumi.RegisterOutputType(V2ProjectNotificationConfigArrayOutput{})
	pulumi.RegisterOutputType(V2ProjectNotificationConfigMapOutput{})
}
