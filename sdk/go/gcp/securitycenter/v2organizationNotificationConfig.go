// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This is a continuous export that exports findings to a Pub/Sub topic.
//
// To get more information about OrganizationNotificationConfig, see:
//
// * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/organizations.locations.notificationConfigs)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/security-command-center/docs)
//
// ## Example Usage
//
// ### Scc V2 Organization Notification Config Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/securitycenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sccV2OrganizationNotificationConfig, err := pubsub.NewTopic(ctx, "scc_v2_organization_notification_config", &pubsub.TopicArgs{
//				Name: pulumi.String("my-topic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securitycenter.NewV2OrganizationNotificationConfig(ctx, "custom_organization_notification_config", &securitycenter.V2OrganizationNotificationConfigArgs{
//				ConfigId:     pulumi.String("my-config"),
//				Organization: pulumi.String("123456789"),
//				Location:     pulumi.String("global"),
//				Description:  pulumi.String("My custom Cloud Security Command Center Finding Organization Notification Configuration"),
//				PubsubTopic:  sccV2OrganizationNotificationConfig.ID(),
//				StreamingConfig: &securitycenter.V2OrganizationNotificationConfigStreamingConfigArgs{
//					Filter: pulumi.String("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\""),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OrganizationNotificationConfig can be imported using any of these accepted formats:
//
// * `{{name}}`
//
// When using the `pulumi import` command, OrganizationNotificationConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig default {{name}}
// ```
type V2OrganizationNotificationConfig struct {
	pulumi.CustomResourceState

	// This must be unique within the organization.
	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// location Id is provided by organization. If not provided, Use global as default.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name of this notification config, in the format
	// `organizations/{{organization}}/notificationConfigs/{{config_id}}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization whose Cloud Security Command Center the Notification
	// Config lives in.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringOutput `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig V2OrganizationNotificationConfigStreamingConfigOutput `pulumi:"streamingConfig"`
}

// NewV2OrganizationNotificationConfig registers a new resource with the given unique name, arguments, and options.
func NewV2OrganizationNotificationConfig(ctx *pulumi.Context,
	name string, args *V2OrganizationNotificationConfigArgs, opts ...pulumi.ResourceOption) (*V2OrganizationNotificationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.PubsubTopic == nil {
		return nil, errors.New("invalid value for required argument 'PubsubTopic'")
	}
	if args.StreamingConfig == nil {
		return nil, errors.New("invalid value for required argument 'StreamingConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2OrganizationNotificationConfig
	err := ctx.RegisterResource("gcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2OrganizationNotificationConfig gets an existing V2OrganizationNotificationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2OrganizationNotificationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2OrganizationNotificationConfigState, opts ...pulumi.ResourceOption) (*V2OrganizationNotificationConfig, error) {
	var resource V2OrganizationNotificationConfig
	err := ctx.ReadResource("gcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2OrganizationNotificationConfig resources.
type v2organizationNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId *string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// location Id is provided by organization. If not provided, Use global as default.
	Location *string `pulumi:"location"`
	// The resource name of this notification config, in the format
	// `organizations/{{organization}}/notificationConfigs/{{config_id}}`.
	Name *string `pulumi:"name"`
	// The organization whose Cloud Security Command Center the Notification
	// Config lives in.
	Organization *string `pulumi:"organization"`
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig *V2OrganizationNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
}

type V2OrganizationNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringPtrInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// location Id is provided by organization. If not provided, Use global as default.
	Location pulumi.StringPtrInput
	// The resource name of this notification config, in the format
	// `organizations/{{organization}}/notificationConfigs/{{config_id}}`.
	Name pulumi.StringPtrInput
	// The organization whose Cloud Security Command Center the Notification
	// Config lives in.
	Organization pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringPtrInput
	// The service account that needs "pubsub.topics.publish" permission to
	// publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig V2OrganizationNotificationConfigStreamingConfigPtrInput
}

func (V2OrganizationNotificationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2organizationNotificationConfigState)(nil)).Elem()
}

type v2organizationNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// location Id is provided by organization. If not provided, Use global as default.
	Location *string `pulumi:"location"`
	// The organization whose Cloud Security Command Center the Notification
	// Config lives in.
	Organization string `pulumi:"organization"`
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic string `pulumi:"pubsubTopic"`
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig V2OrganizationNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
}

// The set of arguments for constructing a V2OrganizationNotificationConfig resource.
type V2OrganizationNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// location Id is provided by organization. If not provided, Use global as default.
	Location pulumi.StringPtrInput
	// The organization whose Cloud Security Command Center the Notification
	// Config lives in.
	Organization pulumi.StringInput
	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[projectId]/topics/[topic]".
	PubsubTopic pulumi.StringInput
	// The config for triggering streaming-based notifications.
	// Structure is documented below.
	StreamingConfig V2OrganizationNotificationConfigStreamingConfigInput
}

func (V2OrganizationNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2organizationNotificationConfigArgs)(nil)).Elem()
}

type V2OrganizationNotificationConfigInput interface {
	pulumi.Input

	ToV2OrganizationNotificationConfigOutput() V2OrganizationNotificationConfigOutput
	ToV2OrganizationNotificationConfigOutputWithContext(ctx context.Context) V2OrganizationNotificationConfigOutput
}

func (*V2OrganizationNotificationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**V2OrganizationNotificationConfig)(nil)).Elem()
}

func (i *V2OrganizationNotificationConfig) ToV2OrganizationNotificationConfigOutput() V2OrganizationNotificationConfigOutput {
	return i.ToV2OrganizationNotificationConfigOutputWithContext(context.Background())
}

func (i *V2OrganizationNotificationConfig) ToV2OrganizationNotificationConfigOutputWithContext(ctx context.Context) V2OrganizationNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2OrganizationNotificationConfigOutput)
}

// V2OrganizationNotificationConfigArrayInput is an input type that accepts V2OrganizationNotificationConfigArray and V2OrganizationNotificationConfigArrayOutput values.
// You can construct a concrete instance of `V2OrganizationNotificationConfigArrayInput` via:
//
//	V2OrganizationNotificationConfigArray{ V2OrganizationNotificationConfigArgs{...} }
type V2OrganizationNotificationConfigArrayInput interface {
	pulumi.Input

	ToV2OrganizationNotificationConfigArrayOutput() V2OrganizationNotificationConfigArrayOutput
	ToV2OrganizationNotificationConfigArrayOutputWithContext(context.Context) V2OrganizationNotificationConfigArrayOutput
}

type V2OrganizationNotificationConfigArray []V2OrganizationNotificationConfigInput

func (V2OrganizationNotificationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2OrganizationNotificationConfig)(nil)).Elem()
}

func (i V2OrganizationNotificationConfigArray) ToV2OrganizationNotificationConfigArrayOutput() V2OrganizationNotificationConfigArrayOutput {
	return i.ToV2OrganizationNotificationConfigArrayOutputWithContext(context.Background())
}

func (i V2OrganizationNotificationConfigArray) ToV2OrganizationNotificationConfigArrayOutputWithContext(ctx context.Context) V2OrganizationNotificationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2OrganizationNotificationConfigArrayOutput)
}

// V2OrganizationNotificationConfigMapInput is an input type that accepts V2OrganizationNotificationConfigMap and V2OrganizationNotificationConfigMapOutput values.
// You can construct a concrete instance of `V2OrganizationNotificationConfigMapInput` via:
//
//	V2OrganizationNotificationConfigMap{ "key": V2OrganizationNotificationConfigArgs{...} }
type V2OrganizationNotificationConfigMapInput interface {
	pulumi.Input

	ToV2OrganizationNotificationConfigMapOutput() V2OrganizationNotificationConfigMapOutput
	ToV2OrganizationNotificationConfigMapOutputWithContext(context.Context) V2OrganizationNotificationConfigMapOutput
}

type V2OrganizationNotificationConfigMap map[string]V2OrganizationNotificationConfigInput

func (V2OrganizationNotificationConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2OrganizationNotificationConfig)(nil)).Elem()
}

func (i V2OrganizationNotificationConfigMap) ToV2OrganizationNotificationConfigMapOutput() V2OrganizationNotificationConfigMapOutput {
	return i.ToV2OrganizationNotificationConfigMapOutputWithContext(context.Background())
}

func (i V2OrganizationNotificationConfigMap) ToV2OrganizationNotificationConfigMapOutputWithContext(ctx context.Context) V2OrganizationNotificationConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2OrganizationNotificationConfigMapOutput)
}

type V2OrganizationNotificationConfigOutput struct{ *pulumi.OutputState }

func (V2OrganizationNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2OrganizationNotificationConfig)(nil)).Elem()
}

func (o V2OrganizationNotificationConfigOutput) ToV2OrganizationNotificationConfigOutput() V2OrganizationNotificationConfigOutput {
	return o
}

func (o V2OrganizationNotificationConfigOutput) ToV2OrganizationNotificationConfigOutputWithContext(ctx context.Context) V2OrganizationNotificationConfigOutput {
	return o
}

// This must be unique within the organization.
func (o V2OrganizationNotificationConfigOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationNotificationConfig) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

// The description of the notification config (max of 1024 characters).
func (o V2OrganizationNotificationConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2OrganizationNotificationConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// location Id is provided by organization. If not provided, Use global as default.
func (o V2OrganizationNotificationConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2OrganizationNotificationConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name of this notification config, in the format
// `organizations/{{organization}}/notificationConfigs/{{config_id}}`.
func (o V2OrganizationNotificationConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationNotificationConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization whose Cloud Security Command Center the Notification
// Config lives in.
func (o V2OrganizationNotificationConfigOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationNotificationConfig) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The Pub/Sub topic to send notifications to. Its format is
// "projects/[projectId]/topics/[topic]".
func (o V2OrganizationNotificationConfigOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationNotificationConfig) pulumi.StringOutput { return v.PubsubTopic }).(pulumi.StringOutput)
}

// The service account that needs "pubsub.topics.publish" permission to
// publish to the Pub/Sub topic.
func (o V2OrganizationNotificationConfigOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *V2OrganizationNotificationConfig) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The config for triggering streaming-based notifications.
// Structure is documented below.
func (o V2OrganizationNotificationConfigOutput) StreamingConfig() V2OrganizationNotificationConfigStreamingConfigOutput {
	return o.ApplyT(func(v *V2OrganizationNotificationConfig) V2OrganizationNotificationConfigStreamingConfigOutput {
		return v.StreamingConfig
	}).(V2OrganizationNotificationConfigStreamingConfigOutput)
}

type V2OrganizationNotificationConfigArrayOutput struct{ *pulumi.OutputState }

func (V2OrganizationNotificationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2OrganizationNotificationConfig)(nil)).Elem()
}

func (o V2OrganizationNotificationConfigArrayOutput) ToV2OrganizationNotificationConfigArrayOutput() V2OrganizationNotificationConfigArrayOutput {
	return o
}

func (o V2OrganizationNotificationConfigArrayOutput) ToV2OrganizationNotificationConfigArrayOutputWithContext(ctx context.Context) V2OrganizationNotificationConfigArrayOutput {
	return o
}

func (o V2OrganizationNotificationConfigArrayOutput) Index(i pulumi.IntInput) V2OrganizationNotificationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2OrganizationNotificationConfig {
		return vs[0].([]*V2OrganizationNotificationConfig)[vs[1].(int)]
	}).(V2OrganizationNotificationConfigOutput)
}

type V2OrganizationNotificationConfigMapOutput struct{ *pulumi.OutputState }

func (V2OrganizationNotificationConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2OrganizationNotificationConfig)(nil)).Elem()
}

func (o V2OrganizationNotificationConfigMapOutput) ToV2OrganizationNotificationConfigMapOutput() V2OrganizationNotificationConfigMapOutput {
	return o
}

func (o V2OrganizationNotificationConfigMapOutput) ToV2OrganizationNotificationConfigMapOutputWithContext(ctx context.Context) V2OrganizationNotificationConfigMapOutput {
	return o
}

func (o V2OrganizationNotificationConfigMapOutput) MapIndex(k pulumi.StringInput) V2OrganizationNotificationConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2OrganizationNotificationConfig {
		return vs[0].(map[string]*V2OrganizationNotificationConfig)[vs[1].(string)]
	}).(V2OrganizationNotificationConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2OrganizationNotificationConfigInput)(nil)).Elem(), &V2OrganizationNotificationConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2OrganizationNotificationConfigArrayInput)(nil)).Elem(), V2OrganizationNotificationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2OrganizationNotificationConfigMapInput)(nil)).Elem(), V2OrganizationNotificationConfigMap{})
	pulumi.RegisterOutputType(V2OrganizationNotificationConfigOutput{})
	pulumi.RegisterOutputType(V2OrganizationNotificationConfigArrayOutput{})
	pulumi.RegisterOutputType(V2OrganizationNotificationConfigMapOutput{})
}
