// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstanceIamBindingCondition struct {
	// An optional description of the instance.
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// InstanceIamBindingConditionInput is an input type that accepts InstanceIamBindingConditionArgs and InstanceIamBindingConditionOutput values.
// You can construct a concrete instance of `InstanceIamBindingConditionInput` via:
//
//	InstanceIamBindingConditionArgs{...}
type InstanceIamBindingConditionInput interface {
	pulumi.Input

	ToInstanceIamBindingConditionOutput() InstanceIamBindingConditionOutput
	ToInstanceIamBindingConditionOutputWithContext(context.Context) InstanceIamBindingConditionOutput
}

type InstanceIamBindingConditionArgs struct {
	// An optional description of the instance.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (InstanceIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamBindingCondition)(nil)).Elem()
}

func (i InstanceIamBindingConditionArgs) ToInstanceIamBindingConditionOutput() InstanceIamBindingConditionOutput {
	return i.ToInstanceIamBindingConditionOutputWithContext(context.Background())
}

func (i InstanceIamBindingConditionArgs) ToInstanceIamBindingConditionOutputWithContext(ctx context.Context) InstanceIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionOutput)
}

func (i InstanceIamBindingConditionArgs) ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput {
	return i.ToInstanceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i InstanceIamBindingConditionArgs) ToInstanceIamBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionOutput).ToInstanceIamBindingConditionPtrOutputWithContext(ctx)
}

// InstanceIamBindingConditionPtrInput is an input type that accepts InstanceIamBindingConditionArgs, InstanceIamBindingConditionPtr and InstanceIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `InstanceIamBindingConditionPtrInput` via:
//
//	        InstanceIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type InstanceIamBindingConditionPtrInput interface {
	pulumi.Input

	ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput
	ToInstanceIamBindingConditionPtrOutputWithContext(context.Context) InstanceIamBindingConditionPtrOutput
}

type instanceIamBindingConditionPtrType InstanceIamBindingConditionArgs

func InstanceIamBindingConditionPtr(v *InstanceIamBindingConditionArgs) InstanceIamBindingConditionPtrInput {
	return (*instanceIamBindingConditionPtrType)(v)
}

func (*instanceIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamBindingCondition)(nil)).Elem()
}

func (i *instanceIamBindingConditionPtrType) ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput {
	return i.ToInstanceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *instanceIamBindingConditionPtrType) ToInstanceIamBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionPtrOutput)
}

type InstanceIamBindingConditionOutput struct{ *pulumi.OutputState }

func (InstanceIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamBindingCondition)(nil)).Elem()
}

func (o InstanceIamBindingConditionOutput) ToInstanceIamBindingConditionOutput() InstanceIamBindingConditionOutput {
	return o
}

func (o InstanceIamBindingConditionOutput) ToInstanceIamBindingConditionOutputWithContext(ctx context.Context) InstanceIamBindingConditionOutput {
	return o
}

func (o InstanceIamBindingConditionOutput) ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput {
	return o.ToInstanceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o InstanceIamBindingConditionOutput) ToInstanceIamBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceIamBindingCondition) *InstanceIamBindingCondition {
		return &v
	}).(InstanceIamBindingConditionPtrOutput)
}

// An optional description of the instance.
func (o InstanceIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (InstanceIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamBindingCondition)(nil)).Elem()
}

func (o InstanceIamBindingConditionPtrOutput) ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput {
	return o
}

func (o InstanceIamBindingConditionPtrOutput) ToInstanceIamBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionPtrOutput {
	return o
}

func (o InstanceIamBindingConditionPtrOutput) Elem() InstanceIamBindingConditionOutput {
	return o.ApplyT(func(v *InstanceIamBindingCondition) InstanceIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret InstanceIamBindingCondition
		return ret
	}).(InstanceIamBindingConditionOutput)
}

// An optional description of the instance.
func (o InstanceIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o InstanceIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o InstanceIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type InstanceIamMemberCondition struct {
	// An optional description of the instance.
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// InstanceIamMemberConditionInput is an input type that accepts InstanceIamMemberConditionArgs and InstanceIamMemberConditionOutput values.
// You can construct a concrete instance of `InstanceIamMemberConditionInput` via:
//
//	InstanceIamMemberConditionArgs{...}
type InstanceIamMemberConditionInput interface {
	pulumi.Input

	ToInstanceIamMemberConditionOutput() InstanceIamMemberConditionOutput
	ToInstanceIamMemberConditionOutputWithContext(context.Context) InstanceIamMemberConditionOutput
}

type InstanceIamMemberConditionArgs struct {
	// An optional description of the instance.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (InstanceIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamMemberCondition)(nil)).Elem()
}

func (i InstanceIamMemberConditionArgs) ToInstanceIamMemberConditionOutput() InstanceIamMemberConditionOutput {
	return i.ToInstanceIamMemberConditionOutputWithContext(context.Background())
}

func (i InstanceIamMemberConditionArgs) ToInstanceIamMemberConditionOutputWithContext(ctx context.Context) InstanceIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionOutput)
}

func (i InstanceIamMemberConditionArgs) ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput {
	return i.ToInstanceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i InstanceIamMemberConditionArgs) ToInstanceIamMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionOutput).ToInstanceIamMemberConditionPtrOutputWithContext(ctx)
}

// InstanceIamMemberConditionPtrInput is an input type that accepts InstanceIamMemberConditionArgs, InstanceIamMemberConditionPtr and InstanceIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `InstanceIamMemberConditionPtrInput` via:
//
//	        InstanceIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type InstanceIamMemberConditionPtrInput interface {
	pulumi.Input

	ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput
	ToInstanceIamMemberConditionPtrOutputWithContext(context.Context) InstanceIamMemberConditionPtrOutput
}

type instanceIamMemberConditionPtrType InstanceIamMemberConditionArgs

func InstanceIamMemberConditionPtr(v *InstanceIamMemberConditionArgs) InstanceIamMemberConditionPtrInput {
	return (*instanceIamMemberConditionPtrType)(v)
}

func (*instanceIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamMemberCondition)(nil)).Elem()
}

func (i *instanceIamMemberConditionPtrType) ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput {
	return i.ToInstanceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *instanceIamMemberConditionPtrType) ToInstanceIamMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionPtrOutput)
}

type InstanceIamMemberConditionOutput struct{ *pulumi.OutputState }

func (InstanceIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamMemberCondition)(nil)).Elem()
}

func (o InstanceIamMemberConditionOutput) ToInstanceIamMemberConditionOutput() InstanceIamMemberConditionOutput {
	return o
}

func (o InstanceIamMemberConditionOutput) ToInstanceIamMemberConditionOutputWithContext(ctx context.Context) InstanceIamMemberConditionOutput {
	return o
}

func (o InstanceIamMemberConditionOutput) ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput {
	return o.ToInstanceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o InstanceIamMemberConditionOutput) ToInstanceIamMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceIamMemberCondition) *InstanceIamMemberCondition {
		return &v
	}).(InstanceIamMemberConditionPtrOutput)
}

// An optional description of the instance.
func (o InstanceIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (InstanceIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamMemberCondition)(nil)).Elem()
}

func (o InstanceIamMemberConditionPtrOutput) ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput {
	return o
}

func (o InstanceIamMemberConditionPtrOutput) ToInstanceIamMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionPtrOutput {
	return o
}

func (o InstanceIamMemberConditionPtrOutput) Elem() InstanceIamMemberConditionOutput {
	return o.ApplyT(func(v *InstanceIamMemberCondition) InstanceIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret InstanceIamMemberCondition
		return ret
	}).(InstanceIamMemberConditionOutput)
}

// An optional description of the instance.
func (o InstanceIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o InstanceIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o InstanceIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type NotificationConfigStreamingConfig struct {
	// Expression that defines the filter to apply across create/update
	// events of assets or findings as specified by the event type. The
	// expression is a list of zero or more restrictions combined via
	// logical operators AND and OR. Parentheses are supported, and OR
	// has higher precedence than AND.
	// Restrictions have the form <field> <operator> <value> and may have
	// a - character in front of them to indicate negation. The fields
	// map to those defined in the corresponding resource.
	// The supported operators are:
	// * = for all value types.
	// * > , <, >=, <= for integer values.
	// * :, meaning substring matching, for strings.
	//   The supported value types are:
	// * string literals in quotes.
	// * integer literals without quotes.
	// * boolean literals true and false without quotes.
	//   See
	//   [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
	//   for information on how to write a filter.
	Filter string `pulumi:"filter"`
}

// NotificationConfigStreamingConfigInput is an input type that accepts NotificationConfigStreamingConfigArgs and NotificationConfigStreamingConfigOutput values.
// You can construct a concrete instance of `NotificationConfigStreamingConfigInput` via:
//
//	NotificationConfigStreamingConfigArgs{...}
type NotificationConfigStreamingConfigInput interface {
	pulumi.Input

	ToNotificationConfigStreamingConfigOutput() NotificationConfigStreamingConfigOutput
	ToNotificationConfigStreamingConfigOutputWithContext(context.Context) NotificationConfigStreamingConfigOutput
}

type NotificationConfigStreamingConfigArgs struct {
	// Expression that defines the filter to apply across create/update
	// events of assets or findings as specified by the event type. The
	// expression is a list of zero or more restrictions combined via
	// logical operators AND and OR. Parentheses are supported, and OR
	// has higher precedence than AND.
	// Restrictions have the form <field> <operator> <value> and may have
	// a - character in front of them to indicate negation. The fields
	// map to those defined in the corresponding resource.
	// The supported operators are:
	// * = for all value types.
	// * > , <, >=, <= for integer values.
	// * :, meaning substring matching, for strings.
	//   The supported value types are:
	// * string literals in quotes.
	// * integer literals without quotes.
	// * boolean literals true and false without quotes.
	//   See
	//   [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
	//   for information on how to write a filter.
	Filter pulumi.StringInput `pulumi:"filter"`
}

func (NotificationConfigStreamingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfigStreamingConfig)(nil)).Elem()
}

func (i NotificationConfigStreamingConfigArgs) ToNotificationConfigStreamingConfigOutput() NotificationConfigStreamingConfigOutput {
	return i.ToNotificationConfigStreamingConfigOutputWithContext(context.Background())
}

func (i NotificationConfigStreamingConfigArgs) ToNotificationConfigStreamingConfigOutputWithContext(ctx context.Context) NotificationConfigStreamingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigStreamingConfigOutput)
}

func (i NotificationConfigStreamingConfigArgs) ToNotificationConfigStreamingConfigPtrOutput() NotificationConfigStreamingConfigPtrOutput {
	return i.ToNotificationConfigStreamingConfigPtrOutputWithContext(context.Background())
}

func (i NotificationConfigStreamingConfigArgs) ToNotificationConfigStreamingConfigPtrOutputWithContext(ctx context.Context) NotificationConfigStreamingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigStreamingConfigOutput).ToNotificationConfigStreamingConfigPtrOutputWithContext(ctx)
}

// NotificationConfigStreamingConfigPtrInput is an input type that accepts NotificationConfigStreamingConfigArgs, NotificationConfigStreamingConfigPtr and NotificationConfigStreamingConfigPtrOutput values.
// You can construct a concrete instance of `NotificationConfigStreamingConfigPtrInput` via:
//
//	        NotificationConfigStreamingConfigArgs{...}
//
//	or:
//
//	        nil
type NotificationConfigStreamingConfigPtrInput interface {
	pulumi.Input

	ToNotificationConfigStreamingConfigPtrOutput() NotificationConfigStreamingConfigPtrOutput
	ToNotificationConfigStreamingConfigPtrOutputWithContext(context.Context) NotificationConfigStreamingConfigPtrOutput
}

type notificationConfigStreamingConfigPtrType NotificationConfigStreamingConfigArgs

func NotificationConfigStreamingConfigPtr(v *NotificationConfigStreamingConfigArgs) NotificationConfigStreamingConfigPtrInput {
	return (*notificationConfigStreamingConfigPtrType)(v)
}

func (*notificationConfigStreamingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfigStreamingConfig)(nil)).Elem()
}

func (i *notificationConfigStreamingConfigPtrType) ToNotificationConfigStreamingConfigPtrOutput() NotificationConfigStreamingConfigPtrOutput {
	return i.ToNotificationConfigStreamingConfigPtrOutputWithContext(context.Background())
}

func (i *notificationConfigStreamingConfigPtrType) ToNotificationConfigStreamingConfigPtrOutputWithContext(ctx context.Context) NotificationConfigStreamingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigStreamingConfigPtrOutput)
}

type NotificationConfigStreamingConfigOutput struct{ *pulumi.OutputState }

func (NotificationConfigStreamingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfigStreamingConfig)(nil)).Elem()
}

func (o NotificationConfigStreamingConfigOutput) ToNotificationConfigStreamingConfigOutput() NotificationConfigStreamingConfigOutput {
	return o
}

func (o NotificationConfigStreamingConfigOutput) ToNotificationConfigStreamingConfigOutputWithContext(ctx context.Context) NotificationConfigStreamingConfigOutput {
	return o
}

func (o NotificationConfigStreamingConfigOutput) ToNotificationConfigStreamingConfigPtrOutput() NotificationConfigStreamingConfigPtrOutput {
	return o.ToNotificationConfigStreamingConfigPtrOutputWithContext(context.Background())
}

func (o NotificationConfigStreamingConfigOutput) ToNotificationConfigStreamingConfigPtrOutputWithContext(ctx context.Context) NotificationConfigStreamingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationConfigStreamingConfig) *NotificationConfigStreamingConfig {
		return &v
	}).(NotificationConfigStreamingConfigPtrOutput)
}

// Expression that defines the filter to apply across create/update
// events of assets or findings as specified by the event type. The
// expression is a list of zero or more restrictions combined via
// logical operators AND and OR. Parentheses are supported, and OR
// has higher precedence than AND.
// Restrictions have the form <field> <operator> <value> and may have
// a - character in front of them to indicate negation. The fields
// map to those defined in the corresponding resource.
// The supported operators are:
//   - = for all value types.
//   - > , <, >=, <= for integer values.
//   - :, meaning substring matching, for strings.
//     The supported value types are:
//   - string literals in quotes.
//   - integer literals without quotes.
//   - boolean literals true and false without quotes.
//     See
//     [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
//     for information on how to write a filter.
func (o NotificationConfigStreamingConfigOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationConfigStreamingConfig) string { return v.Filter }).(pulumi.StringOutput)
}

type NotificationConfigStreamingConfigPtrOutput struct{ *pulumi.OutputState }

func (NotificationConfigStreamingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfigStreamingConfig)(nil)).Elem()
}

func (o NotificationConfigStreamingConfigPtrOutput) ToNotificationConfigStreamingConfigPtrOutput() NotificationConfigStreamingConfigPtrOutput {
	return o
}

func (o NotificationConfigStreamingConfigPtrOutput) ToNotificationConfigStreamingConfigPtrOutputWithContext(ctx context.Context) NotificationConfigStreamingConfigPtrOutput {
	return o
}

func (o NotificationConfigStreamingConfigPtrOutput) Elem() NotificationConfigStreamingConfigOutput {
	return o.ApplyT(func(v *NotificationConfigStreamingConfig) NotificationConfigStreamingConfig {
		if v != nil {
			return *v
		}
		var ret NotificationConfigStreamingConfig
		return ret
	}).(NotificationConfigStreamingConfigOutput)
}

// Expression that defines the filter to apply across create/update
// events of assets or findings as specified by the event type. The
// expression is a list of zero or more restrictions combined via
// logical operators AND and OR. Parentheses are supported, and OR
// has higher precedence than AND.
// Restrictions have the form <field> <operator> <value> and may have
// a - character in front of them to indicate negation. The fields
// map to those defined in the corresponding resource.
// The supported operators are:
//   - = for all value types.
//   - > , <, >=, <= for integer values.
//   - :, meaning substring matching, for strings.
//     The supported value types are:
//   - string literals in quotes.
//   - integer literals without quotes.
//   - boolean literals true and false without quotes.
//     See
//     [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
//     for information on how to write a filter.
func (o NotificationConfigStreamingConfigPtrOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationConfigStreamingConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Filter
	}).(pulumi.StringPtrOutput)
}

type SourceIamBindingCondition struct {
	// The description of the source (max of 1024 characters).
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// SourceIamBindingConditionInput is an input type that accepts SourceIamBindingConditionArgs and SourceIamBindingConditionOutput values.
// You can construct a concrete instance of `SourceIamBindingConditionInput` via:
//
//	SourceIamBindingConditionArgs{...}
type SourceIamBindingConditionInput interface {
	pulumi.Input

	ToSourceIamBindingConditionOutput() SourceIamBindingConditionOutput
	ToSourceIamBindingConditionOutputWithContext(context.Context) SourceIamBindingConditionOutput
}

type SourceIamBindingConditionArgs struct {
	// The description of the source (max of 1024 characters).
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (SourceIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceIamBindingCondition)(nil)).Elem()
}

func (i SourceIamBindingConditionArgs) ToSourceIamBindingConditionOutput() SourceIamBindingConditionOutput {
	return i.ToSourceIamBindingConditionOutputWithContext(context.Background())
}

func (i SourceIamBindingConditionArgs) ToSourceIamBindingConditionOutputWithContext(ctx context.Context) SourceIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamBindingConditionOutput)
}

func (i SourceIamBindingConditionArgs) ToSourceIamBindingConditionPtrOutput() SourceIamBindingConditionPtrOutput {
	return i.ToSourceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i SourceIamBindingConditionArgs) ToSourceIamBindingConditionPtrOutputWithContext(ctx context.Context) SourceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamBindingConditionOutput).ToSourceIamBindingConditionPtrOutputWithContext(ctx)
}

// SourceIamBindingConditionPtrInput is an input type that accepts SourceIamBindingConditionArgs, SourceIamBindingConditionPtr and SourceIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `SourceIamBindingConditionPtrInput` via:
//
//	        SourceIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type SourceIamBindingConditionPtrInput interface {
	pulumi.Input

	ToSourceIamBindingConditionPtrOutput() SourceIamBindingConditionPtrOutput
	ToSourceIamBindingConditionPtrOutputWithContext(context.Context) SourceIamBindingConditionPtrOutput
}

type sourceIamBindingConditionPtrType SourceIamBindingConditionArgs

func SourceIamBindingConditionPtr(v *SourceIamBindingConditionArgs) SourceIamBindingConditionPtrInput {
	return (*sourceIamBindingConditionPtrType)(v)
}

func (*sourceIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceIamBindingCondition)(nil)).Elem()
}

func (i *sourceIamBindingConditionPtrType) ToSourceIamBindingConditionPtrOutput() SourceIamBindingConditionPtrOutput {
	return i.ToSourceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *sourceIamBindingConditionPtrType) ToSourceIamBindingConditionPtrOutputWithContext(ctx context.Context) SourceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamBindingConditionPtrOutput)
}

type SourceIamBindingConditionOutput struct{ *pulumi.OutputState }

func (SourceIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceIamBindingCondition)(nil)).Elem()
}

func (o SourceIamBindingConditionOutput) ToSourceIamBindingConditionOutput() SourceIamBindingConditionOutput {
	return o
}

func (o SourceIamBindingConditionOutput) ToSourceIamBindingConditionOutputWithContext(ctx context.Context) SourceIamBindingConditionOutput {
	return o
}

func (o SourceIamBindingConditionOutput) ToSourceIamBindingConditionPtrOutput() SourceIamBindingConditionPtrOutput {
	return o.ToSourceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o SourceIamBindingConditionOutput) ToSourceIamBindingConditionPtrOutputWithContext(ctx context.Context) SourceIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceIamBindingCondition) *SourceIamBindingCondition {
		return &v
	}).(SourceIamBindingConditionPtrOutput)
}

// The description of the source (max of 1024 characters).
func (o SourceIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SourceIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v SourceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o SourceIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v SourceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type SourceIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (SourceIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceIamBindingCondition)(nil)).Elem()
}

func (o SourceIamBindingConditionPtrOutput) ToSourceIamBindingConditionPtrOutput() SourceIamBindingConditionPtrOutput {
	return o
}

func (o SourceIamBindingConditionPtrOutput) ToSourceIamBindingConditionPtrOutputWithContext(ctx context.Context) SourceIamBindingConditionPtrOutput {
	return o
}

func (o SourceIamBindingConditionPtrOutput) Elem() SourceIamBindingConditionOutput {
	return o.ApplyT(func(v *SourceIamBindingCondition) SourceIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret SourceIamBindingCondition
		return ret
	}).(SourceIamBindingConditionOutput)
}

// The description of the source (max of 1024 characters).
func (o SourceIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o SourceIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o SourceIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type SourceIamMemberCondition struct {
	// The description of the source (max of 1024 characters).
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// SourceIamMemberConditionInput is an input type that accepts SourceIamMemberConditionArgs and SourceIamMemberConditionOutput values.
// You can construct a concrete instance of `SourceIamMemberConditionInput` via:
//
//	SourceIamMemberConditionArgs{...}
type SourceIamMemberConditionInput interface {
	pulumi.Input

	ToSourceIamMemberConditionOutput() SourceIamMemberConditionOutput
	ToSourceIamMemberConditionOutputWithContext(context.Context) SourceIamMemberConditionOutput
}

type SourceIamMemberConditionArgs struct {
	// The description of the source (max of 1024 characters).
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (SourceIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceIamMemberCondition)(nil)).Elem()
}

func (i SourceIamMemberConditionArgs) ToSourceIamMemberConditionOutput() SourceIamMemberConditionOutput {
	return i.ToSourceIamMemberConditionOutputWithContext(context.Background())
}

func (i SourceIamMemberConditionArgs) ToSourceIamMemberConditionOutputWithContext(ctx context.Context) SourceIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamMemberConditionOutput)
}

func (i SourceIamMemberConditionArgs) ToSourceIamMemberConditionPtrOutput() SourceIamMemberConditionPtrOutput {
	return i.ToSourceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i SourceIamMemberConditionArgs) ToSourceIamMemberConditionPtrOutputWithContext(ctx context.Context) SourceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamMemberConditionOutput).ToSourceIamMemberConditionPtrOutputWithContext(ctx)
}

// SourceIamMemberConditionPtrInput is an input type that accepts SourceIamMemberConditionArgs, SourceIamMemberConditionPtr and SourceIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `SourceIamMemberConditionPtrInput` via:
//
//	        SourceIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type SourceIamMemberConditionPtrInput interface {
	pulumi.Input

	ToSourceIamMemberConditionPtrOutput() SourceIamMemberConditionPtrOutput
	ToSourceIamMemberConditionPtrOutputWithContext(context.Context) SourceIamMemberConditionPtrOutput
}

type sourceIamMemberConditionPtrType SourceIamMemberConditionArgs

func SourceIamMemberConditionPtr(v *SourceIamMemberConditionArgs) SourceIamMemberConditionPtrInput {
	return (*sourceIamMemberConditionPtrType)(v)
}

func (*sourceIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceIamMemberCondition)(nil)).Elem()
}

func (i *sourceIamMemberConditionPtrType) ToSourceIamMemberConditionPtrOutput() SourceIamMemberConditionPtrOutput {
	return i.ToSourceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *sourceIamMemberConditionPtrType) ToSourceIamMemberConditionPtrOutputWithContext(ctx context.Context) SourceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceIamMemberConditionPtrOutput)
}

type SourceIamMemberConditionOutput struct{ *pulumi.OutputState }

func (SourceIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceIamMemberCondition)(nil)).Elem()
}

func (o SourceIamMemberConditionOutput) ToSourceIamMemberConditionOutput() SourceIamMemberConditionOutput {
	return o
}

func (o SourceIamMemberConditionOutput) ToSourceIamMemberConditionOutputWithContext(ctx context.Context) SourceIamMemberConditionOutput {
	return o
}

func (o SourceIamMemberConditionOutput) ToSourceIamMemberConditionPtrOutput() SourceIamMemberConditionPtrOutput {
	return o.ToSourceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o SourceIamMemberConditionOutput) ToSourceIamMemberConditionPtrOutputWithContext(ctx context.Context) SourceIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceIamMemberCondition) *SourceIamMemberCondition {
		return &v
	}).(SourceIamMemberConditionPtrOutput)
}

// The description of the source (max of 1024 characters).
func (o SourceIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SourceIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v SourceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o SourceIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v SourceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type SourceIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (SourceIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceIamMemberCondition)(nil)).Elem()
}

func (o SourceIamMemberConditionPtrOutput) ToSourceIamMemberConditionPtrOutput() SourceIamMemberConditionPtrOutput {
	return o
}

func (o SourceIamMemberConditionPtrOutput) ToSourceIamMemberConditionPtrOutputWithContext(ctx context.Context) SourceIamMemberConditionPtrOutput {
	return o
}

func (o SourceIamMemberConditionPtrOutput) Elem() SourceIamMemberConditionOutput {
	return o.ApplyT(func(v *SourceIamMemberCondition) SourceIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret SourceIamMemberCondition
		return ret
	}).(SourceIamMemberConditionOutput)
}

// The description of the source (max of 1024 characters).
func (o SourceIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o SourceIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o SourceIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIamBindingConditionInput)(nil)).Elem(), InstanceIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIamBindingConditionPtrInput)(nil)).Elem(), InstanceIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIamMemberConditionInput)(nil)).Elem(), InstanceIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIamMemberConditionPtrInput)(nil)).Elem(), InstanceIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationConfigStreamingConfigInput)(nil)).Elem(), NotificationConfigStreamingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationConfigStreamingConfigPtrInput)(nil)).Elem(), NotificationConfigStreamingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamBindingConditionInput)(nil)).Elem(), SourceIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamBindingConditionPtrInput)(nil)).Elem(), SourceIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamMemberConditionInput)(nil)).Elem(), SourceIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceIamMemberConditionPtrInput)(nil)).Elem(), SourceIamMemberConditionArgs{})
	pulumi.RegisterOutputType(InstanceIamBindingConditionOutput{})
	pulumi.RegisterOutputType(InstanceIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(InstanceIamMemberConditionOutput{})
	pulumi.RegisterOutputType(InstanceIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(NotificationConfigStreamingConfigOutput{})
	pulumi.RegisterOutputType(NotificationConfigStreamingConfigPtrOutput{})
	pulumi.RegisterOutputType(SourceIamBindingConditionOutput{})
	pulumi.RegisterOutputType(SourceIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(SourceIamMemberConditionOutput{})
	pulumi.RegisterOutputType(SourceIamMemberConditionPtrOutput{})
}
