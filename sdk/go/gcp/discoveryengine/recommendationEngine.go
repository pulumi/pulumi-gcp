// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package discoveryengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Vertex AI Search recommendation apps.
//
// To get more information about RecommendationEngine, see:
//
// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.engines)
// * How-to Guides
//   - [Create a Recommendation Engine](https://cloud.google.com/generative-ai-app-builder/docs/create-generic-recommendations-app)
//
// ## Example Usage
//
// ### Discoveryengine Recommendationengine Generic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/discoveryengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			generic, err := discoveryengine.NewDataStore(ctx, "generic", &discoveryengine.DataStoreArgs{
//				Location:         pulumi.String("global"),
//				DataStoreId:      pulumi.String("recommendation-datastore-id"),
//				DisplayName:      pulumi.String("tf-test-structured-datastore"),
//				IndustryVertical: pulumi.String("GENERIC"),
//				ContentConfig:    pulumi.String("NO_CONTENT"),
//				SolutionTypes: pulumi.StringArray{
//					pulumi.String("SOLUTION_TYPE_RECOMMENDATION"),
//				},
//				CreateAdvancedSiteSearch:  pulumi.Bool(false),
//				SkipDefaultSchemaCreation: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = discoveryengine.NewRecommendationEngine(ctx, "generic", &discoveryengine.RecommendationEngineArgs{
//				EngineId:    pulumi.String("recommendation-engine-id"),
//				Location:    generic.Location,
//				DisplayName: pulumi.String("Example Recommendation Engine"),
//				DataStoreIds: pulumi.StringArray{
//					generic.DataStoreId,
//				},
//				IndustryVertical: pulumi.String("GENERIC"),
//				CommonConfig: &discoveryengine.RecommendationEngineCommonConfigArgs{
//					CompanyName: pulumi.String("test-company"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Discoveryengine Recommendationengine Media
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/discoveryengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			media, err := discoveryengine.NewDataStore(ctx, "media", &discoveryengine.DataStoreArgs{
//				Location:         pulumi.String("global"),
//				DataStoreId:      pulumi.String("recommendation-datastore-id"),
//				DisplayName:      pulumi.String("tf-test-structured-datastore"),
//				IndustryVertical: pulumi.String("MEDIA"),
//				ContentConfig:    pulumi.String("NO_CONTENT"),
//				SolutionTypes: pulumi.StringArray{
//					pulumi.String("SOLUTION_TYPE_RECOMMENDATION"),
//				},
//				CreateAdvancedSiteSearch:  pulumi.Bool(false),
//				SkipDefaultSchemaCreation: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = discoveryengine.NewRecommendationEngine(ctx, "media", &discoveryengine.RecommendationEngineArgs{
//				EngineId:    pulumi.String("recommendation-engine-id"),
//				Location:    media.Location,
//				DisplayName: pulumi.String("Example Media Recommendation Engine"),
//				DataStoreIds: pulumi.StringArray{
//					media.DataStoreId,
//				},
//				IndustryVertical: pulumi.String("MEDIA"),
//				MediaRecommendationEngineConfig: &discoveryengine.RecommendationEngineMediaRecommendationEngineConfigArgs{
//					Type:                  pulumi.String("recommended-for-you"),
//					OptimizationObjective: pulumi.String("ctr"),
//					TrainingState:         pulumi.String("PAUSED"),
//					EngineFeaturesConfig: &discoveryengine.RecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigArgs{
//						RecommendedForYouConfig: &discoveryengine.RecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigRecommendedForYouConfigArgs{
//							ContextEventType: pulumi.String("generic"),
//						},
//					},
//				},
//				CommonConfig: &discoveryengine.RecommendationEngineCommonConfigArgs{
//					CompanyName: pulumi.String("test-company"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RecommendationEngine can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/collections/default_collection/engines/{{engine_id}}`
//
// * `{{project}}/{{location}}/{{engine_id}}`
//
// * `{{location}}/{{engine_id}}`
//
// When using the `pulumi import` command, RecommendationEngine can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:discoveryengine/recommendationEngine:RecommendationEngine default projects/{{project}}/locations/{{location}}/collections/default_collection/engines/{{engine_id}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/recommendationEngine:RecommendationEngine default {{project}}/{{location}}/{{engine_id}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/recommendationEngine:RecommendationEngine default {{location}}/{{engine_id}}
// ```
type RecommendationEngine struct {
	pulumi.CustomResourceState

	// Common config spec that specifies the metadata of the engine.
	// Structure is documented below.
	CommonConfig RecommendationEngineCommonConfigPtrOutput `pulumi:"commonConfig"`
	// Timestamp the Engine was created at.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The data stores associated with this engine. For SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store.
	DataStoreIds pulumi.StringArrayOutput `pulumi:"dataStoreIds"`
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Unique ID to use for Recommendation Engine.
	EngineId pulumi.StringOutput `pulumi:"engineId"`
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value is `GENERIC`.
	// Possible values are: `GENERIC`, `MEDIA`.
	IndustryVertical pulumi.StringPtrOutput `pulumi:"industryVertical"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringOutput `pulumi:"location"`
	// Configurations for a Media Recommendation Engine. Only applicable on the data stores
	// with SOLUTION_TYPE_RECOMMENDATION solution type and MEDIA industry vertical.
	// Structure is documented below.
	MediaRecommendationEngineConfig RecommendationEngineMediaRecommendationEngineConfigPtrOutput `pulumi:"mediaRecommendationEngineConfig"`
	// The unique full resource name of the recommendation engine. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Timestamp the Engine was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewRecommendationEngine registers a new resource with the given unique name, arguments, and options.
func NewRecommendationEngine(ctx *pulumi.Context,
	name string, args *RecommendationEngineArgs, opts ...pulumi.ResourceOption) (*RecommendationEngine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataStoreIds == nil {
		return nil, errors.New("invalid value for required argument 'DataStoreIds'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.EngineId == nil {
		return nil, errors.New("invalid value for required argument 'EngineId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RecommendationEngine
	err := ctx.RegisterResource("gcp:discoveryengine/recommendationEngine:RecommendationEngine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecommendationEngine gets an existing RecommendationEngine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecommendationEngine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecommendationEngineState, opts ...pulumi.ResourceOption) (*RecommendationEngine, error) {
	var resource RecommendationEngine
	err := ctx.ReadResource("gcp:discoveryengine/recommendationEngine:RecommendationEngine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecommendationEngine resources.
type recommendationEngineState struct {
	// Common config spec that specifies the metadata of the engine.
	// Structure is documented below.
	CommonConfig *RecommendationEngineCommonConfig `pulumi:"commonConfig"`
	// Timestamp the Engine was created at.
	CreateTime *string `pulumi:"createTime"`
	// The data stores associated with this engine. For SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store.
	DataStoreIds []string `pulumi:"dataStoreIds"`
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName *string `pulumi:"displayName"`
	// Unique ID to use for Recommendation Engine.
	EngineId *string `pulumi:"engineId"`
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value is `GENERIC`.
	// Possible values are: `GENERIC`, `MEDIA`.
	IndustryVertical *string `pulumi:"industryVertical"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location *string `pulumi:"location"`
	// Configurations for a Media Recommendation Engine. Only applicable on the data stores
	// with SOLUTION_TYPE_RECOMMENDATION solution type and MEDIA industry vertical.
	// Structure is documented below.
	MediaRecommendationEngineConfig *RecommendationEngineMediaRecommendationEngineConfig `pulumi:"mediaRecommendationEngineConfig"`
	// The unique full resource name of the recommendation engine. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Timestamp the Engine was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type RecommendationEngineState struct {
	// Common config spec that specifies the metadata of the engine.
	// Structure is documented below.
	CommonConfig RecommendationEngineCommonConfigPtrInput
	// Timestamp the Engine was created at.
	CreateTime pulumi.StringPtrInput
	// The data stores associated with this engine. For SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store.
	DataStoreIds pulumi.StringArrayInput
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringPtrInput
	// Unique ID to use for Recommendation Engine.
	EngineId pulumi.StringPtrInput
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value is `GENERIC`.
	// Possible values are: `GENERIC`, `MEDIA`.
	IndustryVertical pulumi.StringPtrInput
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringPtrInput
	// Configurations for a Media Recommendation Engine. Only applicable on the data stores
	// with SOLUTION_TYPE_RECOMMENDATION solution type and MEDIA industry vertical.
	// Structure is documented below.
	MediaRecommendationEngineConfig RecommendationEngineMediaRecommendationEngineConfigPtrInput
	// The unique full resource name of the recommendation engine. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Timestamp the Engine was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (RecommendationEngineState) ElementType() reflect.Type {
	return reflect.TypeOf((*recommendationEngineState)(nil)).Elem()
}

type recommendationEngineArgs struct {
	// Common config spec that specifies the metadata of the engine.
	// Structure is documented below.
	CommonConfig *RecommendationEngineCommonConfig `pulumi:"commonConfig"`
	// The data stores associated with this engine. For SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store.
	DataStoreIds []string `pulumi:"dataStoreIds"`
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName string `pulumi:"displayName"`
	// Unique ID to use for Recommendation Engine.
	EngineId string `pulumi:"engineId"`
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value is `GENERIC`.
	// Possible values are: `GENERIC`, `MEDIA`.
	IndustryVertical *string `pulumi:"industryVertical"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location string `pulumi:"location"`
	// Configurations for a Media Recommendation Engine. Only applicable on the data stores
	// with SOLUTION_TYPE_RECOMMENDATION solution type and MEDIA industry vertical.
	// Structure is documented below.
	MediaRecommendationEngineConfig *RecommendationEngineMediaRecommendationEngineConfig `pulumi:"mediaRecommendationEngineConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a RecommendationEngine resource.
type RecommendationEngineArgs struct {
	// Common config spec that specifies the metadata of the engine.
	// Structure is documented below.
	CommonConfig RecommendationEngineCommonConfigPtrInput
	// The data stores associated with this engine. For SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store.
	DataStoreIds pulumi.StringArrayInput
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringInput
	// Unique ID to use for Recommendation Engine.
	EngineId pulumi.StringInput
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value is `GENERIC`.
	// Possible values are: `GENERIC`, `MEDIA`.
	IndustryVertical pulumi.StringPtrInput
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringInput
	// Configurations for a Media Recommendation Engine. Only applicable on the data stores
	// with SOLUTION_TYPE_RECOMMENDATION solution type and MEDIA industry vertical.
	// Structure is documented below.
	MediaRecommendationEngineConfig RecommendationEngineMediaRecommendationEngineConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (RecommendationEngineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recommendationEngineArgs)(nil)).Elem()
}

type RecommendationEngineInput interface {
	pulumi.Input

	ToRecommendationEngineOutput() RecommendationEngineOutput
	ToRecommendationEngineOutputWithContext(ctx context.Context) RecommendationEngineOutput
}

func (*RecommendationEngine) ElementType() reflect.Type {
	return reflect.TypeOf((**RecommendationEngine)(nil)).Elem()
}

func (i *RecommendationEngine) ToRecommendationEngineOutput() RecommendationEngineOutput {
	return i.ToRecommendationEngineOutputWithContext(context.Background())
}

func (i *RecommendationEngine) ToRecommendationEngineOutputWithContext(ctx context.Context) RecommendationEngineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecommendationEngineOutput)
}

// RecommendationEngineArrayInput is an input type that accepts RecommendationEngineArray and RecommendationEngineArrayOutput values.
// You can construct a concrete instance of `RecommendationEngineArrayInput` via:
//
//	RecommendationEngineArray{ RecommendationEngineArgs{...} }
type RecommendationEngineArrayInput interface {
	pulumi.Input

	ToRecommendationEngineArrayOutput() RecommendationEngineArrayOutput
	ToRecommendationEngineArrayOutputWithContext(context.Context) RecommendationEngineArrayOutput
}

type RecommendationEngineArray []RecommendationEngineInput

func (RecommendationEngineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecommendationEngine)(nil)).Elem()
}

func (i RecommendationEngineArray) ToRecommendationEngineArrayOutput() RecommendationEngineArrayOutput {
	return i.ToRecommendationEngineArrayOutputWithContext(context.Background())
}

func (i RecommendationEngineArray) ToRecommendationEngineArrayOutputWithContext(ctx context.Context) RecommendationEngineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecommendationEngineArrayOutput)
}

// RecommendationEngineMapInput is an input type that accepts RecommendationEngineMap and RecommendationEngineMapOutput values.
// You can construct a concrete instance of `RecommendationEngineMapInput` via:
//
//	RecommendationEngineMap{ "key": RecommendationEngineArgs{...} }
type RecommendationEngineMapInput interface {
	pulumi.Input

	ToRecommendationEngineMapOutput() RecommendationEngineMapOutput
	ToRecommendationEngineMapOutputWithContext(context.Context) RecommendationEngineMapOutput
}

type RecommendationEngineMap map[string]RecommendationEngineInput

func (RecommendationEngineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecommendationEngine)(nil)).Elem()
}

func (i RecommendationEngineMap) ToRecommendationEngineMapOutput() RecommendationEngineMapOutput {
	return i.ToRecommendationEngineMapOutputWithContext(context.Background())
}

func (i RecommendationEngineMap) ToRecommendationEngineMapOutputWithContext(ctx context.Context) RecommendationEngineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecommendationEngineMapOutput)
}

type RecommendationEngineOutput struct{ *pulumi.OutputState }

func (RecommendationEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecommendationEngine)(nil)).Elem()
}

func (o RecommendationEngineOutput) ToRecommendationEngineOutput() RecommendationEngineOutput {
	return o
}

func (o RecommendationEngineOutput) ToRecommendationEngineOutputWithContext(ctx context.Context) RecommendationEngineOutput {
	return o
}

// Common config spec that specifies the metadata of the engine.
// Structure is documented below.
func (o RecommendationEngineOutput) CommonConfig() RecommendationEngineCommonConfigPtrOutput {
	return o.ApplyT(func(v *RecommendationEngine) RecommendationEngineCommonConfigPtrOutput { return v.CommonConfig }).(RecommendationEngineCommonConfigPtrOutput)
}

// Timestamp the Engine was created at.
func (o RecommendationEngineOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RecommendationEngine) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The data stores associated with this engine. For SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store.
func (o RecommendationEngineOutput) DataStoreIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecommendationEngine) pulumi.StringArrayOutput { return v.DataStoreIds }).(pulumi.StringArrayOutput)
}

// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
func (o RecommendationEngineOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *RecommendationEngine) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Unique ID to use for Recommendation Engine.
func (o RecommendationEngineOutput) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *RecommendationEngine) pulumi.StringOutput { return v.EngineId }).(pulumi.StringOutput)
}

// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
// Default value is `GENERIC`.
// Possible values are: `GENERIC`, `MEDIA`.
func (o RecommendationEngineOutput) IndustryVertical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecommendationEngine) pulumi.StringPtrOutput { return v.IndustryVertical }).(pulumi.StringPtrOutput)
}

// The geographic location where the data store should reside. The value can
// only be one of "global", "us" and "eu".
func (o RecommendationEngineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RecommendationEngine) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Configurations for a Media Recommendation Engine. Only applicable on the data stores
// with SOLUTION_TYPE_RECOMMENDATION solution type and MEDIA industry vertical.
// Structure is documented below.
func (o RecommendationEngineOutput) MediaRecommendationEngineConfig() RecommendationEngineMediaRecommendationEngineConfigPtrOutput {
	return o.ApplyT(func(v *RecommendationEngine) RecommendationEngineMediaRecommendationEngineConfigPtrOutput {
		return v.MediaRecommendationEngineConfig
	}).(RecommendationEngineMediaRecommendationEngineConfigPtrOutput)
}

// The unique full resource name of the recommendation engine. Values are of the format
// `projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}`.
// This field must be a UTF-8 encoded string with a length limit of 1024 characters.
func (o RecommendationEngineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RecommendationEngine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RecommendationEngineOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RecommendationEngine) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Timestamp the Engine was last updated.
func (o RecommendationEngineOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RecommendationEngine) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type RecommendationEngineArrayOutput struct{ *pulumi.OutputState }

func (RecommendationEngineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecommendationEngine)(nil)).Elem()
}

func (o RecommendationEngineArrayOutput) ToRecommendationEngineArrayOutput() RecommendationEngineArrayOutput {
	return o
}

func (o RecommendationEngineArrayOutput) ToRecommendationEngineArrayOutputWithContext(ctx context.Context) RecommendationEngineArrayOutput {
	return o
}

func (o RecommendationEngineArrayOutput) Index(i pulumi.IntInput) RecommendationEngineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RecommendationEngine {
		return vs[0].([]*RecommendationEngine)[vs[1].(int)]
	}).(RecommendationEngineOutput)
}

type RecommendationEngineMapOutput struct{ *pulumi.OutputState }

func (RecommendationEngineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecommendationEngine)(nil)).Elem()
}

func (o RecommendationEngineMapOutput) ToRecommendationEngineMapOutput() RecommendationEngineMapOutput {
	return o
}

func (o RecommendationEngineMapOutput) ToRecommendationEngineMapOutputWithContext(ctx context.Context) RecommendationEngineMapOutput {
	return o
}

func (o RecommendationEngineMapOutput) MapIndex(k pulumi.StringInput) RecommendationEngineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RecommendationEngine {
		return vs[0].(map[string]*RecommendationEngine)[vs[1].(string)]
	}).(RecommendationEngineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecommendationEngineInput)(nil)).Elem(), &RecommendationEngine{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecommendationEngineArrayInput)(nil)).Elem(), RecommendationEngineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecommendationEngineMapInput)(nil)).Elem(), RecommendationEngineMap{})
	pulumi.RegisterOutputType(RecommendationEngineOutput{})
	pulumi.RegisterOutputType(RecommendationEngineArrayOutput{})
	pulumi.RegisterOutputType(RecommendationEngineMapOutput{})
}
