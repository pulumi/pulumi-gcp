// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package discoveryengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Access Control Configuration.
//
// To get more information about AclConfig, see:
//
// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rpc/google.cloud.discoveryengine.v1alpha#aclconfigservice)
//
// ## Example Usage
//
// ### Discoveryengine Aclconfig Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/discoveryengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := discoveryengine.NewAclConfig(ctx, "basic", &discoveryengine.AclConfigArgs{
//				Location: pulumi.String("global"),
//				IdpConfig: &discoveryengine.AclConfigIdpConfigArgs{
//					IdpType: pulumi.String("THIRD_PARTY"),
//					ExternalIdpConfig: &discoveryengine.AclConfigIdpConfigExternalIdpConfigArgs{
//						WorkforcePoolName: pulumi.String("locations/global/workforcePools/cloud-console-pool-manual"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AclConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/aclConfig`
//
// * `{{project}}/{{location}}`
//
// * `{{location}}`
//
// When using the `pulumi import` command, AclConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:discoveryengine/aclConfig:AclConfig default projects/{{project}}/locations/{{location}}/aclConfig
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/aclConfig:AclConfig default {{project}}/{{location}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/aclConfig:AclConfig default {{location}}
// ```
type AclConfig struct {
	pulumi.CustomResourceState

	// Identity provider config.
	// Structure is documented below.
	IdpConfig AclConfigIdpConfigPtrOutput `pulumi:"idpConfig"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique full resource name of the aclConfig. Values are of the format
	// `projects/{project}/locations/{location}/aclConfig`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewAclConfig registers a new resource with the given unique name, arguments, and options.
func NewAclConfig(ctx *pulumi.Context,
	name string, args *AclConfigArgs, opts ...pulumi.ResourceOption) (*AclConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AclConfig
	err := ctx.RegisterResource("gcp:discoveryengine/aclConfig:AclConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclConfig gets an existing AclConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclConfigState, opts ...pulumi.ResourceOption) (*AclConfig, error) {
	var resource AclConfig
	err := ctx.ReadResource("gcp:discoveryengine/aclConfig:AclConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclConfig resources.
type aclConfigState struct {
	// Identity provider config.
	// Structure is documented below.
	IdpConfig *AclConfigIdpConfig `pulumi:"idpConfig"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location *string `pulumi:"location"`
	// The unique full resource name of the aclConfig. Values are of the format
	// `projects/{project}/locations/{location}/aclConfig`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type AclConfigState struct {
	// Identity provider config.
	// Structure is documented below.
	IdpConfig AclConfigIdpConfigPtrInput
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringPtrInput
	// The unique full resource name of the aclConfig. Values are of the format
	// `projects/{project}/locations/{location}/aclConfig`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AclConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclConfigState)(nil)).Elem()
}

type aclConfigArgs struct {
	// Identity provider config.
	// Structure is documented below.
	IdpConfig *AclConfigIdpConfig `pulumi:"idpConfig"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a AclConfig resource.
type AclConfigArgs struct {
	// Identity provider config.
	// Structure is documented below.
	IdpConfig AclConfigIdpConfigPtrInput
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AclConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclConfigArgs)(nil)).Elem()
}

type AclConfigInput interface {
	pulumi.Input

	ToAclConfigOutput() AclConfigOutput
	ToAclConfigOutputWithContext(ctx context.Context) AclConfigOutput
}

func (*AclConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AclConfig)(nil)).Elem()
}

func (i *AclConfig) ToAclConfigOutput() AclConfigOutput {
	return i.ToAclConfigOutputWithContext(context.Background())
}

func (i *AclConfig) ToAclConfigOutputWithContext(ctx context.Context) AclConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclConfigOutput)
}

// AclConfigArrayInput is an input type that accepts AclConfigArray and AclConfigArrayOutput values.
// You can construct a concrete instance of `AclConfigArrayInput` via:
//
//	AclConfigArray{ AclConfigArgs{...} }
type AclConfigArrayInput interface {
	pulumi.Input

	ToAclConfigArrayOutput() AclConfigArrayOutput
	ToAclConfigArrayOutputWithContext(context.Context) AclConfigArrayOutput
}

type AclConfigArray []AclConfigInput

func (AclConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclConfig)(nil)).Elem()
}

func (i AclConfigArray) ToAclConfigArrayOutput() AclConfigArrayOutput {
	return i.ToAclConfigArrayOutputWithContext(context.Background())
}

func (i AclConfigArray) ToAclConfigArrayOutputWithContext(ctx context.Context) AclConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclConfigArrayOutput)
}

// AclConfigMapInput is an input type that accepts AclConfigMap and AclConfigMapOutput values.
// You can construct a concrete instance of `AclConfigMapInput` via:
//
//	AclConfigMap{ "key": AclConfigArgs{...} }
type AclConfigMapInput interface {
	pulumi.Input

	ToAclConfigMapOutput() AclConfigMapOutput
	ToAclConfigMapOutputWithContext(context.Context) AclConfigMapOutput
}

type AclConfigMap map[string]AclConfigInput

func (AclConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclConfig)(nil)).Elem()
}

func (i AclConfigMap) ToAclConfigMapOutput() AclConfigMapOutput {
	return i.ToAclConfigMapOutputWithContext(context.Background())
}

func (i AclConfigMap) ToAclConfigMapOutputWithContext(ctx context.Context) AclConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclConfigMapOutput)
}

type AclConfigOutput struct{ *pulumi.OutputState }

func (AclConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclConfig)(nil)).Elem()
}

func (o AclConfigOutput) ToAclConfigOutput() AclConfigOutput {
	return o
}

func (o AclConfigOutput) ToAclConfigOutputWithContext(ctx context.Context) AclConfigOutput {
	return o
}

// Identity provider config.
// Structure is documented below.
func (o AclConfigOutput) IdpConfig() AclConfigIdpConfigPtrOutput {
	return o.ApplyT(func(v *AclConfig) AclConfigIdpConfigPtrOutput { return v.IdpConfig }).(AclConfigIdpConfigPtrOutput)
}

// The geographic location where the data store should reside. The value can
// only be one of "global", "us" and "eu".
func (o AclConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AclConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique full resource name of the aclConfig. Values are of the format
// `projects/{project}/locations/{location}/aclConfig`.
func (o AclConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AclConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AclConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AclConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type AclConfigArrayOutput struct{ *pulumi.OutputState }

func (AclConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclConfig)(nil)).Elem()
}

func (o AclConfigArrayOutput) ToAclConfigArrayOutput() AclConfigArrayOutput {
	return o
}

func (o AclConfigArrayOutput) ToAclConfigArrayOutputWithContext(ctx context.Context) AclConfigArrayOutput {
	return o
}

func (o AclConfigArrayOutput) Index(i pulumi.IntInput) AclConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AclConfig {
		return vs[0].([]*AclConfig)[vs[1].(int)]
	}).(AclConfigOutput)
}

type AclConfigMapOutput struct{ *pulumi.OutputState }

func (AclConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclConfig)(nil)).Elem()
}

func (o AclConfigMapOutput) ToAclConfigMapOutput() AclConfigMapOutput {
	return o
}

func (o AclConfigMapOutput) ToAclConfigMapOutputWithContext(ctx context.Context) AclConfigMapOutput {
	return o
}

func (o AclConfigMapOutput) MapIndex(k pulumi.StringInput) AclConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AclConfig {
		return vs[0].(map[string]*AclConfig)[vs[1].(string)]
	}).(AclConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclConfigInput)(nil)).Elem(), &AclConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclConfigArrayInput)(nil)).Elem(), AclConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclConfigMapInput)(nil)).Elem(), AclConfigMap{})
	pulumi.RegisterOutputType(AclConfigOutput{})
	pulumi.RegisterOutputType(AclConfigArrayOutput{})
	pulumi.RegisterOutputType(AclConfigMapOutput{})
}
