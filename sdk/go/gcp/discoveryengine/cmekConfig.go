// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package discoveryengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CmekConfig represents configurations used to enable CMEK data encryption with
// Cloud KMS keys.
//
// To get more information about CmekConfig, see:
//
// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.cmekConfigs)
//
// ## Example Usage
//
// ### Discoveryengine Cmekconfig Default
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/discoveryengine"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			cryptoKey, err := kms.NewCryptoKeyIAMMember(ctx, "crypto_key", &kms.CryptoKeyIAMMemberArgs{
//				CryptoKeyId: pulumi.String("kms-key-name"),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
//				Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-discoveryengine.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = discoveryengine.NewCmekConfig(ctx, "default", &discoveryengine.CmekConfigArgs{
//				Location:     pulumi.String("us"),
//				CmekConfigId: pulumi.String("cmek-config-id"),
//				KmsKey:       pulumi.String("kms-key-name"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				cryptoKey,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CmekConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/cmekConfigs/{{cmek_config_id}}`
//
// * `{{project}}/{{location}}/{{cmek_config_id}}`
//
// * `{{location}}/{{cmek_config_id}}`
//
// When using the `pulumi import` command, CmekConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:discoveryengine/cmekConfig:CmekConfig default projects/{{project}}/locations/{{location}}/cmekConfigs/{{cmek_config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/cmekConfig:CmekConfig default {{project}}/{{location}}/{{cmek_config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/cmekConfig:CmekConfig default {{location}}/{{cmek_config_id}}
// ```
type CmekConfig struct {
	pulumi.CustomResourceState

	// The unique id of the cmek config.
	CmekConfigId pulumi.StringPtrOutput `pulumi:"cmekConfigId"`
	// The default CmekConfig for the Customer.
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// KMS key resource name which will be used to encrypt resources
	// `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
	KmsKey pulumi.StringOutput `pulumi:"kmsKey"`
	// KMS key version resource name which will be used to encrypt resources
	// `<kms_key>/cryptoKeyVersions/{keyVersion}`.
	KmsKeyVersion pulumi.StringOutput `pulumi:"kmsKeyVersion"`
	// The timestamp of the last key rotation.
	LastRotationTimestampMicros pulumi.IntOutput `pulumi:"lastRotationTimestampMicros"`
	// The geographic location where the CMEK config should reside. The value can
	// only be one of "us" and "eu".
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique full resource name of the cmek config. Values are of the format
	// `projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether the NotebookLM Corpus is ready to be used.
	NotebooklmState pulumi.StringOutput `pulumi:"notebooklmState"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Set the following CmekConfig as the default to be used for child resources
	// if one is not specified. The default value is true.
	SetDefault pulumi.BoolPtrOutput `pulumi:"setDefault"`
	// Single-regional CMEKs that are required for some VAIS features.
	// Structure is documented below.
	SingleRegionKeys CmekConfigSingleRegionKeyArrayOutput `pulumi:"singleRegionKeys"`
	// The state of the CmekConfig.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewCmekConfig registers a new resource with the given unique name, arguments, and options.
func NewCmekConfig(ctx *pulumi.Context,
	name string, args *CmekConfigArgs, opts ...pulumi.ResourceOption) (*CmekConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KmsKey == nil {
		return nil, errors.New("invalid value for required argument 'KmsKey'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CmekConfig
	err := ctx.RegisterResource("gcp:discoveryengine/cmekConfig:CmekConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCmekConfig gets an existing CmekConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCmekConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CmekConfigState, opts ...pulumi.ResourceOption) (*CmekConfig, error) {
	var resource CmekConfig
	err := ctx.ReadResource("gcp:discoveryengine/cmekConfig:CmekConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CmekConfig resources.
type cmekConfigState struct {
	// The unique id of the cmek config.
	CmekConfigId *string `pulumi:"cmekConfigId"`
	// The default CmekConfig for the Customer.
	IsDefault *bool `pulumi:"isDefault"`
	// KMS key resource name which will be used to encrypt resources
	// `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
	KmsKey *string `pulumi:"kmsKey"`
	// KMS key version resource name which will be used to encrypt resources
	// `<kms_key>/cryptoKeyVersions/{keyVersion}`.
	KmsKeyVersion *string `pulumi:"kmsKeyVersion"`
	// The timestamp of the last key rotation.
	LastRotationTimestampMicros *int `pulumi:"lastRotationTimestampMicros"`
	// The geographic location where the CMEK config should reside. The value can
	// only be one of "us" and "eu".
	Location *string `pulumi:"location"`
	// The unique full resource name of the cmek config. Values are of the format
	// `projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name *string `pulumi:"name"`
	// Whether the NotebookLM Corpus is ready to be used.
	NotebooklmState *string `pulumi:"notebooklmState"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Set the following CmekConfig as the default to be used for child resources
	// if one is not specified. The default value is true.
	SetDefault *bool `pulumi:"setDefault"`
	// Single-regional CMEKs that are required for some VAIS features.
	// Structure is documented below.
	SingleRegionKeys []CmekConfigSingleRegionKey `pulumi:"singleRegionKeys"`
	// The state of the CmekConfig.
	State *string `pulumi:"state"`
}

type CmekConfigState struct {
	// The unique id of the cmek config.
	CmekConfigId pulumi.StringPtrInput
	// The default CmekConfig for the Customer.
	IsDefault pulumi.BoolPtrInput
	// KMS key resource name which will be used to encrypt resources
	// `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
	KmsKey pulumi.StringPtrInput
	// KMS key version resource name which will be used to encrypt resources
	// `<kms_key>/cryptoKeyVersions/{keyVersion}`.
	KmsKeyVersion pulumi.StringPtrInput
	// The timestamp of the last key rotation.
	LastRotationTimestampMicros pulumi.IntPtrInput
	// The geographic location where the CMEK config should reside. The value can
	// only be one of "us" and "eu".
	Location pulumi.StringPtrInput
	// The unique full resource name of the cmek config. Values are of the format
	// `projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name pulumi.StringPtrInput
	// Whether the NotebookLM Corpus is ready to be used.
	NotebooklmState pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Set the following CmekConfig as the default to be used for child resources
	// if one is not specified. The default value is true.
	SetDefault pulumi.BoolPtrInput
	// Single-regional CMEKs that are required for some VAIS features.
	// Structure is documented below.
	SingleRegionKeys CmekConfigSingleRegionKeyArrayInput
	// The state of the CmekConfig.
	State pulumi.StringPtrInput
}

func (CmekConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*cmekConfigState)(nil)).Elem()
}

type cmekConfigArgs struct {
	// The unique id of the cmek config.
	CmekConfigId *string `pulumi:"cmekConfigId"`
	// KMS key resource name which will be used to encrypt resources
	// `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
	KmsKey string `pulumi:"kmsKey"`
	// The geographic location where the CMEK config should reside. The value can
	// only be one of "us" and "eu".
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Set the following CmekConfig as the default to be used for child resources
	// if one is not specified. The default value is true.
	SetDefault *bool `pulumi:"setDefault"`
	// Single-regional CMEKs that are required for some VAIS features.
	// Structure is documented below.
	SingleRegionKeys []CmekConfigSingleRegionKey `pulumi:"singleRegionKeys"`
}

// The set of arguments for constructing a CmekConfig resource.
type CmekConfigArgs struct {
	// The unique id of the cmek config.
	CmekConfigId pulumi.StringPtrInput
	// KMS key resource name which will be used to encrypt resources
	// `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
	KmsKey pulumi.StringInput
	// The geographic location where the CMEK config should reside. The value can
	// only be one of "us" and "eu".
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Set the following CmekConfig as the default to be used for child resources
	// if one is not specified. The default value is true.
	SetDefault pulumi.BoolPtrInput
	// Single-regional CMEKs that are required for some VAIS features.
	// Structure is documented below.
	SingleRegionKeys CmekConfigSingleRegionKeyArrayInput
}

func (CmekConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cmekConfigArgs)(nil)).Elem()
}

type CmekConfigInput interface {
	pulumi.Input

	ToCmekConfigOutput() CmekConfigOutput
	ToCmekConfigOutputWithContext(ctx context.Context) CmekConfigOutput
}

func (*CmekConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**CmekConfig)(nil)).Elem()
}

func (i *CmekConfig) ToCmekConfigOutput() CmekConfigOutput {
	return i.ToCmekConfigOutputWithContext(context.Background())
}

func (i *CmekConfig) ToCmekConfigOutputWithContext(ctx context.Context) CmekConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmekConfigOutput)
}

// CmekConfigArrayInput is an input type that accepts CmekConfigArray and CmekConfigArrayOutput values.
// You can construct a concrete instance of `CmekConfigArrayInput` via:
//
//	CmekConfigArray{ CmekConfigArgs{...} }
type CmekConfigArrayInput interface {
	pulumi.Input

	ToCmekConfigArrayOutput() CmekConfigArrayOutput
	ToCmekConfigArrayOutputWithContext(context.Context) CmekConfigArrayOutput
}

type CmekConfigArray []CmekConfigInput

func (CmekConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CmekConfig)(nil)).Elem()
}

func (i CmekConfigArray) ToCmekConfigArrayOutput() CmekConfigArrayOutput {
	return i.ToCmekConfigArrayOutputWithContext(context.Background())
}

func (i CmekConfigArray) ToCmekConfigArrayOutputWithContext(ctx context.Context) CmekConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmekConfigArrayOutput)
}

// CmekConfigMapInput is an input type that accepts CmekConfigMap and CmekConfigMapOutput values.
// You can construct a concrete instance of `CmekConfigMapInput` via:
//
//	CmekConfigMap{ "key": CmekConfigArgs{...} }
type CmekConfigMapInput interface {
	pulumi.Input

	ToCmekConfigMapOutput() CmekConfigMapOutput
	ToCmekConfigMapOutputWithContext(context.Context) CmekConfigMapOutput
}

type CmekConfigMap map[string]CmekConfigInput

func (CmekConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CmekConfig)(nil)).Elem()
}

func (i CmekConfigMap) ToCmekConfigMapOutput() CmekConfigMapOutput {
	return i.ToCmekConfigMapOutputWithContext(context.Background())
}

func (i CmekConfigMap) ToCmekConfigMapOutputWithContext(ctx context.Context) CmekConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmekConfigMapOutput)
}

type CmekConfigOutput struct{ *pulumi.OutputState }

func (CmekConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CmekConfig)(nil)).Elem()
}

func (o CmekConfigOutput) ToCmekConfigOutput() CmekConfigOutput {
	return o
}

func (o CmekConfigOutput) ToCmekConfigOutputWithContext(ctx context.Context) CmekConfigOutput {
	return o
}

// The unique id of the cmek config.
func (o CmekConfigOutput) CmekConfigId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CmekConfig) pulumi.StringPtrOutput { return v.CmekConfigId }).(pulumi.StringPtrOutput)
}

// The default CmekConfig for the Customer.
func (o CmekConfigOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *CmekConfig) pulumi.BoolOutput { return v.IsDefault }).(pulumi.BoolOutput)
}

// KMS key resource name which will be used to encrypt resources
// `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
func (o CmekConfigOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v *CmekConfig) pulumi.StringOutput { return v.KmsKey }).(pulumi.StringOutput)
}

// KMS key version resource name which will be used to encrypt resources
// `<kms_key>/cryptoKeyVersions/{keyVersion}`.
func (o CmekConfigOutput) KmsKeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CmekConfig) pulumi.StringOutput { return v.KmsKeyVersion }).(pulumi.StringOutput)
}

// The timestamp of the last key rotation.
func (o CmekConfigOutput) LastRotationTimestampMicros() pulumi.IntOutput {
	return o.ApplyT(func(v *CmekConfig) pulumi.IntOutput { return v.LastRotationTimestampMicros }).(pulumi.IntOutput)
}

// The geographic location where the CMEK config should reside. The value can
// only be one of "us" and "eu".
func (o CmekConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CmekConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique full resource name of the cmek config. Values are of the format
// `projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}`.
// This field must be a UTF-8 encoded string with a length limit of 1024
// characters.
func (o CmekConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CmekConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether the NotebookLM Corpus is ready to be used.
func (o CmekConfigOutput) NotebooklmState() pulumi.StringOutput {
	return o.ApplyT(func(v *CmekConfig) pulumi.StringOutput { return v.NotebooklmState }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CmekConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CmekConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Set the following CmekConfig as the default to be used for child resources
// if one is not specified. The default value is true.
func (o CmekConfigOutput) SetDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CmekConfig) pulumi.BoolPtrOutput { return v.SetDefault }).(pulumi.BoolPtrOutput)
}

// Single-regional CMEKs that are required for some VAIS features.
// Structure is documented below.
func (o CmekConfigOutput) SingleRegionKeys() CmekConfigSingleRegionKeyArrayOutput {
	return o.ApplyT(func(v *CmekConfig) CmekConfigSingleRegionKeyArrayOutput { return v.SingleRegionKeys }).(CmekConfigSingleRegionKeyArrayOutput)
}

// The state of the CmekConfig.
func (o CmekConfigOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *CmekConfig) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type CmekConfigArrayOutput struct{ *pulumi.OutputState }

func (CmekConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CmekConfig)(nil)).Elem()
}

func (o CmekConfigArrayOutput) ToCmekConfigArrayOutput() CmekConfigArrayOutput {
	return o
}

func (o CmekConfigArrayOutput) ToCmekConfigArrayOutputWithContext(ctx context.Context) CmekConfigArrayOutput {
	return o
}

func (o CmekConfigArrayOutput) Index(i pulumi.IntInput) CmekConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CmekConfig {
		return vs[0].([]*CmekConfig)[vs[1].(int)]
	}).(CmekConfigOutput)
}

type CmekConfigMapOutput struct{ *pulumi.OutputState }

func (CmekConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CmekConfig)(nil)).Elem()
}

func (o CmekConfigMapOutput) ToCmekConfigMapOutput() CmekConfigMapOutput {
	return o
}

func (o CmekConfigMapOutput) ToCmekConfigMapOutputWithContext(ctx context.Context) CmekConfigMapOutput {
	return o
}

func (o CmekConfigMapOutput) MapIndex(k pulumi.StringInput) CmekConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CmekConfig {
		return vs[0].(map[string]*CmekConfig)[vs[1].(string)]
	}).(CmekConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CmekConfigInput)(nil)).Elem(), &CmekConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmekConfigArrayInput)(nil)).Elem(), CmekConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmekConfigMapInput)(nil)).Elem(), CmekConfigMap{})
	pulumi.RegisterOutputType(CmekConfigOutput{})
	pulumi.RegisterOutputType(CmekConfigArrayOutput{})
	pulumi.RegisterOutputType(CmekConfigMapOutput{})
}
