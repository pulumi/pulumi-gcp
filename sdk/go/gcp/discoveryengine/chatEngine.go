// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package discoveryengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Vertex chat and Conversation Engine Chat type
//
// To get more information about ChatEngine, see:
//
// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.engines)
// * How-to Guides
//   - [Vertex AI Conversation](https://cloud.google.com/dialogflow/cx/docs/concept/generative)
//
// ## Example Usage
//
// ### Discoveryengine Chat Engine Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/discoveryengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testDataStore, err := discoveryengine.NewDataStore(ctx, "test_data_store", &discoveryengine.DataStoreArgs{
//				Location:         pulumi.String("global"),
//				DataStoreId:      pulumi.String("data-store"),
//				DisplayName:      pulumi.String("Structured datastore"),
//				IndustryVertical: pulumi.String("GENERIC"),
//				ContentConfig:    pulumi.String("NO_CONTENT"),
//				SolutionTypes: pulumi.StringArray{
//					pulumi.String("SOLUTION_TYPE_CHAT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			testDataStore2, err := discoveryengine.NewDataStore(ctx, "test_data_store_2", &discoveryengine.DataStoreArgs{
//				Location:         testDataStore.Location,
//				DataStoreId:      pulumi.String("data-store-2"),
//				DisplayName:      pulumi.String("Structured datastore 2"),
//				IndustryVertical: pulumi.String("GENERIC"),
//				ContentConfig:    pulumi.String("NO_CONTENT"),
//				SolutionTypes: pulumi.StringArray{
//					pulumi.String("SOLUTION_TYPE_CHAT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = discoveryengine.NewChatEngine(ctx, "primary", &discoveryengine.ChatEngineArgs{
//				EngineId:         pulumi.String("chat-engine-id"),
//				CollectionId:     pulumi.String("default_collection"),
//				Location:         testDataStore.Location,
//				DisplayName:      pulumi.String("Chat engine"),
//				IndustryVertical: pulumi.String("GENERIC"),
//				DataStoreIds: pulumi.StringArray{
//					testDataStore.DataStoreId,
//					testDataStore2.DataStoreId,
//				},
//				CommonConfig: &discoveryengine.ChatEngineCommonConfigArgs{
//					CompanyName: pulumi.String("test-company"),
//				},
//				ChatEngineConfig: &discoveryengine.ChatEngineChatEngineConfigArgs{
//					AgentCreationConfig: &discoveryengine.ChatEngineChatEngineConfigAgentCreationConfigArgs{
//						Business:            pulumi.String("test business name"),
//						DefaultLanguageCode: pulumi.String("en"),
//						TimeZone:            pulumi.String("America/Los_Angeles"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Discoveryengine Chat Engine Existing Dialogflow Agent
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/diagflow"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/discoveryengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testDataStore, err := discoveryengine.NewDataStore(ctx, "test_data_store", &discoveryengine.DataStoreArgs{
//				Location:         pulumi.String("eu"),
//				DataStoreId:      pulumi.String("data-store"),
//				DisplayName:      pulumi.String("Structured datastore"),
//				IndustryVertical: pulumi.String("GENERIC"),
//				ContentConfig:    pulumi.String("NO_CONTENT"),
//				SolutionTypes: pulumi.StringArray{
//					pulumi.String("SOLUTION_TYPE_CHAT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			agent, err := diagflow.NewCxAgent(ctx, "agent", &diagflow.CxAgentArgs{
//				DisplayName:         pulumi.String("dialogflowcx-agent"),
//				Location:            pulumi.String("europe-west3"),
//				DefaultLanguageCode: pulumi.String("en"),
//				TimeZone:            pulumi.String("America/Los_Angeles"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = discoveryengine.NewChatEngine(ctx, "primary", &discoveryengine.ChatEngineArgs{
//				EngineId:         pulumi.String("chat-engine-id"),
//				CollectionId:     pulumi.String("default_collection"),
//				Location:         testDataStore.Location,
//				DisplayName:      pulumi.String("Chat engine"),
//				IndustryVertical: pulumi.String("GENERIC"),
//				DataStoreIds: pulumi.StringArray{
//					testDataStore.DataStoreId,
//				},
//				CommonConfig: &discoveryengine.ChatEngineCommonConfigArgs{
//					CompanyName: pulumi.String("test-company"),
//				},
//				ChatEngineConfig: &discoveryengine.ChatEngineChatEngineConfigArgs{
//					DialogflowAgentToLink: agent.ID(),
//					AllowCrossRegion:      pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ChatEngine can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}`
//
// * `{{project}}/{{location}}/{{collection_id}}/{{engine_id}}`
//
// * `{{location}}/{{collection_id}}/{{engine_id}}`
//
// When using the `pulumi import` command, ChatEngine can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:discoveryengine/chatEngine:ChatEngine default projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/chatEngine:ChatEngine default {{project}}/{{location}}/{{collection_id}}/{{engine_id}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/chatEngine:ChatEngine default {{location}}/{{collection_id}}/{{engine_id}}
// ```
type ChatEngine struct {
	pulumi.CustomResourceState

	// Configurations for a chat Engine.
	// Structure is documented below.
	ChatEngineConfig ChatEngineChatEngineConfigOutput `pulumi:"chatEngineConfig"`
	// Additional information of the Chat Engine.
	// Structure is documented below.
	ChatEngineMetadatas ChatEngineChatEngineMetadataArrayOutput `pulumi:"chatEngineMetadatas"`
	// The collection ID.
	CollectionId pulumi.StringOutput `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	CommonConfig ChatEngineCommonConfigPtrOutput `pulumi:"commonConfig"`
	// Timestamp the Engine was created at.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
	DataStoreIds pulumi.StringArrayOutput `pulumi:"dataStoreIds"`
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The ID to use for chat engine.
	EngineId pulumi.StringOutput `pulumi:"engineId"`
	// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
	// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
	IndustryVertical pulumi.StringPtrOutput `pulumi:"industryVertical"`
	// Location.
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique full resource name of the chat engine. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Timestamp the Engine was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewChatEngine registers a new resource with the given unique name, arguments, and options.
func NewChatEngine(ctx *pulumi.Context,
	name string, args *ChatEngineArgs, opts ...pulumi.ResourceOption) (*ChatEngine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChatEngineConfig == nil {
		return nil, errors.New("invalid value for required argument 'ChatEngineConfig'")
	}
	if args.CollectionId == nil {
		return nil, errors.New("invalid value for required argument 'CollectionId'")
	}
	if args.DataStoreIds == nil {
		return nil, errors.New("invalid value for required argument 'DataStoreIds'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.EngineId == nil {
		return nil, errors.New("invalid value for required argument 'EngineId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChatEngine
	err := ctx.RegisterResource("gcp:discoveryengine/chatEngine:ChatEngine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChatEngine gets an existing ChatEngine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChatEngine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChatEngineState, opts ...pulumi.ResourceOption) (*ChatEngine, error) {
	var resource ChatEngine
	err := ctx.ReadResource("gcp:discoveryengine/chatEngine:ChatEngine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChatEngine resources.
type chatEngineState struct {
	// Configurations for a chat Engine.
	// Structure is documented below.
	ChatEngineConfig *ChatEngineChatEngineConfig `pulumi:"chatEngineConfig"`
	// Additional information of the Chat Engine.
	// Structure is documented below.
	ChatEngineMetadatas []ChatEngineChatEngineMetadata `pulumi:"chatEngineMetadatas"`
	// The collection ID.
	CollectionId *string `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	CommonConfig *ChatEngineCommonConfig `pulumi:"commonConfig"`
	// Timestamp the Engine was created at.
	CreateTime *string `pulumi:"createTime"`
	// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
	DataStoreIds []string `pulumi:"dataStoreIds"`
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName *string `pulumi:"displayName"`
	// The ID to use for chat engine.
	EngineId *string `pulumi:"engineId"`
	// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
	// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
	IndustryVertical *string `pulumi:"industryVertical"`
	// Location.
	Location *string `pulumi:"location"`
	// The unique full resource name of the chat engine. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Timestamp the Engine was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ChatEngineState struct {
	// Configurations for a chat Engine.
	// Structure is documented below.
	ChatEngineConfig ChatEngineChatEngineConfigPtrInput
	// Additional information of the Chat Engine.
	// Structure is documented below.
	ChatEngineMetadatas ChatEngineChatEngineMetadataArrayInput
	// The collection ID.
	CollectionId pulumi.StringPtrInput
	// Common config spec that specifies the metadata of the engine.
	CommonConfig ChatEngineCommonConfigPtrInput
	// Timestamp the Engine was created at.
	CreateTime pulumi.StringPtrInput
	// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
	DataStoreIds pulumi.StringArrayInput
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringPtrInput
	// The ID to use for chat engine.
	EngineId pulumi.StringPtrInput
	// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
	// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
	IndustryVertical pulumi.StringPtrInput
	// Location.
	Location pulumi.StringPtrInput
	// The unique full resource name of the chat engine. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Timestamp the Engine was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (ChatEngineState) ElementType() reflect.Type {
	return reflect.TypeOf((*chatEngineState)(nil)).Elem()
}

type chatEngineArgs struct {
	// Configurations for a chat Engine.
	// Structure is documented below.
	ChatEngineConfig ChatEngineChatEngineConfig `pulumi:"chatEngineConfig"`
	// The collection ID.
	CollectionId string `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	CommonConfig *ChatEngineCommonConfig `pulumi:"commonConfig"`
	// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
	DataStoreIds []string `pulumi:"dataStoreIds"`
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName string `pulumi:"displayName"`
	// The ID to use for chat engine.
	EngineId string `pulumi:"engineId"`
	// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
	// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
	IndustryVertical *string `pulumi:"industryVertical"`
	// Location.
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
}

// The set of arguments for constructing a ChatEngine resource.
type ChatEngineArgs struct {
	// Configurations for a chat Engine.
	// Structure is documented below.
	ChatEngineConfig ChatEngineChatEngineConfigInput
	// The collection ID.
	CollectionId pulumi.StringInput
	// Common config spec that specifies the metadata of the engine.
	CommonConfig ChatEngineCommonConfigPtrInput
	// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
	DataStoreIds pulumi.StringArrayInput
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringInput
	// The ID to use for chat engine.
	EngineId pulumi.StringInput
	// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
	// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
	IndustryVertical pulumi.StringPtrInput
	// Location.
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
}

func (ChatEngineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*chatEngineArgs)(nil)).Elem()
}

type ChatEngineInput interface {
	pulumi.Input

	ToChatEngineOutput() ChatEngineOutput
	ToChatEngineOutputWithContext(ctx context.Context) ChatEngineOutput
}

func (*ChatEngine) ElementType() reflect.Type {
	return reflect.TypeOf((**ChatEngine)(nil)).Elem()
}

func (i *ChatEngine) ToChatEngineOutput() ChatEngineOutput {
	return i.ToChatEngineOutputWithContext(context.Background())
}

func (i *ChatEngine) ToChatEngineOutputWithContext(ctx context.Context) ChatEngineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChatEngineOutput)
}

// ChatEngineArrayInput is an input type that accepts ChatEngineArray and ChatEngineArrayOutput values.
// You can construct a concrete instance of `ChatEngineArrayInput` via:
//
//	ChatEngineArray{ ChatEngineArgs{...} }
type ChatEngineArrayInput interface {
	pulumi.Input

	ToChatEngineArrayOutput() ChatEngineArrayOutput
	ToChatEngineArrayOutputWithContext(context.Context) ChatEngineArrayOutput
}

type ChatEngineArray []ChatEngineInput

func (ChatEngineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChatEngine)(nil)).Elem()
}

func (i ChatEngineArray) ToChatEngineArrayOutput() ChatEngineArrayOutput {
	return i.ToChatEngineArrayOutputWithContext(context.Background())
}

func (i ChatEngineArray) ToChatEngineArrayOutputWithContext(ctx context.Context) ChatEngineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChatEngineArrayOutput)
}

// ChatEngineMapInput is an input type that accepts ChatEngineMap and ChatEngineMapOutput values.
// You can construct a concrete instance of `ChatEngineMapInput` via:
//
//	ChatEngineMap{ "key": ChatEngineArgs{...} }
type ChatEngineMapInput interface {
	pulumi.Input

	ToChatEngineMapOutput() ChatEngineMapOutput
	ToChatEngineMapOutputWithContext(context.Context) ChatEngineMapOutput
}

type ChatEngineMap map[string]ChatEngineInput

func (ChatEngineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChatEngine)(nil)).Elem()
}

func (i ChatEngineMap) ToChatEngineMapOutput() ChatEngineMapOutput {
	return i.ToChatEngineMapOutputWithContext(context.Background())
}

func (i ChatEngineMap) ToChatEngineMapOutputWithContext(ctx context.Context) ChatEngineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChatEngineMapOutput)
}

type ChatEngineOutput struct{ *pulumi.OutputState }

func (ChatEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChatEngine)(nil)).Elem()
}

func (o ChatEngineOutput) ToChatEngineOutput() ChatEngineOutput {
	return o
}

func (o ChatEngineOutput) ToChatEngineOutputWithContext(ctx context.Context) ChatEngineOutput {
	return o
}

// Configurations for a chat Engine.
// Structure is documented below.
func (o ChatEngineOutput) ChatEngineConfig() ChatEngineChatEngineConfigOutput {
	return o.ApplyT(func(v *ChatEngine) ChatEngineChatEngineConfigOutput { return v.ChatEngineConfig }).(ChatEngineChatEngineConfigOutput)
}

// Additional information of the Chat Engine.
// Structure is documented below.
func (o ChatEngineOutput) ChatEngineMetadatas() ChatEngineChatEngineMetadataArrayOutput {
	return o.ApplyT(func(v *ChatEngine) ChatEngineChatEngineMetadataArrayOutput { return v.ChatEngineMetadatas }).(ChatEngineChatEngineMetadataArrayOutput)
}

// The collection ID.
func (o ChatEngineOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChatEngine) pulumi.StringOutput { return v.CollectionId }).(pulumi.StringOutput)
}

// Common config spec that specifies the metadata of the engine.
func (o ChatEngineOutput) CommonConfig() ChatEngineCommonConfigPtrOutput {
	return o.ApplyT(func(v *ChatEngine) ChatEngineCommonConfigPtrOutput { return v.CommonConfig }).(ChatEngineCommonConfigPtrOutput)
}

// Timestamp the Engine was created at.
func (o ChatEngineOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ChatEngine) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
func (o ChatEngineOutput) DataStoreIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChatEngine) pulumi.StringArrayOutput { return v.DataStoreIds }).(pulumi.StringArrayOutput)
}

// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
func (o ChatEngineOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ChatEngine) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID to use for chat engine.
func (o ChatEngineOutput) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChatEngine) pulumi.StringOutput { return v.EngineId }).(pulumi.StringOutput)
}

// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
func (o ChatEngineOutput) IndustryVertical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChatEngine) pulumi.StringPtrOutput { return v.IndustryVertical }).(pulumi.StringPtrOutput)
}

// Location.
func (o ChatEngineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ChatEngine) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique full resource name of the chat engine. Values are of the format
// `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
// This field must be a UTF-8 encoded string with a length limit of 1024
// characters.
func (o ChatEngineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChatEngine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ChatEngineOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ChatEngine) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Timestamp the Engine was last updated.
func (o ChatEngineOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ChatEngine) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ChatEngineArrayOutput struct{ *pulumi.OutputState }

func (ChatEngineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChatEngine)(nil)).Elem()
}

func (o ChatEngineArrayOutput) ToChatEngineArrayOutput() ChatEngineArrayOutput {
	return o
}

func (o ChatEngineArrayOutput) ToChatEngineArrayOutputWithContext(ctx context.Context) ChatEngineArrayOutput {
	return o
}

func (o ChatEngineArrayOutput) Index(i pulumi.IntInput) ChatEngineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChatEngine {
		return vs[0].([]*ChatEngine)[vs[1].(int)]
	}).(ChatEngineOutput)
}

type ChatEngineMapOutput struct{ *pulumi.OutputState }

func (ChatEngineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChatEngine)(nil)).Elem()
}

func (o ChatEngineMapOutput) ToChatEngineMapOutput() ChatEngineMapOutput {
	return o
}

func (o ChatEngineMapOutput) ToChatEngineMapOutputWithContext(ctx context.Context) ChatEngineMapOutput {
	return o
}

func (o ChatEngineMapOutput) MapIndex(k pulumi.StringInput) ChatEngineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChatEngine {
		return vs[0].(map[string]*ChatEngine)[vs[1].(string)]
	}).(ChatEngineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChatEngineInput)(nil)).Elem(), &ChatEngine{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChatEngineArrayInput)(nil)).Elem(), ChatEngineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChatEngineMapInput)(nil)).Elem(), ChatEngineMap{})
	pulumi.RegisterOutputType(ChatEngineOutput{})
	pulumi.RegisterOutputType(ChatEngineArrayOutput{})
	pulumi.RegisterOutputType(ChatEngineMapOutput{})
}
