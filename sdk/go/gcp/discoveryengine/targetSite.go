// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package discoveryengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TargetSite represents a URI pattern that the users want to confine their
// search.
//
// To get more information about TargetSite, see:
//
// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.dataStores.siteSearchEngine.targetSites)
//
// ## Example Usage
//
// ### Discoveryengine Targetsite Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/discoveryengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicDataStore, err := discoveryengine.NewDataStore(ctx, "basic", &discoveryengine.DataStoreArgs{
//				Location:         pulumi.String("global"),
//				DataStoreId:      pulumi.String("data-store-id"),
//				DisplayName:      pulumi.String("tf-test-basic-site-search-datastore"),
//				IndustryVertical: pulumi.String("GENERIC"),
//				ContentConfig:    pulumi.String("PUBLIC_WEBSITE"),
//				SolutionTypes: pulumi.StringArray{
//					pulumi.String("SOLUTION_TYPE_SEARCH"),
//				},
//				CreateAdvancedSiteSearch:  pulumi.Bool(false),
//				SkipDefaultSchemaCreation: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = discoveryengine.NewTargetSite(ctx, "basic", &discoveryengine.TargetSiteArgs{
//				Location:           basicDataStore.Location,
//				DataStoreId:        basicDataStore.DataStoreId,
//				ProvidedUriPattern: pulumi.String("cloud.google.com/docs/*"),
//				Type:               pulumi.String("INCLUDE"),
//				ExactMatch:         pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Discoveryengine Targetsite Advanced
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/discoveryengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			advancedDataStore, err := discoveryengine.NewDataStore(ctx, "advanced", &discoveryengine.DataStoreArgs{
//				Location:         pulumi.String("global"),
//				DataStoreId:      pulumi.String("data-store-id"),
//				DisplayName:      pulumi.String("tf-test-advanced-site-search-datastore"),
//				IndustryVertical: pulumi.String("GENERIC"),
//				ContentConfig:    pulumi.String("PUBLIC_WEBSITE"),
//				SolutionTypes: pulumi.StringArray{
//					pulumi.String("SOLUTION_TYPE_SEARCH"),
//				},
//				CreateAdvancedSiteSearch:  pulumi.Bool(true),
//				SkipDefaultSchemaCreation: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = discoveryengine.NewTargetSite(ctx, "advanced", &discoveryengine.TargetSiteArgs{
//				Location:           advancedDataStore.Location,
//				DataStoreId:        advancedDataStore.DataStoreId,
//				ProvidedUriPattern: pulumi.String("cloud.google.com/docs/*"),
//				Type:               pulumi.String("INCLUDE"),
//				ExactMatch:         pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TargetSite can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/collections/default_collection/dataStores/{{data_store_id}}/siteSearchEngine/targetSites/{{target_site_id}}`
//
// * `{{project}}/{{location}}/{{data_store_id}}/{{target_site_id}}`
//
// * `{{location}}/{{data_store_id}}/{{target_site_id}}`
//
// When using the `pulumi import` command, TargetSite can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:discoveryengine/targetSite:TargetSite default projects/{{project}}/locations/{{location}}/collections/default_collection/dataStores/{{data_store_id}}/siteSearchEngine/targetSites/{{target_site_id}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/targetSite:TargetSite default {{project}}/{{location}}/{{data_store_id}}/{{target_site_id}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/targetSite:TargetSite default {{location}}/{{data_store_id}}/{{target_site_id}}
// ```
type TargetSite struct {
	pulumi.CustomResourceState

	// The unique id of the data store.
	DataStoreId pulumi.StringOutput `pulumi:"dataStoreId"`
	// If set to false, a uriPattern is generated to include all pages whose
	// address contains the provided_uri_pattern. If set to true, an uriPattern
	// is generated to try to be an exact match of the providedUriPattern or
	// just the specific page if the providedUriPattern is a specific one.
	// providedUriPattern is always normalized to generate the URI pattern to
	// be used by the search engine.
	ExactMatch pulumi.BoolPtrOutput `pulumi:"exactMatch"`
	// Site search indexing failure reasons.
	// Structure is documented below.
	FailureReasons TargetSiteFailureReasonArrayOutput `pulumi:"failureReasons"`
	// This is system-generated based on the `providedUriPattern`.
	GeneratedUriPattern pulumi.StringOutput `pulumi:"generatedUriPattern"`
	// The indexing status.
	IndexingStatus pulumi.StringOutput `pulumi:"indexingStatus"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique full resource name of the target site. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The user provided URI pattern from which the `generatedUriPattern` is
	// generated.
	ProvidedUriPattern pulumi.StringOutput `pulumi:"providedUriPattern"`
	// Root domain of the `providedUriPattern`.
	RootDomainUri pulumi.StringOutput `pulumi:"rootDomainUri"`
	// Site ownership and validity verification status.
	// Structure is documented below.
	SiteVerificationInfos TargetSiteSiteVerificationInfoArrayOutput `pulumi:"siteVerificationInfos"`
	// The unique id of the target site.
	TargetSiteId pulumi.StringOutput `pulumi:"targetSiteId"`
	// The possible target site types.
	// Possible values are: `INCLUDE`, `EXCLUDE`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The target site's last updated time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTargetSite registers a new resource with the given unique name, arguments, and options.
func NewTargetSite(ctx *pulumi.Context,
	name string, args *TargetSiteArgs, opts ...pulumi.ResourceOption) (*TargetSite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataStoreId == nil {
		return nil, errors.New("invalid value for required argument 'DataStoreId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ProvidedUriPattern == nil {
		return nil, errors.New("invalid value for required argument 'ProvidedUriPattern'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TargetSite
	err := ctx.RegisterResource("gcp:discoveryengine/targetSite:TargetSite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetSite gets an existing TargetSite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetSiteState, opts ...pulumi.ResourceOption) (*TargetSite, error) {
	var resource TargetSite
	err := ctx.ReadResource("gcp:discoveryengine/targetSite:TargetSite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetSite resources.
type targetSiteState struct {
	// The unique id of the data store.
	DataStoreId *string `pulumi:"dataStoreId"`
	// If set to false, a uriPattern is generated to include all pages whose
	// address contains the provided_uri_pattern. If set to true, an uriPattern
	// is generated to try to be an exact match of the providedUriPattern or
	// just the specific page if the providedUriPattern is a specific one.
	// providedUriPattern is always normalized to generate the URI pattern to
	// be used by the search engine.
	ExactMatch *bool `pulumi:"exactMatch"`
	// Site search indexing failure reasons.
	// Structure is documented below.
	FailureReasons []TargetSiteFailureReason `pulumi:"failureReasons"`
	// This is system-generated based on the `providedUriPattern`.
	GeneratedUriPattern *string `pulumi:"generatedUriPattern"`
	// The indexing status.
	IndexingStatus *string `pulumi:"indexingStatus"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location *string `pulumi:"location"`
	// The unique full resource name of the target site. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The user provided URI pattern from which the `generatedUriPattern` is
	// generated.
	ProvidedUriPattern *string `pulumi:"providedUriPattern"`
	// Root domain of the `providedUriPattern`.
	RootDomainUri *string `pulumi:"rootDomainUri"`
	// Site ownership and validity verification status.
	// Structure is documented below.
	SiteVerificationInfos []TargetSiteSiteVerificationInfo `pulumi:"siteVerificationInfos"`
	// The unique id of the target site.
	TargetSiteId *string `pulumi:"targetSiteId"`
	// The possible target site types.
	// Possible values are: `INCLUDE`, `EXCLUDE`.
	Type *string `pulumi:"type"`
	// The target site's last updated time.
	UpdateTime *string `pulumi:"updateTime"`
}

type TargetSiteState struct {
	// The unique id of the data store.
	DataStoreId pulumi.StringPtrInput
	// If set to false, a uriPattern is generated to include all pages whose
	// address contains the provided_uri_pattern. If set to true, an uriPattern
	// is generated to try to be an exact match of the providedUriPattern or
	// just the specific page if the providedUriPattern is a specific one.
	// providedUriPattern is always normalized to generate the URI pattern to
	// be used by the search engine.
	ExactMatch pulumi.BoolPtrInput
	// Site search indexing failure reasons.
	// Structure is documented below.
	FailureReasons TargetSiteFailureReasonArrayInput
	// This is system-generated based on the `providedUriPattern`.
	GeneratedUriPattern pulumi.StringPtrInput
	// The indexing status.
	IndexingStatus pulumi.StringPtrInput
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringPtrInput
	// The unique full resource name of the target site. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The user provided URI pattern from which the `generatedUriPattern` is
	// generated.
	ProvidedUriPattern pulumi.StringPtrInput
	// Root domain of the `providedUriPattern`.
	RootDomainUri pulumi.StringPtrInput
	// Site ownership and validity verification status.
	// Structure is documented below.
	SiteVerificationInfos TargetSiteSiteVerificationInfoArrayInput
	// The unique id of the target site.
	TargetSiteId pulumi.StringPtrInput
	// The possible target site types.
	// Possible values are: `INCLUDE`, `EXCLUDE`.
	Type pulumi.StringPtrInput
	// The target site's last updated time.
	UpdateTime pulumi.StringPtrInput
}

func (TargetSiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetSiteState)(nil)).Elem()
}

type targetSiteArgs struct {
	// The unique id of the data store.
	DataStoreId string `pulumi:"dataStoreId"`
	// If set to false, a uriPattern is generated to include all pages whose
	// address contains the provided_uri_pattern. If set to true, an uriPattern
	// is generated to try to be an exact match of the providedUriPattern or
	// just the specific page if the providedUriPattern is a specific one.
	// providedUriPattern is always normalized to generate the URI pattern to
	// be used by the search engine.
	ExactMatch *bool `pulumi:"exactMatch"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The user provided URI pattern from which the `generatedUriPattern` is
	// generated.
	ProvidedUriPattern string `pulumi:"providedUriPattern"`
	// The possible target site types.
	// Possible values are: `INCLUDE`, `EXCLUDE`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a TargetSite resource.
type TargetSiteArgs struct {
	// The unique id of the data store.
	DataStoreId pulumi.StringInput
	// If set to false, a uriPattern is generated to include all pages whose
	// address contains the provided_uri_pattern. If set to true, an uriPattern
	// is generated to try to be an exact match of the providedUriPattern or
	// just the specific page if the providedUriPattern is a specific one.
	// providedUriPattern is always normalized to generate the URI pattern to
	// be used by the search engine.
	ExactMatch pulumi.BoolPtrInput
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The user provided URI pattern from which the `generatedUriPattern` is
	// generated.
	ProvidedUriPattern pulumi.StringInput
	// The possible target site types.
	// Possible values are: `INCLUDE`, `EXCLUDE`.
	Type pulumi.StringPtrInput
}

func (TargetSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetSiteArgs)(nil)).Elem()
}

type TargetSiteInput interface {
	pulumi.Input

	ToTargetSiteOutput() TargetSiteOutput
	ToTargetSiteOutputWithContext(ctx context.Context) TargetSiteOutput
}

func (*TargetSite) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetSite)(nil)).Elem()
}

func (i *TargetSite) ToTargetSiteOutput() TargetSiteOutput {
	return i.ToTargetSiteOutputWithContext(context.Background())
}

func (i *TargetSite) ToTargetSiteOutputWithContext(ctx context.Context) TargetSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetSiteOutput)
}

// TargetSiteArrayInput is an input type that accepts TargetSiteArray and TargetSiteArrayOutput values.
// You can construct a concrete instance of `TargetSiteArrayInput` via:
//
//	TargetSiteArray{ TargetSiteArgs{...} }
type TargetSiteArrayInput interface {
	pulumi.Input

	ToTargetSiteArrayOutput() TargetSiteArrayOutput
	ToTargetSiteArrayOutputWithContext(context.Context) TargetSiteArrayOutput
}

type TargetSiteArray []TargetSiteInput

func (TargetSiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetSite)(nil)).Elem()
}

func (i TargetSiteArray) ToTargetSiteArrayOutput() TargetSiteArrayOutput {
	return i.ToTargetSiteArrayOutputWithContext(context.Background())
}

func (i TargetSiteArray) ToTargetSiteArrayOutputWithContext(ctx context.Context) TargetSiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetSiteArrayOutput)
}

// TargetSiteMapInput is an input type that accepts TargetSiteMap and TargetSiteMapOutput values.
// You can construct a concrete instance of `TargetSiteMapInput` via:
//
//	TargetSiteMap{ "key": TargetSiteArgs{...} }
type TargetSiteMapInput interface {
	pulumi.Input

	ToTargetSiteMapOutput() TargetSiteMapOutput
	ToTargetSiteMapOutputWithContext(context.Context) TargetSiteMapOutput
}

type TargetSiteMap map[string]TargetSiteInput

func (TargetSiteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetSite)(nil)).Elem()
}

func (i TargetSiteMap) ToTargetSiteMapOutput() TargetSiteMapOutput {
	return i.ToTargetSiteMapOutputWithContext(context.Background())
}

func (i TargetSiteMap) ToTargetSiteMapOutputWithContext(ctx context.Context) TargetSiteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetSiteMapOutput)
}

type TargetSiteOutput struct{ *pulumi.OutputState }

func (TargetSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetSite)(nil)).Elem()
}

func (o TargetSiteOutput) ToTargetSiteOutput() TargetSiteOutput {
	return o
}

func (o TargetSiteOutput) ToTargetSiteOutputWithContext(ctx context.Context) TargetSiteOutput {
	return o
}

// The unique id of the data store.
func (o TargetSiteOutput) DataStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetSite) pulumi.StringOutput { return v.DataStoreId }).(pulumi.StringOutput)
}

// If set to false, a uriPattern is generated to include all pages whose
// address contains the provided_uri_pattern. If set to true, an uriPattern
// is generated to try to be an exact match of the providedUriPattern or
// just the specific page if the providedUriPattern is a specific one.
// providedUriPattern is always normalized to generate the URI pattern to
// be used by the search engine.
func (o TargetSiteOutput) ExactMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TargetSite) pulumi.BoolPtrOutput { return v.ExactMatch }).(pulumi.BoolPtrOutput)
}

// Site search indexing failure reasons.
// Structure is documented below.
func (o TargetSiteOutput) FailureReasons() TargetSiteFailureReasonArrayOutput {
	return o.ApplyT(func(v *TargetSite) TargetSiteFailureReasonArrayOutput { return v.FailureReasons }).(TargetSiteFailureReasonArrayOutput)
}

// This is system-generated based on the `providedUriPattern`.
func (o TargetSiteOutput) GeneratedUriPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetSite) pulumi.StringOutput { return v.GeneratedUriPattern }).(pulumi.StringOutput)
}

// The indexing status.
func (o TargetSiteOutput) IndexingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetSite) pulumi.StringOutput { return v.IndexingStatus }).(pulumi.StringOutput)
}

// The geographic location where the data store should reside. The value can
// only be one of "global", "us" and "eu".
func (o TargetSiteOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetSite) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique full resource name of the target site. Values are of the format
// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}`.
// This field must be a UTF-8 encoded string with a length limit of 1024
// characters.
func (o TargetSiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetSite) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o TargetSiteOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetSite) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The user provided URI pattern from which the `generatedUriPattern` is
// generated.
func (o TargetSiteOutput) ProvidedUriPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetSite) pulumi.StringOutput { return v.ProvidedUriPattern }).(pulumi.StringOutput)
}

// Root domain of the `providedUriPattern`.
func (o TargetSiteOutput) RootDomainUri() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetSite) pulumi.StringOutput { return v.RootDomainUri }).(pulumi.StringOutput)
}

// Site ownership and validity verification status.
// Structure is documented below.
func (o TargetSiteOutput) SiteVerificationInfos() TargetSiteSiteVerificationInfoArrayOutput {
	return o.ApplyT(func(v *TargetSite) TargetSiteSiteVerificationInfoArrayOutput { return v.SiteVerificationInfos }).(TargetSiteSiteVerificationInfoArrayOutput)
}

// The unique id of the target site.
func (o TargetSiteOutput) TargetSiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetSite) pulumi.StringOutput { return v.TargetSiteId }).(pulumi.StringOutput)
}

// The possible target site types.
// Possible values are: `INCLUDE`, `EXCLUDE`.
func (o TargetSiteOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetSite) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The target site's last updated time.
func (o TargetSiteOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetSite) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type TargetSiteArrayOutput struct{ *pulumi.OutputState }

func (TargetSiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetSite)(nil)).Elem()
}

func (o TargetSiteArrayOutput) ToTargetSiteArrayOutput() TargetSiteArrayOutput {
	return o
}

func (o TargetSiteArrayOutput) ToTargetSiteArrayOutputWithContext(ctx context.Context) TargetSiteArrayOutput {
	return o
}

func (o TargetSiteArrayOutput) Index(i pulumi.IntInput) TargetSiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TargetSite {
		return vs[0].([]*TargetSite)[vs[1].(int)]
	}).(TargetSiteOutput)
}

type TargetSiteMapOutput struct{ *pulumi.OutputState }

func (TargetSiteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetSite)(nil)).Elem()
}

func (o TargetSiteMapOutput) ToTargetSiteMapOutput() TargetSiteMapOutput {
	return o
}

func (o TargetSiteMapOutput) ToTargetSiteMapOutputWithContext(ctx context.Context) TargetSiteMapOutput {
	return o
}

func (o TargetSiteMapOutput) MapIndex(k pulumi.StringInput) TargetSiteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TargetSite {
		return vs[0].(map[string]*TargetSite)[vs[1].(string)]
	}).(TargetSiteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetSiteInput)(nil)).Elem(), &TargetSite{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetSiteArrayInput)(nil)).Elem(), TargetSiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetSiteMapInput)(nil)).Elem(), TargetSiteMap{})
	pulumi.RegisterOutputType(TargetSiteOutput{})
	pulumi.RegisterOutputType(TargetSiteArrayOutput{})
	pulumi.RegisterOutputType(TargetSiteMapOutput{})
}
