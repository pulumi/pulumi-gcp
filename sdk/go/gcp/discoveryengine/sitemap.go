// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package discoveryengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Sitemap is a file where you provide information about the pages, videos, and
// other files on your site, and the relationships between them.
//
// To get more information about Sitemap, see:
//
// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.dataStores.siteSearchEngine.sitemaps)
//
// ## Example Usage
//
// ### Discoveryengine Sitemap Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/discoveryengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			advanced, err := discoveryengine.NewDataStore(ctx, "advanced", &discoveryengine.DataStoreArgs{
//				Location:         pulumi.String("global"),
//				DataStoreId:      pulumi.String("data-store-id"),
//				DisplayName:      pulumi.String("tf-test-advanced-site-search-datastore"),
//				IndustryVertical: pulumi.String("GENERIC"),
//				ContentConfig:    pulumi.String("PUBLIC_WEBSITE"),
//				SolutionTypes: pulumi.StringArray{
//					pulumi.String("SOLUTION_TYPE_SEARCH"),
//				},
//				CreateAdvancedSiteSearch:  pulumi.Bool(true),
//				SkipDefaultSchemaCreation: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = discoveryengine.NewSitemap(ctx, "basic", &discoveryengine.SitemapArgs{
//				Location:    advanced.Location,
//				DataStoreId: advanced.DataStoreId,
//				Uri:         pulumi.String("https://www.test.com/sitemap.xml"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Sitemap can be imported using any of these accepted formats:
//
// * `{{name}}`
//
// When using the `pulumi import` command, Sitemap can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:discoveryengine/sitemap:Sitemap default {{name}}
// ```
type Sitemap struct {
	pulumi.CustomResourceState

	// Timestamp when the sitemap was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The unique id of the data store.
	//
	// ***
	DataStoreId pulumi.StringOutput `pulumi:"dataStoreId"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique full resource name of the sitemap. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/sitemaps/{sitemap_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The unique id of the sitemap.
	SitemapId pulumi.StringOutput `pulumi:"sitemapId"`
	// Public URI for the sitemap, e.g. "www.example.com/sitemap.xml".
	Uri pulumi.StringPtrOutput `pulumi:"uri"`
}

// NewSitemap registers a new resource with the given unique name, arguments, and options.
func NewSitemap(ctx *pulumi.Context,
	name string, args *SitemapArgs, opts ...pulumi.ResourceOption) (*Sitemap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataStoreId == nil {
		return nil, errors.New("invalid value for required argument 'DataStoreId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sitemap
	err := ctx.RegisterResource("gcp:discoveryengine/sitemap:Sitemap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSitemap gets an existing Sitemap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSitemap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SitemapState, opts ...pulumi.ResourceOption) (*Sitemap, error) {
	var resource Sitemap
	err := ctx.ReadResource("gcp:discoveryengine/sitemap:Sitemap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sitemap resources.
type sitemapState struct {
	// Timestamp when the sitemap was created.
	CreateTime *string `pulumi:"createTime"`
	// The unique id of the data store.
	//
	// ***
	DataStoreId *string `pulumi:"dataStoreId"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location *string `pulumi:"location"`
	// The unique full resource name of the sitemap. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/sitemaps/{sitemap_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The unique id of the sitemap.
	SitemapId *string `pulumi:"sitemapId"`
	// Public URI for the sitemap, e.g. "www.example.com/sitemap.xml".
	Uri *string `pulumi:"uri"`
}

type SitemapState struct {
	// Timestamp when the sitemap was created.
	CreateTime pulumi.StringPtrInput
	// The unique id of the data store.
	//
	// ***
	DataStoreId pulumi.StringPtrInput
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringPtrInput
	// The unique full resource name of the sitemap. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/sitemaps/{sitemap_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The unique id of the sitemap.
	SitemapId pulumi.StringPtrInput
	// Public URI for the sitemap, e.g. "www.example.com/sitemap.xml".
	Uri pulumi.StringPtrInput
}

func (SitemapState) ElementType() reflect.Type {
	return reflect.TypeOf((*sitemapState)(nil)).Elem()
}

type sitemapArgs struct {
	// The unique id of the data store.
	//
	// ***
	DataStoreId string `pulumi:"dataStoreId"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Public URI for the sitemap, e.g. "www.example.com/sitemap.xml".
	Uri *string `pulumi:"uri"`
}

// The set of arguments for constructing a Sitemap resource.
type SitemapArgs struct {
	// The unique id of the data store.
	//
	// ***
	DataStoreId pulumi.StringInput
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Public URI for the sitemap, e.g. "www.example.com/sitemap.xml".
	Uri pulumi.StringPtrInput
}

func (SitemapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sitemapArgs)(nil)).Elem()
}

type SitemapInput interface {
	pulumi.Input

	ToSitemapOutput() SitemapOutput
	ToSitemapOutputWithContext(ctx context.Context) SitemapOutput
}

func (*Sitemap) ElementType() reflect.Type {
	return reflect.TypeOf((**Sitemap)(nil)).Elem()
}

func (i *Sitemap) ToSitemapOutput() SitemapOutput {
	return i.ToSitemapOutputWithContext(context.Background())
}

func (i *Sitemap) ToSitemapOutputWithContext(ctx context.Context) SitemapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SitemapOutput)
}

// SitemapArrayInput is an input type that accepts SitemapArray and SitemapArrayOutput values.
// You can construct a concrete instance of `SitemapArrayInput` via:
//
//	SitemapArray{ SitemapArgs{...} }
type SitemapArrayInput interface {
	pulumi.Input

	ToSitemapArrayOutput() SitemapArrayOutput
	ToSitemapArrayOutputWithContext(context.Context) SitemapArrayOutput
}

type SitemapArray []SitemapInput

func (SitemapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sitemap)(nil)).Elem()
}

func (i SitemapArray) ToSitemapArrayOutput() SitemapArrayOutput {
	return i.ToSitemapArrayOutputWithContext(context.Background())
}

func (i SitemapArray) ToSitemapArrayOutputWithContext(ctx context.Context) SitemapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SitemapArrayOutput)
}

// SitemapMapInput is an input type that accepts SitemapMap and SitemapMapOutput values.
// You can construct a concrete instance of `SitemapMapInput` via:
//
//	SitemapMap{ "key": SitemapArgs{...} }
type SitemapMapInput interface {
	pulumi.Input

	ToSitemapMapOutput() SitemapMapOutput
	ToSitemapMapOutputWithContext(context.Context) SitemapMapOutput
}

type SitemapMap map[string]SitemapInput

func (SitemapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sitemap)(nil)).Elem()
}

func (i SitemapMap) ToSitemapMapOutput() SitemapMapOutput {
	return i.ToSitemapMapOutputWithContext(context.Background())
}

func (i SitemapMap) ToSitemapMapOutputWithContext(ctx context.Context) SitemapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SitemapMapOutput)
}

type SitemapOutput struct{ *pulumi.OutputState }

func (SitemapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sitemap)(nil)).Elem()
}

func (o SitemapOutput) ToSitemapOutput() SitemapOutput {
	return o
}

func (o SitemapOutput) ToSitemapOutputWithContext(ctx context.Context) SitemapOutput {
	return o
}

// Timestamp when the sitemap was created.
func (o SitemapOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Sitemap) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The unique id of the data store.
//
// ***
func (o SitemapOutput) DataStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Sitemap) pulumi.StringOutput { return v.DataStoreId }).(pulumi.StringOutput)
}

// The geographic location where the data store should reside. The value can
// only be one of "global", "us" and "eu".
func (o SitemapOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Sitemap) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique full resource name of the sitemap. Values are of the format
// `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/sitemaps/{sitemap_id}`.
// This field must be a UTF-8 encoded string with a length limit of 1024
// characters.
func (o SitemapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Sitemap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o SitemapOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Sitemap) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The unique id of the sitemap.
func (o SitemapOutput) SitemapId() pulumi.StringOutput {
	return o.ApplyT(func(v *Sitemap) pulumi.StringOutput { return v.SitemapId }).(pulumi.StringOutput)
}

// Public URI for the sitemap, e.g. "www.example.com/sitemap.xml".
func (o SitemapOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sitemap) pulumi.StringPtrOutput { return v.Uri }).(pulumi.StringPtrOutput)
}

type SitemapArrayOutput struct{ *pulumi.OutputState }

func (SitemapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sitemap)(nil)).Elem()
}

func (o SitemapArrayOutput) ToSitemapArrayOutput() SitemapArrayOutput {
	return o
}

func (o SitemapArrayOutput) ToSitemapArrayOutputWithContext(ctx context.Context) SitemapArrayOutput {
	return o
}

func (o SitemapArrayOutput) Index(i pulumi.IntInput) SitemapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sitemap {
		return vs[0].([]*Sitemap)[vs[1].(int)]
	}).(SitemapOutput)
}

type SitemapMapOutput struct{ *pulumi.OutputState }

func (SitemapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sitemap)(nil)).Elem()
}

func (o SitemapMapOutput) ToSitemapMapOutput() SitemapMapOutput {
	return o
}

func (o SitemapMapOutput) ToSitemapMapOutputWithContext(ctx context.Context) SitemapMapOutput {
	return o
}

func (o SitemapMapOutput) MapIndex(k pulumi.StringInput) SitemapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sitemap {
		return vs[0].(map[string]*Sitemap)[vs[1].(string)]
	}).(SitemapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SitemapInput)(nil)).Elem(), &Sitemap{})
	pulumi.RegisterInputType(reflect.TypeOf((*SitemapArrayInput)(nil)).Elem(), SitemapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SitemapMapInput)(nil)).Elem(), SitemapMap{})
	pulumi.RegisterOutputType(SitemapOutput{})
	pulumi.RegisterOutputType(SitemapArrayOutput{})
	pulumi.RegisterOutputType(SitemapMapOutput{})
}
