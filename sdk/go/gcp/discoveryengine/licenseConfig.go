// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package discoveryengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// License Configuration.
//
// To get more information about LicenseConfig, see:
//
// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.licenseConfigs)
//
// ## Example Usage
//
// ### Discoveryengine Licenseconfig Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/discoveryengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := discoveryengine.NewLicenseConfig(ctx, "basic", &discoveryengine.LicenseConfigArgs{
//				Location:         pulumi.String("global"),
//				LicenseConfigId:  pulumi.String("license-config-id"),
//				LicenseCount:     pulumi.Int(50),
//				SubscriptionTier: pulumi.String("SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT"),
//				StartDate: &discoveryengine.LicenseConfigStartDateArgs{
//					Year:  pulumi.Int(2099),
//					Month: pulumi.Int(1),
//					Day:   pulumi.Int(1),
//				},
//				EndDate: &discoveryengine.LicenseConfigEndDateArgs{
//					Year:  pulumi.Int(2100),
//					Month: pulumi.Int(1),
//					Day:   pulumi.Int(1),
//				},
//				SubscriptionTerm: pulumi.String("SUBSCRIPTION_TERM_ONE_YEAR"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// LicenseConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/licenseConfigs/{{license_config_id}}`
//
// * `{{project}}/{{location}}/{{license_config_id}}`
//
// * `{{location}}/{{license_config_id}}`
//
// When using the `pulumi import` command, LicenseConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:discoveryengine/licenseConfig:LicenseConfig default projects/{{project}}/locations/{{location}}/licenseConfigs/{{license_config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/licenseConfig:LicenseConfig default {{project}}/{{location}}/{{license_config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/licenseConfig:LicenseConfig default {{location}}/{{license_config_id}}
// ```
type LicenseConfig struct {
	pulumi.CustomResourceState

	// Whether the license config should be auto renewed when it reaches the end date.
	AutoRenew pulumi.BoolPtrOutput `pulumi:"autoRenew"`
	// The planned end date.
	// Structure is documented below.
	EndDate LicenseConfigEndDatePtrOutput `pulumi:"endDate"`
	// Whether the license config is for free trial.
	FreeTrial pulumi.BoolPtrOutput `pulumi:"freeTrial"`
	// The unique id of the license config.
	LicenseConfigId pulumi.StringOutput `pulumi:"licenseConfigId"`
	// Number of licenses purchased.
	LicenseCount pulumi.IntOutput `pulumi:"licenseCount"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique full resource name of the license config. Values are of the format
	// `projects/{project}/locations/{location}/licenseConfigs/{license_config}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The start date.
	// Structure is documented below.
	StartDate LicenseConfigStartDateOutput `pulumi:"startDate"`
	// Subscription term.
	// Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
	SubscriptionTerm pulumi.StringOutput `pulumi:"subscriptionTerm"`
	// Subscription tier information for the license config.
	// Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
	SubscriptionTier pulumi.StringOutput `pulumi:"subscriptionTier"`
}

// NewLicenseConfig registers a new resource with the given unique name, arguments, and options.
func NewLicenseConfig(ctx *pulumi.Context,
	name string, args *LicenseConfigArgs, opts ...pulumi.ResourceOption) (*LicenseConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LicenseConfigId == nil {
		return nil, errors.New("invalid value for required argument 'LicenseConfigId'")
	}
	if args.LicenseCount == nil {
		return nil, errors.New("invalid value for required argument 'LicenseCount'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.StartDate == nil {
		return nil, errors.New("invalid value for required argument 'StartDate'")
	}
	if args.SubscriptionTerm == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionTerm'")
	}
	if args.SubscriptionTier == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionTier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicenseConfig
	err := ctx.RegisterResource("gcp:discoveryengine/licenseConfig:LicenseConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseConfig gets an existing LicenseConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseConfigState, opts ...pulumi.ResourceOption) (*LicenseConfig, error) {
	var resource LicenseConfig
	err := ctx.ReadResource("gcp:discoveryengine/licenseConfig:LicenseConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseConfig resources.
type licenseConfigState struct {
	// Whether the license config should be auto renewed when it reaches the end date.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The planned end date.
	// Structure is documented below.
	EndDate *LicenseConfigEndDate `pulumi:"endDate"`
	// Whether the license config is for free trial.
	FreeTrial *bool `pulumi:"freeTrial"`
	// The unique id of the license config.
	LicenseConfigId *string `pulumi:"licenseConfigId"`
	// Number of licenses purchased.
	LicenseCount *int `pulumi:"licenseCount"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location *string `pulumi:"location"`
	// The unique full resource name of the license config. Values are of the format
	// `projects/{project}/locations/{location}/licenseConfigs/{license_config}`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The start date.
	// Structure is documented below.
	StartDate *LicenseConfigStartDate `pulumi:"startDate"`
	// Subscription term.
	// Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
	SubscriptionTerm *string `pulumi:"subscriptionTerm"`
	// Subscription tier information for the license config.
	// Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
	SubscriptionTier *string `pulumi:"subscriptionTier"`
}

type LicenseConfigState struct {
	// Whether the license config should be auto renewed when it reaches the end date.
	AutoRenew pulumi.BoolPtrInput
	// The planned end date.
	// Structure is documented below.
	EndDate LicenseConfigEndDatePtrInput
	// Whether the license config is for free trial.
	FreeTrial pulumi.BoolPtrInput
	// The unique id of the license config.
	LicenseConfigId pulumi.StringPtrInput
	// Number of licenses purchased.
	LicenseCount pulumi.IntPtrInput
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringPtrInput
	// The unique full resource name of the license config. Values are of the format
	// `projects/{project}/locations/{location}/licenseConfigs/{license_config}`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The start date.
	// Structure is documented below.
	StartDate LicenseConfigStartDatePtrInput
	// Subscription term.
	// Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
	SubscriptionTerm pulumi.StringPtrInput
	// Subscription tier information for the license config.
	// Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
	SubscriptionTier pulumi.StringPtrInput
}

func (LicenseConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseConfigState)(nil)).Elem()
}

type licenseConfigArgs struct {
	// Whether the license config should be auto renewed when it reaches the end date.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The planned end date.
	// Structure is documented below.
	EndDate *LicenseConfigEndDate `pulumi:"endDate"`
	// Whether the license config is for free trial.
	FreeTrial *bool `pulumi:"freeTrial"`
	// The unique id of the license config.
	LicenseConfigId string `pulumi:"licenseConfigId"`
	// Number of licenses purchased.
	LicenseCount int `pulumi:"licenseCount"`
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The start date.
	// Structure is documented below.
	StartDate LicenseConfigStartDate `pulumi:"startDate"`
	// Subscription term.
	// Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
	SubscriptionTerm string `pulumi:"subscriptionTerm"`
	// Subscription tier information for the license config.
	// Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
	SubscriptionTier string `pulumi:"subscriptionTier"`
}

// The set of arguments for constructing a LicenseConfig resource.
type LicenseConfigArgs struct {
	// Whether the license config should be auto renewed when it reaches the end date.
	AutoRenew pulumi.BoolPtrInput
	// The planned end date.
	// Structure is documented below.
	EndDate LicenseConfigEndDatePtrInput
	// Whether the license config is for free trial.
	FreeTrial pulumi.BoolPtrInput
	// The unique id of the license config.
	LicenseConfigId pulumi.StringInput
	// Number of licenses purchased.
	LicenseCount pulumi.IntInput
	// The geographic location where the data store should reside. The value can
	// only be one of "global", "us" and "eu".
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The start date.
	// Structure is documented below.
	StartDate LicenseConfigStartDateInput
	// Subscription term.
	// Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
	SubscriptionTerm pulumi.StringInput
	// Subscription tier information for the license config.
	// Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
	SubscriptionTier pulumi.StringInput
}

func (LicenseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseConfigArgs)(nil)).Elem()
}

type LicenseConfigInput interface {
	pulumi.Input

	ToLicenseConfigOutput() LicenseConfigOutput
	ToLicenseConfigOutputWithContext(ctx context.Context) LicenseConfigOutput
}

func (*LicenseConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseConfig)(nil)).Elem()
}

func (i *LicenseConfig) ToLicenseConfigOutput() LicenseConfigOutput {
	return i.ToLicenseConfigOutputWithContext(context.Background())
}

func (i *LicenseConfig) ToLicenseConfigOutputWithContext(ctx context.Context) LicenseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseConfigOutput)
}

// LicenseConfigArrayInput is an input type that accepts LicenseConfigArray and LicenseConfigArrayOutput values.
// You can construct a concrete instance of `LicenseConfigArrayInput` via:
//
//	LicenseConfigArray{ LicenseConfigArgs{...} }
type LicenseConfigArrayInput interface {
	pulumi.Input

	ToLicenseConfigArrayOutput() LicenseConfigArrayOutput
	ToLicenseConfigArrayOutputWithContext(context.Context) LicenseConfigArrayOutput
}

type LicenseConfigArray []LicenseConfigInput

func (LicenseConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseConfig)(nil)).Elem()
}

func (i LicenseConfigArray) ToLicenseConfigArrayOutput() LicenseConfigArrayOutput {
	return i.ToLicenseConfigArrayOutputWithContext(context.Background())
}

func (i LicenseConfigArray) ToLicenseConfigArrayOutputWithContext(ctx context.Context) LicenseConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseConfigArrayOutput)
}

// LicenseConfigMapInput is an input type that accepts LicenseConfigMap and LicenseConfigMapOutput values.
// You can construct a concrete instance of `LicenseConfigMapInput` via:
//
//	LicenseConfigMap{ "key": LicenseConfigArgs{...} }
type LicenseConfigMapInput interface {
	pulumi.Input

	ToLicenseConfigMapOutput() LicenseConfigMapOutput
	ToLicenseConfigMapOutputWithContext(context.Context) LicenseConfigMapOutput
}

type LicenseConfigMap map[string]LicenseConfigInput

func (LicenseConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseConfig)(nil)).Elem()
}

func (i LicenseConfigMap) ToLicenseConfigMapOutput() LicenseConfigMapOutput {
	return i.ToLicenseConfigMapOutputWithContext(context.Background())
}

func (i LicenseConfigMap) ToLicenseConfigMapOutputWithContext(ctx context.Context) LicenseConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseConfigMapOutput)
}

type LicenseConfigOutput struct{ *pulumi.OutputState }

func (LicenseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseConfig)(nil)).Elem()
}

func (o LicenseConfigOutput) ToLicenseConfigOutput() LicenseConfigOutput {
	return o
}

func (o LicenseConfigOutput) ToLicenseConfigOutputWithContext(ctx context.Context) LicenseConfigOutput {
	return o
}

// Whether the license config should be auto renewed when it reaches the end date.
func (o LicenseConfigOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LicenseConfig) pulumi.BoolPtrOutput { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// The planned end date.
// Structure is documented below.
func (o LicenseConfigOutput) EndDate() LicenseConfigEndDatePtrOutput {
	return o.ApplyT(func(v *LicenseConfig) LicenseConfigEndDatePtrOutput { return v.EndDate }).(LicenseConfigEndDatePtrOutput)
}

// Whether the license config is for free trial.
func (o LicenseConfigOutput) FreeTrial() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LicenseConfig) pulumi.BoolPtrOutput { return v.FreeTrial }).(pulumi.BoolPtrOutput)
}

// The unique id of the license config.
func (o LicenseConfigOutput) LicenseConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseConfig) pulumi.StringOutput { return v.LicenseConfigId }).(pulumi.StringOutput)
}

// Number of licenses purchased.
func (o LicenseConfigOutput) LicenseCount() pulumi.IntOutput {
	return o.ApplyT(func(v *LicenseConfig) pulumi.IntOutput { return v.LicenseCount }).(pulumi.IntOutput)
}

// The geographic location where the data store should reside. The value can
// only be one of "global", "us" and "eu".
func (o LicenseConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique full resource name of the license config. Values are of the format
// `projects/{project}/locations/{location}/licenseConfigs/{license_config}`.
func (o LicenseConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o LicenseConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The start date.
// Structure is documented below.
func (o LicenseConfigOutput) StartDate() LicenseConfigStartDateOutput {
	return o.ApplyT(func(v *LicenseConfig) LicenseConfigStartDateOutput { return v.StartDate }).(LicenseConfigStartDateOutput)
}

// Subscription term.
// Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
func (o LicenseConfigOutput) SubscriptionTerm() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseConfig) pulumi.StringOutput { return v.SubscriptionTerm }).(pulumi.StringOutput)
}

// Subscription tier information for the license config.
// Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
func (o LicenseConfigOutput) SubscriptionTier() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseConfig) pulumi.StringOutput { return v.SubscriptionTier }).(pulumi.StringOutput)
}

type LicenseConfigArrayOutput struct{ *pulumi.OutputState }

func (LicenseConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseConfig)(nil)).Elem()
}

func (o LicenseConfigArrayOutput) ToLicenseConfigArrayOutput() LicenseConfigArrayOutput {
	return o
}

func (o LicenseConfigArrayOutput) ToLicenseConfigArrayOutputWithContext(ctx context.Context) LicenseConfigArrayOutput {
	return o
}

func (o LicenseConfigArrayOutput) Index(i pulumi.IntInput) LicenseConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicenseConfig {
		return vs[0].([]*LicenseConfig)[vs[1].(int)]
	}).(LicenseConfigOutput)
}

type LicenseConfigMapOutput struct{ *pulumi.OutputState }

func (LicenseConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseConfig)(nil)).Elem()
}

func (o LicenseConfigMapOutput) ToLicenseConfigMapOutput() LicenseConfigMapOutput {
	return o
}

func (o LicenseConfigMapOutput) ToLicenseConfigMapOutputWithContext(ctx context.Context) LicenseConfigMapOutput {
	return o
}

func (o LicenseConfigMapOutput) MapIndex(k pulumi.StringInput) LicenseConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicenseConfig {
		return vs[0].(map[string]*LicenseConfig)[vs[1].(string)]
	}).(LicenseConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseConfigInput)(nil)).Elem(), &LicenseConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseConfigArrayInput)(nil)).Elem(), LicenseConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseConfigMapInput)(nil)).Elem(), LicenseConfigMap{})
	pulumi.RegisterOutputType(LicenseConfigOutput{})
	pulumi.RegisterOutputType(LicenseConfigArrayOutput{})
	pulumi.RegisterOutputType(LicenseConfigMapOutput{})
}
