// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package discoveryengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Vertex AI Search and Conversation can be used to create a search engine or a chat application by connecting it with a datastore
//
// To get more information about SearchEngine, see:
//
// * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.engines)
// * How-to Guides
//   - [Create a Search Engine](https://cloud.google.com/generative-ai-app-builder/docs/create-engine-es)
//
// ## Example Usage
// ### Discoveryengine Searchengine Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/discoveryengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicDataStore, err := discoveryengine.NewDataStore(ctx, "basicDataStore", &discoveryengine.DataStoreArgs{
//				Location:         pulumi.String("global"),
//				DataStoreId:      pulumi.String("example-datastore-id"),
//				DisplayName:      pulumi.String("tf-test-structured-datastore"),
//				IndustryVertical: pulumi.String("GENERIC"),
//				ContentConfig:    pulumi.String("NO_CONTENT"),
//				SolutionTypes: pulumi.StringArray{
//					pulumi.String("SOLUTION_TYPE_SEARCH"),
//				},
//				CreateAdvancedSiteSearch: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = discoveryengine.NewSearchEngine(ctx, "basicSearchEngine", &discoveryengine.SearchEngineArgs{
//				EngineId:     pulumi.String("example-engine-id"),
//				CollectionId: pulumi.String("default_collection"),
//				Location:     basicDataStore.Location,
//				DisplayName:  pulumi.String("Example Display Name"),
//				DataStoreIds: pulumi.StringArray{
//					basicDataStore.DataStoreId,
//				},
//				SearchEngineConfig: nil,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SearchEngine can be imported using any of these accepted formats:
//
//   - `projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}`
//
//   - `{{project}}/{{location}}/{{collection_id}}/{{engine_id}}`
//
//   - `{{location}}/{{collection_id}}/{{engine_id}}`
//
//     When using the `pulumi import` command, SearchEngine can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:discoveryengine/searchEngine:SearchEngine default projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/searchEngine:SearchEngine default {{project}}/{{location}}/{{collection_id}}/{{engine_id}}
// ```
//
// ```sh
// $ pulumi import gcp:discoveryengine/searchEngine:SearchEngine default {{location}}/{{collection_id}}/{{engine_id}}
// ```
type SearchEngine struct {
	pulumi.CustomResourceState

	// The collection ID.
	CollectionId pulumi.StringOutput `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	// Structure is documented below.
	CommonConfig SearchEngineCommonConfigPtrOutput `pulumi:"commonConfig"`
	// Timestamp the Engine was created at.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at most one data store.
	DataStoreIds pulumi.StringArrayOutput `pulumi:"dataStoreIds"`
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Unique ID to use for Search Engine App.
	EngineId pulumi.StringOutput `pulumi:"engineId"`
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value is `GENERIC`.
	// Possible values are: `GENERIC`, `MEDIA`.
	IndustryVertical pulumi.StringPtrOutput `pulumi:"industryVertical"`
	// Location.
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique full resource name of the search engine. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Configurations for a Search Engine.
	// Structure is documented below.
	SearchEngineConfig SearchEngineSearchEngineConfigOutput `pulumi:"searchEngineConfig"`
	// Timestamp the Engine was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSearchEngine registers a new resource with the given unique name, arguments, and options.
func NewSearchEngine(ctx *pulumi.Context,
	name string, args *SearchEngineArgs, opts ...pulumi.ResourceOption) (*SearchEngine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectionId == nil {
		return nil, errors.New("invalid value for required argument 'CollectionId'")
	}
	if args.DataStoreIds == nil {
		return nil, errors.New("invalid value for required argument 'DataStoreIds'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.EngineId == nil {
		return nil, errors.New("invalid value for required argument 'EngineId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.SearchEngineConfig == nil {
		return nil, errors.New("invalid value for required argument 'SearchEngineConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SearchEngine
	err := ctx.RegisterResource("gcp:discoveryengine/searchEngine:SearchEngine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSearchEngine gets an existing SearchEngine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSearchEngine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SearchEngineState, opts ...pulumi.ResourceOption) (*SearchEngine, error) {
	var resource SearchEngine
	err := ctx.ReadResource("gcp:discoveryengine/searchEngine:SearchEngine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SearchEngine resources.
type searchEngineState struct {
	// The collection ID.
	CollectionId *string `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	// Structure is documented below.
	CommonConfig *SearchEngineCommonConfig `pulumi:"commonConfig"`
	// Timestamp the Engine was created at.
	CreateTime *string `pulumi:"createTime"`
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at most one data store.
	DataStoreIds []string `pulumi:"dataStoreIds"`
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName *string `pulumi:"displayName"`
	// Unique ID to use for Search Engine App.
	EngineId *string `pulumi:"engineId"`
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value is `GENERIC`.
	// Possible values are: `GENERIC`, `MEDIA`.
	IndustryVertical *string `pulumi:"industryVertical"`
	// Location.
	Location *string `pulumi:"location"`
	// The unique full resource name of the search engine. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Configurations for a Search Engine.
	// Structure is documented below.
	SearchEngineConfig *SearchEngineSearchEngineConfig `pulumi:"searchEngineConfig"`
	// Timestamp the Engine was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type SearchEngineState struct {
	// The collection ID.
	CollectionId pulumi.StringPtrInput
	// Common config spec that specifies the metadata of the engine.
	// Structure is documented below.
	CommonConfig SearchEngineCommonConfigPtrInput
	// Timestamp the Engine was created at.
	CreateTime pulumi.StringPtrInput
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at most one data store.
	DataStoreIds pulumi.StringArrayInput
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringPtrInput
	// Unique ID to use for Search Engine App.
	EngineId pulumi.StringPtrInput
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value is `GENERIC`.
	// Possible values are: `GENERIC`, `MEDIA`.
	IndustryVertical pulumi.StringPtrInput
	// Location.
	Location pulumi.StringPtrInput
	// The unique full resource name of the search engine. Values are of the format
	// `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
	// This field must be a UTF-8 encoded string with a length limit of 1024
	// characters.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Configurations for a Search Engine.
	// Structure is documented below.
	SearchEngineConfig SearchEngineSearchEngineConfigPtrInput
	// Timestamp the Engine was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (SearchEngineState) ElementType() reflect.Type {
	return reflect.TypeOf((*searchEngineState)(nil)).Elem()
}

type searchEngineArgs struct {
	// The collection ID.
	CollectionId string `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	// Structure is documented below.
	CommonConfig *SearchEngineCommonConfig `pulumi:"commonConfig"`
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at most one data store.
	DataStoreIds []string `pulumi:"dataStoreIds"`
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName string `pulumi:"displayName"`
	// Unique ID to use for Search Engine App.
	EngineId string `pulumi:"engineId"`
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value is `GENERIC`.
	// Possible values are: `GENERIC`, `MEDIA`.
	IndustryVertical *string `pulumi:"industryVertical"`
	// Location.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Configurations for a Search Engine.
	// Structure is documented below.
	SearchEngineConfig SearchEngineSearchEngineConfig `pulumi:"searchEngineConfig"`
}

// The set of arguments for constructing a SearchEngine resource.
type SearchEngineArgs struct {
	// The collection ID.
	CollectionId pulumi.StringInput
	// Common config spec that specifies the metadata of the engine.
	// Structure is documented below.
	CommonConfig SearchEngineCommonConfigPtrInput
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at most one data store.
	DataStoreIds pulumi.StringArrayInput
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringInput
	// Unique ID to use for Search Engine App.
	EngineId pulumi.StringInput
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value is `GENERIC`.
	// Possible values are: `GENERIC`, `MEDIA`.
	IndustryVertical pulumi.StringPtrInput
	// Location.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Configurations for a Search Engine.
	// Structure is documented below.
	SearchEngineConfig SearchEngineSearchEngineConfigInput
}

func (SearchEngineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*searchEngineArgs)(nil)).Elem()
}

type SearchEngineInput interface {
	pulumi.Input

	ToSearchEngineOutput() SearchEngineOutput
	ToSearchEngineOutputWithContext(ctx context.Context) SearchEngineOutput
}

func (*SearchEngine) ElementType() reflect.Type {
	return reflect.TypeOf((**SearchEngine)(nil)).Elem()
}

func (i *SearchEngine) ToSearchEngineOutput() SearchEngineOutput {
	return i.ToSearchEngineOutputWithContext(context.Background())
}

func (i *SearchEngine) ToSearchEngineOutputWithContext(ctx context.Context) SearchEngineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchEngineOutput)
}

// SearchEngineArrayInput is an input type that accepts SearchEngineArray and SearchEngineArrayOutput values.
// You can construct a concrete instance of `SearchEngineArrayInput` via:
//
//	SearchEngineArray{ SearchEngineArgs{...} }
type SearchEngineArrayInput interface {
	pulumi.Input

	ToSearchEngineArrayOutput() SearchEngineArrayOutput
	ToSearchEngineArrayOutputWithContext(context.Context) SearchEngineArrayOutput
}

type SearchEngineArray []SearchEngineInput

func (SearchEngineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SearchEngine)(nil)).Elem()
}

func (i SearchEngineArray) ToSearchEngineArrayOutput() SearchEngineArrayOutput {
	return i.ToSearchEngineArrayOutputWithContext(context.Background())
}

func (i SearchEngineArray) ToSearchEngineArrayOutputWithContext(ctx context.Context) SearchEngineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchEngineArrayOutput)
}

// SearchEngineMapInput is an input type that accepts SearchEngineMap and SearchEngineMapOutput values.
// You can construct a concrete instance of `SearchEngineMapInput` via:
//
//	SearchEngineMap{ "key": SearchEngineArgs{...} }
type SearchEngineMapInput interface {
	pulumi.Input

	ToSearchEngineMapOutput() SearchEngineMapOutput
	ToSearchEngineMapOutputWithContext(context.Context) SearchEngineMapOutput
}

type SearchEngineMap map[string]SearchEngineInput

func (SearchEngineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SearchEngine)(nil)).Elem()
}

func (i SearchEngineMap) ToSearchEngineMapOutput() SearchEngineMapOutput {
	return i.ToSearchEngineMapOutputWithContext(context.Background())
}

func (i SearchEngineMap) ToSearchEngineMapOutputWithContext(ctx context.Context) SearchEngineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchEngineMapOutput)
}

type SearchEngineOutput struct{ *pulumi.OutputState }

func (SearchEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SearchEngine)(nil)).Elem()
}

func (o SearchEngineOutput) ToSearchEngineOutput() SearchEngineOutput {
	return o
}

func (o SearchEngineOutput) ToSearchEngineOutputWithContext(ctx context.Context) SearchEngineOutput {
	return o
}

// The collection ID.
func (o SearchEngineOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SearchEngine) pulumi.StringOutput { return v.CollectionId }).(pulumi.StringOutput)
}

// Common config spec that specifies the metadata of the engine.
// Structure is documented below.
func (o SearchEngineOutput) CommonConfig() SearchEngineCommonConfigPtrOutput {
	return o.ApplyT(func(v *SearchEngine) SearchEngineCommonConfigPtrOutput { return v.CommonConfig }).(SearchEngineCommonConfigPtrOutput)
}

// Timestamp the Engine was created at.
func (o SearchEngineOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SearchEngine) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at most one data store.
func (o SearchEngineOutput) DataStoreIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SearchEngine) pulumi.StringArrayOutput { return v.DataStoreIds }).(pulumi.StringArrayOutput)
}

// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
func (o SearchEngineOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SearchEngine) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Unique ID to use for Search Engine App.
func (o SearchEngineOutput) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *SearchEngine) pulumi.StringOutput { return v.EngineId }).(pulumi.StringOutput)
}

// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
// Default value is `GENERIC`.
// Possible values are: `GENERIC`, `MEDIA`.
func (o SearchEngineOutput) IndustryVertical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SearchEngine) pulumi.StringPtrOutput { return v.IndustryVertical }).(pulumi.StringPtrOutput)
}

// Location.
func (o SearchEngineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SearchEngine) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique full resource name of the search engine. Values are of the format
// `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
// This field must be a UTF-8 encoded string with a length limit of 1024
// characters.
func (o SearchEngineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SearchEngine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o SearchEngineOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SearchEngine) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Configurations for a Search Engine.
// Structure is documented below.
func (o SearchEngineOutput) SearchEngineConfig() SearchEngineSearchEngineConfigOutput {
	return o.ApplyT(func(v *SearchEngine) SearchEngineSearchEngineConfigOutput { return v.SearchEngineConfig }).(SearchEngineSearchEngineConfigOutput)
}

// Timestamp the Engine was last updated.
func (o SearchEngineOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SearchEngine) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type SearchEngineArrayOutput struct{ *pulumi.OutputState }

func (SearchEngineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SearchEngine)(nil)).Elem()
}

func (o SearchEngineArrayOutput) ToSearchEngineArrayOutput() SearchEngineArrayOutput {
	return o
}

func (o SearchEngineArrayOutput) ToSearchEngineArrayOutputWithContext(ctx context.Context) SearchEngineArrayOutput {
	return o
}

func (o SearchEngineArrayOutput) Index(i pulumi.IntInput) SearchEngineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SearchEngine {
		return vs[0].([]*SearchEngine)[vs[1].(int)]
	}).(SearchEngineOutput)
}

type SearchEngineMapOutput struct{ *pulumi.OutputState }

func (SearchEngineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SearchEngine)(nil)).Elem()
}

func (o SearchEngineMapOutput) ToSearchEngineMapOutput() SearchEngineMapOutput {
	return o
}

func (o SearchEngineMapOutput) ToSearchEngineMapOutputWithContext(ctx context.Context) SearchEngineMapOutput {
	return o
}

func (o SearchEngineMapOutput) MapIndex(k pulumi.StringInput) SearchEngineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SearchEngine {
		return vs[0].(map[string]*SearchEngine)[vs[1].(string)]
	}).(SearchEngineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SearchEngineInput)(nil)).Elem(), &SearchEngine{})
	pulumi.RegisterInputType(reflect.TypeOf((*SearchEngineArrayInput)(nil)).Elem(), SearchEngineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SearchEngineMapInput)(nil)).Elem(), SearchEngineMap{})
	pulumi.RegisterOutputType(SearchEngineOutput{})
	pulumi.RegisterOutputType(SearchEngineArrayOutput{})
	pulumi.RegisterOutputType(SearchEngineMapOutput{})
}
