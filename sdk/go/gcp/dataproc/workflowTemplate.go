// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Workflow Template is a reusable workflow configuration. It defines a graph of jobs with information on where to run those jobs.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewWorkflowTemplate(ctx, "template", &dataproc.WorkflowTemplateArgs{
//				Name:     pulumi.String("template-example"),
//				Location: pulumi.String("us-central1"),
//				Placement: &dataproc.WorkflowTemplatePlacementArgs{
//					ManagedCluster: &dataproc.WorkflowTemplatePlacementManagedClusterArgs{
//						ClusterName: pulumi.String("my-cluster"),
//						Config: &dataproc.WorkflowTemplatePlacementManagedClusterConfigArgs{
//							GceClusterConfig: &dataproc.WorkflowTemplatePlacementManagedClusterConfigGceClusterConfigArgs{
//								Zone: pulumi.String("us-central1-a"),
//								Tags: pulumi.StringArray{
//									pulumi.String("foo"),
//									pulumi.String("bar"),
//								},
//							},
//							MasterConfig: &dataproc.WorkflowTemplatePlacementManagedClusterConfigMasterConfigArgs{
//								NumInstances: pulumi.Int(1),
//								MachineType:  pulumi.String("n1-standard-1"),
//								DiskConfig: &dataproc.WorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigArgs{
//									BootDiskType:   pulumi.String("pd-ssd"),
//									BootDiskSizeGb: pulumi.Int(15),
//								},
//							},
//							WorkerConfig: &dataproc.WorkflowTemplatePlacementManagedClusterConfigWorkerConfigArgs{
//								NumInstances: pulumi.Int(3),
//								MachineType:  pulumi.String("n1-standard-2"),
//								DiskConfig: &dataproc.WorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigArgs{
//									BootDiskSizeGb: pulumi.Int(10),
//									NumLocalSsds:   pulumi.Int(2),
//								},
//							},
//							SecondaryWorkerConfig: &dataproc.WorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigArgs{
//								NumInstances: pulumi.Int(2),
//							},
//							SoftwareConfig: &dataproc.WorkflowTemplatePlacementManagedClusterConfigSoftwareConfigArgs{
//								ImageVersion: pulumi.String("2.0.35-debian10"),
//							},
//						},
//					},
//				},
//				Jobs: dataproc.WorkflowTemplateJobArray{
//					&dataproc.WorkflowTemplateJobArgs{
//						StepId: pulumi.String("someJob"),
//						SparkJob: &dataproc.WorkflowTemplateJobSparkJobArgs{
//							MainClass: pulumi.String("SomeClass"),
//						},
//					},
//					&dataproc.WorkflowTemplateJobArgs{
//						StepId: pulumi.String("otherJob"),
//						PrerequisiteStepIds: pulumi.StringArray{
//							pulumi.String("someJob"),
//						},
//						PrestoJob: &dataproc.WorkflowTemplateJobPrestoJobArgs{
//							QueryFileUri: pulumi.String("someuri"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WorkflowTemplate can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/workflowTemplates/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, WorkflowTemplate can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:dataproc/workflowTemplate:WorkflowTemplate default projects/{{project}}/locations/{{location}}/workflowTemplates/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:dataproc/workflowTemplate:WorkflowTemplate default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:dataproc/workflowTemplate:WorkflowTemplate default {{location}}/{{name}}
// ```
type WorkflowTemplate struct {
	pulumi.CustomResourceState

	// Output only. The time template was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Timeout duration for the DAG of jobs, expressed in seconds (see [JSON representation of
	// duration](https://developers.google.com/protocol-buffers/docs/proto3#json)). The timeout duration must be from 10
	// minutes ("600s") to 24 hours ("86400s"). The timer begins when the first job is submitted. If the workflow is running at
	// the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running
	// on a [managed cluster](/dataproc/docs/concepts/workflows/using-workflows#configuring_or_selecting_a_cluster), the
	// cluster is deleted.
	DagTimeout pulumi.StringPtrOutput `pulumi:"dagTimeout"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
	// clients and services.
	EffectiveLabels pulumi.MapOutput `pulumi:"effectiveLabels"`
	// Required. The Directed Acyclic Graph of Jobs to submit.
	Jobs WorkflowTemplateJobArrayOutput `pulumi:"jobs"`
	// Optional. The labels to associate with this template. These labels will be propagated to all jobs and clusters created
	// by the workflow instance. Label **keys** must contain 1 to 63 characters, and must conform to [RFC
	// 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63
	// characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
	// associated with a template. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field `effective_labels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For `projects.regions.workflowTemplates`, the resource name of the template has the following format: `projects/{project_id}/regions/{region}/workflowTemplates/{template_id}` * For `projects.locations.workflowTemplates`, the resource name of the template has the following format: `projects/{project_id}/locations/{location}/workflowTemplates/{template_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided
	// when the template is instantiated.
	Parameters WorkflowTemplateParameterArrayOutput `pulumi:"parameters"`
	// Required. WorkflowTemplate scheduling information.
	Placement WorkflowTemplatePlacementOutput `pulumi:"placement"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	PulumiLabels pulumi.MapOutput `pulumi:"pulumiLabels"`
	// Output only. The time template was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Output only. The current version of this workflow template.
	//
	// Deprecated: version is not useful as a configurable field, and will be removed in the future.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewWorkflowTemplate registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTemplate(ctx *pulumi.Context,
	name string, args *WorkflowTemplateArgs, opts ...pulumi.ResourceOption) (*WorkflowTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Jobs == nil {
		return nil, errors.New("invalid value for required argument 'Jobs'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Placement == nil {
		return nil, errors.New("invalid value for required argument 'Placement'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTemplate
	err := ctx.RegisterResource("gcp:dataproc/workflowTemplate:WorkflowTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTemplate gets an existing WorkflowTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTemplateState, opts ...pulumi.ResourceOption) (*WorkflowTemplate, error) {
	var resource WorkflowTemplate
	err := ctx.ReadResource("gcp:dataproc/workflowTemplate:WorkflowTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTemplate resources.
type workflowTemplateState struct {
	// Output only. The time template was created.
	CreateTime *string `pulumi:"createTime"`
	// Optional. Timeout duration for the DAG of jobs, expressed in seconds (see [JSON representation of
	// duration](https://developers.google.com/protocol-buffers/docs/proto3#json)). The timeout duration must be from 10
	// minutes ("600s") to 24 hours ("86400s"). The timer begins when the first job is submitted. If the workflow is running at
	// the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running
	// on a [managed cluster](/dataproc/docs/concepts/workflows/using-workflows#configuring_or_selecting_a_cluster), the
	// cluster is deleted.
	DagTimeout *string `pulumi:"dagTimeout"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
	// clients and services.
	EffectiveLabels map[string]interface{} `pulumi:"effectiveLabels"`
	// Required. The Directed Acyclic Graph of Jobs to submit.
	Jobs []WorkflowTemplateJob `pulumi:"jobs"`
	// Optional. The labels to associate with this template. These labels will be propagated to all jobs and clusters created
	// by the workflow instance. Label **keys** must contain 1 to 63 characters, and must conform to [RFC
	// 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63
	// characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
	// associated with a template. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field `effective_labels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For `projects.regions.workflowTemplates`, the resource name of the template has the following format: `projects/{project_id}/regions/{region}/workflowTemplates/{template_id}` * For `projects.locations.workflowTemplates`, the resource name of the template has the following format: `projects/{project_id}/locations/{location}/workflowTemplates/{template_id}`
	Name *string `pulumi:"name"`
	// Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided
	// when the template is instantiated.
	Parameters []WorkflowTemplateParameter `pulumi:"parameters"`
	// Required. WorkflowTemplate scheduling information.
	Placement *WorkflowTemplatePlacement `pulumi:"placement"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	PulumiLabels map[string]interface{} `pulumi:"pulumiLabels"`
	// Output only. The time template was last updated.
	UpdateTime *string `pulumi:"updateTime"`
	// Output only. The current version of this workflow template.
	//
	// Deprecated: version is not useful as a configurable field, and will be removed in the future.
	Version *int `pulumi:"version"`
}

type WorkflowTemplateState struct {
	// Output only. The time template was created.
	CreateTime pulumi.StringPtrInput
	// Optional. Timeout duration for the DAG of jobs, expressed in seconds (see [JSON representation of
	// duration](https://developers.google.com/protocol-buffers/docs/proto3#json)). The timeout duration must be from 10
	// minutes ("600s") to 24 hours ("86400s"). The timer begins when the first job is submitted. If the workflow is running at
	// the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running
	// on a [managed cluster](/dataproc/docs/concepts/workflows/using-workflows#configuring_or_selecting_a_cluster), the
	// cluster is deleted.
	DagTimeout pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
	// clients and services.
	EffectiveLabels pulumi.MapInput
	// Required. The Directed Acyclic Graph of Jobs to submit.
	Jobs WorkflowTemplateJobArrayInput
	// Optional. The labels to associate with this template. These labels will be propagated to all jobs and clusters created
	// by the workflow instance. Label **keys** must contain 1 to 63 characters, and must conform to [RFC
	// 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63
	// characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
	// associated with a template. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field `effective_labels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For `projects.regions.workflowTemplates`, the resource name of the template has the following format: `projects/{project_id}/regions/{region}/workflowTemplates/{template_id}` * For `projects.locations.workflowTemplates`, the resource name of the template has the following format: `projects/{project_id}/locations/{location}/workflowTemplates/{template_id}`
	Name pulumi.StringPtrInput
	// Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided
	// when the template is instantiated.
	Parameters WorkflowTemplateParameterArrayInput
	// Required. WorkflowTemplate scheduling information.
	Placement WorkflowTemplatePlacementPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	PulumiLabels pulumi.MapInput
	// Output only. The time template was last updated.
	UpdateTime pulumi.StringPtrInput
	// Output only. The current version of this workflow template.
	//
	// Deprecated: version is not useful as a configurable field, and will be removed in the future.
	Version pulumi.IntPtrInput
}

func (WorkflowTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTemplateState)(nil)).Elem()
}

type workflowTemplateArgs struct {
	// Optional. Timeout duration for the DAG of jobs, expressed in seconds (see [JSON representation of
	// duration](https://developers.google.com/protocol-buffers/docs/proto3#json)). The timeout duration must be from 10
	// minutes ("600s") to 24 hours ("86400s"). The timer begins when the first job is submitted. If the workflow is running at
	// the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running
	// on a [managed cluster](/dataproc/docs/concepts/workflows/using-workflows#configuring_or_selecting_a_cluster), the
	// cluster is deleted.
	DagTimeout *string `pulumi:"dagTimeout"`
	// Required. The Directed Acyclic Graph of Jobs to submit.
	Jobs []WorkflowTemplateJob `pulumi:"jobs"`
	// Optional. The labels to associate with this template. These labels will be propagated to all jobs and clusters created
	// by the workflow instance. Label **keys** must contain 1 to 63 characters, and must conform to [RFC
	// 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63
	// characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
	// associated with a template. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field `effective_labels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource
	Location string `pulumi:"location"`
	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For `projects.regions.workflowTemplates`, the resource name of the template has the following format: `projects/{project_id}/regions/{region}/workflowTemplates/{template_id}` * For `projects.locations.workflowTemplates`, the resource name of the template has the following format: `projects/{project_id}/locations/{location}/workflowTemplates/{template_id}`
	Name *string `pulumi:"name"`
	// Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided
	// when the template is instantiated.
	Parameters []WorkflowTemplateParameter `pulumi:"parameters"`
	// Required. WorkflowTemplate scheduling information.
	Placement WorkflowTemplatePlacement `pulumi:"placement"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Output only. The current version of this workflow template.
	//
	// Deprecated: version is not useful as a configurable field, and will be removed in the future.
	Version *int `pulumi:"version"`
}

// The set of arguments for constructing a WorkflowTemplate resource.
type WorkflowTemplateArgs struct {
	// Optional. Timeout duration for the DAG of jobs, expressed in seconds (see [JSON representation of
	// duration](https://developers.google.com/protocol-buffers/docs/proto3#json)). The timeout duration must be from 10
	// minutes ("600s") to 24 hours ("86400s"). The timer begins when the first job is submitted. If the workflow is running at
	// the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running
	// on a [managed cluster](/dataproc/docs/concepts/workflows/using-workflows#configuring_or_selecting_a_cluster), the
	// cluster is deleted.
	DagTimeout pulumi.StringPtrInput
	// Required. The Directed Acyclic Graph of Jobs to submit.
	Jobs WorkflowTemplateJobArrayInput
	// Optional. The labels to associate with this template. These labels will be propagated to all jobs and clusters created
	// by the workflow instance. Label **keys** must contain 1 to 63 characters, and must conform to [RFC
	// 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63
	// characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
	// associated with a template. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field `effective_labels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location for the resource
	Location pulumi.StringInput
	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For `projects.regions.workflowTemplates`, the resource name of the template has the following format: `projects/{project_id}/regions/{region}/workflowTemplates/{template_id}` * For `projects.locations.workflowTemplates`, the resource name of the template has the following format: `projects/{project_id}/locations/{location}/workflowTemplates/{template_id}`
	Name pulumi.StringPtrInput
	// Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided
	// when the template is instantiated.
	Parameters WorkflowTemplateParameterArrayInput
	// Required. WorkflowTemplate scheduling information.
	Placement WorkflowTemplatePlacementInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Output only. The current version of this workflow template.
	//
	// Deprecated: version is not useful as a configurable field, and will be removed in the future.
	Version pulumi.IntPtrInput
}

func (WorkflowTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTemplateArgs)(nil)).Elem()
}

type WorkflowTemplateInput interface {
	pulumi.Input

	ToWorkflowTemplateOutput() WorkflowTemplateOutput
	ToWorkflowTemplateOutputWithContext(ctx context.Context) WorkflowTemplateOutput
}

func (*WorkflowTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTemplate)(nil)).Elem()
}

func (i *WorkflowTemplate) ToWorkflowTemplateOutput() WorkflowTemplateOutput {
	return i.ToWorkflowTemplateOutputWithContext(context.Background())
}

func (i *WorkflowTemplate) ToWorkflowTemplateOutputWithContext(ctx context.Context) WorkflowTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTemplateOutput)
}

// WorkflowTemplateArrayInput is an input type that accepts WorkflowTemplateArray and WorkflowTemplateArrayOutput values.
// You can construct a concrete instance of `WorkflowTemplateArrayInput` via:
//
//	WorkflowTemplateArray{ WorkflowTemplateArgs{...} }
type WorkflowTemplateArrayInput interface {
	pulumi.Input

	ToWorkflowTemplateArrayOutput() WorkflowTemplateArrayOutput
	ToWorkflowTemplateArrayOutputWithContext(context.Context) WorkflowTemplateArrayOutput
}

type WorkflowTemplateArray []WorkflowTemplateInput

func (WorkflowTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTemplate)(nil)).Elem()
}

func (i WorkflowTemplateArray) ToWorkflowTemplateArrayOutput() WorkflowTemplateArrayOutput {
	return i.ToWorkflowTemplateArrayOutputWithContext(context.Background())
}

func (i WorkflowTemplateArray) ToWorkflowTemplateArrayOutputWithContext(ctx context.Context) WorkflowTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTemplateArrayOutput)
}

// WorkflowTemplateMapInput is an input type that accepts WorkflowTemplateMap and WorkflowTemplateMapOutput values.
// You can construct a concrete instance of `WorkflowTemplateMapInput` via:
//
//	WorkflowTemplateMap{ "key": WorkflowTemplateArgs{...} }
type WorkflowTemplateMapInput interface {
	pulumi.Input

	ToWorkflowTemplateMapOutput() WorkflowTemplateMapOutput
	ToWorkflowTemplateMapOutputWithContext(context.Context) WorkflowTemplateMapOutput
}

type WorkflowTemplateMap map[string]WorkflowTemplateInput

func (WorkflowTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTemplate)(nil)).Elem()
}

func (i WorkflowTemplateMap) ToWorkflowTemplateMapOutput() WorkflowTemplateMapOutput {
	return i.ToWorkflowTemplateMapOutputWithContext(context.Background())
}

func (i WorkflowTemplateMap) ToWorkflowTemplateMapOutputWithContext(ctx context.Context) WorkflowTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTemplateMapOutput)
}

type WorkflowTemplateOutput struct{ *pulumi.OutputState }

func (WorkflowTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTemplate)(nil)).Elem()
}

func (o WorkflowTemplateOutput) ToWorkflowTemplateOutput() WorkflowTemplateOutput {
	return o
}

func (o WorkflowTemplateOutput) ToWorkflowTemplateOutputWithContext(ctx context.Context) WorkflowTemplateOutput {
	return o
}

// Output only. The time template was created.
func (o WorkflowTemplateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTemplate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Timeout duration for the DAG of jobs, expressed in seconds (see [JSON representation of
// duration](https://developers.google.com/protocol-buffers/docs/proto3#json)). The timeout duration must be from 10
// minutes ("600s") to 24 hours ("86400s"). The timer begins when the first job is submitted. If the workflow is running at
// the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running
// on a [managed cluster](/dataproc/docs/concepts/workflows/using-workflows#configuring_or_selecting_a_cluster), the
// cluster is deleted.
func (o WorkflowTemplateOutput) DagTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowTemplate) pulumi.StringPtrOutput { return v.DagTimeout }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
// clients and services.
func (o WorkflowTemplateOutput) EffectiveLabels() pulumi.MapOutput {
	return o.ApplyT(func(v *WorkflowTemplate) pulumi.MapOutput { return v.EffectiveLabels }).(pulumi.MapOutput)
}

// Required. The Directed Acyclic Graph of Jobs to submit.
func (o WorkflowTemplateOutput) Jobs() WorkflowTemplateJobArrayOutput {
	return o.ApplyT(func(v *WorkflowTemplate) WorkflowTemplateJobArrayOutput { return v.Jobs }).(WorkflowTemplateJobArrayOutput)
}

// Optional. The labels to associate with this template. These labels will be propagated to all jobs and clusters created
// by the workflow instance. Label **keys** must contain 1 to 63 characters, and must conform to [RFC
// 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63
// characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
// associated with a template. **Note**: This field is non-authoritative, and will only manage the labels present in your
// configuration. Please refer to the field `effective_labels` for all of the labels present on the resource.
func (o WorkflowTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkflowTemplate) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location for the resource
func (o WorkflowTemplateOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTemplate) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For `projects.regions.workflowTemplates`, the resource name of the template has the following format: `projects/{project_id}/regions/{region}/workflowTemplates/{template_id}` * For `projects.locations.workflowTemplates`, the resource name of the template has the following format: `projects/{project_id}/locations/{location}/workflowTemplates/{template_id}`
func (o WorkflowTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided
// when the template is instantiated.
func (o WorkflowTemplateOutput) Parameters() WorkflowTemplateParameterArrayOutput {
	return o.ApplyT(func(v *WorkflowTemplate) WorkflowTemplateParameterArrayOutput { return v.Parameters }).(WorkflowTemplateParameterArrayOutput)
}

// Required. WorkflowTemplate scheduling information.
func (o WorkflowTemplateOutput) Placement() WorkflowTemplatePlacementOutput {
	return o.ApplyT(func(v *WorkflowTemplate) WorkflowTemplatePlacementOutput { return v.Placement }).(WorkflowTemplatePlacementOutput)
}

// The project for the resource
func (o WorkflowTemplateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTemplate) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o WorkflowTemplateOutput) PulumiLabels() pulumi.MapOutput {
	return o.ApplyT(func(v *WorkflowTemplate) pulumi.MapOutput { return v.PulumiLabels }).(pulumi.MapOutput)
}

// Output only. The time template was last updated.
func (o WorkflowTemplateOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTemplate) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Output only. The current version of this workflow template.
//
// Deprecated: version is not useful as a configurable field, and will be removed in the future.
func (o WorkflowTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type WorkflowTemplateArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTemplate)(nil)).Elem()
}

func (o WorkflowTemplateArrayOutput) ToWorkflowTemplateArrayOutput() WorkflowTemplateArrayOutput {
	return o
}

func (o WorkflowTemplateArrayOutput) ToWorkflowTemplateArrayOutputWithContext(ctx context.Context) WorkflowTemplateArrayOutput {
	return o
}

func (o WorkflowTemplateArrayOutput) Index(i pulumi.IntInput) WorkflowTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTemplate {
		return vs[0].([]*WorkflowTemplate)[vs[1].(int)]
	}).(WorkflowTemplateOutput)
}

type WorkflowTemplateMapOutput struct{ *pulumi.OutputState }

func (WorkflowTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTemplate)(nil)).Elem()
}

func (o WorkflowTemplateMapOutput) ToWorkflowTemplateMapOutput() WorkflowTemplateMapOutput {
	return o
}

func (o WorkflowTemplateMapOutput) ToWorkflowTemplateMapOutputWithContext(ctx context.Context) WorkflowTemplateMapOutput {
	return o
}

func (o WorkflowTemplateMapOutput) MapIndex(k pulumi.StringInput) WorkflowTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTemplate {
		return vs[0].(map[string]*WorkflowTemplate)[vs[1].(string)]
	}).(WorkflowTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTemplateInput)(nil)).Elem(), &WorkflowTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTemplateArrayInput)(nil)).Elem(), WorkflowTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTemplateMapInput)(nil)).Elem(), WorkflowTemplateMap{})
	pulumi.RegisterOutputType(WorkflowTemplateOutput{})
	pulumi.RegisterOutputType(WorkflowTemplateArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTemplateMapOutput{})
}
