// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An ApplicationEnvironment contains shared configuration that may be referenced by multiple SparkApplications.
//
// To get more information about ApplicationEnvironment, see:
//
// * [API documentation](https://cloud.google.com/dataproc-gdc/docs/reference/rest/v1/projects.locations.applicationEnvironments)
// * How-to Guides
//   - [Dataproc Intro](https://cloud.google.com/dataproc/)
//
// ## Example Usage
//
// ### Dataprocgdc Applicationenvironment Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewGdcApplicationEnvironment(ctx, "application-environment", &dataproc.GdcApplicationEnvironmentArgs{
//				ApplicationEnvironmentId: pulumi.String("dp-tf-e2e-application-environment-basic"),
//				Serviceinstance:          pulumi.String("do-not-delete-dataproc-gdc-instance"),
//				Project:                  pulumi.String("my-project"),
//				Location:                 pulumi.String("us-west2"),
//				Namespace:                pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dataprocgdc Applicationenvironment
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewGdcApplicationEnvironment(ctx, "application-environment", &dataproc.GdcApplicationEnvironmentArgs{
//				ApplicationEnvironmentId: pulumi.String("dp-tf-e2e-application-environment"),
//				Serviceinstance:          pulumi.String("do-not-delete-dataproc-gdc-instance"),
//				Project:                  pulumi.String("my-project"),
//				Location:                 pulumi.String("us-west2"),
//				Namespace:                pulumi.String("default"),
//				DisplayName:              pulumi.String("An application environment"),
//				Labels: pulumi.StringMap{
//					"test-label": pulumi.String("label-value"),
//				},
//				Annotations: pulumi.StringMap{
//					"an_annotation": pulumi.String("annotation_value"),
//				},
//				SparkApplicationEnvironmentConfig: &dataproc.GdcApplicationEnvironmentSparkApplicationEnvironmentConfigArgs{
//					DefaultProperties: pulumi.StringMap{
//						"spark.executor.memory": pulumi.String("4g"),
//					},
//					DefaultVersion: pulumi.String("1.2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ApplicationEnvironment can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/serviceInstances/{{serviceinstance}}/applicationEnvironments/{{application_environment_id}}`
//
// * `{{project}}/{{location}}/{{serviceinstance}}/{{application_environment_id}}`
//
// * `{{location}}/{{serviceinstance}}/{{application_environment_id}}`
//
// When using the `pulumi import` command, ApplicationEnvironment can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment default projects/{{project}}/locations/{{location}}/serviceInstances/{{serviceinstance}}/applicationEnvironments/{{application_environment_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment default {{project}}/{{location}}/{{serviceinstance}}/{{application_environment_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment default {{location}}/{{serviceinstance}}/{{application_environment_id}}
// ```
type GdcApplicationEnvironment struct {
	pulumi.CustomResourceState

	// The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The id of the application environment
	ApplicationEnvironmentId pulumi.StringPtrOutput `pulumi:"applicationEnvironmentId"`
	// The timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-provided human-readable name to be used in user interfaces.
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the application environment
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The name of the application environment. Format: projects/{project}/locations/{location}/serviceInstances/{service_instance}/applicationEnvironments/{application_environment_id}
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The id of the service instance to which this application environment belongs.
	Serviceinstance pulumi.StringOutput `pulumi:"serviceinstance"`
	// Represents the SparkApplicationEnvironmentConfig.
	// Structure is documented below.
	SparkApplicationEnvironmentConfig GdcApplicationEnvironmentSparkApplicationEnvironmentConfigPtrOutput `pulumi:"sparkApplicationEnvironmentConfig"`
	// System generated unique identifier for this application environment, formatted as UUID4.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The timestamp when the resource was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGdcApplicationEnvironment registers a new resource with the given unique name, arguments, and options.
func NewGdcApplicationEnvironment(ctx *pulumi.Context,
	name string, args *GdcApplicationEnvironmentArgs, opts ...pulumi.ResourceOption) (*GdcApplicationEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Serviceinstance == nil {
		return nil, errors.New("invalid value for required argument 'Serviceinstance'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GdcApplicationEnvironment
	err := ctx.RegisterResource("gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGdcApplicationEnvironment gets an existing GdcApplicationEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGdcApplicationEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GdcApplicationEnvironmentState, opts ...pulumi.ResourceOption) (*GdcApplicationEnvironment, error) {
	var resource GdcApplicationEnvironment
	err := ctx.ReadResource("gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GdcApplicationEnvironment resources.
type gdcApplicationEnvironmentState struct {
	// The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The id of the application environment
	ApplicationEnvironmentId *string `pulumi:"applicationEnvironmentId"`
	// The timestamp when the resource was created.
	CreateTime *string `pulumi:"createTime"`
	// User-provided human-readable name to be used in user interfaces.
	DisplayName          *string           `pulumi:"displayName"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the application environment
	Location *string `pulumi:"location"`
	// Identifier. The name of the application environment. Format: projects/{project}/locations/{location}/serviceInstances/{service_instance}/applicationEnvironments/{application_environment_id}
	Name *string `pulumi:"name"`
	// The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
	Namespace *string `pulumi:"namespace"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The id of the service instance to which this application environment belongs.
	Serviceinstance *string `pulumi:"serviceinstance"`
	// Represents the SparkApplicationEnvironmentConfig.
	// Structure is documented below.
	SparkApplicationEnvironmentConfig *GdcApplicationEnvironmentSparkApplicationEnvironmentConfig `pulumi:"sparkApplicationEnvironmentConfig"`
	// System generated unique identifier for this application environment, formatted as UUID4.
	Uid *string `pulumi:"uid"`
	// The timestamp when the resource was most recently updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type GdcApplicationEnvironmentState struct {
	// The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The id of the application environment
	ApplicationEnvironmentId pulumi.StringPtrInput
	// The timestamp when the resource was created.
	CreateTime pulumi.StringPtrInput
	// User-provided human-readable name to be used in user interfaces.
	DisplayName          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the application environment
	Location pulumi.StringPtrInput
	// Identifier. The name of the application environment. Format: projects/{project}/locations/{location}/serviceInstances/{service_instance}/applicationEnvironments/{application_environment_id}
	Name pulumi.StringPtrInput
	// The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
	Namespace pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The id of the service instance to which this application environment belongs.
	Serviceinstance pulumi.StringPtrInput
	// Represents the SparkApplicationEnvironmentConfig.
	// Structure is documented below.
	SparkApplicationEnvironmentConfig GdcApplicationEnvironmentSparkApplicationEnvironmentConfigPtrInput
	// System generated unique identifier for this application environment, formatted as UUID4.
	Uid pulumi.StringPtrInput
	// The timestamp when the resource was most recently updated.
	UpdateTime pulumi.StringPtrInput
}

func (GdcApplicationEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*gdcApplicationEnvironmentState)(nil)).Elem()
}

type gdcApplicationEnvironmentArgs struct {
	// The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The id of the application environment
	ApplicationEnvironmentId *string `pulumi:"applicationEnvironmentId"`
	// User-provided human-readable name to be used in user interfaces.
	DisplayName *string `pulumi:"displayName"`
	// The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the application environment
	Location string `pulumi:"location"`
	// The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
	Namespace *string `pulumi:"namespace"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The id of the service instance to which this application environment belongs.
	Serviceinstance string `pulumi:"serviceinstance"`
	// Represents the SparkApplicationEnvironmentConfig.
	// Structure is documented below.
	SparkApplicationEnvironmentConfig *GdcApplicationEnvironmentSparkApplicationEnvironmentConfig `pulumi:"sparkApplicationEnvironmentConfig"`
}

// The set of arguments for constructing a GdcApplicationEnvironment resource.
type GdcApplicationEnvironmentArgs struct {
	// The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The id of the application environment
	ApplicationEnvironmentId pulumi.StringPtrInput
	// User-provided human-readable name to be used in user interfaces.
	DisplayName pulumi.StringPtrInput
	// The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the application environment
	Location pulumi.StringInput
	// The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
	Namespace pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The id of the service instance to which this application environment belongs.
	Serviceinstance pulumi.StringInput
	// Represents the SparkApplicationEnvironmentConfig.
	// Structure is documented below.
	SparkApplicationEnvironmentConfig GdcApplicationEnvironmentSparkApplicationEnvironmentConfigPtrInput
}

func (GdcApplicationEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gdcApplicationEnvironmentArgs)(nil)).Elem()
}

type GdcApplicationEnvironmentInput interface {
	pulumi.Input

	ToGdcApplicationEnvironmentOutput() GdcApplicationEnvironmentOutput
	ToGdcApplicationEnvironmentOutputWithContext(ctx context.Context) GdcApplicationEnvironmentOutput
}

func (*GdcApplicationEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**GdcApplicationEnvironment)(nil)).Elem()
}

func (i *GdcApplicationEnvironment) ToGdcApplicationEnvironmentOutput() GdcApplicationEnvironmentOutput {
	return i.ToGdcApplicationEnvironmentOutputWithContext(context.Background())
}

func (i *GdcApplicationEnvironment) ToGdcApplicationEnvironmentOutputWithContext(ctx context.Context) GdcApplicationEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GdcApplicationEnvironmentOutput)
}

// GdcApplicationEnvironmentArrayInput is an input type that accepts GdcApplicationEnvironmentArray and GdcApplicationEnvironmentArrayOutput values.
// You can construct a concrete instance of `GdcApplicationEnvironmentArrayInput` via:
//
//	GdcApplicationEnvironmentArray{ GdcApplicationEnvironmentArgs{...} }
type GdcApplicationEnvironmentArrayInput interface {
	pulumi.Input

	ToGdcApplicationEnvironmentArrayOutput() GdcApplicationEnvironmentArrayOutput
	ToGdcApplicationEnvironmentArrayOutputWithContext(context.Context) GdcApplicationEnvironmentArrayOutput
}

type GdcApplicationEnvironmentArray []GdcApplicationEnvironmentInput

func (GdcApplicationEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GdcApplicationEnvironment)(nil)).Elem()
}

func (i GdcApplicationEnvironmentArray) ToGdcApplicationEnvironmentArrayOutput() GdcApplicationEnvironmentArrayOutput {
	return i.ToGdcApplicationEnvironmentArrayOutputWithContext(context.Background())
}

func (i GdcApplicationEnvironmentArray) ToGdcApplicationEnvironmentArrayOutputWithContext(ctx context.Context) GdcApplicationEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GdcApplicationEnvironmentArrayOutput)
}

// GdcApplicationEnvironmentMapInput is an input type that accepts GdcApplicationEnvironmentMap and GdcApplicationEnvironmentMapOutput values.
// You can construct a concrete instance of `GdcApplicationEnvironmentMapInput` via:
//
//	GdcApplicationEnvironmentMap{ "key": GdcApplicationEnvironmentArgs{...} }
type GdcApplicationEnvironmentMapInput interface {
	pulumi.Input

	ToGdcApplicationEnvironmentMapOutput() GdcApplicationEnvironmentMapOutput
	ToGdcApplicationEnvironmentMapOutputWithContext(context.Context) GdcApplicationEnvironmentMapOutput
}

type GdcApplicationEnvironmentMap map[string]GdcApplicationEnvironmentInput

func (GdcApplicationEnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GdcApplicationEnvironment)(nil)).Elem()
}

func (i GdcApplicationEnvironmentMap) ToGdcApplicationEnvironmentMapOutput() GdcApplicationEnvironmentMapOutput {
	return i.ToGdcApplicationEnvironmentMapOutputWithContext(context.Background())
}

func (i GdcApplicationEnvironmentMap) ToGdcApplicationEnvironmentMapOutputWithContext(ctx context.Context) GdcApplicationEnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GdcApplicationEnvironmentMapOutput)
}

type GdcApplicationEnvironmentOutput struct{ *pulumi.OutputState }

func (GdcApplicationEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GdcApplicationEnvironment)(nil)).Elem()
}

func (o GdcApplicationEnvironmentOutput) ToGdcApplicationEnvironmentOutput() GdcApplicationEnvironmentOutput {
	return o
}

func (o GdcApplicationEnvironmentOutput) ToGdcApplicationEnvironmentOutputWithContext(ctx context.Context) GdcApplicationEnvironmentOutput {
	return o
}

// The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o GdcApplicationEnvironmentOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The id of the application environment
func (o GdcApplicationEnvironmentOutput) ApplicationEnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringPtrOutput { return v.ApplicationEnvironmentId }).(pulumi.StringPtrOutput)
}

// The timestamp when the resource was created.
func (o GdcApplicationEnvironmentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User-provided human-readable name to be used in user interfaces.
func (o GdcApplicationEnvironmentOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GdcApplicationEnvironmentOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o GdcApplicationEnvironmentOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o GdcApplicationEnvironmentOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the application environment
func (o GdcApplicationEnvironmentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The name of the application environment. Format: projects/{project}/locations/{location}/serviceInstances/{service_instance}/applicationEnvironments/{application_environment_id}
func (o GdcApplicationEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
func (o GdcApplicationEnvironmentOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o GdcApplicationEnvironmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o GdcApplicationEnvironmentOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The id of the service instance to which this application environment belongs.
func (o GdcApplicationEnvironmentOutput) Serviceinstance() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringOutput { return v.Serviceinstance }).(pulumi.StringOutput)
}

// Represents the SparkApplicationEnvironmentConfig.
// Structure is documented below.
func (o GdcApplicationEnvironmentOutput) SparkApplicationEnvironmentConfig() GdcApplicationEnvironmentSparkApplicationEnvironmentConfigPtrOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) GdcApplicationEnvironmentSparkApplicationEnvironmentConfigPtrOutput {
		return v.SparkApplicationEnvironmentConfig
	}).(GdcApplicationEnvironmentSparkApplicationEnvironmentConfigPtrOutput)
}

// System generated unique identifier for this application environment, formatted as UUID4.
func (o GdcApplicationEnvironmentOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The timestamp when the resource was most recently updated.
func (o GdcApplicationEnvironmentOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcApplicationEnvironment) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type GdcApplicationEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (GdcApplicationEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GdcApplicationEnvironment)(nil)).Elem()
}

func (o GdcApplicationEnvironmentArrayOutput) ToGdcApplicationEnvironmentArrayOutput() GdcApplicationEnvironmentArrayOutput {
	return o
}

func (o GdcApplicationEnvironmentArrayOutput) ToGdcApplicationEnvironmentArrayOutputWithContext(ctx context.Context) GdcApplicationEnvironmentArrayOutput {
	return o
}

func (o GdcApplicationEnvironmentArrayOutput) Index(i pulumi.IntInput) GdcApplicationEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GdcApplicationEnvironment {
		return vs[0].([]*GdcApplicationEnvironment)[vs[1].(int)]
	}).(GdcApplicationEnvironmentOutput)
}

type GdcApplicationEnvironmentMapOutput struct{ *pulumi.OutputState }

func (GdcApplicationEnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GdcApplicationEnvironment)(nil)).Elem()
}

func (o GdcApplicationEnvironmentMapOutput) ToGdcApplicationEnvironmentMapOutput() GdcApplicationEnvironmentMapOutput {
	return o
}

func (o GdcApplicationEnvironmentMapOutput) ToGdcApplicationEnvironmentMapOutputWithContext(ctx context.Context) GdcApplicationEnvironmentMapOutput {
	return o
}

func (o GdcApplicationEnvironmentMapOutput) MapIndex(k pulumi.StringInput) GdcApplicationEnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GdcApplicationEnvironment {
		return vs[0].(map[string]*GdcApplicationEnvironment)[vs[1].(string)]
	}).(GdcApplicationEnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GdcApplicationEnvironmentInput)(nil)).Elem(), &GdcApplicationEnvironment{})
	pulumi.RegisterInputType(reflect.TypeOf((*GdcApplicationEnvironmentArrayInput)(nil)).Elem(), GdcApplicationEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GdcApplicationEnvironmentMapInput)(nil)).Elem(), GdcApplicationEnvironmentMap{})
	pulumi.RegisterOutputType(GdcApplicationEnvironmentOutput{})
	pulumi.RegisterOutputType(GdcApplicationEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(GdcApplicationEnvironmentMapOutput{})
}
