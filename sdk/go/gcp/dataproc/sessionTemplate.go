// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Dataproc Serverless session template defines the configuration settings for
// creating one or more Dataproc Serverless interactive sessions.
//
// To get more information about SessionTemplate, see:
//
// * [API documentation](https://cloud.google.com/dataproc-serverless/docs/reference/rest/v1/projects.locations.sessionTemplates)
// * How-to Guides
//   - [Dataproc Serverless Session Templates](https://cloud.google.com/dataproc-serverless/docs/guides/create-serverless-sessions-templates#create-dataproc-serverless-session-template)
//
// ## Example Usage
//
// ### Dataproc Session Templates Jupyter
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewSessionTemplate(ctx, "example_session_templates_jupyter", &dataproc.SessionTemplateArgs{
//				Name:     pulumi.String("projects/my-project-name/locations/us-central1/sessionTemplates/jupyter-session-template"),
//				Location: pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"session_template_test": pulumi.String("terraform"),
//				},
//				RuntimeConfig: &dataproc.SessionTemplateRuntimeConfigArgs{
//					Properties: pulumi.StringMap{
//						"spark.dynamicAllocation.enabled": pulumi.String("false"),
//						"spark.executor.instances":        pulumi.String("2"),
//					},
//				},
//				EnvironmentConfig: &dataproc.SessionTemplateEnvironmentConfigArgs{
//					ExecutionConfig: &dataproc.SessionTemplateEnvironmentConfigExecutionConfigArgs{
//						SubnetworkUri: pulumi.String("default"),
//						Ttl:           pulumi.String("3600s"),
//						NetworkTags: pulumi.StringArray{
//							pulumi.String("tag1"),
//						},
//					},
//				},
//				JupyterSession: &dataproc.SessionTemplateJupyterSessionArgs{
//					Kernel:      pulumi.String("PYTHON"),
//					DisplayName: pulumi.String("tf python kernel"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dataproc Session Templates Jupyter Full
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = storage.GetProjectServiceAccount(ctx, &storage.GetProjectServiceAccountArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				UniformBucketLevelAccess: pulumi.Bool(true),
//				Name:                     pulumi.String("dataproc-bucket"),
//				Location:                 pulumi.String("US"),
//				ForceDestroy:             pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			cryptoKeyMember1, err := kms.NewCryptoKeyIAMMember(ctx, "crypto_key_member_1", &kms.CryptoKeyIAMMemberArgs{
//				CryptoKeyId: pulumi.String("example-key"),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
//				Member:      pulumi.Sprintf("serviceAccount:service-%v@dataproc-accounts.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			ms, err := dataproc.NewMetastoreService(ctx, "ms", &dataproc.MetastoreServiceArgs{
//				ServiceId: pulumi.String("jupyter-session-template"),
//				Location:  pulumi.String("us-central1"),
//				Port:      pulumi.Int(9080),
//				Tier:      pulumi.String("DEVELOPER"),
//				MaintenanceWindow: &dataproc.MetastoreServiceMaintenanceWindowArgs{
//					HourOfDay: pulumi.Int(2),
//					DayOfWeek: pulumi.String("SUNDAY"),
//				},
//				HiveMetastoreConfig: &dataproc.MetastoreServiceHiveMetastoreConfigArgs{
//					Version: pulumi.String("3.1.2"),
//				},
//				NetworkConfig: &dataproc.MetastoreServiceNetworkConfigArgs{
//					Consumers: dataproc.MetastoreServiceNetworkConfigConsumerArray{
//						&dataproc.MetastoreServiceNetworkConfigConsumerArgs{
//							Subnetwork: pulumi.String("projects/my-project-name/regions/us-central1/subnetworks/default"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			basic, err := dataproc.NewCluster(ctx, "basic", &dataproc.ClusterArgs{
//				Name:   pulumi.String("jupyter-session-template"),
//				Region: pulumi.String("us-central1"),
//				ClusterConfig: &dataproc.ClusterClusterConfigArgs{
//					SoftwareConfig: &dataproc.ClusterClusterConfigSoftwareConfigArgs{
//						OverrideProperties: pulumi.StringMap{
//							"dataproc:dataproc.allow.zero.workers": pulumi.String("true"),
//							"spark:spark.history.fs.logDirectory": bucket.Name.ApplyT(func(name string) (string, error) {
//								return fmt.Sprintf("gs://%v/*/spark-job-history", name), nil
//							}).(pulumi.StringOutput),
//						},
//					},
//					GceClusterConfig: &dataproc.ClusterClusterConfigGceClusterConfigArgs{
//						Subnetwork: pulumi.String("default"),
//					},
//					EndpointConfig: &dataproc.ClusterClusterConfigEndpointConfigArgs{
//						EnableHttpPortAccess: pulumi.Bool(true),
//					},
//					MasterConfig: &dataproc.ClusterClusterConfigMasterConfigArgs{
//						NumInstances: pulumi.Int(1),
//						MachineType:  pulumi.String("e2-standard-2"),
//						DiskConfig: &dataproc.ClusterClusterConfigMasterConfigDiskConfigArgs{
//							BootDiskSizeGb: pulumi.Int(35),
//						},
//					},
//					MetastoreConfig: &dataproc.ClusterClusterConfigMetastoreConfigArgs{
//						DataprocMetastoreService: ms.Name,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewSessionTemplate(ctx, "dataproc_session_templates_jupyter_full", &dataproc.SessionTemplateArgs{
//				Name:     pulumi.String("projects/my-project-name/locations/us-central1/sessionTemplates/jupyter-session-template"),
//				Location: pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"session_template_test": pulumi.String("terraform"),
//				},
//				RuntimeConfig: &dataproc.SessionTemplateRuntimeConfigArgs{
//					Properties: pulumi.StringMap{
//						"spark.dynamicAllocation.enabled": pulumi.String("false"),
//						"spark.executor.instances":        pulumi.String("2"),
//					},
//					Version:        pulumi.String("2.2"),
//					ContainerImage: pulumi.String("us-docker.pkg.dev/my-project-name/s8s-spark-test-images/s8s-spark:latest"),
//				},
//				EnvironmentConfig: &dataproc.SessionTemplateEnvironmentConfigArgs{
//					ExecutionConfig: &dataproc.SessionTemplateEnvironmentConfigExecutionConfigArgs{
//						Ttl: pulumi.String("3600s"),
//						NetworkTags: pulumi.StringArray{
//							pulumi.String("tag1"),
//						},
//						KmsKey:         pulumi.String("example-key"),
//						SubnetworkUri:  pulumi.String("default"),
//						ServiceAccount: pulumi.Sprintf("%v-compute@developer.gserviceaccount.com", project.Number),
//						StagingBucket:  bucket.Name,
//					},
//					PeripheralsConfig: &dataproc.SessionTemplateEnvironmentConfigPeripheralsConfigArgs{
//						MetastoreService: ms.Name,
//						SparkHistoryServerConfig: &dataproc.SessionTemplateEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigArgs{
//							DataprocCluster: basic.ID(),
//						},
//					},
//				},
//				JupyterSession: &dataproc.SessionTemplateJupyterSessionArgs{
//					Kernel:      pulumi.String("PYTHON"),
//					DisplayName: pulumi.String("tf python kernel"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				cryptoKeyMember1,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dataproc Session Templates Spark Connect
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewSessionTemplate(ctx, "example_session_templates_spark_connect", &dataproc.SessionTemplateArgs{
//				Name:     pulumi.String("projects/my-project-name/locations/us-central1/sessionTemplates/sc-session-template"),
//				Location: pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"session_template_test": pulumi.String("terraform"),
//				},
//				RuntimeConfig: &dataproc.SessionTemplateRuntimeConfigArgs{
//					Properties: pulumi.StringMap{
//						"spark.dynamicAllocation.enabled": pulumi.String("false"),
//						"spark.executor.instances":        pulumi.String("2"),
//					},
//				},
//				EnvironmentConfig: &dataproc.SessionTemplateEnvironmentConfigArgs{
//					ExecutionConfig: &dataproc.SessionTemplateEnvironmentConfigExecutionConfigArgs{
//						SubnetworkUri: pulumi.String("default"),
//						Ttl:           pulumi.String("3600s"),
//						NetworkTags: pulumi.StringArray{
//							pulumi.String("tag1"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SessionTemplate can be imported using any of these accepted formats:
//
// * `{{name}}`
//
// When using the `pulumi import` command, SessionTemplate can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:dataproc/sessionTemplate:SessionTemplate default {{name}}
// ```
type SessionTemplate struct {
	pulumi.CustomResourceState

	// The time when the session template was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The email address of the user who created the session template.
	Creator pulumi.StringOutput `pulumi:"creator"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Environment configuration for the session execution.
	// Structure is documented below.
	EnvironmentConfig SessionTemplateEnvironmentConfigPtrOutput `pulumi:"environmentConfig"`
	// Jupyter configuration for an interactive session.
	// Structure is documented below.
	JupyterSession SessionTemplateJupyterSessionPtrOutput `pulumi:"jupyterSession"`
	// The labels to associate with this session template.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location in which the session template will be created in.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name of the session template in the following format:
	// projects/{project}/locations/{location}/sessionTemplates/{template_id}
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Runtime configuration for the session template.
	// Structure is documented below.
	RuntimeConfig SessionTemplateRuntimeConfigPtrOutput `pulumi:"runtimeConfig"`
	// Spark connect configuration for an interactive session.
	SparkConnectSession SessionTemplateSparkConnectSessionPtrOutput `pulumi:"sparkConnectSession"`
	// The time when the session template was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewSessionTemplate registers a new resource with the given unique name, arguments, and options.
func NewSessionTemplate(ctx *pulumi.Context,
	name string, args *SessionTemplateArgs, opts ...pulumi.ResourceOption) (*SessionTemplate, error) {
	if args == nil {
		args = &SessionTemplateArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SessionTemplate
	err := ctx.RegisterResource("gcp:dataproc/sessionTemplate:SessionTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSessionTemplate gets an existing SessionTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSessionTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SessionTemplateState, opts ...pulumi.ResourceOption) (*SessionTemplate, error) {
	var resource SessionTemplate
	err := ctx.ReadResource("gcp:dataproc/sessionTemplate:SessionTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SessionTemplate resources.
type sessionTemplateState struct {
	// The time when the session template was created.
	CreateTime *string `pulumi:"createTime"`
	// The email address of the user who created the session template.
	Creator *string `pulumi:"creator"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Environment configuration for the session execution.
	// Structure is documented below.
	EnvironmentConfig *SessionTemplateEnvironmentConfig `pulumi:"environmentConfig"`
	// Jupyter configuration for an interactive session.
	// Structure is documented below.
	JupyterSession *SessionTemplateJupyterSession `pulumi:"jupyterSession"`
	// The labels to associate with this session template.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location in which the session template will be created in.
	Location *string `pulumi:"location"`
	// The resource name of the session template in the following format:
	// projects/{project}/locations/{location}/sessionTemplates/{template_id}
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Runtime configuration for the session template.
	// Structure is documented below.
	RuntimeConfig *SessionTemplateRuntimeConfig `pulumi:"runtimeConfig"`
	// Spark connect configuration for an interactive session.
	SparkConnectSession *SessionTemplateSparkConnectSession `pulumi:"sparkConnectSession"`
	// The time when the session template was updated.
	UpdateTime *string `pulumi:"updateTime"`
	// A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
	Uuid *string `pulumi:"uuid"`
}

type SessionTemplateState struct {
	// The time when the session template was created.
	CreateTime pulumi.StringPtrInput
	// The email address of the user who created the session template.
	Creator pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Environment configuration for the session execution.
	// Structure is documented below.
	EnvironmentConfig SessionTemplateEnvironmentConfigPtrInput
	// Jupyter configuration for an interactive session.
	// Structure is documented below.
	JupyterSession SessionTemplateJupyterSessionPtrInput
	// The labels to associate with this session template.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location in which the session template will be created in.
	Location pulumi.StringPtrInput
	// The resource name of the session template in the following format:
	// projects/{project}/locations/{location}/sessionTemplates/{template_id}
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Runtime configuration for the session template.
	// Structure is documented below.
	RuntimeConfig SessionTemplateRuntimeConfigPtrInput
	// Spark connect configuration for an interactive session.
	SparkConnectSession SessionTemplateSparkConnectSessionPtrInput
	// The time when the session template was updated.
	UpdateTime pulumi.StringPtrInput
	// A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
	Uuid pulumi.StringPtrInput
}

func (SessionTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionTemplateState)(nil)).Elem()
}

type sessionTemplateArgs struct {
	// Environment configuration for the session execution.
	// Structure is documented below.
	EnvironmentConfig *SessionTemplateEnvironmentConfig `pulumi:"environmentConfig"`
	// Jupyter configuration for an interactive session.
	// Structure is documented below.
	JupyterSession *SessionTemplateJupyterSession `pulumi:"jupyterSession"`
	// The labels to associate with this session template.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location in which the session template will be created in.
	Location *string `pulumi:"location"`
	// The resource name of the session template in the following format:
	// projects/{project}/locations/{location}/sessionTemplates/{template_id}
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Runtime configuration for the session template.
	// Structure is documented below.
	RuntimeConfig *SessionTemplateRuntimeConfig `pulumi:"runtimeConfig"`
	// Spark connect configuration for an interactive session.
	SparkConnectSession *SessionTemplateSparkConnectSession `pulumi:"sparkConnectSession"`
}

// The set of arguments for constructing a SessionTemplate resource.
type SessionTemplateArgs struct {
	// Environment configuration for the session execution.
	// Structure is documented below.
	EnvironmentConfig SessionTemplateEnvironmentConfigPtrInput
	// Jupyter configuration for an interactive session.
	// Structure is documented below.
	JupyterSession SessionTemplateJupyterSessionPtrInput
	// The labels to associate with this session template.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location in which the session template will be created in.
	Location pulumi.StringPtrInput
	// The resource name of the session template in the following format:
	// projects/{project}/locations/{location}/sessionTemplates/{template_id}
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Runtime configuration for the session template.
	// Structure is documented below.
	RuntimeConfig SessionTemplateRuntimeConfigPtrInput
	// Spark connect configuration for an interactive session.
	SparkConnectSession SessionTemplateSparkConnectSessionPtrInput
}

func (SessionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionTemplateArgs)(nil)).Elem()
}

type SessionTemplateInput interface {
	pulumi.Input

	ToSessionTemplateOutput() SessionTemplateOutput
	ToSessionTemplateOutputWithContext(ctx context.Context) SessionTemplateOutput
}

func (*SessionTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionTemplate)(nil)).Elem()
}

func (i *SessionTemplate) ToSessionTemplateOutput() SessionTemplateOutput {
	return i.ToSessionTemplateOutputWithContext(context.Background())
}

func (i *SessionTemplate) ToSessionTemplateOutputWithContext(ctx context.Context) SessionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionTemplateOutput)
}

// SessionTemplateArrayInput is an input type that accepts SessionTemplateArray and SessionTemplateArrayOutput values.
// You can construct a concrete instance of `SessionTemplateArrayInput` via:
//
//	SessionTemplateArray{ SessionTemplateArgs{...} }
type SessionTemplateArrayInput interface {
	pulumi.Input

	ToSessionTemplateArrayOutput() SessionTemplateArrayOutput
	ToSessionTemplateArrayOutputWithContext(context.Context) SessionTemplateArrayOutput
}

type SessionTemplateArray []SessionTemplateInput

func (SessionTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SessionTemplate)(nil)).Elem()
}

func (i SessionTemplateArray) ToSessionTemplateArrayOutput() SessionTemplateArrayOutput {
	return i.ToSessionTemplateArrayOutputWithContext(context.Background())
}

func (i SessionTemplateArray) ToSessionTemplateArrayOutputWithContext(ctx context.Context) SessionTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionTemplateArrayOutput)
}

// SessionTemplateMapInput is an input type that accepts SessionTemplateMap and SessionTemplateMapOutput values.
// You can construct a concrete instance of `SessionTemplateMapInput` via:
//
//	SessionTemplateMap{ "key": SessionTemplateArgs{...} }
type SessionTemplateMapInput interface {
	pulumi.Input

	ToSessionTemplateMapOutput() SessionTemplateMapOutput
	ToSessionTemplateMapOutputWithContext(context.Context) SessionTemplateMapOutput
}

type SessionTemplateMap map[string]SessionTemplateInput

func (SessionTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SessionTemplate)(nil)).Elem()
}

func (i SessionTemplateMap) ToSessionTemplateMapOutput() SessionTemplateMapOutput {
	return i.ToSessionTemplateMapOutputWithContext(context.Background())
}

func (i SessionTemplateMap) ToSessionTemplateMapOutputWithContext(ctx context.Context) SessionTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionTemplateMapOutput)
}

type SessionTemplateOutput struct{ *pulumi.OutputState }

func (SessionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionTemplate)(nil)).Elem()
}

func (o SessionTemplateOutput) ToSessionTemplateOutput() SessionTemplateOutput {
	return o
}

func (o SessionTemplateOutput) ToSessionTemplateOutputWithContext(ctx context.Context) SessionTemplateOutput {
	return o
}

// The time when the session template was created.
func (o SessionTemplateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionTemplate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The email address of the user who created the session template.
func (o SessionTemplateOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionTemplate) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o SessionTemplateOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SessionTemplate) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Environment configuration for the session execution.
// Structure is documented below.
func (o SessionTemplateOutput) EnvironmentConfig() SessionTemplateEnvironmentConfigPtrOutput {
	return o.ApplyT(func(v *SessionTemplate) SessionTemplateEnvironmentConfigPtrOutput { return v.EnvironmentConfig }).(SessionTemplateEnvironmentConfigPtrOutput)
}

// Jupyter configuration for an interactive session.
// Structure is documented below.
func (o SessionTemplateOutput) JupyterSession() SessionTemplateJupyterSessionPtrOutput {
	return o.ApplyT(func(v *SessionTemplate) SessionTemplateJupyterSessionPtrOutput { return v.JupyterSession }).(SessionTemplateJupyterSessionPtrOutput)
}

// The labels to associate with this session template.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o SessionTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SessionTemplate) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location in which the session template will be created in.
func (o SessionTemplateOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SessionTemplate) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name of the session template in the following format:
// projects/{project}/locations/{location}/sessionTemplates/{template_id}
//
// ***
func (o SessionTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o SessionTemplateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionTemplate) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o SessionTemplateOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SessionTemplate) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Runtime configuration for the session template.
// Structure is documented below.
func (o SessionTemplateOutput) RuntimeConfig() SessionTemplateRuntimeConfigPtrOutput {
	return o.ApplyT(func(v *SessionTemplate) SessionTemplateRuntimeConfigPtrOutput { return v.RuntimeConfig }).(SessionTemplateRuntimeConfigPtrOutput)
}

// Spark connect configuration for an interactive session.
func (o SessionTemplateOutput) SparkConnectSession() SessionTemplateSparkConnectSessionPtrOutput {
	return o.ApplyT(func(v *SessionTemplate) SessionTemplateSparkConnectSessionPtrOutput { return v.SparkConnectSession }).(SessionTemplateSparkConnectSessionPtrOutput)
}

// The time when the session template was updated.
func (o SessionTemplateOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionTemplate) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
func (o SessionTemplateOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionTemplate) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type SessionTemplateArrayOutput struct{ *pulumi.OutputState }

func (SessionTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SessionTemplate)(nil)).Elem()
}

func (o SessionTemplateArrayOutput) ToSessionTemplateArrayOutput() SessionTemplateArrayOutput {
	return o
}

func (o SessionTemplateArrayOutput) ToSessionTemplateArrayOutputWithContext(ctx context.Context) SessionTemplateArrayOutput {
	return o
}

func (o SessionTemplateArrayOutput) Index(i pulumi.IntInput) SessionTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SessionTemplate {
		return vs[0].([]*SessionTemplate)[vs[1].(int)]
	}).(SessionTemplateOutput)
}

type SessionTemplateMapOutput struct{ *pulumi.OutputState }

func (SessionTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SessionTemplate)(nil)).Elem()
}

func (o SessionTemplateMapOutput) ToSessionTemplateMapOutput() SessionTemplateMapOutput {
	return o
}

func (o SessionTemplateMapOutput) ToSessionTemplateMapOutputWithContext(ctx context.Context) SessionTemplateMapOutput {
	return o
}

func (o SessionTemplateMapOutput) MapIndex(k pulumi.StringInput) SessionTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SessionTemplate {
		return vs[0].(map[string]*SessionTemplate)[vs[1].(string)]
	}).(SessionTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SessionTemplateInput)(nil)).Elem(), &SessionTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*SessionTemplateArrayInput)(nil)).Elem(), SessionTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SessionTemplateMapInput)(nil)).Elem(), SessionTemplateMap{})
	pulumi.RegisterOutputType(SessionTemplateOutput{})
	pulumi.RegisterOutputType(SessionTemplateArrayOutput{})
	pulumi.RegisterOutputType(SessionTemplateMapOutput{})
}
