// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a job resource within a Dataproc cluster within GCE. For more information see
// [the official dataproc documentation](https://cloud.google.com/dataproc/).
// 
// !> **Note:** This resource does not support 'update' and changing any attributes will cause the resource to be recreated.
type Job struct {
	s *pulumi.ResourceState
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOpt) (*Job, error) {
	if args == nil || args.Placement == nil {
		return nil, errors.New("missing required argument 'Placement'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["forceDelete"] = nil
		inputs["hadoopConfig"] = nil
		inputs["hiveConfig"] = nil
		inputs["labels"] = nil
		inputs["pigConfig"] = nil
		inputs["placement"] = nil
		inputs["project"] = nil
		inputs["pysparkConfig"] = nil
		inputs["reference"] = nil
		inputs["region"] = nil
		inputs["scheduling"] = nil
		inputs["sparkConfig"] = nil
		inputs["sparksqlConfig"] = nil
	} else {
		inputs["forceDelete"] = args.ForceDelete
		inputs["hadoopConfig"] = args.HadoopConfig
		inputs["hiveConfig"] = args.HiveConfig
		inputs["labels"] = args.Labels
		inputs["pigConfig"] = args.PigConfig
		inputs["placement"] = args.Placement
		inputs["project"] = args.Project
		inputs["pysparkConfig"] = args.PysparkConfig
		inputs["reference"] = args.Reference
		inputs["region"] = args.Region
		inputs["scheduling"] = args.Scheduling
		inputs["sparkConfig"] = args.SparkConfig
		inputs["sparksqlConfig"] = args.SparksqlConfig
	}
	inputs["driverControlsFilesUri"] = nil
	inputs["driverOutputResourceUri"] = nil
	inputs["status"] = nil
	s, err := ctx.RegisterResource("gcp:dataproc/job:Job", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Job{s: s}, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.ID, state *JobState, opts ...pulumi.ResourceOpt) (*Job, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["driverControlsFilesUri"] = state.DriverControlsFilesUri
		inputs["driverOutputResourceUri"] = state.DriverOutputResourceUri
		inputs["forceDelete"] = state.ForceDelete
		inputs["hadoopConfig"] = state.HadoopConfig
		inputs["hiveConfig"] = state.HiveConfig
		inputs["labels"] = state.Labels
		inputs["pigConfig"] = state.PigConfig
		inputs["placement"] = state.Placement
		inputs["project"] = state.Project
		inputs["pysparkConfig"] = state.PysparkConfig
		inputs["reference"] = state.Reference
		inputs["region"] = state.Region
		inputs["scheduling"] = state.Scheduling
		inputs["sparkConfig"] = state.SparkConfig
		inputs["sparksqlConfig"] = state.SparksqlConfig
		inputs["status"] = state.Status
	}
	s, err := ctx.ReadResource("gcp:dataproc/job:Job", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Job{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Job) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Job) ID() *pulumi.IDOutput {
	return r.s.ID
}

// If present, the location of miscellaneous control files which may be used as part of job setup and handling. If not present, control files may be placed in the same location as driver_output_uri.
func (r *Job) DriverControlsFilesUri() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["driverControlsFilesUri"])
}

// A URI pointing to the location of the stdout of the job's driver program.
func (r *Job) DriverOutputResourceUri() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["driverOutputResourceUri"])
}

// By default, you can only delete inactive jobs within
// Dataproc. Setting this to true, and calling destroy, will ensure that the
// job is first cancelled before issuing the delete.
func (r *Job) ForceDelete() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["forceDelete"])
}

func (r *Job) HadoopConfig() *pulumi.Output {
	return r.s.State["hadoopConfig"]
}

func (r *Job) HiveConfig() *pulumi.Output {
	return r.s.State["hiveConfig"]
}

// The list of labels (key/value pairs) to add to the job.
func (r *Job) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *Job) PigConfig() *pulumi.Output {
	return r.s.State["pigConfig"]
}

func (r *Job) Placement() *pulumi.Output {
	return r.s.State["placement"]
}

// The project in which the `cluster` can be found and jobs
// subsequently run against. If it is not provided, the provider project is used.
func (r *Job) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *Job) PysparkConfig() *pulumi.Output {
	return r.s.State["pysparkConfig"]
}

func (r *Job) Reference() *pulumi.Output {
	return r.s.State["reference"]
}

// The Cloud Dataproc region. This essentially determines which clusters are available
// for this job to be submitted to. If not specified, defaults to `global`.
func (r *Job) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Optional. Job scheduling configuration.
func (r *Job) Scheduling() *pulumi.Output {
	return r.s.State["scheduling"]
}

func (r *Job) SparkConfig() *pulumi.Output {
	return r.s.State["sparkConfig"]
}

func (r *Job) SparksqlConfig() *pulumi.Output {
	return r.s.State["sparksqlConfig"]
}

func (r *Job) Status() *pulumi.Output {
	return r.s.State["status"]
}

// Input properties used for looking up and filtering Job resources.
type JobState struct {
	// If present, the location of miscellaneous control files which may be used as part of job setup and handling. If not present, control files may be placed in the same location as driver_output_uri.
	DriverControlsFilesUri interface{}
	// A URI pointing to the location of the stdout of the job's driver program.
	DriverOutputResourceUri interface{}
	// By default, you can only delete inactive jobs within
	// Dataproc. Setting this to true, and calling destroy, will ensure that the
	// job is first cancelled before issuing the delete.
	ForceDelete interface{}
	HadoopConfig interface{}
	HiveConfig interface{}
	// The list of labels (key/value pairs) to add to the job.
	Labels interface{}
	PigConfig interface{}
	Placement interface{}
	// The project in which the `cluster` can be found and jobs
	// subsequently run against. If it is not provided, the provider project is used.
	Project interface{}
	PysparkConfig interface{}
	Reference interface{}
	// The Cloud Dataproc region. This essentially determines which clusters are available
	// for this job to be submitted to. If not specified, defaults to `global`.
	Region interface{}
	// Optional. Job scheduling configuration.
	Scheduling interface{}
	SparkConfig interface{}
	SparksqlConfig interface{}
	Status interface{}
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// By default, you can only delete inactive jobs within
	// Dataproc. Setting this to true, and calling destroy, will ensure that the
	// job is first cancelled before issuing the delete.
	ForceDelete interface{}
	HadoopConfig interface{}
	HiveConfig interface{}
	// The list of labels (key/value pairs) to add to the job.
	Labels interface{}
	PigConfig interface{}
	Placement interface{}
	// The project in which the `cluster` can be found and jobs
	// subsequently run against. If it is not provided, the provider project is used.
	Project interface{}
	PysparkConfig interface{}
	Reference interface{}
	// The Cloud Dataproc region. This essentially determines which clusters are available
	// for this job to be submitted to. If not specified, defaults to `global`.
	Region interface{}
	// Optional. Job scheduling configuration.
	Scheduling interface{}
	SparkConfig interface{}
	SparksqlConfig interface{}
}
