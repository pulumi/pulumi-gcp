// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataproc Metastore Table. Each of these resources serves a different use case:
//
// * `dataproc.MetastoreTableIamPolicy`: Authoritative. Sets the IAM policy for the table and replaces any existing policy already attached.
// * `dataproc.MetastoreTableIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the table are preserved.
// * `dataproc.MetastoreTableIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the table are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataproc.MetastoreTableIamPolicy`: Retrieves the IAM policy for the table
//
// > **Note:** `dataproc.MetastoreTableIamPolicy` **cannot** be used in conjunction with `dataproc.MetastoreTableIamBinding` and `dataproc.MetastoreTableIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataproc.MetastoreTableIamBinding` resources **can be** used in conjunction with `dataproc.MetastoreTableIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataproc.MetastoreTableIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewMetastoreTableIamPolicy(ctx, "policy", &dataproc.MetastoreTableIamPolicyArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreTableIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreTableIamBinding(ctx, "binding", &dataproc.MetastoreTableIamBindingArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreTableIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreTableIamMember(ctx, "member", &dataproc.MetastoreTableIamMemberArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Dataproc Metastore Table
// Three different resources help you manage your IAM policy for Dataproc Metastore Table. Each of these resources serves a different use case:
//
// * `dataproc.MetastoreTableIamPolicy`: Authoritative. Sets the IAM policy for the table and replaces any existing policy already attached.
// * `dataproc.MetastoreTableIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the table are preserved.
// * `dataproc.MetastoreTableIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the table are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataproc.MetastoreTableIamPolicy`: Retrieves the IAM policy for the table
//
// > **Note:** `dataproc.MetastoreTableIamPolicy` **cannot** be used in conjunction with `dataproc.MetastoreTableIamBinding` and `dataproc.MetastoreTableIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataproc.MetastoreTableIamBinding` resources **can be** used in conjunction with `dataproc.MetastoreTableIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataproc.MetastoreTableIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewMetastoreTableIamPolicy(ctx, "policy", &dataproc.MetastoreTableIamPolicyArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreTableIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreTableIamBinding(ctx, "binding", &dataproc.MetastoreTableIamBindingArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreTableIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreTableIamMember(ctx, "member", &dataproc.MetastoreTableIamMemberArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{databaseId}}/tables/{{name}}
//
// * {{project}}/{{location}}/{{serviceId}}/{{databaseId}}/{{name}}
//
// * {{location}}/{{serviceId}}/{{databaseId}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataproc Metastore table IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreTableIamBinding:MetastoreTableIamBinding editor "projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{databaseId}}/tables/{{table}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreTableIamBinding:MetastoreTableIamBinding editor "projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{databaseId}}/tables/{{table}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreTableIamBinding:MetastoreTableIamBinding editor projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{databaseId}}/tables/{{table}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type MetastoreTableIamBinding struct {
	pulumi.CustomResourceState

	Condition  MetastoreTableIamBindingConditionPtrOutput `pulumi:"condition"`
	DatabaseId pulumi.StringOutput                        `pulumi:"databaseId"`
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringOutput `pulumi:"etag"`
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataproc.MetastoreTableIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role      pulumi.StringOutput `pulumi:"role"`
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Used to find the parent resource to bind the IAM policy to
	Table pulumi.StringOutput `pulumi:"table"`
}

// NewMetastoreTableIamBinding registers a new resource with the given unique name, arguments, and options.
func NewMetastoreTableIamBinding(ctx *pulumi.Context,
	name string, args *MetastoreTableIamBindingArgs, opts ...pulumi.ResourceOption) (*MetastoreTableIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.Table == nil {
		return nil, errors.New("invalid value for required argument 'Table'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetastoreTableIamBinding
	err := ctx.RegisterResource("gcp:dataproc/metastoreTableIamBinding:MetastoreTableIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetastoreTableIamBinding gets an existing MetastoreTableIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetastoreTableIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetastoreTableIamBindingState, opts ...pulumi.ResourceOption) (*MetastoreTableIamBinding, error) {
	var resource MetastoreTableIamBinding
	err := ctx.ReadResource("gcp:dataproc/metastoreTableIamBinding:MetastoreTableIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetastoreTableIamBinding resources.
type metastoreTableIamBindingState struct {
	Condition  *MetastoreTableIamBindingCondition `pulumi:"condition"`
	DatabaseId *string                            `pulumi:"databaseId"`
	// (Computed) The etag of the IAM policy.
	Etag     *string `pulumi:"etag"`
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataproc.MetastoreTableIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role      *string `pulumi:"role"`
	ServiceId *string `pulumi:"serviceId"`
	// Used to find the parent resource to bind the IAM policy to
	Table *string `pulumi:"table"`
}

type MetastoreTableIamBindingState struct {
	Condition  MetastoreTableIamBindingConditionPtrInput
	DatabaseId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.MetastoreTableIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role      pulumi.StringPtrInput
	ServiceId pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Table pulumi.StringPtrInput
}

func (MetastoreTableIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreTableIamBindingState)(nil)).Elem()
}

type metastoreTableIamBindingArgs struct {
	Condition  *MetastoreTableIamBindingCondition `pulumi:"condition"`
	DatabaseId string                             `pulumi:"databaseId"`
	Location   *string                            `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataproc.MetastoreTableIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role      string `pulumi:"role"`
	ServiceId string `pulumi:"serviceId"`
	// Used to find the parent resource to bind the IAM policy to
	Table string `pulumi:"table"`
}

// The set of arguments for constructing a MetastoreTableIamBinding resource.
type MetastoreTableIamBindingArgs struct {
	Condition  MetastoreTableIamBindingConditionPtrInput
	DatabaseId pulumi.StringInput
	Location   pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.MetastoreTableIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role      pulumi.StringInput
	ServiceId pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	Table pulumi.StringInput
}

func (MetastoreTableIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreTableIamBindingArgs)(nil)).Elem()
}

type MetastoreTableIamBindingInput interface {
	pulumi.Input

	ToMetastoreTableIamBindingOutput() MetastoreTableIamBindingOutput
	ToMetastoreTableIamBindingOutputWithContext(ctx context.Context) MetastoreTableIamBindingOutput
}

func (*MetastoreTableIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreTableIamBinding)(nil)).Elem()
}

func (i *MetastoreTableIamBinding) ToMetastoreTableIamBindingOutput() MetastoreTableIamBindingOutput {
	return i.ToMetastoreTableIamBindingOutputWithContext(context.Background())
}

func (i *MetastoreTableIamBinding) ToMetastoreTableIamBindingOutputWithContext(ctx context.Context) MetastoreTableIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreTableIamBindingOutput)
}

// MetastoreTableIamBindingArrayInput is an input type that accepts MetastoreTableIamBindingArray and MetastoreTableIamBindingArrayOutput values.
// You can construct a concrete instance of `MetastoreTableIamBindingArrayInput` via:
//
//	MetastoreTableIamBindingArray{ MetastoreTableIamBindingArgs{...} }
type MetastoreTableIamBindingArrayInput interface {
	pulumi.Input

	ToMetastoreTableIamBindingArrayOutput() MetastoreTableIamBindingArrayOutput
	ToMetastoreTableIamBindingArrayOutputWithContext(context.Context) MetastoreTableIamBindingArrayOutput
}

type MetastoreTableIamBindingArray []MetastoreTableIamBindingInput

func (MetastoreTableIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreTableIamBinding)(nil)).Elem()
}

func (i MetastoreTableIamBindingArray) ToMetastoreTableIamBindingArrayOutput() MetastoreTableIamBindingArrayOutput {
	return i.ToMetastoreTableIamBindingArrayOutputWithContext(context.Background())
}

func (i MetastoreTableIamBindingArray) ToMetastoreTableIamBindingArrayOutputWithContext(ctx context.Context) MetastoreTableIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreTableIamBindingArrayOutput)
}

// MetastoreTableIamBindingMapInput is an input type that accepts MetastoreTableIamBindingMap and MetastoreTableIamBindingMapOutput values.
// You can construct a concrete instance of `MetastoreTableIamBindingMapInput` via:
//
//	MetastoreTableIamBindingMap{ "key": MetastoreTableIamBindingArgs{...} }
type MetastoreTableIamBindingMapInput interface {
	pulumi.Input

	ToMetastoreTableIamBindingMapOutput() MetastoreTableIamBindingMapOutput
	ToMetastoreTableIamBindingMapOutputWithContext(context.Context) MetastoreTableIamBindingMapOutput
}

type MetastoreTableIamBindingMap map[string]MetastoreTableIamBindingInput

func (MetastoreTableIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreTableIamBinding)(nil)).Elem()
}

func (i MetastoreTableIamBindingMap) ToMetastoreTableIamBindingMapOutput() MetastoreTableIamBindingMapOutput {
	return i.ToMetastoreTableIamBindingMapOutputWithContext(context.Background())
}

func (i MetastoreTableIamBindingMap) ToMetastoreTableIamBindingMapOutputWithContext(ctx context.Context) MetastoreTableIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreTableIamBindingMapOutput)
}

type MetastoreTableIamBindingOutput struct{ *pulumi.OutputState }

func (MetastoreTableIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreTableIamBinding)(nil)).Elem()
}

func (o MetastoreTableIamBindingOutput) ToMetastoreTableIamBindingOutput() MetastoreTableIamBindingOutput {
	return o
}

func (o MetastoreTableIamBindingOutput) ToMetastoreTableIamBindingOutputWithContext(ctx context.Context) MetastoreTableIamBindingOutput {
	return o
}

func (o MetastoreTableIamBindingOutput) Condition() MetastoreTableIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *MetastoreTableIamBinding) MetastoreTableIamBindingConditionPtrOutput { return v.Condition }).(MetastoreTableIamBindingConditionPtrOutput)
}

func (o MetastoreTableIamBindingOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamBinding) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o MetastoreTableIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o MetastoreTableIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o MetastoreTableIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetastoreTableIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o MetastoreTableIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataproc.MetastoreTableIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o MetastoreTableIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o MetastoreTableIamBindingOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamBinding) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o MetastoreTableIamBindingOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamBinding) pulumi.StringOutput { return v.Table }).(pulumi.StringOutput)
}

type MetastoreTableIamBindingArrayOutput struct{ *pulumi.OutputState }

func (MetastoreTableIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreTableIamBinding)(nil)).Elem()
}

func (o MetastoreTableIamBindingArrayOutput) ToMetastoreTableIamBindingArrayOutput() MetastoreTableIamBindingArrayOutput {
	return o
}

func (o MetastoreTableIamBindingArrayOutput) ToMetastoreTableIamBindingArrayOutputWithContext(ctx context.Context) MetastoreTableIamBindingArrayOutput {
	return o
}

func (o MetastoreTableIamBindingArrayOutput) Index(i pulumi.IntInput) MetastoreTableIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetastoreTableIamBinding {
		return vs[0].([]*MetastoreTableIamBinding)[vs[1].(int)]
	}).(MetastoreTableIamBindingOutput)
}

type MetastoreTableIamBindingMapOutput struct{ *pulumi.OutputState }

func (MetastoreTableIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreTableIamBinding)(nil)).Elem()
}

func (o MetastoreTableIamBindingMapOutput) ToMetastoreTableIamBindingMapOutput() MetastoreTableIamBindingMapOutput {
	return o
}

func (o MetastoreTableIamBindingMapOutput) ToMetastoreTableIamBindingMapOutputWithContext(ctx context.Context) MetastoreTableIamBindingMapOutput {
	return o
}

func (o MetastoreTableIamBindingMapOutput) MapIndex(k pulumi.StringInput) MetastoreTableIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetastoreTableIamBinding {
		return vs[0].(map[string]*MetastoreTableIamBinding)[vs[1].(string)]
	}).(MetastoreTableIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreTableIamBindingInput)(nil)).Elem(), &MetastoreTableIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreTableIamBindingArrayInput)(nil)).Elem(), MetastoreTableIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreTableIamBindingMapInput)(nil)).Elem(), MetastoreTableIamBindingMap{})
	pulumi.RegisterOutputType(MetastoreTableIamBindingOutput{})
	pulumi.RegisterOutputType(MetastoreTableIamBindingArrayOutput{})
	pulumi.RegisterOutputType(MetastoreTableIamBindingMapOutput{})
}
