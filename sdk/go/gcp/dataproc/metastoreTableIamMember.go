// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataproc Metastore Table. Each of these resources serves a different use case:
//
// * `dataproc.MetastoreTableIamPolicy`: Authoritative. Sets the IAM policy for the table and replaces any existing policy already attached.
// * `dataproc.MetastoreTableIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the table are preserved.
// * `dataproc.MetastoreTableIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the table are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataproc.MetastoreTableIamPolicy`: Retrieves the IAM policy for the table
//
// > **Note:** `dataproc.MetastoreTableIamPolicy` **cannot** be used in conjunction with `dataproc.MetastoreTableIamBinding` and `dataproc.MetastoreTableIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataproc.MetastoreTableIamBinding` resources **can be** used in conjunction with `dataproc.MetastoreTableIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataproc.MetastoreTableIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewMetastoreTableIamPolicy(ctx, "policy", &dataproc.MetastoreTableIamPolicyArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreTableIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreTableIamBinding(ctx, "binding", &dataproc.MetastoreTableIamBindingArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreTableIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreTableIamMember(ctx, "member", &dataproc.MetastoreTableIamMemberArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Dataproc Metastore Table
// Three different resources help you manage your IAM policy for Dataproc Metastore Table. Each of these resources serves a different use case:
//
// * `dataproc.MetastoreTableIamPolicy`: Authoritative. Sets the IAM policy for the table and replaces any existing policy already attached.
// * `dataproc.MetastoreTableIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the table are preserved.
// * `dataproc.MetastoreTableIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the table are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataproc.MetastoreTableIamPolicy`: Retrieves the IAM policy for the table
//
// > **Note:** `dataproc.MetastoreTableIamPolicy` **cannot** be used in conjunction with `dataproc.MetastoreTableIamBinding` and `dataproc.MetastoreTableIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataproc.MetastoreTableIamBinding` resources **can be** used in conjunction with `dataproc.MetastoreTableIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataproc.MetastoreTableIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewMetastoreTableIamPolicy(ctx, "policy", &dataproc.MetastoreTableIamPolicyArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreTableIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreTableIamBinding(ctx, "binding", &dataproc.MetastoreTableIamBindingArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreTableIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreTableIamMember(ctx, "member", &dataproc.MetastoreTableIamMemberArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{databaseId}}/tables/{{name}}
//
// * {{project}}/{{location}}/{{serviceId}}/{{databaseId}}/{{name}}
//
// * {{location}}/{{serviceId}}/{{databaseId}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataproc Metastore table IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreTableIamMember:MetastoreTableIamMember editor "projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{databaseId}}/tables/{{table}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreTableIamMember:MetastoreTableIamMember editor "projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{databaseId}}/tables/{{table}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreTableIamMember:MetastoreTableIamMember editor projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{databaseId}}/tables/{{table}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type MetastoreTableIamMember struct {
	pulumi.CustomResourceState

	Condition MetastoreTableIamMemberConditionPtrOutput `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataproc.MetastoreTableIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Used to find the parent resource to bind the IAM policy to
	Table pulumi.StringOutput `pulumi:"table"`
}

// NewMetastoreTableIamMember registers a new resource with the given unique name, arguments, and options.
func NewMetastoreTableIamMember(ctx *pulumi.Context,
	name string, args *MetastoreTableIamMemberArgs, opts ...pulumi.ResourceOption) (*MetastoreTableIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.Table == nil {
		return nil, errors.New("invalid value for required argument 'Table'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetastoreTableIamMember
	err := ctx.RegisterResource("gcp:dataproc/metastoreTableIamMember:MetastoreTableIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetastoreTableIamMember gets an existing MetastoreTableIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetastoreTableIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetastoreTableIamMemberState, opts ...pulumi.ResourceOption) (*MetastoreTableIamMember, error) {
	var resource MetastoreTableIamMember
	err := ctx.ReadResource("gcp:dataproc/metastoreTableIamMember:MetastoreTableIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetastoreTableIamMember resources.
type metastoreTableIamMemberState struct {
	Condition *MetastoreTableIamMemberCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	DatabaseId *string `pulumi:"databaseId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataproc.MetastoreTableIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	ServiceId *string `pulumi:"serviceId"`
	// Used to find the parent resource to bind the IAM policy to
	Table *string `pulumi:"table"`
}

type MetastoreTableIamMemberState struct {
	Condition MetastoreTableIamMemberConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	DatabaseId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.MetastoreTableIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	ServiceId pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Table pulumi.StringPtrInput
}

func (MetastoreTableIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreTableIamMemberState)(nil)).Elem()
}

type metastoreTableIamMemberArgs struct {
	Condition *MetastoreTableIamMemberCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	DatabaseId string `pulumi:"databaseId"`
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataproc.MetastoreTableIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	ServiceId string `pulumi:"serviceId"`
	// Used to find the parent resource to bind the IAM policy to
	Table string `pulumi:"table"`
}

// The set of arguments for constructing a MetastoreTableIamMember resource.
type MetastoreTableIamMemberArgs struct {
	Condition MetastoreTableIamMemberConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	DatabaseId pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.MetastoreTableIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	ServiceId pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	Table pulumi.StringInput
}

func (MetastoreTableIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreTableIamMemberArgs)(nil)).Elem()
}

type MetastoreTableIamMemberInput interface {
	pulumi.Input

	ToMetastoreTableIamMemberOutput() MetastoreTableIamMemberOutput
	ToMetastoreTableIamMemberOutputWithContext(ctx context.Context) MetastoreTableIamMemberOutput
}

func (*MetastoreTableIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreTableIamMember)(nil)).Elem()
}

func (i *MetastoreTableIamMember) ToMetastoreTableIamMemberOutput() MetastoreTableIamMemberOutput {
	return i.ToMetastoreTableIamMemberOutputWithContext(context.Background())
}

func (i *MetastoreTableIamMember) ToMetastoreTableIamMemberOutputWithContext(ctx context.Context) MetastoreTableIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreTableIamMemberOutput)
}

// MetastoreTableIamMemberArrayInput is an input type that accepts MetastoreTableIamMemberArray and MetastoreTableIamMemberArrayOutput values.
// You can construct a concrete instance of `MetastoreTableIamMemberArrayInput` via:
//
//	MetastoreTableIamMemberArray{ MetastoreTableIamMemberArgs{...} }
type MetastoreTableIamMemberArrayInput interface {
	pulumi.Input

	ToMetastoreTableIamMemberArrayOutput() MetastoreTableIamMemberArrayOutput
	ToMetastoreTableIamMemberArrayOutputWithContext(context.Context) MetastoreTableIamMemberArrayOutput
}

type MetastoreTableIamMemberArray []MetastoreTableIamMemberInput

func (MetastoreTableIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreTableIamMember)(nil)).Elem()
}

func (i MetastoreTableIamMemberArray) ToMetastoreTableIamMemberArrayOutput() MetastoreTableIamMemberArrayOutput {
	return i.ToMetastoreTableIamMemberArrayOutputWithContext(context.Background())
}

func (i MetastoreTableIamMemberArray) ToMetastoreTableIamMemberArrayOutputWithContext(ctx context.Context) MetastoreTableIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreTableIamMemberArrayOutput)
}

// MetastoreTableIamMemberMapInput is an input type that accepts MetastoreTableIamMemberMap and MetastoreTableIamMemberMapOutput values.
// You can construct a concrete instance of `MetastoreTableIamMemberMapInput` via:
//
//	MetastoreTableIamMemberMap{ "key": MetastoreTableIamMemberArgs{...} }
type MetastoreTableIamMemberMapInput interface {
	pulumi.Input

	ToMetastoreTableIamMemberMapOutput() MetastoreTableIamMemberMapOutput
	ToMetastoreTableIamMemberMapOutputWithContext(context.Context) MetastoreTableIamMemberMapOutput
}

type MetastoreTableIamMemberMap map[string]MetastoreTableIamMemberInput

func (MetastoreTableIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreTableIamMember)(nil)).Elem()
}

func (i MetastoreTableIamMemberMap) ToMetastoreTableIamMemberMapOutput() MetastoreTableIamMemberMapOutput {
	return i.ToMetastoreTableIamMemberMapOutputWithContext(context.Background())
}

func (i MetastoreTableIamMemberMap) ToMetastoreTableIamMemberMapOutputWithContext(ctx context.Context) MetastoreTableIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreTableIamMemberMapOutput)
}

type MetastoreTableIamMemberOutput struct{ *pulumi.OutputState }

func (MetastoreTableIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreTableIamMember)(nil)).Elem()
}

func (o MetastoreTableIamMemberOutput) ToMetastoreTableIamMemberOutput() MetastoreTableIamMemberOutput {
	return o
}

func (o MetastoreTableIamMemberOutput) ToMetastoreTableIamMemberOutputWithContext(ctx context.Context) MetastoreTableIamMemberOutput {
	return o
}

func (o MetastoreTableIamMemberOutput) Condition() MetastoreTableIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *MetastoreTableIamMember) MetastoreTableIamMemberConditionPtrOutput { return v.Condition }).(MetastoreTableIamMemberConditionPtrOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o MetastoreTableIamMemberOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamMember) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o MetastoreTableIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o MetastoreTableIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o MetastoreTableIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o MetastoreTableIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataproc.MetastoreTableIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o MetastoreTableIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o MetastoreTableIamMemberOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamMember) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o MetastoreTableIamMemberOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamMember) pulumi.StringOutput { return v.Table }).(pulumi.StringOutput)
}

type MetastoreTableIamMemberArrayOutput struct{ *pulumi.OutputState }

func (MetastoreTableIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreTableIamMember)(nil)).Elem()
}

func (o MetastoreTableIamMemberArrayOutput) ToMetastoreTableIamMemberArrayOutput() MetastoreTableIamMemberArrayOutput {
	return o
}

func (o MetastoreTableIamMemberArrayOutput) ToMetastoreTableIamMemberArrayOutputWithContext(ctx context.Context) MetastoreTableIamMemberArrayOutput {
	return o
}

func (o MetastoreTableIamMemberArrayOutput) Index(i pulumi.IntInput) MetastoreTableIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetastoreTableIamMember {
		return vs[0].([]*MetastoreTableIamMember)[vs[1].(int)]
	}).(MetastoreTableIamMemberOutput)
}

type MetastoreTableIamMemberMapOutput struct{ *pulumi.OutputState }

func (MetastoreTableIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreTableIamMember)(nil)).Elem()
}

func (o MetastoreTableIamMemberMapOutput) ToMetastoreTableIamMemberMapOutput() MetastoreTableIamMemberMapOutput {
	return o
}

func (o MetastoreTableIamMemberMapOutput) ToMetastoreTableIamMemberMapOutputWithContext(ctx context.Context) MetastoreTableIamMemberMapOutput {
	return o
}

func (o MetastoreTableIamMemberMapOutput) MapIndex(k pulumi.StringInput) MetastoreTableIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetastoreTableIamMember {
		return vs[0].(map[string]*MetastoreTableIamMember)[vs[1].(string)]
	}).(MetastoreTableIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreTableIamMemberInput)(nil)).Elem(), &MetastoreTableIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreTableIamMemberArrayInput)(nil)).Elem(), MetastoreTableIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreTableIamMemberMapInput)(nil)).Elem(), MetastoreTableIamMemberMap{})
	pulumi.RegisterOutputType(MetastoreTableIamMemberOutput{})
	pulumi.RegisterOutputType(MetastoreTableIamMemberArrayOutput{})
	pulumi.RegisterOutputType(MetastoreTableIamMemberMapOutput{})
}
