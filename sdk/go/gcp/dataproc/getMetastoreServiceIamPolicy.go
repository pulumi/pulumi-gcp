// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieves the current IAM policy data for service
func LookupMetastoreServiceIamPolicy(ctx *pulumi.Context, args *LookupMetastoreServiceIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupMetastoreServiceIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMetastoreServiceIamPolicyResult
	err := ctx.Invoke("gcp:dataproc/getMetastoreServiceIamPolicy:getMetastoreServiceIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMetastoreServiceIamPolicy.
type LookupMetastoreServiceIamPolicyArgs struct {
	// The location where the metastore service should reside.
	// The default value is `global`.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project   *string `pulumi:"project"`
	ServiceId string  `pulumi:"serviceId"`
}

// A collection of values returned by getMetastoreServiceIamPolicy.
type LookupMetastoreServiceIamPolicyResult struct {
	// (Computed) The etag of the IAM policy.
	Etag string `pulumi:"etag"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// (Required only by `dataproc.MetastoreServiceIamPolicy`) The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	Project    string `pulumi:"project"`
	ServiceId  string `pulumi:"serviceId"`
}

func LookupMetastoreServiceIamPolicyOutput(ctx *pulumi.Context, args LookupMetastoreServiceIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupMetastoreServiceIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMetastoreServiceIamPolicyResult, error) {
			args := v.(LookupMetastoreServiceIamPolicyArgs)
			r, err := LookupMetastoreServiceIamPolicy(ctx, &args, opts...)
			var s LookupMetastoreServiceIamPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMetastoreServiceIamPolicyResultOutput)
}

// A collection of arguments for invoking getMetastoreServiceIamPolicy.
type LookupMetastoreServiceIamPolicyOutputArgs struct {
	// The location where the metastore service should reside.
	// The default value is `global`.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project   pulumi.StringPtrInput `pulumi:"project"`
	ServiceId pulumi.StringInput    `pulumi:"serviceId"`
}

func (LookupMetastoreServiceIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetastoreServiceIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getMetastoreServiceIamPolicy.
type LookupMetastoreServiceIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupMetastoreServiceIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetastoreServiceIamPolicyResult)(nil)).Elem()
}

func (o LookupMetastoreServiceIamPolicyResultOutput) ToLookupMetastoreServiceIamPolicyResultOutput() LookupMetastoreServiceIamPolicyResultOutput {
	return o
}

func (o LookupMetastoreServiceIamPolicyResultOutput) ToLookupMetastoreServiceIamPolicyResultOutputWithContext(ctx context.Context) LookupMetastoreServiceIamPolicyResultOutput {
	return o
}

func (o LookupMetastoreServiceIamPolicyResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupMetastoreServiceIamPolicyResult] {
	return pulumix.Output[LookupMetastoreServiceIamPolicyResult]{
		OutputState: o.OutputState,
	}
}

// (Computed) The etag of the IAM policy.
func (o LookupMetastoreServiceIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreServiceIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMetastoreServiceIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreServiceIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMetastoreServiceIamPolicyResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreServiceIamPolicyResult) string { return v.Location }).(pulumi.StringOutput)
}

// (Required only by `dataproc.MetastoreServiceIamPolicy`) The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o LookupMetastoreServiceIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreServiceIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupMetastoreServiceIamPolicyResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreServiceIamPolicyResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupMetastoreServiceIamPolicyResultOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreServiceIamPolicyResult) string { return v.ServiceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMetastoreServiceIamPolicyResultOutput{})
}
