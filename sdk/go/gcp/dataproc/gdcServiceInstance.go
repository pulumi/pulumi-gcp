// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A service instance is an instance of the Dataproc operator running on a GDC cluster.
//
// To get more information about ServiceInstance, see:
//
// * [API documentation](https://cloud.google.com/dataproc-gdc/docs/reference/rest/v1/projects.locations.serviceInstances)
// * How-to Guides
//   - [Dataproc Intro](https://cloud.google.com/dataproc/)
//
// ## Example Usage
//
// ### Dataprocgdc Serviceinstance
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewGdcServiceInstance(ctx, "service-instance", &dataproc.GdcServiceInstanceArgs{
//				ServiceInstanceId: pulumi.String("tf-e2e-service-instance"),
//				Project:           pulumi.String("my-project"),
//				Location:          pulumi.String("us-west2"),
//				GdceCluster: &dataproc.GdcServiceInstanceGdceClusterArgs{
//					GdceCluster: pulumi.String("projects/gdce-cluster-monitoring/locations/us-west2/clusters/gdce-prism-prober-ord106"),
//				},
//				DisplayName: pulumi.String("A service instance"),
//				Labels: pulumi.StringMap{
//					"test-label": pulumi.String("label-value"),
//				},
//				ServiceAccount: pulumi.String("dataprocgdc-cep-workflows@gdce-cluster-monitoring.iam.gserviceaccount.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ServiceInstance can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/serviceInstances/{{service_instance_id}}`
//
// * `{{project}}/{{location}}/{{service_instance_id}}`
//
// * `{{location}}/{{service_instance_id}}`
//
// When using the `pulumi import` command, ServiceInstance can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:dataproc/gdcServiceInstance:GdcServiceInstance default projects/{{project}}/locations/{{location}}/serviceInstances/{{service_instance_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataproc/gdcServiceInstance:GdcServiceInstance default {{project}}/{{location}}/{{service_instance_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataproc/gdcServiceInstance:GdcServiceInstance default {{location}}/{{service_instance_id}}
// ```
type GdcServiceInstance struct {
	pulumi.CustomResourceState

	// The timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-provided human-readable name to be used in user interfaces.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Effective service account associated with ServiceInstance. This will be the serviceAccount if specified. Otherwise, it will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings applied.
	EffectiveServiceAccount pulumi.StringOutput `pulumi:"effectiveServiceAccount"`
	// Gdce cluster information.
	// Structure is documented below.
	GdceCluster GdcServiceInstanceGdceClusterPtrOutput `pulumi:"gdceCluster"`
	// The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The name of the service instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Whether the service instance is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The intended state to which the service instance is reconciling. Possible values:
	// * `CREATING`
	// * `ACTIVE`
	// * `DISCONNECTED`
	// * `DELETING`
	// * `STOPPING`
	// * `STOPPED`
	// * `STARTING`
	// * `UPDATING`
	// * `FAILED`
	RequestedState pulumi.StringOutput `pulumi:"requestedState"`
	// Requested service account to associate with ServiceInstance.
	ServiceAccount pulumi.StringPtrOutput `pulumi:"serviceAccount"`
	// Id of the service instance.
	//
	// ***
	ServiceInstanceId pulumi.StringOutput `pulumi:"serviceInstanceId"`
	// Spark-specific service instance configuration.
	SparkServiceInstanceConfig GdcServiceInstanceSparkServiceInstanceConfigPtrOutput `pulumi:"sparkServiceInstanceConfig"`
	// The current state. Possible values:
	// * `CREATING`
	// * `ACTIVE`
	// * `DISCONNECTED`
	// * `DELETING`
	// * `STOPPING`
	// * `STOPPED`
	// * `STARTING`
	// * `UPDATING`
	// * `FAILED`
	State pulumi.StringOutput `pulumi:"state"`
	// A message explaining the current state.
	StateMessage pulumi.StringOutput `pulumi:"stateMessage"`
	// System generated unique identifier for this service instance, formatted as UUID4.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The timestamp when the resource was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGdcServiceInstance registers a new resource with the given unique name, arguments, and options.
func NewGdcServiceInstance(ctx *pulumi.Context,
	name string, args *GdcServiceInstanceArgs, opts ...pulumi.ResourceOption) (*GdcServiceInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ServiceInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceInstanceId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GdcServiceInstance
	err := ctx.RegisterResource("gcp:dataproc/gdcServiceInstance:GdcServiceInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGdcServiceInstance gets an existing GdcServiceInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGdcServiceInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GdcServiceInstanceState, opts ...pulumi.ResourceOption) (*GdcServiceInstance, error) {
	var resource GdcServiceInstance
	err := ctx.ReadResource("gcp:dataproc/gdcServiceInstance:GdcServiceInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GdcServiceInstance resources.
type gdcServiceInstanceState struct {
	// The timestamp when the resource was created.
	CreateTime *string `pulumi:"createTime"`
	// User-provided human-readable name to be used in user interfaces.
	DisplayName *string `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Effective service account associated with ServiceInstance. This will be the serviceAccount if specified. Otherwise, it will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings applied.
	EffectiveServiceAccount *string `pulumi:"effectiveServiceAccount"`
	// Gdce cluster information.
	// Structure is documented below.
	GdceCluster *GdcServiceInstanceGdceCluster `pulumi:"gdceCluster"`
	// The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location of the resource.
	Location *string `pulumi:"location"`
	// Identifier. The name of the service instance.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Whether the service instance is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.
	Reconciling *bool `pulumi:"reconciling"`
	// The intended state to which the service instance is reconciling. Possible values:
	// * `CREATING`
	// * `ACTIVE`
	// * `DISCONNECTED`
	// * `DELETING`
	// * `STOPPING`
	// * `STOPPED`
	// * `STARTING`
	// * `UPDATING`
	// * `FAILED`
	RequestedState *string `pulumi:"requestedState"`
	// Requested service account to associate with ServiceInstance.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Id of the service instance.
	//
	// ***
	ServiceInstanceId *string `pulumi:"serviceInstanceId"`
	// Spark-specific service instance configuration.
	SparkServiceInstanceConfig *GdcServiceInstanceSparkServiceInstanceConfig `pulumi:"sparkServiceInstanceConfig"`
	// The current state. Possible values:
	// * `CREATING`
	// * `ACTIVE`
	// * `DISCONNECTED`
	// * `DELETING`
	// * `STOPPING`
	// * `STOPPED`
	// * `STARTING`
	// * `UPDATING`
	// * `FAILED`
	State *string `pulumi:"state"`
	// A message explaining the current state.
	StateMessage *string `pulumi:"stateMessage"`
	// System generated unique identifier for this service instance, formatted as UUID4.
	Uid *string `pulumi:"uid"`
	// The timestamp when the resource was most recently updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type GdcServiceInstanceState struct {
	// The timestamp when the resource was created.
	CreateTime pulumi.StringPtrInput
	// User-provided human-readable name to be used in user interfaces.
	DisplayName pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Effective service account associated with ServiceInstance. This will be the serviceAccount if specified. Otherwise, it will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings applied.
	EffectiveServiceAccount pulumi.StringPtrInput
	// Gdce cluster information.
	// Structure is documented below.
	GdceCluster GdcServiceInstanceGdceClusterPtrInput
	// The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location of the resource.
	Location pulumi.StringPtrInput
	// Identifier. The name of the service instance.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Whether the service instance is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.
	Reconciling pulumi.BoolPtrInput
	// The intended state to which the service instance is reconciling. Possible values:
	// * `CREATING`
	// * `ACTIVE`
	// * `DISCONNECTED`
	// * `DELETING`
	// * `STOPPING`
	// * `STOPPED`
	// * `STARTING`
	// * `UPDATING`
	// * `FAILED`
	RequestedState pulumi.StringPtrInput
	// Requested service account to associate with ServiceInstance.
	ServiceAccount pulumi.StringPtrInput
	// Id of the service instance.
	//
	// ***
	ServiceInstanceId pulumi.StringPtrInput
	// Spark-specific service instance configuration.
	SparkServiceInstanceConfig GdcServiceInstanceSparkServiceInstanceConfigPtrInput
	// The current state. Possible values:
	// * `CREATING`
	// * `ACTIVE`
	// * `DISCONNECTED`
	// * `DELETING`
	// * `STOPPING`
	// * `STOPPED`
	// * `STARTING`
	// * `UPDATING`
	// * `FAILED`
	State pulumi.StringPtrInput
	// A message explaining the current state.
	StateMessage pulumi.StringPtrInput
	// System generated unique identifier for this service instance, formatted as UUID4.
	Uid pulumi.StringPtrInput
	// The timestamp when the resource was most recently updated.
	UpdateTime pulumi.StringPtrInput
}

func (GdcServiceInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*gdcServiceInstanceState)(nil)).Elem()
}

type gdcServiceInstanceArgs struct {
	// User-provided human-readable name to be used in user interfaces.
	DisplayName *string `pulumi:"displayName"`
	// Gdce cluster information.
	// Structure is documented below.
	GdceCluster *GdcServiceInstanceGdceCluster `pulumi:"gdceCluster"`
	// The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location of the resource.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Requested service account to associate with ServiceInstance.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Id of the service instance.
	//
	// ***
	ServiceInstanceId string `pulumi:"serviceInstanceId"`
	// Spark-specific service instance configuration.
	SparkServiceInstanceConfig *GdcServiceInstanceSparkServiceInstanceConfig `pulumi:"sparkServiceInstanceConfig"`
}

// The set of arguments for constructing a GdcServiceInstance resource.
type GdcServiceInstanceArgs struct {
	// User-provided human-readable name to be used in user interfaces.
	DisplayName pulumi.StringPtrInput
	// Gdce cluster information.
	// Structure is documented below.
	GdceCluster GdcServiceInstanceGdceClusterPtrInput
	// The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location of the resource.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Requested service account to associate with ServiceInstance.
	ServiceAccount pulumi.StringPtrInput
	// Id of the service instance.
	//
	// ***
	ServiceInstanceId pulumi.StringInput
	// Spark-specific service instance configuration.
	SparkServiceInstanceConfig GdcServiceInstanceSparkServiceInstanceConfigPtrInput
}

func (GdcServiceInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gdcServiceInstanceArgs)(nil)).Elem()
}

type GdcServiceInstanceInput interface {
	pulumi.Input

	ToGdcServiceInstanceOutput() GdcServiceInstanceOutput
	ToGdcServiceInstanceOutputWithContext(ctx context.Context) GdcServiceInstanceOutput
}

func (*GdcServiceInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**GdcServiceInstance)(nil)).Elem()
}

func (i *GdcServiceInstance) ToGdcServiceInstanceOutput() GdcServiceInstanceOutput {
	return i.ToGdcServiceInstanceOutputWithContext(context.Background())
}

func (i *GdcServiceInstance) ToGdcServiceInstanceOutputWithContext(ctx context.Context) GdcServiceInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GdcServiceInstanceOutput)
}

// GdcServiceInstanceArrayInput is an input type that accepts GdcServiceInstanceArray and GdcServiceInstanceArrayOutput values.
// You can construct a concrete instance of `GdcServiceInstanceArrayInput` via:
//
//	GdcServiceInstanceArray{ GdcServiceInstanceArgs{...} }
type GdcServiceInstanceArrayInput interface {
	pulumi.Input

	ToGdcServiceInstanceArrayOutput() GdcServiceInstanceArrayOutput
	ToGdcServiceInstanceArrayOutputWithContext(context.Context) GdcServiceInstanceArrayOutput
}

type GdcServiceInstanceArray []GdcServiceInstanceInput

func (GdcServiceInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GdcServiceInstance)(nil)).Elem()
}

func (i GdcServiceInstanceArray) ToGdcServiceInstanceArrayOutput() GdcServiceInstanceArrayOutput {
	return i.ToGdcServiceInstanceArrayOutputWithContext(context.Background())
}

func (i GdcServiceInstanceArray) ToGdcServiceInstanceArrayOutputWithContext(ctx context.Context) GdcServiceInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GdcServiceInstanceArrayOutput)
}

// GdcServiceInstanceMapInput is an input type that accepts GdcServiceInstanceMap and GdcServiceInstanceMapOutput values.
// You can construct a concrete instance of `GdcServiceInstanceMapInput` via:
//
//	GdcServiceInstanceMap{ "key": GdcServiceInstanceArgs{...} }
type GdcServiceInstanceMapInput interface {
	pulumi.Input

	ToGdcServiceInstanceMapOutput() GdcServiceInstanceMapOutput
	ToGdcServiceInstanceMapOutputWithContext(context.Context) GdcServiceInstanceMapOutput
}

type GdcServiceInstanceMap map[string]GdcServiceInstanceInput

func (GdcServiceInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GdcServiceInstance)(nil)).Elem()
}

func (i GdcServiceInstanceMap) ToGdcServiceInstanceMapOutput() GdcServiceInstanceMapOutput {
	return i.ToGdcServiceInstanceMapOutputWithContext(context.Background())
}

func (i GdcServiceInstanceMap) ToGdcServiceInstanceMapOutputWithContext(ctx context.Context) GdcServiceInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GdcServiceInstanceMapOutput)
}

type GdcServiceInstanceOutput struct{ *pulumi.OutputState }

func (GdcServiceInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GdcServiceInstance)(nil)).Elem()
}

func (o GdcServiceInstanceOutput) ToGdcServiceInstanceOutput() GdcServiceInstanceOutput {
	return o
}

func (o GdcServiceInstanceOutput) ToGdcServiceInstanceOutputWithContext(ctx context.Context) GdcServiceInstanceOutput {
	return o
}

// The timestamp when the resource was created.
func (o GdcServiceInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User-provided human-readable name to be used in user interfaces.
func (o GdcServiceInstanceOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o GdcServiceInstanceOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Effective service account associated with ServiceInstance. This will be the serviceAccount if specified. Otherwise, it will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings applied.
func (o GdcServiceInstanceOutput) EffectiveServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringOutput { return v.EffectiveServiceAccount }).(pulumi.StringOutput)
}

// Gdce cluster information.
// Structure is documented below.
func (o GdcServiceInstanceOutput) GdceCluster() GdcServiceInstanceGdceClusterPtrOutput {
	return o.ApplyT(func(v *GdcServiceInstance) GdcServiceInstanceGdceClusterPtrOutput { return v.GdceCluster }).(GdcServiceInstanceGdceClusterPtrOutput)
}

// The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o GdcServiceInstanceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Location of the resource.
func (o GdcServiceInstanceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The name of the service instance.
func (o GdcServiceInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o GdcServiceInstanceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o GdcServiceInstanceOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Whether the service instance is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.
func (o GdcServiceInstanceOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The intended state to which the service instance is reconciling. Possible values:
// * `CREATING`
// * `ACTIVE`
// * `DISCONNECTED`
// * `DELETING`
// * `STOPPING`
// * `STOPPED`
// * `STARTING`
// * `UPDATING`
// * `FAILED`
func (o GdcServiceInstanceOutput) RequestedState() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringOutput { return v.RequestedState }).(pulumi.StringOutput)
}

// Requested service account to associate with ServiceInstance.
func (o GdcServiceInstanceOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringPtrOutput { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Id of the service instance.
//
// ***
func (o GdcServiceInstanceOutput) ServiceInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringOutput { return v.ServiceInstanceId }).(pulumi.StringOutput)
}

// Spark-specific service instance configuration.
func (o GdcServiceInstanceOutput) SparkServiceInstanceConfig() GdcServiceInstanceSparkServiceInstanceConfigPtrOutput {
	return o.ApplyT(func(v *GdcServiceInstance) GdcServiceInstanceSparkServiceInstanceConfigPtrOutput {
		return v.SparkServiceInstanceConfig
	}).(GdcServiceInstanceSparkServiceInstanceConfigPtrOutput)
}

// The current state. Possible values:
// * `CREATING`
// * `ACTIVE`
// * `DISCONNECTED`
// * `DELETING`
// * `STOPPING`
// * `STOPPED`
// * `STARTING`
// * `UPDATING`
// * `FAILED`
func (o GdcServiceInstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A message explaining the current state.
func (o GdcServiceInstanceOutput) StateMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringOutput { return v.StateMessage }).(pulumi.StringOutput)
}

// System generated unique identifier for this service instance, formatted as UUID4.
func (o GdcServiceInstanceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The timestamp when the resource was most recently updated.
func (o GdcServiceInstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GdcServiceInstance) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type GdcServiceInstanceArrayOutput struct{ *pulumi.OutputState }

func (GdcServiceInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GdcServiceInstance)(nil)).Elem()
}

func (o GdcServiceInstanceArrayOutput) ToGdcServiceInstanceArrayOutput() GdcServiceInstanceArrayOutput {
	return o
}

func (o GdcServiceInstanceArrayOutput) ToGdcServiceInstanceArrayOutputWithContext(ctx context.Context) GdcServiceInstanceArrayOutput {
	return o
}

func (o GdcServiceInstanceArrayOutput) Index(i pulumi.IntInput) GdcServiceInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GdcServiceInstance {
		return vs[0].([]*GdcServiceInstance)[vs[1].(int)]
	}).(GdcServiceInstanceOutput)
}

type GdcServiceInstanceMapOutput struct{ *pulumi.OutputState }

func (GdcServiceInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GdcServiceInstance)(nil)).Elem()
}

func (o GdcServiceInstanceMapOutput) ToGdcServiceInstanceMapOutput() GdcServiceInstanceMapOutput {
	return o
}

func (o GdcServiceInstanceMapOutput) ToGdcServiceInstanceMapOutputWithContext(ctx context.Context) GdcServiceInstanceMapOutput {
	return o
}

func (o GdcServiceInstanceMapOutput) MapIndex(k pulumi.StringInput) GdcServiceInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GdcServiceInstance {
		return vs[0].(map[string]*GdcServiceInstance)[vs[1].(string)]
	}).(GdcServiceInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GdcServiceInstanceInput)(nil)).Elem(), &GdcServiceInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*GdcServiceInstanceArrayInput)(nil)).Elem(), GdcServiceInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GdcServiceInstanceMapInput)(nil)).Elem(), GdcServiceInstanceMap{})
	pulumi.RegisterOutputType(GdcServiceInstanceOutput{})
	pulumi.RegisterOutputType(GdcServiceInstanceArrayOutput{})
	pulumi.RegisterOutputType(GdcServiceInstanceMapOutput{})
}
