// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage IAM policies on dataproc jobs. Each of these resources serves a different use case:
//
// * `dataproc.JobIAMPolicy`: Authoritative. Sets the IAM policy for the job and replaces any existing policy already attached.
// * `dataproc.JobIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the job are preserved.
// * `dataproc.JobIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the job are preserved.
//
// > **Note:** `dataproc.JobIAMPolicy` **cannot** be used in conjunction with `dataproc.JobIAMBinding` and `dataproc.JobIAMMember` or they will fight over what your policy should be. In addition, be careful not to accidentally unset ownership of the job as `dataproc.JobIAMPolicy` replaces the entire policy.
//
// > **Note:** `dataproc.JobIAMBinding` resources **can be** used in conjunction with `dataproc.JobIAMMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataproc.JobIAMPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewJobIAMPolicy(ctx, "editor", &dataproc.JobIAMPolicyArgs{
//				Project:    pulumi.String("your-project"),
//				Region:     pulumi.String("your-region"),
//				JobId:      pulumi.String("your-dataproc-job"),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.JobIAMBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewJobIAMBinding(ctx, "editor", &dataproc.JobIAMBindingArgs{
//				JobId: pulumi.String("your-dataproc-job"),
//				Role:  pulumi.String("roles/editor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.JobIAMMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewJobIAMMember(ctx, "editor", &dataproc.JobIAMMemberArgs{
//				JobId:  pulumi.String("your-dataproc-job"),
//				Role:   pulumi.String("roles/editor"),
//				Member: pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.JobIAMPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewJobIAMPolicy(ctx, "editor", &dataproc.JobIAMPolicyArgs{
//				Project:    pulumi.String("your-project"),
//				Region:     pulumi.String("your-region"),
//				JobId:      pulumi.String("your-dataproc-job"),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.JobIAMBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewJobIAMBinding(ctx, "editor", &dataproc.JobIAMBindingArgs{
//				JobId: pulumi.String("your-dataproc-job"),
//				Role:  pulumi.String("roles/editor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.JobIAMMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewJobIAMMember(ctx, "editor", &dataproc.JobIAMMemberArgs{
//				JobId:  pulumi.String("your-dataproc-job"),
//				Role:   pulumi.String("roles/editor"),
//				Member: pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ### Importing IAM policies
//
// IAM policy imports use the `job_id` identifier of the Dataproc Job resource only. For example:
//
// * `projects/{project}/regions/{region}/jobs/{job_id}`
//
// An `import` block (Terraform v1.5.0 and later) can be used to import IAM policies:
//
// tf
//
// import {
//
//	id = "projects/{project}/regions/{region}/jobs/{job_id}"
//
//	to = google_dataproc_job_iam_policy.default
//
// }
//
// The `pulumi import` command can also be used:
//
// ```sh
// $ pulumi import gcp:dataproc/jobIAMBinding:JobIAMBinding default "projects/{project}/regions/{region}/jobs/{job_id}"
// ```
type JobIAMBinding struct {
	pulumi.CustomResourceState

	Condition JobIAMBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the jobs's IAM policy.
	Etag  pulumi.StringOutput `pulumi:"etag"`
	JobId pulumi.StringOutput `pulumi:"jobId"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.JobIAMBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIAMPolicy` only:
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewJobIAMBinding registers a new resource with the given unique name, arguments, and options.
func NewJobIAMBinding(ctx *pulumi.Context,
	name string, args *JobIAMBindingArgs, opts ...pulumi.ResourceOption) (*JobIAMBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobId == nil {
		return nil, errors.New("invalid value for required argument 'JobId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JobIAMBinding
	err := ctx.RegisterResource("gcp:dataproc/jobIAMBinding:JobIAMBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobIAMBinding gets an existing JobIAMBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobIAMBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobIAMBindingState, opts ...pulumi.ResourceOption) (*JobIAMBinding, error) {
	var resource JobIAMBinding
	err := ctx.ReadResource("gcp:dataproc/jobIAMBinding:JobIAMBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobIAMBinding resources.
type jobIAMBindingState struct {
	Condition *JobIAMBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the jobs's IAM policy.
	Etag  *string `pulumi:"etag"`
	JobId *string `pulumi:"jobId"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Members []string `pulumi:"members"`
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project *string `pulumi:"project"`
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.JobIAMBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIAMPolicy` only:
	Role *string `pulumi:"role"`
}

type JobIAMBindingState struct {
	Condition JobIAMBindingConditionPtrInput
	// (Computed) The etag of the jobs's IAM policy.
	Etag  pulumi.StringPtrInput
	JobId pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Members pulumi.StringArrayInput
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringPtrInput
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.JobIAMBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIAMPolicy` only:
	Role pulumi.StringPtrInput
}

func (JobIAMBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobIAMBindingState)(nil)).Elem()
}

type jobIAMBindingArgs struct {
	Condition *JobIAMBindingCondition `pulumi:"condition"`
	JobId     string                  `pulumi:"jobId"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Members []string `pulumi:"members"`
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project *string `pulumi:"project"`
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.JobIAMBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIAMPolicy` only:
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a JobIAMBinding resource.
type JobIAMBindingArgs struct {
	Condition JobIAMBindingConditionPtrInput
	JobId     pulumi.StringInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Members pulumi.StringArrayInput
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringPtrInput
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.JobIAMBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIAMPolicy` only:
	Role pulumi.StringInput
}

func (JobIAMBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobIAMBindingArgs)(nil)).Elem()
}

type JobIAMBindingInput interface {
	pulumi.Input

	ToJobIAMBindingOutput() JobIAMBindingOutput
	ToJobIAMBindingOutputWithContext(ctx context.Context) JobIAMBindingOutput
}

func (*JobIAMBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**JobIAMBinding)(nil)).Elem()
}

func (i *JobIAMBinding) ToJobIAMBindingOutput() JobIAMBindingOutput {
	return i.ToJobIAMBindingOutputWithContext(context.Background())
}

func (i *JobIAMBinding) ToJobIAMBindingOutputWithContext(ctx context.Context) JobIAMBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIAMBindingOutput)
}

// JobIAMBindingArrayInput is an input type that accepts JobIAMBindingArray and JobIAMBindingArrayOutput values.
// You can construct a concrete instance of `JobIAMBindingArrayInput` via:
//
//	JobIAMBindingArray{ JobIAMBindingArgs{...} }
type JobIAMBindingArrayInput interface {
	pulumi.Input

	ToJobIAMBindingArrayOutput() JobIAMBindingArrayOutput
	ToJobIAMBindingArrayOutputWithContext(context.Context) JobIAMBindingArrayOutput
}

type JobIAMBindingArray []JobIAMBindingInput

func (JobIAMBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobIAMBinding)(nil)).Elem()
}

func (i JobIAMBindingArray) ToJobIAMBindingArrayOutput() JobIAMBindingArrayOutput {
	return i.ToJobIAMBindingArrayOutputWithContext(context.Background())
}

func (i JobIAMBindingArray) ToJobIAMBindingArrayOutputWithContext(ctx context.Context) JobIAMBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIAMBindingArrayOutput)
}

// JobIAMBindingMapInput is an input type that accepts JobIAMBindingMap and JobIAMBindingMapOutput values.
// You can construct a concrete instance of `JobIAMBindingMapInput` via:
//
//	JobIAMBindingMap{ "key": JobIAMBindingArgs{...} }
type JobIAMBindingMapInput interface {
	pulumi.Input

	ToJobIAMBindingMapOutput() JobIAMBindingMapOutput
	ToJobIAMBindingMapOutputWithContext(context.Context) JobIAMBindingMapOutput
}

type JobIAMBindingMap map[string]JobIAMBindingInput

func (JobIAMBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobIAMBinding)(nil)).Elem()
}

func (i JobIAMBindingMap) ToJobIAMBindingMapOutput() JobIAMBindingMapOutput {
	return i.ToJobIAMBindingMapOutputWithContext(context.Background())
}

func (i JobIAMBindingMap) ToJobIAMBindingMapOutputWithContext(ctx context.Context) JobIAMBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIAMBindingMapOutput)
}

type JobIAMBindingOutput struct{ *pulumi.OutputState }

func (JobIAMBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobIAMBinding)(nil)).Elem()
}

func (o JobIAMBindingOutput) ToJobIAMBindingOutput() JobIAMBindingOutput {
	return o
}

func (o JobIAMBindingOutput) ToJobIAMBindingOutputWithContext(ctx context.Context) JobIAMBindingOutput {
	return o
}

func (o JobIAMBindingOutput) Condition() JobIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v *JobIAMBinding) JobIAMBindingConditionPtrOutput { return v.Condition }).(JobIAMBindingConditionPtrOutput)
}

// (Computed) The etag of the jobs's IAM policy.
func (o JobIAMBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIAMBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o JobIAMBindingOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIAMBinding) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
func (o JobIAMBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobIAMBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The project in which the job belongs. If it
// is not provided, the provider will use a default.
func (o JobIAMBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIAMBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region in which the job belongs. If it
// is not provided, the provider will use a default.
func (o JobIAMBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIAMBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataproc.JobIAMBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
//
// `dataproc.JobIAMPolicy` only:
func (o JobIAMBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIAMBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type JobIAMBindingArrayOutput struct{ *pulumi.OutputState }

func (JobIAMBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobIAMBinding)(nil)).Elem()
}

func (o JobIAMBindingArrayOutput) ToJobIAMBindingArrayOutput() JobIAMBindingArrayOutput {
	return o
}

func (o JobIAMBindingArrayOutput) ToJobIAMBindingArrayOutputWithContext(ctx context.Context) JobIAMBindingArrayOutput {
	return o
}

func (o JobIAMBindingArrayOutput) Index(i pulumi.IntInput) JobIAMBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobIAMBinding {
		return vs[0].([]*JobIAMBinding)[vs[1].(int)]
	}).(JobIAMBindingOutput)
}

type JobIAMBindingMapOutput struct{ *pulumi.OutputState }

func (JobIAMBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobIAMBinding)(nil)).Elem()
}

func (o JobIAMBindingMapOutput) ToJobIAMBindingMapOutput() JobIAMBindingMapOutput {
	return o
}

func (o JobIAMBindingMapOutput) ToJobIAMBindingMapOutputWithContext(ctx context.Context) JobIAMBindingMapOutput {
	return o
}

func (o JobIAMBindingMapOutput) MapIndex(k pulumi.StringInput) JobIAMBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobIAMBinding {
		return vs[0].(map[string]*JobIAMBinding)[vs[1].(string)]
	}).(JobIAMBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobIAMBindingInput)(nil)).Elem(), &JobIAMBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobIAMBindingArrayInput)(nil)).Elem(), JobIAMBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobIAMBindingMapInput)(nil)).Elem(), JobIAMBindingMap{})
	pulumi.RegisterOutputType(JobIAMBindingOutput{})
	pulumi.RegisterOutputType(JobIAMBindingArrayOutput{})
	pulumi.RegisterOutputType(JobIAMBindingMapOutput{})
}
