// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataproc Metastore Database. Each of these resources serves a different use case:
//
// * `dataproc.MetastoreDatabaseIamPolicy`: Authoritative. Sets the IAM policy for the database and replaces any existing policy already attached.
// * `dataproc.MetastoreDatabaseIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the database are preserved.
// * `dataproc.MetastoreDatabaseIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the database are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataproc.MetastoreDatabaseIamPolicy`: Retrieves the IAM policy for the database
//
// > **Note:** `dataproc.MetastoreDatabaseIamPolicy` **cannot** be used in conjunction with `dataproc.MetastoreDatabaseIamBinding` and `dataproc.MetastoreDatabaseIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataproc.MetastoreDatabaseIamBinding` resources **can be** used in conjunction with `dataproc.MetastoreDatabaseIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataproc.MetastoreDatabaseIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewMetastoreDatabaseIamPolicy(ctx, "policy", &dataproc.MetastoreDatabaseIamPolicyArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				Database:   pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreDatabaseIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreDatabaseIamBinding(ctx, "binding", &dataproc.MetastoreDatabaseIamBindingArgs{
//				Project:   pulumi.Any(dpmsService.Project),
//				Location:  pulumi.Any(dpmsService.Location),
//				ServiceId: pulumi.Any(dpmsService.ServiceId),
//				Database:  pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Role:      pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreDatabaseIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreDatabaseIamMember(ctx, "member", &dataproc.MetastoreDatabaseIamMemberArgs{
//				Project:   pulumi.Any(dpmsService.Project),
//				Location:  pulumi.Any(dpmsService.Location),
//				ServiceId: pulumi.Any(dpmsService.ServiceId),
//				Database:  pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Role:      pulumi.String("roles/viewer"),
//				Member:    pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Dataproc Metastore Database
//
// Three different resources help you manage your IAM policy for Dataproc Metastore Database. Each of these resources serves a different use case:
//
// * `dataproc.MetastoreDatabaseIamPolicy`: Authoritative. Sets the IAM policy for the database and replaces any existing policy already attached.
// * `dataproc.MetastoreDatabaseIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the database are preserved.
// * `dataproc.MetastoreDatabaseIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the database are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataproc.MetastoreDatabaseIamPolicy`: Retrieves the IAM policy for the database
//
// > **Note:** `dataproc.MetastoreDatabaseIamPolicy` **cannot** be used in conjunction with `dataproc.MetastoreDatabaseIamBinding` and `dataproc.MetastoreDatabaseIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataproc.MetastoreDatabaseIamBinding` resources **can be** used in conjunction with `dataproc.MetastoreDatabaseIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataproc.MetastoreDatabaseIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewMetastoreDatabaseIamPolicy(ctx, "policy", &dataproc.MetastoreDatabaseIamPolicyArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				Database:   pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreDatabaseIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreDatabaseIamBinding(ctx, "binding", &dataproc.MetastoreDatabaseIamBindingArgs{
//				Project:   pulumi.Any(dpmsService.Project),
//				Location:  pulumi.Any(dpmsService.Location),
//				ServiceId: pulumi.Any(dpmsService.ServiceId),
//				Database:  pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Role:      pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreDatabaseIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreDatabaseIamMember(ctx, "member", &dataproc.MetastoreDatabaseIamMemberArgs{
//				Project:   pulumi.Any(dpmsService.Project),
//				Location:  pulumi.Any(dpmsService.Location),
//				ServiceId: pulumi.Any(dpmsService.ServiceId),
//				Database:  pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Role:      pulumi.String("roles/viewer"),
//				Member:    pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{name}}
//
// * {{project}}/{{location}}/{{serviceId}}/{{name}}
//
// * {{location}}/{{serviceId}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataproc Metastore database IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreDatabaseIamBinding:MetastoreDatabaseIamBinding editor "projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{database}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreDatabaseIamBinding:MetastoreDatabaseIamBinding editor "projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{database}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreDatabaseIamBinding:MetastoreDatabaseIamBinding editor projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{database}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type MetastoreDatabaseIamBinding struct {
	pulumi.CustomResourceState

	Condition MetastoreDatabaseIamBindingConditionPtrOutput `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	Database pulumi.StringOutput `pulumi:"database"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataproc.MetastoreDatabaseIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewMetastoreDatabaseIamBinding registers a new resource with the given unique name, arguments, and options.
func NewMetastoreDatabaseIamBinding(ctx *pulumi.Context,
	name string, args *MetastoreDatabaseIamBindingArgs, opts ...pulumi.ResourceOption) (*MetastoreDatabaseIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetastoreDatabaseIamBinding
	err := ctx.RegisterResource("gcp:dataproc/metastoreDatabaseIamBinding:MetastoreDatabaseIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetastoreDatabaseIamBinding gets an existing MetastoreDatabaseIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetastoreDatabaseIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetastoreDatabaseIamBindingState, opts ...pulumi.ResourceOption) (*MetastoreDatabaseIamBinding, error) {
	var resource MetastoreDatabaseIamBinding
	err := ctx.ReadResource("gcp:dataproc/metastoreDatabaseIamBinding:MetastoreDatabaseIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetastoreDatabaseIamBinding resources.
type metastoreDatabaseIamBindingState struct {
	Condition *MetastoreDatabaseIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	Database *string `pulumi:"database"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataproc.MetastoreDatabaseIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	ServiceId *string `pulumi:"serviceId"`
}

type MetastoreDatabaseIamBindingState struct {
	Condition MetastoreDatabaseIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Database pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.MetastoreDatabaseIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	ServiceId pulumi.StringPtrInput
}

func (MetastoreDatabaseIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreDatabaseIamBindingState)(nil)).Elem()
}

type metastoreDatabaseIamBindingArgs struct {
	Condition *MetastoreDatabaseIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	Database string `pulumi:"database"`
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataproc.MetastoreDatabaseIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a MetastoreDatabaseIamBinding resource.
type MetastoreDatabaseIamBindingArgs struct {
	Condition MetastoreDatabaseIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Database pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.MetastoreDatabaseIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	ServiceId pulumi.StringInput
}

func (MetastoreDatabaseIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreDatabaseIamBindingArgs)(nil)).Elem()
}

type MetastoreDatabaseIamBindingInput interface {
	pulumi.Input

	ToMetastoreDatabaseIamBindingOutput() MetastoreDatabaseIamBindingOutput
	ToMetastoreDatabaseIamBindingOutputWithContext(ctx context.Context) MetastoreDatabaseIamBindingOutput
}

func (*MetastoreDatabaseIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreDatabaseIamBinding)(nil)).Elem()
}

func (i *MetastoreDatabaseIamBinding) ToMetastoreDatabaseIamBindingOutput() MetastoreDatabaseIamBindingOutput {
	return i.ToMetastoreDatabaseIamBindingOutputWithContext(context.Background())
}

func (i *MetastoreDatabaseIamBinding) ToMetastoreDatabaseIamBindingOutputWithContext(ctx context.Context) MetastoreDatabaseIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreDatabaseIamBindingOutput)
}

// MetastoreDatabaseIamBindingArrayInput is an input type that accepts MetastoreDatabaseIamBindingArray and MetastoreDatabaseIamBindingArrayOutput values.
// You can construct a concrete instance of `MetastoreDatabaseIamBindingArrayInput` via:
//
//	MetastoreDatabaseIamBindingArray{ MetastoreDatabaseIamBindingArgs{...} }
type MetastoreDatabaseIamBindingArrayInput interface {
	pulumi.Input

	ToMetastoreDatabaseIamBindingArrayOutput() MetastoreDatabaseIamBindingArrayOutput
	ToMetastoreDatabaseIamBindingArrayOutputWithContext(context.Context) MetastoreDatabaseIamBindingArrayOutput
}

type MetastoreDatabaseIamBindingArray []MetastoreDatabaseIamBindingInput

func (MetastoreDatabaseIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreDatabaseIamBinding)(nil)).Elem()
}

func (i MetastoreDatabaseIamBindingArray) ToMetastoreDatabaseIamBindingArrayOutput() MetastoreDatabaseIamBindingArrayOutput {
	return i.ToMetastoreDatabaseIamBindingArrayOutputWithContext(context.Background())
}

func (i MetastoreDatabaseIamBindingArray) ToMetastoreDatabaseIamBindingArrayOutputWithContext(ctx context.Context) MetastoreDatabaseIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreDatabaseIamBindingArrayOutput)
}

// MetastoreDatabaseIamBindingMapInput is an input type that accepts MetastoreDatabaseIamBindingMap and MetastoreDatabaseIamBindingMapOutput values.
// You can construct a concrete instance of `MetastoreDatabaseIamBindingMapInput` via:
//
//	MetastoreDatabaseIamBindingMap{ "key": MetastoreDatabaseIamBindingArgs{...} }
type MetastoreDatabaseIamBindingMapInput interface {
	pulumi.Input

	ToMetastoreDatabaseIamBindingMapOutput() MetastoreDatabaseIamBindingMapOutput
	ToMetastoreDatabaseIamBindingMapOutputWithContext(context.Context) MetastoreDatabaseIamBindingMapOutput
}

type MetastoreDatabaseIamBindingMap map[string]MetastoreDatabaseIamBindingInput

func (MetastoreDatabaseIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreDatabaseIamBinding)(nil)).Elem()
}

func (i MetastoreDatabaseIamBindingMap) ToMetastoreDatabaseIamBindingMapOutput() MetastoreDatabaseIamBindingMapOutput {
	return i.ToMetastoreDatabaseIamBindingMapOutputWithContext(context.Background())
}

func (i MetastoreDatabaseIamBindingMap) ToMetastoreDatabaseIamBindingMapOutputWithContext(ctx context.Context) MetastoreDatabaseIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreDatabaseIamBindingMapOutput)
}

type MetastoreDatabaseIamBindingOutput struct{ *pulumi.OutputState }

func (MetastoreDatabaseIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreDatabaseIamBinding)(nil)).Elem()
}

func (o MetastoreDatabaseIamBindingOutput) ToMetastoreDatabaseIamBindingOutput() MetastoreDatabaseIamBindingOutput {
	return o
}

func (o MetastoreDatabaseIamBindingOutput) ToMetastoreDatabaseIamBindingOutputWithContext(ctx context.Context) MetastoreDatabaseIamBindingOutput {
	return o
}

func (o MetastoreDatabaseIamBindingOutput) Condition() MetastoreDatabaseIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamBinding) MetastoreDatabaseIamBindingConditionPtrOutput { return v.Condition }).(MetastoreDatabaseIamBindingConditionPtrOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o MetastoreDatabaseIamBindingOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamBinding) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o MetastoreDatabaseIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o MetastoreDatabaseIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o MetastoreDatabaseIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o MetastoreDatabaseIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataproc.MetastoreDatabaseIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o MetastoreDatabaseIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o MetastoreDatabaseIamBindingOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamBinding) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type MetastoreDatabaseIamBindingArrayOutput struct{ *pulumi.OutputState }

func (MetastoreDatabaseIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreDatabaseIamBinding)(nil)).Elem()
}

func (o MetastoreDatabaseIamBindingArrayOutput) ToMetastoreDatabaseIamBindingArrayOutput() MetastoreDatabaseIamBindingArrayOutput {
	return o
}

func (o MetastoreDatabaseIamBindingArrayOutput) ToMetastoreDatabaseIamBindingArrayOutputWithContext(ctx context.Context) MetastoreDatabaseIamBindingArrayOutput {
	return o
}

func (o MetastoreDatabaseIamBindingArrayOutput) Index(i pulumi.IntInput) MetastoreDatabaseIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetastoreDatabaseIamBinding {
		return vs[0].([]*MetastoreDatabaseIamBinding)[vs[1].(int)]
	}).(MetastoreDatabaseIamBindingOutput)
}

type MetastoreDatabaseIamBindingMapOutput struct{ *pulumi.OutputState }

func (MetastoreDatabaseIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreDatabaseIamBinding)(nil)).Elem()
}

func (o MetastoreDatabaseIamBindingMapOutput) ToMetastoreDatabaseIamBindingMapOutput() MetastoreDatabaseIamBindingMapOutput {
	return o
}

func (o MetastoreDatabaseIamBindingMapOutput) ToMetastoreDatabaseIamBindingMapOutputWithContext(ctx context.Context) MetastoreDatabaseIamBindingMapOutput {
	return o
}

func (o MetastoreDatabaseIamBindingMapOutput) MapIndex(k pulumi.StringInput) MetastoreDatabaseIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetastoreDatabaseIamBinding {
		return vs[0].(map[string]*MetastoreDatabaseIamBinding)[vs[1].(string)]
	}).(MetastoreDatabaseIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreDatabaseIamBindingInput)(nil)).Elem(), &MetastoreDatabaseIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreDatabaseIamBindingArrayInput)(nil)).Elem(), MetastoreDatabaseIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreDatabaseIamBindingMapInput)(nil)).Elem(), MetastoreDatabaseIamBindingMap{})
	pulumi.RegisterOutputType(MetastoreDatabaseIamBindingOutput{})
	pulumi.RegisterOutputType(MetastoreDatabaseIamBindingArrayOutput{})
	pulumi.RegisterOutputType(MetastoreDatabaseIamBindingMapOutput{})
}
