// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataproc Metastore Database. Each of these resources serves a different use case:
//
// * `dataproc.MetastoreDatabaseIamPolicy`: Authoritative. Sets the IAM policy for the database and replaces any existing policy already attached.
// * `dataproc.MetastoreDatabaseIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the database are preserved.
// * `dataproc.MetastoreDatabaseIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the database are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataproc.MetastoreDatabaseIamPolicy`: Retrieves the IAM policy for the database
//
// > **Note:** `dataproc.MetastoreDatabaseIamPolicy` **cannot** be used in conjunction with `dataproc.MetastoreDatabaseIamBinding` and `dataproc.MetastoreDatabaseIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataproc.MetastoreDatabaseIamBinding` resources **can be** used in conjunction with `dataproc.MetastoreDatabaseIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataproc.MetastoreDatabaseIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewMetastoreDatabaseIamPolicy(ctx, "policy", &dataproc.MetastoreDatabaseIamPolicyArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				Database:   pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreDatabaseIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreDatabaseIamBinding(ctx, "binding", &dataproc.MetastoreDatabaseIamBindingArgs{
//				Project:   pulumi.Any(dpmsService.Project),
//				Location:  pulumi.Any(dpmsService.Location),
//				ServiceId: pulumi.Any(dpmsService.ServiceId),
//				Database:  pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Role:      pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreDatabaseIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreDatabaseIamMember(ctx, "member", &dataproc.MetastoreDatabaseIamMemberArgs{
//				Project:   pulumi.Any(dpmsService.Project),
//				Location:  pulumi.Any(dpmsService.Location),
//				ServiceId: pulumi.Any(dpmsService.ServiceId),
//				Database:  pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Role:      pulumi.String("roles/viewer"),
//				Member:    pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Dataproc Metastore Database
// Three different resources help you manage your IAM policy for Dataproc Metastore Database. Each of these resources serves a different use case:
//
// * `dataproc.MetastoreDatabaseIamPolicy`: Authoritative. Sets the IAM policy for the database and replaces any existing policy already attached.
// * `dataproc.MetastoreDatabaseIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the database are preserved.
// * `dataproc.MetastoreDatabaseIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the database are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataproc.MetastoreDatabaseIamPolicy`: Retrieves the IAM policy for the database
//
// > **Note:** `dataproc.MetastoreDatabaseIamPolicy` **cannot** be used in conjunction with `dataproc.MetastoreDatabaseIamBinding` and `dataproc.MetastoreDatabaseIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataproc.MetastoreDatabaseIamBinding` resources **can be** used in conjunction with `dataproc.MetastoreDatabaseIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataproc.MetastoreDatabaseIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewMetastoreDatabaseIamPolicy(ctx, "policy", &dataproc.MetastoreDatabaseIamPolicyArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				Database:   pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreDatabaseIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreDatabaseIamBinding(ctx, "binding", &dataproc.MetastoreDatabaseIamBindingArgs{
//				Project:   pulumi.Any(dpmsService.Project),
//				Location:  pulumi.Any(dpmsService.Location),
//				ServiceId: pulumi.Any(dpmsService.ServiceId),
//				Database:  pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Role:      pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreDatabaseIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreDatabaseIamMember(ctx, "member", &dataproc.MetastoreDatabaseIamMemberArgs{
//				Project:   pulumi.Any(dpmsService.Project),
//				Location:  pulumi.Any(dpmsService.Location),
//				ServiceId: pulumi.Any(dpmsService.ServiceId),
//				Database:  pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Role:      pulumi.String("roles/viewer"),
//				Member:    pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{name}}
//
// * {{project}}/{{location}}/{{serviceId}}/{{name}}
//
// * {{location}}/{{serviceId}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataproc Metastore database IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreDatabaseIamPolicy:MetastoreDatabaseIamPolicy editor "projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{database}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreDatabaseIamPolicy:MetastoreDatabaseIamPolicy editor "projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{database}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreDatabaseIamPolicy:MetastoreDatabaseIamPolicy editor projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{database}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type MetastoreDatabaseIamPolicy struct {
	pulumi.CustomResourceState

	// Used to find the parent resource to bind the IAM policy to
	Database pulumi.StringOutput `pulumi:"database"`
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringOutput `pulumi:"etag"`
	Location pulumi.StringOutput `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project   pulumi.StringOutput `pulumi:"project"`
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewMetastoreDatabaseIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewMetastoreDatabaseIamPolicy(ctx *pulumi.Context,
	name string, args *MetastoreDatabaseIamPolicyArgs, opts ...pulumi.ResourceOption) (*MetastoreDatabaseIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetastoreDatabaseIamPolicy
	err := ctx.RegisterResource("gcp:dataproc/metastoreDatabaseIamPolicy:MetastoreDatabaseIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetastoreDatabaseIamPolicy gets an existing MetastoreDatabaseIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetastoreDatabaseIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetastoreDatabaseIamPolicyState, opts ...pulumi.ResourceOption) (*MetastoreDatabaseIamPolicy, error) {
	var resource MetastoreDatabaseIamPolicy
	err := ctx.ReadResource("gcp:dataproc/metastoreDatabaseIamPolicy:MetastoreDatabaseIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetastoreDatabaseIamPolicy resources.
type metastoreDatabaseIamPolicyState struct {
	// Used to find the parent resource to bind the IAM policy to
	Database *string `pulumi:"database"`
	// (Computed) The etag of the IAM policy.
	Etag     *string `pulumi:"etag"`
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project   *string `pulumi:"project"`
	ServiceId *string `pulumi:"serviceId"`
}

type MetastoreDatabaseIamPolicyState struct {
	// Used to find the parent resource to bind the IAM policy to
	Database pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project   pulumi.StringPtrInput
	ServiceId pulumi.StringPtrInput
}

func (MetastoreDatabaseIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreDatabaseIamPolicyState)(nil)).Elem()
}

type metastoreDatabaseIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Database string  `pulumi:"database"`
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project   *string `pulumi:"project"`
	ServiceId string  `pulumi:"serviceId"`
}

// The set of arguments for constructing a MetastoreDatabaseIamPolicy resource.
type MetastoreDatabaseIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Database pulumi.StringInput
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project   pulumi.StringPtrInput
	ServiceId pulumi.StringInput
}

func (MetastoreDatabaseIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreDatabaseIamPolicyArgs)(nil)).Elem()
}

type MetastoreDatabaseIamPolicyInput interface {
	pulumi.Input

	ToMetastoreDatabaseIamPolicyOutput() MetastoreDatabaseIamPolicyOutput
	ToMetastoreDatabaseIamPolicyOutputWithContext(ctx context.Context) MetastoreDatabaseIamPolicyOutput
}

func (*MetastoreDatabaseIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreDatabaseIamPolicy)(nil)).Elem()
}

func (i *MetastoreDatabaseIamPolicy) ToMetastoreDatabaseIamPolicyOutput() MetastoreDatabaseIamPolicyOutput {
	return i.ToMetastoreDatabaseIamPolicyOutputWithContext(context.Background())
}

func (i *MetastoreDatabaseIamPolicy) ToMetastoreDatabaseIamPolicyOutputWithContext(ctx context.Context) MetastoreDatabaseIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreDatabaseIamPolicyOutput)
}

// MetastoreDatabaseIamPolicyArrayInput is an input type that accepts MetastoreDatabaseIamPolicyArray and MetastoreDatabaseIamPolicyArrayOutput values.
// You can construct a concrete instance of `MetastoreDatabaseIamPolicyArrayInput` via:
//
//	MetastoreDatabaseIamPolicyArray{ MetastoreDatabaseIamPolicyArgs{...} }
type MetastoreDatabaseIamPolicyArrayInput interface {
	pulumi.Input

	ToMetastoreDatabaseIamPolicyArrayOutput() MetastoreDatabaseIamPolicyArrayOutput
	ToMetastoreDatabaseIamPolicyArrayOutputWithContext(context.Context) MetastoreDatabaseIamPolicyArrayOutput
}

type MetastoreDatabaseIamPolicyArray []MetastoreDatabaseIamPolicyInput

func (MetastoreDatabaseIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreDatabaseIamPolicy)(nil)).Elem()
}

func (i MetastoreDatabaseIamPolicyArray) ToMetastoreDatabaseIamPolicyArrayOutput() MetastoreDatabaseIamPolicyArrayOutput {
	return i.ToMetastoreDatabaseIamPolicyArrayOutputWithContext(context.Background())
}

func (i MetastoreDatabaseIamPolicyArray) ToMetastoreDatabaseIamPolicyArrayOutputWithContext(ctx context.Context) MetastoreDatabaseIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreDatabaseIamPolicyArrayOutput)
}

// MetastoreDatabaseIamPolicyMapInput is an input type that accepts MetastoreDatabaseIamPolicyMap and MetastoreDatabaseIamPolicyMapOutput values.
// You can construct a concrete instance of `MetastoreDatabaseIamPolicyMapInput` via:
//
//	MetastoreDatabaseIamPolicyMap{ "key": MetastoreDatabaseIamPolicyArgs{...} }
type MetastoreDatabaseIamPolicyMapInput interface {
	pulumi.Input

	ToMetastoreDatabaseIamPolicyMapOutput() MetastoreDatabaseIamPolicyMapOutput
	ToMetastoreDatabaseIamPolicyMapOutputWithContext(context.Context) MetastoreDatabaseIamPolicyMapOutput
}

type MetastoreDatabaseIamPolicyMap map[string]MetastoreDatabaseIamPolicyInput

func (MetastoreDatabaseIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreDatabaseIamPolicy)(nil)).Elem()
}

func (i MetastoreDatabaseIamPolicyMap) ToMetastoreDatabaseIamPolicyMapOutput() MetastoreDatabaseIamPolicyMapOutput {
	return i.ToMetastoreDatabaseIamPolicyMapOutputWithContext(context.Background())
}

func (i MetastoreDatabaseIamPolicyMap) ToMetastoreDatabaseIamPolicyMapOutputWithContext(ctx context.Context) MetastoreDatabaseIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreDatabaseIamPolicyMapOutput)
}

type MetastoreDatabaseIamPolicyOutput struct{ *pulumi.OutputState }

func (MetastoreDatabaseIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreDatabaseIamPolicy)(nil)).Elem()
}

func (o MetastoreDatabaseIamPolicyOutput) ToMetastoreDatabaseIamPolicyOutput() MetastoreDatabaseIamPolicyOutput {
	return o
}

func (o MetastoreDatabaseIamPolicyOutput) ToMetastoreDatabaseIamPolicyOutputWithContext(ctx context.Context) MetastoreDatabaseIamPolicyOutput {
	return o
}

// Used to find the parent resource to bind the IAM policy to
func (o MetastoreDatabaseIamPolicyOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamPolicy) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o MetastoreDatabaseIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o MetastoreDatabaseIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o MetastoreDatabaseIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o MetastoreDatabaseIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o MetastoreDatabaseIamPolicyOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreDatabaseIamPolicy) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type MetastoreDatabaseIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (MetastoreDatabaseIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreDatabaseIamPolicy)(nil)).Elem()
}

func (o MetastoreDatabaseIamPolicyArrayOutput) ToMetastoreDatabaseIamPolicyArrayOutput() MetastoreDatabaseIamPolicyArrayOutput {
	return o
}

func (o MetastoreDatabaseIamPolicyArrayOutput) ToMetastoreDatabaseIamPolicyArrayOutputWithContext(ctx context.Context) MetastoreDatabaseIamPolicyArrayOutput {
	return o
}

func (o MetastoreDatabaseIamPolicyArrayOutput) Index(i pulumi.IntInput) MetastoreDatabaseIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetastoreDatabaseIamPolicy {
		return vs[0].([]*MetastoreDatabaseIamPolicy)[vs[1].(int)]
	}).(MetastoreDatabaseIamPolicyOutput)
}

type MetastoreDatabaseIamPolicyMapOutput struct{ *pulumi.OutputState }

func (MetastoreDatabaseIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreDatabaseIamPolicy)(nil)).Elem()
}

func (o MetastoreDatabaseIamPolicyMapOutput) ToMetastoreDatabaseIamPolicyMapOutput() MetastoreDatabaseIamPolicyMapOutput {
	return o
}

func (o MetastoreDatabaseIamPolicyMapOutput) ToMetastoreDatabaseIamPolicyMapOutputWithContext(ctx context.Context) MetastoreDatabaseIamPolicyMapOutput {
	return o
}

func (o MetastoreDatabaseIamPolicyMapOutput) MapIndex(k pulumi.StringInput) MetastoreDatabaseIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetastoreDatabaseIamPolicy {
		return vs[0].(map[string]*MetastoreDatabaseIamPolicy)[vs[1].(string)]
	}).(MetastoreDatabaseIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreDatabaseIamPolicyInput)(nil)).Elem(), &MetastoreDatabaseIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreDatabaseIamPolicyArrayInput)(nil)).Elem(), MetastoreDatabaseIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreDatabaseIamPolicyMapInput)(nil)).Elem(), MetastoreDatabaseIamPolicyMap{})
	pulumi.RegisterOutputType(MetastoreDatabaseIamPolicyOutput{})
	pulumi.RegisterOutputType(MetastoreDatabaseIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(MetastoreDatabaseIamPolicyMapOutput{})
}
