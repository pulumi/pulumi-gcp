// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the current IAM policy data for table
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.LookupMetastoreTableIamPolicy(ctx, &dataproc.LookupMetastoreTableIamPolicyArgs{
//				Project:    pulumi.StringRef(dpmsService.Project),
//				Location:   pulumi.StringRef(dpmsService.Location),
//				ServiceId:  dpmsService.ServiceId,
//				DatabaseId: hive.HiveConfig[0].Properties.Database,
//				Table:      hive.HiveConfig[0].Properties.Table,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupMetastoreTableIamPolicy(ctx *pulumi.Context, args *LookupMetastoreTableIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupMetastoreTableIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMetastoreTableIamPolicyResult
	err := ctx.Invoke("gcp:dataproc/getMetastoreTableIamPolicy:getMetastoreTableIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMetastoreTableIamPolicy.
type LookupMetastoreTableIamPolicyArgs struct {
	DatabaseId string  `pulumi:"databaseId"`
	Location   *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project   *string `pulumi:"project"`
	ServiceId string  `pulumi:"serviceId"`
	// Used to find the parent resource to bind the IAM policy to
	Table string `pulumi:"table"`
}

// A collection of values returned by getMetastoreTableIamPolicy.
type LookupMetastoreTableIamPolicyResult struct {
	DatabaseId string `pulumi:"databaseId"`
	// (Computed) The etag of the IAM policy.
	Etag string `pulumi:"etag"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// (Required only by `dataproc.MetastoreTableIamPolicy`) The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	Project    string `pulumi:"project"`
	ServiceId  string `pulumi:"serviceId"`
	Table      string `pulumi:"table"`
}

func LookupMetastoreTableIamPolicyOutput(ctx *pulumi.Context, args LookupMetastoreTableIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupMetastoreTableIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMetastoreTableIamPolicyResultOutput, error) {
			args := v.(LookupMetastoreTableIamPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:dataproc/getMetastoreTableIamPolicy:getMetastoreTableIamPolicy", args, LookupMetastoreTableIamPolicyResultOutput{}, options).(LookupMetastoreTableIamPolicyResultOutput), nil
		}).(LookupMetastoreTableIamPolicyResultOutput)
}

// A collection of arguments for invoking getMetastoreTableIamPolicy.
type LookupMetastoreTableIamPolicyOutputArgs struct {
	DatabaseId pulumi.StringInput    `pulumi:"databaseId"`
	Location   pulumi.StringPtrInput `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project   pulumi.StringPtrInput `pulumi:"project"`
	ServiceId pulumi.StringInput    `pulumi:"serviceId"`
	// Used to find the parent resource to bind the IAM policy to
	Table pulumi.StringInput `pulumi:"table"`
}

func (LookupMetastoreTableIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetastoreTableIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getMetastoreTableIamPolicy.
type LookupMetastoreTableIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupMetastoreTableIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetastoreTableIamPolicyResult)(nil)).Elem()
}

func (o LookupMetastoreTableIamPolicyResultOutput) ToLookupMetastoreTableIamPolicyResultOutput() LookupMetastoreTableIamPolicyResultOutput {
	return o
}

func (o LookupMetastoreTableIamPolicyResultOutput) ToLookupMetastoreTableIamPolicyResultOutputWithContext(ctx context.Context) LookupMetastoreTableIamPolicyResultOutput {
	return o
}

func (o LookupMetastoreTableIamPolicyResultOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreTableIamPolicyResult) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o LookupMetastoreTableIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreTableIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMetastoreTableIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreTableIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMetastoreTableIamPolicyResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreTableIamPolicyResult) string { return v.Location }).(pulumi.StringOutput)
}

// (Required only by `dataproc.MetastoreTableIamPolicy`) The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o LookupMetastoreTableIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreTableIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupMetastoreTableIamPolicyResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreTableIamPolicyResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupMetastoreTableIamPolicyResultOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreTableIamPolicyResult) string { return v.ServiceId }).(pulumi.StringOutput)
}

func (o LookupMetastoreTableIamPolicyResultOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreTableIamPolicyResult) string { return v.Table }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMetastoreTableIamPolicyResultOutput{})
}
