// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataproc Metastore Table. Each of these resources serves a different use case:
//
// * `dataproc.MetastoreTableIamPolicy`: Authoritative. Sets the IAM policy for the table and replaces any existing policy already attached.
// * `dataproc.MetastoreTableIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the table are preserved.
// * `dataproc.MetastoreTableIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the table are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataproc.MetastoreTableIamPolicy`: Retrieves the IAM policy for the table
//
// > **Note:** `dataproc.MetastoreTableIamPolicy` **cannot** be used in conjunction with `dataproc.MetastoreTableIamBinding` and `dataproc.MetastoreTableIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataproc.MetastoreTableIamBinding` resources **can be** used in conjunction with `dataproc.MetastoreTableIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataproc.MetastoreTableIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewMetastoreTableIamPolicy(ctx, "policy", &dataproc.MetastoreTableIamPolicyArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreTableIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreTableIamBinding(ctx, "binding", &dataproc.MetastoreTableIamBindingArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreTableIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreTableIamMember(ctx, "member", &dataproc.MetastoreTableIamMemberArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Dataproc Metastore Table
// Three different resources help you manage your IAM policy for Dataproc Metastore Table. Each of these resources serves a different use case:
//
// * `dataproc.MetastoreTableIamPolicy`: Authoritative. Sets the IAM policy for the table and replaces any existing policy already attached.
// * `dataproc.MetastoreTableIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the table are preserved.
// * `dataproc.MetastoreTableIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the table are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataproc.MetastoreTableIamPolicy`: Retrieves the IAM policy for the table
//
// > **Note:** `dataproc.MetastoreTableIamPolicy` **cannot** be used in conjunction with `dataproc.MetastoreTableIamBinding` and `dataproc.MetastoreTableIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataproc.MetastoreTableIamBinding` resources **can be** used in conjunction with `dataproc.MetastoreTableIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataproc.MetastoreTableIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewMetastoreTableIamPolicy(ctx, "policy", &dataproc.MetastoreTableIamPolicyArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreTableIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreTableIamBinding(ctx, "binding", &dataproc.MetastoreTableIamBindingArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataproc.MetastoreTableIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewMetastoreTableIamMember(ctx, "member", &dataproc.MetastoreTableIamMemberArgs{
//				Project:    pulumi.Any(dpmsService.Project),
//				Location:   pulumi.Any(dpmsService.Location),
//				ServiceId:  pulumi.Any(dpmsService.ServiceId),
//				DatabaseId: pulumi.Any(hive.HiveConfig[0].Properties.Database),
//				Table:      pulumi.Any(hive.HiveConfig[0].Properties.Table),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{databaseId}}/tables/{{name}}
//
// * {{project}}/{{location}}/{{serviceId}}/{{databaseId}}/{{name}}
//
// * {{location}}/{{serviceId}}/{{databaseId}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataproc Metastore table IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreTableIamPolicy:MetastoreTableIamPolicy editor "projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{databaseId}}/tables/{{table}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreTableIamPolicy:MetastoreTableIamPolicy editor "projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{databaseId}}/tables/{{table}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataproc/metastoreTableIamPolicy:MetastoreTableIamPolicy editor projects/{{project}}/locations/{{location}}/services/{{serviceId}}/databases/{{databaseId}}/tables/{{table}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type MetastoreTableIamPolicy struct {
	pulumi.CustomResourceState

	// Used to find the parent resource to bind the IAM policy to
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Used to find the parent resource to bind the IAM policy to
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Used to find the parent resource to bind the IAM policy to
	Table pulumi.StringOutput `pulumi:"table"`
}

// NewMetastoreTableIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewMetastoreTableIamPolicy(ctx *pulumi.Context,
	name string, args *MetastoreTableIamPolicyArgs, opts ...pulumi.ResourceOption) (*MetastoreTableIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.Table == nil {
		return nil, errors.New("invalid value for required argument 'Table'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetastoreTableIamPolicy
	err := ctx.RegisterResource("gcp:dataproc/metastoreTableIamPolicy:MetastoreTableIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetastoreTableIamPolicy gets an existing MetastoreTableIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetastoreTableIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetastoreTableIamPolicyState, opts ...pulumi.ResourceOption) (*MetastoreTableIamPolicy, error) {
	var resource MetastoreTableIamPolicy
	err := ctx.ReadResource("gcp:dataproc/metastoreTableIamPolicy:MetastoreTableIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetastoreTableIamPolicy resources.
type metastoreTableIamPolicyState struct {
	// Used to find the parent resource to bind the IAM policy to
	DatabaseId *string `pulumi:"databaseId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// Used to find the parent resource to bind the IAM policy to
	ServiceId *string `pulumi:"serviceId"`
	// Used to find the parent resource to bind the IAM policy to
	Table *string `pulumi:"table"`
}

type MetastoreTableIamPolicyState struct {
	// Used to find the parent resource to bind the IAM policy to
	DatabaseId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	ServiceId pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Table pulumi.StringPtrInput
}

func (MetastoreTableIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreTableIamPolicyState)(nil)).Elem()
}

type metastoreTableIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	DatabaseId string `pulumi:"databaseId"`
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// Used to find the parent resource to bind the IAM policy to
	ServiceId string `pulumi:"serviceId"`
	// Used to find the parent resource to bind the IAM policy to
	Table string `pulumi:"table"`
}

// The set of arguments for constructing a MetastoreTableIamPolicy resource.
type MetastoreTableIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	DatabaseId pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	ServiceId pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	Table pulumi.StringInput
}

func (MetastoreTableIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreTableIamPolicyArgs)(nil)).Elem()
}

type MetastoreTableIamPolicyInput interface {
	pulumi.Input

	ToMetastoreTableIamPolicyOutput() MetastoreTableIamPolicyOutput
	ToMetastoreTableIamPolicyOutputWithContext(ctx context.Context) MetastoreTableIamPolicyOutput
}

func (*MetastoreTableIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreTableIamPolicy)(nil)).Elem()
}

func (i *MetastoreTableIamPolicy) ToMetastoreTableIamPolicyOutput() MetastoreTableIamPolicyOutput {
	return i.ToMetastoreTableIamPolicyOutputWithContext(context.Background())
}

func (i *MetastoreTableIamPolicy) ToMetastoreTableIamPolicyOutputWithContext(ctx context.Context) MetastoreTableIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreTableIamPolicyOutput)
}

// MetastoreTableIamPolicyArrayInput is an input type that accepts MetastoreTableIamPolicyArray and MetastoreTableIamPolicyArrayOutput values.
// You can construct a concrete instance of `MetastoreTableIamPolicyArrayInput` via:
//
//	MetastoreTableIamPolicyArray{ MetastoreTableIamPolicyArgs{...} }
type MetastoreTableIamPolicyArrayInput interface {
	pulumi.Input

	ToMetastoreTableIamPolicyArrayOutput() MetastoreTableIamPolicyArrayOutput
	ToMetastoreTableIamPolicyArrayOutputWithContext(context.Context) MetastoreTableIamPolicyArrayOutput
}

type MetastoreTableIamPolicyArray []MetastoreTableIamPolicyInput

func (MetastoreTableIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreTableIamPolicy)(nil)).Elem()
}

func (i MetastoreTableIamPolicyArray) ToMetastoreTableIamPolicyArrayOutput() MetastoreTableIamPolicyArrayOutput {
	return i.ToMetastoreTableIamPolicyArrayOutputWithContext(context.Background())
}

func (i MetastoreTableIamPolicyArray) ToMetastoreTableIamPolicyArrayOutputWithContext(ctx context.Context) MetastoreTableIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreTableIamPolicyArrayOutput)
}

// MetastoreTableIamPolicyMapInput is an input type that accepts MetastoreTableIamPolicyMap and MetastoreTableIamPolicyMapOutput values.
// You can construct a concrete instance of `MetastoreTableIamPolicyMapInput` via:
//
//	MetastoreTableIamPolicyMap{ "key": MetastoreTableIamPolicyArgs{...} }
type MetastoreTableIamPolicyMapInput interface {
	pulumi.Input

	ToMetastoreTableIamPolicyMapOutput() MetastoreTableIamPolicyMapOutput
	ToMetastoreTableIamPolicyMapOutputWithContext(context.Context) MetastoreTableIamPolicyMapOutput
}

type MetastoreTableIamPolicyMap map[string]MetastoreTableIamPolicyInput

func (MetastoreTableIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreTableIamPolicy)(nil)).Elem()
}

func (i MetastoreTableIamPolicyMap) ToMetastoreTableIamPolicyMapOutput() MetastoreTableIamPolicyMapOutput {
	return i.ToMetastoreTableIamPolicyMapOutputWithContext(context.Background())
}

func (i MetastoreTableIamPolicyMap) ToMetastoreTableIamPolicyMapOutputWithContext(ctx context.Context) MetastoreTableIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreTableIamPolicyMapOutput)
}

type MetastoreTableIamPolicyOutput struct{ *pulumi.OutputState }

func (MetastoreTableIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreTableIamPolicy)(nil)).Elem()
}

func (o MetastoreTableIamPolicyOutput) ToMetastoreTableIamPolicyOutput() MetastoreTableIamPolicyOutput {
	return o
}

func (o MetastoreTableIamPolicyOutput) ToMetastoreTableIamPolicyOutputWithContext(ctx context.Context) MetastoreTableIamPolicyOutput {
	return o
}

// Used to find the parent resource to bind the IAM policy to
func (o MetastoreTableIamPolicyOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamPolicy) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o MetastoreTableIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o MetastoreTableIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o MetastoreTableIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o MetastoreTableIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o MetastoreTableIamPolicyOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamPolicy) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o MetastoreTableIamPolicyOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreTableIamPolicy) pulumi.StringOutput { return v.Table }).(pulumi.StringOutput)
}

type MetastoreTableIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (MetastoreTableIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreTableIamPolicy)(nil)).Elem()
}

func (o MetastoreTableIamPolicyArrayOutput) ToMetastoreTableIamPolicyArrayOutput() MetastoreTableIamPolicyArrayOutput {
	return o
}

func (o MetastoreTableIamPolicyArrayOutput) ToMetastoreTableIamPolicyArrayOutputWithContext(ctx context.Context) MetastoreTableIamPolicyArrayOutput {
	return o
}

func (o MetastoreTableIamPolicyArrayOutput) Index(i pulumi.IntInput) MetastoreTableIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetastoreTableIamPolicy {
		return vs[0].([]*MetastoreTableIamPolicy)[vs[1].(int)]
	}).(MetastoreTableIamPolicyOutput)
}

type MetastoreTableIamPolicyMapOutput struct{ *pulumi.OutputState }

func (MetastoreTableIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreTableIamPolicy)(nil)).Elem()
}

func (o MetastoreTableIamPolicyMapOutput) ToMetastoreTableIamPolicyMapOutput() MetastoreTableIamPolicyMapOutput {
	return o
}

func (o MetastoreTableIamPolicyMapOutput) ToMetastoreTableIamPolicyMapOutputWithContext(ctx context.Context) MetastoreTableIamPolicyMapOutput {
	return o
}

func (o MetastoreTableIamPolicyMapOutput) MapIndex(k pulumi.StringInput) MetastoreTableIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetastoreTableIamPolicy {
		return vs[0].(map[string]*MetastoreTableIamPolicy)[vs[1].(string)]
	}).(MetastoreTableIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreTableIamPolicyInput)(nil)).Elem(), &MetastoreTableIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreTableIamPolicyArrayInput)(nil)).Elem(), MetastoreTableIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreTableIamPolicyMapInput)(nil)).Elem(), MetastoreTableIamPolicyMap{})
	pulumi.RegisterOutputType(MetastoreTableIamPolicyOutput{})
	pulumi.RegisterOutputType(MetastoreTableIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(MetastoreTableIamPolicyMapOutput{})
}
