// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Describes an autoscaling policy for Dataproc cluster autoscaler.
//
// ## Example Usage
// ### Dataproc Autoscaling Policy
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/dataproc"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		asp, err := dataproc.NewAutoscalingPolicy(ctx, "asp", &dataproc.AutoscalingPolicyArgs{
// 			PolicyId: pulumi.String("dataproc-policy"),
// 			Location: pulumi.String("us-central1"),
// 			WorkerConfig: &dataproc.AutoscalingPolicyWorkerConfigArgs{
// 				MaxInstances: pulumi.Int(3),
// 			},
// 			BasicAlgorithm: &dataproc.AutoscalingPolicyBasicAlgorithmArgs{
// 				YarnConfig: &dataproc.AutoscalingPolicyBasicAlgorithmYarnConfigArgs{
// 					GracefulDecommissionTimeout: pulumi.String("30s"),
// 					ScaleUpFactor:               pulumi.Float64(0.5),
// 					ScaleDownFactor:             pulumi.Float64(0.5),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = dataproc.NewCluster(ctx, "basic", &dataproc.ClusterArgs{
// 			Region: pulumi.String("us-central1"),
// 			ClusterConfig: &dataproc.ClusterClusterConfigArgs{
// 				AutoscalingConfig: &dataproc.ClusterClusterConfigAutoscalingConfigArgs{
// 					PolicyUri: asp.Name,
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// AutoscalingPolicy can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:dataproc/autoscalingPolicy:AutoscalingPolicy default projects/{{project}}/locations/{{location}}/autoscalingPolicies/{{policy_id}}
// ```
//
// ```sh
//  $ pulumi import gcp:dataproc/autoscalingPolicy:AutoscalingPolicy default {{project}}/{{location}}/{{policy_id}}
// ```
//
// ```sh
//  $ pulumi import gcp:dataproc/autoscalingPolicy:AutoscalingPolicy default {{location}}/{{policy_id}}
// ```
type AutoscalingPolicy struct {
	pulumi.CustomResourceState

	// Basic algorithm for autoscaling.
	// Structure is documented below.
	BasicAlgorithm AutoscalingPolicyBasicAlgorithmPtrOutput `pulumi:"basicAlgorithm"`
	// The  location where the autoscaling policy should reside.
	// The default value is `global`.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The "resource name" of the autoscaling policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 50 characters.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Describes how the autoscaler will operate for secondary workers.
	// Structure is documented below.
	SecondaryWorkerConfig AutoscalingPolicySecondaryWorkerConfigPtrOutput `pulumi:"secondaryWorkerConfig"`
	// Describes how the autoscaler will operate for primary workers.
	// Structure is documented below.
	WorkerConfig AutoscalingPolicyWorkerConfigPtrOutput `pulumi:"workerConfig"`
}

// NewAutoscalingPolicy registers a new resource with the given unique name, arguments, and options.
func NewAutoscalingPolicy(ctx *pulumi.Context,
	name string, args *AutoscalingPolicyArgs, opts ...pulumi.ResourceOption) (*AutoscalingPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	var resource AutoscalingPolicy
	err := ctx.RegisterResource("gcp:dataproc/autoscalingPolicy:AutoscalingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutoscalingPolicy gets an existing AutoscalingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutoscalingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutoscalingPolicyState, opts ...pulumi.ResourceOption) (*AutoscalingPolicy, error) {
	var resource AutoscalingPolicy
	err := ctx.ReadResource("gcp:dataproc/autoscalingPolicy:AutoscalingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutoscalingPolicy resources.
type autoscalingPolicyState struct {
	// Basic algorithm for autoscaling.
	// Structure is documented below.
	BasicAlgorithm *AutoscalingPolicyBasicAlgorithm `pulumi:"basicAlgorithm"`
	// The  location where the autoscaling policy should reside.
	// The default value is `global`.
	Location *string `pulumi:"location"`
	// The "resource name" of the autoscaling policy.
	Name *string `pulumi:"name"`
	// The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 50 characters.
	PolicyId *string `pulumi:"policyId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Describes how the autoscaler will operate for secondary workers.
	// Structure is documented below.
	SecondaryWorkerConfig *AutoscalingPolicySecondaryWorkerConfig `pulumi:"secondaryWorkerConfig"`
	// Describes how the autoscaler will operate for primary workers.
	// Structure is documented below.
	WorkerConfig *AutoscalingPolicyWorkerConfig `pulumi:"workerConfig"`
}

type AutoscalingPolicyState struct {
	// Basic algorithm for autoscaling.
	// Structure is documented below.
	BasicAlgorithm AutoscalingPolicyBasicAlgorithmPtrInput
	// The  location where the autoscaling policy should reside.
	// The default value is `global`.
	Location pulumi.StringPtrInput
	// The "resource name" of the autoscaling policy.
	Name pulumi.StringPtrInput
	// The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 50 characters.
	PolicyId pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Describes how the autoscaler will operate for secondary workers.
	// Structure is documented below.
	SecondaryWorkerConfig AutoscalingPolicySecondaryWorkerConfigPtrInput
	// Describes how the autoscaler will operate for primary workers.
	// Structure is documented below.
	WorkerConfig AutoscalingPolicyWorkerConfigPtrInput
}

func (AutoscalingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*autoscalingPolicyState)(nil)).Elem()
}

type autoscalingPolicyArgs struct {
	// Basic algorithm for autoscaling.
	// Structure is documented below.
	BasicAlgorithm *AutoscalingPolicyBasicAlgorithm `pulumi:"basicAlgorithm"`
	// The  location where the autoscaling policy should reside.
	// The default value is `global`.
	Location *string `pulumi:"location"`
	// The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 50 characters.
	PolicyId string `pulumi:"policyId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Describes how the autoscaler will operate for secondary workers.
	// Structure is documented below.
	SecondaryWorkerConfig *AutoscalingPolicySecondaryWorkerConfig `pulumi:"secondaryWorkerConfig"`
	// Describes how the autoscaler will operate for primary workers.
	// Structure is documented below.
	WorkerConfig *AutoscalingPolicyWorkerConfig `pulumi:"workerConfig"`
}

// The set of arguments for constructing a AutoscalingPolicy resource.
type AutoscalingPolicyArgs struct {
	// Basic algorithm for autoscaling.
	// Structure is documented below.
	BasicAlgorithm AutoscalingPolicyBasicAlgorithmPtrInput
	// The  location where the autoscaling policy should reside.
	// The default value is `global`.
	Location pulumi.StringPtrInput
	// The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 50 characters.
	PolicyId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Describes how the autoscaler will operate for secondary workers.
	// Structure is documented below.
	SecondaryWorkerConfig AutoscalingPolicySecondaryWorkerConfigPtrInput
	// Describes how the autoscaler will operate for primary workers.
	// Structure is documented below.
	WorkerConfig AutoscalingPolicyWorkerConfigPtrInput
}

func (AutoscalingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autoscalingPolicyArgs)(nil)).Elem()
}

type AutoscalingPolicyInput interface {
	pulumi.Input

	ToAutoscalingPolicyOutput() AutoscalingPolicyOutput
	ToAutoscalingPolicyOutputWithContext(ctx context.Context) AutoscalingPolicyOutput
}

func (*AutoscalingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicy)(nil))
}

func (i *AutoscalingPolicy) ToAutoscalingPolicyOutput() AutoscalingPolicyOutput {
	return i.ToAutoscalingPolicyOutputWithContext(context.Background())
}

func (i *AutoscalingPolicy) ToAutoscalingPolicyOutputWithContext(ctx context.Context) AutoscalingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyOutput)
}

func (i *AutoscalingPolicy) ToAutoscalingPolicyPtrOutput() AutoscalingPolicyPtrOutput {
	return i.ToAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i *AutoscalingPolicy) ToAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyPtrOutput)
}

type AutoscalingPolicyPtrInput interface {
	pulumi.Input

	ToAutoscalingPolicyPtrOutput() AutoscalingPolicyPtrOutput
	ToAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalingPolicyPtrOutput
}

type autoscalingPolicyPtrType AutoscalingPolicyArgs

func (*autoscalingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicy)(nil))
}

func (i *autoscalingPolicyPtrType) ToAutoscalingPolicyPtrOutput() AutoscalingPolicyPtrOutput {
	return i.ToAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i *autoscalingPolicyPtrType) ToAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyPtrOutput)
}

// AutoscalingPolicyArrayInput is an input type that accepts AutoscalingPolicyArray and AutoscalingPolicyArrayOutput values.
// You can construct a concrete instance of `AutoscalingPolicyArrayInput` via:
//
//          AutoscalingPolicyArray{ AutoscalingPolicyArgs{...} }
type AutoscalingPolicyArrayInput interface {
	pulumi.Input

	ToAutoscalingPolicyArrayOutput() AutoscalingPolicyArrayOutput
	ToAutoscalingPolicyArrayOutputWithContext(context.Context) AutoscalingPolicyArrayOutput
}

type AutoscalingPolicyArray []AutoscalingPolicyInput

func (AutoscalingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AutoscalingPolicy)(nil))
}

func (i AutoscalingPolicyArray) ToAutoscalingPolicyArrayOutput() AutoscalingPolicyArrayOutput {
	return i.ToAutoscalingPolicyArrayOutputWithContext(context.Background())
}

func (i AutoscalingPolicyArray) ToAutoscalingPolicyArrayOutputWithContext(ctx context.Context) AutoscalingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyArrayOutput)
}

// AutoscalingPolicyMapInput is an input type that accepts AutoscalingPolicyMap and AutoscalingPolicyMapOutput values.
// You can construct a concrete instance of `AutoscalingPolicyMapInput` via:
//
//          AutoscalingPolicyMap{ "key": AutoscalingPolicyArgs{...} }
type AutoscalingPolicyMapInput interface {
	pulumi.Input

	ToAutoscalingPolicyMapOutput() AutoscalingPolicyMapOutput
	ToAutoscalingPolicyMapOutputWithContext(context.Context) AutoscalingPolicyMapOutput
}

type AutoscalingPolicyMap map[string]AutoscalingPolicyInput

func (AutoscalingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AutoscalingPolicy)(nil))
}

func (i AutoscalingPolicyMap) ToAutoscalingPolicyMapOutput() AutoscalingPolicyMapOutput {
	return i.ToAutoscalingPolicyMapOutputWithContext(context.Background())
}

func (i AutoscalingPolicyMap) ToAutoscalingPolicyMapOutputWithContext(ctx context.Context) AutoscalingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyMapOutput)
}

type AutoscalingPolicyOutput struct {
	*pulumi.OutputState
}

func (AutoscalingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicy)(nil))
}

func (o AutoscalingPolicyOutput) ToAutoscalingPolicyOutput() AutoscalingPolicyOutput {
	return o
}

func (o AutoscalingPolicyOutput) ToAutoscalingPolicyOutputWithContext(ctx context.Context) AutoscalingPolicyOutput {
	return o
}

func (o AutoscalingPolicyOutput) ToAutoscalingPolicyPtrOutput() AutoscalingPolicyPtrOutput {
	return o.ToAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (o AutoscalingPolicyOutput) ToAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalingPolicyPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicy) *AutoscalingPolicy {
		return &v
	}).(AutoscalingPolicyPtrOutput)
}

type AutoscalingPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (AutoscalingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicy)(nil))
}

func (o AutoscalingPolicyPtrOutput) ToAutoscalingPolicyPtrOutput() AutoscalingPolicyPtrOutput {
	return o
}

func (o AutoscalingPolicyPtrOutput) ToAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalingPolicyPtrOutput {
	return o
}

type AutoscalingPolicyArrayOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalingPolicy)(nil))
}

func (o AutoscalingPolicyArrayOutput) ToAutoscalingPolicyArrayOutput() AutoscalingPolicyArrayOutput {
	return o
}

func (o AutoscalingPolicyArrayOutput) ToAutoscalingPolicyArrayOutputWithContext(ctx context.Context) AutoscalingPolicyArrayOutput {
	return o
}

func (o AutoscalingPolicyArrayOutput) Index(i pulumi.IntInput) AutoscalingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscalingPolicy {
		return vs[0].([]AutoscalingPolicy)[vs[1].(int)]
	}).(AutoscalingPolicyOutput)
}

type AutoscalingPolicyMapOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AutoscalingPolicy)(nil))
}

func (o AutoscalingPolicyMapOutput) ToAutoscalingPolicyMapOutput() AutoscalingPolicyMapOutput {
	return o
}

func (o AutoscalingPolicyMapOutput) ToAutoscalingPolicyMapOutputWithContext(ctx context.Context) AutoscalingPolicyMapOutput {
	return o
}

func (o AutoscalingPolicyMapOutput) MapIndex(k pulumi.StringInput) AutoscalingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AutoscalingPolicy {
		return vs[0].(map[string]AutoscalingPolicy)[vs[1].(string)]
	}).(AutoscalingPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(AutoscalingPolicyOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyArrayOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyMapOutput{})
}
