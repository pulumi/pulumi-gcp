// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the current IAM policy data for federation
//
// ## example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.LookupMetastoreFederationIamPolicy(ctx, &dataproc.LookupMetastoreFederationIamPolicyArgs{
//				Project:      pulumi.StringRef(_default.Project),
//				Location:     pulumi.StringRef(_default.Location),
//				FederationId: _default.FederationId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupMetastoreFederationIamPolicy(ctx *pulumi.Context, args *LookupMetastoreFederationIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupMetastoreFederationIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &LookupMetastoreFederationIamPolicyResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &LookupMetastoreFederationIamPolicyResult{}, errors.New("DependsOn is not supported for direct form invoke LookupMetastoreFederationIamPolicy, use LookupMetastoreFederationIamPolicyOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &LookupMetastoreFederationIamPolicyResult{}, errors.New("DependsOnInputs is not supported for direct form invoke LookupMetastoreFederationIamPolicy, use LookupMetastoreFederationIamPolicyOutput instead")
	}
	var rv LookupMetastoreFederationIamPolicyResult
	err := ctx.Invoke("gcp:dataproc/getMetastoreFederationIamPolicy:getMetastoreFederationIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMetastoreFederationIamPolicy.
type LookupMetastoreFederationIamPolicyArgs struct {
	FederationId string `pulumi:"federationId"`
	// The location where the metastore federation should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getMetastoreFederationIamPolicy.
type LookupMetastoreFederationIamPolicyResult struct {
	// (Computed) The etag of the IAM policy.
	Etag         string `pulumi:"etag"`
	FederationId string `pulumi:"federationId"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// (Required only by `dataproc.MetastoreFederationIamPolicy`) The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	Project    string `pulumi:"project"`
}

func LookupMetastoreFederationIamPolicyOutput(ctx *pulumi.Context, args LookupMetastoreFederationIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupMetastoreFederationIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMetastoreFederationIamPolicyResultOutput, error) {
			args := v.(LookupMetastoreFederationIamPolicyArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupMetastoreFederationIamPolicyResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("gcp:dataproc/getMetastoreFederationIamPolicy:getMetastoreFederationIamPolicy", args, &rv, "", opts...)
			if err != nil {
				return LookupMetastoreFederationIamPolicyResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupMetastoreFederationIamPolicyResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(LookupMetastoreFederationIamPolicyResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupMetastoreFederationIamPolicyResultOutput), nil
			}
			return output, nil
		}).(LookupMetastoreFederationIamPolicyResultOutput)
}

// A collection of arguments for invoking getMetastoreFederationIamPolicy.
type LookupMetastoreFederationIamPolicyOutputArgs struct {
	FederationId pulumi.StringInput `pulumi:"federationId"`
	// The location where the metastore federation should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupMetastoreFederationIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetastoreFederationIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getMetastoreFederationIamPolicy.
type LookupMetastoreFederationIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupMetastoreFederationIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetastoreFederationIamPolicyResult)(nil)).Elem()
}

func (o LookupMetastoreFederationIamPolicyResultOutput) ToLookupMetastoreFederationIamPolicyResultOutput() LookupMetastoreFederationIamPolicyResultOutput {
	return o
}

func (o LookupMetastoreFederationIamPolicyResultOutput) ToLookupMetastoreFederationIamPolicyResultOutputWithContext(ctx context.Context) LookupMetastoreFederationIamPolicyResultOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o LookupMetastoreFederationIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreFederationIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

func (o LookupMetastoreFederationIamPolicyResultOutput) FederationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreFederationIamPolicyResult) string { return v.FederationId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMetastoreFederationIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreFederationIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMetastoreFederationIamPolicyResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreFederationIamPolicyResult) string { return v.Location }).(pulumi.StringOutput)
}

// (Required only by `dataproc.MetastoreFederationIamPolicy`) The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o LookupMetastoreFederationIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreFederationIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupMetastoreFederationIamPolicyResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetastoreFederationIamPolicyResult) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMetastoreFederationIamPolicyResultOutput{})
}
