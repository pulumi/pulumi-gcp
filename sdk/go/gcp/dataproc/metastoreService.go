// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A managed metastore service that serves metadata queries.
//
// ## Example Usage
// ### Dataproc Metastore Service Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/dataproc"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := dataproc.NewMetastoreService(ctx, "_default", &dataproc.MetastoreServiceArgs{
// 			ServiceId: pulumi.String("metastore-srv"),
// 			Location:  pulumi.String("us-central1"),
// 			Port:      pulumi.Int(9080),
// 			Tier:      pulumi.String("DEVELOPER"),
// 			MaintenanceWindow: &dataproc.MetastoreServiceMaintenanceWindowArgs{
// 				HourOfDay: pulumi.Int(2),
// 				DayOfWeek: pulumi.String("SUNDAY"),
// 			},
// 			HiveMetastoreConfig: &dataproc.MetastoreServiceHiveMetastoreConfigArgs{
// 				Version: pulumi.String("2.3.6"),
// 			},
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Service can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:dataproc/metastoreService:MetastoreService default projects/{{project}}/locations/{{location}}/services/{{service_id}}
// ```
//
// ```sh
//  $ pulumi import gcp:dataproc/metastoreService:MetastoreService default {{project}}/{{location}}/{{service_id}}
// ```
//
// ```sh
//  $ pulumi import gcp:dataproc/metastoreService:MetastoreService default {{location}}/{{service_id}}
// ```
type MetastoreService struct {
	pulumi.CustomResourceState

	// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
	ArtifactGcsUri pulumi.StringOutput `pulumi:"artifactGcsUri"`
	// The URI of the endpoint used to access the metastore service.
	EndpointUri pulumi.StringOutput `pulumi:"endpointUri"`
	// Configuration information specific to running Hive metastore software as the metastore service.
	// Structure is documented below.
	HiveMetastoreConfig MetastoreServiceHiveMetastoreConfigPtrOutput `pulumi:"hiveMetastoreConfig"`
	// User-defined labels for the metastore service.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The  location where the autoscaling policy should reside.
	// The default value is `global`.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The one hour maintenance window of the metastore service.
	// This specifies when the service can be restarted for maintenance purposes in UTC time.
	// Structure is documented below.
	MaintenanceWindow MetastoreServiceMaintenanceWindowPtrOutput `pulumi:"maintenanceWindow"`
	// The relative resource name of the metastore service.
	Name pulumi.StringOutput `pulumi:"name"`
	// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
	// "projects/{projectNumber}/global/networks/{network_id}".
	Network pulumi.StringOutput `pulumi:"network"`
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port pulumi.IntOutput `pulumi:"port"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 63 characters.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// The current state of the metastore service.
	State pulumi.StringOutput `pulumi:"state"`
	// Additional information about the current state of the metastore service, if available.
	StateMessage pulumi.StringOutput `pulumi:"stateMessage"`
	// The tier of the service.
	// Possible values are `DEVELOPER` and `ENTERPRISE`.
	Tier pulumi.StringOutput `pulumi:"tier"`
}

// NewMetastoreService registers a new resource with the given unique name, arguments, and options.
func NewMetastoreService(ctx *pulumi.Context,
	name string, args *MetastoreServiceArgs, opts ...pulumi.ResourceOption) (*MetastoreService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	var resource MetastoreService
	err := ctx.RegisterResource("gcp:dataproc/metastoreService:MetastoreService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetastoreService gets an existing MetastoreService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetastoreService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetastoreServiceState, opts ...pulumi.ResourceOption) (*MetastoreService, error) {
	var resource MetastoreService
	err := ctx.ReadResource("gcp:dataproc/metastoreService:MetastoreService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetastoreService resources.
type metastoreServiceState struct {
	// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
	ArtifactGcsUri *string `pulumi:"artifactGcsUri"`
	// The URI of the endpoint used to access the metastore service.
	EndpointUri *string `pulumi:"endpointUri"`
	// Configuration information specific to running Hive metastore software as the metastore service.
	// Structure is documented below.
	HiveMetastoreConfig *MetastoreServiceHiveMetastoreConfig `pulumi:"hiveMetastoreConfig"`
	// User-defined labels for the metastore service.
	Labels map[string]string `pulumi:"labels"`
	// The  location where the autoscaling policy should reside.
	// The default value is `global`.
	Location *string `pulumi:"location"`
	// The one hour maintenance window of the metastore service.
	// This specifies when the service can be restarted for maintenance purposes in UTC time.
	// Structure is documented below.
	MaintenanceWindow *MetastoreServiceMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The relative resource name of the metastore service.
	Name *string `pulumi:"name"`
	// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
	// "projects/{projectNumber}/global/networks/{network_id}".
	Network *string `pulumi:"network"`
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port *int `pulumi:"port"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 63 characters.
	ServiceId *string `pulumi:"serviceId"`
	// The current state of the metastore service.
	State *string `pulumi:"state"`
	// Additional information about the current state of the metastore service, if available.
	StateMessage *string `pulumi:"stateMessage"`
	// The tier of the service.
	// Possible values are `DEVELOPER` and `ENTERPRISE`.
	Tier *string `pulumi:"tier"`
}

type MetastoreServiceState struct {
	// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
	ArtifactGcsUri pulumi.StringPtrInput
	// The URI of the endpoint used to access the metastore service.
	EndpointUri pulumi.StringPtrInput
	// Configuration information specific to running Hive metastore software as the metastore service.
	// Structure is documented below.
	HiveMetastoreConfig MetastoreServiceHiveMetastoreConfigPtrInput
	// User-defined labels for the metastore service.
	Labels pulumi.StringMapInput
	// The  location where the autoscaling policy should reside.
	// The default value is `global`.
	Location pulumi.StringPtrInput
	// The one hour maintenance window of the metastore service.
	// This specifies when the service can be restarted for maintenance purposes in UTC time.
	// Structure is documented below.
	MaintenanceWindow MetastoreServiceMaintenanceWindowPtrInput
	// The relative resource name of the metastore service.
	Name pulumi.StringPtrInput
	// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
	// "projects/{projectNumber}/global/networks/{network_id}".
	Network pulumi.StringPtrInput
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 63 characters.
	ServiceId pulumi.StringPtrInput
	// The current state of the metastore service.
	State pulumi.StringPtrInput
	// Additional information about the current state of the metastore service, if available.
	StateMessage pulumi.StringPtrInput
	// The tier of the service.
	// Possible values are `DEVELOPER` and `ENTERPRISE`.
	Tier pulumi.StringPtrInput
}

func (MetastoreServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreServiceState)(nil)).Elem()
}

type metastoreServiceArgs struct {
	// Configuration information specific to running Hive metastore software as the metastore service.
	// Structure is documented below.
	HiveMetastoreConfig *MetastoreServiceHiveMetastoreConfig `pulumi:"hiveMetastoreConfig"`
	// User-defined labels for the metastore service.
	Labels map[string]string `pulumi:"labels"`
	// The  location where the autoscaling policy should reside.
	// The default value is `global`.
	Location *string `pulumi:"location"`
	// The one hour maintenance window of the metastore service.
	// This specifies when the service can be restarted for maintenance purposes in UTC time.
	// Structure is documented below.
	MaintenanceWindow *MetastoreServiceMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
	// "projects/{projectNumber}/global/networks/{network_id}".
	Network *string `pulumi:"network"`
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port *int `pulumi:"port"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 63 characters.
	ServiceId string `pulumi:"serviceId"`
	// The tier of the service.
	// Possible values are `DEVELOPER` and `ENTERPRISE`.
	Tier *string `pulumi:"tier"`
}

// The set of arguments for constructing a MetastoreService resource.
type MetastoreServiceArgs struct {
	// Configuration information specific to running Hive metastore software as the metastore service.
	// Structure is documented below.
	HiveMetastoreConfig MetastoreServiceHiveMetastoreConfigPtrInput
	// User-defined labels for the metastore service.
	Labels pulumi.StringMapInput
	// The  location where the autoscaling policy should reside.
	// The default value is `global`.
	Location pulumi.StringPtrInput
	// The one hour maintenance window of the metastore service.
	// This specifies when the service can be restarted for maintenance purposes in UTC time.
	// Structure is documented below.
	MaintenanceWindow MetastoreServiceMaintenanceWindowPtrInput
	// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
	// "projects/{projectNumber}/global/networks/{network_id}".
	Network pulumi.StringPtrInput
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 63 characters.
	ServiceId pulumi.StringInput
	// The tier of the service.
	// Possible values are `DEVELOPER` and `ENTERPRISE`.
	Tier pulumi.StringPtrInput
}

func (MetastoreServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreServiceArgs)(nil)).Elem()
}

type MetastoreServiceInput interface {
	pulumi.Input

	ToMetastoreServiceOutput() MetastoreServiceOutput
	ToMetastoreServiceOutputWithContext(ctx context.Context) MetastoreServiceOutput
}

func (*MetastoreService) ElementType() reflect.Type {
	return reflect.TypeOf((*MetastoreService)(nil))
}

func (i *MetastoreService) ToMetastoreServiceOutput() MetastoreServiceOutput {
	return i.ToMetastoreServiceOutputWithContext(context.Background())
}

func (i *MetastoreService) ToMetastoreServiceOutputWithContext(ctx context.Context) MetastoreServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreServiceOutput)
}

func (i *MetastoreService) ToMetastoreServicePtrOutput() MetastoreServicePtrOutput {
	return i.ToMetastoreServicePtrOutputWithContext(context.Background())
}

func (i *MetastoreService) ToMetastoreServicePtrOutputWithContext(ctx context.Context) MetastoreServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreServicePtrOutput)
}

type MetastoreServicePtrInput interface {
	pulumi.Input

	ToMetastoreServicePtrOutput() MetastoreServicePtrOutput
	ToMetastoreServicePtrOutputWithContext(ctx context.Context) MetastoreServicePtrOutput
}

type metastoreServicePtrType MetastoreServiceArgs

func (*metastoreServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreService)(nil))
}

func (i *metastoreServicePtrType) ToMetastoreServicePtrOutput() MetastoreServicePtrOutput {
	return i.ToMetastoreServicePtrOutputWithContext(context.Background())
}

func (i *metastoreServicePtrType) ToMetastoreServicePtrOutputWithContext(ctx context.Context) MetastoreServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreServicePtrOutput)
}

// MetastoreServiceArrayInput is an input type that accepts MetastoreServiceArray and MetastoreServiceArrayOutput values.
// You can construct a concrete instance of `MetastoreServiceArrayInput` via:
//
//          MetastoreServiceArray{ MetastoreServiceArgs{...} }
type MetastoreServiceArrayInput interface {
	pulumi.Input

	ToMetastoreServiceArrayOutput() MetastoreServiceArrayOutput
	ToMetastoreServiceArrayOutputWithContext(context.Context) MetastoreServiceArrayOutput
}

type MetastoreServiceArray []MetastoreServiceInput

func (MetastoreServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreService)(nil)).Elem()
}

func (i MetastoreServiceArray) ToMetastoreServiceArrayOutput() MetastoreServiceArrayOutput {
	return i.ToMetastoreServiceArrayOutputWithContext(context.Background())
}

func (i MetastoreServiceArray) ToMetastoreServiceArrayOutputWithContext(ctx context.Context) MetastoreServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreServiceArrayOutput)
}

// MetastoreServiceMapInput is an input type that accepts MetastoreServiceMap and MetastoreServiceMapOutput values.
// You can construct a concrete instance of `MetastoreServiceMapInput` via:
//
//          MetastoreServiceMap{ "key": MetastoreServiceArgs{...} }
type MetastoreServiceMapInput interface {
	pulumi.Input

	ToMetastoreServiceMapOutput() MetastoreServiceMapOutput
	ToMetastoreServiceMapOutputWithContext(context.Context) MetastoreServiceMapOutput
}

type MetastoreServiceMap map[string]MetastoreServiceInput

func (MetastoreServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreService)(nil)).Elem()
}

func (i MetastoreServiceMap) ToMetastoreServiceMapOutput() MetastoreServiceMapOutput {
	return i.ToMetastoreServiceMapOutputWithContext(context.Background())
}

func (i MetastoreServiceMap) ToMetastoreServiceMapOutputWithContext(ctx context.Context) MetastoreServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreServiceMapOutput)
}

type MetastoreServiceOutput struct{ *pulumi.OutputState }

func (MetastoreServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetastoreService)(nil))
}

func (o MetastoreServiceOutput) ToMetastoreServiceOutput() MetastoreServiceOutput {
	return o
}

func (o MetastoreServiceOutput) ToMetastoreServiceOutputWithContext(ctx context.Context) MetastoreServiceOutput {
	return o
}

func (o MetastoreServiceOutput) ToMetastoreServicePtrOutput() MetastoreServicePtrOutput {
	return o.ToMetastoreServicePtrOutputWithContext(context.Background())
}

func (o MetastoreServiceOutput) ToMetastoreServicePtrOutputWithContext(ctx context.Context) MetastoreServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetastoreService) *MetastoreService {
		return &v
	}).(MetastoreServicePtrOutput)
}

type MetastoreServicePtrOutput struct{ *pulumi.OutputState }

func (MetastoreServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreService)(nil))
}

func (o MetastoreServicePtrOutput) ToMetastoreServicePtrOutput() MetastoreServicePtrOutput {
	return o
}

func (o MetastoreServicePtrOutput) ToMetastoreServicePtrOutputWithContext(ctx context.Context) MetastoreServicePtrOutput {
	return o
}

func (o MetastoreServicePtrOutput) Elem() MetastoreServiceOutput {
	return o.ApplyT(func(v *MetastoreService) MetastoreService {
		if v != nil {
			return *v
		}
		var ret MetastoreService
		return ret
	}).(MetastoreServiceOutput)
}

type MetastoreServiceArrayOutput struct{ *pulumi.OutputState }

func (MetastoreServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetastoreService)(nil))
}

func (o MetastoreServiceArrayOutput) ToMetastoreServiceArrayOutput() MetastoreServiceArrayOutput {
	return o
}

func (o MetastoreServiceArrayOutput) ToMetastoreServiceArrayOutputWithContext(ctx context.Context) MetastoreServiceArrayOutput {
	return o
}

func (o MetastoreServiceArrayOutput) Index(i pulumi.IntInput) MetastoreServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetastoreService {
		return vs[0].([]MetastoreService)[vs[1].(int)]
	}).(MetastoreServiceOutput)
}

type MetastoreServiceMapOutput struct{ *pulumi.OutputState }

func (MetastoreServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MetastoreService)(nil))
}

func (o MetastoreServiceMapOutput) ToMetastoreServiceMapOutput() MetastoreServiceMapOutput {
	return o
}

func (o MetastoreServiceMapOutput) ToMetastoreServiceMapOutputWithContext(ctx context.Context) MetastoreServiceMapOutput {
	return o
}

func (o MetastoreServiceMapOutput) MapIndex(k pulumi.StringInput) MetastoreServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MetastoreService {
		return vs[0].(map[string]MetastoreService)[vs[1].(string)]
	}).(MetastoreServiceOutput)
}

func init() {
	pulumi.RegisterOutputType(MetastoreServiceOutput{})
	pulumi.RegisterOutputType(MetastoreServicePtrOutput{})
	pulumi.RegisterOutputType(MetastoreServiceArrayOutput{})
	pulumi.RegisterOutputType(MetastoreServiceMapOutput{})
}
