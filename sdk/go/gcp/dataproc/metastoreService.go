// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A managed metastore service that serves metadata queries.
//
// To get more information about Service, see:
//
// * [API documentation](https://cloud.google.com/dataproc-metastore/docs/reference/rest/v1/projects.locations.services)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/dataproc-metastore/docs/overview)
//
// ## Example Usage
//
// ## Import
//
// # Service can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:dataproc/metastoreService:MetastoreService default projects/{{project}}/locations/{{location}}/services/{{service_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataproc/metastoreService:MetastoreService default {{project}}/{{location}}/{{service_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataproc/metastoreService:MetastoreService default {{location}}/{{service_id}}
//
// ```
type MetastoreService struct {
	pulumi.CustomResourceState

	// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
	ArtifactGcsUri pulumi.StringOutput `pulumi:"artifactGcsUri"`
	// The database type that the Metastore service stores its data.
	// Default value is `MYSQL`.
	// Possible values are: `MYSQL`, `SPANNER`.
	DatabaseType pulumi.StringPtrOutput `pulumi:"databaseType"`
	// Information used to configure the Dataproc Metastore service to encrypt
	// customer data at rest.
	// Structure is documented below.
	EncryptionConfig MetastoreServiceEncryptionConfigPtrOutput `pulumi:"encryptionConfig"`
	// (Output)
	// The URI of the endpoint used to access the metastore service.
	EndpointUri pulumi.StringOutput `pulumi:"endpointUri"`
	// Configuration information specific to running Hive metastore software as the metastore service.
	// Structure is documented below.
	HiveMetastoreConfig MetastoreServiceHiveMetastoreConfigPtrOutput `pulumi:"hiveMetastoreConfig"`
	// User-defined labels for the metastore service.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location where the metastore service should reside.
	// The default value is `global`.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The one hour maintenance window of the metastore service.
	// This specifies when the service can be restarted for maintenance purposes in UTC time.
	// Maintenance window is not needed for services with the `SPANNER` database type.
	// Structure is documented below.
	MaintenanceWindow MetastoreServiceMaintenanceWindowPtrOutput `pulumi:"maintenanceWindow"`
	// The setting that defines how metastore metadata should be integrated with external services and systems.
	MetadataIntegration MetastoreServiceMetadataIntegrationPtrOutput `pulumi:"metadataIntegration"`
	// The relative resource name of the metastore service.
	Name pulumi.StringOutput `pulumi:"name"`
	// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
	// "projects/{projectNumber}/global/networks/{network_id}".
	Network pulumi.StringOutput `pulumi:"network"`
	// The configuration specifying the network settings for the Dataproc Metastore service.
	// Structure is documented below.
	NetworkConfig MetastoreServiceNetworkConfigPtrOutput `pulumi:"networkConfig"`
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port pulumi.IntOutput `pulumi:"port"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The release channel of the service. If unspecified, defaults to `STABLE`.
	// Default value is `STABLE`.
	// Possible values are: `CANARY`, `STABLE`.
	ReleaseChannel pulumi.StringPtrOutput `pulumi:"releaseChannel"`
	// Represents the scaling configuration of a metastore service.
	// Structure is documented below.
	ScalingConfig MetastoreServiceScalingConfigPtrOutput `pulumi:"scalingConfig"`
	// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 63 characters.
	//
	// ***
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// The current state of the metastore service.
	State pulumi.StringOutput `pulumi:"state"`
	// Additional information about the current state of the metastore service, if available.
	StateMessage pulumi.StringOutput `pulumi:"stateMessage"`
	// The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
	// Structure is documented below.
	TelemetryConfig MetastoreServiceTelemetryConfigOutput `pulumi:"telemetryConfig"`
	// The tier of the service.
	// Possible values are: `DEVELOPER`, `ENTERPRISE`.
	Tier pulumi.StringOutput `pulumi:"tier"`
	// The globally unique resource identifier of the metastore service.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewMetastoreService registers a new resource with the given unique name, arguments, and options.
func NewMetastoreService(ctx *pulumi.Context,
	name string, args *MetastoreServiceArgs, opts ...pulumi.ResourceOption) (*MetastoreService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetastoreService
	err := ctx.RegisterResource("gcp:dataproc/metastoreService:MetastoreService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetastoreService gets an existing MetastoreService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetastoreService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetastoreServiceState, opts ...pulumi.ResourceOption) (*MetastoreService, error) {
	var resource MetastoreService
	err := ctx.ReadResource("gcp:dataproc/metastoreService:MetastoreService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetastoreService resources.
type metastoreServiceState struct {
	// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
	ArtifactGcsUri *string `pulumi:"artifactGcsUri"`
	// The database type that the Metastore service stores its data.
	// Default value is `MYSQL`.
	// Possible values are: `MYSQL`, `SPANNER`.
	DatabaseType *string `pulumi:"databaseType"`
	// Information used to configure the Dataproc Metastore service to encrypt
	// customer data at rest.
	// Structure is documented below.
	EncryptionConfig *MetastoreServiceEncryptionConfig `pulumi:"encryptionConfig"`
	// (Output)
	// The URI of the endpoint used to access the metastore service.
	EndpointUri *string `pulumi:"endpointUri"`
	// Configuration information specific to running Hive metastore software as the metastore service.
	// Structure is documented below.
	HiveMetastoreConfig *MetastoreServiceHiveMetastoreConfig `pulumi:"hiveMetastoreConfig"`
	// User-defined labels for the metastore service.
	Labels map[string]string `pulumi:"labels"`
	// The location where the metastore service should reside.
	// The default value is `global`.
	Location *string `pulumi:"location"`
	// The one hour maintenance window of the metastore service.
	// This specifies when the service can be restarted for maintenance purposes in UTC time.
	// Maintenance window is not needed for services with the `SPANNER` database type.
	// Structure is documented below.
	MaintenanceWindow *MetastoreServiceMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The setting that defines how metastore metadata should be integrated with external services and systems.
	MetadataIntegration *MetastoreServiceMetadataIntegration `pulumi:"metadataIntegration"`
	// The relative resource name of the metastore service.
	Name *string `pulumi:"name"`
	// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
	// "projects/{projectNumber}/global/networks/{network_id}".
	Network *string `pulumi:"network"`
	// The configuration specifying the network settings for the Dataproc Metastore service.
	// Structure is documented below.
	NetworkConfig *MetastoreServiceNetworkConfig `pulumi:"networkConfig"`
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port *int `pulumi:"port"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The release channel of the service. If unspecified, defaults to `STABLE`.
	// Default value is `STABLE`.
	// Possible values are: `CANARY`, `STABLE`.
	ReleaseChannel *string `pulumi:"releaseChannel"`
	// Represents the scaling configuration of a metastore service.
	// Structure is documented below.
	ScalingConfig *MetastoreServiceScalingConfig `pulumi:"scalingConfig"`
	// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 63 characters.
	//
	// ***
	ServiceId *string `pulumi:"serviceId"`
	// The current state of the metastore service.
	State *string `pulumi:"state"`
	// Additional information about the current state of the metastore service, if available.
	StateMessage *string `pulumi:"stateMessage"`
	// The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
	// Structure is documented below.
	TelemetryConfig *MetastoreServiceTelemetryConfig `pulumi:"telemetryConfig"`
	// The tier of the service.
	// Possible values are: `DEVELOPER`, `ENTERPRISE`.
	Tier *string `pulumi:"tier"`
	// The globally unique resource identifier of the metastore service.
	Uid *string `pulumi:"uid"`
}

type MetastoreServiceState struct {
	// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
	ArtifactGcsUri pulumi.StringPtrInput
	// The database type that the Metastore service stores its data.
	// Default value is `MYSQL`.
	// Possible values are: `MYSQL`, `SPANNER`.
	DatabaseType pulumi.StringPtrInput
	// Information used to configure the Dataproc Metastore service to encrypt
	// customer data at rest.
	// Structure is documented below.
	EncryptionConfig MetastoreServiceEncryptionConfigPtrInput
	// (Output)
	// The URI of the endpoint used to access the metastore service.
	EndpointUri pulumi.StringPtrInput
	// Configuration information specific to running Hive metastore software as the metastore service.
	// Structure is documented below.
	HiveMetastoreConfig MetastoreServiceHiveMetastoreConfigPtrInput
	// User-defined labels for the metastore service.
	Labels pulumi.StringMapInput
	// The location where the metastore service should reside.
	// The default value is `global`.
	Location pulumi.StringPtrInput
	// The one hour maintenance window of the metastore service.
	// This specifies when the service can be restarted for maintenance purposes in UTC time.
	// Maintenance window is not needed for services with the `SPANNER` database type.
	// Structure is documented below.
	MaintenanceWindow MetastoreServiceMaintenanceWindowPtrInput
	// The setting that defines how metastore metadata should be integrated with external services and systems.
	MetadataIntegration MetastoreServiceMetadataIntegrationPtrInput
	// The relative resource name of the metastore service.
	Name pulumi.StringPtrInput
	// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
	// "projects/{projectNumber}/global/networks/{network_id}".
	Network pulumi.StringPtrInput
	// The configuration specifying the network settings for the Dataproc Metastore service.
	// Structure is documented below.
	NetworkConfig MetastoreServiceNetworkConfigPtrInput
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The release channel of the service. If unspecified, defaults to `STABLE`.
	// Default value is `STABLE`.
	// Possible values are: `CANARY`, `STABLE`.
	ReleaseChannel pulumi.StringPtrInput
	// Represents the scaling configuration of a metastore service.
	// Structure is documented below.
	ScalingConfig MetastoreServiceScalingConfigPtrInput
	// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 63 characters.
	//
	// ***
	ServiceId pulumi.StringPtrInput
	// The current state of the metastore service.
	State pulumi.StringPtrInput
	// Additional information about the current state of the metastore service, if available.
	StateMessage pulumi.StringPtrInput
	// The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
	// Structure is documented below.
	TelemetryConfig MetastoreServiceTelemetryConfigPtrInput
	// The tier of the service.
	// Possible values are: `DEVELOPER`, `ENTERPRISE`.
	Tier pulumi.StringPtrInput
	// The globally unique resource identifier of the metastore service.
	Uid pulumi.StringPtrInput
}

func (MetastoreServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreServiceState)(nil)).Elem()
}

type metastoreServiceArgs struct {
	// The database type that the Metastore service stores its data.
	// Default value is `MYSQL`.
	// Possible values are: `MYSQL`, `SPANNER`.
	DatabaseType *string `pulumi:"databaseType"`
	// Information used to configure the Dataproc Metastore service to encrypt
	// customer data at rest.
	// Structure is documented below.
	EncryptionConfig *MetastoreServiceEncryptionConfig `pulumi:"encryptionConfig"`
	// Configuration information specific to running Hive metastore software as the metastore service.
	// Structure is documented below.
	HiveMetastoreConfig *MetastoreServiceHiveMetastoreConfig `pulumi:"hiveMetastoreConfig"`
	// User-defined labels for the metastore service.
	Labels map[string]string `pulumi:"labels"`
	// The location where the metastore service should reside.
	// The default value is `global`.
	Location *string `pulumi:"location"`
	// The one hour maintenance window of the metastore service.
	// This specifies when the service can be restarted for maintenance purposes in UTC time.
	// Maintenance window is not needed for services with the `SPANNER` database type.
	// Structure is documented below.
	MaintenanceWindow *MetastoreServiceMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The setting that defines how metastore metadata should be integrated with external services and systems.
	MetadataIntegration *MetastoreServiceMetadataIntegration `pulumi:"metadataIntegration"`
	// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
	// "projects/{projectNumber}/global/networks/{network_id}".
	Network *string `pulumi:"network"`
	// The configuration specifying the network settings for the Dataproc Metastore service.
	// Structure is documented below.
	NetworkConfig *MetastoreServiceNetworkConfig `pulumi:"networkConfig"`
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port *int `pulumi:"port"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The release channel of the service. If unspecified, defaults to `STABLE`.
	// Default value is `STABLE`.
	// Possible values are: `CANARY`, `STABLE`.
	ReleaseChannel *string `pulumi:"releaseChannel"`
	// Represents the scaling configuration of a metastore service.
	// Structure is documented below.
	ScalingConfig *MetastoreServiceScalingConfig `pulumi:"scalingConfig"`
	// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 63 characters.
	//
	// ***
	ServiceId string `pulumi:"serviceId"`
	// The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
	// Structure is documented below.
	TelemetryConfig *MetastoreServiceTelemetryConfig `pulumi:"telemetryConfig"`
	// The tier of the service.
	// Possible values are: `DEVELOPER`, `ENTERPRISE`.
	Tier *string `pulumi:"tier"`
}

// The set of arguments for constructing a MetastoreService resource.
type MetastoreServiceArgs struct {
	// The database type that the Metastore service stores its data.
	// Default value is `MYSQL`.
	// Possible values are: `MYSQL`, `SPANNER`.
	DatabaseType pulumi.StringPtrInput
	// Information used to configure the Dataproc Metastore service to encrypt
	// customer data at rest.
	// Structure is documented below.
	EncryptionConfig MetastoreServiceEncryptionConfigPtrInput
	// Configuration information specific to running Hive metastore software as the metastore service.
	// Structure is documented below.
	HiveMetastoreConfig MetastoreServiceHiveMetastoreConfigPtrInput
	// User-defined labels for the metastore service.
	Labels pulumi.StringMapInput
	// The location where the metastore service should reside.
	// The default value is `global`.
	Location pulumi.StringPtrInput
	// The one hour maintenance window of the metastore service.
	// This specifies when the service can be restarted for maintenance purposes in UTC time.
	// Maintenance window is not needed for services with the `SPANNER` database type.
	// Structure is documented below.
	MaintenanceWindow MetastoreServiceMaintenanceWindowPtrInput
	// The setting that defines how metastore metadata should be integrated with external services and systems.
	MetadataIntegration MetastoreServiceMetadataIntegrationPtrInput
	// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
	// "projects/{projectNumber}/global/networks/{network_id}".
	Network pulumi.StringPtrInput
	// The configuration specifying the network settings for the Dataproc Metastore service.
	// Structure is documented below.
	NetworkConfig MetastoreServiceNetworkConfigPtrInput
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The release channel of the service. If unspecified, defaults to `STABLE`.
	// Default value is `STABLE`.
	// Possible values are: `CANARY`, `STABLE`.
	ReleaseChannel pulumi.StringPtrInput
	// Represents the scaling configuration of a metastore service.
	// Structure is documented below.
	ScalingConfig MetastoreServiceScalingConfigPtrInput
	// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 63 characters.
	//
	// ***
	ServiceId pulumi.StringInput
	// The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
	// Structure is documented below.
	TelemetryConfig MetastoreServiceTelemetryConfigPtrInput
	// The tier of the service.
	// Possible values are: `DEVELOPER`, `ENTERPRISE`.
	Tier pulumi.StringPtrInput
}

func (MetastoreServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreServiceArgs)(nil)).Elem()
}

type MetastoreServiceInput interface {
	pulumi.Input

	ToMetastoreServiceOutput() MetastoreServiceOutput
	ToMetastoreServiceOutputWithContext(ctx context.Context) MetastoreServiceOutput
}

func (*MetastoreService) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreService)(nil)).Elem()
}

func (i *MetastoreService) ToMetastoreServiceOutput() MetastoreServiceOutput {
	return i.ToMetastoreServiceOutputWithContext(context.Background())
}

func (i *MetastoreService) ToMetastoreServiceOutputWithContext(ctx context.Context) MetastoreServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreServiceOutput)
}

func (i *MetastoreService) ToOutput(ctx context.Context) pulumix.Output[*MetastoreService] {
	return pulumix.Output[*MetastoreService]{
		OutputState: i.ToMetastoreServiceOutputWithContext(ctx).OutputState,
	}
}

// MetastoreServiceArrayInput is an input type that accepts MetastoreServiceArray and MetastoreServiceArrayOutput values.
// You can construct a concrete instance of `MetastoreServiceArrayInput` via:
//
//	MetastoreServiceArray{ MetastoreServiceArgs{...} }
type MetastoreServiceArrayInput interface {
	pulumi.Input

	ToMetastoreServiceArrayOutput() MetastoreServiceArrayOutput
	ToMetastoreServiceArrayOutputWithContext(context.Context) MetastoreServiceArrayOutput
}

type MetastoreServiceArray []MetastoreServiceInput

func (MetastoreServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreService)(nil)).Elem()
}

func (i MetastoreServiceArray) ToMetastoreServiceArrayOutput() MetastoreServiceArrayOutput {
	return i.ToMetastoreServiceArrayOutputWithContext(context.Background())
}

func (i MetastoreServiceArray) ToMetastoreServiceArrayOutputWithContext(ctx context.Context) MetastoreServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreServiceArrayOutput)
}

func (i MetastoreServiceArray) ToOutput(ctx context.Context) pulumix.Output[[]*MetastoreService] {
	return pulumix.Output[[]*MetastoreService]{
		OutputState: i.ToMetastoreServiceArrayOutputWithContext(ctx).OutputState,
	}
}

// MetastoreServiceMapInput is an input type that accepts MetastoreServiceMap and MetastoreServiceMapOutput values.
// You can construct a concrete instance of `MetastoreServiceMapInput` via:
//
//	MetastoreServiceMap{ "key": MetastoreServiceArgs{...} }
type MetastoreServiceMapInput interface {
	pulumi.Input

	ToMetastoreServiceMapOutput() MetastoreServiceMapOutput
	ToMetastoreServiceMapOutputWithContext(context.Context) MetastoreServiceMapOutput
}

type MetastoreServiceMap map[string]MetastoreServiceInput

func (MetastoreServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreService)(nil)).Elem()
}

func (i MetastoreServiceMap) ToMetastoreServiceMapOutput() MetastoreServiceMapOutput {
	return i.ToMetastoreServiceMapOutputWithContext(context.Background())
}

func (i MetastoreServiceMap) ToMetastoreServiceMapOutputWithContext(ctx context.Context) MetastoreServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreServiceMapOutput)
}

func (i MetastoreServiceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*MetastoreService] {
	return pulumix.Output[map[string]*MetastoreService]{
		OutputState: i.ToMetastoreServiceMapOutputWithContext(ctx).OutputState,
	}
}

type MetastoreServiceOutput struct{ *pulumi.OutputState }

func (MetastoreServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreService)(nil)).Elem()
}

func (o MetastoreServiceOutput) ToMetastoreServiceOutput() MetastoreServiceOutput {
	return o
}

func (o MetastoreServiceOutput) ToMetastoreServiceOutputWithContext(ctx context.Context) MetastoreServiceOutput {
	return o
}

func (o MetastoreServiceOutput) ToOutput(ctx context.Context) pulumix.Output[*MetastoreService] {
	return pulumix.Output[*MetastoreService]{
		OutputState: o.OutputState,
	}
}

// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
func (o MetastoreServiceOutput) ArtifactGcsUri() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringOutput { return v.ArtifactGcsUri }).(pulumi.StringOutput)
}

// The database type that the Metastore service stores its data.
// Default value is `MYSQL`.
// Possible values are: `MYSQL`, `SPANNER`.
func (o MetastoreServiceOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringPtrOutput { return v.DatabaseType }).(pulumi.StringPtrOutput)
}

// Information used to configure the Dataproc Metastore service to encrypt
// customer data at rest.
// Structure is documented below.
func (o MetastoreServiceOutput) EncryptionConfig() MetastoreServiceEncryptionConfigPtrOutput {
	return o.ApplyT(func(v *MetastoreService) MetastoreServiceEncryptionConfigPtrOutput { return v.EncryptionConfig }).(MetastoreServiceEncryptionConfigPtrOutput)
}

// (Output)
// The URI of the endpoint used to access the metastore service.
func (o MetastoreServiceOutput) EndpointUri() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringOutput { return v.EndpointUri }).(pulumi.StringOutput)
}

// Configuration information specific to running Hive metastore software as the metastore service.
// Structure is documented below.
func (o MetastoreServiceOutput) HiveMetastoreConfig() MetastoreServiceHiveMetastoreConfigPtrOutput {
	return o.ApplyT(func(v *MetastoreService) MetastoreServiceHiveMetastoreConfigPtrOutput { return v.HiveMetastoreConfig }).(MetastoreServiceHiveMetastoreConfigPtrOutput)
}

// User-defined labels for the metastore service.
func (o MetastoreServiceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where the metastore service should reside.
// The default value is `global`.
func (o MetastoreServiceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The one hour maintenance window of the metastore service.
// This specifies when the service can be restarted for maintenance purposes in UTC time.
// Maintenance window is not needed for services with the `SPANNER` database type.
// Structure is documented below.
func (o MetastoreServiceOutput) MaintenanceWindow() MetastoreServiceMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *MetastoreService) MetastoreServiceMaintenanceWindowPtrOutput { return v.MaintenanceWindow }).(MetastoreServiceMaintenanceWindowPtrOutput)
}

// The setting that defines how metastore metadata should be integrated with external services and systems.
func (o MetastoreServiceOutput) MetadataIntegration() MetastoreServiceMetadataIntegrationPtrOutput {
	return o.ApplyT(func(v *MetastoreService) MetastoreServiceMetadataIntegrationPtrOutput { return v.MetadataIntegration }).(MetastoreServiceMetadataIntegrationPtrOutput)
}

// The relative resource name of the metastore service.
func (o MetastoreServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
// "projects/{projectNumber}/global/networks/{network_id}".
func (o MetastoreServiceOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The configuration specifying the network settings for the Dataproc Metastore service.
// Structure is documented below.
func (o MetastoreServiceOutput) NetworkConfig() MetastoreServiceNetworkConfigPtrOutput {
	return o.ApplyT(func(v *MetastoreService) MetastoreServiceNetworkConfigPtrOutput { return v.NetworkConfig }).(MetastoreServiceNetworkConfigPtrOutput)
}

// The TCP port at which the metastore service is reached. Default: 9083.
func (o MetastoreServiceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o MetastoreServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The release channel of the service. If unspecified, defaults to `STABLE`.
// Default value is `STABLE`.
// Possible values are: `CANARY`, `STABLE`.
func (o MetastoreServiceOutput) ReleaseChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringPtrOutput { return v.ReleaseChannel }).(pulumi.StringPtrOutput)
}

// Represents the scaling configuration of a metastore service.
// Structure is documented below.
func (o MetastoreServiceOutput) ScalingConfig() MetastoreServiceScalingConfigPtrOutput {
	return o.ApplyT(func(v *MetastoreService) MetastoreServiceScalingConfigPtrOutput { return v.ScalingConfig }).(MetastoreServiceScalingConfigPtrOutput)
}

// The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
// 3 and 63 characters.
//
// ***
func (o MetastoreServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// The current state of the metastore service.
func (o MetastoreServiceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Additional information about the current state of the metastore service, if available.
func (o MetastoreServiceOutput) StateMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringOutput { return v.StateMessage }).(pulumi.StringOutput)
}

// The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
// Structure is documented below.
func (o MetastoreServiceOutput) TelemetryConfig() MetastoreServiceTelemetryConfigOutput {
	return o.ApplyT(func(v *MetastoreService) MetastoreServiceTelemetryConfigOutput { return v.TelemetryConfig }).(MetastoreServiceTelemetryConfigOutput)
}

// The tier of the service.
// Possible values are: `DEVELOPER`, `ENTERPRISE`.
func (o MetastoreServiceOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringOutput { return v.Tier }).(pulumi.StringOutput)
}

// The globally unique resource identifier of the metastore service.
func (o MetastoreServiceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *MetastoreService) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

type MetastoreServiceArrayOutput struct{ *pulumi.OutputState }

func (MetastoreServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetastoreService)(nil)).Elem()
}

func (o MetastoreServiceArrayOutput) ToMetastoreServiceArrayOutput() MetastoreServiceArrayOutput {
	return o
}

func (o MetastoreServiceArrayOutput) ToMetastoreServiceArrayOutputWithContext(ctx context.Context) MetastoreServiceArrayOutput {
	return o
}

func (o MetastoreServiceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*MetastoreService] {
	return pulumix.Output[[]*MetastoreService]{
		OutputState: o.OutputState,
	}
}

func (o MetastoreServiceArrayOutput) Index(i pulumi.IntInput) MetastoreServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetastoreService {
		return vs[0].([]*MetastoreService)[vs[1].(int)]
	}).(MetastoreServiceOutput)
}

type MetastoreServiceMapOutput struct{ *pulumi.OutputState }

func (MetastoreServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetastoreService)(nil)).Elem()
}

func (o MetastoreServiceMapOutput) ToMetastoreServiceMapOutput() MetastoreServiceMapOutput {
	return o
}

func (o MetastoreServiceMapOutput) ToMetastoreServiceMapOutputWithContext(ctx context.Context) MetastoreServiceMapOutput {
	return o
}

func (o MetastoreServiceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*MetastoreService] {
	return pulumix.Output[map[string]*MetastoreService]{
		OutputState: o.OutputState,
	}
}

func (o MetastoreServiceMapOutput) MapIndex(k pulumi.StringInput) MetastoreServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetastoreService {
		return vs[0].(map[string]*MetastoreService)[vs[1].(string)]
	}).(MetastoreServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreServiceInput)(nil)).Elem(), &MetastoreService{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreServiceArrayInput)(nil)).Elem(), MetastoreServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreServiceMapInput)(nil)).Elem(), MetastoreServiceMap{})
	pulumi.RegisterOutputType(MetastoreServiceOutput{})
	pulumi.RegisterOutputType(MetastoreServiceArrayOutput{})
	pulumi.RegisterOutputType(MetastoreServiceMapOutput{})
}
