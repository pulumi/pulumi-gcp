// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package tags

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A TagKey, used to group a set of TagValues.
//
// To get more information about TagKey, see:
//
// * [API documentation](https://cloud.google.com/resource-manager/reference/rest/v3/tagKeys)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/resource-manager/docs/tags/tags-creating-and-managing)
//
// ## Example Usage
// ### Tag Key Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/tags"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := tags.NewTagKey(ctx, "key", &tags.TagKeyArgs{
// 			Description: pulumi.String("For keyname resources."),
// 			Parent:      pulumi.String("organizations/123456789"),
// 			ShortName:   pulumi.String("keyname"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// TagKey can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:tags/tagKey:TagKey default tagKeys/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:tags/tagKey:TagKey default {{name}}
// ```
type TagKey struct {
	pulumi.CustomResourceState

	// Output only. Creation time. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-assigned description of the TagKey. Must not exceed 256 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The generated numeric id for the TagKey.
	Name pulumi.StringOutput `pulumi:"name"`
	// Output only. Namespaced name of the TagKey.
	NamespacedName pulumi.StringOutput `pulumi:"namespacedName"`
	// Input only. The resource name of the new TagKey's parent. Must be of the form organizations/{org_id}.
	Parent pulumi.StringOutput `pulumi:"parent"`
	// Input only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
	// The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	ShortName pulumi.StringOutput `pulumi:"shortName"`
	// Output only. Update time. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTagKey registers a new resource with the given unique name, arguments, and options.
func NewTagKey(ctx *pulumi.Context,
	name string, args *TagKeyArgs, opts ...pulumi.ResourceOption) (*TagKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	if args.ShortName == nil {
		return nil, errors.New("invalid value for required argument 'ShortName'")
	}
	var resource TagKey
	err := ctx.RegisterResource("gcp:tags/tagKey:TagKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagKey gets an existing TagKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagKeyState, opts ...pulumi.ResourceOption) (*TagKey, error) {
	var resource TagKey
	err := ctx.ReadResource("gcp:tags/tagKey:TagKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagKey resources.
type tagKeyState struct {
	// Output only. Creation time. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// User-assigned description of the TagKey. Must not exceed 256 characters.
	Description *string `pulumi:"description"`
	// The generated numeric id for the TagKey.
	Name *string `pulumi:"name"`
	// Output only. Namespaced name of the TagKey.
	NamespacedName *string `pulumi:"namespacedName"`
	// Input only. The resource name of the new TagKey's parent. Must be of the form organizations/{org_id}.
	Parent *string `pulumi:"parent"`
	// Input only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
	// The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	ShortName *string `pulumi:"shortName"`
	// Output only. Update time. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type TagKeyState struct {
	// Output only. Creation time. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// User-assigned description of the TagKey. Must not exceed 256 characters.
	Description pulumi.StringPtrInput
	// The generated numeric id for the TagKey.
	Name pulumi.StringPtrInput
	// Output only. Namespaced name of the TagKey.
	NamespacedName pulumi.StringPtrInput
	// Input only. The resource name of the new TagKey's parent. Must be of the form organizations/{org_id}.
	Parent pulumi.StringPtrInput
	// Input only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
	// The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	ShortName pulumi.StringPtrInput
	// Output only. Update time. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (TagKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagKeyState)(nil)).Elem()
}

type tagKeyArgs struct {
	// User-assigned description of the TagKey. Must not exceed 256 characters.
	Description *string `pulumi:"description"`
	// Input only. The resource name of the new TagKey's parent. Must be of the form organizations/{org_id}.
	Parent string `pulumi:"parent"`
	// Input only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
	// The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	ShortName string `pulumi:"shortName"`
}

// The set of arguments for constructing a TagKey resource.
type TagKeyArgs struct {
	// User-assigned description of the TagKey. Must not exceed 256 characters.
	Description pulumi.StringPtrInput
	// Input only. The resource name of the new TagKey's parent. Must be of the form organizations/{org_id}.
	Parent pulumi.StringInput
	// Input only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
	// The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	ShortName pulumi.StringInput
}

func (TagKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagKeyArgs)(nil)).Elem()
}

type TagKeyInput interface {
	pulumi.Input

	ToTagKeyOutput() TagKeyOutput
	ToTagKeyOutputWithContext(ctx context.Context) TagKeyOutput
}

func (*TagKey) ElementType() reflect.Type {
	return reflect.TypeOf((*TagKey)(nil))
}

func (i *TagKey) ToTagKeyOutput() TagKeyOutput {
	return i.ToTagKeyOutputWithContext(context.Background())
}

func (i *TagKey) ToTagKeyOutputWithContext(ctx context.Context) TagKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagKeyOutput)
}

func (i *TagKey) ToTagKeyPtrOutput() TagKeyPtrOutput {
	return i.ToTagKeyPtrOutputWithContext(context.Background())
}

func (i *TagKey) ToTagKeyPtrOutputWithContext(ctx context.Context) TagKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagKeyPtrOutput)
}

type TagKeyPtrInput interface {
	pulumi.Input

	ToTagKeyPtrOutput() TagKeyPtrOutput
	ToTagKeyPtrOutputWithContext(ctx context.Context) TagKeyPtrOutput
}

type tagKeyPtrType TagKeyArgs

func (*tagKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagKey)(nil))
}

func (i *tagKeyPtrType) ToTagKeyPtrOutput() TagKeyPtrOutput {
	return i.ToTagKeyPtrOutputWithContext(context.Background())
}

func (i *tagKeyPtrType) ToTagKeyPtrOutputWithContext(ctx context.Context) TagKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagKeyPtrOutput)
}

// TagKeyArrayInput is an input type that accepts TagKeyArray and TagKeyArrayOutput values.
// You can construct a concrete instance of `TagKeyArrayInput` via:
//
//          TagKeyArray{ TagKeyArgs{...} }
type TagKeyArrayInput interface {
	pulumi.Input

	ToTagKeyArrayOutput() TagKeyArrayOutput
	ToTagKeyArrayOutputWithContext(context.Context) TagKeyArrayOutput
}

type TagKeyArray []TagKeyInput

func (TagKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*TagKey)(nil))
}

func (i TagKeyArray) ToTagKeyArrayOutput() TagKeyArrayOutput {
	return i.ToTagKeyArrayOutputWithContext(context.Background())
}

func (i TagKeyArray) ToTagKeyArrayOutputWithContext(ctx context.Context) TagKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagKeyArrayOutput)
}

// TagKeyMapInput is an input type that accepts TagKeyMap and TagKeyMapOutput values.
// You can construct a concrete instance of `TagKeyMapInput` via:
//
//          TagKeyMap{ "key": TagKeyArgs{...} }
type TagKeyMapInput interface {
	pulumi.Input

	ToTagKeyMapOutput() TagKeyMapOutput
	ToTagKeyMapOutputWithContext(context.Context) TagKeyMapOutput
}

type TagKeyMap map[string]TagKeyInput

func (TagKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*TagKey)(nil))
}

func (i TagKeyMap) ToTagKeyMapOutput() TagKeyMapOutput {
	return i.ToTagKeyMapOutputWithContext(context.Background())
}

func (i TagKeyMap) ToTagKeyMapOutputWithContext(ctx context.Context) TagKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagKeyMapOutput)
}

type TagKeyOutput struct {
	*pulumi.OutputState
}

func (TagKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagKey)(nil))
}

func (o TagKeyOutput) ToTagKeyOutput() TagKeyOutput {
	return o
}

func (o TagKeyOutput) ToTagKeyOutputWithContext(ctx context.Context) TagKeyOutput {
	return o
}

func (o TagKeyOutput) ToTagKeyPtrOutput() TagKeyPtrOutput {
	return o.ToTagKeyPtrOutputWithContext(context.Background())
}

func (o TagKeyOutput) ToTagKeyPtrOutputWithContext(ctx context.Context) TagKeyPtrOutput {
	return o.ApplyT(func(v TagKey) *TagKey {
		return &v
	}).(TagKeyPtrOutput)
}

type TagKeyPtrOutput struct {
	*pulumi.OutputState
}

func (TagKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagKey)(nil))
}

func (o TagKeyPtrOutput) ToTagKeyPtrOutput() TagKeyPtrOutput {
	return o
}

func (o TagKeyPtrOutput) ToTagKeyPtrOutputWithContext(ctx context.Context) TagKeyPtrOutput {
	return o
}

type TagKeyArrayOutput struct{ *pulumi.OutputState }

func (TagKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagKey)(nil))
}

func (o TagKeyArrayOutput) ToTagKeyArrayOutput() TagKeyArrayOutput {
	return o
}

func (o TagKeyArrayOutput) ToTagKeyArrayOutputWithContext(ctx context.Context) TagKeyArrayOutput {
	return o
}

func (o TagKeyArrayOutput) Index(i pulumi.IntInput) TagKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagKey {
		return vs[0].([]TagKey)[vs[1].(int)]
	}).(TagKeyOutput)
}

type TagKeyMapOutput struct{ *pulumi.OutputState }

func (TagKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TagKey)(nil))
}

func (o TagKeyMapOutput) ToTagKeyMapOutput() TagKeyMapOutput {
	return o
}

func (o TagKeyMapOutput) ToTagKeyMapOutputWithContext(ctx context.Context) TagKeyMapOutput {
	return o
}

func (o TagKeyMapOutput) MapIndex(k pulumi.StringInput) TagKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TagKey {
		return vs[0].(map[string]TagKey)[vs[1].(string)]
	}).(TagKeyOutput)
}

func init() {
	pulumi.RegisterOutputType(TagKeyOutput{})
	pulumi.RegisterOutputType(TagKeyPtrOutput{})
	pulumi.RegisterOutputType(TagKeyArrayOutput{})
	pulumi.RegisterOutputType(TagKeyMapOutput{})
}
