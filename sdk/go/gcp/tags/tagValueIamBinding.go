// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tags

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Three different resources help you manage your IAM policy for Tags TagValue. Each of these resources serves a different use case:
//
// * `tags.TagValueIamPolicy`: Authoritative. Sets the IAM policy for the tagvalue and replaces any existing policy already attached.
// * `tags.TagValueIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagvalue are preserved.
// * `tags.TagValueIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagvalue are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `tags.TagValueIamPolicy`: Retrieves the IAM policy for the tagvalue
//
// > **Note:** `tags.TagValueIamPolicy` **cannot** be used in conjunction with `tags.TagValueIamBinding` and `tags.TagValueIamMember` or they will fight over what your policy should be.
//
// > **Note:** `tags.TagValueIamBinding` resources **can be** used in conjunction with `tags.TagValueIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* tagValues/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Tags tagvalue IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:tags/tagValueIamBinding:TagValueIamBinding editor "tagValues/{{tag_value}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:tags/tagValueIamBinding:TagValueIamBinding editor "tagValues/{{tag_value}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:tags/tagValueIamBinding:TagValueIamBinding editor tagValues/{{tag_value}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type TagValueIamBinding struct {
	pulumi.CustomResourceState

	Condition TagValueIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringOutput      `pulumi:"etag"`
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The role that should be applied. Only one
	// `tags.TagValueIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	TagValue pulumi.StringOutput `pulumi:"tagValue"`
}

// NewTagValueIamBinding registers a new resource with the given unique name, arguments, and options.
func NewTagValueIamBinding(ctx *pulumi.Context,
	name string, args *TagValueIamBindingArgs, opts ...pulumi.ResourceOption) (*TagValueIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.TagValue == nil {
		return nil, errors.New("invalid value for required argument 'TagValue'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TagValueIamBinding
	err := ctx.RegisterResource("gcp:tags/tagValueIamBinding:TagValueIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagValueIamBinding gets an existing TagValueIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagValueIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagValueIamBindingState, opts ...pulumi.ResourceOption) (*TagValueIamBinding, error) {
	var resource TagValueIamBinding
	err := ctx.ReadResource("gcp:tags/tagValueIamBinding:TagValueIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagValueIamBinding resources.
type tagValueIamBindingState struct {
	Condition *TagValueIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    *string  `pulumi:"etag"`
	Members []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `tags.TagValueIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	TagValue *string `pulumi:"tagValue"`
}

type TagValueIamBindingState struct {
	Condition TagValueIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringPtrInput
	Members pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `tags.TagValueIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	TagValue pulumi.StringPtrInput
}

func (TagValueIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagValueIamBindingState)(nil)).Elem()
}

type tagValueIamBindingArgs struct {
	Condition *TagValueIamBindingCondition `pulumi:"condition"`
	Members   []string                     `pulumi:"members"`
	// The role that should be applied. Only one
	// `tags.TagValueIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	TagValue string `pulumi:"tagValue"`
}

// The set of arguments for constructing a TagValueIamBinding resource.
type TagValueIamBindingArgs struct {
	Condition TagValueIamBindingConditionPtrInput
	Members   pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `tags.TagValueIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	TagValue pulumi.StringInput
}

func (TagValueIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagValueIamBindingArgs)(nil)).Elem()
}

type TagValueIamBindingInput interface {
	pulumi.Input

	ToTagValueIamBindingOutput() TagValueIamBindingOutput
	ToTagValueIamBindingOutputWithContext(ctx context.Context) TagValueIamBindingOutput
}

func (*TagValueIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**TagValueIamBinding)(nil)).Elem()
}

func (i *TagValueIamBinding) ToTagValueIamBindingOutput() TagValueIamBindingOutput {
	return i.ToTagValueIamBindingOutputWithContext(context.Background())
}

func (i *TagValueIamBinding) ToTagValueIamBindingOutputWithContext(ctx context.Context) TagValueIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagValueIamBindingOutput)
}

func (i *TagValueIamBinding) ToOutput(ctx context.Context) pulumix.Output[*TagValueIamBinding] {
	return pulumix.Output[*TagValueIamBinding]{
		OutputState: i.ToTagValueIamBindingOutputWithContext(ctx).OutputState,
	}
}

// TagValueIamBindingArrayInput is an input type that accepts TagValueIamBindingArray and TagValueIamBindingArrayOutput values.
// You can construct a concrete instance of `TagValueIamBindingArrayInput` via:
//
//	TagValueIamBindingArray{ TagValueIamBindingArgs{...} }
type TagValueIamBindingArrayInput interface {
	pulumi.Input

	ToTagValueIamBindingArrayOutput() TagValueIamBindingArrayOutput
	ToTagValueIamBindingArrayOutputWithContext(context.Context) TagValueIamBindingArrayOutput
}

type TagValueIamBindingArray []TagValueIamBindingInput

func (TagValueIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagValueIamBinding)(nil)).Elem()
}

func (i TagValueIamBindingArray) ToTagValueIamBindingArrayOutput() TagValueIamBindingArrayOutput {
	return i.ToTagValueIamBindingArrayOutputWithContext(context.Background())
}

func (i TagValueIamBindingArray) ToTagValueIamBindingArrayOutputWithContext(ctx context.Context) TagValueIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagValueIamBindingArrayOutput)
}

func (i TagValueIamBindingArray) ToOutput(ctx context.Context) pulumix.Output[[]*TagValueIamBinding] {
	return pulumix.Output[[]*TagValueIamBinding]{
		OutputState: i.ToTagValueIamBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// TagValueIamBindingMapInput is an input type that accepts TagValueIamBindingMap and TagValueIamBindingMapOutput values.
// You can construct a concrete instance of `TagValueIamBindingMapInput` via:
//
//	TagValueIamBindingMap{ "key": TagValueIamBindingArgs{...} }
type TagValueIamBindingMapInput interface {
	pulumi.Input

	ToTagValueIamBindingMapOutput() TagValueIamBindingMapOutput
	ToTagValueIamBindingMapOutputWithContext(context.Context) TagValueIamBindingMapOutput
}

type TagValueIamBindingMap map[string]TagValueIamBindingInput

func (TagValueIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagValueIamBinding)(nil)).Elem()
}

func (i TagValueIamBindingMap) ToTagValueIamBindingMapOutput() TagValueIamBindingMapOutput {
	return i.ToTagValueIamBindingMapOutputWithContext(context.Background())
}

func (i TagValueIamBindingMap) ToTagValueIamBindingMapOutputWithContext(ctx context.Context) TagValueIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagValueIamBindingMapOutput)
}

func (i TagValueIamBindingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TagValueIamBinding] {
	return pulumix.Output[map[string]*TagValueIamBinding]{
		OutputState: i.ToTagValueIamBindingMapOutputWithContext(ctx).OutputState,
	}
}

type TagValueIamBindingOutput struct{ *pulumi.OutputState }

func (TagValueIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagValueIamBinding)(nil)).Elem()
}

func (o TagValueIamBindingOutput) ToTagValueIamBindingOutput() TagValueIamBindingOutput {
	return o
}

func (o TagValueIamBindingOutput) ToTagValueIamBindingOutputWithContext(ctx context.Context) TagValueIamBindingOutput {
	return o
}

func (o TagValueIamBindingOutput) ToOutput(ctx context.Context) pulumix.Output[*TagValueIamBinding] {
	return pulumix.Output[*TagValueIamBinding]{
		OutputState: o.OutputState,
	}
}

func (o TagValueIamBindingOutput) Condition() TagValueIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *TagValueIamBinding) TagValueIamBindingConditionPtrOutput { return v.Condition }).(TagValueIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o TagValueIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TagValueIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o TagValueIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TagValueIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The role that should be applied. Only one
// `tags.TagValueIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o TagValueIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *TagValueIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o TagValueIamBindingOutput) TagValue() pulumi.StringOutput {
	return o.ApplyT(func(v *TagValueIamBinding) pulumi.StringOutput { return v.TagValue }).(pulumi.StringOutput)
}

type TagValueIamBindingArrayOutput struct{ *pulumi.OutputState }

func (TagValueIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagValueIamBinding)(nil)).Elem()
}

func (o TagValueIamBindingArrayOutput) ToTagValueIamBindingArrayOutput() TagValueIamBindingArrayOutput {
	return o
}

func (o TagValueIamBindingArrayOutput) ToTagValueIamBindingArrayOutputWithContext(ctx context.Context) TagValueIamBindingArrayOutput {
	return o
}

func (o TagValueIamBindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TagValueIamBinding] {
	return pulumix.Output[[]*TagValueIamBinding]{
		OutputState: o.OutputState,
	}
}

func (o TagValueIamBindingArrayOutput) Index(i pulumi.IntInput) TagValueIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TagValueIamBinding {
		return vs[0].([]*TagValueIamBinding)[vs[1].(int)]
	}).(TagValueIamBindingOutput)
}

type TagValueIamBindingMapOutput struct{ *pulumi.OutputState }

func (TagValueIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagValueIamBinding)(nil)).Elem()
}

func (o TagValueIamBindingMapOutput) ToTagValueIamBindingMapOutput() TagValueIamBindingMapOutput {
	return o
}

func (o TagValueIamBindingMapOutput) ToTagValueIamBindingMapOutputWithContext(ctx context.Context) TagValueIamBindingMapOutput {
	return o
}

func (o TagValueIamBindingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TagValueIamBinding] {
	return pulumix.Output[map[string]*TagValueIamBinding]{
		OutputState: o.OutputState,
	}
}

func (o TagValueIamBindingMapOutput) MapIndex(k pulumi.StringInput) TagValueIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TagValueIamBinding {
		return vs[0].(map[string]*TagValueIamBinding)[vs[1].(string)]
	}).(TagValueIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagValueIamBindingInput)(nil)).Elem(), &TagValueIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagValueIamBindingArrayInput)(nil)).Elem(), TagValueIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagValueIamBindingMapInput)(nil)).Elem(), TagValueIamBindingMap{})
	pulumi.RegisterOutputType(TagValueIamBindingOutput{})
	pulumi.RegisterOutputType(TagValueIamBindingArrayOutput{})
	pulumi.RegisterOutputType(TagValueIamBindingMapOutput{})
}
