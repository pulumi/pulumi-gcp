// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package tags

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// TagValue can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:tags/tagValue:TagValue default tagValues/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:tags/tagValue:TagValue default {{name}}
// ```
type TagValue struct {
	pulumi.CustomResourceState

	// Output only. Creation time. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-assigned description of the TagValue. Must not exceed 256 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The generated numeric id for the TagValue.
	Name pulumi.StringOutput `pulumi:"name"`
	// Output only. Namespaced name of the TagValue. Will be in the format {organizationId}/{tag_key_short_name}/{shortName}.
	NamespacedName pulumi.StringOutput `pulumi:"namespacedName"`
	// Input only. The resource name of the new TagValue's parent. Must be of the form tagKeys/{tag_key_id}.
	Parent pulumi.StringOutput `pulumi:"parent"`
	// Input only. User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey.
	// The short name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	ShortName pulumi.StringOutput `pulumi:"shortName"`
	// Output only. Update time. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTagValue registers a new resource with the given unique name, arguments, and options.
func NewTagValue(ctx *pulumi.Context,
	name string, args *TagValueArgs, opts ...pulumi.ResourceOption) (*TagValue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	if args.ShortName == nil {
		return nil, errors.New("invalid value for required argument 'ShortName'")
	}
	var resource TagValue
	err := ctx.RegisterResource("gcp:tags/tagValue:TagValue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagValue gets an existing TagValue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagValue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagValueState, opts ...pulumi.ResourceOption) (*TagValue, error) {
	var resource TagValue
	err := ctx.ReadResource("gcp:tags/tagValue:TagValue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagValue resources.
type tagValueState struct {
	// Output only. Creation time. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// User-assigned description of the TagValue. Must not exceed 256 characters.
	Description *string `pulumi:"description"`
	// The generated numeric id for the TagValue.
	Name *string `pulumi:"name"`
	// Output only. Namespaced name of the TagValue. Will be in the format {organizationId}/{tag_key_short_name}/{shortName}.
	NamespacedName *string `pulumi:"namespacedName"`
	// Input only. The resource name of the new TagValue's parent. Must be of the form tagKeys/{tag_key_id}.
	Parent *string `pulumi:"parent"`
	// Input only. User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey.
	// The short name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	ShortName *string `pulumi:"shortName"`
	// Output only. Update time. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type TagValueState struct {
	// Output only. Creation time. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// User-assigned description of the TagValue. Must not exceed 256 characters.
	Description pulumi.StringPtrInput
	// The generated numeric id for the TagValue.
	Name pulumi.StringPtrInput
	// Output only. Namespaced name of the TagValue. Will be in the format {organizationId}/{tag_key_short_name}/{shortName}.
	NamespacedName pulumi.StringPtrInput
	// Input only. The resource name of the new TagValue's parent. Must be of the form tagKeys/{tag_key_id}.
	Parent pulumi.StringPtrInput
	// Input only. User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey.
	// The short name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	ShortName pulumi.StringPtrInput
	// Output only. Update time. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (TagValueState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagValueState)(nil)).Elem()
}

type tagValueArgs struct {
	// User-assigned description of the TagValue. Must not exceed 256 characters.
	Description *string `pulumi:"description"`
	// Input only. The resource name of the new TagValue's parent. Must be of the form tagKeys/{tag_key_id}.
	Parent string `pulumi:"parent"`
	// Input only. User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey.
	// The short name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	ShortName string `pulumi:"shortName"`
}

// The set of arguments for constructing a TagValue resource.
type TagValueArgs struct {
	// User-assigned description of the TagValue. Must not exceed 256 characters.
	Description pulumi.StringPtrInput
	// Input only. The resource name of the new TagValue's parent. Must be of the form tagKeys/{tag_key_id}.
	Parent pulumi.StringInput
	// Input only. User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey.
	// The short name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	ShortName pulumi.StringInput
}

func (TagValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagValueArgs)(nil)).Elem()
}

type TagValueInput interface {
	pulumi.Input

	ToTagValueOutput() TagValueOutput
	ToTagValueOutputWithContext(ctx context.Context) TagValueOutput
}

func (*TagValue) ElementType() reflect.Type {
	return reflect.TypeOf((*TagValue)(nil))
}

func (i *TagValue) ToTagValueOutput() TagValueOutput {
	return i.ToTagValueOutputWithContext(context.Background())
}

func (i *TagValue) ToTagValueOutputWithContext(ctx context.Context) TagValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagValueOutput)
}

func (i *TagValue) ToTagValuePtrOutput() TagValuePtrOutput {
	return i.ToTagValuePtrOutputWithContext(context.Background())
}

func (i *TagValue) ToTagValuePtrOutputWithContext(ctx context.Context) TagValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagValuePtrOutput)
}

type TagValuePtrInput interface {
	pulumi.Input

	ToTagValuePtrOutput() TagValuePtrOutput
	ToTagValuePtrOutputWithContext(ctx context.Context) TagValuePtrOutput
}

type tagValuePtrType TagValueArgs

func (*tagValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagValue)(nil))
}

func (i *tagValuePtrType) ToTagValuePtrOutput() TagValuePtrOutput {
	return i.ToTagValuePtrOutputWithContext(context.Background())
}

func (i *tagValuePtrType) ToTagValuePtrOutputWithContext(ctx context.Context) TagValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagValuePtrOutput)
}

// TagValueArrayInput is an input type that accepts TagValueArray and TagValueArrayOutput values.
// You can construct a concrete instance of `TagValueArrayInput` via:
//
//          TagValueArray{ TagValueArgs{...} }
type TagValueArrayInput interface {
	pulumi.Input

	ToTagValueArrayOutput() TagValueArrayOutput
	ToTagValueArrayOutputWithContext(context.Context) TagValueArrayOutput
}

type TagValueArray []TagValueInput

func (TagValueArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*TagValue)(nil))
}

func (i TagValueArray) ToTagValueArrayOutput() TagValueArrayOutput {
	return i.ToTagValueArrayOutputWithContext(context.Background())
}

func (i TagValueArray) ToTagValueArrayOutputWithContext(ctx context.Context) TagValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagValueArrayOutput)
}

// TagValueMapInput is an input type that accepts TagValueMap and TagValueMapOutput values.
// You can construct a concrete instance of `TagValueMapInput` via:
//
//          TagValueMap{ "key": TagValueArgs{...} }
type TagValueMapInput interface {
	pulumi.Input

	ToTagValueMapOutput() TagValueMapOutput
	ToTagValueMapOutputWithContext(context.Context) TagValueMapOutput
}

type TagValueMap map[string]TagValueInput

func (TagValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*TagValue)(nil))
}

func (i TagValueMap) ToTagValueMapOutput() TagValueMapOutput {
	return i.ToTagValueMapOutputWithContext(context.Background())
}

func (i TagValueMap) ToTagValueMapOutputWithContext(ctx context.Context) TagValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagValueMapOutput)
}

type TagValueOutput struct {
	*pulumi.OutputState
}

func (TagValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagValue)(nil))
}

func (o TagValueOutput) ToTagValueOutput() TagValueOutput {
	return o
}

func (o TagValueOutput) ToTagValueOutputWithContext(ctx context.Context) TagValueOutput {
	return o
}

func (o TagValueOutput) ToTagValuePtrOutput() TagValuePtrOutput {
	return o.ToTagValuePtrOutputWithContext(context.Background())
}

func (o TagValueOutput) ToTagValuePtrOutputWithContext(ctx context.Context) TagValuePtrOutput {
	return o.ApplyT(func(v TagValue) *TagValue {
		return &v
	}).(TagValuePtrOutput)
}

type TagValuePtrOutput struct {
	*pulumi.OutputState
}

func (TagValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagValue)(nil))
}

func (o TagValuePtrOutput) ToTagValuePtrOutput() TagValuePtrOutput {
	return o
}

func (o TagValuePtrOutput) ToTagValuePtrOutputWithContext(ctx context.Context) TagValuePtrOutput {
	return o
}

type TagValueArrayOutput struct{ *pulumi.OutputState }

func (TagValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagValue)(nil))
}

func (o TagValueArrayOutput) ToTagValueArrayOutput() TagValueArrayOutput {
	return o
}

func (o TagValueArrayOutput) ToTagValueArrayOutputWithContext(ctx context.Context) TagValueArrayOutput {
	return o
}

func (o TagValueArrayOutput) Index(i pulumi.IntInput) TagValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagValue {
		return vs[0].([]TagValue)[vs[1].(int)]
	}).(TagValueOutput)
}

type TagValueMapOutput struct{ *pulumi.OutputState }

func (TagValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TagValue)(nil))
}

func (o TagValueMapOutput) ToTagValueMapOutput() TagValueMapOutput {
	return o
}

func (o TagValueMapOutput) ToTagValueMapOutputWithContext(ctx context.Context) TagValueMapOutput {
	return o
}

func (o TagValueMapOutput) MapIndex(k pulumi.StringInput) TagValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TagValue {
		return vs[0].(map[string]TagValue)[vs[1].(string)]
	}).(TagValueOutput)
}

func init() {
	pulumi.RegisterOutputType(TagValueOutput{})
	pulumi.RegisterOutputType(TagValuePtrOutput{})
	pulumi.RegisterOutputType(TagValueArrayOutput{})
	pulumi.RegisterOutputType(TagValueMapOutput{})
}
