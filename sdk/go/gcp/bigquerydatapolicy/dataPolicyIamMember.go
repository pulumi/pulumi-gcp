// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquerydatapolicy

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}} * {{project}}/{{location}}/{{data_policy_id}} * {{location}}/{{data_policy_id}} * {{data_policy_id}} Any variables not passed in the import command will be taken from the provider configuration. BigQuery Data Policy datapolicy IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:bigquerydatapolicy/dataPolicyIamMember:DataPolicyIamMember editor "projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:bigquerydatapolicy/dataPolicyIamMember:DataPolicyIamMember editor "projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:bigquerydatapolicy/dataPolicyIamMember:DataPolicyIamMember editor projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type DataPolicyIamMember struct {
	pulumi.CustomResourceState

	Condition    DataPolicyIamMemberConditionPtrOutput `pulumi:"condition"`
	DataPolicyId pulumi.StringOutput                   `pulumi:"dataPolicyId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the location of the data policy.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringOutput `pulumi:"location"`
	Member   pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigquerydatapolicy.DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewDataPolicyIamMember registers a new resource with the given unique name, arguments, and options.
func NewDataPolicyIamMember(ctx *pulumi.Context,
	name string, args *DataPolicyIamMemberArgs, opts ...pulumi.ResourceOption) (*DataPolicyIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'DataPolicyId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource DataPolicyIamMember
	err := ctx.RegisterResource("gcp:bigquerydatapolicy/dataPolicyIamMember:DataPolicyIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataPolicyIamMember gets an existing DataPolicyIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataPolicyIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataPolicyIamMemberState, opts ...pulumi.ResourceOption) (*DataPolicyIamMember, error) {
	var resource DataPolicyIamMember
	err := ctx.ReadResource("gcp:bigquerydatapolicy/dataPolicyIamMember:DataPolicyIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataPolicyIamMember resources.
type dataPolicyIamMemberState struct {
	Condition    *DataPolicyIamMemberCondition `pulumi:"condition"`
	DataPolicyId *string                       `pulumi:"dataPolicyId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The name of the location of the data policy.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	Member   *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigquerydatapolicy.DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type DataPolicyIamMemberState struct {
	Condition    DataPolicyIamMemberConditionPtrInput
	DataPolicyId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The name of the location of the data policy.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Member   pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `bigquerydatapolicy.DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (DataPolicyIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataPolicyIamMemberState)(nil)).Elem()
}

type dataPolicyIamMemberArgs struct {
	Condition    *DataPolicyIamMemberCondition `pulumi:"condition"`
	DataPolicyId string                        `pulumi:"dataPolicyId"`
	// The name of the location of the data policy.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	Member   string  `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigquerydatapolicy.DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a DataPolicyIamMember resource.
type DataPolicyIamMemberArgs struct {
	Condition    DataPolicyIamMemberConditionPtrInput
	DataPolicyId pulumi.StringInput
	// The name of the location of the data policy.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Member   pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `bigquerydatapolicy.DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (DataPolicyIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataPolicyIamMemberArgs)(nil)).Elem()
}

type DataPolicyIamMemberInput interface {
	pulumi.Input

	ToDataPolicyIamMemberOutput() DataPolicyIamMemberOutput
	ToDataPolicyIamMemberOutputWithContext(ctx context.Context) DataPolicyIamMemberOutput
}

func (*DataPolicyIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPolicyIamMember)(nil)).Elem()
}

func (i *DataPolicyIamMember) ToDataPolicyIamMemberOutput() DataPolicyIamMemberOutput {
	return i.ToDataPolicyIamMemberOutputWithContext(context.Background())
}

func (i *DataPolicyIamMember) ToDataPolicyIamMemberOutputWithContext(ctx context.Context) DataPolicyIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPolicyIamMemberOutput)
}

// DataPolicyIamMemberArrayInput is an input type that accepts DataPolicyIamMemberArray and DataPolicyIamMemberArrayOutput values.
// You can construct a concrete instance of `DataPolicyIamMemberArrayInput` via:
//
//	DataPolicyIamMemberArray{ DataPolicyIamMemberArgs{...} }
type DataPolicyIamMemberArrayInput interface {
	pulumi.Input

	ToDataPolicyIamMemberArrayOutput() DataPolicyIamMemberArrayOutput
	ToDataPolicyIamMemberArrayOutputWithContext(context.Context) DataPolicyIamMemberArrayOutput
}

type DataPolicyIamMemberArray []DataPolicyIamMemberInput

func (DataPolicyIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataPolicyIamMember)(nil)).Elem()
}

func (i DataPolicyIamMemberArray) ToDataPolicyIamMemberArrayOutput() DataPolicyIamMemberArrayOutput {
	return i.ToDataPolicyIamMemberArrayOutputWithContext(context.Background())
}

func (i DataPolicyIamMemberArray) ToDataPolicyIamMemberArrayOutputWithContext(ctx context.Context) DataPolicyIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPolicyIamMemberArrayOutput)
}

// DataPolicyIamMemberMapInput is an input type that accepts DataPolicyIamMemberMap and DataPolicyIamMemberMapOutput values.
// You can construct a concrete instance of `DataPolicyIamMemberMapInput` via:
//
//	DataPolicyIamMemberMap{ "key": DataPolicyIamMemberArgs{...} }
type DataPolicyIamMemberMapInput interface {
	pulumi.Input

	ToDataPolicyIamMemberMapOutput() DataPolicyIamMemberMapOutput
	ToDataPolicyIamMemberMapOutputWithContext(context.Context) DataPolicyIamMemberMapOutput
}

type DataPolicyIamMemberMap map[string]DataPolicyIamMemberInput

func (DataPolicyIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataPolicyIamMember)(nil)).Elem()
}

func (i DataPolicyIamMemberMap) ToDataPolicyIamMemberMapOutput() DataPolicyIamMemberMapOutput {
	return i.ToDataPolicyIamMemberMapOutputWithContext(context.Background())
}

func (i DataPolicyIamMemberMap) ToDataPolicyIamMemberMapOutputWithContext(ctx context.Context) DataPolicyIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPolicyIamMemberMapOutput)
}

type DataPolicyIamMemberOutput struct{ *pulumi.OutputState }

func (DataPolicyIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPolicyIamMember)(nil)).Elem()
}

func (o DataPolicyIamMemberOutput) ToDataPolicyIamMemberOutput() DataPolicyIamMemberOutput {
	return o
}

func (o DataPolicyIamMemberOutput) ToDataPolicyIamMemberOutputWithContext(ctx context.Context) DataPolicyIamMemberOutput {
	return o
}

func (o DataPolicyIamMemberOutput) Condition() DataPolicyIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *DataPolicyIamMember) DataPolicyIamMemberConditionPtrOutput { return v.Condition }).(DataPolicyIamMemberConditionPtrOutput)
}

func (o DataPolicyIamMemberOutput) DataPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataPolicyIamMember) pulumi.StringOutput { return v.DataPolicyId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o DataPolicyIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataPolicyIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The name of the location of the data policy.
// Used to find the parent resource to bind the IAM policy to
func (o DataPolicyIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataPolicyIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o DataPolicyIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *DataPolicyIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o DataPolicyIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataPolicyIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `bigquerydatapolicy.DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o DataPolicyIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *DataPolicyIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type DataPolicyIamMemberArrayOutput struct{ *pulumi.OutputState }

func (DataPolicyIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataPolicyIamMember)(nil)).Elem()
}

func (o DataPolicyIamMemberArrayOutput) ToDataPolicyIamMemberArrayOutput() DataPolicyIamMemberArrayOutput {
	return o
}

func (o DataPolicyIamMemberArrayOutput) ToDataPolicyIamMemberArrayOutputWithContext(ctx context.Context) DataPolicyIamMemberArrayOutput {
	return o
}

func (o DataPolicyIamMemberArrayOutput) Index(i pulumi.IntInput) DataPolicyIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataPolicyIamMember {
		return vs[0].([]*DataPolicyIamMember)[vs[1].(int)]
	}).(DataPolicyIamMemberOutput)
}

type DataPolicyIamMemberMapOutput struct{ *pulumi.OutputState }

func (DataPolicyIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataPolicyIamMember)(nil)).Elem()
}

func (o DataPolicyIamMemberMapOutput) ToDataPolicyIamMemberMapOutput() DataPolicyIamMemberMapOutput {
	return o
}

func (o DataPolicyIamMemberMapOutput) ToDataPolicyIamMemberMapOutputWithContext(ctx context.Context) DataPolicyIamMemberMapOutput {
	return o
}

func (o DataPolicyIamMemberMapOutput) MapIndex(k pulumi.StringInput) DataPolicyIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataPolicyIamMember {
		return vs[0].(map[string]*DataPolicyIamMember)[vs[1].(string)]
	}).(DataPolicyIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataPolicyIamMemberInput)(nil)).Elem(), &DataPolicyIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataPolicyIamMemberArrayInput)(nil)).Elem(), DataPolicyIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataPolicyIamMemberMapInput)(nil)).Elem(), DataPolicyIamMemberMap{})
	pulumi.RegisterOutputType(DataPolicyIamMemberOutput{})
	pulumi.RegisterOutputType(DataPolicyIamMemberArrayOutput{})
	pulumi.RegisterOutputType(DataPolicyIamMemberMapOutput{})
}
