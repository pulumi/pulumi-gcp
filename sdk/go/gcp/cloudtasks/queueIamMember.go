// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtasks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud Tasks Queue. Each of these resources serves a different use case:
//
// * `cloudtasks.QueueIamPolicy`: Authoritative. Sets the IAM policy for the queue and replaces any existing policy already attached.
// * `cloudtasks.QueueIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the queue are preserved.
// * `cloudtasks.QueueIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the queue are preserved.
//
// > **Note:** `cloudtasks.QueueIamPolicy` **cannot** be used in conjunction with `cloudtasks.QueueIamBinding` and `cloudtasks.QueueIamMember` or they will fight over what your policy should be.
//
// > **Note:** `cloudtasks.QueueIamBinding` resources **can be** used in conjunction with `cloudtasks.QueueIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_cloud\_tasks\_queue\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudtasks"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					organizations.GetIAMPolicyBinding{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = cloudtasks.NewQueueIamPolicy(ctx, "policy", &cloudtasks.QueueIamPolicyArgs{
//				Project:    pulumi.Any(google_cloud_tasks_queue.Default.Project),
//				Location:   pulumi.Any(google_cloud_tasks_queue.Default.Location),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_cloud\_tasks\_queue\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudtasks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudtasks.NewQueueIamBinding(ctx, "binding", &cloudtasks.QueueIamBindingArgs{
//				Project:  pulumi.Any(google_cloud_tasks_queue.Default.Project),
//				Location: pulumi.Any(google_cloud_tasks_queue.Default.Location),
//				Role:     pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_cloud\_tasks\_queue\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudtasks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudtasks.NewQueueIamMember(ctx, "member", &cloudtasks.QueueIamMemberArgs{
//				Project:  pulumi.Any(google_cloud_tasks_queue.Default.Project),
//				Location: pulumi.Any(google_cloud_tasks_queue.Default.Location),
//				Role:     pulumi.String("roles/viewer"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/queues/{{name}} * {{project}}/{{location}}/{{name}} * {{location}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Cloud Tasks queue IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:cloudtasks/queueIamMember:QueueIamMember editor "projects/{{project}}/locations/{{location}}/queues/{{queue}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:cloudtasks/queueIamMember:QueueIamMember editor "projects/{{project}}/locations/{{location}}/queues/{{queue}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:cloudtasks/queueIamMember:QueueIamMember editor projects/{{project}}/locations/{{location}}/queues/{{queue}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type QueueIamMember struct {
	pulumi.CustomResourceState

	Condition QueueIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location of the queue Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringOutput `pulumi:"location"`
	Member   pulumi.StringOutput `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `cloudtasks.QueueIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewQueueIamMember registers a new resource with the given unique name, arguments, and options.
func NewQueueIamMember(ctx *pulumi.Context,
	name string, args *QueueIamMemberArgs, opts ...pulumi.ResourceOption) (*QueueIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource QueueIamMember
	err := ctx.RegisterResource("gcp:cloudtasks/queueIamMember:QueueIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueueIamMember gets an existing QueueIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueueIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueIamMemberState, opts ...pulumi.ResourceOption) (*QueueIamMember, error) {
	var resource QueueIamMember
	err := ctx.ReadResource("gcp:cloudtasks/queueIamMember:QueueIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueueIamMember resources.
type queueIamMemberState struct {
	Condition *QueueIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location of the queue Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	Member   *string `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `cloudtasks.QueueIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type QueueIamMemberState struct {
	Condition QueueIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location of the queue Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Member   pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `cloudtasks.QueueIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (QueueIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueIamMemberState)(nil)).Elem()
}

type queueIamMemberArgs struct {
	Condition *QueueIamMemberCondition `pulumi:"condition"`
	// The location of the queue Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	Member   string  `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `cloudtasks.QueueIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a QueueIamMember resource.
type QueueIamMemberArgs struct {
	Condition QueueIamMemberConditionPtrInput
	// The location of the queue Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Member   pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `cloudtasks.QueueIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (QueueIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueIamMemberArgs)(nil)).Elem()
}

type QueueIamMemberInput interface {
	pulumi.Input

	ToQueueIamMemberOutput() QueueIamMemberOutput
	ToQueueIamMemberOutputWithContext(ctx context.Context) QueueIamMemberOutput
}

func (*QueueIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueIamMember)(nil)).Elem()
}

func (i *QueueIamMember) ToQueueIamMemberOutput() QueueIamMemberOutput {
	return i.ToQueueIamMemberOutputWithContext(context.Background())
}

func (i *QueueIamMember) ToQueueIamMemberOutputWithContext(ctx context.Context) QueueIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueIamMemberOutput)
}

// QueueIamMemberArrayInput is an input type that accepts QueueIamMemberArray and QueueIamMemberArrayOutput values.
// You can construct a concrete instance of `QueueIamMemberArrayInput` via:
//
//	QueueIamMemberArray{ QueueIamMemberArgs{...} }
type QueueIamMemberArrayInput interface {
	pulumi.Input

	ToQueueIamMemberArrayOutput() QueueIamMemberArrayOutput
	ToQueueIamMemberArrayOutputWithContext(context.Context) QueueIamMemberArrayOutput
}

type QueueIamMemberArray []QueueIamMemberInput

func (QueueIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueueIamMember)(nil)).Elem()
}

func (i QueueIamMemberArray) ToQueueIamMemberArrayOutput() QueueIamMemberArrayOutput {
	return i.ToQueueIamMemberArrayOutputWithContext(context.Background())
}

func (i QueueIamMemberArray) ToQueueIamMemberArrayOutputWithContext(ctx context.Context) QueueIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueIamMemberArrayOutput)
}

// QueueIamMemberMapInput is an input type that accepts QueueIamMemberMap and QueueIamMemberMapOutput values.
// You can construct a concrete instance of `QueueIamMemberMapInput` via:
//
//	QueueIamMemberMap{ "key": QueueIamMemberArgs{...} }
type QueueIamMemberMapInput interface {
	pulumi.Input

	ToQueueIamMemberMapOutput() QueueIamMemberMapOutput
	ToQueueIamMemberMapOutputWithContext(context.Context) QueueIamMemberMapOutput
}

type QueueIamMemberMap map[string]QueueIamMemberInput

func (QueueIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueueIamMember)(nil)).Elem()
}

func (i QueueIamMemberMap) ToQueueIamMemberMapOutput() QueueIamMemberMapOutput {
	return i.ToQueueIamMemberMapOutputWithContext(context.Background())
}

func (i QueueIamMemberMap) ToQueueIamMemberMapOutputWithContext(ctx context.Context) QueueIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueIamMemberMapOutput)
}

type QueueIamMemberOutput struct{ *pulumi.OutputState }

func (QueueIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueIamMember)(nil)).Elem()
}

func (o QueueIamMemberOutput) ToQueueIamMemberOutput() QueueIamMemberOutput {
	return o
}

func (o QueueIamMemberOutput) ToQueueIamMemberOutputWithContext(ctx context.Context) QueueIamMemberOutput {
	return o
}

func (o QueueIamMemberOutput) Condition() QueueIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *QueueIamMember) QueueIamMemberConditionPtrOutput { return v.Condition }).(QueueIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o QueueIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location of the queue Used to find the parent resource to bind the IAM policy to
func (o QueueIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o QueueIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o QueueIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o QueueIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `cloudtasks.QueueIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o QueueIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type QueueIamMemberArrayOutput struct{ *pulumi.OutputState }

func (QueueIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueueIamMember)(nil)).Elem()
}

func (o QueueIamMemberArrayOutput) ToQueueIamMemberArrayOutput() QueueIamMemberArrayOutput {
	return o
}

func (o QueueIamMemberArrayOutput) ToQueueIamMemberArrayOutputWithContext(ctx context.Context) QueueIamMemberArrayOutput {
	return o
}

func (o QueueIamMemberArrayOutput) Index(i pulumi.IntInput) QueueIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QueueIamMember {
		return vs[0].([]*QueueIamMember)[vs[1].(int)]
	}).(QueueIamMemberOutput)
}

type QueueIamMemberMapOutput struct{ *pulumi.OutputState }

func (QueueIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueueIamMember)(nil)).Elem()
}

func (o QueueIamMemberMapOutput) ToQueueIamMemberMapOutput() QueueIamMemberMapOutput {
	return o
}

func (o QueueIamMemberMapOutput) ToQueueIamMemberMapOutputWithContext(ctx context.Context) QueueIamMemberMapOutput {
	return o
}

func (o QueueIamMemberMapOutput) MapIndex(k pulumi.StringInput) QueueIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QueueIamMember {
		return vs[0].(map[string]*QueueIamMember)[vs[1].(string)]
	}).(QueueIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueIamMemberInput)(nil)).Elem(), &QueueIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueIamMemberArrayInput)(nil)).Elem(), QueueIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueIamMemberMapInput)(nil)).Elem(), QueueIamMemberMap{})
	pulumi.RegisterOutputType(QueueIamMemberOutput{})
	pulumi.RegisterOutputType(QueueIamMemberArrayOutput{})
	pulumi.RegisterOutputType(QueueIamMemberMapOutput{})
}
