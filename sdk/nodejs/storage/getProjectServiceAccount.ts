// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 * ### Pub/Sub Notifications
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const gcsAccount = gcp.storage.getProjectServiceAccount({});
 * const binding = new gcp.pubsub.TopicIAMBinding("binding", {
 *     topic: google_pubsub_topic.topic.name,
 *     role: "roles/pubsub.publisher",
 *     members: [gcsAccount.then(gcsAccount => `serviceAccount:${gcsAccount.emailAddress}`)],
 * });
 * ```
 * ### Cloud KMS Keys
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const gcsAccount = gcp.storage.getProjectServiceAccount({});
 * const binding = new gcp.kms.CryptoKeyIAMBinding("binding", {
 *     cryptoKeyId: "your-crypto-key-id",
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     members: [gcsAccount.then(gcsAccount => `serviceAccount:${gcsAccount.emailAddress}`)],
 * });
 * const bucket = new gcp.storage.Bucket("bucket", {
 *     location: "US",
 *     encryption: {
 *         defaultKmsKeyName: "your-crypto-key-id",
 *     },
 * }, {
 *     dependsOn: [binding],
 * });
 * ```
 */
export function getProjectServiceAccount(args?: GetProjectServiceAccountArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectServiceAccountResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:storage/getProjectServiceAccount:getProjectServiceAccount", {
        "project": args.project,
        "userProject": args.userProject,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectServiceAccount.
 */
export interface GetProjectServiceAccountArgs {
    /**
     * The project the unique service account was created for. If it is not provided, the provider project is used.
     */
    project?: string;
    /**
     * The project the lookup originates from. This field is used if you are making the request
     * from a different account than the one you are finding the service account for.
     */
    userProject?: string;
}

/**
 * A collection of values returned by getProjectServiceAccount.
 */
export interface GetProjectServiceAccountResult {
    /**
     * The email address of the service account. This value is often used to refer to the service account
     * in order to grant IAM permissions.
     */
    readonly emailAddress: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The Identity of the service account in the form `serviceAccount:{email_address}`. This value is often used to refer to the service account in order to grant IAM permissions.
     */
    readonly member: string;
    readonly project: string;
    readonly userProject?: string;
}
/**
 * ## Example Usage
 * ### Pub/Sub Notifications
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const gcsAccount = gcp.storage.getProjectServiceAccount({});
 * const binding = new gcp.pubsub.TopicIAMBinding("binding", {
 *     topic: google_pubsub_topic.topic.name,
 *     role: "roles/pubsub.publisher",
 *     members: [gcsAccount.then(gcsAccount => `serviceAccount:${gcsAccount.emailAddress}`)],
 * });
 * ```
 * ### Cloud KMS Keys
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const gcsAccount = gcp.storage.getProjectServiceAccount({});
 * const binding = new gcp.kms.CryptoKeyIAMBinding("binding", {
 *     cryptoKeyId: "your-crypto-key-id",
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     members: [gcsAccount.then(gcsAccount => `serviceAccount:${gcsAccount.emailAddress}`)],
 * });
 * const bucket = new gcp.storage.Bucket("bucket", {
 *     location: "US",
 *     encryption: {
 *         defaultKmsKeyName: "your-crypto-key-id",
 *     },
 * }, {
 *     dependsOn: [binding],
 * });
 * ```
 */
export function getProjectServiceAccountOutput(args?: GetProjectServiceAccountOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectServiceAccountResult> {
    return pulumi.output(args).apply((a: any) => getProjectServiceAccount(a, opts))
}

/**
 * A collection of arguments for invoking getProjectServiceAccount.
 */
export interface GetProjectServiceAccountOutputArgs {
    /**
     * The project the unique service account was created for. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The project the lookup originates from. This field is used if you are making the request
     * from a different account than the one you are finding the service account for.
     */
    userProject?: pulumi.Input<string>;
}
