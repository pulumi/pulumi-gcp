// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The Google Cloud Storage (GCS) Anywhere Cache feature allows users to
 * create SSD backed zonal read cache for their buckets. These zonal
 * caches are co-located with the customers compute engines to provide
 * cost efficiency.
 *
 * ## Example Usage
 *
 * ### Storage Anywhere Cache Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as time from "@pulumiverse/time";
 *
 * const bucket = new gcp.storage.Bucket("bucket", {
 *     name: "bucket-name",
 *     location: "US",
 * });
 * const destroyWait5000Seconds = new time.index.Sleep("destroy_wait_5000_seconds", {destroyDuration: "5000s"}, {
 *     dependsOn: [bucket],
 * });
 * const cache = new gcp.storage.AnywhereCache("cache", {
 *     bucket: bucket.name,
 *     zone: "us-central1-f",
 *     ttl: "3601s",
 * }, {
 *     dependsOn: [destroyWait5000Seconds],
 * });
 * ```
 *
 * ## Import
 *
 * AnywhereCache can be imported using any of these accepted formats:
 *
 * * `b/{{bucket}}/anywhereCaches/{{anywhere_cache_id}}`
 *
 * * `{{bucket}}/{{anywhere_cache_id}}`
 *
 * When using the `pulumi import` command, AnywhereCache can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:storage/anywhereCache:AnywhereCache default b/{{bucket}}/anywhereCaches/{{anywhere_cache_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:storage/anywhereCache:AnywhereCache default {{bucket}}/{{anywhere_cache_id}}
 * ```
 */
export class AnywhereCache extends pulumi.CustomResource {
    /**
     * Get an existing AnywhereCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AnywhereCacheState, opts?: pulumi.CustomResourceOptions): AnywhereCache {
        return new AnywhereCache(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:storage/anywhereCache:AnywhereCache';

    /**
     * Returns true if the given object is an instance of AnywhereCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AnywhereCache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AnywhereCache.__pulumiType;
    }

    /**
     * The cache admission policy dictates whether a block should be inserted upon a cache miss.
     * Default value is `admit-on-first-miss`.
     * Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
     */
    public readonly admissionPolicy!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Anywhere cache instance.
     */
    public /*out*/ readonly anywhereCacheId!: pulumi.Output<string>;
    /**
     * A reference to Bucket resource
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * The creation time of the cache instance in RFC 3339 format.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * True if the cache instance has an active Update long-running operation.
     */
    public /*out*/ readonly pendingUpdate!: pulumi.Output<boolean>;
    /**
     * The current state of the cache instance.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The TTL of all cache entries in whole seconds. e.g., "7200s". It defaults to `86400s`
     */
    public readonly ttl!: pulumi.Output<string | undefined>;
    /**
     * The modification time of the cache instance metadata in RFC 3339 format.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The zone in which the cache instance needs to be created. For example, `us-central1-a.`
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a AnywhereCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AnywhereCacheArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AnywhereCacheArgs | AnywhereCacheState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AnywhereCacheState | undefined;
            resourceInputs["admissionPolicy"] = state ? state.admissionPolicy : undefined;
            resourceInputs["anywhereCacheId"] = state ? state.anywhereCacheId : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["pendingUpdate"] = state ? state.pendingUpdate : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as AnywhereCacheArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["admissionPolicy"] = args ? args.admissionPolicy : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["anywhereCacheId"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["pendingUpdate"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AnywhereCache.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AnywhereCache resources.
 */
export interface AnywhereCacheState {
    /**
     * The cache admission policy dictates whether a block should be inserted upon a cache miss.
     * Default value is `admit-on-first-miss`.
     * Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
     */
    admissionPolicy?: pulumi.Input<string>;
    /**
     * The ID of the Anywhere cache instance.
     */
    anywhereCacheId?: pulumi.Input<string>;
    /**
     * A reference to Bucket resource
     */
    bucket?: pulumi.Input<string>;
    /**
     * The creation time of the cache instance in RFC 3339 format.
     */
    createTime?: pulumi.Input<string>;
    /**
     * True if the cache instance has an active Update long-running operation.
     */
    pendingUpdate?: pulumi.Input<boolean>;
    /**
     * The current state of the cache instance.
     */
    state?: pulumi.Input<string>;
    /**
     * The TTL of all cache entries in whole seconds. e.g., "7200s". It defaults to `86400s`
     */
    ttl?: pulumi.Input<string>;
    /**
     * The modification time of the cache instance metadata in RFC 3339 format.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The zone in which the cache instance needs to be created. For example, `us-central1-a.`
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AnywhereCache resource.
 */
export interface AnywhereCacheArgs {
    /**
     * The cache admission policy dictates whether a block should be inserted upon a cache miss.
     * Default value is `admit-on-first-miss`.
     * Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
     */
    admissionPolicy?: pulumi.Input<string>;
    /**
     * A reference to Bucket resource
     */
    bucket: pulumi.Input<string>;
    /**
     * The TTL of all cache entries in whole seconds. e.g., "7200s". It defaults to `86400s`
     */
    ttl?: pulumi.Input<string>;
    /**
     * The zone in which the cache instance needs to be created. For example, `us-central1-a.`
     */
    zone: pulumi.Input<string>;
}
