// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConfigArgs, ConfigState } from "./config";
export type Config = import("./config").Config;
export const Config: typeof import("./config").Config = null as any;
utilities.lazyLoad(exports, ["Config"], () => require("./config"));

export { ConfigIamBindingArgs, ConfigIamBindingState } from "./configIamBinding";
export type ConfigIamBinding = import("./configIamBinding").ConfigIamBinding;
export const ConfigIamBinding: typeof import("./configIamBinding").ConfigIamBinding = null as any;
utilities.lazyLoad(exports, ["ConfigIamBinding"], () => require("./configIamBinding"));

export { ConfigIamMemberArgs, ConfigIamMemberState } from "./configIamMember";
export type ConfigIamMember = import("./configIamMember").ConfigIamMember;
export const ConfigIamMember: typeof import("./configIamMember").ConfigIamMember = null as any;
utilities.lazyLoad(exports, ["ConfigIamMember"], () => require("./configIamMember"));

export { ConfigIamPolicyArgs, ConfigIamPolicyState } from "./configIamPolicy";
export type ConfigIamPolicy = import("./configIamPolicy").ConfigIamPolicy;
export const ConfigIamPolicy: typeof import("./configIamPolicy").ConfigIamPolicy = null as any;
utilities.lazyLoad(exports, ["ConfigIamPolicy"], () => require("./configIamPolicy"));

export { GetConfigArgs, GetConfigResult, GetConfigOutputArgs } from "./getConfig";
export const getConfig: typeof import("./getConfig").getConfig = null as any;
export const getConfigOutput: typeof import("./getConfig").getConfigOutput = null as any;
utilities.lazyLoad(exports, ["getConfig","getConfigOutput"], () => require("./getConfig"));

export { GetVariableArgs, GetVariableResult, GetVariableOutputArgs } from "./getVariable";
export const getVariable: typeof import("./getVariable").getVariable = null as any;
export const getVariableOutput: typeof import("./getVariable").getVariableOutput = null as any;
utilities.lazyLoad(exports, ["getVariable","getVariableOutput"], () => require("./getVariable"));

export { VariableArgs, VariableState } from "./variable";
export type Variable = import("./variable").Variable;
export const Variable: typeof import("./variable").Variable = null as any;
utilities.lazyLoad(exports, ["Variable"], () => require("./variable"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:runtimeconfig/config:Config":
                return new Config(name, <any>undefined, { urn })
            case "gcp:runtimeconfig/configIamBinding:ConfigIamBinding":
                return new ConfigIamBinding(name, <any>undefined, { urn })
            case "gcp:runtimeconfig/configIamMember:ConfigIamMember":
                return new ConfigIamMember(name, <any>undefined, { urn })
            case "gcp:runtimeconfig/configIamPolicy:ConfigIamPolicy":
                return new ConfigIamPolicy(name, <any>undefined, { urn })
            case "gcp:runtimeconfig/variable:Variable":
                return new Variable(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "runtimeconfig/config", _module)
pulumi.runtime.registerResourceModule("gcp", "runtimeconfig/configIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "runtimeconfig/configIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "runtimeconfig/configIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "runtimeconfig/variable", _module)
