// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Memorystore Instance Desired User Created Endpoints
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network1 = new gcp.compute.Network("network1", {
 *     name: "net1",
 *     autoCreateSubnetworks: false,
 * });
 * const subnetNetwork1 = new gcp.compute.Subnetwork("subnet_network1", {
 *     name: "subnet-net1",
 *     ipCidrRange: "10.0.0.248/29",
 *     region: "us-central1",
 *     network: network1.id,
 * });
 * const ip1Network1 = new gcp.compute.Address("ip1_network1", {
 *     name: "ip1-net1",
 *     region: "us-central1",
 *     subnetwork: subnetNetwork1.id,
 *     addressType: "INTERNAL",
 *     purpose: "GCE_ENDPOINT",
 * });
 * //Valkey instance without endpoints
 * const instance_user_connInstance = new gcp.memorystore.Instance("instance-user-conn", {
 *     instanceId: "instance-user-conn",
 *     shardCount: 1,
 *     location: "us-central1",
 *     deletionProtectionEnabled: false,
 * });
 * const forwardingRule1Network1 = new gcp.compute.ForwardingRule("forwarding_rule1_network1", {
 *     name: "fwd1-net1",
 *     region: "us-central1",
 *     ipAddress: ip1Network1.id,
 *     loadBalancingScheme: "",
 *     network: network1.id,
 *     target: instance_user_connInstance.pscAttachmentDetails.apply(pscAttachmentDetails => pscAttachmentDetails[0].serviceAttachment),
 * });
 * const ip2Network1 = new gcp.compute.Address("ip2_network1", {
 *     name: "ip2-net1",
 *     region: "us-central1",
 *     subnetwork: subnetNetwork1.id,
 *     addressType: "INTERNAL",
 *     purpose: "GCE_ENDPOINT",
 * });
 * const forwardingRule2Network1 = new gcp.compute.ForwardingRule("forwarding_rule2_network1", {
 *     name: "fwd2-net1",
 *     region: "us-central1",
 *     ipAddress: ip2Network1.id,
 *     loadBalancingScheme: "",
 *     network: network1.id,
 *     target: instance_user_connInstance.pscAttachmentDetails.apply(pscAttachmentDetails => pscAttachmentDetails[1].serviceAttachment),
 * });
 * const network2 = new gcp.compute.Network("network2", {
 *     name: "network2",
 *     autoCreateSubnetworks: false,
 * });
 * const subnetNetwork2 = new gcp.compute.Subnetwork("subnet_network2", {
 *     name: "subnet-net2",
 *     ipCidrRange: "10.0.0.248/29",
 *     region: "us-central1",
 *     network: network2.id,
 * });
 * const ip1Network2 = new gcp.compute.Address("ip1_network2", {
 *     name: "ip1-net2",
 *     region: "us-central1",
 *     subnetwork: subnetNetwork2.id,
 *     addressType: "INTERNAL",
 *     purpose: "GCE_ENDPOINT",
 * });
 * const forwardingRule1Network2 = new gcp.compute.ForwardingRule("forwarding_rule1_network2", {
 *     name: "fwd1-net2",
 *     region: "us-central1",
 *     ipAddress: ip1Network2.id,
 *     loadBalancingScheme: "",
 *     network: network2.id,
 *     target: instance_user_connInstance.pscAttachmentDetails.apply(pscAttachmentDetails => pscAttachmentDetails[0].serviceAttachment),
 * });
 * const ip2Network2 = new gcp.compute.Address("ip2_network2", {
 *     name: "ip2-net2",
 *     region: "us-central1",
 *     subnetwork: subnetNetwork2.id,
 *     addressType: "INTERNAL",
 *     purpose: "GCE_ENDPOINT",
 * });
 * const forwardingRule2Network2 = new gcp.compute.ForwardingRule("forwarding_rule2_network2", {
 *     name: "fwd2-net2",
 *     region: "us-central1",
 *     ipAddress: ip2Network2.id,
 *     loadBalancingScheme: "",
 *     network: network2.id,
 *     target: instance_user_connInstance.pscAttachmentDetails.apply(pscAttachmentDetails => pscAttachmentDetails[1].serviceAttachment),
 * });
 * const instance_user_conn = new gcp.memorystore.InstanceDesiredUserCreatedEndpoints("instance-user-conn", {
 *     name: "instance-user-conn",
 *     region: "us-central1",
 *     desiredUserCreatedEndpoints: [
 *         {
 *             connections: [
 *                 {
 *                     pscConnection: {
 *                         pscConnectionId: forwardingRule1Network1.pscConnectionId,
 *                         ipAddress: ip1Network1.address,
 *                         forwardingRule: forwardingRule1Network1.id,
 *                         network: network1.id,
 *                         serviceAttachment: instance_user_connInstance.pscAttachmentDetails.apply(pscAttachmentDetails => pscAttachmentDetails[0].serviceAttachment),
 *                     },
 *                 },
 *                 {
 *                     pscConnection: {
 *                         pscConnectionId: forwardingRule2Network1.pscConnectionId,
 *                         ipAddress: ip2Network1.address,
 *                         forwardingRule: forwardingRule2Network1.id,
 *                         network: network1.id,
 *                         serviceAttachment: instance_user_connInstance.pscAttachmentDetails.apply(pscAttachmentDetails => pscAttachmentDetails[1].serviceAttachment),
 *                     },
 *                 },
 *             ],
 *         },
 *         {
 *             connections: [
 *                 {
 *                     pscConnection: {
 *                         pscConnectionId: forwardingRule1Network2.pscConnectionId,
 *                         ipAddress: ip1Network2.address,
 *                         forwardingRule: forwardingRule1Network2.id,
 *                         network: network2.id,
 *                         serviceAttachment: instance_user_connInstance.pscAttachmentDetails.apply(pscAttachmentDetails => pscAttachmentDetails[0].serviceAttachment),
 *                     },
 *                 },
 *                 {
 *                     pscConnection: {
 *                         pscConnectionId: forwardingRule2Network2.pscConnectionId,
 *                         ipAddress: ip2Network2.address,
 *                         forwardingRule: forwardingRule2Network2.id,
 *                         network: network2.id,
 *                         serviceAttachment: instance_user_connInstance.pscAttachmentDetails.apply(pscAttachmentDetails => pscAttachmentDetails[1].serviceAttachment),
 *                     },
 *                 },
 *             ],
 *         },
 *     ],
 * });
 * const project = gcp.organizations.getProject({});
 * ```
 * ### Memorystore Instance Desired User And Auto Created Endpoints
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network2 = new gcp.compute.Network("network2", {
 *     name: "network2",
 *     autoCreateSubnetworks: false,
 * });
 * const subnetNetwork2 = new gcp.compute.Subnetwork("subnet_network2", {
 *     name: "subnet-net2",
 *     ipCidrRange: "10.0.0.248/29",
 *     region: "us-central1",
 *     network: network2.id,
 * });
 * const ip1Network2 = new gcp.compute.Address("ip1_network2", {
 *     name: "ip1-net2",
 *     region: "us-central1",
 *     subnetwork: subnetNetwork2.id,
 *     addressType: "INTERNAL",
 *     purpose: "GCE_ENDPOINT",
 * });
 * const network1 = new gcp.compute.Network("network1", {
 *     name: "net1",
 *     autoCreateSubnetworks: false,
 * });
 * const subnetNetwork1 = new gcp.compute.Subnetwork("subnet_network1", {
 *     name: "subnet-net1",
 *     ipCidrRange: "10.0.0.248/29",
 *     region: "us-central1",
 *     network: network1.id,
 * });
 * const _default = new gcp.networkconnectivity.ServiceConnectionPolicy("default", {
 *     name: "scpolicy",
 *     location: "us-central1",
 *     serviceClass: "gcp-memorystore",
 *     description: "my basic service connection policy",
 *     network: network1.id,
 *     pscConfig: {
 *         subnetworks: [subnetNetwork1.id],
 *     },
 * });
 * const project = gcp.organizations.getProject({});
 * //valkey instance with endpoints
 * const instance_user_auto_connInstance = new gcp.memorystore.Instance("instance-user-auto-conn", {
 *     instanceId: "instance-user-auto-conn",
 *     shardCount: 1,
 *     desiredPscAutoConnections: [{
 *         network: network1.id,
 *         projectId: project.then(project => project.projectId),
 *     }],
 *     location: "us-central1",
 *     deletionProtectionEnabled: false,
 * }, {
 *     dependsOn: [_default],
 * });
 * const forwardingRule1Network2 = new gcp.compute.ForwardingRule("forwarding_rule1_network2", {
 *     name: "fwd1-net2",
 *     region: "us-central1",
 *     ipAddress: ip1Network2.id,
 *     loadBalancingScheme: "",
 *     network: network2.id,
 *     target: instance_user_auto_connInstance.pscAttachmentDetails.apply(pscAttachmentDetails => pscAttachmentDetails[0].serviceAttachment),
 * });
 * const ip2Network2 = new gcp.compute.Address("ip2_network2", {
 *     name: "ip2-net2",
 *     region: "us-central1",
 *     subnetwork: subnetNetwork2.id,
 *     addressType: "INTERNAL",
 *     purpose: "GCE_ENDPOINT",
 * });
 * const forwardingRule2Network2 = new gcp.compute.ForwardingRule("forwarding_rule2_network2", {
 *     name: "fwd2-net2",
 *     region: "us-central1",
 *     ipAddress: ip2Network2.id,
 *     loadBalancingScheme: "",
 *     network: network2.id,
 *     target: instance_user_auto_connInstance.pscAttachmentDetails.apply(pscAttachmentDetails => pscAttachmentDetails[1].serviceAttachment),
 * });
 * const instance_user_auto_conn = new gcp.memorystore.InstanceDesiredUserCreatedEndpoints("instance-user-auto-conn", {
 *     name: "instance-user-auto-conn",
 *     region: "us-central1",
 *     desiredUserCreatedEndpoints: [{
 *         connections: [
 *             {
 *                 pscConnection: {
 *                     pscConnectionId: forwardingRule1Network2.pscConnectionId,
 *                     ipAddress: ip1Network2.address,
 *                     forwardingRule: forwardingRule1Network2.id,
 *                     network: network2.id,
 *                     serviceAttachment: instance_user_auto_connInstance.pscAttachmentDetails.apply(pscAttachmentDetails => pscAttachmentDetails[0].serviceAttachment),
 *                 },
 *             },
 *             {
 *                 pscConnection: {
 *                     pscConnectionId: forwardingRule2Network2.pscConnectionId,
 *                     ipAddress: ip2Network2.address,
 *                     forwardingRule: forwardingRule2Network2.id,
 *                     network: network2.id,
 *                     serviceAttachment: instance_user_auto_connInstance.pscAttachmentDetails.apply(pscAttachmentDetails => pscAttachmentDetails[1].serviceAttachment),
 *                 },
 *             },
 *         ],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * InstanceDesiredUserCreatedEndpoints can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{region}}/instances/{{name}}`
 *
 * * `{{project}}/{{region}}/{{name}}`
 *
 * * `{{region}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, InstanceDesiredUserCreatedEndpoints can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:memorystore/instanceDesiredUserCreatedEndpoints:InstanceDesiredUserCreatedEndpoints default projects/{{project}}/locations/{{region}}/instances/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:memorystore/instanceDesiredUserCreatedEndpoints:InstanceDesiredUserCreatedEndpoints default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:memorystore/instanceDesiredUserCreatedEndpoints:InstanceDesiredUserCreatedEndpoints default {{region}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:memorystore/instanceDesiredUserCreatedEndpoints:InstanceDesiredUserCreatedEndpoints default {{name}}
 * ```
 */
export class InstanceDesiredUserCreatedEndpoints extends pulumi.CustomResource {
    /**
     * Get an existing InstanceDesiredUserCreatedEndpoints resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceDesiredUserCreatedEndpointsState, opts?: pulumi.CustomResourceOptions): InstanceDesiredUserCreatedEndpoints {
        return new InstanceDesiredUserCreatedEndpoints(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:memorystore/instanceDesiredUserCreatedEndpoints:InstanceDesiredUserCreatedEndpoints';

    /**
     * Returns true if the given object is an instance of InstanceDesiredUserCreatedEndpoints.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceDesiredUserCreatedEndpoints {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceDesiredUserCreatedEndpoints.__pulumiType;
    }

    /**
     * A list of desired user endpoints
     * Structure is documented below.
     */
    public readonly desiredUserCreatedEndpoints!: pulumi.Output<outputs.memorystore.InstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpoint[] | undefined>;
    /**
     * The name of the Memorystore instance these endpoints should be added to.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The name of the region of the Memorystore instance these endpoints should be added to.
     *
     *
     * - - -
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a InstanceDesiredUserCreatedEndpoints resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceDesiredUserCreatedEndpointsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceDesiredUserCreatedEndpointsArgs | InstanceDesiredUserCreatedEndpointsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceDesiredUserCreatedEndpointsState | undefined;
            resourceInputs["desiredUserCreatedEndpoints"] = state ? state.desiredUserCreatedEndpoints : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as InstanceDesiredUserCreatedEndpointsArgs | undefined;
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["desiredUserCreatedEndpoints"] = args ? args.desiredUserCreatedEndpoints : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceDesiredUserCreatedEndpoints.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceDesiredUserCreatedEndpoints resources.
 */
export interface InstanceDesiredUserCreatedEndpointsState {
    /**
     * A list of desired user endpoints
     * Structure is documented below.
     */
    desiredUserCreatedEndpoints?: pulumi.Input<pulumi.Input<inputs.memorystore.InstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpoint>[]>;
    /**
     * The name of the Memorystore instance these endpoints should be added to.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The name of the region of the Memorystore instance these endpoints should be added to.
     *
     *
     * - - -
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceDesiredUserCreatedEndpoints resource.
 */
export interface InstanceDesiredUserCreatedEndpointsArgs {
    /**
     * A list of desired user endpoints
     * Structure is documented below.
     */
    desiredUserCreatedEndpoints?: pulumi.Input<pulumi.Input<inputs.memorystore.InstanceDesiredUserCreatedEndpointsDesiredUserCreatedEndpoint>[]>;
    /**
     * The name of the Memorystore instance these endpoints should be added to.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The name of the region of the Memorystore instance these endpoints should be added to.
     *
     *
     * - - -
     */
    region: pulumi.Input<string>;
}
