// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Mute Findings is a volume management feature in Security Command Center
 * that lets you manually or programmatically hide irrelevant findings,
 * and create filters to automatically silence existing and future
 * findings based on criteria you specify.
 *
 * To get more information about ProjectMuteConfig, see:
 *
 * * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/projects.muteConfigs)
 *
 * ## Example Usage
 *
 * ### Scc V2 Project Mute Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.securitycenter.V2ProjectMuteConfig("default", {
 *     muteConfigId: "my-config",
 *     project: "my-project-name",
 *     location: "global",
 *     description: "My custom Cloud Security Command Center Finding Project mute Configuration",
 *     filter: "severity = \"HIGH\"",
 *     type: "STATIC",
 * });
 * ```
 *
 * ## Import
 *
 * ProjectMuteConfig can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/muteConfigs/{{mute_config_id}}`
 *
 * * `{{project}}/{{location}}/{{mute_config_id}}`
 *
 * * `{{location}}/{{mute_config_id}}`
 *
 * When using the `pulumi import` command, ProjectMuteConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig default projects/{{project}}/locations/{{location}}/muteConfigs/{{mute_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig default {{project}}/{{location}}/{{mute_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig default {{location}}/{{mute_config_id}}
 * ```
 */
export class V2ProjectMuteConfig extends pulumi.CustomResource {
    /**
     * Get an existing V2ProjectMuteConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V2ProjectMuteConfigState, opts?: pulumi.CustomResourceOptions): V2ProjectMuteConfig {
        return new V2ProjectMuteConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig';

    /**
     * Returns true if the given object is an instance of V2ProjectMuteConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V2ProjectMuteConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V2ProjectMuteConfig.__pulumiType;
    }

    /**
     * The time at which the mute config was created. This field is set by
     * the server and will be ignored if provided on config creation.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A description of the mute config.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     */
    public readonly filter!: pulumi.Output<string>;
    /**
     * location Id is provided by project. If not provided, Use global as default.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * Email address of the user who last edited the mute config. This
     * field is set by the server and will be ignored if provided on
     * config creation or update.
     */
    public /*out*/ readonly mostRecentEditor!: pulumi.Output<string>;
    /**
     * Unique identifier provided by the client within the parent scope.
     */
    public readonly muteConfigId!: pulumi.Output<string>;
    /**
     * Name of the mute config. Its format is
     * projects/{project}/locations/global/muteConfigs/{configId},
     * folders/{folder}/locations/global/muteConfigs/{configId},
     * or organizations/{organization}/locations/global/muteConfigs/{configId}
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The type of the mute config.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Output only. The most recent time at which the mute config was
     * updated. This field is set by the server and will be ignored if
     * provided on config creation or update.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a V2ProjectMuteConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V2ProjectMuteConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V2ProjectMuteConfigArgs | V2ProjectMuteConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V2ProjectMuteConfigState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mostRecentEditor"] = state ? state.mostRecentEditor : undefined;
            resourceInputs["muteConfigId"] = state ? state.muteConfigId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as V2ProjectMuteConfigArgs | undefined;
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.muteConfigId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'muteConfigId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["muteConfigId"] = args ? args.muteConfigId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["mostRecentEditor"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(V2ProjectMuteConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering V2ProjectMuteConfig resources.
 */
export interface V2ProjectMuteConfigState {
    /**
     * The time at which the mute config was created. This field is set by
     * the server and will be ignored if provided on config creation.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A description of the mute config.
     */
    description?: pulumi.Input<string>;
    /**
     * An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     */
    filter?: pulumi.Input<string>;
    /**
     * location Id is provided by project. If not provided, Use global as default.
     */
    location?: pulumi.Input<string>;
    /**
     * Email address of the user who last edited the mute config. This
     * field is set by the server and will be ignored if provided on
     * config creation or update.
     */
    mostRecentEditor?: pulumi.Input<string>;
    /**
     * Unique identifier provided by the client within the parent scope.
     */
    muteConfigId?: pulumi.Input<string>;
    /**
     * Name of the mute config. Its format is
     * projects/{project}/locations/global/muteConfigs/{configId},
     * folders/{folder}/locations/global/muteConfigs/{configId},
     * or organizations/{organization}/locations/global/muteConfigs/{configId}
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The type of the mute config.
     */
    type?: pulumi.Input<string>;
    /**
     * Output only. The most recent time at which the mute config was
     * updated. This field is set by the server and will be ignored if
     * provided on config creation or update.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a V2ProjectMuteConfig resource.
 */
export interface V2ProjectMuteConfigArgs {
    /**
     * A description of the mute config.
     */
    description?: pulumi.Input<string>;
    /**
     * An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     */
    filter: pulumi.Input<string>;
    /**
     * location Id is provided by project. If not provided, Use global as default.
     */
    location?: pulumi.Input<string>;
    /**
     * Unique identifier provided by the client within the parent scope.
     */
    muteConfigId: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The type of the mute config.
     */
    type: pulumi.Input<string>;
}
