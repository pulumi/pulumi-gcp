// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { EventThreatDetectionCustomModuleArgs, EventThreatDetectionCustomModuleState } from "./eventThreatDetectionCustomModule";
export type EventThreatDetectionCustomModule = import("./eventThreatDetectionCustomModule").EventThreatDetectionCustomModule;
export const EventThreatDetectionCustomModule: typeof import("./eventThreatDetectionCustomModule").EventThreatDetectionCustomModule = null as any;
utilities.lazyLoad(exports, ["EventThreatDetectionCustomModule"], () => require("./eventThreatDetectionCustomModule"));

export { FolderCustomModuleArgs, FolderCustomModuleState } from "./folderCustomModule";
export type FolderCustomModule = import("./folderCustomModule").FolderCustomModule;
export const FolderCustomModule: typeof import("./folderCustomModule").FolderCustomModule = null as any;
utilities.lazyLoad(exports, ["FolderCustomModule"], () => require("./folderCustomModule"));

export { GetSourceIamPolicyArgs, GetSourceIamPolicyResult, GetSourceIamPolicyOutputArgs } from "./getSourceIamPolicy";
export const getSourceIamPolicy: typeof import("./getSourceIamPolicy").getSourceIamPolicy = null as any;
export const getSourceIamPolicyOutput: typeof import("./getSourceIamPolicy").getSourceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSourceIamPolicy","getSourceIamPolicyOutput"], () => require("./getSourceIamPolicy"));

export { InstanceIamBindingArgs, InstanceIamBindingState } from "./instanceIamBinding";
export type InstanceIamBinding = import("./instanceIamBinding").InstanceIamBinding;
export const InstanceIamBinding: typeof import("./instanceIamBinding").InstanceIamBinding = null as any;
utilities.lazyLoad(exports, ["InstanceIamBinding"], () => require("./instanceIamBinding"));

export { InstanceIamMemberArgs, InstanceIamMemberState } from "./instanceIamMember";
export type InstanceIamMember = import("./instanceIamMember").InstanceIamMember;
export const InstanceIamMember: typeof import("./instanceIamMember").InstanceIamMember = null as any;
utilities.lazyLoad(exports, ["InstanceIamMember"], () => require("./instanceIamMember"));

export { InstanceIamPolicyArgs, InstanceIamPolicyState } from "./instanceIamPolicy";
export type InstanceIamPolicy = import("./instanceIamPolicy").InstanceIamPolicy;
export const InstanceIamPolicy: typeof import("./instanceIamPolicy").InstanceIamPolicy = null as any;
utilities.lazyLoad(exports, ["InstanceIamPolicy"], () => require("./instanceIamPolicy"));

export { ManagementFolderSecurityHealthAnalyticsCustomModuleArgs, ManagementFolderSecurityHealthAnalyticsCustomModuleState } from "./managementFolderSecurityHealthAnalyticsCustomModule";
export type ManagementFolderSecurityHealthAnalyticsCustomModule = import("./managementFolderSecurityHealthAnalyticsCustomModule").ManagementFolderSecurityHealthAnalyticsCustomModule;
export const ManagementFolderSecurityHealthAnalyticsCustomModule: typeof import("./managementFolderSecurityHealthAnalyticsCustomModule").ManagementFolderSecurityHealthAnalyticsCustomModule = null as any;
utilities.lazyLoad(exports, ["ManagementFolderSecurityHealthAnalyticsCustomModule"], () => require("./managementFolderSecurityHealthAnalyticsCustomModule"));

export { ManagementOrganizationEventThreatDetectionCustomModuleArgs, ManagementOrganizationEventThreatDetectionCustomModuleState } from "./managementOrganizationEventThreatDetectionCustomModule";
export type ManagementOrganizationEventThreatDetectionCustomModule = import("./managementOrganizationEventThreatDetectionCustomModule").ManagementOrganizationEventThreatDetectionCustomModule;
export const ManagementOrganizationEventThreatDetectionCustomModule: typeof import("./managementOrganizationEventThreatDetectionCustomModule").ManagementOrganizationEventThreatDetectionCustomModule = null as any;
utilities.lazyLoad(exports, ["ManagementOrganizationEventThreatDetectionCustomModule"], () => require("./managementOrganizationEventThreatDetectionCustomModule"));

export { ManagementOrganizationSecurityHealthAnalyticsCustomModuleArgs, ManagementOrganizationSecurityHealthAnalyticsCustomModuleState } from "./managementOrganizationSecurityHealthAnalyticsCustomModule";
export type ManagementOrganizationSecurityHealthAnalyticsCustomModule = import("./managementOrganizationSecurityHealthAnalyticsCustomModule").ManagementOrganizationSecurityHealthAnalyticsCustomModule;
export const ManagementOrganizationSecurityHealthAnalyticsCustomModule: typeof import("./managementOrganizationSecurityHealthAnalyticsCustomModule").ManagementOrganizationSecurityHealthAnalyticsCustomModule = null as any;
utilities.lazyLoad(exports, ["ManagementOrganizationSecurityHealthAnalyticsCustomModule"], () => require("./managementOrganizationSecurityHealthAnalyticsCustomModule"));

export { ManagementProjectSecurityHealthAnalyticsCustomModuleArgs, ManagementProjectSecurityHealthAnalyticsCustomModuleState } from "./managementProjectSecurityHealthAnalyticsCustomModule";
export type ManagementProjectSecurityHealthAnalyticsCustomModule = import("./managementProjectSecurityHealthAnalyticsCustomModule").ManagementProjectSecurityHealthAnalyticsCustomModule;
export const ManagementProjectSecurityHealthAnalyticsCustomModule: typeof import("./managementProjectSecurityHealthAnalyticsCustomModule").ManagementProjectSecurityHealthAnalyticsCustomModule = null as any;
utilities.lazyLoad(exports, ["ManagementProjectSecurityHealthAnalyticsCustomModule"], () => require("./managementProjectSecurityHealthAnalyticsCustomModule"));

export { MuteConfigArgs, MuteConfigState } from "./muteConfig";
export type MuteConfig = import("./muteConfig").MuteConfig;
export const MuteConfig: typeof import("./muteConfig").MuteConfig = null as any;
utilities.lazyLoad(exports, ["MuteConfig"], () => require("./muteConfig"));

export { NotificationConfigArgs, NotificationConfigState } from "./notificationConfig";
export type NotificationConfig = import("./notificationConfig").NotificationConfig;
export const NotificationConfig: typeof import("./notificationConfig").NotificationConfig = null as any;
utilities.lazyLoad(exports, ["NotificationConfig"], () => require("./notificationConfig"));

export { OrganizationCustomModuleArgs, OrganizationCustomModuleState } from "./organizationCustomModule";
export type OrganizationCustomModule = import("./organizationCustomModule").OrganizationCustomModule;
export const OrganizationCustomModule: typeof import("./organizationCustomModule").OrganizationCustomModule = null as any;
utilities.lazyLoad(exports, ["OrganizationCustomModule"], () => require("./organizationCustomModule"));

export { ProjectCustomModuleArgs, ProjectCustomModuleState } from "./projectCustomModule";
export type ProjectCustomModule = import("./projectCustomModule").ProjectCustomModule;
export const ProjectCustomModule: typeof import("./projectCustomModule").ProjectCustomModule = null as any;
utilities.lazyLoad(exports, ["ProjectCustomModule"], () => require("./projectCustomModule"));

export { SourceArgs, SourceState } from "./source";
export type Source = import("./source").Source;
export const Source: typeof import("./source").Source = null as any;
utilities.lazyLoad(exports, ["Source"], () => require("./source"));

export { SourceIamBindingArgs, SourceIamBindingState } from "./sourceIamBinding";
export type SourceIamBinding = import("./sourceIamBinding").SourceIamBinding;
export const SourceIamBinding: typeof import("./sourceIamBinding").SourceIamBinding = null as any;
utilities.lazyLoad(exports, ["SourceIamBinding"], () => require("./sourceIamBinding"));

export { SourceIamMemberArgs, SourceIamMemberState } from "./sourceIamMember";
export type SourceIamMember = import("./sourceIamMember").SourceIamMember;
export const SourceIamMember: typeof import("./sourceIamMember").SourceIamMember = null as any;
utilities.lazyLoad(exports, ["SourceIamMember"], () => require("./sourceIamMember"));

export { SourceIamPolicyArgs, SourceIamPolicyState } from "./sourceIamPolicy";
export type SourceIamPolicy = import("./sourceIamPolicy").SourceIamPolicy;
export const SourceIamPolicy: typeof import("./sourceIamPolicy").SourceIamPolicy = null as any;
utilities.lazyLoad(exports, ["SourceIamPolicy"], () => require("./sourceIamPolicy"));

export { V2OrganizationNotificationConfigArgs, V2OrganizationNotificationConfigState } from "./v2organizationNotificationConfig";
export type V2OrganizationNotificationConfig = import("./v2organizationNotificationConfig").V2OrganizationNotificationConfig;
export const V2OrganizationNotificationConfig: typeof import("./v2organizationNotificationConfig").V2OrganizationNotificationConfig = null as any;
utilities.lazyLoad(exports, ["V2OrganizationNotificationConfig"], () => require("./v2organizationNotificationConfig"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:securitycenter/eventThreatDetectionCustomModule:EventThreatDetectionCustomModule":
                return new EventThreatDetectionCustomModule(name, <any>undefined, { urn })
            case "gcp:securitycenter/folderCustomModule:FolderCustomModule":
                return new FolderCustomModule(name, <any>undefined, { urn })
            case "gcp:securitycenter/instanceIamBinding:InstanceIamBinding":
                return new InstanceIamBinding(name, <any>undefined, { urn })
            case "gcp:securitycenter/instanceIamMember:InstanceIamMember":
                return new InstanceIamMember(name, <any>undefined, { urn })
            case "gcp:securitycenter/instanceIamPolicy:InstanceIamPolicy":
                return new InstanceIamPolicy(name, <any>undefined, { urn })
            case "gcp:securitycenter/managementFolderSecurityHealthAnalyticsCustomModule:ManagementFolderSecurityHealthAnalyticsCustomModule":
                return new ManagementFolderSecurityHealthAnalyticsCustomModule(name, <any>undefined, { urn })
            case "gcp:securitycenter/managementOrganizationEventThreatDetectionCustomModule:ManagementOrganizationEventThreatDetectionCustomModule":
                return new ManagementOrganizationEventThreatDetectionCustomModule(name, <any>undefined, { urn })
            case "gcp:securitycenter/managementOrganizationSecurityHealthAnalyticsCustomModule:ManagementOrganizationSecurityHealthAnalyticsCustomModule":
                return new ManagementOrganizationSecurityHealthAnalyticsCustomModule(name, <any>undefined, { urn })
            case "gcp:securitycenter/managementProjectSecurityHealthAnalyticsCustomModule:ManagementProjectSecurityHealthAnalyticsCustomModule":
                return new ManagementProjectSecurityHealthAnalyticsCustomModule(name, <any>undefined, { urn })
            case "gcp:securitycenter/muteConfig:MuteConfig":
                return new MuteConfig(name, <any>undefined, { urn })
            case "gcp:securitycenter/notificationConfig:NotificationConfig":
                return new NotificationConfig(name, <any>undefined, { urn })
            case "gcp:securitycenter/organizationCustomModule:OrganizationCustomModule":
                return new OrganizationCustomModule(name, <any>undefined, { urn })
            case "gcp:securitycenter/projectCustomModule:ProjectCustomModule":
                return new ProjectCustomModule(name, <any>undefined, { urn })
            case "gcp:securitycenter/source:Source":
                return new Source(name, <any>undefined, { urn })
            case "gcp:securitycenter/sourceIamBinding:SourceIamBinding":
                return new SourceIamBinding(name, <any>undefined, { urn })
            case "gcp:securitycenter/sourceIamMember:SourceIamMember":
                return new SourceIamMember(name, <any>undefined, { urn })
            case "gcp:securitycenter/sourceIamPolicy:SourceIamPolicy":
                return new SourceIamPolicy(name, <any>undefined, { urn })
            case "gcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig":
                return new V2OrganizationNotificationConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "securitycenter/eventThreatDetectionCustomModule", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/folderCustomModule", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/instanceIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/instanceIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/instanceIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/managementFolderSecurityHealthAnalyticsCustomModule", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/managementOrganizationEventThreatDetectionCustomModule", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/managementOrganizationSecurityHealthAnalyticsCustomModule", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/managementProjectSecurityHealthAnalyticsCustomModule", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/muteConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/notificationConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/organizationCustomModule", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/projectCustomModule", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/source", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/sourceIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/sourceIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/sourceIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "securitycenter/v2OrganizationNotificationConfig", _module)
