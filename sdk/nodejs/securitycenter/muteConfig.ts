// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Mute Findings is a volume management feature in Security Command Center
 * that lets you manually or programmatically hide irrelevant findings,
 * and create filters to automatically silence existing and future
 * findings based on criteria you specify.
 *
 * To get more information about MuteConfig, see:
 *
 * * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.muteConfigs)
 *
 * ## Example Usage
 * ### Scc Mute Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.securitycenter.MuteConfig("default", {
 *     description: "My Mute Config",
 *     filter: "category: \"OS_VULNERABILITY\"",
 *     muteConfigId: "my-config",
 *     parent: "organizations/123456789",
 * });
 * ```
 *
 * ## Import
 *
 * MuteConfig can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:securitycenter/muteConfig:MuteConfig default {{name}}
 * ```
 */
export class MuteConfig extends pulumi.CustomResource {
    /**
     * Get an existing MuteConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MuteConfigState, opts?: pulumi.CustomResourceOptions): MuteConfig {
        return new MuteConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:securitycenter/muteConfig:MuteConfig';

    /**
     * Returns true if the given object is an instance of MuteConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MuteConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MuteConfig.__pulumiType;
    }

    /**
     * The time at which the mute config was created. This field is set by
     * the server and will be ignored if provided on config creation.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A description of the mute config.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     */
    public readonly filter!: pulumi.Output<string>;
    /**
     * Email address of the user who last edited the mute config. This
     * field is set by the server and will be ignored if provided on
     * config creation or update.
     */
    public /*out*/ readonly mostRecentEditor!: pulumi.Output<string>;
    /**
     * Unique identifier provided by the client within the parent scope.
     */
    public readonly muteConfigId!: pulumi.Output<string>;
    /**
     * Name of the mute config. Its format is
     * organizations/{organization}/muteConfigs/{configId},
     * folders/{folder}/muteConfigs/{configId},
     * or projects/{project}/muteConfigs/{configId}
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Resource name of the new mute configs's parent. Its format is
     * "organizations/[organizationId]", "folders/[folderId]", or
     * "projects/[projectId]".
     */
    public readonly parent!: pulumi.Output<string>;
    /**
     * Output only. The most recent time at which the mute config was
     * updated. This field is set by the server and will be ignored if
     * provided on config creation or update.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a MuteConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MuteConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MuteConfigArgs | MuteConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MuteConfigState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["mostRecentEditor"] = state ? state.mostRecentEditor : undefined;
            resourceInputs["muteConfigId"] = state ? state.muteConfigId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as MuteConfigArgs | undefined;
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.muteConfigId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'muteConfigId'");
            }
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["muteConfigId"] = args ? args.muteConfigId : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["mostRecentEditor"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MuteConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MuteConfig resources.
 */
export interface MuteConfigState {
    /**
     * The time at which the mute config was created. This field is set by
     * the server and will be ignored if provided on config creation.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A description of the mute config.
     */
    description?: pulumi.Input<string>;
    /**
     * An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     */
    filter?: pulumi.Input<string>;
    /**
     * Email address of the user who last edited the mute config. This
     * field is set by the server and will be ignored if provided on
     * config creation or update.
     */
    mostRecentEditor?: pulumi.Input<string>;
    /**
     * Unique identifier provided by the client within the parent scope.
     */
    muteConfigId?: pulumi.Input<string>;
    /**
     * Name of the mute config. Its format is
     * organizations/{organization}/muteConfigs/{configId},
     * folders/{folder}/muteConfigs/{configId},
     * or projects/{project}/muteConfigs/{configId}
     */
    name?: pulumi.Input<string>;
    /**
     * Resource name of the new mute configs's parent. Its format is
     * "organizations/[organizationId]", "folders/[folderId]", or
     * "projects/[projectId]".
     */
    parent?: pulumi.Input<string>;
    /**
     * Output only. The most recent time at which the mute config was
     * updated. This field is set by the server and will be ignored if
     * provided on config creation or update.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MuteConfig resource.
 */
export interface MuteConfigArgs {
    /**
     * A description of the mute config.
     */
    description?: pulumi.Input<string>;
    /**
     * An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     */
    filter: pulumi.Input<string>;
    /**
     * Unique identifier provided by the client within the parent scope.
     */
    muteConfigId: pulumi.Input<string>;
    /**
     * Resource name of the new mute configs's parent. Its format is
     * "organizations/[organizationId]", "folders/[folderId]", or
     * "projects/[projectId]".
     */
    parent: pulumi.Input<string>;
}
