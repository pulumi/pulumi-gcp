// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A document schema is used to define document structure.
 *
 * To get more information about DocumentSchema, see:
 *
 * * [API documentation](https://cloud.google.com/document-warehouse/docs/reference/rest/v1/projects.locations.documentSchemas)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/document-warehouse/docs/manage-document-schemas)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * DocumentSchema can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema default projects/{{project_number}}/locations/{{location}}/documentSchemas/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema default {{project_number}}/{{location}}/{{name}}
 * ```
 */
export class DocumentAiWarehouseDocumentSchema extends pulumi.CustomResource {
    /**
     * Get an existing DocumentAiWarehouseDocumentSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DocumentAiWarehouseDocumentSchemaState, opts?: pulumi.CustomResourceOptions): DocumentAiWarehouseDocumentSchema {
        return new DocumentAiWarehouseDocumentSchema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema';

    /**
     * Returns true if the given object is an instance of DocumentAiWarehouseDocumentSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DocumentAiWarehouseDocumentSchema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DocumentAiWarehouseDocumentSchema.__pulumiType;
    }

    /**
     * Name of the schema given by the user.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Tells whether the document is a folder or a typical document.
     */
    public readonly documentIsFolder!: pulumi.Output<boolean | undefined>;
    /**
     * The location of the resource.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the metadata property.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The unique identifier of the project.
     */
    public readonly projectNumber!: pulumi.Output<string>;
    /**
     * Defines the metadata for a schema property.
     * Structure is documented below.
     */
    public readonly propertyDefinitions!: pulumi.Output<outputs.essentialcontacts.DocumentAiWarehouseDocumentSchemaPropertyDefinition[]>;

    /**
     * Create a DocumentAiWarehouseDocumentSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DocumentAiWarehouseDocumentSchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DocumentAiWarehouseDocumentSchemaArgs | DocumentAiWarehouseDocumentSchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DocumentAiWarehouseDocumentSchemaState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["documentIsFolder"] = state ? state.documentIsFolder : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectNumber"] = state ? state.projectNumber : undefined;
            resourceInputs["propertyDefinitions"] = state ? state.propertyDefinitions : undefined;
        } else {
            const args = argsOrState as DocumentAiWarehouseDocumentSchemaArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.projectNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectNumber'");
            }
            if ((!args || args.propertyDefinitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'propertyDefinitions'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["documentIsFolder"] = args ? args.documentIsFolder : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["projectNumber"] = args ? args.projectNumber : undefined;
            resourceInputs["propertyDefinitions"] = args ? args.propertyDefinitions : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DocumentAiWarehouseDocumentSchema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DocumentAiWarehouseDocumentSchema resources.
 */
export interface DocumentAiWarehouseDocumentSchemaState {
    /**
     * Name of the schema given by the user.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Tells whether the document is a folder or a typical document.
     */
    documentIsFolder?: pulumi.Input<boolean>;
    /**
     * The location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the metadata property.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique identifier of the project.
     */
    projectNumber?: pulumi.Input<string>;
    /**
     * Defines the metadata for a schema property.
     * Structure is documented below.
     */
    propertyDefinitions?: pulumi.Input<pulumi.Input<inputs.essentialcontacts.DocumentAiWarehouseDocumentSchemaPropertyDefinition>[]>;
}

/**
 * The set of arguments for constructing a DocumentAiWarehouseDocumentSchema resource.
 */
export interface DocumentAiWarehouseDocumentSchemaArgs {
    /**
     * Name of the schema given by the user.
     */
    displayName: pulumi.Input<string>;
    /**
     * Tells whether the document is a folder or a typical document.
     */
    documentIsFolder?: pulumi.Input<boolean>;
    /**
     * The location of the resource.
     */
    location: pulumi.Input<string>;
    /**
     * The unique identifier of the project.
     */
    projectNumber: pulumi.Input<string>;
    /**
     * Defines the metadata for a schema property.
     * Structure is documented below.
     */
    propertyDefinitions: pulumi.Input<pulumi.Input<inputs.essentialcontacts.DocumentAiWarehouseDocumentSchemaPropertyDefinition>[]>;
}
