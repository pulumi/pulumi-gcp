// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The Dataplex Zone resource
 *
 * ## Example Usage
 *
 * ### Basic_zone
 * A basic example of a dataplex zone
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.dataplex.Lake("basic", {
 *     location: "us-west1",
 *     name: "lake",
 *     description: "Lake for DCL",
 *     displayName: "Lake for DCL",
 *     project: "my-project-name",
 *     labels: {
 *         "my-lake": "exists",
 *     },
 * });
 * const primary = new gcp.dataplex.Zone("primary", {
 *     discoverySpec: {
 *         enabled: false,
 *     },
 *     lake: basic.name,
 *     location: "us-west1",
 *     name: "zone",
 *     resourceSpec: {
 *         locationType: "MULTI_REGION",
 *     },
 *     type: "RAW",
 *     description: "Zone for DCL",
 *     displayName: "Zone for DCL",
 *     project: "my-project-name",
 *     labels: {},
 * });
 * ```
 *
 * ## Import
 *
 * Zone can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{name}}`
 *
 * * `{{project}}/{{location}}/{{lake}}/{{name}}`
 *
 * * `{{location}}/{{lake}}/{{name}}`
 *
 * When using the `pulumi import` command, Zone can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:dataplex/zone:Zone default projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:dataplex/zone:Zone default {{project}}/{{location}}/{{lake}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:dataplex/zone:Zone default {{location}}/{{lake}}/{{name}}
 * ```
 */
export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:dataplex/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    /**
     * Output only. Aggregated status of the underlying assets of the zone.
     */
    declare public /*out*/ readonly assetStatuses: pulumi.Output<outputs.dataplex.ZoneAssetStatus[]>;
    /**
     * Output only. The time when the zone was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Optional. Description of the zone.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Required. Specification of the discovery feature applied to data in this zone.
     */
    declare public readonly discoverySpec: pulumi.Output<outputs.dataplex.ZoneDiscoverySpec>;
    /**
     * Optional. User friendly display name.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Optional. User defined labels for the zone.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The lake for the resource
     */
    declare public readonly lake: pulumi.Output<string>;
    /**
     * The location for the resource
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name of the zone.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Required. Immutable. Specification of the resources that are referenced by the assets within this zone.
     */
    declare public readonly resourceSpec: pulumi.Output<outputs.dataplex.ZoneResourceSpec>;
    /**
     * Output only. Current state of the zone. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * Required. Immutable. The type of the zone. Possible values: TYPE_UNSPECIFIED, RAW, CURATED
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Output only. System generated globally unique ID for the zone. This ID will be different if the zone is deleted and re-created with the same name.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * Output only. The time when the zone was last updated.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["assetStatuses"] = state?.assetStatuses;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["discoverySpec"] = state?.discoverySpec;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["lake"] = state?.lake;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["resourceSpec"] = state?.resourceSpec;
            resourceInputs["state"] = state?.state;
            resourceInputs["type"] = state?.type;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            if (args?.discoverySpec === undefined && !opts.urn) {
                throw new Error("Missing required property 'discoverySpec'");
            }
            if (args?.lake === undefined && !opts.urn) {
                throw new Error("Missing required property 'lake'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.resourceSpec === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceSpec'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["discoverySpec"] = args?.discoverySpec;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["lake"] = args?.lake;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["resourceSpec"] = args?.resourceSpec;
            resourceInputs["type"] = args?.type;
            resourceInputs["assetStatuses"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    /**
     * Output only. Aggregated status of the underlying assets of the zone.
     */
    assetStatuses?: pulumi.Input<pulumi.Input<inputs.dataplex.ZoneAssetStatus>[]>;
    /**
     * Output only. The time when the zone was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. Description of the zone.
     */
    description?: pulumi.Input<string>;
    /**
     * Required. Specification of the discovery feature applied to data in this zone.
     */
    discoverySpec?: pulumi.Input<inputs.dataplex.ZoneDiscoverySpec>;
    /**
     * Optional. User friendly display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. User defined labels for the zone.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The lake for the resource
     */
    lake?: pulumi.Input<string>;
    /**
     * The location for the resource
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required. Immutable. Specification of the resources that are referenced by the assets within this zone.
     */
    resourceSpec?: pulumi.Input<inputs.dataplex.ZoneResourceSpec>;
    /**
     * Output only. Current state of the zone. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
     */
    state?: pulumi.Input<string>;
    /**
     * Required. Immutable. The type of the zone. Possible values: TYPE_UNSPECIFIED, RAW, CURATED
     */
    type?: pulumi.Input<string>;
    /**
     * Output only. System generated globally unique ID for the zone. This ID will be different if the zone is deleted and re-created with the same name.
     */
    uid?: pulumi.Input<string>;
    /**
     * Output only. The time when the zone was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    /**
     * Optional. Description of the zone.
     */
    description?: pulumi.Input<string>;
    /**
     * Required. Specification of the discovery feature applied to data in this zone.
     */
    discoverySpec: pulumi.Input<inputs.dataplex.ZoneDiscoverySpec>;
    /**
     * Optional. User friendly display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Optional. User defined labels for the zone.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The lake for the resource
     */
    lake: pulumi.Input<string>;
    /**
     * The location for the resource
     */
    location: pulumi.Input<string>;
    /**
     * The name of the zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Required. Immutable. Specification of the resources that are referenced by the assets within this zone.
     */
    resourceSpec: pulumi.Input<inputs.dataplex.ZoneResourceSpec>;
    /**
     * Required. Immutable. The type of the zone. Possible values: TYPE_UNSPECIFIED, RAW, CURATED
     */
    type: pulumi.Input<string>;
}
