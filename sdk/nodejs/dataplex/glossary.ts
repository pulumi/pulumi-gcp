// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Represents a collection of categories and terms defined by the user. Glossary is a top level resource and is the GCP parent resource of all the categories and terms within it.
 *
 * ## Example Usage
 *
 * ### Dataplex Glossary Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const glossaryTestId = new gcp.dataplex.Glossary("glossary_test_id", {
 *     glossaryId: "glossary-basic",
 *     location: "us-central1",
 * });
 * ```
 * ### Dataplex Glossary Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const glossaryTestIdFull = new gcp.dataplex.Glossary("glossary_test_id_full", {
 *     glossaryId: "glossary-full",
 *     location: "us-central1",
 *     labels: {
 *         tag: "test-tf",
 *     },
 *     displayName: "terraform glossary",
 *     description: "glossary created by Terraform",
 * });
 * ```
 *
 * ## Import
 *
 * Glossary can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}`
 *
 * * `{{project}}/{{location}}/{{glossary_id}}`
 *
 * * `{{location}}/{{glossary_id}}`
 *
 * When using the `pulumi import` command, Glossary can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:dataplex/glossary:Glossary default projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:dataplex/glossary:Glossary default {{project}}/{{location}}/{{glossary_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:dataplex/glossary:Glossary default {{location}}/{{glossary_id}}
 * ```
 */
export class Glossary extends pulumi.CustomResource {
    /**
     * Get an existing Glossary resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlossaryState, opts?: pulumi.CustomResourceOptions): Glossary {
        return new Glossary(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:dataplex/glossary:Glossary';

    /**
     * Returns true if the given object is an instance of Glossary.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Glossary {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Glossary.__pulumiType;
    }

    /**
     * The number of categories in the glossary.
     */
    declare public /*out*/ readonly categoryCount: pulumi.Output<number>;
    /**
     * The time at which the glossary was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The user-mutable description of the glossary.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * User friendly display name of the glossary. This is user-mutable. This will be same as the glossaryId, if not specified.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The glossary id for creation.
     */
    declare public readonly glossaryId: pulumi.Output<string>;
    /**
     * User-defined labels for the Glossary.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location where the glossary should reside.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The resource name of the Glossary. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The number of terms in the glossary.
     */
    declare public /*out*/ readonly termCount: pulumi.Output<number>;
    /**
     * System generated unique id for the Glossary. This ID will be different if the Glossary is deleted and re-created with the same name.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * The time at which the glossary was last updated.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a Glossary resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlossaryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlossaryArgs | GlossaryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlossaryState | undefined;
            resourceInputs["categoryCount"] = state?.categoryCount;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["glossaryId"] = state?.glossaryId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["termCount"] = state?.termCount;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as GlossaryArgs | undefined;
            if (args?.glossaryId === undefined && !opts.urn) {
                throw new Error("Missing required property 'glossaryId'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["glossaryId"] = args?.glossaryId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["project"] = args?.project;
            resourceInputs["categoryCount"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["termCount"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Glossary.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Glossary resources.
 */
export interface GlossaryState {
    /**
     * The number of categories in the glossary.
     */
    categoryCount?: pulumi.Input<number>;
    /**
     * The time at which the glossary was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The user-mutable description of the glossary.
     */
    description?: pulumi.Input<string>;
    /**
     * User friendly display name of the glossary. This is user-mutable. This will be same as the glossaryId, if not specified.
     */
    displayName?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The glossary id for creation.
     */
    glossaryId?: pulumi.Input<string>;
    /**
     * User-defined labels for the Glossary.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location where the glossary should reside.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the Glossary. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of terms in the glossary.
     */
    termCount?: pulumi.Input<number>;
    /**
     * System generated unique id for the Glossary. This ID will be different if the Glossary is deleted and re-created with the same name.
     */
    uid?: pulumi.Input<string>;
    /**
     * The time at which the glossary was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Glossary resource.
 */
export interface GlossaryArgs {
    /**
     * The user-mutable description of the glossary.
     */
    description?: pulumi.Input<string>;
    /**
     * User friendly display name of the glossary. This is user-mutable. This will be same as the glossaryId, if not specified.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The glossary id for creation.
     */
    glossaryId: pulumi.Input<string>;
    /**
     * User-defined labels for the Glossary.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location where the glossary should reside.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
