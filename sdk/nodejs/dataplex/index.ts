// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AspectTypeArgs, AspectTypeState } from "./aspectType";
export type AspectType = import("./aspectType").AspectType;
export const AspectType: typeof import("./aspectType").AspectType = null as any;
utilities.lazyLoad(exports, ["AspectType"], () => require("./aspectType"));

export { AspectTypeIamBindingArgs, AspectTypeIamBindingState } from "./aspectTypeIamBinding";
export type AspectTypeIamBinding = import("./aspectTypeIamBinding").AspectTypeIamBinding;
export const AspectTypeIamBinding: typeof import("./aspectTypeIamBinding").AspectTypeIamBinding = null as any;
utilities.lazyLoad(exports, ["AspectTypeIamBinding"], () => require("./aspectTypeIamBinding"));

export { AspectTypeIamMemberArgs, AspectTypeIamMemberState } from "./aspectTypeIamMember";
export type AspectTypeIamMember = import("./aspectTypeIamMember").AspectTypeIamMember;
export const AspectTypeIamMember: typeof import("./aspectTypeIamMember").AspectTypeIamMember = null as any;
utilities.lazyLoad(exports, ["AspectTypeIamMember"], () => require("./aspectTypeIamMember"));

export { AspectTypeIamPolicyArgs, AspectTypeIamPolicyState } from "./aspectTypeIamPolicy";
export type AspectTypeIamPolicy = import("./aspectTypeIamPolicy").AspectTypeIamPolicy;
export const AspectTypeIamPolicy: typeof import("./aspectTypeIamPolicy").AspectTypeIamPolicy = null as any;
utilities.lazyLoad(exports, ["AspectTypeIamPolicy"], () => require("./aspectTypeIamPolicy"));

export { AssetArgs, AssetState } from "./asset";
export type Asset = import("./asset").Asset;
export const Asset: typeof import("./asset").Asset = null as any;
utilities.lazyLoad(exports, ["Asset"], () => require("./asset"));

export { AssetIamBindingArgs, AssetIamBindingState } from "./assetIamBinding";
export type AssetIamBinding = import("./assetIamBinding").AssetIamBinding;
export const AssetIamBinding: typeof import("./assetIamBinding").AssetIamBinding = null as any;
utilities.lazyLoad(exports, ["AssetIamBinding"], () => require("./assetIamBinding"));

export { AssetIamMemberArgs, AssetIamMemberState } from "./assetIamMember";
export type AssetIamMember = import("./assetIamMember").AssetIamMember;
export const AssetIamMember: typeof import("./assetIamMember").AssetIamMember = null as any;
utilities.lazyLoad(exports, ["AssetIamMember"], () => require("./assetIamMember"));

export { AssetIamPolicyArgs, AssetIamPolicyState } from "./assetIamPolicy";
export type AssetIamPolicy = import("./assetIamPolicy").AssetIamPolicy;
export const AssetIamPolicy: typeof import("./assetIamPolicy").AssetIamPolicy = null as any;
utilities.lazyLoad(exports, ["AssetIamPolicy"], () => require("./assetIamPolicy"));

export { DatascanArgs, DatascanState } from "./datascan";
export type Datascan = import("./datascan").Datascan;
export const Datascan: typeof import("./datascan").Datascan = null as any;
utilities.lazyLoad(exports, ["Datascan"], () => require("./datascan"));

export { DatascanIamBindingArgs, DatascanIamBindingState } from "./datascanIamBinding";
export type DatascanIamBinding = import("./datascanIamBinding").DatascanIamBinding;
export const DatascanIamBinding: typeof import("./datascanIamBinding").DatascanIamBinding = null as any;
utilities.lazyLoad(exports, ["DatascanIamBinding"], () => require("./datascanIamBinding"));

export { DatascanIamMemberArgs, DatascanIamMemberState } from "./datascanIamMember";
export type DatascanIamMember = import("./datascanIamMember").DatascanIamMember;
export const DatascanIamMember: typeof import("./datascanIamMember").DatascanIamMember = null as any;
utilities.lazyLoad(exports, ["DatascanIamMember"], () => require("./datascanIamMember"));

export { DatascanIamPolicyArgs, DatascanIamPolicyState } from "./datascanIamPolicy";
export type DatascanIamPolicy = import("./datascanIamPolicy").DatascanIamPolicy;
export const DatascanIamPolicy: typeof import("./datascanIamPolicy").DatascanIamPolicy = null as any;
utilities.lazyLoad(exports, ["DatascanIamPolicy"], () => require("./datascanIamPolicy"));

export { EntryArgs, EntryState } from "./entry";
export type Entry = import("./entry").Entry;
export const Entry: typeof import("./entry").Entry = null as any;
utilities.lazyLoad(exports, ["Entry"], () => require("./entry"));

export { EntryGroupArgs, EntryGroupState } from "./entryGroup";
export type EntryGroup = import("./entryGroup").EntryGroup;
export const EntryGroup: typeof import("./entryGroup").EntryGroup = null as any;
utilities.lazyLoad(exports, ["EntryGroup"], () => require("./entryGroup"));

export { EntryGroupIamBindingArgs, EntryGroupIamBindingState } from "./entryGroupIamBinding";
export type EntryGroupIamBinding = import("./entryGroupIamBinding").EntryGroupIamBinding;
export const EntryGroupIamBinding: typeof import("./entryGroupIamBinding").EntryGroupIamBinding = null as any;
utilities.lazyLoad(exports, ["EntryGroupIamBinding"], () => require("./entryGroupIamBinding"));

export { EntryGroupIamMemberArgs, EntryGroupIamMemberState } from "./entryGroupIamMember";
export type EntryGroupIamMember = import("./entryGroupIamMember").EntryGroupIamMember;
export const EntryGroupIamMember: typeof import("./entryGroupIamMember").EntryGroupIamMember = null as any;
utilities.lazyLoad(exports, ["EntryGroupIamMember"], () => require("./entryGroupIamMember"));

export { EntryGroupIamPolicyArgs, EntryGroupIamPolicyState } from "./entryGroupIamPolicy";
export type EntryGroupIamPolicy = import("./entryGroupIamPolicy").EntryGroupIamPolicy;
export const EntryGroupIamPolicy: typeof import("./entryGroupIamPolicy").EntryGroupIamPolicy = null as any;
utilities.lazyLoad(exports, ["EntryGroupIamPolicy"], () => require("./entryGroupIamPolicy"));

export { EntryTypeArgs, EntryTypeState } from "./entryType";
export type EntryType = import("./entryType").EntryType;
export const EntryType: typeof import("./entryType").EntryType = null as any;
utilities.lazyLoad(exports, ["EntryType"], () => require("./entryType"));

export { EntryTypeIamBindingArgs, EntryTypeIamBindingState } from "./entryTypeIamBinding";
export type EntryTypeIamBinding = import("./entryTypeIamBinding").EntryTypeIamBinding;
export const EntryTypeIamBinding: typeof import("./entryTypeIamBinding").EntryTypeIamBinding = null as any;
utilities.lazyLoad(exports, ["EntryTypeIamBinding"], () => require("./entryTypeIamBinding"));

export { EntryTypeIamMemberArgs, EntryTypeIamMemberState } from "./entryTypeIamMember";
export type EntryTypeIamMember = import("./entryTypeIamMember").EntryTypeIamMember;
export const EntryTypeIamMember: typeof import("./entryTypeIamMember").EntryTypeIamMember = null as any;
utilities.lazyLoad(exports, ["EntryTypeIamMember"], () => require("./entryTypeIamMember"));

export { EntryTypeIamPolicyArgs, EntryTypeIamPolicyState } from "./entryTypeIamPolicy";
export type EntryTypeIamPolicy = import("./entryTypeIamPolicy").EntryTypeIamPolicy;
export const EntryTypeIamPolicy: typeof import("./entryTypeIamPolicy").EntryTypeIamPolicy = null as any;
utilities.lazyLoad(exports, ["EntryTypeIamPolicy"], () => require("./entryTypeIamPolicy"));

export { GetAspectTypeIamPolicyArgs, GetAspectTypeIamPolicyResult, GetAspectTypeIamPolicyOutputArgs } from "./getAspectTypeIamPolicy";
export const getAspectTypeIamPolicy: typeof import("./getAspectTypeIamPolicy").getAspectTypeIamPolicy = null as any;
export const getAspectTypeIamPolicyOutput: typeof import("./getAspectTypeIamPolicy").getAspectTypeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAspectTypeIamPolicy","getAspectTypeIamPolicyOutput"], () => require("./getAspectTypeIamPolicy"));

export { GetAssetIamPolicyArgs, GetAssetIamPolicyResult, GetAssetIamPolicyOutputArgs } from "./getAssetIamPolicy";
export const getAssetIamPolicy: typeof import("./getAssetIamPolicy").getAssetIamPolicy = null as any;
export const getAssetIamPolicyOutput: typeof import("./getAssetIamPolicy").getAssetIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAssetIamPolicy","getAssetIamPolicyOutput"], () => require("./getAssetIamPolicy"));

export { GetDatascanIamPolicyArgs, GetDatascanIamPolicyResult, GetDatascanIamPolicyOutputArgs } from "./getDatascanIamPolicy";
export const getDatascanIamPolicy: typeof import("./getDatascanIamPolicy").getDatascanIamPolicy = null as any;
export const getDatascanIamPolicyOutput: typeof import("./getDatascanIamPolicy").getDatascanIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatascanIamPolicy","getDatascanIamPolicyOutput"], () => require("./getDatascanIamPolicy"));

export { GetEntryGroupIamPolicyArgs, GetEntryGroupIamPolicyResult, GetEntryGroupIamPolicyOutputArgs } from "./getEntryGroupIamPolicy";
export const getEntryGroupIamPolicy: typeof import("./getEntryGroupIamPolicy").getEntryGroupIamPolicy = null as any;
export const getEntryGroupIamPolicyOutput: typeof import("./getEntryGroupIamPolicy").getEntryGroupIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEntryGroupIamPolicy","getEntryGroupIamPolicyOutput"], () => require("./getEntryGroupIamPolicy"));

export { GetEntryTypeIamPolicyArgs, GetEntryTypeIamPolicyResult, GetEntryTypeIamPolicyOutputArgs } from "./getEntryTypeIamPolicy";
export const getEntryTypeIamPolicy: typeof import("./getEntryTypeIamPolicy").getEntryTypeIamPolicy = null as any;
export const getEntryTypeIamPolicyOutput: typeof import("./getEntryTypeIamPolicy").getEntryTypeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEntryTypeIamPolicy","getEntryTypeIamPolicyOutput"], () => require("./getEntryTypeIamPolicy"));

export { GetGlossaryIamPolicyArgs, GetGlossaryIamPolicyResult, GetGlossaryIamPolicyOutputArgs } from "./getGlossaryIamPolicy";
export const getGlossaryIamPolicy: typeof import("./getGlossaryIamPolicy").getGlossaryIamPolicy = null as any;
export const getGlossaryIamPolicyOutput: typeof import("./getGlossaryIamPolicy").getGlossaryIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getGlossaryIamPolicy","getGlossaryIamPolicyOutput"], () => require("./getGlossaryIamPolicy"));

export { GetLakeIamPolicyArgs, GetLakeIamPolicyResult, GetLakeIamPolicyOutputArgs } from "./getLakeIamPolicy";
export const getLakeIamPolicy: typeof import("./getLakeIamPolicy").getLakeIamPolicy = null as any;
export const getLakeIamPolicyOutput: typeof import("./getLakeIamPolicy").getLakeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLakeIamPolicy","getLakeIamPolicyOutput"], () => require("./getLakeIamPolicy"));

export { GetTaskIamPolicyArgs, GetTaskIamPolicyResult, GetTaskIamPolicyOutputArgs } from "./getTaskIamPolicy";
export const getTaskIamPolicy: typeof import("./getTaskIamPolicy").getTaskIamPolicy = null as any;
export const getTaskIamPolicyOutput: typeof import("./getTaskIamPolicy").getTaskIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getTaskIamPolicy","getTaskIamPolicyOutput"], () => require("./getTaskIamPolicy"));

export { GetZoneIamPolicyArgs, GetZoneIamPolicyResult, GetZoneIamPolicyOutputArgs } from "./getZoneIamPolicy";
export const getZoneIamPolicy: typeof import("./getZoneIamPolicy").getZoneIamPolicy = null as any;
export const getZoneIamPolicyOutput: typeof import("./getZoneIamPolicy").getZoneIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getZoneIamPolicy","getZoneIamPolicyOutput"], () => require("./getZoneIamPolicy"));

export { GlossaryArgs, GlossaryState } from "./glossary";
export type Glossary = import("./glossary").Glossary;
export const Glossary: typeof import("./glossary").Glossary = null as any;
utilities.lazyLoad(exports, ["Glossary"], () => require("./glossary"));

export { GlossaryCategoryArgs, GlossaryCategoryState } from "./glossaryCategory";
export type GlossaryCategory = import("./glossaryCategory").GlossaryCategory;
export const GlossaryCategory: typeof import("./glossaryCategory").GlossaryCategory = null as any;
utilities.lazyLoad(exports, ["GlossaryCategory"], () => require("./glossaryCategory"));

export { GlossaryIamBindingArgs, GlossaryIamBindingState } from "./glossaryIamBinding";
export type GlossaryIamBinding = import("./glossaryIamBinding").GlossaryIamBinding;
export const GlossaryIamBinding: typeof import("./glossaryIamBinding").GlossaryIamBinding = null as any;
utilities.lazyLoad(exports, ["GlossaryIamBinding"], () => require("./glossaryIamBinding"));

export { GlossaryIamMemberArgs, GlossaryIamMemberState } from "./glossaryIamMember";
export type GlossaryIamMember = import("./glossaryIamMember").GlossaryIamMember;
export const GlossaryIamMember: typeof import("./glossaryIamMember").GlossaryIamMember = null as any;
utilities.lazyLoad(exports, ["GlossaryIamMember"], () => require("./glossaryIamMember"));

export { GlossaryIamPolicyArgs, GlossaryIamPolicyState } from "./glossaryIamPolicy";
export type GlossaryIamPolicy = import("./glossaryIamPolicy").GlossaryIamPolicy;
export const GlossaryIamPolicy: typeof import("./glossaryIamPolicy").GlossaryIamPolicy = null as any;
utilities.lazyLoad(exports, ["GlossaryIamPolicy"], () => require("./glossaryIamPolicy"));

export { GlossaryTermArgs, GlossaryTermState } from "./glossaryTerm";
export type GlossaryTerm = import("./glossaryTerm").GlossaryTerm;
export const GlossaryTerm: typeof import("./glossaryTerm").GlossaryTerm = null as any;
utilities.lazyLoad(exports, ["GlossaryTerm"], () => require("./glossaryTerm"));

export { LakeArgs, LakeState } from "./lake";
export type Lake = import("./lake").Lake;
export const Lake: typeof import("./lake").Lake = null as any;
utilities.lazyLoad(exports, ["Lake"], () => require("./lake"));

export { LakeIamBindingArgs, LakeIamBindingState } from "./lakeIamBinding";
export type LakeIamBinding = import("./lakeIamBinding").LakeIamBinding;
export const LakeIamBinding: typeof import("./lakeIamBinding").LakeIamBinding = null as any;
utilities.lazyLoad(exports, ["LakeIamBinding"], () => require("./lakeIamBinding"));

export { LakeIamMemberArgs, LakeIamMemberState } from "./lakeIamMember";
export type LakeIamMember = import("./lakeIamMember").LakeIamMember;
export const LakeIamMember: typeof import("./lakeIamMember").LakeIamMember = null as any;
utilities.lazyLoad(exports, ["LakeIamMember"], () => require("./lakeIamMember"));

export { LakeIamPolicyArgs, LakeIamPolicyState } from "./lakeIamPolicy";
export type LakeIamPolicy = import("./lakeIamPolicy").LakeIamPolicy;
export const LakeIamPolicy: typeof import("./lakeIamPolicy").LakeIamPolicy = null as any;
utilities.lazyLoad(exports, ["LakeIamPolicy"], () => require("./lakeIamPolicy"));

export { TaskArgs, TaskState } from "./task";
export type Task = import("./task").Task;
export const Task: typeof import("./task").Task = null as any;
utilities.lazyLoad(exports, ["Task"], () => require("./task"));

export { TaskIamBindingArgs, TaskIamBindingState } from "./taskIamBinding";
export type TaskIamBinding = import("./taskIamBinding").TaskIamBinding;
export const TaskIamBinding: typeof import("./taskIamBinding").TaskIamBinding = null as any;
utilities.lazyLoad(exports, ["TaskIamBinding"], () => require("./taskIamBinding"));

export { TaskIamMemberArgs, TaskIamMemberState } from "./taskIamMember";
export type TaskIamMember = import("./taskIamMember").TaskIamMember;
export const TaskIamMember: typeof import("./taskIamMember").TaskIamMember = null as any;
utilities.lazyLoad(exports, ["TaskIamMember"], () => require("./taskIamMember"));

export { TaskIamPolicyArgs, TaskIamPolicyState } from "./taskIamPolicy";
export type TaskIamPolicy = import("./taskIamPolicy").TaskIamPolicy;
export const TaskIamPolicy: typeof import("./taskIamPolicy").TaskIamPolicy = null as any;
utilities.lazyLoad(exports, ["TaskIamPolicy"], () => require("./taskIamPolicy"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));

export { ZoneIamBindingArgs, ZoneIamBindingState } from "./zoneIamBinding";
export type ZoneIamBinding = import("./zoneIamBinding").ZoneIamBinding;
export const ZoneIamBinding: typeof import("./zoneIamBinding").ZoneIamBinding = null as any;
utilities.lazyLoad(exports, ["ZoneIamBinding"], () => require("./zoneIamBinding"));

export { ZoneIamMemberArgs, ZoneIamMemberState } from "./zoneIamMember";
export type ZoneIamMember = import("./zoneIamMember").ZoneIamMember;
export const ZoneIamMember: typeof import("./zoneIamMember").ZoneIamMember = null as any;
utilities.lazyLoad(exports, ["ZoneIamMember"], () => require("./zoneIamMember"));

export { ZoneIamPolicyArgs, ZoneIamPolicyState } from "./zoneIamPolicy";
export type ZoneIamPolicy = import("./zoneIamPolicy").ZoneIamPolicy;
export const ZoneIamPolicy: typeof import("./zoneIamPolicy").ZoneIamPolicy = null as any;
utilities.lazyLoad(exports, ["ZoneIamPolicy"], () => require("./zoneIamPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:dataplex/aspectType:AspectType":
                return new AspectType(name, <any>undefined, { urn })
            case "gcp:dataplex/aspectTypeIamBinding:AspectTypeIamBinding":
                return new AspectTypeIamBinding(name, <any>undefined, { urn })
            case "gcp:dataplex/aspectTypeIamMember:AspectTypeIamMember":
                return new AspectTypeIamMember(name, <any>undefined, { urn })
            case "gcp:dataplex/aspectTypeIamPolicy:AspectTypeIamPolicy":
                return new AspectTypeIamPolicy(name, <any>undefined, { urn })
            case "gcp:dataplex/asset:Asset":
                return new Asset(name, <any>undefined, { urn })
            case "gcp:dataplex/assetIamBinding:AssetIamBinding":
                return new AssetIamBinding(name, <any>undefined, { urn })
            case "gcp:dataplex/assetIamMember:AssetIamMember":
                return new AssetIamMember(name, <any>undefined, { urn })
            case "gcp:dataplex/assetIamPolicy:AssetIamPolicy":
                return new AssetIamPolicy(name, <any>undefined, { urn })
            case "gcp:dataplex/datascan:Datascan":
                return new Datascan(name, <any>undefined, { urn })
            case "gcp:dataplex/datascanIamBinding:DatascanIamBinding":
                return new DatascanIamBinding(name, <any>undefined, { urn })
            case "gcp:dataplex/datascanIamMember:DatascanIamMember":
                return new DatascanIamMember(name, <any>undefined, { urn })
            case "gcp:dataplex/datascanIamPolicy:DatascanIamPolicy":
                return new DatascanIamPolicy(name, <any>undefined, { urn })
            case "gcp:dataplex/entry:Entry":
                return new Entry(name, <any>undefined, { urn })
            case "gcp:dataplex/entryGroup:EntryGroup":
                return new EntryGroup(name, <any>undefined, { urn })
            case "gcp:dataplex/entryGroupIamBinding:EntryGroupIamBinding":
                return new EntryGroupIamBinding(name, <any>undefined, { urn })
            case "gcp:dataplex/entryGroupIamMember:EntryGroupIamMember":
                return new EntryGroupIamMember(name, <any>undefined, { urn })
            case "gcp:dataplex/entryGroupIamPolicy:EntryGroupIamPolicy":
                return new EntryGroupIamPolicy(name, <any>undefined, { urn })
            case "gcp:dataplex/entryType:EntryType":
                return new EntryType(name, <any>undefined, { urn })
            case "gcp:dataplex/entryTypeIamBinding:EntryTypeIamBinding":
                return new EntryTypeIamBinding(name, <any>undefined, { urn })
            case "gcp:dataplex/entryTypeIamMember:EntryTypeIamMember":
                return new EntryTypeIamMember(name, <any>undefined, { urn })
            case "gcp:dataplex/entryTypeIamPolicy:EntryTypeIamPolicy":
                return new EntryTypeIamPolicy(name, <any>undefined, { urn })
            case "gcp:dataplex/glossary:Glossary":
                return new Glossary(name, <any>undefined, { urn })
            case "gcp:dataplex/glossaryCategory:GlossaryCategory":
                return new GlossaryCategory(name, <any>undefined, { urn })
            case "gcp:dataplex/glossaryIamBinding:GlossaryIamBinding":
                return new GlossaryIamBinding(name, <any>undefined, { urn })
            case "gcp:dataplex/glossaryIamMember:GlossaryIamMember":
                return new GlossaryIamMember(name, <any>undefined, { urn })
            case "gcp:dataplex/glossaryIamPolicy:GlossaryIamPolicy":
                return new GlossaryIamPolicy(name, <any>undefined, { urn })
            case "gcp:dataplex/glossaryTerm:GlossaryTerm":
                return new GlossaryTerm(name, <any>undefined, { urn })
            case "gcp:dataplex/lake:Lake":
                return new Lake(name, <any>undefined, { urn })
            case "gcp:dataplex/lakeIamBinding:LakeIamBinding":
                return new LakeIamBinding(name, <any>undefined, { urn })
            case "gcp:dataplex/lakeIamMember:LakeIamMember":
                return new LakeIamMember(name, <any>undefined, { urn })
            case "gcp:dataplex/lakeIamPolicy:LakeIamPolicy":
                return new LakeIamPolicy(name, <any>undefined, { urn })
            case "gcp:dataplex/task:Task":
                return new Task(name, <any>undefined, { urn })
            case "gcp:dataplex/taskIamBinding:TaskIamBinding":
                return new TaskIamBinding(name, <any>undefined, { urn })
            case "gcp:dataplex/taskIamMember:TaskIamMember":
                return new TaskIamMember(name, <any>undefined, { urn })
            case "gcp:dataplex/taskIamPolicy:TaskIamPolicy":
                return new TaskIamPolicy(name, <any>undefined, { urn })
            case "gcp:dataplex/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            case "gcp:dataplex/zoneIamBinding:ZoneIamBinding":
                return new ZoneIamBinding(name, <any>undefined, { urn })
            case "gcp:dataplex/zoneIamMember:ZoneIamMember":
                return new ZoneIamMember(name, <any>undefined, { urn })
            case "gcp:dataplex/zoneIamPolicy:ZoneIamPolicy":
                return new ZoneIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "dataplex/aspectType", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/aspectTypeIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/aspectTypeIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/aspectTypeIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/asset", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/assetIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/assetIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/assetIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/datascan", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/datascanIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/datascanIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/datascanIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/entry", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/entryGroup", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/entryGroupIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/entryGroupIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/entryGroupIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/entryType", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/entryTypeIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/entryTypeIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/entryTypeIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/glossary", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/glossaryCategory", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/glossaryIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/glossaryIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/glossaryIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/glossaryTerm", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/lake", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/lakeIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/lakeIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/lakeIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/task", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/taskIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/taskIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/taskIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/zone", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/zoneIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/zoneIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataplex/zoneIamPolicy", _module)
