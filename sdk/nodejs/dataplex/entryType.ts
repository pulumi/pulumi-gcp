// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * An Entry Type is a template for creating Entries.
 *
 * ## Example Usage
 *
 * ### Dataplex Entry Type Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const testEntryTypeBasic = new gcp.dataplex.EntryType("test_entry_type_basic", {
 *     entryTypeId: "entry-type-basic",
 *     project: "my-project-name",
 *     location: "us-central1",
 * });
 * ```
 * ### Dataplex Entry Type Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const testEntryTypeFull = new gcp.dataplex.AspectType("test_entry_type_full", {
 *     aspectTypeId: "tf-test-aspect-type_95154",
 *     location: "us-central1",
 *     project: "my-project-name",
 *     metadataTemplate: `{
 *   "name": "tf-test-template",
 *   "type": "record",
 *   "recordFields": [
 *     {
 *       "name": "type",
 *       "type": "enum",
 *       "annotations": {
 *         "displayName": "Type",
 *         "description": "Specifies the type of view represented by the entry."
 *       },
 *       "index": 1,
 *       "constraints": {
 *         "required": true
 *       },
 *       "enumValues": [
 *         {
 *           "name": "VIEW",
 *           "index": 1
 *         }
 *       ]
 *     }
 *   ]
 * }
 * `,
 * });
 * const testEntryTypeFullEntryType = new gcp.dataplex.EntryType("test_entry_type_full", {
 *     entryTypeId: "entry-type-full",
 *     project: "my-project-name",
 *     location: "us-central1",
 *     labels: {
 *         tag: "test-tf",
 *     },
 *     displayName: "terraform entry type",
 *     description: "entry type created by Terraform",
 *     typeAliases: [
 *         "TABLE",
 *         "DATABASE",
 *     ],
 *     platform: "GCS",
 *     system: "CloudSQL",
 *     requiredAspects: [{
 *         type: testEntryTypeFull.name,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * EntryType can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}`
 *
 * * `{{project}}/{{location}}/{{entry_type_id}}`
 *
 * * `{{location}}/{{entry_type_id}}`
 *
 * When using the `pulumi import` command, EntryType can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:dataplex/entryType:EntryType default projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:dataplex/entryType:EntryType default {{project}}/{{location}}/{{entry_type_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:dataplex/entryType:EntryType default {{location}}/{{entry_type_id}}
 * ```
 */
export class EntryType extends pulumi.CustomResource {
    /**
     * Get an existing EntryType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntryTypeState, opts?: pulumi.CustomResourceOptions): EntryType {
        return new EntryType(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:dataplex/entryType:EntryType';

    /**
     * Returns true if the given object is an instance of EntryType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EntryType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EntryType.__pulumiType;
    }

    /**
     * The time when the EntryType was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Description of the EntryType.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * User friendly display name.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The entry type id of the entry type.
     */
    declare public readonly entryTypeId: pulumi.Output<string | undefined>;
    /**
     * User-defined labels for the EntryType.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location where entry type will be created in.
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * The relative resource name of the EntryType, of the form: projects/{project_number}/locations/{location_id}/entryTypes/{entry_type_id}
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The platform that Entries of this type belongs to.
     */
    declare public readonly platform: pulumi.Output<string | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * AspectInfo for the entry type.
     * Structure is documented below.
     */
    declare public readonly requiredAspects: pulumi.Output<outputs.dataplex.EntryTypeRequiredAspect[] | undefined>;
    /**
     * The system that Entries of this type belongs to.
     */
    declare public readonly system: pulumi.Output<string | undefined>;
    /**
     * Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
     */
    declare public readonly typeAliases: pulumi.Output<string[] | undefined>;
    /**
     * System generated globally unique ID for the EntryType. This ID will be different if the EntryType is deleted and re-created with the same name.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * The time when the EntryType was last updated.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a EntryType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EntryTypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntryTypeArgs | EntryTypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntryTypeState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["entryTypeId"] = state?.entryTypeId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["platform"] = state?.platform;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["requiredAspects"] = state?.requiredAspects;
            resourceInputs["system"] = state?.system;
            resourceInputs["typeAliases"] = state?.typeAliases;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as EntryTypeArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["entryTypeId"] = args?.entryTypeId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["platform"] = args?.platform;
            resourceInputs["project"] = args?.project;
            resourceInputs["requiredAspects"] = args?.requiredAspects;
            resourceInputs["system"] = args?.system;
            resourceInputs["typeAliases"] = args?.typeAliases;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EntryType.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EntryType resources.
 */
export interface EntryTypeState {
    /**
     * The time when the EntryType was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the EntryType.
     */
    description?: pulumi.Input<string>;
    /**
     * User friendly display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The entry type id of the entry type.
     */
    entryTypeId?: pulumi.Input<string>;
    /**
     * User-defined labels for the EntryType.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location where entry type will be created in.
     */
    location?: pulumi.Input<string>;
    /**
     * The relative resource name of the EntryType, of the form: projects/{project_number}/locations/{location_id}/entryTypes/{entry_type_id}
     */
    name?: pulumi.Input<string>;
    /**
     * The platform that Entries of this type belongs to.
     */
    platform?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * AspectInfo for the entry type.
     * Structure is documented below.
     */
    requiredAspects?: pulumi.Input<pulumi.Input<inputs.dataplex.EntryTypeRequiredAspect>[]>;
    /**
     * The system that Entries of this type belongs to.
     */
    system?: pulumi.Input<string>;
    /**
     * Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
     */
    typeAliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * System generated globally unique ID for the EntryType. This ID will be different if the EntryType is deleted and re-created with the same name.
     */
    uid?: pulumi.Input<string>;
    /**
     * The time when the EntryType was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EntryType resource.
 */
export interface EntryTypeArgs {
    /**
     * Description of the EntryType.
     */
    description?: pulumi.Input<string>;
    /**
     * User friendly display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The entry type id of the entry type.
     */
    entryTypeId?: pulumi.Input<string>;
    /**
     * User-defined labels for the EntryType.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location where entry type will be created in.
     */
    location?: pulumi.Input<string>;
    /**
     * The platform that Entries of this type belongs to.
     */
    platform?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * AspectInfo for the entry type.
     * Structure is documented below.
     */
    requiredAspects?: pulumi.Input<pulumi.Input<inputs.dataplex.EntryTypeRequiredAspect>[]>;
    /**
     * The system that Entries of this type belongs to.
     */
    system?: pulumi.Input<string>;
    /**
     * Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
     */
    typeAliases?: pulumi.Input<pulumi.Input<string>[]>;
}
