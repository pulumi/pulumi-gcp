// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A git repository link to a parent connection.
 *
 * To get more information about GitRepositoryLink, see:
 *
 * * [API documentation](https://cloud.google.com/developer-connect/docs/api/reference/rest/v1/projects.locations.connections.gitRepositoryLinks)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/developer-connect/docs/overview)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * GitRepositoryLink can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/connections/{{parent_connection}}/gitRepositoryLinks/{{git_repository_link_id}}`
 *
 * * `{{project}}/{{location}}/{{parent_connection}}/{{git_repository_link_id}}`
 *
 * * `{{location}}/{{parent_connection}}/{{git_repository_link_id}}`
 *
 * When using the `pulumi import` command, GitRepositoryLink can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:developerconnect/gitRepositoryLink:GitRepositoryLink default projects/{{project}}/locations/{{location}}/connections/{{parent_connection}}/gitRepositoryLinks/{{git_repository_link_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:developerconnect/gitRepositoryLink:GitRepositoryLink default {{project}}/{{location}}/{{parent_connection}}/{{git_repository_link_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:developerconnect/gitRepositoryLink:GitRepositoryLink default {{location}}/{{parent_connection}}/{{git_repository_link_id}}
 * ```
 */
export class GitRepositoryLink extends pulumi.CustomResource {
    /**
     * Get an existing GitRepositoryLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitRepositoryLinkState, opts?: pulumi.CustomResourceOptions): GitRepositoryLink {
        return new GitRepositoryLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:developerconnect/gitRepositoryLink:GitRepositoryLink';

    /**
     * Returns true if the given object is an instance of GitRepositoryLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitRepositoryLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitRepositoryLink.__pulumiType;
    }

    /**
     * Optional. Allows clients to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Required. Git Clone URI.
     */
    public readonly cloneUri!: pulumi.Output<string>;
    /**
     * Output only. [Output only] Create timestamp
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Output only. [Output only] Delete timestamp
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Optional. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     */
    public readonly etag!: pulumi.Output<string | undefined>;
    /**
     * Required. The ID to use for the repository, which will become the final component of
     * the repository's resource name. This ID should be unique in the connection.
     * Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
     */
    public readonly gitRepositoryLinkId!: pulumi.Output<string>;
    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Identifier. Resource name of the repository, in the format
     * `projects/*&#47;locations/*&#47;connections/*&#47;gitRepositoryLinks/*`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
     */
    public readonly parentConnection!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Output only. Set to true when the connection is being set up or updated in the
     * background.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * Output only. A system-assigned unique identifier for a the GitRepositoryLink.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Output only. [Output only] Update timestamp
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a GitRepositoryLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitRepositoryLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitRepositoryLinkArgs | GitRepositoryLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitRepositoryLinkState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["cloneUri"] = state ? state.cloneUri : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteTime"] = state ? state.deleteTime : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["gitRepositoryLinkId"] = state ? state.gitRepositoryLinkId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentConnection"] = state ? state.parentConnection : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as GitRepositoryLinkArgs | undefined;
            if ((!args || args.cloneUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloneUri'");
            }
            if ((!args || args.gitRepositoryLinkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gitRepositoryLinkId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.parentConnection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentConnection'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["cloneUri"] = args ? args.cloneUri : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["gitRepositoryLinkId"] = args ? args.gitRepositoryLinkId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["parentConnection"] = args ? args.parentConnection : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GitRepositoryLink.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GitRepositoryLink resources.
 */
export interface GitRepositoryLinkState {
    /**
     * Optional. Allows clients to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required. Git Clone URI.
     */
    cloneUri?: pulumi.Input<string>;
    /**
     * Output only. [Output only] Create timestamp
     */
    createTime?: pulumi.Input<string>;
    /**
     * Output only. [Output only] Delete timestamp
     */
    deleteTime?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * Required. The ID to use for the repository, which will become the final component of
     * the repository's resource name. This ID should be unique in the connection.
     * Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
     */
    gitRepositoryLinkId?: pulumi.Input<string>;
    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. Resource name of the repository, in the format
     * `projects/*&#47;locations/*&#47;connections/*&#47;gitRepositoryLinks/*`.
     */
    name?: pulumi.Input<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
     */
    parentConnection?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. Set to true when the connection is being set up or updated in the
     * background.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * Output only. A system-assigned unique identifier for a the GitRepositoryLink.
     */
    uid?: pulumi.Input<string>;
    /**
     * Output only. [Output only] Update timestamp
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GitRepositoryLink resource.
 */
export interface GitRepositoryLinkArgs {
    /**
     * Optional. Allows clients to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required. Git Clone URI.
     */
    cloneUri: pulumi.Input<string>;
    /**
     * Optional. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * Required. The ID to use for the repository, which will become the final component of
     * the repository's resource name. This ID should be unique in the connection.
     * Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
     */
    gitRepositoryLinkId: pulumi.Input<string>;
    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
     */
    location: pulumi.Input<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
     */
    parentConnection: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
