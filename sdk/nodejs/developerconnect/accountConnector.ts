// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Description
 *
 * ## Example Usage
 *
 * ### Developer Connect Account Connector Github
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_account_connector = new gcp.developerconnect.AccountConnector("my-account-connector", {
 *     location: "us-central1",
 *     accountConnectorId: "tf-test-ac",
 *     providerOauthConfig: {
 *         systemProviderId: "GITHUB",
 *         scopes: ["repo"],
 *     },
 * });
 * ```
 * ### Developer Connect Account Connector Gitlab
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_account_connector = new gcp.developerconnect.AccountConnector("my-account-connector", {
 *     location: "us-central1",
 *     accountConnectorId: "tf-test-ac",
 *     providerOauthConfig: {
 *         systemProviderId: "GITLAB",
 *         scopes: ["api"],
 *     },
 * });
 * ```
 * ### Developer Connect Account Connector Google
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_account_connector = new gcp.developerconnect.AccountConnector("my-account-connector", {
 *     location: "us-central1",
 *     accountConnectorId: "tf-test-ac",
 *     providerOauthConfig: {
 *         systemProviderId: "GOOGLE",
 *         scopes: ["https://www.googleapis.com/auth/drive.readonly"],
 *     },
 * });
 * ```
 * ### Developer Connect Account Connector Sentry
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_account_connector = new gcp.developerconnect.AccountConnector("my-account-connector", {
 *     location: "us-central1",
 *     accountConnectorId: "tf-test-ac",
 *     providerOauthConfig: {
 *         systemProviderId: "SENTRY",
 *         scopes: ["org:read"],
 *     },
 * });
 * ```
 * ### Developer Connect Account Connector Rovo
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_account_connector = new gcp.developerconnect.AccountConnector("my-account-connector", {
 *     location: "us-central1",
 *     accountConnectorId: "tf-test-ac",
 *     providerOauthConfig: {
 *         systemProviderId: "ROVO",
 *         scopes: ["rovo"],
 *     },
 * });
 * ```
 * ### Developer Connect Account Connector New Relic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_account_connector = new gcp.developerconnect.AccountConnector("my-account-connector", {
 *     location: "us-central1",
 *     accountConnectorId: "tf-test-ac",
 *     providerOauthConfig: {
 *         systemProviderId: "NEW_RELIC",
 *         scopes: [],
 *     },
 * });
 * ```
 * ### Developer Connect Account Connector Datastax
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_account_connector = new gcp.developerconnect.AccountConnector("my-account-connector", {
 *     location: "us-central1",
 *     accountConnectorId: "tf-test-ac",
 *     providerOauthConfig: {
 *         systemProviderId: "DATASTAX",
 *         scopes: [],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * AccountConnector can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}`
 *
 * * `{{project}}/{{location}}/{{account_connector_id}}`
 *
 * * `{{location}}/{{account_connector_id}}`
 *
 * When using the `pulumi import` command, AccountConnector can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:developerconnect/accountConnector:AccountConnector default projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:developerconnect/accountConnector:AccountConnector default {{project}}/{{location}}/{{account_connector_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:developerconnect/accountConnector:AccountConnector default {{location}}/{{account_connector_id}}
 * ```
 */
export class AccountConnector extends pulumi.CustomResource {
    /**
     * Get an existing AccountConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountConnectorState, opts?: pulumi.CustomResourceOptions): AccountConnector {
        return new AccountConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:developerconnect/accountConnector:AccountConnector';

    /**
     * Returns true if the given object is an instance of AccountConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountConnector.__pulumiType;
    }

    /**
     * Required. The ID to use for the AccountConnector, which will become the final
     * component of the AccountConnector's resource name. Its format should adhere
     * to https://google.aip.dev/122#resource-id-segments Names must be unique
     * per-project per-location.
     *
     *
     * - - -
     */
    public readonly accountConnectorId!: pulumi.Output<string>;
    /**
     * Optional. Allows users to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Output only. The timestamp when the userConnection was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location of the resource.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Identifier. The resource name of the userConnection, in the format
     * `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Output only. Start OAuth flow by clicking on this URL.
     */
    public /*out*/ readonly oauthStartUri!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * ProviderOAuthConfig is the OAuth config for a provider.
     * Structure is documented below.
     */
    public readonly providerOauthConfig!: pulumi.Output<outputs.developerconnect.AccountConnectorProviderOauthConfig | undefined>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Output only. The timestamp when the userConnection was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a AccountConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountConnectorArgs | AccountConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountConnectorState | undefined;
            resourceInputs["accountConnectorId"] = state ? state.accountConnectorId : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oauthStartUri"] = state ? state.oauthStartUri : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["providerOauthConfig"] = state ? state.providerOauthConfig : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as AccountConnectorArgs | undefined;
            if ((!args || args.accountConnectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountConnectorId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["accountConnectorId"] = args ? args.accountConnectorId : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["providerOauthConfig"] = args ? args.providerOauthConfig : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["oauthStartUri"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AccountConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountConnector resources.
 */
export interface AccountConnectorState {
    /**
     * Required. The ID to use for the AccountConnector, which will become the final
     * component of the AccountConnector's resource name. Its format should adhere
     * to https://google.aip.dev/122#resource-id-segments Names must be unique
     * per-project per-location.
     *
     *
     * - - -
     */
    accountConnectorId?: pulumi.Input<string>;
    /**
     * Optional. Allows users to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. The timestamp when the userConnection was created.
     */
    createTime?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. The resource name of the userConnection, in the format
     * `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
     */
    name?: pulumi.Input<string>;
    /**
     * Output only. Start OAuth flow by clicking on this URL.
     */
    oauthStartUri?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * ProviderOAuthConfig is the OAuth config for a provider.
     * Structure is documented below.
     */
    providerOauthConfig?: pulumi.Input<inputs.developerconnect.AccountConnectorProviderOauthConfig>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. The timestamp when the userConnection was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountConnector resource.
 */
export interface AccountConnectorArgs {
    /**
     * Required. The ID to use for the AccountConnector, which will become the final
     * component of the AccountConnector's resource name. Its format should adhere
     * to https://google.aip.dev/122#resource-id-segments Names must be unique
     * per-project per-location.
     *
     *
     * - - -
     */
    accountConnectorId: pulumi.Input<string>;
    /**
     * Optional. Allows users to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the resource.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * ProviderOAuthConfig is the OAuth config for a provider.
     * Structure is documented below.
     */
    providerOauthConfig?: pulumi.Input<inputs.developerconnect.AccountConnectorProviderOauthConfig>;
}
