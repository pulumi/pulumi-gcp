// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Description
 *
 * ## Example Usage
 *
 * ## Import
 *
 * InsightsConfig can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/insightsConfigs/{{insights_config_id}}`
 *
 * * `{{project}}/{{location}}/{{insights_config_id}}`
 *
 * * `{{location}}/{{insights_config_id}}`
 *
 * When using the `pulumi import` command, InsightsConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:developerconnect/insightsConfig:InsightsConfig default projects/{{project}}/locations/{{location}}/insightsConfigs/{{insights_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:developerconnect/insightsConfig:InsightsConfig default {{project}}/{{location}}/{{insights_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:developerconnect/insightsConfig:InsightsConfig default {{location}}/{{insights_config_id}}
 * ```
 */
export class InsightsConfig extends pulumi.CustomResource {
    /**
     * Get an existing InsightsConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InsightsConfigState, opts?: pulumi.CustomResourceOptions): InsightsConfig {
        return new InsightsConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:developerconnect/insightsConfig:InsightsConfig';

    /**
     * Returns true if the given object is an instance of InsightsConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InsightsConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InsightsConfig.__pulumiType;
    }

    /**
     * User specified annotations. See https://google.aip.dev/148#annotations
     * for more details such as format and size limitations.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the App Hub Application.
     * Format:
     * projects/{project}/locations/{location}/applications/{application}
     */
    declare public readonly appHubApplication: pulumi.Output<string>;
    /**
     * The artifact configurations of the artifacts that are deployed.
     * Structure is documented below.
     */
    declare public readonly artifactConfigs: pulumi.Output<outputs.developerconnect.InsightsConfigArtifactConfig[] | undefined>;
    /**
     * [Output only] Create timestamp
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    declare public /*out*/ readonly effectiveAnnotations: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Any errors that occurred while setting up the InsightsConfig.
     * Each error will be in the format: `field_name: errorMessage`, e.g.
     * GetAppHubApplication: Permission denied while getting App Hub
     * application. Please grant permissions to the P4SA.
     * Structure is documented below.
     */
    declare public /*out*/ readonly errors: pulumi.Output<outputs.developerconnect.InsightsConfigError[]>;
    /**
     * ID of the requesting InsightsConfig.
     */
    declare public readonly insightsConfigId: pulumi.Output<string>;
    /**
     * Set of labels associated with an InsightsConfig.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Identifier. The name of the InsightsConfig.
     * Format:
     * projects/{project}/locations/{location}/insightsConfigs/{insightsConfig}
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Reconciling (https://google.aip.dev/128#reconciliation).
     * Set to true if the current state of InsightsConfig does not match the
     * user's intended state, and the service is actively updating the resource to
     * reconcile them. This can happen due to user-triggered updates or
     * system actions like failover or maintenance.
     */
    declare public /*out*/ readonly reconciling: pulumi.Output<boolean>;
    /**
     * The runtime configurations where the application is deployed.
     * Structure is documented below.
     */
    declare public /*out*/ readonly runtimeConfigs: pulumi.Output<outputs.developerconnect.InsightsConfigRuntimeConfig[]>;
    /**
     * (Output)
     * The state of the Runtime.
     * Possible values:
     * STATE_UNSPECIFIED
     * LINKED
     * UNLINKED
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * [Output only] Update timestamp
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a InsightsConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InsightsConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InsightsConfigArgs | InsightsConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InsightsConfigState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["appHubApplication"] = state?.appHubApplication;
            resourceInputs["artifactConfigs"] = state?.artifactConfigs;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["effectiveAnnotations"] = state?.effectiveAnnotations;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["errors"] = state?.errors;
            resourceInputs["insightsConfigId"] = state?.insightsConfigId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["reconciling"] = state?.reconciling;
            resourceInputs["runtimeConfigs"] = state?.runtimeConfigs;
            resourceInputs["state"] = state?.state;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as InsightsConfigArgs | undefined;
            if (args?.appHubApplication === undefined && !opts.urn) {
                throw new Error("Missing required property 'appHubApplication'");
            }
            if (args?.insightsConfigId === undefined && !opts.urn) {
                throw new Error("Missing required property 'insightsConfigId'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["appHubApplication"] = args?.appHubApplication;
            resourceInputs["artifactConfigs"] = args?.artifactConfigs;
            resourceInputs["insightsConfigId"] = args?.insightsConfigId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["project"] = args?.project;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["runtimeConfigs"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(InsightsConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InsightsConfig resources.
 */
export interface InsightsConfigState {
    /**
     * User specified annotations. See https://google.aip.dev/148#annotations
     * for more details such as format and size limitations.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the App Hub Application.
     * Format:
     * projects/{project}/locations/{location}/applications/{application}
     */
    appHubApplication?: pulumi.Input<string>;
    /**
     * The artifact configurations of the artifacts that are deployed.
     * Structure is documented below.
     */
    artifactConfigs?: pulumi.Input<pulumi.Input<inputs.developerconnect.InsightsConfigArtifactConfig>[]>;
    /**
     * [Output only] Create timestamp
     */
    createTime?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Any errors that occurred while setting up the InsightsConfig.
     * Each error will be in the format: `field_name: errorMessage`, e.g.
     * GetAppHubApplication: Permission denied while getting App Hub
     * application. Please grant permissions to the P4SA.
     * Structure is documented below.
     */
    errors?: pulumi.Input<pulumi.Input<inputs.developerconnect.InsightsConfigError>[]>;
    /**
     * ID of the requesting InsightsConfig.
     */
    insightsConfigId?: pulumi.Input<string>;
    /**
     * Set of labels associated with an InsightsConfig.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. The name of the InsightsConfig.
     * Format:
     * projects/{project}/locations/{location}/insightsConfigs/{insightsConfig}
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Reconciling (https://google.aip.dev/128#reconciliation).
     * Set to true if the current state of InsightsConfig does not match the
     * user's intended state, and the service is actively updating the resource to
     * reconcile them. This can happen due to user-triggered updates or
     * system actions like failover or maintenance.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * The runtime configurations where the application is deployed.
     * Structure is documented below.
     */
    runtimeConfigs?: pulumi.Input<pulumi.Input<inputs.developerconnect.InsightsConfigRuntimeConfig>[]>;
    /**
     * (Output)
     * The state of the Runtime.
     * Possible values:
     * STATE_UNSPECIFIED
     * LINKED
     * UNLINKED
     */
    state?: pulumi.Input<string>;
    /**
     * [Output only] Update timestamp
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InsightsConfig resource.
 */
export interface InsightsConfigArgs {
    /**
     * User specified annotations. See https://google.aip.dev/148#annotations
     * for more details such as format and size limitations.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the App Hub Application.
     * Format:
     * projects/{project}/locations/{location}/applications/{application}
     */
    appHubApplication: pulumi.Input<string>;
    /**
     * The artifact configurations of the artifacts that are deployed.
     * Structure is documented below.
     */
    artifactConfigs?: pulumi.Input<pulumi.Input<inputs.developerconnect.InsightsConfigArtifactConfig>[]>;
    /**
     * ID of the requesting InsightsConfig.
     */
    insightsConfigId: pulumi.Input<string>;
    /**
     * Set of labels associated with an InsightsConfig.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
