// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * The Firebaserules Ruleset resource
 *
 * ## Example Usage
 * ### Basic_ruleset
 * Creates a basic Firestore ruleset
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.firebaserules.Ruleset("primary", {
 *     project: "my-project-name",
 *     source: {
 *         files: [{
 *             content: "service cloud.firestore {match /databases/{database}/documents { match /{document=**} { allow read, write: if false; } } }",
 *             fingerprint: "",
 *             name: "firestore.rules",
 *         }],
 *         language: "",
 *     },
 * });
 * ```
 * ### Minimal_ruleset
 * Creates a minimal Firestore ruleset
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.firebaserules.Ruleset("primary", {
 *     project: "my-project-name",
 *     source: {
 *         files: [{
 *             content: "service cloud.firestore {match /databases/{database}/documents { match /{document=**} { allow read, write: if false; } } }",
 *             name: "firestore.rules",
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Ruleset can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:firebaserules/ruleset:Ruleset default projects/{{project}}/rulesets/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebaserules/ruleset:Ruleset default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebaserules/ruleset:Ruleset default {{name}}
 * ```
 */
export class Ruleset extends pulumi.CustomResource {
    /**
     * Get an existing Ruleset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RulesetState, opts?: pulumi.CustomResourceOptions): Ruleset {
        return new Ruleset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:firebaserules/ruleset:Ruleset';

    /**
     * Returns true if the given object is an instance of Ruleset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ruleset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ruleset.__pulumiType;
    }

    /**
     * Output only. Time the `Ruleset` was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Output only. The metadata for this ruleset.
     */
    public /*out*/ readonly metadatas!: pulumi.Output<outputs.firebaserules.RulesetMetadata[]>;
    /**
     * File name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * `Source` for the `Ruleset`.
     */
    public readonly source!: pulumi.Output<outputs.firebaserules.RulesetSource>;

    /**
     * Create a Ruleset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RulesetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RulesetArgs | RulesetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RulesetState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
        } else {
            const args = argsOrState as RulesetArgs | undefined;
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["metadatas"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ruleset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ruleset resources.
 */
export interface RulesetState {
    /**
     * Output only. Time the `Ruleset` was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Output only. The metadata for this ruleset.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.firebaserules.RulesetMetadata>[]>;
    /**
     * File name.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * `Source` for the `Ruleset`.
     */
    source?: pulumi.Input<inputs.firebaserules.RulesetSource>;
}

/**
 * The set of arguments for constructing a Ruleset resource.
 */
export interface RulesetArgs {
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * `Source` for the `Ruleset`.
     */
    source: pulumi.Input<inputs.firebaserules.RulesetSource>;
}
