// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AppProfileArgs, AppProfileState } from "./appProfile";
export type AppProfile = import("./appProfile").AppProfile;
export const AppProfile: typeof import("./appProfile").AppProfile = null as any;
utilities.lazyLoad(exports, ["AppProfile"], () => require("./appProfile"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ConnectionIamBindingArgs, ConnectionIamBindingState } from "./connectionIamBinding";
export type ConnectionIamBinding = import("./connectionIamBinding").ConnectionIamBinding;
export const ConnectionIamBinding: typeof import("./connectionIamBinding").ConnectionIamBinding = null as any;
utilities.lazyLoad(exports, ["ConnectionIamBinding"], () => require("./connectionIamBinding"));

export { ConnectionIamMemberArgs, ConnectionIamMemberState } from "./connectionIamMember";
export type ConnectionIamMember = import("./connectionIamMember").ConnectionIamMember;
export const ConnectionIamMember: typeof import("./connectionIamMember").ConnectionIamMember = null as any;
utilities.lazyLoad(exports, ["ConnectionIamMember"], () => require("./connectionIamMember"));

export { ConnectionIamPolicyArgs, ConnectionIamPolicyState } from "./connectionIamPolicy";
export type ConnectionIamPolicy = import("./connectionIamPolicy").ConnectionIamPolicy;
export const ConnectionIamPolicy: typeof import("./connectionIamPolicy").ConnectionIamPolicy = null as any;
utilities.lazyLoad(exports, ["ConnectionIamPolicy"], () => require("./connectionIamPolicy"));

export { DataTransferConfigArgs, DataTransferConfigState } from "./dataTransferConfig";
export type DataTransferConfig = import("./dataTransferConfig").DataTransferConfig;
export const DataTransferConfig: typeof import("./dataTransferConfig").DataTransferConfig = null as any;
utilities.lazyLoad(exports, ["DataTransferConfig"], () => require("./dataTransferConfig"));

export { DatasetArgs, DatasetState } from "./dataset";
export type Dataset = import("./dataset").Dataset;
export const Dataset: typeof import("./dataset").Dataset = null as any;
utilities.lazyLoad(exports, ["Dataset"], () => require("./dataset"));

export { DatasetAccessArgs, DatasetAccessState } from "./datasetAccess";
export type DatasetAccess = import("./datasetAccess").DatasetAccess;
export const DatasetAccess: typeof import("./datasetAccess").DatasetAccess = null as any;
utilities.lazyLoad(exports, ["DatasetAccess"], () => require("./datasetAccess"));

export { DatasetIamBindingArgs, DatasetIamBindingState } from "./datasetIamBinding";
export type DatasetIamBinding = import("./datasetIamBinding").DatasetIamBinding;
export const DatasetIamBinding: typeof import("./datasetIamBinding").DatasetIamBinding = null as any;
utilities.lazyLoad(exports, ["DatasetIamBinding"], () => require("./datasetIamBinding"));

export { DatasetIamMemberArgs, DatasetIamMemberState } from "./datasetIamMember";
export type DatasetIamMember = import("./datasetIamMember").DatasetIamMember;
export const DatasetIamMember: typeof import("./datasetIamMember").DatasetIamMember = null as any;
utilities.lazyLoad(exports, ["DatasetIamMember"], () => require("./datasetIamMember"));

export { DatasetIamPolicyArgs, DatasetIamPolicyState } from "./datasetIamPolicy";
export type DatasetIamPolicy = import("./datasetIamPolicy").DatasetIamPolicy;
export const DatasetIamPolicy: typeof import("./datasetIamPolicy").DatasetIamPolicy = null as any;
utilities.lazyLoad(exports, ["DatasetIamPolicy"], () => require("./datasetIamPolicy"));

export { GetDefaultServiceAccountArgs, GetDefaultServiceAccountResult, GetDefaultServiceAccountOutputArgs } from "./getDefaultServiceAccount";
export const getDefaultServiceAccount: typeof import("./getDefaultServiceAccount").getDefaultServiceAccount = null as any;
export const getDefaultServiceAccountOutput: typeof import("./getDefaultServiceAccount").getDefaultServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultServiceAccount","getDefaultServiceAccountOutput"], () => require("./getDefaultServiceAccount"));

export { IamBindingArgs, IamBindingState } from "./iamBinding";
export type IamBinding = import("./iamBinding").IamBinding;
export const IamBinding: typeof import("./iamBinding").IamBinding = null as any;
utilities.lazyLoad(exports, ["IamBinding"], () => require("./iamBinding"));

export { IamMemberArgs, IamMemberState } from "./iamMember";
export type IamMember = import("./iamMember").IamMember;
export const IamMember: typeof import("./iamMember").IamMember = null as any;
utilities.lazyLoad(exports, ["IamMember"], () => require("./iamMember"));

export { IamPolicyArgs, IamPolicyState } from "./iamPolicy";
export type IamPolicy = import("./iamPolicy").IamPolicy;
export const IamPolicy: typeof import("./iamPolicy").IamPolicy = null as any;
utilities.lazyLoad(exports, ["IamPolicy"], () => require("./iamPolicy"));

export { JobArgs, JobState } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { ReservationArgs, ReservationState } from "./reservation";
export type Reservation = import("./reservation").Reservation;
export const Reservation: typeof import("./reservation").Reservation = null as any;
utilities.lazyLoad(exports, ["Reservation"], () => require("./reservation"));

export { ReservationAssignmentArgs, ReservationAssignmentState } from "./reservationAssignment";
export type ReservationAssignment = import("./reservationAssignment").ReservationAssignment;
export const ReservationAssignment: typeof import("./reservationAssignment").ReservationAssignment = null as any;
utilities.lazyLoad(exports, ["ReservationAssignment"], () => require("./reservationAssignment"));

export { RoutineArgs, RoutineState } from "./routine";
export type Routine = import("./routine").Routine;
export const Routine: typeof import("./routine").Routine = null as any;
utilities.lazyLoad(exports, ["Routine"], () => require("./routine"));

export { TableArgs, TableState } from "./table";
export type Table = import("./table").Table;
export const Table: typeof import("./table").Table = null as any;
utilities.lazyLoad(exports, ["Table"], () => require("./table"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:bigquery/appProfile:AppProfile":
                return new AppProfile(name, <any>undefined, { urn })
            case "gcp:bigquery/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "gcp:bigquery/connectionIamBinding:ConnectionIamBinding":
                return new ConnectionIamBinding(name, <any>undefined, { urn })
            case "gcp:bigquery/connectionIamMember:ConnectionIamMember":
                return new ConnectionIamMember(name, <any>undefined, { urn })
            case "gcp:bigquery/connectionIamPolicy:ConnectionIamPolicy":
                return new ConnectionIamPolicy(name, <any>undefined, { urn })
            case "gcp:bigquery/dataTransferConfig:DataTransferConfig":
                return new DataTransferConfig(name, <any>undefined, { urn })
            case "gcp:bigquery/dataset:Dataset":
                return new Dataset(name, <any>undefined, { urn })
            case "gcp:bigquery/datasetAccess:DatasetAccess":
                return new DatasetAccess(name, <any>undefined, { urn })
            case "gcp:bigquery/datasetIamBinding:DatasetIamBinding":
                return new DatasetIamBinding(name, <any>undefined, { urn })
            case "gcp:bigquery/datasetIamMember:DatasetIamMember":
                return new DatasetIamMember(name, <any>undefined, { urn })
            case "gcp:bigquery/datasetIamPolicy:DatasetIamPolicy":
                return new DatasetIamPolicy(name, <any>undefined, { urn })
            case "gcp:bigquery/iamBinding:IamBinding":
                return new IamBinding(name, <any>undefined, { urn })
            case "gcp:bigquery/iamMember:IamMember":
                return new IamMember(name, <any>undefined, { urn })
            case "gcp:bigquery/iamPolicy:IamPolicy":
                return new IamPolicy(name, <any>undefined, { urn })
            case "gcp:bigquery/job:Job":
                return new Job(name, <any>undefined, { urn })
            case "gcp:bigquery/reservation:Reservation":
                return new Reservation(name, <any>undefined, { urn })
            case "gcp:bigquery/reservationAssignment:ReservationAssignment":
                return new ReservationAssignment(name, <any>undefined, { urn })
            case "gcp:bigquery/routine:Routine":
                return new Routine(name, <any>undefined, { urn })
            case "gcp:bigquery/table:Table":
                return new Table(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "bigquery/appProfile", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/connection", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/connectionIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/connectionIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/connectionIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/dataTransferConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/dataset", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/datasetAccess", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/datasetIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/datasetIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/datasetIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/iamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/iamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/iamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/job", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/reservation", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/reservationAssignment", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/routine", _module)
pulumi.runtime.registerResourceModule("gcp", "bigquery/table", _module)
