// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * A connection allows BigQuery connections to external data sources..
 *
 * To get more information about Connection, see:
 *
 * * [API documentation](https://cloud.google.com/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/create)
 * * How-to Guides
 *     * [Cloud SQL federated queries](https://cloud.google.com/bigquery/docs/cloud-sql-federated-queries)
 *
 * > **Warning:** All arguments including `cloud_sql.credential.password` will be stored in the raw
 * state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/language/state/sensitive-data.html).
 *
 * ## Example Usage
 * ### Bigquery Connection Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 *
 * const instance = new gcp.sql.DatabaseInstance("instance", {
 *     databaseVersion: "POSTGRES_11",
 *     region: "us-central1",
 *     settings: {
 *         tier: "db-f1-micro",
 *     },
 *     deletionProtection: true,
 * });
 * const db = new gcp.sql.Database("db", {instance: instance.name});
 * const pwd = new random.RandomPassword("pwd", {
 *     length: 16,
 *     special: false,
 * });
 * const user = new gcp.sql.User("user", {
 *     instance: instance.name,
 *     password: pwd.result,
 * });
 * const connection = new gcp.bigquery.Connection("connection", {
 *     friendlyName: "ðŸ‘‹",
 *     description: "a riveting description",
 *     location: "US",
 *     cloudSql: {
 *         instanceId: instance.connectionName,
 *         database: db.name,
 *         type: "POSTGRES",
 *         credential: {
 *             username: user.name,
 *             password: user.password,
 *         },
 *     },
 * });
 * ```
 * ### Bigquery Connection Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 *
 * const instance = new gcp.sql.DatabaseInstance("instance", {
 *     databaseVersion: "POSTGRES_11",
 *     region: "us-central1",
 *     settings: {
 *         tier: "db-f1-micro",
 *     },
 *     deletionProtection: true,
 * });
 * const db = new gcp.sql.Database("db", {instance: instance.name});
 * const pwd = new random.RandomPassword("pwd", {
 *     length: 16,
 *     special: false,
 * });
 * const user = new gcp.sql.User("user", {
 *     instance: instance.name,
 *     password: pwd.result,
 * });
 * const connection = new gcp.bigquery.Connection("connection", {
 *     connectionId: "my-connection",
 *     location: "US",
 *     friendlyName: "ðŸ‘‹",
 *     description: "a riveting description",
 *     cloudSql: {
 *         instanceId: instance.connectionName,
 *         database: db.name,
 *         type: "POSTGRES",
 *         credential: {
 *             username: user.name,
 *             password: user.password,
 *         },
 *     },
 * });
 * ```
 * ### Bigquery Connection Cloud Resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const connection = new gcp.bigquery.Connection("connection", {
 *     cloudResource: {},
 *     connectionId: "my-connection",
 *     description: "a riveting description",
 *     friendlyName: "ðŸ‘‹",
 *     location: "US",
 * });
 * ```
 * ### Bigquery Connection Aws
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const connection = new gcp.bigquery.Connection("connection", {
 *     aws: {
 *         accessRole: {
 *             iamRoleId: "arn:aws:iam::999999999999:role/omnirole",
 *         },
 *     },
 *     connectionId: "my-connection",
 *     description: "a riveting description",
 *     friendlyName: "ðŸ‘‹",
 *     location: "aws-us-east-1",
 * });
 * ```
 * ### Bigquery Connection Azure
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const connection = new gcp.bigquery.Connection("connection", {
 *     azure: {
 *         customerTenantId: "customer-tenant-id",
 *     },
 *     connectionId: "my-connection",
 *     description: "a riveting description",
 *     friendlyName: "ðŸ‘‹",
 *     location: "azure-eastus2",
 * });
 * ```
 * ### Bigquery Connection Cloudspanner
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const connection = new gcp.bigquery.Connection("connection", {
 *     cloudSpanner: {
 *         database: "projects/project/instances/instance/databases/database",
 *     },
 *     connectionId: "my-connection",
 *     description: "a riveting description",
 *     friendlyName: "ðŸ‘‹",
 *     location: "US",
 * });
 * ```
 *
 * ## Import
 *
 * Connection can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:bigquery/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{connection_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:bigquery/connection:Connection default {{project}}/{{location}}/{{connection_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:bigquery/connection:Connection default {{location}}/{{connection_id}}
 * ```
 */
export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:bigquery/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * Connection properties specific to Amazon Web Services.
     * Structure is documented below.
     */
    public readonly aws!: pulumi.Output<outputs.bigquery.ConnectionAws | undefined>;
    /**
     * Container for connection properties specific to Azure.
     * Structure is documented below.
     */
    public readonly azure!: pulumi.Output<outputs.bigquery.ConnectionAzure | undefined>;
    /**
     * Container for connection properties for delegation of access to GCP resources.
     * Structure is documented below.
     */
    public readonly cloudResource!: pulumi.Output<outputs.bigquery.ConnectionCloudResource | undefined>;
    /**
     * Connection properties specific to Cloud Spanner
     * Structure is documented below.
     */
    public readonly cloudSpanner!: pulumi.Output<outputs.bigquery.ConnectionCloudSpanner | undefined>;
    /**
     * A nested object resource
     * Structure is documented below.
     */
    public readonly cloudSql!: pulumi.Output<outputs.bigquery.ConnectionCloudSql | undefined>;
    /**
     * Optional connection id that should be assigned to the created connection.
     */
    public readonly connectionId!: pulumi.Output<string>;
    /**
     * A descriptive description for the connection
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A descriptive name for the connection
     */
    public readonly friendlyName!: pulumi.Output<string | undefined>;
    /**
     * True if the connection has credential assigned.
     */
    public /*out*/ readonly hasCredential!: pulumi.Output<boolean>;
    /**
     * The geographic location where the connection should reside.
     * Cloud SQL instance must be in the same location as the connection
     * with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
     * Examples: US, EU, asia-northeast1, us-central1, europe-west1.
     * Spanner Connections same as spanner region
     * AWS allowed regions are aws-us-east-1
     * Azure allowed regions are azure-eastus2
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The resource name of the connection in the form of:
     * "projects/{project_id}/locations/{location_id}/connections/{connectionId}"
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            resourceInputs["aws"] = state ? state.aws : undefined;
            resourceInputs["azure"] = state ? state.azure : undefined;
            resourceInputs["cloudResource"] = state ? state.cloudResource : undefined;
            resourceInputs["cloudSpanner"] = state ? state.cloudSpanner : undefined;
            resourceInputs["cloudSql"] = state ? state.cloudSql : undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
            resourceInputs["hasCredential"] = state ? state.hasCredential : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            resourceInputs["aws"] = args ? args.aws : undefined;
            resourceInputs["azure"] = args ? args.azure : undefined;
            resourceInputs["cloudResource"] = args ? args.cloudResource : undefined;
            resourceInputs["cloudSpanner"] = args ? args.cloudSpanner : undefined;
            resourceInputs["cloudSql"] = args ? args.cloudSql : undefined;
            resourceInputs["connectionId"] = args ? args.connectionId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["hasCredential"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * Connection properties specific to Amazon Web Services.
     * Structure is documented below.
     */
    aws?: pulumi.Input<inputs.bigquery.ConnectionAws>;
    /**
     * Container for connection properties specific to Azure.
     * Structure is documented below.
     */
    azure?: pulumi.Input<inputs.bigquery.ConnectionAzure>;
    /**
     * Container for connection properties for delegation of access to GCP resources.
     * Structure is documented below.
     */
    cloudResource?: pulumi.Input<inputs.bigquery.ConnectionCloudResource>;
    /**
     * Connection properties specific to Cloud Spanner
     * Structure is documented below.
     */
    cloudSpanner?: pulumi.Input<inputs.bigquery.ConnectionCloudSpanner>;
    /**
     * A nested object resource
     * Structure is documented below.
     */
    cloudSql?: pulumi.Input<inputs.bigquery.ConnectionCloudSql>;
    /**
     * Optional connection id that should be assigned to the created connection.
     */
    connectionId?: pulumi.Input<string>;
    /**
     * A descriptive description for the connection
     */
    description?: pulumi.Input<string>;
    /**
     * A descriptive name for the connection
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * True if the connection has credential assigned.
     */
    hasCredential?: pulumi.Input<boolean>;
    /**
     * The geographic location where the connection should reside.
     * Cloud SQL instance must be in the same location as the connection
     * with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
     * Examples: US, EU, asia-northeast1, us-central1, europe-west1.
     * Spanner Connections same as spanner region
     * AWS allowed regions are aws-us-east-1
     * Azure allowed regions are azure-eastus2
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the connection in the form of:
     * "projects/{project_id}/locations/{location_id}/connections/{connectionId}"
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * Connection properties specific to Amazon Web Services.
     * Structure is documented below.
     */
    aws?: pulumi.Input<inputs.bigquery.ConnectionAws>;
    /**
     * Container for connection properties specific to Azure.
     * Structure is documented below.
     */
    azure?: pulumi.Input<inputs.bigquery.ConnectionAzure>;
    /**
     * Container for connection properties for delegation of access to GCP resources.
     * Structure is documented below.
     */
    cloudResource?: pulumi.Input<inputs.bigquery.ConnectionCloudResource>;
    /**
     * Connection properties specific to Cloud Spanner
     * Structure is documented below.
     */
    cloudSpanner?: pulumi.Input<inputs.bigquery.ConnectionCloudSpanner>;
    /**
     * A nested object resource
     * Structure is documented below.
     */
    cloudSql?: pulumi.Input<inputs.bigquery.ConnectionCloudSql>;
    /**
     * Optional connection id that should be assigned to the created connection.
     */
    connectionId?: pulumi.Input<string>;
    /**
     * A descriptive description for the connection
     */
    description?: pulumi.Input<string>;
    /**
     * A descriptive name for the connection
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * The geographic location where the connection should reside.
     * Cloud SQL instance must be in the same location as the connection
     * with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
     * Examples: US, EU, asia-northeast1, us-central1, europe-west1.
     * Spanner Connections same as spanner region
     * AWS allowed regions are aws-us-east-1
     * Azure allowed regions are azure-eastus2
     */
    location?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
