// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Get a specific table in a BigQuery dataset. For more information see
 * the [official documentation](https://cloud.google.com/bigquery/docs)
 * and [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const table = gcp.bigquery.getTable({
 *     project: "my-project",
 *     datasetId: "my-bq-dataset",
 *     tableId: "my-table",
 * });
 * ```
 */
export function getTable(args: GetTableArgs, opts?: pulumi.InvokeOptions): Promise<GetTableResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:bigquery/getTable:getTable", {
        "datasetId": args.datasetId,
        "project": args.project,
        "tableId": args.tableId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTable.
 */
export interface GetTableArgs {
    /**
     * The dataset ID.
     */
    datasetId: string;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: string;
    /**
     * The table ID.
     */
    tableId: string;
}

/**
 * A collection of values returned by getTable.
 */
export interface GetTableResult {
    readonly biglakeConfigurations: outputs.bigquery.GetTableBiglakeConfiguration[];
    readonly clusterings: string[];
    readonly creationTime: number;
    readonly datasetId: string;
    readonly deletionProtection: boolean;
    readonly description: string;
    readonly effectiveLabels: {[key: string]: string};
    readonly encryptionConfigurations: outputs.bigquery.GetTableEncryptionConfiguration[];
    readonly etag: string;
    readonly expirationTime: number;
    readonly externalCatalogTableOptions: outputs.bigquery.GetTableExternalCatalogTableOption[];
    readonly externalDataConfigurations: outputs.bigquery.GetTableExternalDataConfiguration[];
    readonly friendlyName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ignoreSchemaChanges: string[];
    readonly labels: {[key: string]: string};
    readonly lastModifiedTime: number;
    readonly location: string;
    readonly materializedViews: outputs.bigquery.GetTableMaterializedView[];
    readonly maxStaleness: string;
    readonly numBytes: number;
    readonly numLongTermBytes: number;
    readonly numRows: number;
    readonly project?: string;
    readonly pulumiLabels: {[key: string]: string};
    readonly rangePartitionings: outputs.bigquery.GetTableRangePartitioning[];
    readonly requirePartitionFilter: boolean;
    readonly resourceTags: {[key: string]: string};
    readonly schema: string;
    readonly schemaForeignTypeInfos: outputs.bigquery.GetTableSchemaForeignTypeInfo[];
    readonly selfLink: string;
    readonly tableConstraints: outputs.bigquery.GetTableTableConstraint[];
    readonly tableId: string;
    readonly tableMetadataView: string;
    readonly tableReplicationInfos: outputs.bigquery.GetTableTableReplicationInfo[];
    readonly timePartitionings: outputs.bigquery.GetTableTimePartitioning[];
    readonly type: string;
    readonly views: outputs.bigquery.GetTableView[];
}
/**
 * Get a specific table in a BigQuery dataset. For more information see
 * the [official documentation](https://cloud.google.com/bigquery/docs)
 * and [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const table = gcp.bigquery.getTable({
 *     project: "my-project",
 *     datasetId: "my-bq-dataset",
 *     tableId: "my-table",
 * });
 * ```
 */
export function getTableOutput(args: GetTableOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetTableResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:bigquery/getTable:getTable", {
        "datasetId": args.datasetId,
        "project": args.project,
        "tableId": args.tableId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTable.
 */
export interface GetTableOutputArgs {
    /**
     * The dataset ID.
     */
    datasetId: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The table ID.
     */
    tableId: pulumi.Input<string>;
}
