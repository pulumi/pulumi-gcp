// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 * ### Bigquerydatatransfer Config Scheduled Query
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const permissions = new gcp.projects.IAMMember("permissions", {
 *     project: project.then(project => project.projectId),
 *     role: "roles/iam.serviceAccountShortTermTokenMinter",
 *     member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-bigquerydatatransfer.iam.gserviceaccount.com`),
 * });
 * const myDataset = new gcp.bigquery.Dataset("myDataset", {
 *     datasetId: "my_dataset",
 *     friendlyName: "foo",
 *     description: "bar",
 *     location: "asia-northeast1",
 * }, {
 *     dependsOn: [permissions],
 * });
 * const queryConfig = new gcp.bigquery.DataTransferConfig("queryConfig", {
 *     displayName: "my-query",
 *     location: "asia-northeast1",
 *     dataSourceId: "scheduled_query",
 *     schedule: "first sunday of quarter 00:00",
 *     destinationDatasetId: myDataset.datasetId,
 *     params: {
 *         destination_table_name_template: "my_table",
 *         write_disposition: "WRITE_APPEND",
 *         query: "SELECT name FROM tabl WHERE x = 'y'",
 *     },
 * }, {
 *     dependsOn: [permissions],
 * });
 * ```
 *
 * ## Import
 *
 * Config can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:bigquery/dataTransferConfig:DataTransferConfig default {{name}}
 * ```
 */
export class DataTransferConfig extends pulumi.CustomResource {
    /**
     * Get an existing DataTransferConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataTransferConfigState, opts?: pulumi.CustomResourceOptions): DataTransferConfig {
        return new DataTransferConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:bigquery/dataTransferConfig:DataTransferConfig';

    /**
     * Returns true if the given object is an instance of DataTransferConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataTransferConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataTransferConfig.__pulumiType;
    }

    /**
     * The number of days to look back to automatically refresh the data.
     * For example, if dataRefreshWindowDays = 10, then every day BigQuery
     * reingests data for [today-10, today-1], rather than ingesting data for
     * just [today-1]. Only valid if the data source supports the feature.
     * Set the value to 0 to use the default value.
     */
    public readonly dataRefreshWindowDays!: pulumi.Output<number | undefined>;
    /**
     * The data source id. Cannot be changed once the transfer config is created.
     */
    public readonly dataSourceId!: pulumi.Output<string>;
    /**
     * The BigQuery target dataset id.
     */
    public readonly destinationDatasetId!: pulumi.Output<string | undefined>;
    /**
     * When set to true, no runs are scheduled for a given transfer.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * The user specified display name for the transfer config.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Email notifications will be sent according to these preferences to the
     * email address of the user who owns this transfer config.
     * Structure is documented below.
     */
    public readonly emailPreferences!: pulumi.Output<outputs.bigquery.DataTransferConfigEmailPreferences | undefined>;
    /**
     * The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The resource name of the transfer config. Transfer config names have the form
     * projects/{projectId}/locations/{location}/transferConfigs/{configId}. Where configId is usually a uuid, but this is not
     * required. The name is ignored when creating a transfer config.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Pub/Sub topic where notifications will be sent after transfer runs
     * associated with this transfer config finish.
     */
    public readonly notificationPubsubTopic!: pulumi.Output<string | undefined>;
    /**
     * Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section
     * for each data source. For example the parameters for Cloud Storage transfers are listed here:
     * https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq **NOTE** : If you are attempting to update a
     * parameter that cannot be updated (due to api limitations) [please force recreation of the
     * resource](https://www.terraform.io/cli/state/taint#forcing-re-creation-of-resources).
     */
    public readonly params!: pulumi.Output<{[key: string]: string}>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Data transfer schedule. If the data source does not support a custom
     * schedule, this should be empty. If it is empty, the default value for
     * the data source will be used. The specified times are in UTC. Examples
     * of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
     * jun 13:15, and first sunday of quarter 00:00. See more explanation
     * about the format here:
     * https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
     * NOTE: the granularity should be at least 8 hours, or less frequent.
     */
    public readonly schedule!: pulumi.Output<string | undefined>;
    /**
     * Options customizing the data transfer schedule.
     * Structure is documented below.
     */
    public readonly scheduleOptions!: pulumi.Output<outputs.bigquery.DataTransferConfigScheduleOptions | undefined>;
    /**
     * Different parameters are configured primarily using the the `params` field on this
     * resource. This block contains the parameters which contain secrets or passwords so that they can be marked
     * sensitive and hidden from plan output. The name of the field, eg: secret_access_key, will be the key
     * in the `params` map in the api request.
     * Credentials may not be specified in both locations and will cause an error. Changing from one location
     * to a different credential configuration in the config will require an apply to update state.
     * Structure is documented below.
     */
    public readonly sensitiveParams!: pulumi.Output<outputs.bigquery.DataTransferConfigSensitiveParams | undefined>;
    /**
     * Service account email. If this field is set, transfer config will
     * be created with this service account credentials. It requires that
     * requesting user calling this API has permissions to act as this service account.
     */
    public readonly serviceAccountName!: pulumi.Output<string | undefined>;

    /**
     * Create a DataTransferConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataTransferConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataTransferConfigArgs | DataTransferConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataTransferConfigState | undefined;
            resourceInputs["dataRefreshWindowDays"] = state ? state.dataRefreshWindowDays : undefined;
            resourceInputs["dataSourceId"] = state ? state.dataSourceId : undefined;
            resourceInputs["destinationDatasetId"] = state ? state.destinationDatasetId : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["emailPreferences"] = state ? state.emailPreferences : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationPubsubTopic"] = state ? state.notificationPubsubTopic : undefined;
            resourceInputs["params"] = state ? state.params : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scheduleOptions"] = state ? state.scheduleOptions : undefined;
            resourceInputs["sensitiveParams"] = state ? state.sensitiveParams : undefined;
            resourceInputs["serviceAccountName"] = state ? state.serviceAccountName : undefined;
        } else {
            const args = argsOrState as DataTransferConfigArgs | undefined;
            if ((!args || args.dataSourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.params === undefined) && !opts.urn) {
                throw new Error("Missing required property 'params'");
            }
            resourceInputs["dataRefreshWindowDays"] = args ? args.dataRefreshWindowDays : undefined;
            resourceInputs["dataSourceId"] = args ? args.dataSourceId : undefined;
            resourceInputs["destinationDatasetId"] = args ? args.destinationDatasetId : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["emailPreferences"] = args ? args.emailPreferences : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["notificationPubsubTopic"] = args ? args.notificationPubsubTopic : undefined;
            resourceInputs["params"] = args ? args.params : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scheduleOptions"] = args ? args.scheduleOptions : undefined;
            resourceInputs["sensitiveParams"] = args ? args.sensitiveParams : undefined;
            resourceInputs["serviceAccountName"] = args ? args.serviceAccountName : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataTransferConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataTransferConfig resources.
 */
export interface DataTransferConfigState {
    /**
     * The number of days to look back to automatically refresh the data.
     * For example, if dataRefreshWindowDays = 10, then every day BigQuery
     * reingests data for [today-10, today-1], rather than ingesting data for
     * just [today-1]. Only valid if the data source supports the feature.
     * Set the value to 0 to use the default value.
     */
    dataRefreshWindowDays?: pulumi.Input<number>;
    /**
     * The data source id. Cannot be changed once the transfer config is created.
     */
    dataSourceId?: pulumi.Input<string>;
    /**
     * The BigQuery target dataset id.
     */
    destinationDatasetId?: pulumi.Input<string>;
    /**
     * When set to true, no runs are scheduled for a given transfer.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The user specified display name for the transfer config.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Email notifications will be sent according to these preferences to the
     * email address of the user who owns this transfer config.
     * Structure is documented below.
     */
    emailPreferences?: pulumi.Input<inputs.bigquery.DataTransferConfigEmailPreferences>;
    /**
     * The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the transfer config. Transfer config names have the form
     * projects/{projectId}/locations/{location}/transferConfigs/{configId}. Where configId is usually a uuid, but this is not
     * required. The name is ignored when creating a transfer config.
     */
    name?: pulumi.Input<string>;
    /**
     * Pub/Sub topic where notifications will be sent after transfer runs
     * associated with this transfer config finish.
     */
    notificationPubsubTopic?: pulumi.Input<string>;
    /**
     * Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section
     * for each data source. For example the parameters for Cloud Storage transfers are listed here:
     * https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq **NOTE** : If you are attempting to update a
     * parameter that cannot be updated (due to api limitations) [please force recreation of the
     * resource](https://www.terraform.io/cli/state/taint#forcing-re-creation-of-resources).
     */
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Data transfer schedule. If the data source does not support a custom
     * schedule, this should be empty. If it is empty, the default value for
     * the data source will be used. The specified times are in UTC. Examples
     * of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
     * jun 13:15, and first sunday of quarter 00:00. See more explanation
     * about the format here:
     * https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
     * NOTE: the granularity should be at least 8 hours, or less frequent.
     */
    schedule?: pulumi.Input<string>;
    /**
     * Options customizing the data transfer schedule.
     * Structure is documented below.
     */
    scheduleOptions?: pulumi.Input<inputs.bigquery.DataTransferConfigScheduleOptions>;
    /**
     * Different parameters are configured primarily using the the `params` field on this
     * resource. This block contains the parameters which contain secrets or passwords so that they can be marked
     * sensitive and hidden from plan output. The name of the field, eg: secret_access_key, will be the key
     * in the `params` map in the api request.
     * Credentials may not be specified in both locations and will cause an error. Changing from one location
     * to a different credential configuration in the config will require an apply to update state.
     * Structure is documented below.
     */
    sensitiveParams?: pulumi.Input<inputs.bigquery.DataTransferConfigSensitiveParams>;
    /**
     * Service account email. If this field is set, transfer config will
     * be created with this service account credentials. It requires that
     * requesting user calling this API has permissions to act as this service account.
     */
    serviceAccountName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataTransferConfig resource.
 */
export interface DataTransferConfigArgs {
    /**
     * The number of days to look back to automatically refresh the data.
     * For example, if dataRefreshWindowDays = 10, then every day BigQuery
     * reingests data for [today-10, today-1], rather than ingesting data for
     * just [today-1]. Only valid if the data source supports the feature.
     * Set the value to 0 to use the default value.
     */
    dataRefreshWindowDays?: pulumi.Input<number>;
    /**
     * The data source id. Cannot be changed once the transfer config is created.
     */
    dataSourceId: pulumi.Input<string>;
    /**
     * The BigQuery target dataset id.
     */
    destinationDatasetId?: pulumi.Input<string>;
    /**
     * When set to true, no runs are scheduled for a given transfer.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The user specified display name for the transfer config.
     */
    displayName: pulumi.Input<string>;
    /**
     * Email notifications will be sent according to these preferences to the
     * email address of the user who owns this transfer config.
     * Structure is documented below.
     */
    emailPreferences?: pulumi.Input<inputs.bigquery.DataTransferConfigEmailPreferences>;
    /**
     * The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     */
    location?: pulumi.Input<string>;
    /**
     * Pub/Sub topic where notifications will be sent after transfer runs
     * associated with this transfer config finish.
     */
    notificationPubsubTopic?: pulumi.Input<string>;
    /**
     * Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section
     * for each data source. For example the parameters for Cloud Storage transfers are listed here:
     * https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq **NOTE** : If you are attempting to update a
     * parameter that cannot be updated (due to api limitations) [please force recreation of the
     * resource](https://www.terraform.io/cli/state/taint#forcing-re-creation-of-resources).
     */
    params: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Data transfer schedule. If the data source does not support a custom
     * schedule, this should be empty. If it is empty, the default value for
     * the data source will be used. The specified times are in UTC. Examples
     * of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
     * jun 13:15, and first sunday of quarter 00:00. See more explanation
     * about the format here:
     * https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
     * NOTE: the granularity should be at least 8 hours, or less frequent.
     */
    schedule?: pulumi.Input<string>;
    /**
     * Options customizing the data transfer schedule.
     * Structure is documented below.
     */
    scheduleOptions?: pulumi.Input<inputs.bigquery.DataTransferConfigScheduleOptions>;
    /**
     * Different parameters are configured primarily using the the `params` field on this
     * resource. This block contains the parameters which contain secrets or passwords so that they can be marked
     * sensitive and hidden from plan output. The name of the field, eg: secret_access_key, will be the key
     * in the `params` map in the api request.
     * Credentials may not be specified in both locations and will cause an error. Changing from one location
     * to a different credential configuration in the config will require an apply to update state.
     * Structure is documented below.
     */
    sensitiveParams?: pulumi.Input<inputs.bigquery.DataTransferConfigSensitiveParams>;
    /**
     * Service account email. If this field is set, transfer config will
     * be created with this service account credentials. It requires that
     * requesting user calling this API has permissions to act as this service account.
     */
    serviceAccountName?: pulumi.Input<string>;
}
