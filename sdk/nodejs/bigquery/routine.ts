// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * A user-defined function or a stored procedure that belongs to a Dataset
 *
 * To get more information about Routine, see:
 *
 * * [API documentation](https://cloud.google.com/bigquery/docs/reference/rest/v2/routines)
 * * How-to Guides
 *     * [Routines Intro](https://cloud.google.com/bigquery/docs/reference/rest/v2/routines)
 *
 * ## Example Usage
 * ### Big Query Routine Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const test = new gcp.bigquery.Dataset("test", {datasetId: "dataset_id"});
 * const sproc = new gcp.bigquery.Routine("sproc", {
 *     datasetId: test.datasetId,
 *     routineId: "routine_id",
 *     routineType: "PROCEDURE",
 *     language: "SQL",
 *     definitionBody: "CREATE FUNCTION Add(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (x + y);",
 * });
 * ```
 *
 * ## Import
 *
 * Routine can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:bigquery/routine:Routine default projects/{{project}}/datasets/{{dataset_id}}/routines/{{routine_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:bigquery/routine:Routine default {{project}}/{{dataset_id}}/{{routine_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:bigquery/routine:Routine default {{dataset_id}}/{{routine_id}}
 * ```
 */
export class Routine extends pulumi.CustomResource {
    /**
     * Get an existing Routine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoutineState, opts?: pulumi.CustomResourceOptions): Routine {
        return new Routine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:bigquery/routine:Routine';

    /**
     * Returns true if the given object is an instance of Routine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Routine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Routine.__pulumiType;
    }

    /**
     * Input/output argument of a function or a stored procedure.
     * Structure is documented below.
     */
    public readonly arguments!: pulumi.Output<outputs.bigquery.RoutineArgument[] | undefined>;
    /**
     * The time when this routine was created, in milliseconds since the epoch.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<number>;
    /**
     * The ID of the dataset containing this routine
     */
    public readonly datasetId!: pulumi.Output<string>;
    /**
     * The body of the routine. For functions, this is the expression in the AS clause.
     * If language=SQL, it is the substring inside (but excluding) the parentheses.
     */
    public readonly definitionBody!: pulumi.Output<string>;
    /**
     * The description of the routine if defined.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The determinism level of the JavaScript UDF if defined.
     * Possible values are `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, and `NOT_DETERMINISTIC`.
     */
    public readonly determinismLevel!: pulumi.Output<string | undefined>;
    /**
     * Optional. If language = "JAVASCRIPT", this field stores the path of the
     * imported JAVASCRIPT libraries.
     */
    public readonly importedLibraries!: pulumi.Output<string[] | undefined>;
    /**
     * The language of the routine.
     * Possible values are `SQL` and `JAVASCRIPT`.
     */
    public readonly language!: pulumi.Output<string | undefined>;
    /**
     * The time when this routine was modified, in milliseconds since the epoch.
     */
    public /*out*/ readonly lastModifiedTime!: pulumi.Output<number>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
     * If absent, the return type is inferred from definitionBody at query time in each query
     * that references this routine. If present, then the evaluated result will be cast to
     * the specified returned type at query time. ~>**NOTE**: Because this field expects a JSON
     * string, any changes to the string will create a diff, even if the JSON itself hasn't
     * changed. If the API returns a different value for the same schema, e.g. it switche
     * d the order of values or replaced STRUCT field type with RECORD field type, we currently
     * cannot suppress the recurring diff this causes. As a workaround, we recommend using
     * the schema as returned by the API.
     */
    public readonly returnType!: pulumi.Output<string | undefined>;
    /**
     * The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
     */
    public readonly routineId!: pulumi.Output<string>;
    /**
     * The type of routine.
     * Possible values are `SCALAR_FUNCTION` and `PROCEDURE`.
     */
    public readonly routineType!: pulumi.Output<string | undefined>;

    /**
     * Create a Routine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoutineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoutineArgs | RoutineState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoutineState | undefined;
            inputs["arguments"] = state ? state.arguments : undefined;
            inputs["creationTime"] = state ? state.creationTime : undefined;
            inputs["datasetId"] = state ? state.datasetId : undefined;
            inputs["definitionBody"] = state ? state.definitionBody : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["determinismLevel"] = state ? state.determinismLevel : undefined;
            inputs["importedLibraries"] = state ? state.importedLibraries : undefined;
            inputs["language"] = state ? state.language : undefined;
            inputs["lastModifiedTime"] = state ? state.lastModifiedTime : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["returnType"] = state ? state.returnType : undefined;
            inputs["routineId"] = state ? state.routineId : undefined;
            inputs["routineType"] = state ? state.routineType : undefined;
        } else {
            const args = argsOrState as RoutineArgs | undefined;
            if ((!args || args.datasetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasetId'");
            }
            if ((!args || args.definitionBody === undefined) && !opts.urn) {
                throw new Error("Missing required property 'definitionBody'");
            }
            if ((!args || args.routineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routineId'");
            }
            inputs["arguments"] = args ? args.arguments : undefined;
            inputs["datasetId"] = args ? args.datasetId : undefined;
            inputs["definitionBody"] = args ? args.definitionBody : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["determinismLevel"] = args ? args.determinismLevel : undefined;
            inputs["importedLibraries"] = args ? args.importedLibraries : undefined;
            inputs["language"] = args ? args.language : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["returnType"] = args ? args.returnType : undefined;
            inputs["routineId"] = args ? args.routineId : undefined;
            inputs["routineType"] = args ? args.routineType : undefined;
            inputs["creationTime"] = undefined /*out*/;
            inputs["lastModifiedTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Routine.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Routine resources.
 */
export interface RoutineState {
    /**
     * Input/output argument of a function or a stored procedure.
     * Structure is documented below.
     */
    arguments?: pulumi.Input<pulumi.Input<inputs.bigquery.RoutineArgument>[]>;
    /**
     * The time when this routine was created, in milliseconds since the epoch.
     */
    creationTime?: pulumi.Input<number>;
    /**
     * The ID of the dataset containing this routine
     */
    datasetId?: pulumi.Input<string>;
    /**
     * The body of the routine. For functions, this is the expression in the AS clause.
     * If language=SQL, it is the substring inside (but excluding) the parentheses.
     */
    definitionBody?: pulumi.Input<string>;
    /**
     * The description of the routine if defined.
     */
    description?: pulumi.Input<string>;
    /**
     * The determinism level of the JavaScript UDF if defined.
     * Possible values are `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, and `NOT_DETERMINISTIC`.
     */
    determinismLevel?: pulumi.Input<string>;
    /**
     * Optional. If language = "JAVASCRIPT", this field stores the path of the
     * imported JAVASCRIPT libraries.
     */
    importedLibraries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The language of the routine.
     * Possible values are `SQL` and `JAVASCRIPT`.
     */
    language?: pulumi.Input<string>;
    /**
     * The time when this routine was modified, in milliseconds since the epoch.
     */
    lastModifiedTime?: pulumi.Input<number>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
     * If absent, the return type is inferred from definitionBody at query time in each query
     * that references this routine. If present, then the evaluated result will be cast to
     * the specified returned type at query time. ~>**NOTE**: Because this field expects a JSON
     * string, any changes to the string will create a diff, even if the JSON itself hasn't
     * changed. If the API returns a different value for the same schema, e.g. it switche
     * d the order of values or replaced STRUCT field type with RECORD field type, we currently
     * cannot suppress the recurring diff this causes. As a workaround, we recommend using
     * the schema as returned by the API.
     */
    returnType?: pulumi.Input<string>;
    /**
     * The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
     */
    routineId?: pulumi.Input<string>;
    /**
     * The type of routine.
     * Possible values are `SCALAR_FUNCTION` and `PROCEDURE`.
     */
    routineType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Routine resource.
 */
export interface RoutineArgs {
    /**
     * Input/output argument of a function or a stored procedure.
     * Structure is documented below.
     */
    arguments?: pulumi.Input<pulumi.Input<inputs.bigquery.RoutineArgument>[]>;
    /**
     * The ID of the dataset containing this routine
     */
    datasetId: pulumi.Input<string>;
    /**
     * The body of the routine. For functions, this is the expression in the AS clause.
     * If language=SQL, it is the substring inside (but excluding) the parentheses.
     */
    definitionBody: pulumi.Input<string>;
    /**
     * The description of the routine if defined.
     */
    description?: pulumi.Input<string>;
    /**
     * The determinism level of the JavaScript UDF if defined.
     * Possible values are `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, and `NOT_DETERMINISTIC`.
     */
    determinismLevel?: pulumi.Input<string>;
    /**
     * Optional. If language = "JAVASCRIPT", this field stores the path of the
     * imported JAVASCRIPT libraries.
     */
    importedLibraries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The language of the routine.
     * Possible values are `SQL` and `JAVASCRIPT`.
     */
    language?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
     * If absent, the return type is inferred from definitionBody at query time in each query
     * that references this routine. If present, then the evaluated result will be cast to
     * the specified returned type at query time. ~>**NOTE**: Because this field expects a JSON
     * string, any changes to the string will create a diff, even if the JSON itself hasn't
     * changed. If the API returns a different value for the same schema, e.g. it switche
     * d the order of values or replaced STRUCT field type with RECORD field type, we currently
     * cannot suppress the recurring diff this causes. As a workaround, we recommend using
     * the schema as returned by the API.
     */
    returnType?: pulumi.Input<string>;
    /**
     * The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
     */
    routineId: pulumi.Input<string>;
    /**
     * The type of routine.
     * Possible values are `SCALAR_FUNCTION` and `PROCEDURE`.
     */
    routineType?: pulumi.Input<string>;
}
