// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * `Ekm Connections` are used to control the connection settings for an `EXTERNAL_VPC` CryptoKey.
 * It is used to connect customer's external key manager to Google Cloud EKM.
 *
 * > **Note:** Ekm Connections cannot be deleted from Google Cloud Platform.
 *
 * To get more information about EkmConnection, see:
 *
 * * [API documentation](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.ekmConnections)
 * * How-to Guides
 *     * [Creating a Ekm Connection](https://cloud.google.com/kms/docs/create-ekm-connection)
 *
 * ## Example Usage
 *
 * ### Kms Ekm Connection Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const example_ekmconnection = new gcp.kms.EkmConnection("example-ekmconnection", {
 *     name: "ekmconnection_example",
 *     location: "us-central1",
 *     keyManagementMode: "MANUAL",
 *     serviceResolvers: [{
 *         serviceDirectoryService: "projects/project_id/locations/us-central1/namespaces/namespace_name/services/service_name",
 *         hostname: "example-ekm.goog",
 *         serverCertificates: [{
 *             rawDer: "==HAwIBCCAr6gAwIBAgIUWR+EV4lqiV7Ql12VY==",
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * EkmConnection can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/ekmConnections/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, EkmConnection can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:kms/ekmConnection:EkmConnection default projects/{{project}}/locations/{{location}}/ekmConnections/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:kms/ekmConnection:EkmConnection default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:kms/ekmConnection:EkmConnection default {{location}}/{{name}}
 * ```
 */
export class EkmConnection extends pulumi.CustomResource {
    /**
     * Get an existing EkmConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EkmConnectionState, opts?: pulumi.CustomResourceOptions): EkmConnection {
        return new EkmConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:kms/ekmConnection:EkmConnection';

    /**
     * Returns true if the given object is an instance of EkmConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EkmConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EkmConnection.__pulumiType;
    }

    /**
     * Output only. The time at which the EkmConnection was created.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if
     * KeyManagementMode is CLOUD_KMS.
     */
    public readonly cryptoSpacePath!: pulumi.Output<string>;
    /**
     * Optional. Etag of the currently stored EkmConnection.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL Default
     * value: "MANUAL" Possible values: ["MANUAL", "CLOUD_KMS"]
     */
    public readonly keyManagementMode!: pulumi.Output<string | undefined>;
    /**
     * The location for the EkmConnection.
     * A full list of valid locations can be found by running `gcloud kms locations list`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name for the EkmConnection.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
     * Structure is documented below.
     */
    public readonly serviceResolvers!: pulumi.Output<outputs.kms.EkmConnectionServiceResolver[]>;

    /**
     * Create a EkmConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EkmConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EkmConnectionArgs | EkmConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EkmConnectionState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["cryptoSpacePath"] = state ? state.cryptoSpacePath : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["keyManagementMode"] = state ? state.keyManagementMode : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceResolvers"] = state ? state.serviceResolvers : undefined;
        } else {
            const args = argsOrState as EkmConnectionArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.serviceResolvers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceResolvers'");
            }
            resourceInputs["cryptoSpacePath"] = args ? args.cryptoSpacePath : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["keyManagementMode"] = args ? args.keyManagementMode : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceResolvers"] = args ? args.serviceResolvers : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EkmConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EkmConnection resources.
 */
export interface EkmConnectionState {
    /**
     * Output only. The time at which the EkmConnection was created.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if
     * KeyManagementMode is CLOUD_KMS.
     */
    cryptoSpacePath?: pulumi.Input<string>;
    /**
     * Optional. Etag of the currently stored EkmConnection.
     */
    etag?: pulumi.Input<string>;
    /**
     * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL Default
     * value: "MANUAL" Possible values: ["MANUAL", "CLOUD_KMS"]
     */
    keyManagementMode?: pulumi.Input<string>;
    /**
     * The location for the EkmConnection.
     * A full list of valid locations can be found by running `gcloud kms locations list`.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name for the EkmConnection.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
     * Structure is documented below.
     */
    serviceResolvers?: pulumi.Input<pulumi.Input<inputs.kms.EkmConnectionServiceResolver>[]>;
}

/**
 * The set of arguments for constructing a EkmConnection resource.
 */
export interface EkmConnectionArgs {
    /**
     * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if
     * KeyManagementMode is CLOUD_KMS.
     */
    cryptoSpacePath?: pulumi.Input<string>;
    /**
     * Optional. Etag of the currently stored EkmConnection.
     */
    etag?: pulumi.Input<string>;
    /**
     * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL Default
     * value: "MANUAL" Possible values: ["MANUAL", "CLOUD_KMS"]
     */
    keyManagementMode?: pulumi.Input<string>;
    /**
     * The location for the EkmConnection.
     * A full list of valid locations can be found by running `gcloud kms locations list`.
     */
    location: pulumi.Input<string>;
    /**
     * The resource name for the EkmConnection.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
     * Structure is documented below.
     */
    serviceResolvers: pulumi.Input<pulumi.Input<inputs.kms.EkmConnectionServiceResolver>[]>;
}
