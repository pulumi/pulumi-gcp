// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * @deprecated gcp.kms.Registry has been deprecated in favor of gcp.iot.Registry
 */
export class Registry extends pulumi.CustomResource {
    /**
     * Get an existing Registry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryState, opts?: pulumi.CustomResourceOptions): Registry {
        pulumi.log.warn("Registry is deprecated: gcp.kms.Registry has been deprecated in favor of gcp.iot.Registry")
        return new Registry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:kms/registry:Registry';

    /**
     * Returns true if the given object is an instance of Registry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Registry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Registry.__pulumiType;
    }

    /**
     * List of public key certificates to authenticate devices.
     */
    public readonly credentials!: pulumi.Output<outputs.kms.RegistryCredential[] | undefined>;
    /**
     * List of configurations for event notifications, such as PubSub topics to publish device events to.
     */
    public readonly eventNotificationConfigs!: pulumi.Output<outputs.kms.RegistryEventNotificationConfigItem[]>;
    /**
     * Activate or deactivate HTTP.
     */
    public readonly httpConfig!: pulumi.Output<{[key: string]: any}>;
    /**
     * The default logging verbosity for activity from devices in this registry. Specifies which events should be written to
     * logs. For example, if the LogLevel is ERROR, only events that terminate in errors will be logged. LogLevel is inclusive;
     * enabling INFO logging will also enable ERROR logging. Default value: "NONE" Possible values: ["NONE", "ERROR", "INFO",
     * "DEBUG"]
     */
    public readonly logLevel!: pulumi.Output<string | undefined>;
    /**
     * Activate or deactivate MQTT.
     */
    public readonly mqttConfig!: pulumi.Output<{[key: string]: any}>;
    /**
     * A unique name for the resource, required by device registry.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The region in which the created registry should reside. If it is not provided, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * A PubSub topic to publish device state updates.
     */
    public readonly stateNotificationConfig!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a Registry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated gcp.kms.Registry has been deprecated in favor of gcp.iot.Registry */
    constructor(name: string, args?: RegistryArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated gcp.kms.Registry has been deprecated in favor of gcp.iot.Registry */
    constructor(name: string, argsOrState?: RegistryArgs | RegistryState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Registry is deprecated: gcp.kms.Registry has been deprecated in favor of gcp.iot.Registry")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryState | undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["eventNotificationConfigs"] = state ? state.eventNotificationConfigs : undefined;
            resourceInputs["httpConfig"] = state ? state.httpConfig : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["mqttConfig"] = state ? state.mqttConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["stateNotificationConfig"] = state ? state.stateNotificationConfig : undefined;
        } else {
            const args = argsOrState as RegistryArgs | undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["eventNotificationConfigs"] = args ? args.eventNotificationConfigs : undefined;
            resourceInputs["httpConfig"] = args ? args.httpConfig : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["mqttConfig"] = args ? args.mqttConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["stateNotificationConfig"] = args ? args.stateNotificationConfig : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Registry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Registry resources.
 */
export interface RegistryState {
    /**
     * List of public key certificates to authenticate devices.
     */
    credentials?: pulumi.Input<pulumi.Input<inputs.kms.RegistryCredential>[]>;
    /**
     * List of configurations for event notifications, such as PubSub topics to publish device events to.
     */
    eventNotificationConfigs?: pulumi.Input<pulumi.Input<inputs.kms.RegistryEventNotificationConfigItem>[]>;
    /**
     * Activate or deactivate HTTP.
     */
    httpConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * The default logging verbosity for activity from devices in this registry. Specifies which events should be written to
     * logs. For example, if the LogLevel is ERROR, only events that terminate in errors will be logged. LogLevel is inclusive;
     * enabling INFO logging will also enable ERROR logging. Default value: "NONE" Possible values: ["NONE", "ERROR", "INFO",
     * "DEBUG"]
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Activate or deactivate MQTT.
     */
    mqttConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * A unique name for the resource, required by device registry.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The region in which the created registry should reside. If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * A PubSub topic to publish device state updates.
     */
    stateNotificationConfig?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Registry resource.
 */
export interface RegistryArgs {
    /**
     * List of public key certificates to authenticate devices.
     */
    credentials?: pulumi.Input<pulumi.Input<inputs.kms.RegistryCredential>[]>;
    /**
     * List of configurations for event notifications, such as PubSub topics to publish device events to.
     */
    eventNotificationConfigs?: pulumi.Input<pulumi.Input<inputs.kms.RegistryEventNotificationConfigItem>[]>;
    /**
     * Activate or deactivate HTTP.
     */
    httpConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * The default logging verbosity for activity from devices in this registry. Specifies which events should be written to
     * logs. For example, if the LogLevel is ERROR, only events that terminate in errors will be logged. LogLevel is inclusive;
     * enabling INFO logging will also enable ERROR logging. Default value: "NONE" Possible values: ["NONE", "ERROR", "INFO",
     * "DEBUG"]
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Activate or deactivate MQTT.
     */
    mqttConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * A unique name for the resource, required by device registry.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The region in which the created registry should reside. If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * A PubSub topic to publish device state updates.
     */
    stateNotificationConfig?: pulumi.Input<{[key: string]: any}>;
}
