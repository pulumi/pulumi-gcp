// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * A Google Cloud IoT Core device registry.
 *
 * To get more information about DeviceRegistry, see:
 *
 * * [API documentation](https://cloud.google.com/iot/docs/reference/cloudiot/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/iot/docs/)
 *
 * ## Example Usage
 * ### Cloudiot Device Registry Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const test_registry = new gcp.iot.Registry("test-registry", {});
 * ```
 * ### Cloudiot Device Registry Single Event Notification Configs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default_telemetry = new gcp.pubsub.Topic("default-telemetry", {});
 * const test_registry = new gcp.iot.Registry("test-registry", {eventNotificationConfigs: [{
 *     pubsubTopicName: default_telemetry.id,
 *     subfolderMatches: "",
 * }]});
 * ```
 * ### Cloudiot Device Registry Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 *
 * const default_devicestatus = new gcp.pubsub.Topic("default-devicestatus", {});
 * const default_telemetry = new gcp.pubsub.Topic("default-telemetry", {});
 * const additional_telemetry = new gcp.pubsub.Topic("additional-telemetry", {});
 * const test_registry = new gcp.iot.Registry("test-registry", {
 *     eventNotificationConfigs: [
 *         {
 *             pubsubTopicName: additional_telemetry.id,
 *             subfolderMatches: "test/path",
 *         },
 *         {
 *             pubsubTopicName: default_telemetry.id,
 *             subfolderMatches: "",
 *         },
 *     ],
 *     stateNotificationConfig: {
 *         pubsub_topic_name: default_devicestatus.id,
 *     },
 *     mqttConfig: {
 *         mqtt_enabled_state: "MQTT_ENABLED",
 *     },
 *     httpConfig: {
 *         http_enabled_state: "HTTP_ENABLED",
 *     },
 *     logLevel: "INFO",
 *     credentials: [{
 *         publicKeyCertificate: {
 *             format: "X509_CERTIFICATE_PEM",
 *             certificate: fs.readFileSync("test-fixtures/rsa_cert.pem"),
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * DeviceRegistry can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:kms/registry:Registry default {{project}}/locations/{{region}}/registries/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:kms/registry:Registry default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:kms/registry:Registry default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:kms/registry:Registry default {{name}}
 * ```
 *
 * @deprecated gcp.kms.Registry has been deprecated in favor of gcp.iot.Registry
 */
export class Registry extends pulumi.CustomResource {
    /**
     * Get an existing Registry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryState, opts?: pulumi.CustomResourceOptions): Registry {
        pulumi.log.warn("Registry is deprecated: gcp.kms.Registry has been deprecated in favor of gcp.iot.Registry")
        return new Registry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:kms/registry:Registry';

    /**
     * Returns true if the given object is an instance of Registry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Registry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Registry.__pulumiType;
    }

    /**
     * List of public key certificates to authenticate devices.
     * The structure is documented below.
     */
    public readonly credentials!: pulumi.Output<outputs.kms.RegistryCredential[] | undefined>;
    /**
     * List of configurations for event notifications, such as PubSub topics
     * to publish device events to.
     * Structure is documented below.
     */
    public readonly eventNotificationConfigs!: pulumi.Output<outputs.kms.RegistryEventNotificationConfigItem[]>;
    /**
     * Activate or deactivate HTTP.
     * The structure is documented below.
     */
    public readonly httpConfig!: pulumi.Output<{[key: string]: any}>;
    /**
     * The default logging verbosity for activity from devices in this
     * registry. Specifies which events should be written to logs. For
     * example, if the LogLevel is ERROR, only events that terminate in
     * errors will be logged. LogLevel is inclusive; enabling INFO logging
     * will also enable ERROR logging.
     * Default value is `NONE`.
     * Possible values are `NONE`, `ERROR`, `INFO`, and `DEBUG`.
     */
    public readonly logLevel!: pulumi.Output<string | undefined>;
    /**
     * Activate or deactivate MQTT.
     * The structure is documented below.
     */
    public readonly mqttConfig!: pulumi.Output<{[key: string]: any}>;
    /**
     * A unique name for the resource, required by device registry.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The region in which the created registry should reside.
     * If it is not provided, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * A PubSub topic to publish device state updates.
     * The structure is documented below.
     */
    public readonly stateNotificationConfig!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a Registry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated gcp.kms.Registry has been deprecated in favor of gcp.iot.Registry */
    constructor(name: string, args?: RegistryArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated gcp.kms.Registry has been deprecated in favor of gcp.iot.Registry */
    constructor(name: string, argsOrState?: RegistryArgs | RegistryState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Registry is deprecated: gcp.kms.Registry has been deprecated in favor of gcp.iot.Registry")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryState | undefined;
            inputs["credentials"] = state ? state.credentials : undefined;
            inputs["eventNotificationConfigs"] = state ? state.eventNotificationConfigs : undefined;
            inputs["httpConfig"] = state ? state.httpConfig : undefined;
            inputs["logLevel"] = state ? state.logLevel : undefined;
            inputs["mqttConfig"] = state ? state.mqttConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["stateNotificationConfig"] = state ? state.stateNotificationConfig : undefined;
        } else {
            const args = argsOrState as RegistryArgs | undefined;
            inputs["credentials"] = args ? args.credentials : undefined;
            inputs["eventNotificationConfigs"] = args ? args.eventNotificationConfigs : undefined;
            inputs["httpConfig"] = args ? args.httpConfig : undefined;
            inputs["logLevel"] = args ? args.logLevel : undefined;
            inputs["mqttConfig"] = args ? args.mqttConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["stateNotificationConfig"] = args ? args.stateNotificationConfig : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Registry.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Registry resources.
 */
export interface RegistryState {
    /**
     * List of public key certificates to authenticate devices.
     * The structure is documented below.
     */
    readonly credentials?: pulumi.Input<pulumi.Input<inputs.kms.RegistryCredential>[]>;
    /**
     * List of configurations for event notifications, such as PubSub topics
     * to publish device events to.
     * Structure is documented below.
     */
    readonly eventNotificationConfigs?: pulumi.Input<pulumi.Input<inputs.kms.RegistryEventNotificationConfigItem>[]>;
    /**
     * Activate or deactivate HTTP.
     * The structure is documented below.
     */
    readonly httpConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * The default logging verbosity for activity from devices in this
     * registry. Specifies which events should be written to logs. For
     * example, if the LogLevel is ERROR, only events that terminate in
     * errors will be logged. LogLevel is inclusive; enabling INFO logging
     * will also enable ERROR logging.
     * Default value is `NONE`.
     * Possible values are `NONE`, `ERROR`, `INFO`, and `DEBUG`.
     */
    readonly logLevel?: pulumi.Input<string>;
    /**
     * Activate or deactivate MQTT.
     * The structure is documented below.
     */
    readonly mqttConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * A unique name for the resource, required by device registry.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The region in which the created registry should reside.
     * If it is not provided, the provider region is used.
     */
    readonly region?: pulumi.Input<string>;
    /**
     * A PubSub topic to publish device state updates.
     * The structure is documented below.
     */
    readonly stateNotificationConfig?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Registry resource.
 */
export interface RegistryArgs {
    /**
     * List of public key certificates to authenticate devices.
     * The structure is documented below.
     */
    readonly credentials?: pulumi.Input<pulumi.Input<inputs.kms.RegistryCredential>[]>;
    /**
     * List of configurations for event notifications, such as PubSub topics
     * to publish device events to.
     * Structure is documented below.
     */
    readonly eventNotificationConfigs?: pulumi.Input<pulumi.Input<inputs.kms.RegistryEventNotificationConfigItem>[]>;
    /**
     * Activate or deactivate HTTP.
     * The structure is documented below.
     */
    readonly httpConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * The default logging verbosity for activity from devices in this
     * registry. Specifies which events should be written to logs. For
     * example, if the LogLevel is ERROR, only events that terminate in
     * errors will be logged. LogLevel is inclusive; enabling INFO logging
     * will also enable ERROR logging.
     * Default value is `NONE`.
     * Possible values are `NONE`, `ERROR`, `INFO`, and `DEBUG`.
     */
    readonly logLevel?: pulumi.Input<string>;
    /**
     * Activate or deactivate MQTT.
     * The structure is documented below.
     */
    readonly mqttConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * A unique name for the resource, required by device registry.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The region in which the created registry should reside.
     * If it is not provided, the provider region is used.
     */
    readonly region?: pulumi.Input<string>;
    /**
     * A PubSub topic to publish device state updates.
     * The structure is documented below.
     */
    readonly stateNotificationConfig?: pulumi.Input<{[key: string]: any}>;
}
