// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CryptoKeyArgs, CryptoKeyState } from "./cryptoKey";
export type CryptoKey = import("./cryptoKey").CryptoKey;
export const CryptoKey: typeof import("./cryptoKey").CryptoKey = null as any;
utilities.lazyLoad(exports, ["CryptoKey"], () => require("./cryptoKey"));

export { CryptoKeyIAMBindingArgs, CryptoKeyIAMBindingState } from "./cryptoKeyIAMBinding";
export type CryptoKeyIAMBinding = import("./cryptoKeyIAMBinding").CryptoKeyIAMBinding;
export const CryptoKeyIAMBinding: typeof import("./cryptoKeyIAMBinding").CryptoKeyIAMBinding = null as any;
utilities.lazyLoad(exports, ["CryptoKeyIAMBinding"], () => require("./cryptoKeyIAMBinding"));

export { CryptoKeyIAMMemberArgs, CryptoKeyIAMMemberState } from "./cryptoKeyIAMMember";
export type CryptoKeyIAMMember = import("./cryptoKeyIAMMember").CryptoKeyIAMMember;
export const CryptoKeyIAMMember: typeof import("./cryptoKeyIAMMember").CryptoKeyIAMMember = null as any;
utilities.lazyLoad(exports, ["CryptoKeyIAMMember"], () => require("./cryptoKeyIAMMember"));

export { CryptoKeyIAMPolicyArgs, CryptoKeyIAMPolicyState } from "./cryptoKeyIAMPolicy";
export type CryptoKeyIAMPolicy = import("./cryptoKeyIAMPolicy").CryptoKeyIAMPolicy;
export const CryptoKeyIAMPolicy: typeof import("./cryptoKeyIAMPolicy").CryptoKeyIAMPolicy = null as any;
utilities.lazyLoad(exports, ["CryptoKeyIAMPolicy"], () => require("./cryptoKeyIAMPolicy"));

export { GetKMSCryptoKeyArgs, GetKMSCryptoKeyResult, GetKMSCryptoKeyOutputArgs } from "./getKMSCryptoKey";
export const getKMSCryptoKey: typeof import("./getKMSCryptoKey").getKMSCryptoKey = null as any;
export const getKMSCryptoKeyOutput: typeof import("./getKMSCryptoKey").getKMSCryptoKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKMSCryptoKey","getKMSCryptoKeyOutput"], () => require("./getKMSCryptoKey"));

export { GetKMSCryptoKeyVersionArgs, GetKMSCryptoKeyVersionResult, GetKMSCryptoKeyVersionOutputArgs } from "./getKMSCryptoKeyVersion";
export const getKMSCryptoKeyVersion: typeof import("./getKMSCryptoKeyVersion").getKMSCryptoKeyVersion = null as any;
export const getKMSCryptoKeyVersionOutput: typeof import("./getKMSCryptoKeyVersion").getKMSCryptoKeyVersionOutput = null as any;
utilities.lazyLoad(exports, ["getKMSCryptoKeyVersion","getKMSCryptoKeyVersionOutput"], () => require("./getKMSCryptoKeyVersion"));

export { GetKMSKeyRingArgs, GetKMSKeyRingResult, GetKMSKeyRingOutputArgs } from "./getKMSKeyRing";
export const getKMSKeyRing: typeof import("./getKMSKeyRing").getKMSKeyRing = null as any;
export const getKMSKeyRingOutput: typeof import("./getKMSKeyRing").getKMSKeyRingOutput = null as any;
utilities.lazyLoad(exports, ["getKMSKeyRing","getKMSKeyRingOutput"], () => require("./getKMSKeyRing"));

export { GetKMSSecretArgs, GetKMSSecretResult, GetKMSSecretOutputArgs } from "./getKMSSecret";
export const getKMSSecret: typeof import("./getKMSSecret").getKMSSecret = null as any;
export const getKMSSecretOutput: typeof import("./getKMSSecret").getKMSSecretOutput = null as any;
utilities.lazyLoad(exports, ["getKMSSecret","getKMSSecretOutput"], () => require("./getKMSSecret"));

export { GetKMSSecretAsymmetricArgs, GetKMSSecretAsymmetricResult, GetKMSSecretAsymmetricOutputArgs } from "./getKMSSecretAsymmetric";
export const getKMSSecretAsymmetric: typeof import("./getKMSSecretAsymmetric").getKMSSecretAsymmetric = null as any;
export const getKMSSecretAsymmetricOutput: typeof import("./getKMSSecretAsymmetric").getKMSSecretAsymmetricOutput = null as any;
utilities.lazyLoad(exports, ["getKMSSecretAsymmetric","getKMSSecretAsymmetricOutput"], () => require("./getKMSSecretAsymmetric"));

export { GetKMSSecretCiphertextArgs, GetKMSSecretCiphertextResult, GetKMSSecretCiphertextOutputArgs } from "./getKMSSecretCiphertext";
export const getKMSSecretCiphertext: typeof import("./getKMSSecretCiphertext").getKMSSecretCiphertext = null as any;
export const getKMSSecretCiphertextOutput: typeof import("./getKMSSecretCiphertext").getKMSSecretCiphertextOutput = null as any;
utilities.lazyLoad(exports, ["getKMSSecretCiphertext","getKMSSecretCiphertextOutput"], () => require("./getKMSSecretCiphertext"));

export { KeyRingArgs, KeyRingState } from "./keyRing";
export type KeyRing = import("./keyRing").KeyRing;
export const KeyRing: typeof import("./keyRing").KeyRing = null as any;
utilities.lazyLoad(exports, ["KeyRing"], () => require("./keyRing"));

export { KeyRingIAMBindingArgs, KeyRingIAMBindingState } from "./keyRingIAMBinding";
export type KeyRingIAMBinding = import("./keyRingIAMBinding").KeyRingIAMBinding;
export const KeyRingIAMBinding: typeof import("./keyRingIAMBinding").KeyRingIAMBinding = null as any;
utilities.lazyLoad(exports, ["KeyRingIAMBinding"], () => require("./keyRingIAMBinding"));

export { KeyRingIAMMemberArgs, KeyRingIAMMemberState } from "./keyRingIAMMember";
export type KeyRingIAMMember = import("./keyRingIAMMember").KeyRingIAMMember;
export const KeyRingIAMMember: typeof import("./keyRingIAMMember").KeyRingIAMMember = null as any;
utilities.lazyLoad(exports, ["KeyRingIAMMember"], () => require("./keyRingIAMMember"));

export { KeyRingIAMPolicyArgs, KeyRingIAMPolicyState } from "./keyRingIAMPolicy";
export type KeyRingIAMPolicy = import("./keyRingIAMPolicy").KeyRingIAMPolicy;
export const KeyRingIAMPolicy: typeof import("./keyRingIAMPolicy").KeyRingIAMPolicy = null as any;
utilities.lazyLoad(exports, ["KeyRingIAMPolicy"], () => require("./keyRingIAMPolicy"));

export { KeyRingImportJobArgs, KeyRingImportJobState } from "./keyRingImportJob";
export type KeyRingImportJob = import("./keyRingImportJob").KeyRingImportJob;
export const KeyRingImportJob: typeof import("./keyRingImportJob").KeyRingImportJob = null as any;
utilities.lazyLoad(exports, ["KeyRingImportJob"], () => require("./keyRingImportJob"));

export { RegistryArgs, RegistryState } from "./registry";
export type Registry = import("./registry").Registry;
export const Registry: typeof import("./registry").Registry = null as any;
utilities.lazyLoad(exports, ["Registry"], () => require("./registry"));

export { SecretCiphertextArgs, SecretCiphertextState } from "./secretCiphertext";
export type SecretCiphertext = import("./secretCiphertext").SecretCiphertext;
export const SecretCiphertext: typeof import("./secretCiphertext").SecretCiphertext = null as any;
utilities.lazyLoad(exports, ["SecretCiphertext"], () => require("./secretCiphertext"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:kms/cryptoKey:CryptoKey":
                return new CryptoKey(name, <any>undefined, { urn })
            case "gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding":
                return new CryptoKeyIAMBinding(name, <any>undefined, { urn })
            case "gcp:kms/cryptoKeyIAMMember:CryptoKeyIAMMember":
                return new CryptoKeyIAMMember(name, <any>undefined, { urn })
            case "gcp:kms/cryptoKeyIAMPolicy:CryptoKeyIAMPolicy":
                return new CryptoKeyIAMPolicy(name, <any>undefined, { urn })
            case "gcp:kms/keyRing:KeyRing":
                return new KeyRing(name, <any>undefined, { urn })
            case "gcp:kms/keyRingIAMBinding:KeyRingIAMBinding":
                return new KeyRingIAMBinding(name, <any>undefined, { urn })
            case "gcp:kms/keyRingIAMMember:KeyRingIAMMember":
                return new KeyRingIAMMember(name, <any>undefined, { urn })
            case "gcp:kms/keyRingIAMPolicy:KeyRingIAMPolicy":
                return new KeyRingIAMPolicy(name, <any>undefined, { urn })
            case "gcp:kms/keyRingImportJob:KeyRingImportJob":
                return new KeyRingImportJob(name, <any>undefined, { urn })
            case "gcp:kms/registry:Registry":
                return new Registry(name, <any>undefined, { urn })
            case "gcp:kms/secretCiphertext:SecretCiphertext":
                return new SecretCiphertext(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKey", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyIAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyIAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyIAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/keyRing", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingIAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingIAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingIAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingImportJob", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/registry", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/secretCiphertext", _module)
