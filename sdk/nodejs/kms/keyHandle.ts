// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Kms Key Handle Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as time from "@pulumi/time";
 *
 * // Create Folder in GCP Organization
 * const autokmsFolder = new gcp.organizations.Folder("autokms_folder", {
 *     displayName: "folder-example",
 *     parent: "organizations/123456789",
 * });
 * // Create the key project
 * const keyProject = new gcp.organizations.Project("key_project", {
 *     projectId: "key-proj",
 *     name: "key-proj",
 *     folderId: autokmsFolder.folderId,
 *     billingAccount: "000000-0000000-0000000-000000",
 * }, {
 *     dependsOn: [autokmsFolder],
 * });
 * // Create the resource project
 * const resourceProject = new gcp.organizations.Project("resource_project", {
 *     projectId: "resources",
 *     name: "resources",
 *     folderId: autokmsFolder.folderId,
 *     billingAccount: "000000-0000000-0000000-000000",
 * }, {
 *     dependsOn: [autokmsFolder],
 * });
 * // Enable the Cloud KMS API
 * const kmsApiService = new gcp.projects.Service("kms_api_service", {
 *     service: "cloudkms.googleapis.com",
 *     project: keyProject.projectId,
 *     disableOnDestroy: false,
 *     disableDependentServices: true,
 * }, {
 *     dependsOn: [keyProject],
 * });
 * // Wait delay after enabling APIs
 * const waitEnableServiceApi = new time.index.Sleep("wait_enable_service_api", {createDuration: "30s"}, {
 *     dependsOn: [kmsApiService],
 * });
 * //Create KMS Service Agent
 * const kmsServiceAgent = new gcp.projects.ServiceIdentity("kms_service_agent", {
 *     service: "cloudkms.googleapis.com",
 *     project: keyProject.number,
 * }, {
 *     dependsOn: [waitEnableServiceApi],
 * });
 * // Wait delay after creating service agent.
 * const waitServiceAgent = new time.index.Sleep("wait_service_agent", {createDuration: "10s"}, {
 *     dependsOn: [kmsServiceAgent],
 * });
 * //Grant the KMS Service Agent the Cloud KMS Admin role
 * const autokeyProjectAdmin = new gcp.projects.IAMMember("autokey_project_admin", {
 *     project: keyProject.projectId,
 *     role: "roles/cloudkms.admin",
 *     member: pulumi.interpolate`serviceAccount:service-${keyProject.number}@gcp-sa-cloudkms.iam.gserviceaccount.com`,
 * }, {
 *     dependsOn: [waitServiceAgent],
 * });
 * // Wait delay after granting IAM permissions
 * const waitSrvAccPermissions = new time.index.Sleep("wait_srv_acc_permissions", {createDuration: "10s"}, {
 *     dependsOn: [autokeyProjectAdmin],
 * });
 * const autokeyConfig = new gcp.kms.AutokeyConfig("autokey_config", {
 *     folder: autokmsFolder.folderId,
 *     keyProject: pulumi.interpolate`projects/${keyProject.projectId}`,
 * }, {
 *     dependsOn: [waitSrvAccPermissions],
 * });
 * // Wait delay for autokey config to take effect
 * const waitAutokeyConfig = new time.index.Sleep("wait_autokey_config", {createDuration: "10s"}, {
 *     dependsOn: [autokeyConfig],
 * });
 * const example_keyhandle = new gcp.kms.KeyHandle("example-keyhandle", {
 *     project: resourceProject.projectId,
 *     name: "example-key-handle",
 *     location: "global",
 *     resourceTypeSelector: "storage.googleapis.com/Bucket",
 * }, {
 *     dependsOn: [waitAutokeyConfig],
 * });
 * ```
 *
 * ## Import
 *
 * KeyHandle can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/keyHandles/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, KeyHandle can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:kms/keyHandle:KeyHandle default projects/{{project}}/locations/{{location}}/keyHandles/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:kms/keyHandle:KeyHandle default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:kms/keyHandle:KeyHandle default {{location}}/{{name}}
 * ```
 */
export class KeyHandle extends pulumi.CustomResource {
    /**
     * Get an existing KeyHandle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyHandleState, opts?: pulumi.CustomResourceOptions): KeyHandle {
        return new KeyHandle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:kms/keyHandle:KeyHandle';

    /**
     * Returns true if the given object is an instance of KeyHandle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyHandle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyHandle.__pulumiType;
    }

    /**
     * A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
     * product/project/location, for example
     * `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
     */
    public /*out*/ readonly kmsKey!: pulumi.Output<string>;
    /**
     * The location for the KeyHandle.
     * A full list of valid locations can be found by running `gcloud kms locations list`.
     *
     *
     * - - -
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name for the KeyHandle.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Selector of the resource type where we want to protect resources.
     * For example, `storage.googleapis.com/Bucket OR compute.googleapis.com/*`
     */
    public readonly resourceTypeSelector!: pulumi.Output<string>;

    /**
     * Create a KeyHandle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyHandleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyHandleArgs | KeyHandleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyHandleState | undefined;
            resourceInputs["kmsKey"] = state ? state.kmsKey : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["resourceTypeSelector"] = state ? state.resourceTypeSelector : undefined;
        } else {
            const args = argsOrState as KeyHandleArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceTypeSelector === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceTypeSelector'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["resourceTypeSelector"] = args ? args.resourceTypeSelector : undefined;
            resourceInputs["kmsKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyHandle.__pulumiType, name, resourceInputs, opts, false /*remote*/);
    }
}

/**
 * Input properties used for looking up and filtering KeyHandle resources.
 */
export interface KeyHandleState {
    /**
     * A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
     * product/project/location, for example
     * `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
     */
    kmsKey?: pulumi.Input<string>;
    /**
     * The location for the KeyHandle.
     * A full list of valid locations can be found by running `gcloud kms locations list`.
     *
     *
     * - - -
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name for the KeyHandle.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Selector of the resource type where we want to protect resources.
     * For example, `storage.googleapis.com/Bucket OR compute.googleapis.com/*`
     */
    resourceTypeSelector?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeyHandle resource.
 */
export interface KeyHandleArgs {
    /**
     * The location for the KeyHandle.
     * A full list of valid locations can be found by running `gcloud kms locations list`.
     *
     *
     * - - -
     */
    location: pulumi.Input<string>;
    /**
     * The resource name for the KeyHandle.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Selector of the resource type where we want to protect resources.
     * For example, `storage.googleapis.com/Bucket OR compute.googleapis.com/*`
     */
    resourceTypeSelector: pulumi.Input<string>;
}
