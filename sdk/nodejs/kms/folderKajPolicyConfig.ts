// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Kms Folder Kaj Policy Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 * import * as time from "@pulumiverse/time";
 *
 * // Create Folder in GCP Organization.
 * const kajFolder = new gcp.organizations.Folder("kaj_folder", {
 *     displayName: "my-folder",
 *     parent: "organizations/123456789",
 *     deletionProtection: false,
 * });
 * const projectSuffix = new random.RandomId("project_suffix", {byteLength: 4});
 * // Create a project for enabling KMS API.
 * const kmsProject = new gcp.organizations.Project("kms_project", {
 *     projectId: pulumi.interpolate`kms-api-project${projectSuffix.hex}`,
 *     name: pulumi.interpolate`kms-api-project${projectSuffix.hex}`,
 *     folderId: kajFolder.folderId,
 *     billingAccount: "000000-0000000-0000000-000000",
 *     deletionPolicy: "DELETE",
 * }, {
 *     dependsOn: [kajFolder],
 * });
 * // Enable the Cloud KMS API.
 * const kmsApiService = new gcp.projects.Service("kms_api_service", {
 *     service: "cloudkms.googleapis.com",
 *     project: kmsProject.projectId,
 *     disableDependentServices: true,
 * }, {
 *     dependsOn: [kmsProject],
 * });
 * const waitEnableServiceApi = new time.index.Sleep("wait_enable_service_api", {createDuration: "30s"}, {
 *     dependsOn: [kmsApiService],
 * });
 * // Update folder level KAJ default policy
 * const example = new gcp.kms.FolderKajPolicyConfig("example", {
 *     folder: kajFolder.folderId,
 *     defaultKeyAccessJustificationPolicy: {
 *         allowedAccessReasons: [
 *             "CUSTOMER_INITIATED_ACCESS",
 *             "GOOGLE_INITIATED_SYSTEM_OPERATION",
 *         ],
 *     },
 * }, {
 *     dependsOn: [waitEnableServiceApi],
 * });
 * ```
 *
 * ## Import
 *
 * FolderKajPolicyConfig can be imported using any of these accepted formats:
 *
 * * `folders/{{folder}}/kajPolicyConfig`
 *
 * * `{{folder}}`
 *
 * When using the `pulumi import` command, FolderKajPolicyConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:kms/folderKajPolicyConfig:FolderKajPolicyConfig default folders/{{folder}}/kajPolicyConfig
 * ```
 *
 * ```sh
 * $ pulumi import gcp:kms/folderKajPolicyConfig:FolderKajPolicyConfig default {{folder}}
 * ```
 */
export class FolderKajPolicyConfig extends pulumi.CustomResource {
    /**
     * Get an existing FolderKajPolicyConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FolderKajPolicyConfigState, opts?: pulumi.CustomResourceOptions): FolderKajPolicyConfig {
        return new FolderKajPolicyConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:kms/folderKajPolicyConfig:FolderKajPolicyConfig';

    /**
     * Returns true if the given object is an instance of FolderKajPolicyConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FolderKajPolicyConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FolderKajPolicyConfig.__pulumiType;
    }

    /**
     * The default key access justification policy used when a CryptoKey is
     * created in this folder. This is only used when a Key Access Justifications
     * policy is not provided in the CreateCryptoKeyRequest.
     * Structure is documented below.
     */
    declare public readonly defaultKeyAccessJustificationPolicy: pulumi.Output<outputs.kms.FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy | undefined>;
    /**
     * The numeric folder number for which to retrieve config.
     */
    declare public readonly folder: pulumi.Output<string>;

    /**
     * Create a FolderKajPolicyConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FolderKajPolicyConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FolderKajPolicyConfigArgs | FolderKajPolicyConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FolderKajPolicyConfigState | undefined;
            resourceInputs["defaultKeyAccessJustificationPolicy"] = state?.defaultKeyAccessJustificationPolicy;
            resourceInputs["folder"] = state?.folder;
        } else {
            const args = argsOrState as FolderKajPolicyConfigArgs | undefined;
            if (args?.folder === undefined && !opts.urn) {
                throw new Error("Missing required property 'folder'");
            }
            resourceInputs["defaultKeyAccessJustificationPolicy"] = args?.defaultKeyAccessJustificationPolicy;
            resourceInputs["folder"] = args?.folder;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FolderKajPolicyConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FolderKajPolicyConfig resources.
 */
export interface FolderKajPolicyConfigState {
    /**
     * The default key access justification policy used when a CryptoKey is
     * created in this folder. This is only used when a Key Access Justifications
     * policy is not provided in the CreateCryptoKeyRequest.
     * Structure is documented below.
     */
    defaultKeyAccessJustificationPolicy?: pulumi.Input<inputs.kms.FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy>;
    /**
     * The numeric folder number for which to retrieve config.
     */
    folder?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FolderKajPolicyConfig resource.
 */
export interface FolderKajPolicyConfigArgs {
    /**
     * The default key access justification policy used when a CryptoKey is
     * created in this folder. This is only used when a Key Access Justifications
     * policy is not provided in the CreateCryptoKeyRequest.
     * Structure is documented below.
     */
    defaultKeyAccessJustificationPolicy?: pulumi.Input<inputs.kms.FolderKajPolicyConfigDefaultKeyAccessJustificationPolicy>;
    /**
     * The numeric folder number for which to retrieve config.
     */
    folder: pulumi.Input<string>;
}
