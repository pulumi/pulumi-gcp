// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A set of configuration options describing how a workstation will be run. Workstation configurations are intended to be shared across multiple workstations.
 *
 * To get more information about WorkstationConfig, see:
 *
 * * [API documentation](https://cloud.google.com/workstations/docs/reference/rest/v1beta/projects.locations.workstationClusters.workstationConfigs/create)
 * * How-to Guides
 *     * [Workstations](https://cloud.google.com/workstations/docs/)
 *
 * ## Example Usage
 *
 * ### Workstation Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const tagKey1 = new gcp.tags.TagKey("tag_key1", {
 *     parent: "organizations/123456789",
 *     shortName: "keyname",
 * });
 * const tagValue1 = new gcp.tags.TagValue("tag_value1", {
 *     parent: tagKey1.id,
 *     shortName: "valuename",
 * });
 * const _default = new gcp.compute.Network("default", {
 *     name: "workstation-cluster",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "workstation-cluster",
 *     ipCidrRange: "10.0.0.0/24",
 *     region: "us-central1",
 *     network: _default.name,
 * });
 * const defaultWorkstationCluster = new gcp.workstations.WorkstationCluster("default", {
 *     workstationClusterId: "workstation-cluster",
 *     network: _default.id,
 *     subnetwork: defaultSubnetwork.id,
 *     location: "us-central1",
 *     labels: {
 *         label: "key",
 *     },
 *     annotations: {
 *         "label-one": "value-one",
 *     },
 * });
 * const defaultWorkstationConfig = new gcp.workstations.WorkstationConfig("default", {
 *     workstationConfigId: "workstation-config",
 *     workstationClusterId: defaultWorkstationCluster.workstationClusterId,
 *     location: "us-central1",
 *     idleTimeout: "600s",
 *     runningTimeout: "21600s",
 *     replicaZones: [
 *         "us-central1-a",
 *         "us-central1-b",
 *     ],
 *     annotations: {
 *         "label-one": "value-one",
 *     },
 *     labels: {
 *         label: "key",
 *     },
 *     maxUsableWorkstations: 1,
 *     host: {
 *         gceInstance: {
 *             machineType: "e2-standard-4",
 *             bootDiskSizeGb: 35,
 *             disablePublicIpAddresses: true,
 *             disableSsh: false,
 *             vmTags: pulumi.all([tagKey1.id, tagValue1.id]).apply(([tagKey1Id, tagValue1Id]) => {
 *                 [tagKey1Id]: tagValue1Id,
 *             }),
 *         },
 *     },
 * });
 * ```
 * ### Workstation Config Container
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {
 *     name: "workstation-cluster",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "workstation-cluster",
 *     ipCidrRange: "10.0.0.0/24",
 *     region: "us-central1",
 *     network: _default.name,
 * });
 * const defaultWorkstationCluster = new gcp.workstations.WorkstationCluster("default", {
 *     workstationClusterId: "workstation-cluster",
 *     network: _default.id,
 *     subnetwork: defaultSubnetwork.id,
 *     location: "us-central1",
 *     labels: {
 *         label: "key",
 *     },
 *     annotations: {
 *         "label-one": "value-one",
 *     },
 * });
 * const defaultWorkstationConfig = new gcp.workstations.WorkstationConfig("default", {
 *     workstationConfigId: "workstation-config",
 *     workstationClusterId: defaultWorkstationCluster.workstationClusterId,
 *     location: "us-central1",
 *     host: {
 *         gceInstance: {
 *             machineType: "n1-standard-4",
 *             bootDiskSizeGb: 35,
 *             disablePublicIpAddresses: true,
 *             enableNestedVirtualization: true,
 *         },
 *     },
 *     container: {
 *         image: "intellij",
 *         env: {
 *             NAME: "FOO",
 *             BABE: "bar",
 *         },
 *     },
 * });
 * ```
 * ### Workstation Config Persistent Directories
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {
 *     name: "workstation-cluster",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "workstation-cluster",
 *     ipCidrRange: "10.0.0.0/24",
 *     region: "us-central1",
 *     network: _default.name,
 * });
 * const defaultWorkstationCluster = new gcp.workstations.WorkstationCluster("default", {
 *     workstationClusterId: "workstation-cluster",
 *     network: _default.id,
 *     subnetwork: defaultSubnetwork.id,
 *     location: "us-central1",
 *     labels: {
 *         label: "key",
 *     },
 *     annotations: {
 *         "label-one": "value-one",
 *     },
 * });
 * const defaultWorkstationConfig = new gcp.workstations.WorkstationConfig("default", {
 *     workstationConfigId: "workstation-config",
 *     workstationClusterId: defaultWorkstationCluster.workstationClusterId,
 *     location: "us-central1",
 *     host: {
 *         gceInstance: {
 *             machineType: "e2-standard-4",
 *             bootDiskSizeGb: 35,
 *             disablePublicIpAddresses: true,
 *             shieldedInstanceConfig: {
 *                 enableSecureBoot: true,
 *                 enableVtpm: true,
 *             },
 *         },
 *     },
 *     persistentDirectories: [{
 *         mountPath: "/home",
 *         gcePd: {
 *             sizeGb: 200,
 *             fsType: "ext4",
 *             diskType: "pd-standard",
 *             reclaimPolicy: "DELETE",
 *         },
 *     }],
 * });
 * ```
 * ### Workstation Config Source Snapshot
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {
 *     name: "workstation-cluster",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "workstation-cluster",
 *     ipCidrRange: "10.0.0.0/24",
 *     region: "us-central1",
 *     network: _default.name,
 * });
 * const mySourceDisk = new gcp.compute.Disk("my_source_disk", {
 *     name: "workstation-config",
 *     size: 10,
 *     type: "pd-ssd",
 *     zone: "us-central1-a",
 * });
 * const mySourceSnapshot = new gcp.compute.Snapshot("my_source_snapshot", {
 *     name: "workstation-config",
 *     sourceDisk: mySourceDisk.name,
 *     zone: "us-central1-a",
 * });
 * const defaultWorkstationCluster = new gcp.workstations.WorkstationCluster("default", {
 *     workstationClusterId: "workstation-cluster",
 *     network: _default.id,
 *     subnetwork: defaultSubnetwork.id,
 *     location: "us-central1",
 * });
 * const defaultWorkstationConfig = new gcp.workstations.WorkstationConfig("default", {
 *     workstationConfigId: "workstation-config",
 *     workstationClusterId: defaultWorkstationCluster.workstationClusterId,
 *     location: defaultWorkstationCluster.location,
 *     persistentDirectories: [{
 *         mountPath: "/home",
 *         gcePd: {
 *             sourceSnapshot: mySourceSnapshot.id,
 *             reclaimPolicy: "DELETE",
 *         },
 *     }],
 * });
 * ```
 * ### Workstation Config Shielded Instance Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {
 *     name: "workstation-cluster",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "workstation-cluster",
 *     ipCidrRange: "10.0.0.0/24",
 *     region: "us-central1",
 *     network: _default.name,
 * });
 * const defaultWorkstationCluster = new gcp.workstations.WorkstationCluster("default", {
 *     workstationClusterId: "workstation-cluster",
 *     network: _default.id,
 *     subnetwork: defaultSubnetwork.id,
 *     location: "us-central1",
 *     labels: {
 *         label: "key",
 *     },
 *     annotations: {
 *         "label-one": "value-one",
 *     },
 * });
 * const defaultWorkstationConfig = new gcp.workstations.WorkstationConfig("default", {
 *     workstationConfigId: "workstation-config",
 *     workstationClusterId: defaultWorkstationCluster.workstationClusterId,
 *     location: "us-central1",
 *     host: {
 *         gceInstance: {
 *             machineType: "e2-standard-4",
 *             bootDiskSizeGb: 35,
 *             disablePublicIpAddresses: true,
 *             shieldedInstanceConfig: {
 *                 enableSecureBoot: true,
 *                 enableVtpm: true,
 *             },
 *         },
 *     },
 * });
 * ```
 * ### Workstation Config Accelerators
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {
 *     name: "workstation-cluster",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "workstation-cluster",
 *     ipCidrRange: "10.0.0.0/24",
 *     region: "us-central1",
 *     network: _default.name,
 * });
 * const defaultWorkstationCluster = new gcp.workstations.WorkstationCluster("default", {
 *     workstationClusterId: "workstation-cluster",
 *     network: _default.id,
 *     subnetwork: defaultSubnetwork.id,
 *     location: "us-central1",
 *     labels: {
 *         label: "key",
 *     },
 *     annotations: {
 *         "label-one": "value-one",
 *     },
 * });
 * const defaultWorkstationConfig = new gcp.workstations.WorkstationConfig("default", {
 *     workstationConfigId: "workstation-config",
 *     workstationClusterId: defaultWorkstationCluster.workstationClusterId,
 *     location: "us-central1",
 *     host: {
 *         gceInstance: {
 *             machineType: "n1-standard-2",
 *             bootDiskSizeGb: 35,
 *             disablePublicIpAddresses: true,
 *             accelerators: [{
 *                 type: "nvidia-tesla-t4",
 *                 count: 1,
 *             }],
 *         },
 *     },
 * });
 * ```
 * ### Workstation Config Boost
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {
 *     name: "workstation-cluster",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "workstation-cluster",
 *     ipCidrRange: "10.0.0.0/24",
 *     region: "us-central1",
 *     network: _default.name,
 * });
 * const defaultWorkstationCluster = new gcp.workstations.WorkstationCluster("default", {
 *     workstationClusterId: "workstation-cluster",
 *     network: _default.id,
 *     subnetwork: defaultSubnetwork.id,
 *     location: "us-central1",
 *     labels: {
 *         label: "key",
 *     },
 *     annotations: {
 *         "label-one": "value-one",
 *     },
 * });
 * const defaultWorkstationConfig = new gcp.workstations.WorkstationConfig("default", {
 *     workstationConfigId: "workstation-config",
 *     workstationClusterId: defaultWorkstationCluster.workstationClusterId,
 *     location: "us-central1",
 *     host: {
 *         gceInstance: {
 *             machineType: "e2-standard-4",
 *             bootDiskSizeGb: 35,
 *             disablePublicIpAddresses: true,
 *             boostConfigs: [
 *                 {
 *                     id: "boost-1",
 *                     machineType: "n1-standard-2",
 *                     accelerators: [{
 *                         type: "nvidia-tesla-t4",
 *                         count: 1,
 *                     }],
 *                 },
 *                 {
 *                     id: "boost-2",
 *                     machineType: "n1-standard-2",
 *                     poolSize: 2,
 *                     bootDiskSizeGb: 30,
 *                     enableNestedVirtualization: true,
 *                 },
 *             ],
 *         },
 *     },
 * });
 * ```
 * ### Workstation Config Encryption Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {
 *     name: "workstation-cluster",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "workstation-cluster",
 *     ipCidrRange: "10.0.0.0/24",
 *     region: "us-central1",
 *     network: _default.name,
 * });
 * const defaultWorkstationCluster = new gcp.workstations.WorkstationCluster("default", {
 *     workstationClusterId: "workstation-cluster",
 *     network: _default.id,
 *     subnetwork: defaultSubnetwork.id,
 *     location: "us-central1",
 *     labels: {
 *         label: "key",
 *     },
 *     annotations: {
 *         "label-one": "value-one",
 *     },
 * });
 * const defaultKeyRing = new gcp.kms.KeyRing("default", {
 *     name: "workstation-cluster",
 *     location: "us-central1",
 * });
 * const defaultCryptoKey = new gcp.kms.CryptoKey("default", {
 *     name: "workstation-cluster",
 *     keyRing: defaultKeyRing.id,
 * });
 * const defaultAccount = new gcp.serviceaccount.Account("default", {
 *     accountId: "my-account",
 *     displayName: "Service Account",
 * });
 * const defaultWorkstationConfig = new gcp.workstations.WorkstationConfig("default", {
 *     workstationConfigId: "workstation-config",
 *     workstationClusterId: defaultWorkstationCluster.workstationClusterId,
 *     location: "us-central1",
 *     host: {
 *         gceInstance: {
 *             machineType: "e2-standard-4",
 *             bootDiskSizeGb: 35,
 *             disablePublicIpAddresses: true,
 *             shieldedInstanceConfig: {
 *                 enableSecureBoot: true,
 *                 enableVtpm: true,
 *             },
 *         },
 *     },
 *     encryptionKey: {
 *         kmsKey: defaultCryptoKey.id,
 *         kmsKeyServiceAccount: defaultAccount.email,
 *     },
 * });
 * ```
 * ### Workstation Config Allowed Ports
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {
 *     name: "workstation-cluster",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "workstation-cluster",
 *     ipCidrRange: "10.0.0.0/24",
 *     region: "us-central1",
 *     network: _default.name,
 * });
 * const defaultWorkstationCluster = new gcp.workstations.WorkstationCluster("default", {
 *     workstationClusterId: "workstation-cluster",
 *     network: _default.id,
 *     subnetwork: defaultSubnetwork.id,
 *     location: "us-central1",
 *     labels: {
 *         label: "key",
 *     },
 *     annotations: {
 *         "label-one": "value-one",
 *     },
 * });
 * const defaultWorkstationConfig = new gcp.workstations.WorkstationConfig("default", {
 *     workstationConfigId: "workstation-config",
 *     workstationClusterId: defaultWorkstationCluster.workstationClusterId,
 *     location: "us-central1",
 *     host: {
 *         gceInstance: {
 *             machineType: "e2-standard-4",
 *             bootDiskSizeGb: 35,
 *             disablePublicIpAddresses: true,
 *         },
 *     },
 *     allowedPorts: [
 *         {
 *             first: 80,
 *             last: 80,
 *         },
 *         {
 *             first: 22,
 *             last: 22,
 *         },
 *         {
 *             first: 1024,
 *             last: 65535,
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * WorkstationConfig can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}`
 *
 * * `{{project}}/{{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}`
 *
 * * `{{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}`
 *
 * When using the `pulumi import` command, WorkstationConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:workstations/workstationConfig:WorkstationConfig default projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:workstations/workstationConfig:WorkstationConfig default {{project}}/{{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:workstations/workstationConfig:WorkstationConfig default {{location}}/{{workstation_cluster_id}}/{{workstation_config_id}}
 * ```
 */
export class WorkstationConfig extends pulumi.CustomResource {
    /**
     * Get an existing WorkstationConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkstationConfigState, opts?: pulumi.CustomResourceOptions): WorkstationConfig {
        return new WorkstationConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:workstations/workstationConfig:WorkstationConfig';

    /**
     * Returns true if the given object is an instance of WorkstationConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkstationConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkstationConfig.__pulumiType;
    }

    /**
     * A list of port ranges specifying single ports or ranges of ports that are externally accessible in the workstation. Allowed ports must be one of 22, 80, or within range 1024-65535. If not specified defaults to ports 22, 80, and ports 1024-65535.
     * Structure is documented below.
     */
    declare public readonly allowedPorts: pulumi.Output<outputs.workstations.WorkstationConfigAllowedPort[]>;
    /**
     * Client-specified annotations. This is distinct from labels.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Status conditions describing the current resource state.
     * Structure is documented below.
     */
    declare public /*out*/ readonly conditions: pulumi.Output<outputs.workstations.WorkstationConfigCondition[]>;
    /**
     * Container that will be run for each workstation using this configuration when that workstation is started.
     * Structure is documented below.
     */
    declare public readonly container: pulumi.Output<outputs.workstations.WorkstationConfigContainer>;
    /**
     * Time when this resource was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the conditions field.
     */
    declare public /*out*/ readonly degraded: pulumi.Output<boolean>;
    /**
     * Disables support for plain TCP connections in the workstation. By default the service supports TCP connections via a websocket relay. Setting this option to true disables that relay, which prevents the usage of services that require plain tcp connections, such as ssh. When enabled, all communication must occur over https or wss.
     */
    declare public readonly disableTcpConnections: pulumi.Output<boolean | undefined>;
    /**
     * Human-readable name for this resource.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly effectiveAnnotations: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Whether to enable Linux `auditd` logging on the workstation. When enabled, a service account must also be specified that has `logging.buckets.write` permission on the project. Operating system audit logging is distinct from Cloud Audit Logs.
     */
    declare public readonly enableAuditAgent: pulumi.Output<boolean | undefined>;
    /**
     * Encrypts resources of this workstation configuration using a customer-managed encryption key.
     * If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
     * If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
     * If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
     * Structure is documented below.
     */
    declare public readonly encryptionKey: pulumi.Output<outputs.workstations.WorkstationConfigEncryptionKey | undefined>;
    /**
     * Ephemeral directories which won't persist across workstation sessions.
     * Structure is documented below.
     */
    declare public readonly ephemeralDirectories: pulumi.Output<outputs.workstations.WorkstationConfigEphemeralDirectory[]>;
    /**
     * Checksum computed by the server.
     * May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
     */
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    /**
     * Runtime host for a workstation.
     * Structure is documented below.
     */
    declare public readonly host: pulumi.Output<outputs.workstations.WorkstationConfigHost>;
    /**
     * How long to wait before automatically stopping an instance that hasn't recently received any user traffic. A value of 0 indicates that this instance should never time out from idleness. Defaults to 20 minutes.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     */
    declare public readonly idleTimeout: pulumi.Output<string | undefined>;
    /**
     * Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location where the workstation cluster config should reside.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Maximum number of workstations under this configuration a user can have workstations.workstation.use permission on. Only enforced on CreateWorkstation API calls on the user issuing the API request.
     */
    declare public readonly maxUsableWorkstations: pulumi.Output<number>;
    /**
     * Full name of this resource.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Directories to persist across workstation sessions.
     * Structure is documented below.
     */
    declare public readonly persistentDirectories: pulumi.Output<outputs.workstations.WorkstationConfigPersistentDirectory[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Readiness checks to be performed on a workstation.
     * Structure is documented below.
     */
    declare public readonly readinessChecks: pulumi.Output<outputs.workstations.WorkstationConfigReadinessCheck[] | undefined>;
    /**
     * Specifies the zones used to replicate the VM and disk resources within the region. If set, exactly two zones within the workstation cluster's region must be specified—for example, `['us-central1-a', 'us-central1-f']`.
     * If this field is empty, two default zones within the region are used. Immutable after the workstation configuration is created.
     */
    declare public readonly replicaZones: pulumi.Output<string[]>;
    /**
     * How long to wait before automatically stopping a workstation after it was started. A value of 0 indicates that workstations using this configuration should never time out from running duration. Must be greater than 0 and less than 24 hours if `encryptionKey` is set. Defaults to 12 hours.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     */
    declare public readonly runningTimeout: pulumi.Output<string | undefined>;
    /**
     * The system-generated UID of the resource.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * The ID of the parent workstation cluster.
     */
    declare public readonly workstationClusterId: pulumi.Output<string>;
    /**
     * The ID to be assigned to the workstation cluster config.
     */
    declare public readonly workstationConfigId: pulumi.Output<string>;

    /**
     * Create a WorkstationConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkstationConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkstationConfigArgs | WorkstationConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkstationConfigState | undefined;
            resourceInputs["allowedPorts"] = state?.allowedPorts;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["conditions"] = state?.conditions;
            resourceInputs["container"] = state?.container;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["degraded"] = state?.degraded;
            resourceInputs["disableTcpConnections"] = state?.disableTcpConnections;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["effectiveAnnotations"] = state?.effectiveAnnotations;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["enableAuditAgent"] = state?.enableAuditAgent;
            resourceInputs["encryptionKey"] = state?.encryptionKey;
            resourceInputs["ephemeralDirectories"] = state?.ephemeralDirectories;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["host"] = state?.host;
            resourceInputs["idleTimeout"] = state?.idleTimeout;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["maxUsableWorkstations"] = state?.maxUsableWorkstations;
            resourceInputs["name"] = state?.name;
            resourceInputs["persistentDirectories"] = state?.persistentDirectories;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["readinessChecks"] = state?.readinessChecks;
            resourceInputs["replicaZones"] = state?.replicaZones;
            resourceInputs["runningTimeout"] = state?.runningTimeout;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["workstationClusterId"] = state?.workstationClusterId;
            resourceInputs["workstationConfigId"] = state?.workstationConfigId;
        } else {
            const args = argsOrState as WorkstationConfigArgs | undefined;
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.workstationClusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workstationClusterId'");
            }
            if (args?.workstationConfigId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workstationConfigId'");
            }
            resourceInputs["allowedPorts"] = args?.allowedPorts;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["container"] = args?.container;
            resourceInputs["disableTcpConnections"] = args?.disableTcpConnections;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["enableAuditAgent"] = args?.enableAuditAgent;
            resourceInputs["encryptionKey"] = args?.encryptionKey;
            resourceInputs["ephemeralDirectories"] = args?.ephemeralDirectories;
            resourceInputs["host"] = args?.host;
            resourceInputs["idleTimeout"] = args?.idleTimeout;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["maxUsableWorkstations"] = args?.maxUsableWorkstations;
            resourceInputs["persistentDirectories"] = args?.persistentDirectories;
            resourceInputs["project"] = args?.project;
            resourceInputs["readinessChecks"] = args?.readinessChecks;
            resourceInputs["replicaZones"] = args?.replicaZones;
            resourceInputs["runningTimeout"] = args?.runningTimeout;
            resourceInputs["workstationClusterId"] = args?.workstationClusterId;
            resourceInputs["workstationConfigId"] = args?.workstationConfigId;
            resourceInputs["conditions"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["degraded"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WorkstationConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkstationConfig resources.
 */
export interface WorkstationConfigState {
    /**
     * A list of port ranges specifying single ports or ranges of ports that are externally accessible in the workstation. Allowed ports must be one of 22, 80, or within range 1024-65535. If not specified defaults to ports 22, 80, and ports 1024-65535.
     * Structure is documented below.
     */
    allowedPorts?: pulumi.Input<pulumi.Input<inputs.workstations.WorkstationConfigAllowedPort>[]>;
    /**
     * Client-specified annotations. This is distinct from labels.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Status conditions describing the current resource state.
     * Structure is documented below.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.workstations.WorkstationConfigCondition>[]>;
    /**
     * Container that will be run for each workstation using this configuration when that workstation is started.
     * Structure is documented below.
     */
    container?: pulumi.Input<inputs.workstations.WorkstationConfigContainer>;
    /**
     * Time when this resource was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the conditions field.
     */
    degraded?: pulumi.Input<boolean>;
    /**
     * Disables support for plain TCP connections in the workstation. By default the service supports TCP connections via a websocket relay. Setting this option to true disables that relay, which prevents the usage of services that require plain tcp connections, such as ssh. When enabled, all communication must occur over https or wss.
     */
    disableTcpConnections?: pulumi.Input<boolean>;
    /**
     * Human-readable name for this resource.
     */
    displayName?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether to enable Linux `auditd` logging on the workstation. When enabled, a service account must also be specified that has `logging.buckets.write` permission on the project. Operating system audit logging is distinct from Cloud Audit Logs.
     */
    enableAuditAgent?: pulumi.Input<boolean>;
    /**
     * Encrypts resources of this workstation configuration using a customer-managed encryption key.
     * If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
     * If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
     * If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
     * Structure is documented below.
     */
    encryptionKey?: pulumi.Input<inputs.workstations.WorkstationConfigEncryptionKey>;
    /**
     * Ephemeral directories which won't persist across workstation sessions.
     * Structure is documented below.
     */
    ephemeralDirectories?: pulumi.Input<pulumi.Input<inputs.workstations.WorkstationConfigEphemeralDirectory>[]>;
    /**
     * Checksum computed by the server.
     * May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * Runtime host for a workstation.
     * Structure is documented below.
     */
    host?: pulumi.Input<inputs.workstations.WorkstationConfigHost>;
    /**
     * How long to wait before automatically stopping an instance that hasn't recently received any user traffic. A value of 0 indicates that this instance should never time out from idleness. Defaults to 20 minutes.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     */
    idleTimeout?: pulumi.Input<string>;
    /**
     * Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location where the workstation cluster config should reside.
     */
    location?: pulumi.Input<string>;
    /**
     * Maximum number of workstations under this configuration a user can have workstations.workstation.use permission on. Only enforced on CreateWorkstation API calls on the user issuing the API request.
     */
    maxUsableWorkstations?: pulumi.Input<number>;
    /**
     * Full name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Directories to persist across workstation sessions.
     * Structure is documented below.
     */
    persistentDirectories?: pulumi.Input<pulumi.Input<inputs.workstations.WorkstationConfigPersistentDirectory>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Readiness checks to be performed on a workstation.
     * Structure is documented below.
     */
    readinessChecks?: pulumi.Input<pulumi.Input<inputs.workstations.WorkstationConfigReadinessCheck>[]>;
    /**
     * Specifies the zones used to replicate the VM and disk resources within the region. If set, exactly two zones within the workstation cluster's region must be specified—for example, `['us-central1-a', 'us-central1-f']`.
     * If this field is empty, two default zones within the region are used. Immutable after the workstation configuration is created.
     */
    replicaZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How long to wait before automatically stopping a workstation after it was started. A value of 0 indicates that workstations using this configuration should never time out from running duration. Must be greater than 0 and less than 24 hours if `encryptionKey` is set. Defaults to 12 hours.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     */
    runningTimeout?: pulumi.Input<string>;
    /**
     * The system-generated UID of the resource.
     */
    uid?: pulumi.Input<string>;
    /**
     * The ID of the parent workstation cluster.
     */
    workstationClusterId?: pulumi.Input<string>;
    /**
     * The ID to be assigned to the workstation cluster config.
     */
    workstationConfigId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkstationConfig resource.
 */
export interface WorkstationConfigArgs {
    /**
     * A list of port ranges specifying single ports or ranges of ports that are externally accessible in the workstation. Allowed ports must be one of 22, 80, or within range 1024-65535. If not specified defaults to ports 22, 80, and ports 1024-65535.
     * Structure is documented below.
     */
    allowedPorts?: pulumi.Input<pulumi.Input<inputs.workstations.WorkstationConfigAllowedPort>[]>;
    /**
     * Client-specified annotations. This is distinct from labels.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Container that will be run for each workstation using this configuration when that workstation is started.
     * Structure is documented below.
     */
    container?: pulumi.Input<inputs.workstations.WorkstationConfigContainer>;
    /**
     * Disables support for plain TCP connections in the workstation. By default the service supports TCP connections via a websocket relay. Setting this option to true disables that relay, which prevents the usage of services that require plain tcp connections, such as ssh. When enabled, all communication must occur over https or wss.
     */
    disableTcpConnections?: pulumi.Input<boolean>;
    /**
     * Human-readable name for this resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Whether to enable Linux `auditd` logging on the workstation. When enabled, a service account must also be specified that has `logging.buckets.write` permission on the project. Operating system audit logging is distinct from Cloud Audit Logs.
     */
    enableAuditAgent?: pulumi.Input<boolean>;
    /**
     * Encrypts resources of this workstation configuration using a customer-managed encryption key.
     * If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
     * If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
     * If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
     * Structure is documented below.
     */
    encryptionKey?: pulumi.Input<inputs.workstations.WorkstationConfigEncryptionKey>;
    /**
     * Ephemeral directories which won't persist across workstation sessions.
     * Structure is documented below.
     */
    ephemeralDirectories?: pulumi.Input<pulumi.Input<inputs.workstations.WorkstationConfigEphemeralDirectory>[]>;
    /**
     * Runtime host for a workstation.
     * Structure is documented below.
     */
    host?: pulumi.Input<inputs.workstations.WorkstationConfigHost>;
    /**
     * How long to wait before automatically stopping an instance that hasn't recently received any user traffic. A value of 0 indicates that this instance should never time out from idleness. Defaults to 20 minutes.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     */
    idleTimeout?: pulumi.Input<string>;
    /**
     * Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location where the workstation cluster config should reside.
     */
    location: pulumi.Input<string>;
    /**
     * Maximum number of workstations under this configuration a user can have workstations.workstation.use permission on. Only enforced on CreateWorkstation API calls on the user issuing the API request.
     */
    maxUsableWorkstations?: pulumi.Input<number>;
    /**
     * Directories to persist across workstation sessions.
     * Structure is documented below.
     */
    persistentDirectories?: pulumi.Input<pulumi.Input<inputs.workstations.WorkstationConfigPersistentDirectory>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Readiness checks to be performed on a workstation.
     * Structure is documented below.
     */
    readinessChecks?: pulumi.Input<pulumi.Input<inputs.workstations.WorkstationConfigReadinessCheck>[]>;
    /**
     * Specifies the zones used to replicate the VM and disk resources within the region. If set, exactly two zones within the workstation cluster's region must be specified—for example, `['us-central1-a', 'us-central1-f']`.
     * If this field is empty, two default zones within the region are used. Immutable after the workstation configuration is created.
     */
    replicaZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How long to wait before automatically stopping a workstation after it was started. A value of 0 indicates that workstations using this configuration should never time out from running duration. Must be greater than 0 and less than 24 hours if `encryptionKey` is set. Defaults to 12 hours.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     */
    runningTimeout?: pulumi.Input<string>;
    /**
     * The ID of the parent workstation cluster.
     */
    workstationClusterId: pulumi.Input<string>;
    /**
     * The ID to be assigned to the workstation cluster config.
     */
    workstationConfigId: pulumi.Input<string>;
}
