// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A `Template` is a resource of Model Armor that lets you configure how Model Armor screens prompts and responses.
 * It functions as sets of customized filters and thresholds for different safety and security confidence levels, allowing control over what content is flagged.
 *
 * ## Example Usage
 *
 * ### Modelarmor Template Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const template_basic = new gcp.modelarmor.Template("template-basic", {
 *     location: "<no value>",
 *     templateId: "<no value>",
 *     filterConfig: {},
 *     templateMetadata: {},
 * });
 * ```
 * ## Import
 *
 * Template can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/templates/{{template_id}}`
 *
 * * `{{project}}/{{location}}/{{template_id}}`
 *
 * * `{{location}}/{{template_id}}`
 *
 * When using the `pulumi import` command, Template can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:modelarmor/template:Template default projects/{{project}}/locations/{{location}}/templates/{{template_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:modelarmor/template:Template default {{project}}/{{location}}/{{template_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:modelarmor/template:Template default {{location}}/{{template_id}}
 * ```
 */
export class Template extends pulumi.CustomResource {
    /**
     * Get an existing Template resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TemplateState, opts?: pulumi.CustomResourceOptions): Template {
        return new Template(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:modelarmor/template:Template';

    /**
     * Returns true if the given object is an instance of Template.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Template {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Template.__pulumiType;
    }

    /**
     * Create time stamp
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Filters configuration.
     * Structure is documented below.
     */
    public readonly filterConfig!: pulumi.Output<outputs.modelarmor.TemplateFilterConfig>;
    /**
     * Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Identifier. name of resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Id of the requesting object
     * If auto-generating Id server-side, remove this field and
     * templateId from the methodSignature of Create RPC
     */
    public readonly templateId!: pulumi.Output<string>;
    /**
     * Message describing TemplateMetadata
     * Structure is documented below.
     */
    public readonly templateMetadata!: pulumi.Output<outputs.modelarmor.TemplateTemplateMetadata | undefined>;
    /**
     * Update time stamp
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Template resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TemplateArgs | TemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TemplateState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["filterConfig"] = state ? state.filterConfig : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["templateMetadata"] = state ? state.templateMetadata : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as TemplateArgs | undefined;
            if ((!args || args.filterConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterConfig'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.templateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            resourceInputs["filterConfig"] = args ? args.filterConfig : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["templateMetadata"] = args ? args.templateMetadata : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Template.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Template resources.
 */
export interface TemplateState {
    /**
     * Create time stamp
     */
    createTime?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Filters configuration.
     * Structure is documented below.
     */
    filterConfig?: pulumi.Input<inputs.modelarmor.TemplateFilterConfig>;
    /**
     * Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. name of resource
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Id of the requesting object
     * If auto-generating Id server-side, remove this field and
     * templateId from the methodSignature of Create RPC
     */
    templateId?: pulumi.Input<string>;
    /**
     * Message describing TemplateMetadata
     * Structure is documented below.
     */
    templateMetadata?: pulumi.Input<inputs.modelarmor.TemplateTemplateMetadata>;
    /**
     * Update time stamp
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Template resource.
 */
export interface TemplateArgs {
    /**
     * Filters configuration.
     * Structure is documented below.
     */
    filterConfig: pulumi.Input<inputs.modelarmor.TemplateFilterConfig>;
    /**
     * Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Id of the requesting object
     * If auto-generating Id server-side, remove this field and
     * templateId from the methodSignature of Create RPC
     */
    templateId: pulumi.Input<string>;
    /**
     * Message describing TemplateMetadata
     * Structure is documented below.
     */
    templateMetadata?: pulumi.Input<inputs.modelarmor.TemplateTemplateMetadata>;
}
