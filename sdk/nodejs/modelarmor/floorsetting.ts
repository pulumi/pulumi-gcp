// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Model Armor floor settings define rules that dictate minimum requirements for all Model Armor templates created at a specific point in the Google Cloud resource hierarchy (that is, at an organization, folder, or project level). If there are
 * multiple floor settings that conflict with each other, the settings lower in the resource hierarchy take precedence
 * For more information, checkout https://cloud.google.com/security-command-center/docs/model_armor_floor_settings
 *
 * ## Example Usage
 *
 * ### Modelarmor Floorsetting Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const floorsetting_basic = new gcp.modelarmor.Floorsetting("floorsetting-basic", {
 *     parent: "projects/my-project-name",
 *     location: "global",
 *     filterConfig: {},
 * });
 * ```
 * ### Modelarmor Floorsetting Filter Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const floorsetting_filter_config = new gcp.modelarmor.Floorsetting("floorsetting-filter-config", {
 *     location: "global",
 *     parent: "project/my-project-name",
 *     filterConfig: {
 *         raiSettings: {
 *             raiFilters: [{
 *                 filterType: "DANGEROUS",
 *                 confidenceLevel: "MEDIUM_AND_ABOVE",
 *             }],
 *         },
 *         sdpSettings: {
 *             basicConfig: {
 *                 filterEnforcement: "ENABLED",
 *             },
 *         },
 *         piAndJailbreakFilterSettings: {
 *             filterEnforcement: "ENABLED",
 *             confidenceLevel: "HIGH",
 *         },
 *         maliciousUriFilterSettings: {
 *             filterEnforcement: "ENABLED",
 *         },
 *     },
 *     enableFloorSettingEnforcement: true,
 * });
 * ```
 * ### Modelarmor Floorsetting Ai Platform Metadata
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const floorsetting_integrated_metadata = new gcp.modelarmor.Floorsetting("floorsetting-integrated-metadata", {
 *     location: "global",
 *     parent: "projects/my-project-name",
 *     filterConfig: {},
 *     enableFloorSettingEnforcement: false,
 *     aiPlatformFloorSetting: {
 *         inspectOnly: true,
 *         enableCloudLogging: true,
 *     },
 *     floorSettingMetadata: {
 *         multiLanguageDetection: {
 *             enableMultiLanguageDetection: false,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Floorsetting can be imported using any of these accepted formats:
 *
 * * `{{parent}}/locations/{{location}}/floorSetting`
 *
 * * `{{parent}}/{{location}}`
 *
 * When using the `pulumi import` command, Floorsetting can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:modelarmor/floorsetting:Floorsetting default {{parent}}/locations/{{location}}/floorSetting
 * ```
 *
 * ```sh
 * $ pulumi import gcp:modelarmor/floorsetting:Floorsetting default {{parent}}/{{location}}
 * ```
 */
export class Floorsetting extends pulumi.CustomResource {
    /**
     * Get an existing Floorsetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FloorsettingState, opts?: pulumi.CustomResourceOptions): Floorsetting {
        return new Floorsetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:modelarmor/floorsetting:Floorsetting';

    /**
     * Returns true if the given object is an instance of Floorsetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Floorsetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Floorsetting.__pulumiType;
    }

    /**
     * AI Platform floor setting.
     * Structure is documented below.
     */
    public readonly aiPlatformFloorSetting!: pulumi.Output<outputs.modelarmor.FloorsettingAiPlatformFloorSetting | undefined>;
    /**
     * [Output only] Create timestamp
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Floor Settings enforcement status.
     */
    public readonly enableFloorSettingEnforcement!: pulumi.Output<boolean | undefined>;
    /**
     * Filters configuration.
     * Structure is documented below.
     */
    public readonly filterConfig!: pulumi.Output<outputs.modelarmor.FloorsettingFilterConfig>;
    /**
     * Metadata to enable multi language detection via floor setting.
     * Structure is documented below.
     */
    public readonly floorSettingMetadata!: pulumi.Output<outputs.modelarmor.FloorsettingFloorSettingMetadata | undefined>;
    /**
     * List of integrated services for which the floor setting is applicable.
     */
    public readonly integratedServices!: pulumi.Output<string[] | undefined>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Identifier. The resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Will be any one of these:
     * * `projects/{project}`
     * * `folders/{folder}`
     * * `organizations/{organizationId}`
     */
    public readonly parent!: pulumi.Output<string>;
    /**
     * [Output only] Update timestamp
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Floorsetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FloorsettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FloorsettingArgs | FloorsettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FloorsettingState | undefined;
            resourceInputs["aiPlatformFloorSetting"] = state ? state.aiPlatformFloorSetting : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["enableFloorSettingEnforcement"] = state ? state.enableFloorSettingEnforcement : undefined;
            resourceInputs["filterConfig"] = state ? state.filterConfig : undefined;
            resourceInputs["floorSettingMetadata"] = state ? state.floorSettingMetadata : undefined;
            resourceInputs["integratedServices"] = state ? state.integratedServices : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as FloorsettingArgs | undefined;
            if ((!args || args.filterConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterConfig'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            resourceInputs["aiPlatformFloorSetting"] = args ? args.aiPlatformFloorSetting : undefined;
            resourceInputs["enableFloorSettingEnforcement"] = args ? args.enableFloorSettingEnforcement : undefined;
            resourceInputs["filterConfig"] = args ? args.filterConfig : undefined;
            resourceInputs["floorSettingMetadata"] = args ? args.floorSettingMetadata : undefined;
            resourceInputs["integratedServices"] = args ? args.integratedServices : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Floorsetting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Floorsetting resources.
 */
export interface FloorsettingState {
    /**
     * AI Platform floor setting.
     * Structure is documented below.
     */
    aiPlatformFloorSetting?: pulumi.Input<inputs.modelarmor.FloorsettingAiPlatformFloorSetting>;
    /**
     * [Output only] Create timestamp
     */
    createTime?: pulumi.Input<string>;
    /**
     * Floor Settings enforcement status.
     */
    enableFloorSettingEnforcement?: pulumi.Input<boolean>;
    /**
     * Filters configuration.
     * Structure is documented below.
     */
    filterConfig?: pulumi.Input<inputs.modelarmor.FloorsettingFilterConfig>;
    /**
     * Metadata to enable multi language detection via floor setting.
     * Structure is documented below.
     */
    floorSettingMetadata?: pulumi.Input<inputs.modelarmor.FloorsettingFloorSettingMetadata>;
    /**
     * List of integrated services for which the floor setting is applicable.
     */
    integratedServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Will be any one of these:
     * * `projects/{project}`
     * * `folders/{folder}`
     * * `organizations/{organizationId}`
     */
    parent?: pulumi.Input<string>;
    /**
     * [Output only] Update timestamp
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Floorsetting resource.
 */
export interface FloorsettingArgs {
    /**
     * AI Platform floor setting.
     * Structure is documented below.
     */
    aiPlatformFloorSetting?: pulumi.Input<inputs.modelarmor.FloorsettingAiPlatformFloorSetting>;
    /**
     * Floor Settings enforcement status.
     */
    enableFloorSettingEnforcement?: pulumi.Input<boolean>;
    /**
     * Filters configuration.
     * Structure is documented below.
     */
    filterConfig: pulumi.Input<inputs.modelarmor.FloorsettingFilterConfig>;
    /**
     * Metadata to enable multi language detection via floor setting.
     * Structure is documented below.
     */
    floorSettingMetadata?: pulumi.Input<inputs.modelarmor.FloorsettingFloorSettingMetadata>;
    /**
     * List of integrated services for which the floor setting is applicable.
     */
    integratedServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location: pulumi.Input<string>;
    /**
     * Will be any one of these:
     * * `projects/{project}`
     * * `folders/{folder}`
     * * `organizations/{organizationId}`
     */
    parent: pulumi.Input<string>;
}
