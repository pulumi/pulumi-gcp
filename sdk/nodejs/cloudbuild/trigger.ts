// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Configuration for an automated build in response to source repository changes.
 * 
 * 
 * To get more information about Trigger, see:
 * 
 * * [API documentation](https://cloud.google.com/cloud-build/docs/api/reference/rest/)
 * * How-to Guides
 *     * [Automating builds using build triggers](https://cloud.google.com/cloud-build/docs/running-builds/automate-builds)
 * 
 * ## Example Usage - Cloudbuild Trigger Filename
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const filename_trigger = new gcp.cloudbuild.Trigger("filename-trigger", {
 *     filename: "cloudbuild.yaml",
 *     substitutions: {
 *         _BAZ: "qux",
 *         _FOO: "bar",
 *     },
 *     triggerTemplate: {
 *         branchName: "master",
 *         repoName: "my-repo",
 *     },
 * });
 * ```
 */
export class Trigger extends pulumi.CustomResource {
    /**
     * Get an existing Trigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TriggerState, opts?: pulumi.CustomResourceOptions): Trigger {
        return new Trigger(name, <any>state, { ...opts, id: id });
    }

    public readonly build: pulumi.Output<{ images?: string[], steps?: { args?: string[], dir?: string, entrypoint?: string, envs?: string[], id?: string, name?: string, secretEnvs?: string[], timeout?: string, timing?: string, volumes?: { name?: string, path?: string }[], waitFors?: string[] }[], tags?: string[] } | undefined>;
    public /*out*/ readonly createTime: pulumi.Output<string>;
    public readonly description: pulumi.Output<string | undefined>;
    public readonly disabled: pulumi.Output<boolean | undefined>;
    public readonly filename: pulumi.Output<string | undefined>;
    public readonly ignoredFiles: pulumi.Output<string[] | undefined>;
    public readonly includedFiles: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project: pulumi.Output<string>;
    public readonly substitutions: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly triggerId: pulumi.Output<string>;
    public readonly triggerTemplate: pulumi.Output<{ branchName?: string, commitSha?: string, dir?: string, projectId: string, repoName?: string, tagName?: string } | undefined>;

    /**
     * Create a Trigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TriggerArgs | TriggerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: TriggerState = argsOrState as TriggerState | undefined;
            inputs["build"] = state ? state.build : undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["disabled"] = state ? state.disabled : undefined;
            inputs["filename"] = state ? state.filename : undefined;
            inputs["ignoredFiles"] = state ? state.ignoredFiles : undefined;
            inputs["includedFiles"] = state ? state.includedFiles : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["substitutions"] = state ? state.substitutions : undefined;
            inputs["triggerId"] = state ? state.triggerId : undefined;
            inputs["triggerTemplate"] = state ? state.triggerTemplate : undefined;
        } else {
            const args = argsOrState as TriggerArgs | undefined;
            inputs["build"] = args ? args.build : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["disabled"] = args ? args.disabled : undefined;
            inputs["filename"] = args ? args.filename : undefined;
            inputs["ignoredFiles"] = args ? args.ignoredFiles : undefined;
            inputs["includedFiles"] = args ? args.includedFiles : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["substitutions"] = args ? args.substitutions : undefined;
            inputs["triggerTemplate"] = args ? args.triggerTemplate : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["triggerId"] = undefined /*out*/;
        }
        super("gcp:cloudbuild/trigger:Trigger", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Trigger resources.
 */
export interface TriggerState {
    readonly build?: pulumi.Input<{ images?: pulumi.Input<pulumi.Input<string>[]>, steps?: pulumi.Input<pulumi.Input<{ args?: pulumi.Input<pulumi.Input<string>[]>, dir?: pulumi.Input<string>, entrypoint?: pulumi.Input<string>, envs?: pulumi.Input<pulumi.Input<string>[]>, id?: pulumi.Input<string>, name?: pulumi.Input<string>, secretEnvs?: pulumi.Input<pulumi.Input<string>[]>, timeout?: pulumi.Input<string>, timing?: pulumi.Input<string>, volumes?: pulumi.Input<pulumi.Input<{ name?: pulumi.Input<string>, path?: pulumi.Input<string> }>[]>, waitFors?: pulumi.Input<pulumi.Input<string>[]> }>[]>, tags?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly createTime?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly disabled?: pulumi.Input<boolean>;
    readonly filename?: pulumi.Input<string>;
    readonly ignoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    readonly includedFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    readonly substitutions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly triggerId?: pulumi.Input<string>;
    readonly triggerTemplate?: pulumi.Input<{ branchName?: pulumi.Input<string>, commitSha?: pulumi.Input<string>, dir?: pulumi.Input<string>, projectId?: pulumi.Input<string>, repoName?: pulumi.Input<string>, tagName?: pulumi.Input<string> }>;
}

/**
 * The set of arguments for constructing a Trigger resource.
 */
export interface TriggerArgs {
    readonly build?: pulumi.Input<{ images?: pulumi.Input<pulumi.Input<string>[]>, steps?: pulumi.Input<pulumi.Input<{ args?: pulumi.Input<pulumi.Input<string>[]>, dir?: pulumi.Input<string>, entrypoint?: pulumi.Input<string>, envs?: pulumi.Input<pulumi.Input<string>[]>, id?: pulumi.Input<string>, name?: pulumi.Input<string>, secretEnvs?: pulumi.Input<pulumi.Input<string>[]>, timeout?: pulumi.Input<string>, timing?: pulumi.Input<string>, volumes?: pulumi.Input<pulumi.Input<{ name?: pulumi.Input<string>, path?: pulumi.Input<string> }>[]>, waitFors?: pulumi.Input<pulumi.Input<string>[]> }>[]>, tags?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly description?: pulumi.Input<string>;
    readonly disabled?: pulumi.Input<boolean>;
    readonly filename?: pulumi.Input<string>;
    readonly ignoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    readonly includedFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    readonly substitutions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly triggerTemplate?: pulumi.Input<{ branchName?: pulumi.Input<string>, commitSha?: pulumi.Input<string>, dir?: pulumi.Input<string>, projectId?: pulumi.Input<string>, repoName?: pulumi.Input<string>, tagName?: pulumi.Input<string> }>;
}
