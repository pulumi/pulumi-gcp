// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * To get more information about Cloudbuild Trigger, see:
 *
 * * [API documentation](https://cloud.google.com/build/docs/api/reference/rest/v1/projects.triggers)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/build/docs/automating-builds/create-manage-triggers)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const name = gcp.cloudbuild.getTrigger({
 *     project: "your-project-id",
 *     triggerId: google_cloudbuild_trigger["filename-trigger"].trigger_id,
 *     location: "location of trigger build",
 * });
 * ```
 */
export function getTrigger(args: GetTriggerArgs, opts?: pulumi.InvokeOptions): Promise<GetTriggerResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("gcp:cloudbuild/getTrigger:getTrigger", {
        "location": args.location,
        "project": args.project,
        "triggerId": args.triggerId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTrigger.
 */
export interface GetTriggerArgs {
    /**
     * The Cloud Build location for the trigger.
     */
    location: string;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: string;
    /**
     * The unique identifier for the trigger..
     */
    triggerId: string;
}

/**
 * A collection of values returned by getTrigger.
 */
export interface GetTriggerResult {
    readonly approvalConfigs: outputs.cloudbuild.GetTriggerApprovalConfig[];
    readonly builds: outputs.cloudbuild.GetTriggerBuild[];
    readonly createTime: string;
    readonly description: string;
    readonly disabled: boolean;
    readonly filename: string;
    readonly filter: string;
    readonly gitFileSources: outputs.cloudbuild.GetTriggerGitFileSource[];
    readonly githubs: outputs.cloudbuild.GetTriggerGithub[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ignoredFiles: string[];
    readonly includeBuildLogs: string;
    readonly includedFiles: string[];
    readonly location: string;
    readonly name: string;
    readonly project?: string;
    readonly pubsubConfigs: outputs.cloudbuild.GetTriggerPubsubConfig[];
    readonly serviceAccount: string;
    readonly sourceToBuilds: outputs.cloudbuild.GetTriggerSourceToBuild[];
    readonly substitutions: {[key: string]: string};
    readonly tags: string[];
    readonly triggerId: string;
    readonly triggerTemplates: outputs.cloudbuild.GetTriggerTriggerTemplate[];
    readonly webhookConfigs: outputs.cloudbuild.GetTriggerWebhookConfig[];
}

export function getTriggerOutput(args: GetTriggerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTriggerResult> {
    return pulumi.output(args).apply(a => getTrigger(a, opts))
}

/**
 * A collection of arguments for invoking getTrigger.
 */
export interface GetTriggerOutputArgs {
    /**
     * The Cloud Build location for the trigger.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The unique identifier for the trigger..
     */
    triggerId: pulumi.Input<string>;
}
