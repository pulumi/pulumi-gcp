// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A schema bundle object that can be referenced in SQL queries.
 *
 * To get more information about SchemaBundle, see:
 *
 * * [API documentation](https://cloud.google.com/bigtable/docs/reference/admin/rest/v2/projects.instances.tables.schemaBundles)
 *
 * ## Example Usage
 *
 * ### Bigtable Schema Bundle
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as std from "@pulumi/std";
 *
 * const instance = new gcp.bigtable.Instance("instance", {
 *     name: "bt-instance",
 *     clusters: [{
 *         clusterId: "cluster-1",
 *         zone: "us-east1-b",
 *         numNodes: 1,
 *         storageType: "HDD",
 *     }],
 *     deletionProtection: false,
 * });
 * const table = new gcp.bigtable.Table("table", {
 *     name: "bt-table",
 *     instanceName: instance.name,
 *     columnFamilies: [{
 *         family: "CF",
 *     }],
 * });
 * const schemaBundle = new gcp.bigtable.SchemaBundle("schema_bundle", {
 *     schemaBundleId: "bt-schema-bundle",
 *     instance: instance.name,
 *     table: table.name,
 *     protoSchema: {
 *         protoDescriptors: std.filebase64({
 *             input: "test-fixtures/proto_schema_bundle.pb",
 *         }).then(invoke => invoke.result),
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * SchemaBundle can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/instances/{{instance}}/tables/{{table}}/schemaBundles/{{schema_bundle_id}}`
 *
 * * `{{project}}/{{instance}}/{{table}}/{{schema_bundle_id}}`
 *
 * * `{{instance}}/{{table}}/{{schema_bundle_id}}`
 *
 * When using the `pulumi import` command, SchemaBundle can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:bigtable/schemaBundle:SchemaBundle default projects/{{project}}/instances/{{instance}}/tables/{{table}}/schemaBundles/{{schema_bundle_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:bigtable/schemaBundle:SchemaBundle default {{project}}/{{instance}}/{{table}}/{{schema_bundle_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:bigtable/schemaBundle:SchemaBundle default {{instance}}/{{table}}/{{schema_bundle_id}}
 * ```
 */
export class SchemaBundle extends pulumi.CustomResource {
    /**
     * Get an existing SchemaBundle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaBundleState, opts?: pulumi.CustomResourceOptions): SchemaBundle {
        return new SchemaBundle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:bigtable/schemaBundle:SchemaBundle';

    /**
     * Returns true if the given object is an instance of SchemaBundle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaBundle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaBundle.__pulumiType;
    }

    /**
     * If true, allow backwards incompatible changes.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the instance to create the schema bundle within.
     */
    public readonly instance!: pulumi.Output<string | undefined>;
    /**
     * The unique name of the requested schema bundle. Values are of the form `projects/<project>/instances/<instance>/tables/<table>/schemaBundles/<schemaBundleId>`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * File descriptor set, generated by protoc.
     * To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
     * $ protoc --include_imports --include_source_info test.proto -o out.pb
     * Structure is documented below.
     */
    public readonly protoSchema!: pulumi.Output<outputs.bigtable.SchemaBundleProtoSchema>;
    /**
     * The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     */
    public readonly schemaBundleId!: pulumi.Output<string>;
    /**
     * The name of the table to create the schema bundle within.
     */
    public readonly table!: pulumi.Output<string | undefined>;

    /**
     * Create a SchemaBundle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaBundleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaBundleArgs | SchemaBundleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaBundleState | undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["protoSchema"] = state ? state.protoSchema : undefined;
            resourceInputs["schemaBundleId"] = state ? state.schemaBundleId : undefined;
            resourceInputs["table"] = state ? state.table : undefined;
        } else {
            const args = argsOrState as SchemaBundleArgs | undefined;
            if ((!args || args.protoSchema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protoSchema'");
            }
            if ((!args || args.schemaBundleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaBundleId'");
            }
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["protoSchema"] = args ? args.protoSchema : undefined;
            resourceInputs["schemaBundleId"] = args ? args.schemaBundleId : undefined;
            resourceInputs["table"] = args ? args.table : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaBundle.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SchemaBundle resources.
 */
export interface SchemaBundleState {
    /**
     * If true, allow backwards incompatible changes.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * The name of the instance to create the schema bundle within.
     */
    instance?: pulumi.Input<string>;
    /**
     * The unique name of the requested schema bundle. Values are of the form `projects/<project>/instances/<instance>/tables/<table>/schemaBundles/<schemaBundleId>`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * File descriptor set, generated by protoc.
     * To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
     * $ protoc --include_imports --include_source_info test.proto -o out.pb
     * Structure is documented below.
     */
    protoSchema?: pulumi.Input<inputs.bigtable.SchemaBundleProtoSchema>;
    /**
     * The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     */
    schemaBundleId?: pulumi.Input<string>;
    /**
     * The name of the table to create the schema bundle within.
     */
    table?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaBundle resource.
 */
export interface SchemaBundleArgs {
    /**
     * If true, allow backwards incompatible changes.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * The name of the instance to create the schema bundle within.
     */
    instance?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * File descriptor set, generated by protoc.
     * To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
     * $ protoc --include_imports --include_source_info test.proto -o out.pb
     * Structure is documented below.
     */
    protoSchema: pulumi.Input<inputs.bigtable.SchemaBundleProtoSchema>;
    /**
     * The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     */
    schemaBundleId: pulumi.Input<string>;
    /**
     * The name of the table to create the schema bundle within.
     */
    table?: pulumi.Input<string>;
}
