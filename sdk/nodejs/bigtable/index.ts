// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AppProfileArgs, AppProfileState } from "./appProfile";
export type AppProfile = import("./appProfile").AppProfile;
export const AppProfile: typeof import("./appProfile").AppProfile = null as any;
utilities.lazyLoad(exports, ["AppProfile"], () => require("./appProfile"));

export { AuthorizedViewArgs, AuthorizedViewState } from "./authorizedView";
export type AuthorizedView = import("./authorizedView").AuthorizedView;
export const AuthorizedView: typeof import("./authorizedView").AuthorizedView = null as any;
utilities.lazyLoad(exports, ["AuthorizedView"], () => require("./authorizedView"));

export { GCPolicyArgs, GCPolicyState } from "./gcpolicy";
export type GCPolicy = import("./gcpolicy").GCPolicy;
export const GCPolicy: typeof import("./gcpolicy").GCPolicy = null as any;
utilities.lazyLoad(exports, ["GCPolicy"], () => require("./gcpolicy"));

export { GetInstanceIamPolicyArgs, GetInstanceIamPolicyResult, GetInstanceIamPolicyOutputArgs } from "./getInstanceIamPolicy";
export const getInstanceIamPolicy: typeof import("./getInstanceIamPolicy").getInstanceIamPolicy = null as any;
export const getInstanceIamPolicyOutput: typeof import("./getInstanceIamPolicy").getInstanceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceIamPolicy","getInstanceIamPolicyOutput"], () => require("./getInstanceIamPolicy"));

export { GetTableIamPolicyArgs, GetTableIamPolicyResult, GetTableIamPolicyOutputArgs } from "./getTableIamPolicy";
export const getTableIamPolicy: typeof import("./getTableIamPolicy").getTableIamPolicy = null as any;
export const getTableIamPolicyOutput: typeof import("./getTableIamPolicy").getTableIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getTableIamPolicy","getTableIamPolicyOutput"], () => require("./getTableIamPolicy"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceIamBindingArgs, InstanceIamBindingState } from "./instanceIamBinding";
export type InstanceIamBinding = import("./instanceIamBinding").InstanceIamBinding;
export const InstanceIamBinding: typeof import("./instanceIamBinding").InstanceIamBinding = null as any;
utilities.lazyLoad(exports, ["InstanceIamBinding"], () => require("./instanceIamBinding"));

export { InstanceIamMemberArgs, InstanceIamMemberState } from "./instanceIamMember";
export type InstanceIamMember = import("./instanceIamMember").InstanceIamMember;
export const InstanceIamMember: typeof import("./instanceIamMember").InstanceIamMember = null as any;
utilities.lazyLoad(exports, ["InstanceIamMember"], () => require("./instanceIamMember"));

export { InstanceIamPolicyArgs, InstanceIamPolicyState } from "./instanceIamPolicy";
export type InstanceIamPolicy = import("./instanceIamPolicy").InstanceIamPolicy;
export const InstanceIamPolicy: typeof import("./instanceIamPolicy").InstanceIamPolicy = null as any;
utilities.lazyLoad(exports, ["InstanceIamPolicy"], () => require("./instanceIamPolicy"));

export { LogicalViewArgs, LogicalViewState } from "./logicalView";
export type LogicalView = import("./logicalView").LogicalView;
export const LogicalView: typeof import("./logicalView").LogicalView = null as any;
utilities.lazyLoad(exports, ["LogicalView"], () => require("./logicalView"));

export { MaterializedViewArgs, MaterializedViewState } from "./materializedView";
export type MaterializedView = import("./materializedView").MaterializedView;
export const MaterializedView: typeof import("./materializedView").MaterializedView = null as any;
utilities.lazyLoad(exports, ["MaterializedView"], () => require("./materializedView"));

export { TableArgs, TableState } from "./table";
export type Table = import("./table").Table;
export const Table: typeof import("./table").Table = null as any;
utilities.lazyLoad(exports, ["Table"], () => require("./table"));

export { TableIamBindingArgs, TableIamBindingState } from "./tableIamBinding";
export type TableIamBinding = import("./tableIamBinding").TableIamBinding;
export const TableIamBinding: typeof import("./tableIamBinding").TableIamBinding = null as any;
utilities.lazyLoad(exports, ["TableIamBinding"], () => require("./tableIamBinding"));

export { TableIamMemberArgs, TableIamMemberState } from "./tableIamMember";
export type TableIamMember = import("./tableIamMember").TableIamMember;
export const TableIamMember: typeof import("./tableIamMember").TableIamMember = null as any;
utilities.lazyLoad(exports, ["TableIamMember"], () => require("./tableIamMember"));

export { TableIamPolicyArgs, TableIamPolicyState } from "./tableIamPolicy";
export type TableIamPolicy = import("./tableIamPolicy").TableIamPolicy;
export const TableIamPolicy: typeof import("./tableIamPolicy").TableIamPolicy = null as any;
utilities.lazyLoad(exports, ["TableIamPolicy"], () => require("./tableIamPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:bigtable/appProfile:AppProfile":
                return new AppProfile(name, <any>undefined, { urn })
            case "gcp:bigtable/authorizedView:AuthorizedView":
                return new AuthorizedView(name, <any>undefined, { urn })
            case "gcp:bigtable/gCPolicy:GCPolicy":
                return new GCPolicy(name, <any>undefined, { urn })
            case "gcp:bigtable/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "gcp:bigtable/instanceIamBinding:InstanceIamBinding":
                return new InstanceIamBinding(name, <any>undefined, { urn })
            case "gcp:bigtable/instanceIamMember:InstanceIamMember":
                return new InstanceIamMember(name, <any>undefined, { urn })
            case "gcp:bigtable/instanceIamPolicy:InstanceIamPolicy":
                return new InstanceIamPolicy(name, <any>undefined, { urn })
            case "gcp:bigtable/logicalView:LogicalView":
                return new LogicalView(name, <any>undefined, { urn })
            case "gcp:bigtable/materializedView:MaterializedView":
                return new MaterializedView(name, <any>undefined, { urn })
            case "gcp:bigtable/table:Table":
                return new Table(name, <any>undefined, { urn })
            case "gcp:bigtable/tableIamBinding:TableIamBinding":
                return new TableIamBinding(name, <any>undefined, { urn })
            case "gcp:bigtable/tableIamMember:TableIamMember":
                return new TableIamMember(name, <any>undefined, { urn })
            case "gcp:bigtable/tableIamPolicy:TableIamPolicy":
                return new TableIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "bigtable/appProfile", _module)
pulumi.runtime.registerResourceModule("gcp", "bigtable/authorizedView", _module)
pulumi.runtime.registerResourceModule("gcp", "bigtable/gCPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "bigtable/instance", _module)
pulumi.runtime.registerResourceModule("gcp", "bigtable/instanceIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "bigtable/instanceIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "bigtable/instanceIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "bigtable/logicalView", _module)
pulumi.runtime.registerResourceModule("gcp", "bigtable/materializedView", _module)
pulumi.runtime.registerResourceModule("gcp", "bigtable/table", _module)
pulumi.runtime.registerResourceModule("gcp", "bigtable/tableIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "bigtable/tableIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "bigtable/tableIamPolicy", _module)
