// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as std from "@pulumi/std";
 *
 * const instance = new gcp.bigtable.Instance("instance", {
 *     name: "tf-instance",
 *     clusters: [{
 *         clusterId: "tf-instance-cluster",
 *         zone: "us-central1-b",
 *         numNodes: 3,
 *         storageType: "HDD",
 *     }],
 * });
 * const table = new gcp.bigtable.Table("table", {
 *     name: "tf-table",
 *     instanceName: instance.name,
 *     splitKeys: [
 *         "a",
 *         "b",
 *         "c",
 *     ],
 *     columnFamilies: [
 *         {
 *             family: "family-first",
 *         },
 *         {
 *             family: "family-second",
 *         },
 *     ],
 *     changeStreamRetention: "24h0m0s",
 * });
 * const authorizedView = new gcp.bigtable.AuthorizedView("authorized_view", {
 *     name: "tf-authorized-view",
 *     instanceName: instance.name,
 *     tableName: table.name,
 *     subsetView: {
 *         rowPrefixes: [std.base64encode({
 *             input: "prefix#",
 *         }).then(invoke => invoke.result)],
 *         familySubsets: [
 *             {
 *                 familyName: "family-first",
 *                 qualifiers: [
 *                     std.base64encode({
 *                         input: "qualifier",
 *                     }).then(invoke => invoke.result),
 *                     std.base64encode({
 *                         input: "qualifier-second",
 *                     }).then(invoke => invoke.result),
 *                 ],
 *             },
 *             {
 *                 familyName: "family-second",
 *                 qualifierPrefixes: [""],
 *             },
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Bigtable Authorized Views can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/instances/{{instance_name}}/tables/{{table_name}}/authorizedViews/{{name}}`
 *
 * * `{{project}}/{{instance_name}}/{{table_name}}/{{name}}`
 *
 * * `{{instance_name}}/{{table_name}}/{{name}}`
 *
 * When using the `pulumi import` command, Bigtable Authorized Views can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:bigtable/authorizedView:AuthorizedView default projects/{{project}}/instances/{{instance_name}}/tables/{{table_name}}/authorizedViews/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:bigtable/authorizedView:AuthorizedView default {{project}}/{{instance_name}}/{{table_name}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:bigtable/authorizedView:AuthorizedView default {{instance_name}}/{{table_name}}/{{name}}
 * ```
 */
export class AuthorizedView extends pulumi.CustomResource {
    /**
     * Get an existing AuthorizedView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthorizedViewState, opts?: pulumi.CustomResourceOptions): AuthorizedView {
        return new AuthorizedView(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:bigtable/authorizedView:AuthorizedView';

    /**
     * Returns true if the given object is an instance of AuthorizedView.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthorizedView {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthorizedView.__pulumiType;
    }

    public readonly deletionProtection!: pulumi.Output<string>;
    /**
     * The name of the Bigtable instance in which the authorized view belongs.
     */
    public readonly instanceName!: pulumi.Output<string>;
    /**
     * The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * An AuthorizedView permitting access to an explicit subset of a Table. Structure is documented below.
     */
    public readonly subsetView!: pulumi.Output<outputs.bigtable.AuthorizedViewSubsetView | undefined>;
    /**
     * The name of the Bigtable table in which the authorized view belongs.
     */
    public readonly tableName!: pulumi.Output<string>;

    /**
     * Create a AuthorizedView resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthorizedViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthorizedViewArgs | AuthorizedViewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthorizedViewState | undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["subsetView"] = state ? state.subsetView : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
        } else {
            const args = argsOrState as AuthorizedViewArgs | undefined;
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.tableName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableName'");
            }
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["subsetView"] = args ? args.subsetView : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthorizedView.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthorizedView resources.
 */
export interface AuthorizedViewState {
    deletionProtection?: pulumi.Input<string>;
    /**
     * The name of the Bigtable instance in which the authorized view belongs.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * An AuthorizedView permitting access to an explicit subset of a Table. Structure is documented below.
     */
    subsetView?: pulumi.Input<inputs.bigtable.AuthorizedViewSubsetView>;
    /**
     * The name of the Bigtable table in which the authorized view belongs.
     */
    tableName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthorizedView resource.
 */
export interface AuthorizedViewArgs {
    deletionProtection?: pulumi.Input<string>;
    /**
     * The name of the Bigtable instance in which the authorized view belongs.
     */
    instanceName: pulumi.Input<string>;
    /**
     * The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * An AuthorizedView permitting access to an explicit subset of a Table. Structure is documented below.
     */
    subsetView?: pulumi.Input<inputs.bigtable.AuthorizedViewSubsetView>;
    /**
     * The name of the Bigtable table in which the authorized view belongs.
     */
    tableName: pulumi.Input<string>;
}
