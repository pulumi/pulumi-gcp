// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * List all DbServers of a Cloud Exdata Infrastructure.
 *
 * For more information see the
 * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures.dbServers).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myDbServers = gcp.oracledatabase.getDbServers({
 *     location: "us-east4",
 *     cloudExadataInfrastructure: "exadata-id",
 * });
 * ```
 *
 * ## Attributes reference
 *
 * The following attributes are exported:
 *
 * * `dbServers` - List of dbServers. Structure is documented below.
 *
 * <a name="nestedDbservers"></a> The `dbServers` block supports:
 *
 * * `displayName` - User friendly name for the resource.
 *
 * * `properties` - Various properties of the databse server. Structure is documented below.
 *
 * <a name="nestedProperties"></a> The `properties` block supports:
 *
 * * `ocid` - The OCID of database server.
 *
 * * `ocpuCount` - The OCPU count per database.
 *
 * * `maxOcpuCount` - The total number of CPU cores available.
 *
 * * `memorySizeGb` - The allocated memory in gigabytes on the database server.
 *
 * * `maxMemorySizeGb` - The total memory available in gigabytes.
 *
 * * `dbNodeStorageSizeGb` - The local storage per VM.
 *
 * * `maxDbNodeStorageSizeGb` - The total local node storage available in GBs.
 *
 * * `vmCount` - The VM count per database.
 *
 * * `state` - The current state of the database server.
 * <a name="nestedStates"></a>Allowed values for `state` are:<br>
 * `CREATING` - Indicates that the resource is being created.<br>
 * `AVAILABLE` - Indicates that the resource is available.<br>
 * `UNAVAILABLE` - Indicates that the resource is unavailable.<br>
 * `DELETING` - Indicates that the resource is being deleted.<br>
 * `DELETED` - Indicates that the resource has been deleted.<br>
 *
 * * `dbNodeIds` - The OCID of database nodes associated with the database server.
 */
export function getDbServers(args: GetDbServersArgs, opts?: pulumi.InvokeOptions): Promise<GetDbServersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:oracledatabase/getDbServers:getDbServers", {
        "cloudExadataInfrastructure": args.cloudExadataInfrastructure,
        "location": args.location,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getDbServers.
 */
export interface GetDbServersArgs {
    /**
     * The Exadata Infrastructure id.
     */
    cloudExadataInfrastructure: string;
    /**
     * The location of resource.
     */
    location: string;
    /**
     * The project to which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: string;
}

/**
 * A collection of values returned by getDbServers.
 */
export interface GetDbServersResult {
    readonly cloudExadataInfrastructure: string;
    readonly dbServers: outputs.oracledatabase.GetDbServersDbServer[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly location: string;
    readonly project?: string;
}
/**
 * List all DbServers of a Cloud Exdata Infrastructure.
 *
 * For more information see the
 * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures.dbServers).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myDbServers = gcp.oracledatabase.getDbServers({
 *     location: "us-east4",
 *     cloudExadataInfrastructure: "exadata-id",
 * });
 * ```
 *
 * ## Attributes reference
 *
 * The following attributes are exported:
 *
 * * `dbServers` - List of dbServers. Structure is documented below.
 *
 * <a name="nestedDbservers"></a> The `dbServers` block supports:
 *
 * * `displayName` - User friendly name for the resource.
 *
 * * `properties` - Various properties of the databse server. Structure is documented below.
 *
 * <a name="nestedProperties"></a> The `properties` block supports:
 *
 * * `ocid` - The OCID of database server.
 *
 * * `ocpuCount` - The OCPU count per database.
 *
 * * `maxOcpuCount` - The total number of CPU cores available.
 *
 * * `memorySizeGb` - The allocated memory in gigabytes on the database server.
 *
 * * `maxMemorySizeGb` - The total memory available in gigabytes.
 *
 * * `dbNodeStorageSizeGb` - The local storage per VM.
 *
 * * `maxDbNodeStorageSizeGb` - The total local node storage available in GBs.
 *
 * * `vmCount` - The VM count per database.
 *
 * * `state` - The current state of the database server.
 * <a name="nestedStates"></a>Allowed values for `state` are:<br>
 * `CREATING` - Indicates that the resource is being created.<br>
 * `AVAILABLE` - Indicates that the resource is available.<br>
 * `UNAVAILABLE` - Indicates that the resource is unavailable.<br>
 * `DELETING` - Indicates that the resource is being deleted.<br>
 * `DELETED` - Indicates that the resource has been deleted.<br>
 *
 * * `dbNodeIds` - The OCID of database nodes associated with the database server.
 */
export function getDbServersOutput(args: GetDbServersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDbServersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:oracledatabase/getDbServers:getDbServers", {
        "cloudExadataInfrastructure": args.cloudExadataInfrastructure,
        "location": args.location,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getDbServers.
 */
export interface GetDbServersOutputArgs {
    /**
     * The Exadata Infrastructure id.
     */
    cloudExadataInfrastructure: pulumi.Input<string>;
    /**
     * The location of resource.
     */
    location: pulumi.Input<string>;
    /**
     * The project to which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
