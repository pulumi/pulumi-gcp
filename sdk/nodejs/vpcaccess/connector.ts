// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Serverless VPC Access connector resource.
 *
 * To get more information about Connector, see:
 *
 * * [API documentation](https://cloud.google.com/vpc/docs/reference/vpcaccess/rest/v1/projects.locations.connectors)
 * * How-to Guides
 *     * [Configuring Serverless VPC Access](https://cloud.google.com/vpc/docs/configure-serverless-vpc-access)
 *
 * ## Example Usage
 * ### VPC Access Connector
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const connector = new gcp.vpcaccess.Connector("connector", {
 *     ipCidrRange: "10.8.0.0/28",
 *     network: "default",
 * });
 * ```
 * ### VPC Access Connector Shared VPC
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const customTestNetwork = new gcp.compute.Network("customTestNetwork", {autoCreateSubnetworks: false}, {
 *     provider: google_beta,
 * });
 * const customTestSubnetwork = new gcp.compute.Subnetwork("customTestSubnetwork", {
 *     ipCidrRange: "10.2.0.0/28",
 *     region: "us-central1",
 *     network: customTestNetwork.id,
 * }, {
 *     provider: google_beta,
 * });
 * const connector = new gcp.vpcaccess.Connector("connector", {
 *     subnet: {
 *         name: customTestSubnetwork.name,
 *     },
 *     machineType: "e2-standard-4",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Cloudrun VPC Access Connector
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const vpcaccessApi = new gcp.projects.Service("vpcaccessApi", {
 *     service: "vpcaccess.googleapis.com",
 *     disableOnDestroy: false,
 * }, {
 *     provider: google_beta,
 * });
 * // VPC
 * const _default = new gcp.compute.Network("default", {autoCreateSubnetworks: false}, {
 *     provider: google_beta,
 * });
 * // VPC access connector
 * const connector = new gcp.vpcaccess.Connector("connector", {
 *     region: "us-west1",
 *     ipCidrRange: "10.8.0.0/28",
 *     network: _default.name,
 * }, {
 *     provider: google_beta,
 *     dependsOn: [vpcaccessApi],
 * });
 * // Cloud Router
 * const router = new gcp.compute.Router("router", {
 *     region: "us-west1",
 *     network: _default.id,
 * }, {
 *     provider: google_beta,
 * });
 * // NAT configuration
 * const routerNat = new gcp.compute.RouterNat("routerNat", {
 *     region: "us-west1",
 *     router: router.name,
 *     sourceSubnetworkIpRangesToNat: "ALL_SUBNETWORKS_ALL_IP_RANGES",
 *     natIpAllocateOption: "AUTO_ONLY",
 * }, {
 *     provider: google_beta,
 * });
 * // Cloud Run service
 * const gcrService = new gcp.cloudrun.Service("gcrService", {
 *     location: "us-west1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *                 resources: {
 *                     limits: {
 *                         cpu: "1000m",
 *                         memory: "512M",
 *                     },
 *                 },
 *             }],
 *         },
 *         metadata: {
 *             annotations: {
 *                 "autoscaling.knative.dev/maxScale": "5",
 *                 "run.googleapis.com/vpc-access-connector": connector.name,
 *                 "run.googleapis.com/vpc-access-egress": "all",
 *             },
 *         },
 *     },
 *     autogenerateRevisionName: true,
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Connector can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:vpcaccess/connector:Connector default projects/{{project}}/locations/{{region}}/connectors/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vpcaccess/connector:Connector default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vpcaccess/connector:Connector default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vpcaccess/connector:Connector default {{name}}
 * ```
 */
export class Connector extends pulumi.CustomResource {
    /**
     * Get an existing Connector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorState, opts?: pulumi.CustomResourceOptions): Connector {
        return new Connector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:vpcaccess/connector:Connector';

    /**
     * Returns true if the given object is an instance of Connector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connector.__pulumiType;
    }

    /**
     * The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
     */
    public readonly ipCidrRange!: pulumi.Output<string | undefined>;
    /**
     * Machine type of VM Instance underlying connector. Default is e2-micro
     */
    public readonly machineType!: pulumi.Output<string | undefined>;
    /**
     * Maximum value of instances in autoscaling group underlying the connector.
     */
    public readonly maxInstances!: pulumi.Output<number>;
    /**
     * Maximum throughput of the connector in Mbps, must be greater than `minThroughput`. Default is 300.
     */
    public readonly maxThroughput!: pulumi.Output<number | undefined>;
    /**
     * Minimum value of instances in autoscaling group underlying the connector.
     */
    public readonly minInstances!: pulumi.Output<number>;
    /**
     * Minimum throughput of the connector in Mbps. Default and min is 200.
     */
    public readonly minThroughput!: pulumi.Output<number | undefined>;
    /**
     * Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is
     * https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}"
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of the VPC network. Required if `ipCidrRange` is set.
     */
    public readonly network!: pulumi.Output<string | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Region where the VPC Access connector resides. If it is not provided, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The fully qualified name of this VPC connector
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * State of the VPC access connector.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The subnet in which to house the connector
     * Structure is documented below.
     */
    public readonly subnet!: pulumi.Output<outputs.vpcaccess.ConnectorSubnet | undefined>;

    /**
     * Create a Connector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorArgs | ConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorState | undefined;
            resourceInputs["ipCidrRange"] = state ? state.ipCidrRange : undefined;
            resourceInputs["machineType"] = state ? state.machineType : undefined;
            resourceInputs["maxInstances"] = state ? state.maxInstances : undefined;
            resourceInputs["maxThroughput"] = state ? state.maxThroughput : undefined;
            resourceInputs["minInstances"] = state ? state.minInstances : undefined;
            resourceInputs["minThroughput"] = state ? state.minThroughput : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
        } else {
            const args = argsOrState as ConnectorArgs | undefined;
            resourceInputs["ipCidrRange"] = args ? args.ipCidrRange : undefined;
            resourceInputs["machineType"] = args ? args.machineType : undefined;
            resourceInputs["maxInstances"] = args ? args.maxInstances : undefined;
            resourceInputs["maxThroughput"] = args ? args.maxThroughput : undefined;
            resourceInputs["minInstances"] = args ? args.minInstances : undefined;
            resourceInputs["minThroughput"] = args ? args.minThroughput : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connector resources.
 */
export interface ConnectorState {
    /**
     * The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
     */
    ipCidrRange?: pulumi.Input<string>;
    /**
     * Machine type of VM Instance underlying connector. Default is e2-micro
     */
    machineType?: pulumi.Input<string>;
    /**
     * Maximum value of instances in autoscaling group underlying the connector.
     */
    maxInstances?: pulumi.Input<number>;
    /**
     * Maximum throughput of the connector in Mbps, must be greater than `minThroughput`. Default is 300.
     */
    maxThroughput?: pulumi.Input<number>;
    /**
     * Minimum value of instances in autoscaling group underlying the connector.
     */
    minInstances?: pulumi.Input<number>;
    /**
     * Minimum throughput of the connector in Mbps. Default and min is 200.
     */
    minThroughput?: pulumi.Input<number>;
    /**
     * Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is
     * https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}"
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the VPC network. Required if `ipCidrRange` is set.
     */
    network?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Region where the VPC Access connector resides. If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The fully qualified name of this VPC connector
     */
    selfLink?: pulumi.Input<string>;
    /**
     * State of the VPC access connector.
     */
    state?: pulumi.Input<string>;
    /**
     * The subnet in which to house the connector
     * Structure is documented below.
     */
    subnet?: pulumi.Input<inputs.vpcaccess.ConnectorSubnet>;
}

/**
 * The set of arguments for constructing a Connector resource.
 */
export interface ConnectorArgs {
    /**
     * The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
     */
    ipCidrRange?: pulumi.Input<string>;
    /**
     * Machine type of VM Instance underlying connector. Default is e2-micro
     */
    machineType?: pulumi.Input<string>;
    /**
     * Maximum value of instances in autoscaling group underlying the connector.
     */
    maxInstances?: pulumi.Input<number>;
    /**
     * Maximum throughput of the connector in Mbps, must be greater than `minThroughput`. Default is 300.
     */
    maxThroughput?: pulumi.Input<number>;
    /**
     * Minimum value of instances in autoscaling group underlying the connector.
     */
    minInstances?: pulumi.Input<number>;
    /**
     * Minimum throughput of the connector in Mbps. Default and min is 200.
     */
    minThroughput?: pulumi.Input<number>;
    /**
     * Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is
     * https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}"
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the VPC network. Required if `ipCidrRange` is set.
     */
    network?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Region where the VPC Access connector resides. If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The subnet in which to house the connector
     * Structure is documented below.
     */
    subnet?: pulumi.Input<inputs.vpcaccess.ConnectorSubnet>;
}
