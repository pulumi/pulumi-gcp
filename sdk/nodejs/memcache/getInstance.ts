// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.instances).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const qa = gcp.memcache.getInstance({});
 * ```
 */
export function getInstance(args: GetInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetInstanceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:memcache/getInstance:getInstance", {
        "name": args.name,
        "project": args.project,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstance.
 */
export interface GetInstanceArgs {
    /**
     * The ID of the memcache instance.
     * 'memcache_instance_id'
     */
    name: string;
    /**
     * (optional)
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: string;
    /**
     * (optional)
     * The canonical id of the region. If it is not provided, the provider project is used. For example: us-east1.
     */
    region?: string;
}

/**
 * A collection of values returned by getInstance.
 */
export interface GetInstanceResult {
    readonly authorizedNetwork: string;
    readonly createTime: string;
    readonly discoveryEndpoint: string;
    readonly displayName: string;
    readonly effectiveLabels: {[key: string]: string};
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly labels: {[key: string]: string};
    readonly maintenancePolicies: outputs.memcache.GetInstanceMaintenancePolicy[];
    readonly maintenanceSchedules: outputs.memcache.GetInstanceMaintenanceSchedule[];
    readonly memcacheFullVersion: string;
    readonly memcacheNodes: outputs.memcache.GetInstanceMemcacheNode[];
    readonly memcacheParameters: outputs.memcache.GetInstanceMemcacheParameter[];
    readonly memcacheVersion: string;
    readonly name: string;
    readonly nodeConfigs: outputs.memcache.GetInstanceNodeConfig[];
    readonly nodeCount: number;
    readonly project?: string;
    readonly pulumiLabels: {[key: string]: string};
    readonly region?: string;
    readonly reservedIpRangeIds: string[];
    readonly zones: string[];
}
/**
 * Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.instances).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const qa = gcp.memcache.getInstance({});
 * ```
 */
export function getInstanceOutput(args: GetInstanceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetInstanceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:memcache/getInstance:getInstance", {
        "name": args.name,
        "project": args.project,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstance.
 */
export interface GetInstanceOutputArgs {
    /**
     * The ID of the memcache instance.
     * 'memcache_instance_id'
     */
    name: pulumi.Input<string>;
    /**
     * (optional)
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * (optional)
     * The canonical id of the region. If it is not provided, the provider project is used. For example: us-east1.
     */
    region?: pulumi.Input<string>;
}
