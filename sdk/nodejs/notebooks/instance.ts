// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * > **Warning:** `googleNotebookInstance` is deprecated and will be removed in a future major release. Use `gcp.workbench.Instance` instead.
 *
 * A Cloud AI Platform Notebook instance.
 *
 * > **Note:** Due to limitations of the Notebooks Instance API, many fields
 * in this resource do not properly detect drift. These fields will also not
 * appear in state once imported.
 *
 * To get more information about Instance, see:
 *
 * * [API documentation](https://cloud.google.com/ai-platform/notebooks/docs/reference/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/ai-platform-notebooks)
 *
 * ## Example Usage
 *
 * ### Notebook Instance Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.notebooks.Instance("instance", {
 *     name: "notebooks-instance",
 *     location: "us-west1-a",
 *     machineType: "e2-medium",
 *     vmImage: {
 *         project: "cloud-notebooks-managed",
 *         imageFamily: "workbench-instances",
 *     },
 * });
 * ```
 * ### Notebook Instance Basic Stopped
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.notebooks.Instance("instance", {
 *     name: "notebooks-instance",
 *     location: "us-west1-a",
 *     machineType: "e2-medium",
 *     vmImage: {
 *         project: "cloud-notebooks-managed",
 *         imageFamily: "workbench-instances",
 *     },
 *     desiredState: "STOPPED",
 * });
 * ```
 * ### Notebook Instance Basic Container
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.notebooks.Instance("instance", {
 *     name: "notebooks-instance",
 *     location: "us-west1-a",
 *     machineType: "e2-medium",
 *     metadata: {
 *         "proxy-mode": "service_account",
 *     },
 *     containerImage: {
 *         repository: "gcr.io/deeplearning-platform-release/base-cpu",
 *         tag: "latest",
 *     },
 * });
 * ```
 * ### Notebook Instance Basic Gpu
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.notebooks.Instance("instance", {
 *     name: "notebooks-instance",
 *     location: "us-west1-a",
 *     machineType: "n1-standard-1",
 *     installGpuDriver: true,
 *     acceleratorConfig: {
 *         type: "NVIDIA_TESLA_T4",
 *         coreCount: 1,
 *     },
 *     vmImage: {
 *         project: "cloud-notebooks-managed",
 *         imageFamily: "workbench-instances",
 *     },
 * });
 * ```
 * ### Notebook Instance Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myNetwork = gcp.compute.getNetwork({
 *     name: "default",
 * });
 * const mySubnetwork = gcp.compute.getSubnetwork({
 *     name: "default",
 *     region: "us-central1",
 * });
 * const instance = new gcp.notebooks.Instance("instance", {
 *     name: "notebooks-instance",
 *     location: "us-central1-a",
 *     machineType: "e2-medium",
 *     vmImage: {
 *         project: "cloud-notebooks-managed",
 *         imageFamily: "workbench-instances",
 *     },
 *     instanceOwners: ["my@service-account.com"],
 *     serviceAccount: "my@service-account.com",
 *     installGpuDriver: true,
 *     bootDiskType: "PD_SSD",
 *     bootDiskSizeGb: 150,
 *     noPublicIp: true,
 *     noProxyAccess: true,
 *     network: myNetwork.then(myNetwork => myNetwork.id),
 *     subnet: mySubnetwork.then(mySubnetwork => mySubnetwork.id),
 *     labels: {
 *         k: "val",
 *     },
 *     metadata: {
 *         terraform: "true",
 *     },
 *     serviceAccountScopes: [
 *         "https://www.googleapis.com/auth/bigquery",
 *         "https://www.googleapis.com/auth/devstorage.read_write",
 *         "https://www.googleapis.com/auth/cloud-platform",
 *         "https://www.googleapis.com/auth/userinfo.email",
 *     ],
 *     tags: [
 *         "foo",
 *         "bar",
 *     ],
 *     diskEncryption: "CMEK",
 *     kmsKey: "my-crypto-key",
 *     desiredState: "ACTIVE",
 * });
 * ```
 *
 * ## Import
 *
 * Instance can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/instances/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:notebooks/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:notebooks/instance:Instance default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:notebooks/instance:Instance default {{location}}/{{name}}
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:notebooks/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * The hardware accelerator used on this instance. If you use accelerators,
     * make sure that your configuration has enough vCPUs and memory to support the
     * machineType you have selected.
     * Structure is documented below.
     */
    declare public readonly acceleratorConfig: pulumi.Output<outputs.notebooks.InstanceAcceleratorConfig | undefined>;
    /**
     * The size of the boot disk in GB attached to this instance,
     * up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB.
     * If not specified, this defaults to 100.
     */
    declare public readonly bootDiskSizeGb: pulumi.Output<number | undefined>;
    /**
     * Possible disk types for notebook instances.
     * Possible values are: `DISK_TYPE_UNSPECIFIED`, `PD_STANDARD`, `PD_SSD`, `PD_BALANCED`, `PD_EXTREME`.
     */
    declare public readonly bootDiskType: pulumi.Output<string | undefined>;
    /**
     * Use a container image to start the notebook instance.
     * Structure is documented below.
     */
    declare public readonly containerImage: pulumi.Output<outputs.notebooks.InstanceContainerImage | undefined>;
    /**
     * Instance creation time
     */
    declare public readonly createTime: pulumi.Output<string>;
    /**
     * Specify a custom Cloud Storage path where the GPU driver is stored.
     * If not specified, we'll automatically choose from official GPU drivers.
     */
    declare public readonly customGpuDriverPath: pulumi.Output<string | undefined>;
    /**
     * The size of the data disk in GB attached to this instance,
     * up to a maximum of 64000 GB (64 TB).
     * You can choose the size of the data disk based on how big your notebooks and data are.
     * If not specified, this defaults to 100.
     */
    declare public readonly dataDiskSizeGb: pulumi.Output<number | undefined>;
    /**
     * Possible disk types for notebook instances.
     * Possible values are: `DISK_TYPE_UNSPECIFIED`, `PD_STANDARD`, `PD_SSD`, `PD_BALANCED`, `PD_EXTREME`.
     */
    declare public readonly dataDiskType: pulumi.Output<string | undefined>;
    /**
     * Desired state of the Notebook Instance. Set this field to `ACTIVE` to start the Instance, and `STOPPED` to stop the Instance.
     */
    declare public readonly desiredState: pulumi.Output<string | undefined>;
    /**
     * Disk encryption method used on the boot and data disks, defaults to GMEK.
     * Possible values are: `DISK_ENCRYPTION_UNSPECIFIED`, `GMEK`, `CMEK`.
     */
    declare public readonly diskEncryption: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Whether the end user authorizes Google Cloud to install GPU driver
     * on this instance. If this field is empty or set to false, the GPU driver
     * won't be installed. Only applicable to instances with GPUs.
     */
    declare public readonly installGpuDriver: pulumi.Output<boolean | undefined>;
    /**
     * The list of owners of this instance after creation.
     * Format: alias@example.com.
     * Currently supports one owner only.
     * If not specified, all of the service account users of
     * your VM instance's service account can use the instance.
     */
    declare public readonly instanceOwners: pulumi.Output<string[] | undefined>;
    /**
     * The KMS key used to encrypt the disks, only applicable if diskEncryption is CMEK.
     * Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
     */
    declare public readonly kmsKey: pulumi.Output<string | undefined>;
    /**
     * Labels to apply to this instance. These can be later modified by the setLabels method.
     * An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A reference to the zone where the machine resides.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * A reference to a machine type which defines VM kind.
     */
    declare public readonly machineType: pulumi.Output<string>;
    /**
     * Custom metadata to apply to this instance.
     * An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     */
    declare public readonly metadata: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name specified for the Notebook instance.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the VPC that this instance is in.
     * Format: projects/{project_id}/global/networks/{network_id}
     */
    declare public readonly network: pulumi.Output<string>;
    /**
     * The type of vNIC driver.
     * Possible values are: `UNSPECIFIED_NIC_TYPE`, `VIRTIO_NET`, `GVNIC`.
     */
    declare public readonly nicType: pulumi.Output<string | undefined>;
    /**
     * The notebook instance will not register with the proxy..
     */
    declare public readonly noProxyAccess: pulumi.Output<boolean | undefined>;
    /**
     * No public IP will be assigned to this instance.
     */
    declare public readonly noPublicIp: pulumi.Output<boolean | undefined>;
    /**
     * If true, the data disk will not be auto deleted when deleting the instance.
     */
    declare public readonly noRemoveDataDisk: pulumi.Output<boolean | undefined>;
    /**
     * Path to a Bash script that automatically runs after a
     * notebook instance fully boots up. The path must be a URL
     * or Cloud Storage path (gs://path-to-file/file-name).
     */
    declare public readonly postStartupScript: pulumi.Output<string | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The proxy endpoint that is used to access the Jupyter notebook.
     * Only returned when the resource is in a `PROVISIONED` state. If
     * needed you can utilize `pulumi up -refresh-only` to await
     * the population of this value.
     */
    declare public /*out*/ readonly proxyUri: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Reservation Affinity for consuming Zonal reservation.
     * Structure is documented below.
     */
    declare public readonly reservationAffinity: pulumi.Output<outputs.notebooks.InstanceReservationAffinity | undefined>;
    /**
     * The service account on this instance, giving access to other
     * Google Cloud services. You can use any service account within
     * the same project, but you must have the service account user
     * permission to use the instance. If not specified,
     * the Compute Engine default service account is used.
     */
    declare public readonly serviceAccount: pulumi.Output<string>;
    /**
     * Optional. The URIs of service account scopes to be included in Compute Engine instances.
     * If not specified, the following scopes are defined:
     * - https://www.googleapis.com/auth/cloud-platform
     * - https://www.googleapis.com/auth/userinfo.email
     */
    declare public readonly serviceAccountScopes: pulumi.Output<string[]>;
    /**
     * A set of Shielded Instance options. Check [Images using supported Shielded VM features]
     * Not all combinations are valid
     * Structure is documented below.
     */
    declare public readonly shieldedInstanceConfig: pulumi.Output<outputs.notebooks.InstanceShieldedInstanceConfig>;
    /**
     * The state of this instance.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The name of the subnet that this instance is in.
     * Format: projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}
     */
    declare public readonly subnet: pulumi.Output<string>;
    /**
     * The Compute Engine tags to add to instance.
     */
    declare public readonly tags: pulumi.Output<string[]>;
    /**
     * Instance update time.
     */
    declare public readonly updateTime: pulumi.Output<string>;
    /**
     * Use a Compute Engine VM image to start the notebook instance.
     * Structure is documented below.
     */
    declare public readonly vmImage: pulumi.Output<outputs.notebooks.InstanceVmImage | undefined>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["acceleratorConfig"] = state?.acceleratorConfig;
            resourceInputs["bootDiskSizeGb"] = state?.bootDiskSizeGb;
            resourceInputs["bootDiskType"] = state?.bootDiskType;
            resourceInputs["containerImage"] = state?.containerImage;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["customGpuDriverPath"] = state?.customGpuDriverPath;
            resourceInputs["dataDiskSizeGb"] = state?.dataDiskSizeGb;
            resourceInputs["dataDiskType"] = state?.dataDiskType;
            resourceInputs["desiredState"] = state?.desiredState;
            resourceInputs["diskEncryption"] = state?.diskEncryption;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["installGpuDriver"] = state?.installGpuDriver;
            resourceInputs["instanceOwners"] = state?.instanceOwners;
            resourceInputs["kmsKey"] = state?.kmsKey;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["machineType"] = state?.machineType;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["network"] = state?.network;
            resourceInputs["nicType"] = state?.nicType;
            resourceInputs["noProxyAccess"] = state?.noProxyAccess;
            resourceInputs["noPublicIp"] = state?.noPublicIp;
            resourceInputs["noRemoveDataDisk"] = state?.noRemoveDataDisk;
            resourceInputs["postStartupScript"] = state?.postStartupScript;
            resourceInputs["project"] = state?.project;
            resourceInputs["proxyUri"] = state?.proxyUri;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["reservationAffinity"] = state?.reservationAffinity;
            resourceInputs["serviceAccount"] = state?.serviceAccount;
            resourceInputs["serviceAccountScopes"] = state?.serviceAccountScopes;
            resourceInputs["shieldedInstanceConfig"] = state?.shieldedInstanceConfig;
            resourceInputs["state"] = state?.state;
            resourceInputs["subnet"] = state?.subnet;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["vmImage"] = state?.vmImage;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.machineType === undefined && !opts.urn) {
                throw new Error("Missing required property 'machineType'");
            }
            resourceInputs["acceleratorConfig"] = args?.acceleratorConfig;
            resourceInputs["bootDiskSizeGb"] = args?.bootDiskSizeGb;
            resourceInputs["bootDiskType"] = args?.bootDiskType;
            resourceInputs["containerImage"] = args?.containerImage;
            resourceInputs["createTime"] = args?.createTime;
            resourceInputs["customGpuDriverPath"] = args?.customGpuDriverPath;
            resourceInputs["dataDiskSizeGb"] = args?.dataDiskSizeGb;
            resourceInputs["dataDiskType"] = args?.dataDiskType;
            resourceInputs["desiredState"] = args?.desiredState;
            resourceInputs["diskEncryption"] = args?.diskEncryption;
            resourceInputs["installGpuDriver"] = args?.installGpuDriver;
            resourceInputs["instanceOwners"] = args?.instanceOwners;
            resourceInputs["kmsKey"] = args?.kmsKey;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["machineType"] = args?.machineType;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["network"] = args?.network;
            resourceInputs["nicType"] = args?.nicType;
            resourceInputs["noProxyAccess"] = args?.noProxyAccess;
            resourceInputs["noPublicIp"] = args?.noPublicIp;
            resourceInputs["noRemoveDataDisk"] = args?.noRemoveDataDisk;
            resourceInputs["postStartupScript"] = args?.postStartupScript;
            resourceInputs["project"] = args?.project;
            resourceInputs["reservationAffinity"] = args?.reservationAffinity;
            resourceInputs["serviceAccount"] = args?.serviceAccount;
            resourceInputs["serviceAccountScopes"] = args?.serviceAccountScopes;
            resourceInputs["shieldedInstanceConfig"] = args?.shieldedInstanceConfig;
            resourceInputs["subnet"] = args?.subnet;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["updateTime"] = args?.updateTime;
            resourceInputs["vmImage"] = args?.vmImage;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["proxyUri"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * The hardware accelerator used on this instance. If you use accelerators,
     * make sure that your configuration has enough vCPUs and memory to support the
     * machineType you have selected.
     * Structure is documented below.
     */
    acceleratorConfig?: pulumi.Input<inputs.notebooks.InstanceAcceleratorConfig>;
    /**
     * The size of the boot disk in GB attached to this instance,
     * up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB.
     * If not specified, this defaults to 100.
     */
    bootDiskSizeGb?: pulumi.Input<number>;
    /**
     * Possible disk types for notebook instances.
     * Possible values are: `DISK_TYPE_UNSPECIFIED`, `PD_STANDARD`, `PD_SSD`, `PD_BALANCED`, `PD_EXTREME`.
     */
    bootDiskType?: pulumi.Input<string>;
    /**
     * Use a container image to start the notebook instance.
     * Structure is documented below.
     */
    containerImage?: pulumi.Input<inputs.notebooks.InstanceContainerImage>;
    /**
     * Instance creation time
     */
    createTime?: pulumi.Input<string>;
    /**
     * Specify a custom Cloud Storage path where the GPU driver is stored.
     * If not specified, we'll automatically choose from official GPU drivers.
     */
    customGpuDriverPath?: pulumi.Input<string>;
    /**
     * The size of the data disk in GB attached to this instance,
     * up to a maximum of 64000 GB (64 TB).
     * You can choose the size of the data disk based on how big your notebooks and data are.
     * If not specified, this defaults to 100.
     */
    dataDiskSizeGb?: pulumi.Input<number>;
    /**
     * Possible disk types for notebook instances.
     * Possible values are: `DISK_TYPE_UNSPECIFIED`, `PD_STANDARD`, `PD_SSD`, `PD_BALANCED`, `PD_EXTREME`.
     */
    dataDiskType?: pulumi.Input<string>;
    /**
     * Desired state of the Notebook Instance. Set this field to `ACTIVE` to start the Instance, and `STOPPED` to stop the Instance.
     */
    desiredState?: pulumi.Input<string>;
    /**
     * Disk encryption method used on the boot and data disks, defaults to GMEK.
     * Possible values are: `DISK_ENCRYPTION_UNSPECIFIED`, `GMEK`, `CMEK`.
     */
    diskEncryption?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether the end user authorizes Google Cloud to install GPU driver
     * on this instance. If this field is empty or set to false, the GPU driver
     * won't be installed. Only applicable to instances with GPUs.
     */
    installGpuDriver?: pulumi.Input<boolean>;
    /**
     * The list of owners of this instance after creation.
     * Format: alias@example.com.
     * Currently supports one owner only.
     * If not specified, all of the service account users of
     * your VM instance's service account can use the instance.
     */
    instanceOwners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The KMS key used to encrypt the disks, only applicable if diskEncryption is CMEK.
     * Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
     */
    kmsKey?: pulumi.Input<string>;
    /**
     * Labels to apply to this instance. These can be later modified by the setLabels method.
     * An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A reference to the zone where the machine resides.
     */
    location?: pulumi.Input<string>;
    /**
     * A reference to a machine type which defines VM kind.
     */
    machineType?: pulumi.Input<string>;
    /**
     * Custom metadata to apply to this instance.
     * An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name specified for the Notebook instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the VPC that this instance is in.
     * Format: projects/{project_id}/global/networks/{network_id}
     */
    network?: pulumi.Input<string>;
    /**
     * The type of vNIC driver.
     * Possible values are: `UNSPECIFIED_NIC_TYPE`, `VIRTIO_NET`, `GVNIC`.
     */
    nicType?: pulumi.Input<string>;
    /**
     * The notebook instance will not register with the proxy..
     */
    noProxyAccess?: pulumi.Input<boolean>;
    /**
     * No public IP will be assigned to this instance.
     */
    noPublicIp?: pulumi.Input<boolean>;
    /**
     * If true, the data disk will not be auto deleted when deleting the instance.
     */
    noRemoveDataDisk?: pulumi.Input<boolean>;
    /**
     * Path to a Bash script that automatically runs after a
     * notebook instance fully boots up. The path must be a URL
     * or Cloud Storage path (gs://path-to-file/file-name).
     */
    postStartupScript?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The proxy endpoint that is used to access the Jupyter notebook.
     * Only returned when the resource is in a `PROVISIONED` state. If
     * needed you can utilize `pulumi up -refresh-only` to await
     * the population of this value.
     */
    proxyUri?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Reservation Affinity for consuming Zonal reservation.
     * Structure is documented below.
     */
    reservationAffinity?: pulumi.Input<inputs.notebooks.InstanceReservationAffinity>;
    /**
     * The service account on this instance, giving access to other
     * Google Cloud services. You can use any service account within
     * the same project, but you must have the service account user
     * permission to use the instance. If not specified,
     * the Compute Engine default service account is used.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Optional. The URIs of service account scopes to be included in Compute Engine instances.
     * If not specified, the following scopes are defined:
     * - https://www.googleapis.com/auth/cloud-platform
     * - https://www.googleapis.com/auth/userinfo.email
     */
    serviceAccountScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of Shielded Instance options. Check [Images using supported Shielded VM features]
     * Not all combinations are valid
     * Structure is documented below.
     */
    shieldedInstanceConfig?: pulumi.Input<inputs.notebooks.InstanceShieldedInstanceConfig>;
    /**
     * The state of this instance.
     */
    state?: pulumi.Input<string>;
    /**
     * The name of the subnet that this instance is in.
     * Format: projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}
     */
    subnet?: pulumi.Input<string>;
    /**
     * The Compute Engine tags to add to instance.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Instance update time.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Use a Compute Engine VM image to start the notebook instance.
     * Structure is documented below.
     */
    vmImage?: pulumi.Input<inputs.notebooks.InstanceVmImage>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * The hardware accelerator used on this instance. If you use accelerators,
     * make sure that your configuration has enough vCPUs and memory to support the
     * machineType you have selected.
     * Structure is documented below.
     */
    acceleratorConfig?: pulumi.Input<inputs.notebooks.InstanceAcceleratorConfig>;
    /**
     * The size of the boot disk in GB attached to this instance,
     * up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB.
     * If not specified, this defaults to 100.
     */
    bootDiskSizeGb?: pulumi.Input<number>;
    /**
     * Possible disk types for notebook instances.
     * Possible values are: `DISK_TYPE_UNSPECIFIED`, `PD_STANDARD`, `PD_SSD`, `PD_BALANCED`, `PD_EXTREME`.
     */
    bootDiskType?: pulumi.Input<string>;
    /**
     * Use a container image to start the notebook instance.
     * Structure is documented below.
     */
    containerImage?: pulumi.Input<inputs.notebooks.InstanceContainerImage>;
    /**
     * Instance creation time
     */
    createTime?: pulumi.Input<string>;
    /**
     * Specify a custom Cloud Storage path where the GPU driver is stored.
     * If not specified, we'll automatically choose from official GPU drivers.
     */
    customGpuDriverPath?: pulumi.Input<string>;
    /**
     * The size of the data disk in GB attached to this instance,
     * up to a maximum of 64000 GB (64 TB).
     * You can choose the size of the data disk based on how big your notebooks and data are.
     * If not specified, this defaults to 100.
     */
    dataDiskSizeGb?: pulumi.Input<number>;
    /**
     * Possible disk types for notebook instances.
     * Possible values are: `DISK_TYPE_UNSPECIFIED`, `PD_STANDARD`, `PD_SSD`, `PD_BALANCED`, `PD_EXTREME`.
     */
    dataDiskType?: pulumi.Input<string>;
    /**
     * Desired state of the Notebook Instance. Set this field to `ACTIVE` to start the Instance, and `STOPPED` to stop the Instance.
     */
    desiredState?: pulumi.Input<string>;
    /**
     * Disk encryption method used on the boot and data disks, defaults to GMEK.
     * Possible values are: `DISK_ENCRYPTION_UNSPECIFIED`, `GMEK`, `CMEK`.
     */
    diskEncryption?: pulumi.Input<string>;
    /**
     * Whether the end user authorizes Google Cloud to install GPU driver
     * on this instance. If this field is empty or set to false, the GPU driver
     * won't be installed. Only applicable to instances with GPUs.
     */
    installGpuDriver?: pulumi.Input<boolean>;
    /**
     * The list of owners of this instance after creation.
     * Format: alias@example.com.
     * Currently supports one owner only.
     * If not specified, all of the service account users of
     * your VM instance's service account can use the instance.
     */
    instanceOwners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The KMS key used to encrypt the disks, only applicable if diskEncryption is CMEK.
     * Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
     */
    kmsKey?: pulumi.Input<string>;
    /**
     * Labels to apply to this instance. These can be later modified by the setLabels method.
     * An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A reference to the zone where the machine resides.
     */
    location: pulumi.Input<string>;
    /**
     * A reference to a machine type which defines VM kind.
     */
    machineType: pulumi.Input<string>;
    /**
     * Custom metadata to apply to this instance.
     * An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name specified for the Notebook instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the VPC that this instance is in.
     * Format: projects/{project_id}/global/networks/{network_id}
     */
    network?: pulumi.Input<string>;
    /**
     * The type of vNIC driver.
     * Possible values are: `UNSPECIFIED_NIC_TYPE`, `VIRTIO_NET`, `GVNIC`.
     */
    nicType?: pulumi.Input<string>;
    /**
     * The notebook instance will not register with the proxy..
     */
    noProxyAccess?: pulumi.Input<boolean>;
    /**
     * No public IP will be assigned to this instance.
     */
    noPublicIp?: pulumi.Input<boolean>;
    /**
     * If true, the data disk will not be auto deleted when deleting the instance.
     */
    noRemoveDataDisk?: pulumi.Input<boolean>;
    /**
     * Path to a Bash script that automatically runs after a
     * notebook instance fully boots up. The path must be a URL
     * or Cloud Storage path (gs://path-to-file/file-name).
     */
    postStartupScript?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Reservation Affinity for consuming Zonal reservation.
     * Structure is documented below.
     */
    reservationAffinity?: pulumi.Input<inputs.notebooks.InstanceReservationAffinity>;
    /**
     * The service account on this instance, giving access to other
     * Google Cloud services. You can use any service account within
     * the same project, but you must have the service account user
     * permission to use the instance. If not specified,
     * the Compute Engine default service account is used.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Optional. The URIs of service account scopes to be included in Compute Engine instances.
     * If not specified, the following scopes are defined:
     * - https://www.googleapis.com/auth/cloud-platform
     * - https://www.googleapis.com/auth/userinfo.email
     */
    serviceAccountScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of Shielded Instance options. Check [Images using supported Shielded VM features]
     * Not all combinations are valid
     * Structure is documented below.
     */
    shieldedInstanceConfig?: pulumi.Input<inputs.notebooks.InstanceShieldedInstanceConfig>;
    /**
     * The name of the subnet that this instance is in.
     * Format: projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}
     */
    subnet?: pulumi.Input<string>;
    /**
     * The Compute Engine tags to add to instance.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Instance update time.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Use a Compute Engine VM image to start the notebook instance.
     * Structure is documented below.
     */
    vmImage?: pulumi.Input<inputs.notebooks.InstanceVmImage>;
}
