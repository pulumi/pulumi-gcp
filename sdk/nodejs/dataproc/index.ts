// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AutoscalingPolicyArgs, AutoscalingPolicyState } from "./autoscalingPolicy";
export type AutoscalingPolicy = import("./autoscalingPolicy").AutoscalingPolicy;
export const AutoscalingPolicy: typeof import("./autoscalingPolicy").AutoscalingPolicy = null as any;
utilities.lazyLoad(exports, ["AutoscalingPolicy"], () => require("./autoscalingPolicy"));

export { AutoscalingPolicyIamBindingArgs, AutoscalingPolicyIamBindingState } from "./autoscalingPolicyIamBinding";
export type AutoscalingPolicyIamBinding = import("./autoscalingPolicyIamBinding").AutoscalingPolicyIamBinding;
export const AutoscalingPolicyIamBinding: typeof import("./autoscalingPolicyIamBinding").AutoscalingPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["AutoscalingPolicyIamBinding"], () => require("./autoscalingPolicyIamBinding"));

export { AutoscalingPolicyIamMemberArgs, AutoscalingPolicyIamMemberState } from "./autoscalingPolicyIamMember";
export type AutoscalingPolicyIamMember = import("./autoscalingPolicyIamMember").AutoscalingPolicyIamMember;
export const AutoscalingPolicyIamMember: typeof import("./autoscalingPolicyIamMember").AutoscalingPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["AutoscalingPolicyIamMember"], () => require("./autoscalingPolicyIamMember"));

export { AutoscalingPolicyIamPolicyArgs, AutoscalingPolicyIamPolicyState } from "./autoscalingPolicyIamPolicy";
export type AutoscalingPolicyIamPolicy = import("./autoscalingPolicyIamPolicy").AutoscalingPolicyIamPolicy;
export const AutoscalingPolicyIamPolicy: typeof import("./autoscalingPolicyIamPolicy").AutoscalingPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["AutoscalingPolicyIamPolicy"], () => require("./autoscalingPolicyIamPolicy"));

export { BatchArgs, BatchState } from "./batch";
export type Batch = import("./batch").Batch;
export const Batch: typeof import("./batch").Batch = null as any;
utilities.lazyLoad(exports, ["Batch"], () => require("./batch"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterIAMBindingArgs, ClusterIAMBindingState } from "./clusterIAMBinding";
export type ClusterIAMBinding = import("./clusterIAMBinding").ClusterIAMBinding;
export const ClusterIAMBinding: typeof import("./clusterIAMBinding").ClusterIAMBinding = null as any;
utilities.lazyLoad(exports, ["ClusterIAMBinding"], () => require("./clusterIAMBinding"));

export { ClusterIAMMemberArgs, ClusterIAMMemberState } from "./clusterIAMMember";
export type ClusterIAMMember = import("./clusterIAMMember").ClusterIAMMember;
export const ClusterIAMMember: typeof import("./clusterIAMMember").ClusterIAMMember = null as any;
utilities.lazyLoad(exports, ["ClusterIAMMember"], () => require("./clusterIAMMember"));

export { ClusterIAMPolicyArgs, ClusterIAMPolicyState } from "./clusterIAMPolicy";
export type ClusterIAMPolicy = import("./clusterIAMPolicy").ClusterIAMPolicy;
export const ClusterIAMPolicy: typeof import("./clusterIAMPolicy").ClusterIAMPolicy = null as any;
utilities.lazyLoad(exports, ["ClusterIAMPolicy"], () => require("./clusterIAMPolicy"));

export { GdcApplicationEnvironmentArgs, GdcApplicationEnvironmentState } from "./gdcApplicationEnvironment";
export type GdcApplicationEnvironment = import("./gdcApplicationEnvironment").GdcApplicationEnvironment;
export const GdcApplicationEnvironment: typeof import("./gdcApplicationEnvironment").GdcApplicationEnvironment = null as any;
utilities.lazyLoad(exports, ["GdcApplicationEnvironment"], () => require("./gdcApplicationEnvironment"));

export { GdcServiceInstanceArgs, GdcServiceInstanceState } from "./gdcServiceInstance";
export type GdcServiceInstance = import("./gdcServiceInstance").GdcServiceInstance;
export const GdcServiceInstance: typeof import("./gdcServiceInstance").GdcServiceInstance = null as any;
utilities.lazyLoad(exports, ["GdcServiceInstance"], () => require("./gdcServiceInstance"));

export { GetAutoscalingPolicyIamPolicyArgs, GetAutoscalingPolicyIamPolicyResult, GetAutoscalingPolicyIamPolicyOutputArgs } from "./getAutoscalingPolicyIamPolicy";
export const getAutoscalingPolicyIamPolicy: typeof import("./getAutoscalingPolicyIamPolicy").getAutoscalingPolicyIamPolicy = null as any;
export const getAutoscalingPolicyIamPolicyOutput: typeof import("./getAutoscalingPolicyIamPolicy").getAutoscalingPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingPolicyIamPolicy","getAutoscalingPolicyIamPolicyOutput"], () => require("./getAutoscalingPolicyIamPolicy"));

export { GetClusterIamPolicyArgs, GetClusterIamPolicyResult, GetClusterIamPolicyOutputArgs } from "./getClusterIamPolicy";
export const getClusterIamPolicy: typeof import("./getClusterIamPolicy").getClusterIamPolicy = null as any;
export const getClusterIamPolicyOutput: typeof import("./getClusterIamPolicy").getClusterIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getClusterIamPolicy","getClusterIamPolicyOutput"], () => require("./getClusterIamPolicy"));

export { GetJobIamPolicyArgs, GetJobIamPolicyResult, GetJobIamPolicyOutputArgs } from "./getJobIamPolicy";
export const getJobIamPolicy: typeof import("./getJobIamPolicy").getJobIamPolicy = null as any;
export const getJobIamPolicyOutput: typeof import("./getJobIamPolicy").getJobIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getJobIamPolicy","getJobIamPolicyOutput"], () => require("./getJobIamPolicy"));

export { GetMetastoreFederationIamPolicyArgs, GetMetastoreFederationIamPolicyResult, GetMetastoreFederationIamPolicyOutputArgs } from "./getMetastoreFederationIamPolicy";
export const getMetastoreFederationIamPolicy: typeof import("./getMetastoreFederationIamPolicy").getMetastoreFederationIamPolicy = null as any;
export const getMetastoreFederationIamPolicyOutput: typeof import("./getMetastoreFederationIamPolicy").getMetastoreFederationIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMetastoreFederationIamPolicy","getMetastoreFederationIamPolicyOutput"], () => require("./getMetastoreFederationIamPolicy"));

export { GetMetastoreServiceArgs, GetMetastoreServiceResult, GetMetastoreServiceOutputArgs } from "./getMetastoreService";
export const getMetastoreService: typeof import("./getMetastoreService").getMetastoreService = null as any;
export const getMetastoreServiceOutput: typeof import("./getMetastoreService").getMetastoreServiceOutput = null as any;
utilities.lazyLoad(exports, ["getMetastoreService","getMetastoreServiceOutput"], () => require("./getMetastoreService"));

export { GetMetastoreServiceIamPolicyArgs, GetMetastoreServiceIamPolicyResult, GetMetastoreServiceIamPolicyOutputArgs } from "./getMetastoreServiceIamPolicy";
export const getMetastoreServiceIamPolicy: typeof import("./getMetastoreServiceIamPolicy").getMetastoreServiceIamPolicy = null as any;
export const getMetastoreServiceIamPolicyOutput: typeof import("./getMetastoreServiceIamPolicy").getMetastoreServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMetastoreServiceIamPolicy","getMetastoreServiceIamPolicyOutput"], () => require("./getMetastoreServiceIamPolicy"));

export { JobArgs, JobState } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { JobIAMBindingArgs, JobIAMBindingState } from "./jobIAMBinding";
export type JobIAMBinding = import("./jobIAMBinding").JobIAMBinding;
export const JobIAMBinding: typeof import("./jobIAMBinding").JobIAMBinding = null as any;
utilities.lazyLoad(exports, ["JobIAMBinding"], () => require("./jobIAMBinding"));

export { JobIAMMemberArgs, JobIAMMemberState } from "./jobIAMMember";
export type JobIAMMember = import("./jobIAMMember").JobIAMMember;
export const JobIAMMember: typeof import("./jobIAMMember").JobIAMMember = null as any;
utilities.lazyLoad(exports, ["JobIAMMember"], () => require("./jobIAMMember"));

export { JobIAMPolicyArgs, JobIAMPolicyState } from "./jobIAMPolicy";
export type JobIAMPolicy = import("./jobIAMPolicy").JobIAMPolicy;
export const JobIAMPolicy: typeof import("./jobIAMPolicy").JobIAMPolicy = null as any;
utilities.lazyLoad(exports, ["JobIAMPolicy"], () => require("./jobIAMPolicy"));

export { MetastoreFederationArgs, MetastoreFederationState } from "./metastoreFederation";
export type MetastoreFederation = import("./metastoreFederation").MetastoreFederation;
export const MetastoreFederation: typeof import("./metastoreFederation").MetastoreFederation = null as any;
utilities.lazyLoad(exports, ["MetastoreFederation"], () => require("./metastoreFederation"));

export { MetastoreFederationIamBindingArgs, MetastoreFederationIamBindingState } from "./metastoreFederationIamBinding";
export type MetastoreFederationIamBinding = import("./metastoreFederationIamBinding").MetastoreFederationIamBinding;
export const MetastoreFederationIamBinding: typeof import("./metastoreFederationIamBinding").MetastoreFederationIamBinding = null as any;
utilities.lazyLoad(exports, ["MetastoreFederationIamBinding"], () => require("./metastoreFederationIamBinding"));

export { MetastoreFederationIamMemberArgs, MetastoreFederationIamMemberState } from "./metastoreFederationIamMember";
export type MetastoreFederationIamMember = import("./metastoreFederationIamMember").MetastoreFederationIamMember;
export const MetastoreFederationIamMember: typeof import("./metastoreFederationIamMember").MetastoreFederationIamMember = null as any;
utilities.lazyLoad(exports, ["MetastoreFederationIamMember"], () => require("./metastoreFederationIamMember"));

export { MetastoreFederationIamPolicyArgs, MetastoreFederationIamPolicyState } from "./metastoreFederationIamPolicy";
export type MetastoreFederationIamPolicy = import("./metastoreFederationIamPolicy").MetastoreFederationIamPolicy;
export const MetastoreFederationIamPolicy: typeof import("./metastoreFederationIamPolicy").MetastoreFederationIamPolicy = null as any;
utilities.lazyLoad(exports, ["MetastoreFederationIamPolicy"], () => require("./metastoreFederationIamPolicy"));

export { MetastoreServiceArgs, MetastoreServiceState } from "./metastoreService";
export type MetastoreService = import("./metastoreService").MetastoreService;
export const MetastoreService: typeof import("./metastoreService").MetastoreService = null as any;
utilities.lazyLoad(exports, ["MetastoreService"], () => require("./metastoreService"));

export { MetastoreServiceIamBindingArgs, MetastoreServiceIamBindingState } from "./metastoreServiceIamBinding";
export type MetastoreServiceIamBinding = import("./metastoreServiceIamBinding").MetastoreServiceIamBinding;
export const MetastoreServiceIamBinding: typeof import("./metastoreServiceIamBinding").MetastoreServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["MetastoreServiceIamBinding"], () => require("./metastoreServiceIamBinding"));

export { MetastoreServiceIamMemberArgs, MetastoreServiceIamMemberState } from "./metastoreServiceIamMember";
export type MetastoreServiceIamMember = import("./metastoreServiceIamMember").MetastoreServiceIamMember;
export const MetastoreServiceIamMember: typeof import("./metastoreServiceIamMember").MetastoreServiceIamMember = null as any;
utilities.lazyLoad(exports, ["MetastoreServiceIamMember"], () => require("./metastoreServiceIamMember"));

export { MetastoreServiceIamPolicyArgs, MetastoreServiceIamPolicyState } from "./metastoreServiceIamPolicy";
export type MetastoreServiceIamPolicy = import("./metastoreServiceIamPolicy").MetastoreServiceIamPolicy;
export const MetastoreServiceIamPolicy: typeof import("./metastoreServiceIamPolicy").MetastoreServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["MetastoreServiceIamPolicy"], () => require("./metastoreServiceIamPolicy"));

export { WorkflowTemplateArgs, WorkflowTemplateState } from "./workflowTemplate";
export type WorkflowTemplate = import("./workflowTemplate").WorkflowTemplate;
export const WorkflowTemplate: typeof import("./workflowTemplate").WorkflowTemplate = null as any;
utilities.lazyLoad(exports, ["WorkflowTemplate"], () => require("./workflowTemplate"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:dataproc/autoscalingPolicy:AutoscalingPolicy":
                return new AutoscalingPolicy(name, <any>undefined, { urn })
            case "gcp:dataproc/autoscalingPolicyIamBinding:AutoscalingPolicyIamBinding":
                return new AutoscalingPolicyIamBinding(name, <any>undefined, { urn })
            case "gcp:dataproc/autoscalingPolicyIamMember:AutoscalingPolicyIamMember":
                return new AutoscalingPolicyIamMember(name, <any>undefined, { urn })
            case "gcp:dataproc/autoscalingPolicyIamPolicy:AutoscalingPolicyIamPolicy":
                return new AutoscalingPolicyIamPolicy(name, <any>undefined, { urn })
            case "gcp:dataproc/batch:Batch":
                return new Batch(name, <any>undefined, { urn })
            case "gcp:dataproc/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "gcp:dataproc/clusterIAMBinding:ClusterIAMBinding":
                return new ClusterIAMBinding(name, <any>undefined, { urn })
            case "gcp:dataproc/clusterIAMMember:ClusterIAMMember":
                return new ClusterIAMMember(name, <any>undefined, { urn })
            case "gcp:dataproc/clusterIAMPolicy:ClusterIAMPolicy":
                return new ClusterIAMPolicy(name, <any>undefined, { urn })
            case "gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment":
                return new GdcApplicationEnvironment(name, <any>undefined, { urn })
            case "gcp:dataproc/gdcServiceInstance:GdcServiceInstance":
                return new GdcServiceInstance(name, <any>undefined, { urn })
            case "gcp:dataproc/job:Job":
                return new Job(name, <any>undefined, { urn })
            case "gcp:dataproc/jobIAMBinding:JobIAMBinding":
                return new JobIAMBinding(name, <any>undefined, { urn })
            case "gcp:dataproc/jobIAMMember:JobIAMMember":
                return new JobIAMMember(name, <any>undefined, { urn })
            case "gcp:dataproc/jobIAMPolicy:JobIAMPolicy":
                return new JobIAMPolicy(name, <any>undefined, { urn })
            case "gcp:dataproc/metastoreFederation:MetastoreFederation":
                return new MetastoreFederation(name, <any>undefined, { urn })
            case "gcp:dataproc/metastoreFederationIamBinding:MetastoreFederationIamBinding":
                return new MetastoreFederationIamBinding(name, <any>undefined, { urn })
            case "gcp:dataproc/metastoreFederationIamMember:MetastoreFederationIamMember":
                return new MetastoreFederationIamMember(name, <any>undefined, { urn })
            case "gcp:dataproc/metastoreFederationIamPolicy:MetastoreFederationIamPolicy":
                return new MetastoreFederationIamPolicy(name, <any>undefined, { urn })
            case "gcp:dataproc/metastoreService:MetastoreService":
                return new MetastoreService(name, <any>undefined, { urn })
            case "gcp:dataproc/metastoreServiceIamBinding:MetastoreServiceIamBinding":
                return new MetastoreServiceIamBinding(name, <any>undefined, { urn })
            case "gcp:dataproc/metastoreServiceIamMember:MetastoreServiceIamMember":
                return new MetastoreServiceIamMember(name, <any>undefined, { urn })
            case "gcp:dataproc/metastoreServiceIamPolicy:MetastoreServiceIamPolicy":
                return new MetastoreServiceIamPolicy(name, <any>undefined, { urn })
            case "gcp:dataproc/workflowTemplate:WorkflowTemplate":
                return new WorkflowTemplate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "dataproc/autoscalingPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/autoscalingPolicyIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/autoscalingPolicyIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/autoscalingPolicyIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/batch", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/cluster", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/clusterIAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/clusterIAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/clusterIAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/gdcApplicationEnvironment", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/gdcServiceInstance", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/job", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/jobIAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/jobIAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/jobIAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/metastoreFederation", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/metastoreFederationIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/metastoreFederationIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/metastoreFederationIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/metastoreService", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/metastoreServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/metastoreServiceIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/metastoreServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dataproc/workflowTemplate", _module)
