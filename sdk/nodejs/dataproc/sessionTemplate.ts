// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A Dataproc Serverless session template defines the configuration settings for
 * creating one or more Dataproc Serverless interactive sessions.
 *
 * To get more information about SessionTemplate, see:
 *
 * * [API documentation](https://cloud.google.com/dataproc-serverless/docs/reference/rest/v1/projects.locations.sessionTemplates)
 * * How-to Guides
 *     * [Dataproc Serverless Session Templates](https://cloud.google.com/dataproc-serverless/docs/guides/create-serverless-sessions-templates#create-dataproc-serverless-session-template)
 *
 * ## Example Usage
 *
 * ### Dataproc Session Templates Jupyter
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const exampleSessionTemplatesJupyter = new gcp.dataproc.SessionTemplate("example_session_templates_jupyter", {
 *     name: "projects/my-project-name/locations/us-central1/sessionTemplates/jupyter-session-template",
 *     location: "us-central1",
 *     labels: {
 *         session_template_test: "terraform",
 *     },
 *     runtimeConfig: {
 *         properties: {
 *             "spark.dynamicAllocation.enabled": "false",
 *             "spark.executor.instances": "2",
 *         },
 *     },
 *     environmentConfig: {
 *         executionConfig: {
 *             subnetworkUri: "default",
 *             ttl: "3600s",
 *             networkTags: ["tag1"],
 *         },
 *     },
 *     jupyterSession: {
 *         kernel: "PYTHON",
 *         displayName: "tf python kernel",
 *     },
 * });
 * ```
 * ### Dataproc Session Templates Jupyter Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const gcsAccount = gcp.storage.getProjectServiceAccount({});
 * const bucket = new gcp.storage.Bucket("bucket", {
 *     uniformBucketLevelAccess: true,
 *     name: "dataproc-bucket",
 *     location: "US",
 *     forceDestroy: true,
 * });
 * const cryptoKeyMember1 = new gcp.kms.CryptoKeyIAMMember("crypto_key_member_1", {
 *     cryptoKeyId: "example-key",
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     member: project.then(project => `serviceAccount:service-${project.number}@dataproc-accounts.iam.gserviceaccount.com`),
 * });
 * const ms = new gcp.dataproc.MetastoreService("ms", {
 *     serviceId: "jupyter-session-template",
 *     location: "us-central1",
 *     port: 9080,
 *     tier: "DEVELOPER",
 *     maintenanceWindow: {
 *         hourOfDay: 2,
 *         dayOfWeek: "SUNDAY",
 *     },
 *     hiveMetastoreConfig: {
 *         version: "3.1.2",
 *     },
 *     networkConfig: {
 *         consumers: [{
 *             subnetwork: "projects/my-project-name/regions/us-central1/subnetworks/default",
 *         }],
 *     },
 * });
 * const basic = new gcp.dataproc.Cluster("basic", {
 *     name: "jupyter-session-template",
 *     region: "us-central1",
 *     clusterConfig: {
 *         softwareConfig: {
 *             overrideProperties: {
 *                 "dataproc:dataproc.allow.zero.workers": "true",
 *                 "spark:spark.history.fs.logDirectory": pulumi.interpolate`gs://${bucket.name}/*&#47;spark-job-history`,
 *             },
 *         },
 *         gceClusterConfig: {
 *             subnetwork: "default",
 *         },
 *         endpointConfig: {
 *             enableHttpPortAccess: true,
 *         },
 *         masterConfig: {
 *             numInstances: 1,
 *             machineType: "e2-standard-2",
 *             diskConfig: {
 *                 bootDiskSizeGb: 35,
 *             },
 *         },
 *         metastoreConfig: {
 *             dataprocMetastoreService: ms.name,
 *         },
 *     },
 * });
 * const dataprocSessionTemplatesJupyterFull = new gcp.dataproc.SessionTemplate("dataproc_session_templates_jupyter_full", {
 *     name: "projects/my-project-name/locations/us-central1/sessionTemplates/jupyter-session-template",
 *     location: "us-central1",
 *     labels: {
 *         session_template_test: "terraform",
 *     },
 *     runtimeConfig: {
 *         properties: {
 *             "spark.dynamicAllocation.enabled": "false",
 *             "spark.executor.instances": "2",
 *         },
 *         version: "2.2",
 *         containerImage: "us-docker.pkg.dev/my-project-name/s8s-spark-test-images/s8s-spark:latest",
 *     },
 *     environmentConfig: {
 *         executionConfig: {
 *             ttl: "3600s",
 *             networkTags: ["tag1"],
 *             kmsKey: "example-key",
 *             subnetworkUri: "default",
 *             serviceAccount: project.then(project => `${project.number}-compute@developer.gserviceaccount.com`),
 *             stagingBucket: bucket.name,
 *         },
 *         peripheralsConfig: {
 *             metastoreService: ms.name,
 *             sparkHistoryServerConfig: {
 *                 dataprocCluster: basic.id,
 *             },
 *         },
 *     },
 *     jupyterSession: {
 *         kernel: "PYTHON",
 *         displayName: "tf python kernel",
 *     },
 * }, {
 *     dependsOn: [cryptoKeyMember1],
 * });
 * ```
 * ### Dataproc Session Templates Spark Connect
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const exampleSessionTemplatesSparkConnect = new gcp.dataproc.SessionTemplate("example_session_templates_spark_connect", {
 *     name: "projects/my-project-name/locations/us-central1/sessionTemplates/sc-session-template",
 *     location: "us-central1",
 *     labels: {
 *         session_template_test: "terraform",
 *     },
 *     runtimeConfig: {
 *         properties: {
 *             "spark.dynamicAllocation.enabled": "false",
 *             "spark.executor.instances": "2",
 *         },
 *     },
 *     environmentConfig: {
 *         executionConfig: {
 *             subnetworkUri: "default",
 *             ttl: "3600s",
 *             networkTags: ["tag1"],
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * SessionTemplate can be imported using any of these accepted formats:
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, SessionTemplate can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:dataproc/sessionTemplate:SessionTemplate default {{name}}
 * ```
 */
export class SessionTemplate extends pulumi.CustomResource {
    /**
     * Get an existing SessionTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SessionTemplateState, opts?: pulumi.CustomResourceOptions): SessionTemplate {
        return new SessionTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:dataproc/sessionTemplate:SessionTemplate';

    /**
     * Returns true if the given object is an instance of SessionTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SessionTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SessionTemplate.__pulumiType;
    }

    /**
     * The time when the session template was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The email address of the user who created the session template.
     */
    public /*out*/ readonly creator!: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Environment configuration for the session execution.
     * Structure is documented below.
     */
    public readonly environmentConfig!: pulumi.Output<outputs.dataproc.SessionTemplateEnvironmentConfig | undefined>;
    /**
     * Jupyter configuration for an interactive session.
     * Structure is documented below.
     */
    public readonly jupyterSession!: pulumi.Output<outputs.dataproc.SessionTemplateJupyterSession | undefined>;
    /**
     * The labels to associate with this session template.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location in which the session template will be created in.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The resource name of the session template in the following format:
     * projects/{project}/locations/{location}/sessionTemplates/{template_id}
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Runtime configuration for the session template.
     * Structure is documented below.
     */
    public readonly runtimeConfig!: pulumi.Output<outputs.dataproc.SessionTemplateRuntimeConfig | undefined>;
    /**
     * Spark connect configuration for an interactive session.
     */
    public readonly sparkConnectSession!: pulumi.Output<outputs.dataproc.SessionTemplateSparkConnectSession | undefined>;
    /**
     * The time when the session template was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SessionTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SessionTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SessionTemplateArgs | SessionTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SessionTemplateState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["creator"] = state ? state.creator : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["environmentConfig"] = state ? state.environmentConfig : undefined;
            resourceInputs["jupyterSession"] = state ? state.jupyterSession : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["runtimeConfig"] = state ? state.runtimeConfig : undefined;
            resourceInputs["sparkConnectSession"] = state ? state.sparkConnectSession : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SessionTemplateArgs | undefined;
            resourceInputs["environmentConfig"] = args ? args.environmentConfig : undefined;
            resourceInputs["jupyterSession"] = args ? args.jupyterSession : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["runtimeConfig"] = args ? args.runtimeConfig : undefined;
            resourceInputs["sparkConnectSession"] = args ? args.sparkConnectSession : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SessionTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SessionTemplate resources.
 */
export interface SessionTemplateState {
    /**
     * The time when the session template was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The email address of the user who created the session template.
     */
    creator?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Environment configuration for the session execution.
     * Structure is documented below.
     */
    environmentConfig?: pulumi.Input<inputs.dataproc.SessionTemplateEnvironmentConfig>;
    /**
     * Jupyter configuration for an interactive session.
     * Structure is documented below.
     */
    jupyterSession?: pulumi.Input<inputs.dataproc.SessionTemplateJupyterSession>;
    /**
     * The labels to associate with this session template.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location in which the session template will be created in.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the session template in the following format:
     * projects/{project}/locations/{location}/sessionTemplates/{template_id}
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Runtime configuration for the session template.
     * Structure is documented below.
     */
    runtimeConfig?: pulumi.Input<inputs.dataproc.SessionTemplateRuntimeConfig>;
    /**
     * Spark connect configuration for an interactive session.
     */
    sparkConnectSession?: pulumi.Input<inputs.dataproc.SessionTemplateSparkConnectSession>;
    /**
     * The time when the session template was updated.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SessionTemplate resource.
 */
export interface SessionTemplateArgs {
    /**
     * Environment configuration for the session execution.
     * Structure is documented below.
     */
    environmentConfig?: pulumi.Input<inputs.dataproc.SessionTemplateEnvironmentConfig>;
    /**
     * Jupyter configuration for an interactive session.
     * Structure is documented below.
     */
    jupyterSession?: pulumi.Input<inputs.dataproc.SessionTemplateJupyterSession>;
    /**
     * The labels to associate with this session template.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location in which the session template will be created in.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the session template in the following format:
     * projects/{project}/locations/{location}/sessionTemplates/{template_id}
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Runtime configuration for the session template.
     * Structure is documented below.
     */
    runtimeConfig?: pulumi.Input<inputs.dataproc.SessionTemplateRuntimeConfig>;
    /**
     * Spark connect configuration for an interactive session.
     */
    sparkConnectSession?: pulumi.Input<inputs.dataproc.SessionTemplateSparkConnectSession>;
}
