// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Get a Dataproc Metastore service from Google Cloud by its id and location.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const foo = gcp.dataproc.getMetastoreService({
 *     serviceId: "foo-bar",
 *     location: "global",
 * });
 * ```
 */
export function getMetastoreService(args: GetMetastoreServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetMetastoreServiceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:dataproc/getMetastoreService:getMetastoreService", {
        "location": args.location,
        "project": args.project,
        "serviceId": args.serviceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetastoreService.
 */
export interface GetMetastoreServiceArgs {
    /**
     * The location where the metastore service resides.
     *
     * - - -
     */
    location: string;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: string;
    /**
     * The ID of the metastore service.
     */
    serviceId: string;
}

/**
 * A collection of values returned by getMetastoreService.
 */
export interface GetMetastoreServiceResult {
    readonly artifactGcsUri: string;
    readonly createTime: string;
    readonly databaseType: string;
    readonly deletionProtection: boolean;
    readonly effectiveLabels: {[key: string]: string};
    readonly encryptionConfigs: outputs.dataproc.GetMetastoreServiceEncryptionConfig[];
    readonly endpointUri: string;
    readonly hiveMetastoreConfigs: outputs.dataproc.GetMetastoreServiceHiveMetastoreConfig[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly labels: {[key: string]: string};
    readonly location: string;
    readonly maintenanceWindows: outputs.dataproc.GetMetastoreServiceMaintenanceWindow[];
    readonly metadataIntegrations: outputs.dataproc.GetMetastoreServiceMetadataIntegration[];
    readonly name: string;
    readonly network: string;
    readonly networkConfigs: outputs.dataproc.GetMetastoreServiceNetworkConfig[];
    readonly port: number;
    readonly project?: string;
    readonly pulumiLabels: {[key: string]: string};
    readonly releaseChannel: string;
    readonly scalingConfigs: outputs.dataproc.GetMetastoreServiceScalingConfig[];
    readonly scheduledBackups: outputs.dataproc.GetMetastoreServiceScheduledBackup[];
    readonly serviceId: string;
    readonly state: string;
    readonly stateMessage: string;
    readonly telemetryConfigs: outputs.dataproc.GetMetastoreServiceTelemetryConfig[];
    readonly tier: string;
    readonly uid: string;
    readonly updateTime: string;
}
/**
 * Get a Dataproc Metastore service from Google Cloud by its id and location.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const foo = gcp.dataproc.getMetastoreService({
 *     serviceId: "foo-bar",
 *     location: "global",
 * });
 * ```
 */
export function getMetastoreServiceOutput(args: GetMetastoreServiceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMetastoreServiceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:dataproc/getMetastoreService:getMetastoreService", {
        "location": args.location,
        "project": args.project,
        "serviceId": args.serviceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetastoreService.
 */
export interface GetMetastoreServiceOutputArgs {
    /**
     * The location where the metastore service resides.
     *
     * - - -
     */
    location: pulumi.Input<string>;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The ID of the metastore service.
     */
    serviceId: pulumi.Input<string>;
}
