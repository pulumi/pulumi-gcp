// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * An ApplicationEnvironment contains shared configuration that may be referenced by multiple SparkApplications.
 *
 * To get more information about ApplicationEnvironment, see:
 *
 * * [API documentation](https://cloud.google.com/dataproc-gdc/docs/reference/rest/v1/projects.locations.applicationEnvironments)
 * * How-to Guides
 *     * [Dataproc Intro](https://cloud.google.com/dataproc/)
 *
 * ## Example Usage
 *
 * ### Dataprocgdc Applicationenvironment Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const application_environment = new gcp.dataproc.GdcApplicationEnvironment("application-environment", {
 *     applicationEnvironmentId: "dp-tf-e2e-application-environment-basic",
 *     serviceinstance: "do-not-delete-dataproc-gdc-instance",
 *     project: "my-project",
 *     location: "us-west2",
 *     namespace: "default",
 * });
 * ```
 * ### Dataprocgdc Applicationenvironment
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const application_environment = new gcp.dataproc.GdcApplicationEnvironment("application-environment", {
 *     applicationEnvironmentId: "dp-tf-e2e-application-environment",
 *     serviceinstance: "do-not-delete-dataproc-gdc-instance",
 *     project: "my-project",
 *     location: "us-west2",
 *     namespace: "default",
 *     displayName: "An application environment",
 *     labels: {
 *         "test-label": "label-value",
 *     },
 *     annotations: {
 *         an_annotation: "annotation_value",
 *     },
 *     sparkApplicationEnvironmentConfig: {
 *         defaultProperties: {
 *             "spark.executor.memory": "4g",
 *         },
 *         defaultVersion: "1.2",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ApplicationEnvironment can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/serviceInstances/{{serviceinstance}}/applicationEnvironments/{{application_environment_id}}`
 *
 * * `{{project}}/{{location}}/{{serviceinstance}}/{{application_environment_id}}`
 *
 * * `{{location}}/{{serviceinstance}}/{{application_environment_id}}`
 *
 * When using the `pulumi import` command, ApplicationEnvironment can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment default projects/{{project}}/locations/{{location}}/serviceInstances/{{serviceinstance}}/applicationEnvironments/{{application_environment_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment default {{project}}/{{location}}/{{serviceinstance}}/{{application_environment_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment default {{location}}/{{serviceinstance}}/{{application_environment_id}}
 * ```
 */
export class GdcApplicationEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing GdcApplicationEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GdcApplicationEnvironmentState, opts?: pulumi.CustomResourceOptions): GdcApplicationEnvironment {
        return new GdcApplicationEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:dataproc/gdcApplicationEnvironment:GdcApplicationEnvironment';

    /**
     * Returns true if the given object is an instance of GdcApplicationEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GdcApplicationEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GdcApplicationEnvironment.__pulumiType;
    }

    /**
     * The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The id of the application environment
     */
    public readonly applicationEnvironmentId!: pulumi.Output<string | undefined>;
    /**
     * The timestamp when the resource was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * User-provided human-readable name to be used in user interfaces.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location of the application environment
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Identifier. The name of the application environment. Format: projects/{project}/locations/{location}/serviceInstances/{service_instance}/applicationEnvironments/{application_environment_id}
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The id of the service instance to which this application environment belongs.
     */
    public readonly serviceinstance!: pulumi.Output<string>;
    /**
     * Represents the SparkApplicationEnvironmentConfig.
     * Structure is documented below.
     */
    public readonly sparkApplicationEnvironmentConfig!: pulumi.Output<outputs.dataproc.GdcApplicationEnvironmentSparkApplicationEnvironmentConfig | undefined>;
    /**
     * System generated unique identifier for this application environment, formatted as UUID4.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The timestamp when the resource was most recently updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a GdcApplicationEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GdcApplicationEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GdcApplicationEnvironmentArgs | GdcApplicationEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GdcApplicationEnvironmentState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["applicationEnvironmentId"] = state ? state.applicationEnvironmentId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["serviceinstance"] = state ? state.serviceinstance : undefined;
            resourceInputs["sparkApplicationEnvironmentConfig"] = state ? state.sparkApplicationEnvironmentConfig : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as GdcApplicationEnvironmentArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.serviceinstance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceinstance'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["applicationEnvironmentId"] = args ? args.applicationEnvironmentId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceinstance"] = args ? args.serviceinstance : undefined;
            resourceInputs["sparkApplicationEnvironmentConfig"] = args ? args.sparkApplicationEnvironmentConfig : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GdcApplicationEnvironment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GdcApplicationEnvironment resources.
 */
export interface GdcApplicationEnvironmentState {
    /**
     * The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The id of the application environment
     */
    applicationEnvironmentId?: pulumi.Input<string>;
    /**
     * The timestamp when the resource was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * User-provided human-readable name to be used in user interfaces.
     */
    displayName?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the application environment
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. The name of the application environment. Format: projects/{project}/locations/{location}/serviceInstances/{service_instance}/applicationEnvironments/{application_environment_id}
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
     */
    namespace?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The id of the service instance to which this application environment belongs.
     */
    serviceinstance?: pulumi.Input<string>;
    /**
     * Represents the SparkApplicationEnvironmentConfig.
     * Structure is documented below.
     */
    sparkApplicationEnvironmentConfig?: pulumi.Input<inputs.dataproc.GdcApplicationEnvironmentSparkApplicationEnvironmentConfig>;
    /**
     * System generated unique identifier for this application environment, formatted as UUID4.
     */
    uid?: pulumi.Input<string>;
    /**
     * The timestamp when the resource was most recently updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GdcApplicationEnvironment resource.
 */
export interface GdcApplicationEnvironmentArgs {
    /**
     * The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The id of the application environment
     */
    applicationEnvironmentId?: pulumi.Input<string>;
    /**
     * User-provided human-readable name to be used in user interfaces.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the application environment
     */
    location: pulumi.Input<string>;
    /**
     * The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
     */
    namespace?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The id of the service instance to which this application environment belongs.
     */
    serviceinstance: pulumi.Input<string>;
    /**
     * Represents the SparkApplicationEnvironmentConfig.
     * Structure is documented below.
     */
    sparkApplicationEnvironmentConfig?: pulumi.Input<inputs.dataproc.GdcApplicationEnvironmentSparkApplicationEnvironmentConfig>;
}
