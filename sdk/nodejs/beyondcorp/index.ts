// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AppConnectionArgs, AppConnectionState } from "./appConnection";
export type AppConnection = import("./appConnection").AppConnection;
export const AppConnection: typeof import("./appConnection").AppConnection = null as any;
utilities.lazyLoad(exports, ["AppConnection"], () => require("./appConnection"));

export { AppConnectorArgs, AppConnectorState } from "./appConnector";
export type AppConnector = import("./appConnector").AppConnector;
export const AppConnector: typeof import("./appConnector").AppConnector = null as any;
utilities.lazyLoad(exports, ["AppConnector"], () => require("./appConnector"));

export { AppGatewayArgs, AppGatewayState } from "./appGateway";
export type AppGateway = import("./appGateway").AppGateway;
export const AppGateway: typeof import("./appGateway").AppGateway = null as any;
utilities.lazyLoad(exports, ["AppGateway"], () => require("./appGateway"));

export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationIamBindingArgs, ApplicationIamBindingState } from "./applicationIamBinding";
export type ApplicationIamBinding = import("./applicationIamBinding").ApplicationIamBinding;
export const ApplicationIamBinding: typeof import("./applicationIamBinding").ApplicationIamBinding = null as any;
utilities.lazyLoad(exports, ["ApplicationIamBinding"], () => require("./applicationIamBinding"));

export { ApplicationIamMemberArgs, ApplicationIamMemberState } from "./applicationIamMember";
export type ApplicationIamMember = import("./applicationIamMember").ApplicationIamMember;
export const ApplicationIamMember: typeof import("./applicationIamMember").ApplicationIamMember = null as any;
utilities.lazyLoad(exports, ["ApplicationIamMember"], () => require("./applicationIamMember"));

export { ApplicationIamPolicyArgs, ApplicationIamPolicyState } from "./applicationIamPolicy";
export type ApplicationIamPolicy = import("./applicationIamPolicy").ApplicationIamPolicy;
export const ApplicationIamPolicy: typeof import("./applicationIamPolicy").ApplicationIamPolicy = null as any;
utilities.lazyLoad(exports, ["ApplicationIamPolicy"], () => require("./applicationIamPolicy"));

export { GetAppConnectionArgs, GetAppConnectionResult, GetAppConnectionOutputArgs } from "./getAppConnection";
export const getAppConnection: typeof import("./getAppConnection").getAppConnection = null as any;
export const getAppConnectionOutput: typeof import("./getAppConnection").getAppConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getAppConnection","getAppConnectionOutput"], () => require("./getAppConnection"));

export { GetAppConnectorArgs, GetAppConnectorResult, GetAppConnectorOutputArgs } from "./getAppConnector";
export const getAppConnector: typeof import("./getAppConnector").getAppConnector = null as any;
export const getAppConnectorOutput: typeof import("./getAppConnector").getAppConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getAppConnector","getAppConnectorOutput"], () => require("./getAppConnector"));

export { GetAppGatewayArgs, GetAppGatewayResult, GetAppGatewayOutputArgs } from "./getAppGateway";
export const getAppGateway: typeof import("./getAppGateway").getAppGateway = null as any;
export const getAppGatewayOutput: typeof import("./getAppGateway").getAppGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getAppGateway","getAppGatewayOutput"], () => require("./getAppGateway"));

export { GetApplicationIamPolicyArgs, GetApplicationIamPolicyResult, GetApplicationIamPolicyOutputArgs } from "./getApplicationIamPolicy";
export const getApplicationIamPolicy: typeof import("./getApplicationIamPolicy").getApplicationIamPolicy = null as any;
export const getApplicationIamPolicyOutput: typeof import("./getApplicationIamPolicy").getApplicationIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationIamPolicy","getApplicationIamPolicyOutput"], () => require("./getApplicationIamPolicy"));

export { GetSecurityGatewayArgs, GetSecurityGatewayResult, GetSecurityGatewayOutputArgs } from "./getSecurityGateway";
export const getSecurityGateway: typeof import("./getSecurityGateway").getSecurityGateway = null as any;
export const getSecurityGatewayOutput: typeof import("./getSecurityGateway").getSecurityGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGateway","getSecurityGatewayOutput"], () => require("./getSecurityGateway"));

export { GetSecurityGatewayApplicationIamPolicyArgs, GetSecurityGatewayApplicationIamPolicyResult, GetSecurityGatewayApplicationIamPolicyOutputArgs } from "./getSecurityGatewayApplicationIamPolicy";
export const getSecurityGatewayApplicationIamPolicy: typeof import("./getSecurityGatewayApplicationIamPolicy").getSecurityGatewayApplicationIamPolicy = null as any;
export const getSecurityGatewayApplicationIamPolicyOutput: typeof import("./getSecurityGatewayApplicationIamPolicy").getSecurityGatewayApplicationIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGatewayApplicationIamPolicy","getSecurityGatewayApplicationIamPolicyOutput"], () => require("./getSecurityGatewayApplicationIamPolicy"));

export { GetSecurityGatewayIamPolicyArgs, GetSecurityGatewayIamPolicyResult, GetSecurityGatewayIamPolicyOutputArgs } from "./getSecurityGatewayIamPolicy";
export const getSecurityGatewayIamPolicy: typeof import("./getSecurityGatewayIamPolicy").getSecurityGatewayIamPolicy = null as any;
export const getSecurityGatewayIamPolicyOutput: typeof import("./getSecurityGatewayIamPolicy").getSecurityGatewayIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGatewayIamPolicy","getSecurityGatewayIamPolicyOutput"], () => require("./getSecurityGatewayIamPolicy"));

export { SecurityGatewayArgs, SecurityGatewayState } from "./securityGateway";
export type SecurityGateway = import("./securityGateway").SecurityGateway;
export const SecurityGateway: typeof import("./securityGateway").SecurityGateway = null as any;
utilities.lazyLoad(exports, ["SecurityGateway"], () => require("./securityGateway"));

export { SecurityGatewayApplicationArgs, SecurityGatewayApplicationState } from "./securityGatewayApplication";
export type SecurityGatewayApplication = import("./securityGatewayApplication").SecurityGatewayApplication;
export const SecurityGatewayApplication: typeof import("./securityGatewayApplication").SecurityGatewayApplication = null as any;
utilities.lazyLoad(exports, ["SecurityGatewayApplication"], () => require("./securityGatewayApplication"));

export { SecurityGatewayApplicationIamBindingArgs, SecurityGatewayApplicationIamBindingState } from "./securityGatewayApplicationIamBinding";
export type SecurityGatewayApplicationIamBinding = import("./securityGatewayApplicationIamBinding").SecurityGatewayApplicationIamBinding;
export const SecurityGatewayApplicationIamBinding: typeof import("./securityGatewayApplicationIamBinding").SecurityGatewayApplicationIamBinding = null as any;
utilities.lazyLoad(exports, ["SecurityGatewayApplicationIamBinding"], () => require("./securityGatewayApplicationIamBinding"));

export { SecurityGatewayApplicationIamMemberArgs, SecurityGatewayApplicationIamMemberState } from "./securityGatewayApplicationIamMember";
export type SecurityGatewayApplicationIamMember = import("./securityGatewayApplicationIamMember").SecurityGatewayApplicationIamMember;
export const SecurityGatewayApplicationIamMember: typeof import("./securityGatewayApplicationIamMember").SecurityGatewayApplicationIamMember = null as any;
utilities.lazyLoad(exports, ["SecurityGatewayApplicationIamMember"], () => require("./securityGatewayApplicationIamMember"));

export { SecurityGatewayApplicationIamPolicyArgs, SecurityGatewayApplicationIamPolicyState } from "./securityGatewayApplicationIamPolicy";
export type SecurityGatewayApplicationIamPolicy = import("./securityGatewayApplicationIamPolicy").SecurityGatewayApplicationIamPolicy;
export const SecurityGatewayApplicationIamPolicy: typeof import("./securityGatewayApplicationIamPolicy").SecurityGatewayApplicationIamPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityGatewayApplicationIamPolicy"], () => require("./securityGatewayApplicationIamPolicy"));

export { SecurityGatewayIamBindingArgs, SecurityGatewayIamBindingState } from "./securityGatewayIamBinding";
export type SecurityGatewayIamBinding = import("./securityGatewayIamBinding").SecurityGatewayIamBinding;
export const SecurityGatewayIamBinding: typeof import("./securityGatewayIamBinding").SecurityGatewayIamBinding = null as any;
utilities.lazyLoad(exports, ["SecurityGatewayIamBinding"], () => require("./securityGatewayIamBinding"));

export { SecurityGatewayIamMemberArgs, SecurityGatewayIamMemberState } from "./securityGatewayIamMember";
export type SecurityGatewayIamMember = import("./securityGatewayIamMember").SecurityGatewayIamMember;
export const SecurityGatewayIamMember: typeof import("./securityGatewayIamMember").SecurityGatewayIamMember = null as any;
utilities.lazyLoad(exports, ["SecurityGatewayIamMember"], () => require("./securityGatewayIamMember"));

export { SecurityGatewayIamPolicyArgs, SecurityGatewayIamPolicyState } from "./securityGatewayIamPolicy";
export type SecurityGatewayIamPolicy = import("./securityGatewayIamPolicy").SecurityGatewayIamPolicy;
export const SecurityGatewayIamPolicy: typeof import("./securityGatewayIamPolicy").SecurityGatewayIamPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityGatewayIamPolicy"], () => require("./securityGatewayIamPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:beyondcorp/appConnection:AppConnection":
                return new AppConnection(name, <any>undefined, { urn })
            case "gcp:beyondcorp/appConnector:AppConnector":
                return new AppConnector(name, <any>undefined, { urn })
            case "gcp:beyondcorp/appGateway:AppGateway":
                return new AppGateway(name, <any>undefined, { urn })
            case "gcp:beyondcorp/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "gcp:beyondcorp/applicationIamBinding:ApplicationIamBinding":
                return new ApplicationIamBinding(name, <any>undefined, { urn })
            case "gcp:beyondcorp/applicationIamMember:ApplicationIamMember":
                return new ApplicationIamMember(name, <any>undefined, { urn })
            case "gcp:beyondcorp/applicationIamPolicy:ApplicationIamPolicy":
                return new ApplicationIamPolicy(name, <any>undefined, { urn })
            case "gcp:beyondcorp/securityGateway:SecurityGateway":
                return new SecurityGateway(name, <any>undefined, { urn })
            case "gcp:beyondcorp/securityGatewayApplication:SecurityGatewayApplication":
                return new SecurityGatewayApplication(name, <any>undefined, { urn })
            case "gcp:beyondcorp/securityGatewayApplicationIamBinding:SecurityGatewayApplicationIamBinding":
                return new SecurityGatewayApplicationIamBinding(name, <any>undefined, { urn })
            case "gcp:beyondcorp/securityGatewayApplicationIamMember:SecurityGatewayApplicationIamMember":
                return new SecurityGatewayApplicationIamMember(name, <any>undefined, { urn })
            case "gcp:beyondcorp/securityGatewayApplicationIamPolicy:SecurityGatewayApplicationIamPolicy":
                return new SecurityGatewayApplicationIamPolicy(name, <any>undefined, { urn })
            case "gcp:beyondcorp/securityGatewayIamBinding:SecurityGatewayIamBinding":
                return new SecurityGatewayIamBinding(name, <any>undefined, { urn })
            case "gcp:beyondcorp/securityGatewayIamMember:SecurityGatewayIamMember":
                return new SecurityGatewayIamMember(name, <any>undefined, { urn })
            case "gcp:beyondcorp/securityGatewayIamPolicy:SecurityGatewayIamPolicy":
                return new SecurityGatewayIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/appConnection", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/appConnector", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/appGateway", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/application", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/applicationIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/applicationIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/applicationIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/securityGateway", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/securityGatewayApplication", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/securityGatewayApplicationIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/securityGatewayApplicationIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/securityGatewayApplicationIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/securityGatewayIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/securityGatewayIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "beyondcorp/securityGatewayIamPolicy", _module)
