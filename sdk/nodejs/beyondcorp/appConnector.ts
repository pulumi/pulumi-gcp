// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A BeyondCorp AppConnector resource represents an application facing component deployed proximal to
 * and with direct access to the application instances. It is used to establish connectivity between the
 * remote enterprise environment and GCP. It initiates connections to the applications and can proxy the
 * data from users over the connection.
 *
 * To get more information about AppConnector, see:
 *
 * * [API documentation](https://cloud.google.com/beyondcorp/docs/reference/rest#rest-resource:-v1.projects.locations.appconnectors)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/beyondcorp-enterprise/docs/enable-app-connector)
 *
 * ## Example Usage
 * ### Beyondcorp App Connector Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const serviceAccount = new gcp.serviceaccount.Account("serviceAccount", {
 *     accountId: "my-account",
 *     displayName: "Test Service Account",
 * });
 * const appConnector = new gcp.beyondcorp.AppConnector("appConnector", {principalInfo: {
 *     serviceAccount: {
 *         email: serviceAccount.email,
 *     },
 * }});
 * ```
 * ### Beyondcorp App Connector Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const serviceAccount = new gcp.serviceaccount.Account("serviceAccount", {
 *     accountId: "my-account",
 *     displayName: "Test Service Account",
 * });
 * const appConnector = new gcp.beyondcorp.AppConnector("appConnector", {
 *     region: "us-central1",
 *     displayName: "some display name",
 *     principalInfo: {
 *         serviceAccount: {
 *             email: serviceAccount.email,
 *         },
 *     },
 *     labels: {
 *         foo: "bar",
 *         bar: "baz",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * AppConnector can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:beyondcorp/appConnector:AppConnector default projects/{{project}}/locations/{{region}}/appConnectors/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:beyondcorp/appConnector:AppConnector default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:beyondcorp/appConnector:AppConnector default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:beyondcorp/appConnector:AppConnector default {{name}}
 * ```
 */
export class AppConnector extends pulumi.CustomResource {
    /**
     * Get an existing AppConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppConnectorState, opts?: pulumi.CustomResourceOptions): AppConnector {
        return new AppConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:beyondcorp/appConnector:AppConnector';

    /**
     * Returns true if the given object is an instance of AppConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppConnector.__pulumiType;
    }

    /**
     * An arbitrary user-provided name for the AppConnector.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Resource labels to represent user provided metadata.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ID of the AppConnector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Principal information about the Identity of the AppConnector.
     * Structure is documented below.
     */
    public readonly principalInfo!: pulumi.Output<outputs.beyondcorp.AppConnectorPrincipalInfo>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The region of the AppConnector.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * Represents the different states of a AppConnector.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a AppConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppConnectorArgs | AppConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppConnectorState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["principalInfo"] = state ? state.principalInfo : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as AppConnectorArgs | undefined;
            if ((!args || args.principalInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalInfo'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["principalInfo"] = args ? args.principalInfo : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppConnector resources.
 */
export interface AppConnectorState {
    /**
     * An arbitrary user-provided name for the AppConnector.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Resource labels to represent user provided metadata.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the AppConnector.
     */
    name?: pulumi.Input<string>;
    /**
     * Principal information about the Identity of the AppConnector.
     * Structure is documented below.
     */
    principalInfo?: pulumi.Input<inputs.beyondcorp.AppConnectorPrincipalInfo>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of the AppConnector.
     */
    region?: pulumi.Input<string>;
    /**
     * Represents the different states of a AppConnector.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppConnector resource.
 */
export interface AppConnectorArgs {
    /**
     * An arbitrary user-provided name for the AppConnector.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Resource labels to represent user provided metadata.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the AppConnector.
     */
    name?: pulumi.Input<string>;
    /**
     * Principal information about the Identity of the AppConnector.
     * Structure is documented below.
     */
    principalInfo: pulumi.Input<inputs.beyondcorp.AppConnectorPrincipalInfo>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of the AppConnector.
     */
    region?: pulumi.Input<string>;
}
