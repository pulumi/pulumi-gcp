// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Get info about a Google Cloud IAP Client.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default = gcp.certificateauthority.getAuthority({
 *     location: "us-west1",
 *     pool: "pool-name",
 *     certificateAuthorityId: "ca-id",
 * });
 * export const csr = _default.then(_default => _default.pemCsr);
 * ```
 */
export function getAuthority(args?: GetAuthorityArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthorityResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("gcp:certificateauthority/getAuthority:getAuthority", {
        "certificateAuthorityId": args.certificateAuthorityId,
        "location": args.location,
        "pool": args.pool,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getAuthority.
 */
export interface GetAuthorityArgs {
    /**
     * ID of the certificate authority.
     */
    certificateAuthorityId?: string;
    /**
     * The location the certificate authority exists in.
     */
    location?: string;
    /**
     * The name of the pool the certificate authority belongs to.
     */
    pool?: string;
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: string;
}

/**
 * A collection of values returned by getAuthority.
 */
export interface GetAuthorityResult {
    readonly accessUrls: outputs.certificateauthority.GetAuthorityAccessUrl[];
    readonly certificateAuthorityId?: string;
    readonly configs: outputs.certificateauthority.GetAuthorityConfig[];
    readonly createTime: string;
    readonly deletionProtection: boolean;
    readonly desiredState: string;
    readonly gcsBucket: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ignoreActiveCertificatesOnDeletion: boolean;
    readonly keySpecs: outputs.certificateauthority.GetAuthorityKeySpec[];
    readonly labels: {[key: string]: string};
    readonly lifetime: string;
    readonly location?: string;
    readonly name: string;
    readonly pemCaCertificates: string[];
    /**
     * The PEM-encoded signed certificate signing request (CSR). This is only set on subordinate certificate authorities.
     */
    readonly pemCsr: string;
    readonly pool?: string;
    readonly project?: string;
    readonly state: string;
    readonly type: string;
    readonly updateTime: string;
}

export function getAuthorityOutput(args?: GetAuthorityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuthorityResult> {
    return pulumi.output(args).apply(a => getAuthority(a, opts))
}

/**
 * A collection of arguments for invoking getAuthority.
 */
export interface GetAuthorityOutputArgs {
    /**
     * ID of the certificate authority.
     */
    certificateAuthorityId?: pulumi.Input<string>;
    /**
     * The location the certificate authority exists in.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the pool the certificate authority belongs to.
     */
    pool?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
