// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * A Certificate corresponds to a signed X.509 certificate issued by a CertificateAuthority.
 *
 * > **Note:** The Certificate Authority that is referenced by this resource **must** be
 * `tier = "ENTERPRISE"`
 *
 * > **Warning:** Please remember that all resources created during preview (via this provider)
 * will be deleted when CA service transitions to General Availability (GA). Relying on these
 * certificate authorities for production traffic is discouraged.
 *
 * ## Example Usage
 * ### Privateca Certificate Csr
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 *
 * const test_ca = new gcp.certificateauthority.Authority("test-ca", {
 *     certificateAuthorityId: "my-certificate-authority",
 *     location: "us-central1",
 *     tier: "ENTERPRISE",
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 organization: "HashiCorp",
 *             },
 *             commonName: "my-certificate-authority",
 *             subjectAltName: {
 *                 dnsNames: ["hashicorp.com"],
 *             },
 *         },
 *         reusableConfig: {
 *             reusableConfig: "projects/568668481468/locations/us-central1/reusableConfigs/root-unconstrained",
 *         },
 *     },
 *     keySpec: {
 *         algorithm: "RSA_PKCS1_4096_SHA256",
 *     },
 *     disableOnDelete: true,
 * }, {
 *     provider: google_beta,
 * });
 * const _default = new gcp.certificateauthority.Certificate("default", {
 *     project: "my-project-name",
 *     location: "us-central1",
 *     certificateAuthority: test_ca.certificateAuthorityId,
 *     lifetime: "860s",
 *     pemCsr: fs.readFileSync("test-fixtures/rsa_csr.pem"),
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Certificate can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:certificateauthority/certificate:Certificate default projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority}}/certificates/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:certificateauthority/certificate:Certificate default {{project}}/{{location}}/{{certificate_authority}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:certificateauthority/certificate:Certificate default {{location}}/{{certificate_authority}}/{{name}}
 * ```
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:certificateauthority/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Certificate Authority name.
     */
    public readonly certificateAuthority!: pulumi.Output<string>;
    /**
     * Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
     * this field is present.
     */
    public /*out*/ readonly certificateDescriptions!: pulumi.Output<outputs.certificateauthority.CertificateCertificateDescription[]>;
    /**
     * The config used to create a self-signed X.509 certificate or CSR.
     * Structure is documented below.
     */
    public readonly config!: pulumi.Output<outputs.certificateauthority.CertificateConfig | undefined>;
    /**
     * The time that this resource was created on the server. This is in RFC3339 text format.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Labels with user-defined metadata to apply to this resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
     * "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
     * fractional digits, terminated by 's'. Example: "3.5s".
     */
    public readonly lifetime!: pulumi.Output<string | undefined>;
    /**
     * Location of the CertificateAuthority. A full list of valid locations can be found by
     * running `gcloud beta privateca locations list`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name for this Certificate .
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Output only. The pem-encoded, signed X.509 certificate.
     */
    public /*out*/ readonly pemCertificate!: pulumi.Output<string>;
    /**
     * Required. Expected to be in leaf-to-root order according to RFC 5246.
     */
    public /*out*/ readonly pemCertificates!: pulumi.Output<string[]>;
    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     */
    public readonly pemCsr!: pulumi.Output<string | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
     * this field is present.
     */
    public /*out*/ readonly revocationDetails!: pulumi.Output<outputs.certificateauthority.CertificateRevocationDetail[]>;
    /**
     * Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            inputs["certificateAuthority"] = state ? state.certificateAuthority : undefined;
            inputs["certificateDescriptions"] = state ? state.certificateDescriptions : undefined;
            inputs["config"] = state ? state.config : undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["lifetime"] = state ? state.lifetime : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pemCertificate"] = state ? state.pemCertificate : undefined;
            inputs["pemCertificates"] = state ? state.pemCertificates : undefined;
            inputs["pemCsr"] = state ? state.pemCsr : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["revocationDetails"] = state ? state.revocationDetails : undefined;
            inputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if ((!args || args.certificateAuthority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthority'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            inputs["certificateAuthority"] = args ? args.certificateAuthority : undefined;
            inputs["config"] = args ? args.config : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["lifetime"] = args ? args.lifetime : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pemCsr"] = args ? args.pemCsr : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["certificateDescriptions"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["pemCertificate"] = undefined /*out*/;
            inputs["pemCertificates"] = undefined /*out*/;
            inputs["revocationDetails"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Certificate.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * Certificate Authority name.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
     * this field is present.
     */
    certificateDescriptions?: pulumi.Input<pulumi.Input<inputs.certificateauthority.CertificateCertificateDescription>[]>;
    /**
     * The config used to create a self-signed X.509 certificate or CSR.
     * Structure is documented below.
     */
    config?: pulumi.Input<inputs.certificateauthority.CertificateConfig>;
    /**
     * The time that this resource was created on the server. This is in RFC3339 text format.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Labels with user-defined metadata to apply to this resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
     * "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
     * fractional digits, terminated by 's'. Example: "3.5s".
     */
    lifetime?: pulumi.Input<string>;
    /**
     * Location of the CertificateAuthority. A full list of valid locations can be found by
     * running `gcloud beta privateca locations list`.
     */
    location?: pulumi.Input<string>;
    /**
     * The name for this Certificate .
     */
    name?: pulumi.Input<string>;
    /**
     * Output only. The pem-encoded, signed X.509 certificate.
     */
    pemCertificate?: pulumi.Input<string>;
    /**
     * Required. Expected to be in leaf-to-root order according to RFC 5246.
     */
    pemCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     */
    pemCsr?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
     * this field is present.
     */
    revocationDetails?: pulumi.Input<pulumi.Input<inputs.certificateauthority.CertificateRevocationDetail>[]>;
    /**
     * Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Certificate Authority name.
     */
    certificateAuthority: pulumi.Input<string>;
    /**
     * The config used to create a self-signed X.509 certificate or CSR.
     * Structure is documented below.
     */
    config?: pulumi.Input<inputs.certificateauthority.CertificateConfig>;
    /**
     * Labels with user-defined metadata to apply to this resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
     * "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
     * fractional digits, terminated by 's'. Example: "3.5s".
     */
    lifetime?: pulumi.Input<string>;
    /**
     * Location of the CertificateAuthority. A full list of valid locations can be found by
     * running `gcloud beta privateca locations list`.
     */
    location: pulumi.Input<string>;
    /**
     * The name for this Certificate .
     */
    name?: pulumi.Input<string>;
    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     */
    pemCsr?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
