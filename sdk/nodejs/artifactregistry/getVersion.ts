// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source fetches information of a version from a provided Artifact Registry repository.
 */
export function getVersion(args: GetVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetVersionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:artifactregistry/getVersion:getVersion", {
        "location": args.location,
        "packageName": args.packageName,
        "project": args.project,
        "repositoryId": args.repositoryId,
        "versionName": args.versionName,
        "view": args.view,
    }, opts);
}

/**
 * A collection of arguments for invoking getVersion.
 */
export interface GetVersionArgs {
    /**
     * The location of the artifact registry.
     */
    location: string;
    /**
     * The name of the package.
     */
    packageName: string;
    /**
     * The project ID in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: string;
    /**
     * The last part of the repository name to fetch from.
     */
    repositoryId: string;
    /**
     * The name of the version.
     */
    versionName: string;
    /**
     * The view, which determines what version information is returned in a response. Possible values are `"BASIC"` and `"FULL"`. Defaults to `"BASIC"`.
     */
    view?: string;
}

/**
 * A collection of values returned by getVersion.
 */
export interface GetVersionResult {
    /**
     * Client specified annotations.
     */
    readonly annotations: {[key: string]: string};
    /**
     * The time, as a RFC 3339 string, this package was created.
     */
    readonly createTime: string;
    /**
     * Description of the version, as specified in its metadata.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly location: string;
    /**
     * The name of the version, for example: `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/version1`. If the package part contains slashes, the slashes are escaped.
     */
    readonly name: string;
    readonly packageName: string;
    readonly project?: string;
    /**
     * A list of related tags. Will contain up to 100 tags that reference this version.
     */
    readonly relatedTags: outputs.artifactregistry.GetVersionRelatedTag[];
    readonly repositoryId: string;
    /**
     * The time, as a RFC 3339 string, this package was last updated. This includes publishing a new version of the package.
     */
    readonly updateTime: string;
    readonly versionName: string;
    readonly view?: string;
}
/**
 * This data source fetches information of a version from a provided Artifact Registry repository.
 */
export function getVersionOutput(args: GetVersionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVersionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:artifactregistry/getVersion:getVersion", {
        "location": args.location,
        "packageName": args.packageName,
        "project": args.project,
        "repositoryId": args.repositoryId,
        "versionName": args.versionName,
        "view": args.view,
    }, opts);
}

/**
 * A collection of arguments for invoking getVersion.
 */
export interface GetVersionOutputArgs {
    /**
     * The location of the artifact registry.
     */
    location: pulumi.Input<string>;
    /**
     * The name of the package.
     */
    packageName: pulumi.Input<string>;
    /**
     * The project ID in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The last part of the repository name to fetch from.
     */
    repositoryId: pulumi.Input<string>;
    /**
     * The name of the version.
     */
    versionName: pulumi.Input<string>;
    /**
     * The view, which determines what version information is returned in a response. Possible values are `"BASIC"` and `"FULL"`. Defaults to `"BASIC"`.
     */
    view?: pulumi.Input<string>;
}
