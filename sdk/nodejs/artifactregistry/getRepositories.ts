// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Get information about Artifact Registry repositories.
 * See [the official documentation](https://cloud.google.com/artifact-registry/docs)
 * and [API](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories/list).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const example = gcp.artifactregistry.getRepositories({
 *     location: "us-central1",
 *     project: "my-project",
 * });
 * ```
 */
export function getRepositories(args: GetRepositoriesArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoriesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:artifactregistry/getRepositories:getRepositories", {
        "location": args.location,
        "nameFilter": args.nameFilter,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepositories.
 */
export interface GetRepositoriesArgs {
    /**
     * The location of the artifact registry repositories. eg `us-central1`.
     */
    location: string;
    /**
     * Optional. An expression for filtering the results by name. You can also use wildcards `*`. I.e. `my-repo`, `*-repo`, `my-*`, `*-re*`. For further information reach out to the [API docs](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories/list).
     */
    nameFilter?: string;
    /**
     * The ID of the project. If it is not provided, the provider project is used.
     */
    project?: string;
}

/**
 * A collection of values returned by getRepositories.
 */
export interface GetRepositoriesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly location: string;
    readonly nameFilter?: string;
    readonly project?: string;
    /**
     * A list of all retrieved Artifact Registry repositories. Structure is defined below.
     */
    readonly repositories: outputs.artifactregistry.GetRepositoriesRepository[];
}
/**
 * Get information about Artifact Registry repositories.
 * See [the official documentation](https://cloud.google.com/artifact-registry/docs)
 * and [API](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories/list).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const example = gcp.artifactregistry.getRepositories({
 *     location: "us-central1",
 *     project: "my-project",
 * });
 * ```
 */
export function getRepositoriesOutput(args: GetRepositoriesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRepositoriesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:artifactregistry/getRepositories:getRepositories", {
        "location": args.location,
        "nameFilter": args.nameFilter,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepositories.
 */
export interface GetRepositoriesOutputArgs {
    /**
     * The location of the artifact registry repositories. eg `us-central1`.
     */
    location: pulumi.Input<string>;
    /**
     * Optional. An expression for filtering the results by name. You can also use wildcards `*`. I.e. `my-repo`, `*-repo`, `my-*`, `*-re*`. For further information reach out to the [API docs](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories/list).
     */
    nameFilter?: pulumi.Input<string>;
    /**
     * The ID of the project. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
