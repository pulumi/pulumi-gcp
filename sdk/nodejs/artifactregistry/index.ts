// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetDockerImageArgs, GetDockerImageResult, GetDockerImageOutputArgs } from "./getDockerImage";
export const getDockerImage: typeof import("./getDockerImage").getDockerImage = null as any;
export const getDockerImageOutput: typeof import("./getDockerImage").getDockerImageOutput = null as any;
utilities.lazyLoad(exports, ["getDockerImage","getDockerImageOutput"], () => require("./getDockerImage"));

export { GetDockerImagesArgs, GetDockerImagesResult, GetDockerImagesOutputArgs } from "./getDockerImages";
export const getDockerImages: typeof import("./getDockerImages").getDockerImages = null as any;
export const getDockerImagesOutput: typeof import("./getDockerImages").getDockerImagesOutput = null as any;
utilities.lazyLoad(exports, ["getDockerImages","getDockerImagesOutput"], () => require("./getDockerImages"));

export { GetLocationsArgs, GetLocationsResult, GetLocationsOutputArgs } from "./getLocations";
export const getLocations: typeof import("./getLocations").getLocations = null as any;
export const getLocationsOutput: typeof import("./getLocations").getLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getLocations","getLocationsOutput"], () => require("./getLocations"));

export { GetMavenArtifactArgs, GetMavenArtifactResult, GetMavenArtifactOutputArgs } from "./getMavenArtifact";
export const getMavenArtifact: typeof import("./getMavenArtifact").getMavenArtifact = null as any;
export const getMavenArtifactOutput: typeof import("./getMavenArtifact").getMavenArtifactOutput = null as any;
utilities.lazyLoad(exports, ["getMavenArtifact","getMavenArtifactOutput"], () => require("./getMavenArtifact"));

export { GetNpmPackageArgs, GetNpmPackageResult, GetNpmPackageOutputArgs } from "./getNpmPackage";
export const getNpmPackage: typeof import("./getNpmPackage").getNpmPackage = null as any;
export const getNpmPackageOutput: typeof import("./getNpmPackage").getNpmPackageOutput = null as any;
utilities.lazyLoad(exports, ["getNpmPackage","getNpmPackageOutput"], () => require("./getNpmPackage"));

export { GetPackageArgs, GetPackageResult, GetPackageOutputArgs } from "./getPackage";
export const getPackage: typeof import("./getPackage").getPackage = null as any;
export const getPackageOutput: typeof import("./getPackage").getPackageOutput = null as any;
utilities.lazyLoad(exports, ["getPackage","getPackageOutput"], () => require("./getPackage"));

export { GetPythonPackageArgs, GetPythonPackageResult, GetPythonPackageOutputArgs } from "./getPythonPackage";
export const getPythonPackage: typeof import("./getPythonPackage").getPythonPackage = null as any;
export const getPythonPackageOutput: typeof import("./getPythonPackage").getPythonPackageOutput = null as any;
utilities.lazyLoad(exports, ["getPythonPackage","getPythonPackageOutput"], () => require("./getPythonPackage"));

export { GetRepositoriesArgs, GetRepositoriesResult, GetRepositoriesOutputArgs } from "./getRepositories";
export const getRepositories: typeof import("./getRepositories").getRepositories = null as any;
export const getRepositoriesOutput: typeof import("./getRepositories").getRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getRepositories","getRepositoriesOutput"], () => require("./getRepositories"));

export { GetRepositoryArgs, GetRepositoryResult, GetRepositoryOutputArgs } from "./getRepository";
export const getRepository: typeof import("./getRepository").getRepository = null as any;
export const getRepositoryOutput: typeof import("./getRepository").getRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRepository","getRepositoryOutput"], () => require("./getRepository"));

export { GetRepositoryIamPolicyArgs, GetRepositoryIamPolicyResult, GetRepositoryIamPolicyOutputArgs } from "./getRepositoryIamPolicy";
export const getRepositoryIamPolicy: typeof import("./getRepositoryIamPolicy").getRepositoryIamPolicy = null as any;
export const getRepositoryIamPolicyOutput: typeof import("./getRepositoryIamPolicy").getRepositoryIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryIamPolicy","getRepositoryIamPolicyOutput"], () => require("./getRepositoryIamPolicy"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetTagsArgs, GetTagsResult, GetTagsOutputArgs } from "./getTags";
export const getTags: typeof import("./getTags").getTags = null as any;
export const getTagsOutput: typeof import("./getTags").getTagsOutput = null as any;
utilities.lazyLoad(exports, ["getTags","getTagsOutput"], () => require("./getTags"));

export { GetVersionArgs, GetVersionResult, GetVersionOutputArgs } from "./getVersion";
export const getVersion: typeof import("./getVersion").getVersion = null as any;
export const getVersionOutput: typeof import("./getVersion").getVersionOutput = null as any;
utilities.lazyLoad(exports, ["getVersion","getVersionOutput"], () => require("./getVersion"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { RepositoryIamBindingArgs, RepositoryIamBindingState } from "./repositoryIamBinding";
export type RepositoryIamBinding = import("./repositoryIamBinding").RepositoryIamBinding;
export const RepositoryIamBinding: typeof import("./repositoryIamBinding").RepositoryIamBinding = null as any;
utilities.lazyLoad(exports, ["RepositoryIamBinding"], () => require("./repositoryIamBinding"));

export { RepositoryIamMemberArgs, RepositoryIamMemberState } from "./repositoryIamMember";
export type RepositoryIamMember = import("./repositoryIamMember").RepositoryIamMember;
export const RepositoryIamMember: typeof import("./repositoryIamMember").RepositoryIamMember = null as any;
utilities.lazyLoad(exports, ["RepositoryIamMember"], () => require("./repositoryIamMember"));

export { RepositoryIamPolicyArgs, RepositoryIamPolicyState } from "./repositoryIamPolicy";
export type RepositoryIamPolicy = import("./repositoryIamPolicy").RepositoryIamPolicy;
export const RepositoryIamPolicy: typeof import("./repositoryIamPolicy").RepositoryIamPolicy = null as any;
utilities.lazyLoad(exports, ["RepositoryIamPolicy"], () => require("./repositoryIamPolicy"));

export { VpcscConfigArgs, VpcscConfigState } from "./vpcscConfig";
export type VpcscConfig = import("./vpcscConfig").VpcscConfig;
export const VpcscConfig: typeof import("./vpcscConfig").VpcscConfig = null as any;
utilities.lazyLoad(exports, ["VpcscConfig"], () => require("./vpcscConfig"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:artifactregistry/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "gcp:artifactregistry/repositoryIamBinding:RepositoryIamBinding":
                return new RepositoryIamBinding(name, <any>undefined, { urn })
            case "gcp:artifactregistry/repositoryIamMember:RepositoryIamMember":
                return new RepositoryIamMember(name, <any>undefined, { urn })
            case "gcp:artifactregistry/repositoryIamPolicy:RepositoryIamPolicy":
                return new RepositoryIamPolicy(name, <any>undefined, { urn })
            case "gcp:artifactregistry/vpcscConfig:VpcscConfig":
                return new VpcscConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "artifactregistry/repository", _module)
pulumi.runtime.registerResourceModule("gcp", "artifactregistry/repositoryIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "artifactregistry/repositoryIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "artifactregistry/repositoryIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "artifactregistry/vpcscConfig", _module)
