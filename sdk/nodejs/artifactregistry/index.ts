// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetRepositoryArgs, GetRepositoryResult, GetRepositoryOutputArgs } from "./getRepository";
export const getRepository: typeof import("./getRepository").getRepository = null as any;
export const getRepositoryOutput: typeof import("./getRepository").getRepositoryOutput = null as any;

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;

export { RepositoryIamBindingArgs, RepositoryIamBindingState } from "./repositoryIamBinding";
export type RepositoryIamBinding = import("./repositoryIamBinding").RepositoryIamBinding;
export const RepositoryIamBinding: typeof import("./repositoryIamBinding").RepositoryIamBinding = null as any;

export { RepositoryIamMemberArgs, RepositoryIamMemberState } from "./repositoryIamMember";
export type RepositoryIamMember = import("./repositoryIamMember").RepositoryIamMember;
export const RepositoryIamMember: typeof import("./repositoryIamMember").RepositoryIamMember = null as any;

export { RepositoryIamPolicyArgs, RepositoryIamPolicyState } from "./repositoryIamPolicy";
export type RepositoryIamPolicy = import("./repositoryIamPolicy").RepositoryIamPolicy;
export const RepositoryIamPolicy: typeof import("./repositoryIamPolicy").RepositoryIamPolicy = null as any;

utilities.lazyLoad(exports, ["getRepository","getRepositoryOutput"], () => require("./getRepository"));
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));
utilities.lazyLoad(exports, ["RepositoryIamBinding"], () => require("./repositoryIamBinding"));
utilities.lazyLoad(exports, ["RepositoryIamMember"], () => require("./repositoryIamMember"));
utilities.lazyLoad(exports, ["RepositoryIamPolicy"], () => require("./repositoryIamPolicy"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:artifactregistry/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "gcp:artifactregistry/repositoryIamBinding:RepositoryIamBinding":
                return new RepositoryIamBinding(name, <any>undefined, { urn })
            case "gcp:artifactregistry/repositoryIamMember:RepositoryIamMember":
                return new RepositoryIamMember(name, <any>undefined, { urn })
            case "gcp:artifactregistry/repositoryIamPolicy:RepositoryIamPolicy":
                return new RepositoryIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "artifactregistry/repository", _module)
pulumi.runtime.registerResourceModule("gcp", "artifactregistry/repositoryIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "artifactregistry/repositoryIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "artifactregistry/repositoryIamPolicy", _module)
