// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * An alias from a pkcs12 file.
 *
 * To get more information about KeystoresAliasesPkcs12, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases)
 * * How-to Guides
 *     * [Keystores Aliases](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases)
 *
 * ## Import
 *
 * KeystoresAliasesPkcs12 can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12 default organizations/{{org_id}}/environments/{{environment}}/keystores/{{keystore}}/aliases/{{alias}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12 default {{org_id}}/{{environment}}/{{keystore}}/{{alias}}
 * ```
 */
export class KeystoresAliasesPkcs12 extends pulumi.CustomResource {
    /**
     * Get an existing KeystoresAliasesPkcs12 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeystoresAliasesPkcs12State, opts?: pulumi.CustomResourceOptions): KeystoresAliasesPkcs12 {
        return new KeystoresAliasesPkcs12(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12';

    /**
     * Returns true if the given object is an instance of KeystoresAliasesPkcs12.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeystoresAliasesPkcs12 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeystoresAliasesPkcs12.__pulumiType;
    }

    /**
     * Alias Name
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * Chain of certificates under this alias.
     * Structure is documented below.
     */
    public /*out*/ readonly certsInfos!: pulumi.Output<outputs.apigee.KeystoresAliasesPkcs12CertsInfo[]>;
    /**
     * Environment associated with the alias
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * PKCS12 file content
     *
     * - - -
     */
    public readonly file!: pulumi.Output<string>;
    /**
     * Hash of the pkcs file
     */
    public readonly filehash!: pulumi.Output<string>;
    /**
     * Keystore Name
     */
    public readonly keystore!: pulumi.Output<string>;
    /**
     * Organization ID associated with the alias, without organization/ prefix
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * Password for the PKCS12 file if it's encrypted
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Optional.Type of Alias
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a KeystoresAliasesPkcs12 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeystoresAliasesPkcs12Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeystoresAliasesPkcs12Args | KeystoresAliasesPkcs12State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeystoresAliasesPkcs12State | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["certsInfos"] = state ? state.certsInfos : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["file"] = state ? state.file : undefined;
            resourceInputs["filehash"] = state ? state.filehash : undefined;
            resourceInputs["keystore"] = state ? state.keystore : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as KeystoresAliasesPkcs12Args | undefined;
            if ((!args || args.alias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alias'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.file === undefined) && !opts.urn) {
                throw new Error("Missing required property 'file'");
            }
            if ((!args || args.filehash === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filehash'");
            }
            if ((!args || args.keystore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keystore'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["file"] = args ? args.file : undefined;
            resourceInputs["filehash"] = args ? args.filehash : undefined;
            resourceInputs["keystore"] = args ? args.keystore : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["certsInfos"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeystoresAliasesPkcs12.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeystoresAliasesPkcs12 resources.
 */
export interface KeystoresAliasesPkcs12State {
    /**
     * Alias Name
     */
    alias?: pulumi.Input<string>;
    /**
     * Chain of certificates under this alias.
     * Structure is documented below.
     */
    certsInfos?: pulumi.Input<pulumi.Input<inputs.apigee.KeystoresAliasesPkcs12CertsInfo>[]>;
    /**
     * Environment associated with the alias
     */
    environment?: pulumi.Input<string>;
    /**
     * PKCS12 file content
     *
     * - - -
     */
    file?: pulumi.Input<string>;
    /**
     * Hash of the pkcs file
     */
    filehash?: pulumi.Input<string>;
    /**
     * Keystore Name
     */
    keystore?: pulumi.Input<string>;
    /**
     * Organization ID associated with the alias, without organization/ prefix
     */
    orgId?: pulumi.Input<string>;
    /**
     * Password for the PKCS12 file if it's encrypted
     */
    password?: pulumi.Input<string>;
    /**
     * Optional.Type of Alias
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeystoresAliasesPkcs12 resource.
 */
export interface KeystoresAliasesPkcs12Args {
    /**
     * Alias Name
     */
    alias: pulumi.Input<string>;
    /**
     * Environment associated with the alias
     */
    environment: pulumi.Input<string>;
    /**
     * PKCS12 file content
     *
     * - - -
     */
    file: pulumi.Input<string>;
    /**
     * Hash of the pkcs file
     */
    filehash: pulumi.Input<string>;
    /**
     * Keystore Name
     */
    keystore: pulumi.Input<string>;
    /**
     * Organization ID associated with the alias, without organization/ prefix
     */
    orgId: pulumi.Input<string>;
    /**
     * Password for the PKCS12 file if it's encrypted
     */
    password?: pulumi.Input<string>;
}
