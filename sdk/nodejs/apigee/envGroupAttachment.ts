// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * An `Environment Group attachment` in Apigee.
 *
 * To get more information about EnvgroupAttachment, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.envgroups.attachments/create)
 * * How-to Guides
 *     * [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)
 *
 * ## Example Usage
 * ### Apigee Environment Group Attachment Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = new gcp.organizations.Project("project", {
 *     projectId: "tf-test",
 *     orgId: "",
 *     billingAccount: "",
 * });
 * const apigee = new gcp.projects.Service("apigee", {
 *     project: project.projectId,
 *     service: "apigee.googleapis.com",
 * });
 * const compute = new gcp.projects.Service("compute", {
 *     project: project.projectId,
 *     service: "compute.googleapis.com",
 * });
 * const servicenetworking = new gcp.projects.Service("servicenetworking", {
 *     project: project.projectId,
 *     service: "servicenetworking.googleapis.com",
 * });
 * const apigeeNetwork = new gcp.compute.Network("apigeeNetwork", {project: project.projectId}, {
 *     dependsOn: [compute],
 * });
 * const apigeeRange = new gcp.compute.GlobalAddress("apigeeRange", {
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: apigeeNetwork.id,
 *     project: project.projectId,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigeeVpcConnection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * }, {
 *     dependsOn: [servicenetworking],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigeeOrg", {
 *     analyticsRegion: "us-central1",
 *     projectId: project.projectId,
 *     authorizedNetwork: apigeeNetwork.id,
 * }, {
 *     dependsOn: [
 *         apigeeVpcConnection,
 *         apigee,
 *     ],
 * });
 * const apigeeEnvgroup = new gcp.apigee.EnvGroup("apigeeEnvgroup", {
 *     orgId: apigeeOrg.id,
 *     hostnames: ["abc.foo.com"],
 * });
 * const apigeeEnv = new gcp.apigee.Environment("apigeeEnv", {
 *     orgId: apigeeOrg.id,
 *     description: "Apigee Environment",
 *     displayName: "tf-test",
 * });
 * const envGroupAttachment = new gcp.apigee.EnvGroupAttachment("envGroupAttachment", {
 *     envgroupId: apigeeEnvgroup.id,
 *     environment: apigeeEnv.name,
 * });
 * ```
 *
 * ## Import
 *
 * EnvgroupAttachment can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:apigee/envGroupAttachment:EnvGroupAttachment default {{envgroup_id}}/attachments/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigee/envGroupAttachment:EnvGroupAttachment default {{envgroup_id}}/{{name}}
 * ```
 */
export class EnvGroupAttachment extends pulumi.CustomResource {
    /**
     * Get an existing EnvGroupAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvGroupAttachmentState, opts?: pulumi.CustomResourceOptions): EnvGroupAttachment {
        return new EnvGroupAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/envGroupAttachment:EnvGroupAttachment';

    /**
     * Returns true if the given object is an instance of EnvGroupAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnvGroupAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvGroupAttachment.__pulumiType;
    }

    /**
     * The Apigee environment group associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/envgroups/{{envgroup_name}}`.
     */
    public readonly envgroupId!: pulumi.Output<string>;
    /**
     * The resource ID of the environment.
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The name of the newly created  attachment (output parameter).
     */
    public /*out*/ readonly name!: pulumi.Output<string>;

    /**
     * Create a EnvGroupAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvGroupAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvGroupAttachmentArgs | EnvGroupAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvGroupAttachmentState | undefined;
            resourceInputs["envgroupId"] = state ? state.envgroupId : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as EnvGroupAttachmentArgs | undefined;
            if ((!args || args.envgroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envgroupId'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            resourceInputs["envgroupId"] = args ? args.envgroupId : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnvGroupAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EnvGroupAttachment resources.
 */
export interface EnvGroupAttachmentState {
    /**
     * The Apigee environment group associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/envgroups/{{envgroup_name}}`.
     */
    envgroupId?: pulumi.Input<string>;
    /**
     * The resource ID of the environment.
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the newly created  attachment (output parameter).
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EnvGroupAttachment resource.
 */
export interface EnvGroupAttachmentArgs {
    /**
     * The Apigee environment group associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/envgroups/{{envgroup_name}}`.
     */
    envgroupId: pulumi.Input<string>;
    /**
     * The resource ID of the environment.
     */
    environment: pulumi.Input<string>;
}
