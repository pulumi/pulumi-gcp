// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Authorize the Synchronizer to download environment data from the control plane.
 *
 * To get more information about SyncAuthorization, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations#getsyncauthorization)
 * * How-to Guides
 *     * [Enable Synchronizer access](https://cloud.google.com/apigee/docs/hybrid/v1.8/synchronizer-access#enable-synchronizer-access)
 *
 * ## Example Usage
 * ### Apigee Sync Authorization Basic Test
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = new gcp.organizations.Project("project", {
 *     projectId: "my-project",
 *     orgId: "123456789",
 *     billingAccount: "000000-0000000-0000000-000000",
 * });
 * const apigee = new gcp.projects.Service("apigee", {
 *     project: project.projectId,
 *     service: "apigee.googleapis.com",
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigeeOrg", {
 *     analyticsRegion: "us-central1",
 *     projectId: project.projectId,
 *     runtimeType: "HYBRID",
 * }, {
 *     dependsOn: [apigee],
 * });
 * const serviceAccount = new gcp.serviceaccount.Account("serviceAccount", {
 *     accountId: "my-account",
 *     displayName: "Service Account",
 * });
 * const synchronizer_iam = new gcp.projects.IAMBinding("synchronizer-iam", {
 *     project: project.projectId,
 *     role: "roles/apigee.synchronizerManager",
 *     members: [pulumi.interpolate`serviceAccount:${serviceAccount.email}`],
 * });
 * const apigeeSyncAuthorization = new gcp.apigee.SyncAuthorization("apigeeSyncAuthorization", {identities: [pulumi.interpolate`serviceAccount:${serviceAccount.email}`]}, {
 *     dependsOn: [synchronizer_iam],
 * });
 * ```
 *
 * ## Import
 *
 * SyncAuthorization can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:apigee/syncAuthorization:SyncAuthorization default organizations/{{name}}/syncAuthorization
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigee/syncAuthorization:SyncAuthorization default {{name}}
 * ```
 */
export class SyncAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing SyncAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyncAuthorizationState, opts?: pulumi.CustomResourceOptions): SyncAuthorization {
        return new SyncAuthorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/syncAuthorization:SyncAuthorization';

    /**
     * Returns true if the given object is an instance of SyncAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyncAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyncAuthorization.__pulumiType;
    }

    /**
     * Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting
     * each other. Used internally during updates.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:service-account-name`.
     * The `service-account-name` is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
     * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
     * The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
     */
    public readonly identities!: pulumi.Output<string[]>;
    /**
     * Name of the Apigee organization.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a SyncAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyncAuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyncAuthorizationArgs | SyncAuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyncAuthorizationState | undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["identities"] = state ? state.identities : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as SyncAuthorizationArgs | undefined;
            if ((!args || args.identities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identities'");
            }
            resourceInputs["identities"] = args ? args.identities : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyncAuthorization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SyncAuthorization resources.
 */
export interface SyncAuthorizationState {
    /**
     * Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting
     * each other. Used internally during updates.
     */
    etag?: pulumi.Input<string>;
    /**
     * Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:service-account-name`.
     * The `service-account-name` is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
     * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
     * The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
     */
    identities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Apigee organization.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SyncAuthorization resource.
 */
export interface SyncAuthorizationArgs {
    /**
     * Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:service-account-name`.
     * The `service-account-name` is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
     * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
     * The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
     */
    identities: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Apigee organization.
     */
    name?: pulumi.Input<string>;
}
