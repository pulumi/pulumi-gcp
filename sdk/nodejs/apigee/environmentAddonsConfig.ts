// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Enable/Disable add-ons for an Apigee environment.
 *
 * To get more information about EnvironmentAddonsConfig, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.addonsConfig/setAddonEnablement)
 * * How-to Guides
 *     * [Enable Analytics Add-On](https://cloud.google.com/apigee/docs/api-platform/reference/manage-analytics-add-on)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * EnvironmentAddonsConfig can be imported using any of these accepted formats:
 *
 * * `{{env_id}}`
 *
 * When using the `pulumi import` command, EnvironmentAddonsConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:apigee/environmentAddonsConfig:EnvironmentAddonsConfig default {{env_id}}
 * ```
 */
export class EnvironmentAddonsConfig extends pulumi.CustomResource {
    /**
     * Get an existing EnvironmentAddonsConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentAddonsConfigState, opts?: pulumi.CustomResourceOptions): EnvironmentAddonsConfig {
        return new EnvironmentAddonsConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/environmentAddonsConfig:EnvironmentAddonsConfig';

    /**
     * Returns true if the given object is an instance of EnvironmentAddonsConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnvironmentAddonsConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvironmentAddonsConfig.__pulumiType;
    }

    /**
     * Flag to enable/disable Analytics.
     */
    public readonly analyticsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The Apigee environment group associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/environments/{{env_name}}`.
     *
     *
     * - - -
     */
    public readonly envId!: pulumi.Output<string>;

    /**
     * Create a EnvironmentAddonsConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentAddonsConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentAddonsConfigArgs | EnvironmentAddonsConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentAddonsConfigState | undefined;
            resourceInputs["analyticsEnabled"] = state ? state.analyticsEnabled : undefined;
            resourceInputs["envId"] = state ? state.envId : undefined;
        } else {
            const args = argsOrState as EnvironmentAddonsConfigArgs | undefined;
            if ((!args || args.envId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envId'");
            }
            resourceInputs["analyticsEnabled"] = args ? args.analyticsEnabled : undefined;
            resourceInputs["envId"] = args ? args.envId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnvironmentAddonsConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EnvironmentAddonsConfig resources.
 */
export interface EnvironmentAddonsConfigState {
    /**
     * Flag to enable/disable Analytics.
     */
    analyticsEnabled?: pulumi.Input<boolean>;
    /**
     * The Apigee environment group associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/environments/{{env_name}}`.
     *
     *
     * - - -
     */
    envId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EnvironmentAddonsConfig resource.
 */
export interface EnvironmentAddonsConfigArgs {
    /**
     * Flag to enable/disable Analytics.
     */
    analyticsEnabled?: pulumi.Input<boolean>;
    /**
     * The Apigee environment group associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/environments/{{env_name}}`.
     *
     *
     * - - -
     */
    envId: pulumi.Input<string>;
}
