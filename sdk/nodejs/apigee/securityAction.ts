// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A SecurityAction is rule that can be enforced at an environment level.
 * The result is one of: - A denied API call - An explicitly allowed API call
 * - A flagged API call (HTTP headers added before the target receives it)
 *   At least one condition is required to create a SecurityAction.
 *
 * To get more information about SecurityAction, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.securityActions/create)
 * * How-to Guides
 *     * [Creating security actions](https://cloud.google.com/apigee/docs/api-security/security-actions-api#create-security-actions)
 *
 * ## Example Usage
 *
 * ### Apigee Security Action Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "my-network"});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
 *     name: "my-address",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
 *     analyticsRegion: "us-central1",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 * }, {
 *     dependsOn: [apigeeVpcConnection],
 * });
 * const env = new gcp.apigee.Environment("env", {
 *     name: "my-environment",
 *     description: "Apigee Environment",
 *     displayName: "environment-1",
 *     orgId: apigeeOrg.id,
 * });
 * const apigeeOrgSecurityAddonsConfig = new gcp.apigee.AddonsConfig("apigee_org_security_addons_config", {
 *     org: apigeeOrg.name,
 *     addonsConfig: {
 *         apiSecurityConfig: {
 *             enabled: true,
 *         },
 *     },
 * });
 * const apigeeSecurityAction = new gcp.apigee.SecurityAction("apigee_security_action", {
 *     securityActionId: "my-security-action",
 *     orgId: apigeeOrg.name,
 *     envId: env.name,
 *     description: "Apigee Security Action",
 *     state: "ENABLED",
 *     conditionConfig: {
 *         ipAddressRanges: [
 *             "100.0.220.1",
 *             "200.0.0.1",
 *         ],
 *         botReasons: [
 *             "Flooder",
 *             "Public Cloud Azure",
 *             "Public Cloud AWS",
 *         ],
 *     },
 *     allow: {},
 *     expireTime: "2025-12-31T23:59:59Z",
 * }, {
 *     dependsOn: [apigeeOrgSecurityAddonsConfig],
 * });
 * ```
 *
 * ## Import
 *
 * SecurityAction can be imported using any of these accepted formats:
 *
 * * `organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}`
 *
 * * `{{org_id}}/{{env_id}}/{{security_action_id}}`
 *
 * When using the `pulumi import` command, SecurityAction can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:apigee/securityAction:SecurityAction default organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:apigee/securityAction:SecurityAction default {{org_id}}/{{env_id}}/{{security_action_id}}
 * ```
 */
export class SecurityAction extends pulumi.CustomResource {
    /**
     * Get an existing SecurityAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityActionState, opts?: pulumi.CustomResourceOptions): SecurityAction {
        return new SecurityAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/securityAction:SecurityAction';

    /**
     * Returns true if the given object is an instance of SecurityAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityAction.__pulumiType;
    }

    /**
     * Allow a request through if it matches this SecurityAction.
     */
    declare public readonly allow: pulumi.Output<outputs.apigee.SecurityActionAllow | undefined>;
    /**
     * If unset, this would apply to all proxies in the environment.
     * If set, this action is enforced only if at least one proxy in the repeated
     * list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
     * There can be at most 100 enabled actions with proxies set in an env.
     * Several other restrictions apply on conditions and are detailed later.
     */
    declare public readonly apiProxies: pulumi.Output<string[] | undefined>;
    /**
     * A valid SecurityAction must contain at least one condition.
     * Structure is documented below.
     */
    declare public readonly conditionConfig: pulumi.Output<outputs.apigee.SecurityActionConditionConfig>;
    /**
     * The create time for this SecurityAction.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
     * Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Deny a request through if it matches this SecurityAction.
     * Structure is documented below.
     */
    declare public readonly deny: pulumi.Output<outputs.apigee.SecurityActionDeny | undefined>;
    /**
     * An optional user provided description of the SecurityAction.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The Apigee environment that this security action applies to.
     */
    declare public readonly envId: pulumi.Output<string>;
    /**
     * The expiration for this SecurityAction.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
     * fractional digits. Offsets other than "Z" are also accepted.
     * Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
     */
    declare public readonly expireTime: pulumi.Output<string | undefined>;
    /**
     * Flag a request through if it matches this SecurityAction.
     * Structure is documented below.
     */
    declare public readonly flag: pulumi.Output<outputs.apigee.SecurityActionFlag | undefined>;
    /**
     * The organization that this security action applies to.
     */
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * The ID to use for the SecurityAction, which will become the final component of the action's resource name.
     * This value should be 0-61 characters, and valid format is (^a-z?$).
     */
    declare public readonly securityActionId: pulumi.Output<string>;
    /**
     * Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
     * Possible values are: `ENABLED`, `DISABLED`.
     */
    declare public readonly state: pulumi.Output<string>;
    /**
     * The TTL for this SecurityAction.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     */
    declare public readonly ttl: pulumi.Output<string | undefined>;
    /**
     * The update time for this SecurityAction. This reflects when this SecurityAction changed states.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
     * Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a SecurityAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityActionArgs | SecurityActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityActionState | undefined;
            resourceInputs["allow"] = state?.allow;
            resourceInputs["apiProxies"] = state?.apiProxies;
            resourceInputs["conditionConfig"] = state?.conditionConfig;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["deny"] = state?.deny;
            resourceInputs["description"] = state?.description;
            resourceInputs["envId"] = state?.envId;
            resourceInputs["expireTime"] = state?.expireTime;
            resourceInputs["flag"] = state?.flag;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["securityActionId"] = state?.securityActionId;
            resourceInputs["state"] = state?.state;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as SecurityActionArgs | undefined;
            if (args?.conditionConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'conditionConfig'");
            }
            if (args?.envId === undefined && !opts.urn) {
                throw new Error("Missing required property 'envId'");
            }
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if (args?.securityActionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityActionId'");
            }
            if (args?.state === undefined && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            resourceInputs["allow"] = args?.allow;
            resourceInputs["apiProxies"] = args?.apiProxies;
            resourceInputs["conditionConfig"] = args?.conditionConfig;
            resourceInputs["deny"] = args?.deny;
            resourceInputs["description"] = args?.description;
            resourceInputs["envId"] = args?.envId;
            resourceInputs["expireTime"] = args?.expireTime;
            resourceInputs["flag"] = args?.flag;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["securityActionId"] = args?.securityActionId;
            resourceInputs["state"] = args?.state;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityAction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityAction resources.
 */
export interface SecurityActionState {
    /**
     * Allow a request through if it matches this SecurityAction.
     */
    allow?: pulumi.Input<inputs.apigee.SecurityActionAllow>;
    /**
     * If unset, this would apply to all proxies in the environment.
     * If set, this action is enforced only if at least one proxy in the repeated
     * list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
     * There can be at most 100 enabled actions with proxies set in an env.
     * Several other restrictions apply on conditions and are detailed later.
     */
    apiProxies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A valid SecurityAction must contain at least one condition.
     * Structure is documented below.
     */
    conditionConfig?: pulumi.Input<inputs.apigee.SecurityActionConditionConfig>;
    /**
     * The create time for this SecurityAction.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
     * Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
     */
    createTime?: pulumi.Input<string>;
    /**
     * Deny a request through if it matches this SecurityAction.
     * Structure is documented below.
     */
    deny?: pulumi.Input<inputs.apigee.SecurityActionDeny>;
    /**
     * An optional user provided description of the SecurityAction.
     */
    description?: pulumi.Input<string>;
    /**
     * The Apigee environment that this security action applies to.
     */
    envId?: pulumi.Input<string>;
    /**
     * The expiration for this SecurityAction.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
     * fractional digits. Offsets other than "Z" are also accepted.
     * Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
     */
    expireTime?: pulumi.Input<string>;
    /**
     * Flag a request through if it matches this SecurityAction.
     * Structure is documented below.
     */
    flag?: pulumi.Input<inputs.apigee.SecurityActionFlag>;
    /**
     * The organization that this security action applies to.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The ID to use for the SecurityAction, which will become the final component of the action's resource name.
     * This value should be 0-61 characters, and valid format is (^a-z?$).
     */
    securityActionId?: pulumi.Input<string>;
    /**
     * Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
     * Possible values are: `ENABLED`, `DISABLED`.
     */
    state?: pulumi.Input<string>;
    /**
     * The TTL for this SecurityAction.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     */
    ttl?: pulumi.Input<string>;
    /**
     * The update time for this SecurityAction. This reflects when this SecurityAction changed states.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
     * Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityAction resource.
 */
export interface SecurityActionArgs {
    /**
     * Allow a request through if it matches this SecurityAction.
     */
    allow?: pulumi.Input<inputs.apigee.SecurityActionAllow>;
    /**
     * If unset, this would apply to all proxies in the environment.
     * If set, this action is enforced only if at least one proxy in the repeated
     * list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
     * There can be at most 100 enabled actions with proxies set in an env.
     * Several other restrictions apply on conditions and are detailed later.
     */
    apiProxies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A valid SecurityAction must contain at least one condition.
     * Structure is documented below.
     */
    conditionConfig: pulumi.Input<inputs.apigee.SecurityActionConditionConfig>;
    /**
     * Deny a request through if it matches this SecurityAction.
     * Structure is documented below.
     */
    deny?: pulumi.Input<inputs.apigee.SecurityActionDeny>;
    /**
     * An optional user provided description of the SecurityAction.
     */
    description?: pulumi.Input<string>;
    /**
     * The Apigee environment that this security action applies to.
     */
    envId: pulumi.Input<string>;
    /**
     * The expiration for this SecurityAction.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
     * fractional digits. Offsets other than "Z" are also accepted.
     * Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
     */
    expireTime?: pulumi.Input<string>;
    /**
     * Flag a request through if it matches this SecurityAction.
     * Structure is documented below.
     */
    flag?: pulumi.Input<inputs.apigee.SecurityActionFlag>;
    /**
     * The organization that this security action applies to.
     */
    orgId: pulumi.Input<string>;
    /**
     * The ID to use for the SecurityAction, which will become the final component of the action's resource name.
     * This value should be 0-61 characters, and valid format is (^a-z?$).
     */
    securityActionId: pulumi.Input<string>;
    /**
     * Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
     * Possible values are: `ENABLED`, `DISABLED`.
     */
    state: pulumi.Input<string>;
    /**
     * The TTL for this SecurityAction.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     */
    ttl?: pulumi.Input<string>;
}
