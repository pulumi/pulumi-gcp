// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Apigee NAT (network address translation) address. A NAT address is a static external IP address used for Internet egress traffic. This is not avaible for Apigee hybrid.
 * Apigee NAT addresses are not automatically activated because they might require explicit allow entries on the target systems first. See https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances.natAddresses/activate
 *
 * To get more information about NatAddress, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances.natAddresses)
 * * How-to Guides
 *     * [Provisioning NAT IPs](https://cloud.google.com/apigee/docs/api-platform/security/nat-provisioning)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * NatAddress can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:apigee/natAddress:NatAddress default {{instance_id}}/natAddresses/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigee/natAddress:NatAddress default {{instance_id}}/{{name}}
 * ```
 */
export class NatAddress extends pulumi.CustomResource {
    /**
     * Get an existing NatAddress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatAddressState, opts?: pulumi.CustomResourceOptions): NatAddress {
        return new NatAddress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/natAddress:NatAddress';

    /**
     * Returns true if the given object is an instance of NatAddress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NatAddress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatAddress.__pulumiType;
    }

    /**
     * The Apigee instance associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/instances/{{instance_name}}`.
     *
     *
     * - - -
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The allocated NAT IP address.
     */
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    /**
     * Resource ID of the NAT address.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * State of the NAT IP address.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a NatAddress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatAddressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatAddressArgs | NatAddressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatAddressState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as NatAddressArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NatAddress.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NatAddress resources.
 */
export interface NatAddressState {
    /**
     * The Apigee instance associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/instances/{{instance_name}}`.
     *
     *
     * - - -
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The allocated NAT IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Resource ID of the NAT address.
     */
    name?: pulumi.Input<string>;
    /**
     * State of the NAT IP address.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NatAddress resource.
 */
export interface NatAddressArgs {
    /**
     * The Apigee instance associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/instances/{{instance_name}}`.
     *
     *
     * - - -
     */
    instanceId: pulumi.Input<string>;
    /**
     * Resource ID of the NAT address.
     */
    name?: pulumi.Input<string>;
}
