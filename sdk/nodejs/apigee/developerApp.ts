// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates an app associated with a developer.
 * This API associates the developer app with the specified API product
 * and auto-generates an API key for the app to use in calls to API proxies
 * inside that API product.
 *
 * To get more information about DeveloperApp, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.developers.apps)
 * * How-to Guides
 *     * [Creating a developer](https://cloud.google.com/apigee/docs/api-platform/publish/creating-apps-surface-your-api)
 *
 * ## Example Usage
 *
 * ### Apigee Developer App Basic
 *
 * ### Apigee Developer App Basic Test
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as time from "@pulumiverse/time";
 *
 * const project = new gcp.organizations.Project("project", {
 *     projectId: "prj",
 *     name: "prj",
 *     orgId: "123456789",
 *     billingAccount: "000000-0000000-0000000-000000",
 *     deletionPolicy: "DELETE",
 * });
 * const wait60Seconds = new time.index.Sleep("wait_60_seconds", {createDuration: "60s"}, {
 *     dependsOn: [project],
 * });
 * const apigee = new gcp.projects.Service("apigee", {
 *     project: project.projectId,
 *     service: "apigee.googleapis.com",
 * }, {
 *     dependsOn: [wait60Seconds],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
 *     analyticsRegion: "us-central1",
 *     projectId: project.projectId,
 *     disableVpcPeering: true,
 * }, {
 *     dependsOn: [apigee],
 * });
 * const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
 *     name: "instance",
 *     location: "us-central1",
 *     orgId: apigeeOrg.id,
 * });
 * const apiProduct = new gcp.apigee.ApiProduct("api_product", {
 *     name: "sample-api",
 *     orgId: apigeeOrg.id,
 *     displayName: "A sample API Product",
 *     approvalType: "auto",
 *     scopes: [
 *         "read:weather",
 *         "write:reports",
 *         "write:files",
 *     ],
 * }, {
 *     dependsOn: [apigeeInstance],
 * });
 * const developer = new gcp.apigee.Developer("developer", {
 *     email: "john.doe@acme.com",
 *     firstName: "John",
 *     lastName: "Doe",
 *     userName: "john.doe",
 *     orgId: apigeeOrg.id,
 * }, {
 *     dependsOn: [apigeeInstance],
 * });
 * const apigeeDeveloperApp = new gcp.apigee.DeveloperApp("apigee_developer_app", {
 *     name: "sample-app",
 *     appFamily: "default",
 *     developerEmail: developer.email,
 *     orgId: apigeeOrg.id,
 *     callbackUrl: "https://example-call.url",
 *     keyExpiresIn: "-1",
 *     status: "approved",
 *     apiProducts: [apiProduct.name],
 *     scopes: apiProduct.scopes,
 *     attributes: [{
 *         name: "sample_name",
 *         value: "sample_value",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * DeveloperApp can be imported using any of these accepted formats:
 *
 * * `{{org_id}}/developers/{{developer_email}}/apps/{{name}}`
 *
 * * `{{org_id}}/{{developer_email}}/{{name}}`
 *
 * When using the `pulumi import` command, DeveloperApp can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:apigee/developerApp:DeveloperApp default {{org_id}}/developers/{{developer_email}}/apps/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:apigee/developerApp:DeveloperApp default {{org_id}}/{{developer_email}}/{{name}}
 * ```
 */
export class DeveloperApp extends pulumi.CustomResource {
    /**
     * Get an existing DeveloperApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeveloperAppState, opts?: pulumi.CustomResourceOptions): DeveloperApp {
        return new DeveloperApp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/developerApp:DeveloperApp';

    /**
     * Returns true if the given object is an instance of DeveloperApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeveloperApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeveloperApp.__pulumiType;
    }

    /**
     * List of API products associated with the developer app.
     */
    declare public readonly apiProducts: pulumi.Output<string[] | undefined>;
    /**
     * Developer app family.
     */
    declare public readonly appFamily: pulumi.Output<string>;
    /**
     * ID of the developer app. This ID is not user specified but is
     * automatically generated on app creation. appId is a UUID.
     */
    declare public /*out*/ readonly appId: pulumi.Output<string>;
    /**
     * Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     */
    declare public readonly attributes: pulumi.Output<outputs.apigee.DeveloperAppAttribute[] | undefined>;
    /**
     * Callback URL used by OAuth 2.0 authorization servers to communicate
     * authorization codes back to developer apps.
     */
    declare public readonly callbackUrl: pulumi.Output<string>;
    /**
     * Time at which the developer was created in milliseconds since epoch.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Output only. Set of credentials for the developer app consisting of
     * the consumer key/secret pairs associated with the API products.
     * Structure is documented below.
     */
    declare public /*out*/ readonly credentials: pulumi.Output<outputs.apigee.DeveloperAppCredential[]>;
    /**
     * Email address of the developer.
     * This value is used to uniquely identify the developer in Apigee hybrid.
     * Note that the email address has to be in lowercase only.
     */
    declare public readonly developerEmail: pulumi.Output<string>;
    /**
     * ID of the developer.
     */
    declare public /*out*/ readonly developerId: pulumi.Output<string>;
    /**
     * Expiration time, in milliseconds, for the consumer key that is generated
     * for the developer app. If not set or left to the default value of -1,
     * the API key never expires. The expiration time can't be updated after it is set.
     */
    declare public readonly keyExpiresIn: pulumi.Output<string | undefined>;
    /**
     * Time at which the developer was last modified in milliseconds since epoch.
     */
    declare public /*out*/ readonly lastModifiedAt: pulumi.Output<string>;
    /**
     * Name of the developer app.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     */
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * Scopes to apply to the developer app.
     * The specified scopes must already exist for the API product that
     * you associate with the developer app.
     */
    declare public readonly scopes: pulumi.Output<string[] | undefined>;
    /**
     * Status of the credential. Valid values include approved or revoked.
     */
    declare public readonly status: pulumi.Output<string>;

    /**
     * Create a DeveloperApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeveloperAppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeveloperAppArgs | DeveloperAppState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeveloperAppState | undefined;
            resourceInputs["apiProducts"] = state?.apiProducts;
            resourceInputs["appFamily"] = state?.appFamily;
            resourceInputs["appId"] = state?.appId;
            resourceInputs["attributes"] = state?.attributes;
            resourceInputs["callbackUrl"] = state?.callbackUrl;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["credentials"] = state?.credentials;
            resourceInputs["developerEmail"] = state?.developerEmail;
            resourceInputs["developerId"] = state?.developerId;
            resourceInputs["keyExpiresIn"] = state?.keyExpiresIn;
            resourceInputs["lastModifiedAt"] = state?.lastModifiedAt;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["scopes"] = state?.scopes;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as DeveloperAppArgs | undefined;
            if (args?.callbackUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'callbackUrl'");
            }
            if (args?.developerEmail === undefined && !opts.urn) {
                throw new Error("Missing required property 'developerEmail'");
            }
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["apiProducts"] = args?.apiProducts;
            resourceInputs["appFamily"] = args?.appFamily;
            resourceInputs["attributes"] = args?.attributes;
            resourceInputs["callbackUrl"] = args?.callbackUrl;
            resourceInputs["developerEmail"] = args?.developerEmail;
            resourceInputs["keyExpiresIn"] = args?.keyExpiresIn;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["scopes"] = args?.scopes;
            resourceInputs["status"] = args?.status;
            resourceInputs["appId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["credentials"] = undefined /*out*/;
            resourceInputs["developerId"] = undefined /*out*/;
            resourceInputs["lastModifiedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeveloperApp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeveloperApp resources.
 */
export interface DeveloperAppState {
    /**
     * List of API products associated with the developer app.
     */
    apiProducts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Developer app family.
     */
    appFamily?: pulumi.Input<string>;
    /**
     * ID of the developer app. This ID is not user specified but is
     * automatically generated on app creation. appId is a UUID.
     */
    appId?: pulumi.Input<string>;
    /**
     * Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     */
    attributes?: pulumi.Input<pulumi.Input<inputs.apigee.DeveloperAppAttribute>[]>;
    /**
     * Callback URL used by OAuth 2.0 authorization servers to communicate
     * authorization codes back to developer apps.
     */
    callbackUrl?: pulumi.Input<string>;
    /**
     * Time at which the developer was created in milliseconds since epoch.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Output only. Set of credentials for the developer app consisting of
     * the consumer key/secret pairs associated with the API products.
     * Structure is documented below.
     */
    credentials?: pulumi.Input<pulumi.Input<inputs.apigee.DeveloperAppCredential>[]>;
    /**
     * Email address of the developer.
     * This value is used to uniquely identify the developer in Apigee hybrid.
     * Note that the email address has to be in lowercase only.
     */
    developerEmail?: pulumi.Input<string>;
    /**
     * ID of the developer.
     */
    developerId?: pulumi.Input<string>;
    /**
     * Expiration time, in milliseconds, for the consumer key that is generated
     * for the developer app. If not set or left to the default value of -1,
     * the API key never expires. The expiration time can't be updated after it is set.
     */
    keyExpiresIn?: pulumi.Input<string>;
    /**
     * Time at which the developer was last modified in milliseconds since epoch.
     */
    lastModifiedAt?: pulumi.Input<string>;
    /**
     * Name of the developer app.
     */
    name?: pulumi.Input<string>;
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Scopes to apply to the developer app.
     * The specified scopes must already exist for the API product that
     * you associate with the developer app.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of the credential. Valid values include approved or revoked.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeveloperApp resource.
 */
export interface DeveloperAppArgs {
    /**
     * List of API products associated with the developer app.
     */
    apiProducts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Developer app family.
     */
    appFamily?: pulumi.Input<string>;
    /**
     * Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     */
    attributes?: pulumi.Input<pulumi.Input<inputs.apigee.DeveloperAppAttribute>[]>;
    /**
     * Callback URL used by OAuth 2.0 authorization servers to communicate
     * authorization codes back to developer apps.
     */
    callbackUrl: pulumi.Input<string>;
    /**
     * Email address of the developer.
     * This value is used to uniquely identify the developer in Apigee hybrid.
     * Note that the email address has to be in lowercase only.
     */
    developerEmail: pulumi.Input<string>;
    /**
     * Expiration time, in milliseconds, for the consumer key that is generated
     * for the developer app. If not set or left to the default value of -1,
     * the API key never expires. The expiration time can't be updated after it is set.
     */
    keyExpiresIn?: pulumi.Input<string>;
    /**
     * Name of the developer app.
     */
    name?: pulumi.Input<string>;
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     */
    orgId: pulumi.Input<string>;
    /**
     * Scopes to apply to the developer app.
     * The specified scopes must already exist for the API product that
     * you associate with the developer app.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of the credential. Valid values include approved or revoked.
     */
    status?: pulumi.Input<string>;
}
