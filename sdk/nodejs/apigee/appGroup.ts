// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * An `AppGroup` in Apigee.
 *
 * To get more information about AppGroup, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.appgroups)
 * * How-to Guides
 *     * [Organizing client app ownership](https://cloud.google.com/apigee/docs/api-platform/publish/organizing-client-app-ownership)
 *
 * ## Example Usage
 *
 * ### Apigee App Group Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
 *     name: "apigee-range",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
 *     analyticsRegion: "us-central1",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 * }, {
 *     dependsOn: [apigeeVpcConnection],
 * });
 * const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
 *     name: "instance",
 *     location: "us-central1",
 *     orgId: apigeeOrg.id,
 *     peeringCidrRange: "SLASH_22",
 * });
 * const apigeeAppGroup = new gcp.apigee.AppGroup("apigee_app_group", {
 *     name: "my-app-group",
 *     displayName: "Test app group",
 *     channelId: "storefront",
 *     channelUri: "https://my-dev-portal.org/groups/my-group",
 *     status: "active",
 *     orgId: apigeeOrg.id,
 * }, {
 *     dependsOn: [apigeeInstance],
 * });
 * ```
 * ### Apigee App Group With Attributes
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
 *     name: "apigee-range",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
 *     analyticsRegion: "us-central1",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 * }, {
 *     dependsOn: [apigeeVpcConnection],
 * });
 * const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
 *     name: "instance",
 *     location: "us-central1",
 *     orgId: apigeeOrg.id,
 *     peeringCidrRange: "SLASH_22",
 * });
 * const apigeeAppGroup = new gcp.apigee.AppGroup("apigee_app_group", {
 *     name: "my-app-group",
 *     displayName: "Test app group",
 *     channelId: "storefront",
 *     channelUri: "https://my-dev-portal.org/groups/my-group",
 *     status: "active",
 *     orgId: apigeeOrg.id,
 *     attributes: [
 *         {
 *             name: "business_unit",
 *             value: "HR",
 *         },
 *         {
 *             name: "department",
 *             value: "payroll",
 *         },
 *     ],
 * }, {
 *     dependsOn: [apigeeInstance],
 * });
 * ```
 *
 * ## Import
 *
 * AppGroup can be imported using any of these accepted formats:
 *
 * * `{{org_id}}/appgroups/{{name}}`
 *
 * * `{{org_id}}/{{name}}`
 *
 * When using the `pulumi import` command, AppGroup can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:apigee/appGroup:AppGroup default {{org_id}}/appgroups/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:apigee/appGroup:AppGroup default {{org_id}}/{{name}}
 * ```
 */
export class AppGroup extends pulumi.CustomResource {
    /**
     * Get an existing AppGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppGroupState, opts?: pulumi.CustomResourceOptions): AppGroup {
        return new AppGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/appGroup:AppGroup';

    /**
     * Returns true if the given object is an instance of AppGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppGroup.__pulumiType;
    }

    /**
     * Internal identifier that cannot be edited
     */
    public /*out*/ readonly appGroupId!: pulumi.Output<string>;
    /**
     * A list of attributes
     * Structure is documented below.
     */
    public readonly attributes!: pulumi.Output<outputs.apigee.AppGroupAttribute[] | undefined>;
    /**
     * Channel identifier identifies the owner maintaining this grouping.
     */
    public readonly channelId!: pulumi.Output<string | undefined>;
    /**
     * A reference to the associated storefront/marketplace.
     */
    public readonly channelUri!: pulumi.Output<string | undefined>;
    /**
     * Created time as milliseconds since epoch.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * App group name displayed in the UI
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Modified time as milliseconds since epoch.
     */
    public /*out*/ readonly lastModifiedAt!: pulumi.Output<string>;
    /**
     * Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Apigee Organization associated with the Apigee app group,
     * in the format `organizations/{{org_name}}`.
     *
     *
     * - - -
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * App group name displayed in the UI
     */
    public /*out*/ readonly organization!: pulumi.Output<string>;
    /**
     * Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
     * Possible values are: `active`, `inactive`.
     */
    public readonly status!: pulumi.Output<string | undefined>;

    /**
     * Create a AppGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppGroupArgs | AppGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppGroupState | undefined;
            resourceInputs["appGroupId"] = state ? state.appGroupId : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["channelId"] = state ? state.channelId : undefined;
            resourceInputs["channelUri"] = state ? state.channelUri : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["lastModifiedAt"] = state ? state.lastModifiedAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as AppGroupArgs | undefined;
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["channelId"] = args ? args.channelId : undefined;
            resourceInputs["channelUri"] = args ? args.channelUri : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["appGroupId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["lastModifiedAt"] = undefined /*out*/;
            resourceInputs["organization"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppGroup resources.
 */
export interface AppGroupState {
    /**
     * Internal identifier that cannot be edited
     */
    appGroupId?: pulumi.Input<string>;
    /**
     * A list of attributes
     * Structure is documented below.
     */
    attributes?: pulumi.Input<pulumi.Input<inputs.apigee.AppGroupAttribute>[]>;
    /**
     * Channel identifier identifies the owner maintaining this grouping.
     */
    channelId?: pulumi.Input<string>;
    /**
     * A reference to the associated storefront/marketplace.
     */
    channelUri?: pulumi.Input<string>;
    /**
     * Created time as milliseconds since epoch.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * App group name displayed in the UI
     */
    displayName?: pulumi.Input<string>;
    /**
     * Modified time as milliseconds since epoch.
     */
    lastModifiedAt?: pulumi.Input<string>;
    /**
     * Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
     */
    name?: pulumi.Input<string>;
    /**
     * The Apigee Organization associated with the Apigee app group,
     * in the format `organizations/{{org_name}}`.
     *
     *
     * - - -
     */
    orgId?: pulumi.Input<string>;
    /**
     * App group name displayed in the UI
     */
    organization?: pulumi.Input<string>;
    /**
     * Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
     * Possible values are: `active`, `inactive`.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppGroup resource.
 */
export interface AppGroupArgs {
    /**
     * A list of attributes
     * Structure is documented below.
     */
    attributes?: pulumi.Input<pulumi.Input<inputs.apigee.AppGroupAttribute>[]>;
    /**
     * Channel identifier identifies the owner maintaining this grouping.
     */
    channelId?: pulumi.Input<string>;
    /**
     * A reference to the associated storefront/marketplace.
     */
    channelUri?: pulumi.Input<string>;
    /**
     * App group name displayed in the UI
     */
    displayName?: pulumi.Input<string>;
    /**
     * Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
     */
    name?: pulumi.Input<string>;
    /**
     * The Apigee Organization associated with the Apigee app group,
     * in the format `organizations/{{org_name}}`.
     *
     *
     * - - -
     */
    orgId: pulumi.Input<string>;
    /**
     * Valid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
     * Possible values are: `active`, `inactive`.
     */
    status?: pulumi.Input<string>;
}
