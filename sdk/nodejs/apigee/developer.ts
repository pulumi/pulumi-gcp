// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A `Developer` is an API consumer that can have apps registered in Apigee.
 *
 * To get more information about Developer, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.developers)
 * * How-to Guides
 *     * [Creating a developer](https://cloud.google.com/apigee/docs/api-platform/publish/adding-developers-your-api-product)
 *
 * ## Example Usage
 *
 * ### Apigee Developer Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
 *     name: "apigee-range",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
 *     analyticsRegion: "us-central1",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 * }, {
 *     dependsOn: [apigeeVpcConnection],
 * });
 * const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
 *     name: "my-instance",
 *     location: "us-central1",
 *     orgId: apigeeOrg.id,
 *     peeringCidrRange: "SLASH_22",
 * });
 * const apigeeDeveloper = new gcp.apigee.Developer("apigee_developer", {
 *     email: "john.doe@acme.com",
 *     firstName: "John",
 *     lastName: "Doe",
 *     userName: "john.doe",
 *     orgId: apigeeOrg.id,
 * }, {
 *     dependsOn: [apigeeInstance],
 * });
 * ```
 * ### Apigee Developer With Attributes
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
 *     name: "apigee-range",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
 *     analyticsRegion: "us-central1",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 * }, {
 *     dependsOn: [apigeeVpcConnection],
 * });
 * const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
 *     name: "my-instance",
 *     location: "us-central1",
 *     orgId: apigeeOrg.id,
 *     peeringCidrRange: "SLASH_22",
 * });
 * const apigeeDeveloper = new gcp.apigee.Developer("apigee_developer", {
 *     email: "john.doe@acme.com",
 *     firstName: "John",
 *     lastName: "Doe",
 *     userName: "john.doe",
 *     attributes: [
 *         {
 *             name: "business_unit",
 *             value: "HR",
 *         },
 *         {
 *             name: "department",
 *             value: "payroll",
 *         },
 *     ],
 *     orgId: apigeeOrg.id,
 * }, {
 *     dependsOn: [apigeeInstance],
 * });
 * ```
 *
 * ## Import
 *
 * Developer can be imported using any of these accepted formats:
 *
 * * `{{org_id}}/developers/{{email}}`
 *
 * * `{{org_id}}/{{email}}`
 *
 * When using the `pulumi import` command, Developer can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:apigee/developer:Developer default {{org_id}}/developers/{{email}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:apigee/developer:Developer default {{org_id}}/{{email}}
 * ```
 */
export class Developer extends pulumi.CustomResource {
    /**
     * Get an existing Developer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeveloperState, opts?: pulumi.CustomResourceOptions): Developer {
        return new Developer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/developer:Developer';

    /**
     * Returns true if the given object is an instance of Developer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Developer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Developer.__pulumiType;
    }

    /**
     * Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     */
    public readonly attributes!: pulumi.Output<outputs.apigee.DeveloperAttribute[] | undefined>;
    /**
     * Time at which the developer was created in milliseconds since epoch.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * First name of the developer.
     */
    public readonly firstName!: pulumi.Output<string>;
    /**
     * Time at which the developer was last modified in milliseconds since epoch.
     */
    public /*out*/ readonly lastModifiedAt!: pulumi.Output<string>;
    /**
     * Last name of the developer.
     */
    public readonly lastName!: pulumi.Output<string>;
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     *
     *
     * - - -
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * Name of the Apigee organization in which the developer resides.
     */
    public /*out*/ readonly organizatioName!: pulumi.Output<string>;
    /**
     * Status of the developer. Valid values are active and inactive.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * User name of the developer. Not used by Apigee hybrid.
     */
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a Developer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeveloperArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeveloperArgs | DeveloperState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeveloperState | undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["lastModifiedAt"] = state ? state.lastModifiedAt : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["organizatioName"] = state ? state.organizatioName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as DeveloperArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.firstName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firstName'");
            }
            if ((!args || args.lastName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lastName'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["lastModifiedAt"] = undefined /*out*/;
            resourceInputs["organizatioName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Developer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Developer resources.
 */
export interface DeveloperState {
    /**
     * Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     */
    attributes?: pulumi.Input<pulumi.Input<inputs.apigee.DeveloperAttribute>[]>;
    /**
     * Time at which the developer was created in milliseconds since epoch.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
     */
    email?: pulumi.Input<string>;
    /**
     * First name of the developer.
     */
    firstName?: pulumi.Input<string>;
    /**
     * Time at which the developer was last modified in milliseconds since epoch.
     */
    lastModifiedAt?: pulumi.Input<string>;
    /**
     * Last name of the developer.
     */
    lastName?: pulumi.Input<string>;
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     *
     *
     * - - -
     */
    orgId?: pulumi.Input<string>;
    /**
     * Name of the Apigee organization in which the developer resides.
     */
    organizatioName?: pulumi.Input<string>;
    /**
     * Status of the developer. Valid values are active and inactive.
     */
    status?: pulumi.Input<string>;
    /**
     * User name of the developer. Not used by Apigee hybrid.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Developer resource.
 */
export interface DeveloperArgs {
    /**
     * Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     */
    attributes?: pulumi.Input<pulumi.Input<inputs.apigee.DeveloperAttribute>[]>;
    /**
     * Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
     */
    email: pulumi.Input<string>;
    /**
     * First name of the developer.
     */
    firstName: pulumi.Input<string>;
    /**
     * Last name of the developer.
     */
    lastName: pulumi.Input<string>;
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     *
     *
     * - - -
     */
    orgId: pulumi.Input<string>;
    /**
     * User name of the developer. Not used by Apigee hybrid.
     */
    userName: pulumi.Input<string>;
}
