// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * TargetServer configuration. TargetServers are used to decouple a proxy TargetEndpoint HTTPTargetConnections from concrete URLs for backend services.
 *
 * To get more information about TargetServer, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.targetservers/create)
 * * How-to Guides
 *     * [Load balancing across backend servers](https://cloud.google.com/apigee/docs/api-platform/deploy/load-balancing-across-backend-servers)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * TargetServer can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:apigee/targetServer:TargetServer default {{env_id}}/targetservers/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigee/targetServer:TargetServer default {{env_id}}/{{name}}
 * ```
 */
export class TargetServer extends pulumi.CustomResource {
    /**
     * Get an existing TargetServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TargetServerState, opts?: pulumi.CustomResourceOptions): TargetServer {
        return new TargetServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/targetServer:TargetServer';

    /**
     * Returns true if the given object is an instance of TargetServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TargetServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TargetServer.__pulumiType;
    }

    /**
     * A human-readable description of this TargetServer.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The Apigee environment group associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/environments/{{env_name}}`.
     *
     *
     * - - -
     */
    public readonly envId!: pulumi.Output<string>;
    /**
     * The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
     */
    public readonly isEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The resource id of this reference. Values must match the regular expression [\w\s-.]+.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Immutable. The protocol used by this TargetServer.
     * Possible values are: `HTTP`, `HTTP2`, `GRPC_TARGET`, `GRPC`, `EXTERNAL_CALLOUT`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Specifies TLS configuration info for this TargetServer. The JSON name is sSLInfo for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
     * Structure is documented below.
     */
    public readonly sSlInfo!: pulumi.Output<outputs.apigee.TargetServerSSlInfo | undefined>;

    /**
     * Create a TargetServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TargetServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TargetServerArgs | TargetServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TargetServerState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["envId"] = state ? state.envId : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["sSlInfo"] = state ? state.sSlInfo : undefined;
        } else {
            const args = argsOrState as TargetServerArgs | undefined;
            if ((!args || args.envId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envId'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["envId"] = args ? args.envId : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["sSlInfo"] = args ? args.sSlInfo : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TargetServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TargetServer resources.
 */
export interface TargetServerState {
    /**
     * A human-readable description of this TargetServer.
     */
    description?: pulumi.Input<string>;
    /**
     * The Apigee environment group associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/environments/{{env_name}}`.
     *
     *
     * - - -
     */
    envId?: pulumi.Input<string>;
    /**
     * The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
     */
    host?: pulumi.Input<string>;
    /**
     * Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * The resource id of this reference. Values must match the regular expression [\w\s-.]+.
     */
    name?: pulumi.Input<string>;
    /**
     * The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
     */
    port?: pulumi.Input<number>;
    /**
     * Immutable. The protocol used by this TargetServer.
     * Possible values are: `HTTP`, `HTTP2`, `GRPC_TARGET`, `GRPC`, `EXTERNAL_CALLOUT`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Specifies TLS configuration info for this TargetServer. The JSON name is sSLInfo for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
     * Structure is documented below.
     */
    sSlInfo?: pulumi.Input<inputs.apigee.TargetServerSSlInfo>;
}

/**
 * The set of arguments for constructing a TargetServer resource.
 */
export interface TargetServerArgs {
    /**
     * A human-readable description of this TargetServer.
     */
    description?: pulumi.Input<string>;
    /**
     * The Apigee environment group associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/environments/{{env_name}}`.
     *
     *
     * - - -
     */
    envId: pulumi.Input<string>;
    /**
     * The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
     */
    host: pulumi.Input<string>;
    /**
     * Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * The resource id of this reference. Values must match the regular expression [\w\s-.]+.
     */
    name?: pulumi.Input<string>;
    /**
     * The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
     */
    port: pulumi.Input<number>;
    /**
     * Immutable. The protocol used by this TargetServer.
     * Possible values are: `HTTP`, `HTTP2`, `GRPC_TARGET`, `GRPC`, `EXTERNAL_CALLOUT`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Specifies TLS configuration info for this TargetServer. The JSON name is sSLInfo for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
     * Structure is documented below.
     */
    sSlInfo?: pulumi.Input<inputs.apigee.TargetServerSSlInfo>;
}
