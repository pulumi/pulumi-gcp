// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Security monitoring condition for risk assessment version 2 in Apigee.
 *
 * To get more information about SecurityMonitoringCondition, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.securityMonitoringConditions/create)
 * * How-to Guides
 *     * [Creating a security monitoring condition](https://cloud.google.com/apigee/docs/api-security/security-scores#monitoring-conditions)
 *
 * ## Example Usage
 *
 * ### Apigee Security Monitoring Condition Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
 *     name: "apigee-range",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
 *     analyticsRegion: "us-central1",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 * }, {
 *     dependsOn: [apigeeVpcConnection],
 * });
 * const env = new gcp.apigee.Environment("env", {
 *     name: "my-environment",
 *     description: "Apigee Environment",
 *     displayName: "environment-1",
 *     orgId: apigeeOrg.id,
 * });
 * const apigeeOrgSecurityAddonsConfig = new gcp.apigee.AddonsConfig("apigee_org_security_addons_config", {
 *     org: apigeeOrg.name,
 *     addonsConfig: {
 *         apiSecurityConfig: {
 *             enabled: true,
 *         },
 *     },
 * });
 * const securityMonitoringCondition = new gcp.apigee.SecurityMonitoringCondition("security_monitoring_condition", {
 *     conditionId: "my-condition",
 *     orgId: apigeeOrg.id,
 *     profile: "google-default",
 *     scope: "my-environment",
 *     includeAllResources: {},
 * }, {
 *     dependsOn: [apigeeOrgSecurityAddonsConfig],
 * });
 * ```
 *
 * ## Import
 *
 * SecurityMonitoringCondition can be imported using any of these accepted formats:
 *
 * * `{{org_id}}/securityMonitoringConditions/{{condition_id}}`
 *
 * * `{{org_id}}/{{condition_id}}`
 *
 * When using the `pulumi import` command, SecurityMonitoringCondition can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:apigee/securityMonitoringCondition:SecurityMonitoringCondition default {{org_id}}/securityMonitoringConditions/{{condition_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:apigee/securityMonitoringCondition:SecurityMonitoringCondition default {{org_id}}/{{condition_id}}
 * ```
 */
export class SecurityMonitoringCondition extends pulumi.CustomResource {
    /**
     * Get an existing SecurityMonitoringCondition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityMonitoringConditionState, opts?: pulumi.CustomResourceOptions): SecurityMonitoringCondition {
        return new SecurityMonitoringCondition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/securityMonitoringCondition:SecurityMonitoringCondition';

    /**
     * Returns true if the given object is an instance of SecurityMonitoringCondition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityMonitoringCondition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityMonitoringCondition.__pulumiType;
    }

    /**
     * Resource ID of the security monitoring condition.
     *
     *
     * - - -
     */
    public readonly conditionId!: pulumi.Output<string>;
    /**
     * The timestamp at which this profile was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A nested object resource.
     */
    public readonly includeAllResources!: pulumi.Output<outputs.apigee.SecurityMonitoringConditionIncludeAllResources | undefined>;
    /**
     * Name of the security monitoring condition resource,
     * in the format `organizations/{{org_name}}/securityMonitoringConditions/{{condition_id}}`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The Apigee Organization associated with the Apigee Security Monitoring Condition,
     * in the format `organizations/{{org_name}}`.
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * ID of security profile of the security monitoring condition.
     */
    public readonly profile!: pulumi.Output<string>;
    /**
     * ID of security profile of the security monitoring condition.
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * Total number of deployed resources within scope.
     */
    public /*out*/ readonly totalDeployedResources!: pulumi.Output<number>;
    /**
     * Total number of monitored resources within this condition.
     */
    public /*out*/ readonly totalMonitoredResources!: pulumi.Output<number>;
    /**
     * The timestamp at which this profile was most recently updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a SecurityMonitoringCondition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityMonitoringConditionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityMonitoringConditionArgs | SecurityMonitoringConditionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityMonitoringConditionState | undefined;
            resourceInputs["conditionId"] = state ? state.conditionId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["includeAllResources"] = state ? state.includeAllResources : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["profile"] = state ? state.profile : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["totalDeployedResources"] = state ? state.totalDeployedResources : undefined;
            resourceInputs["totalMonitoredResources"] = state ? state.totalMonitoredResources : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as SecurityMonitoringConditionArgs | undefined;
            if ((!args || args.conditionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditionId'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.profile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profile'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["conditionId"] = args ? args.conditionId : undefined;
            resourceInputs["includeAllResources"] = args ? args.includeAllResources : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["profile"] = args ? args.profile : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["totalDeployedResources"] = undefined /*out*/;
            resourceInputs["totalMonitoredResources"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityMonitoringCondition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityMonitoringCondition resources.
 */
export interface SecurityMonitoringConditionState {
    /**
     * Resource ID of the security monitoring condition.
     *
     *
     * - - -
     */
    conditionId?: pulumi.Input<string>;
    /**
     * The timestamp at which this profile was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A nested object resource.
     */
    includeAllResources?: pulumi.Input<inputs.apigee.SecurityMonitoringConditionIncludeAllResources>;
    /**
     * Name of the security monitoring condition resource,
     * in the format `organizations/{{org_name}}/securityMonitoringConditions/{{condition_id}}`.
     */
    name?: pulumi.Input<string>;
    /**
     * The Apigee Organization associated with the Apigee Security Monitoring Condition,
     * in the format `organizations/{{org_name}}`.
     */
    orgId?: pulumi.Input<string>;
    /**
     * ID of security profile of the security monitoring condition.
     */
    profile?: pulumi.Input<string>;
    /**
     * ID of security profile of the security monitoring condition.
     */
    scope?: pulumi.Input<string>;
    /**
     * Total number of deployed resources within scope.
     */
    totalDeployedResources?: pulumi.Input<number>;
    /**
     * Total number of monitored resources within this condition.
     */
    totalMonitoredResources?: pulumi.Input<number>;
    /**
     * The timestamp at which this profile was most recently updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityMonitoringCondition resource.
 */
export interface SecurityMonitoringConditionArgs {
    /**
     * Resource ID of the security monitoring condition.
     *
     *
     * - - -
     */
    conditionId: pulumi.Input<string>;
    /**
     * A nested object resource.
     */
    includeAllResources?: pulumi.Input<inputs.apigee.SecurityMonitoringConditionIncludeAllResources>;
    /**
     * The Apigee Organization associated with the Apigee Security Monitoring Condition,
     * in the format `organizations/{{org_name}}`.
     */
    orgId: pulumi.Input<string>;
    /**
     * ID of security profile of the security monitoring condition.
     */
    profile: pulumi.Input<string>;
    /**
     * ID of security profile of the security monitoring condition.
     */
    scope: pulumi.Input<string>;
}
