// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Apigee Dns Zone.
 *
 * To get more information about DnsZone, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.dnsZones/create)
 * * How-to Guides
 *     * [Creating a DnsZone](https://cloud.google.com/apigee/docs/api-platform/get-started/create-dns)
 *
 * ## Example Usage
 *
 * ### Apigee Dns Zone Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
 * const org = new gcp.apigee.Organization("org", {
 *     description: "Terraform-provisioned basic Apigee Org without VPC Peering.",
 *     analyticsRegion: "us-central1",
 *     projectId: current.then(current => current.project),
 *     disableVpcPeering: true,
 * });
 * const apigeeDnsZone = new gcp.apigee.DnsZone("apigee_dns_zone", {
 *     orgId: apigeeOrg.id,
 *     dnsZoneId: "test1",
 *     domain: "foo.com",
 *     description: "test",
 *     peeringConfig: {
 *         targetProjectId: current.then(current => current.project),
 *         targetNetworkId: apigeeNetwork.id,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * DnsZone can be imported using any of these accepted formats:
 *
 * * `{{org_id}}/dnsZones/{{dns_zone_id}}`
 *
 * * `{{org_id}}/{{dns_zone_id}}`
 *
 * When using the `pulumi import` command, DnsZone can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:apigee/dnsZone:DnsZone default {{org_id}}/dnsZones/{{dns_zone_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:apigee/dnsZone:DnsZone default {{org_id}}/{{dns_zone_id}}
 * ```
 */
export class DnsZone extends pulumi.CustomResource {
    /**
     * Get an existing DnsZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsZoneState, opts?: pulumi.CustomResourceOptions): DnsZone {
        return new DnsZone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/dnsZone:DnsZone';

    /**
     * Returns true if the given object is an instance of DnsZone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsZone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsZone.__pulumiType;
    }

    /**
     * Description for the zone.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * ID of the dns zone.
     */
    declare public readonly dnsZoneId: pulumi.Output<string>;
    /**
     * Doamin for the zone.
     */
    declare public readonly domain: pulumi.Output<string>;
    /**
     * Name of the Dns Zone in the following format:
     * organizations/{organization}/dnsZones/{dnsZone}.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     */
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * Peering zone config
     * Structure is documented below.
     */
    declare public readonly peeringConfig: pulumi.Output<outputs.apigee.DnsZonePeeringConfig>;

    /**
     * Create a DnsZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsZoneArgs | DnsZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsZoneState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["dnsZoneId"] = state?.dnsZoneId;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["peeringConfig"] = state?.peeringConfig;
        } else {
            const args = argsOrState as DnsZoneArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.dnsZoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dnsZoneId'");
            }
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if (args?.peeringConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'peeringConfig'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["dnsZoneId"] = args?.dnsZoneId;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["peeringConfig"] = args?.peeringConfig;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsZone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsZone resources.
 */
export interface DnsZoneState {
    /**
     * Description for the zone.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the dns zone.
     */
    dnsZoneId?: pulumi.Input<string>;
    /**
     * Doamin for the zone.
     */
    domain?: pulumi.Input<string>;
    /**
     * Name of the Dns Zone in the following format:
     * organizations/{organization}/dnsZones/{dnsZone}.
     */
    name?: pulumi.Input<string>;
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Peering zone config
     * Structure is documented below.
     */
    peeringConfig?: pulumi.Input<inputs.apigee.DnsZonePeeringConfig>;
}

/**
 * The set of arguments for constructing a DnsZone resource.
 */
export interface DnsZoneArgs {
    /**
     * Description for the zone.
     */
    description: pulumi.Input<string>;
    /**
     * ID of the dns zone.
     */
    dnsZoneId: pulumi.Input<string>;
    /**
     * Doamin for the zone.
     */
    domain: pulumi.Input<string>;
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     */
    orgId: pulumi.Input<string>;
    /**
     * Peering zone config
     * Structure is documented below.
     */
    peeringConfig: pulumi.Input<inputs.apigee.DnsZonePeeringConfig>;
}
