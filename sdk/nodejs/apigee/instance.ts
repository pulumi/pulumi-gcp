// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * An `Instance` is the runtime dataplane in Apigee.
 *
 * To get more information about Instance, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances/create)
 * * How-to Guides
 *     * [Creating a runtime instance](https://cloud.google.com/apigee/docs/api-platform/get-started/create-instance)
 *
 * ## Example Usage
 *
 * ### Apigee Instance Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
 *     name: "apigee-range",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
 *     analyticsRegion: "us-central1",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 * }, {
 *     dependsOn: [apigeeVpcConnection],
 * });
 * const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
 *     name: "my-instance-name",
 *     location: "us-central1",
 *     orgId: apigeeOrg.id,
 * });
 * ```
 * ### Apigee Instance Cidr Range
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
 *     name: "apigee-range",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 22,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
 *     analyticsRegion: "us-central1",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 * }, {
 *     dependsOn: [apigeeVpcConnection],
 * });
 * const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
 *     name: "my-instance-name",
 *     location: "us-central1",
 *     orgId: apigeeOrg.id,
 *     peeringCidrRange: "SLASH_22",
 * });
 * ```
 * ### Apigee Instance Ip Range
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
 *     name: "apigee-range",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 22,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
 *     analyticsRegion: "us-central1",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 * }, {
 *     dependsOn: [apigeeVpcConnection],
 * });
 * const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
 *     name: "my-instance-name",
 *     location: "us-central1",
 *     orgId: apigeeOrg.id,
 *     ipRange: "10.87.8.0/22",
 * });
 * ```
 * ### Apigee Instance Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
 *     name: "apigee-range",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const apigeeKeyring = new gcp.kms.KeyRing("apigee_keyring", {
 *     name: "apigee-keyring",
 *     location: "us-central1",
 * });
 * const apigeeKey = new gcp.kms.CryptoKey("apigee_key", {
 *     name: "apigee-key",
 *     keyRing: apigeeKeyring.id,
 * });
 * const apigeeSa = new gcp.projects.ServiceIdentity("apigee_sa", {
 *     project: project.projectId,
 *     service: apigee.service,
 * });
 * const apigeeSaKeyuser = new gcp.kms.CryptoKeyIAMMember("apigee_sa_keyuser", {
 *     cryptoKeyId: apigeeKey.id,
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     member: apigeeSa.member,
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
 *     analyticsRegion: "us-central1",
 *     displayName: "apigee-org",
 *     description: "Auto-provisioned Apigee Org.",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 *     runtimeDatabaseEncryptionKeyName: apigeeKey.id,
 * }, {
 *     dependsOn: [
 *         apigeeVpcConnection,
 *         apigeeSaKeyuser,
 *     ],
 * });
 * const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
 *     name: "my-instance-name",
 *     location: "us-central1",
 *     description: "Auto-managed Apigee Runtime Instance",
 *     displayName: "my-instance-name",
 *     orgId: apigeeOrg.id,
 *     diskEncryptionKeyName: apigeeKey.id,
 * });
 * ```
 *
 * ## Import
 *
 * Instance can be imported using any of these accepted formats:
 *
 * * `{{org_id}}/instances/{{name}}`
 *
 * * `{{org_id}}/{{name}}`
 *
 * When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:apigee/instance:Instance default {{org_id}}/instances/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:apigee/instance:Instance default {{org_id}}/{{name}}
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apigee/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * Access logging configuration enables the access logging feature at the instance.
     * Apigee customers can enable access logging to ship the access logs to their own project's cloud logging.
     * Structure is documented below.
     */
    declare public readonly accessLoggingConfig: pulumi.Output<outputs.apigee.InstanceAccessLoggingConfig | undefined>;
    /**
     * Optional. Customer accept list represents the list of projects (id/number) on customer
     * side that can privately connect to the service attachment. It is an optional field
     * which the customers can provide during the instance creation. By default, the customer
     * project associated with the Apigee organization will be included to the list.
     */
    declare public readonly consumerAcceptLists: pulumi.Output<string[]>;
    /**
     * Description of the instance.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only.
     * Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
     */
    declare public readonly diskEncryptionKeyName: pulumi.Output<string | undefined>;
    /**
     * Display name of the instance.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * Output only. Hostname or IP address of the exposed Apigee endpoint used by clients to connect to the service.
     */
    declare public /*out*/ readonly host: pulumi.Output<string>;
    /**
     * IP range represents the customer-provided CIDR block of length 22 that will be used for
     * the Apigee instance creation. This optional range, if provided, should be freely
     * available as part of larger named range the customer has allocated to the Service
     * Networking peering. If this is not provided, Apigee will automatically request for any
     * available /22 CIDR block from Service Networking. The customer should use this CIDR block
     * for configuring their firewall needs to allow traffic from Apigee.
     * Input format: "a.b.c.d/22"
     */
    declare public readonly ipRange: pulumi.Output<string | undefined>;
    /**
     * Required. Compute Engine location where the instance resides.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Resource ID of the instance.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     */
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * The size of the CIDR block range that will be reserved by the instance. For valid values,
     * see [CidrRange](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances#CidrRange) on the documentation.
     */
    declare public readonly peeringCidrRange: pulumi.Output<string>;
    /**
     * Output only. Port number of the exposed Apigee endpoint.
     */
    declare public /*out*/ readonly port: pulumi.Output<string>;
    /**
     * Output only. Resource name of the service attachment created for the instance in
     * the format: projects/*&#47;regions/*&#47;serviceAttachments/* Apigee customers can privately
     * forward traffic to this service attachment using the PSC endpoints.
     */
    declare public /*out*/ readonly serviceAttachment: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["accessLoggingConfig"] = state?.accessLoggingConfig;
            resourceInputs["consumerAcceptLists"] = state?.consumerAcceptLists;
            resourceInputs["description"] = state?.description;
            resourceInputs["diskEncryptionKeyName"] = state?.diskEncryptionKeyName;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["host"] = state?.host;
            resourceInputs["ipRange"] = state?.ipRange;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["peeringCidrRange"] = state?.peeringCidrRange;
            resourceInputs["port"] = state?.port;
            resourceInputs["serviceAttachment"] = state?.serviceAttachment;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["accessLoggingConfig"] = args?.accessLoggingConfig;
            resourceInputs["consumerAcceptLists"] = args?.consumerAcceptLists;
            resourceInputs["description"] = args?.description;
            resourceInputs["diskEncryptionKeyName"] = args?.diskEncryptionKeyName;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["ipRange"] = args?.ipRange;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["peeringCidrRange"] = args?.peeringCidrRange;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["serviceAttachment"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * Access logging configuration enables the access logging feature at the instance.
     * Apigee customers can enable access logging to ship the access logs to their own project's cloud logging.
     * Structure is documented below.
     */
    accessLoggingConfig?: pulumi.Input<inputs.apigee.InstanceAccessLoggingConfig>;
    /**
     * Optional. Customer accept list represents the list of projects (id/number) on customer
     * side that can privately connect to the service attachment. It is an optional field
     * which the customers can provide during the instance creation. By default, the customer
     * project associated with the Apigee organization will be included to the list.
     */
    consumerAcceptLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the instance.
     */
    description?: pulumi.Input<string>;
    /**
     * Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only.
     * Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
     */
    diskEncryptionKeyName?: pulumi.Input<string>;
    /**
     * Display name of the instance.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Output only. Hostname or IP address of the exposed Apigee endpoint used by clients to connect to the service.
     */
    host?: pulumi.Input<string>;
    /**
     * IP range represents the customer-provided CIDR block of length 22 that will be used for
     * the Apigee instance creation. This optional range, if provided, should be freely
     * available as part of larger named range the customer has allocated to the Service
     * Networking peering. If this is not provided, Apigee will automatically request for any
     * available /22 CIDR block from Service Networking. The customer should use this CIDR block
     * for configuring their firewall needs to allow traffic from Apigee.
     * Input format: "a.b.c.d/22"
     */
    ipRange?: pulumi.Input<string>;
    /**
     * Required. Compute Engine location where the instance resides.
     */
    location?: pulumi.Input<string>;
    /**
     * Resource ID of the instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The size of the CIDR block range that will be reserved by the instance. For valid values,
     * see [CidrRange](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances#CidrRange) on the documentation.
     */
    peeringCidrRange?: pulumi.Input<string>;
    /**
     * Output only. Port number of the exposed Apigee endpoint.
     */
    port?: pulumi.Input<string>;
    /**
     * Output only. Resource name of the service attachment created for the instance in
     * the format: projects/*&#47;regions/*&#47;serviceAttachments/* Apigee customers can privately
     * forward traffic to this service attachment using the PSC endpoints.
     */
    serviceAttachment?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * Access logging configuration enables the access logging feature at the instance.
     * Apigee customers can enable access logging to ship the access logs to their own project's cloud logging.
     * Structure is documented below.
     */
    accessLoggingConfig?: pulumi.Input<inputs.apigee.InstanceAccessLoggingConfig>;
    /**
     * Optional. Customer accept list represents the list of projects (id/number) on customer
     * side that can privately connect to the service attachment. It is an optional field
     * which the customers can provide during the instance creation. By default, the customer
     * project associated with the Apigee organization will be included to the list.
     */
    consumerAcceptLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the instance.
     */
    description?: pulumi.Input<string>;
    /**
     * Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only.
     * Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
     */
    diskEncryptionKeyName?: pulumi.Input<string>;
    /**
     * Display name of the instance.
     */
    displayName?: pulumi.Input<string>;
    /**
     * IP range represents the customer-provided CIDR block of length 22 that will be used for
     * the Apigee instance creation. This optional range, if provided, should be freely
     * available as part of larger named range the customer has allocated to the Service
     * Networking peering. If this is not provided, Apigee will automatically request for any
     * available /22 CIDR block from Service Networking. The customer should use this CIDR block
     * for configuring their firewall needs to allow traffic from Apigee.
     * Input format: "a.b.c.d/22"
     */
    ipRange?: pulumi.Input<string>;
    /**
     * Required. Compute Engine location where the instance resides.
     */
    location: pulumi.Input<string>;
    /**
     * Resource ID of the instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     */
    orgId: pulumi.Input<string>;
    /**
     * The size of the CIDR block range that will be reserved by the instance. For valid values,
     * see [CidrRange](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances#CidrRange) on the documentation.
     */
    peeringCidrRange?: pulumi.Input<string>;
}
