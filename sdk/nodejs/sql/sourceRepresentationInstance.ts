// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A source representation instance is a Cloud SQL instance that represents
 * the source database server to the Cloud SQL replica. It is visible in the
 * Cloud Console and appears the same as a regular Cloud SQL instance, but it
 * contains no data, requires no configuration or maintenance, and does not
 * affect billing. You cannot update the source representation instance.
 *
 * ## Example Usage
 *
 * ### Sql Source Representation Instance Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.sql.SourceRepresentationInstance("instance", {
 *     name: "my-instance",
 *     region: "us-central1",
 *     databaseVersion: "MYSQL_8_0",
 *     host: "10.20.30.40",
 *     port: 3306,
 *     username: "some-user",
 *     password: "password-for-the-user",
 *     dumpFilePath: "gs://replica-bucket/source-database.sql.gz",
 * });
 * ```
 * ### Sql Source Representation Instance Postgres
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.sql.SourceRepresentationInstance("instance", {
 *     name: "my-instance",
 *     region: "us-central1",
 *     databaseVersion: "POSTGRES_9_6",
 *     host: "10.20.30.40",
 *     port: 3306,
 *     username: "some-user",
 *     password: "password-for-the-user",
 *     dumpFilePath: "gs://replica-bucket/source-database.sql.gz",
 * });
 * ```
 *
 * ## Import
 *
 * SourceRepresentationInstance can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/instances/{{name}}`
 *
 * * `{{project}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, SourceRepresentationInstance can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance default projects/{{project}}/instances/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance default {{project}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance default {{name}}
 * ```
 */
export class SourceRepresentationInstance extends pulumi.CustomResource {
    /**
     * Get an existing SourceRepresentationInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceRepresentationInstanceState, opts?: pulumi.CustomResourceOptions): SourceRepresentationInstance {
        return new SourceRepresentationInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance';

    /**
     * Returns true if the given object is an instance of SourceRepresentationInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourceRepresentationInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceRepresentationInstance.__pulumiType;
    }

    /**
     * The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
     */
    declare public readonly caCertificate: pulumi.Output<string | undefined>;
    /**
     * The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
     */
    declare public readonly clientCertificate: pulumi.Output<string | undefined>;
    /**
     * The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
     */
    declare public readonly clientKey: pulumi.Output<string | undefined>;
    /**
     * The MySQL, PostgreSQL or SQL Server (beta) version to use. Supported values include MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, MYSQL_8_4, POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14, POSTGRES_15, POSTGRES_16, POSTGRES_17. Database Version Policies includes an up-to-date reference of supported versions.
     */
    declare public readonly databaseVersion: pulumi.Output<string>;
    /**
     * A file in the bucket that contains the data from the external server.
     */
    declare public readonly dumpFilePath: pulumi.Output<string | undefined>;
    /**
     * The IPv4 address and port for the external server, or the the DNS address for the external server. If the external server is hosted on Cloud SQL, the port is 5432.
     */
    declare public readonly host: pulumi.Output<string>;
    /**
     * The name of the source representation instance. Use any valid Cloud SQL instance name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The password for the replication user account.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * The externally accessible port for the source database server.
     * Defaults to 3306.
     */
    declare public readonly port: pulumi.Output<number | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The Region in which the created instance should reside.
     * If it is not provided, the provider region is used.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The replication user account on the external server.
     */
    declare public readonly username: pulumi.Output<string | undefined>;

    /**
     * Create a SourceRepresentationInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceRepresentationInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceRepresentationInstanceArgs | SourceRepresentationInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceRepresentationInstanceState | undefined;
            resourceInputs["caCertificate"] = state?.caCertificate;
            resourceInputs["clientCertificate"] = state?.clientCertificate;
            resourceInputs["clientKey"] = state?.clientKey;
            resourceInputs["databaseVersion"] = state?.databaseVersion;
            resourceInputs["dumpFilePath"] = state?.dumpFilePath;
            resourceInputs["host"] = state?.host;
            resourceInputs["name"] = state?.name;
            resourceInputs["password"] = state?.password;
            resourceInputs["port"] = state?.port;
            resourceInputs["project"] = state?.project;
            resourceInputs["region"] = state?.region;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as SourceRepresentationInstanceArgs | undefined;
            if (args?.databaseVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'databaseVersion'");
            }
            if (args?.host === undefined && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            resourceInputs["caCertificate"] = args?.caCertificate;
            resourceInputs["clientCertificate"] = args?.clientCertificate;
            resourceInputs["clientKey"] = args?.clientKey;
            resourceInputs["databaseVersion"] = args?.databaseVersion;
            resourceInputs["dumpFilePath"] = args?.dumpFilePath;
            resourceInputs["host"] = args?.host;
            resourceInputs["name"] = args?.name;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args?.port;
            resourceInputs["project"] = args?.project;
            resourceInputs["region"] = args?.region;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SourceRepresentationInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SourceRepresentationInstance resources.
 */
export interface SourceRepresentationInstanceState {
    /**
     * The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * The MySQL, PostgreSQL or SQL Server (beta) version to use. Supported values include MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, MYSQL_8_4, POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14, POSTGRES_15, POSTGRES_16, POSTGRES_17. Database Version Policies includes an up-to-date reference of supported versions.
     */
    databaseVersion?: pulumi.Input<string>;
    /**
     * A file in the bucket that contains the data from the external server.
     */
    dumpFilePath?: pulumi.Input<string>;
    /**
     * The IPv4 address and port for the external server, or the the DNS address for the external server. If the external server is hosted on Cloud SQL, the port is 5432.
     */
    host?: pulumi.Input<string>;
    /**
     * The name of the source representation instance. Use any valid Cloud SQL instance name.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the replication user account.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     */
    password?: pulumi.Input<string>;
    /**
     * The externally accessible port for the source database server.
     * Defaults to 3306.
     */
    port?: pulumi.Input<number>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The Region in which the created instance should reside.
     * If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The replication user account on the external server.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SourceRepresentationInstance resource.
 */
export interface SourceRepresentationInstanceArgs {
    /**
     * The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * The MySQL, PostgreSQL or SQL Server (beta) version to use. Supported values include MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, MYSQL_8_4, POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14, POSTGRES_15, POSTGRES_16, POSTGRES_17. Database Version Policies includes an up-to-date reference of supported versions.
     */
    databaseVersion: pulumi.Input<string>;
    /**
     * A file in the bucket that contains the data from the external server.
     */
    dumpFilePath?: pulumi.Input<string>;
    /**
     * The IPv4 address and port for the external server, or the the DNS address for the external server. If the external server is hosted on Cloud SQL, the port is 5432.
     */
    host: pulumi.Input<string>;
    /**
     * The name of the source representation instance. Use any valid Cloud SQL instance name.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the replication user account.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     */
    password?: pulumi.Input<string>;
    /**
     * The externally accessible port for the source database server.
     * Defaults to 3306.
     */
    port?: pulumi.Input<number>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The Region in which the created instance should reside.
     * If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The replication user account on the external server.
     */
    username?: pulumi.Input<string>;
}
