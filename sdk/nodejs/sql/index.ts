// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DatabaseInstanceArgs, DatabaseInstanceState } from "./databaseInstance";
export type DatabaseInstance = import("./databaseInstance").DatabaseInstance;
export const DatabaseInstance: typeof import("./databaseInstance").DatabaseInstance = null as any;
utilities.lazyLoad(exports, ["DatabaseInstance"], () => require("./databaseInstance"));

export { GetBackupRunArgs, GetBackupRunResult, GetBackupRunOutputArgs } from "./getBackupRun";
export const getBackupRun: typeof import("./getBackupRun").getBackupRun = null as any;
export const getBackupRunOutput: typeof import("./getBackupRun").getBackupRunOutput = null as any;
utilities.lazyLoad(exports, ["getBackupRun","getBackupRunOutput"], () => require("./getBackupRun"));

export { GetCaCertsArgs, GetCaCertsResult, GetCaCertsOutputArgs } from "./getCaCerts";
export const getCaCerts: typeof import("./getCaCerts").getCaCerts = null as any;
export const getCaCertsOutput: typeof import("./getCaCerts").getCaCertsOutput = null as any;
utilities.lazyLoad(exports, ["getCaCerts","getCaCertsOutput"], () => require("./getCaCerts"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDatabaseInstanceArgs, GetDatabaseInstanceResult, GetDatabaseInstanceOutputArgs } from "./getDatabaseInstance";
export const getDatabaseInstance: typeof import("./getDatabaseInstance").getDatabaseInstance = null as any;
export const getDatabaseInstanceOutput: typeof import("./getDatabaseInstance").getDatabaseInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseInstance","getDatabaseInstanceOutput"], () => require("./getDatabaseInstance"));

export { GetDatabaseInstancesArgs, GetDatabaseInstancesResult, GetDatabaseInstancesOutputArgs } from "./getDatabaseInstances";
export const getDatabaseInstances: typeof import("./getDatabaseInstances").getDatabaseInstances = null as any;
export const getDatabaseInstancesOutput: typeof import("./getDatabaseInstances").getDatabaseInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseInstances","getDatabaseInstancesOutput"], () => require("./getDatabaseInstances"));

export { SourceRepresentationInstanceArgs, SourceRepresentationInstanceState } from "./sourceRepresentationInstance";
export type SourceRepresentationInstance = import("./sourceRepresentationInstance").SourceRepresentationInstance;
export const SourceRepresentationInstance: typeof import("./sourceRepresentationInstance").SourceRepresentationInstance = null as any;
utilities.lazyLoad(exports, ["SourceRepresentationInstance"], () => require("./sourceRepresentationInstance"));

export { SslCertArgs, SslCertState } from "./sslCert";
export type SslCert = import("./sslCert").SslCert;
export const SslCert: typeof import("./sslCert").SslCert = null as any;
utilities.lazyLoad(exports, ["SslCert"], () => require("./sslCert"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:sql/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "gcp:sql/databaseInstance:DatabaseInstance":
                return new DatabaseInstance(name, <any>undefined, { urn })
            case "gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance":
                return new SourceRepresentationInstance(name, <any>undefined, { urn })
            case "gcp:sql/sslCert:SslCert":
                return new SslCert(name, <any>undefined, { urn })
            case "gcp:sql/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "sql/database", _module)
pulumi.runtime.registerResourceModule("gcp", "sql/databaseInstance", _module)
pulumi.runtime.registerResourceModule("gcp", "sql/sourceRepresentationInstance", _module)
pulumi.runtime.registerResourceModule("gcp", "sql/sslCert", _module)
pulumi.runtime.registerResourceModule("gcp", "sql/user", _module)
