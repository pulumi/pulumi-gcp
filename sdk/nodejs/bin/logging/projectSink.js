"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Manages a project-level logging sink. For more information see
 * [the official documentation](https://cloud.google.com/logging/docs/),
 * [Exporting Logs in the API](https://cloud.google.com/logging/docs/api/tasks/exporting-logs)
 * and
 * [API](https://cloud.google.com/logging/docs/reference/v2/rest/).
 *
 * > **Note:** You must have [granted the "Logs Configuration Writer"](https://cloud.google.com/logging/docs/access-control) IAM role (`roles/logging.configWriter`) to the credentials used with terraform.
 *
 * > **Note** You must [enable the Cloud Resource Manager API](https://console.cloud.google.com/apis/library/cloudresourcemanager.googleapis.com)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_sink = new gcp.logging.ProjectSink("my-sink", {
 *     // Can export to pubsub, cloud storage, or bigtable
 *     destination: "pubsub.googleapis.com/projects/my-project/topics/instance-activity",
 *     // Log all WARN or higher severity messages relating to instances
 *     filter: "resource.type = gce_instance AND severity >= WARN",
 *     // Use a unique writer (creates a unique service account used for writing)
 *     uniqueWriterIdentity: true,
 * });
 * ```
 *
 * A more complete example follows: this creates a compute instance, as well as a log sink that logs all activity to a
 * cloud storage bucket. Because we are using `unique_writer_identity`, we must grant it access to the bucket. Note that
 * this grant requires the "Project IAM Admin" IAM role (`roles/resourcemanager.projectIamAdmin`) granted to the credentials
 * used with terraform.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // Our logged compute instance
 * const my_logged_instance = new gcp.compute.Instance("my-logged-instance", {
 *     bootDisk: {
 *         initializeParams: {
 *             image: "debian-cloud/debian-9",
 *         },
 *     },
 *     machineType: "n1-standard-1",
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: "default",
 *     }],
 *     zone: "us-central1-a",
 * });
 * // A bucket to store logs in
 * const log_bucket = new gcp.storage.Bucket("log-bucket", {});
 * // Our sink; this logs all activity related to our "my-logged-instance" instance
 * const instance_sink = new gcp.logging.ProjectSink("instance-sink", {
 *     destination: log_bucket.name.apply(name => `storage.googleapis.com/${name}`),
 *     filter: my_logged_instance.instanceId.apply(instanceId => `resource.type = gce_instance AND resource.labels.instance_id = "${instanceId}"`),
 *     uniqueWriterIdentity: true,
 * });
 * // Because our sink uses a unique_writer, we must grant that writer access to the bucket.
 * const log_writer = new gcp.projects.IAMBinding("log-writer", {
 *     members: [instance_sink.writerIdentity],
 *     role: "roles/storage.objectCreator",
 * });
 * ```
 */
class ProjectSink extends pulumi.CustomResource {
    /**
     * Get an existing ProjectSink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new ProjectSink(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["destination"] = state ? state.destination : undefined;
            inputs["filter"] = state ? state.filter : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["uniqueWriterIdentity"] = state ? state.uniqueWriterIdentity : undefined;
            inputs["writerIdentity"] = state ? state.writerIdentity : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.destination === undefined) {
                throw new Error("Missing required property 'destination'");
            }
            inputs["destination"] = args ? args.destination : undefined;
            inputs["filter"] = args ? args.filter : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["uniqueWriterIdentity"] = args ? args.uniqueWriterIdentity : undefined;
            inputs["writerIdentity"] = undefined /*out*/;
        }
        super("gcp:logging/projectSink:ProjectSink", name, inputs, opts);
    }
}
exports.ProjectSink = ProjectSink;
//# sourceMappingURL=projectSink.js.map