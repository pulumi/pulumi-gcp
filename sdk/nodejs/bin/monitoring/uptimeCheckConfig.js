"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * This message configures which resources and services to monitor for availability.
 *
 *
 * To get more information about UptimeCheckConfig, see:
 *
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.uptimeCheckConfigs)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/monitoring/uptime-checks/)
 *
 * <div class = "oics-button" style="float: right; margin: 0 0 -15px">
 *   <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=uptime_check_config_http&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
 *     <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
 *   </a>
 * </div>
 * ## Example Usage - Uptime Check Config Http
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const http = new gcp.monitoring.UptimeCheckConfig("http", {
 *     contentMatchers: [{
 *         content: "example",
 *     }],
 *     displayName: "http-uptime-check",
 *     httpCheck: {
 *         path: "/some-path",
 *         port: 8010,
 *     },
 *     monitoredResource: {
 *         labels: {
 *             host: "192.168.1.1",
 *             project_id: "example",
 *         },
 *         type: "uptime_url",
 *     },
 *     timeout: "60s",
 * });
 * ```
 * <div class = "oics-button" style="float: right; margin: 0 0 -15px">
 *   <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=uptime_check_tcp&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
 *     <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
 *   </a>
 * </div>
 * ## Example Usage - Uptime Check Tcp
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const check = new gcp.monitoring.Group("check", {
 *     displayName: "uptime-check-group",
 *     filter: "resource.metadata.name=has_substring(\"foo\")",
 * });
 * const tcpGroup = new gcp.monitoring.UptimeCheckConfig("tcp_group", {
 *     displayName: "tcp-uptime-check",
 *     resourceGroup: {
 *         groupId: check.name,
 *         resourceType: "INSTANCE",
 *     },
 *     tcpCheck: {
 *         port: 888,
 *     },
 *     timeout: "60s",
 * });
 * ```
 */
class UptimeCheckConfig extends pulumi.CustomResource {
    /**
     * Get an existing UptimeCheckConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new UptimeCheckConfig(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["contentMatchers"] = state ? state.contentMatchers : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["httpCheck"] = state ? state.httpCheck : undefined;
            inputs["internalCheckers"] = state ? state.internalCheckers : undefined;
            inputs["isInternal"] = state ? state.isInternal : undefined;
            inputs["monitoredResource"] = state ? state.monitoredResource : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["period"] = state ? state.period : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["resourceGroup"] = state ? state.resourceGroup : undefined;
            inputs["selectedRegions"] = state ? state.selectedRegions : undefined;
            inputs["tcpCheck"] = state ? state.tcpCheck : undefined;
            inputs["timeout"] = state ? state.timeout : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.displayName === undefined) {
                throw new Error("Missing required property 'displayName'");
            }
            if (!args || args.timeout === undefined) {
                throw new Error("Missing required property 'timeout'");
            }
            inputs["contentMatchers"] = args ? args.contentMatchers : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["httpCheck"] = args ? args.httpCheck : undefined;
            inputs["internalCheckers"] = args ? args.internalCheckers : undefined;
            inputs["isInternal"] = args ? args.isInternal : undefined;
            inputs["monitoredResource"] = args ? args.monitoredResource : undefined;
            inputs["period"] = args ? args.period : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            inputs["selectedRegions"] = args ? args.selectedRegions : undefined;
            inputs["tcpCheck"] = args ? args.tcpCheck : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["name"] = undefined /*out*/;
        }
        super("gcp:monitoring/uptimeCheckConfig:UptimeCheckConfig", name, inputs, opts);
    }
}
exports.UptimeCheckConfig = UptimeCheckConfig;
//# sourceMappingURL=uptimeCheckConfig.js.map