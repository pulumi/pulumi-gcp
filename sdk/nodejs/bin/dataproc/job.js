"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Manages a job resource within a Dataproc cluster within GCE. For more information see
 * [the official dataproc documentation](https://cloud.google.com/dataproc/).
 *
 * !> **Note:** This resource does not support 'update' and changing any attributes will cause the resource to be recreated.
 *
 * ## Example usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const mycluster = new gcp.dataproc.Cluster("mycluster", {
 *     region: "us-central1",
 * });
 * // Submit an example pyspark job to a dataproc cluster
 * const pyspark = new gcp.dataproc.Job("pyspark", {
 *     forceDelete: true,
 *     placement: {
 *         clusterName: mycluster.name,
 *     },
 *     pysparkConfig: {
 *         mainPythonFileUri: "gs://dataproc-examples-2f10d78d114f6aaec76462e3c310f31f/src/pyspark/hello-world/hello-world.py",
 *         properties: {
 *             "spark.logConf": "true",
 *         },
 *     },
 *     region: mycluster.region,
 * });
 * // Submit an example spark job to a dataproc cluster
 * const spark = new gcp.dataproc.Job("spark", {
 *     forceDelete: true,
 *     placement: {
 *         clusterName: mycluster.name,
 *     },
 *     region: mycluster.region,
 *     sparkConfig: {
 *         args: ["1000"],
 *         jarFileUris: ["file:///usr/lib/spark/examples/jars/spark-examples.jar"],
 *         loggingConfig: {
 *             driverLogLevels: {
 *                 root: "INFO",
 *             },
 *         },
 *         mainClass: "org.apache.spark.examples.SparkPi",
 *         properties: {
 *             "spark.logConf": "true",
 *         },
 *     },
 * });
 *
 * export const pysparkStatus = pyspark.status.apply(status => status.state);
 * // Check out current state of the jobs
 * export const sparkStatus = spark.status.apply(status => status.state);
 * ```
 */
class Job extends pulumi.CustomResource {
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Job(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["driverControlsFilesUri"] = state ? state.driverControlsFilesUri : undefined;
            inputs["driverOutputResourceUri"] = state ? state.driverOutputResourceUri : undefined;
            inputs["forceDelete"] = state ? state.forceDelete : undefined;
            inputs["hadoopConfig"] = state ? state.hadoopConfig : undefined;
            inputs["hiveConfig"] = state ? state.hiveConfig : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["pigConfig"] = state ? state.pigConfig : undefined;
            inputs["placement"] = state ? state.placement : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["pysparkConfig"] = state ? state.pysparkConfig : undefined;
            inputs["reference"] = state ? state.reference : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["scheduling"] = state ? state.scheduling : undefined;
            inputs["sparkConfig"] = state ? state.sparkConfig : undefined;
            inputs["sparksqlConfig"] = state ? state.sparksqlConfig : undefined;
            inputs["status"] = state ? state.status : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.placement === undefined) {
                throw new Error("Missing required property 'placement'");
            }
            inputs["forceDelete"] = args ? args.forceDelete : undefined;
            inputs["hadoopConfig"] = args ? args.hadoopConfig : undefined;
            inputs["hiveConfig"] = args ? args.hiveConfig : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["pigConfig"] = args ? args.pigConfig : undefined;
            inputs["placement"] = args ? args.placement : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["pysparkConfig"] = args ? args.pysparkConfig : undefined;
            inputs["reference"] = args ? args.reference : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["scheduling"] = args ? args.scheduling : undefined;
            inputs["sparkConfig"] = args ? args.sparkConfig : undefined;
            inputs["sparksqlConfig"] = args ? args.sparksqlConfig : undefined;
            inputs["driverControlsFilesUri"] = undefined /*out*/;
            inputs["driverOutputResourceUri"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        super("gcp:dataproc/job:Job", name, inputs, opts);
    }
}
exports.Job = Job;
//# sourceMappingURL=job.js.map