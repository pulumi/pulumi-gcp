"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Manages a Cloud Dataproc cluster resource within GCP. For more information see
 * [the official dataproc documentation](https://cloud.google.com/dataproc/).
 *
 *
 * !> **Warning:** Due to limitations of the API, all arguments except
 * `labels`,`cluster_config.worker_config.num_instances` and `cluster_config.preemptible_worker_config.num_instances` are non-updateable. Changing others will cause recreation of the
 * whole cluster!
 *
 * ## Example Usage - Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const simplecluster = new gcp.dataproc.Cluster("simplecluster", {
 *     region: "us-central1",
 * });
 * ```
 *
 * ## Example Usage - Advanced
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const mycluster = new gcp.dataproc.Cluster("mycluster", {
 *     clusterConfig: {
 *         gceClusterConfig: {
 *             //network = "${google_compute_network.dataproc_network.name}"
 *             tags: [
 *                 "foo",
 *                 "bar",
 *             ],
 *         },
 *         // You can define multiple initialization_action blocks
 *         initializationActions: [{
 *             script: "gs://dataproc-initialization-actions/stackdriver/stackdriver.sh",
 *             timeoutSec: 500,
 *         }],
 *         masterConfig: {
 *             diskConfig: {
 *                 bootDiskSizeGb: 15,
 *                 bootDiskType: "pd-ssd",
 *             },
 *             machineType: "n1-standard-1",
 *             numInstances: 1,
 *         },
 *         preemptibleWorkerConfig: {
 *             numInstances: 0,
 *         },
 *         // Override or set some custom properties
 *         softwareConfig: {
 *             imageVersion: "1.3.7-deb9",
 *             overrideProperties: {
 *                 "dataproc:dataproc.allow.zero.workers": "true",
 *             },
 *         },
 *         stagingBucket: "dataproc-staging-bucket",
 *         workerConfig: {
 *             diskConfig: {
 *                 bootDiskSizeGb: 15,
 *                 numLocalSsds: 1,
 *             },
 *             machineType: "n1-standard-1",
 *             numInstances: 2,
 *         },
 *     },
 *     labels: {
 *         foo: "bar",
 *     },
 *     region: "us-central1",
 * });
 * ```
 *
 * ## Example Usage - Using a GPU accelerator
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const acceleratedCluster = new gcp.dataproc.Cluster("accelerated_cluster", {
 *     clusterConfig: {
 *         gceClusterConfig: {
 *             zone: "us-central1-a",
 *         },
 *         masterConfig: {
 *             accelerators: [{
 *                 acceleratorCount: 1,
 *                 acceleratorType: "nvidia-tesla-k80",
 *             }],
 *         },
 *     },
 *     region: "us-central1",
 * });
 * ```
 */
class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["clusterConfig"] = state ? state.clusterConfig : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
        }
        else {
            const args = argsOrState;
            inputs["clusterConfig"] = args ? args.clusterConfig : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
        }
        super("gcp:dataproc/cluster:Cluster", name, inputs, opts);
    }
}
exports.Cluster = Cluster;
//# sourceMappingURL=cluster.js.map