"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Persistent disks can be attached to a compute instance using [the `attached_disk`
 * section within the compute instance configuration](https://www.terraform.io/docs/providers/google/r/compute_instance.html#attached_disk).
 * However there may be situations where managing the attached disks via the compute
 * instance config isn't preferable or possible, such as attaching dynamic
 * numbers of disks using the `count` variable.
 *
 *
 * To get more information about attaching disks, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/instances/attachDisk)
 * * [Resource: google_compute_disk](https://www.terraform.io/docs/providers/google/r/compute_disk.html)
 * * How-to Guides
 *     * [Adding a persistent disk](https://cloud.google.com/compute/docs/disks/add-persistent-disk)
 *
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultAttachedDisk = new gcp.compute.AttachedDisk("default", {
 *     disk: google_compute_disk_default.selfLink,
 *     instance: google_compute_instance_default.selfLink,
 * });
 * ```
 */
class AttachedDisk extends pulumi.CustomResource {
    /**
     * Get an existing AttachedDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new AttachedDisk(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["deviceName"] = state ? state.deviceName : undefined;
            inputs["disk"] = state ? state.disk : undefined;
            inputs["instance"] = state ? state.instance : undefined;
            inputs["mode"] = state ? state.mode : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.disk === undefined) {
                throw new Error("Missing required property 'disk'");
            }
            if (!args || args.instance === undefined) {
                throw new Error("Missing required property 'instance'");
            }
            inputs["deviceName"] = args ? args.deviceName : undefined;
            inputs["disk"] = args ? args.disk : undefined;
            inputs["instance"] = args ? args.instance : undefined;
            inputs["mode"] = args ? args.mode : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["zone"] = args ? args.zone : undefined;
        }
        super("gcp:compute/attachedDisk:AttachedDisk", name, inputs, opts);
    }
}
exports.AttachedDisk = AttachedDisk;
//# sourceMappingURL=attachedDisk.js.map