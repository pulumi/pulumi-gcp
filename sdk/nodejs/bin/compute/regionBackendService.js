"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * A Region Backend Service defines a regionally-scoped group of virtual machines that will serve traffic for load balancing.
 * For more information see [the official documentation](https://cloud.google.com/compute/docs/load-balancing/internal/)
 * and [API](https://cloud.google.com/compute/docs/reference/latest/regionBackendServices).
 *
 * > **Note**: Region backend services can only be used when using internal load balancing. For external load balancing, use
 *   `google_compute_backend_service` instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHealthCheck = new gcp.compute.HealthCheck("default", {
 *     checkIntervalSec: 1,
 *     tcpHealthCheck: {
 *         port: 80,
 *     },
 *     timeoutSec: 1,
 * });
 * const foobarInstanceTemplate = new gcp.compute.InstanceTemplate("foobar", {
 *     disks: [{
 *         autoDelete: true,
 *         boot: true,
 *         sourceImage: "debian-cloud/debian-9",
 *     }],
 *     machineType: "n1-standard-1",
 *     networkInterfaces: [{
 *         network: "default",
 *     }],
 * });
 * const foo = new gcp.compute.RegionInstanceGroupManager("foo", {
 *     baseInstanceName: "foobar",
 *     instanceTemplate: foobarInstanceTemplate.selfLink,
 *     region: "us-central1",
 *     targetSize: 1,
 * });
 * const foobarRegionBackendService = new gcp.compute.RegionBackendService("foobar", {
 *     backends: [{
 *         group: foo.instanceGroup,
 *     }],
 *     description: "Hello World 1234",
 *     healthChecks: defaultHealthCheck.selfLink,
 *     protocol: "TCP",
 *     sessionAffinity: "CLIENT_IP",
 *     timeoutSec: 10,
 * });
 * ```
 */
class RegionBackendService extends pulumi.CustomResource {
    /**
     * Get an existing RegionBackendService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new RegionBackendService(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["backends"] = state ? state.backends : undefined;
            inputs["connectionDrainingTimeoutSec"] = state ? state.connectionDrainingTimeoutSec : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["fingerprint"] = state ? state.fingerprint : undefined;
            inputs["healthChecks"] = state ? state.healthChecks : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["sessionAffinity"] = state ? state.sessionAffinity : undefined;
            inputs["timeoutSec"] = state ? state.timeoutSec : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.healthChecks === undefined) {
                throw new Error("Missing required property 'healthChecks'");
            }
            inputs["backends"] = args ? args.backends : undefined;
            inputs["connectionDrainingTimeoutSec"] = args ? args.connectionDrainingTimeoutSec : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["healthChecks"] = args ? args.healthChecks : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["sessionAffinity"] = args ? args.sessionAffinity : undefined;
            inputs["timeoutSec"] = args ? args.timeoutSec : undefined;
            inputs["fingerprint"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
        }
        super("gcp:compute/regionBackendService:RegionBackendService", name, inputs, opts);
    }
}
exports.RegionBackendService = RegionBackendService;
//# sourceMappingURL=regionBackendService.js.map