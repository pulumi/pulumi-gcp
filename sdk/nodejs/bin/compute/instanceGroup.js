"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Creates a group of dissimilar Compute Engine virtual machine instances.
 * For more information, see [the official documentation](https://cloud.google.com/compute/docs/instance-groups/#unmanaged_instance_groups)
 * and [API](https://cloud.google.com/compute/docs/reference/latest/instanceGroups)
 *
 * > Recreating an instance group that's in use by another resource will give a
 * `resourceInUseByAnotherResource` error. You can avoid this error with a
 * Terraform `lifecycle` block as outlined in the example below.
 *
 * ## Example Usage - Empty instance group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const test = new gcp.compute.InstanceGroup("test", {
 *     description: "Terraform test instance group",
 *     network: google_compute_network_default.selfLink,
 *     zone: "us-central1-a",
 * });
 * ```
 *
 * ### Example Usage - With instances and named ports
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const webservers = new gcp.compute.InstanceGroup("webservers", {
 *     description: "Terraform test instance group",
 *     instances: [
 *         google_compute_instance_test.selfLink,
 *         google_compute_instance_test2.selfLink,
 *     ],
 *     namedPorts: [
 *         {
 *             name: "http",
 *             port: 8080,
 *         },
 *         {
 *             name: "https",
 *             port: 8443,
 *         },
 *     ],
 *     zone: "us-central1-a",
 * });
 * ```
 *
 * ### Example Usage - Recreating an instance group in use
 * Recreating an instance group that's in use by another resource will give a
 * `resourceInUseByAnotherResource` error. Use `lifecycle.create_before_destroy`
 * as shown in this example to avoid this type of error.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const debianImage = pulumi.output(gcp.compute.getImage({
 *     family: "debian-9",
 *     project: "debian-cloud",
 * }));
 * const stagingHealth = new gcp.compute.HttpsHealthCheck("staging_health", {
 *     requestPath: "/health_check",
 * });
 * const stagingVm = new gcp.compute.Instance("staging_vm", {
 *     bootDisk: {
 *         initializeParams: {
 *             image: debianImage.apply(debianImage => debianImage.selfLink),
 *         },
 *     },
 *     machineType: "n1-standard-1",
 *     networkInterfaces: [{
 *         network: "default",
 *     }],
 *     zone: "us-central1-c",
 * });
 * const stagingGroup = new gcp.compute.InstanceGroup("staging_group", {
 *     instances: [stagingVm.selfLink],
 *     namedPorts: [
 *         {
 *             name: "http",
 *             port: 8080,
 *         },
 *         {
 *             name: "https",
 *             port: 8443,
 *         },
 *     ],
 *     zone: "us-central1-c",
 * });
 * const stagingService = new gcp.compute.BackendService("staging_service", {
 *     backends: [{
 *         group: stagingGroup.selfLink,
 *     }],
 *     healthChecks: stagingHealth.selfLink,
 *     portName: "https",
 *     protocol: "HTTPS",
 * });
 * ```
 */
class InstanceGroup extends pulumi.CustomResource {
    /**
     * Get an existing InstanceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new InstanceGroup(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["description"] = state ? state.description : undefined;
            inputs["instances"] = state ? state.instances : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namedPorts"] = state ? state.namedPorts : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        }
        else {
            const args = argsOrState;
            inputs["description"] = args ? args.description : undefined;
            inputs["instances"] = args ? args.instances : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namedPorts"] = args ? args.namedPorts : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["selfLink"] = undefined /*out*/;
            inputs["size"] = undefined /*out*/;
        }
        super("gcp:compute/instanceGroup:InstanceGroup", name, inputs, opts);
    }
}
exports.InstanceGroup = InstanceGroup;
//# sourceMappingURL=instanceGroup.js.map