"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Manages a Cloud NAT. For more information see
 * [the official documentation](https://cloud.google.com/nat/docs/overview)
 * and
 * [API](https://cloud.google.com/compute/docs/reference/rest/beta/routers).
 *
 * ## Example Usage
 *
 * A simple NAT configuration: enable NAT for all Subnetworks associated with
 * the Network associated with the given Router.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNetwork = new gcp.compute.Network("default", {});
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     ipCidrRange: "10.0.0.0/16",
 *     network: defaultNetwork.selfLink,
 *     region: "us-central1",
 * });
 * const router = new gcp.compute.Router("router", {
 *     bgp: {
 *         asn: 64514,
 *     },
 *     network: defaultNetwork.selfLink,
 *     region: defaultSubnetwork.region,
 * });
 * const simple_nat = new gcp.compute.RouterNat("simple-nat", {
 *     natIpAllocateOption: "AUTO_ONLY",
 *     region: "us-central1",
 *     router: router.name,
 *     sourceSubnetworkIpRangesToNat: "ALL_SUBNETWORKS_ALL_IP_RANGES",
 * });
 * ```
 *
 * A production-like configuration: enable NAT for one Subnetwork and use a list of
 * static external IP addresses.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const address: gcp.compute.Address[] = [];
 * for (let i = 0; i < 2; i++) {
 *     address.push(new gcp.compute.Address(`address-${i}`, {
 *         region: "us-central1",
 *     }));
 * }
 * const defaultNetwork = new gcp.compute.Network("default", {});
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     ipCidrRange: "10.0.0.0/16",
 *     network: defaultNetwork.selfLink,
 *     region: "us-central1",
 * });
 * const router = new gcp.compute.Router("router", {
 *     bgp: {
 *         asn: 64514,
 *     },
 *     network: defaultNetwork.selfLink,
 *     region: defaultSubnetwork.region,
 * });
 * const advanced_nat = new gcp.compute.RouterNat("advanced-nat", {
 *     natIpAllocateOption: "MANUAL_ONLY",
 *     natIps: address.map(v => v.selfLink),
 *     region: "us-central1",
 *     router: router.name,
 *     sourceSubnetworkIpRangesToNat: "LIST_OF_SUBNETWORKS",
 *     subnetworks: [{
 *         name: google_compute_subnetwork_subnetwork.selfLink,
 *     }],
 * });
 * ```
 */
class RouterNat extends pulumi.CustomResource {
    /**
     * Get an existing RouterNat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new RouterNat(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["icmpIdleTimeoutSec"] = state ? state.icmpIdleTimeoutSec : undefined;
            inputs["minPortsPerVm"] = state ? state.minPortsPerVm : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["natIpAllocateOption"] = state ? state.natIpAllocateOption : undefined;
            inputs["natIps"] = state ? state.natIps : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["router"] = state ? state.router : undefined;
            inputs["sourceSubnetworkIpRangesToNat"] = state ? state.sourceSubnetworkIpRangesToNat : undefined;
            inputs["subnetworks"] = state ? state.subnetworks : undefined;
            inputs["tcpEstablishedIdleTimeoutSec"] = state ? state.tcpEstablishedIdleTimeoutSec : undefined;
            inputs["tcpTransitoryIdleTimeoutSec"] = state ? state.tcpTransitoryIdleTimeoutSec : undefined;
            inputs["udpIdleTimeoutSec"] = state ? state.udpIdleTimeoutSec : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.natIpAllocateOption === undefined) {
                throw new Error("Missing required property 'natIpAllocateOption'");
            }
            if (!args || args.router === undefined) {
                throw new Error("Missing required property 'router'");
            }
            inputs["icmpIdleTimeoutSec"] = args ? args.icmpIdleTimeoutSec : undefined;
            inputs["minPortsPerVm"] = args ? args.minPortsPerVm : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["natIpAllocateOption"] = args ? args.natIpAllocateOption : undefined;
            inputs["natIps"] = args ? args.natIps : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["router"] = args ? args.router : undefined;
            inputs["sourceSubnetworkIpRangesToNat"] = args ? args.sourceSubnetworkIpRangesToNat : undefined;
            inputs["subnetworks"] = args ? args.subnetworks : undefined;
            inputs["tcpEstablishedIdleTimeoutSec"] = args ? args.tcpEstablishedIdleTimeoutSec : undefined;
            inputs["tcpTransitoryIdleTimeoutSec"] = args ? args.tcpTransitoryIdleTimeoutSec : undefined;
            inputs["udpIdleTimeoutSec"] = args ? args.udpIdleTimeoutSec : undefined;
        }
        super("gcp:compute/routerNat:RouterNat", name, inputs, opts);
    }
}
exports.RouterNat = RouterNat;
//# sourceMappingURL=routerNat.js.map