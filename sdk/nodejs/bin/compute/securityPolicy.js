"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * A Security Policy defines an IP blacklist or whitelist that protects load balanced Google Cloud services by denying or permitting traffic from specified IP ranges. For more information
 * see the [official documentation](https://cloud.google.com/armor/docs/configure-security-policies)
 * and the [API](https://cloud.google.com/compute/docs/reference/rest/beta/securityPolicies).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const policy = new gcp.compute.SecurityPolicy("policy", {
 *     rules: [
 *         {
 *             action: "deny(403)",
 *             description: "Deny access to IPs in 9.9.9.0/24",
 *             match: {
 *                 config: {
 *                     srcIpRanges: ["9.9.9.0/24"],
 *                 },
 *                 versionedExpr: "SRC_IPS_V1",
 *             },
 *             priority: 1000,
 *         },
 *         {
 *             action: "allow",
 *             description: "default rule",
 *             match: {
 *                 config: {
 *                     srcIpRanges: ["*"],
 *                 },
 *                 versionedExpr: "SRC_IPS_V1",
 *             },
 *             priority: 2147483647,
 *         },
 *     ],
 * });
 * ```
 */
class SecurityPolicy extends pulumi.CustomResource {
    /**
     * Get an existing SecurityPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new SecurityPolicy(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["description"] = state ? state.description : undefined;
            inputs["fingerprint"] = state ? state.fingerprint : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["rules"] = state ? state.rules : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
        }
        else {
            const args = argsOrState;
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["rules"] = args ? args.rules : undefined;
            inputs["fingerprint"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
        }
        super("gcp:compute/securityPolicy:SecurityPolicy", name, inputs, opts);
    }
}
exports.SecurityPolicy = SecurityPolicy;
//# sourceMappingURL=securityPolicy.js.map