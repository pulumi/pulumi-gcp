"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Enables the Google Compute Engine
 * [Shared VPC](https://cloud.google.com/compute/docs/shared-vpc)
 * feature for a project, assigning it as a Shared VPC host project.
 *
 * For more information, see,
 * [the Project API documentation](https://cloud.google.com/compute/docs/reference/latest/projects),
 * where the Shared VPC feature is referred to by its former name "XPN".
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // A host project provides network resources to associated service projects.
 * const host = new gcp.compute.SharedVPCHostProject("host", {
 *     project: "host-project-id",
 * });
 * // A service project gains access to network resources provided by its
 * // associated host project.
 * const service1 = new gcp.compute.SharedVPCServiceProject("service1", {
 *     hostProject: host.project,
 *     serviceProject: "service-project-id-1",
 * });
 * const service2 = new gcp.compute.SharedVPCServiceProject("service2", {
 *     hostProject: host.project,
 *     serviceProject: "service-project-id-2",
 * });
 * ```
 */
class SharedVPCHostProject extends pulumi.CustomResource {
    /**
     * Get an existing SharedVPCHostProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new SharedVPCHostProject(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            inputs["project"] = args ? args.project : undefined;
        }
        super("gcp:compute/sharedVPCHostProject:SharedVPCHostProject", name, inputs, opts);
    }
}
exports.SharedVPCHostProject = SharedVPCHostProject;
//# sourceMappingURL=sharedVPCHostProject.js.map