"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Manages a Cloud Router BGP peer. For more information see
 * [the official documentation](https://cloud.google.com/compute/docs/cloudrouter)
 * and
 * [API](https://cloud.google.com/compute/docs/reference/latest/routers).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const foobar = new gcp.compute.RouterPeer("foobar", {
 *     advertisedRoutePriority: 100,
 *     interface: "interface-1",
 *     peerAsn: 65513,
 *     peerIpAddress: "169.254.1.2",
 *     region: "us-central1",
 *     router: "router-1",
 * });
 * ```
 */
class RouterPeer extends pulumi.CustomResource {
    /**
     * Get an existing RouterPeer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new RouterPeer(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["advertisedRoutePriority"] = state ? state.advertisedRoutePriority : undefined;
            inputs["interface"] = state ? state.interface : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["peerAsn"] = state ? state.peerAsn : undefined;
            inputs["peerIpAddress"] = state ? state.peerIpAddress : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["router"] = state ? state.router : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.interface === undefined) {
                throw new Error("Missing required property 'interface'");
            }
            if (!args || args.peerAsn === undefined) {
                throw new Error("Missing required property 'peerAsn'");
            }
            if (!args || args.router === undefined) {
                throw new Error("Missing required property 'router'");
            }
            inputs["advertisedRoutePriority"] = args ? args.advertisedRoutePriority : undefined;
            inputs["interface"] = args ? args.interface : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["peerAsn"] = args ? args.peerAsn : undefined;
            inputs["peerIpAddress"] = args ? args.peerIpAddress : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["router"] = args ? args.router : undefined;
            inputs["ipAddress"] = undefined /*out*/;
        }
        super("gcp:compute/routerPeer:RouterPeer", name, inputs, opts);
    }
}
exports.RouterPeer = RouterPeer;
//# sourceMappingURL=routerPeer.js.map