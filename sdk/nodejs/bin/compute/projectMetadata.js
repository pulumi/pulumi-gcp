"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Authoritatively manages metadata common to all instances for a project in GCE. For more information see
 * [the official documentation](https://cloud.google.com/compute/docs/storing-retrieving-metadata)
 * and
 * [API](https://cloud.google.com/compute/docs/reference/latest/projects/setCommonInstanceMetadata).
 *
 * > **Note:**  This resource manages all project-level metadata including project-level ssh keys.
 * Keys unset in config but set on the server will be removed. If you want to manage only single
 * key/value pairs within the project metadata rather than the entire set, then use
 * google_compute_project_metadata_item.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultProjectMetadata = new gcp.compute.ProjectMetadata("default", {
 *     metadata: {
 *         "13": "42",
 *         fizz: "buzz",
 *         foo: "bar",
 *     },
 * });
 * ```
 */
class ProjectMetadata extends pulumi.CustomResource {
    /**
     * Get an existing ProjectMetadata resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new ProjectMetadata(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["metadata"] = state ? state.metadata : undefined;
            inputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.metadata === undefined) {
                throw new Error("Missing required property 'metadata'");
            }
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["project"] = args ? args.project : undefined;
        }
        super("gcp:compute/projectMetadata:ProjectMetadata", name, inputs, opts);
    }
}
exports.ProjectMetadata = ProjectMetadata;
//# sourceMappingURL=projectMetadata.js.map