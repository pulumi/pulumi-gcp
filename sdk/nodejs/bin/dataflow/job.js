"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Creates a job on Dataflow, which is an implementation of Apache Beam running on Google Compute Engine. For more information see
 * the official documentation for
 * [Beam](https://beam.apache.org) and [Dataflow](https://cloud.google.com/dataflow/).
 *
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const bigDataJob = new gcp.dataflow.Job("big_data_job", {
 *     parameters: {
 *         baz: "qux",
 *         foo: "bar",
 *     },
 *     tempGcsLocation: "gs://my-bucket/tmp_dir",
 *     templateGcsPath: "gs://my-bucket/templates/template_file",
 * });
 * ```
 *
 * ## Note on "destroy" / "apply"
 *
 * There are many types of Dataflow jobs.  Some Dataflow jobs run constantly, getting new data from (e.g.) a GCS bucket, and outputting data continuously.  Some jobs process a set amount of data then terminate.  All jobs can fail while running due to programming errors or other issues.  In this way, Dataflow jobs are different from most other Terraform / Google resources.
 *
 * The Dataflow resource is considered 'existing' while it is in a nonterminal state.  If it reaches a terminal state (e.g. 'FAILED', 'COMPLETE', 'CANCELLED'), it will be recreated on the next 'apply'.  This is as expected for jobs which run continously, but may surprise users who use this resource for other kinds of Dataflow jobs.
 *
 * A Dataflow job which is 'destroyed' may be "cancelled" or "drained".  If "cancelled", the job terminates - any data written remains where it is, but no new data will be processed.  If "drained", no new data will enter the pipeline, but any data currently in the pipeline will finish being processed.  The default is "cancelled", but if a user sets `on_delete` to `"drain"` in the configuration, you may experience a long wait for your `terraform destroy` to complete.
 */
class Job extends pulumi.CustomResource {
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Job(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["maxWorkers"] = state ? state.maxWorkers : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["onDelete"] = state ? state.onDelete : undefined;
            inputs["parameters"] = state ? state.parameters : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["tempGcsLocation"] = state ? state.tempGcsLocation : undefined;
            inputs["templateGcsPath"] = state ? state.templateGcsPath : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.tempGcsLocation === undefined) {
                throw new Error("Missing required property 'tempGcsLocation'");
            }
            if (!args || args.templateGcsPath === undefined) {
                throw new Error("Missing required property 'templateGcsPath'");
            }
            inputs["maxWorkers"] = args ? args.maxWorkers : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["onDelete"] = args ? args.onDelete : undefined;
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["tempGcsLocation"] = args ? args.tempGcsLocation : undefined;
            inputs["templateGcsPath"] = args ? args.templateGcsPath : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["state"] = undefined /*out*/;
        }
        super("gcp:dataflow/job:Job", name, inputs, opts);
    }
}
exports.Job = Job;
//# sourceMappingURL=job.js.map