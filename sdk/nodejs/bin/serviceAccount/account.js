"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Allows management of a [Google Cloud Platform service account](https://cloud.google.com/compute/docs/access/service-accounts)
 *
 * > Creation of service accounts is eventually consistent, and that can lead to
 * errors when you try to apply ACLs to service accounts immediately after
 * creation. If using these resources in the same config, you can add a
 * [`sleep` using `local-exec`](https://github.com/hashicorp/terraform/issues/17726#issuecomment-377357866).
 *
 * ## Example Usage
 *
 * This snippet creates a service account, then gives it objectViewer
 * permission in a project.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const objectViewer = new gcp.serviceAccount.Account("object_viewer", {
 *     accountId: "object-viewer",
 *     displayName: "Object viewer",
 * });
 * ```
 */
class Account extends pulumi.CustomResource {
    /**
     * Get an existing Account resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Account(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["accountId"] = state ? state.accountId : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["email"] = state ? state.email : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["uniqueId"] = state ? state.uniqueId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.accountId === undefined) {
                throw new Error("Missing required property 'accountId'");
            }
            inputs["accountId"] = args ? args.accountId : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["email"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["uniqueId"] = undefined /*out*/;
        }
        super("gcp:serviceAccount/account:Account", name, inputs, opts);
    }
}
exports.Account = Account;
//# sourceMappingURL=account.js.map