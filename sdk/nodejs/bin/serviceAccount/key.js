"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Creates and manages service account key-pairs, which allow the user to establish identity of a service account outside of GCP. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys).
 *
 *
 * ## Example Usage, creating a new Key Pair
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myaccount = new gcp.serviceAccount.Account("myaccount", {
 *     accountId: "myaccount",
 *     displayName: "My Service Account",
 * });
 * const mykey = new gcp.serviceAccount.Key("mykey", {
 *     publicKeyType: "TYPE_X509_PEM_FILE",
 *     serviceAccountId: myaccount.name,
 * });
 * ```
 *
 * ## Create new Key Pair, encrypting the private key with a PGP Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myaccount = new gcp.serviceAccount.Account("myaccount", {
 *     accountId: "myaccount",
 *     displayName: "My Service Account",
 * });
 * const mykey = new gcp.serviceAccount.Key("mykey", {
 *     pgpKey: "keybase:keybaseusername",
 *     publicKeyType: "TYPE_X509_PEM_FILE",
 *     serviceAccountId: myaccount.name,
 * });
 * ```
 */
class Key extends pulumi.CustomResource {
    /**
     * Get an existing Key resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Key(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["keyAlgorithm"] = state ? state.keyAlgorithm : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pgpKey"] = state ? state.pgpKey : undefined;
            inputs["privateKey"] = state ? state.privateKey : undefined;
            inputs["privateKeyEncrypted"] = state ? state.privateKeyEncrypted : undefined;
            inputs["privateKeyFingerprint"] = state ? state.privateKeyFingerprint : undefined;
            inputs["privateKeyType"] = state ? state.privateKeyType : undefined;
            inputs["publicKey"] = state ? state.publicKey : undefined;
            inputs["publicKeyType"] = state ? state.publicKeyType : undefined;
            inputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            inputs["validAfter"] = state ? state.validAfter : undefined;
            inputs["validBefore"] = state ? state.validBefore : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.serviceAccountId === undefined) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            inputs["keyAlgorithm"] = args ? args.keyAlgorithm : undefined;
            inputs["pgpKey"] = args ? args.pgpKey : undefined;
            inputs["privateKeyType"] = args ? args.privateKeyType : undefined;
            inputs["publicKeyType"] = args ? args.publicKeyType : undefined;
            inputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["privateKey"] = undefined /*out*/;
            inputs["privateKeyEncrypted"] = undefined /*out*/;
            inputs["privateKeyFingerprint"] = undefined /*out*/;
            inputs["publicKey"] = undefined /*out*/;
            inputs["validAfter"] = undefined /*out*/;
            inputs["validBefore"] = undefined /*out*/;
        }
        super("gcp:serviceAccount/key:Key", name, inputs, opts);
    }
}
exports.Key = Key;
//# sourceMappingURL=key.js.map