"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Creates a new notification configuration on a specified bucket, establishing a flow of event notifications from GCS to a Cloud Pub/Sub topic.
 *  For more information see
 * [the official documentation](https://cloud.google.com/storage/docs/pubsub-notifications)
 * and
 * [API](https://cloud.google.com/storage/docs/json_api/v1/notifications).
 *
 * In order to enable notifications, a special Google Cloud Storage service account unique to the project
 * must have the IAM permission "projects.topics.publish" for a Cloud Pub/Sub topic in the project. To get the service
 * account's email address, use the `google_storage_project_service_account` datasource's `email_address` value, and see below
 * for an example of enabling notifications by granting the correct IAM permission. See
 * [the notifications documentation](https://cloud.google.com/storage/docs/gsutil/commands/notification) for more details.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const gcsAccount = pulumi.output(gcp.storage.getProjectServiceAccount({}));
 * const topic = new gcp.pubsub.Topic("topic", {});
 * const bucket = new gcp.storage.Bucket("bucket", {});
 * const binding = new gcp.pubsub.TopicIAMBinding("binding", {
 *     members: [gcsAccount.apply(gcsAccount => `serviceAccount:${gcsAccount.emailAddress}`)],
 *     role: "roles/pubsub.publisher",
 *     topic: topic.name,
 * });
 * const notification = new gcp.storage.Notification("notification", {
 *     bucket: bucket.name,
 *     customAttributes: {
 *         "new-attribute": "new-attribute-value",
 *     },
 *     eventTypes: [
 *         "OBJECT_FINALIZE",
 *         "OBJECT_METADATA_UPDATE",
 *     ],
 *     payloadFormat: "JSON_API_V1",
 *     topic: topic.id,
 * }, {dependsOn: [binding]});
 * ```
 */
class Notification extends pulumi.CustomResource {
    /**
     * Get an existing Notification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Notification(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["bucket"] = state ? state.bucket : undefined;
            inputs["customAttributes"] = state ? state.customAttributes : undefined;
            inputs["eventTypes"] = state ? state.eventTypes : undefined;
            inputs["objectNamePrefix"] = state ? state.objectNamePrefix : undefined;
            inputs["payloadFormat"] = state ? state.payloadFormat : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["topic"] = state ? state.topic : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.bucket === undefined) {
                throw new Error("Missing required property 'bucket'");
            }
            if (!args || args.payloadFormat === undefined) {
                throw new Error("Missing required property 'payloadFormat'");
            }
            if (!args || args.topic === undefined) {
                throw new Error("Missing required property 'topic'");
            }
            inputs["bucket"] = args ? args.bucket : undefined;
            inputs["customAttributes"] = args ? args.customAttributes : undefined;
            inputs["eventTypes"] = args ? args.eventTypes : undefined;
            inputs["objectNamePrefix"] = args ? args.objectNamePrefix : undefined;
            inputs["payloadFormat"] = args ? args.payloadFormat : undefined;
            inputs["topic"] = args ? args.topic : undefined;
            inputs["selfLink"] = undefined /*out*/;
        }
        super("gcp:storage/notification:Notification", name, inputs, opts);
    }
}
exports.Notification = Notification;
//# sourceMappingURL=notification.js.map