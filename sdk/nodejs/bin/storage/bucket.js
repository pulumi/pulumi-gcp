"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Creates a new bucket in Google cloud storage service (GCS).
 * Once a bucket has been created, its location can't be changed.
 * [ACLs](https://cloud.google.com/storage/docs/access-control/lists) can be applied
 * using the [`google_storage_bucket_acl` resource](https://www.terraform.io/docs/providers/google/r/storage_bucket_acl.html).
 *
 * For more information see
 * [the official documentation](https://cloud.google.com/storage/docs/overview)
 * and
 * [API](https://cloud.google.com/storage/docs/json_api/v1/buckets).
 *
 * **Note**: When importing a bucket or using only the default provider project for bucket creation, you will need to enable the Compute API and will otherwise get an error with a link to the API enablement page. If you would prefer not to enable the Compute API, make sure to explicitly set `project` on the bucket resource.
 *
 * ## Example Usage
 *
 * Example creating a private bucket in standard storage, in the EU region.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const image_store = new gcp.storage.Bucket("image-store", {
 *     location: "EU",
 *     websites: [{
 *         mainPageSuffix: "index.html",
 *         notFoundPage: "404.html",
 *     }],
 * });
 * ```
 */
class Bucket extends pulumi.CustomResource {
    /**
     * Get an existing Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Bucket(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["cors"] = state ? state.cors : undefined;
            inputs["encryption"] = state ? state.encryption : undefined;
            inputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["logging"] = state ? state.logging : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["requesterPays"] = state ? state.requesterPays : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["storageClass"] = state ? state.storageClass : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["versioning"] = state ? state.versioning : undefined;
            inputs["websites"] = state ? state.websites : undefined;
        }
        else {
            const args = argsOrState;
            inputs["cors"] = args ? args.cors : undefined;
            inputs["encryption"] = args ? args.encryption : undefined;
            inputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["logging"] = args ? args.logging : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["requesterPays"] = args ? args.requesterPays : undefined;
            inputs["storageClass"] = args ? args.storageClass : undefined;
            inputs["versioning"] = args ? args.versioning : undefined;
            inputs["websites"] = args ? args.websites : undefined;
            inputs["selfLink"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        }
        super("gcp:storage/bucket:Bucket", name, inputs, opts);
    }
}
exports.Bucket = Bucket;
//# sourceMappingURL=bucket.js.map