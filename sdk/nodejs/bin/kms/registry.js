"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 *  Creates a device registry in Google's Cloud IoT Core platform. For more information see
 * [the official documentation](https://cloud.google.com/iot/docs/) and
 * [API](https://cloud.google.com/iot/docs/reference/cloudiot/rest/v1/projects.locations.registries).
 *
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default_devicestatus = new gcp.pubsub.Topic("default-devicestatus", {});
 * const default_telemetry = new gcp.pubsub.Topic("default-telemetry", {});
 * const default_registry = new gcp.kms.Registry("default-registry", {
 *     credentials: [{
 *         publicKeyCertificate: {
 *             certificate: fs.readFileSync("rsa_cert.pem", "utf-8"),
 *             format: "X509_CERTIFICATE_PEM",
 *         },
 *     }],
 *     eventNotificationConfig: {
 *         pubsub_topic_name: default_telemetry.id,
 *     },
 *     httpConfig: {
 *         http_enabled_state: "HTTP_ENABLED",
 *     },
 *     mqttConfig: {
 *         mqtt_enabled_state: "MQTT_ENABLED",
 *     },
 *     stateNotificationConfig: {
 *         pubsub_topic_name: default_devicestatus.id,
 *     },
 * });
 * ```
 */
class Registry extends pulumi.CustomResource {
    /**
     * Get an existing Registry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Registry(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["credentials"] = state ? state.credentials : undefined;
            inputs["eventNotificationConfig"] = state ? state.eventNotificationConfig : undefined;
            inputs["httpConfig"] = state ? state.httpConfig : undefined;
            inputs["mqttConfig"] = state ? state.mqttConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["stateNotificationConfig"] = state ? state.stateNotificationConfig : undefined;
        }
        else {
            const args = argsOrState;
            inputs["credentials"] = args ? args.credentials : undefined;
            inputs["eventNotificationConfig"] = args ? args.eventNotificationConfig : undefined;
            inputs["httpConfig"] = args ? args.httpConfig : undefined;
            inputs["mqttConfig"] = args ? args.mqttConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["stateNotificationConfig"] = args ? args.stateNotificationConfig : undefined;
        }
        super("gcp:kms/registry:Registry", name, inputs, opts);
    }
}
exports.Registry = Registry;
//# sourceMappingURL=registry.js.map