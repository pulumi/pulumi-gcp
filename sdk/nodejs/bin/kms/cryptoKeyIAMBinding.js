"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Allows creation and management of a single binding within IAM policy for
 * an existing Google Cloud KMS crypto key.
 *
 * > **Note:** On create, this resource will overwrite members of any existing roles.
 *     Use `terraform import` and inspect the `terraform plan` output to ensure
 *     your existing members are preserved.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cryptoKey = new gcp.kms.CryptoKeyIAMBinding("crypto_key", {
 *     cryptoKeyId: "my-gcp-project/us-central1/my-key-ring/my-crypto-key",
 *     members: ["user:alice@gmail.com"],
 *     role: "roles/editor",
 * });
 * ```
 */
class CryptoKeyIAMBinding extends pulumi.CustomResource {
    /**
     * Get an existing CryptoKeyIAMBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new CryptoKeyIAMBinding(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["cryptoKeyId"] = state ? state.cryptoKeyId : undefined;
            inputs["etag"] = state ? state.etag : undefined;
            inputs["members"] = state ? state.members : undefined;
            inputs["role"] = state ? state.role : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.cryptoKeyId === undefined) {
                throw new Error("Missing required property 'cryptoKeyId'");
            }
            if (!args || args.members === undefined) {
                throw new Error("Missing required property 'members'");
            }
            if (!args || args.role === undefined) {
                throw new Error("Missing required property 'role'");
            }
            inputs["cryptoKeyId"] = args ? args.cryptoKeyId : undefined;
            inputs["members"] = args ? args.members : undefined;
            inputs["role"] = args ? args.role : undefined;
            inputs["etag"] = undefined /*out*/;
        }
        super("gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding", name, inputs, opts);
    }
}
exports.CryptoKeyIAMBinding = CryptoKeyIAMBinding;
//# sourceMappingURL=cryptoKeyIAMBinding.js.map