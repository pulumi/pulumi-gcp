"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Allows creation of a Google Cloud Platform KMS CryptoKey. For more information see
 * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
 * and
 * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).
 *
 * A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
 * Google Cloud KMS KeyRing.
 *
 * > Note: CryptoKeys cannot be deleted from Google Cloud Platform. Destroying a
 * Terraform-managed CryptoKey will remove it from state and delete all
 * CryptoKeyVersions, rendering the key unusable, but **will not delete the
 * resource on the server**. When Terraform destroys these keys, any data
 * previously encrypted with these keys will be irrecoverable. For this reason, it
 * is strongly recommended that you add lifecycle hooks to the resource to prevent
 * accidental destruction.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myKeyRing = new gcp.kms.KeyRing("my_key_ring", {
 *     location: "us-central1",
 *     project: "my-project",
 * });
 * const myCryptoKey = new gcp.kms.CryptoKey("my_crypto_key", {
 *     keyRing: myKeyRing.selfLink,
 *     rotationPeriod: "100000s",
 * });
 * ```
 */
class CryptoKey extends pulumi.CustomResource {
    /**
     * Get an existing CryptoKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new CryptoKey(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["keyRing"] = state ? state.keyRing : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["rotationPeriod"] = state ? state.rotationPeriod : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["versionTemplate"] = state ? state.versionTemplate : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.keyRing === undefined) {
                throw new Error("Missing required property 'keyRing'");
            }
            inputs["keyRing"] = args ? args.keyRing : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["rotationPeriod"] = args ? args.rotationPeriod : undefined;
            inputs["versionTemplate"] = args ? args.versionTemplate : undefined;
            inputs["selfLink"] = undefined /*out*/;
        }
        super("gcp:kms/cryptoKey:CryptoKey", name, inputs, opts);
    }
}
exports.CryptoKey = CryptoKey;
//# sourceMappingURL=cryptoKey.js.map