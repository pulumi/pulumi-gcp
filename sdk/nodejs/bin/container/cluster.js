"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Manages a Google Kubernetes Engine (GKE) cluster. For more information see
 * [the official documentation](https://cloud.google.com/container-engine/docs/clusters)
 * and [the API reference](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters).
 *
 * > **Note:** All arguments and attributes, including basic auth username and
 * passwords as well as certificate outputs will be stored in the raw state as
 * plaintext. [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
 *
 * ## Example Usage - with a separately managed node pool (recommended)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     initialNodeCount: 1,
 *     // Setting an empty username and password explicitly disables basic auth
 *     masterAuth: {
 *         password: "",
 *         username: "",
 *     },
 *     nodeConfig: {
 *         labels: {
 *             foo: "bar",
 *         },
 *         oauthScopes: [
 *             "https://www.googleapis.com/auth/compute",
 *             "https://www.googleapis.com/auth/devstorage.read_only",
 *             "https://www.googleapis.com/auth/logging.write",
 *             "https://www.googleapis.com/auth/monitoring",
 *         ],
 *         tags: [
 *             "foo",
 *             "bar",
 *         ],
 *     },
 *     region: "us-central1",
 *     // We can't create a cluster with no node pool defined, but we want to only use
 *     // separately managed node pools. So we create the smallest possible default
 *     // node pool and immediately delete it.
 *     removeDefaultNodePool: true,
 * });
 * const primaryPreemptibleNodes = new gcp.container.NodePool("primary_preemptible_nodes", {
 *     cluster: primary.name,
 *     nodeConfig: {
 *         machineType: "n1-standard-1",
 *         oauthScopes: [
 *             "https://www.googleapis.com/auth/compute",
 *             "https://www.googleapis.com/auth/devstorage.read_only",
 *             "https://www.googleapis.com/auth/logging.write",
 *             "https://www.googleapis.com/auth/monitoring",
 *         ],
 *         preemptible: true,
 *     },
 *     nodeCount: 1,
 *     region: "us-central1",
 * });
 *
 * // The following outputs allow authentication and connectivity to the GKE Cluster
 * // by using certificate-based authentication.
 * export const clientCertificate = primary.masterAuth.apply(masterAuth => masterAuth.clientCertificate);
 * export const clientKey = primary.masterAuth.apply(masterAuth => masterAuth.clientKey);
 * export const clusterCaCertificate = primary.masterAuth.apply(masterAuth => masterAuth.clusterCaCertificate);
 * ```
 *
 * ## Example Usage - with the default node pool
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     initialNodeCount: 3,
 *     // Setting an empty username and password explicitly disables basic auth
 *     masterAuth: {
 *         password: "",
 *         username: "",
 *     },
 *     nodeConfig: {
 *         labels: {
 *             foo: "bar",
 *         },
 *         oauthScopes: [
 *             "https://www.googleapis.com/auth/compute",
 *             "https://www.googleapis.com/auth/devstorage.read_only",
 *             "https://www.googleapis.com/auth/logging.write",
 *             "https://www.googleapis.com/auth/monitoring",
 *         ],
 *         tags: [
 *             "foo",
 *             "bar",
 *         ],
 *     },
 *     timeouts: [{
 *         create: "30m",
 *         update: "40m",
 *     }],
 *     zone: "us-central1-a",
 * });
 *
 * // The following outputs allow authentication and connectivity to the GKE Cluster
 * // by using certificate-based authentication.
 * export const clientCertificate = primary.masterAuth.apply(masterAuth => masterAuth.clientCertificate);
 * export const clientKey = primary.masterAuth.apply(masterAuth => masterAuth.clientKey);
 * export const clusterCaCertificate = primary.masterAuth.apply(masterAuth => masterAuth.clusterCaCertificate);
 * ```
 */
class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["additionalZones"] = state ? state.additionalZones : undefined;
            inputs["addonsConfig"] = state ? state.addonsConfig : undefined;
            inputs["clusterAutoscaling"] = state ? state.clusterAutoscaling : undefined;
            inputs["clusterIpv4Cidr"] = state ? state.clusterIpv4Cidr : undefined;
            inputs["defaultMaxPodsPerNode"] = state ? state.defaultMaxPodsPerNode : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["enableBinaryAuthorization"] = state ? state.enableBinaryAuthorization : undefined;
            inputs["enableKubernetesAlpha"] = state ? state.enableKubernetesAlpha : undefined;
            inputs["enableLegacyAbac"] = state ? state.enableLegacyAbac : undefined;
            inputs["enableTpu"] = state ? state.enableTpu : undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["initialNodeCount"] = state ? state.initialNodeCount : undefined;
            inputs["instanceGroupUrls"] = state ? state.instanceGroupUrls : undefined;
            inputs["ipAllocationPolicy"] = state ? state.ipAllocationPolicy : undefined;
            inputs["loggingService"] = state ? state.loggingService : undefined;
            inputs["maintenancePolicy"] = state ? state.maintenancePolicy : undefined;
            inputs["masterAuth"] = state ? state.masterAuth : undefined;
            inputs["masterAuthorizedNetworksConfig"] = state ? state.masterAuthorizedNetworksConfig : undefined;
            inputs["masterVersion"] = state ? state.masterVersion : undefined;
            inputs["minMasterVersion"] = state ? state.minMasterVersion : undefined;
            inputs["monitoringService"] = state ? state.monitoringService : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["networkPolicy"] = state ? state.networkPolicy : undefined;
            inputs["nodeConfig"] = state ? state.nodeConfig : undefined;
            inputs["nodePools"] = state ? state.nodePools : undefined;
            inputs["nodeVersion"] = state ? state.nodeVersion : undefined;
            inputs["podSecurityPolicyConfig"] = state ? state.podSecurityPolicyConfig : undefined;
            inputs["privateClusterConfig"] = state ? state.privateClusterConfig : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["removeDefaultNodePool"] = state ? state.removeDefaultNodePool : undefined;
            inputs["resourceLabels"] = state ? state.resourceLabels : undefined;
            inputs["subnetwork"] = state ? state.subnetwork : undefined;
            inputs["tpuIpv4CidrBlock"] = state ? state.tpuIpv4CidrBlock : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        }
        else {
            const args = argsOrState;
            inputs["additionalZones"] = args ? args.additionalZones : undefined;
            inputs["addonsConfig"] = args ? args.addonsConfig : undefined;
            inputs["clusterAutoscaling"] = args ? args.clusterAutoscaling : undefined;
            inputs["clusterIpv4Cidr"] = args ? args.clusterIpv4Cidr : undefined;
            inputs["defaultMaxPodsPerNode"] = args ? args.defaultMaxPodsPerNode : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["enableBinaryAuthorization"] = args ? args.enableBinaryAuthorization : undefined;
            inputs["enableKubernetesAlpha"] = args ? args.enableKubernetesAlpha : undefined;
            inputs["enableLegacyAbac"] = args ? args.enableLegacyAbac : undefined;
            inputs["enableTpu"] = args ? args.enableTpu : undefined;
            inputs["initialNodeCount"] = args ? args.initialNodeCount : undefined;
            inputs["ipAllocationPolicy"] = args ? args.ipAllocationPolicy : undefined;
            inputs["loggingService"] = args ? args.loggingService : undefined;
            inputs["maintenancePolicy"] = args ? args.maintenancePolicy : undefined;
            inputs["masterAuth"] = args ? args.masterAuth : undefined;
            inputs["masterAuthorizedNetworksConfig"] = args ? args.masterAuthorizedNetworksConfig : undefined;
            inputs["minMasterVersion"] = args ? args.minMasterVersion : undefined;
            inputs["monitoringService"] = args ? args.monitoringService : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["networkPolicy"] = args ? args.networkPolicy : undefined;
            inputs["nodeConfig"] = args ? args.nodeConfig : undefined;
            inputs["nodePools"] = args ? args.nodePools : undefined;
            inputs["nodeVersion"] = args ? args.nodeVersion : undefined;
            inputs["podSecurityPolicyConfig"] = args ? args.podSecurityPolicyConfig : undefined;
            inputs["privateClusterConfig"] = args ? args.privateClusterConfig : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["removeDefaultNodePool"] = args ? args.removeDefaultNodePool : undefined;
            inputs["resourceLabels"] = args ? args.resourceLabels : undefined;
            inputs["subnetwork"] = args ? args.subnetwork : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["endpoint"] = undefined /*out*/;
            inputs["instanceGroupUrls"] = undefined /*out*/;
            inputs["masterVersion"] = undefined /*out*/;
            inputs["tpuIpv4CidrBlock"] = undefined /*out*/;
        }
        super("gcp:container/cluster:Cluster", name, inputs, opts);
    }
}
exports.Cluster = Cluster;
//# sourceMappingURL=cluster.js.map