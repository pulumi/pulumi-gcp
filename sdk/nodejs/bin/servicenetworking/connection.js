"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * > **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
 * See [Provider Versions](https://terraform.io/docs/providers/google/provider_versions.html) for more details on beta resources.
 *
 * Manages a private VPC connection with a GCP service provider. For more information see
 * [the official documentation](https://cloud.google.com/vpc/docs/configure-private-services-access#creating-connection)
 * and
 * [API](https://cloud.google.com/service-infrastructure/docs/service-networking/reference/rest/v1/services.connections).
 *
 * ## Example usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const peeringNetwork = new gcp.compute.Network("peering_network", {});
 * const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
 *     addressType: "INTERNAL",
 *     network: peeringNetwork.selfLink,
 *     prefixLength: 16,
 *     purpose: "VPC_PEERING",
 * });
 * const foobar = new gcp.servicenetworking.Connection("foobar", {
 *     network: peeringNetwork.selfLink,
 *     reservedPeeringRanges: [privateIpAlloc.name],
 *     service: "servicenetworking.googleapis.com",
 * });
 * ```
 */
class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Connection(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["network"] = state ? state.network : undefined;
            inputs["reservedPeeringRanges"] = state ? state.reservedPeeringRanges : undefined;
            inputs["service"] = state ? state.service : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.network === undefined) {
                throw new Error("Missing required property 'network'");
            }
            if (!args || args.reservedPeeringRanges === undefined) {
                throw new Error("Missing required property 'reservedPeeringRanges'");
            }
            if (!args || args.service === undefined) {
                throw new Error("Missing required property 'service'");
            }
            inputs["network"] = args ? args.network : undefined;
            inputs["reservedPeeringRanges"] = args ? args.reservedPeeringRanges : undefined;
            inputs["service"] = args ? args.service : undefined;
        }
        super("gcp:servicenetworking/connection:Connection", name, inputs, opts);
    }
}
exports.Connection = Connection;
//# sourceMappingURL=connection.js.map