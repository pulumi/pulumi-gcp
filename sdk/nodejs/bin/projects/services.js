"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Allows management of enabled API services for an existing Google Cloud
 * Platform project. Services in an existing project that are not defined
 * in the config will be removed.
 *
 * For a list of services available, visit the
 * [API library page](https://console.cloud.google.com/apis/library) or run `gcloud services list`.
 *
 * > **Note:** This resource attempts to be the authoritative source on *all* enabled APIs, which often
 * 	leads to conflicts when certain actions enable other APIs. If you do not need to ensure that
 * 	*exclusively* a particular set of APIs are enabled, you should most likely use the
 * 	google_project_service resource, one resource per API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = new gcp.projects.Services("project", {
 *     project: "your-project-id",
 *     services: [
 *         "iam.googleapis.com",
 *         "cloudresourcemanager.googleapis.com",
 *     ],
 * });
 * ```
 */
class Services extends pulumi.CustomResource {
    /**
     * Get an existing Services resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Services(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["disableOnDestroy"] = state ? state.disableOnDestroy : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["services"] = state ? state.services : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.services === undefined) {
                throw new Error("Missing required property 'services'");
            }
            inputs["disableOnDestroy"] = args ? args.disableOnDestroy : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["services"] = args ? args.services : undefined;
        }
        super("gcp:projects/services:Services", name, inputs, opts);
    }
}
exports.Services = Services;
//# sourceMappingURL=services.js.map