"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Allows management of the entire IAM policy for an existing Google Cloud Platform Billing Account.
 *
 * > **Warning:** Billing accounts have a default user that can be **overwritten**
 * by use of this resource. The safest alternative is to use multiple `google_billing_account_iam_binding`
 *    resources. If you do use this resource, the best way to be sure that you are
 *    not making dangerous changes is to start by importing your existing policy,
 *    and examining the diff very closely.
 *
 * > **Note:** This resource __must not__ be used in conjunction with
 *    `google_billing_account_iam_member` or `google_billing_account_iam_binding`
 *    or they will fight over what your policy should be.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin = pulumi.output(gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         members: ["user:jane@example.com"],
 *         role: "roles/billing.viewer",
 *     }],
 * }));
 * const policy = new gcp.billing.AccountIamPolicy("policy", {
 *     billingAccountId: "00AA00-000AAA-00AA0A",
 *     policyData: admin.apply(admin => admin.policyData),
 * });
 * ```
 */
class AccountIamPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AccountIamPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new AccountIamPolicy(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["billingAccountId"] = state ? state.billingAccountId : undefined;
            inputs["etag"] = state ? state.etag : undefined;
            inputs["policyData"] = state ? state.policyData : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.billingAccountId === undefined) {
                throw new Error("Missing required property 'billingAccountId'");
            }
            if (!args || args.policyData === undefined) {
                throw new Error("Missing required property 'policyData'");
            }
            inputs["billingAccountId"] = args ? args.billingAccountId : undefined;
            inputs["policyData"] = args ? args.policyData : undefined;
            inputs["etag"] = undefined /*out*/;
        }
        super("gcp:billing/accountIamPolicy:AccountIamPolicy", name, inputs, opts);
    }
}
exports.AccountIamPolicy = AccountIamPolicy;
//# sourceMappingURL=accountIamPolicy.js.map