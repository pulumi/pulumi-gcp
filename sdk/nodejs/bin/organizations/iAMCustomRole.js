"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Allows management of a customized Cloud IAM organization role. For more information see
 * [the official documentation](https://cloud.google.com/iam/docs/understanding-custom-roles)
 * and
 * [API](https://cloud.google.com/iam/reference/rest/v1/organizations.roles).
 *
 * > **Warning:** Note that custom roles in GCP have the concept of a soft-delete. There are two issues that may arise
 *  from this and how roles are propagated. 1) creating a role may involve undeleting and then updating a role with the
 *  same name, possibly causing confusing behavior between undelete and update. 2) A deleted role is permanently deleted
 *  after 7 days, but it can take up to 30 more days (i.e. between 7 and 37 days after deletion) before the role name is
 *  made available again. This means a deleted role that has been deleted for more than 7 days cannot be changed at all
 *  by Terraform, and new roles cannot share that name.
 *
 * ## Example Usage
 *
 * This snippet creates a customized IAM organization role.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_custom_role = new gcp.organizations.IAMCustomRole("my-custom-role", {
 *     description: "A description",
 *     orgId: "123456789",
 *     permissions: [
 *         "iam.roles.list",
 *         "iam.roles.create",
 *         "iam.roles.delete",
 *     ],
 *     roleId: "myCustomRole",
 *     title: "My Custom Role",
 * });
 * ```
 */
class IAMCustomRole extends pulumi.CustomResource {
    /**
     * Get an existing IAMCustomRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new IAMCustomRole(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["deleted"] = state ? state.deleted : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["orgId"] = state ? state.orgId : undefined;
            inputs["permissions"] = state ? state.permissions : undefined;
            inputs["roleId"] = state ? state.roleId : undefined;
            inputs["stage"] = state ? state.stage : undefined;
            inputs["title"] = state ? state.title : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.orgId === undefined) {
                throw new Error("Missing required property 'orgId'");
            }
            if (!args || args.permissions === undefined) {
                throw new Error("Missing required property 'permissions'");
            }
            if (!args || args.roleId === undefined) {
                throw new Error("Missing required property 'roleId'");
            }
            if (!args || args.title === undefined) {
                throw new Error("Missing required property 'title'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["orgId"] = args ? args.orgId : undefined;
            inputs["permissions"] = args ? args.permissions : undefined;
            inputs["roleId"] = args ? args.roleId : undefined;
            inputs["stage"] = args ? args.stage : undefined;
            inputs["title"] = args ? args.title : undefined;
            inputs["deleted"] = undefined /*out*/;
        }
        super("gcp:organizations/iAMCustomRole:IAMCustomRole", name, inputs, opts);
    }
}
exports.IAMCustomRole = IAMCustomRole;
//# sourceMappingURL=iAMCustomRole.js.map