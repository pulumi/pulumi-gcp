"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Allows creation and management of a Google Cloud Platform project.
 *
 * Projects created with this resource must be associated with an Organization.
 * See the [Organization documentation](https://cloud.google.com/resource-manager/docs/quickstarts) for more details.
 *
 * The service account used to run Terraform when creating a `google_project`
 * resource must have `roles/resourcemanager.projectCreator`. See the
 * [Access Control for Organizations Using IAM](https://cloud.google.com/resource-manager/docs/access-control-org)
 * doc for more information.
 *
 * Note that prior to 0.8.5, `google_project` functioned like a data source,
 * meaning any project referenced by it had to be created and managed outside
 * Terraform. As of 0.8.5, `google_project` functions like any other Terraform
 * resource, with Terraform creating and managing the project. To replicate the old
 * behavior, either:
 *
 * * Use the project ID directly in whatever is referencing the project, using the
 *   [google_project_iam_policy](https://www.terraform.io/docs/providers/google/r/google_project_iam.html)
 *   to replace the old `policy_data` property.
 * * Use the [import](https://www.terraform.io/docs/import/usage.html) functionality
 *   to import your pre-existing project into Terraform, where it can be referenced and
 *   used just like always, keeping in mind that Terraform will attempt to undo any changes
 *   made outside Terraform.
 *
 * > It's important to note that any project resources that were added to your Terraform config
 * prior to 0.8.5 will continue to function as they always have, and will not be managed by
 * Terraform. Only newly added projects are affected.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myProject = new gcp.organizations.Project("my_project", {
 *     orgId: "1234567",
 *     projectId: "your-project-id",
 * });
 * ```
 *
 * To create a project under a specific folder
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const department1 = new gcp.organizations.Folder("department1", {
 *     displayName: "Department 1",
 *     parent: "organizations/1234567",
 * });
 * const my_project_in_a_folder = new gcp.organizations.Project("my_project-in-a-folder", {
 *     folderId: department1.name,
 *     projectId: "your-project-id",
 * });
 * ```
 */
class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Project(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["autoCreateNetwork"] = state ? state.autoCreateNetwork : undefined;
            inputs["billingAccount"] = state ? state.billingAccount : undefined;
            inputs["folderId"] = state ? state.folderId : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["number"] = state ? state.number : undefined;
            inputs["orgId"] = state ? state.orgId : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["skipDelete"] = state ? state.skipDelete : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.projectId === undefined) {
                throw new Error("Missing required property 'projectId'");
            }
            inputs["autoCreateNetwork"] = args ? args.autoCreateNetwork : undefined;
            inputs["billingAccount"] = args ? args.billingAccount : undefined;
            inputs["folderId"] = args ? args.folderId : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["orgId"] = args ? args.orgId : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["skipDelete"] = args ? args.skipDelete : undefined;
            inputs["number"] = undefined /*out*/;
        }
        super("gcp:organizations/project:Project", name, inputs, opts);
    }
}
exports.Project = Project;
//# sourceMappingURL=project.js.map