"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Creates a new Google SQL Database Instance. For more information, see the [official documentation](https://cloud.google.com/sql/),
 * or the [JSON API](https://cloud.google.com/sql/docs/admin-api/v1beta4/instances).
 *
 * > **NOTE on `google_sql_database_instance`:** - Second-generation instances include a
 * default 'root'@'%' user with no password. This user will be deleted by Terraform on
 * instance creation. You should use `google_sql_user` to define a custom user with
 * a restricted host and strong password.
 *
 * ## Example Usage
 *
 * ### SQL First Generation
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const master = new gcp.sql.DatabaseInstance("master", {
 *     databaseVersion: "MYSQL_5_6",
 *     // First-generation instance regions are not the conventional
 *     // Google Compute Engine regions. See argument reference below.
 *     region: "us-central",
 *     settings: {
 *         tier: "D0",
 *     },
 * });
 * ```
 *
 * ### SQL Second generation
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const master = new gcp.sql.DatabaseInstance("master", {
 *     databaseVersion: "POSTGRES_9_6",
 *     region: "us-central1",
 *     settings: {
 *         // Second-generation instance tiers are based on the machine
 *         // type. See argument reference below.
 *         tier: "db-f1-micro",
 *     },
 * });
 * ```
 *
 * ### Private IP Instance
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const privateNetwork = new gcp.compute.Network("private_network", {});
 * const privateIpAddress = new gcp.compute.GlobalAddress("private_ip_address", {
 *     addressType: "INTERNAL",
 *     network: privateNetwork.selfLink,
 *     prefixLength: 16,
 *     purpose: "VPC_PEERING",
 * });
 * const privateVpcConnection = new gcp.servicenetworking.Connection("private_vpc_connection", {
 *     network: privateNetwork.selfLink,
 *     reservedPeeringRanges: [privateIpAddress.name],
 *     service: "servicenetworking.googleapis.com",
 * });
 * const instance = new gcp.sql.DatabaseInstance("instance", {
 *     region: "us-central1",
 *     settings: {
 *         ipConfiguration: {
 *             ipv4Enabled: false,
 *             privateNetwork: privateNetwork.selfLink,
 *         },
 *         tier: "db-f1-micro",
 *     },
 * }, {dependsOn: [privateVpcConnection]});
 * ```
 */
class DatabaseInstance extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new DatabaseInstance(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["connectionName"] = state ? state.connectionName : undefined;
            inputs["databaseVersion"] = state ? state.databaseVersion : undefined;
            inputs["firstIpAddress"] = state ? state.firstIpAddress : undefined;
            inputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            inputs["masterInstanceName"] = state ? state.masterInstanceName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["publicIpAddress"] = state ? state.publicIpAddress : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["replicaConfiguration"] = state ? state.replicaConfiguration : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["serverCaCert"] = state ? state.serverCaCert : undefined;
            inputs["serviceAccountEmailAddress"] = state ? state.serviceAccountEmailAddress : undefined;
            inputs["settings"] = state ? state.settings : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.settings === undefined) {
                throw new Error("Missing required property 'settings'");
            }
            inputs["databaseVersion"] = args ? args.databaseVersion : undefined;
            inputs["masterInstanceName"] = args ? args.masterInstanceName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["replicaConfiguration"] = args ? args.replicaConfiguration : undefined;
            inputs["settings"] = args ? args.settings : undefined;
            inputs["connectionName"] = undefined /*out*/;
            inputs["firstIpAddress"] = undefined /*out*/;
            inputs["ipAddresses"] = undefined /*out*/;
            inputs["privateIpAddress"] = undefined /*out*/;
            inputs["publicIpAddress"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
            inputs["serverCaCert"] = undefined /*out*/;
            inputs["serviceAccountEmailAddress"] = undefined /*out*/;
        }
        super("gcp:sql/databaseInstance:DatabaseInstance", name, inputs, opts);
    }
}
exports.DatabaseInstance = DatabaseInstance;
//# sourceMappingURL=databaseInstance.js.map