"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Manages a RuntimeConfig variable in Google Cloud. For more information, see the
 * [official documentation](https://cloud.google.com/deployment-manager/runtime-configurator/),
 * or the
 * [JSON API](https://cloud.google.com/deployment-manager/runtime-configurator/reference/rest/).
 *
 * ## Example Usage
 *
 * Example creating a RuntimeConfig variable.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_runtime_config = new gcp.runtimeconfig.Config("my-runtime-config", {
 *     description: "Runtime configuration values for my service",
 * });
 * const environment = new gcp.runtimeconfig.Variavble("environment", {
 *     parent: my_runtime_config.name,
 *     text: "example.com",
 * });
 * ```
 *
 * You can also encode binary content using the `value` argument instead. The
 * value must be base64 encoded.
 *
 * Example of using the `value` argument.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_runtime_config = new gcp.runtimeconfig.Config("my-runtime-config", {
 *     description: "Runtime configuration values for my service",
 * });
 * const my_secret = new gcp.runtimeconfig.Variavble("my-secret", {
 *     parent: my_runtime_config.name,
 *     value: Buffer.from(fs.readFileSync("my-encrypted-secret.dat", "utf-8")).toString("base64"),
 * });
 * ```
 */
class Variavble extends pulumi.CustomResource {
    /**
     * Get an existing Variavble resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Variavble(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["name"] = state ? state.name : undefined;
            inputs["parent"] = state ? state.parent : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["text"] = state ? state.text : undefined;
            inputs["updateTime"] = state ? state.updateTime : undefined;
            inputs["value"] = state ? state.value : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.parent === undefined) {
                throw new Error("Missing required property 'parent'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["parent"] = args ? args.parent : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["text"] = args ? args.text : undefined;
            inputs["value"] = args ? args.value : undefined;
            inputs["updateTime"] = undefined /*out*/;
        }
        super("gcp:runtimeconfig/variavble:Variavble", name, inputs, opts);
    }
}
exports.Variavble = Variavble;
//# sourceMappingURL=variavble.js.map