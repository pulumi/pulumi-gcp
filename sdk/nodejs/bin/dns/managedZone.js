"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * A zone is a subtree of the DNS namespace under one administrative
 * responsibility. A ManagedZone is a resource that represents a DNS zone
 * hosted by the Cloud DNS service.
 *
 *
 * To get more information about ManagedZone, see:
 *
 * * [API documentation](https://cloud.google.com/dns/api/v1/managedZones)
 * * How-to Guides
 *     * [Managing Zones](https://cloud.google.com/dns/zones/)
 *
 * <div class = "oics-button" style="float: right; margin: 0 0 -15px">
 *   <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=dns_managed_zone_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
 *     <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
 *   </a>
 * </div>
 * ## Example Usage - Dns Managed Zone Basic
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 *
 * const rnd = new random.RandomId("rnd", {
 *     byteLength: 4,
 * });
 * const example_zone = new gcp.dns.ManagedZone("example-zone", {
 *     description: "Example DNS zone",
 *     dnsName: rnd.hex.apply(hex => `example-${hex}.com.`),
 *     labels: {
 *         foo: "bar",
 *     },
 * });
 * ```
 * ## Example Usage - Dns Managed Zone Private
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network_1 = new gcp.compute.Network("network-1", {
 *     autoCreateSubnetworks: false,
 * });
 * const network_2 = new gcp.compute.Network("network-2", {
 *     autoCreateSubnetworks: false,
 * });
 * const private_zone = new gcp.dns.ManagedZone("private-zone", {
 *     description: "Example private DNS zone",
 *     dnsName: "private.example.com.",
 *     forwardingConfig: {
 *         targetNameServers: [
 *             {
 *                 ipv4Address: "172.16.1.10",
 *             },
 *             {
 *                 ipv4Address: "172.16.1.20",
 *             },
 *         ],
 *     },
 *     labels: {
 *         foo: "bar",
 *     },
 *     privateVisibilityConfig: {
 *         networks: [
 *             {
 *                 networkUrl: network_1.selfLink,
 *             },
 *             {
 *                 networkUrl: network_2.selfLink,
 *             },
 *         ],
 *     },
 *     visibility: "private",
 * });
 * ```
 */
class ManagedZone extends pulumi.CustomResource {
    /**
     * Get an existing ManagedZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new ManagedZone(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["description"] = state ? state.description : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["forwardingConfig"] = state ? state.forwardingConfig : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nameServers"] = state ? state.nameServers : undefined;
            inputs["privateVisibilityConfig"] = state ? state.privateVisibilityConfig : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["visibility"] = state ? state.visibility : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.dnsName === undefined) {
                throw new Error("Missing required property 'dnsName'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["dnsName"] = args ? args.dnsName : undefined;
            inputs["forwardingConfig"] = args ? args.forwardingConfig : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["privateVisibilityConfig"] = args ? args.privateVisibilityConfig : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["visibility"] = args ? args.visibility : undefined;
            inputs["nameServers"] = undefined /*out*/;
        }
        super("gcp:dns/managedZone:ManagedZone", name, inputs, opts);
    }
}
exports.ManagedZone = ManagedZone;
//# sourceMappingURL=managedZone.js.map