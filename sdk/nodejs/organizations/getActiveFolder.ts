// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Get an active folder within GCP by `displayName` and `parent`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const department1 = gcp.organizations.getActiveFolder({
 *     displayName: "Department 1",
 *     parent: "organizations/1234567",
 * });
 * ```
 */
export function getActiveFolder(args: GetActiveFolderArgs, opts?: pulumi.InvokeOptions): Promise<GetActiveFolderResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:organizations/getActiveFolder:getActiveFolder", {
        "apiMethod": args.apiMethod,
        "displayName": args.displayName,
        "parent": args.parent,
    }, opts);
}

/**
 * A collection of arguments for invoking getActiveFolder.
 */
export interface GetActiveFolderArgs {
    /**
     * The API method to use to search for the folder. Valid values are `LIST` and `SEARCH`. Default Value is `LIST`. `LIST` is [strongly consistent](https://cloud.google.com/resource-manager/reference/rest/v3/folders/list#:~:text=list()%20provides%20a-,strongly%20consistent,-view%20of%20the) and requires `resourcemanager.folders.list` on the parent folder, while `SEARCH` is [eventually consistent](https://cloud.google.com/resource-manager/reference/rest/v3/folders/search#:~:text=eventually%20consistent) and only returns folders that the user has `resourcemanager.folders.get` permission on.
     */
    apiMethod?: string;
    /**
     * The folder's display name.
     */
    displayName: string;
    /**
     * The resource name of the parent Folder or Organization.
     */
    parent: string;
}

/**
 * A collection of values returned by getActiveFolder.
 */
export interface GetActiveFolderResult {
    readonly apiMethod?: string;
    readonly displayName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The resource name of the Folder. This uniquely identifies the folder.
     */
    readonly name: string;
    readonly parent: string;
}
/**
 * Get an active folder within GCP by `displayName` and `parent`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const department1 = gcp.organizations.getActiveFolder({
 *     displayName: "Department 1",
 *     parent: "organizations/1234567",
 * });
 * ```
 */
export function getActiveFolderOutput(args: GetActiveFolderOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetActiveFolderResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:organizations/getActiveFolder:getActiveFolder", {
        "apiMethod": args.apiMethod,
        "displayName": args.displayName,
        "parent": args.parent,
    }, opts);
}

/**
 * A collection of arguments for invoking getActiveFolder.
 */
export interface GetActiveFolderOutputArgs {
    /**
     * The API method to use to search for the folder. Valid values are `LIST` and `SEARCH`. Default Value is `LIST`. `LIST` is [strongly consistent](https://cloud.google.com/resource-manager/reference/rest/v3/folders/list#:~:text=list()%20provides%20a-,strongly%20consistent,-view%20of%20the) and requires `resourcemanager.folders.list` on the parent folder, while `SEARCH` is [eventually consistent](https://cloud.google.com/resource-manager/reference/rest/v3/folders/search#:~:text=eventually%20consistent) and only returns folders that the user has `resourcemanager.folders.get` permission on.
     */
    apiMethod?: pulumi.Input<string>;
    /**
     * The folder's display name.
     */
    displayName: pulumi.Input<string>;
    /**
     * The resource name of the parent Folder or Organization.
     */
    parent: pulumi.Input<string>;
}
