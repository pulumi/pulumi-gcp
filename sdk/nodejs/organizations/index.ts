// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessApprovalSettingsArgs, AccessApprovalSettingsState } from "./accessApprovalSettings";
export type AccessApprovalSettings = import("./accessApprovalSettings").AccessApprovalSettings;
export const AccessApprovalSettings: typeof import("./accessApprovalSettings").AccessApprovalSettings = null as any;
utilities.lazyLoad(exports, ["AccessApprovalSettings"], () => require("./accessApprovalSettings"));

export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export const Folder: typeof import("./folder").Folder = null as any;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));

export { GetActiveFolderArgs, GetActiveFolderResult, GetActiveFolderOutputArgs } from "./getActiveFolder";
export const getActiveFolder: typeof import("./getActiveFolder").getActiveFolder = null as any;
export const getActiveFolderOutput: typeof import("./getActiveFolder").getActiveFolderOutput = null as any;
utilities.lazyLoad(exports, ["getActiveFolder","getActiveFolderOutput"], () => require("./getActiveFolder"));

export { GetBillingAccountArgs, GetBillingAccountResult, GetBillingAccountOutputArgs } from "./getBillingAccount";
export const getBillingAccount: typeof import("./getBillingAccount").getBillingAccount = null as any;
export const getBillingAccountOutput: typeof import("./getBillingAccount").getBillingAccountOutput = null as any;
utilities.lazyLoad(exports, ["getBillingAccount","getBillingAccountOutput"], () => require("./getBillingAccount"));

export { GetClientConfigResult } from "./getClientConfig";
export const getClientConfig: typeof import("./getClientConfig").getClientConfig = null as any;
utilities.lazyLoad(exports, ["getClientConfig"], () => require("./getClientConfig"));

export { GetClientOpenIdUserInfoResult } from "./getClientOpenIdUserInfo";
export const getClientOpenIdUserInfo: typeof import("./getClientOpenIdUserInfo").getClientOpenIdUserInfo = null as any;
utilities.lazyLoad(exports, ["getClientOpenIdUserInfo"], () => require("./getClientOpenIdUserInfo"));

export { GetFolderArgs, GetFolderResult, GetFolderOutputArgs } from "./getFolder";
export const getFolder: typeof import("./getFolder").getFolder = null as any;
export const getFolderOutput: typeof import("./getFolder").getFolderOutput = null as any;
utilities.lazyLoad(exports, ["getFolder","getFolderOutput"], () => require("./getFolder"));

export { GetFoldersArgs, GetFoldersResult, GetFoldersOutputArgs } from "./getFolders";
export const getFolders: typeof import("./getFolders").getFolders = null as any;
export const getFoldersOutput: typeof import("./getFolders").getFoldersOutput = null as any;
utilities.lazyLoad(exports, ["getFolders","getFoldersOutput"], () => require("./getFolders"));

export { GetIAMPolicyArgs, GetIAMPolicyResult, GetIAMPolicyOutputArgs } from "./getIAMPolicy";
export const getIAMPolicy: typeof import("./getIAMPolicy").getIAMPolicy = null as any;
export const getIAMPolicyOutput: typeof import("./getIAMPolicy").getIAMPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIAMPolicy","getIAMPolicyOutput"], () => require("./getIAMPolicy"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { IamAuditConfigArgs, IamAuditConfigState } from "./iamAuditConfig";
export type IamAuditConfig = import("./iamAuditConfig").IamAuditConfig;
export const IamAuditConfig: typeof import("./iamAuditConfig").IamAuditConfig = null as any;
utilities.lazyLoad(exports, ["IamAuditConfig"], () => require("./iamAuditConfig"));

export { IAMBindingArgs, IAMBindingState } from "./iambinding";
export type IAMBinding = import("./iambinding").IAMBinding;
export const IAMBinding: typeof import("./iambinding").IAMBinding = null as any;
utilities.lazyLoad(exports, ["IAMBinding"], () => require("./iambinding"));

export { IAMCustomRoleArgs, IAMCustomRoleState } from "./iamcustomRole";
export type IAMCustomRole = import("./iamcustomRole").IAMCustomRole;
export const IAMCustomRole: typeof import("./iamcustomRole").IAMCustomRole = null as any;
utilities.lazyLoad(exports, ["IAMCustomRole"], () => require("./iamcustomRole"));

export { IAMMemberArgs, IAMMemberState } from "./iammember";
export type IAMMember = import("./iammember").IAMMember;
export const IAMMember: typeof import("./iammember").IAMMember = null as any;
utilities.lazyLoad(exports, ["IAMMember"], () => require("./iammember"));

export { IAMPolicyArgs, IAMPolicyState } from "./iampolicy";
export type IAMPolicy = import("./iampolicy").IAMPolicy;
export const IAMPolicy: typeof import("./iampolicy").IAMPolicy = null as any;
utilities.lazyLoad(exports, ["IAMPolicy"], () => require("./iampolicy"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:organizations/accessApprovalSettings:AccessApprovalSettings":
                return new AccessApprovalSettings(name, <any>undefined, { urn })
            case "gcp:organizations/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "gcp:organizations/iAMBinding:IAMBinding":
                return new IAMBinding(name, <any>undefined, { urn })
            case "gcp:organizations/iAMCustomRole:IAMCustomRole":
                return new IAMCustomRole(name, <any>undefined, { urn })
            case "gcp:organizations/iAMMember:IAMMember":
                return new IAMMember(name, <any>undefined, { urn })
            case "gcp:organizations/iAMPolicy:IAMPolicy":
                return new IAMPolicy(name, <any>undefined, { urn })
            case "gcp:organizations/iamAuditConfig:IamAuditConfig":
                return new IamAuditConfig(name, <any>undefined, { urn })
            case "gcp:organizations/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "gcp:organizations/project:Project":
                return new Project(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "organizations/accessApprovalSettings", _module)
pulumi.runtime.registerResourceModule("gcp", "organizations/folder", _module)
pulumi.runtime.registerResourceModule("gcp", "organizations/iAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "organizations/iAMCustomRole", _module)
pulumi.runtime.registerResourceModule("gcp", "organizations/iAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "organizations/iAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "organizations/iamAuditConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "organizations/policy", _module)
pulumi.runtime.registerResourceModule("gcp", "organizations/project", _module)
