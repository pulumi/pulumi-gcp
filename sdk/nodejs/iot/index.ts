// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;
utilities.lazyLoad(exports, ["Device"], () => require("./device"));

export { RegistryArgs, RegistryState } from "./registry";
export type Registry = import("./registry").Registry;
export const Registry: typeof import("./registry").Registry = null as any;
utilities.lazyLoad(exports, ["Registry"], () => require("./registry"));

export { RegistryIamBindingArgs, RegistryIamBindingState } from "./registryIamBinding";
export type RegistryIamBinding = import("./registryIamBinding").RegistryIamBinding;
export const RegistryIamBinding: typeof import("./registryIamBinding").RegistryIamBinding = null as any;
utilities.lazyLoad(exports, ["RegistryIamBinding"], () => require("./registryIamBinding"));

export { RegistryIamMemberArgs, RegistryIamMemberState } from "./registryIamMember";
export type RegistryIamMember = import("./registryIamMember").RegistryIamMember;
export const RegistryIamMember: typeof import("./registryIamMember").RegistryIamMember = null as any;
utilities.lazyLoad(exports, ["RegistryIamMember"], () => require("./registryIamMember"));

export { RegistryIamPolicyArgs, RegistryIamPolicyState } from "./registryIamPolicy";
export type RegistryIamPolicy = import("./registryIamPolicy").RegistryIamPolicy;
export const RegistryIamPolicy: typeof import("./registryIamPolicy").RegistryIamPolicy = null as any;
utilities.lazyLoad(exports, ["RegistryIamPolicy"], () => require("./registryIamPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:iot/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "gcp:iot/registry:Registry":
                return new Registry(name, <any>undefined, { urn })
            case "gcp:iot/registryIamBinding:RegistryIamBinding":
                return new RegistryIamBinding(name, <any>undefined, { urn })
            case "gcp:iot/registryIamMember:RegistryIamMember":
                return new RegistryIamMember(name, <any>undefined, { urn })
            case "gcp:iot/registryIamPolicy:RegistryIamPolicy":
                return new RegistryIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "iot/device", _module)
pulumi.runtime.registerResourceModule("gcp", "iot/registry", _module)
pulumi.runtime.registerResourceModule("gcp", "iot/registryIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iot/registryIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "iot/registryIamPolicy", _module)
