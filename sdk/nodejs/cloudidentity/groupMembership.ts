// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * A Membership defines a relationship between a Group and an entity belonging to that Group, referred to as a "member".
 *
 * > **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
 * you must specify a `billingProject` and set `userProjectOverride` to true
 * in the provider configuration. Otherwise the Cloud Identity API will return a 403 error.
 * Your account must have the `serviceusage.services.use` permission on the
 * `billingProject` you defined.
 *
 * ## Example Usage
 * ### Cloud Identity Group Membership User
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const group = new gcp.cloudidentity.Group("group", {
 *     displayName: "my-identity-group",
 *     parent: "customers/A01b123xz",
 *     groupKey: {
 *         id: "my-identity-group@example.com",
 *     },
 *     labels: {
 *         "cloudidentity.googleapis.com/groups.discussion_forum": "",
 *     },
 * });
 * const cloudIdentityGroupMembershipBasic = new gcp.cloudidentity.GroupMembership("cloudIdentityGroupMembershipBasic", {
 *     group: group.id,
 *     preferredMemberKey: {
 *         id: "cloud_identity_user@example.com",
 *     },
 *     roles: [
 *         {
 *             name: "MEMBER",
 *         },
 *         {
 *             name: "MANAGER",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * GroupMembership can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudidentity/groupMembership:GroupMembership default {{name}}
 * ```
 */
export class GroupMembership extends pulumi.CustomResource {
    /**
     * Get an existing GroupMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupMembershipState, opts?: pulumi.CustomResourceOptions): GroupMembership {
        return new GroupMembership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:cloudidentity/groupMembership:GroupMembership';

    /**
     * Returns true if the given object is an instance of GroupMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupMembership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupMembership.__pulumiType;
    }

    /**
     * The time when the Membership was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The name of the Group to create this membership in.
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * EntityKey of the member.
     */
    public readonly memberKey!: pulumi.Output<outputs.cloudidentity.GroupMembershipMemberKey>;
    /**
     * The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
     * Possible values are `OWNER`, `MANAGER`, and `MEMBER`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * EntityKey of the member.
     * Structure is documented below.
     */
    public readonly preferredMemberKey!: pulumi.Output<outputs.cloudidentity.GroupMembershipPreferredMemberKey>;
    /**
     * The MembershipRoles that apply to the Membership.
     * Must not contain duplicate MembershipRoles with the same name.
     * Structure is documented below.
     */
    public readonly roles!: pulumi.Output<outputs.cloudidentity.GroupMembershipRole[]>;
    /**
     * The type of the membership.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The time when the Membership was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a GroupMembership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupMembershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupMembershipArgs | GroupMembershipState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupMembershipState | undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["group"] = state ? state.group : undefined;
            inputs["memberKey"] = state ? state.memberKey : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["preferredMemberKey"] = state ? state.preferredMemberKey : undefined;
            inputs["roles"] = state ? state.roles : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as GroupMembershipArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            inputs["group"] = args ? args.group : undefined;
            inputs["memberKey"] = args ? args.memberKey : undefined;
            inputs["preferredMemberKey"] = args ? args.preferredMemberKey : undefined;
            inputs["roles"] = args ? args.roles : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(GroupMembership.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupMembership resources.
 */
export interface GroupMembershipState {
    /**
     * The time when the Membership was created.
     */
    readonly createTime?: pulumi.Input<string>;
    /**
     * The name of the Group to create this membership in.
     */
    readonly group?: pulumi.Input<string>;
    /**
     * EntityKey of the member.
     */
    readonly memberKey?: pulumi.Input<inputs.cloudidentity.GroupMembershipMemberKey>;
    /**
     * The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
     * Possible values are `OWNER`, `MANAGER`, and `MEMBER`.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * EntityKey of the member.
     * Structure is documented below.
     */
    readonly preferredMemberKey?: pulumi.Input<inputs.cloudidentity.GroupMembershipPreferredMemberKey>;
    /**
     * The MembershipRoles that apply to the Membership.
     * Must not contain duplicate MembershipRoles with the same name.
     * Structure is documented below.
     */
    readonly roles?: pulumi.Input<pulumi.Input<inputs.cloudidentity.GroupMembershipRole>[]>;
    /**
     * The type of the membership.
     */
    readonly type?: pulumi.Input<string>;
    /**
     * The time when the Membership was last updated.
     */
    readonly updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroupMembership resource.
 */
export interface GroupMembershipArgs {
    /**
     * The name of the Group to create this membership in.
     */
    readonly group: pulumi.Input<string>;
    /**
     * EntityKey of the member.
     */
    readonly memberKey?: pulumi.Input<inputs.cloudidentity.GroupMembershipMemberKey>;
    /**
     * EntityKey of the member.
     * Structure is documented below.
     */
    readonly preferredMemberKey?: pulumi.Input<inputs.cloudidentity.GroupMembershipPreferredMemberKey>;
    /**
     * The MembershipRoles that apply to the Membership.
     * Must not contain duplicate MembershipRoles with the same name.
     * Structure is documented below.
     */
    readonly roles: pulumi.Input<pulumi.Input<inputs.cloudidentity.GroupMembershipRole>[]>;
}
