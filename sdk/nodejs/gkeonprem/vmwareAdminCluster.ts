// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Gkeonprem Vmware Admin Cluster Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin_cluster_basic = new gcp.gkeonprem.VmwareAdminCluster("admin-cluster-basic", {
 *     name: "basic",
 *     location: "us-west1",
 *     description: "test admin cluster",
 *     bootstrapClusterMembership: "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
 *     onPremVersion: "1.31.0-gke.35",
 *     imageType: "ubuntu_containerd",
 *     vcenter: {
 *         resourcePool: "test resource pool",
 *         datastore: "test data store",
 *         datacenter: "test data center",
 *         cluster: "test cluster",
 *         folder: "test folder",
 *         caCertData: "test ca cert data",
 *         address: "10.0.0.1",
 *         dataDisk: "test data disk",
 *     },
 *     networkConfig: {
 *         serviceAddressCidrBlocks: ["10.96.0.0/12"],
 *         podAddressCidrBlocks: ["192.168.0.0/16"],
 *         dhcpIpConfig: {
 *             enabled: true,
 *         },
 *     },
 *     controlPlaneNode: {
 *         cpus: 4,
 *         memory: 8192,
 *     },
 *     loadBalancer: {
 *         vipConfig: {
 *             controlPlaneVip: "10.251.133.5",
 *             addonsVip: "10.251.135.19",
 *         },
 *         f5Config: {
 *             address: "10.251.135.22",
 *             partition: "test-parition",
 *             snatPool: "test-snat-pool",
 *         },
 *     },
 *     privateRegistryConfig: {
 *         address: "test-address",
 *         caCert: "test-ca-cert",
 *     },
 * });
 * ```
 * ### Gkeonprem Vmware Admin Cluster Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin_cluster_full = new gcp.gkeonprem.VmwareAdminCluster("admin-cluster-full", {
 *     name: "full",
 *     location: "us-west1",
 *     description: "test admin cluster",
 *     bootstrapClusterMembership: "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
 *     onPremVersion: "1.31.0-gke.35",
 *     imageType: "ubuntu_containerd",
 *     annotations: {},
 *     vcenter: {
 *         resourcePool: "test resource pool",
 *         datastore: "test data store",
 *         datacenter: "test data center",
 *         cluster: "test cluster",
 *         folder: "test folder",
 *         caCertData: "test ca cert data",
 *         address: "10.0.0.1",
 *         dataDisk: "test data disk",
 *         storagePolicyName: "storage_policy_name",
 *     },
 *     networkConfig: {
 *         serviceAddressCidrBlocks: ["10.96.0.0/12"],
 *         podAddressCidrBlocks: ["192.168.0.0/16"],
 *         haControlPlaneConfig: {
 *             controlPlaneIpBlock: {
 *                 gateway: "10.0.0.3",
 *                 ips: [{
 *                     hostname: "hostname",
 *                     ip: "10.0.0.4",
 *                 }],
 *                 netmask: "10.0.0.3/32",
 *             },
 *         },
 *         hostConfig: {
 *             dnsServers: ["10.254.41.1"],
 *             ntpServers: ["216.239.35.8"],
 *             dnsSearchDomains: ["test-domain"],
 *         },
 *         staticIpConfig: {
 *             ipBlocks: [{
 *                 gateway: "10.0.0.1",
 *                 ips: [{
 *                     hostname: "hostname",
 *                     ip: "10.0.0.2",
 *                 }],
 *                 netmask: "10.0.0.3/32",
 *             }],
 *         },
 *         vcenterNetwork: "test-vcenter-network",
 *     },
 *     controlPlaneNode: {
 *         cpus: 4,
 *         memory: 8192,
 *         replicas: 3,
 *     },
 *     loadBalancer: {
 *         vipConfig: {
 *             controlPlaneVip: "10.251.133.5",
 *             addonsVip: "10.251.135.19",
 *         },
 *         manualLbConfig: {
 *             addonsNodePort: 30005,
 *             controlPlaneNodePort: 30006,
 *             ingressHttpNodePort: 30007,
 *             ingressHttpsNodePort: 30008,
 *             konnectivityServerNodePort: 30009,
 *         },
 *     },
 *     addonNode: {
 *         autoResizeConfig: {
 *             enabled: true,
 *         },
 *     },
 *     antiAffinityGroups: {
 *         aagConfigDisabled: true,
 *     },
 *     authorization: {
 *         viewerUsers: [{
 *             username: "user1@gmail.com",
 *         }],
 *     },
 *     autoRepairConfig: {
 *         enabled: true,
 *     },
 *     platformConfig: {
 *         requiredPlatformVersion: "1.31.0",
 *     },
 *     privateRegistryConfig: {
 *         address: "test-address",
 *         caCert: "test-ca-cert",
 *     },
 * });
 * ```
 * ### Gkeonprem Vmware Admin Cluster Metallb
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin_cluster_metallb = new gcp.gkeonprem.VmwareAdminCluster("admin-cluster-metallb", {
 *     name: "metallb",
 *     location: "us-west1",
 *     description: "test admin cluster",
 *     bootstrapClusterMembership: "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
 *     onPremVersion: "1.31.0-gke.35",
 *     imageType: "ubuntu_containerd",
 *     vcenter: {
 *         resourcePool: "test resource pool",
 *         datastore: "test data store",
 *         datacenter: "test data center",
 *         cluster: "test cluster",
 *         folder: "test folder",
 *         caCertData: "test ca cert data",
 *         address: "10.0.0.1",
 *         dataDisk: "test data disk",
 *     },
 *     networkConfig: {
 *         serviceAddressCidrBlocks: ["10.96.0.0/12"],
 *         podAddressCidrBlocks: ["192.168.0.0/16"],
 *         dhcpIpConfig: {
 *             enabled: true,
 *         },
 *     },
 *     controlPlaneNode: {
 *         cpus: 4,
 *         memory: 8192,
 *     },
 *     loadBalancer: {
 *         vipConfig: {
 *             controlPlaneVip: "10.251.133.5",
 *             addonsVip: "10.251.135.19",
 *         },
 *         metalLbConfig: {
 *             enabled: true,
 *         },
 *     },
 *     privateRegistryConfig: {
 *         address: "test-address",
 *         caCert: "test-ca-cert",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * VmwareAdminCluster can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/vmwareAdminClusters/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, VmwareAdminCluster can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster default projects/{{project}}/locations/{{location}}/vmwareAdminClusters/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster default {{location}}/{{name}}
 * ```
 */
export class VmwareAdminCluster extends pulumi.CustomResource {
    /**
     * Get an existing VmwareAdminCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmwareAdminClusterState, opts?: pulumi.CustomResourceOptions): VmwareAdminCluster {
        return new VmwareAdminCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster';

    /**
     * Returns true if the given object is an instance of VmwareAdminCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmwareAdminCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmwareAdminCluster.__pulumiType;
    }

    /**
     * The VMware admin cluster addon node configuration.
     * Structure is documented below.
     */
    public readonly addonNode!: pulumi.Output<outputs.gkeonprem.VmwareAdminClusterAddonNode>;
    /**
     * Annotations on the VMware Admin Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     *
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * AAGConfig specifies whether to spread VMware Admin Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     */
    public readonly antiAffinityGroups!: pulumi.Output<outputs.gkeonprem.VmwareAdminClusterAntiAffinityGroups>;
    /**
     * The VMware admin cluster authorization configuration.
     * Structure is documented below.
     */
    public readonly authorization!: pulumi.Output<outputs.gkeonprem.VmwareAdminClusterAuthorization | undefined>;
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     */
    public readonly autoRepairConfig!: pulumi.Output<outputs.gkeonprem.VmwareAdminClusterAutoRepairConfig>;
    /**
     * The bootstrap cluster this VMware admin cluster belongs to.
     */
    public readonly bootstrapClusterMembership!: pulumi.Output<string>;
    /**
     * The VMware admin cluster control plane node configuration.
     * Structure is documented below.
     */
    public readonly controlPlaneNode!: pulumi.Output<outputs.gkeonprem.VmwareAdminClusterControlPlaneNode | undefined>;
    /**
     * The time the cluster was created, in RFC3339 text format.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A human readable description of this VMware admin cluster.
     */
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * If set, the advanced cluster feature is enabled.
     */
    public /*out*/ readonly enableAdvancedCluster!: pulumi.Output<boolean>;
    /**
     * The DNS name of VMware admin cluster's API server.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Fleet configuration for the cluster.
     * Structure is documented below.
     */
    public /*out*/ readonly fleets!: pulumi.Output<outputs.gkeonprem.VmwareAdminClusterFleet[]>;
    /**
     * The OS image type for the VMware admin cluster.
     */
    public readonly imageType!: pulumi.Output<string>;
    /**
     * Specifies the load balancer configuration for VMware admin cluster.
     * Structure is documented below.
     */
    public readonly loadBalancer!: pulumi.Output<outputs.gkeonprem.VmwareAdminClusterLoadBalancer | undefined>;
    /**
     * The object name of the VMwareAdminCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     */
    public /*out*/ readonly localName!: pulumi.Output<string>;
    /**
     * The location of the resource.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The VMware admin cluster resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The VMware admin cluster network configuration.
     * Structure is documented below.
     */
    public readonly networkConfig!: pulumi.Output<outputs.gkeonprem.VmwareAdminClusterNetworkConfig>;
    /**
     * The Anthos clusters on the VMware version for the admin cluster.
     */
    public readonly onPremVersion!: pulumi.Output<string | undefined>;
    /**
     * The VMware platform configuration.
     * Structure is documented below.
     */
    public readonly platformConfig!: pulumi.Output<outputs.gkeonprem.VmwareAdminClusterPlatformConfig | undefined>;
    /**
     * Configuration for private registry.
     * Structure is documented below.
     */
    public readonly privateRegistryConfig!: pulumi.Output<outputs.gkeonprem.VmwareAdminClusterPrivateRegistryConfig | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * If set, there are currently changes in flight to the VMware admin cluster.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * (Output)
     * The lifecycle state of the condition.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * ResourceStatus representing detailed cluster state.
     * Structure is documented below.
     */
    public /*out*/ readonly statuses!: pulumi.Output<outputs.gkeonprem.VmwareAdminClusterStatus[]>;
    /**
     * The unique identifier of the VMware Admin Cluster.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The time the cluster was last updated, in RFC3339 text format.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Specifies vCenter config for the admin cluster.
     * Structure is documented below.
     */
    public readonly vcenter!: pulumi.Output<outputs.gkeonprem.VmwareAdminClusterVcenter | undefined>;

    /**
     * Create a VmwareAdminCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmwareAdminClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmwareAdminClusterArgs | VmwareAdminClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmwareAdminClusterState | undefined;
            resourceInputs["addonNode"] = state ? state.addonNode : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["antiAffinityGroups"] = state ? state.antiAffinityGroups : undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["autoRepairConfig"] = state ? state.autoRepairConfig : undefined;
            resourceInputs["bootstrapClusterMembership"] = state ? state.bootstrapClusterMembership : undefined;
            resourceInputs["controlPlaneNode"] = state ? state.controlPlaneNode : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["enableAdvancedCluster"] = state ? state.enableAdvancedCluster : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["fleets"] = state ? state.fleets : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["loadBalancer"] = state ? state.loadBalancer : undefined;
            resourceInputs["localName"] = state ? state.localName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConfig"] = state ? state.networkConfig : undefined;
            resourceInputs["onPremVersion"] = state ? state.onPremVersion : undefined;
            resourceInputs["platformConfig"] = state ? state.platformConfig : undefined;
            resourceInputs["privateRegistryConfig"] = state ? state.privateRegistryConfig : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["statuses"] = state ? state.statuses : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vcenter"] = state ? state.vcenter : undefined;
        } else {
            const args = argsOrState as VmwareAdminClusterArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.networkConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkConfig'");
            }
            resourceInputs["addonNode"] = args ? args.addonNode : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["antiAffinityGroups"] = args ? args.antiAffinityGroups : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["autoRepairConfig"] = args ? args.autoRepairConfig : undefined;
            resourceInputs["bootstrapClusterMembership"] = args ? args.bootstrapClusterMembership : undefined;
            resourceInputs["controlPlaneNode"] = args ? args.controlPlaneNode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["imageType"] = args ? args.imageType : undefined;
            resourceInputs["loadBalancer"] = args ? args.loadBalancer : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConfig"] = args ? args.networkConfig : undefined;
            resourceInputs["onPremVersion"] = args ? args.onPremVersion : undefined;
            resourceInputs["platformConfig"] = args ? args.platformConfig : undefined;
            resourceInputs["privateRegistryConfig"] = args ? args.privateRegistryConfig : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["vcenter"] = args ? args.vcenter : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["enableAdvancedCluster"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["fleets"] = undefined /*out*/;
            resourceInputs["localName"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["statuses"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmwareAdminCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VmwareAdminCluster resources.
 */
export interface VmwareAdminClusterState {
    /**
     * The VMware admin cluster addon node configuration.
     * Structure is documented below.
     */
    addonNode?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterAddonNode>;
    /**
     * Annotations on the VMware Admin Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     *
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * AAGConfig specifies whether to spread VMware Admin Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     */
    antiAffinityGroups?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterAntiAffinityGroups>;
    /**
     * The VMware admin cluster authorization configuration.
     * Structure is documented below.
     */
    authorization?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterAuthorization>;
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     */
    autoRepairConfig?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterAutoRepairConfig>;
    /**
     * The bootstrap cluster this VMware admin cluster belongs to.
     */
    bootstrapClusterMembership?: pulumi.Input<string>;
    /**
     * The VMware admin cluster control plane node configuration.
     * Structure is documented below.
     */
    controlPlaneNode?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterControlPlaneNode>;
    /**
     * The time the cluster was created, in RFC3339 text format.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A human readable description of this VMware admin cluster.
     */
    description?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, the advanced cluster feature is enabled.
     */
    enableAdvancedCluster?: pulumi.Input<boolean>;
    /**
     * The DNS name of VMware admin cluster's API server.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     */
    etag?: pulumi.Input<string>;
    /**
     * Fleet configuration for the cluster.
     * Structure is documented below.
     */
    fleets?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VmwareAdminClusterFleet>[]>;
    /**
     * The OS image type for the VMware admin cluster.
     */
    imageType?: pulumi.Input<string>;
    /**
     * Specifies the load balancer configuration for VMware admin cluster.
     * Structure is documented below.
     */
    loadBalancer?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterLoadBalancer>;
    /**
     * The object name of the VMwareAdminCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     */
    localName?: pulumi.Input<string>;
    /**
     * The location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * The VMware admin cluster resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The VMware admin cluster network configuration.
     * Structure is documented below.
     */
    networkConfig?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterNetworkConfig>;
    /**
     * The Anthos clusters on the VMware version for the admin cluster.
     */
    onPremVersion?: pulumi.Input<string>;
    /**
     * The VMware platform configuration.
     * Structure is documented below.
     */
    platformConfig?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterPlatformConfig>;
    /**
     * Configuration for private registry.
     * Structure is documented below.
     */
    privateRegistryConfig?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterPrivateRegistryConfig>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * If set, there are currently changes in flight to the VMware admin cluster.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * (Output)
     * The lifecycle state of the condition.
     */
    state?: pulumi.Input<string>;
    /**
     * ResourceStatus representing detailed cluster state.
     * Structure is documented below.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VmwareAdminClusterStatus>[]>;
    /**
     * The unique identifier of the VMware Admin Cluster.
     */
    uid?: pulumi.Input<string>;
    /**
     * The time the cluster was last updated, in RFC3339 text format.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Specifies vCenter config for the admin cluster.
     * Structure is documented below.
     */
    vcenter?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterVcenter>;
}

/**
 * The set of arguments for constructing a VmwareAdminCluster resource.
 */
export interface VmwareAdminClusterArgs {
    /**
     * The VMware admin cluster addon node configuration.
     * Structure is documented below.
     */
    addonNode?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterAddonNode>;
    /**
     * Annotations on the VMware Admin Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     *
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * AAGConfig specifies whether to spread VMware Admin Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     */
    antiAffinityGroups?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterAntiAffinityGroups>;
    /**
     * The VMware admin cluster authorization configuration.
     * Structure is documented below.
     */
    authorization?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterAuthorization>;
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     */
    autoRepairConfig?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterAutoRepairConfig>;
    /**
     * The bootstrap cluster this VMware admin cluster belongs to.
     */
    bootstrapClusterMembership?: pulumi.Input<string>;
    /**
     * The VMware admin cluster control plane node configuration.
     * Structure is documented below.
     */
    controlPlaneNode?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterControlPlaneNode>;
    /**
     * A human readable description of this VMware admin cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * The OS image type for the VMware admin cluster.
     */
    imageType?: pulumi.Input<string>;
    /**
     * Specifies the load balancer configuration for VMware admin cluster.
     * Structure is documented below.
     */
    loadBalancer?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterLoadBalancer>;
    /**
     * The location of the resource.
     */
    location: pulumi.Input<string>;
    /**
     * The VMware admin cluster resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The VMware admin cluster network configuration.
     * Structure is documented below.
     */
    networkConfig: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterNetworkConfig>;
    /**
     * The Anthos clusters on the VMware version for the admin cluster.
     */
    onPremVersion?: pulumi.Input<string>;
    /**
     * The VMware platform configuration.
     * Structure is documented below.
     */
    platformConfig?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterPlatformConfig>;
    /**
     * Configuration for private registry.
     * Structure is documented below.
     */
    privateRegistryConfig?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterPrivateRegistryConfig>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Specifies vCenter config for the admin cluster.
     * Structure is documented below.
     */
    vcenter?: pulumi.Input<inputs.gkeonprem.VmwareAdminClusterVcenter>;
}
