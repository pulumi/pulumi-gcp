// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A Google VMware User Cluster.
 *
 * To get more information about VmwareCluster, see:
 *
 * * [API documentation](https://cloud.google.com/kubernetes-engine/distributed-cloud/reference/on-prem-api/rest/v1/projects.locations.vmwareClusters)
 *
 * ## Example Usage
 *
 * ### Gkeonprem Vmware Cluster Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cluster_basic = new gcp.gkeonprem.VMwareCluster("cluster-basic", {
 *     name: "cluster-basic",
 *     location: "us-west1",
 *     adminClusterMembership: "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
 *     description: "test cluster",
 *     onPremVersion: "1.13.1-gke.35",
 *     annotations: {},
 *     networkConfig: {
 *         serviceAddressCidrBlocks: ["10.96.0.0/12"],
 *         podAddressCidrBlocks: ["192.168.0.0/16"],
 *         dhcpIpConfig: {
 *             enabled: true,
 *         },
 *     },
 *     controlPlaneNode: {
 *         cpus: 4,
 *         memory: 8192,
 *         replicas: 1,
 *     },
 *     loadBalancer: {
 *         vipConfig: {
 *             controlPlaneVip: "10.251.133.5",
 *             ingressVip: "10.251.135.19",
 *         },
 *         metalLbConfig: {
 *             addressPools: [
 *                 {
 *                     pool: "ingress-ip",
 *                     manualAssign: true,
 *                     addresses: ["10.251.135.19"],
 *                     avoidBuggyIps: true,
 *                 },
 *                 {
 *                     pool: "lb-test-ip",
 *                     manualAssign: true,
 *                     addresses: ["10.251.135.19"],
 *                     avoidBuggyIps: true,
 *                 },
 *             ],
 *         },
 *     },
 * });
 * ```
 * ### Gkeonprem Vmware Cluster F5lb
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cluster_f5lb = new gcp.gkeonprem.VMwareCluster("cluster-f5lb", {
 *     name: "cluster-f5lb",
 *     location: "us-west1",
 *     adminClusterMembership: "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
 *     description: "test cluster",
 *     onPremVersion: "1.13.1-gke.35",
 *     annotations: {},
 *     networkConfig: {
 *         serviceAddressCidrBlocks: ["10.96.0.0/12"],
 *         podAddressCidrBlocks: ["192.168.0.0/16"],
 *         dhcpIpConfig: {
 *             enabled: true,
 *         },
 *         controlPlaneV2Config: {
 *             controlPlaneIpBlock: {
 *                 ips: [{
 *                     hostname: "test-hostname",
 *                     ip: "10.0.0.1",
 *                 }],
 *                 netmask: "10.0.0.1/32",
 *                 gateway: "test-gateway",
 *             },
 *         },
 *         vcenterNetwork: "test-vcenter-network",
 *     },
 *     controlPlaneNode: {
 *         cpus: 4,
 *         memory: 8192,
 *         replicas: 1,
 *         autoResizeConfig: {
 *             enabled: true,
 *         },
 *     },
 *     loadBalancer: {
 *         vipConfig: {
 *             controlPlaneVip: "10.251.133.5",
 *             ingressVip: "10.251.135.19",
 *         },
 *         f5Config: {
 *             address: "10.0.0.1",
 *             partition: "test-partition",
 *             snatPool: "test-snap-pool",
 *         },
 *     },
 *     dataplaneV2: {
 *         dataplaneV2Enabled: true,
 *         windowsDataplaneV2Enabled: true,
 *         advancedNetworking: true,
 *     },
 *     vmTrackingEnabled: true,
 *     enableControlPlaneV2: true,
 *     disableBundledIngress: true,
 *     authorization: {
 *         adminUsers: [{
 *             username: "testuser@gmail.com",
 *         }],
 *     },
 *     antiAffinityGroups: {
 *         aagConfigDisabled: true,
 *     },
 *     autoRepairConfig: {
 *         enabled: true,
 *     },
 *     storage: {
 *         vsphereCsiDisabled: true,
 *     },
 * });
 * ```
 * ### Gkeonprem Vmware Cluster Manuallb
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cluster_manuallb = new gcp.gkeonprem.VMwareCluster("cluster-manuallb", {
 *     name: "cluster-manuallb",
 *     location: "us-west1",
 *     adminClusterMembership: "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
 *     description: "test cluster",
 *     onPremVersion: "1.13.1-gke.35",
 *     annotations: {},
 *     networkConfig: {
 *         serviceAddressCidrBlocks: ["10.96.0.0/12"],
 *         podAddressCidrBlocks: ["192.168.0.0/16"],
 *         hostConfig: {
 *             dnsServers: ["10.254.41.1"],
 *             ntpServers: ["216.239.35.8"],
 *             dnsSearchDomains: ["test-domain"],
 *         },
 *         staticIpConfig: {
 *             ipBlocks: [{
 *                 netmask: "255.255.252.0",
 *                 gateway: "10.251.31.254",
 *                 ips: [
 *                     {
 *                         ip: "10.251.30.153",
 *                         hostname: "test-hostname1",
 *                     },
 *                     {
 *                         ip: "10.251.31.206",
 *                         hostname: "test-hostname2",
 *                     },
 *                     {
 *                         ip: "10.251.31.193",
 *                         hostname: "test-hostname3",
 *                     },
 *                     {
 *                         ip: "10.251.30.230",
 *                         hostname: "test-hostname4",
 *                     },
 *                 ],
 *             }],
 *         },
 *     },
 *     controlPlaneNode: {
 *         cpus: 4,
 *         memory: 8192,
 *         replicas: 1,
 *         autoResizeConfig: {
 *             enabled: true,
 *         },
 *     },
 *     loadBalancer: {
 *         vipConfig: {
 *             controlPlaneVip: "10.251.133.5",
 *             ingressVip: "10.251.135.19",
 *         },
 *         manualLbConfig: {
 *             ingressHttpNodePort: 30005,
 *             ingressHttpsNodePort: 30006,
 *             controlPlaneNodePort: 30007,
 *             konnectivityServerNodePort: 30008,
 *         },
 *     },
 *     vcenter: {
 *         resourcePool: "test-resource-pool",
 *         datastore: "test-datastore",
 *         datacenter: "test-datacenter",
 *         cluster: "test-cluster",
 *         folder: "test-folder",
 *         caCertData: "test-ca-cert-data",
 *         storagePolicyName: "test-storage-policy-name",
 *     },
 *     dataplaneV2: {
 *         dataplaneV2Enabled: true,
 *         windowsDataplaneV2Enabled: true,
 *         advancedNetworking: true,
 *     },
 *     vmTrackingEnabled: true,
 *     enableControlPlaneV2: true,
 *     enableAdvancedCluster: true,
 *     upgradePolicy: {
 *         controlPlaneOnly: true,
 *     },
 *     authorization: {
 *         adminUsers: [{
 *             username: "testuser@gmail.com",
 *         }],
 *     },
 *     antiAffinityGroups: {
 *         aagConfigDisabled: true,
 *     },
 *     autoRepairConfig: {
 *         enabled: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * VmwareCluster can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/vmwareClusters/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, VmwareCluster can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gkeonprem/vMwareCluster:VMwareCluster default projects/{{project}}/locations/{{location}}/vmwareClusters/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkeonprem/vMwareCluster:VMwareCluster default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkeonprem/vMwareCluster:VMwareCluster default {{location}}/{{name}}
 * ```
 */
export class VMwareCluster extends pulumi.CustomResource {
    /**
     * Get an existing VMwareCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VMwareClusterState, opts?: pulumi.CustomResourceOptions): VMwareCluster {
        return new VMwareCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:gkeonprem/vMwareCluster:VMwareCluster';

    /**
     * Returns true if the given object is an instance of VMwareCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VMwareCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VMwareCluster.__pulumiType;
    }

    /**
     * The admin cluster this VMware User Cluster belongs to.
     * This is the full resource name of the admin cluster's hub membership.
     * In the future, references to other resource types might be allowed if
     * admin clusters are modeled as their own resources.
     */
    declare public readonly adminClusterMembership: pulumi.Output<string>;
    /**
     * Annotations on the VMware User Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     *
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * AAGConfig specifies whether to spread VMware User Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     */
    declare public readonly antiAffinityGroups: pulumi.Output<outputs.gkeonprem.VMwareClusterAntiAffinityGroups>;
    /**
     * RBAC policy that will be applied and managed by GKE On-Prem.
     * Structure is documented below.
     */
    declare public readonly authorization: pulumi.Output<outputs.gkeonprem.VMwareClusterAuthorization | undefined>;
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     */
    declare public readonly autoRepairConfig: pulumi.Output<outputs.gkeonprem.VMwareClusterAutoRepairConfig>;
    /**
     * VMware User Cluster control plane nodes must have either 1 or 3 replicas.
     * Structure is documented below.
     */
    declare public readonly controlPlaneNode: pulumi.Output<outputs.gkeonprem.VMwareClusterControlPlaneNode>;
    /**
     * The time at which VMware User Cluster was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     * Structure is documented below.
     */
    declare public readonly dataplaneV2: pulumi.Output<outputs.gkeonprem.VMwareClusterDataplaneV2>;
    /**
     * The time at which VMware User Cluster was deleted.
     */
    declare public /*out*/ readonly deleteTime: pulumi.Output<string>;
    /**
     * A human readable description of this VMware User Cluster.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Disable bundled ingress.
     */
    declare public readonly disableBundledIngress: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly effectiveAnnotations: pulumi.Output<{[key: string]: string}>;
    /**
     * Enable advanced cluster. Default to false.
     */
    declare public readonly enableAdvancedCluster: pulumi.Output<boolean | undefined>;
    /**
     * Enable control plane V2. Default to false.
     */
    declare public readonly enableControlPlaneV2: pulumi.Output<boolean | undefined>;
    /**
     * The DNS name of VMware User Cluster's API server.
     */
    declare public /*out*/ readonly endpoint: pulumi.Output<string>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     */
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    /**
     * Fleet configuration for the cluster.
     * Structure is documented below.
     */
    declare public /*out*/ readonly fleets: pulumi.Output<outputs.gkeonprem.VMwareClusterFleet[]>;
    /**
     * Load Balancer configuration.
     * Structure is documented below.
     */
    declare public readonly loadBalancer: pulumi.Output<outputs.gkeonprem.VMwareClusterLoadBalancer | undefined>;
    /**
     * The object name of the VMware OnPremUserCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     */
    declare public /*out*/ readonly localName: pulumi.Output<string>;
    /**
     * The location of the resource.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The VMware cluster name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The VMware User Cluster network configuration.
     * Structure is documented below.
     */
    declare public readonly networkConfig: pulumi.Output<outputs.gkeonprem.VMwareClusterNetworkConfig | undefined>;
    /**
     * The Anthos clusters on the VMware version for your user cluster.
     */
    declare public readonly onPremVersion: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * If set, there are currently changes in flight to the VMware User Cluster.
     */
    declare public /*out*/ readonly reconciling: pulumi.Output<boolean>;
    /**
     * (Output)
     * The lifecycle state of the condition.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * (Output)
     * Specifies the detailed validation check status
     * Structure is documented below.
     */
    declare public /*out*/ readonly statuses: pulumi.Output<outputs.gkeonprem.VMwareClusterStatus[]>;
    /**
     * Storage configuration.
     * Structure is documented below.
     */
    declare public readonly storage: pulumi.Output<outputs.gkeonprem.VMwareClusterStorage>;
    /**
     * The unique identifier of the VMware User Cluster.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * The time at which VMware User Cluster was last updated.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;
    /**
     * Specifies upgrade policy for the cluster.
     * Structure is documented below.
     */
    declare public readonly upgradePolicy: pulumi.Output<outputs.gkeonprem.VMwareClusterUpgradePolicy | undefined>;
    /**
     * ValidationCheck represents the result of the preflight check job.
     * Structure is documented below.
     */
    declare public /*out*/ readonly validationChecks: pulumi.Output<outputs.gkeonprem.VMwareClusterValidationCheck[]>;
    /**
     * VmwareVCenterConfig specifies vCenter config for the user cluster.
     * Inherited from the admin cluster.
     * Structure is documented below.
     */
    declare public readonly vcenter: pulumi.Output<outputs.gkeonprem.VMwareClusterVcenter>;
    /**
     * Enable VM tracking.
     */
    declare public readonly vmTrackingEnabled: pulumi.Output<boolean>;

    /**
     * Create a VMwareCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VMwareClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VMwareClusterArgs | VMwareClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VMwareClusterState | undefined;
            resourceInputs["adminClusterMembership"] = state?.adminClusterMembership;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["antiAffinityGroups"] = state?.antiAffinityGroups;
            resourceInputs["authorization"] = state?.authorization;
            resourceInputs["autoRepairConfig"] = state?.autoRepairConfig;
            resourceInputs["controlPlaneNode"] = state?.controlPlaneNode;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["dataplaneV2"] = state?.dataplaneV2;
            resourceInputs["deleteTime"] = state?.deleteTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["disableBundledIngress"] = state?.disableBundledIngress;
            resourceInputs["effectiveAnnotations"] = state?.effectiveAnnotations;
            resourceInputs["enableAdvancedCluster"] = state?.enableAdvancedCluster;
            resourceInputs["enableControlPlaneV2"] = state?.enableControlPlaneV2;
            resourceInputs["endpoint"] = state?.endpoint;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["fleets"] = state?.fleets;
            resourceInputs["loadBalancer"] = state?.loadBalancer;
            resourceInputs["localName"] = state?.localName;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkConfig"] = state?.networkConfig;
            resourceInputs["onPremVersion"] = state?.onPremVersion;
            resourceInputs["project"] = state?.project;
            resourceInputs["reconciling"] = state?.reconciling;
            resourceInputs["state"] = state?.state;
            resourceInputs["statuses"] = state?.statuses;
            resourceInputs["storage"] = state?.storage;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["upgradePolicy"] = state?.upgradePolicy;
            resourceInputs["validationChecks"] = state?.validationChecks;
            resourceInputs["vcenter"] = state?.vcenter;
            resourceInputs["vmTrackingEnabled"] = state?.vmTrackingEnabled;
        } else {
            const args = argsOrState as VMwareClusterArgs | undefined;
            if (args?.adminClusterMembership === undefined && !opts.urn) {
                throw new Error("Missing required property 'adminClusterMembership'");
            }
            if (args?.controlPlaneNode === undefined && !opts.urn) {
                throw new Error("Missing required property 'controlPlaneNode'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.onPremVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'onPremVersion'");
            }
            resourceInputs["adminClusterMembership"] = args?.adminClusterMembership;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["antiAffinityGroups"] = args?.antiAffinityGroups;
            resourceInputs["authorization"] = args?.authorization;
            resourceInputs["autoRepairConfig"] = args?.autoRepairConfig;
            resourceInputs["controlPlaneNode"] = args?.controlPlaneNode;
            resourceInputs["dataplaneV2"] = args?.dataplaneV2;
            resourceInputs["description"] = args?.description;
            resourceInputs["disableBundledIngress"] = args?.disableBundledIngress;
            resourceInputs["enableAdvancedCluster"] = args?.enableAdvancedCluster;
            resourceInputs["enableControlPlaneV2"] = args?.enableControlPlaneV2;
            resourceInputs["loadBalancer"] = args?.loadBalancer;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkConfig"] = args?.networkConfig;
            resourceInputs["onPremVersion"] = args?.onPremVersion;
            resourceInputs["project"] = args?.project;
            resourceInputs["storage"] = args?.storage;
            resourceInputs["upgradePolicy"] = args?.upgradePolicy;
            resourceInputs["vcenter"] = args?.vcenter;
            resourceInputs["vmTrackingEnabled"] = args?.vmTrackingEnabled;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["fleets"] = undefined /*out*/;
            resourceInputs["localName"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["statuses"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["validationChecks"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VMwareCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VMwareCluster resources.
 */
export interface VMwareClusterState {
    /**
     * The admin cluster this VMware User Cluster belongs to.
     * This is the full resource name of the admin cluster's hub membership.
     * In the future, references to other resource types might be allowed if
     * admin clusters are modeled as their own resources.
     */
    adminClusterMembership?: pulumi.Input<string>;
    /**
     * Annotations on the VMware User Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     *
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * AAGConfig specifies whether to spread VMware User Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     */
    antiAffinityGroups?: pulumi.Input<inputs.gkeonprem.VMwareClusterAntiAffinityGroups>;
    /**
     * RBAC policy that will be applied and managed by GKE On-Prem.
     * Structure is documented below.
     */
    authorization?: pulumi.Input<inputs.gkeonprem.VMwareClusterAuthorization>;
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     */
    autoRepairConfig?: pulumi.Input<inputs.gkeonprem.VMwareClusterAutoRepairConfig>;
    /**
     * VMware User Cluster control plane nodes must have either 1 or 3 replicas.
     * Structure is documented below.
     */
    controlPlaneNode?: pulumi.Input<inputs.gkeonprem.VMwareClusterControlPlaneNode>;
    /**
     * The time at which VMware User Cluster was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     * Structure is documented below.
     */
    dataplaneV2?: pulumi.Input<inputs.gkeonprem.VMwareClusterDataplaneV2>;
    /**
     * The time at which VMware User Cluster was deleted.
     */
    deleteTime?: pulumi.Input<string>;
    /**
     * A human readable description of this VMware User Cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * Disable bundled ingress.
     */
    disableBundledIngress?: pulumi.Input<boolean>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Enable advanced cluster. Default to false.
     */
    enableAdvancedCluster?: pulumi.Input<boolean>;
    /**
     * Enable control plane V2. Default to false.
     */
    enableControlPlaneV2?: pulumi.Input<boolean>;
    /**
     * The DNS name of VMware User Cluster's API server.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     */
    etag?: pulumi.Input<string>;
    /**
     * Fleet configuration for the cluster.
     * Structure is documented below.
     */
    fleets?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VMwareClusterFleet>[]>;
    /**
     * Load Balancer configuration.
     * Structure is documented below.
     */
    loadBalancer?: pulumi.Input<inputs.gkeonprem.VMwareClusterLoadBalancer>;
    /**
     * The object name of the VMware OnPremUserCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     */
    localName?: pulumi.Input<string>;
    /**
     * The location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * The VMware cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * The VMware User Cluster network configuration.
     * Structure is documented below.
     */
    networkConfig?: pulumi.Input<inputs.gkeonprem.VMwareClusterNetworkConfig>;
    /**
     * The Anthos clusters on the VMware version for your user cluster.
     */
    onPremVersion?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * If set, there are currently changes in flight to the VMware User Cluster.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * (Output)
     * The lifecycle state of the condition.
     */
    state?: pulumi.Input<string>;
    /**
     * (Output)
     * Specifies the detailed validation check status
     * Structure is documented below.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VMwareClusterStatus>[]>;
    /**
     * Storage configuration.
     * Structure is documented below.
     */
    storage?: pulumi.Input<inputs.gkeonprem.VMwareClusterStorage>;
    /**
     * The unique identifier of the VMware User Cluster.
     */
    uid?: pulumi.Input<string>;
    /**
     * The time at which VMware User Cluster was last updated.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Specifies upgrade policy for the cluster.
     * Structure is documented below.
     */
    upgradePolicy?: pulumi.Input<inputs.gkeonprem.VMwareClusterUpgradePolicy>;
    /**
     * ValidationCheck represents the result of the preflight check job.
     * Structure is documented below.
     */
    validationChecks?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VMwareClusterValidationCheck>[]>;
    /**
     * VmwareVCenterConfig specifies vCenter config for the user cluster.
     * Inherited from the admin cluster.
     * Structure is documented below.
     */
    vcenter?: pulumi.Input<inputs.gkeonprem.VMwareClusterVcenter>;
    /**
     * Enable VM tracking.
     */
    vmTrackingEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a VMwareCluster resource.
 */
export interface VMwareClusterArgs {
    /**
     * The admin cluster this VMware User Cluster belongs to.
     * This is the full resource name of the admin cluster's hub membership.
     * In the future, references to other resource types might be allowed if
     * admin clusters are modeled as their own resources.
     */
    adminClusterMembership: pulumi.Input<string>;
    /**
     * Annotations on the VMware User Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     *
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * AAGConfig specifies whether to spread VMware User Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     */
    antiAffinityGroups?: pulumi.Input<inputs.gkeonprem.VMwareClusterAntiAffinityGroups>;
    /**
     * RBAC policy that will be applied and managed by GKE On-Prem.
     * Structure is documented below.
     */
    authorization?: pulumi.Input<inputs.gkeonprem.VMwareClusterAuthorization>;
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     */
    autoRepairConfig?: pulumi.Input<inputs.gkeonprem.VMwareClusterAutoRepairConfig>;
    /**
     * VMware User Cluster control plane nodes must have either 1 or 3 replicas.
     * Structure is documented below.
     */
    controlPlaneNode: pulumi.Input<inputs.gkeonprem.VMwareClusterControlPlaneNode>;
    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     * Structure is documented below.
     */
    dataplaneV2?: pulumi.Input<inputs.gkeonprem.VMwareClusterDataplaneV2>;
    /**
     * A human readable description of this VMware User Cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * Disable bundled ingress.
     */
    disableBundledIngress?: pulumi.Input<boolean>;
    /**
     * Enable advanced cluster. Default to false.
     */
    enableAdvancedCluster?: pulumi.Input<boolean>;
    /**
     * Enable control plane V2. Default to false.
     */
    enableControlPlaneV2?: pulumi.Input<boolean>;
    /**
     * Load Balancer configuration.
     * Structure is documented below.
     */
    loadBalancer?: pulumi.Input<inputs.gkeonprem.VMwareClusterLoadBalancer>;
    /**
     * The location of the resource.
     */
    location: pulumi.Input<string>;
    /**
     * The VMware cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * The VMware User Cluster network configuration.
     * Structure is documented below.
     */
    networkConfig?: pulumi.Input<inputs.gkeonprem.VMwareClusterNetworkConfig>;
    /**
     * The Anthos clusters on the VMware version for your user cluster.
     */
    onPremVersion: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Storage configuration.
     * Structure is documented below.
     */
    storage?: pulumi.Input<inputs.gkeonprem.VMwareClusterStorage>;
    /**
     * Specifies upgrade policy for the cluster.
     * Structure is documented below.
     */
    upgradePolicy?: pulumi.Input<inputs.gkeonprem.VMwareClusterUpgradePolicy>;
    /**
     * VmwareVCenterConfig specifies vCenter config for the user cluster.
     * Inherited from the admin cluster.
     * Structure is documented below.
     */
    vcenter?: pulumi.Input<inputs.gkeonprem.VMwareClusterVcenter>;
    /**
     * Enable VM tracking.
     */
    vmTrackingEnabled?: pulumi.Input<boolean>;
}
