// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * VmwareCluster can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:gkeonprem/vMwareCluster:VMwareCluster default projects/{{project}}/locations/{{location}}/vmwareClusters/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkeonprem/vMwareCluster:VMwareCluster default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkeonprem/vMwareCluster:VMwareCluster default {{location}}/{{name}}
 * ```
 */
export class VMwareCluster extends pulumi.CustomResource {
    /**
     * Get an existing VMwareCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VMwareClusterState, opts?: pulumi.CustomResourceOptions): VMwareCluster {
        return new VMwareCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:gkeonprem/vMwareCluster:VMwareCluster';

    /**
     * Returns true if the given object is an instance of VMwareCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VMwareCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VMwareCluster.__pulumiType;
    }

    /**
     * The admin cluster this VMware User Cluster belongs to.
     * This is the full resource name of the admin cluster's hub membership.
     * In the future, references to other resource types might be allowed if
     * admin clusters are modeled as their own resources.
     */
    public readonly adminClusterMembership!: pulumi.Output<string>;
    /**
     * Annotations on the VMware User Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * AAGConfig specifies whether to spread VMware User Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     */
    public readonly antiAffinityGroups!: pulumi.Output<outputs.gkeonprem.VMwareClusterAntiAffinityGroups>;
    /**
     * RBAC policy that will be applied and managed by GKE On-Prem.
     * Structure is documented below.
     */
    public readonly authorization!: pulumi.Output<outputs.gkeonprem.VMwareClusterAuthorization | undefined>;
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     */
    public readonly autoRepairConfig!: pulumi.Output<outputs.gkeonprem.VMwareClusterAutoRepairConfig>;
    /**
     * VMware User Cluster control plane nodes must have either 1 or 3 replicas.
     * Structure is documented below.
     */
    public readonly controlPlaneNode!: pulumi.Output<outputs.gkeonprem.VMwareClusterControlPlaneNode>;
    /**
     * The time at which VMware User Cluster was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     * Structure is documented below.
     */
    public readonly dataplaneV2!: pulumi.Output<outputs.gkeonprem.VMwareClusterDataplaneV2>;
    /**
     * The time at which VMware User Cluster was deleted.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * A human readable description of this VMware User Cluster.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable control plane V2. Default to false.
     */
    public readonly enableControlPlaneV2!: pulumi.Output<boolean | undefined>;
    /**
     * The DNS name of VMware User Cluster's API server.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Fleet configuration for the cluster.
     * Structure is documented below.
     */
    public /*out*/ readonly fleets!: pulumi.Output<outputs.gkeonprem.VMwareClusterFleet[]>;
    /**
     * Load Balancer configuration.
     * Structure is documented below.
     */
    public readonly loadBalancer!: pulumi.Output<outputs.gkeonprem.VMwareClusterLoadBalancer | undefined>;
    /**
     * The object name of the VMware OnPremUserCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     */
    public /*out*/ readonly localName!: pulumi.Output<string>;
    /**
     * The location of the resource.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The VMware cluster name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The VMware User Cluster network configuration.
     * Structure is documented below.
     */
    public readonly networkConfig!: pulumi.Output<outputs.gkeonprem.VMwareClusterNetworkConfig | undefined>;
    /**
     * The Anthos clusters on the VMware version for your user cluster.
     */
    public readonly onPremVersion!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * If set, there are currently changes in flight to the VMware User Cluster.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * (Output)
     * The lifecycle state of the condition.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * (Output)
     * Specifies the detailed validation check status
     * Structure is documented below.
     */
    public /*out*/ readonly statuses!: pulumi.Output<outputs.gkeonprem.VMwareClusterStatus[]>;
    /**
     * Storage configuration.
     * Structure is documented below.
     */
    public readonly storage!: pulumi.Output<outputs.gkeonprem.VMwareClusterStorage>;
    /**
     * The unique identifier of the VMware User Cluster.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The time at which VMware User Cluster was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Specifies upgrade policy for the cluster.
     * Structure is documented below.
     */
    public readonly upgradePolicy!: pulumi.Output<outputs.gkeonprem.VMwareClusterUpgradePolicy | undefined>;
    /**
     * ValidationCheck represents the result of the preflight check job.
     * Structure is documented below.
     */
    public /*out*/ readonly validationChecks!: pulumi.Output<outputs.gkeonprem.VMwareClusterValidationCheck[]>;
    /**
     * VmwareVCenterConfig specifies vCenter config for the user cluster.
     * Inherited from the admin cluster.
     * Structure is documented below.
     */
    public /*out*/ readonly vcenters!: pulumi.Output<outputs.gkeonprem.VMwareClusterVcenter[]>;
    /**
     * Enable VM tracking.
     */
    public readonly vmTrackingEnabled!: pulumi.Output<boolean>;

    /**
     * Create a VMwareCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VMwareClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VMwareClusterArgs | VMwareClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VMwareClusterState | undefined;
            resourceInputs["adminClusterMembership"] = state ? state.adminClusterMembership : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["antiAffinityGroups"] = state ? state.antiAffinityGroups : undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["autoRepairConfig"] = state ? state.autoRepairConfig : undefined;
            resourceInputs["controlPlaneNode"] = state ? state.controlPlaneNode : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dataplaneV2"] = state ? state.dataplaneV2 : undefined;
            resourceInputs["deleteTime"] = state ? state.deleteTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableControlPlaneV2"] = state ? state.enableControlPlaneV2 : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["fleets"] = state ? state.fleets : undefined;
            resourceInputs["loadBalancer"] = state ? state.loadBalancer : undefined;
            resourceInputs["localName"] = state ? state.localName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConfig"] = state ? state.networkConfig : undefined;
            resourceInputs["onPremVersion"] = state ? state.onPremVersion : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["statuses"] = state ? state.statuses : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["upgradePolicy"] = state ? state.upgradePolicy : undefined;
            resourceInputs["validationChecks"] = state ? state.validationChecks : undefined;
            resourceInputs["vcenters"] = state ? state.vcenters : undefined;
            resourceInputs["vmTrackingEnabled"] = state ? state.vmTrackingEnabled : undefined;
        } else {
            const args = argsOrState as VMwareClusterArgs | undefined;
            if ((!args || args.adminClusterMembership === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminClusterMembership'");
            }
            if ((!args || args.controlPlaneNode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlPlaneNode'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.onPremVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'onPremVersion'");
            }
            resourceInputs["adminClusterMembership"] = args ? args.adminClusterMembership : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["antiAffinityGroups"] = args ? args.antiAffinityGroups : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["autoRepairConfig"] = args ? args.autoRepairConfig : undefined;
            resourceInputs["controlPlaneNode"] = args ? args.controlPlaneNode : undefined;
            resourceInputs["dataplaneV2"] = args ? args.dataplaneV2 : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableControlPlaneV2"] = args ? args.enableControlPlaneV2 : undefined;
            resourceInputs["loadBalancer"] = args ? args.loadBalancer : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConfig"] = args ? args.networkConfig : undefined;
            resourceInputs["onPremVersion"] = args ? args.onPremVersion : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["upgradePolicy"] = args ? args.upgradePolicy : undefined;
            resourceInputs["vmTrackingEnabled"] = args ? args.vmTrackingEnabled : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["fleets"] = undefined /*out*/;
            resourceInputs["localName"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["statuses"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["validationChecks"] = undefined /*out*/;
            resourceInputs["vcenters"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VMwareCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VMwareCluster resources.
 */
export interface VMwareClusterState {
    /**
     * The admin cluster this VMware User Cluster belongs to.
     * This is the full resource name of the admin cluster's hub membership.
     * In the future, references to other resource types might be allowed if
     * admin clusters are modeled as their own resources.
     */
    adminClusterMembership?: pulumi.Input<string>;
    /**
     * Annotations on the VMware User Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * AAGConfig specifies whether to spread VMware User Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     */
    antiAffinityGroups?: pulumi.Input<inputs.gkeonprem.VMwareClusterAntiAffinityGroups>;
    /**
     * RBAC policy that will be applied and managed by GKE On-Prem.
     * Structure is documented below.
     */
    authorization?: pulumi.Input<inputs.gkeonprem.VMwareClusterAuthorization>;
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     */
    autoRepairConfig?: pulumi.Input<inputs.gkeonprem.VMwareClusterAutoRepairConfig>;
    /**
     * VMware User Cluster control plane nodes must have either 1 or 3 replicas.
     * Structure is documented below.
     */
    controlPlaneNode?: pulumi.Input<inputs.gkeonprem.VMwareClusterControlPlaneNode>;
    /**
     * The time at which VMware User Cluster was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     * Structure is documented below.
     */
    dataplaneV2?: pulumi.Input<inputs.gkeonprem.VMwareClusterDataplaneV2>;
    /**
     * The time at which VMware User Cluster was deleted.
     */
    deleteTime?: pulumi.Input<string>;
    /**
     * A human readable description of this VMware User Cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable control plane V2. Default to false.
     */
    enableControlPlaneV2?: pulumi.Input<boolean>;
    /**
     * The DNS name of VMware User Cluster's API server.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     */
    etag?: pulumi.Input<string>;
    /**
     * Fleet configuration for the cluster.
     * Structure is documented below.
     */
    fleets?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VMwareClusterFleet>[]>;
    /**
     * Load Balancer configuration.
     * Structure is documented below.
     */
    loadBalancer?: pulumi.Input<inputs.gkeonprem.VMwareClusterLoadBalancer>;
    /**
     * The object name of the VMware OnPremUserCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     */
    localName?: pulumi.Input<string>;
    /**
     * The location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * The VMware cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * The VMware User Cluster network configuration.
     * Structure is documented below.
     */
    networkConfig?: pulumi.Input<inputs.gkeonprem.VMwareClusterNetworkConfig>;
    /**
     * The Anthos clusters on the VMware version for your user cluster.
     */
    onPremVersion?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * If set, there are currently changes in flight to the VMware User Cluster.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * (Output)
     * The lifecycle state of the condition.
     */
    state?: pulumi.Input<string>;
    /**
     * (Output)
     * Specifies the detailed validation check status
     * Structure is documented below.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VMwareClusterStatus>[]>;
    /**
     * Storage configuration.
     * Structure is documented below.
     */
    storage?: pulumi.Input<inputs.gkeonprem.VMwareClusterStorage>;
    /**
     * The unique identifier of the VMware User Cluster.
     */
    uid?: pulumi.Input<string>;
    /**
     * The time at which VMware User Cluster was last updated.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Specifies upgrade policy for the cluster.
     * Structure is documented below.
     */
    upgradePolicy?: pulumi.Input<inputs.gkeonprem.VMwareClusterUpgradePolicy>;
    /**
     * ValidationCheck represents the result of the preflight check job.
     * Structure is documented below.
     */
    validationChecks?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VMwareClusterValidationCheck>[]>;
    /**
     * VmwareVCenterConfig specifies vCenter config for the user cluster.
     * Inherited from the admin cluster.
     * Structure is documented below.
     */
    vcenters?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VMwareClusterVcenter>[]>;
    /**
     * Enable VM tracking.
     */
    vmTrackingEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a VMwareCluster resource.
 */
export interface VMwareClusterArgs {
    /**
     * The admin cluster this VMware User Cluster belongs to.
     * This is the full resource name of the admin cluster's hub membership.
     * In the future, references to other resource types might be allowed if
     * admin clusters are modeled as their own resources.
     */
    adminClusterMembership: pulumi.Input<string>;
    /**
     * Annotations on the VMware User Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * AAGConfig specifies whether to spread VMware User Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     */
    antiAffinityGroups?: pulumi.Input<inputs.gkeonprem.VMwareClusterAntiAffinityGroups>;
    /**
     * RBAC policy that will be applied and managed by GKE On-Prem.
     * Structure is documented below.
     */
    authorization?: pulumi.Input<inputs.gkeonprem.VMwareClusterAuthorization>;
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     */
    autoRepairConfig?: pulumi.Input<inputs.gkeonprem.VMwareClusterAutoRepairConfig>;
    /**
     * VMware User Cluster control plane nodes must have either 1 or 3 replicas.
     * Structure is documented below.
     */
    controlPlaneNode: pulumi.Input<inputs.gkeonprem.VMwareClusterControlPlaneNode>;
    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     * Structure is documented below.
     */
    dataplaneV2?: pulumi.Input<inputs.gkeonprem.VMwareClusterDataplaneV2>;
    /**
     * A human readable description of this VMware User Cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable control plane V2. Default to false.
     */
    enableControlPlaneV2?: pulumi.Input<boolean>;
    /**
     * Load Balancer configuration.
     * Structure is documented below.
     */
    loadBalancer?: pulumi.Input<inputs.gkeonprem.VMwareClusterLoadBalancer>;
    /**
     * The location of the resource.
     */
    location: pulumi.Input<string>;
    /**
     * The VMware cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * The VMware User Cluster network configuration.
     * Structure is documented below.
     */
    networkConfig?: pulumi.Input<inputs.gkeonprem.VMwareClusterNetworkConfig>;
    /**
     * The Anthos clusters on the VMware version for your user cluster.
     */
    onPremVersion: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Storage configuration.
     * Structure is documented below.
     */
    storage?: pulumi.Input<inputs.gkeonprem.VMwareClusterStorage>;
    /**
     * Specifies upgrade policy for the cluster.
     * Structure is documented below.
     */
    upgradePolicy?: pulumi.Input<inputs.gkeonprem.VMwareClusterUpgradePolicy>;
    /**
     * Enable VM tracking.
     */
    vmTrackingEnabled?: pulumi.Input<boolean>;
}
