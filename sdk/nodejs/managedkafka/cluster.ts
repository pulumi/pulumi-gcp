// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A Managed Service for Apache Kafka cluster. Apache Kafka is a trademark owned by the Apache Software Foundation.
 *
 * ## Example Usage
 *
 * ### Managedkafka Cluster Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const example = new gcp.managedkafka.Cluster("example", {
 *     clusterId: "my-cluster",
 *     location: "us-central1",
 *     capacityConfig: {
 *         vcpuCount: "3",
 *         memoryBytes: "3221225472",
 *     },
 *     gcpConfig: {
 *         accessConfig: {
 *             networkConfigs: [{
 *                 subnet: project.then(project => `projects/${project.number}/regions/us-central1/subnetworks/default`),
 *             }],
 *         },
 *     },
 *     rebalanceConfig: {
 *         mode: "AUTO_REBALANCE_ON_SCALE_UP",
 *     },
 *     labels: {
 *         key: "value",
 *     },
 * });
 * ```
 * ### Managedkafka Cluster Mtls
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const caPool = new gcp.certificateauthority.CaPool("ca_pool", {
 *     name: "my-ca-pool",
 *     location: "us-central1",
 *     tier: "ENTERPRISE",
 *     publishingOptions: {
 *         publishCaCert: true,
 *         publishCrl: true,
 *     },
 * });
 * const project = gcp.organizations.getProject({});
 * const example = new gcp.managedkafka.Cluster("example", {
 *     clusterId: "my-cluster",
 *     location: "us-central1",
 *     capacityConfig: {
 *         vcpuCount: "3",
 *         memoryBytes: "3221225472",
 *     },
 *     gcpConfig: {
 *         accessConfig: {
 *             networkConfigs: [{
 *                 subnet: project.then(project => `projects/${project.number}/regions/us-central1/subnetworks/default`),
 *             }],
 *         },
 *     },
 *     tlsConfig: {
 *         trustConfig: {
 *             casConfigs: [{
 *                 caPool: caPool.id,
 *             }],
 *         },
 *         sslPrincipalMappingRules: "RULE:pattern/replacement/L,DEFAULT",
 *     },
 * });
 * ```
 * ### Managedkafka Cluster Cmek
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const keyRing = new gcp.kms.KeyRing("key_ring", {
 *     name: "example-key-ring",
 *     location: "us-central1",
 * });
 * const key = new gcp.kms.CryptoKey("key", {
 *     name: "example-key",
 *     keyRing: keyRing.id,
 * });
 * const project = gcp.organizations.getProject({});
 * const example = new gcp.managedkafka.Cluster("example", {
 *     clusterId: "my-cluster",
 *     location: "us-central1",
 *     capacityConfig: {
 *         vcpuCount: "3",
 *         memoryBytes: "3221225472",
 *     },
 *     gcpConfig: {
 *         accessConfig: {
 *             networkConfigs: [{
 *                 subnet: project.then(project => `projects/${project.number}/regions/us-central1/subnetworks/default`),
 *             }],
 *         },
 *         kmsKey: key.id,
 *     },
 * });
 * const kafkaServiceIdentity = new gcp.projects.ServiceIdentity("kafka_service_identity", {
 *     project: project.then(project => project.projectId),
 *     service: "managedkafka.googleapis.com",
 * });
 * const cryptoKeyBinding = new gcp.kms.CryptoKeyIAMBinding("crypto_key_binding", {
 *     cryptoKeyId: key.id,
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     members: [project.then(project => `serviceAccount:service-${project.number}@gcp-sa-managedkafka.iam.gserviceaccount.com`)],
 * });
 * ```
 *
 * ## Import
 *
 * Cluster can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/clusters/{{cluster_id}}`
 *
 * * `{{project}}/{{location}}/{{cluster_id}}`
 *
 * * `{{location}}/{{cluster_id}}`
 *
 * When using the `pulumi import` command, Cluster can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:managedkafka/cluster:Cluster default projects/{{project}}/locations/{{location}}/clusters/{{cluster_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:managedkafka/cluster:Cluster default {{project}}/{{location}}/{{cluster_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:managedkafka/cluster:Cluster default {{location}}/{{cluster_id}}
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:managedkafka/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * A capacity configuration of a Kafka cluster.
     * Structure is documented below.
     */
    declare public readonly capacityConfig: pulumi.Output<outputs.managedkafka.ClusterCapacityConfig>;
    /**
     * The ID to use for the cluster, which will become the final component of the cluster's name. The ID must be 1-63 characters long, and match the regular expression `a-z?` to comply with RFC 1035. This value is structured like: `my-cluster-id`.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * The time when the cluster was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Configuration properties for a Kafka cluster deployed to Google Cloud Platform.
     * Structure is documented below.
     */
    declare public readonly gcpConfig: pulumi.Output<outputs.managedkafka.ClusterGcpConfig>;
    /**
     * List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-), underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase characters, and numbers.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name of the cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Defines rebalancing behavior of a Kafka cluster.
     * Structure is documented below.
     */
    declare public readonly rebalanceConfig: pulumi.Output<outputs.managedkafka.ClusterRebalanceConfig | undefined>;
    /**
     * The current state of the cluster. Possible values: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * TLS configuration for the Kafka cluster. This is used to configure mTLS authentication. To clear our a TLS configuration that has been previously set, please explicitly add an empty `tlsConfig` block.
     * Structure is documented below.
     */
    declare public readonly tlsConfig: pulumi.Output<outputs.managedkafka.ClusterTlsConfig>;
    /**
     * The time when the cluster was last updated.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["capacityConfig"] = state?.capacityConfig;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["gcpConfig"] = state?.gcpConfig;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["rebalanceConfig"] = state?.rebalanceConfig;
            resourceInputs["state"] = state?.state;
            resourceInputs["tlsConfig"] = state?.tlsConfig;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (args?.capacityConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'capacityConfig'");
            }
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.gcpConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'gcpConfig'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["capacityConfig"] = args?.capacityConfig;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["gcpConfig"] = args?.gcpConfig;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["project"] = args?.project;
            resourceInputs["rebalanceConfig"] = args?.rebalanceConfig;
            resourceInputs["tlsConfig"] = args?.tlsConfig;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * A capacity configuration of a Kafka cluster.
     * Structure is documented below.
     */
    capacityConfig?: pulumi.Input<inputs.managedkafka.ClusterCapacityConfig>;
    /**
     * The ID to use for the cluster, which will become the final component of the cluster's name. The ID must be 1-63 characters long, and match the regular expression `a-z?` to comply with RFC 1035. This value is structured like: `my-cluster-id`.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The time when the cluster was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration properties for a Kafka cluster deployed to Google Cloud Platform.
     * Structure is documented below.
     */
    gcpConfig?: pulumi.Input<inputs.managedkafka.ClusterGcpConfig>;
    /**
     * List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-), underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase characters, and numbers.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Defines rebalancing behavior of a Kafka cluster.
     * Structure is documented below.
     */
    rebalanceConfig?: pulumi.Input<inputs.managedkafka.ClusterRebalanceConfig>;
    /**
     * The current state of the cluster. Possible values: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`.
     */
    state?: pulumi.Input<string>;
    /**
     * TLS configuration for the Kafka cluster. This is used to configure mTLS authentication. To clear our a TLS configuration that has been previously set, please explicitly add an empty `tlsConfig` block.
     * Structure is documented below.
     */
    tlsConfig?: pulumi.Input<inputs.managedkafka.ClusterTlsConfig>;
    /**
     * The time when the cluster was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * A capacity configuration of a Kafka cluster.
     * Structure is documented below.
     */
    capacityConfig: pulumi.Input<inputs.managedkafka.ClusterCapacityConfig>;
    /**
     * The ID to use for the cluster, which will become the final component of the cluster's name. The ID must be 1-63 characters long, and match the regular expression `a-z?` to comply with RFC 1035. This value is structured like: `my-cluster-id`.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Configuration properties for a Kafka cluster deployed to Google Cloud Platform.
     * Structure is documented below.
     */
    gcpConfig: pulumi.Input<inputs.managedkafka.ClusterGcpConfig>;
    /**
     * List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-), underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase characters, and numbers.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Defines rebalancing behavior of a Kafka cluster.
     * Structure is documented below.
     */
    rebalanceConfig?: pulumi.Input<inputs.managedkafka.ClusterRebalanceConfig>;
    /**
     * TLS configuration for the Kafka cluster. This is used to configure mTLS authentication. To clear our a TLS configuration that has been previously set, please explicitly add an empty `tlsConfig` block.
     * Structure is documented below.
     */
    tlsConfig?: pulumi.Input<inputs.managedkafka.ClusterTlsConfig>;
}
