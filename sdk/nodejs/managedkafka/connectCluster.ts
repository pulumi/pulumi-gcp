// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Managedkafka Connect Cluster Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const mkcNetwork = new gcp.compute.Network("mkc_network", {
 *     name: "my-network",
 *     autoCreateSubnetworks: false,
 * });
 * const mkcSubnet = new gcp.compute.Subnetwork("mkc_subnet", {
 *     name: "my-subnetwork",
 *     ipCidrRange: "10.2.0.0/16",
 *     region: "us-central1",
 *     network: mkcNetwork.id,
 * });
 * const mkcAdditionalSubnet = new gcp.compute.Subnetwork("mkc_additional_subnet", {
 *     name: "my-additional-subnetwork-0",
 *     ipCidrRange: "10.3.0.0/16",
 *     region: "us-central1",
 *     network: mkcNetwork.id,
 * });
 * const project = gcp.organizations.getProject({});
 * const gmkCluster = new gcp.managedkafka.Cluster("gmk_cluster", {
 *     clusterId: "my-cluster",
 *     location: "us-central1",
 *     capacityConfig: {
 *         vcpuCount: "3",
 *         memoryBytes: "3221225472",
 *     },
 *     gcpConfig: {
 *         accessConfig: {
 *             networkConfigs: [{
 *                 subnet: pulumi.all([project, mkcSubnet.id]).apply(([project, id]) => `projects/${project.projectId}/regions/us-central1/subnetworks/${id}`),
 *             }],
 *         },
 *     },
 * });
 * const example = new gcp.managedkafka.ConnectCluster("example", {
 *     connectClusterId: "my-connect-cluster",
 *     kafkaCluster: pulumi.all([project, gmkCluster.clusterId]).apply(([project, clusterId]) => `projects/${project.projectId}/locations/us-central1/clusters/${clusterId}`),
 *     location: "us-central1",
 *     capacityConfig: {
 *         vcpuCount: "12",
 *         memoryBytes: "21474836480",
 *     },
 *     gcpConfig: {
 *         accessConfig: {
 *             networkConfigs: [{
 *                 primarySubnet: pulumi.all([project, mkcSubnet.id]).apply(([project, id]) => `projects/${project.projectId}/regions/us-central1/subnetworks/${id}`),
 *                 additionalSubnets: [mkcAdditionalSubnet.id],
 *                 dnsDomainNames: [pulumi.all([gmkCluster.clusterId, project]).apply(([clusterId, project]) => `${clusterId}.us-central1.managedkafka-staging.${project.projectId}.cloud-staging.goog`)],
 *             }],
 *         },
 *     },
 *     labels: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ConnectCluster can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/connectClusters/{{connect_cluster_id}}`
 *
 * * `{{project}}/{{location}}/{{connect_cluster_id}}`
 *
 * * `{{location}}/{{connect_cluster_id}}`
 *
 * When using the `pulumi import` command, ConnectCluster can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:managedkafka/connectCluster:ConnectCluster default projects/{{project}}/locations/{{location}}/connectClusters/{{connect_cluster_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:managedkafka/connectCluster:ConnectCluster default {{project}}/{{location}}/{{connect_cluster_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:managedkafka/connectCluster:ConnectCluster default {{location}}/{{connect_cluster_id}}
 * ```
 */
export class ConnectCluster extends pulumi.CustomResource {
    /**
     * Get an existing ConnectCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectClusterState, opts?: pulumi.CustomResourceOptions): ConnectCluster {
        return new ConnectCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:managedkafka/connectCluster:ConnectCluster';

    /**
     * Returns true if the given object is an instance of ConnectCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectCluster.__pulumiType;
    }

    /**
     * A capacity configuration of a Kafka cluster.
     * Structure is documented below.
     */
    public readonly capacityConfig!: pulumi.Output<outputs.managedkafka.ConnectClusterCapacityConfig>;
    /**
     * The ID to use for the Connect Cluster, which will become the final component of the connect cluster's name. This value is structured like: `my-connect-cluster-id`.
     */
    public readonly connectClusterId!: pulumi.Output<string>;
    /**
     * The time when the cluster was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Configuration properties for a Kafka Connect cluster deployed to Google Cloud Platform.
     * Structure is documented below.
     */
    public readonly gcpConfig!: pulumi.Output<outputs.managedkafka.ConnectClusterGcpConfig>;
    /**
     * The name of the Kafka cluster this Kafka Connect cluster is attached to. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
     */
    public readonly kafkaCluster!: pulumi.Output<string>;
    /**
     * List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-),
     * underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase
     * characters, and numbers. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER_ID`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The current state of the connect cluster. Possible values: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The time when the cluster was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a ConnectCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectClusterArgs | ConnectClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectClusterState | undefined;
            resourceInputs["capacityConfig"] = state ? state.capacityConfig : undefined;
            resourceInputs["connectClusterId"] = state ? state.connectClusterId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["gcpConfig"] = state ? state.gcpConfig : undefined;
            resourceInputs["kafkaCluster"] = state ? state.kafkaCluster : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as ConnectClusterArgs | undefined;
            if ((!args || args.capacityConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacityConfig'");
            }
            if ((!args || args.connectClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectClusterId'");
            }
            if ((!args || args.gcpConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gcpConfig'");
            }
            if ((!args || args.kafkaCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaCluster'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["capacityConfig"] = args ? args.capacityConfig : undefined;
            resourceInputs["connectClusterId"] = args ? args.connectClusterId : undefined;
            resourceInputs["gcpConfig"] = args ? args.gcpConfig : undefined;
            resourceInputs["kafkaCluster"] = args ? args.kafkaCluster : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ConnectCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectCluster resources.
 */
export interface ConnectClusterState {
    /**
     * A capacity configuration of a Kafka cluster.
     * Structure is documented below.
     */
    capacityConfig?: pulumi.Input<inputs.managedkafka.ConnectClusterCapacityConfig>;
    /**
     * The ID to use for the Connect Cluster, which will become the final component of the connect cluster's name. This value is structured like: `my-connect-cluster-id`.
     */
    connectClusterId?: pulumi.Input<string>;
    /**
     * The time when the cluster was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration properties for a Kafka Connect cluster deployed to Google Cloud Platform.
     * Structure is documented below.
     */
    gcpConfig?: pulumi.Input<inputs.managedkafka.ConnectClusterGcpConfig>;
    /**
     * The name of the Kafka cluster this Kafka Connect cluster is attached to. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
     */
    kafkaCluster?: pulumi.Input<string>;
    /**
     * List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-),
     * underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase
     * characters, and numbers. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER_ID`.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The current state of the connect cluster. Possible values: `STATE_UNSPECIFIED`, `CREATING`, `ACTIVE`, `DELETING`.
     */
    state?: pulumi.Input<string>;
    /**
     * The time when the cluster was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectCluster resource.
 */
export interface ConnectClusterArgs {
    /**
     * A capacity configuration of a Kafka cluster.
     * Structure is documented below.
     */
    capacityConfig: pulumi.Input<inputs.managedkafka.ConnectClusterCapacityConfig>;
    /**
     * The ID to use for the Connect Cluster, which will become the final component of the connect cluster's name. This value is structured like: `my-connect-cluster-id`.
     */
    connectClusterId: pulumi.Input<string>;
    /**
     * Configuration properties for a Kafka Connect cluster deployed to Google Cloud Platform.
     * Structure is documented below.
     */
    gcpConfig: pulumi.Input<inputs.managedkafka.ConnectClusterGcpConfig>;
    /**
     * The name of the Kafka cluster this Kafka Connect cluster is attached to. Structured like: `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID`.
     */
    kafkaCluster: pulumi.Input<string>;
    /**
     * List of label KEY=VALUE pairs to add. Keys must start with a lowercase character and contain only hyphens (-),
     * underscores ( ), lowercase characters, and numbers. Values must contain only hyphens (-), underscores ( ), lowercase
     * characters, and numbers. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     */
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
