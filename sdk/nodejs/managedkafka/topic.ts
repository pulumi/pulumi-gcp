// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A Managed Service for Apache Kafka topic. Apache Kafka is a trademark owned by the Apache Software Foundation.
 *
 * ## Example Usage
 *
 * ### Managedkafka Topic Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const cluster = new gcp.managedkafka.Cluster("cluster", {
 *     clusterId: "my-cluster",
 *     location: "us-central1",
 *     capacityConfig: {
 *         vcpuCount: "3",
 *         memoryBytes: "3221225472",
 *     },
 *     gcpConfig: {
 *         accessConfig: {
 *             networkConfigs: [{
 *                 subnet: project.then(project => `projects/${project.number}/regions/us-central1/subnetworks/default`),
 *             }],
 *         },
 *     },
 * });
 * const example = new gcp.managedkafka.Topic("example", {
 *     topicId: "my-topic",
 *     cluster: cluster.clusterId,
 *     location: "us-central1",
 *     partitionCount: 2,
 *     replicationFactor: 3,
 *     configs: {
 *         "cleanup.policy": "compact",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Topic can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/topics/{{topic_id}}`
 *
 * * `{{project}}/{{location}}/{{cluster}}/{{topic_id}}`
 *
 * * `{{location}}/{{cluster}}/{{topic_id}}`
 *
 * When using the `pulumi import` command, Topic can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:managedkafka/topic:Topic default projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/topics/{{topic_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:managedkafka/topic:Topic default {{project}}/{{location}}/{{cluster}}/{{topic_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:managedkafka/topic:Topic default {{location}}/{{cluster}}/{{topic_id}}
 * ```
 */
export class Topic extends pulumi.CustomResource {
    /**
     * Get an existing Topic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TopicState, opts?: pulumi.CustomResourceOptions): Topic {
        return new Topic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:managedkafka/topic:Topic';

    /**
     * Returns true if the given object is an instance of Topic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Topic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Topic.__pulumiType;
    }

    /**
     * The cluster name.
     */
    declare public readonly cluster: pulumi.Output<string>;
    /**
     * Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property name, for example: `cleanup.policy=compact`, `compression.type=producer`.
     */
    declare public readonly configs: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name of the topic. The `topic` segment is used when connecting directly to the cluster. Must be in the format `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/topics/TOPIC_ID`.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it. Increasing partitions for a topic that uses a key might change how messages are distributed.
     */
    declare public readonly partitionCount: pulumi.Output<number | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
     */
    declare public readonly replicationFactor: pulumi.Output<number>;
    /**
     * The ID to use for the topic, which will become the final component of the topic's name. This value is structured like: `my-topic-name`.
     */
    declare public readonly topicId: pulumi.Output<string>;

    /**
     * Create a Topic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TopicArgs | TopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TopicState | undefined;
            resourceInputs["cluster"] = state?.cluster;
            resourceInputs["configs"] = state?.configs;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["partitionCount"] = state?.partitionCount;
            resourceInputs["project"] = state?.project;
            resourceInputs["replicationFactor"] = state?.replicationFactor;
            resourceInputs["topicId"] = state?.topicId;
        } else {
            const args = argsOrState as TopicArgs | undefined;
            if (args?.cluster === undefined && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.replicationFactor === undefined && !opts.urn) {
                throw new Error("Missing required property 'replicationFactor'");
            }
            if (args?.topicId === undefined && !opts.urn) {
                throw new Error("Missing required property 'topicId'");
            }
            resourceInputs["cluster"] = args?.cluster;
            resourceInputs["configs"] = args?.configs;
            resourceInputs["location"] = args?.location;
            resourceInputs["partitionCount"] = args?.partitionCount;
            resourceInputs["project"] = args?.project;
            resourceInputs["replicationFactor"] = args?.replicationFactor;
            resourceInputs["topicId"] = args?.topicId;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Topic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Topic resources.
 */
export interface TopicState {
    /**
     * The cluster name.
     */
    cluster?: pulumi.Input<string>;
    /**
     * Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property name, for example: `cleanup.policy=compact`, `compression.type=producer`.
     */
    configs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the topic. The `topic` segment is used when connecting directly to the cluster. Must be in the format `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/topics/TOPIC_ID`.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it. Increasing partitions for a topic that uses a key might change how messages are distributed.
     */
    partitionCount?: pulumi.Input<number>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
     */
    replicationFactor?: pulumi.Input<number>;
    /**
     * The ID to use for the topic, which will become the final component of the topic's name. This value is structured like: `my-topic-name`.
     */
    topicId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Topic resource.
 */
export interface TopicArgs {
    /**
     * The cluster name.
     */
    cluster: pulumi.Input<string>;
    /**
     * Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property name, for example: `cleanup.policy=compact`, `compression.type=producer`.
     */
    configs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     */
    location: pulumi.Input<string>;
    /**
     * The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it. Increasing partitions for a topic that uses a key might change how messages are distributed.
     */
    partitionCount?: pulumi.Input<number>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
     */
    replicationFactor: pulumi.Input<number>;
    /**
     * The ID to use for the topic, which will become the final component of the topic's name. This value is structured like: `my-topic-name`.
     */
    topicId: pulumi.Input<string>;
}
