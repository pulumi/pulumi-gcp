// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * Project-level logging sinks can be imported using their URI, e.g.
 *
 * * `projects/{{project_id}}/sinks/{{name}}`
 *
 * When using the `pulumi import` command, project-level logging sinks can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:logging/projectSink:ProjectSink default projects/{{project_id}}/sinks/{{name}}
 * ```
 */
export class ProjectSink extends pulumi.CustomResource {
    /**
     * Get an existing ProjectSink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectSinkState, opts?: pulumi.CustomResourceOptions): ProjectSink {
        return new ProjectSink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:logging/projectSink:ProjectSink';

    /**
     * Returns true if the given object is an instance of ProjectSink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectSink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectSink.__pulumiType;
    }

    /**
     * Options that affect sinks exporting data to BigQuery. Structure documented below.
     */
    declare public readonly bigqueryOptions: pulumi.Output<outputs.logging.ProjectSinkBigqueryOptions>;
    /**
     * A user managed service account that will be used to write
     * the log entries. The format must be `serviceAccount:some@email`. This field can only be specified if you are
     * routing logs to a destination outside this sink's project. If not specified, a Logging service account
     * will automatically be generated.
     */
    declare public readonly customWriterIdentity: pulumi.Output<string | undefined>;
    /**
     * A description of this sink. The maximum length of the description is 8000 characters.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub topic, a BigQuery dataset, a Cloud Logging bucket, or a Google Cloud project. Examples:
     *
     * - `storage.googleapis.com/[GCS_BUCKET]`
     * - `bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]`
     * - `pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]`
     * - `logging.googleapis.com/projects/[PROJECT_ID]/locations/global/buckets/[BUCKET_ID]`
     * - `logging.googleapis.com/projects/[PROJECT_ID]`
     *
     * The writer associated with the sink must have access to write to the above resource.
     */
    declare public readonly destination: pulumi.Output<string>;
    /**
     * If set to True, then this sink is disabled and it does not export any log entries.
     */
    declare public readonly disabled: pulumi.Output<boolean | undefined>;
    /**
     * Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both `filter` and one of `exclusions.filter`, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
     */
    declare public readonly exclusions: pulumi.Output<outputs.logging.ProjectSinkExclusion[] | undefined>;
    /**
     * The filter to apply when exporting logs. Only log entries that match the filter are exported.
     * See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
     * write a filter.
     */
    declare public readonly filter: pulumi.Output<string | undefined>;
    /**
     * The name of the logging sink. Logging automatically creates two sinks: `_Required` and `_Default`.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the project to create the sink in. If omitted, the project associated with the provider is
     * used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Whether or not to create a unique identity associated with this sink. If `false`, then the `writerIdentity` used is `serviceAccount:cloud-logs@system.gserviceaccount.com`. If `true` (the default),
     * then a unique service account is created and used for this sink. If you wish to publish logs across projects or utilize
     * `bigqueryOptions`, you must set `uniqueWriterIdentity` to true.
     */
    declare public readonly uniqueWriterIdentity: pulumi.Output<boolean | undefined>;
    /**
     * The identity associated with this sink. This identity must be granted write access to the
     * configured `destination`.
     */
    declare public /*out*/ readonly writerIdentity: pulumi.Output<string>;

    /**
     * Create a ProjectSink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectSinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectSinkArgs | ProjectSinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectSinkState | undefined;
            resourceInputs["bigqueryOptions"] = state?.bigqueryOptions;
            resourceInputs["customWriterIdentity"] = state?.customWriterIdentity;
            resourceInputs["description"] = state?.description;
            resourceInputs["destination"] = state?.destination;
            resourceInputs["disabled"] = state?.disabled;
            resourceInputs["exclusions"] = state?.exclusions;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["uniqueWriterIdentity"] = state?.uniqueWriterIdentity;
            resourceInputs["writerIdentity"] = state?.writerIdentity;
        } else {
            const args = argsOrState as ProjectSinkArgs | undefined;
            if (args?.destination === undefined && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            resourceInputs["bigqueryOptions"] = args?.bigqueryOptions;
            resourceInputs["customWriterIdentity"] = args?.customWriterIdentity;
            resourceInputs["description"] = args?.description;
            resourceInputs["destination"] = args?.destination;
            resourceInputs["disabled"] = args?.disabled;
            resourceInputs["exclusions"] = args?.exclusions;
            resourceInputs["filter"] = args?.filter;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["uniqueWriterIdentity"] = args?.uniqueWriterIdentity;
            resourceInputs["writerIdentity"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectSink.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectSink resources.
 */
export interface ProjectSinkState {
    /**
     * Options that affect sinks exporting data to BigQuery. Structure documented below.
     */
    bigqueryOptions?: pulumi.Input<inputs.logging.ProjectSinkBigqueryOptions>;
    /**
     * A user managed service account that will be used to write
     * the log entries. The format must be `serviceAccount:some@email`. This field can only be specified if you are
     * routing logs to a destination outside this sink's project. If not specified, a Logging service account
     * will automatically be generated.
     */
    customWriterIdentity?: pulumi.Input<string>;
    /**
     * A description of this sink. The maximum length of the description is 8000 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub topic, a BigQuery dataset, a Cloud Logging bucket, or a Google Cloud project. Examples:
     *
     * - `storage.googleapis.com/[GCS_BUCKET]`
     * - `bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]`
     * - `pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]`
     * - `logging.googleapis.com/projects/[PROJECT_ID]/locations/global/buckets/[BUCKET_ID]`
     * - `logging.googleapis.com/projects/[PROJECT_ID]`
     *
     * The writer associated with the sink must have access to write to the above resource.
     */
    destination?: pulumi.Input<string>;
    /**
     * If set to True, then this sink is disabled and it does not export any log entries.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both `filter` and one of `exclusions.filter`, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
     */
    exclusions?: pulumi.Input<pulumi.Input<inputs.logging.ProjectSinkExclusion>[]>;
    /**
     * The filter to apply when exporting logs. Only log entries that match the filter are exported.
     * See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
     * write a filter.
     */
    filter?: pulumi.Input<string>;
    /**
     * The name of the logging sink. Logging automatically creates two sinks: `_Required` and `_Default`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project to create the sink in. If omitted, the project associated with the provider is
     * used.
     */
    project?: pulumi.Input<string>;
    /**
     * Whether or not to create a unique identity associated with this sink. If `false`, then the `writerIdentity` used is `serviceAccount:cloud-logs@system.gserviceaccount.com`. If `true` (the default),
     * then a unique service account is created and used for this sink. If you wish to publish logs across projects or utilize
     * `bigqueryOptions`, you must set `uniqueWriterIdentity` to true.
     */
    uniqueWriterIdentity?: pulumi.Input<boolean>;
    /**
     * The identity associated with this sink. This identity must be granted write access to the
     * configured `destination`.
     */
    writerIdentity?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectSink resource.
 */
export interface ProjectSinkArgs {
    /**
     * Options that affect sinks exporting data to BigQuery. Structure documented below.
     */
    bigqueryOptions?: pulumi.Input<inputs.logging.ProjectSinkBigqueryOptions>;
    /**
     * A user managed service account that will be used to write
     * the log entries. The format must be `serviceAccount:some@email`. This field can only be specified if you are
     * routing logs to a destination outside this sink's project. If not specified, a Logging service account
     * will automatically be generated.
     */
    customWriterIdentity?: pulumi.Input<string>;
    /**
     * A description of this sink. The maximum length of the description is 8000 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub topic, a BigQuery dataset, a Cloud Logging bucket, or a Google Cloud project. Examples:
     *
     * - `storage.googleapis.com/[GCS_BUCKET]`
     * - `bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]`
     * - `pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]`
     * - `logging.googleapis.com/projects/[PROJECT_ID]/locations/global/buckets/[BUCKET_ID]`
     * - `logging.googleapis.com/projects/[PROJECT_ID]`
     *
     * The writer associated with the sink must have access to write to the above resource.
     */
    destination: pulumi.Input<string>;
    /**
     * If set to True, then this sink is disabled and it does not export any log entries.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both `filter` and one of `exclusions.filter`, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
     */
    exclusions?: pulumi.Input<pulumi.Input<inputs.logging.ProjectSinkExclusion>[]>;
    /**
     * The filter to apply when exporting logs. Only log entries that match the filter are exported.
     * See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
     * write a filter.
     */
    filter?: pulumi.Input<string>;
    /**
     * The name of the logging sink. Logging automatically creates two sinks: `_Required` and `_Default`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project to create the sink in. If omitted, the project associated with the provider is
     * used.
     */
    project?: pulumi.Input<string>;
    /**
     * Whether or not to create a unique identity associated with this sink. If `false`, then the `writerIdentity` used is `serviceAccount:cloud-logs@system.gserviceaccount.com`. If `true` (the default),
     * then a unique service account is created and used for this sink. If you wish to publish logs across projects or utilize
     * `bigqueryOptions`, you must set `uniqueWriterIdentity` to true.
     */
    uniqueWriterIdentity?: pulumi.Input<boolean>;
}
