// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BillingAccountBucketConfigArgs, BillingAccountBucketConfigState } from "./billingAccountBucketConfig";
export type BillingAccountBucketConfig = import("./billingAccountBucketConfig").BillingAccountBucketConfig;
export const BillingAccountBucketConfig: typeof import("./billingAccountBucketConfig").BillingAccountBucketConfig = null as any;
utilities.lazyLoad(exports, ["BillingAccountBucketConfig"], () => require("./billingAccountBucketConfig"));

export { BillingAccountExclusionArgs, BillingAccountExclusionState } from "./billingAccountExclusion";
export type BillingAccountExclusion = import("./billingAccountExclusion").BillingAccountExclusion;
export const BillingAccountExclusion: typeof import("./billingAccountExclusion").BillingAccountExclusion = null as any;
utilities.lazyLoad(exports, ["BillingAccountExclusion"], () => require("./billingAccountExclusion"));

export { BillingAccountSinkArgs, BillingAccountSinkState } from "./billingAccountSink";
export type BillingAccountSink = import("./billingAccountSink").BillingAccountSink;
export const BillingAccountSink: typeof import("./billingAccountSink").BillingAccountSink = null as any;
utilities.lazyLoad(exports, ["BillingAccountSink"], () => require("./billingAccountSink"));

export { FolderBucketConfigArgs, FolderBucketConfigState } from "./folderBucketConfig";
export type FolderBucketConfig = import("./folderBucketConfig").FolderBucketConfig;
export const FolderBucketConfig: typeof import("./folderBucketConfig").FolderBucketConfig = null as any;
utilities.lazyLoad(exports, ["FolderBucketConfig"], () => require("./folderBucketConfig"));

export { FolderExclusionArgs, FolderExclusionState } from "./folderExclusion";
export type FolderExclusion = import("./folderExclusion").FolderExclusion;
export const FolderExclusion: typeof import("./folderExclusion").FolderExclusion = null as any;
utilities.lazyLoad(exports, ["FolderExclusion"], () => require("./folderExclusion"));

export { FolderSettingsArgs, FolderSettingsState } from "./folderSettings";
export type FolderSettings = import("./folderSettings").FolderSettings;
export const FolderSettings: typeof import("./folderSettings").FolderSettings = null as any;
utilities.lazyLoad(exports, ["FolderSettings"], () => require("./folderSettings"));

export { FolderSinkArgs, FolderSinkState } from "./folderSink";
export type FolderSink = import("./folderSink").FolderSink;
export const FolderSink: typeof import("./folderSink").FolderSink = null as any;
utilities.lazyLoad(exports, ["FolderSink"], () => require("./folderSink"));

export { GetFolderSettingsArgs, GetFolderSettingsResult, GetFolderSettingsOutputArgs } from "./getFolderSettings";
export const getFolderSettings: typeof import("./getFolderSettings").getFolderSettings = null as any;
export const getFolderSettingsOutput: typeof import("./getFolderSettings").getFolderSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getFolderSettings","getFolderSettingsOutput"], () => require("./getFolderSettings"));

export { GetLogViewIamPolicyArgs, GetLogViewIamPolicyResult, GetLogViewIamPolicyOutputArgs } from "./getLogViewIamPolicy";
export const getLogViewIamPolicy: typeof import("./getLogViewIamPolicy").getLogViewIamPolicy = null as any;
export const getLogViewIamPolicyOutput: typeof import("./getLogViewIamPolicy").getLogViewIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLogViewIamPolicy","getLogViewIamPolicyOutput"], () => require("./getLogViewIamPolicy"));

export { GetOrganizationSettingsArgs, GetOrganizationSettingsResult, GetOrganizationSettingsOutputArgs } from "./getOrganizationSettings";
export const getOrganizationSettings: typeof import("./getOrganizationSettings").getOrganizationSettings = null as any;
export const getOrganizationSettingsOutput: typeof import("./getOrganizationSettings").getOrganizationSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationSettings","getOrganizationSettingsOutput"], () => require("./getOrganizationSettings"));

export { GetProjectCmekSettingsArgs, GetProjectCmekSettingsResult, GetProjectCmekSettingsOutputArgs } from "./getProjectCmekSettings";
export const getProjectCmekSettings: typeof import("./getProjectCmekSettings").getProjectCmekSettings = null as any;
export const getProjectCmekSettingsOutput: typeof import("./getProjectCmekSettings").getProjectCmekSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectCmekSettings","getProjectCmekSettingsOutput"], () => require("./getProjectCmekSettings"));

export { GetProjectSettingsArgs, GetProjectSettingsResult, GetProjectSettingsOutputArgs } from "./getProjectSettings";
export const getProjectSettings: typeof import("./getProjectSettings").getProjectSettings = null as any;
export const getProjectSettingsOutput: typeof import("./getProjectSettings").getProjectSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectSettings","getProjectSettingsOutput"], () => require("./getProjectSettings"));

export { GetSinkArgs, GetSinkResult, GetSinkOutputArgs } from "./getSink";
export const getSink: typeof import("./getSink").getSink = null as any;
export const getSinkOutput: typeof import("./getSink").getSinkOutput = null as any;
utilities.lazyLoad(exports, ["getSink","getSinkOutput"], () => require("./getSink"));

export { LinkedDatasetArgs, LinkedDatasetState } from "./linkedDataset";
export type LinkedDataset = import("./linkedDataset").LinkedDataset;
export const LinkedDataset: typeof import("./linkedDataset").LinkedDataset = null as any;
utilities.lazyLoad(exports, ["LinkedDataset"], () => require("./linkedDataset"));

export { LogScopeArgs, LogScopeState } from "./logScope";
export type LogScope = import("./logScope").LogScope;
export const LogScope: typeof import("./logScope").LogScope = null as any;
utilities.lazyLoad(exports, ["LogScope"], () => require("./logScope"));

export { LogViewArgs, LogViewState } from "./logView";
export type LogView = import("./logView").LogView;
export const LogView: typeof import("./logView").LogView = null as any;
utilities.lazyLoad(exports, ["LogView"], () => require("./logView"));

export { LogViewIamBindingArgs, LogViewIamBindingState } from "./logViewIamBinding";
export type LogViewIamBinding = import("./logViewIamBinding").LogViewIamBinding;
export const LogViewIamBinding: typeof import("./logViewIamBinding").LogViewIamBinding = null as any;
utilities.lazyLoad(exports, ["LogViewIamBinding"], () => require("./logViewIamBinding"));

export { LogViewIamMemberArgs, LogViewIamMemberState } from "./logViewIamMember";
export type LogViewIamMember = import("./logViewIamMember").LogViewIamMember;
export const LogViewIamMember: typeof import("./logViewIamMember").LogViewIamMember = null as any;
utilities.lazyLoad(exports, ["LogViewIamMember"], () => require("./logViewIamMember"));

export { LogViewIamPolicyArgs, LogViewIamPolicyState } from "./logViewIamPolicy";
export type LogViewIamPolicy = import("./logViewIamPolicy").LogViewIamPolicy;
export const LogViewIamPolicy: typeof import("./logViewIamPolicy").LogViewIamPolicy = null as any;
utilities.lazyLoad(exports, ["LogViewIamPolicy"], () => require("./logViewIamPolicy"));

export { MetricArgs, MetricState } from "./metric";
export type Metric = import("./metric").Metric;
export const Metric: typeof import("./metric").Metric = null as any;
utilities.lazyLoad(exports, ["Metric"], () => require("./metric"));

export { OrganizationBucketConfigArgs, OrganizationBucketConfigState } from "./organizationBucketConfig";
export type OrganizationBucketConfig = import("./organizationBucketConfig").OrganizationBucketConfig;
export const OrganizationBucketConfig: typeof import("./organizationBucketConfig").OrganizationBucketConfig = null as any;
utilities.lazyLoad(exports, ["OrganizationBucketConfig"], () => require("./organizationBucketConfig"));

export { OrganizationExclusionArgs, OrganizationExclusionState } from "./organizationExclusion";
export type OrganizationExclusion = import("./organizationExclusion").OrganizationExclusion;
export const OrganizationExclusion: typeof import("./organizationExclusion").OrganizationExclusion = null as any;
utilities.lazyLoad(exports, ["OrganizationExclusion"], () => require("./organizationExclusion"));

export { OrganizationSettingsArgs, OrganizationSettingsState } from "./organizationSettings";
export type OrganizationSettings = import("./organizationSettings").OrganizationSettings;
export const OrganizationSettings: typeof import("./organizationSettings").OrganizationSettings = null as any;
utilities.lazyLoad(exports, ["OrganizationSettings"], () => require("./organizationSettings"));

export { OrganizationSinkArgs, OrganizationSinkState } from "./organizationSink";
export type OrganizationSink = import("./organizationSink").OrganizationSink;
export const OrganizationSink: typeof import("./organizationSink").OrganizationSink = null as any;
utilities.lazyLoad(exports, ["OrganizationSink"], () => require("./organizationSink"));

export { ProjectBucketConfigArgs, ProjectBucketConfigState } from "./projectBucketConfig";
export type ProjectBucketConfig = import("./projectBucketConfig").ProjectBucketConfig;
export const ProjectBucketConfig: typeof import("./projectBucketConfig").ProjectBucketConfig = null as any;
utilities.lazyLoad(exports, ["ProjectBucketConfig"], () => require("./projectBucketConfig"));

export { ProjectExclusionArgs, ProjectExclusionState } from "./projectExclusion";
export type ProjectExclusion = import("./projectExclusion").ProjectExclusion;
export const ProjectExclusion: typeof import("./projectExclusion").ProjectExclusion = null as any;
utilities.lazyLoad(exports, ["ProjectExclusion"], () => require("./projectExclusion"));

export { ProjectSinkArgs, ProjectSinkState } from "./projectSink";
export type ProjectSink = import("./projectSink").ProjectSink;
export const ProjectSink: typeof import("./projectSink").ProjectSink = null as any;
utilities.lazyLoad(exports, ["ProjectSink"], () => require("./projectSink"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:logging/billingAccountBucketConfig:BillingAccountBucketConfig":
                return new BillingAccountBucketConfig(name, <any>undefined, { urn })
            case "gcp:logging/billingAccountExclusion:BillingAccountExclusion":
                return new BillingAccountExclusion(name, <any>undefined, { urn })
            case "gcp:logging/billingAccountSink:BillingAccountSink":
                return new BillingAccountSink(name, <any>undefined, { urn })
            case "gcp:logging/folderBucketConfig:FolderBucketConfig":
                return new FolderBucketConfig(name, <any>undefined, { urn })
            case "gcp:logging/folderExclusion:FolderExclusion":
                return new FolderExclusion(name, <any>undefined, { urn })
            case "gcp:logging/folderSettings:FolderSettings":
                return new FolderSettings(name, <any>undefined, { urn })
            case "gcp:logging/folderSink:FolderSink":
                return new FolderSink(name, <any>undefined, { urn })
            case "gcp:logging/linkedDataset:LinkedDataset":
                return new LinkedDataset(name, <any>undefined, { urn })
            case "gcp:logging/logScope:LogScope":
                return new LogScope(name, <any>undefined, { urn })
            case "gcp:logging/logView:LogView":
                return new LogView(name, <any>undefined, { urn })
            case "gcp:logging/logViewIamBinding:LogViewIamBinding":
                return new LogViewIamBinding(name, <any>undefined, { urn })
            case "gcp:logging/logViewIamMember:LogViewIamMember":
                return new LogViewIamMember(name, <any>undefined, { urn })
            case "gcp:logging/logViewIamPolicy:LogViewIamPolicy":
                return new LogViewIamPolicy(name, <any>undefined, { urn })
            case "gcp:logging/metric:Metric":
                return new Metric(name, <any>undefined, { urn })
            case "gcp:logging/organizationBucketConfig:OrganizationBucketConfig":
                return new OrganizationBucketConfig(name, <any>undefined, { urn })
            case "gcp:logging/organizationExclusion:OrganizationExclusion":
                return new OrganizationExclusion(name, <any>undefined, { urn })
            case "gcp:logging/organizationSettings:OrganizationSettings":
                return new OrganizationSettings(name, <any>undefined, { urn })
            case "gcp:logging/organizationSink:OrganizationSink":
                return new OrganizationSink(name, <any>undefined, { urn })
            case "gcp:logging/projectBucketConfig:ProjectBucketConfig":
                return new ProjectBucketConfig(name, <any>undefined, { urn })
            case "gcp:logging/projectExclusion:ProjectExclusion":
                return new ProjectExclusion(name, <any>undefined, { urn })
            case "gcp:logging/projectSink:ProjectSink":
                return new ProjectSink(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "logging/billingAccountBucketConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/billingAccountExclusion", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/billingAccountSink", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/folderBucketConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/folderExclusion", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/folderSettings", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/folderSink", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/linkedDataset", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/logScope", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/logView", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/logViewIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/logViewIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/logViewIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/metric", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/organizationBucketConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/organizationExclusion", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/organizationSettings", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/organizationSink", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/projectBucketConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/projectExclusion", _module)
pulumi.runtime.registerResourceModule("gcp", "logging/projectSink", _module)
