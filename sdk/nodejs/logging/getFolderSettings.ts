// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Describes the settings associated with a folder.
 *
 * To get more information about LoggingFolderSettings, see:
 *
 * * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/folders/getSettings)
 * * [Configure default settings for organizations and folders](https://cloud.google.com/logging/docs/default-settings).
 *
 * ## Example Usage
 * ### Logging Folder Settings Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const settings = gcp.logging.getFolderSettings({
 *     folder: "my-folder-name",
 * });
 * ```
 */
export function getFolderSettings(args: GetFolderSettingsArgs, opts?: pulumi.InvokeOptions): Promise<GetFolderSettingsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:logging/getFolderSettings:getFolderSettings", {
        "folder": args.folder,
    }, opts);
}

/**
 * A collection of arguments for invoking getFolderSettings.
 */
export interface GetFolderSettingsArgs {
    /**
     * The ID of the folder for which to retrieve settings.
     */
    folder: string;
}

/**
 * A collection of values returned by getFolderSettings.
 */
export interface GetFolderSettingsResult {
    /**
     * If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
     */
    readonly disableDefaultSink: boolean;
    readonly folder: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The resource name for the configured Cloud KMS key.
     * KMS key name format:
     * `'projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]'`
     * To enable CMEK for the bucket, set this field to a valid kmsKeyName for which the associated service account has the required cloudkms.cryptoKeyEncrypterDecrypter roles assigned for the key.
     * The Cloud KMS key used by the bucket can be updated by changing the kmsKeyName to a new valid key name. Encryption operations that are in progress will be completed with the key that was in use when they started. Decryption operations will be completed using the key that was used at the time of encryption unless access to that key has been revoked.
     * See [Enabling CMEK for Logging Buckets](https://cloud.google.com/logging/docs/routing/managed-encryption-storage) for more information.
     */
    readonly kmsKeyName: string;
    /**
     * The service account associated with a project for which CMEK will apply.
     * Before enabling CMEK for a logging bucket, you must first assign the cloudkms.cryptoKeyEncrypterDecrypter role to the service account associated with the project for which CMEK will apply. See [Enabling CMEK for Logging Buckets](https://cloud.google.com/logging/docs/routing/managed-encryption-storage) for more information.
     */
    readonly kmsServiceAccountId: string;
    /**
     * The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
     */
    readonly loggingServiceAccountId: string;
    /**
     * The resource name of the settings.
     */
    readonly name: string;
    /**
     * The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
     */
    readonly storageLocation: string;
}
/**
 * Describes the settings associated with a folder.
 *
 * To get more information about LoggingFolderSettings, see:
 *
 * * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/folders/getSettings)
 * * [Configure default settings for organizations and folders](https://cloud.google.com/logging/docs/default-settings).
 *
 * ## Example Usage
 * ### Logging Folder Settings Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const settings = gcp.logging.getFolderSettings({
 *     folder: "my-folder-name",
 * });
 * ```
 */
export function getFolderSettingsOutput(args: GetFolderSettingsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFolderSettingsResult> {
    return pulumi.output(args).apply((a: any) => getFolderSettings(a, opts))
}

/**
 * A collection of arguments for invoking getFolderSettings.
 */
export interface GetFolderSettingsOutputArgs {
    /**
     * The ID of the folder for which to retrieve settings.
     */
    folder: pulumi.Input<string>;
}
