// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The Logging LogView resource
 *
 * ## Example Usage
 * ### Basic
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.logging.ProjectBucketConfig("basic", {
 *     project: "my-project-name",
 *     location: "global",
 *     retentionDays: 30,
 *     bucketId: "_Default",
 * });
 * const primary = new gcp.logging.LogView("primary", {
 *     bucket: basic.id,
 *     description: "A logging view configured with Terraform",
 *     filter: "SOURCE(\"projects/myproject\") AND resource.type = \"gce_instance\" AND LOG_ID(\"stdout\")",
 * });
 * ```
 *
 * ## Import
 *
 * LogView can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:logging/logView:LogView default {{parent}}/locations/{{location}}/buckets/{{bucket}}/views/{{name}}
 * ```
 */
export class LogView extends pulumi.CustomResource {
    /**
     * Get an existing LogView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogViewState, opts?: pulumi.CustomResourceOptions): LogView {
        return new LogView(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:logging/logView:LogView';

    /**
     * Returns true if the given object is an instance of LogView.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogView {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogView.__pulumiType;
    }

    /**
     * The bucket of the resource
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * Output only. The creation timestamp of the view.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Describes this view.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id For example: SOURCE("projects/myproject") AND resource.type = "gceInstance" AND LOG_ID("stdout")
     */
    public readonly filter!: pulumi.Output<string | undefined>;
    /**
     * The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the view. For example: `projects/my-project/locations/global/buckets/my-bucket/views/my-view`
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The parent of the resource.
     */
    public readonly parent!: pulumi.Output<string>;
    /**
     * Output only. The last update timestamp of the view.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a LogView resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogViewArgs | LogViewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogViewState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as LogViewArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogView.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogView resources.
 */
export interface LogViewState {
    /**
     * The bucket of the resource
     */
    bucket?: pulumi.Input<string>;
    /**
     * Output only. The creation timestamp of the view.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Describes this view.
     */
    description?: pulumi.Input<string>;
    /**
     * Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id For example: SOURCE("projects/myproject") AND resource.type = "gceInstance" AND LOG_ID("stdout")
     */
    filter?: pulumi.Input<string>;
    /**
     * The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the view. For example: `projects/my-project/locations/global/buckets/my-bucket/views/my-view`
     */
    name?: pulumi.Input<string>;
    /**
     * The parent of the resource.
     */
    parent?: pulumi.Input<string>;
    /**
     * Output only. The last update timestamp of the view.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogView resource.
 */
export interface LogViewArgs {
    /**
     * The bucket of the resource
     */
    bucket: pulumi.Input<string>;
    /**
     * Describes this view.
     */
    description?: pulumi.Input<string>;
    /**
     * Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id For example: SOURCE("projects/myproject") AND resource.type = "gceInstance" AND LOG_ID("stdout")
     */
    filter?: pulumi.Input<string>;
    /**
     * The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the view. For example: `projects/my-project/locations/global/buckets/my-bucket/views/my-view`
     */
    name?: pulumi.Input<string>;
    /**
     * The parent of the resource.
     */
    parent?: pulumi.Input<string>;
}
