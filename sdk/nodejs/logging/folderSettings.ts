// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Default resource settings control whether CMEK is required for new log buckets. These settings also determine the storage location for the _Default and _Required log buckets, and whether the _Default sink is enabled or disabled.
 *
 * To get more information about FolderSettings, see:
 *
 * * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/TopLevel/getSettings)
 * * How-to Guides
 *     * [Configure default settings for organizations and folders](https://cloud.google.com/logging/docs/default-settings)
 *
 * ## Example Usage
 *
 * ### Logging Folder Settings All
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myFolder = new gcp.organizations.Folder("my_folder", {
 *     displayName: "folder-name",
 *     parent: "organizations/123456789",
 * });
 * const example = new gcp.logging.FolderSettings("example", {
 *     disableDefaultSink: true,
 *     folder: myFolder.folderId,
 *     kmsKeyName: "kms-key",
 *     storageLocation: "us-central1",
 * });
 * const settings = gcp.logging.getFolderSettingsOutput({
 *     folder: myFolder.folderId,
 * });
 * const iam = new gcp.kms.CryptoKeyIAMMember("iam", {
 *     cryptoKeyId: "kms-key",
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     member: settings.apply(settings => `serviceAccount:${settings.kmsServiceAccountId}`),
 * });
 * ```
 *
 * ## Import
 *
 * FolderSettings can be imported using any of these accepted formats:
 *
 * * `folders/{{folder}}/settings`
 *
 * * `{{folder}}`
 *
 * When using the `pulumi import` command, FolderSettings can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:logging/folderSettings:FolderSettings default folders/{{folder}}/settings
 * ```
 *
 * ```sh
 * $ pulumi import gcp:logging/folderSettings:FolderSettings default {{folder}}
 * ```
 */
export class FolderSettings extends pulumi.CustomResource {
    /**
     * Get an existing FolderSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FolderSettingsState, opts?: pulumi.CustomResourceOptions): FolderSettings {
        return new FolderSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:logging/folderSettings:FolderSettings';

    /**
     * Returns true if the given object is an instance of FolderSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FolderSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FolderSettings.__pulumiType;
    }

    /**
     * If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
     */
    public readonly disableDefaultSink!: pulumi.Output<boolean>;
    /**
     * The folder for which to retrieve settings.
     *
     *
     * - - -
     */
    public readonly folder!: pulumi.Output<string>;
    /**
     * The resource name for the configured Cloud KMS key.
     */
    public readonly kmsKeyName!: pulumi.Output<string>;
    /**
     * The service account that will be used by the Log Router to access your Cloud KMS key.
     */
    public /*out*/ readonly kmsServiceAccountId!: pulumi.Output<string>;
    /**
     * The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
     */
    public /*out*/ readonly loggingServiceAccountId!: pulumi.Output<string>;
    /**
     * The resource name of the settings.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
     */
    public readonly storageLocation!: pulumi.Output<string>;

    /**
     * Create a FolderSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FolderSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FolderSettingsArgs | FolderSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FolderSettingsState | undefined;
            resourceInputs["disableDefaultSink"] = state ? state.disableDefaultSink : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["kmsKeyName"] = state ? state.kmsKeyName : undefined;
            resourceInputs["kmsServiceAccountId"] = state ? state.kmsServiceAccountId : undefined;
            resourceInputs["loggingServiceAccountId"] = state ? state.loggingServiceAccountId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["storageLocation"] = state ? state.storageLocation : undefined;
        } else {
            const args = argsOrState as FolderSettingsArgs | undefined;
            if ((!args || args.folder === undefined) && !opts.urn) {
                throw new Error("Missing required property 'folder'");
            }
            resourceInputs["disableDefaultSink"] = args ? args.disableDefaultSink : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["kmsKeyName"] = args ? args.kmsKeyName : undefined;
            resourceInputs["storageLocation"] = args ? args.storageLocation : undefined;
            resourceInputs["kmsServiceAccountId"] = undefined /*out*/;
            resourceInputs["loggingServiceAccountId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FolderSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FolderSettings resources.
 */
export interface FolderSettingsState {
    /**
     * If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
     */
    disableDefaultSink?: pulumi.Input<boolean>;
    /**
     * The folder for which to retrieve settings.
     *
     *
     * - - -
     */
    folder?: pulumi.Input<string>;
    /**
     * The resource name for the configured Cloud KMS key.
     */
    kmsKeyName?: pulumi.Input<string>;
    /**
     * The service account that will be used by the Log Router to access your Cloud KMS key.
     */
    kmsServiceAccountId?: pulumi.Input<string>;
    /**
     * The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
     */
    loggingServiceAccountId?: pulumi.Input<string>;
    /**
     * The resource name of the settings.
     */
    name?: pulumi.Input<string>;
    /**
     * The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
     */
    storageLocation?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FolderSettings resource.
 */
export interface FolderSettingsArgs {
    /**
     * If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
     */
    disableDefaultSink?: pulumi.Input<boolean>;
    /**
     * The folder for which to retrieve settings.
     *
     *
     * - - -
     */
    folder: pulumi.Input<string>;
    /**
     * The resource name for the configured Cloud KMS key.
     */
    kmsKeyName?: pulumi.Input<string>;
    /**
     * The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
     */
    storageLocation?: pulumi.Input<string>;
}
