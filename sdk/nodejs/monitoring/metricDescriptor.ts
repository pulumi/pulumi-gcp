// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.
 *
 * To get more information about MetricDescriptor, see:
 *
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/monitoring/custom-metrics/)
 *
 * ## Example Usage
 * ### Monitoring Metric Descriptor Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.monitoring.MetricDescriptor("basic", {
 *     description: "Daily sales records from all branch stores.",
 *     displayName: "metric-descriptor",
 *     labels: [{
 *         description: "The ID of the store.",
 *         key: "store_id",
 *         valueType: "STRING",
 *     }],
 *     launchStage: "BETA",
 *     metadata: {
 *         ingestDelay: "30s",
 *         samplePeriod: "60s",
 *     },
 *     metricKind: "GAUGE",
 *     type: "custom.googleapis.com/stores/daily_sales",
 *     unit: "{USD}",
 *     valueType: "DOUBLE",
 * });
 * ```
 * ### Monitoring Metric Descriptor Alert
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const withAlert = new gcp.monitoring.MetricDescriptor("with_alert", {
 *     description: "Daily sales records from all branch stores.",
 *     displayName: "metric-descriptor",
 *     metricKind: "GAUGE",
 *     type: "custom.googleapis.com/stores/daily_sales",
 *     unit: "{USD}",
 *     valueType: "DOUBLE",
 * });
 * const alertPolicy = new gcp.monitoring.AlertPolicy("alert_policy", {
 *     combiner: "OR",
 *     conditions: [{
 *         conditionThreshold: {
 *             comparison: "COMPARISON_GT",
 *             duration: "60s",
 *             filter: pulumi.interpolate`metric.type="${withAlert.type}" AND resource.type="gce_instance"`,
 *         },
 *         displayName: "test condition",
 *     }],
 *     displayName: "metric-descriptor",
 * });
 * ```
 *
 * ## Import
 *
 * MetricDescriptor can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:monitoring/metricDescriptor:MetricDescriptor default {{name}}
 * ```
 */
export class MetricDescriptor extends pulumi.CustomResource {
    /**
     * Get an existing MetricDescriptor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricDescriptorState, opts?: pulumi.CustomResourceOptions): MetricDescriptor {
        return new MetricDescriptor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:monitoring/metricDescriptor:MetricDescriptor';

    /**
     * Returns true if the given object is an instance of MetricDescriptor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricDescriptor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricDescriptor.__pulumiType;
    }

    /**
     * A human-readable description for the label.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count".
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The set of labels that can be used to describe a specific instance of this metric type. In order to delete a label, the entire resource must be deleted, then created with the desired labels.
     * Structure is documented below.
     */
    public readonly labels!: pulumi.Output<outputs.monitoring.MetricDescriptorLabel[] | undefined>;
    /**
     * The launch stage of the metric definition.
     * Possible values are `LAUNCH_STAGE_UNSPECIFIED`, `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
     */
    public readonly launchStage!: pulumi.Output<string | undefined>;
    /**
     * Metadata which can be used to guide usage of the metric.
     * Structure is documented below.
     */
    public readonly metadata!: pulumi.Output<outputs.monitoring.MetricDescriptorMetadata | undefined>;
    /**
     * Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metricKind and valueType might not be supported.
     * Possible values are `METRIC_KIND_UNSPECIFIED`, `GAUGE`, `DELTA`, and `CUMULATIVE`.
     */
    public readonly metricKind!: pulumi.Output<string>;
    /**
     * If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that
     * is associated with this metric type can only be associated with one of the monitored resource types listed here. This
     * field allows time series to be associated with the intersection of this metric type and the monitored resource types in
     * this list.
     */
    public /*out*/ readonly monitoredResourceTypes!: pulumi.Output<string[]>;
    /**
     * The resource name of the metric descriptor.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The metric type, including its DNS name prefix. The type is not URL-encoded. All service defined metrics must be prefixed with the service name, in the format of {service name}/{relative metric name}, such as cloudsql.googleapis.com/database/cpu/utilization. The relative metric name must have only upper and lower-case letters, digits, '/' and underscores '_' are allowed. Additionally, the maximum number of characters allowed for the relativeMetricName is 100. All user-defined metric types have the DNS name custom.googleapis.com, external.googleapis.com, or logging.googleapis.com/user/.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The units in which the metric value is reported. It is only applicable if the
     * valueType is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of
     * the stored metric values.
     * Different systems may scale the values to be more easily displayed (so a value of
     * 0.02KBy might be displayed as 20By, and a value of 3523KBy might be displayed as
     * 3.5MBy). However, if the unit is KBy, then the value of the metric is always in
     * thousands of bytes, no matter how it may be displayed.
     * If you want a custom metric to record the exact number of CPU-seconds used by a job,
     * you can create an INT64 CUMULATIVE metric whose unit is s{CPU} (or equivalently
     * 1s{CPU} or just s). If the job uses 12,005 CPU-seconds, then the value is written as
     * 12005.
     * Alternatively, if you want a custom metric to record data in a more granular way, you
     * can create a DOUBLE CUMULATIVE metric whose unit is ks{CPU}, and then write the value
     * 12.005 (which is 12005/1000), or use Kis{CPU} and write 11.723 (which is 12005/1024).
     * The supported units are a subset of The Unified Code for Units of Measure standard.
     * More info can be found in the API documentation
     * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors).
     */
    public readonly unit!: pulumi.Output<string | undefined>;
    /**
     * The type of data that can be assigned to the label.
     * Default value is `STRING`.
     * Possible values are `STRING`, `BOOL`, and `INT64`.
     */
    public readonly valueType!: pulumi.Output<string>;

    /**
     * Create a MetricDescriptor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricDescriptorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricDescriptorArgs | MetricDescriptorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricDescriptorState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["launchStage"] = state ? state.launchStage : undefined;
            inputs["metadata"] = state ? state.metadata : undefined;
            inputs["metricKind"] = state ? state.metricKind : undefined;
            inputs["monitoredResourceTypes"] = state ? state.monitoredResourceTypes : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["unit"] = state ? state.unit : undefined;
            inputs["valueType"] = state ? state.valueType : undefined;
        } else {
            const args = argsOrState as MetricDescriptorArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.metricKind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricKind'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.valueType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'valueType'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["launchStage"] = args ? args.launchStage : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["metricKind"] = args ? args.metricKind : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["unit"] = args ? args.unit : undefined;
            inputs["valueType"] = args ? args.valueType : undefined;
            inputs["monitoredResourceTypes"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(MetricDescriptor.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetricDescriptor resources.
 */
export interface MetricDescriptorState {
    /**
     * A human-readable description for the label.
     */
    description?: pulumi.Input<string>;
    /**
     * A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count".
     */
    displayName?: pulumi.Input<string>;
    /**
     * The set of labels that can be used to describe a specific instance of this metric type. In order to delete a label, the entire resource must be deleted, then created with the desired labels.
     * Structure is documented below.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.monitoring.MetricDescriptorLabel>[]>;
    /**
     * The launch stage of the metric definition.
     * Possible values are `LAUNCH_STAGE_UNSPECIFIED`, `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
     */
    launchStage?: pulumi.Input<string>;
    /**
     * Metadata which can be used to guide usage of the metric.
     * Structure is documented below.
     */
    metadata?: pulumi.Input<inputs.monitoring.MetricDescriptorMetadata>;
    /**
     * Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metricKind and valueType might not be supported.
     * Possible values are `METRIC_KIND_UNSPECIFIED`, `GAUGE`, `DELTA`, and `CUMULATIVE`.
     */
    metricKind?: pulumi.Input<string>;
    /**
     * If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that
     * is associated with this metric type can only be associated with one of the monitored resource types listed here. This
     * field allows time series to be associated with the intersection of this metric type and the monitored resource types in
     * this list.
     */
    monitoredResourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource name of the metric descriptor.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The metric type, including its DNS name prefix. The type is not URL-encoded. All service defined metrics must be prefixed with the service name, in the format of {service name}/{relative metric name}, such as cloudsql.googleapis.com/database/cpu/utilization. The relative metric name must have only upper and lower-case letters, digits, '/' and underscores '_' are allowed. Additionally, the maximum number of characters allowed for the relativeMetricName is 100. All user-defined metric types have the DNS name custom.googleapis.com, external.googleapis.com, or logging.googleapis.com/user/.
     */
    type?: pulumi.Input<string>;
    /**
     * The units in which the metric value is reported. It is only applicable if the
     * valueType is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of
     * the stored metric values.
     * Different systems may scale the values to be more easily displayed (so a value of
     * 0.02KBy might be displayed as 20By, and a value of 3523KBy might be displayed as
     * 3.5MBy). However, if the unit is KBy, then the value of the metric is always in
     * thousands of bytes, no matter how it may be displayed.
     * If you want a custom metric to record the exact number of CPU-seconds used by a job,
     * you can create an INT64 CUMULATIVE metric whose unit is s{CPU} (or equivalently
     * 1s{CPU} or just s). If the job uses 12,005 CPU-seconds, then the value is written as
     * 12005.
     * Alternatively, if you want a custom metric to record data in a more granular way, you
     * can create a DOUBLE CUMULATIVE metric whose unit is ks{CPU}, and then write the value
     * 12.005 (which is 12005/1000), or use Kis{CPU} and write 11.723 (which is 12005/1024).
     * The supported units are a subset of The Unified Code for Units of Measure standard.
     * More info can be found in the API documentation
     * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors).
     */
    unit?: pulumi.Input<string>;
    /**
     * The type of data that can be assigned to the label.
     * Default value is `STRING`.
     * Possible values are `STRING`, `BOOL`, and `INT64`.
     */
    valueType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetricDescriptor resource.
 */
export interface MetricDescriptorArgs {
    /**
     * A human-readable description for the label.
     */
    description: pulumi.Input<string>;
    /**
     * A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count".
     */
    displayName: pulumi.Input<string>;
    /**
     * The set of labels that can be used to describe a specific instance of this metric type. In order to delete a label, the entire resource must be deleted, then created with the desired labels.
     * Structure is documented below.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.monitoring.MetricDescriptorLabel>[]>;
    /**
     * The launch stage of the metric definition.
     * Possible values are `LAUNCH_STAGE_UNSPECIFIED`, `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
     */
    launchStage?: pulumi.Input<string>;
    /**
     * Metadata which can be used to guide usage of the metric.
     * Structure is documented below.
     */
    metadata?: pulumi.Input<inputs.monitoring.MetricDescriptorMetadata>;
    /**
     * Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metricKind and valueType might not be supported.
     * Possible values are `METRIC_KIND_UNSPECIFIED`, `GAUGE`, `DELTA`, and `CUMULATIVE`.
     */
    metricKind: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The metric type, including its DNS name prefix. The type is not URL-encoded. All service defined metrics must be prefixed with the service name, in the format of {service name}/{relative metric name}, such as cloudsql.googleapis.com/database/cpu/utilization. The relative metric name must have only upper and lower-case letters, digits, '/' and underscores '_' are allowed. Additionally, the maximum number of characters allowed for the relativeMetricName is 100. All user-defined metric types have the DNS name custom.googleapis.com, external.googleapis.com, or logging.googleapis.com/user/.
     */
    type: pulumi.Input<string>;
    /**
     * The units in which the metric value is reported. It is only applicable if the
     * valueType is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of
     * the stored metric values.
     * Different systems may scale the values to be more easily displayed (so a value of
     * 0.02KBy might be displayed as 20By, and a value of 3523KBy might be displayed as
     * 3.5MBy). However, if the unit is KBy, then the value of the metric is always in
     * thousands of bytes, no matter how it may be displayed.
     * If you want a custom metric to record the exact number of CPU-seconds used by a job,
     * you can create an INT64 CUMULATIVE metric whose unit is s{CPU} (or equivalently
     * 1s{CPU} or just s). If the job uses 12,005 CPU-seconds, then the value is written as
     * 12005.
     * Alternatively, if you want a custom metric to record data in a more granular way, you
     * can create a DOUBLE CUMULATIVE metric whose unit is ks{CPU}, and then write the value
     * 12.005 (which is 12005/1000), or use Kis{CPU} and write 11.723 (which is 12005/1024).
     * The supported units are a subset of The Unified Code for Units of Measure standard.
     * More info can be found in the API documentation
     * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors).
     */
    unit?: pulumi.Input<string>;
    /**
     * The type of data that can be assigned to the label.
     * Default value is `STRING`.
     * Possible values are `STRING`, `BOOL`, and `INT64`.
     */
    valueType: pulumi.Input<string>;
}
