// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * A Monitoring Service is the root resource under which operational aspects of a
 * generic service are accessible. A service is some discrete, autonomous, and
 * network-accessible unit, designed to solve an individual concern
 *
 * A monitoring Istio Canonical Service is automatically created by GCP to monitor
 * Istio Canonical Services.
 *
 * To get more information about Service, see:
 *
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
 * * How-to Guides
 *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
 *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
 *
 * ## Example Usage
 * ### Monitoring Istio Canonical Service
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // Monitors the default MeshIstio service
 * const defaultIstioCanonicalService = pulumi.output(gcp.monitoring.getIstioCanonicalService({
 *     canonicalService: "prometheus",
 *     canonicalServiceNamespace: "istio-system",
 *     meshUid: "proj-573164786102",
 * }));
 * ```
 */
export function getIstioCanonicalService(args: GetIstioCanonicalServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetIstioCanonicalServiceResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("gcp:monitoring/getIstioCanonicalService:getIstioCanonicalService", {
        "canonicalService": args.canonicalService,
        "canonicalServiceNamespace": args.canonicalServiceNamespace,
        "meshUid": args.meshUid,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getIstioCanonicalService.
 */
export interface GetIstioCanonicalServiceArgs {
    /**
     * The name of the canonical service underlying this service.
     * Corresponds to the destinationCanonicalServiceName metric label in label in Istio metrics.
     */
    canonicalService: string;
    /**
     * The namespace of the canonical service underlying this service.
     * Corresponds to the destinationCanonicalServiceNamespace metric label in Istio metrics.
     */
    canonicalServiceNamespace: string;
    /**
     * Identifier for the mesh in which this Istio service is defined.
     * Corresponds to the meshUid metric label in Istio metrics.
     */
    meshUid: string;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: string;
}

/**
 * A collection of values returned by getIstioCanonicalService.
 */
export interface GetIstioCanonicalServiceResult {
    readonly canonicalService: string;
    readonly canonicalServiceNamespace: string;
    readonly displayName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly meshUid: string;
    readonly name: string;
    readonly project?: string;
    readonly serviceId: string;
    readonly telemetries: outputs.monitoring.GetIstioCanonicalServiceTelemetry[];
}
