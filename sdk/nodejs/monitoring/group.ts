// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The description of a dynamic collection of monitored resources. Each group
 * has a filter that is matched against monitored resources and their
 * associated metadata. If a group's filter matches an available monitored
 * resource, then that resource is a member of that group.
 *
 * To get more information about Group, see:
 *
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.groups)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/monitoring/groups/)
 *
 * ## Example Usage
 *
 * ### Monitoring Group Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.monitoring.Group("basic", {
 *     displayName: "tf-test MonitoringGroup",
 *     filter: "resource.metadata.region=\"europe-west2\"",
 * });
 * ```
 * ### Monitoring Group Subgroup
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const parent = new gcp.monitoring.Group("parent", {
 *     displayName: "tf-test MonitoringParentGroup",
 *     filter: "resource.metadata.region=\"europe-west2\"",
 * });
 * const subgroup = new gcp.monitoring.Group("subgroup", {
 *     displayName: "tf-test MonitoringSubGroup",
 *     filter: "resource.metadata.region=\"europe-west2\"",
 *     parentName: parent.name,
 * });
 * ```
 *
 * ## Import
 *
 * Group can be imported using any of these accepted formats:
 *
 * * `{{project}}/{{name}}`
 *
 * * `{{project}} {{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, Group can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:monitoring/group:Group default {{project}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:monitoring/group:Group default "{{project}} {{name}}"
 * ```
 *
 * ```sh
 * $ pulumi import gcp:monitoring/group:Group default {{name}}
 * ```
 */
export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:monitoring/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    /**
     * A user-assigned name for this group, used only for display
     * purposes.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * The filter used to determine which monitored resources
     * belong to this group.
     */
    declare public readonly filter: pulumi.Output<string>;
    /**
     * If true, the members of this group are considered to be a
     * cluster. The system can perform additional analysis on
     * groups that are clusters.
     */
    declare public readonly isCluster: pulumi.Output<boolean | undefined>;
    /**
     * A unique identifier for this group. The format is
     * "projects/{project_id_or_number}/groups/{group_id}".
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The name of the group's parent, if it has one. The format is
     * "projects/{project_id_or_number}/groups/{group_id}". For
     * groups with no parent, parentName is the empty string, "".
     */
    declare public readonly parentName: pulumi.Output<string | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["isCluster"] = state?.isCluster;
            resourceInputs["name"] = state?.name;
            resourceInputs["parentName"] = state?.parentName;
            resourceInputs["project"] = state?.project;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.filter === undefined && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["filter"] = args?.filter;
            resourceInputs["isCluster"] = args?.isCluster;
            resourceInputs["parentName"] = args?.parentName;
            resourceInputs["project"] = args?.project;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Group.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * A user-assigned name for this group, used only for display
     * purposes.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The filter used to determine which monitored resources
     * belong to this group.
     */
    filter?: pulumi.Input<string>;
    /**
     * If true, the members of this group are considered to be a
     * cluster. The system can perform additional analysis on
     * groups that are clusters.
     */
    isCluster?: pulumi.Input<boolean>;
    /**
     * A unique identifier for this group. The format is
     * "projects/{project_id_or_number}/groups/{group_id}".
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the group's parent, if it has one. The format is
     * "projects/{project_id_or_number}/groups/{group_id}". For
     * groups with no parent, parentName is the empty string, "".
     */
    parentName?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * A user-assigned name for this group, used only for display
     * purposes.
     */
    displayName: pulumi.Input<string>;
    /**
     * The filter used to determine which monitored resources
     * belong to this group.
     */
    filter: pulumi.Input<string>;
    /**
     * If true, the members of this group are considered to be a
     * cluster. The system can perform additional analysis on
     * groups that are clusters.
     */
    isCluster?: pulumi.Input<boolean>;
    /**
     * The name of the group's parent, if it has one. The format is
     * "projects/{project_id_or_number}/groups/{group_id}". For
     * groups with no parent, parentName is the empty string, "".
     */
    parentName?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
