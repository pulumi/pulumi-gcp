// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A RolloutKind is a reusable configuration resource that defines the policies, strategies, and targeting for Rollout operations. It acts as a template for repeatable Rollouts, providing guardrails and ensuring that updates are executed in a consistent manner across a fleet of Units.
 *
 * ## Example Usage
 *
 * ### Saas Runtime Rollout Kind Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const exampleSaas = new gcp.saasruntime.SaaS("example_saas", {
 *     saasId: "example-saas",
 *     location: "global",
 *     locations: [{
 *         name: "us-central1",
 *     }],
 * });
 * const exampleUnitkind = new gcp.saasruntime.UnitKind("example_unitkind", {
 *     location: "global",
 *     unitKindId: "example-unitkind",
 *     saas: exampleSaas.id,
 * });
 * const example = new gcp.saasruntime.RolloutKind("example", {
 *     location: "global",
 *     rolloutKindId: "example-rolloutkind",
 *     unitKind: exampleUnitkind.id,
 *     rolloutOrchestrationStrategy: "Google.Cloud.Simple.OneLocationAtATime",
 *     errorBudget: {
 *         allowedCount: 1,
 *     },
 *     unitFilter: "unit.labels['key1'] == 'value1'",
 * });
 * ```
 *
 * ## Import
 *
 * RolloutKind can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/rolloutKinds/{{rollout_kind_id}}`
 *
 * * `{{project}}/{{location}}/{{rollout_kind_id}}`
 *
 * * `{{location}}/{{rollout_kind_id}}`
 *
 * When using the `pulumi import` command, RolloutKind can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:saasruntime/rolloutKind:RolloutKind default projects/{{project}}/locations/{{location}}/rolloutKinds/{{rollout_kind_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:saasruntime/rolloutKind:RolloutKind default {{project}}/{{location}}/{{rollout_kind_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:saasruntime/rolloutKind:RolloutKind default {{location}}/{{rollout_kind_id}}
 * ```
 */
export class RolloutKind extends pulumi.CustomResource {
    /**
     * Get an existing RolloutKind resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RolloutKindState, opts?: pulumi.CustomResourceOptions): RolloutKind {
        return new RolloutKind(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:saasruntime/rolloutKind:RolloutKind';

    /**
     * Returns true if the given object is an instance of RolloutKind.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RolloutKind {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RolloutKind.__pulumiType;
    }

    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The timestamp when the resource was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    declare public /*out*/ readonly effectiveAnnotations: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The configuration for error budget. If the number of failed units exceeds
     * max(allowed_count, allowedRatio * total_units), the rollout will be paused.
     * Structure is documented below.
     */
    declare public readonly errorBudget: pulumi.Output<outputs.saasruntime.RolloutKindErrorBudget | undefined>;
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * "projects/{project}/locations/{location}/rolloutKinds/{rollout_kind_id}"
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The ID value for the new rollout kind.
     */
    declare public readonly rolloutKindId: pulumi.Output<string>;
    /**
     * The strategy used for executing a Rollout. This is a required field.
     * There are two supported values strategies which are used to control a rollout.
     * - "Google.Cloud.Simple.AllAtOnce"
     * - "Google.Cloud.Simple.OneLocationAtATime"
     * A rollout with one of these simple strategies will rollout across
     * all locations defined in the associated UnitKind's Saas Locations.
     */
    declare public readonly rolloutOrchestrationStrategy: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * CEL(https://github.com/google/cel-spec) formatted filter string against
     * Unit. The filter will be applied to determine the eligible unit population.
     * This filter can only reduce, but not expand the scope of the rollout.
     */
    declare public readonly unitFilter: pulumi.Output<string | undefined>;
    /**
     * UnitKind that this rollout kind corresponds to. Rollouts stemming from this
     * rollout kind will target the units of this unit kind. In other words, this
     * defines the population of target units to be upgraded by rollouts.
     */
    declare public readonly unitKind: pulumi.Output<string>;
    /**
     * The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;
    /**
     * The config for updating the unit kind. By default, the unit kind will be
     * updated on the rollout start.
     * Possible values:
     * UPDATE_UNIT_KIND_STRATEGY_ON_START
     * UPDATE_UNIT_KIND_STRATEGY_NEVER
     * Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
     */
    declare public readonly updateUnitKindStrategy: pulumi.Output<string | undefined>;

    /**
     * Create a RolloutKind resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RolloutKindArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RolloutKindArgs | RolloutKindState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RolloutKindState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["effectiveAnnotations"] = state?.effectiveAnnotations;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["errorBudget"] = state?.errorBudget;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["rolloutKindId"] = state?.rolloutKindId;
            resourceInputs["rolloutOrchestrationStrategy"] = state?.rolloutOrchestrationStrategy;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["unitFilter"] = state?.unitFilter;
            resourceInputs["unitKind"] = state?.unitKind;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["updateUnitKindStrategy"] = state?.updateUnitKindStrategy;
        } else {
            const args = argsOrState as RolloutKindArgs | undefined;
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.rolloutKindId === undefined && !opts.urn) {
                throw new Error("Missing required property 'rolloutKindId'");
            }
            if (args?.unitKind === undefined && !opts.urn) {
                throw new Error("Missing required property 'unitKind'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["errorBudget"] = args?.errorBudget;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["project"] = args?.project;
            resourceInputs["rolloutKindId"] = args?.rolloutKindId;
            resourceInputs["rolloutOrchestrationStrategy"] = args?.rolloutOrchestrationStrategy;
            resourceInputs["unitFilter"] = args?.unitFilter;
            resourceInputs["unitKind"] = args?.unitKind;
            resourceInputs["updateUnitKindStrategy"] = args?.updateUnitKindStrategy;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RolloutKind.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RolloutKind resources.
 */
export interface RolloutKindState {
    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The timestamp when the resource was created.
     */
    createTime?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The configuration for error budget. If the number of failed units exceeds
     * max(allowed_count, allowedRatio * total_units), the rollout will be paused.
     * Structure is documented below.
     */
    errorBudget?: pulumi.Input<inputs.saasruntime.RolloutKindErrorBudget>;
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * "projects/{project}/locations/{location}/rolloutKinds/{rollout_kind_id}"
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID value for the new rollout kind.
     */
    rolloutKindId?: pulumi.Input<string>;
    /**
     * The strategy used for executing a Rollout. This is a required field.
     * There are two supported values strategies which are used to control a rollout.
     * - "Google.Cloud.Simple.AllAtOnce"
     * - "Google.Cloud.Simple.OneLocationAtATime"
     * A rollout with one of these simple strategies will rollout across
     * all locations defined in the associated UnitKind's Saas Locations.
     */
    rolloutOrchestrationStrategy?: pulumi.Input<string>;
    /**
     * The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     */
    uid?: pulumi.Input<string>;
    /**
     * CEL(https://github.com/google/cel-spec) formatted filter string against
     * Unit. The filter will be applied to determine the eligible unit population.
     * This filter can only reduce, but not expand the scope of the rollout.
     */
    unitFilter?: pulumi.Input<string>;
    /**
     * UnitKind that this rollout kind corresponds to. Rollouts stemming from this
     * rollout kind will target the units of this unit kind. In other words, this
     * defines the population of target units to be upgraded by rollouts.
     */
    unitKind?: pulumi.Input<string>;
    /**
     * The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The config for updating the unit kind. By default, the unit kind will be
     * updated on the rollout start.
     * Possible values:
     * UPDATE_UNIT_KIND_STRATEGY_ON_START
     * UPDATE_UNIT_KIND_STRATEGY_NEVER
     * Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
     */
    updateUnitKindStrategy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RolloutKind resource.
 */
export interface RolloutKindArgs {
    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The configuration for error budget. If the number of failed units exceeds
     * max(allowed_count, allowedRatio * total_units), the rollout will be paused.
     * Structure is documented below.
     */
    errorBudget?: pulumi.Input<inputs.saasruntime.RolloutKindErrorBudget>;
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The ID value for the new rollout kind.
     */
    rolloutKindId: pulumi.Input<string>;
    /**
     * The strategy used for executing a Rollout. This is a required field.
     * There are two supported values strategies which are used to control a rollout.
     * - "Google.Cloud.Simple.AllAtOnce"
     * - "Google.Cloud.Simple.OneLocationAtATime"
     * A rollout with one of these simple strategies will rollout across
     * all locations defined in the associated UnitKind's Saas Locations.
     */
    rolloutOrchestrationStrategy?: pulumi.Input<string>;
    /**
     * CEL(https://github.com/google/cel-spec) formatted filter string against
     * Unit. The filter will be applied to determine the eligible unit population.
     * This filter can only reduce, but not expand the scope of the rollout.
     */
    unitFilter?: pulumi.Input<string>;
    /**
     * UnitKind that this rollout kind corresponds to. Rollouts stemming from this
     * rollout kind will target the units of this unit kind. In other words, this
     * defines the population of target units to be upgraded by rollouts.
     */
    unitKind: pulumi.Input<string>;
    /**
     * The config for updating the unit kind. By default, the unit kind will be
     * updated on the rollout start.
     * Possible values:
     * UPDATE_UNIT_KIND_STRATEGY_ON_START
     * UPDATE_UNIT_KIND_STRATEGY_NEVER
     * Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
     */
    updateUnitKindStrategy?: pulumi.Input<string>;
}
