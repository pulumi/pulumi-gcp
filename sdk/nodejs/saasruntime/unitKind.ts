// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A UnitKind serves as a template or type definition for a group of Units. Units that belong to the same UnitKind are managed together, follow the same release model, and are typically updated together through rollouts.
 *
 * ## Example Usage
 *
 * ### Saas Runtime Unit Kind Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const exampleSaas = new gcp.saasruntime.SaaS("example_saas", {
 *     saasId: "example-saas",
 *     location: "global",
 *     locations: [{
 *         name: "us-central1",
 *     }],
 * });
 * const clusterUnitKind = new gcp.saasruntime.UnitKind("cluster_unit_kind", {
 *     location: "global",
 *     unitKindId: "cluster-unitkind",
 *     saas: exampleSaas.id,
 * });
 * const example = new gcp.saasruntime.UnitKind("example", {
 *     location: "global",
 *     unitKindId: "app-unitkind",
 *     saas: exampleSaas.id,
 *     dependencies: [{
 *         unitKind: clusterUnitKind.id,
 *         alias: "cluster",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * UnitKind can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/unitKinds/{{unit_kind_id}}`
 *
 * * `{{project}}/{{location}}/{{unit_kind_id}}`
 *
 * * `{{location}}/{{unit_kind_id}}`
 *
 * When using the `pulumi import` command, UnitKind can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:saasruntime/unitKind:UnitKind default projects/{{project}}/locations/{{location}}/unitKinds/{{unit_kind_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:saasruntime/unitKind:UnitKind default {{project}}/{{location}}/{{unit_kind_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:saasruntime/unitKind:UnitKind default {{location}}/{{unit_kind_id}}
 * ```
 */
export class UnitKind extends pulumi.CustomResource {
    /**
     * Get an existing UnitKind resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UnitKindState, opts?: pulumi.CustomResourceOptions): UnitKind {
        return new UnitKind(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:saasruntime/unitKind:UnitKind';

    /**
     * Returns true if the given object is an instance of UnitKind.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UnitKind {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UnitKind.__pulumiType;
    }

    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The timestamp when the resource was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * List of other unit kinds that this release will depend on. Dependencies
     * will be automatically provisioned if not found. Maximum 10.
     * Structure is documented below.
     */
    declare public readonly dependencies: pulumi.Output<outputs.saasruntime.UnitKindDependency[] | undefined>;
    declare public /*out*/ readonly effectiveAnnotations: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * An opaque value that uniquely identifies a version or
     * generation of a resource. It can be used to confirm that the client
     * and server agree on the ordering of a resource being written.
     */
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    /**
     * List of inputVariables for this release that will either be retrieved from
     * a dependency’s outputVariables, or will be passed on to a dependency’s
     * inputVariables. Maximum 100.
     * Structure is documented below.
     */
    declare public readonly inputVariableMappings: pulumi.Output<outputs.saasruntime.UnitKindInputVariableMapping[] | undefined>;
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * "projects/{project}/locations/{location}/unitKinds/{unitKind}"
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * List of outputVariables for this unit kind will be passed to this unit's
     * outputVariables. Maximum 100.
     * Structure is documented below.
     */
    declare public readonly outputVariableMappings: pulumi.Output<outputs.saasruntime.UnitKindOutputVariableMapping[] | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * A reference to the Saas that defines the product (managed service) that
     * the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
     * common data model. Immutable once set.
     */
    declare public readonly saas: pulumi.Output<string>;
    /**
     * The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * The ID value for the new unit kind.
     */
    declare public readonly unitKindId: pulumi.Output<string>;
    /**
     * The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a UnitKind resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UnitKindArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UnitKindArgs | UnitKindState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UnitKindState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["dependencies"] = state?.dependencies;
            resourceInputs["effectiveAnnotations"] = state?.effectiveAnnotations;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["inputVariableMappings"] = state?.inputVariableMappings;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["outputVariableMappings"] = state?.outputVariableMappings;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["saas"] = state?.saas;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["unitKindId"] = state?.unitKindId;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as UnitKindArgs | undefined;
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.saas === undefined && !opts.urn) {
                throw new Error("Missing required property 'saas'");
            }
            if (args?.unitKindId === undefined && !opts.urn) {
                throw new Error("Missing required property 'unitKindId'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["dependencies"] = args?.dependencies;
            resourceInputs["inputVariableMappings"] = args?.inputVariableMappings;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["outputVariableMappings"] = args?.outputVariableMappings;
            resourceInputs["project"] = args?.project;
            resourceInputs["saas"] = args?.saas;
            resourceInputs["unitKindId"] = args?.unitKindId;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(UnitKind.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UnitKind resources.
 */
export interface UnitKindState {
    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The timestamp when the resource was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * List of other unit kinds that this release will depend on. Dependencies
     * will be automatically provisioned if not found. Maximum 10.
     * Structure is documented below.
     */
    dependencies?: pulumi.Input<pulumi.Input<inputs.saasruntime.UnitKindDependency>[]>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An opaque value that uniquely identifies a version or
     * generation of a resource. It can be used to confirm that the client
     * and server agree on the ordering of a resource being written.
     */
    etag?: pulumi.Input<string>;
    /**
     * List of inputVariables for this release that will either be retrieved from
     * a dependency’s outputVariables, or will be passed on to a dependency’s
     * inputVariables. Maximum 100.
     * Structure is documented below.
     */
    inputVariableMappings?: pulumi.Input<pulumi.Input<inputs.saasruntime.UnitKindInputVariableMapping>[]>;
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * "projects/{project}/locations/{location}/unitKinds/{unitKind}"
     */
    name?: pulumi.Input<string>;
    /**
     * List of outputVariables for this unit kind will be passed to this unit's
     * outputVariables. Maximum 100.
     * Structure is documented below.
     */
    outputVariableMappings?: pulumi.Input<pulumi.Input<inputs.saasruntime.UnitKindOutputVariableMapping>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A reference to the Saas that defines the product (managed service) that
     * the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
     * common data model. Immutable once set.
     */
    saas?: pulumi.Input<string>;
    /**
     * The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     */
    uid?: pulumi.Input<string>;
    /**
     * The ID value for the new unit kind.
     */
    unitKindId?: pulumi.Input<string>;
    /**
     * The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UnitKind resource.
 */
export interface UnitKindArgs {
    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of other unit kinds that this release will depend on. Dependencies
     * will be automatically provisioned if not found. Maximum 10.
     * Structure is documented below.
     */
    dependencies?: pulumi.Input<pulumi.Input<inputs.saasruntime.UnitKindDependency>[]>;
    /**
     * List of inputVariables for this release that will either be retrieved from
     * a dependency’s outputVariables, or will be passed on to a dependency’s
     * inputVariables. Maximum 100.
     * Structure is documented below.
     */
    inputVariableMappings?: pulumi.Input<pulumi.Input<inputs.saasruntime.UnitKindInputVariableMapping>[]>;
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location: pulumi.Input<string>;
    /**
     * List of outputVariables for this unit kind will be passed to this unit's
     * outputVariables. Maximum 100.
     * Structure is documented below.
     */
    outputVariableMappings?: pulumi.Input<pulumi.Input<inputs.saasruntime.UnitKindOutputVariableMapping>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * A reference to the Saas that defines the product (managed service) that
     * the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
     * common data model. Immutable once set.
     */
    saas: pulumi.Input<string>;
    /**
     * The ID value for the new unit kind.
     */
    unitKindId: pulumi.Input<string>;
}
