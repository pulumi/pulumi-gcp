// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The Tenant resource represents the service producer's view of a service instance created for a consumer. It enables the association between the service producer's managed resources and the end consumer.
 *
 * ## Example Usage
 *
 * ### Saas Runtime Tenant Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const exampleSaas = new gcp.saasruntime.SaaS("example_saas", {
 *     saasId: "example-saas",
 *     location: "global",
 *     locations: [{
 *         name: "us-central1",
 *     }],
 * });
 * const example = new gcp.saasruntime.Tenant("example", {
 *     location: "global",
 *     tenantId: "example-tenant",
 *     saas: exampleSaas.id,
 *     consumerResource: "//compute.googleapis.com/projects/example-project/zones/us-central1-a/instances/example-instance",
 * });
 * ```
 *
 * ## Import
 *
 * Tenant can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/tenants/{{tenant_id}}`
 *
 * * `{{project}}/{{location}}/{{tenant_id}}`
 *
 * * `{{location}}/{{tenant_id}}`
 *
 * When using the `pulumi import` command, Tenant can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:saasruntime/tenant:Tenant default projects/{{project}}/locations/{{location}}/tenants/{{tenant_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:saasruntime/tenant:Tenant default {{project}}/{{location}}/{{tenant_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:saasruntime/tenant:Tenant default {{location}}/{{tenant_id}}
 * ```
 */
export class Tenant extends pulumi.CustomResource {
    /**
     * Get an existing Tenant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TenantState, opts?: pulumi.CustomResourceOptions): Tenant {
        return new Tenant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:saasruntime/tenant:Tenant';

    /**
     * Returns true if the given object is an instance of Tenant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tenant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tenant.__pulumiType;
    }

    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A reference to the consumer resource this SaaS Tenant is representing.
     * The relationship with a consumer resource can be used by SaaS Runtime for
     * retrieving consumer-defined settings and policies such as maintenance
     * policies (using Unified Maintenance Policy API).
     */
    declare public readonly consumerResource: pulumi.Output<string | undefined>;
    /**
     * The timestamp when the resource was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    declare public /*out*/ readonly effectiveAnnotations: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * "projects/{project}/locations/{location}/tenants/{tenant}"
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * A reference to the Saas that defines the product (managed service) that
     * the producer wants to manage with SaaS Runtime. Part of the
     * SaaS Runtime common data model.
     */
    declare public readonly saas: pulumi.Output<string>;
    /**
     * The ID value for the new tenant.
     */
    declare public readonly tenantId: pulumi.Output<string>;
    /**
     * The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a Tenant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TenantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TenantArgs | TenantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TenantState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["consumerResource"] = state?.consumerResource;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["effectiveAnnotations"] = state?.effectiveAnnotations;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["saas"] = state?.saas;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as TenantArgs | undefined;
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.saas === undefined && !opts.urn) {
                throw new Error("Missing required property 'saas'");
            }
            if (args?.tenantId === undefined && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["consumerResource"] = args?.consumerResource;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["project"] = args?.project;
            resourceInputs["saas"] = args?.saas;
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Tenant.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Tenant resources.
 */
export interface TenantState {
    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A reference to the consumer resource this SaaS Tenant is representing.
     * The relationship with a consumer resource can be used by SaaS Runtime for
     * retrieving consumer-defined settings and policies such as maintenance
     * policies (using Unified Maintenance Policy API).
     */
    consumerResource?: pulumi.Input<string>;
    /**
     * The timestamp when the resource was created.
     */
    createTime?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * "projects/{project}/locations/{location}/tenants/{tenant}"
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A reference to the Saas that defines the product (managed service) that
     * the producer wants to manage with SaaS Runtime. Part of the
     * SaaS Runtime common data model.
     */
    saas?: pulumi.Input<string>;
    /**
     * The ID value for the new tenant.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     */
    uid?: pulumi.Input<string>;
    /**
     * The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Tenant resource.
 */
export interface TenantArgs {
    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A reference to the consumer resource this SaaS Tenant is representing.
     * The relationship with a consumer resource can be used by SaaS Runtime for
     * retrieving consumer-defined settings and policies such as maintenance
     * policies (using Unified Maintenance Policy API).
     */
    consumerResource?: pulumi.Input<string>;
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * A reference to the Saas that defines the product (managed service) that
     * the producer wants to manage with SaaS Runtime. Part of the
     * SaaS Runtime common data model.
     */
    saas: pulumi.Input<string>;
    /**
     * The ID value for the new tenant.
     */
    tenantId: pulumi.Input<string>;
}
