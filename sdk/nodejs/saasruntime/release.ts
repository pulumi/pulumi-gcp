// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A version to be propagated and deployed to Units. It points to a specific version of a Blueprint that can be applied to Units, for example, via a Rollout.
 *
 * ## Example Usage
 *
 * ### Saas Runtime Release Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const exampleSaas = new gcp.saasruntime.SaaS("example_saas", {
 *     saasId: "example-saas",
 *     location: "global",
 *     locations: [{
 *         name: "us-central1",
 *     }],
 * });
 * const exampleUnitkind = new gcp.saasruntime.UnitKind("example_unitkind", {
 *     location: "global",
 *     unitKindId: "example-unitkind",
 *     saas: exampleSaas.id,
 * });
 * const examplePrevious = new gcp.saasruntime.Release("example_previous", {
 *     location: "global",
 *     releaseId: "previous-release",
 *     unitKind: exampleUnitkind.id,
 *     blueprint: {
 *         "package": "us-central1-docker.pkg.dev/ci-test-project-188019/test-repo/tf-test-easysaas-alpha-image@sha256:7992fdbaeaf998ecd31a7f937bb26e38a781ecf49b24857a6176c1e9bfc299ee",
 *     },
 * });
 * const example = new gcp.saasruntime.Release("example", {
 *     location: "global",
 *     releaseId: "example-release",
 *     unitKind: exampleUnitkind.id,
 *     blueprint: {
 *         "package": "us-central1-docker.pkg.dev/ci-test-project-188019/test-repo/tf-test-easysaas-beta-image@sha256:7bba0fa85b2956df7768f7b32e715b6fe11f4f4193e2a70a35bf3f286a6cdf9e",
 *     },
 *     inputVariableDefaults: [{
 *         variable: "name",
 *         value: "test",
 *         type: "STRING",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Release can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/releases/{{release_id}}`
 *
 * * `{{project}}/{{location}}/{{release_id}}`
 *
 * * `{{location}}/{{release_id}}`
 *
 * When using the `pulumi import` command, Release can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:saasruntime/release:Release default projects/{{project}}/locations/{{location}}/releases/{{release_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:saasruntime/release:Release default {{project}}/{{location}}/{{release_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:saasruntime/release:Release default {{location}}/{{release_id}}
 * ```
 */
export class Release extends pulumi.CustomResource {
    /**
     * Get an existing Release resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReleaseState, opts?: pulumi.CustomResourceOptions): Release {
        return new Release(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:saasruntime/release:Release';

    /**
     * Returns true if the given object is an instance of Release.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Release {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Release.__pulumiType;
    }

    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly blueprint: pulumi.Output<outputs.saasruntime.ReleaseBlueprint | undefined>;
    /**
     * The timestamp when the resource was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    declare public /*out*/ readonly effectiveAnnotations: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * An opaque value that uniquely identifies a version or
     * generation of a resource. It can be used to confirm that the client
     * and server agree on the ordering of a resource being written.
     */
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    /**
     * Mapping of input variables to default values. Maximum 100
     * Structure is documented below.
     */
    declare public readonly inputVariableDefaults: pulumi.Output<outputs.saasruntime.ReleaseInputVariableDefault[] | undefined>;
    /**
     * List of input variables declared on the blueprint and can be present with
     * their values on the unit spec
     * Structure is documented below.
     */
    declare public /*out*/ readonly inputVariables: pulumi.Output<outputs.saasruntime.ReleaseInputVariable[]>;
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * "projects/{project}/locations/{location}/releases/{release}"
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * List of output variables declared on the blueprint and can be present with
     * their values on the unit status
     * Structure is documented below.
     */
    declare public /*out*/ readonly outputVariables: pulumi.Output<outputs.saasruntime.ReleaseOutputVariable[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The ID value for the new release.
     */
    declare public readonly releaseId: pulumi.Output<string>;
    /**
     * Set of requirements to be fulfilled on the Unit when using this Release.
     * Structure is documented below.
     */
    declare public readonly releaseRequirements: pulumi.Output<outputs.saasruntime.ReleaseReleaseRequirements | undefined>;
    /**
     * The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * Reference to the UnitKind this Release corresponds to (required and
     * immutable once created).
     */
    declare public readonly unitKind: pulumi.Output<string>;
    /**
     * The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a Release resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReleaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReleaseArgs | ReleaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReleaseState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["blueprint"] = state?.blueprint;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["effectiveAnnotations"] = state?.effectiveAnnotations;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["inputVariableDefaults"] = state?.inputVariableDefaults;
            resourceInputs["inputVariables"] = state?.inputVariables;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["outputVariables"] = state?.outputVariables;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["releaseId"] = state?.releaseId;
            resourceInputs["releaseRequirements"] = state?.releaseRequirements;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["unitKind"] = state?.unitKind;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as ReleaseArgs | undefined;
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.releaseId === undefined && !opts.urn) {
                throw new Error("Missing required property 'releaseId'");
            }
            if (args?.unitKind === undefined && !opts.urn) {
                throw new Error("Missing required property 'unitKind'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["blueprint"] = args?.blueprint;
            resourceInputs["inputVariableDefaults"] = args?.inputVariableDefaults;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["project"] = args?.project;
            resourceInputs["releaseId"] = args?.releaseId;
            resourceInputs["releaseRequirements"] = args?.releaseRequirements;
            resourceInputs["unitKind"] = args?.unitKind;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["inputVariables"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["outputVariables"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Release.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Release resources.
 */
export interface ReleaseState {
    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    blueprint?: pulumi.Input<inputs.saasruntime.ReleaseBlueprint>;
    /**
     * The timestamp when the resource was created.
     */
    createTime?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An opaque value that uniquely identifies a version or
     * generation of a resource. It can be used to confirm that the client
     * and server agree on the ordering of a resource being written.
     */
    etag?: pulumi.Input<string>;
    /**
     * Mapping of input variables to default values. Maximum 100
     * Structure is documented below.
     */
    inputVariableDefaults?: pulumi.Input<pulumi.Input<inputs.saasruntime.ReleaseInputVariableDefault>[]>;
    /**
     * List of input variables declared on the blueprint and can be present with
     * their values on the unit spec
     * Structure is documented below.
     */
    inputVariables?: pulumi.Input<pulumi.Input<inputs.saasruntime.ReleaseInputVariable>[]>;
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * "projects/{project}/locations/{location}/releases/{release}"
     */
    name?: pulumi.Input<string>;
    /**
     * List of output variables declared on the blueprint and can be present with
     * their values on the unit status
     * Structure is documented below.
     */
    outputVariables?: pulumi.Input<pulumi.Input<inputs.saasruntime.ReleaseOutputVariable>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID value for the new release.
     */
    releaseId?: pulumi.Input<string>;
    /**
     * Set of requirements to be fulfilled on the Unit when using this Release.
     * Structure is documented below.
     */
    releaseRequirements?: pulumi.Input<inputs.saasruntime.ReleaseReleaseRequirements>;
    /**
     * The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     */
    uid?: pulumi.Input<string>;
    /**
     * Reference to the UnitKind this Release corresponds to (required and
     * immutable once created).
     */
    unitKind?: pulumi.Input<string>;
    /**
     * The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Release resource.
 */
export interface ReleaseArgs {
    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    blueprint?: pulumi.Input<inputs.saasruntime.ReleaseBlueprint>;
    /**
     * Mapping of input variables to default values. Maximum 100
     * Structure is documented below.
     */
    inputVariableDefaults?: pulumi.Input<pulumi.Input<inputs.saasruntime.ReleaseInputVariableDefault>[]>;
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The ID value for the new release.
     */
    releaseId: pulumi.Input<string>;
    /**
     * Set of requirements to be fulfilled on the Unit when using this Release.
     * Structure is documented below.
     */
    releaseRequirements?: pulumi.Input<inputs.saasruntime.ReleaseReleaseRequirements>;
    /**
     * Reference to the UnitKind this Release corresponds to (required and
     * immutable once created).
     */
    unitKind: pulumi.Input<string>;
}
