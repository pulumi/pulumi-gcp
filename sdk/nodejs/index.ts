// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export * from "./utils";

// Export sub-modules:
import * as accessapproval from "./accessapproval";
import * as accesscontextmanager from "./accesscontextmanager";
import * as activedirectory from "./activedirectory";
import * as alloydb from "./alloydb";
import * as apigateway from "./apigateway";
import * as apigee from "./apigee";
import * as appengine from "./appengine";
import * as apphub from "./apphub";
import * as applicationintegration from "./applicationintegration";
import * as artifactregistry from "./artifactregistry";
import * as assuredworkloads from "./assuredworkloads";
import * as backupdisasterrecovery from "./backupdisasterrecovery";
import * as beyondcorp from "./beyondcorp";
import * as biglake from "./biglake";
import * as bigquery from "./bigquery";
import * as bigqueryanalyticshub from "./bigqueryanalyticshub";
import * as bigquerydatapolicy from "./bigquerydatapolicy";
import * as bigtable from "./bigtable";
import * as billing from "./billing";
import * as binaryauthorization from "./binaryauthorization";
import * as blockchainnodeengine from "./blockchainnodeengine";
import * as certificateauthority from "./certificateauthority";
import * as certificatemanager from "./certificatemanager";
import * as cloudasset from "./cloudasset";
import * as cloudbuild from "./cloudbuild";
import * as cloudbuildv2 from "./cloudbuildv2";
import * as clouddeploy from "./clouddeploy";
import * as clouddomains from "./clouddomains";
import * as cloudfunctions from "./cloudfunctions";
import * as cloudfunctionsv2 from "./cloudfunctionsv2";
import * as cloudidentity from "./cloudidentity";
import * as cloudids from "./cloudids";
import * as cloudquota from "./cloudquota";
import * as cloudrun from "./cloudrun";
import * as cloudrunv2 from "./cloudrunv2";
import * as cloudscheduler from "./cloudscheduler";
import * as cloudtasks from "./cloudtasks";
import * as composer from "./composer";
import * as compute from "./compute";
import * as config from "./config";
import * as container from "./container";
import * as containeranalysis from "./containeranalysis";
import * as databasemigrationservice from "./databasemigrationservice";
import * as datacatalog from "./datacatalog";
import * as dataflow from "./dataflow";
import * as dataform from "./dataform";
import * as datafusion from "./datafusion";
import * as dataloss from "./dataloss";
import * as dataplex from "./dataplex";
import * as dataproc from "./dataproc";
import * as datastream from "./datastream";
import * as deploymentmanager from "./deploymentmanager";
import * as developerconnect from "./developerconnect";
import * as diagflow from "./diagflow";
import * as discoveryengine from "./discoveryengine";
import * as dns from "./dns";
import * as edgecontainer from "./edgecontainer";
import * as edgenetwork from "./edgenetwork";
import * as endpoints from "./endpoints";
import * as essentialcontacts from "./essentialcontacts";
import * as eventarc from "./eventarc";
import * as filestore from "./filestore";
import * as firebase from "./firebase";
import * as firebaserules from "./firebaserules";
import * as firestore from "./firestore";
import * as folder from "./folder";
import * as gkebackup from "./gkebackup";
import * as gkehub from "./gkehub";
import * as gkeonprem from "./gkeonprem";
import * as healthcare from "./healthcare";
import * as iam from "./iam";
import * as iap from "./iap";
import * as identityplatform from "./identityplatform";
import * as integrationconnectors from "./integrationconnectors";
import * as kms from "./kms";
import * as logging from "./logging";
import * as looker from "./looker";
import * as managedkafka from "./managedkafka";
import * as memcache from "./memcache";
import * as memorystore from "./memorystore";
import * as migrationcenter from "./migrationcenter";
import * as ml from "./ml";
import * as monitoring from "./monitoring";
import * as netapp from "./netapp";
import * as networkconnectivity from "./networkconnectivity";
import * as networkmanagement from "./networkmanagement";
import * as networksecurity from "./networksecurity";
import * as networkservices from "./networkservices";
import * as notebooks from "./notebooks";
import * as organizations from "./organizations";
import * as orgpolicy from "./orgpolicy";
import * as osconfig from "./osconfig";
import * as oslogin from "./oslogin";
import * as parallelstore from "./parallelstore";
import * as privilegedaccessmanager from "./privilegedaccessmanager";
import * as projects from "./projects";
import * as pubsub from "./pubsub";
import * as recaptcha from "./recaptcha";
import * as redis from "./redis";
import * as resourcemanager from "./resourcemanager";
import * as runtimeconfig from "./runtimeconfig";
import * as secretmanager from "./secretmanager";
import * as securesourcemanager from "./securesourcemanager";
import * as securitycenter from "./securitycenter";
import * as securityposture from "./securityposture";
import * as serviceaccount from "./serviceaccount";
import * as servicedirectory from "./servicedirectory";
import * as servicenetworking from "./servicenetworking";
import * as serviceusage from "./serviceusage";
import * as siteverification from "./siteverification";
import * as sourcerepo from "./sourcerepo";
import * as spanner from "./spanner";
import * as sql from "./sql";
import * as storage from "./storage";
import * as tags from "./tags";
import * as tpu from "./tpu";
import * as types from "./types";
import * as vertex from "./vertex";
import * as vmwareengine from "./vmwareengine";
import * as vpcaccess from "./vpcaccess";
import * as workbench from "./workbench";
import * as workflows from "./workflows";
import * as workstations from "./workstations";

export {
    accessapproval,
    accesscontextmanager,
    activedirectory,
    alloydb,
    apigateway,
    apigee,
    appengine,
    apphub,
    applicationintegration,
    artifactregistry,
    assuredworkloads,
    backupdisasterrecovery,
    beyondcorp,
    biglake,
    bigquery,
    bigqueryanalyticshub,
    bigquerydatapolicy,
    bigtable,
    billing,
    binaryauthorization,
    blockchainnodeengine,
    certificateauthority,
    certificatemanager,
    cloudasset,
    cloudbuild,
    cloudbuildv2,
    clouddeploy,
    clouddomains,
    cloudfunctions,
    cloudfunctionsv2,
    cloudidentity,
    cloudids,
    cloudquota,
    cloudrun,
    cloudrunv2,
    cloudscheduler,
    cloudtasks,
    composer,
    compute,
    config,
    container,
    containeranalysis,
    databasemigrationservice,
    datacatalog,
    dataflow,
    dataform,
    datafusion,
    dataloss,
    dataplex,
    dataproc,
    datastream,
    deploymentmanager,
    developerconnect,
    diagflow,
    discoveryengine,
    dns,
    edgecontainer,
    edgenetwork,
    endpoints,
    essentialcontacts,
    eventarc,
    filestore,
    firebase,
    firebaserules,
    firestore,
    folder,
    gkebackup,
    gkehub,
    gkeonprem,
    healthcare,
    iam,
    iap,
    identityplatform,
    integrationconnectors,
    kms,
    logging,
    looker,
    managedkafka,
    memcache,
    memorystore,
    migrationcenter,
    ml,
    monitoring,
    netapp,
    networkconnectivity,
    networkmanagement,
    networksecurity,
    networkservices,
    notebooks,
    organizations,
    orgpolicy,
    osconfig,
    oslogin,
    parallelstore,
    privilegedaccessmanager,
    projects,
    pubsub,
    recaptcha,
    redis,
    resourcemanager,
    runtimeconfig,
    secretmanager,
    securesourcemanager,
    securitycenter,
    securityposture,
    serviceaccount,
    servicedirectory,
    servicenetworking,
    serviceusage,
    siteverification,
    sourcerepo,
    spanner,
    sql,
    storage,
    tags,
    tpu,
    types,
    vertex,
    vmwareengine,
    vpcaccess,
    workbench,
    workflows,
    workstations,
};
pulumi.runtime.registerResourcePackage("gcp", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:gcp") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
