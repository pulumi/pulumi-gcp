// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Parallelstore Instance Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network = new gcp.compute.Network("network", {
 *     name: "network",
 *     autoCreateSubnetworks: true,
 *     mtu: 8896,
 * });
 * // Create an IP address
 * const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
 *     name: "address",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 24,
 *     network: network.id,
 * });
 * // Create a private connection
 * const _default = new gcp.servicenetworking.Connection("default", {
 *     network: network.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [privateIpAlloc.name],
 * });
 * const instance = new gcp.parallelstore.Instance("instance", {
 *     instanceId: "instance",
 *     location: "us-central1-a",
 *     description: "test instance",
 *     capacityGib: "12000",
 *     network: network.name,
 *     labels: {
 *         test: "value",
 *     },
 * }, {
 *     dependsOn: [_default],
 * });
 * ```
 *
 * ## Import
 *
 * Instance can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/instances/{{instance_id}}`
 *
 * * `{{project}}/{{location}}/{{instance_id}}`
 *
 * * `{{location}}/{{instance_id}}`
 *
 * When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:parallelstore/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{instance_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:parallelstore/instance:Instance default {{project}}/{{location}}/{{instance_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:parallelstore/instance:Instance default {{location}}/{{instance_id}}
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:parallelstore/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * List of access_points.
     * Contains a list of IPv4 addresses used for client side configuration.
     */
    public /*out*/ readonly accessPoints!: pulumi.Output<string[]>;
    /**
     * Immutable. Storage capacity of Parallelstore instance in Gibibytes (GiB).
     */
    public readonly capacityGib!: pulumi.Output<string>;
    /**
     * The time when the instance was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The version of DAOS software running in the instance
     */
    public /*out*/ readonly daosVersion!: pulumi.Output<string>;
    /**
     * The description of the instance. 2048 characters or less.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Immutable. Contains the id of the allocated IP address range associated with the
     * private service access connection for example, "test-default" associated
     * with IP range 10.0.0.0/29. This field is populated by the service and
     * and contains the value currently used by the service.
     */
    public /*out*/ readonly effectiveReservedIpRange!: pulumi.Output<string>;
    /**
     * The logical name of the Parallelstore instance in the user project with the following restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the customer project/ location
     *
     *
     * - - -
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Cloud Labels are a flexible and lightweight mechanism for organizing cloud
     * resources into groups that reflect a customer's organizational needs and
     * deployment strategies. Cloud Labels can be used to filter collections of
     * resources. They can be used to control how resource metrics are aggregated.
     * And they can be used as arguments to policy management rules (e.g. route,
     * firewall, load balancing, etc.).
     * * Label keys must be between 1 and 63 characters long and must conform to
     * the following regular expression: `a-z{0,62}`.
     * * Label values must be between 0 and 63 characters long and must conform
     * to the regular expression `[a-z0-9_-]{0,63}`.
     * * No more than 64 labels can be associated with a given resource.
     * See https://goo.gl/xmQnxf for more information on and examples of labels.
     * If you plan to use labels in your own code, please note that additional
     * characters may be allowed in the future. Therefore, you are advised to use
     * an internal label representation, such as JSON, which doesn't rely upon
     * specific characters being disallowed.  For example, representing labels
     * as the string:  name + "_" + value  would prove problematic if we were to
     * allow "_" in a future release.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Part of `parent`. See documentation of `projectsId`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the instance, in the format
     * `projects/{project}/locations/{location}/instances/{instance_id}`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Immutable. The name of the Google Compute Engine
     * [VPC network](https://cloud.google.com/vpc/docs/vpc) to which the
     * instance is connected.
     */
    public readonly network!: pulumi.Output<string | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Immutable. Contains the id of the allocated IP address range associated with the
     * private service access connection for example, "test-default" associated
     * with IP range 10.0.0.0/29. If no range id is provided all ranges will be
     * considered.
     */
    public readonly reservedIpRange!: pulumi.Output<string | undefined>;
    /**
     * The instance state.
     * Possible values:
     * STATE_UNSPECIFIED
     * CREATING
     * ACTIVE
     * DELETING
     * FAILED
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The time when the instance was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["accessPoints"] = state ? state.accessPoints : undefined;
            resourceInputs["capacityGib"] = state ? state.capacityGib : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["daosVersion"] = state ? state.daosVersion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["effectiveReservedIpRange"] = state ? state.effectiveReservedIpRange : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["reservedIpRange"] = state ? state.reservedIpRange : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.capacityGib === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacityGib'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["capacityGib"] = args ? args.capacityGib : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["reservedIpRange"] = args ? args.reservedIpRange : undefined;
            resourceInputs["accessPoints"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["daosVersion"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["effectiveReservedIpRange"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts, false /*remote*/);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * List of access_points.
     * Contains a list of IPv4 addresses used for client side configuration.
     */
    accessPoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Immutable. Storage capacity of Parallelstore instance in Gibibytes (GiB).
     */
    capacityGib?: pulumi.Input<string>;
    /**
     * The time when the instance was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The version of DAOS software running in the instance
     */
    daosVersion?: pulumi.Input<string>;
    /**
     * The description of the instance. 2048 characters or less.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Immutable. Contains the id of the allocated IP address range associated with the
     * private service access connection for example, "test-default" associated
     * with IP range 10.0.0.0/29. This field is populated by the service and
     * and contains the value currently used by the service.
     */
    effectiveReservedIpRange?: pulumi.Input<string>;
    /**
     * The logical name of the Parallelstore instance in the user project with the following restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the customer project/ location
     *
     *
     * - - -
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Cloud Labels are a flexible and lightweight mechanism for organizing cloud
     * resources into groups that reflect a customer's organizational needs and
     * deployment strategies. Cloud Labels can be used to filter collections of
     * resources. They can be used to control how resource metrics are aggregated.
     * And they can be used as arguments to policy management rules (e.g. route,
     * firewall, load balancing, etc.).
     * * Label keys must be between 1 and 63 characters long and must conform to
     * the following regular expression: `a-z{0,62}`.
     * * Label values must be between 0 and 63 characters long and must conform
     * to the regular expression `[a-z0-9_-]{0,63}`.
     * * No more than 64 labels can be associated with a given resource.
     * See https://goo.gl/xmQnxf for more information on and examples of labels.
     * If you plan to use labels in your own code, please note that additional
     * characters may be allowed in the future. Therefore, you are advised to use
     * an internal label representation, such as JSON, which doesn't rely upon
     * specific characters being disallowed.  For example, representing labels
     * as the string:  name + "_" + value  would prove problematic if we were to
     * allow "_" in a future release.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Part of `parent`. See documentation of `projectsId`.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the instance, in the format
     * `projects/{project}/locations/{location}/instances/{instance_id}`
     */
    name?: pulumi.Input<string>;
    /**
     * Immutable. The name of the Google Compute Engine
     * [VPC network](https://cloud.google.com/vpc/docs/vpc) to which the
     * instance is connected.
     */
    network?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Immutable. Contains the id of the allocated IP address range associated with the
     * private service access connection for example, "test-default" associated
     * with IP range 10.0.0.0/29. If no range id is provided all ranges will be
     * considered.
     */
    reservedIpRange?: pulumi.Input<string>;
    /**
     * The instance state.
     * Possible values:
     * STATE_UNSPECIFIED
     * CREATING
     * ACTIVE
     * DELETING
     * FAILED
     */
    state?: pulumi.Input<string>;
    /**
     * The time when the instance was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * Immutable. Storage capacity of Parallelstore instance in Gibibytes (GiB).
     */
    capacityGib: pulumi.Input<string>;
    /**
     * The description of the instance. 2048 characters or less.
     */
    description?: pulumi.Input<string>;
    /**
     * The logical name of the Parallelstore instance in the user project with the following restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the customer project/ location
     *
     *
     * - - -
     */
    instanceId: pulumi.Input<string>;
    /**
     * Cloud Labels are a flexible and lightweight mechanism for organizing cloud
     * resources into groups that reflect a customer's organizational needs and
     * deployment strategies. Cloud Labels can be used to filter collections of
     * resources. They can be used to control how resource metrics are aggregated.
     * And they can be used as arguments to policy management rules (e.g. route,
     * firewall, load balancing, etc.).
     * * Label keys must be between 1 and 63 characters long and must conform to
     * the following regular expression: `a-z{0,62}`.
     * * Label values must be between 0 and 63 characters long and must conform
     * to the regular expression `[a-z0-9_-]{0,63}`.
     * * No more than 64 labels can be associated with a given resource.
     * See https://goo.gl/xmQnxf for more information on and examples of labels.
     * If you plan to use labels in your own code, please note that additional
     * characters may be allowed in the future. Therefore, you are advised to use
     * an internal label representation, such as JSON, which doesn't rely upon
     * specific characters being disallowed.  For example, representing labels
     * as the string:  name + "_" + value  would prove problematic if we were to
     * allow "_" in a future release.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Part of `parent`. See documentation of `projectsId`.
     */
    location: pulumi.Input<string>;
    /**
     * Immutable. The name of the Google Compute Engine
     * [VPC network](https://cloud.google.com/vpc/docs/vpc) to which the
     * instance is connected.
     */
    network?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Immutable. Contains the id of the allocated IP address range associated with the
     * private service access connection for example, "test-default" associated
     * with IP range 10.0.0.0/29. If no range id is provided all ranges will be
     * considered.
     */
    reservedIpRange?: pulumi.Input<string>;
}
