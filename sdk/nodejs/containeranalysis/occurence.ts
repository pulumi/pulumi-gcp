// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * An occurrence is an instance of a Note, or type of analysis that
 * can be done for a resource.
 *
 * To get more information about Occurrence, see:
 *
 * * [API documentation](https://cloud.google.com/container-analysis/api/reference/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/container-analysis/)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Occurrence can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:containeranalysis/occurence:Occurence default projects/{{project}}/occurrences/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:containeranalysis/occurence:Occurence default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:containeranalysis/occurence:Occurence default {{name}}
 * ```
 */
export class Occurence extends pulumi.CustomResource {
    /**
     * Get an existing Occurence resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OccurenceState, opts?: pulumi.CustomResourceOptions): Occurence {
        return new Occurence(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:containeranalysis/occurence:Occurence';

    /**
     * Returns true if the given object is an instance of Occurence.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Occurence {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Occurence.__pulumiType;
    }

    /**
     * Occurrence that represents a single "attestation". The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     */
    public readonly attestation!: pulumi.Output<outputs.containeranalysis.OccurenceAttestation>;
    /**
     * The time when the repository was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
     * in list requests.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * The name of the occurrence.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     */
    public readonly noteName!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * A description of actions that can be taken to remedy the note.
     */
    public readonly remediation!: pulumi.Output<string | undefined>;
    /**
     * Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     */
    public readonly resourceUri!: pulumi.Output<string>;
    /**
     * The time when the repository was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Occurence resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OccurenceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OccurenceArgs | OccurenceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OccurenceState | undefined;
            inputs["attestation"] = state ? state.attestation : undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["kind"] = state ? state.kind : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["noteName"] = state ? state.noteName : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["remediation"] = state ? state.remediation : undefined;
            inputs["resourceUri"] = state ? state.resourceUri : undefined;
            inputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as OccurenceArgs | undefined;
            if ((!args || args.attestation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attestation'");
            }
            if ((!args || args.noteName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'noteName'");
            }
            if ((!args || args.resourceUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceUri'");
            }
            inputs["attestation"] = args ? args.attestation : undefined;
            inputs["noteName"] = args ? args.noteName : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["remediation"] = args ? args.remediation : undefined;
            inputs["resourceUri"] = args ? args.resourceUri : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Occurence.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Occurence resources.
 */
export interface OccurenceState {
    /**
     * Occurrence that represents a single "attestation". The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     */
    attestation?: pulumi.Input<inputs.containeranalysis.OccurenceAttestation>;
    /**
     * The time when the repository was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
     * in list requests.
     */
    kind?: pulumi.Input<string>;
    /**
     * The name of the occurrence.
     */
    name?: pulumi.Input<string>;
    /**
     * The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     */
    noteName?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * A description of actions that can be taken to remedy the note.
     */
    remediation?: pulumi.Input<string>;
    /**
     * Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     */
    resourceUri?: pulumi.Input<string>;
    /**
     * The time when the repository was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Occurence resource.
 */
export interface OccurenceArgs {
    /**
     * Occurrence that represents a single "attestation". The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     */
    attestation: pulumi.Input<inputs.containeranalysis.OccurenceAttestation>;
    /**
     * The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     */
    noteName: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * A description of actions that can be taken to remedy the note.
     */
    remediation?: pulumi.Input<string>;
    /**
     * Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     */
    resourceUri: pulumi.Input<string>;
}
