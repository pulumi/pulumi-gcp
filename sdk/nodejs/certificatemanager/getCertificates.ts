// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * List all certificates within Google Certificate Manager for a given project, region or filter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = gcp.certificatemanager.getCertificates({});
 * export const certificatesNames = _default.then(_default => .map(cert => (cert.name)));
 * ```
 *
 * ### With A Filter
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = gcp.certificatemanager.getCertificates({
 *     filter: "name:projects/PROJECT_ID/locations/REGION/certificates/certificate-name-*",
 * });
 * export const certificatesNames = _default.then(_default => .map(cert => (cert.name)));
 * ```
 *
 * ### Regional Certificates With A Filter
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = gcp.certificatemanager.getCertificates({
 *     region: "REGION",
 *     filter: "name:projects/PROJECT_ID/locations/REGION/certificates/certificate-name-*",
 * });
 * export const certificatesNames = _default.then(_default => .map(cert => (cert.name)));
 * ```
 */
export function getCertificates(args?: GetCertificatesArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificatesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:certificatemanager/getCertificates:getCertificates", {
        "filter": args.filter,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getCertificates.
 */
export interface GetCertificatesArgs {
    /**
     * Filter expression to restrict the certificates returned.
     */
    filter?: string;
    /**
     * The region in which the resource belongs. If it is not provided, `GLOBAL` is used.
     */
    region?: string;
}

/**
 * A collection of values returned by getCertificates.
 */
export interface GetCertificatesResult {
    /**
     * A list of all retrieved certificates. See gcp.certificatemanager.Certificate resource for details of the available attributes.
     */
    readonly certificates: outputs.certificatemanager.GetCertificatesCertificate[];
    readonly filter?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly region?: string;
}
/**
 * List all certificates within Google Certificate Manager for a given project, region or filter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = gcp.certificatemanager.getCertificates({});
 * export const certificatesNames = _default.then(_default => .map(cert => (cert.name)));
 * ```
 *
 * ### With A Filter
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = gcp.certificatemanager.getCertificates({
 *     filter: "name:projects/PROJECT_ID/locations/REGION/certificates/certificate-name-*",
 * });
 * export const certificatesNames = _default.then(_default => .map(cert => (cert.name)));
 * ```
 *
 * ### Regional Certificates With A Filter
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = gcp.certificatemanager.getCertificates({
 *     region: "REGION",
 *     filter: "name:projects/PROJECT_ID/locations/REGION/certificates/certificate-name-*",
 * });
 * export const certificatesNames = _default.then(_default => .map(cert => (cert.name)));
 * ```
 */
export function getCertificatesOutput(args?: GetCertificatesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCertificatesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:certificatemanager/getCertificates:getCertificates", {
        "filter": args.filter,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getCertificates.
 */
export interface GetCertificatesOutputArgs {
    /**
     * Filter expression to restrict the certificates returned.
     */
    filter?: pulumi.Input<string>;
    /**
     * The region in which the resource belongs. If it is not provided, `GLOBAL` is used.
     */
    region?: pulumi.Input<string>;
}
