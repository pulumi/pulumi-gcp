// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * CertificateMapEntry is a list of certificate configurations,
 * that have been issued for a particular hostname
 *
 * ## Example Usage
 *
 * ### Certificate Manager Certificate Map Entry Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const certificateMap = new gcp.certificatemanager.CertificateMap("certificate_map", {
 *     name: "cert-map-entry",
 *     description: "My acceptance test certificate map",
 *     labels: {
 *         terraform: "true",
 *         "acc-test": "true",
 *     },
 * });
 * const instance = new gcp.certificatemanager.DnsAuthorization("instance", {
 *     name: "dns-auth",
 *     description: "The default dnss",
 *     domain: "subdomain.hashicorptest.com",
 * });
 * const instance2 = new gcp.certificatemanager.DnsAuthorization("instance2", {
 *     name: "dns-auth2",
 *     description: "The default dnss",
 *     domain: "subdomain2.hashicorptest.com",
 * });
 * const certificate = new gcp.certificatemanager.Certificate("certificate", {
 *     name: "cert-map-entry",
 *     description: "The default cert",
 *     scope: "DEFAULT",
 *     managed: {
 *         domains: [
 *             instance.domain,
 *             instance2.domain,
 *         ],
 *         dnsAuthorizations: [
 *             instance.id,
 *             instance2.id,
 *         ],
 *     },
 * });
 * const _default = new gcp.certificatemanager.CertificateMapEntry("default", {
 *     name: "cert-map-entry",
 *     description: "My acceptance test certificate map entry",
 *     map: certificateMap.name,
 *     labels: {
 *         terraform: "true",
 *         "acc-test": "true",
 *     },
 *     certificates: [certificate.id],
 *     matcher: "PRIMARY",
 * });
 * ```
 *
 * ## Import
 *
 * CertificateMapEntry can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/global/certificateMaps/{{map}}/certificateMapEntries/{{name}}`
 *
 * * `{{project}}/{{map}}/{{name}}`
 *
 * * `{{map}}/{{name}}`
 *
 * When using the `pulumi import` command, CertificateMapEntry can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:certificatemanager/certificateMapEntry:CertificateMapEntry default projects/{{project}}/locations/global/certificateMaps/{{map}}/certificateMapEntries/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:certificatemanager/certificateMapEntry:CertificateMapEntry default {{project}}/{{map}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:certificatemanager/certificateMapEntry:CertificateMapEntry default {{map}}/{{name}}
 * ```
 */
export class CertificateMapEntry extends pulumi.CustomResource {
    /**
     * Get an existing CertificateMapEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateMapEntryState, opts?: pulumi.CustomResourceOptions): CertificateMapEntry {
        return new CertificateMapEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:certificatemanager/certificateMapEntry:CertificateMapEntry';

    /**
     * Returns true if the given object is an instance of CertificateMapEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateMapEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateMapEntry.__pulumiType;
    }

    /**
     * A set of Certificates defines for the given hostname.
     * There can be defined up to fifteen certificates in each Certificate Map Entry.
     * Each certificate must match pattern projects/*&#47;locations/*&#47;certificates/*.
     */
    declare public readonly certificates: pulumi.Output<string[]>;
    /**
     * Creation timestamp of a Certificate Map Entry. Timestamp in RFC3339 UTC "Zulu" format,
     * with nanosecond resolution and up to nine fractional digits.
     * Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * A human-readable description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * A Hostname (FQDN, e.g. example.com) or a wildcard hostname expression (*.example.com)
     * for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for
     * selecting a proper certificate.
     */
    declare public readonly hostname: pulumi.Output<string | undefined>;
    /**
     * Set of labels associated with a Certificate Map Entry.
     * An object containing a list of "key": value pairs.
     * Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map entry that is inputted into the certificate map
     */
    declare public readonly map: pulumi.Output<string>;
    /**
     * A predefined matcher for particular cases, other than SNI selection
     */
    declare public readonly matcher: pulumi.Output<string | undefined>;
    /**
     * A user-defined name of the Certificate Map Entry. Certificate Map Entry
     * names must be unique globally and match pattern
     * 'projects/*&#47;locations/*&#47;certificateMaps/*&#47;certificateMapEntries/*'
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * A serving state of this Certificate Map Entry.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * Update timestamp of a Certificate Map Entry. Timestamp in RFC3339 UTC "Zulu" format,
     * with nanosecond resolution and up to nine fractional digits.
     * Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a CertificateMapEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateMapEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateMapEntryArgs | CertificateMapEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateMapEntryState | undefined;
            resourceInputs["certificates"] = state?.certificates;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["map"] = state?.map;
            resourceInputs["matcher"] = state?.matcher;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["state"] = state?.state;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as CertificateMapEntryArgs | undefined;
            if (args?.certificates === undefined && !opts.urn) {
                throw new Error("Missing required property 'certificates'");
            }
            if (args?.map === undefined && !opts.urn) {
                throw new Error("Missing required property 'map'");
            }
            resourceInputs["certificates"] = args?.certificates;
            resourceInputs["description"] = args?.description;
            resourceInputs["hostname"] = args?.hostname;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["map"] = args?.map;
            resourceInputs["matcher"] = args?.matcher;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CertificateMapEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CertificateMapEntry resources.
 */
export interface CertificateMapEntryState {
    /**
     * A set of Certificates defines for the given hostname.
     * There can be defined up to fifteen certificates in each Certificate Map Entry.
     * Each certificate must match pattern projects/*&#47;locations/*&#47;certificates/*.
     */
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Creation timestamp of a Certificate Map Entry. Timestamp in RFC3339 UTC "Zulu" format,
     * with nanosecond resolution and up to nine fractional digits.
     * Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A Hostname (FQDN, e.g. example.com) or a wildcard hostname expression (*.example.com)
     * for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for
     * selecting a proper certificate.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Set of labels associated with a Certificate Map Entry.
     * An object containing a list of "key": value pairs.
     * Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map entry that is inputted into the certificate map
     */
    map?: pulumi.Input<string>;
    /**
     * A predefined matcher for particular cases, other than SNI selection
     */
    matcher?: pulumi.Input<string>;
    /**
     * A user-defined name of the Certificate Map Entry. Certificate Map Entry
     * names must be unique globally and match pattern
     * 'projects/*&#47;locations/*&#47;certificateMaps/*&#47;certificateMapEntries/*'
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A serving state of this Certificate Map Entry.
     */
    state?: pulumi.Input<string>;
    /**
     * Update timestamp of a Certificate Map Entry. Timestamp in RFC3339 UTC "Zulu" format,
     * with nanosecond resolution and up to nine fractional digits.
     * Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CertificateMapEntry resource.
 */
export interface CertificateMapEntryArgs {
    /**
     * A set of Certificates defines for the given hostname.
     * There can be defined up to fifteen certificates in each Certificate Map Entry.
     * Each certificate must match pattern projects/*&#47;locations/*&#47;certificates/*.
     */
    certificates: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * A Hostname (FQDN, e.g. example.com) or a wildcard hostname expression (*.example.com)
     * for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for
     * selecting a proper certificate.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Set of labels associated with a Certificate Map Entry.
     * An object containing a list of "key": value pairs.
     * Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map entry that is inputted into the certificate map
     */
    map: pulumi.Input<string>;
    /**
     * A predefined matcher for particular cases, other than SNI selection
     */
    matcher?: pulumi.Input<string>;
    /**
     * A user-defined name of the Certificate Map Entry. Certificate Map Entry
     * names must be unique globally and match pattern
     * 'projects/*&#47;locations/*&#47;certificateMaps/*&#47;certificateMapEntries/*'
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
