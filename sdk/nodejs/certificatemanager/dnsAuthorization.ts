// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * DnsAuthorization represents a HTTP-reachable backend for an DnsAuthorization.
 *
 * > **Warning:** These resources require allow-listing to use, and are not openly available to all Cloud customers. Engage with your Cloud account team to discuss how to onboard.
 *
 * ## Example Usage
 * ### Certificate Manager Dns Authorization Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultDnsAuthorization = new gcp.certificatemanager.DnsAuthorization("default", {
 *     description: "The default dnss",
 *     domain: "%{random_suffix}.hashicorptest.com",
 * });
 *
 * export const recordNameToInsert = {
 *     "google_certificate_manager_dns_authorization.default.dns_resource_record.0.name": [{}],
 *     value: "",
 * };
 * export const recordTypeToInsert = {
 *     "google_certificate_manager_dns_authorization.default.dns_resource_record.0.type": [{}],
 *     value: "",
 * };
 * export const recordDataToInsert = {
 *     "google_certificate_manager_dns_authorization.default.dns_resource_record.0.data": [{}],
 *     value: "",
 * };
 * ```
 *
 * ## Import
 *
 * DnsAuthorization can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:certificatemanager/dnsAuthorization:DnsAuthorization default projects/{{project}}/locations/global/dnsAuthorizations/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:certificatemanager/dnsAuthorization:DnsAuthorization default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:certificatemanager/dnsAuthorization:DnsAuthorization default {{name}}
 * ```
 */
export class DnsAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing DnsAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsAuthorizationState, opts?: pulumi.CustomResourceOptions): DnsAuthorization {
        return new DnsAuthorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:certificatemanager/dnsAuthorization:DnsAuthorization';

    /**
     * Returns true if the given object is an instance of DnsAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsAuthorization.__pulumiType;
    }

    /**
     * A human-readable description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be
     * usable by certificate.
     */
    public /*out*/ readonly dnsResourceRecords!: pulumi.Output<outputs.certificatemanager.DnsAuthorizationDnsResourceRecord[]>;
    /**
     * A domain which is being authorized. A DnsAuthorization resource covers a
     * single domain and its wildcard, e.g. authorization for "example.com" can
     * be used to issue certificates for "example.com" and "*.example.com".
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Set of label tags associated with the EdgeCache resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the resource; provided by the client when the resource is created.
     * The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
     * and all following characters must be a dash, underscore, letter or digit.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a DnsAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsAuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsAuthorizationArgs | DnsAuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsAuthorizationState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsResourceRecords"] = state ? state.dnsResourceRecords : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as DnsAuthorizationArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["dnsResourceRecords"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsAuthorization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsAuthorization resources.
 */
export interface DnsAuthorizationState {
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be
     * usable by certificate.
     */
    dnsResourceRecords?: pulumi.Input<pulumi.Input<inputs.certificatemanager.DnsAuthorizationDnsResourceRecord>[]>;
    /**
     * A domain which is being authorized. A DnsAuthorization resource covers a
     * single domain and its wildcard, e.g. authorization for "example.com" can
     * be used to issue certificates for "example.com" and "*.example.com".
     */
    domain?: pulumi.Input<string>;
    /**
     * Set of label tags associated with the EdgeCache resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the resource; provided by the client when the resource is created.
     * The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
     * and all following characters must be a dash, underscore, letter or digit.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsAuthorization resource.
 */
export interface DnsAuthorizationArgs {
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * A domain which is being authorized. A DnsAuthorization resource covers a
     * single domain and its wildcard, e.g. authorization for "example.com" can
     * be used to issue certificates for "example.com" and "*.example.com".
     */
    domain: pulumi.Input<string>;
    /**
     * Set of label tags associated with the EdgeCache resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the resource; provided by the client when the resource is created.
     * The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
     * and all following characters must be a dash, underscore, letter or digit.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
