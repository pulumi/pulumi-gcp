// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Repositories store source code. It supports all Git SCM client commands and has built-in pull requests and issue tracking. Both HTTPS and SSH authentication are supported.
 *
 * To get more information about Repository, see:
 *
 * * How-to Guides
 *   * [Official Documentation](https://cloud.google.com/secure-source-manager/docs/overview)
 *
 * ## 
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.securesourcemanager.Instance("instance", {
 *     location: "us-central1",
 *     instanceId: "my-instance",
 * });
 * const _default = new gcp.securesourcemanager.Repository("default", {
 *     location: "us-central1",
 *     repositoryId: "my-repository",
 *     instance: instance.name,
 * });
 * ```
 * ## 
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.securesourcemanager.Instance("instance", {
 *     location: "us-central1",
 *     instanceId: "my-instance",
 * });
 * const _default = new gcp.securesourcemanager.Repository("default", {
 *     location: "us-central1",
 *     repositoryId: "my-repository",
 *     instance: instance.name,
 *     description: "This is a test repository",
 *     initialConfig: {
 *         defaultBranch: "main",
 *         gitignores: ["python"],
 *         license: "mit",
 *         readme: "default",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Repository can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}`
 *
 * * `{{project}}/{{location}}/{{repository_id}}`
 *
 * * `{{location}}/{{repository_id}}`
 *
 * * `{{repository_id}}`
 *
 * When using the `pulumi import` command, Repository can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:securesourcemanager/repository:Repository default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:securesourcemanager/repository:Repository default {{project}}/{{location}}/{{repository_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:securesourcemanager/repository:Repository default {{location}}/{{repository_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:securesourcemanager/repository:Repository default {{repository_id}}
 * ```
 */
export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:securesourcemanager/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * Time the repository was created in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the repository, which cannot exceed 500 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Initial configurations for the repository.
     * Structure is documented below.
     */
    public readonly initialConfig!: pulumi.Output<outputs.securesourcemanager.RepositoryInitialConfig | undefined>;
    /**
     * The name of the instance in which the repository is hosted.
     */
    public readonly instance!: pulumi.Output<string>;
    /**
     * The location for the Repository.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name for the Repository.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The ID for the Repository.
     */
    public readonly repositoryId!: pulumi.Output<string>;
    /**
     * Unique identifier of the repository.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Time the repository was updated in UTC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * URIs for the repository.
     * Structure is documented below.
     */
    public /*out*/ readonly uris!: pulumi.Output<outputs.securesourcemanager.RepositoryUri[]>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["initialConfig"] = state ? state.initialConfig : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["uris"] = state ? state.uris : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.repositoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["initialConfig"] = args ? args.initialConfig : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["repositoryId"] = args ? args.repositoryId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["uris"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * Time the repository was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the repository, which cannot exceed 500 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Initial configurations for the repository.
     * Structure is documented below.
     */
    initialConfig?: pulumi.Input<inputs.securesourcemanager.RepositoryInitialConfig>;
    /**
     * The name of the instance in which the repository is hosted.
     */
    instance?: pulumi.Input<string>;
    /**
     * The location for the Repository.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name for the Repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The ID for the Repository.
     */
    repositoryId?: pulumi.Input<string>;
    /**
     * Unique identifier of the repository.
     */
    uid?: pulumi.Input<string>;
    /**
     * Time the repository was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * URIs for the repository.
     * Structure is documented below.
     */
    uris?: pulumi.Input<pulumi.Input<inputs.securesourcemanager.RepositoryUri>[]>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * Description of the repository, which cannot exceed 500 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Initial configurations for the repository.
     * Structure is documented below.
     */
    initialConfig?: pulumi.Input<inputs.securesourcemanager.RepositoryInitialConfig>;
    /**
     * The name of the instance in which the repository is hosted.
     */
    instance: pulumi.Input<string>;
    /**
     * The location for the Repository.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The ID for the Repository.
     */
    repositoryId: pulumi.Input<string>;
}
