// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Hook is a user-defined HTTP callback triggered by an event.
 *
 * To get more information about Hook, see:
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/secure-source-manager/docs/overview)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Hook can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}`
 *
 * * `{{project}}/{{location}}/{{repository_id}}/{{hook_id}}`
 *
 * * `{{location}}/{{repository_id}}/{{hook_id}}`
 *
 * * `{{hook_id}}`
 *
 * When using the `pulumi import` command, Hook can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:securesourcemanager/hook:Hook default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:securesourcemanager/hook:Hook default {{project}}/{{location}}/{{repository_id}}/{{hook_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:securesourcemanager/hook:Hook default {{location}}/{{repository_id}}/{{hook_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:securesourcemanager/hook:Hook default {{hook_id}}
 * ```
 */
export class Hook extends pulumi.CustomResource {
    /**
     * Get an existing Hook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HookState, opts?: pulumi.CustomResourceOptions): Hook {
        return new Hook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:securesourcemanager/hook:Hook';

    /**
     * Returns true if the given object is an instance of Hook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Hook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hook.__pulumiType;
    }

    /**
     * Create timestamp.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Determines if the hook disabled or not.
     * Set to true to stop sending traffic.
     */
    declare public readonly disabled: pulumi.Output<boolean | undefined>;
    /**
     * The events that trigger hook on.
     * Each value may be one of: `PUSH`, `PULL_REQUEST`.
     */
    declare public readonly events: pulumi.Output<string[]>;
    /**
     * The ID for the Hook.
     */
    declare public readonly hookId: pulumi.Output<string>;
    /**
     * The location for the Repository.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * A unique identifier for a Hook. The name should be of the format:
     * `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The trigger option for push events.
     * Structure is documented below.
     */
    declare public readonly pushOption: pulumi.Output<outputs.securesourcemanager.HookPushOption>;
    /**
     * The ID for the Repository.
     */
    declare public readonly repositoryId: pulumi.Output<string>;
    /**
     * The sensitive query string to be appended to the target URI.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     */
    declare public readonly sensitiveQueryString: pulumi.Output<string | undefined>;
    /**
     * The target URI to which the payloads will be delivered.
     */
    declare public readonly targetUri: pulumi.Output<string>;
    /**
     * Unique identifier of the hook.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * Update timestamp.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a Hook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HookArgs | HookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HookState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["disabled"] = state?.disabled;
            resourceInputs["events"] = state?.events;
            resourceInputs["hookId"] = state?.hookId;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["pushOption"] = state?.pushOption;
            resourceInputs["repositoryId"] = state?.repositoryId;
            resourceInputs["sensitiveQueryString"] = state?.sensitiveQueryString;
            resourceInputs["targetUri"] = state?.targetUri;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as HookArgs | undefined;
            if (args?.hookId === undefined && !opts.urn) {
                throw new Error("Missing required property 'hookId'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.repositoryId === undefined && !opts.urn) {
                throw new Error("Missing required property 'repositoryId'");
            }
            if (args?.targetUri === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetUri'");
            }
            resourceInputs["disabled"] = args?.disabled;
            resourceInputs["events"] = args?.events;
            resourceInputs["hookId"] = args?.hookId;
            resourceInputs["location"] = args?.location;
            resourceInputs["project"] = args?.project;
            resourceInputs["pushOption"] = args?.pushOption;
            resourceInputs["repositoryId"] = args?.repositoryId;
            resourceInputs["sensitiveQueryString"] = args?.sensitiveQueryString ? pulumi.secret(args.sensitiveQueryString) : undefined;
            resourceInputs["targetUri"] = args?.targetUri;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sensitiveQueryString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Hook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Hook resources.
 */
export interface HookState {
    /**
     * Create timestamp.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Determines if the hook disabled or not.
     * Set to true to stop sending traffic.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The events that trigger hook on.
     * Each value may be one of: `PUSH`, `PULL_REQUEST`.
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID for the Hook.
     */
    hookId?: pulumi.Input<string>;
    /**
     * The location for the Repository.
     */
    location?: pulumi.Input<string>;
    /**
     * A unique identifier for a Hook. The name should be of the format:
     * `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The trigger option for push events.
     * Structure is documented below.
     */
    pushOption?: pulumi.Input<inputs.securesourcemanager.HookPushOption>;
    /**
     * The ID for the Repository.
     */
    repositoryId?: pulumi.Input<string>;
    /**
     * The sensitive query string to be appended to the target URI.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     */
    sensitiveQueryString?: pulumi.Input<string>;
    /**
     * The target URI to which the payloads will be delivered.
     */
    targetUri?: pulumi.Input<string>;
    /**
     * Unique identifier of the hook.
     */
    uid?: pulumi.Input<string>;
    /**
     * Update timestamp.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Hook resource.
 */
export interface HookArgs {
    /**
     * Determines if the hook disabled or not.
     * Set to true to stop sending traffic.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The events that trigger hook on.
     * Each value may be one of: `PUSH`, `PULL_REQUEST`.
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID for the Hook.
     */
    hookId: pulumi.Input<string>;
    /**
     * The location for the Repository.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The trigger option for push events.
     * Structure is documented below.
     */
    pushOption?: pulumi.Input<inputs.securesourcemanager.HookPushOption>;
    /**
     * The ID for the Repository.
     */
    repositoryId: pulumi.Input<string>;
    /**
     * The sensitive query string to be appended to the target URI.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     */
    sensitiveQueryString?: pulumi.Input<string>;
    /**
     * The target URI to which the payloads will be delivered.
     */
    targetUri: pulumi.Input<string>;
}
