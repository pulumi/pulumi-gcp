// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BranchRuleArgs, BranchRuleState } from "./branchRule";
export type BranchRule = import("./branchRule").BranchRule;
export const BranchRule: typeof import("./branchRule").BranchRule = null as any;
utilities.lazyLoad(exports, ["BranchRule"], () => require("./branchRule"));

export { GetInstanceIamPolicyArgs, GetInstanceIamPolicyResult, GetInstanceIamPolicyOutputArgs } from "./getInstanceIamPolicy";
export const getInstanceIamPolicy: typeof import("./getInstanceIamPolicy").getInstanceIamPolicy = null as any;
export const getInstanceIamPolicyOutput: typeof import("./getInstanceIamPolicy").getInstanceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceIamPolicy","getInstanceIamPolicyOutput"], () => require("./getInstanceIamPolicy"));

export { GetRepositoryIamPolicyArgs, GetRepositoryIamPolicyResult, GetRepositoryIamPolicyOutputArgs } from "./getRepositoryIamPolicy";
export const getRepositoryIamPolicy: typeof import("./getRepositoryIamPolicy").getRepositoryIamPolicy = null as any;
export const getRepositoryIamPolicyOutput: typeof import("./getRepositoryIamPolicy").getRepositoryIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryIamPolicy","getRepositoryIamPolicyOutput"], () => require("./getRepositoryIamPolicy"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceIamBindingArgs, InstanceIamBindingState } from "./instanceIamBinding";
export type InstanceIamBinding = import("./instanceIamBinding").InstanceIamBinding;
export const InstanceIamBinding: typeof import("./instanceIamBinding").InstanceIamBinding = null as any;
utilities.lazyLoad(exports, ["InstanceIamBinding"], () => require("./instanceIamBinding"));

export { InstanceIamMemberArgs, InstanceIamMemberState } from "./instanceIamMember";
export type InstanceIamMember = import("./instanceIamMember").InstanceIamMember;
export const InstanceIamMember: typeof import("./instanceIamMember").InstanceIamMember = null as any;
utilities.lazyLoad(exports, ["InstanceIamMember"], () => require("./instanceIamMember"));

export { InstanceIamPolicyArgs, InstanceIamPolicyState } from "./instanceIamPolicy";
export type InstanceIamPolicy = import("./instanceIamPolicy").InstanceIamPolicy;
export const InstanceIamPolicy: typeof import("./instanceIamPolicy").InstanceIamPolicy = null as any;
utilities.lazyLoad(exports, ["InstanceIamPolicy"], () => require("./instanceIamPolicy"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { RepositoryIamBindingArgs, RepositoryIamBindingState } from "./repositoryIamBinding";
export type RepositoryIamBinding = import("./repositoryIamBinding").RepositoryIamBinding;
export const RepositoryIamBinding: typeof import("./repositoryIamBinding").RepositoryIamBinding = null as any;
utilities.lazyLoad(exports, ["RepositoryIamBinding"], () => require("./repositoryIamBinding"));

export { RepositoryIamMemberArgs, RepositoryIamMemberState } from "./repositoryIamMember";
export type RepositoryIamMember = import("./repositoryIamMember").RepositoryIamMember;
export const RepositoryIamMember: typeof import("./repositoryIamMember").RepositoryIamMember = null as any;
utilities.lazyLoad(exports, ["RepositoryIamMember"], () => require("./repositoryIamMember"));

export { RepositoryIamPolicyArgs, RepositoryIamPolicyState } from "./repositoryIamPolicy";
export type RepositoryIamPolicy = import("./repositoryIamPolicy").RepositoryIamPolicy;
export const RepositoryIamPolicy: typeof import("./repositoryIamPolicy").RepositoryIamPolicy = null as any;
utilities.lazyLoad(exports, ["RepositoryIamPolicy"], () => require("./repositoryIamPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:securesourcemanager/branchRule:BranchRule":
                return new BranchRule(name, <any>undefined, { urn })
            case "gcp:securesourcemanager/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "gcp:securesourcemanager/instanceIamBinding:InstanceIamBinding":
                return new InstanceIamBinding(name, <any>undefined, { urn })
            case "gcp:securesourcemanager/instanceIamMember:InstanceIamMember":
                return new InstanceIamMember(name, <any>undefined, { urn })
            case "gcp:securesourcemanager/instanceIamPolicy:InstanceIamPolicy":
                return new InstanceIamPolicy(name, <any>undefined, { urn })
            case "gcp:securesourcemanager/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "gcp:securesourcemanager/repositoryIamBinding:RepositoryIamBinding":
                return new RepositoryIamBinding(name, <any>undefined, { urn })
            case "gcp:securesourcemanager/repositoryIamMember:RepositoryIamMember":
                return new RepositoryIamMember(name, <any>undefined, { urn })
            case "gcp:securesourcemanager/repositoryIamPolicy:RepositoryIamPolicy":
                return new RepositoryIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "securesourcemanager/branchRule", _module)
pulumi.runtime.registerResourceModule("gcp", "securesourcemanager/instance", _module)
pulumi.runtime.registerResourceModule("gcp", "securesourcemanager/instanceIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "securesourcemanager/instanceIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "securesourcemanager/instanceIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "securesourcemanager/repository", _module)
pulumi.runtime.registerResourceModule("gcp", "securesourcemanager/repositoryIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "securesourcemanager/repositoryIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "securesourcemanager/repositoryIamPolicy", _module)
