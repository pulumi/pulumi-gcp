// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Tunnel destination groups represent resources that have the same tunnel access restrictions.
 *
 * To get more information about TunnelDestGroup, see:
 *
 * * [API documentation](https://cloud.google.com/iap/docs/reference/rest/v1/projects.iap_tunnel.locations.destGroups)
 * * How-to Guides
 *     * [Set up IAP TCP forwarding with an IP address or hostname in a Google Cloud or non-Google Cloud environment](https://cloud.google.com/iap/docs/tcp-by-host)
 *
 * ## Example Usage
 *
 * ### Iap Destgroup
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const destGroup = new gcp.iap.TunnelDestGroup("dest_group", {
 *     region: "us-central1",
 *     groupName: "testgroup_2067",
 *     cidrs: [
 *         "10.1.0.0/16",
 *         "192.168.10.0/24",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * TunnelDestGroup can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{group_name}}`
 *
 * * `{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{group_name}}`
 *
 * * `{{project}}/{{region}}/{{group_name}}`
 *
 * * `{{region}}/destGroups/{{group_name}}`
 *
 * * `{{region}}/{{group_name}}`
 *
 * * `{{group_name}}`
 *
 * When using the `pulumi import` command, TunnelDestGroup can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default projects/{{project}}/iap_tunnel/locations/{{region}}/destGroups/{{group_name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{project}}/iap_tunnel/locations/{{region}}/destGroups/{{group_name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{project}}/{{region}}/{{group_name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{region}}/destGroups/{{group_name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{region}}/{{group_name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:iap/tunnelDestGroup:TunnelDestGroup default {{group_name}}
 * ```
 */
export class TunnelDestGroup extends pulumi.CustomResource {
    /**
     * Get an existing TunnelDestGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TunnelDestGroupState, opts?: pulumi.CustomResourceOptions): TunnelDestGroup {
        return new TunnelDestGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:iap/tunnelDestGroup:TunnelDestGroup';

    /**
     * Returns true if the given object is an instance of TunnelDestGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TunnelDestGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TunnelDestGroup.__pulumiType;
    }

    /**
     * List of CIDRs that this group applies to.
     */
    public readonly cidrs!: pulumi.Output<string[] | undefined>;
    /**
     * List of FQDNs that this group applies to.
     */
    public readonly fqdns!: pulumi.Output<string[] | undefined>;
    /**
     * Unique tunnel destination group name.
     *
     *
     * - - -
     */
    public readonly groupName!: pulumi.Output<string>;
    /**
     * Full resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The region of the tunnel group. Must be the same as the network resources in the group.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a TunnelDestGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TunnelDestGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TunnelDestGroupArgs | TunnelDestGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TunnelDestGroupState | undefined;
            resourceInputs["cidrs"] = state ? state.cidrs : undefined;
            resourceInputs["fqdns"] = state ? state.fqdns : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as TunnelDestGroupArgs | undefined;
            if ((!args || args.groupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            resourceInputs["cidrs"] = args ? args.cidrs : undefined;
            resourceInputs["fqdns"] = args ? args.fqdns : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TunnelDestGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TunnelDestGroup resources.
 */
export interface TunnelDestGroupState {
    /**
     * List of CIDRs that this group applies to.
     */
    cidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of FQDNs that this group applies to.
     */
    fqdns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique tunnel destination group name.
     *
     *
     * - - -
     */
    groupName?: pulumi.Input<string>;
    /**
     * Full resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of the tunnel group. Must be the same as the network resources in the group.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TunnelDestGroup resource.
 */
export interface TunnelDestGroupArgs {
    /**
     * List of CIDRs that this group applies to.
     */
    cidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of FQDNs that this group applies to.
     */
    fqdns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique tunnel destination group name.
     *
     *
     * - - -
     */
    groupName: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of the tunnel group. Must be the same as the network resources in the group.
     */
    region?: pulumi.Input<string>;
}
