// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AppEngineServiceIamBindingArgs, AppEngineServiceIamBindingState } from "./appEngineServiceIamBinding";
export type AppEngineServiceIamBinding = import("./appEngineServiceIamBinding").AppEngineServiceIamBinding;
export const AppEngineServiceIamBinding: typeof import("./appEngineServiceIamBinding").AppEngineServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["AppEngineServiceIamBinding"], () => require("./appEngineServiceIamBinding"));

export { AppEngineServiceIamMemberArgs, AppEngineServiceIamMemberState } from "./appEngineServiceIamMember";
export type AppEngineServiceIamMember = import("./appEngineServiceIamMember").AppEngineServiceIamMember;
export const AppEngineServiceIamMember: typeof import("./appEngineServiceIamMember").AppEngineServiceIamMember = null as any;
utilities.lazyLoad(exports, ["AppEngineServiceIamMember"], () => require("./appEngineServiceIamMember"));

export { AppEngineServiceIamPolicyArgs, AppEngineServiceIamPolicyState } from "./appEngineServiceIamPolicy";
export type AppEngineServiceIamPolicy = import("./appEngineServiceIamPolicy").AppEngineServiceIamPolicy;
export const AppEngineServiceIamPolicy: typeof import("./appEngineServiceIamPolicy").AppEngineServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["AppEngineServiceIamPolicy"], () => require("./appEngineServiceIamPolicy"));

export { AppEngineVersionIamBindingArgs, AppEngineVersionIamBindingState } from "./appEngineVersionIamBinding";
export type AppEngineVersionIamBinding = import("./appEngineVersionIamBinding").AppEngineVersionIamBinding;
export const AppEngineVersionIamBinding: typeof import("./appEngineVersionIamBinding").AppEngineVersionIamBinding = null as any;
utilities.lazyLoad(exports, ["AppEngineVersionIamBinding"], () => require("./appEngineVersionIamBinding"));

export { AppEngineVersionIamMemberArgs, AppEngineVersionIamMemberState } from "./appEngineVersionIamMember";
export type AppEngineVersionIamMember = import("./appEngineVersionIamMember").AppEngineVersionIamMember;
export const AppEngineVersionIamMember: typeof import("./appEngineVersionIamMember").AppEngineVersionIamMember = null as any;
utilities.lazyLoad(exports, ["AppEngineVersionIamMember"], () => require("./appEngineVersionIamMember"));

export { AppEngineVersionIamPolicyArgs, AppEngineVersionIamPolicyState } from "./appEngineVersionIamPolicy";
export type AppEngineVersionIamPolicy = import("./appEngineVersionIamPolicy").AppEngineVersionIamPolicy;
export const AppEngineVersionIamPolicy: typeof import("./appEngineVersionIamPolicy").AppEngineVersionIamPolicy = null as any;
utilities.lazyLoad(exports, ["AppEngineVersionIamPolicy"], () => require("./appEngineVersionIamPolicy"));

export { BrandArgs, BrandState } from "./brand";
export type Brand = import("./brand").Brand;
export const Brand: typeof import("./brand").Brand = null as any;
utilities.lazyLoad(exports, ["Brand"], () => require("./brand"));

export { ClientArgs, ClientState } from "./client";
export type Client = import("./client").Client;
export const Client: typeof import("./client").Client = null as any;
utilities.lazyLoad(exports, ["Client"], () => require("./client"));

export { GetClientArgs, GetClientResult, GetClientOutputArgs } from "./getClient";
export const getClient: typeof import("./getClient").getClient = null as any;
export const getClientOutput: typeof import("./getClient").getClientOutput = null as any;
utilities.lazyLoad(exports, ["getClient","getClientOutput"], () => require("./getClient"));

export { TunnelIamBindingArgs, TunnelIamBindingState } from "./tunnelIamBinding";
export type TunnelIamBinding = import("./tunnelIamBinding").TunnelIamBinding;
export const TunnelIamBinding: typeof import("./tunnelIamBinding").TunnelIamBinding = null as any;
utilities.lazyLoad(exports, ["TunnelIamBinding"], () => require("./tunnelIamBinding"));

export { TunnelIamMemberArgs, TunnelIamMemberState } from "./tunnelIamMember";
export type TunnelIamMember = import("./tunnelIamMember").TunnelIamMember;
export const TunnelIamMember: typeof import("./tunnelIamMember").TunnelIamMember = null as any;
utilities.lazyLoad(exports, ["TunnelIamMember"], () => require("./tunnelIamMember"));

export { TunnelIamPolicyArgs, TunnelIamPolicyState } from "./tunnelIamPolicy";
export type TunnelIamPolicy = import("./tunnelIamPolicy").TunnelIamPolicy;
export const TunnelIamPolicy: typeof import("./tunnelIamPolicy").TunnelIamPolicy = null as any;
utilities.lazyLoad(exports, ["TunnelIamPolicy"], () => require("./tunnelIamPolicy"));

export { TunnelInstanceIAMBindingArgs, TunnelInstanceIAMBindingState } from "./tunnelInstanceIAMBinding";
export type TunnelInstanceIAMBinding = import("./tunnelInstanceIAMBinding").TunnelInstanceIAMBinding;
export const TunnelInstanceIAMBinding: typeof import("./tunnelInstanceIAMBinding").TunnelInstanceIAMBinding = null as any;
utilities.lazyLoad(exports, ["TunnelInstanceIAMBinding"], () => require("./tunnelInstanceIAMBinding"));

export { TunnelInstanceIAMMemberArgs, TunnelInstanceIAMMemberState } from "./tunnelInstanceIAMMember";
export type TunnelInstanceIAMMember = import("./tunnelInstanceIAMMember").TunnelInstanceIAMMember;
export const TunnelInstanceIAMMember: typeof import("./tunnelInstanceIAMMember").TunnelInstanceIAMMember = null as any;
utilities.lazyLoad(exports, ["TunnelInstanceIAMMember"], () => require("./tunnelInstanceIAMMember"));

export { TunnelInstanceIAMPolicyArgs, TunnelInstanceIAMPolicyState } from "./tunnelInstanceIAMPolicy";
export type TunnelInstanceIAMPolicy = import("./tunnelInstanceIAMPolicy").TunnelInstanceIAMPolicy;
export const TunnelInstanceIAMPolicy: typeof import("./tunnelInstanceIAMPolicy").TunnelInstanceIAMPolicy = null as any;
utilities.lazyLoad(exports, ["TunnelInstanceIAMPolicy"], () => require("./tunnelInstanceIAMPolicy"));

export { WebBackendServiceIamBindingArgs, WebBackendServiceIamBindingState } from "./webBackendServiceIamBinding";
export type WebBackendServiceIamBinding = import("./webBackendServiceIamBinding").WebBackendServiceIamBinding;
export const WebBackendServiceIamBinding: typeof import("./webBackendServiceIamBinding").WebBackendServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["WebBackendServiceIamBinding"], () => require("./webBackendServiceIamBinding"));

export { WebBackendServiceIamMemberArgs, WebBackendServiceIamMemberState } from "./webBackendServiceIamMember";
export type WebBackendServiceIamMember = import("./webBackendServiceIamMember").WebBackendServiceIamMember;
export const WebBackendServiceIamMember: typeof import("./webBackendServiceIamMember").WebBackendServiceIamMember = null as any;
utilities.lazyLoad(exports, ["WebBackendServiceIamMember"], () => require("./webBackendServiceIamMember"));

export { WebBackendServiceIamPolicyArgs, WebBackendServiceIamPolicyState } from "./webBackendServiceIamPolicy";
export type WebBackendServiceIamPolicy = import("./webBackendServiceIamPolicy").WebBackendServiceIamPolicy;
export const WebBackendServiceIamPolicy: typeof import("./webBackendServiceIamPolicy").WebBackendServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["WebBackendServiceIamPolicy"], () => require("./webBackendServiceIamPolicy"));

export { WebIamBindingArgs, WebIamBindingState } from "./webIamBinding";
export type WebIamBinding = import("./webIamBinding").WebIamBinding;
export const WebIamBinding: typeof import("./webIamBinding").WebIamBinding = null as any;
utilities.lazyLoad(exports, ["WebIamBinding"], () => require("./webIamBinding"));

export { WebIamMemberArgs, WebIamMemberState } from "./webIamMember";
export type WebIamMember = import("./webIamMember").WebIamMember;
export const WebIamMember: typeof import("./webIamMember").WebIamMember = null as any;
utilities.lazyLoad(exports, ["WebIamMember"], () => require("./webIamMember"));

export { WebIamPolicyArgs, WebIamPolicyState } from "./webIamPolicy";
export type WebIamPolicy = import("./webIamPolicy").WebIamPolicy;
export const WebIamPolicy: typeof import("./webIamPolicy").WebIamPolicy = null as any;
utilities.lazyLoad(exports, ["WebIamPolicy"], () => require("./webIamPolicy"));

export { WebTypeAppEngingIamBindingArgs, WebTypeAppEngingIamBindingState } from "./webTypeAppEngingIamBinding";
export type WebTypeAppEngingIamBinding = import("./webTypeAppEngingIamBinding").WebTypeAppEngingIamBinding;
export const WebTypeAppEngingIamBinding: typeof import("./webTypeAppEngingIamBinding").WebTypeAppEngingIamBinding = null as any;
utilities.lazyLoad(exports, ["WebTypeAppEngingIamBinding"], () => require("./webTypeAppEngingIamBinding"));

export { WebTypeAppEngingIamMemberArgs, WebTypeAppEngingIamMemberState } from "./webTypeAppEngingIamMember";
export type WebTypeAppEngingIamMember = import("./webTypeAppEngingIamMember").WebTypeAppEngingIamMember;
export const WebTypeAppEngingIamMember: typeof import("./webTypeAppEngingIamMember").WebTypeAppEngingIamMember = null as any;
utilities.lazyLoad(exports, ["WebTypeAppEngingIamMember"], () => require("./webTypeAppEngingIamMember"));

export { WebTypeAppEngingIamPolicyArgs, WebTypeAppEngingIamPolicyState } from "./webTypeAppEngingIamPolicy";
export type WebTypeAppEngingIamPolicy = import("./webTypeAppEngingIamPolicy").WebTypeAppEngingIamPolicy;
export const WebTypeAppEngingIamPolicy: typeof import("./webTypeAppEngingIamPolicy").WebTypeAppEngingIamPolicy = null as any;
utilities.lazyLoad(exports, ["WebTypeAppEngingIamPolicy"], () => require("./webTypeAppEngingIamPolicy"));

export { WebTypeComputeIamBindingArgs, WebTypeComputeIamBindingState } from "./webTypeComputeIamBinding";
export type WebTypeComputeIamBinding = import("./webTypeComputeIamBinding").WebTypeComputeIamBinding;
export const WebTypeComputeIamBinding: typeof import("./webTypeComputeIamBinding").WebTypeComputeIamBinding = null as any;
utilities.lazyLoad(exports, ["WebTypeComputeIamBinding"], () => require("./webTypeComputeIamBinding"));

export { WebTypeComputeIamMemberArgs, WebTypeComputeIamMemberState } from "./webTypeComputeIamMember";
export type WebTypeComputeIamMember = import("./webTypeComputeIamMember").WebTypeComputeIamMember;
export const WebTypeComputeIamMember: typeof import("./webTypeComputeIamMember").WebTypeComputeIamMember = null as any;
utilities.lazyLoad(exports, ["WebTypeComputeIamMember"], () => require("./webTypeComputeIamMember"));

export { WebTypeComputeIamPolicyArgs, WebTypeComputeIamPolicyState } from "./webTypeComputeIamPolicy";
export type WebTypeComputeIamPolicy = import("./webTypeComputeIamPolicy").WebTypeComputeIamPolicy;
export const WebTypeComputeIamPolicy: typeof import("./webTypeComputeIamPolicy").WebTypeComputeIamPolicy = null as any;
utilities.lazyLoad(exports, ["WebTypeComputeIamPolicy"], () => require("./webTypeComputeIamPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:iap/appEngineServiceIamBinding:AppEngineServiceIamBinding":
                return new AppEngineServiceIamBinding(name, <any>undefined, { urn })
            case "gcp:iap/appEngineServiceIamMember:AppEngineServiceIamMember":
                return new AppEngineServiceIamMember(name, <any>undefined, { urn })
            case "gcp:iap/appEngineServiceIamPolicy:AppEngineServiceIamPolicy":
                return new AppEngineServiceIamPolicy(name, <any>undefined, { urn })
            case "gcp:iap/appEngineVersionIamBinding:AppEngineVersionIamBinding":
                return new AppEngineVersionIamBinding(name, <any>undefined, { urn })
            case "gcp:iap/appEngineVersionIamMember:AppEngineVersionIamMember":
                return new AppEngineVersionIamMember(name, <any>undefined, { urn })
            case "gcp:iap/appEngineVersionIamPolicy:AppEngineVersionIamPolicy":
                return new AppEngineVersionIamPolicy(name, <any>undefined, { urn })
            case "gcp:iap/brand:Brand":
                return new Brand(name, <any>undefined, { urn })
            case "gcp:iap/client:Client":
                return new Client(name, <any>undefined, { urn })
            case "gcp:iap/tunnelIamBinding:TunnelIamBinding":
                return new TunnelIamBinding(name, <any>undefined, { urn })
            case "gcp:iap/tunnelIamMember:TunnelIamMember":
                return new TunnelIamMember(name, <any>undefined, { urn })
            case "gcp:iap/tunnelIamPolicy:TunnelIamPolicy":
                return new TunnelIamPolicy(name, <any>undefined, { urn })
            case "gcp:iap/tunnelInstanceIAMBinding:TunnelInstanceIAMBinding":
                return new TunnelInstanceIAMBinding(name, <any>undefined, { urn })
            case "gcp:iap/tunnelInstanceIAMMember:TunnelInstanceIAMMember":
                return new TunnelInstanceIAMMember(name, <any>undefined, { urn })
            case "gcp:iap/tunnelInstanceIAMPolicy:TunnelInstanceIAMPolicy":
                return new TunnelInstanceIAMPolicy(name, <any>undefined, { urn })
            case "gcp:iap/webBackendServiceIamBinding:WebBackendServiceIamBinding":
                return new WebBackendServiceIamBinding(name, <any>undefined, { urn })
            case "gcp:iap/webBackendServiceIamMember:WebBackendServiceIamMember":
                return new WebBackendServiceIamMember(name, <any>undefined, { urn })
            case "gcp:iap/webBackendServiceIamPolicy:WebBackendServiceIamPolicy":
                return new WebBackendServiceIamPolicy(name, <any>undefined, { urn })
            case "gcp:iap/webIamBinding:WebIamBinding":
                return new WebIamBinding(name, <any>undefined, { urn })
            case "gcp:iap/webIamMember:WebIamMember":
                return new WebIamMember(name, <any>undefined, { urn })
            case "gcp:iap/webIamPolicy:WebIamPolicy":
                return new WebIamPolicy(name, <any>undefined, { urn })
            case "gcp:iap/webTypeAppEngingIamBinding:WebTypeAppEngingIamBinding":
                return new WebTypeAppEngingIamBinding(name, <any>undefined, { urn })
            case "gcp:iap/webTypeAppEngingIamMember:WebTypeAppEngingIamMember":
                return new WebTypeAppEngingIamMember(name, <any>undefined, { urn })
            case "gcp:iap/webTypeAppEngingIamPolicy:WebTypeAppEngingIamPolicy":
                return new WebTypeAppEngingIamPolicy(name, <any>undefined, { urn })
            case "gcp:iap/webTypeComputeIamBinding:WebTypeComputeIamBinding":
                return new WebTypeComputeIamBinding(name, <any>undefined, { urn })
            case "gcp:iap/webTypeComputeIamMember:WebTypeComputeIamMember":
                return new WebTypeComputeIamMember(name, <any>undefined, { urn })
            case "gcp:iap/webTypeComputeIamPolicy:WebTypeComputeIamPolicy":
                return new WebTypeComputeIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "iap/appEngineServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/appEngineServiceIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/appEngineServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/appEngineVersionIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/appEngineVersionIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/appEngineVersionIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/brand", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/client", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/tunnelIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/tunnelIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/tunnelIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/tunnelInstanceIAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/tunnelInstanceIAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/tunnelInstanceIAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/webBackendServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/webBackendServiceIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/webBackendServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/webIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/webIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/webIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/webTypeAppEngingIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/webTypeAppEngingIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/webTypeAppEngingIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/webTypeComputeIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/webTypeComputeIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "iap/webTypeComputeIamPolicy", _module)
