// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A `DeployPolicy` inhibits manual or DeployPolicy-driven actions within a Delivery Pipeline or Target.
 *
 * To get more information about DeployPolicy, see:
 *
 * * [API documentation](https://cloud.google.com/deploy/docs/api/reference/rest/v1/projects.locations.deployPolicies)
 * * How-to Guides
 *     * [Restrict deploy behavior using policies](https://cloud.google.com/deploy/docs/deploy-policy)
 *
 * ## Example Usage
 *
 * ### Clouddeploy Deploy Policy Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const b_deploy_policy = new gcp.clouddeploy.DeployPolicy("b-deploy-policy", {
 *     name: "cd-policy",
 *     location: "us-central1",
 *     selectors: [{
 *         deliveryPipeline: {
 *             id: "cd-pipeline",
 *         },
 *     }],
 *     rules: [{
 *         rolloutRestriction: {
 *             id: "rule",
 *             timeWindows: {
 *                 timeZone: "America/Los_Angeles",
 *                 weeklyWindows: [{
 *                     startTime: {
 *                         hours: 12,
 *                         minutes: 0,
 *                     },
 *                     endTime: {
 *                         hours: 13,
 *                         minutes: 0,
 *                     },
 *                 }],
 *             },
 *         },
 *     }],
 * });
 * ```
 * ### Clouddeploy Deploy Policy Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const f_deploy_policy = new gcp.clouddeploy.DeployPolicy("f-deploy-policy", {
 *     name: "cd-policy",
 *     location: "us-central1",
 *     annotations: {
 *         my_first_annotation: "example-annotation-1",
 *         my_second_annotation: "example-annotation-2",
 *     },
 *     labels: {
 *         my_first_label: "example-label-1",
 *         my_second_label: "example-label-2",
 *     },
 *     description: "policy resource",
 *     selectors: [
 *         {
 *             deliveryPipeline: {
 *                 id: "cd-pipeline",
 *                 labels: {
 *                     foo: "bar",
 *                 },
 *             },
 *         },
 *         {
 *             target: {
 *                 id: "dev",
 *                 labels: {
 *                     foo: "bar",
 *                 },
 *             },
 *         },
 *     ],
 *     suspended: true,
 *     rules: [
 *         {
 *             rolloutRestriction: {
 *                 id: "rule",
 *                 timeWindows: {
 *                     timeZone: "America/Los_Angeles",
 *                     weeklyWindows: [{
 *                         startTime: {
 *                             hours: 12,
 *                             minutes: 0,
 *                             seconds: 0,
 *                             nanos: 0,
 *                         },
 *                         endTime: {
 *                             hours: 13,
 *                             minutes: 0,
 *                             seconds: 0,
 *                             nanos: 0,
 *                         },
 *                     }],
 *                 },
 *             },
 *         },
 *         {
 *             rolloutRestriction: {
 *                 id: "rule2",
 *                 invokers: ["USER"],
 *                 actions: ["CREATE"],
 *                 timeWindows: {
 *                     timeZone: "America/Los_Angeles",
 *                     weeklyWindows: [{
 *                         startTime: {
 *                             hours: 13,
 *                             minutes: 0,
 *                             seconds: 0,
 *                             nanos: 0,
 *                         },
 *                         endTime: {
 *                             hours: 14,
 *                             minutes: 0,
 *                             seconds: 0,
 *                             nanos: 0,
 *                         },
 *                         daysOfWeeks: ["MONDAY"],
 *                     }],
 *                     oneTimeWindows: [{
 *                         startTime: {
 *                             hours: 15,
 *                             minutes: 0,
 *                             seconds: 0,
 *                             nanos: 0,
 *                         },
 *                         endTime: {
 *                             hours: 16,
 *                             minutes: 0,
 *                             seconds: 0,
 *                             nanos: 0,
 *                         },
 *                         startDate: {
 *                             year: 2019,
 *                             month: 1,
 *                             day: 1,
 *                         },
 *                         endDate: {
 *                             year: 2019,
 *                             month: 12,
 *                             day: 31,
 *                         },
 *                     }],
 *                 },
 *             },
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * DeployPolicy can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, DeployPolicy can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default {{location}}/{{name}}
 * ```
 */
export class DeployPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DeployPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeployPolicyState, opts?: pulumi.CustomResourceOptions): DeployPolicy {
        return new DeployPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:clouddeploy/deployPolicy:DeployPolicy';

    /**
     * Returns true if the given object is an instance of DeployPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeployPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeployPolicy.__pulumiType;
    }

    /**
     * Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
     * must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
     * optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
     * beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
     * and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
     * labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
     * https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
     * details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Output only. Time at which the DeployPolicy was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Optional. The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
     * following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
     * dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
     * lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
     * are additionally constrained to be <= 63 characters. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location for the resource
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of the `DeployPolicy`.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Required. Rules to apply. At least one rule must be present.
     * Structure is documented below.
     */
    public readonly rules!: pulumi.Output<outputs.clouddeploy.DeployPolicyRule[]>;
    /**
     * Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
     * Structure is documented below.
     */
    public readonly selectors!: pulumi.Output<outputs.clouddeploy.DeployPolicySelector[]>;
    /**
     * Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
     */
    public readonly suspended!: pulumi.Output<boolean | undefined>;
    /**
     * Output only. Unique identifier of the `DeployPolicy`.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Output only. Time at which the DeployPolicy was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a DeployPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeployPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeployPolicyArgs | DeployPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeployPolicyState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["selectors"] = state ? state.selectors : undefined;
            resourceInputs["suspended"] = state ? state.suspended : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as DeployPolicyArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.selectors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'selectors'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["selectors"] = args ? args.selectors : undefined;
            resourceInputs["suspended"] = args ? args.suspended : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DeployPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeployPolicy resources.
 */
export interface DeployPolicyState {
    /**
     * Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
     * must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
     * optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
     * beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
     * and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
     * labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
     * https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
     * details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. Time at which the DeployPolicy was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
     */
    description?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
     * following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
     * dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
     * lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
     * are additionally constrained to be <= 63 characters. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location for the resource
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the `DeployPolicy`.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required. Rules to apply. At least one rule must be present.
     * Structure is documented below.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.clouddeploy.DeployPolicyRule>[]>;
    /**
     * Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
     * Structure is documented below.
     */
    selectors?: pulumi.Input<pulumi.Input<inputs.clouddeploy.DeployPolicySelector>[]>;
    /**
     * Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
     */
    suspended?: pulumi.Input<boolean>;
    /**
     * Output only. Unique identifier of the `DeployPolicy`.
     */
    uid?: pulumi.Input<string>;
    /**
     * Output only. Time at which the DeployPolicy was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeployPolicy resource.
 */
export interface DeployPolicyArgs {
    /**
     * Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
     * must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
     * optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
     * beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
     * and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
     * labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
     * https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
     * details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
     * following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
     * dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
     * lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
     * are additionally constrained to be <= 63 characters. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location for the resource
     */
    location: pulumi.Input<string>;
    /**
     * Name of the `DeployPolicy`.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Required. Rules to apply. At least one rule must be present.
     * Structure is documented below.
     */
    rules: pulumi.Input<pulumi.Input<inputs.clouddeploy.DeployPolicyRule>[]>;
    /**
     * Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
     * Structure is documented below.
     */
    selectors: pulumi.Input<pulumi.Input<inputs.clouddeploy.DeployPolicySelector>[]>;
    /**
     * Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
     */
    suspended?: pulumi.Input<boolean>;
}
