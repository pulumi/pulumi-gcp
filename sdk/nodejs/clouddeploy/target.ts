// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The Cloud Deploy `Target` resource
 *
 * ## Example Usage
 * ### Run_target
 * tests creating and updating a cloud run target
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.clouddeploy.Target("primary", {
 *     location: "us-west1",
 *     annotations: {
 *         my_first_annotation: "example-annotation-1",
 *         my_second_annotation: "example-annotation-2",
 *     },
 *     description: "basic description",
 *     executionConfigs: [{
 *         usages: [
 *             "RENDER",
 *             "DEPLOY",
 *         ],
 *         executionTimeout: "3600s",
 *     }],
 *     labels: {
 *         my_first_label: "example-label-1",
 *         my_second_label: "example-label-2",
 *     },
 *     project: "my-project-name",
 *     requireApproval: false,
 *     run: {
 *         location: "projects/my-project-name/locations/us-west1",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Target
 * Creates a basic Cloud Deploy target
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.clouddeploy.Target("primary", {
 *     annotations: {
 *         my_first_annotation: "example-annotation-1",
 *         my_second_annotation: "example-annotation-2",
 *     },
 *     description: "basic description",
 *     gke: {
 *         cluster: "projects/my-project-name/locations/us-west1/clusters/example-cluster-name",
 *     },
 *     labels: {
 *         my_first_label: "example-label-1",
 *         my_second_label: "example-label-2",
 *     },
 *     location: "us-west1",
 *     project: "my-project-name",
 *     requireApproval: false,
 * });
 * ```
 *
 * ## Import
 *
 * Target can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:clouddeploy/target:Target default projects/{{project}}/locations/{{location}}/targets/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:clouddeploy/target:Target default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:clouddeploy/target:Target default {{location}}/{{name}}
 * ```
 */
export class Target extends pulumi.CustomResource {
    /**
     * Get an existing Target resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TargetState, opts?: pulumi.CustomResourceOptions): Target {
        return new Target(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:clouddeploy/target:Target';

    /**
     * Returns true if the given object is an instance of Target.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Target {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Target.__pulumiType;
    }

    /**
     * Optional. User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Information specifying an Anthos Cluster.
     */
    public readonly anthosCluster!: pulumi.Output<outputs.clouddeploy.TargetAnthosCluster | undefined>;
    /**
     * Output only. Time at which the `Target` was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. Description of the `Target`. Max length is 255 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and
     * delete requests to ensure the client has an up-to-date value before proceeding.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.
     */
    public readonly executionConfigs!: pulumi.Output<outputs.clouddeploy.TargetExecutionConfig[]>;
    /**
     * Information specifying a GKE Cluster.
     */
    public readonly gke!: pulumi.Output<outputs.clouddeploy.TargetGke | undefined>;
    /**
     * Optional. Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Required. The location where the Cloud Run Service should be located. Format is `projects/{project}/locations/{location}`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of the `Target`. Format is [a-z][a-z0-9\-]{0,62}.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Optional. Whether or not the `Target` requires approval.
     */
    public readonly requireApproval!: pulumi.Output<boolean | undefined>;
    /**
     * (Beta only) Information specifying a Cloud Run deployment target.
     */
    public readonly run!: pulumi.Output<outputs.clouddeploy.TargetRun | undefined>;
    /**
     * Output only. Resource id of the `Target`.
     */
    public /*out*/ readonly targetId!: pulumi.Output<string>;
    /**
     * Output only. Unique identifier of the `Target`.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Output only. Most recent time at which the `Target` was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Target resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TargetArgs | TargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TargetState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["anthosCluster"] = state ? state.anthosCluster : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["executionConfigs"] = state ? state.executionConfigs : undefined;
            resourceInputs["gke"] = state ? state.gke : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["requireApproval"] = state ? state.requireApproval : undefined;
            resourceInputs["run"] = state ? state.run : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as TargetArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["anthosCluster"] = args ? args.anthosCluster : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executionConfigs"] = args ? args.executionConfigs : undefined;
            resourceInputs["gke"] = args ? args.gke : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requireApproval"] = args ? args.requireApproval : undefined;
            resourceInputs["run"] = args ? args.run : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["targetId"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Target.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Target resources.
 */
export interface TargetState {
    /**
     * Optional. User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Information specifying an Anthos Cluster.
     */
    anthosCluster?: pulumi.Input<inputs.clouddeploy.TargetAnthosCluster>;
    /**
     * Output only. Time at which the `Target` was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. Description of the `Target`. Max length is 255 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and
     * delete requests to ensure the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.
     */
    executionConfigs?: pulumi.Input<pulumi.Input<inputs.clouddeploy.TargetExecutionConfig>[]>;
    /**
     * Information specifying a GKE Cluster.
     */
    gke?: pulumi.Input<inputs.clouddeploy.TargetGke>;
    /**
     * Optional. Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required. The location where the Cloud Run Service should be located. Format is `projects/{project}/locations/{location}`.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the `Target`. Format is [a-z][a-z0-9\-]{0,62}.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Optional. Whether or not the `Target` requires approval.
     */
    requireApproval?: pulumi.Input<boolean>;
    /**
     * (Beta only) Information specifying a Cloud Run deployment target.
     */
    run?: pulumi.Input<inputs.clouddeploy.TargetRun>;
    /**
     * Output only. Resource id of the `Target`.
     */
    targetId?: pulumi.Input<string>;
    /**
     * Output only. Unique identifier of the `Target`.
     */
    uid?: pulumi.Input<string>;
    /**
     * Output only. Most recent time at which the `Target` was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Target resource.
 */
export interface TargetArgs {
    /**
     * Optional. User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Information specifying an Anthos Cluster.
     */
    anthosCluster?: pulumi.Input<inputs.clouddeploy.TargetAnthosCluster>;
    /**
     * Optional. Description of the `Target`. Max length is 255 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.
     */
    executionConfigs?: pulumi.Input<pulumi.Input<inputs.clouddeploy.TargetExecutionConfig>[]>;
    /**
     * Information specifying a GKE Cluster.
     */
    gke?: pulumi.Input<inputs.clouddeploy.TargetGke>;
    /**
     * Optional. Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required. The location where the Cloud Run Service should be located. Format is `projects/{project}/locations/{location}`.
     */
    location: pulumi.Input<string>;
    /**
     * Name of the `Target`. Format is [a-z][a-z0-9\-]{0,62}.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Optional. Whether or not the `Target` requires approval.
     */
    requireApproval?: pulumi.Input<boolean>;
    /**
     * (Beta only) Information specifying a Cloud Run deployment target.
     */
    run?: pulumi.Input<inputs.clouddeploy.TargetRun>;
}
