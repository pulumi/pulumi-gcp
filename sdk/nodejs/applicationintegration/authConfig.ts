// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The AuthConfig resource use to hold channels and connection config data.
 *
 * To get more information about AuthConfig, see:
 *
 * * [API documentation](https://cloud.google.com/application-integration/docs/reference/rest/v1/projects.locations.authConfigs)
 * * How-to Guides
 *     * [Manage authentication profiles](https://cloud.google.com/application-integration/docs/configure-authentication-profiles)
 *     * [Official Documentation](https://cloud.google.com/application-integration/docs/overview)
 *
 * ## Example Usage
 *
 * ### Integrations Auth Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const client = new gcp.applicationintegration.Client("client", {location: "us-west1"});
 * const basicExample = new gcp.applicationintegration.AuthConfig("basic_example", {
 *     location: "us-west1",
 *     displayName: "test-authconfig",
 *     description: "Test auth config created via terraform",
 *     decryptedCredential: {
 *         credentialType: "USERNAME_AND_PASSWORD",
 *         usernameAndPassword: {
 *             username: "test-username",
 *             password: "test-password",
 *         },
 *     },
 * }, {
 *     dependsOn: [client],
 * });
 * ```
 *
 * ## Import
 *
 * AuthConfig can be imported using any of these accepted formats:
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, AuthConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:applicationintegration/authConfig:AuthConfig default {{name}}
 * ```
 */
export class AuthConfig extends pulumi.CustomResource {
    /**
     * Get an existing AuthConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthConfigState, opts?: pulumi.CustomResourceOptions): AuthConfig {
        return new AuthConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:applicationintegration/authConfig:AuthConfig';

    /**
     * Returns true if the given object is an instance of AuthConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthConfig.__pulumiType;
    }

    /**
     * Certificate id for client certificate.
     */
    public /*out*/ readonly certificateId!: pulumi.Output<string>;
    /**
     * Raw client certificate
     * Structure is documented below.
     */
    public readonly clientCertificate!: pulumi.Output<outputs.applicationintegration.AuthConfigClientCertificate | undefined>;
    /**
     * The timestamp when the auth config is created.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
     */
    public /*out*/ readonly creatorEmail!: pulumi.Output<string>;
    /**
     * Credential type of the encrypted credential.
     */
    public /*out*/ readonly credentialType!: pulumi.Output<string>;
    /**
     * Raw auth credentials.
     * Structure is documented below.
     */
    public readonly decryptedCredential!: pulumi.Output<outputs.applicationintegration.AuthConfigDecryptedCredential | undefined>;
    /**
     * A description of the auth config.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the auth config.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Auth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key.
     * A base64-encoded string.
     */
    public /*out*/ readonly encryptedCredential!: pulumi.Output<string>;
    /**
     * User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     */
    public readonly expiryNotificationDurations!: pulumi.Output<string[] | undefined>;
    /**
     * The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
     */
    public /*out*/ readonly lastModifierEmail!: pulumi.Output<string>;
    /**
     * Location in which client needs to be provisioned.
     *
     *
     * - - -
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource name of the auth config.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    public readonly overrideValidTime!: pulumi.Output<string | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The reason / details of the current status.
     */
    public /*out*/ readonly reason!: pulumi.Output<string>;
    /**
     * The status of the auth config.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The timestamp when the auth config is modified.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The time until the auth config is valid. Empty or max value is considered the auth config won't expire.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly validTime!: pulumi.Output<string>;
    /**
     * The visibility of the auth config.
     * Possible values are: `PRIVATE`, `CLIENT_VISIBLE`.
     */
    public readonly visibility!: pulumi.Output<string | undefined>;

    /**
     * Create a AuthConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthConfigArgs | AuthConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthConfigState | undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["clientCertificate"] = state ? state.clientCertificate : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["creatorEmail"] = state ? state.creatorEmail : undefined;
            resourceInputs["credentialType"] = state ? state.credentialType : undefined;
            resourceInputs["decryptedCredential"] = state ? state.decryptedCredential : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["encryptedCredential"] = state ? state.encryptedCredential : undefined;
            resourceInputs["expiryNotificationDurations"] = state ? state.expiryNotificationDurations : undefined;
            resourceInputs["lastModifierEmail"] = state ? state.lastModifierEmail : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overrideValidTime"] = state ? state.overrideValidTime : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["reason"] = state ? state.reason : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["validTime"] = state ? state.validTime : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as AuthConfigArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["clientCertificate"] = args ? args.clientCertificate : undefined;
            resourceInputs["decryptedCredential"] = args ? args.decryptedCredential : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["expiryNotificationDurations"] = args ? args.expiryNotificationDurations : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["overrideValidTime"] = args ? args.overrideValidTime : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
            resourceInputs["certificateId"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["creatorEmail"] = undefined /*out*/;
            resourceInputs["credentialType"] = undefined /*out*/;
            resourceInputs["encryptedCredential"] = undefined /*out*/;
            resourceInputs["lastModifierEmail"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["reason"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["validTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthConfig.__pulumiType, name, resourceInputs, opts, false /*remote*/);
    }
}

/**
 * Input properties used for looking up and filtering AuthConfig resources.
 */
export interface AuthConfigState {
    /**
     * Certificate id for client certificate.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * Raw client certificate
     * Structure is documented below.
     */
    clientCertificate?: pulumi.Input<inputs.applicationintegration.AuthConfigClientCertificate>;
    /**
     * The timestamp when the auth config is created.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
     */
    creatorEmail?: pulumi.Input<string>;
    /**
     * Credential type of the encrypted credential.
     */
    credentialType?: pulumi.Input<string>;
    /**
     * Raw auth credentials.
     * Structure is documented below.
     */
    decryptedCredential?: pulumi.Input<inputs.applicationintegration.AuthConfigDecryptedCredential>;
    /**
     * A description of the auth config.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the auth config.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Auth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key.
     * A base64-encoded string.
     */
    encryptedCredential?: pulumi.Input<string>;
    /**
     * User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     */
    expiryNotificationDurations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
     */
    lastModifierEmail?: pulumi.Input<string>;
    /**
     * Location in which client needs to be provisioned.
     *
     *
     * - - -
     */
    location?: pulumi.Input<string>;
    /**
     * Resource name of the auth config.
     */
    name?: pulumi.Input<string>;
    /**
     * User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    overrideValidTime?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The reason / details of the current status.
     */
    reason?: pulumi.Input<string>;
    /**
     * The status of the auth config.
     */
    state?: pulumi.Input<string>;
    /**
     * The timestamp when the auth config is modified.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The time until the auth config is valid. Empty or max value is considered the auth config won't expire.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    validTime?: pulumi.Input<string>;
    /**
     * The visibility of the auth config.
     * Possible values are: `PRIVATE`, `CLIENT_VISIBLE`.
     */
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthConfig resource.
 */
export interface AuthConfigArgs {
    /**
     * Raw client certificate
     * Structure is documented below.
     */
    clientCertificate?: pulumi.Input<inputs.applicationintegration.AuthConfigClientCertificate>;
    /**
     * Raw auth credentials.
     * Structure is documented below.
     */
    decryptedCredential?: pulumi.Input<inputs.applicationintegration.AuthConfigDecryptedCredential>;
    /**
     * A description of the auth config.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the auth config.
     */
    displayName: pulumi.Input<string>;
    /**
     * User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
     */
    expiryNotificationDurations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Location in which client needs to be provisioned.
     *
     *
     * - - -
     */
    location: pulumi.Input<string>;
    /**
     * User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    overrideValidTime?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The visibility of the auth config.
     * Possible values are: `PRIVATE`, `CLIENT_VISIBLE`.
     */
    visibility?: pulumi.Input<string>;
}
