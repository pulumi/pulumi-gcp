// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AuthConfigArgs, AuthConfigState } from "./authConfig";
export type AuthConfig = import("./authConfig").AuthConfig;
export const AuthConfig: typeof import("./authConfig").AuthConfig = null as any;
utilities.lazyLoad(exports, ["AuthConfig"], () => require("./authConfig"));

export { ClientArgs, ClientState } from "./client";
export type Client = import("./client").Client;
export const Client: typeof import("./client").Client = null as any;
utilities.lazyLoad(exports, ["Client"], () => require("./client"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:applicationintegration/authConfig:AuthConfig":
                return new AuthConfig(name, <any>undefined, { urn })
            case "gcp:applicationintegration/client:Client":
                return new Client(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "applicationintegration/authConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "applicationintegration/client", _module)
