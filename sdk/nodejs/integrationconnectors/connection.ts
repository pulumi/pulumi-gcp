// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * An Integration connectors Connection.
 *
 * To get more information about Connection, see:
 *
 * * [API documentation](https://cloud.google.com/integration-connectors/docs/reference/rest/v1/projects.locations.connections)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/integration-connectors/docs/createconnection)
 *
 * ## Example Usage
 *
 * ### Integration Connectors Connection Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const testProject = gcp.organizations.getProject({});
 * const pubsubconnection = new gcp.integrationconnectors.Connection("pubsubconnection", {
 *     name: "test-pubsub",
 *     location: "us-central1",
 *     connectorVersion: testProject.then(testProject => `projects/${testProject.projectId}/locations/global/providers/gcp/connectors/pubsub/versions/1`),
 *     description: "tf created description",
 *     configVariables: [
 *         {
 *             key: "project_id",
 *             stringValue: "connectors-example",
 *         },
 *         {
 *             key: "topic_id",
 *             stringValue: "test",
 *         },
 *     ],
 * });
 * ```
 * ### Integration Connectors Connection Advanced
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const testProject = gcp.organizations.getProject({});
 * const secret_basic = new gcp.secretmanager.Secret("secret-basic", {
 *     secretId: "test-secret",
 *     replication: {
 *         userManaged: {
 *             replicas: [{
 *                 location: "us-central1",
 *             }],
 *         },
 *     },
 * });
 * const secret_version_basic = new gcp.secretmanager.SecretVersion("secret-version-basic", {
 *     secret: secret_basic.id,
 *     secretData: "dummypassword",
 * });
 * const secretIam = new gcp.secretmanager.SecretIamMember("secret_iam", {
 *     secretId: secret_basic.id,
 *     role: "roles/secretmanager.admin",
 *     member: testProject.then(testProject => `serviceAccount:${testProject.number}-compute@developer.gserviceaccount.com`),
 * }, {
 *     dependsOn: [secret_version_basic],
 * });
 * const zendeskconnection = new gcp.integrationconnectors.Connection("zendeskconnection", {
 *     name: "test-zendesk",
 *     description: "tf updated description",
 *     location: "us-central1",
 *     serviceAccount: testProject.then(testProject => `${testProject.number}-compute@developer.gserviceaccount.com`),
 *     connectorVersion: testProject.then(testProject => `projects/${testProject.projectId}/locations/global/providers/zendesk/connectors/zendesk/versions/1`),
 *     configVariables: [
 *         {
 *             key: "proxy_enabled",
 *             booleanValue: false,
 *         },
 *         {
 *             key: "sample_integer_value",
 *             integerValue: 1,
 *         },
 *         {
 *             key: "sample_encryption_key_value",
 *             encryptionKeyValue: {
 *                 type: "GOOGLE_MANAGED",
 *                 kmsKeyName: "sampleKMSKkey",
 *             },
 *         },
 *         {
 *             key: "sample_secret_value",
 *             secretValue: {
 *                 secretVersion: secret_version_basic.name,
 *             },
 *         },
 *     ],
 *     suspended: false,
 *     authConfig: {
 *         additionalVariables: [
 *             {
 *                 key: "sample_string",
 *                 stringValue: "sampleString",
 *             },
 *             {
 *                 key: "sample_boolean",
 *                 booleanValue: false,
 *             },
 *             {
 *                 key: "sample_integer",
 *                 integerValue: 1,
 *             },
 *             {
 *                 key: "sample_secret_value",
 *                 secretValue: {
 *                     secretVersion: secret_version_basic.name,
 *                 },
 *             },
 *             {
 *                 key: "sample_encryption_key_value",
 *                 encryptionKeyValue: {
 *                     type: "GOOGLE_MANAGED",
 *                     kmsKeyName: "sampleKMSKkey",
 *                 },
 *             },
 *         ],
 *         authType: "USER_PASSWORD",
 *         authKey: "sampleAuthKey",
 *         userPassword: {
 *             username: "user@xyz.com",
 *             password: {
 *                 secretVersion: secret_version_basic.name,
 *             },
 *         },
 *     },
 *     destinationConfigs: [{
 *         key: "url",
 *         destinations: [{
 *             host: "https://test.zendesk.com",
 *             port: 80,
 *         }],
 *     }],
 *     lockConfig: {
 *         locked: false,
 *         reason: "Its not locked",
 *     },
 *     logConfig: {
 *         enabled: true,
 *     },
 *     nodeConfig: {
 *         minNodeCount: 2,
 *         maxNodeCount: 50,
 *     },
 *     labels: {
 *         foo: "bar",
 *     },
 *     sslConfig: {
 *         additionalVariables: [
 *             {
 *                 key: "sample_string",
 *                 stringValue: "sampleString",
 *             },
 *             {
 *                 key: "sample_boolean",
 *                 booleanValue: false,
 *             },
 *             {
 *                 key: "sample_integer",
 *                 integerValue: 1,
 *             },
 *             {
 *                 key: "sample_secret_value",
 *                 secretValue: {
 *                     secretVersion: secret_version_basic.name,
 *                 },
 *             },
 *             {
 *                 key: "sample_encryption_key_value",
 *                 encryptionKeyValue: {
 *                     type: "GOOGLE_MANAGED",
 *                     kmsKeyName: "sampleKMSKkey",
 *                 },
 *             },
 *         ],
 *         clientCertType: "PEM",
 *         clientCertificate: {
 *             secretVersion: secret_version_basic.name,
 *         },
 *         clientPrivateKey: {
 *             secretVersion: secret_version_basic.name,
 *         },
 *         clientPrivateKeyPass: {
 *             secretVersion: secret_version_basic.name,
 *         },
 *         privateServerCertificate: {
 *             secretVersion: secret_version_basic.name,
 *         },
 *         serverCertType: "PEM",
 *         trustModel: "PRIVATE",
 *         type: "TLS",
 *         useSsl: true,
 *     },
 *     eventingEnablementType: "EVENTING_AND_CONNECTION",
 *     eventingConfig: {
 *         additionalVariables: [
 *             {
 *                 key: "sample_string",
 *                 stringValue: "sampleString",
 *             },
 *             {
 *                 key: "sample_boolean",
 *                 booleanValue: false,
 *             },
 *             {
 *                 key: "sample_integer",
 *                 integerValue: 1,
 *             },
 *             {
 *                 key: "sample_secret_value",
 *                 secretValue: {
 *                     secretVersion: secret_version_basic.name,
 *                 },
 *             },
 *             {
 *                 key: "sample_encryption_key_value",
 *                 encryptionKeyValue: {
 *                     type: "GOOGLE_MANAGED",
 *                     kmsKeyName: "sampleKMSKkey",
 *                 },
 *             },
 *         ],
 *         registrationDestinationConfig: {
 *             key: "registration_destination_config",
 *             destinations: [{
 *                 host: "https://test.zendesk.com",
 *                 port: 80,
 *             }],
 *         },
 *         authConfig: {
 *             authType: "USER_PASSWORD",
 *             authKey: "sampleAuthKey",
 *             userPassword: {
 *                 username: "user@xyz.com",
 *                 password: {
 *                     secretVersion: secret_version_basic.name,
 *                 },
 *             },
 *             additionalVariables: [
 *                 {
 *                     key: "sample_string",
 *                     stringValue: "sampleString",
 *                 },
 *                 {
 *                     key: "sample_boolean",
 *                     booleanValue: false,
 *                 },
 *                 {
 *                     key: "sample_integer",
 *                     integerValue: 1,
 *                 },
 *                 {
 *                     key: "sample_secret_value",
 *                     secretValue: {
 *                         secretVersion: secret_version_basic.name,
 *                     },
 *                 },
 *                 {
 *                     key: "sample_encryption_key_value",
 *                     encryptionKeyValue: {
 *                         type: "GOOGLE_MANAGED",
 *                         kmsKeyName: "sampleKMSKkey",
 *                     },
 *                 },
 *             ],
 *         },
 *         enrichmentEnabled: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Connection can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/connections/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, Connection can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:integrationconnectors/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:integrationconnectors/connection:Connection default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:integrationconnectors/connection:Connection default {{location}}/{{name}}
 * ```
 */
export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:integrationconnectors/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * authConfig for the connection.
     * Structure is documented below.
     */
    public readonly authConfig!: pulumi.Output<outputs.integrationconnectors.ConnectionAuthConfig | undefined>;
    /**
     * Config Variables for the connection.
     * Structure is documented below.
     */
    public readonly configVariables!: pulumi.Output<outputs.integrationconnectors.ConnectionConfigVariable[] | undefined>;
    /**
     * Connection revision. This field is only updated when the connection is created or updated by User.
     */
    public /*out*/ readonly connectionRevision!: pulumi.Output<string>;
    /**
     * connectorVersion of the Connector.
     */
    public readonly connectorVersion!: pulumi.Output<string>;
    /**
     * This configuration provides infra configs like rate limit threshold which need to be configurable for every connector version.
     * Structure is documented below.
     */
    public /*out*/ readonly connectorVersionInfraConfigs!: pulumi.Output<outputs.integrationconnectors.ConnectionConnectorVersionInfraConfig[]>;
    /**
     * Flag to mark the version indicating the launch stage.
     */
    public /*out*/ readonly connectorVersionLaunchStage!: pulumi.Output<string>;
    /**
     * Time the Namespace was created in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * An arbitrary description for the Conection.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Define the Connectors target endpoint.
     * Structure is documented below.
     */
    public readonly destinationConfigs!: pulumi.Output<outputs.integrationconnectors.ConnectionDestinationConfig[] | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Eventing Configuration of a connection
     * Structure is documented below.
     */
    public readonly eventingConfig!: pulumi.Output<outputs.integrationconnectors.ConnectionEventingConfig | undefined>;
    /**
     * Eventing enablement type. Will be nil if eventing is not enabled.
     * Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
     */
    public readonly eventingEnablementType!: pulumi.Output<string | undefined>;
    /**
     * Eventing Runtime Data.
     * Structure is documented below.
     */
    public /*out*/ readonly eventingRuntimeDatas!: pulumi.Output<outputs.integrationconnectors.ConnectionEventingRuntimeData[]>;
    /**
     * Resource labels to represent user provided metadata.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Location in which Connection needs to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Determines whether or no a connection is locked. If locked, a reason must be specified.
     * Structure is documented below.
     */
    public readonly lockConfig!: pulumi.Output<outputs.integrationconnectors.ConnectionLockConfig | undefined>;
    /**
     * Log configuration for the connection.
     * Structure is documented below.
     */
    public readonly logConfig!: pulumi.Output<outputs.integrationconnectors.ConnectionLogConfig | undefined>;
    /**
     * Name of Connection needs to be created.
     *
     *
     * - - -
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Node configuration for the connection.
     * Structure is documented below.
     */
    public readonly nodeConfig!: pulumi.Output<outputs.integrationconnectors.ConnectionNodeConfig>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Service account needed for runtime plane to access Google Cloud resources.
     */
    public readonly serviceAccount!: pulumi.Output<string>;
    /**
     * The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
     * e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
     */
    public /*out*/ readonly serviceDirectory!: pulumi.Output<string>;
    /**
     * SSL Configuration of a connection
     * Structure is documented below.
     */
    public readonly sslConfig!: pulumi.Output<outputs.integrationconnectors.ConnectionSslConfig | undefined>;
    /**
     * (Output)
     * Current status of eventing.
     * Structure is documented below.
     */
    public /*out*/ readonly statuses!: pulumi.Output<outputs.integrationconnectors.ConnectionStatus[]>;
    /**
     * This subscription type enum states the subscription type of the project.
     */
    public /*out*/ readonly subscriptionType!: pulumi.Output<string>;
    /**
     * Suspended indicates if a user has suspended a connection or not.
     */
    public readonly suspended!: pulumi.Output<boolean | undefined>;
    /**
     * Time the Namespace was updated in UTC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            resourceInputs["authConfig"] = state ? state.authConfig : undefined;
            resourceInputs["configVariables"] = state ? state.configVariables : undefined;
            resourceInputs["connectionRevision"] = state ? state.connectionRevision : undefined;
            resourceInputs["connectorVersion"] = state ? state.connectorVersion : undefined;
            resourceInputs["connectorVersionInfraConfigs"] = state ? state.connectorVersionInfraConfigs : undefined;
            resourceInputs["connectorVersionLaunchStage"] = state ? state.connectorVersionLaunchStage : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationConfigs"] = state ? state.destinationConfigs : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["eventingConfig"] = state ? state.eventingConfig : undefined;
            resourceInputs["eventingEnablementType"] = state ? state.eventingEnablementType : undefined;
            resourceInputs["eventingRuntimeDatas"] = state ? state.eventingRuntimeDatas : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["lockConfig"] = state ? state.lockConfig : undefined;
            resourceInputs["logConfig"] = state ? state.logConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeConfig"] = state ? state.nodeConfig : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["serviceDirectory"] = state ? state.serviceDirectory : undefined;
            resourceInputs["sslConfig"] = state ? state.sslConfig : undefined;
            resourceInputs["statuses"] = state ? state.statuses : undefined;
            resourceInputs["subscriptionType"] = state ? state.subscriptionType : undefined;
            resourceInputs["suspended"] = state ? state.suspended : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            if ((!args || args.connectorVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorVersion'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["authConfig"] = args ? args.authConfig : undefined;
            resourceInputs["configVariables"] = args ? args.configVariables : undefined;
            resourceInputs["connectorVersion"] = args ? args.connectorVersion : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationConfigs"] = args ? args.destinationConfigs : undefined;
            resourceInputs["eventingConfig"] = args ? args.eventingConfig : undefined;
            resourceInputs["eventingEnablementType"] = args ? args.eventingEnablementType : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["lockConfig"] = args ? args.lockConfig : undefined;
            resourceInputs["logConfig"] = args ? args.logConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeConfig"] = args ? args.nodeConfig : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["sslConfig"] = args ? args.sslConfig : undefined;
            resourceInputs["suspended"] = args ? args.suspended : undefined;
            resourceInputs["connectionRevision"] = undefined /*out*/;
            resourceInputs["connectorVersionInfraConfigs"] = undefined /*out*/;
            resourceInputs["connectorVersionLaunchStage"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["eventingRuntimeDatas"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["serviceDirectory"] = undefined /*out*/;
            resourceInputs["statuses"] = undefined /*out*/;
            resourceInputs["subscriptionType"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Connection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * authConfig for the connection.
     * Structure is documented below.
     */
    authConfig?: pulumi.Input<inputs.integrationconnectors.ConnectionAuthConfig>;
    /**
     * Config Variables for the connection.
     * Structure is documented below.
     */
    configVariables?: pulumi.Input<pulumi.Input<inputs.integrationconnectors.ConnectionConfigVariable>[]>;
    /**
     * Connection revision. This field is only updated when the connection is created or updated by User.
     */
    connectionRevision?: pulumi.Input<string>;
    /**
     * connectorVersion of the Connector.
     */
    connectorVersion?: pulumi.Input<string>;
    /**
     * This configuration provides infra configs like rate limit threshold which need to be configurable for every connector version.
     * Structure is documented below.
     */
    connectorVersionInfraConfigs?: pulumi.Input<pulumi.Input<inputs.integrationconnectors.ConnectionConnectorVersionInfraConfig>[]>;
    /**
     * Flag to mark the version indicating the launch stage.
     */
    connectorVersionLaunchStage?: pulumi.Input<string>;
    /**
     * Time the Namespace was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * An arbitrary description for the Conection.
     */
    description?: pulumi.Input<string>;
    /**
     * Define the Connectors target endpoint.
     * Structure is documented below.
     */
    destinationConfigs?: pulumi.Input<pulumi.Input<inputs.integrationconnectors.ConnectionDestinationConfig>[]>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Eventing Configuration of a connection
     * Structure is documented below.
     */
    eventingConfig?: pulumi.Input<inputs.integrationconnectors.ConnectionEventingConfig>;
    /**
     * Eventing enablement type. Will be nil if eventing is not enabled.
     * Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
     */
    eventingEnablementType?: pulumi.Input<string>;
    /**
     * Eventing Runtime Data.
     * Structure is documented below.
     */
    eventingRuntimeDatas?: pulumi.Input<pulumi.Input<inputs.integrationconnectors.ConnectionEventingRuntimeData>[]>;
    /**
     * Resource labels to represent user provided metadata.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location in which Connection needs to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Determines whether or no a connection is locked. If locked, a reason must be specified.
     * Structure is documented below.
     */
    lockConfig?: pulumi.Input<inputs.integrationconnectors.ConnectionLockConfig>;
    /**
     * Log configuration for the connection.
     * Structure is documented below.
     */
    logConfig?: pulumi.Input<inputs.integrationconnectors.ConnectionLogConfig>;
    /**
     * Name of Connection needs to be created.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * Node configuration for the connection.
     * Structure is documented below.
     */
    nodeConfig?: pulumi.Input<inputs.integrationconnectors.ConnectionNodeConfig>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Service account needed for runtime plane to access Google Cloud resources.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
     * e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
     */
    serviceDirectory?: pulumi.Input<string>;
    /**
     * SSL Configuration of a connection
     * Structure is documented below.
     */
    sslConfig?: pulumi.Input<inputs.integrationconnectors.ConnectionSslConfig>;
    /**
     * (Output)
     * Current status of eventing.
     * Structure is documented below.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.integrationconnectors.ConnectionStatus>[]>;
    /**
     * This subscription type enum states the subscription type of the project.
     */
    subscriptionType?: pulumi.Input<string>;
    /**
     * Suspended indicates if a user has suspended a connection or not.
     */
    suspended?: pulumi.Input<boolean>;
    /**
     * Time the Namespace was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * authConfig for the connection.
     * Structure is documented below.
     */
    authConfig?: pulumi.Input<inputs.integrationconnectors.ConnectionAuthConfig>;
    /**
     * Config Variables for the connection.
     * Structure is documented below.
     */
    configVariables?: pulumi.Input<pulumi.Input<inputs.integrationconnectors.ConnectionConfigVariable>[]>;
    /**
     * connectorVersion of the Connector.
     */
    connectorVersion: pulumi.Input<string>;
    /**
     * An arbitrary description for the Conection.
     */
    description?: pulumi.Input<string>;
    /**
     * Define the Connectors target endpoint.
     * Structure is documented below.
     */
    destinationConfigs?: pulumi.Input<pulumi.Input<inputs.integrationconnectors.ConnectionDestinationConfig>[]>;
    /**
     * Eventing Configuration of a connection
     * Structure is documented below.
     */
    eventingConfig?: pulumi.Input<inputs.integrationconnectors.ConnectionEventingConfig>;
    /**
     * Eventing enablement type. Will be nil if eventing is not enabled.
     * Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
     */
    eventingEnablementType?: pulumi.Input<string>;
    /**
     * Resource labels to represent user provided metadata.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location in which Connection needs to be created.
     */
    location: pulumi.Input<string>;
    /**
     * Determines whether or no a connection is locked. If locked, a reason must be specified.
     * Structure is documented below.
     */
    lockConfig?: pulumi.Input<inputs.integrationconnectors.ConnectionLockConfig>;
    /**
     * Log configuration for the connection.
     * Structure is documented below.
     */
    logConfig?: pulumi.Input<inputs.integrationconnectors.ConnectionLogConfig>;
    /**
     * Name of Connection needs to be created.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * Node configuration for the connection.
     * Structure is documented below.
     */
    nodeConfig?: pulumi.Input<inputs.integrationconnectors.ConnectionNodeConfig>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Service account needed for runtime plane to access Google Cloud resources.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * SSL Configuration of a connection
     * Structure is documented below.
     */
    sslConfig?: pulumi.Input<inputs.integrationconnectors.ConnectionSslConfig>;
    /**
     * Suspended indicates if a user has suspended a connection or not.
     */
    suspended?: pulumi.Input<boolean>;
}
