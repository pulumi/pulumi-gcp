// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## OS policy assignment is an API resource that is used to apply a set of OS policies to a dynamically targeted group of Compute Engine VM instances.
 *
 * # google\_os\_config\_os\_policy\_assignment
 *
 * OS policy assignment is an API resource that is used to apply a set of OS
 * policies to a dynamically targeted group of Compute Engine VM instances. An OS
 * policy is used to define the desired state configuration for a Compute Engine VM
 * instance through a set of configuration resources that provide capabilities such
 * as installing or removing software packages, or executing a script. For more
 * information about the OS policy resource definitions and examples, see
 * [OS policy and OS policy assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
 *
 * To get more information about OSPolicyAssignment, see:
 *
 * *   [API documentation](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments)
 * *   How-to Guides
 *     *   [Official Documentation](https://cloud.google.com/compute/docs/os-configuration-management/create-os-policy-assignment)
 *
 * ## Example Usage
 * ### Os Config Os Policy Assignment Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.osconfig.OsPolicyAssignment("primary", {
 *     description: "A test os policy assignment",
 *     instanceFilter: {
 *         all: false,
 *         exclusionLabels: [{
 *             labels: {
 *                 "label-two": "value-two",
 *             },
 *         }],
 *         inclusionLabels: [{
 *             labels: {
 *                 "label-one": "value-one",
 *             },
 *         }],
 *         inventories: [{
 *             osShortName: "centos",
 *             osVersion: "8.*",
 *         }],
 *     },
 *     location: "us-central1-a",
 *     osPolicies: [{
 *         allowNoResourceGroupMatch: false,
 *         description: "A test os policy",
 *         id: "policy",
 *         mode: "VALIDATION",
 *         resourceGroups: [{
 *             inventoryFilters: [{
 *                 osShortName: "centos",
 *                 osVersion: "8.*",
 *             }],
 *             resources: [
 *                 {
 *                     id: "apt-to-yum",
 *                     repository: {
 *                         apt: {
 *                             archiveType: "DEB",
 *                             components: ["doc"],
 *                             distribution: "debian",
 *                             gpgKey: ".gnupg/pubring.kbx",
 *                             uri: "https://atl.mirrors.clouvider.net/debian",
 *                         },
 *                     },
 *                 },
 *                 {
 *                     exec: {
 *                         enforce: {
 *                             args: ["arg1"],
 *                             file: {
 *                                 allowInsecure: true,
 *                                 remote: {
 *                                     sha256Checksum: "c7938fed83afdccbb0e86a2a2e4cad7d5035012ca3214b4a61268393635c3063",
 *                                     uri: "https://www.example.com/script.sh",
 *                                 },
 *                             },
 *                             interpreter: "SHELL",
 *                             outputFilePath: "$HOME/out",
 *                         },
 *                         validate: {
 *                             args: ["arg1"],
 *                             file: {
 *                                 localPath: "$HOME/script.sh",
 *                             },
 *                             interpreter: "SHELL",
 *                             outputFilePath: "$HOME/out",
 *                         },
 *                     },
 *                     id: "exec1",
 *                 },
 *             ],
 *         }],
 *     }],
 *     rollout: {
 *         disruptionBudget: {
 *             percent: 100,
 *         },
 *         minWaitDuration: "3s",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * OSPolicyAssignment can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default projects/{{project}}/locations/{{location}}/osPolicyAssignments/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default {{location}}/{{name}}
 * ```
 */
export class OsPolicyAssignment extends pulumi.CustomResource {
    /**
     * Get an existing OsPolicyAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsPolicyAssignmentState, opts?: pulumi.CustomResourceOptions): OsPolicyAssignment {
        return new OsPolicyAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:osconfig/osPolicyAssignment:OsPolicyAssignment';

    /**
     * Returns true if the given object is an instance of OsPolicyAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsPolicyAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsPolicyAssignment.__pulumiType;
    }

    /**
     * Output only. Indicates that this revision has been successfully
     * rolled out in this zone and new VMs will be assigned OS policies from this
     * revision. For a given OS policy assignment, there is only one revision with
     * a value of `true` for this field.
     */
    public /*out*/ readonly baseline!: pulumi.Output<boolean>;
    /**
     * Output only. Indicates that this revision deletes the OS policy
     * assignment.
     */
    public /*out*/ readonly deleted!: pulumi.Output<boolean>;
    /**
     * Policy description. Length of the description is
     * limited to 1024 characters.
     *
     * description is limited to 1024 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The etag for this OS policy assignment. If this is provided on
     * update, it must match the server's etag.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Filter to select VMs. Structure is
     * documented below.
     */
    public readonly instanceFilter!: pulumi.Output<outputs.osconfig.OsPolicyAssignmentInstanceFilter>;
    /**
     * The location for the resource
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of OS policies to be applied to the VMs.
     * Structure is documented below.
     */
    public readonly osPolicies!: pulumi.Output<outputs.osconfig.OsPolicyAssignmentOsPolicy[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Output only. Indicates that reconciliation is in progress
     * for the revision. This value is `true` when the `rolloutState` is one of:
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * Output only. The timestamp that the revision was
     * created.
     */
    public /*out*/ readonly revisionCreateTime!: pulumi.Output<string>;
    /**
     * Output only. The assignment revision ID A new revision is
     * committed whenever a rollout is triggered for a OS policy assignment
     */
    public /*out*/ readonly revisionId!: pulumi.Output<string>;
    /**
     * Rollout to deploy the OS policy assignment. A rollout
     * is triggered in the following situations: 1) OSPolicyAssignment is created.
     * 2) OSPolicyAssignment is updated and the update contains changes to one of
     * the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment
     * is deleted. Structure is documented below.
     */
    public readonly rollout!: pulumi.Output<outputs.osconfig.OsPolicyAssignmentRollout>;
    /**
     * Output only. OS policy assignment rollout state
     */
    public /*out*/ readonly rolloutState!: pulumi.Output<string>;
    /**
     * Set to true to skip awaiting rollout
     * during resource creation and update.
     */
    public readonly skipAwaitRollout!: pulumi.Output<boolean | undefined>;
    /**
     * Output only. Server generated unique id for the OS policy assignment
     * resource.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;

    /**
     * Create a OsPolicyAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsPolicyAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsPolicyAssignmentArgs | OsPolicyAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsPolicyAssignmentState | undefined;
            resourceInputs["baseline"] = state ? state.baseline : undefined;
            resourceInputs["deleted"] = state ? state.deleted : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["instanceFilter"] = state ? state.instanceFilter : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osPolicies"] = state ? state.osPolicies : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["revisionCreateTime"] = state ? state.revisionCreateTime : undefined;
            resourceInputs["revisionId"] = state ? state.revisionId : undefined;
            resourceInputs["rollout"] = state ? state.rollout : undefined;
            resourceInputs["rolloutState"] = state ? state.rolloutState : undefined;
            resourceInputs["skipAwaitRollout"] = state ? state.skipAwaitRollout : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
        } else {
            const args = argsOrState as OsPolicyAssignmentArgs | undefined;
            if ((!args || args.instanceFilter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceFilter'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.osPolicies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osPolicies'");
            }
            if ((!args || args.rollout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rollout'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceFilter"] = args ? args.instanceFilter : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osPolicies"] = args ? args.osPolicies : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rollout"] = args ? args.rollout : undefined;
            resourceInputs["skipAwaitRollout"] = args ? args.skipAwaitRollout : undefined;
            resourceInputs["baseline"] = undefined /*out*/;
            resourceInputs["deleted"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["revisionCreateTime"] = undefined /*out*/;
            resourceInputs["revisionId"] = undefined /*out*/;
            resourceInputs["rolloutState"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsPolicyAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OsPolicyAssignment resources.
 */
export interface OsPolicyAssignmentState {
    /**
     * Output only. Indicates that this revision has been successfully
     * rolled out in this zone and new VMs will be assigned OS policies from this
     * revision. For a given OS policy assignment, there is only one revision with
     * a value of `true` for this field.
     */
    baseline?: pulumi.Input<boolean>;
    /**
     * Output only. Indicates that this revision deletes the OS policy
     * assignment.
     */
    deleted?: pulumi.Input<boolean>;
    /**
     * Policy description. Length of the description is
     * limited to 1024 characters.
     *
     * description is limited to 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The etag for this OS policy assignment. If this is provided on
     * update, it must match the server's etag.
     */
    etag?: pulumi.Input<string>;
    /**
     * Filter to select VMs. Structure is
     * documented below.
     */
    instanceFilter?: pulumi.Input<inputs.osconfig.OsPolicyAssignmentInstanceFilter>;
    /**
     * The location for the resource
     */
    location?: pulumi.Input<string>;
    /**
     * Resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of OS policies to be applied to the VMs.
     * Structure is documented below.
     */
    osPolicies?: pulumi.Input<pulumi.Input<inputs.osconfig.OsPolicyAssignmentOsPolicy>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Output only. Indicates that reconciliation is in progress
     * for the revision. This value is `true` when the `rolloutState` is one of:
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * Output only. The timestamp that the revision was
     * created.
     */
    revisionCreateTime?: pulumi.Input<string>;
    /**
     * Output only. The assignment revision ID A new revision is
     * committed whenever a rollout is triggered for a OS policy assignment
     */
    revisionId?: pulumi.Input<string>;
    /**
     * Rollout to deploy the OS policy assignment. A rollout
     * is triggered in the following situations: 1) OSPolicyAssignment is created.
     * 2) OSPolicyAssignment is updated and the update contains changes to one of
     * the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment
     * is deleted. Structure is documented below.
     */
    rollout?: pulumi.Input<inputs.osconfig.OsPolicyAssignmentRollout>;
    /**
     * Output only. OS policy assignment rollout state
     */
    rolloutState?: pulumi.Input<string>;
    /**
     * Set to true to skip awaiting rollout
     * during resource creation and update.
     */
    skipAwaitRollout?: pulumi.Input<boolean>;
    /**
     * Output only. Server generated unique id for the OS policy assignment
     * resource.
     */
    uid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OsPolicyAssignment resource.
 */
export interface OsPolicyAssignmentArgs {
    /**
     * Policy description. Length of the description is
     * limited to 1024 characters.
     *
     * description is limited to 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Filter to select VMs. Structure is
     * documented below.
     */
    instanceFilter: pulumi.Input<inputs.osconfig.OsPolicyAssignmentInstanceFilter>;
    /**
     * The location for the resource
     */
    location: pulumi.Input<string>;
    /**
     * Resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of OS policies to be applied to the VMs.
     * Structure is documented below.
     */
    osPolicies: pulumi.Input<pulumi.Input<inputs.osconfig.OsPolicyAssignmentOsPolicy>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Rollout to deploy the OS policy assignment. A rollout
     * is triggered in the following situations: 1) OSPolicyAssignment is created.
     * 2) OSPolicyAssignment is updated and the update contains changes to one of
     * the following fields: - instanceFilter - osPolicies 3) OSPolicyAssignment
     * is deleted. Structure is documented below.
     */
    rollout: pulumi.Input<inputs.osconfig.OsPolicyAssignmentRollout>;
    /**
     * Set to true to skip awaiting rollout
     * during resource creation and update.
     */
    skipAwaitRollout?: pulumi.Input<boolean>;
}
