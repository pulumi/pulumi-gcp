// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * PolicyOrchestrator helps managing project+zone level policy resources (e.g.
 * OS Policy Assignments), by providing tools to create, update and delete them
 * across projects and locations, at scale.
 *
 * ## Example Usage
 *
 * ### Osconfigv2 Policy Orchestrator Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const policyOrchestrator = new gcp.osconfig.V2PolicyOrchestrator("policy_orchestrator", {
 *     policyOrchestratorId: "po",
 *     state: "ACTIVE",
 *     action: "UPSERT",
 *     orchestratedResource: {
 *         id: "test-orchestrated-resource",
 *         osPolicyAssignmentV1Payload: {
 *             osPolicies: [{
 *                 id: "test-os-policy",
 *                 mode: "VALIDATION",
 *                 resourceGroups: [{
 *                     resources: [{
 *                         id: "resource-tf",
 *                         file: {
 *                             content: "file-content-tf",
 *                             path: "file-path-tf-1",
 *                             state: "PRESENT",
 *                         },
 *                     }],
 *                 }],
 *             }],
 *             instanceFilter: {
 *                 inventories: [{
 *                     osShortName: "windows-10",
 *                 }],
 *             },
 *             rollout: {
 *                 disruptionBudget: {
 *                     percent: 100,
 *                 },
 *                 minWaitDuration: "60s",
 *             },
 *         },
 *     },
 *     labels: {
 *         state: "active",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * PolicyOrchestrator can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}`
 *
 * * `{{project}}/{{policy_orchestrator_id}}`
 *
 * * `{{policy_orchestrator_id}}`
 *
 * When using the `pulumi import` command, PolicyOrchestrator can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator default projects/{{project}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator default {{project}}/{{policy_orchestrator_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator default {{policy_orchestrator_id}}
 * ```
 */
export class V2PolicyOrchestrator extends pulumi.CustomResource {
    /**
     * Get an existing V2PolicyOrchestrator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V2PolicyOrchestratorState, opts?: pulumi.CustomResourceOptions): V2PolicyOrchestrator {
        return new V2PolicyOrchestrator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator';

    /**
     * Returns true if the given object is an instance of V2PolicyOrchestrator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V2PolicyOrchestrator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V2PolicyOrchestrator.__pulumiType;
    }

    /**
     * Required. Action to be done by the orchestrator in
     * `projects/{project_id}/zones/{zone_id}` locations defined by the
     * `orchestrationScope`. Allowed values:
     * - `UPSERT` - Orchestrator will create or update target resources.
     * - `DELETE` - Orchestrator will delete target resources, if they exist
     */
    declare public readonly action: pulumi.Output<string>;
    /**
     * Output only. Timestamp when the policy orchestrator resource was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Optional. Freeform text describing the purpose of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Immutable. Identifier. In form of
     * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Represents a resource that is being orchestrated by the policy orchestrator.
     * Structure is documented below.
     */
    declare public readonly orchestratedResource: pulumi.Output<outputs.osconfig.V2PolicyOrchestratorOrchestratedResource>;
    /**
     * Defines a set of selectors which drive which resources are in scope of policy
     * orchestration.
     * Structure is documented below.
     */
    declare public readonly orchestrationScope: pulumi.Output<outputs.osconfig.V2PolicyOrchestratorOrchestrationScope | undefined>;
    /**
     * Describes the state of the orchestration process.
     * Structure is documented below.
     */
    declare public /*out*/ readonly orchestrationStates: pulumi.Output<outputs.osconfig.V2PolicyOrchestratorOrchestrationState[]>;
    /**
     * Required. The logical identifier of the policy orchestrator, with the following
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the parent.
     */
    declare public readonly policyOrchestratorId: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Output only. Set to true, if the there are ongoing changes being applied by the
     * orchestrator.
     */
    declare public /*out*/ readonly reconciling: pulumi.Output<boolean>;
    /**
     * Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
     * Allowed values:
     * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
     * - `STOPPED` - orchestrator won't make any changes.
     * Note: There might be more states added in the future. We use string here
     * instead of an enum, to avoid the need of propagating new states to all the
     * client code.
     */
    declare public readonly state: pulumi.Output<string | undefined>;
    /**
     * Output only. Timestamp when the policy orchestrator resource was last modified.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a V2PolicyOrchestrator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V2PolicyOrchestratorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V2PolicyOrchestratorArgs | V2PolicyOrchestratorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V2PolicyOrchestratorState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["orchestratedResource"] = state?.orchestratedResource;
            resourceInputs["orchestrationScope"] = state?.orchestrationScope;
            resourceInputs["orchestrationStates"] = state?.orchestrationStates;
            resourceInputs["policyOrchestratorId"] = state?.policyOrchestratorId;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["reconciling"] = state?.reconciling;
            resourceInputs["state"] = state?.state;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as V2PolicyOrchestratorArgs | undefined;
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.orchestratedResource === undefined && !opts.urn) {
                throw new Error("Missing required property 'orchestratedResource'");
            }
            if (args?.policyOrchestratorId === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyOrchestratorId'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["orchestratedResource"] = args?.orchestratedResource;
            resourceInputs["orchestrationScope"] = args?.orchestrationScope;
            resourceInputs["policyOrchestratorId"] = args?.policyOrchestratorId;
            resourceInputs["project"] = args?.project;
            resourceInputs["state"] = args?.state;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["orchestrationStates"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(V2PolicyOrchestrator.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering V2PolicyOrchestrator resources.
 */
export interface V2PolicyOrchestratorState {
    /**
     * Required. Action to be done by the orchestrator in
     * `projects/{project_id}/zones/{zone_id}` locations defined by the
     * `orchestrationScope`. Allowed values:
     * - `UPSERT` - Orchestrator will create or update target resources.
     * - `DELETE` - Orchestrator will delete target resources, if they exist
     */
    action?: pulumi.Input<string>;
    /**
     * Output only. Timestamp when the policy orchestrator resource was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. Freeform text describing the purpose of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Immutable. Identifier. In form of
     * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
     */
    name?: pulumi.Input<string>;
    /**
     * Represents a resource that is being orchestrated by the policy orchestrator.
     * Structure is documented below.
     */
    orchestratedResource?: pulumi.Input<inputs.osconfig.V2PolicyOrchestratorOrchestratedResource>;
    /**
     * Defines a set of selectors which drive which resources are in scope of policy
     * orchestration.
     * Structure is documented below.
     */
    orchestrationScope?: pulumi.Input<inputs.osconfig.V2PolicyOrchestratorOrchestrationScope>;
    /**
     * Describes the state of the orchestration process.
     * Structure is documented below.
     */
    orchestrationStates?: pulumi.Input<pulumi.Input<inputs.osconfig.V2PolicyOrchestratorOrchestrationState>[]>;
    /**
     * Required. The logical identifier of the policy orchestrator, with the following
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the parent.
     */
    policyOrchestratorId?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. Set to true, if the there are ongoing changes being applied by the
     * orchestrator.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
     * Allowed values:
     * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
     * - `STOPPED` - orchestrator won't make any changes.
     * Note: There might be more states added in the future. We use string here
     * instead of an enum, to avoid the need of propagating new states to all the
     * client code.
     */
    state?: pulumi.Input<string>;
    /**
     * Output only. Timestamp when the policy orchestrator resource was last modified.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a V2PolicyOrchestrator resource.
 */
export interface V2PolicyOrchestratorArgs {
    /**
     * Required. Action to be done by the orchestrator in
     * `projects/{project_id}/zones/{zone_id}` locations defined by the
     * `orchestrationScope`. Allowed values:
     * - `UPSERT` - Orchestrator will create or update target resources.
     * - `DELETE` - Orchestrator will delete target resources, if they exist
     */
    action: pulumi.Input<string>;
    /**
     * Optional. Freeform text describing the purpose of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Represents a resource that is being orchestrated by the policy orchestrator.
     * Structure is documented below.
     */
    orchestratedResource: pulumi.Input<inputs.osconfig.V2PolicyOrchestratorOrchestratedResource>;
    /**
     * Defines a set of selectors which drive which resources are in scope of policy
     * orchestration.
     * Structure is documented below.
     */
    orchestrationScope?: pulumi.Input<inputs.osconfig.V2PolicyOrchestratorOrchestrationScope>;
    /**
     * Required. The logical identifier of the policy orchestrator, with the following
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the parent.
     */
    policyOrchestratorId: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
     * Allowed values:
     * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
     * - `STOPPED` - orchestrator won't make any changes.
     * Note: There might be more states added in the future. We use string here
     * instead of an enum, to avoid the need of propagating new states to all the
     * client code.
     */
    state?: pulumi.Input<string>;
}
