// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GuestPoliciesArgs, GuestPoliciesState } from "./guestPolicies";
export type GuestPolicies = import("./guestPolicies").GuestPolicies;
export const GuestPolicies: typeof import("./guestPolicies").GuestPolicies = null as any;
utilities.lazyLoad(exports, ["GuestPolicies"], () => require("./guestPolicies"));

export { OsPolicyAssignmentArgs, OsPolicyAssignmentState } from "./osPolicyAssignment";
export type OsPolicyAssignment = import("./osPolicyAssignment").OsPolicyAssignment;
export const OsPolicyAssignment: typeof import("./osPolicyAssignment").OsPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["OsPolicyAssignment"], () => require("./osPolicyAssignment"));

export { PatchDeploymentArgs, PatchDeploymentState } from "./patchDeployment";
export type PatchDeployment = import("./patchDeployment").PatchDeployment;
export const PatchDeployment: typeof import("./patchDeployment").PatchDeployment = null as any;
utilities.lazyLoad(exports, ["PatchDeployment"], () => require("./patchDeployment"));

export { V2PolicyOrchestratorArgs, V2PolicyOrchestratorState } from "./v2policyOrchestrator";
export type V2PolicyOrchestrator = import("./v2policyOrchestrator").V2PolicyOrchestrator;
export const V2PolicyOrchestrator: typeof import("./v2policyOrchestrator").V2PolicyOrchestrator = null as any;
utilities.lazyLoad(exports, ["V2PolicyOrchestrator"], () => require("./v2policyOrchestrator"));

export { V2PolicyOrchestratorForOrganizationArgs, V2PolicyOrchestratorForOrganizationState } from "./v2policyOrchestratorForOrganization";
export type V2PolicyOrchestratorForOrganization = import("./v2policyOrchestratorForOrganization").V2PolicyOrchestratorForOrganization;
export const V2PolicyOrchestratorForOrganization: typeof import("./v2policyOrchestratorForOrganization").V2PolicyOrchestratorForOrganization = null as any;
utilities.lazyLoad(exports, ["V2PolicyOrchestratorForOrganization"], () => require("./v2policyOrchestratorForOrganization"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:osconfig/guestPolicies:GuestPolicies":
                return new GuestPolicies(name, <any>undefined, { urn })
            case "gcp:osconfig/osPolicyAssignment:OsPolicyAssignment":
                return new OsPolicyAssignment(name, <any>undefined, { urn })
            case "gcp:osconfig/patchDeployment:PatchDeployment":
                return new PatchDeployment(name, <any>undefined, { urn })
            case "gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator":
                return new V2PolicyOrchestrator(name, <any>undefined, { urn })
            case "gcp:osconfig/v2PolicyOrchestratorForOrganization:V2PolicyOrchestratorForOrganization":
                return new V2PolicyOrchestratorForOrganization(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "osconfig/guestPolicies", _module)
pulumi.runtime.registerResourceModule("gcp", "osconfig/osPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("gcp", "osconfig/patchDeployment", _module)
pulumi.runtime.registerResourceModule("gcp", "osconfig/v2PolicyOrchestrator", _module)
pulumi.runtime.registerResourceModule("gcp", "osconfig/v2PolicyOrchestratorForOrganization", _module)
