// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export function getRegionSSLPolicy(args: GetRegionSSLPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetRegionSSLPolicyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:compute/getRegionSSLPolicy:getRegionSSLPolicy", {
        "name": args.name,
        "project": args.project,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegionSSLPolicy.
 */
export interface GetRegionSSLPolicyArgs {
    name: string;
    project?: string;
    region?: string;
}

/**
 * A collection of values returned by getRegionSSLPolicy.
 */
export interface GetRegionSSLPolicyResult {
    readonly creationTimestamp: string;
    readonly customFeatures: string[];
    readonly description: string;
    readonly enabledFeatures: string[];
    readonly fingerprint: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly minTlsVersion: string;
    readonly name: string;
    readonly profile: string;
    readonly project?: string;
    readonly region?: string;
    readonly selfLink: string;
}
export function getRegionSSLPolicyOutput(args: GetRegionSSLPolicyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRegionSSLPolicyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:compute/getRegionSSLPolicy:getRegionSSLPolicy", {
        "name": args.name,
        "project": args.project,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegionSSLPolicy.
 */
export interface GetRegionSSLPolicyOutputArgs {
    name: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}
