// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * VPN tunnel resource.
 *
 * To get more information about VpnTunnel, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/vpnTunnels)
 * * How-to Guides
 *     * [Cloud VPN Overview](https://cloud.google.com/vpn/docs/concepts/overview)
 *     * [Networks and Tunnel Routing](https://cloud.google.com/vpn/docs/concepts/choosing-networks-routing)
 *
 * > **Note:**  All arguments marked as write-only values will not be stored in the state: `sharedSecretWo`.
 * Read more about Write-only Attributes.
 *
 * ## Example Usage
 *
 * ### Vpn Tunnel Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network1 = new gcp.compute.Network("network1", {name: "network-1"});
 * const targetGateway = new gcp.compute.VPNGateway("target_gateway", {
 *     name: "vpn-1",
 *     network: network1.id,
 * });
 * const vpnStaticIp = new gcp.compute.Address("vpn_static_ip", {name: "vpn-static-ip"});
 * const frEsp = new gcp.compute.ForwardingRule("fr_esp", {
 *     name: "fr-esp",
 *     ipProtocol: "ESP",
 *     ipAddress: vpnStaticIp.address,
 *     target: targetGateway.id,
 * });
 * const frUdp500 = new gcp.compute.ForwardingRule("fr_udp500", {
 *     name: "fr-udp500",
 *     ipProtocol: "UDP",
 *     portRange: "500",
 *     ipAddress: vpnStaticIp.address,
 *     target: targetGateway.id,
 * });
 * const frUdp4500 = new gcp.compute.ForwardingRule("fr_udp4500", {
 *     name: "fr-udp4500",
 *     ipProtocol: "UDP",
 *     portRange: "4500",
 *     ipAddress: vpnStaticIp.address,
 *     target: targetGateway.id,
 * });
 * const tunnel1 = new gcp.compute.VPNTunnel("tunnel1", {
 *     name: "tunnel-1",
 *     peerIp: "15.0.0.120",
 *     sharedSecret: "a secret message",
 *     targetVpnGateway: targetGateway.id,
 *     labels: {
 *         foo: "bar",
 *     },
 * }, {
 *     dependsOn: [
 *         frEsp,
 *         frUdp500,
 *         frUdp4500,
 *     ],
 * });
 * const route1 = new gcp.compute.Route("route1", {
 *     name: "route1",
 *     network: network1.name,
 *     destRange: "15.0.0.0/24",
 *     priority: 1000,
 *     nextHopVpnTunnel: tunnel1.id,
 * });
 * ```
 * ### Vpn Tunnel Cipher Suite
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network1 = new gcp.compute.Network("network1", {name: "network-1"});
 * const targetGateway = new gcp.compute.VPNGateway("target_gateway", {
 *     name: "vpn-1",
 *     network: network1.id,
 * });
 * const vpnStaticIp = new gcp.compute.Address("vpn_static_ip", {name: "vpn-static-ip"});
 * const frEsp = new gcp.compute.ForwardingRule("fr_esp", {
 *     name: "fr-esp",
 *     ipProtocol: "ESP",
 *     ipAddress: vpnStaticIp.address,
 *     target: targetGateway.id,
 * });
 * const frUdp500 = new gcp.compute.ForwardingRule("fr_udp500", {
 *     name: "fr-udp500",
 *     ipProtocol: "UDP",
 *     portRange: "500",
 *     ipAddress: vpnStaticIp.address,
 *     target: targetGateway.id,
 * });
 * const frUdp4500 = new gcp.compute.ForwardingRule("fr_udp4500", {
 *     name: "fr-udp4500",
 *     ipProtocol: "UDP",
 *     portRange: "4500",
 *     ipAddress: vpnStaticIp.address,
 *     target: targetGateway.id,
 * });
 * const tunnel1 = new gcp.compute.VPNTunnel("tunnel1", {
 *     name: "tunnel-cipher",
 *     peerIp: "15.0.0.120",
 *     sharedSecret: "a secret message",
 *     targetVpnGateway: targetGateway.id,
 *     cipherSuite: {
 *         phase1: {
 *             encryptions: ["AES-CBC-256"],
 *             integrities: ["HMAC-SHA2-256-128"],
 *             prves: ["PRF-HMAC-SHA2-256"],
 *             dhs: ["Group-14"],
 *         },
 *         phase2: {
 *             encryptions: ["AES-CBC-128"],
 *             integrities: ["HMAC-SHA2-256-128"],
 *             pfs: ["Group-14"],
 *         },
 *     },
 *     labels: {
 *         foo: "bar",
 *     },
 * }, {
 *     dependsOn: [
 *         frEsp,
 *         frUdp500,
 *         frUdp4500,
 *     ],
 * });
 * const route1 = new gcp.compute.Route("route1", {
 *     name: "route1",
 *     network: network1.name,
 *     destRange: "15.0.0.0/24",
 *     priority: 1000,
 *     nextHopVpnTunnel: tunnel1.id,
 * });
 * ```
 *
 * ## Ephemeral Attributes Reference
 *
 * The following write-only attributes are supported:
 *
 * * `sharedSecretWo` -
 *   (Optional)
 *   Shared secret used to set the secure session between the Cloud VPN
 *   gateway and the peer VPN gateway.
 *    Note: This property is write-only and will not be read from the API. For more info see [updating write-only attributes](https://www.terraform.io/docs/providers/google/guides/using_write_only_attributes.html#updating-write-only-attributes)
 *   **Note**: This property is write-only and will not be read from the API.
 *
 * ## Import
 *
 * VpnTunnel can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/regions/{{region}}/vpnTunnels/{{name}}`
 *
 * * `{{project}}/{{region}}/{{name}}`
 *
 * * `{{region}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, VpnTunnel can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/vPNTunnel:VPNTunnel default projects/{{project}}/regions/{{region}}/vpnTunnels/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/vPNTunnel:VPNTunnel default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/vPNTunnel:VPNTunnel default {{region}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/vPNTunnel:VPNTunnel default {{name}}
 * ```
 */
export class VPNTunnel extends pulumi.CustomResource {
    /**
     * Get an existing VPNTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VPNTunnelState, opts?: pulumi.CustomResourceOptions): VPNTunnel {
        return new VPNTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/vPNTunnel:VPNTunnel';

    /**
     * Returns true if the given object is an instance of VPNTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VPNTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VPNTunnel.__pulumiType;
    }

    /**
     * User specified list of ciphers to use for the phase 1 and phase 2 of the IKE protocol.
     * Structure is documented below.
     */
    declare public readonly cipherSuite: pulumi.Output<outputs.compute.VPNTunnelCipherSuite | undefined>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    declare public /*out*/ readonly creationTimestamp: pulumi.Output<string>;
    /**
     * An optional description of this resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Detailed status message for the VPN tunnel.
     */
    declare public /*out*/ readonly detailedStatus: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * IKE protocol version to use when establishing the VPN tunnel with
     * peer VPN gateway.
     * Acceptable IKE versions are 1 or 2. Default version is 2.
     */
    declare public readonly ikeVersion: pulumi.Output<number | undefined>;
    /**
     * The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     */
    declare public /*out*/ readonly labelFingerprint: pulumi.Output<string>;
    /**
     * Labels to apply to this VpnTunnel.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Local traffic selector to use when establishing the VPN tunnel with
     * peer VPN gateway. The value should be a CIDR formatted string,
     * for example `192.168.0.0/16`. The ranges should be disjoint.
     * Only IPv4 is supported.
     */
    declare public readonly localTrafficSelectors: pulumi.Output<string[]>;
    /**
     * Name of the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63
     * characters long and match the regular expression
     * `a-z?` which means the first character
     * must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * URL of the peer side external VPN gateway to which this VPN tunnel is connected.
     */
    declare public readonly peerExternalGateway: pulumi.Output<string | undefined>;
    /**
     * The interface ID of the external VPN gateway to which this VPN tunnel is connected.
     */
    declare public readonly peerExternalGatewayInterface: pulumi.Output<number | undefined>;
    /**
     * URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected.
     * If provided, the VPN tunnel will automatically use the same vpnGatewayInterface
     * ID in the peer GCP VPN gateway.
     * This field must reference a `gcp.compute.HaVpnGateway` resource.
     */
    declare public readonly peerGcpGateway: pulumi.Output<string | undefined>;
    /**
     * IP address of the peer VPN gateway. Only IPv4 is supported.
     */
    declare public readonly peerIp: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The region where the tunnel is located. If unset, is set to the region of `targetVpnGateway`.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Remote traffic selector to use when establishing the VPN tunnel with
     * peer VPN gateway. The value should be a CIDR formatted string,
     * for example `192.168.0.0/16`. The ranges should be disjoint.
     * Only IPv4 is supported.
     */
    declare public readonly remoteTrafficSelectors: pulumi.Output<string[]>;
    /**
     * URL of router resource to be used for dynamic routing.
     */
    declare public readonly router: pulumi.Output<string | undefined>;
    /**
     * The URI of the created resource.
     */
    declare public /*out*/ readonly selfLink: pulumi.Output<string>;
    /**
     * Shared secret used to set the secure session between the Cloud VPN
     * gateway and the peer VPN gateway.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     */
    declare public readonly sharedSecret: pulumi.Output<string | undefined>;
    /**
     * Hash of the shared secret.
     */
    declare public /*out*/ readonly sharedSecretHash: pulumi.Output<string>;
    /**
     * Triggers update of sharedSecretWo write-only. For more info see [updating write-only attributes](https://www.terraform.io/docs/providers/google/guides/using_write_only_attributes.html#updating-write-only-attributes)
     */
    declare public readonly sharedSecretWoVersion: pulumi.Output<string | undefined>;
    /**
     * URL of the Target VPN gateway with which this VPN tunnel is
     * associated.
     */
    declare public readonly targetVpnGateway: pulumi.Output<string | undefined>;
    /**
     * The unique identifier for the resource. This identifier is defined by the server.
     */
    declare public /*out*/ readonly tunnelId: pulumi.Output<string>;
    /**
     * URL of the VPN gateway with which this VPN tunnel is associated.
     * This must be used if a High Availability VPN gateway resource is created.
     * This field must reference a `gcp.compute.HaVpnGateway` resource.
     */
    declare public readonly vpnGateway: pulumi.Output<string | undefined>;
    /**
     * The interface ID of the VPN gateway with which this VPN tunnel is associated.
     */
    declare public readonly vpnGatewayInterface: pulumi.Output<number | undefined>;

    /**
     * Create a VPNTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VPNTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VPNTunnelArgs | VPNTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VPNTunnelState | undefined;
            resourceInputs["cipherSuite"] = state?.cipherSuite;
            resourceInputs["creationTimestamp"] = state?.creationTimestamp;
            resourceInputs["description"] = state?.description;
            resourceInputs["detailedStatus"] = state?.detailedStatus;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["ikeVersion"] = state?.ikeVersion;
            resourceInputs["labelFingerprint"] = state?.labelFingerprint;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["localTrafficSelectors"] = state?.localTrafficSelectors;
            resourceInputs["name"] = state?.name;
            resourceInputs["peerExternalGateway"] = state?.peerExternalGateway;
            resourceInputs["peerExternalGatewayInterface"] = state?.peerExternalGatewayInterface;
            resourceInputs["peerGcpGateway"] = state?.peerGcpGateway;
            resourceInputs["peerIp"] = state?.peerIp;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["region"] = state?.region;
            resourceInputs["remoteTrafficSelectors"] = state?.remoteTrafficSelectors;
            resourceInputs["router"] = state?.router;
            resourceInputs["selfLink"] = state?.selfLink;
            resourceInputs["sharedSecret"] = state?.sharedSecret;
            resourceInputs["sharedSecretHash"] = state?.sharedSecretHash;
            resourceInputs["sharedSecretWoVersion"] = state?.sharedSecretWoVersion;
            resourceInputs["targetVpnGateway"] = state?.targetVpnGateway;
            resourceInputs["tunnelId"] = state?.tunnelId;
            resourceInputs["vpnGateway"] = state?.vpnGateway;
            resourceInputs["vpnGatewayInterface"] = state?.vpnGatewayInterface;
        } else {
            const args = argsOrState as VPNTunnelArgs | undefined;
            resourceInputs["cipherSuite"] = args?.cipherSuite;
            resourceInputs["description"] = args?.description;
            resourceInputs["ikeVersion"] = args?.ikeVersion;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["localTrafficSelectors"] = args?.localTrafficSelectors;
            resourceInputs["name"] = args?.name;
            resourceInputs["peerExternalGateway"] = args?.peerExternalGateway;
            resourceInputs["peerExternalGatewayInterface"] = args?.peerExternalGatewayInterface;
            resourceInputs["peerGcpGateway"] = args?.peerGcpGateway;
            resourceInputs["peerIp"] = args?.peerIp;
            resourceInputs["project"] = args?.project;
            resourceInputs["region"] = args?.region;
            resourceInputs["remoteTrafficSelectors"] = args?.remoteTrafficSelectors;
            resourceInputs["router"] = args?.router;
            resourceInputs["sharedSecret"] = args?.sharedSecret ? pulumi.secret(args.sharedSecret) : undefined;
            resourceInputs["sharedSecretWoVersion"] = args?.sharedSecretWoVersion;
            resourceInputs["targetVpnGateway"] = args?.targetVpnGateway;
            resourceInputs["vpnGateway"] = args?.vpnGateway;
            resourceInputs["vpnGatewayInterface"] = args?.vpnGatewayInterface;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["detailedStatus"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["labelFingerprint"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["sharedSecretHash"] = undefined /*out*/;
            resourceInputs["tunnelId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels", "sharedSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VPNTunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VPNTunnel resources.
 */
export interface VPNTunnelState {
    /**
     * User specified list of ciphers to use for the phase 1 and phase 2 of the IKE protocol.
     * Structure is documented below.
     */
    cipherSuite?: pulumi.Input<inputs.compute.VPNTunnelCipherSuite>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    creationTimestamp?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Detailed status message for the VPN tunnel.
     */
    detailedStatus?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * IKE protocol version to use when establishing the VPN tunnel with
     * peer VPN gateway.
     * Acceptable IKE versions are 1 or 2. Default version is 2.
     */
    ikeVersion?: pulumi.Input<number>;
    /**
     * The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     */
    labelFingerprint?: pulumi.Input<string>;
    /**
     * Labels to apply to this VpnTunnel.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Local traffic selector to use when establishing the VPN tunnel with
     * peer VPN gateway. The value should be a CIDR formatted string,
     * for example `192.168.0.0/16`. The ranges should be disjoint.
     * Only IPv4 is supported.
     */
    localTrafficSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63
     * characters long and match the regular expression
     * `a-z?` which means the first character
     * must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    /**
     * URL of the peer side external VPN gateway to which this VPN tunnel is connected.
     */
    peerExternalGateway?: pulumi.Input<string>;
    /**
     * The interface ID of the external VPN gateway to which this VPN tunnel is connected.
     */
    peerExternalGatewayInterface?: pulumi.Input<number>;
    /**
     * URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected.
     * If provided, the VPN tunnel will automatically use the same vpnGatewayInterface
     * ID in the peer GCP VPN gateway.
     * This field must reference a `gcp.compute.HaVpnGateway` resource.
     */
    peerGcpGateway?: pulumi.Input<string>;
    /**
     * IP address of the peer VPN gateway. Only IPv4 is supported.
     */
    peerIp?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The region where the tunnel is located. If unset, is set to the region of `targetVpnGateway`.
     */
    region?: pulumi.Input<string>;
    /**
     * Remote traffic selector to use when establishing the VPN tunnel with
     * peer VPN gateway. The value should be a CIDR formatted string,
     * for example `192.168.0.0/16`. The ranges should be disjoint.
     * Only IPv4 is supported.
     */
    remoteTrafficSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL of router resource to be used for dynamic routing.
     */
    router?: pulumi.Input<string>;
    /**
     * The URI of the created resource.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * Shared secret used to set the secure session between the Cloud VPN
     * gateway and the peer VPN gateway.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     */
    sharedSecret?: pulumi.Input<string>;
    /**
     * Hash of the shared secret.
     */
    sharedSecretHash?: pulumi.Input<string>;
    /**
     * Triggers update of sharedSecretWo write-only. For more info see [updating write-only attributes](https://www.terraform.io/docs/providers/google/guides/using_write_only_attributes.html#updating-write-only-attributes)
     */
    sharedSecretWoVersion?: pulumi.Input<string>;
    /**
     * URL of the Target VPN gateway with which this VPN tunnel is
     * associated.
     */
    targetVpnGateway?: pulumi.Input<string>;
    /**
     * The unique identifier for the resource. This identifier is defined by the server.
     */
    tunnelId?: pulumi.Input<string>;
    /**
     * URL of the VPN gateway with which this VPN tunnel is associated.
     * This must be used if a High Availability VPN gateway resource is created.
     * This field must reference a `gcp.compute.HaVpnGateway` resource.
     */
    vpnGateway?: pulumi.Input<string>;
    /**
     * The interface ID of the VPN gateway with which this VPN tunnel is associated.
     */
    vpnGatewayInterface?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VPNTunnel resource.
 */
export interface VPNTunnelArgs {
    /**
     * User specified list of ciphers to use for the phase 1 and phase 2 of the IKE protocol.
     * Structure is documented below.
     */
    cipherSuite?: pulumi.Input<inputs.compute.VPNTunnelCipherSuite>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * IKE protocol version to use when establishing the VPN tunnel with
     * peer VPN gateway.
     * Acceptable IKE versions are 1 or 2. Default version is 2.
     */
    ikeVersion?: pulumi.Input<number>;
    /**
     * Labels to apply to this VpnTunnel.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Local traffic selector to use when establishing the VPN tunnel with
     * peer VPN gateway. The value should be a CIDR formatted string,
     * for example `192.168.0.0/16`. The ranges should be disjoint.
     * Only IPv4 is supported.
     */
    localTrafficSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63
     * characters long and match the regular expression
     * `a-z?` which means the first character
     * must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    /**
     * URL of the peer side external VPN gateway to which this VPN tunnel is connected.
     */
    peerExternalGateway?: pulumi.Input<string>;
    /**
     * The interface ID of the external VPN gateway to which this VPN tunnel is connected.
     */
    peerExternalGatewayInterface?: pulumi.Input<number>;
    /**
     * URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected.
     * If provided, the VPN tunnel will automatically use the same vpnGatewayInterface
     * ID in the peer GCP VPN gateway.
     * This field must reference a `gcp.compute.HaVpnGateway` resource.
     */
    peerGcpGateway?: pulumi.Input<string>;
    /**
     * IP address of the peer VPN gateway. Only IPv4 is supported.
     */
    peerIp?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region where the tunnel is located. If unset, is set to the region of `targetVpnGateway`.
     */
    region?: pulumi.Input<string>;
    /**
     * Remote traffic selector to use when establishing the VPN tunnel with
     * peer VPN gateway. The value should be a CIDR formatted string,
     * for example `192.168.0.0/16`. The ranges should be disjoint.
     * Only IPv4 is supported.
     */
    remoteTrafficSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL of router resource to be used for dynamic routing.
     */
    router?: pulumi.Input<string>;
    /**
     * Shared secret used to set the secure session between the Cloud VPN
     * gateway and the peer VPN gateway.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     */
    sharedSecret?: pulumi.Input<string>;
    /**
     * Triggers update of sharedSecretWo write-only. For more info see [updating write-only attributes](https://www.terraform.io/docs/providers/google/guides/using_write_only_attributes.html#updating-write-only-attributes)
     */
    sharedSecretWoVersion?: pulumi.Input<string>;
    /**
     * URL of the Target VPN gateway with which this VPN tunnel is
     * associated.
     */
    targetVpnGateway?: pulumi.Input<string>;
    /**
     * URL of the VPN gateway with which this VPN tunnel is associated.
     * This must be used if a High Availability VPN gateway resource is created.
     * This field must reference a `gcp.compute.HaVpnGateway` resource.
     */
    vpnGateway?: pulumi.Input<string>;
    /**
     * The interface ID of the VPN gateway with which this VPN tunnel is associated.
     */
    vpnGatewayInterface?: pulumi.Input<number>;
}
