// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides access to available Google Compute machine types in a zone for a given project.
 * See more about [machine type availability](https://cloud.google.com/compute/docs/regions-zones#available) in the upstream docs.
 *
 * To get more information about machine types, see:
 *
 * * [API Documentation](https://cloud.google.com/compute/docs/reference/rest/v1/machineTypes/list)
 * * [Comparison Guide](https://cloud.google.com/compute/docs/machine-resource)
 *
 * ## Example Usage
 * ### Property-Based Availability
 *
 * Create a VM instance template for each machine type with 16GB of memory and 8 CPUs available in the provided zone.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * function notImplemented(message: string) {
 *     throw new Error(message);
 * }
 *
 * const example = gcp.compute.getMachineTypes({
 *     filter: "memoryMb = 16384 AND guestCpus = 8",
 *     zone: zone,
 * });
 * const exampleInstanceTemplate: gcp.compute.InstanceTemplate[] = [];
 * for (const range = {value: 0}; range.value < notImplemented("toset(data.google_compute_machine_types.example.machine_types[*].name)"); range.value++) {
 *     exampleInstanceTemplate.push(new gcp.compute.InstanceTemplate(`example-${range.value}`, {
 *         machineType: range.value,
 *         disks: [{
 *             sourceImage: "debian-cloud/debian-11",
 *             autoDelete: true,
 *             boot: true,
 *         }],
 *     }));
 * }
 * ```
 * ### Machine Family Preference
 *
 * Create an instance template, preferring `c3` machine family if available in the provided zone, otherwise falling back to `c2` and finally `n2`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * function notImplemented(message: string) {
 *     throw new Error(message);
 * }
 *
 * const example = gcp.compute.getMachineTypes({
 *     filter: "memoryMb = 16384 AND guestCpus = 4",
 *     zone: zone,
 * });
 * const exampleInstanceTemplate = new gcp.compute.InstanceTemplate("example", {
 *     machineType: notImplemented(`coalescelist(
 * [formtindata.google_compute_machine_types.example.machine_types:mt.nameifstartswith(mt.name,"c3-")],
 * [formtindata.google_compute_machine_types.example.machine_types:mt.nameifstartswith(mt.name,"c2-")],
 * [formtindata.google_compute_machine_types.example.machine_types:mt.nameifstartswith(mt.name,"n2-")],
 * )`)[0],
 *     disks: [{
 *         sourceImage: "debian-cloud/debian-11",
 *         autoDelete: true,
 *         boot: true,
 *     }],
 * });
 * ```
 */
export function getMachineTypes(args?: GetMachineTypesArgs, opts?: pulumi.InvokeOptions): Promise<GetMachineTypesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:compute/getMachineTypes:getMachineTypes", {
        "filter": args.filter,
        "project": args.project,
        "zone": args.zone,
    }, opts);
}

/**
 * A collection of arguments for invoking getMachineTypes.
 */
export interface GetMachineTypesArgs {
    /**
     * A filter expression that filters machine types listed in the response.
     */
    filter?: string;
    /**
     * Project from which to list available zones. Defaults to project declared in the provider.
     */
    project?: string;
    /**
     * Zone from which to list machine types.
     */
    zone?: string;
}

/**
 * A collection of values returned by getMachineTypes.
 */
export interface GetMachineTypesResult {
    readonly filter?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of machine types matching the provided filter. Structure is documented below.
     */
    readonly machineTypes: outputs.compute.GetMachineTypesMachineType[];
    readonly project: string;
    readonly zone: string;
}
/**
 * Provides access to available Google Compute machine types in a zone for a given project.
 * See more about [machine type availability](https://cloud.google.com/compute/docs/regions-zones#available) in the upstream docs.
 *
 * To get more information about machine types, see:
 *
 * * [API Documentation](https://cloud.google.com/compute/docs/reference/rest/v1/machineTypes/list)
 * * [Comparison Guide](https://cloud.google.com/compute/docs/machine-resource)
 *
 * ## Example Usage
 * ### Property-Based Availability
 *
 * Create a VM instance template for each machine type with 16GB of memory and 8 CPUs available in the provided zone.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * function notImplemented(message: string) {
 *     throw new Error(message);
 * }
 *
 * const example = gcp.compute.getMachineTypes({
 *     filter: "memoryMb = 16384 AND guestCpus = 8",
 *     zone: zone,
 * });
 * const exampleInstanceTemplate: gcp.compute.InstanceTemplate[] = [];
 * for (const range = {value: 0}; range.value < notImplemented("toset(data.google_compute_machine_types.example.machine_types[*].name)"); range.value++) {
 *     exampleInstanceTemplate.push(new gcp.compute.InstanceTemplate(`example-${range.value}`, {
 *         machineType: range.value,
 *         disks: [{
 *             sourceImage: "debian-cloud/debian-11",
 *             autoDelete: true,
 *             boot: true,
 *         }],
 *     }));
 * }
 * ```
 * ### Machine Family Preference
 *
 * Create an instance template, preferring `c3` machine family if available in the provided zone, otherwise falling back to `c2` and finally `n2`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * function notImplemented(message: string) {
 *     throw new Error(message);
 * }
 *
 * const example = gcp.compute.getMachineTypes({
 *     filter: "memoryMb = 16384 AND guestCpus = 4",
 *     zone: zone,
 * });
 * const exampleInstanceTemplate = new gcp.compute.InstanceTemplate("example", {
 *     machineType: notImplemented(`coalescelist(
 * [formtindata.google_compute_machine_types.example.machine_types:mt.nameifstartswith(mt.name,"c3-")],
 * [formtindata.google_compute_machine_types.example.machine_types:mt.nameifstartswith(mt.name,"c2-")],
 * [formtindata.google_compute_machine_types.example.machine_types:mt.nameifstartswith(mt.name,"n2-")],
 * )`)[0],
 *     disks: [{
 *         sourceImage: "debian-cloud/debian-11",
 *         autoDelete: true,
 *         boot: true,
 *     }],
 * });
 * ```
 */
export function getMachineTypesOutput(args?: GetMachineTypesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMachineTypesResult> {
    return pulumi.output(args).apply((a: any) => getMachineTypes(a, opts))
}

/**
 * A collection of arguments for invoking getMachineTypes.
 */
export interface GetMachineTypesOutputArgs {
    /**
     * A filter expression that filters machine types listed in the response.
     */
    filter?: pulumi.Input<string>;
    /**
     * Project from which to list available zones. Defaults to project declared in the provider.
     */
    project?: pulumi.Input<string>;
    /**
     * Zone from which to list machine types.
     */
    zone?: pulumi.Input<string>;
}
