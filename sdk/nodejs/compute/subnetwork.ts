// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";

/**
 * Manages a subnetwork within GCE. For more information see
 * [the official documentation](https://cloud.google.com/compute/docs/vpc/#vpc_networks_and_subnets)
 * and
 * [API](https://cloud.google.com/compute/docs/reference/latest/subnetworks).
 */
export class Subnetwork extends pulumi.CustomResource {
    /**
     * Get an existing Subnetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetworkState): Subnetwork {
        return new Subnetwork(name, <any>state, { id });
    }

    /**
     * Description of this subnetwork.
     */
    public readonly description: pulumi.Output<string | undefined>;
    /**
     * )
     * Set to `true` to enable [flow logs](https://cloud.google.com/vpc/docs/using-flow-logs)
     * for this subnetwork.
     */
    public readonly enableFlowLogs: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly fingerprint: pulumi.Output<string>;
    /**
     * The IP address of the gateway.
     */
    public /*out*/ readonly gatewayAddress: pulumi.Output<string>;
    /**
     * The range of IP addresses belonging to this subnetwork secondary range. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network.
     */
    public readonly ipCidrRange: pulumi.Output<string>;
    /**
     * A unique name for the resource, required by GCE.
     * Changing this forces a new resource to be created.
     */
    public readonly name: pulumi.Output<string>;
    /**
     * The network name or resource link to the parent
     * network of this subnetwork. The parent network must have been created
     * in custom subnet mode.
     */
    public readonly network: pulumi.Output<string>;
    /**
     * Whether the VMs in this subnet
     * can access Google services without assigned external IP
     * addresses.
     */
    public readonly privateIpGoogleAccess: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    public readonly project: pulumi.Output<string>;
    /**
     * The region this subnetwork will be created in. If
     * unspecified, this defaults to the region configured in the provider.
     */
    public readonly region: pulumi.Output<string>;
    /**
     * ) An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. Structure is documented below.
     */
    public readonly secondaryIpRanges: pulumi.Output<{ ipCidrRange: string, rangeName: string }[] | undefined>;
    /**
     * The URI of the created resource.
     */
    public /*out*/ readonly selfLink: pulumi.Output<string>;

    /**
     * Create a Subnetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetworkArgs, opts?: pulumi.ResourceOptions)
    constructor(name: string, argsOrState?: SubnetworkArgs | SubnetworkState, opts?: pulumi.ResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: SubnetworkState = argsOrState as SubnetworkState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["enableFlowLogs"] = state ? state.enableFlowLogs : undefined;
            inputs["fingerprint"] = state ? state.fingerprint : undefined;
            inputs["gatewayAddress"] = state ? state.gatewayAddress : undefined;
            inputs["ipCidrRange"] = state ? state.ipCidrRange : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["privateIpGoogleAccess"] = state ? state.privateIpGoogleAccess : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["secondaryIpRanges"] = state ? state.secondaryIpRanges : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
        } else {
            const args = argsOrState as SubnetworkArgs | undefined;
            if (!args || args.ipCidrRange === undefined) {
                throw new Error("Missing required property 'ipCidrRange'");
            }
            if (!args || args.network === undefined) {
                throw new Error("Missing required property 'network'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["enableFlowLogs"] = args ? args.enableFlowLogs : undefined;
            inputs["ipCidrRange"] = args ? args.ipCidrRange : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["privateIpGoogleAccess"] = args ? args.privateIpGoogleAccess : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["secondaryIpRanges"] = args ? args.secondaryIpRanges : undefined;
            inputs["fingerprint"] = undefined /*out*/;
            inputs["gatewayAddress"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
        }
        super("gcp:compute/subnetwork:Subnetwork", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subnetwork resources.
 */
export interface SubnetworkState {
    /**
     * Description of this subnetwork.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * )
     * Set to `true` to enable [flow logs](https://cloud.google.com/vpc/docs/using-flow-logs)
     * for this subnetwork.
     */
    readonly enableFlowLogs?: pulumi.Input<boolean>;
    readonly fingerprint?: pulumi.Input<string>;
    /**
     * The IP address of the gateway.
     */
    readonly gatewayAddress?: pulumi.Input<string>;
    /**
     * The range of IP addresses belonging to this subnetwork secondary range. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network.
     */
    readonly ipCidrRange?: pulumi.Input<string>;
    /**
     * A unique name for the resource, required by GCE.
     * Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The network name or resource link to the parent
     * network of this subnetwork. The parent network must have been created
     * in custom subnet mode.
     */
    readonly network?: pulumi.Input<string>;
    /**
     * Whether the VMs in this subnet
     * can access Google services without assigned external IP
     * addresses.
     */
    readonly privateIpGoogleAccess?: pulumi.Input<boolean>;
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The region this subnetwork will be created in. If
     * unspecified, this defaults to the region configured in the provider.
     */
    readonly region?: pulumi.Input<string>;
    /**
     * ) An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. Structure is documented below.
     */
    readonly secondaryIpRanges?: pulumi.Input<{ ipCidrRange: pulumi.Input<string>, rangeName: pulumi.Input<string> }[]>;
    /**
     * The URI of the created resource.
     */
    readonly selfLink?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subnetwork resource.
 */
export interface SubnetworkArgs {
    /**
     * Description of this subnetwork.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * )
     * Set to `true` to enable [flow logs](https://cloud.google.com/vpc/docs/using-flow-logs)
     * for this subnetwork.
     */
    readonly enableFlowLogs?: pulumi.Input<boolean>;
    /**
     * The range of IP addresses belonging to this subnetwork secondary range. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network.
     */
    readonly ipCidrRange: pulumi.Input<string>;
    /**
     * A unique name for the resource, required by GCE.
     * Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The network name or resource link to the parent
     * network of this subnetwork. The parent network must have been created
     * in custom subnet mode.
     */
    readonly network: pulumi.Input<string>;
    /**
     * Whether the VMs in this subnet
     * can access Google services without assigned external IP
     * addresses.
     */
    readonly privateIpGoogleAccess?: pulumi.Input<boolean>;
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The region this subnetwork will be created in. If
     * unspecified, this defaults to the region configured in the provider.
     */
    readonly region?: pulumi.Input<string>;
    /**
     * ) An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. Structure is documented below.
     */
    readonly secondaryIpRanges?: pulumi.Input<{ ipCidrRange: pulumi.Input<string>, rangeName: pulumi.Input<string> }[]>;
}
