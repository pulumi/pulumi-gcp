// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export function getResourcePolicy(args: GetResourcePolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetResourcePolicyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:compute/getResourcePolicy:getResourcePolicy", {
        "name": args.name,
        "project": args.project,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getResourcePolicy.
 */
export interface GetResourcePolicyArgs {
    /**
     * The name of the Resource Policy.
     */
    name: string;
    /**
     * Project from which to list the Resource Policy. Defaults to project declared in the provider.
     */
    project?: string;
    /**
     * Region where the Resource Policy resides.
     */
    region?: string;
}

/**
 * A collection of values returned by getResourcePolicy.
 */
export interface GetResourcePolicyResult {
    /**
     * Description of this Resource Policy.
     */
    readonly description: string;
    readonly diskConsistencyGroupPolicies: outputs.compute.GetResourcePolicyDiskConsistencyGroupPolicy[];
    readonly groupPlacementPolicies: outputs.compute.GetResourcePolicyGroupPlacementPolicy[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceSchedulePolicies: outputs.compute.GetResourcePolicyInstanceSchedulePolicy[];
    readonly name: string;
    readonly project?: string;
    readonly region?: string;
    /**
     * The URI of the resource.
     */
    readonly selfLink: string;
    readonly snapshotSchedulePolicies: outputs.compute.GetResourcePolicySnapshotSchedulePolicy[];
    readonly workloadPolicies: outputs.compute.GetResourcePolicyWorkloadPolicy[];
}
export function getResourcePolicyOutput(args: GetResourcePolicyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetResourcePolicyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:compute/getResourcePolicy:getResourcePolicy", {
        "name": args.name,
        "project": args.project,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getResourcePolicy.
 */
export interface GetResourcePolicyOutputArgs {
    /**
     * The name of the Resource Policy.
     */
    name: pulumi.Input<string>;
    /**
     * Project from which to list the Resource Policy. Defaults to project declared in the provider.
     */
    project?: pulumi.Input<string>;
    /**
     * Region where the Resource Policy resides.
     */
    region?: pulumi.Input<string>;
}
