// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Starts and stops asynchronous persistent disk replication. For more information
 * see [the official documentation](https://cloud.google.com/compute/docs/disks/async-pd/about)
 * and the [API](https://cloud.google.com/compute/docs/reference/rest/beta/disks).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary_disk = new gcp.compute.Disk("primary-disk", {
 *     type: "pd-ssd",
 *     zone: "europe-west4-a",
 *     physicalBlockSizeBytes: 4096,
 * });
 * const secondary_disk = new gcp.compute.Disk("secondary-disk", {
 *     type: "pd-ssd",
 *     zone: "europe-west3-a",
 *     asyncPrimaryDisk: {
 *         disk: primary_disk.id,
 *     },
 *     physicalBlockSizeBytes: 4096,
 * });
 * const replication = new gcp.compute.DiskAsyncReplication("replication", {
 *     primaryDisk: primary_disk.id,
 *     secondaryDisk: {
 *         disk: secondary_disk.id,
 *     },
 * });
 * ```
 */
export class DiskAsyncReplication extends pulumi.CustomResource {
    /**
     * Get an existing DiskAsyncReplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiskAsyncReplicationState, opts?: pulumi.CustomResourceOptions): DiskAsyncReplication {
        return new DiskAsyncReplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/diskAsyncReplication:DiskAsyncReplication';

    /**
     * Returns true if the given object is an instance of DiskAsyncReplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiskAsyncReplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiskAsyncReplication.__pulumiType;
    }

    /**
     * The primary disk (source of replication).
     */
    public readonly primaryDisk!: pulumi.Output<string>;
    /**
     * The secondary disk (target of replication). You can specify only one value. Structure is documented below.
     *
     * The `secondaryDisk` block includes:
     */
    public readonly secondaryDisk!: pulumi.Output<outputs.compute.DiskAsyncReplicationSecondaryDisk>;

    /**
     * Create a DiskAsyncReplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiskAsyncReplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiskAsyncReplicationArgs | DiskAsyncReplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiskAsyncReplicationState | undefined;
            resourceInputs["primaryDisk"] = state ? state.primaryDisk : undefined;
            resourceInputs["secondaryDisk"] = state ? state.secondaryDisk : undefined;
        } else {
            const args = argsOrState as DiskAsyncReplicationArgs | undefined;
            if ((!args || args.primaryDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryDisk'");
            }
            if ((!args || args.secondaryDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secondaryDisk'");
            }
            resourceInputs["primaryDisk"] = args ? args.primaryDisk : undefined;
            resourceInputs["secondaryDisk"] = args ? args.secondaryDisk : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiskAsyncReplication.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DiskAsyncReplication resources.
 */
export interface DiskAsyncReplicationState {
    /**
     * The primary disk (source of replication).
     */
    primaryDisk?: pulumi.Input<string>;
    /**
     * The secondary disk (target of replication). You can specify only one value. Structure is documented below.
     *
     * The `secondaryDisk` block includes:
     */
    secondaryDisk?: pulumi.Input<inputs.compute.DiskAsyncReplicationSecondaryDisk>;
}

/**
 * The set of arguments for constructing a DiskAsyncReplication resource.
 */
export interface DiskAsyncReplicationArgs {
    /**
     * The primary disk (source of replication).
     */
    primaryDisk: pulumi.Input<string>;
    /**
     * The secondary disk (target of replication). You can specify only one value. Structure is documented below.
     *
     * The `secondaryDisk` block includes:
     */
    secondaryDisk: pulumi.Input<inputs.compute.DiskAsyncReplicationSecondaryDisk>;
}
