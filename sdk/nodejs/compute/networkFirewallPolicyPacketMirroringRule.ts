// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Represents a packet mirroring rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (mirror or do_not_mirror).
 *
 * To get more information about NetworkFirewallPolicyPacketMirroringRule, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/networkFirewallPolicies/addPacketMirroringRule)
 *
 * ## Example Usage
 *
 * ### Compute Network Firewall Policy Packet Mirroring Rule
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const _default = new gcp.compute.Network("default", {
 *     name: "fw-network",
 *     autoCreateSubnetworks: false,
 * });
 * const basicNetworkFirewallPolicy = new gcp.compute.NetworkFirewallPolicy("basic_network_firewall_policy", {
 *     name: "fw-policy",
 *     description: "Sample global network firewall policy",
 *     project: "my-project-name",
 * });
 * const defaultMirroringDeploymentGroup = new gcp.networksecurity.MirroringDeploymentGroup("default", {
 *     mirroringDeploymentGroupId: "deployment-group",
 *     location: "global",
 *     network: _default.id,
 * });
 * const defaultMirroringEndpointGroup = new gcp.networksecurity.MirroringEndpointGroup("default", {
 *     mirroringEndpointGroupId: "endpoint-group",
 *     location: "global",
 *     mirroringDeploymentGroup: defaultMirroringDeploymentGroup.id,
 * });
 * const defaultSecurityProfile = new gcp.networksecurity.SecurityProfile("default", {
 *     name: "sec-profile",
 *     parent: "organizations/123456789",
 *     description: "my description",
 *     type: "CUSTOM_MIRRORING",
 *     customMirroringProfile: {
 *         mirroringEndpointGroup: defaultMirroringEndpointGroup.id,
 *     },
 * });
 * const securityProfileGroup1 = new gcp.networksecurity.SecurityProfileGroup("security_profile_group_1", {
 *     name: "sec-profile-group",
 *     parent: "organizations/123456789",
 *     description: "my description",
 *     customMirroringProfile: defaultSecurityProfile.id,
 * });
 * const secureTagKey1 = new gcp.tags.TagKey("secure_tag_key_1", {
 *     description: "Test tag key description",
 *     parent: "organizations/123456789",
 *     purpose: "GCE_FIREWALL",
 *     shortName: "tag-key",
 *     purposeData: {
 *         network: pulumi.interpolate`my-project-name/${_default.name}`,
 *     },
 * });
 * const secureTagValue1 = new gcp.tags.TagValue("secure_tag_value_1", {
 *     description: "Test tag value description.",
 *     parent: secureTagKey1.id,
 *     shortName: "tag-value",
 * });
 * const primary = new gcp.compute.NetworkFirewallPolicyPacketMirroringRule("primary", {
 *     action: "mirror",
 *     description: "This is a simple packet mirroring rule description",
 *     direction: "INGRESS",
 *     disabled: false,
 *     firewallPolicy: basicNetworkFirewallPolicy.name,
 *     priority: 1000,
 *     ruleName: "test-rule",
 *     match: {
 *         srcIpRanges: ["10.100.0.1/32"],
 *         layer4Configs: [{
 *             ipProtocol: "all",
 *         }],
 *     },
 *     securityProfileGroup: pulumi.interpolate`//networksecurity.googleapis.com/${securityProfileGroup1.id}`,
 *     targetSecureTags: [{
 *         name: pulumi.interpolate`tagValues/${secureTagValue1.name}`,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * NetworkFirewallPolicyPacketMirroringRule can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/global/firewallPolicies/{{firewall_policy}}/packetMirroringRules/{{priority}}`
 *
 * * `{{project}}/{{firewall_policy}}/{{priority}}`
 *
 * * `{{firewall_policy}}/{{priority}}`
 *
 * When using the `pulumi import` command, NetworkFirewallPolicyPacketMirroringRule can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule default projects/{{project}}/global/firewallPolicies/{{firewall_policy}}/packetMirroringRules/{{priority}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule default {{project}}/{{firewall_policy}}/{{priority}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule default {{firewall_policy}}/{{priority}}
 * ```
 */
export class NetworkFirewallPolicyPacketMirroringRule extends pulumi.CustomResource {
    /**
     * Get an existing NetworkFirewallPolicyPacketMirroringRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkFirewallPolicyPacketMirroringRuleState, opts?: pulumi.CustomResourceOptions): NetworkFirewallPolicyPacketMirroringRule {
        return new NetworkFirewallPolicyPacketMirroringRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule';

    /**
     * Returns true if the given object is an instance of NetworkFirewallPolicyPacketMirroringRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkFirewallPolicyPacketMirroringRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkFirewallPolicyPacketMirroringRule.__pulumiType;
    }

    /**
     * The Action to perform when the client connection triggers the rule. Valid actions are "mirror", "doNotMirror", "gotoNext".
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    public /*out*/ readonly creationTimestamp!: pulumi.Output<string>;
    /**
     * An optional description for this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The direction in which this rule applies.
     * Possible values are: `INGRESS`, `EGRESS`.
     */
    public readonly direction!: pulumi.Output<string>;
    /**
     * Denotes whether the firewall policy rule is disabled.
     * When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
     * If this is unspecified, the firewall policy rule will be enabled.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * The firewall policy of the resource.
     */
    public readonly firewallPolicy!: pulumi.Output<string>;
    /**
     * Type of the resource. Always `compute#packetMirroringRule` for firewall policy packet mirroring rules
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
     * Structure is documented below.
     */
    public readonly match!: pulumi.Output<outputs.compute.NetworkFirewallPolicyPacketMirroringRuleMatch>;
    /**
     * An integer indicating the priority of a rule in the list.
     * The priority must be a positive value between 0 and 2147483647.
     * Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * An optional name for the rule. This field is not a unique identifier and can be updated.
     */
    public readonly ruleName!: pulumi.Output<string | undefined>;
    /**
     * Calculation of the complexity of a single firewall policy rule.
     */
    public /*out*/ readonly ruleTupleCount!: pulumi.Output<number>;
    /**
     * A fully-qualified URL of a SecurityProfile resource instance.
     * Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
     * Must be specified if action = 'mirror' and cannot be specified for other actions.
     */
    public readonly securityProfileGroup!: pulumi.Output<string | undefined>;
    /**
     * A list of secure tags that controls which instances the firewall rule applies to.
     * If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
     * targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
     * Structure is documented below.
     */
    public readonly targetSecureTags!: pulumi.Output<outputs.compute.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTag[] | undefined>;
    /**
     * Boolean flag indicating if the traffic should be TLS decrypted.
     * Can be set only if action = 'mirror' and cannot be set for other actions.
     */
    public readonly tlsInspect!: pulumi.Output<boolean | undefined>;

    /**
     * Create a NetworkFirewallPolicyPacketMirroringRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkFirewallPolicyPacketMirroringRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkFirewallPolicyPacketMirroringRuleArgs | NetworkFirewallPolicyPacketMirroringRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkFirewallPolicyPacketMirroringRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["firewallPolicy"] = state ? state.firewallPolicy : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["match"] = state ? state.match : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["ruleTupleCount"] = state ? state.ruleTupleCount : undefined;
            resourceInputs["securityProfileGroup"] = state ? state.securityProfileGroup : undefined;
            resourceInputs["targetSecureTags"] = state ? state.targetSecureTags : undefined;
            resourceInputs["tlsInspect"] = state ? state.tlsInspect : undefined;
        } else {
            const args = argsOrState as NetworkFirewallPolicyPacketMirroringRuleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.firewallPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallPolicy'");
            }
            if ((!args || args.match === undefined) && !opts.urn) {
                throw new Error("Missing required property 'match'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["firewallPolicy"] = args ? args.firewallPolicy : undefined;
            resourceInputs["match"] = args ? args.match : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["securityProfileGroup"] = args ? args.securityProfileGroup : undefined;
            resourceInputs["targetSecureTags"] = args ? args.targetSecureTags : undefined;
            resourceInputs["tlsInspect"] = args ? args.tlsInspect : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["ruleTupleCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkFirewallPolicyPacketMirroringRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkFirewallPolicyPacketMirroringRule resources.
 */
export interface NetworkFirewallPolicyPacketMirroringRuleState {
    /**
     * The Action to perform when the client connection triggers the rule. Valid actions are "mirror", "doNotMirror", "gotoNext".
     */
    action?: pulumi.Input<string>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    creationTimestamp?: pulumi.Input<string>;
    /**
     * An optional description for this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The direction in which this rule applies.
     * Possible values are: `INGRESS`, `EGRESS`.
     */
    direction?: pulumi.Input<string>;
    /**
     * Denotes whether the firewall policy rule is disabled.
     * When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
     * If this is unspecified, the firewall policy rule will be enabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The firewall policy of the resource.
     */
    firewallPolicy?: pulumi.Input<string>;
    /**
     * Type of the resource. Always `compute#packetMirroringRule` for firewall policy packet mirroring rules
     */
    kind?: pulumi.Input<string>;
    /**
     * A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
     * Structure is documented below.
     */
    match?: pulumi.Input<inputs.compute.NetworkFirewallPolicyPacketMirroringRuleMatch>;
    /**
     * An integer indicating the priority of a rule in the list.
     * The priority must be a positive value between 0 and 2147483647.
     * Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * An optional name for the rule. This field is not a unique identifier and can be updated.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * Calculation of the complexity of a single firewall policy rule.
     */
    ruleTupleCount?: pulumi.Input<number>;
    /**
     * A fully-qualified URL of a SecurityProfile resource instance.
     * Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
     * Must be specified if action = 'mirror' and cannot be specified for other actions.
     */
    securityProfileGroup?: pulumi.Input<string>;
    /**
     * A list of secure tags that controls which instances the firewall rule applies to.
     * If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
     * targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
     * Structure is documented below.
     */
    targetSecureTags?: pulumi.Input<pulumi.Input<inputs.compute.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTag>[]>;
    /**
     * Boolean flag indicating if the traffic should be TLS decrypted.
     * Can be set only if action = 'mirror' and cannot be set for other actions.
     */
    tlsInspect?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a NetworkFirewallPolicyPacketMirroringRule resource.
 */
export interface NetworkFirewallPolicyPacketMirroringRuleArgs {
    /**
     * The Action to perform when the client connection triggers the rule. Valid actions are "mirror", "doNotMirror", "gotoNext".
     */
    action: pulumi.Input<string>;
    /**
     * An optional description for this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The direction in which this rule applies.
     * Possible values are: `INGRESS`, `EGRESS`.
     */
    direction: pulumi.Input<string>;
    /**
     * Denotes whether the firewall policy rule is disabled.
     * When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
     * If this is unspecified, the firewall policy rule will be enabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The firewall policy of the resource.
     */
    firewallPolicy: pulumi.Input<string>;
    /**
     * A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
     * Structure is documented below.
     */
    match: pulumi.Input<inputs.compute.NetworkFirewallPolicyPacketMirroringRuleMatch>;
    /**
     * An integer indicating the priority of a rule in the list.
     * The priority must be a positive value between 0 and 2147483647.
     * Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
     */
    priority: pulumi.Input<number>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * An optional name for the rule. This field is not a unique identifier and can be updated.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * A fully-qualified URL of a SecurityProfile resource instance.
     * Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
     * Must be specified if action = 'mirror' and cannot be specified for other actions.
     */
    securityProfileGroup?: pulumi.Input<string>;
    /**
     * A list of secure tags that controls which instances the firewall rule applies to.
     * If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
     * targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
     * Structure is documented below.
     */
    targetSecureTags?: pulumi.Input<pulumi.Input<inputs.compute.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTag>[]>;
    /**
     * Boolean flag indicating if the traffic should be TLS decrypted.
     * Can be set only if action = 'mirror' and cannot be set for other actions.
     */
    tlsInspect?: pulumi.Input<boolean>;
}
