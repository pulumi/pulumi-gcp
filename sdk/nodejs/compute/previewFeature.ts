// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Represents a single Google Compute Engine preview feature such as Alpha API access, which can be enabled or disabled for a project.
 *
 * To get more information about PreviewFeature, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/PreviewFeatures)
 * * How-to Guides
 *     * [Use the Compute Engine alpha API](https://cloud.google.com/compute/docs/reference/rest/alpha)
 *
 * ## Example Usage
 *
 * ### Preview Feature Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const gcePreviewFeature = new gcp.compute.PreviewFeature("gce_preview_feature", {
 *     name: "alpha-api-access",
 *     activationStatus: "DISABLED",
 *     rolloutOperation: {
 *         rolloutInput: {
 *             predefinedRolloutPlan: "ROLLOUT_PLAN_FAST_ROLLOUT",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * PreviewFeature can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/global/previewFeatures/{{name}}`
 *
 * * `{{project}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, PreviewFeature can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/previewFeature:PreviewFeature default projects/{{project}}/global/previewFeatures/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/previewFeature:PreviewFeature default {{project}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/previewFeature:PreviewFeature default {{name}}
 * ```
 */
export class PreviewFeature extends pulumi.CustomResource {
    /**
     * Get an existing PreviewFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PreviewFeatureState, opts?: pulumi.CustomResourceOptions): PreviewFeature {
        return new PreviewFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/previewFeature:PreviewFeature';

    /**
     * Returns true if the given object is an instance of PreviewFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PreviewFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PreviewFeature.__pulumiType;
    }

    /**
     * The activation status of the preview feature.
     * Possible values are: `ENABLED`, `DISABLED`.
     */
    declare public readonly activationStatus: pulumi.Output<string>;
    /**
     * The name of the preview feature.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The rollout operation of the feature.
     * Structure is documented below.
     */
    declare public readonly rolloutOperation: pulumi.Output<outputs.compute.PreviewFeatureRolloutOperation | undefined>;

    /**
     * Create a PreviewFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PreviewFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PreviewFeatureArgs | PreviewFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PreviewFeatureState | undefined;
            resourceInputs["activationStatus"] = state?.activationStatus;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["rolloutOperation"] = state?.rolloutOperation;
        } else {
            const args = argsOrState as PreviewFeatureArgs | undefined;
            if (args?.activationStatus === undefined && !opts.urn) {
                throw new Error("Missing required property 'activationStatus'");
            }
            resourceInputs["activationStatus"] = args?.activationStatus;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["rolloutOperation"] = args?.rolloutOperation;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PreviewFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PreviewFeature resources.
 */
export interface PreviewFeatureState {
    /**
     * The activation status of the preview feature.
     * Possible values are: `ENABLED`, `DISABLED`.
     */
    activationStatus?: pulumi.Input<string>;
    /**
     * The name of the preview feature.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The rollout operation of the feature.
     * Structure is documented below.
     */
    rolloutOperation?: pulumi.Input<inputs.compute.PreviewFeatureRolloutOperation>;
}

/**
 * The set of arguments for constructing a PreviewFeature resource.
 */
export interface PreviewFeatureArgs {
    /**
     * The activation status of the preview feature.
     * Possible values are: `ENABLED`, `DISABLED`.
     */
    activationStatus: pulumi.Input<string>;
    /**
     * The name of the preview feature.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The rollout operation of the feature.
     * Structure is documented below.
     */
    rolloutOperation?: pulumi.Input<inputs.compute.PreviewFeatureRolloutOperation>;
}
