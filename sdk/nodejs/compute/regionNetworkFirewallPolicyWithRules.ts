// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The Compute NetworkFirewallPolicy with rules resource
 *
 * ## Example Usage
 *
 * ### Compute Region Network Firewall Policy With Rules Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const addressGroup1 = new gcp.networksecurity.AddressGroup("address_group_1", {
 *     name: "address-group",
 *     parent: project.then(project => project.id),
 *     description: "Regional address group",
 *     location: "us-west2",
 *     items: ["208.80.154.224/32"],
 *     type: "IPV4",
 *     capacity: 100,
 * });
 * const secureTagKey1 = new gcp.tags.TagKey("secure_tag_key_1", {
 *     description: "Tag key",
 *     parent: project.then(project => project.id),
 *     purpose: "GCE_FIREWALL",
 *     shortName: "tag-key",
 *     purposeData: {
 *         network: project.then(project => `${project.name}/default`),
 *     },
 * });
 * const secureTagValue1 = new gcp.tags.TagValue("secure_tag_value_1", {
 *     description: "Tag value",
 *     parent: secureTagKey1.id,
 *     shortName: "tag-value",
 * });
 * const primary = new gcp.compute.RegionNetworkFirewallPolicyWithRules("primary", {
 *     name: "fw-policy",
 *     region: "us-west2",
 *     description: "Terraform test",
 *     rules: [
 *         {
 *             description: "tcp rule",
 *             priority: 1000,
 *             enableLogging: true,
 *             action: "allow",
 *             direction: "EGRESS",
 *             match: {
 *                 destIpRanges: ["11.100.0.1/32"],
 *                 destFqdns: [
 *                     "www.yyy.com",
 *                     "www.zzz.com",
 *                 ],
 *                 destRegionCodes: [
 *                     "HK",
 *                     "IN",
 *                 ],
 *                 destThreatIntelligences: [
 *                     "iplist-search-engines-crawlers",
 *                     "iplist-tor-exit-nodes",
 *                 ],
 *                 destAddressGroups: [addressGroup1.id],
 *                 layer4Configs: [{
 *                     ipProtocol: "tcp",
 *                     ports: [
 *                         "8080",
 *                         "7070",
 *                     ],
 *                 }],
 *             },
 *             targetSecureTags: [{
 *                 name: secureTagValue1.id,
 *             }],
 *         },
 *         {
 *             description: "udp rule",
 *             ruleName: "test-rule",
 *             priority: 2000,
 *             enableLogging: false,
 *             action: "deny",
 *             direction: "INGRESS",
 *             disabled: true,
 *             match: {
 *                 srcIpRanges: ["0.0.0.0/0"],
 *                 srcFqdns: [
 *                     "www.abc.com",
 *                     "www.def.com",
 *                 ],
 *                 srcRegionCodes: [
 *                     "US",
 *                     "CA",
 *                 ],
 *                 srcThreatIntelligences: [
 *                     "iplist-known-malicious-ips",
 *                     "iplist-public-clouds",
 *                 ],
 *                 srcAddressGroups: [addressGroup1.id],
 *                 srcSecureTags: [{
 *                     name: secureTagValue1.id,
 *                 }],
 *                 layer4Configs: [{
 *                     ipProtocol: "udp",
 *                 }],
 *             },
 *         },
 *     ],
 * });
 * ```
 * ### Compute Region Network Firewall Policy With Rules Roce
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const policy = new gcp.compute.RegionNetworkFirewallPolicyWithRules("policy", {
 *     name: "rnf-policy",
 *     description: "Terraform test",
 *     policyType: "RDMA_ROCE_POLICY",
 *     rules: [{
 *         description: "deny all rule",
 *         priority: 1000,
 *         enableLogging: true,
 *         action: "deny",
 *         direction: "INGRESS",
 *         match: {
 *             srcIpRanges: ["0.0.0.0/0"],
 *             layer4Configs: [{
 *                 ipProtocol: "all",
 *             }],
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * RegionNetworkFirewallPolicyWithRules can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/regions/{{region}}/firewallPolicies/{{name}}`
 *
 * * `{{project}}/{{region}}/{{name}}`
 *
 * * `{{region}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, RegionNetworkFirewallPolicyWithRules can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/regionNetworkFirewallPolicyWithRules:RegionNetworkFirewallPolicyWithRules default projects/{{project}}/regions/{{region}}/firewallPolicies/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/regionNetworkFirewallPolicyWithRules:RegionNetworkFirewallPolicyWithRules default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/regionNetworkFirewallPolicyWithRules:RegionNetworkFirewallPolicyWithRules default {{region}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/regionNetworkFirewallPolicyWithRules:RegionNetworkFirewallPolicyWithRules default {{name}}
 * ```
 */
export class RegionNetworkFirewallPolicyWithRules extends pulumi.CustomResource {
    /**
     * Get an existing RegionNetworkFirewallPolicyWithRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegionNetworkFirewallPolicyWithRulesState, opts?: pulumi.CustomResourceOptions): RegionNetworkFirewallPolicyWithRules {
        return new RegionNetworkFirewallPolicyWithRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/regionNetworkFirewallPolicyWithRules:RegionNetworkFirewallPolicyWithRules';

    /**
     * Returns true if the given object is an instance of RegionNetworkFirewallPolicyWithRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegionNetworkFirewallPolicyWithRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegionNetworkFirewallPolicyWithRules.__pulumiType;
    }

    /**
     * Creation timestamp in RFC3339 text format.
     */
    declare public /*out*/ readonly creationTimestamp: pulumi.Output<string>;
    /**
     * An optional description of this resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Fingerprint of the resource. This field is used internally during updates of this resource.
     */
    declare public /*out*/ readonly fingerprint: pulumi.Output<string>;
    /**
     * User-provided name of the Network firewall policy.
     * The name should be unique in the project in which the firewall policy is created.
     * The name must be 1-63 characters long, and comply with RFC1035. Specifically,
     * the name must be 1-63 characters long and match the regular expression a-z?
     * which means the first character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The unique identifier for the resource. This identifier is defined by the server.
     */
    declare public /*out*/ readonly networkFirewallPolicyId: pulumi.Output<string>;
    /**
     * Policy type is used to determine which resources (networks) the policy can be associated with.
     * A policy can be associated with a network only if the network has the matching policyType in its network profile.
     * Different policy types may support some of the Firewall Rules features.
     * Possible values are: `VPC_POLICY`, `RDMA_ROCE_POLICY`.
     */
    declare public readonly policyType: pulumi.Output<string>;
    /**
     * A list of firewall policy pre-defined rules.
     * Structure is documented below.
     */
    declare public /*out*/ readonly predefinedRules: pulumi.Output<outputs.compute.RegionNetworkFirewallPolicyWithRulesPredefinedRule[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The region of this resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Total count of all firewall policy rule tuples. A firewall policy can not exceed a set number of tuples.
     */
    declare public /*out*/ readonly ruleTupleCount: pulumi.Output<number>;
    /**
     * A list of firewall policy rules.
     * Structure is documented below.
     */
    declare public readonly rules: pulumi.Output<outputs.compute.RegionNetworkFirewallPolicyWithRulesRule[]>;
    /**
     * Server-defined URL for the resource.
     */
    declare public /*out*/ readonly selfLink: pulumi.Output<string>;
    /**
     * Server-defined URL for this resource with the resource id.
     */
    declare public /*out*/ readonly selfLinkWithId: pulumi.Output<string>;

    /**
     * Create a RegionNetworkFirewallPolicyWithRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegionNetworkFirewallPolicyWithRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegionNetworkFirewallPolicyWithRulesArgs | RegionNetworkFirewallPolicyWithRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegionNetworkFirewallPolicyWithRulesState | undefined;
            resourceInputs["creationTimestamp"] = state?.creationTimestamp;
            resourceInputs["description"] = state?.description;
            resourceInputs["fingerprint"] = state?.fingerprint;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkFirewallPolicyId"] = state?.networkFirewallPolicyId;
            resourceInputs["policyType"] = state?.policyType;
            resourceInputs["predefinedRules"] = state?.predefinedRules;
            resourceInputs["project"] = state?.project;
            resourceInputs["region"] = state?.region;
            resourceInputs["ruleTupleCount"] = state?.ruleTupleCount;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["selfLink"] = state?.selfLink;
            resourceInputs["selfLinkWithId"] = state?.selfLinkWithId;
        } else {
            const args = argsOrState as RegionNetworkFirewallPolicyWithRulesArgs | undefined;
            if (args?.rules === undefined && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["policyType"] = args?.policyType;
            resourceInputs["project"] = args?.project;
            resourceInputs["region"] = args?.region;
            resourceInputs["rules"] = args?.rules;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["networkFirewallPolicyId"] = undefined /*out*/;
            resourceInputs["predefinedRules"] = undefined /*out*/;
            resourceInputs["ruleTupleCount"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["selfLinkWithId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegionNetworkFirewallPolicyWithRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegionNetworkFirewallPolicyWithRules resources.
 */
export interface RegionNetworkFirewallPolicyWithRulesState {
    /**
     * Creation timestamp in RFC3339 text format.
     */
    creationTimestamp?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Fingerprint of the resource. This field is used internally during updates of this resource.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * User-provided name of the Network firewall policy.
     * The name should be unique in the project in which the firewall policy is created.
     * The name must be 1-63 characters long, and comply with RFC1035. Specifically,
     * the name must be 1-63 characters long and match the regular expression a-z?
     * which means the first character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique identifier for the resource. This identifier is defined by the server.
     */
    networkFirewallPolicyId?: pulumi.Input<string>;
    /**
     * Policy type is used to determine which resources (networks) the policy can be associated with.
     * A policy can be associated with a network only if the network has the matching policyType in its network profile.
     * Different policy types may support some of the Firewall Rules features.
     * Possible values are: `VPC_POLICY`, `RDMA_ROCE_POLICY`.
     */
    policyType?: pulumi.Input<string>;
    /**
     * A list of firewall policy pre-defined rules.
     * Structure is documented below.
     */
    predefinedRules?: pulumi.Input<pulumi.Input<inputs.compute.RegionNetworkFirewallPolicyWithRulesPredefinedRule>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of this resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Total count of all firewall policy rule tuples. A firewall policy can not exceed a set number of tuples.
     */
    ruleTupleCount?: pulumi.Input<number>;
    /**
     * A list of firewall policy rules.
     * Structure is documented below.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.compute.RegionNetworkFirewallPolicyWithRulesRule>[]>;
    /**
     * Server-defined URL for the resource.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * Server-defined URL for this resource with the resource id.
     */
    selfLinkWithId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegionNetworkFirewallPolicyWithRules resource.
 */
export interface RegionNetworkFirewallPolicyWithRulesArgs {
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * User-provided name of the Network firewall policy.
     * The name should be unique in the project in which the firewall policy is created.
     * The name must be 1-63 characters long, and comply with RFC1035. Specifically,
     * the name must be 1-63 characters long and match the regular expression a-z?
     * which means the first character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    /**
     * Policy type is used to determine which resources (networks) the policy can be associated with.
     * A policy can be associated with a network only if the network has the matching policyType in its network profile.
     * Different policy types may support some of the Firewall Rules features.
     * Possible values are: `VPC_POLICY`, `RDMA_ROCE_POLICY`.
     */
    policyType?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of this resource.
     */
    region?: pulumi.Input<string>;
    /**
     * A list of firewall policy rules.
     * Structure is documented below.
     */
    rules: pulumi.Input<pulumi.Input<inputs.compute.RegionNetworkFirewallPolicyWithRulesRule>[]>;
}
