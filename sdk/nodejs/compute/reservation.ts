// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Represents a reservation resource. A reservation ensures that capacity is
 * held in a specific zone even if the reserved VMs are not running.
 *
 * Reservations apply only to Compute Engine, Cloud Dataproc, and Google
 * Kubernetes Engine VM usage.Reservations do not apply to `f1-micro` or
 * `g1-small` machine types, preemptible VMs, sole tenant nodes, or other
 * services not listed above
 * like Cloud SQL and Dataflow.
 *
 * To get more information about Reservation, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/reservations)
 * * How-to Guides
 *     * [Reserving zonal resources](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources)
 *
 * ## Example Usage
 *
 * ### Reservation Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const gceReservation = new gcp.compute.Reservation("gce_reservation", {
 *     name: "gce-reservation",
 *     zone: "us-central1-a",
 *     specificReservation: {
 *         count: 1,
 *         instanceProperties: {
 *             minCpuPlatform: "Intel Cascade Lake",
 *             machineType: "n2-standard-2",
 *         },
 *     },
 * });
 * ```
 * ### Reservation Basic Beta
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const gceReservation = new gcp.compute.Reservation("gce_reservation", {
 *     name: "gce-reservation",
 *     zone: "us-central1-a",
 *     specificReservation: {
 *         count: 1,
 *         instanceProperties: {
 *             minCpuPlatform: "Intel Cascade Lake",
 *             machineType: "n2-standard-2",
 *             maintenanceInterval: "PERIODIC",
 *         },
 *     },
 *     enableEmergentMaintenance: true,
 * });
 * ```
 * ### Reservation Source Instance Template
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myImage = gcp.compute.getImage({
 *     family: "debian-11",
 *     project: "debian-cloud",
 * });
 * const foobar = new gcp.compute.InstanceTemplate("foobar", {
 *     name: "instance-template",
 *     machineType: "n2-standard-2",
 *     canIpForward: false,
 *     tags: [
 *         "foo",
 *         "bar",
 *     ],
 *     disks: [{
 *         sourceImage: myImage.then(myImage => myImage.selfLink),
 *         autoDelete: true,
 *         boot: true,
 *     }],
 *     networkInterfaces: [{
 *         network: "default",
 *     }],
 *     scheduling: {
 *         preemptible: false,
 *         automaticRestart: true,
 *     },
 *     metadata: {
 *         foo: "bar",
 *     },
 *     serviceAccount: {
 *         scopes: [
 *             "userinfo-email",
 *             "compute-ro",
 *             "storage-ro",
 *         ],
 *     },
 *     labels: {
 *         my_label: "foobar",
 *     },
 * });
 * const gceReservationSourceInstanceTemplate = new gcp.compute.Reservation("gce_reservation_source_instance_template", {
 *     name: "gce-reservation-source-instance-template",
 *     zone: "us-central1-a",
 *     specificReservation: {
 *         count: 1,
 *         sourceInstanceTemplate: foobar.selfLink,
 *     },
 * });
 * ```
 * ### Reservation Sharing Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myImage = gcp.compute.getImage({
 *     family: "debian-11",
 *     project: "debian-cloud",
 * });
 * const foobar = new gcp.compute.InstanceTemplate("foobar", {
 *     name: "instance-template",
 *     machineType: "g2-standard-4",
 *     canIpForward: false,
 *     tags: [
 *         "foo",
 *         "bar",
 *     ],
 *     disks: [{
 *         sourceImage: myImage.then(myImage => myImage.selfLink),
 *         autoDelete: true,
 *         boot: true,
 *     }],
 *     networkInterfaces: [{
 *         network: "default",
 *     }],
 *     scheduling: {
 *         preemptible: false,
 *         automaticRestart: true,
 *     },
 *     metadata: {
 *         foo: "bar",
 *     },
 *     serviceAccount: {
 *         scopes: [
 *             "userinfo-email",
 *             "compute-ro",
 *             "storage-ro",
 *         ],
 *     },
 *     labels: {
 *         my_label: "foobar",
 *     },
 * });
 * const gceReservationSharingPolicy = new gcp.compute.Reservation("gce_reservation_sharing_policy", {
 *     name: "gce-reservation-sharing-policy",
 *     zone: "us-central1-b",
 *     specificReservation: {
 *         count: 2,
 *         sourceInstanceTemplate: foobar.selfLink,
 *     },
 *     reservationSharingPolicy: {
 *         serviceShareType: "ALLOW_ALL",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Reservation can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/zones/{{zone}}/reservations/{{name}}`
 *
 * * `{{project}}/{{zone}}/{{name}}`
 *
 * * `{{zone}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, Reservation can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/reservation:Reservation default projects/{{project}}/zones/{{zone}}/reservations/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/reservation:Reservation default {{project}}/{{zone}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/reservation:Reservation default {{zone}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/reservation:Reservation default {{name}}
 * ```
 */
export class Reservation extends pulumi.CustomResource {
    /**
     * Get an existing Reservation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReservationState, opts?: pulumi.CustomResourceOptions): Reservation {
        return new Reservation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/reservation:Reservation';

    /**
     * Returns true if the given object is an instance of Reservation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Reservation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Reservation.__pulumiType;
    }

    /**
     * Full or partial URL to a parent commitment. This field displays for
     * reservations that are tied to a commitment.
     */
    public /*out*/ readonly commitment!: pulumi.Output<string>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    public /*out*/ readonly creationTimestamp!: pulumi.Output<string>;
    /**
     * Duration after which the reservation will be auto-deleted by Compute Engine. Cannot be used with delete_at_time.
     * Structure is documented below.
     */
    public readonly deleteAfterDuration!: pulumi.Output<outputs.compute.ReservationDeleteAfterDuration | undefined>;
    /**
     * Absolute time in future when the reservation will be auto-deleted by Compute Engine. Timestamp is represented in RFC3339 text format.
     * Cannot be used with delete_after_duration.
     */
    public readonly deleteAtTime!: pulumi.Output<string>;
    /**
     * An optional description of this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates if this group of VMs have emergent maintenance enabled.
     */
    public readonly enableEmergentMaintenance!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Sharing policy for reservations with Google Cloud managed services.
     * Structure is documented below.
     */
    public readonly reservationSharingPolicy!: pulumi.Output<outputs.compute.ReservationReservationSharingPolicy>;
    /**
     * The URI of the created resource.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * The share setting for reservations.
     * Structure is documented below.
     */
    public readonly shareSettings!: pulumi.Output<outputs.compute.ReservationShareSettings>;
    /**
     * Reservation for instances with specific machine shapes.
     * Structure is documented below.
     */
    public readonly specificReservation!: pulumi.Output<outputs.compute.ReservationSpecificReservation>;
    /**
     * When set to true, only VMs that target this reservation by name can
     * consume this reservation. Otherwise, it can be consumed by VMs with
     * affinity for any reservation. Defaults to false.
     */
    public readonly specificReservationRequired!: pulumi.Output<boolean | undefined>;
    /**
     * The status of the reservation.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The zone where the reservation is made.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Reservation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReservationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReservationArgs | ReservationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReservationState | undefined;
            resourceInputs["commitment"] = state ? state.commitment : undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["deleteAfterDuration"] = state ? state.deleteAfterDuration : undefined;
            resourceInputs["deleteAtTime"] = state ? state.deleteAtTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableEmergentMaintenance"] = state ? state.enableEmergentMaintenance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["reservationSharingPolicy"] = state ? state.reservationSharingPolicy : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["shareSettings"] = state ? state.shareSettings : undefined;
            resourceInputs["specificReservation"] = state ? state.specificReservation : undefined;
            resourceInputs["specificReservationRequired"] = state ? state.specificReservationRequired : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ReservationArgs | undefined;
            if ((!args || args.specificReservation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'specificReservation'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["deleteAfterDuration"] = args ? args.deleteAfterDuration : undefined;
            resourceInputs["deleteAtTime"] = args ? args.deleteAtTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableEmergentMaintenance"] = args ? args.enableEmergentMaintenance : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["reservationSharingPolicy"] = args ? args.reservationSharingPolicy : undefined;
            resourceInputs["shareSettings"] = args ? args.shareSettings : undefined;
            resourceInputs["specificReservation"] = args ? args.specificReservation : undefined;
            resourceInputs["specificReservationRequired"] = args ? args.specificReservationRequired : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["commitment"] = undefined /*out*/;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Reservation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Reservation resources.
 */
export interface ReservationState {
    /**
     * Full or partial URL to a parent commitment. This field displays for
     * reservations that are tied to a commitment.
     */
    commitment?: pulumi.Input<string>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    creationTimestamp?: pulumi.Input<string>;
    /**
     * Duration after which the reservation will be auto-deleted by Compute Engine. Cannot be used with delete_at_time.
     * Structure is documented below.
     */
    deleteAfterDuration?: pulumi.Input<inputs.compute.ReservationDeleteAfterDuration>;
    /**
     * Absolute time in future when the reservation will be auto-deleted by Compute Engine. Timestamp is represented in RFC3339 text format.
     * Cannot be used with delete_after_duration.
     */
    deleteAtTime?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates if this group of VMs have emergent maintenance enabled.
     */
    enableEmergentMaintenance?: pulumi.Input<boolean>;
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Sharing policy for reservations with Google Cloud managed services.
     * Structure is documented below.
     */
    reservationSharingPolicy?: pulumi.Input<inputs.compute.ReservationReservationSharingPolicy>;
    /**
     * The URI of the created resource.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The share setting for reservations.
     * Structure is documented below.
     */
    shareSettings?: pulumi.Input<inputs.compute.ReservationShareSettings>;
    /**
     * Reservation for instances with specific machine shapes.
     * Structure is documented below.
     */
    specificReservation?: pulumi.Input<inputs.compute.ReservationSpecificReservation>;
    /**
     * When set to true, only VMs that target this reservation by name can
     * consume this reservation. Otherwise, it can be consumed by VMs with
     * affinity for any reservation. Defaults to false.
     */
    specificReservationRequired?: pulumi.Input<boolean>;
    /**
     * The status of the reservation.
     */
    status?: pulumi.Input<string>;
    /**
     * The zone where the reservation is made.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Reservation resource.
 */
export interface ReservationArgs {
    /**
     * Duration after which the reservation will be auto-deleted by Compute Engine. Cannot be used with delete_at_time.
     * Structure is documented below.
     */
    deleteAfterDuration?: pulumi.Input<inputs.compute.ReservationDeleteAfterDuration>;
    /**
     * Absolute time in future when the reservation will be auto-deleted by Compute Engine. Timestamp is represented in RFC3339 text format.
     * Cannot be used with delete_after_duration.
     */
    deleteAtTime?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates if this group of VMs have emergent maintenance enabled.
     */
    enableEmergentMaintenance?: pulumi.Input<boolean>;
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Sharing policy for reservations with Google Cloud managed services.
     * Structure is documented below.
     */
    reservationSharingPolicy?: pulumi.Input<inputs.compute.ReservationReservationSharingPolicy>;
    /**
     * The share setting for reservations.
     * Structure is documented below.
     */
    shareSettings?: pulumi.Input<inputs.compute.ReservationShareSettings>;
    /**
     * Reservation for instances with specific machine shapes.
     * Structure is documented below.
     */
    specificReservation: pulumi.Input<inputs.compute.ReservationSpecificReservation>;
    /**
     * When set to true, only VMs that target this reservation by name can
     * consume this reservation. Otherwise, it can be consumed by VMs with
     * affinity for any reservation. Defaults to false.
     */
    specificReservationRequired?: pulumi.Input<boolean>;
    /**
     * The zone where the reservation is made.
     */
    zone: pulumi.Input<string>;
}
