// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Represents a VPN gateway running in GCP. This virtual device is managed
 * by Google, but used only by you. This type of VPN Gateway allows for the creation
 * of VPN solutions with higher availability than classic Target VPN Gateways.
 *
 * To get more information about HaVpnGateway, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/vpnGateways)
 * * How-to Guides
 *     * [Choosing a VPN](https://cloud.google.com/vpn/docs/how-to/choosing-a-vpn)
 *     * [Cloud VPN Overview](https://cloud.google.com/vpn/docs/concepts/overview)
 *
 * ## Example Usage
 * ### Ha Vpn Gateway Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network1 = new gcp.compute.Network("network1", {autoCreateSubnetworks: false});
 * const haGateway1 = new gcp.compute.HaVpnGateway("haGateway1", {
 *     region: "us-central1",
 *     network: network1.id,
 * });
 * ```
 * ### Ha Vpn Gateway Gcp To Gcp
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network1 = new gcp.compute.Network("network1", {
 *     routingMode: "GLOBAL",
 *     autoCreateSubnetworks: false,
 * });
 * const haGateway1 = new gcp.compute.HaVpnGateway("haGateway1", {
 *     region: "us-central1",
 *     network: network1.id,
 * });
 * const network2 = new gcp.compute.Network("network2", {
 *     routingMode: "GLOBAL",
 *     autoCreateSubnetworks: false,
 * });
 * const haGateway2 = new gcp.compute.HaVpnGateway("haGateway2", {
 *     region: "us-central1",
 *     network: network2.id,
 * });
 * const network1Subnet1 = new gcp.compute.Subnetwork("network1Subnet1", {
 *     ipCidrRange: "10.0.1.0/24",
 *     region: "us-central1",
 *     network: network1.id,
 * });
 * const network1Subnet2 = new gcp.compute.Subnetwork("network1Subnet2", {
 *     ipCidrRange: "10.0.2.0/24",
 *     region: "us-west1",
 *     network: network1.id,
 * });
 * const network2Subnet1 = new gcp.compute.Subnetwork("network2Subnet1", {
 *     ipCidrRange: "192.168.1.0/24",
 *     region: "us-central1",
 *     network: network2.id,
 * });
 * const network2Subnet2 = new gcp.compute.Subnetwork("network2Subnet2", {
 *     ipCidrRange: "192.168.2.0/24",
 *     region: "us-east1",
 *     network: network2.id,
 * });
 * const router1 = new gcp.compute.Router("router1", {
 *     network: network1.name,
 *     bgp: {
 *         asn: 64514,
 *     },
 * });
 * const router2 = new gcp.compute.Router("router2", {
 *     network: network2.name,
 *     bgp: {
 *         asn: 64515,
 *     },
 * });
 * const tunnel1 = new gcp.compute.VPNTunnel("tunnel1", {
 *     region: "us-central1",
 *     vpnGateway: haGateway1.id,
 *     peerGcpGateway: haGateway2.id,
 *     sharedSecret: "a secret message",
 *     router: router1.id,
 *     vpnGatewayInterface: 0,
 * });
 * const tunnel2 = new gcp.compute.VPNTunnel("tunnel2", {
 *     region: "us-central1",
 *     vpnGateway: haGateway1.id,
 *     peerGcpGateway: haGateway2.id,
 *     sharedSecret: "a secret message",
 *     router: router1.id,
 *     vpnGatewayInterface: 1,
 * });
 * const tunnel3 = new gcp.compute.VPNTunnel("tunnel3", {
 *     region: "us-central1",
 *     vpnGateway: haGateway2.id,
 *     peerGcpGateway: haGateway1.id,
 *     sharedSecret: "a secret message",
 *     router: router2.id,
 *     vpnGatewayInterface: 0,
 * });
 * const tunnel4 = new gcp.compute.VPNTunnel("tunnel4", {
 *     region: "us-central1",
 *     vpnGateway: haGateway2.id,
 *     peerGcpGateway: haGateway1.id,
 *     sharedSecret: "a secret message",
 *     router: router2.id,
 *     vpnGatewayInterface: 1,
 * });
 * const router1Interface1 = new gcp.compute.RouterInterface("router1Interface1", {
 *     router: router1.name,
 *     region: "us-central1",
 *     ipRange: "169.254.0.1/30",
 *     vpnTunnel: tunnel1.name,
 * });
 * const router1Peer1 = new gcp.compute.RouterPeer("router1Peer1", {
 *     router: router1.name,
 *     region: "us-central1",
 *     peerIpAddress: "169.254.0.2",
 *     peerAsn: 64515,
 *     advertisedRoutePriority: 100,
 *     "interface": router1Interface1.name,
 * });
 * const router1Interface2 = new gcp.compute.RouterInterface("router1Interface2", {
 *     router: router1.name,
 *     region: "us-central1",
 *     ipRange: "169.254.1.1/30",
 *     vpnTunnel: tunnel2.name,
 * });
 * const router1Peer2 = new gcp.compute.RouterPeer("router1Peer2", {
 *     router: router1.name,
 *     region: "us-central1",
 *     peerIpAddress: "169.254.1.2",
 *     peerAsn: 64515,
 *     advertisedRoutePriority: 100,
 *     "interface": router1Interface2.name,
 * });
 * const router2Interface1 = new gcp.compute.RouterInterface("router2Interface1", {
 *     router: router2.name,
 *     region: "us-central1",
 *     ipRange: "169.254.0.1/30",
 *     vpnTunnel: tunnel3.name,
 * });
 * const router2Peer1 = new gcp.compute.RouterPeer("router2Peer1", {
 *     router: router2.name,
 *     region: "us-central1",
 *     peerIpAddress: "169.254.0.2",
 *     peerAsn: 64514,
 *     advertisedRoutePriority: 100,
 *     "interface": router2Interface1.name,
 * });
 * const router2Interface2 = new gcp.compute.RouterInterface("router2Interface2", {
 *     router: router2.name,
 *     region: "us-central1",
 *     ipRange: "169.254.1.1/30",
 *     vpnTunnel: tunnel4.name,
 * });
 * const router2Peer2 = new gcp.compute.RouterPeer("router2Peer2", {
 *     router: router2.name,
 *     region: "us-central1",
 *     peerIpAddress: "169.254.1.2",
 *     peerAsn: 64514,
 *     advertisedRoutePriority: 100,
 *     "interface": router2Interface2.name,
 * });
 * ```
 * ### Compute Ha Vpn Gateway Encrypted Interconnect
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network = new gcp.compute.Network("network", {autoCreateSubnetworks: false}, {
 *     provider: google_beta,
 * });
 * const address1 = new gcp.compute.Address("address1", {
 *     addressType: "INTERNAL",
 *     purpose: "IPSEC_INTERCONNECT",
 *     address: "192.168.1.0",
 *     prefixLength: 29,
 *     network: network.selfLink,
 * }, {
 *     provider: google_beta,
 * });
 * const router = new gcp.compute.Router("router", {
 *     network: network.name,
 *     encryptedInterconnectRouter: true,
 *     bgp: {
 *         asn: 16550,
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const attachment1 = new gcp.compute.InterconnectAttachment("attachment1", {
 *     edgeAvailabilityDomain: "AVAILABILITY_DOMAIN_1",
 *     type: "PARTNER",
 *     router: router.id,
 *     encryption: "IPSEC",
 *     ipsecInternalAddresses: [address1.selfLink],
 * }, {
 *     provider: google_beta,
 * });
 * const address2 = new gcp.compute.Address("address2", {
 *     addressType: "INTERNAL",
 *     purpose: "IPSEC_INTERCONNECT",
 *     address: "192.168.2.0",
 *     prefixLength: 29,
 *     network: network.selfLink,
 * }, {
 *     provider: google_beta,
 * });
 * const attachment2 = new gcp.compute.InterconnectAttachment("attachment2", {
 *     edgeAvailabilityDomain: "AVAILABILITY_DOMAIN_2",
 *     type: "PARTNER",
 *     router: router.id,
 *     encryption: "IPSEC",
 *     ipsecInternalAddresses: [address2.selfLink],
 * }, {
 *     provider: google_beta,
 * });
 * const vpn_gateway = new gcp.compute.HaVpnGateway("vpn-gateway", {
 *     network: network.id,
 *     vpnInterfaces: [
 *         {
 *             id: 0,
 *             interconnectAttachment: attachment1.selfLink,
 *         },
 *         {
 *             id: 1,
 *             interconnectAttachment: attachment2.selfLink,
 *         },
 *     ],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * HaVpnGateway can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default projects/{{project}}/regions/{{region}}/vpnGateways/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default {{name}}
 * ```
 */
export class HaVpnGateway extends pulumi.CustomResource {
    /**
     * Get an existing HaVpnGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HaVpnGatewayState, opts?: pulumi.CustomResourceOptions): HaVpnGateway {
        return new HaVpnGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/haVpnGateway:HaVpnGateway';

    /**
     * Returns true if the given object is an instance of HaVpnGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HaVpnGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HaVpnGateway.__pulumiType;
    }

    /**
     * An optional description of this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The network this VPN gateway is accepting traffic for.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The region this gateway should sit in.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The URI of the created resource.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * A list of interfaces on this VPN gateway.
     * Structure is documented below.
     */
    public readonly vpnInterfaces!: pulumi.Output<outputs.compute.HaVpnGatewayVpnInterface[]>;

    /**
     * Create a HaVpnGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HaVpnGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HaVpnGatewayArgs | HaVpnGatewayState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HaVpnGatewayState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["vpnInterfaces"] = state ? state.vpnInterfaces : undefined;
        } else {
            const args = argsOrState as HaVpnGatewayArgs | undefined;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["vpnInterfaces"] = args ? args.vpnInterfaces : undefined;
            inputs["selfLink"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(HaVpnGateway.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HaVpnGateway resources.
 */
export interface HaVpnGatewayState {
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    /**
     * The network this VPN gateway is accepting traffic for.
     */
    network?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region this gateway should sit in.
     */
    region?: pulumi.Input<string>;
    /**
     * The URI of the created resource.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * A list of interfaces on this VPN gateway.
     * Structure is documented below.
     */
    vpnInterfaces?: pulumi.Input<pulumi.Input<inputs.compute.HaVpnGatewayVpnInterface>[]>;
}

/**
 * The set of arguments for constructing a HaVpnGateway resource.
 */
export interface HaVpnGatewayArgs {
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    /**
     * The network this VPN gateway is accepting traffic for.
     */
    network: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region this gateway should sit in.
     */
    region?: pulumi.Input<string>;
    /**
     * A list of interfaces on this VPN gateway.
     * Structure is documented below.
     */
    vpnInterfaces?: pulumi.Input<pulumi.Input<inputs.compute.HaVpnGatewayVpnInterface>[]>;
}
