// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Compute Wire Group Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const example_cross_site_network = new gcp.compute.CrossSiteNetwork("example-cross-site-network", {
 *     name: "test-cross-site-network",
 *     description: "Example cross site network",
 * });
 * const example_test_wire_group = new gcp.compute.WireGroup("example-test-wire-group", {
 *     name: "test-wire-group",
 *     description: "Example Wire Group",
 *     crossSiteNetwork: "test-cross-site-network",
 *     wireProperties: {
 *         bandwidthUnmetered: 10,
 *         faultResponse: "NONE",
 *     },
 *     wireGroupProperties: {
 *         type: "WIRE",
 *     },
 *     adminEnabled: true,
 * }, {
 *     dependsOn: [example_cross_site_network],
 * });
 * ```
 *
 * ## Import
 *
 * WireGroup can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}`
 *
 * * `{{project}}/{{cross_site_network}}/{{name}}`
 *
 * * `{{cross_site_network}}/{{name}}`
 *
 * When using the `pulumi import` command, WireGroup can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/wireGroup:WireGroup default projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/wireGroup:WireGroup default {{project}}/{{cross_site_network}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/wireGroup:WireGroup default {{cross_site_network}}/{{name}}
 * ```
 */
export class WireGroup extends pulumi.CustomResource {
    /**
     * Get an existing WireGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WireGroupState, opts?: pulumi.CustomResourceOptions): WireGroup {
        return new WireGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/wireGroup:WireGroup';

    /**
     * Returns true if the given object is an instance of WireGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WireGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WireGroup.__pulumiType;
    }

    /**
     * Indicates whether the wire group is administratively enabled.
     */
    public readonly adminEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    public /*out*/ readonly creationTimestamp!: pulumi.Output<string>;
    /**
     * Required cross site network to which wire group belongs.
     *
     *
     * - - -
     */
    public readonly crossSiteNetwork!: pulumi.Output<string>;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Endpoints grouped by location, each mapping to interconnect configurations.
     * Structure is documented below.
     */
    public readonly endpoints!: pulumi.Output<outputs.compute.WireGroupEndpoint[] | undefined>;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be
     * 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Topology details for the wire group configuration.
     * Structure is documented below.
     */
    public /*out*/ readonly topologies!: pulumi.Output<outputs.compute.WireGroupTopology[]>;
    /**
     * Properties specific to the wire group.
     * Structure is documented below.
     */
    public readonly wireGroupProperties!: pulumi.Output<outputs.compute.WireGroupWireGroupProperties | undefined>;
    /**
     * Default properties for wires within the group.
     * Structure is documented below.
     */
    public readonly wireProperties!: pulumi.Output<outputs.compute.WireGroupWireProperties | undefined>;
    /**
     * The single/redundant wire(s) managed by the wire group.
     * Structure is documented below.
     */
    public /*out*/ readonly wires!: pulumi.Output<outputs.compute.WireGroupWire[]>;

    /**
     * Create a WireGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WireGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WireGroupArgs | WireGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WireGroupState | undefined;
            resourceInputs["adminEnabled"] = state ? state.adminEnabled : undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["crossSiteNetwork"] = state ? state.crossSiteNetwork : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["topologies"] = state ? state.topologies : undefined;
            resourceInputs["wireGroupProperties"] = state ? state.wireGroupProperties : undefined;
            resourceInputs["wireProperties"] = state ? state.wireProperties : undefined;
            resourceInputs["wires"] = state ? state.wires : undefined;
        } else {
            const args = argsOrState as WireGroupArgs | undefined;
            if ((!args || args.crossSiteNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'crossSiteNetwork'");
            }
            resourceInputs["adminEnabled"] = args ? args.adminEnabled : undefined;
            resourceInputs["crossSiteNetwork"] = args ? args.crossSiteNetwork : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endpoints"] = args ? args.endpoints : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["wireGroupProperties"] = args ? args.wireGroupProperties : undefined;
            resourceInputs["wireProperties"] = args ? args.wireProperties : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["topologies"] = undefined /*out*/;
            resourceInputs["wires"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WireGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WireGroup resources.
 */
export interface WireGroupState {
    /**
     * Indicates whether the wire group is administratively enabled.
     */
    adminEnabled?: pulumi.Input<boolean>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    creationTimestamp?: pulumi.Input<string>;
    /**
     * Required cross site network to which wire group belongs.
     *
     *
     * - - -
     */
    crossSiteNetwork?: pulumi.Input<string>;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Endpoints grouped by location, each mapping to interconnect configurations.
     * Structure is documented below.
     */
    endpoints?: pulumi.Input<pulumi.Input<inputs.compute.WireGroupEndpoint>[]>;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be
     * 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Topology details for the wire group configuration.
     * Structure is documented below.
     */
    topologies?: pulumi.Input<pulumi.Input<inputs.compute.WireGroupTopology>[]>;
    /**
     * Properties specific to the wire group.
     * Structure is documented below.
     */
    wireGroupProperties?: pulumi.Input<inputs.compute.WireGroupWireGroupProperties>;
    /**
     * Default properties for wires within the group.
     * Structure is documented below.
     */
    wireProperties?: pulumi.Input<inputs.compute.WireGroupWireProperties>;
    /**
     * The single/redundant wire(s) managed by the wire group.
     * Structure is documented below.
     */
    wires?: pulumi.Input<pulumi.Input<inputs.compute.WireGroupWire>[]>;
}

/**
 * The set of arguments for constructing a WireGroup resource.
 */
export interface WireGroupArgs {
    /**
     * Indicates whether the wire group is administratively enabled.
     */
    adminEnabled?: pulumi.Input<boolean>;
    /**
     * Required cross site network to which wire group belongs.
     *
     *
     * - - -
     */
    crossSiteNetwork: pulumi.Input<string>;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Endpoints grouped by location, each mapping to interconnect configurations.
     * Structure is documented below.
     */
    endpoints?: pulumi.Input<pulumi.Input<inputs.compute.WireGroupEndpoint>[]>;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be
     * 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Properties specific to the wire group.
     * Structure is documented below.
     */
    wireGroupProperties?: pulumi.Input<inputs.compute.WireGroupWireGroupProperties>;
    /**
     * Default properties for wires within the group.
     * Structure is documented below.
     */
    wireProperties?: pulumi.Input<inputs.compute.WireGroupWireProperties>;
}
