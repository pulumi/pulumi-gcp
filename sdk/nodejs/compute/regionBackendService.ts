// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A Region Backend Service defines a regionally-scoped group of virtual
 * machines that will serve traffic for load balancing.
 * 
 * 
 * To get more information about RegionBackendService, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/latest/regionBackendServices)
 * * How-to Guides
 *     * [Internal TCP/UDP Load Balancing](https://cloud.google.com/compute/docs/load-balancing/internal/)
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_region_backend_service.html.markdown.
 */
export class RegionBackendService extends pulumi.CustomResource {
    /**
     * Get an existing RegionBackendService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegionBackendServiceState, opts?: pulumi.CustomResourceOptions): RegionBackendService {
        return new RegionBackendService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/regionBackendService:RegionBackendService';

    /**
     * Returns true if the given object is an instance of RegionBackendService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegionBackendService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegionBackendService.__pulumiType;
    }

    /**
     * Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent
     * and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.
     * When the load balancing scheme is INTERNAL, this field is not used.
     */
    public readonly affinityCookieTtlSec!: pulumi.Output<number | undefined>;
    /**
     * The set of backends that serve this RegionBackendService.
     */
    public readonly backends!: pulumi.Output<outputs.compute.RegionBackendServiceBackend[] | undefined>;
    /**
     * Settings controlling the volume of connections to a backend service. This field is applicable only when the
     * 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.
     */
    public readonly circuitBreakers!: pulumi.Output<outputs.compute.RegionBackendServiceCircuitBreakers | undefined>;
    /**
     * Time for which instance will be drained (not accept new connections, but still work to finish started).
     */
    public readonly connectionDrainingTimeoutSec!: pulumi.Output<number | undefined>;
    /**
     * Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or
     * other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular
     * destination host will be lost when one or more hosts are added/removed from the destination service. This field
     * specifies parameters that control consistent hashing. This field only applies when all of the following are true - *
     * 'load_balancing_scheme' is set to INTERNAL_MANAGED * 'protocol' is set to HTTP, HTTPS, or HTTP2 *
     * 'locality_lb_policy' is set to MAGLEV or RING_HASH
     */
    public readonly consistentHash!: pulumi.Output<outputs.compute.RegionBackendServiceConsistentHash | undefined>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    public /*out*/ readonly creationTimestamp!: pulumi.Output<string>;
    /**
     * An optional description of this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Policy for failovers.
     */
    public readonly failoverPolicy!: pulumi.Output<outputs.compute.RegionBackendServiceFailoverPolicy | undefined>;
    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic
     * locking.
     */
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * The set of URLs to HealthCheck resources for health checking this RegionBackendService. Currently at most one health
     * check can be specified, and a health check is required.
     */
    public readonly healthChecks!: pulumi.Output<string>;
    /**
     * Indicates what kind of load balancing this regional backend service will be used for. A backend service created for
     * one type of load balancing cannot be used with the other(s). Must be 'INTERNAL' or 'INTERNAL_MANAGED'. Defaults to
     * 'INTERNAL'.
     */
    public readonly loadBalancingScheme!: pulumi.Output<string | undefined>;
    /**
     * The load balancing algorithm used within the scope of the locality. The possible values are - ROUND_ROBIN - This is
     * a simple policy in which each healthy backend is selected in round robin order. LEAST_REQUEST - An O(1) algorithm
     * which selects two random healthy hosts and picks the host which has fewer active requests. RING_HASH - The
     * ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the
     * addition/removal of a host from a set of N hosts only affects 1/N of the requests. RANDOM - The load balancer
     * selects a random healthy host. ORIGINAL_DESTINATION - Backend host is selected based on the client connection
     * metadata, i.e., connections are opened to the same address as the destination address of the incoming connection
     * before the connection was redirected to the load balancer. MAGLEV - used as a drop in replacement for the ring hash
     * load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection
     * times. For more information about Maglev, refer to https://ai.google/research/pubs/pub44824 This field is applicable
     * only when the 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.
     */
    public readonly localityLbPolicy!: pulumi.Output<string | undefined>;
    /**
     * This field denotes the logging options for the load balancer traffic served by this backend service. If logging is
     * enabled, logs will be exported to Stackdriver.
     */
    public readonly logConfig!: pulumi.Output<outputs.compute.RegionBackendServiceLogConfig | undefined>;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long,
     * and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
     * '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The URL of the network to which this backend service belongs. This field can only be specified when the load
     * balancing scheme is set to INTERNAL.
     */
    public readonly network!: pulumi.Output<string | undefined>;
    /**
     * Settings controlling eviction of unhealthy hosts from the load balancing pool. This field is applicable only when
     * the 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.
     */
    public readonly outlierDetection!: pulumi.Output<outputs.compute.RegionBackendServiceOutlierDetection | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The protocol this RegionBackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2,
     * SSL, TCP, and UDP. The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer types and may
     * result in errors if used with the GA API.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The Region in which the created backend service should reside. If it is not provided, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The URI of the created resource.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Type of session affinity to use. The default is NONE. Session affinity is not applicable if the protocol is UDP.
     */
    public readonly sessionAffinity!: pulumi.Output<string>;
    /**
     * How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds. Valid range
     * is [1, 86400].
     */
    public readonly timeoutSec!: pulumi.Output<number>;

    /**
     * Create a RegionBackendService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegionBackendServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegionBackendServiceArgs | RegionBackendServiceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RegionBackendServiceState | undefined;
            inputs["affinityCookieTtlSec"] = state ? state.affinityCookieTtlSec : undefined;
            inputs["backends"] = state ? state.backends : undefined;
            inputs["circuitBreakers"] = state ? state.circuitBreakers : undefined;
            inputs["connectionDrainingTimeoutSec"] = state ? state.connectionDrainingTimeoutSec : undefined;
            inputs["consistentHash"] = state ? state.consistentHash : undefined;
            inputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["failoverPolicy"] = state ? state.failoverPolicy : undefined;
            inputs["fingerprint"] = state ? state.fingerprint : undefined;
            inputs["healthChecks"] = state ? state.healthChecks : undefined;
            inputs["loadBalancingScheme"] = state ? state.loadBalancingScheme : undefined;
            inputs["localityLbPolicy"] = state ? state.localityLbPolicy : undefined;
            inputs["logConfig"] = state ? state.logConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["outlierDetection"] = state ? state.outlierDetection : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["sessionAffinity"] = state ? state.sessionAffinity : undefined;
            inputs["timeoutSec"] = state ? state.timeoutSec : undefined;
        } else {
            const args = argsOrState as RegionBackendServiceArgs | undefined;
            if (!args || args.healthChecks === undefined) {
                throw new Error("Missing required property 'healthChecks'");
            }
            inputs["affinityCookieTtlSec"] = args ? args.affinityCookieTtlSec : undefined;
            inputs["backends"] = args ? args.backends : undefined;
            inputs["circuitBreakers"] = args ? args.circuitBreakers : undefined;
            inputs["connectionDrainingTimeoutSec"] = args ? args.connectionDrainingTimeoutSec : undefined;
            inputs["consistentHash"] = args ? args.consistentHash : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["failoverPolicy"] = args ? args.failoverPolicy : undefined;
            inputs["healthChecks"] = args ? args.healthChecks : undefined;
            inputs["loadBalancingScheme"] = args ? args.loadBalancingScheme : undefined;
            inputs["localityLbPolicy"] = args ? args.localityLbPolicy : undefined;
            inputs["logConfig"] = args ? args.logConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["outlierDetection"] = args ? args.outlierDetection : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["sessionAffinity"] = args ? args.sessionAffinity : undefined;
            inputs["timeoutSec"] = args ? args.timeoutSec : undefined;
            inputs["creationTimestamp"] = undefined /*out*/;
            inputs["fingerprint"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RegionBackendService.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegionBackendService resources.
 */
export interface RegionBackendServiceState {
    /**
     * Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent
     * and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.
     * When the load balancing scheme is INTERNAL, this field is not used.
     */
    readonly affinityCookieTtlSec?: pulumi.Input<number>;
    /**
     * The set of backends that serve this RegionBackendService.
     */
    readonly backends?: pulumi.Input<pulumi.Input<inputs.compute.RegionBackendServiceBackend>[]>;
    /**
     * Settings controlling the volume of connections to a backend service. This field is applicable only when the
     * 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.
     */
    readonly circuitBreakers?: pulumi.Input<inputs.compute.RegionBackendServiceCircuitBreakers>;
    /**
     * Time for which instance will be drained (not accept new connections, but still work to finish started).
     */
    readonly connectionDrainingTimeoutSec?: pulumi.Input<number>;
    /**
     * Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or
     * other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular
     * destination host will be lost when one or more hosts are added/removed from the destination service. This field
     * specifies parameters that control consistent hashing. This field only applies when all of the following are true - *
     * 'load_balancing_scheme' is set to INTERNAL_MANAGED * 'protocol' is set to HTTP, HTTPS, or HTTP2 *
     * 'locality_lb_policy' is set to MAGLEV or RING_HASH
     */
    readonly consistentHash?: pulumi.Input<inputs.compute.RegionBackendServiceConsistentHash>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    readonly creationTimestamp?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Policy for failovers.
     */
    readonly failoverPolicy?: pulumi.Input<inputs.compute.RegionBackendServiceFailoverPolicy>;
    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic
     * locking.
     */
    readonly fingerprint?: pulumi.Input<string>;
    /**
     * The set of URLs to HealthCheck resources for health checking this RegionBackendService. Currently at most one health
     * check can be specified, and a health check is required.
     */
    readonly healthChecks?: pulumi.Input<string>;
    /**
     * Indicates what kind of load balancing this regional backend service will be used for. A backend service created for
     * one type of load balancing cannot be used with the other(s). Must be 'INTERNAL' or 'INTERNAL_MANAGED'. Defaults to
     * 'INTERNAL'.
     */
    readonly loadBalancingScheme?: pulumi.Input<string>;
    /**
     * The load balancing algorithm used within the scope of the locality. The possible values are - ROUND_ROBIN - This is
     * a simple policy in which each healthy backend is selected in round robin order. LEAST_REQUEST - An O(1) algorithm
     * which selects two random healthy hosts and picks the host which has fewer active requests. RING_HASH - The
     * ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the
     * addition/removal of a host from a set of N hosts only affects 1/N of the requests. RANDOM - The load balancer
     * selects a random healthy host. ORIGINAL_DESTINATION - Backend host is selected based on the client connection
     * metadata, i.e., connections are opened to the same address as the destination address of the incoming connection
     * before the connection was redirected to the load balancer. MAGLEV - used as a drop in replacement for the ring hash
     * load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection
     * times. For more information about Maglev, refer to https://ai.google/research/pubs/pub44824 This field is applicable
     * only when the 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.
     */
    readonly localityLbPolicy?: pulumi.Input<string>;
    /**
     * This field denotes the logging options for the load balancer traffic served by this backend service. If logging is
     * enabled, logs will be exported to Stackdriver.
     */
    readonly logConfig?: pulumi.Input<inputs.compute.RegionBackendServiceLogConfig>;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long,
     * and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
     * '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The URL of the network to which this backend service belongs. This field can only be specified when the load
     * balancing scheme is set to INTERNAL.
     */
    readonly network?: pulumi.Input<string>;
    /**
     * Settings controlling eviction of unhealthy hosts from the load balancing pool. This field is applicable only when
     * the 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.
     */
    readonly outlierDetection?: pulumi.Input<inputs.compute.RegionBackendServiceOutlierDetection>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The protocol this RegionBackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2,
     * SSL, TCP, and UDP. The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer types and may
     * result in errors if used with the GA API.
     */
    readonly protocol?: pulumi.Input<string>;
    /**
     * The Region in which the created backend service should reside. If it is not provided, the provider region is used.
     */
    readonly region?: pulumi.Input<string>;
    /**
     * The URI of the created resource.
     */
    readonly selfLink?: pulumi.Input<string>;
    /**
     * Type of session affinity to use. The default is NONE. Session affinity is not applicable if the protocol is UDP.
     */
    readonly sessionAffinity?: pulumi.Input<string>;
    /**
     * How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds. Valid range
     * is [1, 86400].
     */
    readonly timeoutSec?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RegionBackendService resource.
 */
export interface RegionBackendServiceArgs {
    /**
     * Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent
     * and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.
     * When the load balancing scheme is INTERNAL, this field is not used.
     */
    readonly affinityCookieTtlSec?: pulumi.Input<number>;
    /**
     * The set of backends that serve this RegionBackendService.
     */
    readonly backends?: pulumi.Input<pulumi.Input<inputs.compute.RegionBackendServiceBackend>[]>;
    /**
     * Settings controlling the volume of connections to a backend service. This field is applicable only when the
     * 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.
     */
    readonly circuitBreakers?: pulumi.Input<inputs.compute.RegionBackendServiceCircuitBreakers>;
    /**
     * Time for which instance will be drained (not accept new connections, but still work to finish started).
     */
    readonly connectionDrainingTimeoutSec?: pulumi.Input<number>;
    /**
     * Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or
     * other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular
     * destination host will be lost when one or more hosts are added/removed from the destination service. This field
     * specifies parameters that control consistent hashing. This field only applies when all of the following are true - *
     * 'load_balancing_scheme' is set to INTERNAL_MANAGED * 'protocol' is set to HTTP, HTTPS, or HTTP2 *
     * 'locality_lb_policy' is set to MAGLEV or RING_HASH
     */
    readonly consistentHash?: pulumi.Input<inputs.compute.RegionBackendServiceConsistentHash>;
    /**
     * An optional description of this resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Policy for failovers.
     */
    readonly failoverPolicy?: pulumi.Input<inputs.compute.RegionBackendServiceFailoverPolicy>;
    /**
     * The set of URLs to HealthCheck resources for health checking this RegionBackendService. Currently at most one health
     * check can be specified, and a health check is required.
     */
    readonly healthChecks: pulumi.Input<string>;
    /**
     * Indicates what kind of load balancing this regional backend service will be used for. A backend service created for
     * one type of load balancing cannot be used with the other(s). Must be 'INTERNAL' or 'INTERNAL_MANAGED'. Defaults to
     * 'INTERNAL'.
     */
    readonly loadBalancingScheme?: pulumi.Input<string>;
    /**
     * The load balancing algorithm used within the scope of the locality. The possible values are - ROUND_ROBIN - This is
     * a simple policy in which each healthy backend is selected in round robin order. LEAST_REQUEST - An O(1) algorithm
     * which selects two random healthy hosts and picks the host which has fewer active requests. RING_HASH - The
     * ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the
     * addition/removal of a host from a set of N hosts only affects 1/N of the requests. RANDOM - The load balancer
     * selects a random healthy host. ORIGINAL_DESTINATION - Backend host is selected based on the client connection
     * metadata, i.e., connections are opened to the same address as the destination address of the incoming connection
     * before the connection was redirected to the load balancer. MAGLEV - used as a drop in replacement for the ring hash
     * load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection
     * times. For more information about Maglev, refer to https://ai.google/research/pubs/pub44824 This field is applicable
     * only when the 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.
     */
    readonly localityLbPolicy?: pulumi.Input<string>;
    /**
     * This field denotes the logging options for the load balancer traffic served by this backend service. If logging is
     * enabled, logs will be exported to Stackdriver.
     */
    readonly logConfig?: pulumi.Input<inputs.compute.RegionBackendServiceLogConfig>;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long,
     * and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
     * '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The URL of the network to which this backend service belongs. This field can only be specified when the load
     * balancing scheme is set to INTERNAL.
     */
    readonly network?: pulumi.Input<string>;
    /**
     * Settings controlling eviction of unhealthy hosts from the load balancing pool. This field is applicable only when
     * the 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.
     */
    readonly outlierDetection?: pulumi.Input<inputs.compute.RegionBackendServiceOutlierDetection>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The protocol this RegionBackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2,
     * SSL, TCP, and UDP. The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer types and may
     * result in errors if used with the GA API.
     */
    readonly protocol?: pulumi.Input<string>;
    /**
     * The Region in which the created backend service should reside. If it is not provided, the provider region is used.
     */
    readonly region?: pulumi.Input<string>;
    /**
     * Type of session affinity to use. The default is NONE. Session affinity is not applicable if the protocol is UDP.
     */
    readonly sessionAffinity?: pulumi.Input<string>;
    /**
     * How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds. Valid range
     * is [1, 86400].
     */
    readonly timeoutSec?: pulumi.Input<number>;
}
