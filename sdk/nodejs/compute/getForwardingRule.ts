// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Get a forwarding rule within GCE from its name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_forwarding_rule = pulumi.output(gcp.compute.getForwardingRule({
 *     name: "forwarding-rule-us-east1",
 * }));
 * ```
 */
export function getForwardingRule(args: GetForwardingRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetForwardingRuleResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("gcp:compute/getForwardingRule:getForwardingRule", {
        "name": args.name,
        "project": args.project,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getForwardingRule.
 */
export interface GetForwardingRuleArgs {
    /**
     * The name of the forwarding rule.
     */
    name: string;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: string;
    /**
     * The region in which the resource belongs. If it
     * is not provided, the project region is used.
     */
    region?: string;
}

/**
 * A collection of values returned by getForwardingRule.
 */
export interface GetForwardingRuleResult {
    readonly allPorts: boolean;
    readonly allowGlobalAccess: boolean;
    readonly backendService: string;
    readonly creationTimestamp: string;
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ipAddress: string;
    readonly ipProtocol: string;
    readonly isMirroringCollector: boolean;
    readonly labelFingerprint: string;
    readonly labels: {[key: string]: string};
    readonly loadBalancingScheme: string;
    readonly name: string;
    readonly network: string;
    readonly networkTier: string;
    readonly portRange: string;
    readonly ports: string[];
    readonly project?: string;
    readonly region?: string;
    readonly selfLink: string;
    readonly serviceLabel: string;
    readonly serviceName: string;
    readonly subnetwork: string;
    readonly target: string;
}
