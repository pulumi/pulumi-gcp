// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AddressArgs, AddressState } from "./address";
export type Address = import("./address").Address;
export const Address: typeof import("./address").Address = null as any;
utilities.lazyLoad(exports, ["Address"], () => require("./address"));

export { AttachedDiskArgs, AttachedDiskState } from "./attachedDisk";
export type AttachedDisk = import("./attachedDisk").AttachedDisk;
export const AttachedDisk: typeof import("./attachedDisk").AttachedDisk = null as any;
utilities.lazyLoad(exports, ["AttachedDisk"], () => require("./attachedDisk"));

export { AutoscalarArgs, AutoscalarState } from "./autoscalar";
export type Autoscalar = import("./autoscalar").Autoscalar;
export const Autoscalar: typeof import("./autoscalar").Autoscalar = null as any;
utilities.lazyLoad(exports, ["Autoscalar"], () => require("./autoscalar"));

export { AutoscalerArgs, AutoscalerState } from "./autoscaler";
export type Autoscaler = import("./autoscaler").Autoscaler;
export const Autoscaler: typeof import("./autoscaler").Autoscaler = null as any;
utilities.lazyLoad(exports, ["Autoscaler"], () => require("./autoscaler"));

export { BackendBucketArgs, BackendBucketState } from "./backendBucket";
export type BackendBucket = import("./backendBucket").BackendBucket;
export const BackendBucket: typeof import("./backendBucket").BackendBucket = null as any;
utilities.lazyLoad(exports, ["BackendBucket"], () => require("./backendBucket"));

export { BackendBucketIamBindingArgs, BackendBucketIamBindingState } from "./backendBucketIamBinding";
export type BackendBucketIamBinding = import("./backendBucketIamBinding").BackendBucketIamBinding;
export const BackendBucketIamBinding: typeof import("./backendBucketIamBinding").BackendBucketIamBinding = null as any;
utilities.lazyLoad(exports, ["BackendBucketIamBinding"], () => require("./backendBucketIamBinding"));

export { BackendBucketIamMemberArgs, BackendBucketIamMemberState } from "./backendBucketIamMember";
export type BackendBucketIamMember = import("./backendBucketIamMember").BackendBucketIamMember;
export const BackendBucketIamMember: typeof import("./backendBucketIamMember").BackendBucketIamMember = null as any;
utilities.lazyLoad(exports, ["BackendBucketIamMember"], () => require("./backendBucketIamMember"));

export { BackendBucketIamPolicyArgs, BackendBucketIamPolicyState } from "./backendBucketIamPolicy";
export type BackendBucketIamPolicy = import("./backendBucketIamPolicy").BackendBucketIamPolicy;
export const BackendBucketIamPolicy: typeof import("./backendBucketIamPolicy").BackendBucketIamPolicy = null as any;
utilities.lazyLoad(exports, ["BackendBucketIamPolicy"], () => require("./backendBucketIamPolicy"));

export { BackendBucketSignedUrlKeyArgs, BackendBucketSignedUrlKeyState } from "./backendBucketSignedUrlKey";
export type BackendBucketSignedUrlKey = import("./backendBucketSignedUrlKey").BackendBucketSignedUrlKey;
export const BackendBucketSignedUrlKey: typeof import("./backendBucketSignedUrlKey").BackendBucketSignedUrlKey = null as any;
utilities.lazyLoad(exports, ["BackendBucketSignedUrlKey"], () => require("./backendBucketSignedUrlKey"));

export { BackendServiceArgs, BackendServiceState } from "./backendService";
export type BackendService = import("./backendService").BackendService;
export const BackendService: typeof import("./backendService").BackendService = null as any;
utilities.lazyLoad(exports, ["BackendService"], () => require("./backendService"));

export { BackendServiceIamBindingArgs, BackendServiceIamBindingState } from "./backendServiceIamBinding";
export type BackendServiceIamBinding = import("./backendServiceIamBinding").BackendServiceIamBinding;
export const BackendServiceIamBinding: typeof import("./backendServiceIamBinding").BackendServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["BackendServiceIamBinding"], () => require("./backendServiceIamBinding"));

export { BackendServiceIamMemberArgs, BackendServiceIamMemberState } from "./backendServiceIamMember";
export type BackendServiceIamMember = import("./backendServiceIamMember").BackendServiceIamMember;
export const BackendServiceIamMember: typeof import("./backendServiceIamMember").BackendServiceIamMember = null as any;
utilities.lazyLoad(exports, ["BackendServiceIamMember"], () => require("./backendServiceIamMember"));

export { BackendServiceIamPolicyArgs, BackendServiceIamPolicyState } from "./backendServiceIamPolicy";
export type BackendServiceIamPolicy = import("./backendServiceIamPolicy").BackendServiceIamPolicy;
export const BackendServiceIamPolicy: typeof import("./backendServiceIamPolicy").BackendServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["BackendServiceIamPolicy"], () => require("./backendServiceIamPolicy"));

export { BackendServiceSignedUrlKeyArgs, BackendServiceSignedUrlKeyState } from "./backendServiceSignedUrlKey";
export type BackendServiceSignedUrlKey = import("./backendServiceSignedUrlKey").BackendServiceSignedUrlKey;
export const BackendServiceSignedUrlKey: typeof import("./backendServiceSignedUrlKey").BackendServiceSignedUrlKey = null as any;
utilities.lazyLoad(exports, ["BackendServiceSignedUrlKey"], () => require("./backendServiceSignedUrlKey"));

export { DiskArgs, DiskState } from "./disk";
export type Disk = import("./disk").Disk;
export const Disk: typeof import("./disk").Disk = null as any;
utilities.lazyLoad(exports, ["Disk"], () => require("./disk"));

export { DiskIamBindingArgs, DiskIamBindingState } from "./diskIamBinding";
export type DiskIamBinding = import("./diskIamBinding").DiskIamBinding;
export const DiskIamBinding: typeof import("./diskIamBinding").DiskIamBinding = null as any;
utilities.lazyLoad(exports, ["DiskIamBinding"], () => require("./diskIamBinding"));

export { DiskIamMemberArgs, DiskIamMemberState } from "./diskIamMember";
export type DiskIamMember = import("./diskIamMember").DiskIamMember;
export const DiskIamMember: typeof import("./diskIamMember").DiskIamMember = null as any;
utilities.lazyLoad(exports, ["DiskIamMember"], () => require("./diskIamMember"));

export { DiskIamPolicyArgs, DiskIamPolicyState } from "./diskIamPolicy";
export type DiskIamPolicy = import("./diskIamPolicy").DiskIamPolicy;
export const DiskIamPolicy: typeof import("./diskIamPolicy").DiskIamPolicy = null as any;
utilities.lazyLoad(exports, ["DiskIamPolicy"], () => require("./diskIamPolicy"));

export { DiskResourcePolicyAttachmentArgs, DiskResourcePolicyAttachmentState } from "./diskResourcePolicyAttachment";
export type DiskResourcePolicyAttachment = import("./diskResourcePolicyAttachment").DiskResourcePolicyAttachment;
export const DiskResourcePolicyAttachment: typeof import("./diskResourcePolicyAttachment").DiskResourcePolicyAttachment = null as any;
utilities.lazyLoad(exports, ["DiskResourcePolicyAttachment"], () => require("./diskResourcePolicyAttachment"));

export { ExternalVpnGatewayArgs, ExternalVpnGatewayState } from "./externalVpnGateway";
export type ExternalVpnGateway = import("./externalVpnGateway").ExternalVpnGateway;
export const ExternalVpnGateway: typeof import("./externalVpnGateway").ExternalVpnGateway = null as any;
utilities.lazyLoad(exports, ["ExternalVpnGateway"], () => require("./externalVpnGateway"));

export { FirewallArgs, FirewallState } from "./firewall";
export type Firewall = import("./firewall").Firewall;
export const Firewall: typeof import("./firewall").Firewall = null as any;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));

export { FirewallPolicyArgs, FirewallPolicyState } from "./firewallPolicy";
export type FirewallPolicy = import("./firewallPolicy").FirewallPolicy;
export const FirewallPolicy: typeof import("./firewallPolicy").FirewallPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallPolicy"], () => require("./firewallPolicy"));

export { FirewallPolicyAssociationArgs, FirewallPolicyAssociationState } from "./firewallPolicyAssociation";
export type FirewallPolicyAssociation = import("./firewallPolicyAssociation").FirewallPolicyAssociation;
export const FirewallPolicyAssociation: typeof import("./firewallPolicyAssociation").FirewallPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["FirewallPolicyAssociation"], () => require("./firewallPolicyAssociation"));

export { FirewallPolicyRuleArgs, FirewallPolicyRuleState } from "./firewallPolicyRule";
export type FirewallPolicyRule = import("./firewallPolicyRule").FirewallPolicyRule;
export const FirewallPolicyRule: typeof import("./firewallPolicyRule").FirewallPolicyRule = null as any;
utilities.lazyLoad(exports, ["FirewallPolicyRule"], () => require("./firewallPolicyRule"));

export { ForwardingRuleArgs, ForwardingRuleState } from "./forwardingRule";
export type ForwardingRule = import("./forwardingRule").ForwardingRule;
export const ForwardingRule: typeof import("./forwardingRule").ForwardingRule = null as any;
utilities.lazyLoad(exports, ["ForwardingRule"], () => require("./forwardingRule"));

export { GetAddressArgs, GetAddressResult, GetAddressOutputArgs } from "./getAddress";
export const getAddress: typeof import("./getAddress").getAddress = null as any;
export const getAddressOutput: typeof import("./getAddress").getAddressOutput = null as any;
utilities.lazyLoad(exports, ["getAddress","getAddressOutput"], () => require("./getAddress"));

export { GetAddressesArgs, GetAddressesResult, GetAddressesOutputArgs } from "./getAddresses";
export const getAddresses: typeof import("./getAddresses").getAddresses = null as any;
export const getAddressesOutput: typeof import("./getAddresses").getAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getAddresses","getAddressesOutput"], () => require("./getAddresses"));

export { GetBackendBucketArgs, GetBackendBucketResult, GetBackendBucketOutputArgs } from "./getBackendBucket";
export const getBackendBucket: typeof import("./getBackendBucket").getBackendBucket = null as any;
export const getBackendBucketOutput: typeof import("./getBackendBucket").getBackendBucketOutput = null as any;
utilities.lazyLoad(exports, ["getBackendBucket","getBackendBucketOutput"], () => require("./getBackendBucket"));

export { GetBackendServiceArgs, GetBackendServiceResult, GetBackendServiceOutputArgs } from "./getBackendService";
export const getBackendService: typeof import("./getBackendService").getBackendService = null as any;
export const getBackendServiceOutput: typeof import("./getBackendService").getBackendServiceOutput = null as any;
utilities.lazyLoad(exports, ["getBackendService","getBackendServiceOutput"], () => require("./getBackendService"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetDefaultServiceAccountArgs, GetDefaultServiceAccountResult, GetDefaultServiceAccountOutputArgs } from "./getDefaultServiceAccount";
export const getDefaultServiceAccount: typeof import("./getDefaultServiceAccount").getDefaultServiceAccount = null as any;
export const getDefaultServiceAccountOutput: typeof import("./getDefaultServiceAccount").getDefaultServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultServiceAccount","getDefaultServiceAccountOutput"], () => require("./getDefaultServiceAccount"));

export { GetDiskArgs, GetDiskResult, GetDiskOutputArgs } from "./getDisk";
export const getDisk: typeof import("./getDisk").getDisk = null as any;
export const getDiskOutput: typeof import("./getDisk").getDiskOutput = null as any;
utilities.lazyLoad(exports, ["getDisk","getDiskOutput"], () => require("./getDisk"));

export { GetForwardingRuleArgs, GetForwardingRuleResult, GetForwardingRuleOutputArgs } from "./getForwardingRule";
export const getForwardingRule: typeof import("./getForwardingRule").getForwardingRule = null as any;
export const getForwardingRuleOutput: typeof import("./getForwardingRule").getForwardingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getForwardingRule","getForwardingRuleOutput"], () => require("./getForwardingRule"));

export { GetGlobalAddressArgs, GetGlobalAddressResult, GetGlobalAddressOutputArgs } from "./getGlobalAddress";
export const getGlobalAddress: typeof import("./getGlobalAddress").getGlobalAddress = null as any;
export const getGlobalAddressOutput: typeof import("./getGlobalAddress").getGlobalAddressOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalAddress","getGlobalAddressOutput"], () => require("./getGlobalAddress"));

export { GetGlobalForwardingRuleArgs, GetGlobalForwardingRuleResult, GetGlobalForwardingRuleOutputArgs } from "./getGlobalForwardingRule";
export const getGlobalForwardingRule: typeof import("./getGlobalForwardingRule").getGlobalForwardingRule = null as any;
export const getGlobalForwardingRuleOutput: typeof import("./getGlobalForwardingRule").getGlobalForwardingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalForwardingRule","getGlobalForwardingRuleOutput"], () => require("./getGlobalForwardingRule"));

export { GetHcVpnGatewayArgs, GetHcVpnGatewayResult, GetHcVpnGatewayOutputArgs } from "./getHcVpnGateway";
export const getHcVpnGateway: typeof import("./getHcVpnGateway").getHcVpnGateway = null as any;
export const getHcVpnGatewayOutput: typeof import("./getHcVpnGateway").getHcVpnGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getHcVpnGateway","getHcVpnGatewayOutput"], () => require("./getHcVpnGateway"));

export { GetHealthCheckArgs, GetHealthCheckResult, GetHealthCheckOutputArgs } from "./getHealthCheck";
export const getHealthCheck: typeof import("./getHealthCheck").getHealthCheck = null as any;
export const getHealthCheckOutput: typeof import("./getHealthCheck").getHealthCheckOutput = null as any;
utilities.lazyLoad(exports, ["getHealthCheck","getHealthCheckOutput"], () => require("./getHealthCheck"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetInstanceGroupArgs, GetInstanceGroupResult, GetInstanceGroupOutputArgs } from "./getInstanceGroup";
export const getInstanceGroup: typeof import("./getInstanceGroup").getInstanceGroup = null as any;
export const getInstanceGroupOutput: typeof import("./getInstanceGroup").getInstanceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceGroup","getInstanceGroupOutput"], () => require("./getInstanceGroup"));

export { GetInstanceSerialPortArgs, GetInstanceSerialPortResult, GetInstanceSerialPortOutputArgs } from "./getInstanceSerialPort";
export const getInstanceSerialPort: typeof import("./getInstanceSerialPort").getInstanceSerialPort = null as any;
export const getInstanceSerialPortOutput: typeof import("./getInstanceSerialPort").getInstanceSerialPortOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceSerialPort","getInstanceSerialPortOutput"], () => require("./getInstanceSerialPort"));

export { GetInstanceTemplateArgs, GetInstanceTemplateResult, GetInstanceTemplateOutputArgs } from "./getInstanceTemplate";
export const getInstanceTemplate: typeof import("./getInstanceTemplate").getInstanceTemplate = null as any;
export const getInstanceTemplateOutput: typeof import("./getInstanceTemplate").getInstanceTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceTemplate","getInstanceTemplateOutput"], () => require("./getInstanceTemplate"));

export { GetLBIPRangesResult } from "./getLBIPRanges";
export const getLBIPRanges: typeof import("./getLBIPRanges").getLBIPRanges = null as any;
utilities.lazyLoad(exports, ["getLBIPRanges"], () => require("./getLBIPRanges"));

export { GetNetblockIPRangesArgs, GetNetblockIPRangesResult, GetNetblockIPRangesOutputArgs } from "./getNetblockIPRanges";
export const getNetblockIPRanges: typeof import("./getNetblockIPRanges").getNetblockIPRanges = null as any;
export const getNetblockIPRangesOutput: typeof import("./getNetblockIPRanges").getNetblockIPRangesOutput = null as any;
utilities.lazyLoad(exports, ["getNetblockIPRanges","getNetblockIPRangesOutput"], () => require("./getNetblockIPRanges"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetNetworkEndpointGroupArgs, GetNetworkEndpointGroupResult, GetNetworkEndpointGroupOutputArgs } from "./getNetworkEndpointGroup";
export const getNetworkEndpointGroup: typeof import("./getNetworkEndpointGroup").getNetworkEndpointGroup = null as any;
export const getNetworkEndpointGroupOutput: typeof import("./getNetworkEndpointGroup").getNetworkEndpointGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkEndpointGroup","getNetworkEndpointGroupOutput"], () => require("./getNetworkEndpointGroup"));

export { GetNodeTypesArgs, GetNodeTypesResult, GetNodeTypesOutputArgs } from "./getNodeTypes";
export const getNodeTypes: typeof import("./getNodeTypes").getNodeTypes = null as any;
export const getNodeTypesOutput: typeof import("./getNodeTypes").getNodeTypesOutput = null as any;
utilities.lazyLoad(exports, ["getNodeTypes","getNodeTypesOutput"], () => require("./getNodeTypes"));

export { GetRegionInstanceGroupArgs, GetRegionInstanceGroupResult, GetRegionInstanceGroupOutputArgs } from "./getRegionInstanceGroup";
export const getRegionInstanceGroup: typeof import("./getRegionInstanceGroup").getRegionInstanceGroup = null as any;
export const getRegionInstanceGroupOutput: typeof import("./getRegionInstanceGroup").getRegionInstanceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRegionInstanceGroup","getRegionInstanceGroupOutput"], () => require("./getRegionInstanceGroup"));

export { GetRegionNetworkEndpointGroupArgs, GetRegionNetworkEndpointGroupResult, GetRegionNetworkEndpointGroupOutputArgs } from "./getRegionNetworkEndpointGroup";
export const getRegionNetworkEndpointGroup: typeof import("./getRegionNetworkEndpointGroup").getRegionNetworkEndpointGroup = null as any;
export const getRegionNetworkEndpointGroupOutput: typeof import("./getRegionNetworkEndpointGroup").getRegionNetworkEndpointGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRegionNetworkEndpointGroup","getRegionNetworkEndpointGroupOutput"], () => require("./getRegionNetworkEndpointGroup"));

export { GetRegionSslCertificateArgs, GetRegionSslCertificateResult, GetRegionSslCertificateOutputArgs } from "./getRegionSslCertificate";
export const getRegionSslCertificate: typeof import("./getRegionSslCertificate").getRegionSslCertificate = null as any;
export const getRegionSslCertificateOutput: typeof import("./getRegionSslCertificate").getRegionSslCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getRegionSslCertificate","getRegionSslCertificateOutput"], () => require("./getRegionSslCertificate"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetResourcePolicyArgs, GetResourcePolicyResult, GetResourcePolicyOutputArgs } from "./getResourcePolicy";
export const getResourcePolicy: typeof import("./getResourcePolicy").getResourcePolicy = null as any;
export const getResourcePolicyOutput: typeof import("./getResourcePolicy").getResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getResourcePolicy","getResourcePolicyOutput"], () => require("./getResourcePolicy"));

export { GetRouterArgs, GetRouterResult, GetRouterOutputArgs } from "./getRouter";
export const getRouter: typeof import("./getRouter").getRouter = null as any;
export const getRouterOutput: typeof import("./getRouter").getRouterOutput = null as any;
utilities.lazyLoad(exports, ["getRouter","getRouterOutput"], () => require("./getRouter"));

export { GetRouterStatusArgs, GetRouterStatusResult, GetRouterStatusOutputArgs } from "./getRouterStatus";
export const getRouterStatus: typeof import("./getRouterStatus").getRouterStatus = null as any;
export const getRouterStatusOutput: typeof import("./getRouterStatus").getRouterStatusOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStatus","getRouterStatusOutput"], () => require("./getRouterStatus"));

export { GetSSLPolicyArgs, GetSSLPolicyResult, GetSSLPolicyOutputArgs } from "./getSSLPolicy";
export const getSSLPolicy: typeof import("./getSSLPolicy").getSSLPolicy = null as any;
export const getSSLPolicyOutput: typeof import("./getSSLPolicy").getSSLPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSSLPolicy","getSSLPolicyOutput"], () => require("./getSSLPolicy"));

export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export const getSnapshot: typeof import("./getSnapshot").getSnapshot = null as any;
export const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshot","getSnapshotOutput"], () => require("./getSnapshot"));

export { GetSubnetworkArgs, GetSubnetworkResult, GetSubnetworkOutputArgs } from "./getSubnetwork";
export const getSubnetwork: typeof import("./getSubnetwork").getSubnetwork = null as any;
export const getSubnetworkOutput: typeof import("./getSubnetwork").getSubnetworkOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetwork","getSubnetworkOutput"], () => require("./getSubnetwork"));

export { GetVPNGatewayArgs, GetVPNGatewayResult, GetVPNGatewayOutputArgs } from "./getVPNGateway";
export const getVPNGateway: typeof import("./getVPNGateway").getVPNGateway = null as any;
export const getVPNGatewayOutput: typeof import("./getVPNGateway").getVPNGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getVPNGateway","getVPNGatewayOutput"], () => require("./getVPNGateway"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { GlobalAddressArgs, GlobalAddressState } from "./globalAddress";
export type GlobalAddress = import("./globalAddress").GlobalAddress;
export const GlobalAddress: typeof import("./globalAddress").GlobalAddress = null as any;
utilities.lazyLoad(exports, ["GlobalAddress"], () => require("./globalAddress"));

export { GlobalForwardingRuleArgs, GlobalForwardingRuleState } from "./globalForwardingRule";
export type GlobalForwardingRule = import("./globalForwardingRule").GlobalForwardingRule;
export const GlobalForwardingRule: typeof import("./globalForwardingRule").GlobalForwardingRule = null as any;
utilities.lazyLoad(exports, ["GlobalForwardingRule"], () => require("./globalForwardingRule"));

export { GlobalNetworkEndpointArgs, GlobalNetworkEndpointState } from "./globalNetworkEndpoint";
export type GlobalNetworkEndpoint = import("./globalNetworkEndpoint").GlobalNetworkEndpoint;
export const GlobalNetworkEndpoint: typeof import("./globalNetworkEndpoint").GlobalNetworkEndpoint = null as any;
utilities.lazyLoad(exports, ["GlobalNetworkEndpoint"], () => require("./globalNetworkEndpoint"));

export { GlobalNetworkEndpointGroupArgs, GlobalNetworkEndpointGroupState } from "./globalNetworkEndpointGroup";
export type GlobalNetworkEndpointGroup = import("./globalNetworkEndpointGroup").GlobalNetworkEndpointGroup;
export const GlobalNetworkEndpointGroup: typeof import("./globalNetworkEndpointGroup").GlobalNetworkEndpointGroup = null as any;
utilities.lazyLoad(exports, ["GlobalNetworkEndpointGroup"], () => require("./globalNetworkEndpointGroup"));

export { HaVpnGatewayArgs, HaVpnGatewayState } from "./haVpnGateway";
export type HaVpnGateway = import("./haVpnGateway").HaVpnGateway;
export const HaVpnGateway: typeof import("./haVpnGateway").HaVpnGateway = null as any;
utilities.lazyLoad(exports, ["HaVpnGateway"], () => require("./haVpnGateway"));

export { HealthCheckArgs, HealthCheckState } from "./healthCheck";
export type HealthCheck = import("./healthCheck").HealthCheck;
export const HealthCheck: typeof import("./healthCheck").HealthCheck = null as any;
utilities.lazyLoad(exports, ["HealthCheck"], () => require("./healthCheck"));

export { HttpHealthCheckArgs, HttpHealthCheckState } from "./httpHealthCheck";
export type HttpHealthCheck = import("./httpHealthCheck").HttpHealthCheck;
export const HttpHealthCheck: typeof import("./httpHealthCheck").HttpHealthCheck = null as any;
utilities.lazyLoad(exports, ["HttpHealthCheck"], () => require("./httpHealthCheck"));

export { HttpsHealthCheckArgs, HttpsHealthCheckState } from "./httpsHealthCheck";
export type HttpsHealthCheck = import("./httpsHealthCheck").HttpsHealthCheck;
export const HttpsHealthCheck: typeof import("./httpsHealthCheck").HttpsHealthCheck = null as any;
utilities.lazyLoad(exports, ["HttpsHealthCheck"], () => require("./httpsHealthCheck"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { ImageIamBindingArgs, ImageIamBindingState } from "./imageIamBinding";
export type ImageIamBinding = import("./imageIamBinding").ImageIamBinding;
export const ImageIamBinding: typeof import("./imageIamBinding").ImageIamBinding = null as any;
utilities.lazyLoad(exports, ["ImageIamBinding"], () => require("./imageIamBinding"));

export { ImageIamMemberArgs, ImageIamMemberState } from "./imageIamMember";
export type ImageIamMember = import("./imageIamMember").ImageIamMember;
export const ImageIamMember: typeof import("./imageIamMember").ImageIamMember = null as any;
utilities.lazyLoad(exports, ["ImageIamMember"], () => require("./imageIamMember"));

export { ImageIamPolicyArgs, ImageIamPolicyState } from "./imageIamPolicy";
export type ImageIamPolicy = import("./imageIamPolicy").ImageIamPolicy;
export const ImageIamPolicy: typeof import("./imageIamPolicy").ImageIamPolicy = null as any;
utilities.lazyLoad(exports, ["ImageIamPolicy"], () => require("./imageIamPolicy"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceFromMachineImageArgs, InstanceFromMachineImageState } from "./instanceFromMachineImage";
export type InstanceFromMachineImage = import("./instanceFromMachineImage").InstanceFromMachineImage;
export const InstanceFromMachineImage: typeof import("./instanceFromMachineImage").InstanceFromMachineImage = null as any;
utilities.lazyLoad(exports, ["InstanceFromMachineImage"], () => require("./instanceFromMachineImage"));

export { InstanceFromTemplateArgs, InstanceFromTemplateState } from "./instanceFromTemplate";
export type InstanceFromTemplate = import("./instanceFromTemplate").InstanceFromTemplate;
export const InstanceFromTemplate: typeof import("./instanceFromTemplate").InstanceFromTemplate = null as any;
utilities.lazyLoad(exports, ["InstanceFromTemplate"], () => require("./instanceFromTemplate"));

export { InstanceGroupArgs, InstanceGroupState } from "./instanceGroup";
export type InstanceGroup = import("./instanceGroup").InstanceGroup;
export const InstanceGroup: typeof import("./instanceGroup").InstanceGroup = null as any;
utilities.lazyLoad(exports, ["InstanceGroup"], () => require("./instanceGroup"));

export { InstanceGroupManagerArgs, InstanceGroupManagerState } from "./instanceGroupManager";
export type InstanceGroupManager = import("./instanceGroupManager").InstanceGroupManager;
export const InstanceGroupManager: typeof import("./instanceGroupManager").InstanceGroupManager = null as any;
utilities.lazyLoad(exports, ["InstanceGroupManager"], () => require("./instanceGroupManager"));

export { InstanceGroupNamedPortArgs, InstanceGroupNamedPortState } from "./instanceGroupNamedPort";
export type InstanceGroupNamedPort = import("./instanceGroupNamedPort").InstanceGroupNamedPort;
export const InstanceGroupNamedPort: typeof import("./instanceGroupNamedPort").InstanceGroupNamedPort = null as any;
utilities.lazyLoad(exports, ["InstanceGroupNamedPort"], () => require("./instanceGroupNamedPort"));

export { InstanceIAMBindingArgs, InstanceIAMBindingState } from "./instanceIAMBinding";
export type InstanceIAMBinding = import("./instanceIAMBinding").InstanceIAMBinding;
export const InstanceIAMBinding: typeof import("./instanceIAMBinding").InstanceIAMBinding = null as any;
utilities.lazyLoad(exports, ["InstanceIAMBinding"], () => require("./instanceIAMBinding"));

export { InstanceIAMMemberArgs, InstanceIAMMemberState } from "./instanceIAMMember";
export type InstanceIAMMember = import("./instanceIAMMember").InstanceIAMMember;
export const InstanceIAMMember: typeof import("./instanceIAMMember").InstanceIAMMember = null as any;
utilities.lazyLoad(exports, ["InstanceIAMMember"], () => require("./instanceIAMMember"));

export { InstanceIAMPolicyArgs, InstanceIAMPolicyState } from "./instanceIAMPolicy";
export type InstanceIAMPolicy = import("./instanceIAMPolicy").InstanceIAMPolicy;
export const InstanceIAMPolicy: typeof import("./instanceIAMPolicy").InstanceIAMPolicy = null as any;
utilities.lazyLoad(exports, ["InstanceIAMPolicy"], () => require("./instanceIAMPolicy"));

export { InstanceTemplateArgs, InstanceTemplateState } from "./instanceTemplate";
export type InstanceTemplate = import("./instanceTemplate").InstanceTemplate;
export const InstanceTemplate: typeof import("./instanceTemplate").InstanceTemplate = null as any;
utilities.lazyLoad(exports, ["InstanceTemplate"], () => require("./instanceTemplate"));

export { InterconnectAttachmentArgs, InterconnectAttachmentState } from "./interconnectAttachment";
export type InterconnectAttachment = import("./interconnectAttachment").InterconnectAttachment;
export const InterconnectAttachment: typeof import("./interconnectAttachment").InterconnectAttachment = null as any;
utilities.lazyLoad(exports, ["InterconnectAttachment"], () => require("./interconnectAttachment"));

export { MachineImageArgs, MachineImageState } from "./machineImage";
export type MachineImage = import("./machineImage").MachineImage;
export const MachineImage: typeof import("./machineImage").MachineImage = null as any;
utilities.lazyLoad(exports, ["MachineImage"], () => require("./machineImage"));

export { MachineImageIamBindingArgs, MachineImageIamBindingState } from "./machineImageIamBinding";
export type MachineImageIamBinding = import("./machineImageIamBinding").MachineImageIamBinding;
export const MachineImageIamBinding: typeof import("./machineImageIamBinding").MachineImageIamBinding = null as any;
utilities.lazyLoad(exports, ["MachineImageIamBinding"], () => require("./machineImageIamBinding"));

export { MachineImageIamMemberArgs, MachineImageIamMemberState } from "./machineImageIamMember";
export type MachineImageIamMember = import("./machineImageIamMember").MachineImageIamMember;
export const MachineImageIamMember: typeof import("./machineImageIamMember").MachineImageIamMember = null as any;
utilities.lazyLoad(exports, ["MachineImageIamMember"], () => require("./machineImageIamMember"));

export { MachineImageIamPolicyArgs, MachineImageIamPolicyState } from "./machineImageIamPolicy";
export type MachineImageIamPolicy = import("./machineImageIamPolicy").MachineImageIamPolicy;
export const MachineImageIamPolicy: typeof import("./machineImageIamPolicy").MachineImageIamPolicy = null as any;
utilities.lazyLoad(exports, ["MachineImageIamPolicy"], () => require("./machineImageIamPolicy"));

export { ManagedSslCertificateArgs, ManagedSslCertificateState } from "./managedSslCertificate";
export type ManagedSslCertificate = import("./managedSslCertificate").ManagedSslCertificate;
export const ManagedSslCertificate: typeof import("./managedSslCertificate").ManagedSslCertificate = null as any;
utilities.lazyLoad(exports, ["ManagedSslCertificate"], () => require("./managedSslCertificate"));

export { MangedSslCertificateArgs, MangedSslCertificateState } from "./mangedSslCertificate";
export type MangedSslCertificate = import("./mangedSslCertificate").MangedSslCertificate;
export const MangedSslCertificate: typeof import("./mangedSslCertificate").MangedSslCertificate = null as any;
utilities.lazyLoad(exports, ["MangedSslCertificate"], () => require("./mangedSslCertificate"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworkEndpointArgs, NetworkEndpointState } from "./networkEndpoint";
export type NetworkEndpoint = import("./networkEndpoint").NetworkEndpoint;
export const NetworkEndpoint: typeof import("./networkEndpoint").NetworkEndpoint = null as any;
utilities.lazyLoad(exports, ["NetworkEndpoint"], () => require("./networkEndpoint"));

export { NetworkEndpointGroupArgs, NetworkEndpointGroupState } from "./networkEndpointGroup";
export type NetworkEndpointGroup = import("./networkEndpointGroup").NetworkEndpointGroup;
export const NetworkEndpointGroup: typeof import("./networkEndpointGroup").NetworkEndpointGroup = null as any;
utilities.lazyLoad(exports, ["NetworkEndpointGroup"], () => require("./networkEndpointGroup"));

export { NetworkPeeringArgs, NetworkPeeringState } from "./networkPeering";
export type NetworkPeering = import("./networkPeering").NetworkPeering;
export const NetworkPeering: typeof import("./networkPeering").NetworkPeering = null as any;
utilities.lazyLoad(exports, ["NetworkPeering"], () => require("./networkPeering"));

export { NetworkPeeringRoutesConfigArgs, NetworkPeeringRoutesConfigState } from "./networkPeeringRoutesConfig";
export type NetworkPeeringRoutesConfig = import("./networkPeeringRoutesConfig").NetworkPeeringRoutesConfig;
export const NetworkPeeringRoutesConfig: typeof import("./networkPeeringRoutesConfig").NetworkPeeringRoutesConfig = null as any;
utilities.lazyLoad(exports, ["NetworkPeeringRoutesConfig"], () => require("./networkPeeringRoutesConfig"));

export { NodeGroupArgs, NodeGroupState } from "./nodeGroup";
export type NodeGroup = import("./nodeGroup").NodeGroup;
export const NodeGroup: typeof import("./nodeGroup").NodeGroup = null as any;
utilities.lazyLoad(exports, ["NodeGroup"], () => require("./nodeGroup"));

export { NodeTemplateArgs, NodeTemplateState } from "./nodeTemplate";
export type NodeTemplate = import("./nodeTemplate").NodeTemplate;
export const NodeTemplate: typeof import("./nodeTemplate").NodeTemplate = null as any;
utilities.lazyLoad(exports, ["NodeTemplate"], () => require("./nodeTemplate"));

export { OrganizationSecurityPolicyArgs, OrganizationSecurityPolicyState } from "./organizationSecurityPolicy";
export type OrganizationSecurityPolicy = import("./organizationSecurityPolicy").OrganizationSecurityPolicy;
export const OrganizationSecurityPolicy: typeof import("./organizationSecurityPolicy").OrganizationSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationSecurityPolicy"], () => require("./organizationSecurityPolicy"));

export { OrganizationSecurityPolicyAssociationArgs, OrganizationSecurityPolicyAssociationState } from "./organizationSecurityPolicyAssociation";
export type OrganizationSecurityPolicyAssociation = import("./organizationSecurityPolicyAssociation").OrganizationSecurityPolicyAssociation;
export const OrganizationSecurityPolicyAssociation: typeof import("./organizationSecurityPolicyAssociation").OrganizationSecurityPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["OrganizationSecurityPolicyAssociation"], () => require("./organizationSecurityPolicyAssociation"));

export { OrganizationSecurityPolicyRuleArgs, OrganizationSecurityPolicyRuleState } from "./organizationSecurityPolicyRule";
export type OrganizationSecurityPolicyRule = import("./organizationSecurityPolicyRule").OrganizationSecurityPolicyRule;
export const OrganizationSecurityPolicyRule: typeof import("./organizationSecurityPolicyRule").OrganizationSecurityPolicyRule = null as any;
utilities.lazyLoad(exports, ["OrganizationSecurityPolicyRule"], () => require("./organizationSecurityPolicyRule"));

export { PacketMirroringArgs, PacketMirroringState } from "./packetMirroring";
export type PacketMirroring = import("./packetMirroring").PacketMirroring;
export const PacketMirroring: typeof import("./packetMirroring").PacketMirroring = null as any;
utilities.lazyLoad(exports, ["PacketMirroring"], () => require("./packetMirroring"));

export { PerInstanceConfigArgs, PerInstanceConfigState } from "./perInstanceConfig";
export type PerInstanceConfig = import("./perInstanceConfig").PerInstanceConfig;
export const PerInstanceConfig: typeof import("./perInstanceConfig").PerInstanceConfig = null as any;
utilities.lazyLoad(exports, ["PerInstanceConfig"], () => require("./perInstanceConfig"));

export { ProjectDefaultNetworkTierArgs, ProjectDefaultNetworkTierState } from "./projectDefaultNetworkTier";
export type ProjectDefaultNetworkTier = import("./projectDefaultNetworkTier").ProjectDefaultNetworkTier;
export const ProjectDefaultNetworkTier: typeof import("./projectDefaultNetworkTier").ProjectDefaultNetworkTier = null as any;
utilities.lazyLoad(exports, ["ProjectDefaultNetworkTier"], () => require("./projectDefaultNetworkTier"));

export { ProjectMetadataArgs, ProjectMetadataState } from "./projectMetadata";
export type ProjectMetadata = import("./projectMetadata").ProjectMetadata;
export const ProjectMetadata: typeof import("./projectMetadata").ProjectMetadata = null as any;
utilities.lazyLoad(exports, ["ProjectMetadata"], () => require("./projectMetadata"));

export { ProjectMetadataItemArgs, ProjectMetadataItemState } from "./projectMetadataItem";
export type ProjectMetadataItem = import("./projectMetadataItem").ProjectMetadataItem;
export const ProjectMetadataItem: typeof import("./projectMetadataItem").ProjectMetadataItem = null as any;
utilities.lazyLoad(exports, ["ProjectMetadataItem"], () => require("./projectMetadataItem"));

export { RegionAutoscalerArgs, RegionAutoscalerState } from "./regionAutoscaler";
export type RegionAutoscaler = import("./regionAutoscaler").RegionAutoscaler;
export const RegionAutoscaler: typeof import("./regionAutoscaler").RegionAutoscaler = null as any;
utilities.lazyLoad(exports, ["RegionAutoscaler"], () => require("./regionAutoscaler"));

export { RegionBackendServiceArgs, RegionBackendServiceState } from "./regionBackendService";
export type RegionBackendService = import("./regionBackendService").RegionBackendService;
export const RegionBackendService: typeof import("./regionBackendService").RegionBackendService = null as any;
utilities.lazyLoad(exports, ["RegionBackendService"], () => require("./regionBackendService"));

export { RegionBackendServiceIamBindingArgs, RegionBackendServiceIamBindingState } from "./regionBackendServiceIamBinding";
export type RegionBackendServiceIamBinding = import("./regionBackendServiceIamBinding").RegionBackendServiceIamBinding;
export const RegionBackendServiceIamBinding: typeof import("./regionBackendServiceIamBinding").RegionBackendServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["RegionBackendServiceIamBinding"], () => require("./regionBackendServiceIamBinding"));

export { RegionBackendServiceIamMemberArgs, RegionBackendServiceIamMemberState } from "./regionBackendServiceIamMember";
export type RegionBackendServiceIamMember = import("./regionBackendServiceIamMember").RegionBackendServiceIamMember;
export const RegionBackendServiceIamMember: typeof import("./regionBackendServiceIamMember").RegionBackendServiceIamMember = null as any;
utilities.lazyLoad(exports, ["RegionBackendServiceIamMember"], () => require("./regionBackendServiceIamMember"));

export { RegionBackendServiceIamPolicyArgs, RegionBackendServiceIamPolicyState } from "./regionBackendServiceIamPolicy";
export type RegionBackendServiceIamPolicy = import("./regionBackendServiceIamPolicy").RegionBackendServiceIamPolicy;
export const RegionBackendServiceIamPolicy: typeof import("./regionBackendServiceIamPolicy").RegionBackendServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["RegionBackendServiceIamPolicy"], () => require("./regionBackendServiceIamPolicy"));

export { RegionDiskArgs, RegionDiskState } from "./regionDisk";
export type RegionDisk = import("./regionDisk").RegionDisk;
export const RegionDisk: typeof import("./regionDisk").RegionDisk = null as any;
utilities.lazyLoad(exports, ["RegionDisk"], () => require("./regionDisk"));

export { RegionDiskIamBindingArgs, RegionDiskIamBindingState } from "./regionDiskIamBinding";
export type RegionDiskIamBinding = import("./regionDiskIamBinding").RegionDiskIamBinding;
export const RegionDiskIamBinding: typeof import("./regionDiskIamBinding").RegionDiskIamBinding = null as any;
utilities.lazyLoad(exports, ["RegionDiskIamBinding"], () => require("./regionDiskIamBinding"));

export { RegionDiskIamMemberArgs, RegionDiskIamMemberState } from "./regionDiskIamMember";
export type RegionDiskIamMember = import("./regionDiskIamMember").RegionDiskIamMember;
export const RegionDiskIamMember: typeof import("./regionDiskIamMember").RegionDiskIamMember = null as any;
utilities.lazyLoad(exports, ["RegionDiskIamMember"], () => require("./regionDiskIamMember"));

export { RegionDiskIamPolicyArgs, RegionDiskIamPolicyState } from "./regionDiskIamPolicy";
export type RegionDiskIamPolicy = import("./regionDiskIamPolicy").RegionDiskIamPolicy;
export const RegionDiskIamPolicy: typeof import("./regionDiskIamPolicy").RegionDiskIamPolicy = null as any;
utilities.lazyLoad(exports, ["RegionDiskIamPolicy"], () => require("./regionDiskIamPolicy"));

export { RegionDiskResourcePolicyAttachmentArgs, RegionDiskResourcePolicyAttachmentState } from "./regionDiskResourcePolicyAttachment";
export type RegionDiskResourcePolicyAttachment = import("./regionDiskResourcePolicyAttachment").RegionDiskResourcePolicyAttachment;
export const RegionDiskResourcePolicyAttachment: typeof import("./regionDiskResourcePolicyAttachment").RegionDiskResourcePolicyAttachment = null as any;
utilities.lazyLoad(exports, ["RegionDiskResourcePolicyAttachment"], () => require("./regionDiskResourcePolicyAttachment"));

export { RegionHealthCheckArgs, RegionHealthCheckState } from "./regionHealthCheck";
export type RegionHealthCheck = import("./regionHealthCheck").RegionHealthCheck;
export const RegionHealthCheck: typeof import("./regionHealthCheck").RegionHealthCheck = null as any;
utilities.lazyLoad(exports, ["RegionHealthCheck"], () => require("./regionHealthCheck"));

export { RegionInstanceGroupManagerArgs, RegionInstanceGroupManagerState } from "./regionInstanceGroupManager";
export type RegionInstanceGroupManager = import("./regionInstanceGroupManager").RegionInstanceGroupManager;
export const RegionInstanceGroupManager: typeof import("./regionInstanceGroupManager").RegionInstanceGroupManager = null as any;
utilities.lazyLoad(exports, ["RegionInstanceGroupManager"], () => require("./regionInstanceGroupManager"));

export { RegionNetworkEndpointGroupArgs, RegionNetworkEndpointGroupState } from "./regionNetworkEndpointGroup";
export type RegionNetworkEndpointGroup = import("./regionNetworkEndpointGroup").RegionNetworkEndpointGroup;
export const RegionNetworkEndpointGroup: typeof import("./regionNetworkEndpointGroup").RegionNetworkEndpointGroup = null as any;
utilities.lazyLoad(exports, ["RegionNetworkEndpointGroup"], () => require("./regionNetworkEndpointGroup"));

export { RegionPerInstanceConfigArgs, RegionPerInstanceConfigState } from "./regionPerInstanceConfig";
export type RegionPerInstanceConfig = import("./regionPerInstanceConfig").RegionPerInstanceConfig;
export const RegionPerInstanceConfig: typeof import("./regionPerInstanceConfig").RegionPerInstanceConfig = null as any;
utilities.lazyLoad(exports, ["RegionPerInstanceConfig"], () => require("./regionPerInstanceConfig"));

export { RegionSslCertificateArgs, RegionSslCertificateState } from "./regionSslCertificate";
export type RegionSslCertificate = import("./regionSslCertificate").RegionSslCertificate;
export const RegionSslCertificate: typeof import("./regionSslCertificate").RegionSslCertificate = null as any;
utilities.lazyLoad(exports, ["RegionSslCertificate"], () => require("./regionSslCertificate"));

export { RegionSslPolicyArgs, RegionSslPolicyState } from "./regionSslPolicy";
export type RegionSslPolicy = import("./regionSslPolicy").RegionSslPolicy;
export const RegionSslPolicy: typeof import("./regionSslPolicy").RegionSslPolicy = null as any;
utilities.lazyLoad(exports, ["RegionSslPolicy"], () => require("./regionSslPolicy"));

export { RegionTargetHttpProxyArgs, RegionTargetHttpProxyState } from "./regionTargetHttpProxy";
export type RegionTargetHttpProxy = import("./regionTargetHttpProxy").RegionTargetHttpProxy;
export const RegionTargetHttpProxy: typeof import("./regionTargetHttpProxy").RegionTargetHttpProxy = null as any;
utilities.lazyLoad(exports, ["RegionTargetHttpProxy"], () => require("./regionTargetHttpProxy"));

export { RegionTargetHttpsProxyArgs, RegionTargetHttpsProxyState } from "./regionTargetHttpsProxy";
export type RegionTargetHttpsProxy = import("./regionTargetHttpsProxy").RegionTargetHttpsProxy;
export const RegionTargetHttpsProxy: typeof import("./regionTargetHttpsProxy").RegionTargetHttpsProxy = null as any;
utilities.lazyLoad(exports, ["RegionTargetHttpsProxy"], () => require("./regionTargetHttpsProxy"));

export { RegionTargetTcpProxyArgs, RegionTargetTcpProxyState } from "./regionTargetTcpProxy";
export type RegionTargetTcpProxy = import("./regionTargetTcpProxy").RegionTargetTcpProxy;
export const RegionTargetTcpProxy: typeof import("./regionTargetTcpProxy").RegionTargetTcpProxy = null as any;
utilities.lazyLoad(exports, ["RegionTargetTcpProxy"], () => require("./regionTargetTcpProxy"));

export { RegionUrlMapArgs, RegionUrlMapState } from "./regionUrlMap";
export type RegionUrlMap = import("./regionUrlMap").RegionUrlMap;
export const RegionUrlMap: typeof import("./regionUrlMap").RegionUrlMap = null as any;
utilities.lazyLoad(exports, ["RegionUrlMap"], () => require("./regionUrlMap"));

export { ReservationArgs, ReservationState } from "./reservation";
export type Reservation = import("./reservation").Reservation;
export const Reservation: typeof import("./reservation").Reservation = null as any;
utilities.lazyLoad(exports, ["Reservation"], () => require("./reservation"));

export { ResourcePolicyArgs, ResourcePolicyState } from "./resourcePolicy";
export type ResourcePolicy = import("./resourcePolicy").ResourcePolicy;
export const ResourcePolicy: typeof import("./resourcePolicy").ResourcePolicy = null as any;
utilities.lazyLoad(exports, ["ResourcePolicy"], () => require("./resourcePolicy"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { RouterArgs, RouterState } from "./router";
export type Router = import("./router").Router;
export const Router: typeof import("./router").Router = null as any;
utilities.lazyLoad(exports, ["Router"], () => require("./router"));

export { RouterInterfaceArgs, RouterInterfaceState } from "./routerInterface";
export type RouterInterface = import("./routerInterface").RouterInterface;
export const RouterInterface: typeof import("./routerInterface").RouterInterface = null as any;
utilities.lazyLoad(exports, ["RouterInterface"], () => require("./routerInterface"));

export { RouterNatArgs, RouterNatState } from "./routerNat";
export type RouterNat = import("./routerNat").RouterNat;
export const RouterNat: typeof import("./routerNat").RouterNat = null as any;
utilities.lazyLoad(exports, ["RouterNat"], () => require("./routerNat"));

export { RouterPeerArgs, RouterPeerState } from "./routerPeer";
export type RouterPeer = import("./routerPeer").RouterPeer;
export const RouterPeer: typeof import("./routerPeer").RouterPeer = null as any;
utilities.lazyLoad(exports, ["RouterPeer"], () => require("./routerPeer"));

export { RouterStatusArgs, RouterStatusResult, RouterStatusOutputArgs } from "./routerStatus";
export const routerStatus: typeof import("./routerStatus").routerStatus = null as any;
export const routerStatusOutput: typeof import("./routerStatus").routerStatusOutput = null as any;
utilities.lazyLoad(exports, ["routerStatus","routerStatusOutput"], () => require("./routerStatus"));

export { SecurityPolicyArgs, SecurityPolicyState } from "./securityPolicy";
export type SecurityPolicy = import("./securityPolicy").SecurityPolicy;
export const SecurityPolicy: typeof import("./securityPolicy").SecurityPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityPolicy"], () => require("./securityPolicy"));

export { SecurityScanConfigArgs, SecurityScanConfigState } from "./securityScanConfig";
export type SecurityScanConfig = import("./securityScanConfig").SecurityScanConfig;
export const SecurityScanConfig: typeof import("./securityScanConfig").SecurityScanConfig = null as any;
utilities.lazyLoad(exports, ["SecurityScanConfig"], () => require("./securityScanConfig"));

export { ServiceAttachmentArgs, ServiceAttachmentState } from "./serviceAttachment";
export type ServiceAttachment = import("./serviceAttachment").ServiceAttachment;
export const ServiceAttachment: typeof import("./serviceAttachment").ServiceAttachment = null as any;
utilities.lazyLoad(exports, ["ServiceAttachment"], () => require("./serviceAttachment"));

export { SharedVPCHostProjectArgs, SharedVPCHostProjectState } from "./sharedVPCHostProject";
export type SharedVPCHostProject = import("./sharedVPCHostProject").SharedVPCHostProject;
export const SharedVPCHostProject: typeof import("./sharedVPCHostProject").SharedVPCHostProject = null as any;
utilities.lazyLoad(exports, ["SharedVPCHostProject"], () => require("./sharedVPCHostProject"));

export { SharedVPCServiceProjectArgs, SharedVPCServiceProjectState } from "./sharedVPCServiceProject";
export type SharedVPCServiceProject = import("./sharedVPCServiceProject").SharedVPCServiceProject;
export const SharedVPCServiceProject: typeof import("./sharedVPCServiceProject").SharedVPCServiceProject = null as any;
utilities.lazyLoad(exports, ["SharedVPCServiceProject"], () => require("./sharedVPCServiceProject"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SnapshotIamBindingArgs, SnapshotIamBindingState } from "./snapshotIamBinding";
export type SnapshotIamBinding = import("./snapshotIamBinding").SnapshotIamBinding;
export const SnapshotIamBinding: typeof import("./snapshotIamBinding").SnapshotIamBinding = null as any;
utilities.lazyLoad(exports, ["SnapshotIamBinding"], () => require("./snapshotIamBinding"));

export { SnapshotIamMemberArgs, SnapshotIamMemberState } from "./snapshotIamMember";
export type SnapshotIamMember = import("./snapshotIamMember").SnapshotIamMember;
export const SnapshotIamMember: typeof import("./snapshotIamMember").SnapshotIamMember = null as any;
utilities.lazyLoad(exports, ["SnapshotIamMember"], () => require("./snapshotIamMember"));

export { SnapshotIamPolicyArgs, SnapshotIamPolicyState } from "./snapshotIamPolicy";
export type SnapshotIamPolicy = import("./snapshotIamPolicy").SnapshotIamPolicy;
export const SnapshotIamPolicy: typeof import("./snapshotIamPolicy").SnapshotIamPolicy = null as any;
utilities.lazyLoad(exports, ["SnapshotIamPolicy"], () => require("./snapshotIamPolicy"));

export { SSLCertificateArgs, SSLCertificateState } from "./sslcertificate";
export type SSLCertificate = import("./sslcertificate").SSLCertificate;
export const SSLCertificate: typeof import("./sslcertificate").SSLCertificate = null as any;
utilities.lazyLoad(exports, ["SSLCertificate"], () => require("./sslcertificate"));

export { SSLPolicyArgs, SSLPolicyState } from "./sslpolicy";
export type SSLPolicy = import("./sslpolicy").SSLPolicy;
export const SSLPolicy: typeof import("./sslpolicy").SSLPolicy = null as any;
utilities.lazyLoad(exports, ["SSLPolicy"], () => require("./sslpolicy"));

export { SubnetworkArgs, SubnetworkState } from "./subnetwork";
export type Subnetwork = import("./subnetwork").Subnetwork;
export const Subnetwork: typeof import("./subnetwork").Subnetwork = null as any;
utilities.lazyLoad(exports, ["Subnetwork"], () => require("./subnetwork"));

export { SubnetworkIAMBindingArgs, SubnetworkIAMBindingState } from "./subnetworkIAMBinding";
export type SubnetworkIAMBinding = import("./subnetworkIAMBinding").SubnetworkIAMBinding;
export const SubnetworkIAMBinding: typeof import("./subnetworkIAMBinding").SubnetworkIAMBinding = null as any;
utilities.lazyLoad(exports, ["SubnetworkIAMBinding"], () => require("./subnetworkIAMBinding"));

export { SubnetworkIAMMemberArgs, SubnetworkIAMMemberState } from "./subnetworkIAMMember";
export type SubnetworkIAMMember = import("./subnetworkIAMMember").SubnetworkIAMMember;
export const SubnetworkIAMMember: typeof import("./subnetworkIAMMember").SubnetworkIAMMember = null as any;
utilities.lazyLoad(exports, ["SubnetworkIAMMember"], () => require("./subnetworkIAMMember"));

export { SubnetworkIAMPolicyArgs, SubnetworkIAMPolicyState } from "./subnetworkIAMPolicy";
export type SubnetworkIAMPolicy = import("./subnetworkIAMPolicy").SubnetworkIAMPolicy;
export const SubnetworkIAMPolicy: typeof import("./subnetworkIAMPolicy").SubnetworkIAMPolicy = null as any;
utilities.lazyLoad(exports, ["SubnetworkIAMPolicy"], () => require("./subnetworkIAMPolicy"));

export { TargetGrpcProxyArgs, TargetGrpcProxyState } from "./targetGrpcProxy";
export type TargetGrpcProxy = import("./targetGrpcProxy").TargetGrpcProxy;
export const TargetGrpcProxy: typeof import("./targetGrpcProxy").TargetGrpcProxy = null as any;
utilities.lazyLoad(exports, ["TargetGrpcProxy"], () => require("./targetGrpcProxy"));

export { TargetHttpProxyArgs, TargetHttpProxyState } from "./targetHttpProxy";
export type TargetHttpProxy = import("./targetHttpProxy").TargetHttpProxy;
export const TargetHttpProxy: typeof import("./targetHttpProxy").TargetHttpProxy = null as any;
utilities.lazyLoad(exports, ["TargetHttpProxy"], () => require("./targetHttpProxy"));

export { TargetHttpsProxyArgs, TargetHttpsProxyState } from "./targetHttpsProxy";
export type TargetHttpsProxy = import("./targetHttpsProxy").TargetHttpsProxy;
export const TargetHttpsProxy: typeof import("./targetHttpsProxy").TargetHttpsProxy = null as any;
utilities.lazyLoad(exports, ["TargetHttpsProxy"], () => require("./targetHttpsProxy"));

export { TargetInstanceArgs, TargetInstanceState } from "./targetInstance";
export type TargetInstance = import("./targetInstance").TargetInstance;
export const TargetInstance: typeof import("./targetInstance").TargetInstance = null as any;
utilities.lazyLoad(exports, ["TargetInstance"], () => require("./targetInstance"));

export { TargetPoolArgs, TargetPoolState } from "./targetPool";
export type TargetPool = import("./targetPool").TargetPool;
export const TargetPool: typeof import("./targetPool").TargetPool = null as any;
utilities.lazyLoad(exports, ["TargetPool"], () => require("./targetPool"));

export { TargetSSLProxyArgs, TargetSSLProxyState } from "./targetSSLProxy";
export type TargetSSLProxy = import("./targetSSLProxy").TargetSSLProxy;
export const TargetSSLProxy: typeof import("./targetSSLProxy").TargetSSLProxy = null as any;
utilities.lazyLoad(exports, ["TargetSSLProxy"], () => require("./targetSSLProxy"));

export { TargetTCPProxyArgs, TargetTCPProxyState } from "./targetTCPProxy";
export type TargetTCPProxy = import("./targetTCPProxy").TargetTCPProxy;
export const TargetTCPProxy: typeof import("./targetTCPProxy").TargetTCPProxy = null as any;
utilities.lazyLoad(exports, ["TargetTCPProxy"], () => require("./targetTCPProxy"));

export { URLMapArgs, URLMapState } from "./urlmap";
export type URLMap = import("./urlmap").URLMap;
export const URLMap: typeof import("./urlmap").URLMap = null as any;
utilities.lazyLoad(exports, ["URLMap"], () => require("./urlmap"));

export { VPNGatewayArgs, VPNGatewayState } from "./vpngateway";
export type VPNGateway = import("./vpngateway").VPNGateway;
export const VPNGateway: typeof import("./vpngateway").VPNGateway = null as any;
utilities.lazyLoad(exports, ["VPNGateway"], () => require("./vpngateway"));

export { VPNTunnelArgs, VPNTunnelState } from "./vpntunnel";
export type VPNTunnel = import("./vpntunnel").VPNTunnel;
export const VPNTunnel: typeof import("./vpntunnel").VPNTunnel = null as any;
utilities.lazyLoad(exports, ["VPNTunnel"], () => require("./vpntunnel"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:compute/address:Address":
                return new Address(name, <any>undefined, { urn })
            case "gcp:compute/attachedDisk:AttachedDisk":
                return new AttachedDisk(name, <any>undefined, { urn })
            case "gcp:compute/autoscalar:Autoscalar":
                return new Autoscalar(name, <any>undefined, { urn })
            case "gcp:compute/autoscaler:Autoscaler":
                return new Autoscaler(name, <any>undefined, { urn })
            case "gcp:compute/backendBucket:BackendBucket":
                return new BackendBucket(name, <any>undefined, { urn })
            case "gcp:compute/backendBucketIamBinding:BackendBucketIamBinding":
                return new BackendBucketIamBinding(name, <any>undefined, { urn })
            case "gcp:compute/backendBucketIamMember:BackendBucketIamMember":
                return new BackendBucketIamMember(name, <any>undefined, { urn })
            case "gcp:compute/backendBucketIamPolicy:BackendBucketIamPolicy":
                return new BackendBucketIamPolicy(name, <any>undefined, { urn })
            case "gcp:compute/backendBucketSignedUrlKey:BackendBucketSignedUrlKey":
                return new BackendBucketSignedUrlKey(name, <any>undefined, { urn })
            case "gcp:compute/backendService:BackendService":
                return new BackendService(name, <any>undefined, { urn })
            case "gcp:compute/backendServiceIamBinding:BackendServiceIamBinding":
                return new BackendServiceIamBinding(name, <any>undefined, { urn })
            case "gcp:compute/backendServiceIamMember:BackendServiceIamMember":
                return new BackendServiceIamMember(name, <any>undefined, { urn })
            case "gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy":
                return new BackendServiceIamPolicy(name, <any>undefined, { urn })
            case "gcp:compute/backendServiceSignedUrlKey:BackendServiceSignedUrlKey":
                return new BackendServiceSignedUrlKey(name, <any>undefined, { urn })
            case "gcp:compute/disk:Disk":
                return new Disk(name, <any>undefined, { urn })
            case "gcp:compute/diskIamBinding:DiskIamBinding":
                return new DiskIamBinding(name, <any>undefined, { urn })
            case "gcp:compute/diskIamMember:DiskIamMember":
                return new DiskIamMember(name, <any>undefined, { urn })
            case "gcp:compute/diskIamPolicy:DiskIamPolicy":
                return new DiskIamPolicy(name, <any>undefined, { urn })
            case "gcp:compute/diskResourcePolicyAttachment:DiskResourcePolicyAttachment":
                return new DiskResourcePolicyAttachment(name, <any>undefined, { urn })
            case "gcp:compute/externalVpnGateway:ExternalVpnGateway":
                return new ExternalVpnGateway(name, <any>undefined, { urn })
            case "gcp:compute/firewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "gcp:compute/firewallPolicy:FirewallPolicy":
                return new FirewallPolicy(name, <any>undefined, { urn })
            case "gcp:compute/firewallPolicyAssociation:FirewallPolicyAssociation":
                return new FirewallPolicyAssociation(name, <any>undefined, { urn })
            case "gcp:compute/firewallPolicyRule:FirewallPolicyRule":
                return new FirewallPolicyRule(name, <any>undefined, { urn })
            case "gcp:compute/forwardingRule:ForwardingRule":
                return new ForwardingRule(name, <any>undefined, { urn })
            case "gcp:compute/globalAddress:GlobalAddress":
                return new GlobalAddress(name, <any>undefined, { urn })
            case "gcp:compute/globalForwardingRule:GlobalForwardingRule":
                return new GlobalForwardingRule(name, <any>undefined, { urn })
            case "gcp:compute/globalNetworkEndpoint:GlobalNetworkEndpoint":
                return new GlobalNetworkEndpoint(name, <any>undefined, { urn })
            case "gcp:compute/globalNetworkEndpointGroup:GlobalNetworkEndpointGroup":
                return new GlobalNetworkEndpointGroup(name, <any>undefined, { urn })
            case "gcp:compute/haVpnGateway:HaVpnGateway":
                return new HaVpnGateway(name, <any>undefined, { urn })
            case "gcp:compute/healthCheck:HealthCheck":
                return new HealthCheck(name, <any>undefined, { urn })
            case "gcp:compute/httpHealthCheck:HttpHealthCheck":
                return new HttpHealthCheck(name, <any>undefined, { urn })
            case "gcp:compute/httpsHealthCheck:HttpsHealthCheck":
                return new HttpsHealthCheck(name, <any>undefined, { urn })
            case "gcp:compute/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "gcp:compute/imageIamBinding:ImageIamBinding":
                return new ImageIamBinding(name, <any>undefined, { urn })
            case "gcp:compute/imageIamMember:ImageIamMember":
                return new ImageIamMember(name, <any>undefined, { urn })
            case "gcp:compute/imageIamPolicy:ImageIamPolicy":
                return new ImageIamPolicy(name, <any>undefined, { urn })
            case "gcp:compute/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "gcp:compute/instanceFromMachineImage:InstanceFromMachineImage":
                return new InstanceFromMachineImage(name, <any>undefined, { urn })
            case "gcp:compute/instanceFromTemplate:InstanceFromTemplate":
                return new InstanceFromTemplate(name, <any>undefined, { urn })
            case "gcp:compute/instanceGroup:InstanceGroup":
                return new InstanceGroup(name, <any>undefined, { urn })
            case "gcp:compute/instanceGroupManager:InstanceGroupManager":
                return new InstanceGroupManager(name, <any>undefined, { urn })
            case "gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort":
                return new InstanceGroupNamedPort(name, <any>undefined, { urn })
            case "gcp:compute/instanceIAMBinding:InstanceIAMBinding":
                return new InstanceIAMBinding(name, <any>undefined, { urn })
            case "gcp:compute/instanceIAMMember:InstanceIAMMember":
                return new InstanceIAMMember(name, <any>undefined, { urn })
            case "gcp:compute/instanceIAMPolicy:InstanceIAMPolicy":
                return new InstanceIAMPolicy(name, <any>undefined, { urn })
            case "gcp:compute/instanceTemplate:InstanceTemplate":
                return new InstanceTemplate(name, <any>undefined, { urn })
            case "gcp:compute/interconnectAttachment:InterconnectAttachment":
                return new InterconnectAttachment(name, <any>undefined, { urn })
            case "gcp:compute/machineImage:MachineImage":
                return new MachineImage(name, <any>undefined, { urn })
            case "gcp:compute/machineImageIamBinding:MachineImageIamBinding":
                return new MachineImageIamBinding(name, <any>undefined, { urn })
            case "gcp:compute/machineImageIamMember:MachineImageIamMember":
                return new MachineImageIamMember(name, <any>undefined, { urn })
            case "gcp:compute/machineImageIamPolicy:MachineImageIamPolicy":
                return new MachineImageIamPolicy(name, <any>undefined, { urn })
            case "gcp:compute/managedSslCertificate:ManagedSslCertificate":
                return new ManagedSslCertificate(name, <any>undefined, { urn })
            case "gcp:compute/mangedSslCertificate:MangedSslCertificate":
                return new MangedSslCertificate(name, <any>undefined, { urn })
            case "gcp:compute/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "gcp:compute/networkEndpoint:NetworkEndpoint":
                return new NetworkEndpoint(name, <any>undefined, { urn })
            case "gcp:compute/networkEndpointGroup:NetworkEndpointGroup":
                return new NetworkEndpointGroup(name, <any>undefined, { urn })
            case "gcp:compute/networkPeering:NetworkPeering":
                return new NetworkPeering(name, <any>undefined, { urn })
            case "gcp:compute/networkPeeringRoutesConfig:NetworkPeeringRoutesConfig":
                return new NetworkPeeringRoutesConfig(name, <any>undefined, { urn })
            case "gcp:compute/nodeGroup:NodeGroup":
                return new NodeGroup(name, <any>undefined, { urn })
            case "gcp:compute/nodeTemplate:NodeTemplate":
                return new NodeTemplate(name, <any>undefined, { urn })
            case "gcp:compute/organizationSecurityPolicy:OrganizationSecurityPolicy":
                return new OrganizationSecurityPolicy(name, <any>undefined, { urn })
            case "gcp:compute/organizationSecurityPolicyAssociation:OrganizationSecurityPolicyAssociation":
                return new OrganizationSecurityPolicyAssociation(name, <any>undefined, { urn })
            case "gcp:compute/organizationSecurityPolicyRule:OrganizationSecurityPolicyRule":
                return new OrganizationSecurityPolicyRule(name, <any>undefined, { urn })
            case "gcp:compute/packetMirroring:PacketMirroring":
                return new PacketMirroring(name, <any>undefined, { urn })
            case "gcp:compute/perInstanceConfig:PerInstanceConfig":
                return new PerInstanceConfig(name, <any>undefined, { urn })
            case "gcp:compute/projectDefaultNetworkTier:ProjectDefaultNetworkTier":
                return new ProjectDefaultNetworkTier(name, <any>undefined, { urn })
            case "gcp:compute/projectMetadata:ProjectMetadata":
                return new ProjectMetadata(name, <any>undefined, { urn })
            case "gcp:compute/projectMetadataItem:ProjectMetadataItem":
                return new ProjectMetadataItem(name, <any>undefined, { urn })
            case "gcp:compute/regionAutoscaler:RegionAutoscaler":
                return new RegionAutoscaler(name, <any>undefined, { urn })
            case "gcp:compute/regionBackendService:RegionBackendService":
                return new RegionBackendService(name, <any>undefined, { urn })
            case "gcp:compute/regionBackendServiceIamBinding:RegionBackendServiceIamBinding":
                return new RegionBackendServiceIamBinding(name, <any>undefined, { urn })
            case "gcp:compute/regionBackendServiceIamMember:RegionBackendServiceIamMember":
                return new RegionBackendServiceIamMember(name, <any>undefined, { urn })
            case "gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy":
                return new RegionBackendServiceIamPolicy(name, <any>undefined, { urn })
            case "gcp:compute/regionDisk:RegionDisk":
                return new RegionDisk(name, <any>undefined, { urn })
            case "gcp:compute/regionDiskIamBinding:RegionDiskIamBinding":
                return new RegionDiskIamBinding(name, <any>undefined, { urn })
            case "gcp:compute/regionDiskIamMember:RegionDiskIamMember":
                return new RegionDiskIamMember(name, <any>undefined, { urn })
            case "gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy":
                return new RegionDiskIamPolicy(name, <any>undefined, { urn })
            case "gcp:compute/regionDiskResourcePolicyAttachment:RegionDiskResourcePolicyAttachment":
                return new RegionDiskResourcePolicyAttachment(name, <any>undefined, { urn })
            case "gcp:compute/regionHealthCheck:RegionHealthCheck":
                return new RegionHealthCheck(name, <any>undefined, { urn })
            case "gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager":
                return new RegionInstanceGroupManager(name, <any>undefined, { urn })
            case "gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup":
                return new RegionNetworkEndpointGroup(name, <any>undefined, { urn })
            case "gcp:compute/regionPerInstanceConfig:RegionPerInstanceConfig":
                return new RegionPerInstanceConfig(name, <any>undefined, { urn })
            case "gcp:compute/regionSslCertificate:RegionSslCertificate":
                return new RegionSslCertificate(name, <any>undefined, { urn })
            case "gcp:compute/regionSslPolicy:RegionSslPolicy":
                return new RegionSslPolicy(name, <any>undefined, { urn })
            case "gcp:compute/regionTargetHttpProxy:RegionTargetHttpProxy":
                return new RegionTargetHttpProxy(name, <any>undefined, { urn })
            case "gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy":
                return new RegionTargetHttpsProxy(name, <any>undefined, { urn })
            case "gcp:compute/regionTargetTcpProxy:RegionTargetTcpProxy":
                return new RegionTargetTcpProxy(name, <any>undefined, { urn })
            case "gcp:compute/regionUrlMap:RegionUrlMap":
                return new RegionUrlMap(name, <any>undefined, { urn })
            case "gcp:compute/reservation:Reservation":
                return new Reservation(name, <any>undefined, { urn })
            case "gcp:compute/resourcePolicy:ResourcePolicy":
                return new ResourcePolicy(name, <any>undefined, { urn })
            case "gcp:compute/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "gcp:compute/router:Router":
                return new Router(name, <any>undefined, { urn })
            case "gcp:compute/routerInterface:RouterInterface":
                return new RouterInterface(name, <any>undefined, { urn })
            case "gcp:compute/routerNat:RouterNat":
                return new RouterNat(name, <any>undefined, { urn })
            case "gcp:compute/routerPeer:RouterPeer":
                return new RouterPeer(name, <any>undefined, { urn })
            case "gcp:compute/sSLCertificate:SSLCertificate":
                return new SSLCertificate(name, <any>undefined, { urn })
            case "gcp:compute/sSLPolicy:SSLPolicy":
                return new SSLPolicy(name, <any>undefined, { urn })
            case "gcp:compute/securityPolicy:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "gcp:compute/securityScanConfig:SecurityScanConfig":
                return new SecurityScanConfig(name, <any>undefined, { urn })
            case "gcp:compute/serviceAttachment:ServiceAttachment":
                return new ServiceAttachment(name, <any>undefined, { urn })
            case "gcp:compute/sharedVPCHostProject:SharedVPCHostProject":
                return new SharedVPCHostProject(name, <any>undefined, { urn })
            case "gcp:compute/sharedVPCServiceProject:SharedVPCServiceProject":
                return new SharedVPCServiceProject(name, <any>undefined, { urn })
            case "gcp:compute/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "gcp:compute/snapshotIamBinding:SnapshotIamBinding":
                return new SnapshotIamBinding(name, <any>undefined, { urn })
            case "gcp:compute/snapshotIamMember:SnapshotIamMember":
                return new SnapshotIamMember(name, <any>undefined, { urn })
            case "gcp:compute/snapshotIamPolicy:SnapshotIamPolicy":
                return new SnapshotIamPolicy(name, <any>undefined, { urn })
            case "gcp:compute/subnetwork:Subnetwork":
                return new Subnetwork(name, <any>undefined, { urn })
            case "gcp:compute/subnetworkIAMBinding:SubnetworkIAMBinding":
                return new SubnetworkIAMBinding(name, <any>undefined, { urn })
            case "gcp:compute/subnetworkIAMMember:SubnetworkIAMMember":
                return new SubnetworkIAMMember(name, <any>undefined, { urn })
            case "gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy":
                return new SubnetworkIAMPolicy(name, <any>undefined, { urn })
            case "gcp:compute/targetGrpcProxy:TargetGrpcProxy":
                return new TargetGrpcProxy(name, <any>undefined, { urn })
            case "gcp:compute/targetHttpProxy:TargetHttpProxy":
                return new TargetHttpProxy(name, <any>undefined, { urn })
            case "gcp:compute/targetHttpsProxy:TargetHttpsProxy":
                return new TargetHttpsProxy(name, <any>undefined, { urn })
            case "gcp:compute/targetInstance:TargetInstance":
                return new TargetInstance(name, <any>undefined, { urn })
            case "gcp:compute/targetPool:TargetPool":
                return new TargetPool(name, <any>undefined, { urn })
            case "gcp:compute/targetSSLProxy:TargetSSLProxy":
                return new TargetSSLProxy(name, <any>undefined, { urn })
            case "gcp:compute/targetTCPProxy:TargetTCPProxy":
                return new TargetTCPProxy(name, <any>undefined, { urn })
            case "gcp:compute/uRLMap:URLMap":
                return new URLMap(name, <any>undefined, { urn })
            case "gcp:compute/vPNGateway:VPNGateway":
                return new VPNGateway(name, <any>undefined, { urn })
            case "gcp:compute/vPNTunnel:VPNTunnel":
                return new VPNTunnel(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "compute/address", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/attachedDisk", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/autoscalar", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/autoscaler", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/backendBucket", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/backendBucketIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/backendBucketIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/backendBucketIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/backendBucketSignedUrlKey", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/backendService", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/backendServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/backendServiceIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/backendServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/backendServiceSignedUrlKey", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/disk", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/diskIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/diskIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/diskIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/diskResourcePolicyAttachment", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/externalVpnGateway", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/firewall", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/firewallPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/firewallPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/firewallPolicyRule", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/forwardingRule", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/globalAddress", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/globalForwardingRule", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/globalNetworkEndpoint", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/globalNetworkEndpointGroup", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/haVpnGateway", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/healthCheck", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/httpHealthCheck", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/httpsHealthCheck", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/image", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/imageIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/imageIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/imageIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/instance", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/instanceFromMachineImage", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/instanceFromTemplate", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/instanceGroup", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/instanceGroupManager", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/instanceGroupNamedPort", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/instanceIAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/instanceIAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/instanceIAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/instanceTemplate", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/interconnectAttachment", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/machineImage", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/machineImageIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/machineImageIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/machineImageIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/managedSslCertificate", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/mangedSslCertificate", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/network", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/networkEndpoint", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/networkEndpointGroup", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/networkPeering", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/networkPeeringRoutesConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/nodeGroup", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/nodeTemplate", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/organizationSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/organizationSecurityPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/organizationSecurityPolicyRule", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/packetMirroring", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/perInstanceConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/projectDefaultNetworkTier", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/projectMetadata", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/projectMetadataItem", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionAutoscaler", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionBackendService", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionBackendServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionBackendServiceIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionBackendServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionDisk", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionDiskIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionDiskIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionDiskIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionDiskResourcePolicyAttachment", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionHealthCheck", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionInstanceGroupManager", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionNetworkEndpointGroup", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionPerInstanceConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionSslCertificate", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionSslPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionTargetHttpProxy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionTargetHttpsProxy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionTargetTcpProxy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/regionUrlMap", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/reservation", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/resourcePolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/route", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/router", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/routerInterface", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/routerNat", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/routerPeer", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/sSLCertificate", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/sSLPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/securityPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/securityScanConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/serviceAttachment", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/sharedVPCHostProject", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/sharedVPCServiceProject", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/snapshot", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/snapshotIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/snapshotIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/snapshotIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/subnetwork", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/subnetworkIAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/subnetworkIAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/subnetworkIAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/targetGrpcProxy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/targetHttpProxy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/targetHttpsProxy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/targetInstance", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/targetPool", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/targetSSLProxy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/targetTCPProxy", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/uRLMap", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/vPNGateway", _module)
pulumi.runtime.registerResourceModule("gcp", "compute/vPNTunnel", _module)
