// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Represents a GlobalForwardingRule resource. Global forwarding rules are
 * used to forward traffic to the correct load balancer for HTTP load
 * balancing. Global forwarding rules can only be used for HTTP load
 * balancing.
 *
 * For more information, see
 * https://cloud.google.com/compute/docs/load-balancing/http/
 *
 * ## Example Usage
 *
 * ### External Ssl Proxy Lb Mig Backend
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as tls from "@pulumi/tls";
 *
 * // External SSL proxy load balancer with managed instance group backend
 * // VPC
 * const _default = new gcp.compute.Network("default", {
 *     name: "ssl-proxy-xlb-network",
 *     autoCreateSubnetworks: false,
 * });
 * // backend subnet
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "ssl-proxy-xlb-subnet",
 *     ipCidrRange: "10.0.1.0/24",
 *     region: "us-central1",
 *     network: _default.id,
 * });
 * // reserved IP address
 * const defaultGlobalAddress = new gcp.compute.GlobalAddress("default", {name: "ssl-proxy-xlb-ip"});
 * // Self-signed regional SSL certificate for testing
 * const defaultPrivateKey = new tls.PrivateKey("default", {
 *     algorithm: "RSA",
 *     rsaBits: 2048,
 * });
 * const defaultSelfSignedCert = new tls.SelfSignedCert("default", {
 *     keyAlgorithm: defaultPrivateKey.algorithm,
 *     privateKeyPem: defaultPrivateKey.privateKeyPem,
 *     validityPeriodHours: 12,
 *     earlyRenewalHours: 3,
 *     allowedUses: [
 *         "key_encipherment",
 *         "digital_signature",
 *         "server_auth",
 *     ],
 *     dnsNames: ["example.com"],
 *     subject: {
 *         commonName: "example.com",
 *         organization: "ACME Examples, Inc",
 *     },
 * });
 * const defaultSSLCertificate = new gcp.compute.SSLCertificate("default", {
 *     name: "default-cert",
 *     privateKey: defaultPrivateKey.privateKeyPem,
 *     certificate: defaultSelfSignedCert.certPem,
 * });
 * const defaultHealthCheck = new gcp.compute.HealthCheck("default", {
 *     name: "ssl-proxy-health-check",
 *     timeoutSec: 1,
 *     checkIntervalSec: 1,
 *     tcpHealthCheck: {
 *         port: 443,
 *     },
 * });
 * // instance template
 * const defaultInstanceTemplate = new gcp.compute.InstanceTemplate("default", {
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: _default.id,
 *         subnetwork: defaultSubnetwork.id,
 *     }],
 *     name: "ssl-proxy-xlb-mig-template",
 *     machineType: "e2-small",
 *     tags: ["allow-health-check"],
 *     disks: [{
 *         sourceImage: "debian-cloud/debian-10",
 *         autoDelete: true,
 *         boot: true,
 *     }],
 *     metadata: {
 *         "startup-script": `#! /bin/bash
 * set -euo pipefail
 * export DEBIAN_FRONTEND=noninteractive
 * sudo apt-get update
 * sudo apt-get install  -y apache2 jq
 * sudo a2ensite default-ssl
 * sudo a2enmod ssl
 * sudo service apache2 restart
 * NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
 * IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
 * METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')
 * cat <<EOF > /var/www/html/index.html
 * <h1>SSL Load Balancer</h1>
 * <pre>
 * Name: $NAME
 * IP: $IP
 * Metadata: $METADATA
 * </pre>
 * EOF
 * `,
 *     },
 * });
 * // MIG
 * const defaultInstanceGroupManager = new gcp.compute.InstanceGroupManager("default", {
 *     name: "ssl-proxy-xlb-mig1",
 *     zone: "us-central1-c",
 *     namedPorts: [{
 *         name: "tcp",
 *         port: 443,
 *     }],
 *     versions: [{
 *         instanceTemplate: defaultInstanceTemplate.id,
 *         name: "primary",
 *     }],
 *     baseInstanceName: "vm",
 *     targetSize: 2,
 * });
 * // backend service
 * const defaultBackendService = new gcp.compute.BackendService("default", {
 *     name: "ssl-proxy-xlb-backend-service",
 *     protocol: "SSL",
 *     portName: "tcp",
 *     loadBalancingScheme: "EXTERNAL",
 *     timeoutSec: 10,
 *     healthChecks: defaultHealthCheck.id,
 *     backends: [{
 *         group: defaultInstanceGroupManager.instanceGroup,
 *         balancingMode: "UTILIZATION",
 *         maxUtilization: 1,
 *         capacityScaler: 1,
 *     }],
 * });
 * const defaultTargetSSLProxy = new gcp.compute.TargetSSLProxy("default", {
 *     name: "test-proxy",
 *     backendService: defaultBackendService.id,
 *     sslCertificates: [defaultSSLCertificate.id],
 * });
 * // forwarding rule
 * const defaultGlobalForwardingRule = new gcp.compute.GlobalForwardingRule("default", {
 *     name: "ssl-proxy-xlb-forwarding-rule",
 *     ipProtocol: "TCP",
 *     loadBalancingScheme: "EXTERNAL",
 *     portRange: "443",
 *     target: defaultTargetSSLProxy.id,
 *     ipAddress: defaultGlobalAddress.id,
 * });
 * // allow access from health check ranges
 * const defaultFirewall = new gcp.compute.Firewall("default", {
 *     name: "ssl-proxy-xlb-fw-allow-hc",
 *     direction: "INGRESS",
 *     network: _default.id,
 *     sourceRanges: [
 *         "130.211.0.0/22",
 *         "35.191.0.0/16",
 *     ],
 *     allows: [{
 *         protocol: "tcp",
 *     }],
 *     targetTags: ["allow-health-check"],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 * ### External Tcp Proxy Lb Mig Backend
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // External TCP proxy load balancer with managed instance group backend
 * // VPC
 * const _default = new gcp.compute.Network("default", {
 *     name: "tcp-proxy-xlb-network",
 *     autoCreateSubnetworks: false,
 * });
 * // backend subnet
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "tcp-proxy-xlb-subnet",
 *     ipCidrRange: "10.0.1.0/24",
 *     region: "us-central1",
 *     network: _default.id,
 * });
 * // reserved IP address
 * const defaultGlobalAddress = new gcp.compute.GlobalAddress("default", {name: "tcp-proxy-xlb-ip"});
 * const defaultHealthCheck = new gcp.compute.HealthCheck("default", {
 *     name: "tcp-proxy-health-check",
 *     timeoutSec: 1,
 *     checkIntervalSec: 1,
 *     tcpHealthCheck: {
 *         port: 80,
 *     },
 * });
 * // instance template
 * const defaultInstanceTemplate = new gcp.compute.InstanceTemplate("default", {
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: _default.id,
 *         subnetwork: defaultSubnetwork.id,
 *     }],
 *     name: "tcp-proxy-xlb-mig-template",
 *     machineType: "e2-small",
 *     tags: ["allow-health-check"],
 *     disks: [{
 *         sourceImage: "debian-cloud/debian-10",
 *         autoDelete: true,
 *         boot: true,
 *     }],
 *     metadata: {
 *         "startup-script": `#! /bin/bash
 * set -euo pipefail
 * export DEBIAN_FRONTEND=noninteractive
 * apt-get update
 * apt-get install -y nginx-light jq
 * NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
 * IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
 * METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')
 * cat <<EOF > /var/www/html/index.html
 * <pre>
 * Name: $NAME
 * IP: $IP
 * Metadata: $METADATA
 * </pre>
 * EOF
 * `,
 *     },
 * });
 * // MIG
 * const defaultInstanceGroupManager = new gcp.compute.InstanceGroupManager("default", {
 *     name: "tcp-proxy-xlb-mig1",
 *     zone: "us-central1-c",
 *     namedPorts: [{
 *         name: "tcp",
 *         port: 80,
 *     }],
 *     versions: [{
 *         instanceTemplate: defaultInstanceTemplate.id,
 *         name: "primary",
 *     }],
 *     baseInstanceName: "vm",
 *     targetSize: 2,
 * });
 * // backend service
 * const defaultBackendService = new gcp.compute.BackendService("default", {
 *     name: "tcp-proxy-xlb-backend-service",
 *     protocol: "TCP",
 *     portName: "tcp",
 *     loadBalancingScheme: "EXTERNAL",
 *     timeoutSec: 10,
 *     healthChecks: defaultHealthCheck.id,
 *     backends: [{
 *         group: defaultInstanceGroupManager.instanceGroup,
 *         balancingMode: "UTILIZATION",
 *         maxUtilization: 1,
 *         capacityScaler: 1,
 *     }],
 * });
 * const defaultTargetTCPProxy = new gcp.compute.TargetTCPProxy("default", {
 *     name: "test-proxy-health-check",
 *     backendService: defaultBackendService.id,
 * });
 * // forwarding rule
 * const defaultGlobalForwardingRule = new gcp.compute.GlobalForwardingRule("default", {
 *     name: "tcp-proxy-xlb-forwarding-rule",
 *     ipProtocol: "TCP",
 *     loadBalancingScheme: "EXTERNAL",
 *     portRange: "110",
 *     target: defaultTargetTCPProxy.id,
 *     ipAddress: defaultGlobalAddress.id,
 * });
 * // allow access from health check ranges
 * const defaultFirewall = new gcp.compute.Firewall("default", {
 *     name: "tcp-proxy-xlb-fw-allow-hc",
 *     direction: "INGRESS",
 *     network: _default.id,
 *     sourceRanges: [
 *         "130.211.0.0/22",
 *         "35.191.0.0/16",
 *     ],
 *     allows: [{
 *         protocol: "tcp",
 *     }],
 *     targetTags: ["allow-health-check"],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 * ### External Http Lb Mig Backend Custom Header
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // External HTTP load balancer with a CDN-enabled managed instance group backend
 * // and custom request and response headers
 * // VPC
 * const _default = new gcp.compute.Network("default", {
 *     name: "l7-xlb-network",
 *     autoCreateSubnetworks: false,
 * });
 * // backend subnet
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "l7-xlb-subnet",
 *     ipCidrRange: "10.0.1.0/24",
 *     region: "us-central1",
 *     network: _default.id,
 * });
 * // reserved IP address
 * const defaultGlobalAddress = new gcp.compute.GlobalAddress("default", {name: "l7-xlb-static-ip"});
 * // health check
 * const defaultHealthCheck = new gcp.compute.HealthCheck("default", {
 *     name: "l7-xlb-hc",
 *     httpHealthCheck: {
 *         portSpecification: "USE_SERVING_PORT",
 *     },
 * });
 * // instance template
 * const defaultInstanceTemplate = new gcp.compute.InstanceTemplate("default", {
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: _default.id,
 *         subnetwork: defaultSubnetwork.id,
 *     }],
 *     name: "l7-xlb-mig-template",
 *     machineType: "e2-small",
 *     tags: ["allow-health-check"],
 *     disks: [{
 *         sourceImage: "debian-cloud/debian-10",
 *         autoDelete: true,
 *         boot: true,
 *     }],
 *     metadata: {
 *         "startup-script": `#! /bin/bash
 * set -euo pipefail
 *
 * export DEBIAN_FRONTEND=noninteractive
 * apt-get update
 * apt-get install -y nginx-light jq
 *
 * NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
 * IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
 * METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')
 *
 * cat <<EOF > /var/www/html/index.html
 * <pre>
 * Name: $NAME
 * IP: $IP
 * Metadata: $METADATA
 * </pre>
 * EOF
 * `,
 *     },
 * });
 * // MIG
 * const defaultInstanceGroupManager = new gcp.compute.InstanceGroupManager("default", {
 *     name: "l7-xlb-mig1",
 *     zone: "us-central1-c",
 *     namedPorts: [{
 *         name: "http",
 *         port: 8080,
 *     }],
 *     versions: [{
 *         instanceTemplate: defaultInstanceTemplate.id,
 *         name: "primary",
 *     }],
 *     baseInstanceName: "vm",
 *     targetSize: 2,
 * });
 * // backend service with custom request and response headers
 * const defaultBackendService = new gcp.compute.BackendService("default", {
 *     name: "l7-xlb-backend-service",
 *     protocol: "HTTP",
 *     portName: "my-port",
 *     loadBalancingScheme: "EXTERNAL",
 *     timeoutSec: 10,
 *     enableCdn: true,
 *     customRequestHeaders: ["X-Client-Geo-Location: {client_region_subdivision}, {client_city}"],
 *     customResponseHeaders: ["X-Cache-Hit: {cdn_cache_status}"],
 *     healthChecks: defaultHealthCheck.id,
 *     backends: [{
 *         group: defaultInstanceGroupManager.instanceGroup,
 *         balancingMode: "UTILIZATION",
 *         capacityScaler: 1,
 *     }],
 * });
 * // url map
 * const defaultURLMap = new gcp.compute.URLMap("default", {
 *     name: "l7-xlb-url-map",
 *     defaultService: defaultBackendService.id,
 * });
 * // http proxy
 * const defaultTargetHttpProxy = new gcp.compute.TargetHttpProxy("default", {
 *     name: "l7-xlb-target-http-proxy",
 *     urlMap: defaultURLMap.id,
 * });
 * // forwarding rule
 * const defaultGlobalForwardingRule = new gcp.compute.GlobalForwardingRule("default", {
 *     name: "l7-xlb-forwarding-rule",
 *     ipProtocol: "TCP",
 *     loadBalancingScheme: "EXTERNAL",
 *     portRange: "80",
 *     target: defaultTargetHttpProxy.id,
 *     ipAddress: defaultGlobalAddress.id,
 * });
 * // allow access from health check ranges
 * const defaultFirewall = new gcp.compute.Firewall("default", {
 *     name: "l7-xlb-fw-allow-hc",
 *     direction: "INGRESS",
 *     network: _default.id,
 *     sourceRanges: [
 *         "130.211.0.0/22",
 *         "35.191.0.0/16",
 *     ],
 *     allows: [{
 *         protocol: "tcp",
 *     }],
 *     targetTags: ["allow-health-check"],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 * ### Global Forwarding Rule Http
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHttpHealthCheck = new gcp.compute.HttpHealthCheck("default", {
 *     name: "check-backend",
 *     requestPath: "/",
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 * });
 * const defaultBackendService = new gcp.compute.BackendService("default", {
 *     name: "backend",
 *     portName: "http",
 *     protocol: "HTTP",
 *     timeoutSec: 10,
 *     healthChecks: defaultHttpHealthCheck.id,
 * });
 * const defaultURLMap = new gcp.compute.URLMap("default", {
 *     name: "url-map-target-proxy",
 *     description: "a description",
 *     defaultService: defaultBackendService.id,
 *     hostRules: [{
 *         hosts: ["mysite.com"],
 *         pathMatcher: "allpaths",
 *     }],
 *     pathMatchers: [{
 *         name: "allpaths",
 *         defaultService: defaultBackendService.id,
 *         pathRules: [{
 *             paths: ["/*"],
 *             service: defaultBackendService.id,
 *         }],
 *     }],
 * });
 * const defaultTargetHttpProxy = new gcp.compute.TargetHttpProxy("default", {
 *     name: "target-proxy",
 *     description: "a description",
 *     urlMap: defaultURLMap.id,
 * });
 * const _default = new gcp.compute.GlobalForwardingRule("default", {
 *     name: "global-rule",
 *     target: defaultTargetHttpProxy.id,
 *     portRange: "80",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 * ### Global Forwarding Rule Internal
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const debianImage = gcp.compute.getImage({
 *     family: "debian-11",
 *     project: "debian-cloud",
 * });
 * const instanceTemplate = new gcp.compute.InstanceTemplate("instance_template", {
 *     name: "template-backend",
 *     machineType: "e2-medium",
 *     networkInterfaces: [{
 *         network: "default",
 *     }],
 *     disks: [{
 *         sourceImage: debianImage.then(debianImage => debianImage.selfLink),
 *         autoDelete: true,
 *         boot: true,
 *     }],
 * });
 * const igm = new gcp.compute.InstanceGroupManager("igm", {
 *     name: "igm-internal",
 *     versions: [{
 *         instanceTemplate: instanceTemplate.id,
 *         name: "primary",
 *     }],
 *     baseInstanceName: "internal-glb",
 *     zone: "us-central1-f",
 *     targetSize: 1,
 * });
 * const defaultHealthCheck = new gcp.compute.HealthCheck("default", {
 *     name: "check-backend",
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 *     tcpHealthCheck: {
 *         port: 80,
 *     },
 * });
 * const defaultBackendService = new gcp.compute.BackendService("default", {
 *     name: "backend",
 *     portName: "http",
 *     protocol: "HTTP",
 *     timeoutSec: 10,
 *     loadBalancingScheme: "INTERNAL_SELF_MANAGED",
 *     backends: [{
 *         group: igm.instanceGroup,
 *         balancingMode: "RATE",
 *         capacityScaler: 0.4,
 *         maxRatePerInstance: 50,
 *     }],
 *     healthChecks: defaultHealthCheck.id,
 * });
 * const defaultURLMap = new gcp.compute.URLMap("default", {
 *     name: "url-map-target-proxy",
 *     description: "a description",
 *     defaultService: defaultBackendService.id,
 *     hostRules: [{
 *         hosts: ["mysite.com"],
 *         pathMatcher: "allpaths",
 *     }],
 *     pathMatchers: [{
 *         name: "allpaths",
 *         defaultService: defaultBackendService.id,
 *         pathRules: [{
 *             paths: ["/*"],
 *             service: defaultBackendService.id,
 *         }],
 *     }],
 * });
 * const defaultTargetHttpProxy = new gcp.compute.TargetHttpProxy("default", {
 *     name: "target-proxy",
 *     description: "a description",
 *     urlMap: defaultURLMap.id,
 * });
 * const _default = new gcp.compute.GlobalForwardingRule("default", {
 *     name: "global-rule",
 *     target: defaultTargetHttpProxy.id,
 *     portRange: "80",
 *     loadBalancingScheme: "INTERNAL_SELF_MANAGED",
 *     ipAddress: "0.0.0.0",
 *     metadataFilters: [{
 *         filterMatchCriteria: "MATCH_ANY",
 *         filterLabels: [{
 *             name: "PLANET",
 *             value: "MARS",
 *         }],
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 * ### Global Forwarding Rule External Managed
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultBackendService = new gcp.compute.BackendService("default", {
 *     name: "backend",
 *     portName: "http",
 *     protocol: "HTTP",
 *     timeoutSec: 10,
 *     loadBalancingScheme: "EXTERNAL_MANAGED",
 * });
 * const defaultURLMap = new gcp.compute.URLMap("default", {
 *     name: "url-map-target-proxy",
 *     description: "a description",
 *     defaultService: defaultBackendService.id,
 *     hostRules: [{
 *         hosts: ["mysite.com"],
 *         pathMatcher: "allpaths",
 *     }],
 *     pathMatchers: [{
 *         name: "allpaths",
 *         defaultService: defaultBackendService.id,
 *         pathRules: [{
 *             paths: ["/*"],
 *             service: defaultBackendService.id,
 *         }],
 *     }],
 * });
 * const defaultTargetHttpProxy = new gcp.compute.TargetHttpProxy("default", {
 *     name: "target-proxy",
 *     description: "a description",
 *     urlMap: defaultURLMap.id,
 * });
 * const _default = new gcp.compute.GlobalForwardingRule("default", {
 *     name: "global-rule",
 *     target: defaultTargetHttpProxy.id,
 *     portRange: "80",
 *     loadBalancingScheme: "EXTERNAL_MANAGED",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 * ### Global Forwarding Rule Hybrid
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const config = new pulumi.Config();
 * const subnetworkCidr = config.get("subnetworkCidr") || "10.0.0.0/24";
 * const _default = new gcp.compute.Network("default", {name: "my-network"});
 * const internal = new gcp.compute.Network("internal", {
 *     name: "my-internal-network",
 *     autoCreateSubnetworks: false,
 * });
 * const internalSubnetwork = new gcp.compute.Subnetwork("internal", {
 *     name: "my-subnetwork",
 *     network: internal.id,
 *     ipCidrRange: subnetworkCidr,
 *     region: "us-central1",
 *     privateIpGoogleAccess: true,
 * });
 * // Zonal NEG with GCE_VM_IP_PORT
 * const defaultNetworkEndpointGroup = new gcp.compute.NetworkEndpointGroup("default", {
 *     name: "default-neg",
 *     network: _default.id,
 *     defaultPort: 90,
 *     zone: "us-central1-a",
 *     networkEndpointType: "GCE_VM_IP_PORT",
 * });
 * // Zonal NEG with GCE_VM_IP
 * const internalNetworkEndpointGroup = new gcp.compute.NetworkEndpointGroup("internal", {
 *     name: "internal-neg",
 *     network: internal.id,
 *     subnetwork: internalSubnetwork.id,
 *     zone: "us-central1-a",
 *     networkEndpointType: "GCE_VM_IP",
 * });
 * // Hybrid connectivity NEG
 * const hybrid = new gcp.compute.NetworkEndpointGroup("hybrid", {
 *     name: "hybrid-neg",
 *     network: _default.id,
 *     defaultPort: 90,
 *     zone: "us-central1-a",
 *     networkEndpointType: "NON_GCP_PRIVATE_IP_PORT",
 * });
 * const hybrid_endpoint = new gcp.compute.NetworkEndpoint("hybrid-endpoint", {
 *     networkEndpointGroup: hybrid.name,
 *     port: hybrid.defaultPort,
 *     ipAddress: "127.0.0.1",
 * });
 * const defaultHealthCheck = new gcp.compute.HealthCheck("default", {
 *     name: "health-check",
 *     timeoutSec: 1,
 *     checkIntervalSec: 1,
 *     tcpHealthCheck: {
 *         port: 80,
 *     },
 * });
 * // Backend service for Zonal NEG
 * const defaultBackendService = new gcp.compute.BackendService("default", {
 *     name: "backend-default",
 *     portName: "http",
 *     protocol: "HTTP",
 *     timeoutSec: 10,
 *     backends: [{
 *         group: defaultNetworkEndpointGroup.id,
 *         balancingMode: "RATE",
 *         maxRatePerEndpoint: 10,
 *     }],
 *     healthChecks: defaultHealthCheck.id,
 * });
 * // Backgend service for Hybrid NEG
 * const hybridBackendService = new gcp.compute.BackendService("hybrid", {
 *     name: "backend-hybrid",
 *     portName: "http",
 *     protocol: "HTTP",
 *     timeoutSec: 10,
 *     backends: [{
 *         group: hybrid.id,
 *         balancingMode: "RATE",
 *         maxRatePerEndpoint: 10,
 *     }],
 *     healthChecks: defaultHealthCheck.id,
 * });
 * const defaultURLMap = new gcp.compute.URLMap("default", {
 *     name: "url-map-target-proxy",
 *     description: "a description",
 *     defaultService: defaultBackendService.id,
 *     hostRules: [{
 *         hosts: ["mysite.com"],
 *         pathMatcher: "allpaths",
 *     }],
 *     pathMatchers: [{
 *         name: "allpaths",
 *         defaultService: defaultBackendService.id,
 *         pathRules: [
 *             {
 *                 paths: ["/*"],
 *                 service: defaultBackendService.id,
 *             },
 *             {
 *                 paths: ["/hybrid"],
 *                 service: hybridBackendService.id,
 *             },
 *         ],
 *     }],
 * });
 * const defaultTargetHttpProxy = new gcp.compute.TargetHttpProxy("default", {
 *     name: "target-proxy",
 *     description: "a description",
 *     urlMap: defaultURLMap.id,
 * });
 * const defaultGlobalForwardingRule = new gcp.compute.GlobalForwardingRule("default", {
 *     name: "global-rule",
 *     target: defaultTargetHttpProxy.id,
 *     portRange: "80",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 * ### Global Internal Http Lb With Mig Backend
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // Global Internal HTTP load balancer with a managed instance group backend
 * // VPC network
 * const gilbNetwork = new gcp.compute.Network("gilb_network", {
 *     name: "l7-gilb-network",
 *     autoCreateSubnetworks: false,
 * });
 * // proxy-only subnet
 * const proxySubnet = new gcp.compute.Subnetwork("proxy_subnet", {
 *     name: "l7-gilb-proxy-subnet",
 *     ipCidrRange: "10.0.0.0/24",
 *     region: "europe-west1",
 *     purpose: "GLOBAL_MANAGED_PROXY",
 *     role: "ACTIVE",
 *     network: gilbNetwork.id,
 * });
 * // backend subnet
 * const gilbSubnet = new gcp.compute.Subnetwork("gilb_subnet", {
 *     name: "l7-gilb-subnet",
 *     ipCidrRange: "10.0.1.0/24",
 *     region: "europe-west1",
 *     network: gilbNetwork.id,
 * });
 * // health check
 * const defaultHealthCheck = new gcp.compute.HealthCheck("default", {
 *     name: "l7-gilb-hc",
 *     httpHealthCheck: {
 *         portSpecification: "USE_SERVING_PORT",
 *     },
 * });
 * // instance template
 * const instanceTemplate = new gcp.compute.InstanceTemplate("instance_template", {
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: gilbNetwork.id,
 *         subnetwork: gilbSubnet.id,
 *     }],
 *     name: "l7-gilb-mig-template",
 *     machineType: "e2-small",
 *     tags: ["http-server"],
 *     disks: [{
 *         sourceImage: "debian-cloud/debian-10",
 *         autoDelete: true,
 *         boot: true,
 *     }],
 *     metadata: {
 *         "startup-script": `#! /bin/bash
 * set -euo pipefail
 *
 * export DEBIAN_FRONTEND=noninteractive
 * apt-get update
 * apt-get install -y nginx-light jq
 *
 * NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
 * IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
 * METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')
 *
 * cat <<EOF > /var/www/html/index.html
 * <pre>
 * Name: $NAME
 * IP: $IP
 * Metadata: $METADATA
 * </pre>
 * EOF
 * `,
 *     },
 * });
 * // MIG
 * const mig = new gcp.compute.InstanceGroupManager("mig", {
 *     name: "l7-gilb-mig1",
 *     zone: "europe-west1-b",
 *     versions: [{
 *         instanceTemplate: instanceTemplate.id,
 *         name: "primary",
 *     }],
 *     baseInstanceName: "vm",
 *     targetSize: 2,
 * });
 * // backend service
 * const defaultBackendService = new gcp.compute.BackendService("default", {
 *     name: "l7-gilb-backend-subnet",
 *     protocol: "HTTP",
 *     loadBalancingScheme: "INTERNAL_MANAGED",
 *     timeoutSec: 10,
 *     healthChecks: defaultHealthCheck.id,
 *     backends: [{
 *         group: mig.instanceGroup,
 *         balancingMode: "UTILIZATION",
 *         capacityScaler: 1,
 *     }],
 * });
 * // URL map
 * const defaultURLMap = new gcp.compute.URLMap("default", {
 *     name: "l7-gilb-url-map",
 *     defaultService: defaultBackendService.id,
 * });
 * // HTTP target proxy
 * const _default = new gcp.compute.TargetHttpProxy("default", {
 *     name: "l7-gilb-target-http-proxy",
 *     urlMap: defaultURLMap.id,
 * });
 * // forwarding rule
 * const googleComputeForwardingRule = new gcp.compute.GlobalForwardingRule("google_compute_forwarding_rule", {
 *     name: "l7-gilb-forwarding-rule",
 *     ipProtocol: "TCP",
 *     loadBalancingScheme: "INTERNAL_MANAGED",
 *     portRange: "80",
 *     target: _default.id,
 *     network: gilbNetwork.id,
 *     subnetwork: gilbSubnet.id,
 * });
 * // allow all access from IAP and health check ranges
 * const fw_iap = new gcp.compute.Firewall("fw-iap", {
 *     name: "l7-gilb-fw-allow-iap-hc",
 *     direction: "INGRESS",
 *     network: gilbNetwork.id,
 *     sourceRanges: [
 *         "130.211.0.0/22",
 *         "35.191.0.0/16",
 *         "35.235.240.0/20",
 *     ],
 *     allows: [{
 *         protocol: "tcp",
 *     }],
 * });
 * // allow http from proxy subnet to backends
 * const fw_gilb_to_backends = new gcp.compute.Firewall("fw-gilb-to-backends", {
 *     name: "l7-gilb-fw-allow-gilb-to-backends",
 *     direction: "INGRESS",
 *     network: gilbNetwork.id,
 *     sourceRanges: ["10.0.0.0/24"],
 *     targetTags: ["http-server"],
 *     allows: [{
 *         protocol: "tcp",
 *         ports: [
 *             "80",
 *             "443",
 *             "8080",
 *         ],
 *     }],
 * });
 * // test instance
 * const vm_test = new gcp.compute.Instance("vm-test", {
 *     name: "l7-gilb-test-vm",
 *     zone: "europe-west1-b",
 *     machineType: "e2-small",
 *     networkInterfaces: [{
 *         network: gilbNetwork.id,
 *         subnetwork: gilbSubnet.id,
 *     }],
 *     bootDisk: {
 *         initializeParams: {
 *             image: "debian-cloud/debian-10",
 *         },
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 * ### Private Service Connect Google Apis
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network = new gcp.compute.Network("network", {
 *     project: "my-project-name",
 *     name: "my-network",
 *     autoCreateSubnetworks: false,
 * });
 * const vpcSubnetwork = new gcp.compute.Subnetwork("vpc_subnetwork", {
 *     project: network.project,
 *     name: "my-subnetwork",
 *     ipCidrRange: "10.2.0.0/16",
 *     region: "us-central1",
 *     network: network.id,
 *     privateIpGoogleAccess: true,
 * });
 * const _default = new gcp.compute.GlobalAddress("default", {
 *     project: network.project,
 *     name: "global-psconnect-ip",
 *     addressType: "INTERNAL",
 *     purpose: "PRIVATE_SERVICE_CONNECT",
 *     network: network.id,
 *     address: "100.100.100.106",
 * });
 * const defaultGlobalForwardingRule = new gcp.compute.GlobalForwardingRule("default", {
 *     project: network.project,
 *     name: "globalrule",
 *     target: "all-apis",
 *     network: network.id,
 *     ipAddress: _default.id,
 *     loadBalancingScheme: "",
 *     serviceDirectoryRegistrations: {
 *         namespace: "sd-namespace",
 *         serviceDirectoryRegion: "europe-west3",
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 * ### Private Service Connect Google Apis No Automate Dns
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network = new gcp.compute.Network("network", {
 *     project: "my-project-name",
 *     name: "my-network",
 *     autoCreateSubnetworks: false,
 * });
 * const vpcSubnetwork = new gcp.compute.Subnetwork("vpc_subnetwork", {
 *     project: network.project,
 *     name: "my-subnetwork",
 *     ipCidrRange: "10.2.0.0/16",
 *     region: "us-central1",
 *     network: network.id,
 *     privateIpGoogleAccess: true,
 * });
 * const _default = new gcp.compute.GlobalAddress("default", {
 *     project: network.project,
 *     name: "global-psconnect-ip",
 *     addressType: "INTERNAL",
 *     purpose: "PRIVATE_SERVICE_CONNECT",
 *     network: network.id,
 *     address: "100.100.100.106",
 * });
 * const defaultGlobalForwardingRule = new gcp.compute.GlobalForwardingRule("default", {
 *     project: network.project,
 *     name: "globalrule",
 *     target: "all-apis",
 *     network: network.id,
 *     ipAddress: _default.id,
 *     loadBalancingScheme: "",
 *     noAutomateDnsZone: false,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * GlobalForwardingRule can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/global/forwardingRules/{{name}}`
 *
 * * `{{project}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, GlobalForwardingRule can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/globalForwardingRule:GlobalForwardingRule default projects/{{project}}/global/forwardingRules/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/globalForwardingRule:GlobalForwardingRule default {{project}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/globalForwardingRule:GlobalForwardingRule default {{name}}
 * ```
 */
export class GlobalForwardingRule extends pulumi.CustomResource {
    /**
     * Get an existing GlobalForwardingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalForwardingRuleState, opts?: pulumi.CustomResourceOptions): GlobalForwardingRule {
        return new GlobalForwardingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/globalForwardingRule:GlobalForwardingRule';

    /**
     * Returns true if the given object is an instance of GlobalForwardingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalForwardingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalForwardingRule.__pulumiType;
    }

    /**
     * This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
     */
    public readonly allowPscGlobalAccess!: pulumi.Output<boolean | undefined>;
    /**
     * [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
     */
    public /*out*/ readonly baseForwardingRule!: pulumi.Output<string>;
    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * IP address for which this forwarding rule accepts traffic. When a client
     * sends traffic to this IP address, the forwarding rule directs the traffic
     * to the referenced `target`.
     * While creating a forwarding rule, specifying an `IPAddress` is
     * required under the following circumstances:
     * * When the `target` is set to `targetGrpcProxy` and
     * `validateForProxyless` is set to `true`, the
     * `IPAddress` should be set to `0.0.0.0`.
     * * When the `target` is a Private Service Connect Google APIs
     * bundle, you must specify an `IPAddress`.
     *
     * Otherwise, you can optionally specify an IP address that references an
     * existing static (reserved) IP address resource. When omitted, Google Cloud
     * assigns an ephemeral IP address.
     * Use one of the following formats to specify an IP address while creating a
     * forwarding rule:
     * * IP address number, as in `100.1.2.3`
     * * IPv6 address range, as in `2600:1234::/96`
     * * Full resource URL, as in
     * `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
     * * Partial URL or by name, as in:
     * * `projects/project_id/regions/region/addresses/address-name`
     * * `regions/region/addresses/address-name`
     * * `global/addresses/address-name`
     * * `address-name`
     *
     * The forwarding rule's `target`,
     * and in most cases, also the `loadBalancingScheme`, determine the
     * type of IP address that you can use. For detailed information, see
     * [IP address
     * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * When reading an `IPAddress`, the API always returns the IP
     * address number.
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * The IP protocol to which this rule applies.
     * For protocol forwarding, valid
     * options are `TCP`, `UDP`, `ESP`,
     * `AH`, `SCTP`, `ICMP` and
     * `L3_DEFAULT`.
     * The valid IP protocols are different for different load balancing products
     * as described in [Load balancing
     * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
     * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`.
     */
    public readonly ipProtocol!: pulumi.Output<string>;
    /**
     * The IP Version that will be used by this global forwarding rule.
     * Possible values are: `IPV4`, `IPV6`.
     */
    public readonly ipVersion!: pulumi.Output<string | undefined>;
    /**
     * The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     */
    public /*out*/ readonly labelFingerprint!: pulumi.Output<string>;
    /**
     * Labels to apply to this forwarding rule.  A list of key->value pairs.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the forwarding rule type.
     * For more information about forwarding rules, refer to
     * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
     * Default value is `EXTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
     */
    public readonly loadBalancingScheme!: pulumi.Output<string | undefined>;
    /**
     * Opaque filter criteria used by Loadbalancer to restrict routing
     * configuration to a limited set xDS compliant clients. In their xDS
     * requests to Loadbalancer, xDS clients present node metadata. If a
     * match takes place, the relevant routing configuration is made available
     * to those proxies.
     * For each metadataFilter in this list, if its filterMatchCriteria is set
     * to MATCH_ANY, at least one of the filterLabels must match the
     * corresponding label provided in the metadata. If its filterMatchCriteria
     * is set to MATCH_ALL, then all of its filterLabels must match with
     * corresponding labels in the provided metadata.
     * metadataFilters specified here can be overridden by those specified in
     * the UrlMap that this ForwardingRule references.
     * metadataFilters only applies to Loadbalancers that have their
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     */
    public readonly metadataFilters!: pulumi.Output<outputs.compute.GlobalForwardingRuleMetadataFilter[] | undefined>;
    /**
     * Name of the resource; provided by the client when the resource is created.
     * The name must be 1-63 characters long, and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
     * Specifically, the name must be 1-63 characters long and match the regular
     * expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit, except the last character, which
     * cannot be a dash.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, the forwarding rule name must be a 1-20 characters string with
     * lowercase letters and numbers and must start with a letter.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * This field is not used for external load balancing.
     * For Internal TCP/UDP Load Balancing, this field identifies the network that
     * the load balanced IP should belong to for this Forwarding Rule.
     * If the subnetwork is specified, the network of the subnetwork will be used.
     * If neither subnetwork nor this field is specified, the default network will
     * be used.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, a network must be provided.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
     */
    public readonly noAutomateDnsZone!: pulumi.Output<boolean | undefined>;
    /**
     * The `portRange` field has the following limitations:
     * * It requires that the forwarding rule `IPProtocol` be TCP, UDP, or SCTP,
     * and
     * * It's applicable only to the following products: external passthrough
     * Network Load Balancers, internal and external proxy Network Load
     * Balancers, internal and external Application Load Balancers, external
     * protocol forwarding, and Classic VPN.
     * * Some products have restrictions on what ports can be used. See
     * [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
     * for details.
     * For external forwarding rules, two or more forwarding rules cannot use the
     * same `[IPAddress, IPProtocol]` pair, and cannot have overlapping
     * `portRange`s.
     * For internal forwarding rules within the same VPC network, two or more
     * forwarding rules cannot use the same `[IPAddress, IPProtocol]` pair, and
     * cannot have overlapping `portRange`s.
     */
    public readonly portRange!: pulumi.Output<string | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The PSC connection id of the PSC Forwarding Rule.
     */
    public /*out*/ readonly pscConnectionId!: pulumi.Output<string>;
    /**
     * The PSC connection status of the PSC Forwarding Rule. Possible values: `STATUS_UNSPECIFIED`, `PENDING`, `ACCEPTED`, `REJECTED`, `CLOSED`
     */
    public /*out*/ readonly pscConnectionStatus!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The URI of the created resource.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Service Directory resources to register this forwarding rule with.
     * Currently, only supports a single Service Directory resource.
     * Structure is documented below.
     */
    public readonly serviceDirectoryRegistrations!: pulumi.Output<outputs.compute.GlobalForwardingRuleServiceDirectoryRegistrations>;
    /**
     * If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
     */
    public readonly sourceIpRanges!: pulumi.Output<string[] | undefined>;
    /**
     * This field identifies the subnetwork that the load balanced IP should
     * belong to for this Forwarding Rule, used in internal load balancing and
     * network load balancing with IPv6.
     * If the network specified is in auto subnet mode, this field is optional.
     * However, a subnetwork must be specified if the network is in custom subnet
     * mode or when creating external forwarding rule with IPv6.
     */
    public readonly subnetwork!: pulumi.Output<string>;
    /**
     * The URL of the target resource to receive the matched traffic.  For
     * regional forwarding rules, this target must be in the same region as the
     * forwarding rule. For global forwarding rules, this target must be a global
     * load balancing resource.
     * The forwarded traffic must be of a type appropriate to the target object.
     * *  For load balancers, see the "Target" column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
     * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
     * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
     *
     * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
     *
     *
     * - - -
     */
    public readonly target!: pulumi.Output<string>;

    /**
     * Create a GlobalForwardingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalForwardingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalForwardingRuleArgs | GlobalForwardingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalForwardingRuleState | undefined;
            resourceInputs["allowPscGlobalAccess"] = state ? state.allowPscGlobalAccess : undefined;
            resourceInputs["baseForwardingRule"] = state ? state.baseForwardingRule : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["labelFingerprint"] = state ? state.labelFingerprint : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["loadBalancingScheme"] = state ? state.loadBalancingScheme : undefined;
            resourceInputs["metadataFilters"] = state ? state.metadataFilters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["noAutomateDnsZone"] = state ? state.noAutomateDnsZone : undefined;
            resourceInputs["portRange"] = state ? state.portRange : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pscConnectionId"] = state ? state.pscConnectionId : undefined;
            resourceInputs["pscConnectionStatus"] = state ? state.pscConnectionStatus : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["serviceDirectoryRegistrations"] = state ? state.serviceDirectoryRegistrations : undefined;
            resourceInputs["sourceIpRanges"] = state ? state.sourceIpRanges : undefined;
            resourceInputs["subnetwork"] = state ? state.subnetwork : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
        } else {
            const args = argsOrState as GlobalForwardingRuleArgs | undefined;
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["allowPscGlobalAccess"] = args ? args.allowPscGlobalAccess : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["loadBalancingScheme"] = args ? args.loadBalancingScheme : undefined;
            resourceInputs["metadataFilters"] = args ? args.metadataFilters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["noAutomateDnsZone"] = args ? args.noAutomateDnsZone : undefined;
            resourceInputs["portRange"] = args ? args.portRange : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceDirectoryRegistrations"] = args ? args.serviceDirectoryRegistrations : undefined;
            resourceInputs["sourceIpRanges"] = args ? args.sourceIpRanges : undefined;
            resourceInputs["subnetwork"] = args ? args.subnetwork : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["baseForwardingRule"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["labelFingerprint"] = undefined /*out*/;
            resourceInputs["pscConnectionId"] = undefined /*out*/;
            resourceInputs["pscConnectionStatus"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GlobalForwardingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalForwardingRule resources.
 */
export interface GlobalForwardingRuleState {
    /**
     * This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
     */
    allowPscGlobalAccess?: pulumi.Input<boolean>;
    /**
     * [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
     */
    baseForwardingRule?: pulumi.Input<string>;
    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * IP address for which this forwarding rule accepts traffic. When a client
     * sends traffic to this IP address, the forwarding rule directs the traffic
     * to the referenced `target`.
     * While creating a forwarding rule, specifying an `IPAddress` is
     * required under the following circumstances:
     * * When the `target` is set to `targetGrpcProxy` and
     * `validateForProxyless` is set to `true`, the
     * `IPAddress` should be set to `0.0.0.0`.
     * * When the `target` is a Private Service Connect Google APIs
     * bundle, you must specify an `IPAddress`.
     *
     * Otherwise, you can optionally specify an IP address that references an
     * existing static (reserved) IP address resource. When omitted, Google Cloud
     * assigns an ephemeral IP address.
     * Use one of the following formats to specify an IP address while creating a
     * forwarding rule:
     * * IP address number, as in `100.1.2.3`
     * * IPv6 address range, as in `2600:1234::/96`
     * * Full resource URL, as in
     * `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
     * * Partial URL or by name, as in:
     * * `projects/project_id/regions/region/addresses/address-name`
     * * `regions/region/addresses/address-name`
     * * `global/addresses/address-name`
     * * `address-name`
     *
     * The forwarding rule's `target`,
     * and in most cases, also the `loadBalancingScheme`, determine the
     * type of IP address that you can use. For detailed information, see
     * [IP address
     * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * When reading an `IPAddress`, the API always returns the IP
     * address number.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The IP protocol to which this rule applies.
     * For protocol forwarding, valid
     * options are `TCP`, `UDP`, `ESP`,
     * `AH`, `SCTP`, `ICMP` and
     * `L3_DEFAULT`.
     * The valid IP protocols are different for different load balancing products
     * as described in [Load balancing
     * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
     * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`.
     */
    ipProtocol?: pulumi.Input<string>;
    /**
     * The IP Version that will be used by this global forwarding rule.
     * Possible values are: `IPV4`, `IPV6`.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     */
    labelFingerprint?: pulumi.Input<string>;
    /**
     * Labels to apply to this forwarding rule.  A list of key->value pairs.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the forwarding rule type.
     * For more information about forwarding rules, refer to
     * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
     * Default value is `EXTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
     */
    loadBalancingScheme?: pulumi.Input<string>;
    /**
     * Opaque filter criteria used by Loadbalancer to restrict routing
     * configuration to a limited set xDS compliant clients. In their xDS
     * requests to Loadbalancer, xDS clients present node metadata. If a
     * match takes place, the relevant routing configuration is made available
     * to those proxies.
     * For each metadataFilter in this list, if its filterMatchCriteria is set
     * to MATCH_ANY, at least one of the filterLabels must match the
     * corresponding label provided in the metadata. If its filterMatchCriteria
     * is set to MATCH_ALL, then all of its filterLabels must match with
     * corresponding labels in the provided metadata.
     * metadataFilters specified here can be overridden by those specified in
     * the UrlMap that this ForwardingRule references.
     * metadataFilters only applies to Loadbalancers that have their
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     */
    metadataFilters?: pulumi.Input<pulumi.Input<inputs.compute.GlobalForwardingRuleMetadataFilter>[]>;
    /**
     * Name of the resource; provided by the client when the resource is created.
     * The name must be 1-63 characters long, and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
     * Specifically, the name must be 1-63 characters long and match the regular
     * expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit, except the last character, which
     * cannot be a dash.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, the forwarding rule name must be a 1-20 characters string with
     * lowercase letters and numbers and must start with a letter.
     */
    name?: pulumi.Input<string>;
    /**
     * This field is not used for external load balancing.
     * For Internal TCP/UDP Load Balancing, this field identifies the network that
     * the load balanced IP should belong to for this Forwarding Rule.
     * If the subnetwork is specified, the network of the subnetwork will be used.
     * If neither subnetwork nor this field is specified, the default network will
     * be used.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, a network must be provided.
     */
    network?: pulumi.Input<string>;
    /**
     * This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
     */
    noAutomateDnsZone?: pulumi.Input<boolean>;
    /**
     * The `portRange` field has the following limitations:
     * * It requires that the forwarding rule `IPProtocol` be TCP, UDP, or SCTP,
     * and
     * * It's applicable only to the following products: external passthrough
     * Network Load Balancers, internal and external proxy Network Load
     * Balancers, internal and external Application Load Balancers, external
     * protocol forwarding, and Classic VPN.
     * * Some products have restrictions on what ports can be used. See
     * [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
     * for details.
     * For external forwarding rules, two or more forwarding rules cannot use the
     * same `[IPAddress, IPProtocol]` pair, and cannot have overlapping
     * `portRange`s.
     * For internal forwarding rules within the same VPC network, two or more
     * forwarding rules cannot use the same `[IPAddress, IPProtocol]` pair, and
     * cannot have overlapping `portRange`s.
     */
    portRange?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The PSC connection id of the PSC Forwarding Rule.
     */
    pscConnectionId?: pulumi.Input<string>;
    /**
     * The PSC connection status of the PSC Forwarding Rule. Possible values: `STATUS_UNSPECIFIED`, `PENDING`, `ACCEPTED`, `REJECTED`, `CLOSED`
     */
    pscConnectionStatus?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The URI of the created resource.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * Service Directory resources to register this forwarding rule with.
     * Currently, only supports a single Service Directory resource.
     * Structure is documented below.
     */
    serviceDirectoryRegistrations?: pulumi.Input<inputs.compute.GlobalForwardingRuleServiceDirectoryRegistrations>;
    /**
     * If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
     */
    sourceIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This field identifies the subnetwork that the load balanced IP should
     * belong to for this Forwarding Rule, used in internal load balancing and
     * network load balancing with IPv6.
     * If the network specified is in auto subnet mode, this field is optional.
     * However, a subnetwork must be specified if the network is in custom subnet
     * mode or when creating external forwarding rule with IPv6.
     */
    subnetwork?: pulumi.Input<string>;
    /**
     * The URL of the target resource to receive the matched traffic.  For
     * regional forwarding rules, this target must be in the same region as the
     * forwarding rule. For global forwarding rules, this target must be a global
     * load balancing resource.
     * The forwarded traffic must be of a type appropriate to the target object.
     * *  For load balancers, see the "Target" column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
     * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
     * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
     *
     * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
     *
     *
     * - - -
     */
    target?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GlobalForwardingRule resource.
 */
export interface GlobalForwardingRuleArgs {
    /**
     * This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
     */
    allowPscGlobalAccess?: pulumi.Input<boolean>;
    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * IP address for which this forwarding rule accepts traffic. When a client
     * sends traffic to this IP address, the forwarding rule directs the traffic
     * to the referenced `target`.
     * While creating a forwarding rule, specifying an `IPAddress` is
     * required under the following circumstances:
     * * When the `target` is set to `targetGrpcProxy` and
     * `validateForProxyless` is set to `true`, the
     * `IPAddress` should be set to `0.0.0.0`.
     * * When the `target` is a Private Service Connect Google APIs
     * bundle, you must specify an `IPAddress`.
     *
     * Otherwise, you can optionally specify an IP address that references an
     * existing static (reserved) IP address resource. When omitted, Google Cloud
     * assigns an ephemeral IP address.
     * Use one of the following formats to specify an IP address while creating a
     * forwarding rule:
     * * IP address number, as in `100.1.2.3`
     * * IPv6 address range, as in `2600:1234::/96`
     * * Full resource URL, as in
     * `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
     * * Partial URL or by name, as in:
     * * `projects/project_id/regions/region/addresses/address-name`
     * * `regions/region/addresses/address-name`
     * * `global/addresses/address-name`
     * * `address-name`
     *
     * The forwarding rule's `target`,
     * and in most cases, also the `loadBalancingScheme`, determine the
     * type of IP address that you can use. For detailed information, see
     * [IP address
     * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * When reading an `IPAddress`, the API always returns the IP
     * address number.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The IP protocol to which this rule applies.
     * For protocol forwarding, valid
     * options are `TCP`, `UDP`, `ESP`,
     * `AH`, `SCTP`, `ICMP` and
     * `L3_DEFAULT`.
     * The valid IP protocols are different for different load balancing products
     * as described in [Load balancing
     * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
     * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`.
     */
    ipProtocol?: pulumi.Input<string>;
    /**
     * The IP Version that will be used by this global forwarding rule.
     * Possible values are: `IPV4`, `IPV6`.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * Labels to apply to this forwarding rule.  A list of key->value pairs.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the forwarding rule type.
     * For more information about forwarding rules, refer to
     * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
     * Default value is `EXTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
     */
    loadBalancingScheme?: pulumi.Input<string>;
    /**
     * Opaque filter criteria used by Loadbalancer to restrict routing
     * configuration to a limited set xDS compliant clients. In their xDS
     * requests to Loadbalancer, xDS clients present node metadata. If a
     * match takes place, the relevant routing configuration is made available
     * to those proxies.
     * For each metadataFilter in this list, if its filterMatchCriteria is set
     * to MATCH_ANY, at least one of the filterLabels must match the
     * corresponding label provided in the metadata. If its filterMatchCriteria
     * is set to MATCH_ALL, then all of its filterLabels must match with
     * corresponding labels in the provided metadata.
     * metadataFilters specified here can be overridden by those specified in
     * the UrlMap that this ForwardingRule references.
     * metadataFilters only applies to Loadbalancers that have their
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     */
    metadataFilters?: pulumi.Input<pulumi.Input<inputs.compute.GlobalForwardingRuleMetadataFilter>[]>;
    /**
     * Name of the resource; provided by the client when the resource is created.
     * The name must be 1-63 characters long, and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
     * Specifically, the name must be 1-63 characters long and match the regular
     * expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit, except the last character, which
     * cannot be a dash.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, the forwarding rule name must be a 1-20 characters string with
     * lowercase letters and numbers and must start with a letter.
     */
    name?: pulumi.Input<string>;
    /**
     * This field is not used for external load balancing.
     * For Internal TCP/UDP Load Balancing, this field identifies the network that
     * the load balanced IP should belong to for this Forwarding Rule.
     * If the subnetwork is specified, the network of the subnetwork will be used.
     * If neither subnetwork nor this field is specified, the default network will
     * be used.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, a network must be provided.
     */
    network?: pulumi.Input<string>;
    /**
     * This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
     */
    noAutomateDnsZone?: pulumi.Input<boolean>;
    /**
     * The `portRange` field has the following limitations:
     * * It requires that the forwarding rule `IPProtocol` be TCP, UDP, or SCTP,
     * and
     * * It's applicable only to the following products: external passthrough
     * Network Load Balancers, internal and external proxy Network Load
     * Balancers, internal and external Application Load Balancers, external
     * protocol forwarding, and Classic VPN.
     * * Some products have restrictions on what ports can be used. See
     * [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
     * for details.
     * For external forwarding rules, two or more forwarding rules cannot use the
     * same `[IPAddress, IPProtocol]` pair, and cannot have overlapping
     * `portRange`s.
     * For internal forwarding rules within the same VPC network, two or more
     * forwarding rules cannot use the same `[IPAddress, IPProtocol]` pair, and
     * cannot have overlapping `portRange`s.
     */
    portRange?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Service Directory resources to register this forwarding rule with.
     * Currently, only supports a single Service Directory resource.
     * Structure is documented below.
     */
    serviceDirectoryRegistrations?: pulumi.Input<inputs.compute.GlobalForwardingRuleServiceDirectoryRegistrations>;
    /**
     * If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
     */
    sourceIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This field identifies the subnetwork that the load balanced IP should
     * belong to for this Forwarding Rule, used in internal load balancing and
     * network load balancing with IPv6.
     * If the network specified is in auto subnet mode, this field is optional.
     * However, a subnetwork must be specified if the network is in custom subnet
     * mode or when creating external forwarding rule with IPv6.
     */
    subnetwork?: pulumi.Input<string>;
    /**
     * The URL of the target resource to receive the matched traffic.  For
     * regional forwarding rules, this target must be in the same region as the
     * forwarding rule. For global forwarding rules, this target must be a global
     * load balancing resource.
     * The forwarded traffic must be of a type appropriate to the target object.
     * *  For load balancers, see the "Target" column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
     * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
     * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
     *
     * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
     *
     *
     * - - -
     */
    target: pulumi.Input<string>;
}
