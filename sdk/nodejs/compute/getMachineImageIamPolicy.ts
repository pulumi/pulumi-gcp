// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const policy = gcp.compute.getMachineImageIamPolicy({
 *     project: image.project,
 *     machineImage: image.name,
 * });
 * ```
 */
export function getMachineImageIamPolicy(args: GetMachineImageIamPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetMachineImageIamPolicyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:compute/getMachineImageIamPolicy:getMachineImageIamPolicy", {
        "machineImage": args.machineImage,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getMachineImageIamPolicy.
 */
export interface GetMachineImageIamPolicyArgs {
    /**
     * Used to find the parent resource to bind the IAM policy to
     */
    machineImage: string;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     */
    project?: string;
}

/**
 * A collection of values returned by getMachineImageIamPolicy.
 */
export interface GetMachineImageIamPolicyResult {
    /**
     * (Computed) The etag of the IAM policy.
     */
    readonly etag: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly machineImage: string;
    /**
     * (Required only by `gcp.compute.MachineImageIamPolicy`) The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     */
    readonly policyData: string;
    readonly project: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const policy = gcp.compute.getMachineImageIamPolicy({
 *     project: image.project,
 *     machineImage: image.name,
 * });
 * ```
 */
export function getMachineImageIamPolicyOutput(args: GetMachineImageIamPolicyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMachineImageIamPolicyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:compute/getMachineImageIamPolicy:getMachineImageIamPolicy", {
        "machineImage": args.machineImage,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getMachineImageIamPolicy.
 */
export interface GetMachineImageIamPolicyOutputArgs {
    /**
     * Used to find the parent resource to bind the IAM policy to
     */
    machineImage: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
