// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A policy that can be attached to a resource to specify or schedule actions on that resource.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_resource_policy.html.markdown.
 */
export class ResourcePolicy extends pulumi.CustomResource {
    /**
     * Get an existing ResourcePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourcePolicyState, opts?: pulumi.CustomResourceOptions): ResourcePolicy {
        return new ResourcePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/resourcePolicy:ResourcePolicy';

    /**
     * Returns true if the given object is an instance of ResourcePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourcePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourcePolicy.__pulumiType;
    }

    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    public readonly snapshotSchedulePolicy!: pulumi.Output<{ retentionPolicy?: { maxRetentionDays: number, onSourceDiskDelete?: string }, schedule: { dailySchedule?: { daysInCycle: number, startTime: string }, hourlySchedule?: { hoursInCycle: number, startTime: string }, weeklySchedule?: { dayOfWeeks: { day: string, startTime: string }[] } }, snapshotProperties?: { guestFlush?: boolean, labels?: {[key: string]: string}, storageLocations?: string } } | undefined>;

    /**
     * Create a ResourcePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ResourcePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourcePolicyArgs | ResourcePolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ResourcePolicyState | undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["snapshotSchedulePolicy"] = state ? state.snapshotSchedulePolicy : undefined;
        } else {
            const args = argsOrState as ResourcePolicyArgs | undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["snapshotSchedulePolicy"] = args ? args.snapshotSchedulePolicy : undefined;
            inputs["selfLink"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ResourcePolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourcePolicy resources.
 */
export interface ResourcePolicyState {
    readonly name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly selfLink?: pulumi.Input<string>;
    readonly snapshotSchedulePolicy?: pulumi.Input<{ retentionPolicy?: pulumi.Input<{ maxRetentionDays: pulumi.Input<number>, onSourceDiskDelete?: pulumi.Input<string> }>, schedule: pulumi.Input<{ dailySchedule?: pulumi.Input<{ daysInCycle: pulumi.Input<number>, startTime: pulumi.Input<string> }>, hourlySchedule?: pulumi.Input<{ hoursInCycle: pulumi.Input<number>, startTime: pulumi.Input<string> }>, weeklySchedule?: pulumi.Input<{ dayOfWeeks: pulumi.Input<pulumi.Input<{ day: pulumi.Input<string>, startTime: pulumi.Input<string> }>[]> }> }>, snapshotProperties?: pulumi.Input<{ guestFlush?: pulumi.Input<boolean>, labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, storageLocations?: pulumi.Input<string> }> }>;
}

/**
 * The set of arguments for constructing a ResourcePolicy resource.
 */
export interface ResourcePolicyArgs {
    readonly name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly snapshotSchedulePolicy?: pulumi.Input<{ retentionPolicy?: pulumi.Input<{ maxRetentionDays: pulumi.Input<number>, onSourceDiskDelete?: pulumi.Input<string> }>, schedule: pulumi.Input<{ dailySchedule?: pulumi.Input<{ daysInCycle: pulumi.Input<number>, startTime: pulumi.Input<string> }>, hourlySchedule?: pulumi.Input<{ hoursInCycle: pulumi.Input<number>, startTime: pulumi.Input<string> }>, weeklySchedule?: pulumi.Input<{ dayOfWeeks: pulumi.Input<pulumi.Input<{ day: pulumi.Input<string>, startTime: pulumi.Input<string> }>[]> }> }>, snapshotProperties?: pulumi.Input<{ guestFlush?: pulumi.Input<boolean>, labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, storageLocations?: pulumi.Input<string> }> }>;
}
