// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a network peering within GCE. For more information see
 * [the official documentation](https://cloud.google.com/compute/docs/vpc/vpc-peering)
 * and
 * [API](https://cloud.google.com/compute/docs/reference/latest/networks).
 *
 * > Both networks must create a peering with each other for the peering
 * to be functional.
 *
 * > Subnets IP ranges across peered VPC networks cannot overlap.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {autoCreateSubnetworks: false});
 * const other = new gcp.compute.Network("other", {autoCreateSubnetworks: false});
 * const peering1 = new gcp.compute.NetworkPeering("peering1", {
 *     network: _default.selfLink,
 *     peerNetwork: other.selfLink,
 * });
 * const peering2 = new gcp.compute.NetworkPeering("peering2", {
 *     network: other.selfLink,
 *     peerNetwork: _default.selfLink,
 * });
 * ```
 *
 * ## Import
 *
 * VPC network peerings can be imported using the name and project of the primary network the peering exists in and the name of the network peering
 *
 * ```sh
 *  $ pulumi import gcp:compute/networkPeering:NetworkPeering peering_network project-name/network-name/peering-name
 * ```
 */
export class NetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkPeeringState, opts?: pulumi.CustomResourceOptions): NetworkPeering {
        return new NetworkPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/networkPeering:NetworkPeering';

    /**
     * Returns true if the given object is an instance of NetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPeering.__pulumiType;
    }

    /**
     * Whether to export the custom routes to the peer network. Defaults to `false`.
     */
    public readonly exportCustomRoutes!: pulumi.Output<boolean | undefined>;
    /**
     * Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
     */
    public readonly exportSubnetRoutesWithPublicIp!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to import the custom routes from the peer network. Defaults to `false`.
     */
    public readonly importCustomRoutes!: pulumi.Output<boolean | undefined>;
    /**
     * Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
     */
    public readonly importSubnetRoutesWithPublicIp!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the peering.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The primary network of the peering.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * The peer network in the peering. The peer network
     * may belong to a different project.
     */
    public readonly peerNetwork!: pulumi.Output<string>;
    /**
     * State for the peering, either `ACTIVE` or `INACTIVE`. The peering is
     * `ACTIVE` when there's a matching configuration in the peer network.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Details about the current state of the peering.
     */
    public /*out*/ readonly stateDetails!: pulumi.Output<string>;

    /**
     * Create a NetworkPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkPeeringArgs | NetworkPeeringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkPeeringState | undefined;
            resourceInputs["exportCustomRoutes"] = state ? state.exportCustomRoutes : undefined;
            resourceInputs["exportSubnetRoutesWithPublicIp"] = state ? state.exportSubnetRoutesWithPublicIp : undefined;
            resourceInputs["importCustomRoutes"] = state ? state.importCustomRoutes : undefined;
            resourceInputs["importSubnetRoutesWithPublicIp"] = state ? state.importSubnetRoutesWithPublicIp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["peerNetwork"] = state ? state.peerNetwork : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateDetails"] = state ? state.stateDetails : undefined;
        } else {
            const args = argsOrState as NetworkPeeringArgs | undefined;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.peerNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerNetwork'");
            }
            resourceInputs["exportCustomRoutes"] = args ? args.exportCustomRoutes : undefined;
            resourceInputs["exportSubnetRoutesWithPublicIp"] = args ? args.exportSubnetRoutesWithPublicIp : undefined;
            resourceInputs["importCustomRoutes"] = args ? args.importCustomRoutes : undefined;
            resourceInputs["importSubnetRoutesWithPublicIp"] = args ? args.importSubnetRoutesWithPublicIp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["peerNetwork"] = args ? args.peerNetwork : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkPeering.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkPeering resources.
 */
export interface NetworkPeeringState {
    /**
     * Whether to export the custom routes to the peer network. Defaults to `false`.
     */
    exportCustomRoutes?: pulumi.Input<boolean>;
    /**
     * Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
     */
    exportSubnetRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * Whether to import the custom routes from the peer network. Defaults to `false`.
     */
    importCustomRoutes?: pulumi.Input<boolean>;
    /**
     * Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
     */
    importSubnetRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * Name of the peering.
     */
    name?: pulumi.Input<string>;
    /**
     * The primary network of the peering.
     */
    network?: pulumi.Input<string>;
    /**
     * The peer network in the peering. The peer network
     * may belong to a different project.
     */
    peerNetwork?: pulumi.Input<string>;
    /**
     * State for the peering, either `ACTIVE` or `INACTIVE`. The peering is
     * `ACTIVE` when there's a matching configuration in the peer network.
     */
    state?: pulumi.Input<string>;
    /**
     * Details about the current state of the peering.
     */
    stateDetails?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkPeering resource.
 */
export interface NetworkPeeringArgs {
    /**
     * Whether to export the custom routes to the peer network. Defaults to `false`.
     */
    exportCustomRoutes?: pulumi.Input<boolean>;
    /**
     * Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
     */
    exportSubnetRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * Whether to import the custom routes from the peer network. Defaults to `false`.
     */
    importCustomRoutes?: pulumi.Input<boolean>;
    /**
     * Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
     */
    importSubnetRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * Name of the peering.
     */
    name?: pulumi.Input<string>;
    /**
     * The primary network of the peering.
     */
    network: pulumi.Input<string>;
    /**
     * The peer network in the peering. The peer network
     * may belong to a different project.
     */
    peerNetwork: pulumi.Input<string>;
}
