// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Represents an Instance Settings resource. Instance settings are centralized configuration parameters that allow users to configure the default values for specific VM parameters that are normally set using GCE instance API methods.
 *
 * To get more information about InstanceSettings, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/instanceSettings)
 * * How-to Guides
 *     * [Update Instance Settings](https://cloud.google.com/compute/docs/metadata/setting-custom-metadata#set-custom-project-zonal-metadata)
 *
 * ## Example Usage
 *
 * ### Instance Settings Basic
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const gceInstanceSettings = new gcp.compute.InstanceSettings("gce_instance_settings", {
 *     zone: "us-east7-b",
 *     metadata: {
 *         items: {
 *             foo: "baz",
 *         },
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * InstanceSettings can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/zones/{{zone}}/instanceSettings`
 *
 * * `{{project}}/{{zone}}`
 *
 * * `{{zone}}`
 *
 * When using the `pulumi import` command, InstanceSettings can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/instanceSettings:InstanceSettings default projects/{{project}}/zones/{{zone}}/instanceSettings
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/instanceSettings:InstanceSettings default {{project}}/{{zone}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/instanceSettings:InstanceSettings default {{zone}}
 * ```
 */
export class InstanceSettings extends pulumi.CustomResource {
    /**
     * Get an existing InstanceSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceSettingsState, opts?: pulumi.CustomResourceOptions): InstanceSettings {
        return new InstanceSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/instanceSettings:InstanceSettings';

    /**
     * Returns true if the given object is an instance of InstanceSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceSettings.__pulumiType;
    }

    /**
     * The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     */
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * The metadata key/value pairs assigned to all the instances in the corresponding scope.
     * Structure is documented below.
     */
    public readonly metadata!: pulumi.Output<outputs.compute.InstanceSettingsMetadata | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * A reference to the zone where the machine resides.
     *
     *
     * - - -
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a InstanceSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceSettingsArgs | InstanceSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceSettingsState | undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as InstanceSettingsArgs | undefined;
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["fingerprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceSettings resources.
 */
export interface InstanceSettingsState {
    /**
     * The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * The metadata key/value pairs assigned to all the instances in the corresponding scope.
     * Structure is documented below.
     */
    metadata?: pulumi.Input<inputs.compute.InstanceSettingsMetadata>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * A reference to the zone where the machine resides.
     *
     *
     * - - -
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceSettings resource.
 */
export interface InstanceSettingsArgs {
    /**
     * The metadata key/value pairs assigned to all the instances in the corresponding scope.
     * Structure is documented below.
     */
    metadata?: pulumi.Input<inputs.compute.InstanceSettingsMetadata>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * A reference to the zone where the machine resides.
     *
     *
     * - - -
     */
    zone: pulumi.Input<string>;
}
