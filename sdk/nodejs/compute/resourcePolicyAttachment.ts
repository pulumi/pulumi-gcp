// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Adds existing resource policies to a compute instance. You can only add one policy
 * which will be applied to this instance for scheduling start/stop operations.
 *
 * This resource can be used instead of setting the resourcePolicy directly in the
 * compute instance resource to avoid dependency issues when using instance-level IAM
 * permissions.
 *
 * ## Example Usage
 *
 * ### Compute Resource Policy Attachment Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.compute.Instance("instance", {
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: "default",
 *     }],
 *     name: "my-instance",
 *     machineType: "e2-medium",
 *     zone: "us-central1-a",
 *     bootDisk: {
 *         initializeParams: {
 *             image: "debian-cloud/debian-11",
 *         },
 *     },
 * });
 * const policy = new gcp.compute.ResourcePolicy("policy", {
 *     name: "my-resource-policy",
 *     region: "us-central1",
 *     instanceSchedulePolicy: {
 *         vmStartSchedule: {
 *             schedule: "0 8 * * *",
 *         },
 *         vmStopSchedule: {
 *             schedule: "0 18 * * *",
 *         },
 *         timeZone: "America/New_York",
 *     },
 * });
 * const attachment = new gcp.compute.ResourcePolicyAttachment("attachment", {
 *     name: policy.name,
 *     instance: instance.name,
 *     zone: "us-central1-a",
 * });
 * ```
 *
 * ## Import
 *
 * ResourcePolicyAttachment can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/zones/{{zone}}/instances/{{instance}}/{{name}}`
 *
 * * `{{project}}/{{zone}}/{{instance}}/{{name}}`
 *
 * * `{{zone}}/{{instance}}/{{name}}`
 *
 * * `{{instance}}/{{name}}`
 *
 * When using the `pulumi import` command, ResourcePolicyAttachment can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/resourcePolicyAttachment:ResourcePolicyAttachment default projects/{{project}}/zones/{{zone}}/instances/{{instance}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/resourcePolicyAttachment:ResourcePolicyAttachment default {{project}}/{{zone}}/{{instance}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/resourcePolicyAttachment:ResourcePolicyAttachment default {{zone}}/{{instance}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/resourcePolicyAttachment:ResourcePolicyAttachment default {{instance}}/{{name}}
 * ```
 */
export class ResourcePolicyAttachment extends pulumi.CustomResource {
    /**
     * Get an existing ResourcePolicyAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourcePolicyAttachmentState, opts?: pulumi.CustomResourceOptions): ResourcePolicyAttachment {
        return new ResourcePolicyAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/resourcePolicyAttachment:ResourcePolicyAttachment';

    /**
     * Returns true if the given object is an instance of ResourcePolicyAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourcePolicyAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourcePolicyAttachment.__pulumiType;
    }

    /**
     * The name of the instance in which the resource policies are attached to.
     *
     *
     * - - -
     */
    public readonly instance!: pulumi.Output<string>;
    /**
     * The resource policy to be attached to the instance for scheduling start/stop
     * operations. Do not specify the self link.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * A reference to the zone where the instance resides.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a ResourcePolicyAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourcePolicyAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourcePolicyAttachmentArgs | ResourcePolicyAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourcePolicyAttachmentState | undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ResourcePolicyAttachmentArgs | undefined;
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourcePolicyAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourcePolicyAttachment resources.
 */
export interface ResourcePolicyAttachmentState {
    /**
     * The name of the instance in which the resource policies are attached to.
     *
     *
     * - - -
     */
    instance?: pulumi.Input<string>;
    /**
     * The resource policy to be attached to the instance for scheduling start/stop
     * operations. Do not specify the self link.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * A reference to the zone where the instance resides.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourcePolicyAttachment resource.
 */
export interface ResourcePolicyAttachmentArgs {
    /**
     * The name of the instance in which the resource policies are attached to.
     *
     *
     * - - -
     */
    instance: pulumi.Input<string>;
    /**
     * The resource policy to be attached to the instance for scheduling start/stop
     * operations. Do not specify the self link.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * A reference to the zone where the instance resides.
     */
    zone?: pulumi.Input<string>;
}
