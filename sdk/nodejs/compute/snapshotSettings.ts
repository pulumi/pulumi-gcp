// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Updates your project's snapshot settings and sets a new default storage location for snapshots.
 *
 * To get more information about SnapshotSettings, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/snapshotSettings)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/compute/docs/disks/snapshot-settings#snapshot_settings_how_to_update)
 *
 * ## Example Usage
 *
 * ### Snapshot Settings Specific Locations
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const tf_test_snapshot_settings = new gcp.compute.SnapshotSettings("tf-test-snapshot-settings", {storageLocation: {
 *     policy: "SPECIFIC_LOCATIONS",
 *     locations: [{
 *         name: "us-central1",
 *         location: "us-central1",
 *     }],
 * }});
 * ```
 *
 * ## Import
 *
 * SnapshotSettings can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/global/snapshotSettings/`
 *
 * * `{{project}}`
 *
 * When using the `pulumi import` command, SnapshotSettings can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:compute/snapshotSettings:SnapshotSettings default projects/{{project}}/global/snapshotSettings/
 * ```
 *
 * ```sh
 * $ pulumi import gcp:compute/snapshotSettings:SnapshotSettings default {{project}}
 * ```
 */
export class SnapshotSettings extends pulumi.CustomResource {
    /**
     * Get an existing SnapshotSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotSettingsState, opts?: pulumi.CustomResourceOptions): SnapshotSettings {
        return new SnapshotSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/snapshotSettings:SnapshotSettings';

    /**
     * Returns true if the given object is an instance of SnapshotSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnapshotSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapshotSettings.__pulumiType;
    }

    public readonly project!: pulumi.Output<string>;
    /**
     * Policy of which storage location is going to be resolved, and additional data
     * that particularizes how the policy is going to be carried out
     * Structure is documented below.
     */
    public readonly storageLocation!: pulumi.Output<outputs.compute.SnapshotSettingsStorageLocation>;

    /**
     * Create a SnapshotSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotSettingsArgs | SnapshotSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotSettingsState | undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["storageLocation"] = state ? state.storageLocation : undefined;
        } else {
            const args = argsOrState as SnapshotSettingsArgs | undefined;
            if ((!args || args.storageLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageLocation'");
            }
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["storageLocation"] = args ? args.storageLocation : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapshotSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnapshotSettings resources.
 */
export interface SnapshotSettingsState {
    project?: pulumi.Input<string>;
    /**
     * Policy of which storage location is going to be resolved, and additional data
     * that particularizes how the policy is going to be carried out
     * Structure is documented below.
     */
    storageLocation?: pulumi.Input<inputs.compute.SnapshotSettingsStorageLocation>;
}

/**
 * The set of arguments for constructing a SnapshotSettings resource.
 */
export interface SnapshotSettingsArgs {
    project?: pulumi.Input<string>;
    /**
     * Policy of which storage location is going to be resolved, and additional data
     * that particularizes how the policy is going to be carried out
     * Structure is documented below.
     */
    storageLocation: pulumi.Input<inputs.compute.SnapshotSettingsStorageLocation>;
}
