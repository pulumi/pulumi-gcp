// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A deployment group aggregates many zonal mirroring backends (deployments)
 * into a single global mirroring service. Consumers can connect this service
 * using an endpoint group.
 *
 * To get more information about MirroringDeploymentGroup, see:
 *
 * * [API documentation](https://cloud.google.com/network-security-integration/docs/reference/rest/v1/projects.locations.mirroringDeploymentGroups)
 * * How-to Guides
 *     * [Mirroring deployment group overview](https://cloud.google.com/network-security-integration/docs/out-of-band/deployment-groups-overview)
 *
 * ## Example Usage
 *
 * ### Network Security Mirroring Deployment Group Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network = new gcp.compute.Network("network", {
 *     name: "example-network",
 *     autoCreateSubnetworks: false,
 * });
 * const _default = new gcp.networksecurity.MirroringDeploymentGroup("default", {
 *     mirroringDeploymentGroupId: "example-dg",
 *     location: "global",
 *     network: network.id,
 *     description: "some description",
 *     labels: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * MirroringDeploymentGroup can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/mirroringDeploymentGroups/{{mirroring_deployment_group_id}}`
 *
 * * `{{project}}/{{location}}/{{mirroring_deployment_group_id}}`
 *
 * * `{{location}}/{{mirroring_deployment_group_id}}`
 *
 * When using the `pulumi import` command, MirroringDeploymentGroup can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup default projects/{{project}}/locations/{{location}}/mirroringDeploymentGroups/{{mirroring_deployment_group_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup default {{project}}/{{location}}/{{mirroring_deployment_group_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup default {{location}}/{{mirroring_deployment_group_id}}
 * ```
 */
export class MirroringDeploymentGroup extends pulumi.CustomResource {
    /**
     * Get an existing MirroringDeploymentGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MirroringDeploymentGroupState, opts?: pulumi.CustomResourceOptions): MirroringDeploymentGroup {
        return new MirroringDeploymentGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:networksecurity/mirroringDeploymentGroup:MirroringDeploymentGroup';

    /**
     * Returns true if the given object is an instance of MirroringDeploymentGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MirroringDeploymentGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MirroringDeploymentGroup.__pulumiType;
    }

    /**
     * The list of endpoint groups that are connected to this resource.
     * Structure is documented below.
     */
    public /*out*/ readonly connectedEndpointGroups!: pulumi.Output<outputs.networksecurity.MirroringDeploymentGroupConnectedEndpointGroup[]>;
    /**
     * The timestamp when the resource was created.
     * See https://google.aip.dev/148#timestamps.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * User-provided description of the deployment group.
     * Used as additional context for the deployment group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Labels are key/value pairs that help to organize and filter resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The cloud location of the deployment group, currently restricted to `global`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The ID to use for the new deployment group, which will become the final
     * component of the deployment group's resource name.
     *
     *
     * - - -
     */
    public readonly mirroringDeploymentGroupId!: pulumi.Output<string>;
    /**
     * (Output)
     * The connected endpoint group's resource name, for example:
     * `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
     * See https://google.aip.dev/124.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The network that will be used for all child deployments, for example:
     * `projects/{project}/global/networks/{network}`.
     * See https://google.aip.dev/124.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The current state of the resource does not match the user's intended state,
     * and the system is working to reconcile them. This is part of the normal
     * operation (e.g. adding a new deployment to the group)
     * See https://google.aip.dev/128.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * The current state of the deployment group.
     * See https://google.aip.dev/216.
     * Possible values:
     * STATE_UNSPECIFIED
     * ACTIVE
     * CREATING
     * DELETING
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The timestamp when the resource was most recently updated.
     * See https://google.aip.dev/148#timestamps.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a MirroringDeploymentGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MirroringDeploymentGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MirroringDeploymentGroupArgs | MirroringDeploymentGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MirroringDeploymentGroupState | undefined;
            resourceInputs["connectedEndpointGroups"] = state ? state.connectedEndpointGroups : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mirroringDeploymentGroupId"] = state ? state.mirroringDeploymentGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as MirroringDeploymentGroupArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.mirroringDeploymentGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mirroringDeploymentGroupId'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mirroringDeploymentGroupId"] = args ? args.mirroringDeploymentGroupId : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["connectedEndpointGroups"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MirroringDeploymentGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MirroringDeploymentGroup resources.
 */
export interface MirroringDeploymentGroupState {
    /**
     * The list of endpoint groups that are connected to this resource.
     * Structure is documented below.
     */
    connectedEndpointGroups?: pulumi.Input<pulumi.Input<inputs.networksecurity.MirroringDeploymentGroupConnectedEndpointGroup>[]>;
    /**
     * The timestamp when the resource was created.
     * See https://google.aip.dev/148#timestamps.
     */
    createTime?: pulumi.Input<string>;
    /**
     * User-provided description of the deployment group.
     * Used as additional context for the deployment group.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Labels are key/value pairs that help to organize and filter resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The cloud location of the deployment group, currently restricted to `global`.
     */
    location?: pulumi.Input<string>;
    /**
     * The ID to use for the new deployment group, which will become the final
     * component of the deployment group's resource name.
     *
     *
     * - - -
     */
    mirroringDeploymentGroupId?: pulumi.Input<string>;
    /**
     * (Output)
     * The connected endpoint group's resource name, for example:
     * `projects/123456789/locations/global/mirroringEndpointGroups/my-eg`.
     * See https://google.aip.dev/124.
     */
    name?: pulumi.Input<string>;
    /**
     * The network that will be used for all child deployments, for example:
     * `projects/{project}/global/networks/{network}`.
     * See https://google.aip.dev/124.
     */
    network?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The current state of the resource does not match the user's intended state,
     * and the system is working to reconcile them. This is part of the normal
     * operation (e.g. adding a new deployment to the group)
     * See https://google.aip.dev/128.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * The current state of the deployment group.
     * See https://google.aip.dev/216.
     * Possible values:
     * STATE_UNSPECIFIED
     * ACTIVE
     * CREATING
     * DELETING
     */
    state?: pulumi.Input<string>;
    /**
     * The timestamp when the resource was most recently updated.
     * See https://google.aip.dev/148#timestamps.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MirroringDeploymentGroup resource.
 */
export interface MirroringDeploymentGroupArgs {
    /**
     * User-provided description of the deployment group.
     * Used as additional context for the deployment group.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels are key/value pairs that help to organize and filter resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The cloud location of the deployment group, currently restricted to `global`.
     */
    location: pulumi.Input<string>;
    /**
     * The ID to use for the new deployment group, which will become the final
     * component of the deployment group's resource name.
     *
     *
     * - - -
     */
    mirroringDeploymentGroupId: pulumi.Input<string>;
    /**
     * The network that will be used for all child deployments, for example:
     * `projects/{project}/global/networks/{network}`.
     * See https://google.aip.dev/124.
     */
    network: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
