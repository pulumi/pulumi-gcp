// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AddressGroupArgs, AddressGroupState } from "./addressGroup";
export type AddressGroup = import("./addressGroup").AddressGroup;
export const AddressGroup: typeof import("./addressGroup").AddressGroup = null as any;
utilities.lazyLoad(exports, ["AddressGroup"], () => require("./addressGroup"));

export { AddressGroupIamBindingArgs, AddressGroupIamBindingState } from "./addressGroupIamBinding";
export type AddressGroupIamBinding = import("./addressGroupIamBinding").AddressGroupIamBinding;
export const AddressGroupIamBinding: typeof import("./addressGroupIamBinding").AddressGroupIamBinding = null as any;
utilities.lazyLoad(exports, ["AddressGroupIamBinding"], () => require("./addressGroupIamBinding"));

export { AddressGroupIamMemberArgs, AddressGroupIamMemberState } from "./addressGroupIamMember";
export type AddressGroupIamMember = import("./addressGroupIamMember").AddressGroupIamMember;
export const AddressGroupIamMember: typeof import("./addressGroupIamMember").AddressGroupIamMember = null as any;
utilities.lazyLoad(exports, ["AddressGroupIamMember"], () => require("./addressGroupIamMember"));

export { AddressGroupIamPolicyArgs, AddressGroupIamPolicyState } from "./addressGroupIamPolicy";
export type AddressGroupIamPolicy = import("./addressGroupIamPolicy").AddressGroupIamPolicy;
export const AddressGroupIamPolicy: typeof import("./addressGroupIamPolicy").AddressGroupIamPolicy = null as any;
utilities.lazyLoad(exports, ["AddressGroupIamPolicy"], () => require("./addressGroupIamPolicy"));

export { AuthorizationPolicyArgs, AuthorizationPolicyState } from "./authorizationPolicy";
export type AuthorizationPolicy = import("./authorizationPolicy").AuthorizationPolicy;
export const AuthorizationPolicy: typeof import("./authorizationPolicy").AuthorizationPolicy = null as any;
utilities.lazyLoad(exports, ["AuthorizationPolicy"], () => require("./authorizationPolicy"));

export { ClientTlsPolicyArgs, ClientTlsPolicyState } from "./clientTlsPolicy";
export type ClientTlsPolicy = import("./clientTlsPolicy").ClientTlsPolicy;
export const ClientTlsPolicy: typeof import("./clientTlsPolicy").ClientTlsPolicy = null as any;
utilities.lazyLoad(exports, ["ClientTlsPolicy"], () => require("./clientTlsPolicy"));

export { FirewallEndpointArgs, FirewallEndpointState } from "./firewallEndpoint";
export type FirewallEndpoint = import("./firewallEndpoint").FirewallEndpoint;
export const FirewallEndpoint: typeof import("./firewallEndpoint").FirewallEndpoint = null as any;
utilities.lazyLoad(exports, ["FirewallEndpoint"], () => require("./firewallEndpoint"));

export { GatewaySecurityPolicyArgs, GatewaySecurityPolicyState } from "./gatewaySecurityPolicy";
export type GatewaySecurityPolicy = import("./gatewaySecurityPolicy").GatewaySecurityPolicy;
export const GatewaySecurityPolicy: typeof import("./gatewaySecurityPolicy").GatewaySecurityPolicy = null as any;
utilities.lazyLoad(exports, ["GatewaySecurityPolicy"], () => require("./gatewaySecurityPolicy"));

export { GatewaySecurityPolicyRuleArgs, GatewaySecurityPolicyRuleState } from "./gatewaySecurityPolicyRule";
export type GatewaySecurityPolicyRule = import("./gatewaySecurityPolicyRule").GatewaySecurityPolicyRule;
export const GatewaySecurityPolicyRule: typeof import("./gatewaySecurityPolicyRule").GatewaySecurityPolicyRule = null as any;
utilities.lazyLoad(exports, ["GatewaySecurityPolicyRule"], () => require("./gatewaySecurityPolicyRule"));

export { GetAddressGroupIamPolicyArgs, GetAddressGroupIamPolicyResult, GetAddressGroupIamPolicyOutputArgs } from "./getAddressGroupIamPolicy";
export const getAddressGroupIamPolicy: typeof import("./getAddressGroupIamPolicy").getAddressGroupIamPolicy = null as any;
export const getAddressGroupIamPolicyOutput: typeof import("./getAddressGroupIamPolicy").getAddressGroupIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAddressGroupIamPolicy","getAddressGroupIamPolicyOutput"], () => require("./getAddressGroupIamPolicy"));

export { SecurityProfileArgs, SecurityProfileState } from "./securityProfile";
export type SecurityProfile = import("./securityProfile").SecurityProfile;
export const SecurityProfile: typeof import("./securityProfile").SecurityProfile = null as any;
utilities.lazyLoad(exports, ["SecurityProfile"], () => require("./securityProfile"));

export { SecurityProfileGroupArgs, SecurityProfileGroupState } from "./securityProfileGroup";
export type SecurityProfileGroup = import("./securityProfileGroup").SecurityProfileGroup;
export const SecurityProfileGroup: typeof import("./securityProfileGroup").SecurityProfileGroup = null as any;
utilities.lazyLoad(exports, ["SecurityProfileGroup"], () => require("./securityProfileGroup"));

export { ServerTlsPolicyArgs, ServerTlsPolicyState } from "./serverTlsPolicy";
export type ServerTlsPolicy = import("./serverTlsPolicy").ServerTlsPolicy;
export const ServerTlsPolicy: typeof import("./serverTlsPolicy").ServerTlsPolicy = null as any;
utilities.lazyLoad(exports, ["ServerTlsPolicy"], () => require("./serverTlsPolicy"));

export { TlsInspectionPolicyArgs, TlsInspectionPolicyState } from "./tlsInspectionPolicy";
export type TlsInspectionPolicy = import("./tlsInspectionPolicy").TlsInspectionPolicy;
export const TlsInspectionPolicy: typeof import("./tlsInspectionPolicy").TlsInspectionPolicy = null as any;
utilities.lazyLoad(exports, ["TlsInspectionPolicy"], () => require("./tlsInspectionPolicy"));

export { UrlListArgs, UrlListState } from "./urlList";
export type UrlList = import("./urlList").UrlList;
export const UrlList: typeof import("./urlList").UrlList = null as any;
utilities.lazyLoad(exports, ["UrlList"], () => require("./urlList"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:networksecurity/addressGroup:AddressGroup":
                return new AddressGroup(name, <any>undefined, { urn })
            case "gcp:networksecurity/addressGroupIamBinding:AddressGroupIamBinding":
                return new AddressGroupIamBinding(name, <any>undefined, { urn })
            case "gcp:networksecurity/addressGroupIamMember:AddressGroupIamMember":
                return new AddressGroupIamMember(name, <any>undefined, { urn })
            case "gcp:networksecurity/addressGroupIamPolicy:AddressGroupIamPolicy":
                return new AddressGroupIamPolicy(name, <any>undefined, { urn })
            case "gcp:networksecurity/authorizationPolicy:AuthorizationPolicy":
                return new AuthorizationPolicy(name, <any>undefined, { urn })
            case "gcp:networksecurity/clientTlsPolicy:ClientTlsPolicy":
                return new ClientTlsPolicy(name, <any>undefined, { urn })
            case "gcp:networksecurity/firewallEndpoint:FirewallEndpoint":
                return new FirewallEndpoint(name, <any>undefined, { urn })
            case "gcp:networksecurity/gatewaySecurityPolicy:GatewaySecurityPolicy":
                return new GatewaySecurityPolicy(name, <any>undefined, { urn })
            case "gcp:networksecurity/gatewaySecurityPolicyRule:GatewaySecurityPolicyRule":
                return new GatewaySecurityPolicyRule(name, <any>undefined, { urn })
            case "gcp:networksecurity/securityProfile:SecurityProfile":
                return new SecurityProfile(name, <any>undefined, { urn })
            case "gcp:networksecurity/securityProfileGroup:SecurityProfileGroup":
                return new SecurityProfileGroup(name, <any>undefined, { urn })
            case "gcp:networksecurity/serverTlsPolicy:ServerTlsPolicy":
                return new ServerTlsPolicy(name, <any>undefined, { urn })
            case "gcp:networksecurity/tlsInspectionPolicy:TlsInspectionPolicy":
                return new TlsInspectionPolicy(name, <any>undefined, { urn })
            case "gcp:networksecurity/urlList:UrlList":
                return new UrlList(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "networksecurity/addressGroup", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/addressGroupIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/addressGroupIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/addressGroupIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/authorizationPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/clientTlsPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/firewallEndpoint", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/gatewaySecurityPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/gatewaySecurityPolicyRule", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/securityProfile", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/securityProfileGroup", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/serverTlsPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/tlsInspectionPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "networksecurity/urlList", _module)
