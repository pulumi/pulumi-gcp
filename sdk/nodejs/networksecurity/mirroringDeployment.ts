// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A deployment represents a zonal mirroring backend ready to accept
 * GENEVE-encapsulated replica traffic, e.g. a zonal instance group fronted by
 * an internal passthrough load balancer. Deployments are always part of a
 * global deployment group which represents a global mirroring service.
 *
 * To get more information about MirroringDeployment, see:
 *
 * * [API documentation](https://cloud.google.com/network-security-integration/docs/reference/rest/v1/projects.locations.mirroringDeployments)
 * * How-to Guides
 *     * [Mirroring deployment overview](https://cloud.google.com/network-security-integration/docs/out-of-band/deployments-overview)
 *
 * ## Example Usage
 *
 * ### Network Security Mirroring Deployment Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network = new gcp.compute.Network("network", {
 *     name: "example-network",
 *     autoCreateSubnetworks: false,
 * });
 * const subnetwork = new gcp.compute.Subnetwork("subnetwork", {
 *     name: "example-subnet",
 *     region: "us-central1",
 *     ipCidrRange: "10.1.0.0/16",
 *     network: network.name,
 * });
 * const healthCheck = new gcp.compute.RegionHealthCheck("health_check", {
 *     name: "example-hc",
 *     region: "us-central1",
 *     httpHealthCheck: {
 *         port: 80,
 *     },
 * });
 * const backendService = new gcp.compute.RegionBackendService("backend_service", {
 *     name: "example-bs",
 *     region: "us-central1",
 *     healthChecks: healthCheck.id,
 *     protocol: "UDP",
 *     loadBalancingScheme: "INTERNAL",
 * });
 * const forwardingRule = new gcp.compute.ForwardingRule("forwarding_rule", {
 *     name: "example-fwr",
 *     region: "us-central1",
 *     network: network.name,
 *     subnetwork: subnetwork.name,
 *     backendService: backendService.id,
 *     loadBalancingScheme: "INTERNAL",
 *     ports: ["6081"],
 *     ipProtocol: "UDP",
 *     isMirroringCollector: true,
 * });
 * const deploymentGroup = new gcp.networksecurity.MirroringDeploymentGroup("deployment_group", {
 *     mirroringDeploymentGroupId: "example-dg",
 *     location: "global",
 *     network: network.id,
 * });
 * const _default = new gcp.networksecurity.MirroringDeployment("default", {
 *     mirroringDeploymentId: "example-deployment",
 *     location: "us-central1-a",
 *     forwardingRule: forwardingRule.id,
 *     mirroringDeploymentGroup: deploymentGroup.id,
 *     description: "some description",
 *     labels: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * MirroringDeployment can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/mirroringDeployments/{{mirroring_deployment_id}}`
 *
 * * `{{project}}/{{location}}/{{mirroring_deployment_id}}`
 *
 * * `{{location}}/{{mirroring_deployment_id}}`
 *
 * When using the `pulumi import` command, MirroringDeployment can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:networksecurity/mirroringDeployment:MirroringDeployment default projects/{{project}}/locations/{{location}}/mirroringDeployments/{{mirroring_deployment_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networksecurity/mirroringDeployment:MirroringDeployment default {{project}}/{{location}}/{{mirroring_deployment_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networksecurity/mirroringDeployment:MirroringDeployment default {{location}}/{{mirroring_deployment_id}}
 * ```
 */
export class MirroringDeployment extends pulumi.CustomResource {
    /**
     * Get an existing MirroringDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MirroringDeploymentState, opts?: pulumi.CustomResourceOptions): MirroringDeployment {
        return new MirroringDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:networksecurity/mirroringDeployment:MirroringDeployment';

    /**
     * Returns true if the given object is an instance of MirroringDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MirroringDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MirroringDeployment.__pulumiType;
    }

    /**
     * The timestamp when the resource was created.
     * See https://google.aip.dev/148#timestamps.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * User-provided description of the deployment.
     * Used as additional context for the deployment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The regional forwarding rule that fronts the mirroring collectors, for
     * example: `projects/123456789/regions/us-central1/forwardingRules/my-rule`.
     * See https://google.aip.dev/124.
     */
    public readonly forwardingRule!: pulumi.Output<string>;
    /**
     * Labels are key/value pairs that help to organize and filter resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The cloud location of the deployment, e.g. `us-central1-a` or `asia-south1-b`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The deployment group that this deployment is a part of, for example:
     * `projects/123456789/locations/global/mirroringDeploymentGroups/my-dg`.
     * See https://google.aip.dev/124.
     */
    public readonly mirroringDeploymentGroup!: pulumi.Output<string>;
    /**
     * The ID to use for the new deployment, which will become the final
     * component of the deployment's resource name.
     *
     *
     * - - -
     */
    public readonly mirroringDeploymentId!: pulumi.Output<string>;
    /**
     * The resource name of this deployment, for example:
     * `projects/123456789/locations/us-central1-a/mirroringDeployments/my-dep`.
     * See https://google.aip.dev/122 for more details.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The current state of the resource does not match the user's intended state,
     * and the system is working to reconcile them. This part of the normal
     * operation (e.g. linking a new association to the parent group).
     * See https://google.aip.dev/128.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * The current state of the deployment.
     * See https://google.aip.dev/216.
     * Possible values:
     * STATE_UNSPECIFIED
     * ACTIVE
     * CREATING
     * DELETING
     * OUT_OF_SYNC
     * DELETE_FAILED
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The timestamp when the resource was most recently updated.
     * See https://google.aip.dev/148#timestamps.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a MirroringDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MirroringDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MirroringDeploymentArgs | MirroringDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MirroringDeploymentState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["forwardingRule"] = state ? state.forwardingRule : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mirroringDeploymentGroup"] = state ? state.mirroringDeploymentGroup : undefined;
            resourceInputs["mirroringDeploymentId"] = state ? state.mirroringDeploymentId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as MirroringDeploymentArgs | undefined;
            if ((!args || args.forwardingRule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'forwardingRule'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.mirroringDeploymentGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mirroringDeploymentGroup'");
            }
            if ((!args || args.mirroringDeploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mirroringDeploymentId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forwardingRule"] = args ? args.forwardingRule : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mirroringDeploymentGroup"] = args ? args.mirroringDeploymentGroup : undefined;
            resourceInputs["mirroringDeploymentId"] = args ? args.mirroringDeploymentId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MirroringDeployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MirroringDeployment resources.
 */
export interface MirroringDeploymentState {
    /**
     * The timestamp when the resource was created.
     * See https://google.aip.dev/148#timestamps.
     */
    createTime?: pulumi.Input<string>;
    /**
     * User-provided description of the deployment.
     * Used as additional context for the deployment.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The regional forwarding rule that fronts the mirroring collectors, for
     * example: `projects/123456789/regions/us-central1/forwardingRules/my-rule`.
     * See https://google.aip.dev/124.
     */
    forwardingRule?: pulumi.Input<string>;
    /**
     * Labels are key/value pairs that help to organize and filter resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The cloud location of the deployment, e.g. `us-central1-a` or `asia-south1-b`.
     */
    location?: pulumi.Input<string>;
    /**
     * The deployment group that this deployment is a part of, for example:
     * `projects/123456789/locations/global/mirroringDeploymentGroups/my-dg`.
     * See https://google.aip.dev/124.
     */
    mirroringDeploymentGroup?: pulumi.Input<string>;
    /**
     * The ID to use for the new deployment, which will become the final
     * component of the deployment's resource name.
     *
     *
     * - - -
     */
    mirroringDeploymentId?: pulumi.Input<string>;
    /**
     * The resource name of this deployment, for example:
     * `projects/123456789/locations/us-central1-a/mirroringDeployments/my-dep`.
     * See https://google.aip.dev/122 for more details.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The current state of the resource does not match the user's intended state,
     * and the system is working to reconcile them. This part of the normal
     * operation (e.g. linking a new association to the parent group).
     * See https://google.aip.dev/128.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * The current state of the deployment.
     * See https://google.aip.dev/216.
     * Possible values:
     * STATE_UNSPECIFIED
     * ACTIVE
     * CREATING
     * DELETING
     * OUT_OF_SYNC
     * DELETE_FAILED
     */
    state?: pulumi.Input<string>;
    /**
     * The timestamp when the resource was most recently updated.
     * See https://google.aip.dev/148#timestamps.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MirroringDeployment resource.
 */
export interface MirroringDeploymentArgs {
    /**
     * User-provided description of the deployment.
     * Used as additional context for the deployment.
     */
    description?: pulumi.Input<string>;
    /**
     * The regional forwarding rule that fronts the mirroring collectors, for
     * example: `projects/123456789/regions/us-central1/forwardingRules/my-rule`.
     * See https://google.aip.dev/124.
     */
    forwardingRule: pulumi.Input<string>;
    /**
     * Labels are key/value pairs that help to organize and filter resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The cloud location of the deployment, e.g. `us-central1-a` or `asia-south1-b`.
     */
    location: pulumi.Input<string>;
    /**
     * The deployment group that this deployment is a part of, for example:
     * `projects/123456789/locations/global/mirroringDeploymentGroups/my-dg`.
     * See https://google.aip.dev/124.
     */
    mirroringDeploymentGroup: pulumi.Input<string>;
    /**
     * The ID to use for the new deployment, which will become the final
     * component of the deployment's resource name.
     *
     *
     * - - -
     */
    mirroringDeploymentId: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
