// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BackupScheduleArgs, BackupScheduleState } from "./backupSchedule";
export type BackupSchedule = import("./backupSchedule").BackupSchedule;
export const BackupSchedule: typeof import("./backupSchedule").BackupSchedule = null as any;
utilities.lazyLoad(exports, ["BackupSchedule"], () => require("./backupSchedule"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DatabaseIAMBindingArgs, DatabaseIAMBindingState } from "./databaseIAMBinding";
export type DatabaseIAMBinding = import("./databaseIAMBinding").DatabaseIAMBinding;
export const DatabaseIAMBinding: typeof import("./databaseIAMBinding").DatabaseIAMBinding = null as any;
utilities.lazyLoad(exports, ["DatabaseIAMBinding"], () => require("./databaseIAMBinding"));

export { DatabaseIAMMemberArgs, DatabaseIAMMemberState } from "./databaseIAMMember";
export type DatabaseIAMMember = import("./databaseIAMMember").DatabaseIAMMember;
export const DatabaseIAMMember: typeof import("./databaseIAMMember").DatabaseIAMMember = null as any;
utilities.lazyLoad(exports, ["DatabaseIAMMember"], () => require("./databaseIAMMember"));

export { DatabaseIAMPolicyArgs, DatabaseIAMPolicyState } from "./databaseIAMPolicy";
export type DatabaseIAMPolicy = import("./databaseIAMPolicy").DatabaseIAMPolicy;
export const DatabaseIAMPolicy: typeof import("./databaseIAMPolicy").DatabaseIAMPolicy = null as any;
utilities.lazyLoad(exports, ["DatabaseIAMPolicy"], () => require("./databaseIAMPolicy"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDatabaseIamPolicyArgs, GetDatabaseIamPolicyResult, GetDatabaseIamPolicyOutputArgs } from "./getDatabaseIamPolicy";
export const getDatabaseIamPolicy: typeof import("./getDatabaseIamPolicy").getDatabaseIamPolicy = null as any;
export const getDatabaseIamPolicyOutput: typeof import("./getDatabaseIamPolicy").getDatabaseIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseIamPolicy","getDatabaseIamPolicyOutput"], () => require("./getDatabaseIamPolicy"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetInstanceIamPolicyArgs, GetInstanceIamPolicyResult, GetInstanceIamPolicyOutputArgs } from "./getInstanceIamPolicy";
export const getInstanceIamPolicy: typeof import("./getInstanceIamPolicy").getInstanceIamPolicy = null as any;
export const getInstanceIamPolicyOutput: typeof import("./getInstanceIamPolicy").getInstanceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceIamPolicy","getInstanceIamPolicyOutput"], () => require("./getInstanceIamPolicy"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceConfigArgs, InstanceConfigState } from "./instanceConfig";
export type InstanceConfig = import("./instanceConfig").InstanceConfig;
export const InstanceConfig: typeof import("./instanceConfig").InstanceConfig = null as any;
utilities.lazyLoad(exports, ["InstanceConfig"], () => require("./instanceConfig"));

export { InstanceIAMBindingArgs, InstanceIAMBindingState } from "./instanceIAMBinding";
export type InstanceIAMBinding = import("./instanceIAMBinding").InstanceIAMBinding;
export const InstanceIAMBinding: typeof import("./instanceIAMBinding").InstanceIAMBinding = null as any;
utilities.lazyLoad(exports, ["InstanceIAMBinding"], () => require("./instanceIAMBinding"));

export { InstanceIAMMemberArgs, InstanceIAMMemberState } from "./instanceIAMMember";
export type InstanceIAMMember = import("./instanceIAMMember").InstanceIAMMember;
export const InstanceIAMMember: typeof import("./instanceIAMMember").InstanceIAMMember = null as any;
utilities.lazyLoad(exports, ["InstanceIAMMember"], () => require("./instanceIAMMember"));

export { InstanceIAMPolicyArgs, InstanceIAMPolicyState } from "./instanceIAMPolicy";
export type InstanceIAMPolicy = import("./instanceIAMPolicy").InstanceIAMPolicy;
export const InstanceIAMPolicy: typeof import("./instanceIAMPolicy").InstanceIAMPolicy = null as any;
utilities.lazyLoad(exports, ["InstanceIAMPolicy"], () => require("./instanceIAMPolicy"));

export { InstancePartitionArgs, InstancePartitionState } from "./instancePartition";
export type InstancePartition = import("./instancePartition").InstancePartition;
export const InstancePartition: typeof import("./instancePartition").InstancePartition = null as any;
utilities.lazyLoad(exports, ["InstancePartition"], () => require("./instancePartition"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:spanner/backupSchedule:BackupSchedule":
                return new BackupSchedule(name, <any>undefined, { urn })
            case "gcp:spanner/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "gcp:spanner/databaseIAMBinding:DatabaseIAMBinding":
                return new DatabaseIAMBinding(name, <any>undefined, { urn })
            case "gcp:spanner/databaseIAMMember:DatabaseIAMMember":
                return new DatabaseIAMMember(name, <any>undefined, { urn })
            case "gcp:spanner/databaseIAMPolicy:DatabaseIAMPolicy":
                return new DatabaseIAMPolicy(name, <any>undefined, { urn })
            case "gcp:spanner/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "gcp:spanner/instanceConfig:InstanceConfig":
                return new InstanceConfig(name, <any>undefined, { urn })
            case "gcp:spanner/instanceIAMBinding:InstanceIAMBinding":
                return new InstanceIAMBinding(name, <any>undefined, { urn })
            case "gcp:spanner/instanceIAMMember:InstanceIAMMember":
                return new InstanceIAMMember(name, <any>undefined, { urn })
            case "gcp:spanner/instanceIAMPolicy:InstanceIAMPolicy":
                return new InstanceIAMPolicy(name, <any>undefined, { urn })
            case "gcp:spanner/instancePartition:InstancePartition":
                return new InstancePartition(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "spanner/backupSchedule", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/database", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/databaseIAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/databaseIAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/databaseIAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/instance", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/instanceConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/instanceIAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/instanceIAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/instanceIAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/instancePartition", _module)
