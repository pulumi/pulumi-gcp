// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A Cloud Spanner Database which is hosted on a Spanner instance.
 *
 * To get more information about Database, see:
 *
 * * [API documentation](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances.databases)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/spanner/)
 *
 * > **Warning:** It is strongly recommended to set `lifecycle { preventDestroy = true }` on databases in order to prevent accidental data loss.
 *
 * ## Example Usage
 * ### Spanner Database Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const main = new gcp.spanner.Instance("main", {
 *     config: "regional-europe-west1",
 *     displayName: "main-instance",
 *     numNodes: 1,
 * });
 * const database = new gcp.spanner.Database("database", {
 *     instance: main.name,
 *     versionRetentionPeriod: "3d",
 *     ddls: [
 *         "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
 *         "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)",
 *     ],
 *     deletionProtection: false,
 * });
 * ```
 *
 * ## Import
 *
 * Database can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:spanner/database:Database default projects/{{project}}/instances/{{instance}}/databases/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:spanner/database:Database default instances/{{instance}}/databases/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:spanner/database:Database default {{project}}/{{instance}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:spanner/database:Database default {{instance}}/{{name}}
 * ```
 */
export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseState, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:spanner/database:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * The dialect of the Cloud Spanner Database.
     * If it is not provided, "GOOGLE_STANDARD_SQL" will be used.
     * Possible values are `GOOGLE_STANDARD_SQL` and `POSTGRESQL`.
     */
    public readonly databaseDialect!: pulumi.Output<string>;
    /**
     * An optional list of DDL statements to run inside the newly created
     * database. Statements can create tables, indexes, etc. These statements
     * execute atomically with the creation of the database: if there is an
     * error in any statement, the database is not created.
     */
    public readonly ddls!: pulumi.Output<string[] | undefined>;
    /**
     * Whether or not to allow the provider to destroy the instance. Unless this field is set to false
     * in state, a `destroy` or `update` that would delete the instance will fail.
     */
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Encryption configuration for the database
     * Structure is documented below.
     */
    public readonly encryptionConfig!: pulumi.Output<outputs.spanner.DatabaseEncryptionConfig | undefined>;
    /**
     * The instance to create the database on.
     */
    public readonly instance!: pulumi.Output<string>;
    /**
     * A unique identifier for the database, which cannot be changed after
     * the instance is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * An explanation of the status of the database.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The retention period for the database. The retention period must be between 1 hour
     * and 7 days, and can be specified in days, hours, minutes, or seconds. For example,
     * the values 1d, 24h, 1440m, and 86400s are equivalent. Default value is 1h.
     * If this property is used, you must avoid adding new DDL statements to `ddl` that
     * update the database's version_retention_period.
     */
    public readonly versionRetentionPeriod!: pulumi.Output<string>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseArgs | DatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseState | undefined;
            resourceInputs["databaseDialect"] = state ? state.databaseDialect : undefined;
            resourceInputs["ddls"] = state ? state.ddls : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["encryptionConfig"] = state ? state.encryptionConfig : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["versionRetentionPeriod"] = state ? state.versionRetentionPeriod : undefined;
        } else {
            const args = argsOrState as DatabaseArgs | undefined;
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            resourceInputs["databaseDialect"] = args ? args.databaseDialect : undefined;
            resourceInputs["ddls"] = args ? args.ddls : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["encryptionConfig"] = args ? args.encryptionConfig : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["versionRetentionPeriod"] = args ? args.versionRetentionPeriod : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Database resources.
 */
export interface DatabaseState {
    /**
     * The dialect of the Cloud Spanner Database.
     * If it is not provided, "GOOGLE_STANDARD_SQL" will be used.
     * Possible values are `GOOGLE_STANDARD_SQL` and `POSTGRESQL`.
     */
    databaseDialect?: pulumi.Input<string>;
    /**
     * An optional list of DDL statements to run inside the newly created
     * database. Statements can create tables, indexes, etc. These statements
     * execute atomically with the creation of the database: if there is an
     * error in any statement, the database is not created.
     */
    ddls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether or not to allow the provider to destroy the instance. Unless this field is set to false
     * in state, a `destroy` or `update` that would delete the instance will fail.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Encryption configuration for the database
     * Structure is documented below.
     */
    encryptionConfig?: pulumi.Input<inputs.spanner.DatabaseEncryptionConfig>;
    /**
     * The instance to create the database on.
     */
    instance?: pulumi.Input<string>;
    /**
     * A unique identifier for the database, which cannot be changed after
     * the instance is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * An explanation of the status of the database.
     */
    state?: pulumi.Input<string>;
    /**
     * The retention period for the database. The retention period must be between 1 hour
     * and 7 days, and can be specified in days, hours, minutes, or seconds. For example,
     * the values 1d, 24h, 1440m, and 86400s are equivalent. Default value is 1h.
     * If this property is used, you must avoid adding new DDL statements to `ddl` that
     * update the database's version_retention_period.
     */
    versionRetentionPeriod?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * The dialect of the Cloud Spanner Database.
     * If it is not provided, "GOOGLE_STANDARD_SQL" will be used.
     * Possible values are `GOOGLE_STANDARD_SQL` and `POSTGRESQL`.
     */
    databaseDialect?: pulumi.Input<string>;
    /**
     * An optional list of DDL statements to run inside the newly created
     * database. Statements can create tables, indexes, etc. These statements
     * execute atomically with the creation of the database: if there is an
     * error in any statement, the database is not created.
     */
    ddls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether or not to allow the provider to destroy the instance. Unless this field is set to false
     * in state, a `destroy` or `update` that would delete the instance will fail.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Encryption configuration for the database
     * Structure is documented below.
     */
    encryptionConfig?: pulumi.Input<inputs.spanner.DatabaseEncryptionConfig>;
    /**
     * The instance to create the database on.
     */
    instance: pulumi.Input<string>;
    /**
     * A unique identifier for the database, which cannot be changed after
     * the instance is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The retention period for the database. The retention period must be between 1 hour
     * and 7 days, and can be specified in days, hours, minutes, or seconds. For example,
     * the values 1d, 24h, 1440m, and 86400s are equivalent. Default value is 1h.
     * If this property is used, you must avoid adding new DDL statements to `ddl` that
     * update the database's version_retention_period.
     */
    versionRetentionPeriod?: pulumi.Input<string>;
}
