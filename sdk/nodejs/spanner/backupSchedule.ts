// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A backup schedule for a Cloud Spanner Database.
 * This resource is owned by the database it is backing up, and is deleted along with the database.
 * The actual backups are not though.
 *
 * To get more information about BackupSchedule, see:
 *
 * * [API documentation](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances.databases.backupSchedules)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/spanner/docs/backup)
 *
 * > **Warning:** This resource creates a Spanner Backup Schedule on a project that already has
 * a Spanner database.
 * This resource is owned by the database it is backing up, and is deleted along
 * with the database. The actual backups are not though.
 *
 * ## Example Usage
 *
 * ### Spanner Backup Schedule Daily Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const main = new gcp.spanner.Instance("main", {
 *     name: "instance-id",
 *     config: "regional-europe-west1",
 *     displayName: "main-instance",
 *     numNodes: 1,
 * });
 * const database = new gcp.spanner.Database("database", {
 *     instance: main.name,
 *     name: "database-id",
 *     versionRetentionPeriod: "3d",
 *     ddls: [
 *         "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
 *         "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)",
 *     ],
 *     deletionProtection: true,
 * });
 * const full_backup = new gcp.spanner.BackupSchedule("full-backup", {
 *     instance: main.name,
 *     database: database.name,
 *     name: "backup-schedule-id",
 *     retentionDuration: "31620000s",
 *     spec: {
 *         cronSpec: {
 *             text: "0 12 * * *",
 *         },
 *     },
 *     fullBackupSpec: {},
 * });
 * ```
 * ### Spanner Backup Schedule Daily Incremental
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const main = new gcp.spanner.Instance("main", {
 *     name: "instance-id",
 *     config: "regional-europe-west1",
 *     displayName: "main-instance",
 *     numNodes: 1,
 *     edition: "ENTERPRISE",
 * });
 * const database = new gcp.spanner.Database("database", {
 *     instance: main.name,
 *     name: "database-id",
 *     versionRetentionPeriod: "3d",
 *     ddls: [
 *         "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
 *         "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)",
 *     ],
 *     deletionProtection: true,
 * });
 * const incremental_backup = new gcp.spanner.BackupSchedule("incremental-backup", {
 *     instance: main.name,
 *     database: database.name,
 *     name: "backup-schedule-id",
 *     retentionDuration: "31620000s",
 *     spec: {
 *         cronSpec: {
 *             text: "0 12 * * *",
 *         },
 *     },
 *     incrementalBackupSpec: {},
 * });
 * ```
 *
 * ## Import
 *
 * BackupSchedule can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/instances/{{instance}}/databases/{{database}}/backupSchedules/{{name}}`
 *
 * * `{{project}}/{{instance}}/{{database}}/{{name}}`
 *
 * * `{{instance}}/{{database}}/{{name}}`
 *
 * When using the `pulumi import` command, BackupSchedule can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:spanner/backupSchedule:BackupSchedule default projects/{{project}}/instances/{{instance}}/databases/{{database}}/backupSchedules/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:spanner/backupSchedule:BackupSchedule default {{project}}/{{instance}}/{{database}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:spanner/backupSchedule:BackupSchedule default {{instance}}/{{database}}/{{name}}
 * ```
 */
export class BackupSchedule extends pulumi.CustomResource {
    /**
     * Get an existing BackupSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupScheduleState, opts?: pulumi.CustomResourceOptions): BackupSchedule {
        return new BackupSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:spanner/backupSchedule:BackupSchedule';

    /**
     * Returns true if the given object is an instance of BackupSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupSchedule.__pulumiType;
    }

    /**
     * The database to create the backup schedule on.
     *
     *
     * - - -
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * The schedule creates only full backups..
     */
    public readonly fullBackupSpec!: pulumi.Output<outputs.spanner.BackupScheduleFullBackupSpec | undefined>;
    /**
     * The schedule creates incremental backup chains.
     */
    public readonly incrementalBackupSpec!: pulumi.Output<outputs.spanner.BackupScheduleIncrementalBackupSpec | undefined>;
    /**
     * The instance to create the database on.
     */
    public readonly instance!: pulumi.Output<string>;
    /**
     * A unique identifier for the backup schedule, which cannot be changed after
     * the backup schedule is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: '3.5s'.
     * You can set this to a value up to 366 days.
     */
    public readonly retentionDuration!: pulumi.Output<string>;
    /**
     * Defines specifications of the backup schedule.
     * Structure is documented below.
     */
    public readonly spec!: pulumi.Output<outputs.spanner.BackupScheduleSpec | undefined>;

    /**
     * Create a BackupSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupScheduleArgs | BackupScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupScheduleState | undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["fullBackupSpec"] = state ? state.fullBackupSpec : undefined;
            resourceInputs["incrementalBackupSpec"] = state ? state.incrementalBackupSpec : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["retentionDuration"] = state ? state.retentionDuration : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
        } else {
            const args = argsOrState as BackupScheduleArgs | undefined;
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            if ((!args || args.retentionDuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionDuration'");
            }
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["fullBackupSpec"] = args ? args.fullBackupSpec : undefined;
            resourceInputs["incrementalBackupSpec"] = args ? args.incrementalBackupSpec : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["retentionDuration"] = args ? args.retentionDuration : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupSchedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackupSchedule resources.
 */
export interface BackupScheduleState {
    /**
     * The database to create the backup schedule on.
     *
     *
     * - - -
     */
    database?: pulumi.Input<string>;
    /**
     * The schedule creates only full backups..
     */
    fullBackupSpec?: pulumi.Input<inputs.spanner.BackupScheduleFullBackupSpec>;
    /**
     * The schedule creates incremental backup chains.
     */
    incrementalBackupSpec?: pulumi.Input<inputs.spanner.BackupScheduleIncrementalBackupSpec>;
    /**
     * The instance to create the database on.
     */
    instance?: pulumi.Input<string>;
    /**
     * A unique identifier for the backup schedule, which cannot be changed after
     * the backup schedule is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: '3.5s'.
     * You can set this to a value up to 366 days.
     */
    retentionDuration?: pulumi.Input<string>;
    /**
     * Defines specifications of the backup schedule.
     * Structure is documented below.
     */
    spec?: pulumi.Input<inputs.spanner.BackupScheduleSpec>;
}

/**
 * The set of arguments for constructing a BackupSchedule resource.
 */
export interface BackupScheduleArgs {
    /**
     * The database to create the backup schedule on.
     *
     *
     * - - -
     */
    database: pulumi.Input<string>;
    /**
     * The schedule creates only full backups..
     */
    fullBackupSpec?: pulumi.Input<inputs.spanner.BackupScheduleFullBackupSpec>;
    /**
     * The schedule creates incremental backup chains.
     */
    incrementalBackupSpec?: pulumi.Input<inputs.spanner.BackupScheduleIncrementalBackupSpec>;
    /**
     * The instance to create the database on.
     */
    instance: pulumi.Input<string>;
    /**
     * A unique identifier for the backup schedule, which cannot be changed after
     * the backup schedule is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
     * A duration in seconds with up to nine fractional digits, ending with 's'. Example: '3.5s'.
     * You can set this to a value up to 366 days.
     */
    retentionDuration: pulumi.Input<string>;
    /**
     * Defines specifications of the backup schedule.
     * Structure is documented below.
     */
    spec?: pulumi.Input<inputs.spanner.BackupScheduleSpec>;
}
