// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Three different resources help you manage your IAM policy for a Spanner database. Each of these resources serves a different use case:
 *
 * * `gcp.spanner.DatabaseIAMPolicy`: Authoritative. Sets the IAM policy for the database and replaces any existing policy already attached.
 *
 * > **Warning:** It's entirely possibly to lock yourself out of your database using `gcp.spanner.DatabaseIAMPolicy`. Any permissions granted by default will be removed unless you include them in your config.
 *
 * * `gcp.spanner.DatabaseIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the database are preserved.
 * * `gcp.spanner.DatabaseIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the database are preserved.
 *
 * > **Note:** `gcp.spanner.DatabaseIAMPolicy` **cannot** be used in conjunction with `gcp.spanner.DatabaseIAMBinding` and `gcp.spanner.DatabaseIAMMember` or they will fight over what your policy should be.
 *
 * > **Note:** `gcp.spanner.DatabaseIAMBinding` resources **can be** used in conjunction with `gcp.spanner.DatabaseIAMMember` resources **only if** they do not grant privilege to the same role.
 *
 * ## gcp.spanner.DatabaseIAMPolicy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/editor",
 *         members: ["user:jane@example.com"],
 *     }],
 * });
 * const database = new gcp.spanner.DatabaseIAMPolicy("database", {
 *     instance: "your-instance-name",
 *     database: "your-database-name",
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 *
 * With IAM Conditions:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/editor",
 *         members: ["user:jane@example.com"],
 *         condition: {
 *             title: "My Role",
 *             description: "Grant permissions on my_role",
 *             expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
 *         },
 *     }],
 * });
 * const database = new gcp.spanner.DatabaseIAMPolicy("database", {
 *     instance: "your-instance-name",
 *     database: "your-database-name",
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 *
 * ## gcp.spanner.DatabaseIAMBinding
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const database = new gcp.spanner.DatabaseIAMBinding("database", {
 *     instance: "your-instance-name",
 *     database: "your-database-name",
 *     role: "roles/compute.networkUser",
 *     members: ["user:jane@example.com"],
 * });
 * ```
 *
 * With IAM Conditions:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const database = new gcp.spanner.DatabaseIAMBinding("database", {
 *     instance: "your-instance-name",
 *     database: "your-database-name",
 *     role: "roles/compute.networkUser",
 *     members: ["user:jane@example.com"],
 *     condition: {
 *         title: "My Role",
 *         description: "Grant permissions on my_role",
 *         expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
 *     },
 * });
 * ```
 *
 * ## gcp.spanner.DatabaseIAMMember
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const database = new gcp.spanner.DatabaseIAMMember("database", {
 *     instance: "your-instance-name",
 *     database: "your-database-name",
 *     role: "roles/compute.networkUser",
 *     member: "user:jane@example.com",
 * });
 * ```
 *
 * With IAM Conditions:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const database = new gcp.spanner.DatabaseIAMMember("database", {
 *     instance: "your-instance-name",
 *     database: "your-database-name",
 *     role: "roles/compute.networkUser",
 *     member: "user:jane@example.com",
 *     condition: {
 *         title: "My Role",
 *         description: "Grant permissions on my_role",
 *         expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
 *     },
 * });
 * ```
 *
 * ## gcp.spanner.DatabaseIAMBinding
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const database = new gcp.spanner.DatabaseIAMBinding("database", {
 *     instance: "your-instance-name",
 *     database: "your-database-name",
 *     role: "roles/compute.networkUser",
 *     members: ["user:jane@example.com"],
 * });
 * ```
 *
 * With IAM Conditions:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const database = new gcp.spanner.DatabaseIAMBinding("database", {
 *     instance: "your-instance-name",
 *     database: "your-database-name",
 *     role: "roles/compute.networkUser",
 *     members: ["user:jane@example.com"],
 *     condition: {
 *         title: "My Role",
 *         description: "Grant permissions on my_role",
 *         expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
 *     },
 * });
 * ```
 *
 * ## gcp.spanner.DatabaseIAMMember
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const database = new gcp.spanner.DatabaseIAMMember("database", {
 *     instance: "your-instance-name",
 *     database: "your-database-name",
 *     role: "roles/compute.networkUser",
 *     member: "user:jane@example.com",
 * });
 * ```
 *
 * With IAM Conditions:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const database = new gcp.spanner.DatabaseIAMMember("database", {
 *     instance: "your-instance-name",
 *     database: "your-database-name",
 *     role: "roles/compute.networkUser",
 *     member: "user:jane@example.com",
 *     condition: {
 *         title: "My Role",
 *         description: "Grant permissions on my_role",
 *         expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ### Importing IAM policies
 *
 * IAM policy imports use the identifier of the Spanner Database resource in question. For example:
 *
 * * `{{project}}/{{instance}}/{{database}}`
 *
 * An `import` block (Terraform v1.5.0 and later) can be used to import IAM policies:
 *
 * tf
 *
 * import {
 *
 *   id = {{project}}/{{instance}}/{{database}}
 *
 *   to = google_spanner_database_iam_policy.default
 *
 * }
 *
 * The `pulumi import` command can also be used:
 *
 * ```sh
 * $ pulumi import gcp:spanner/databaseIAMPolicy:DatabaseIAMPolicy default {{project}}/{{instance}}/{{database}}
 * ```
 */
export class DatabaseIAMPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseIAMPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseIAMPolicyState, opts?: pulumi.CustomResourceOptions): DatabaseIAMPolicy {
        return new DatabaseIAMPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:spanner/databaseIAMPolicy:DatabaseIAMPolicy';

    /**
     * Returns true if the given object is an instance of DatabaseIAMPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseIAMPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseIAMPolicy.__pulumiType;
    }

    /**
     * The name of the Spanner database.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * (Computed) The etag of the database's IAM policy.
     */
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    /**
     * The name of the Spanner instance the database belongs to.
     */
    declare public readonly instance: pulumi.Output<string>;
    /**
     * The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     */
    declare public readonly policyData: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;

    /**
     * Create a DatabaseIAMPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseIAMPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseIAMPolicyArgs | DatabaseIAMPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseIAMPolicyState | undefined;
            resourceInputs["database"] = state?.database;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["instance"] = state?.instance;
            resourceInputs["policyData"] = state?.policyData;
            resourceInputs["project"] = state?.project;
        } else {
            const args = argsOrState as DatabaseIAMPolicyArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.instance === undefined && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            if (args?.policyData === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyData'");
            }
            resourceInputs["database"] = args?.database;
            resourceInputs["instance"] = args?.instance;
            resourceInputs["policyData"] = args?.policyData;
            resourceInputs["project"] = args?.project;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseIAMPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatabaseIAMPolicy resources.
 */
export interface DatabaseIAMPolicyState {
    /**
     * The name of the Spanner database.
     */
    database?: pulumi.Input<string>;
    /**
     * (Computed) The etag of the database's IAM policy.
     */
    etag?: pulumi.Input<string>;
    /**
     * The name of the Spanner instance the database belongs to.
     */
    instance?: pulumi.Input<string>;
    /**
     * The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     */
    policyData?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseIAMPolicy resource.
 */
export interface DatabaseIAMPolicyArgs {
    /**
     * The name of the Spanner database.
     */
    database: pulumi.Input<string>;
    /**
     * The name of the Spanner instance the database belongs to.
     */
    instance: pulumi.Input<string>;
    /**
     * The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     */
    policyData: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
