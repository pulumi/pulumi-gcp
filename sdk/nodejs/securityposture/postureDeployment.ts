// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Represents a deployment of a security posture on a resource. A posture contains user curated policy sets. A posture can
 * be deployed on a project or on a folder or on an organization. To deploy a posture we need to populate the posture's name
 * and its revisionId in the posture deployment configuration. Every update to a deployed posture generates a new revision_id.
 * Thus, the updated revisionId should be used in the respective posture deployment's configuration to deploy that posture
 * on a resource.
 *
 * To get more information about PostureDeployment, see:
 *
 * * How-to Guides
 *     * [Create and deploy a posture](https://cloud.google.com/security-command-center/docs/how-to-use-security-posture)
 *
 * ## Example Usage
 *
 * ### Securityposture Posture Deployment Basic
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const posture1 = new gcp.securityposture.Posture("posture1", {
 *     postureId: "posture_1",
 *     parent: "organizations/123456789",
 *     location: "global",
 *     state: "ACTIVE",
 *     description: "a new posture",
 *     policySets: [{
 *         policySetId: "org_policy_set",
 *         description: "set of org policies",
 *         policies: [{
 *             policyId: "policy_1",
 *             constraint: {
 *                 orgPolicyConstraint: {
 *                     cannedConstraintId: "storage.uniformBucketLevelAccess",
 *                     policyRules: [{
 *                         enforce: true,
 *                     }],
 *                 },
 *             },
 *         }],
 *     }],
 * });
 * const postureDeployment = new gcp.securityposture.PostureDeployment("postureDeployment", {
 *     postureDeploymentId: "posture_deployment_1",
 *     parent: "organizations/123456789",
 *     location: "global",
 *     description: "a new posture deployment",
 *     targetResource: "projects/1111111111111",
 *     postureId: posture1.name,
 *     postureRevisionId: posture1.revisionId,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * PostureDeployment can be imported using any of these accepted formats:
 *
 * * `{{parent}}/locations/{{location}}/postureDeployments/{{posture_deployment_id}}`
 *
 * When using the `pulumi import` command, PostureDeployment can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:securityposture/postureDeployment:PostureDeployment default {{parent}}/locations/{{location}}/postureDeployments/{{posture_deployment_id}}
 * ```
 */
export class PostureDeployment extends pulumi.CustomResource {
    /**
     * Get an existing PostureDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PostureDeploymentState, opts?: pulumi.CustomResourceOptions): PostureDeployment {
        return new PostureDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:securityposture/postureDeployment:PostureDeployment';

    /**
     * Returns true if the given object is an instance of PostureDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PostureDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PostureDeployment.__pulumiType;
    }

    /**
     * Time the posture deployment was created in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the posture deployment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * This is an output only optional field which will be filled in case when
     * PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
     * It denotes the desired posture to be deployed.
     */
    public /*out*/ readonly desiredPostureId!: pulumi.Output<string>;
    /**
     * This is an output only optional field which will be filled in case when
     * PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
     * It denotes the desired posture revisionId to be deployed.
     */
    public /*out*/ readonly desiredPostureRevisionId!: pulumi.Output<string>;
    /**
     * For Resource freshness validation (https://google.aip.dev/154)
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * This is a output only optional field which will be filled in case where
     * PostureDeployment enters a failure state like UPDATE_FAILED or
     * CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
     * CREATE/UPDATE/DELETE methods.
     */
    public /*out*/ readonly failureMessage!: pulumi.Output<string>;
    /**
     * The location of the resource, eg. global`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of the posture deployment instance.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
     */
    public readonly parent!: pulumi.Output<string>;
    /**
     * ID of the posture deployment.
     *
     *
     * - - -
     */
    public readonly postureDeploymentId!: pulumi.Output<string>;
    /**
     * Relative name of the posture which needs to be deployed. It should be in the format:
     * organizations/{organization_id}/locations/{location}/postures/{posture_id}
     */
    public readonly postureId!: pulumi.Output<string>;
    /**
     * Revision_id the posture which needs to be deployed.
     */
    public readonly postureRevisionId!: pulumi.Output<string>;
    /**
     * If set, there are currently changes in flight to the posture deployment.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * State of the posture deployment. A posture deployment can be in the following terminal states:
     * ACTIVE, CREATE_FAILED, UPDATE_FAILED, DELETE_FAILED.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The resource on which the posture should be deployed. This can be in one of the following formats:
     * projects/{project_number},
     * folders/{folder_number},
     * organizations/{organization_id}
     */
    public readonly targetResource!: pulumi.Output<string>;
    /**
     * Time the posture deployment was updated in UTC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a PostureDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PostureDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PostureDeploymentArgs | PostureDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PostureDeploymentState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredPostureId"] = state ? state.desiredPostureId : undefined;
            resourceInputs["desiredPostureRevisionId"] = state ? state.desiredPostureRevisionId : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["failureMessage"] = state ? state.failureMessage : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["postureDeploymentId"] = state ? state.postureDeploymentId : undefined;
            resourceInputs["postureId"] = state ? state.postureId : undefined;
            resourceInputs["postureRevisionId"] = state ? state.postureRevisionId : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targetResource"] = state ? state.targetResource : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as PostureDeploymentArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            if ((!args || args.postureDeploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postureDeploymentId'");
            }
            if ((!args || args.postureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postureId'");
            }
            if ((!args || args.postureRevisionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postureRevisionId'");
            }
            if ((!args || args.targetResource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResource'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["postureDeploymentId"] = args ? args.postureDeploymentId : undefined;
            resourceInputs["postureId"] = args ? args.postureId : undefined;
            resourceInputs["postureRevisionId"] = args ? args.postureRevisionId : undefined;
            resourceInputs["targetResource"] = args ? args.targetResource : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["desiredPostureId"] = undefined /*out*/;
            resourceInputs["desiredPostureRevisionId"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["failureMessage"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PostureDeployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PostureDeployment resources.
 */
export interface PostureDeploymentState {
    /**
     * Time the posture deployment was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the posture deployment.
     */
    description?: pulumi.Input<string>;
    /**
     * This is an output only optional field which will be filled in case when
     * PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
     * It denotes the desired posture to be deployed.
     */
    desiredPostureId?: pulumi.Input<string>;
    /**
     * This is an output only optional field which will be filled in case when
     * PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
     * It denotes the desired posture revisionId to be deployed.
     */
    desiredPostureRevisionId?: pulumi.Input<string>;
    /**
     * For Resource freshness validation (https://google.aip.dev/154)
     */
    etag?: pulumi.Input<string>;
    /**
     * This is a output only optional field which will be filled in case where
     * PostureDeployment enters a failure state like UPDATE_FAILED or
     * CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
     * CREATE/UPDATE/DELETE methods.
     */
    failureMessage?: pulumi.Input<string>;
    /**
     * The location of the resource, eg. global`.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the posture deployment instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
     */
    parent?: pulumi.Input<string>;
    /**
     * ID of the posture deployment.
     *
     *
     * - - -
     */
    postureDeploymentId?: pulumi.Input<string>;
    /**
     * Relative name of the posture which needs to be deployed. It should be in the format:
     * organizations/{organization_id}/locations/{location}/postures/{posture_id}
     */
    postureId?: pulumi.Input<string>;
    /**
     * Revision_id the posture which needs to be deployed.
     */
    postureRevisionId?: pulumi.Input<string>;
    /**
     * If set, there are currently changes in flight to the posture deployment.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * State of the posture deployment. A posture deployment can be in the following terminal states:
     * ACTIVE, CREATE_FAILED, UPDATE_FAILED, DELETE_FAILED.
     */
    state?: pulumi.Input<string>;
    /**
     * The resource on which the posture should be deployed. This can be in one of the following formats:
     * projects/{project_number},
     * folders/{folder_number},
     * organizations/{organization_id}
     */
    targetResource?: pulumi.Input<string>;
    /**
     * Time the posture deployment was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PostureDeployment resource.
 */
export interface PostureDeploymentArgs {
    /**
     * Description of the posture deployment.
     */
    description?: pulumi.Input<string>;
    /**
     * The location of the resource, eg. global`.
     */
    location: pulumi.Input<string>;
    /**
     * The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
     */
    parent: pulumi.Input<string>;
    /**
     * ID of the posture deployment.
     *
     *
     * - - -
     */
    postureDeploymentId: pulumi.Input<string>;
    /**
     * Relative name of the posture which needs to be deployed. It should be in the format:
     * organizations/{organization_id}/locations/{location}/postures/{posture_id}
     */
    postureId: pulumi.Input<string>;
    /**
     * Revision_id the posture which needs to be deployed.
     */
    postureRevisionId: pulumi.Input<string>;
    /**
     * The resource on which the posture should be deployed. This can be in one of the following formats:
     * projects/{project_number},
     * folders/{folder_number},
     * organizations/{organization_id}
     */
    targetResource: pulumi.Input<string>;
}
