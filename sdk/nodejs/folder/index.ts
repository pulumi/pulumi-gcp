// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessApprovalSettingsArgs, AccessApprovalSettingsState } from "./accessApprovalSettings";
export type AccessApprovalSettings = import("./accessApprovalSettings").AccessApprovalSettings;
export const AccessApprovalSettings: typeof import("./accessApprovalSettings").AccessApprovalSettings = null as any;
utilities.lazyLoad(exports, ["AccessApprovalSettings"], () => require("./accessApprovalSettings"));

export { GetOrganizationPolicyArgs, GetOrganizationPolicyResult, GetOrganizationPolicyOutputArgs } from "./getOrganizationPolicy";
export const getOrganizationPolicy: typeof import("./getOrganizationPolicy").getOrganizationPolicy = null as any;
export const getOrganizationPolicyOutput: typeof import("./getOrganizationPolicy").getOrganizationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationPolicy","getOrganizationPolicyOutput"], () => require("./getOrganizationPolicy"));

export { IamAuditConfigArgs, IamAuditConfigState } from "./iamAuditConfig";
export type IamAuditConfig = import("./iamAuditConfig").IamAuditConfig;
export const IamAuditConfig: typeof import("./iamAuditConfig").IamAuditConfig = null as any;
utilities.lazyLoad(exports, ["IamAuditConfig"], () => require("./iamAuditConfig"));

export { IAMBindingArgs, IAMBindingState } from "./iambinding";
export type IAMBinding = import("./iambinding").IAMBinding;
export const IAMBinding: typeof import("./iambinding").IAMBinding = null as any;
utilities.lazyLoad(exports, ["IAMBinding"], () => require("./iambinding"));

export { IAMMemberArgs, IAMMemberState } from "./iammember";
export type IAMMember = import("./iammember").IAMMember;
export const IAMMember: typeof import("./iammember").IAMMember = null as any;
utilities.lazyLoad(exports, ["IAMMember"], () => require("./iammember"));

export { IAMPolicyArgs, IAMPolicyState } from "./iampolicy";
export type IAMPolicy = import("./iampolicy").IAMPolicy;
export const IAMPolicy: typeof import("./iampolicy").IAMPolicy = null as any;
utilities.lazyLoad(exports, ["IAMPolicy"], () => require("./iampolicy"));

export { OrganizationPolicyArgs, OrganizationPolicyState } from "./organizationPolicy";
export type OrganizationPolicy = import("./organizationPolicy").OrganizationPolicy;
export const OrganizationPolicy: typeof import("./organizationPolicy").OrganizationPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationPolicy"], () => require("./organizationPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:folder/accessApprovalSettings:AccessApprovalSettings":
                return new AccessApprovalSettings(name, <any>undefined, { urn })
            case "gcp:folder/iAMBinding:IAMBinding":
                return new IAMBinding(name, <any>undefined, { urn })
            case "gcp:folder/iAMMember:IAMMember":
                return new IAMMember(name, <any>undefined, { urn })
            case "gcp:folder/iAMPolicy:IAMPolicy":
                return new IAMPolicy(name, <any>undefined, { urn })
            case "gcp:folder/iamAuditConfig:IamAuditConfig":
                return new IamAuditConfig(name, <any>undefined, { urn })
            case "gcp:folder/organizationPolicy:OrganizationPolicy":
                return new OrganizationPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "folder/accessApprovalSettings", _module)
pulumi.runtime.registerResourceModule("gcp", "folder/iAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "folder/iAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "folder/iAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "folder/iamAuditConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "folder/organizationPolicy", _module)
