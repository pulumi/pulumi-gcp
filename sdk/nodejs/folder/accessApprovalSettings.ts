// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Access Approval enables you to require your explicit approval whenever Google support and engineering need to access your customer content.
 *
 * To get more information about FolderSettings, see:
 *
 * * [API documentation](https://cloud.google.com/access-approval/docs/reference/rest/v1/folders)
 *
 * ## Example Usage
 * ### Folder Access Approval Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myFolder = new gcp.organizations.Folder("myFolder", {
 *     displayName: "my-folder",
 *     parent: "organizations/123456789",
 * });
 * const folderAccessApproval = new gcp.folder.AccessApprovalSettings("folderAccessApproval", {
 *     folderId: myFolder.folderId,
 *     notificationEmails: [
 *         "testuser@example.com",
 *         "example.user@example.com",
 *     ],
 *     enrolledServices: [{
 *         cloudProduct: "all",
 *     }],
 * });
 * ```
 * ### Folder Access Approval Active Key Version
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myFolder = new gcp.organizations.Folder("myFolder", {
 *     displayName: "my-folder",
 *     parent: "organizations/123456789",
 * });
 * const myProject = new gcp.organizations.Project("myProject", {
 *     projectId: "your-project-id",
 *     folderId: myFolder.name,
 * });
 * const keyRing = new gcp.kms.KeyRing("keyRing", {
 *     location: "global",
 *     project: myProject.projectId,
 * });
 * const cryptoKey = new gcp.kms.CryptoKey("cryptoKey", {
 *     keyRing: keyRing.id,
 *     purpose: "ASYMMETRIC_SIGN",
 *     versionTemplate: {
 *         algorithm: "EC_SIGN_P384_SHA384",
 *     },
 * });
 * const serviceAccount = gcp.accessapproval.getFolderServiceAccountOutput({
 *     folderId: myFolder.folderId,
 * });
 * const iam = new gcp.kms.CryptoKeyIAMMember("iam", {
 *     cryptoKeyId: cryptoKey.id,
 *     role: "roles/cloudkms.signerVerifier",
 *     member: serviceAccount.apply(serviceAccount => `serviceAccount:${serviceAccount.accountEmail}`),
 * });
 * const cryptoKeyVersion = gcp.kms.getKMSCryptoKeyVersionOutput({
 *     cryptoKey: cryptoKey.id,
 * });
 * const folderAccessApproval = new gcp.folder.AccessApprovalSettings("folderAccessApproval", {
 *     folderId: myFolder.folderId,
 *     activeKeyVersion: cryptoKeyVersion.apply(cryptoKeyVersion => cryptoKeyVersion.name),
 *     enrolledServices: [{
 *         cloudProduct: "all",
 *     }],
 * }, {
 *     dependsOn: [iam],
 * });
 * ```
 *
 * ## Import
 *
 * FolderSettings can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:folder/accessApprovalSettings:AccessApprovalSettings default folders/{{folder_id}}/accessApprovalSettings
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:folder/accessApprovalSettings:AccessApprovalSettings default {{folder_id}}
 * ```
 */
export class AccessApprovalSettings extends pulumi.CustomResource {
    /**
     * Get an existing AccessApprovalSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessApprovalSettingsState, opts?: pulumi.CustomResourceOptions): AccessApprovalSettings {
        return new AccessApprovalSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:folder/accessApprovalSettings:AccessApprovalSettings';

    /**
     * Returns true if the given object is an instance of AccessApprovalSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessApprovalSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessApprovalSettings.__pulumiType;
    }

    /**
     * The asymmetric crypto key version to use for signing approval requests.
     * Empty activeKeyVersion indicates that a Google-managed key should be used for signing.
     * This property will be ignored if set by an ancestor of the resource, and new non-empty values may not be set.
     */
    public readonly activeKeyVersion!: pulumi.Output<string | undefined>;
    /**
     * If the field is true, that indicates that an ancestor of this Folder has set active_key_version.
     */
    public /*out*/ readonly ancestorHasActiveKeyVersion!: pulumi.Output<boolean>;
    /**
     * If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors of the Folder.
     */
    public /*out*/ readonly enrolledAncestor!: pulumi.Output<boolean>;
    /**
     * A list of Google Cloud Services for which the given resource has Access Approval enrolled.
     * Access requests for the resource given by name against any of these services contained here will be required
     * to have explicit approval. Enrollment can only be done on an all or nothing basis.
     * A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
     * Structure is documented below.
     */
    public readonly enrolledServices!: pulumi.Output<outputs.folder.AccessApprovalSettingsEnrolledService[]>;
    /**
     * ID of the folder of the access approval settings.
     */
    public readonly folderId!: pulumi.Output<string>;
    /**
     * If the field is true, that indicates that there is some configuration issue with the activeKeyVersion
     * configured on this Folder (e.g. it doesn't exist or the Access Approval service account doesn't have the
     * correct permissions on it, etc.) This key version is not necessarily the effective key version at this level,
     * as key versions are inherited top-down.
     */
    public /*out*/ readonly invalidKeyVersion!: pulumi.Output<boolean>;
    /**
     * The resource name of the settings. Format is "folders/{folder_id}/accessApprovalSettings"
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * A list of email addresses to which notifications relating to approval requests should be sent.
     * Notifications relating to a resource will be sent to all emails in the settings of ancestor
     * resources of that resource. A maximum of 50 email addresses are allowed.
     */
    public readonly notificationEmails!: pulumi.Output<string[]>;

    /**
     * Create a AccessApprovalSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessApprovalSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessApprovalSettingsArgs | AccessApprovalSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessApprovalSettingsState | undefined;
            resourceInputs["activeKeyVersion"] = state ? state.activeKeyVersion : undefined;
            resourceInputs["ancestorHasActiveKeyVersion"] = state ? state.ancestorHasActiveKeyVersion : undefined;
            resourceInputs["enrolledAncestor"] = state ? state.enrolledAncestor : undefined;
            resourceInputs["enrolledServices"] = state ? state.enrolledServices : undefined;
            resourceInputs["folderId"] = state ? state.folderId : undefined;
            resourceInputs["invalidKeyVersion"] = state ? state.invalidKeyVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationEmails"] = state ? state.notificationEmails : undefined;
        } else {
            const args = argsOrState as AccessApprovalSettingsArgs | undefined;
            if ((!args || args.enrolledServices === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enrolledServices'");
            }
            if ((!args || args.folderId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'folderId'");
            }
            resourceInputs["activeKeyVersion"] = args ? args.activeKeyVersion : undefined;
            resourceInputs["enrolledServices"] = args ? args.enrolledServices : undefined;
            resourceInputs["folderId"] = args ? args.folderId : undefined;
            resourceInputs["notificationEmails"] = args ? args.notificationEmails : undefined;
            resourceInputs["ancestorHasActiveKeyVersion"] = undefined /*out*/;
            resourceInputs["enrolledAncestor"] = undefined /*out*/;
            resourceInputs["invalidKeyVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessApprovalSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessApprovalSettings resources.
 */
export interface AccessApprovalSettingsState {
    /**
     * The asymmetric crypto key version to use for signing approval requests.
     * Empty activeKeyVersion indicates that a Google-managed key should be used for signing.
     * This property will be ignored if set by an ancestor of the resource, and new non-empty values may not be set.
     */
    activeKeyVersion?: pulumi.Input<string>;
    /**
     * If the field is true, that indicates that an ancestor of this Folder has set active_key_version.
     */
    ancestorHasActiveKeyVersion?: pulumi.Input<boolean>;
    /**
     * If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors of the Folder.
     */
    enrolledAncestor?: pulumi.Input<boolean>;
    /**
     * A list of Google Cloud Services for which the given resource has Access Approval enrolled.
     * Access requests for the resource given by name against any of these services contained here will be required
     * to have explicit approval. Enrollment can only be done on an all or nothing basis.
     * A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
     * Structure is documented below.
     */
    enrolledServices?: pulumi.Input<pulumi.Input<inputs.folder.AccessApprovalSettingsEnrolledService>[]>;
    /**
     * ID of the folder of the access approval settings.
     */
    folderId?: pulumi.Input<string>;
    /**
     * If the field is true, that indicates that there is some configuration issue with the activeKeyVersion
     * configured on this Folder (e.g. it doesn't exist or the Access Approval service account doesn't have the
     * correct permissions on it, etc.) This key version is not necessarily the effective key version at this level,
     * as key versions are inherited top-down.
     */
    invalidKeyVersion?: pulumi.Input<boolean>;
    /**
     * The resource name of the settings. Format is "folders/{folder_id}/accessApprovalSettings"
     */
    name?: pulumi.Input<string>;
    /**
     * A list of email addresses to which notifications relating to approval requests should be sent.
     * Notifications relating to a resource will be sent to all emails in the settings of ancestor
     * resources of that resource. A maximum of 50 email addresses are allowed.
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AccessApprovalSettings resource.
 */
export interface AccessApprovalSettingsArgs {
    /**
     * The asymmetric crypto key version to use for signing approval requests.
     * Empty activeKeyVersion indicates that a Google-managed key should be used for signing.
     * This property will be ignored if set by an ancestor of the resource, and new non-empty values may not be set.
     */
    activeKeyVersion?: pulumi.Input<string>;
    /**
     * A list of Google Cloud Services for which the given resource has Access Approval enrolled.
     * Access requests for the resource given by name against any of these services contained here will be required
     * to have explicit approval. Enrollment can only be done on an all or nothing basis.
     * A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
     * Structure is documented below.
     */
    enrolledServices: pulumi.Input<pulumi.Input<inputs.folder.AccessApprovalSettingsEnrolledService>[]>;
    /**
     * ID of the folder of the access approval settings.
     */
    folderId: pulumi.Input<string>;
    /**
     * A list of email addresses to which notifications relating to approval requests should be sent.
     * Notifications relating to a resource will be sent to all emails in the settings of ancestor
     * resources of that resource. A maximum of 50 email addresses are allowed.
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
}
