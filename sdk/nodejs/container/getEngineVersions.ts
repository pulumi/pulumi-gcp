// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides access to available Google Kubernetes Engine versions in a zone or region for a given project.
 *
 * > If you are using the `gcp.container.getEngineVersions` datasource with a
 * regional cluster, ensure that you have provided a region as the `location` to
 * the datasource. A region can have a different set of supported versions than
 * its component zones, and not all zones in a region are guaranteed to
 * support the same version.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const central1b = gcp.container.getEngineVersions({
 *     location: "us-central1-b",
 *     versionPrefix: "1.12.",
 * });
 * const foo = new gcp.container.Cluster("foo", {
 *     location: "us-central1-b",
 *     nodeVersion: central1b.then(central1b => central1b.latestNodeVersion),
 *     initialNodeCount: 1,
 *     masterAuth: {
 *         username: "mr.yoda",
 *         password: "adoy.rm",
 *     },
 * });
 * export const stableChannelVersion = central1b.then(central1b => central1b.releaseChannelDefaultVersion?.STABLE);
 * ```
 */
export function getEngineVersions(args?: GetEngineVersionsArgs, opts?: pulumi.InvokeOptions): Promise<GetEngineVersionsResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("gcp:container/getEngineVersions:getEngineVersions", {
        "location": args.location,
        "project": args.project,
        "versionPrefix": args.versionPrefix,
    }, opts);
}

/**
 * A collection of arguments for invoking getEngineVersions.
 */
export interface GetEngineVersionsArgs {
    /**
     * The location (region or zone) to list versions for.
     * Must exactly match the location the cluster will be deployed in, or listed
     * versions may not be available. If `location`, `region`, and `zone` are not
     * specified, the provider-level zone must be set and is used instead.
     */
    location?: string;
    /**
     * ID of the project to list available cluster versions for. Should match the project the cluster will be deployed to.
     * Defaults to the project that the provider is authenticated with.
     */
    project?: string;
    /**
     * If provided, the provider will only return versions
     * that match the string prefix. For example, `1.11.` will match all `1.11` series
     * releases. Since this is just a string match, it's recommended that you append a
     * `.` after minor versions to ensure that prefixes such as `1.1` don't match
     * versions like `1.12.5-gke.10` accidentally. See [the docs on versioning schema](https://cloud.google.com/kubernetes-engine/versioning-and-upgrades#versioning_scheme)
     * for full details on how version strings are formatted.
     */
    versionPrefix?: string;
}

/**
 * A collection of values returned by getEngineVersions.
 */
export interface GetEngineVersionsResult {
    /**
     * Version of Kubernetes the service deploys by default.
     */
    readonly defaultClusterVersion: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The latest version available in the given zone for use with master instances.
     */
    readonly latestMasterVersion: string;
    /**
     * The latest version available in the given zone for use with node instances.
     */
    readonly latestNodeVersion: string;
    readonly location?: string;
    readonly project?: string;
    /**
     * A map from a release channel name to the channel's default version.
     */
    readonly releaseChannelDefaultVersion: {[key: string]: string};
    /**
     * A list of versions available in the given zone for use with master instances.
     */
    readonly validMasterVersions: string[];
    /**
     * A list of versions available in the given zone for use with node instances.
     */
    readonly validNodeVersions: string[];
    readonly versionPrefix?: string;
}
