// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Get info about a GKE cluster from its name and location.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myCluster = gcp.container.getCluster({
 *     name: "my-cluster",
 *     location: "us-east1-a",
 * });
 * export const clusterUsername = myCluster.then(myCluster => myCluster.masterAuths?[0]?.username);
 * export const clusterPassword = myCluster.then(myCluster => myCluster.masterAuths?[0]?.password);
 * export const endpoint = myCluster.then(myCluster => myCluster.endpoint);
 * export const instanceGroupUrls = myCluster.then(myCluster => myCluster.instanceGroupUrls);
 * export const nodeConfig = myCluster.then(myCluster => myCluster.nodeConfigs);
 * export const nodePools = myCluster.then(myCluster => myCluster.nodePools);
 * ```
 */
export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("gcp:container/getCluster:getCluster", {
        "location": args.location,
        "name": args.name,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    /**
     * The location (zone or region) this cluster has been
     * created in. One of `location`, `region`, `zone`, or a provider-level `zone` must
     * be specified.
     */
    location?: string;
    /**
     * The name of the cluster.
     */
    name: string;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    readonly addonsConfigs: outputs.container.GetClusterAddonsConfig[];
    readonly authenticatorGroupsConfigs: outputs.container.GetClusterAuthenticatorGroupsConfig[];
    readonly clusterAutoscalings: outputs.container.GetClusterClusterAutoscaling[];
    readonly clusterIpv4Cidr: string;
    readonly clusterTelemetries: outputs.container.GetClusterClusterTelemetry[];
    readonly confidentialNodes: outputs.container.GetClusterConfidentialNode[];
    readonly databaseEncryptions: outputs.container.GetClusterDatabaseEncryption[];
    readonly datapathProvider: string;
    readonly defaultMaxPodsPerNode: number;
    readonly defaultSnatStatuses: outputs.container.GetClusterDefaultSnatStatus[];
    readonly description: string;
    readonly enableAutopilot: boolean;
    readonly enableBinaryAuthorization: boolean;
    readonly enableIntranodeVisibility: boolean;
    readonly enableKubernetesAlpha: boolean;
    readonly enableL4IlbSubsetting: boolean;
    readonly enableLegacyAbac: boolean;
    readonly enableShieldedNodes: boolean;
    readonly enableTpu: boolean;
    readonly endpoint: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly initialNodeCount: number;
    readonly instanceGroupUrls: string[];
    readonly ipAllocationPolicies: outputs.container.GetClusterIpAllocationPolicy[];
    readonly labelFingerprint: string;
    readonly location?: string;
    readonly loggingService: string;
    readonly maintenancePolicies: outputs.container.GetClusterMaintenancePolicy[];
    readonly masterAuthorizedNetworksConfigs: outputs.container.GetClusterMasterAuthorizedNetworksConfig[];
    readonly masterAuths: outputs.container.GetClusterMasterAuth[];
    readonly masterVersion: string;
    readonly minMasterVersion: string;
    readonly monitoringService: string;
    readonly name: string;
    readonly network: string;
    readonly networkPolicies: outputs.container.GetClusterNetworkPolicy[];
    readonly networkingMode: string;
    readonly nodeConfigs: outputs.container.GetClusterNodeConfig[];
    readonly nodeLocations: string[];
    readonly nodePools: outputs.container.GetClusterNodePool[];
    readonly nodeVersion: string;
    readonly notificationConfigs: outputs.container.GetClusterNotificationConfig[];
    readonly operation: string;
    readonly podSecurityPolicyConfigs: outputs.container.GetClusterPodSecurityPolicyConfig[];
    readonly privateClusterConfigs: outputs.container.GetClusterPrivateClusterConfig[];
    readonly privateIpv6GoogleAccess: string;
    readonly project?: string;
    readonly releaseChannels: outputs.container.GetClusterReleaseChannel[];
    readonly removeDefaultNodePool: boolean;
    readonly resourceLabels: {[key: string]: string};
    readonly resourceUsageExportConfigs: outputs.container.GetClusterResourceUsageExportConfig[];
    readonly selfLink: string;
    readonly servicesIpv4Cidr: string;
    readonly subnetwork: string;
    readonly tpuIpv4CidrBlock: string;
    readonly verticalPodAutoscalings: outputs.container.GetClusterVerticalPodAutoscaling[];
    readonly workloadIdentityConfigs: outputs.container.GetClusterWorkloadIdentityConfig[];
}
