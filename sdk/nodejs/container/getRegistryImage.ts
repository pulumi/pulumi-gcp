// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source fetches the project name, and provides the appropriate URLs to use for container registry for this project.
 *
 * The URLs are computed entirely offline - as long as the project exists, they will be valid, but this data source does not contact Google Container Registry (GCR) at any point.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const debian = gcp.container.getRegistryImage({
 *     name: "debian",
 * });
 * export const gcrLocation = debian.then(debian => debian.imageUrl);
 * ```
 */
export function getRegistryImage(args: GetRegistryImageArgs, opts?: pulumi.InvokeOptions): Promise<GetRegistryImageResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:container/getRegistryImage:getRegistryImage", {
        "digest": args.digest,
        "name": args.name,
        "project": args.project,
        "region": args.region,
        "tag": args.tag,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegistryImage.
 */
export interface GetRegistryImageArgs {
    /**
     * The image digest to fetch, if any.
     */
    digest?: string;
    /**
     * The image name.
     */
    name: string;
    /**
     * The project ID that this image is attached to.  If not provider, provider project will be used instead.
     */
    project?: string;
    /**
     * The GCR region to use.  As of this writing, one of `asia`, `eu`, and `us`.  See [the documentation](https://cloud.google.com/container-registry/docs/pushing-and-pulling) for additional information.
     */
    region?: string;
    /**
     * The tag to fetch, if any.
     */
    tag?: string;
}

/**
 * A collection of values returned by getRegistryImage.
 */
export interface GetRegistryImageResult {
    readonly digest?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The URL at which the image can be accessed.
     */
    readonly imageUrl: string;
    readonly name: string;
    readonly project: string;
    readonly region?: string;
    readonly tag?: string;
}
/**
 * This data source fetches the project name, and provides the appropriate URLs to use for container registry for this project.
 *
 * The URLs are computed entirely offline - as long as the project exists, they will be valid, but this data source does not contact Google Container Registry (GCR) at any point.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const debian = gcp.container.getRegistryImage({
 *     name: "debian",
 * });
 * export const gcrLocation = debian.then(debian => debian.imageUrl);
 * ```
 */
export function getRegistryImageOutput(args: GetRegistryImageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRegistryImageResult> {
    return pulumi.output(args).apply((a: any) => getRegistryImage(a, opts))
}

/**
 * A collection of arguments for invoking getRegistryImage.
 */
export interface GetRegistryImageOutputArgs {
    /**
     * The image digest to fetch, if any.
     */
    digest?: pulumi.Input<string>;
    /**
     * The image name.
     */
    name: pulumi.Input<string>;
    /**
     * The project ID that this image is attached to.  If not provider, provider project will be used instead.
     */
    project?: pulumi.Input<string>;
    /**
     * The GCR region to use.  As of this writing, one of `asia`, `eu`, and `us`.  See [the documentation](https://cloud.google.com/container-registry/docs/pushing-and-pulling) for additional information.
     */
    region?: pulumi.Input<string>;
    /**
     * The tag to fetch, if any.
     */
    tag?: pulumi.Input<string>;
}
