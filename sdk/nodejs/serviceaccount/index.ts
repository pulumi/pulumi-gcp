// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAccountAccessTokenArgs, GetAccountAccessTokenResult, GetAccountAccessTokenOutputArgs } from "./getAccountAccessToken";
export const getAccountAccessToken: typeof import("./getAccountAccessToken").getAccountAccessToken = null as any;
export const getAccountAccessTokenOutput: typeof import("./getAccountAccessToken").getAccountAccessTokenOutput = null as any;
utilities.lazyLoad(exports, ["getAccountAccessToken","getAccountAccessTokenOutput"], () => require("./getAccountAccessToken"));

export { GetAccountIdTokenArgs, GetAccountIdTokenResult, GetAccountIdTokenOutputArgs } from "./getAccountIdToken";
export const getAccountIdToken: typeof import("./getAccountIdToken").getAccountIdToken = null as any;
export const getAccountIdTokenOutput: typeof import("./getAccountIdToken").getAccountIdTokenOutput = null as any;
utilities.lazyLoad(exports, ["getAccountIdToken","getAccountIdTokenOutput"], () => require("./getAccountIdToken"));

export { GetAccountJwtArgs, GetAccountJwtResult, GetAccountJwtOutputArgs } from "./getAccountJwt";
export const getAccountJwt: typeof import("./getAccountJwt").getAccountJwt = null as any;
export const getAccountJwtOutput: typeof import("./getAccountJwt").getAccountJwtOutput = null as any;
utilities.lazyLoad(exports, ["getAccountJwt","getAccountJwtOutput"], () => require("./getAccountJwt"));

export { GetAccountKeyArgs, GetAccountKeyResult, GetAccountKeyOutputArgs } from "./getAccountKey";
export const getAccountKey: typeof import("./getAccountKey").getAccountKey = null as any;
export const getAccountKeyOutput: typeof import("./getAccountKey").getAccountKeyOutput = null as any;
utilities.lazyLoad(exports, ["getAccountKey","getAccountKeyOutput"], () => require("./getAccountKey"));

export { IAMBindingArgs, IAMBindingState } from "./iambinding";
export type IAMBinding = import("./iambinding").IAMBinding;
export const IAMBinding: typeof import("./iambinding").IAMBinding = null as any;
utilities.lazyLoad(exports, ["IAMBinding"], () => require("./iambinding"));

export { IAMMemberArgs, IAMMemberState } from "./iammember";
export type IAMMember = import("./iammember").IAMMember;
export const IAMMember: typeof import("./iammember").IAMMember = null as any;
utilities.lazyLoad(exports, ["IAMMember"], () => require("./iammember"));

export { IAMPolicyArgs, IAMPolicyState } from "./iampolicy";
export type IAMPolicy = import("./iampolicy").IAMPolicy;
export const IAMPolicy: typeof import("./iampolicy").IAMPolicy = null as any;
utilities.lazyLoad(exports, ["IAMPolicy"], () => require("./iampolicy"));

export { KeyArgs, KeyState } from "./key";
export type Key = import("./key").Key;
export const Key: typeof import("./key").Key = null as any;
utilities.lazyLoad(exports, ["Key"], () => require("./key"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:serviceAccount/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "gcp:serviceAccount/iAMBinding:IAMBinding":
                return new IAMBinding(name, <any>undefined, { urn })
            case "gcp:serviceAccount/iAMMember:IAMMember":
                return new IAMMember(name, <any>undefined, { urn })
            case "gcp:serviceAccount/iAMPolicy:IAMPolicy":
                return new IAMPolicy(name, <any>undefined, { urn })
            case "gcp:serviceAccount/key:Key":
                return new Key(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/account", _module)
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/iAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/iAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/iAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/key", _module)
