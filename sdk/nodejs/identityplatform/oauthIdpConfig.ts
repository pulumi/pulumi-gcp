// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * OIDC IdP configuration for a Identity Toolkit project.
 *
 * You must enable the
 * [Google Identity Platform](https://console.cloud.google.com/marketplace/details/google-cloud-platform/customer-identity) in
 * the marketplace prior to using this resource.
 *
 * ## Example Usage
 *
 * ### Identity Platform Oauth Idp Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const oauthIdpConfig = new gcp.identityplatform.OauthIdpConfig("oauth_idp_config", {
 *     name: "oidc.oauth-idp-config",
 *     displayName: "Display Name",
 *     clientId: "client-id",
 *     issuer: "issuer",
 *     enabled: true,
 *     clientSecret: "secret",
 *     responseType: {
 *         idToken: true,
 *         code: false,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * OauthIdpConfig can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/oauthIdpConfigs/{{name}}`
 *
 * * `{{project}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, OauthIdpConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:identityplatform/oauthIdpConfig:OauthIdpConfig default projects/{{project}}/oauthIdpConfigs/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:identityplatform/oauthIdpConfig:OauthIdpConfig default {{project}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:identityplatform/oauthIdpConfig:OauthIdpConfig default {{name}}
 * ```
 */
export class OauthIdpConfig extends pulumi.CustomResource {
    /**
     * Get an existing OauthIdpConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OauthIdpConfigState, opts?: pulumi.CustomResourceOptions): OauthIdpConfig {
        return new OauthIdpConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:identityplatform/oauthIdpConfig:OauthIdpConfig';

    /**
     * Returns true if the given object is an instance of OauthIdpConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OauthIdpConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OauthIdpConfig.__pulumiType;
    }

    /**
     * The client id of an OAuth client.
     */
    declare public readonly clientId: pulumi.Output<string>;
    /**
     * The client secret of the OAuth client, to enable OIDC code flow.
     */
    declare public readonly clientSecret: pulumi.Output<string | undefined>;
    /**
     * Human friendly display name.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * If this config allows users to sign in with the provider.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * For OIDC Idps, the issuer identifier.
     */
    declare public readonly issuer: pulumi.Output<string>;
    /**
     * The name of the OauthIdpConfig. Must start with `oidc.`.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The response type to request for in the OAuth authorization flow.
     * You can set either idToken or code to true, but not both.
     * Setting both types to be simultaneously true ({code: true, idToken: true}) is not yet supported.
     * Structure is documented below.
     */
    declare public readonly responseType: pulumi.Output<outputs.identityplatform.OauthIdpConfigResponseType | undefined>;

    /**
     * Create a OauthIdpConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OauthIdpConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OauthIdpConfigArgs | OauthIdpConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OauthIdpConfigState | undefined;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientSecret"] = state?.clientSecret;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["issuer"] = state?.issuer;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["responseType"] = state?.responseType;
        } else {
            const args = argsOrState as OauthIdpConfigArgs | undefined;
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.issuer === undefined && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientSecret"] = args?.clientSecret;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["issuer"] = args?.issuer;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["responseType"] = args?.responseType;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OauthIdpConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OauthIdpConfig resources.
 */
export interface OauthIdpConfigState {
    /**
     * The client id of an OAuth client.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The client secret of the OAuth client, to enable OIDC code flow.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Human friendly display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * If this config allows users to sign in with the provider.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * For OIDC Idps, the issuer identifier.
     */
    issuer?: pulumi.Input<string>;
    /**
     * The name of the OauthIdpConfig. Must start with `oidc.`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The response type to request for in the OAuth authorization flow.
     * You can set either idToken or code to true, but not both.
     * Setting both types to be simultaneously true ({code: true, idToken: true}) is not yet supported.
     * Structure is documented below.
     */
    responseType?: pulumi.Input<inputs.identityplatform.OauthIdpConfigResponseType>;
}

/**
 * The set of arguments for constructing a OauthIdpConfig resource.
 */
export interface OauthIdpConfigArgs {
    /**
     * The client id of an OAuth client.
     */
    clientId: pulumi.Input<string>;
    /**
     * The client secret of the OAuth client, to enable OIDC code flow.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Human friendly display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * If this config allows users to sign in with the provider.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * For OIDC Idps, the issuer identifier.
     */
    issuer: pulumi.Input<string>;
    /**
     * The name of the OauthIdpConfig. Must start with `oidc.`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The response type to request for in the OAuth authorization flow.
     * You can set either idToken or code to true, but not both.
     * Setting both types to be simultaneously true ({code: true, idToken: true}) is not yet supported.
     * Structure is documented below.
     */
    responseType?: pulumi.Input<inputs.identityplatform.OauthIdpConfigResponseType>;
}
