// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConfigArgs, ConfigState } from "./config";
export type Config = import("./config").Config;
export const Config: typeof import("./config").Config = null as any;
utilities.lazyLoad(exports, ["Config"], () => require("./config"));

export { DefaultSupportedIdpConfigArgs, DefaultSupportedIdpConfigState } from "./defaultSupportedIdpConfig";
export type DefaultSupportedIdpConfig = import("./defaultSupportedIdpConfig").DefaultSupportedIdpConfig;
export const DefaultSupportedIdpConfig: typeof import("./defaultSupportedIdpConfig").DefaultSupportedIdpConfig = null as any;
utilities.lazyLoad(exports, ["DefaultSupportedIdpConfig"], () => require("./defaultSupportedIdpConfig"));

export { InboundSamlConfigArgs, InboundSamlConfigState } from "./inboundSamlConfig";
export type InboundSamlConfig = import("./inboundSamlConfig").InboundSamlConfig;
export const InboundSamlConfig: typeof import("./inboundSamlConfig").InboundSamlConfig = null as any;
utilities.lazyLoad(exports, ["InboundSamlConfig"], () => require("./inboundSamlConfig"));

export { OauthIdpConfigArgs, OauthIdpConfigState } from "./oauthIdpConfig";
export type OauthIdpConfig = import("./oauthIdpConfig").OauthIdpConfig;
export const OauthIdpConfig: typeof import("./oauthIdpConfig").OauthIdpConfig = null as any;
utilities.lazyLoad(exports, ["OauthIdpConfig"], () => require("./oauthIdpConfig"));

export { ProjectDefaultConfigArgs, ProjectDefaultConfigState } from "./projectDefaultConfig";
export type ProjectDefaultConfig = import("./projectDefaultConfig").ProjectDefaultConfig;
export const ProjectDefaultConfig: typeof import("./projectDefaultConfig").ProjectDefaultConfig = null as any;
utilities.lazyLoad(exports, ["ProjectDefaultConfig"], () => require("./projectDefaultConfig"));

export { TenantArgs, TenantState } from "./tenant";
export type Tenant = import("./tenant").Tenant;
export const Tenant: typeof import("./tenant").Tenant = null as any;
utilities.lazyLoad(exports, ["Tenant"], () => require("./tenant"));

export { TenantDefaultSupportedIdpConfigArgs, TenantDefaultSupportedIdpConfigState } from "./tenantDefaultSupportedIdpConfig";
export type TenantDefaultSupportedIdpConfig = import("./tenantDefaultSupportedIdpConfig").TenantDefaultSupportedIdpConfig;
export const TenantDefaultSupportedIdpConfig: typeof import("./tenantDefaultSupportedIdpConfig").TenantDefaultSupportedIdpConfig = null as any;
utilities.lazyLoad(exports, ["TenantDefaultSupportedIdpConfig"], () => require("./tenantDefaultSupportedIdpConfig"));

export { TenantInboundSamlConfigArgs, TenantInboundSamlConfigState } from "./tenantInboundSamlConfig";
export type TenantInboundSamlConfig = import("./tenantInboundSamlConfig").TenantInboundSamlConfig;
export const TenantInboundSamlConfig: typeof import("./tenantInboundSamlConfig").TenantInboundSamlConfig = null as any;
utilities.lazyLoad(exports, ["TenantInboundSamlConfig"], () => require("./tenantInboundSamlConfig"));

export { TenantOauthIdpConfigArgs, TenantOauthIdpConfigState } from "./tenantOauthIdpConfig";
export type TenantOauthIdpConfig = import("./tenantOauthIdpConfig").TenantOauthIdpConfig;
export const TenantOauthIdpConfig: typeof import("./tenantOauthIdpConfig").TenantOauthIdpConfig = null as any;
utilities.lazyLoad(exports, ["TenantOauthIdpConfig"], () => require("./tenantOauthIdpConfig"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:identityplatform/config:Config":
                return new Config(name, <any>undefined, { urn })
            case "gcp:identityplatform/defaultSupportedIdpConfig:DefaultSupportedIdpConfig":
                return new DefaultSupportedIdpConfig(name, <any>undefined, { urn })
            case "gcp:identityplatform/inboundSamlConfig:InboundSamlConfig":
                return new InboundSamlConfig(name, <any>undefined, { urn })
            case "gcp:identityplatform/oauthIdpConfig:OauthIdpConfig":
                return new OauthIdpConfig(name, <any>undefined, { urn })
            case "gcp:identityplatform/projectDefaultConfig:ProjectDefaultConfig":
                return new ProjectDefaultConfig(name, <any>undefined, { urn })
            case "gcp:identityplatform/tenant:Tenant":
                return new Tenant(name, <any>undefined, { urn })
            case "gcp:identityplatform/tenantDefaultSupportedIdpConfig:TenantDefaultSupportedIdpConfig":
                return new TenantDefaultSupportedIdpConfig(name, <any>undefined, { urn })
            case "gcp:identityplatform/tenantInboundSamlConfig:TenantInboundSamlConfig":
                return new TenantInboundSamlConfig(name, <any>undefined, { urn })
            case "gcp:identityplatform/tenantOauthIdpConfig:TenantOauthIdpConfig":
                return new TenantOauthIdpConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "identityplatform/config", _module)
pulumi.runtime.registerResourceModule("gcp", "identityplatform/defaultSupportedIdpConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "identityplatform/inboundSamlConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "identityplatform/oauthIdpConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "identityplatform/projectDefaultConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "identityplatform/tenant", _module)
pulumi.runtime.registerResourceModule("gcp", "identityplatform/tenantDefaultSupportedIdpConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "identityplatform/tenantInboundSamlConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "identityplatform/tenantOauthIdpConfig", _module)
