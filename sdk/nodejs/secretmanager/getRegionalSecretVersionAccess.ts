// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Get the value from a Secret Manager regional secret version. This is similar to the gcp.secretmanager.RegionalSecretVersion datasource, but it only requires the [Secret Manager Secret Accessor](https://cloud.google.com/secret-manager/docs/access-control#secretmanager.secretAccessor) role. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/regional-secrets-overview) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.locations.secrets.versions/access).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const latest = gcp.secretmanager.getRegionalSecretVersionAccess({
 *     secret: "my-secret",
 *     location: "us-central1",
 * });
 * ```
 */
export function getRegionalSecretVersionAccess(args: GetRegionalSecretVersionAccessArgs, opts?: pulumi.InvokeOptions): Promise<GetRegionalSecretVersionAccessResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:secretmanager/getRegionalSecretVersionAccess:getRegionalSecretVersionAccess", {
        "isSecretDataBase64": args.isSecretDataBase64,
        "location": args.location,
        "project": args.project,
        "secret": args.secret,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegionalSecretVersionAccess.
 */
export interface GetRegionalSecretVersionAccessArgs {
    /**
     * If set to 'true', the secret data is
     * expected to be base64-encoded string.
     */
    isSecretDataBase64?: boolean;
    /**
     * Location of Secret Manager regional secret resource.
     * It must be provided when the `secret` field provided consists of only the name of the regional secret.
     */
    location?: string;
    /**
     * The project to get the secret version for. If it
     * is not provided, the provider project is used.
     */
    project?: string;
    /**
     * The regional secret to get the secret version for.
     * This can be either the reference of the regional secret as in `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}` or only the name of the regional secret as in `{{secret_id}}`. If only the name of the regional secret is provided, the location must also be provided.
     */
    secret: string;
    /**
     * The version of the regional secret to get. If it
     * is not provided, the latest version is retrieved.
     */
    version?: string;
}

/**
 * A collection of values returned by getRegionalSecretVersionAccess.
 */
export interface GetRegionalSecretVersionAccessResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isSecretDataBase64?: boolean;
    readonly location: string;
    /**
     * The resource name of the regional SecretVersion. Format:
     * `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
     */
    readonly name: string;
    readonly project: string;
    readonly secret: string;
    /**
     * The secret data. No larger than 64KiB.
     */
    readonly secretData: string;
    readonly version: string;
}
/**
 * Get the value from a Secret Manager regional secret version. This is similar to the gcp.secretmanager.RegionalSecretVersion datasource, but it only requires the [Secret Manager Secret Accessor](https://cloud.google.com/secret-manager/docs/access-control#secretmanager.secretAccessor) role. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/regional-secrets-overview) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.locations.secrets.versions/access).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const latest = gcp.secretmanager.getRegionalSecretVersionAccess({
 *     secret: "my-secret",
 *     location: "us-central1",
 * });
 * ```
 */
export function getRegionalSecretVersionAccessOutput(args: GetRegionalSecretVersionAccessOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRegionalSecretVersionAccessResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:secretmanager/getRegionalSecretVersionAccess:getRegionalSecretVersionAccess", {
        "isSecretDataBase64": args.isSecretDataBase64,
        "location": args.location,
        "project": args.project,
        "secret": args.secret,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegionalSecretVersionAccess.
 */
export interface GetRegionalSecretVersionAccessOutputArgs {
    /**
     * If set to 'true', the secret data is
     * expected to be base64-encoded string.
     */
    isSecretDataBase64?: pulumi.Input<boolean>;
    /**
     * Location of Secret Manager regional secret resource.
     * It must be provided when the `secret` field provided consists of only the name of the regional secret.
     */
    location?: pulumi.Input<string>;
    /**
     * The project to get the secret version for. If it
     * is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The regional secret to get the secret version for.
     * This can be either the reference of the regional secret as in `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}` or only the name of the regional secret as in `{{secret_id}}`. If only the name of the regional secret is provided, the location must also be provided.
     */
    secret: pulumi.Input<string>;
    /**
     * The version of the regional secret to get. If it
     * is not provided, the latest version is retrieved.
     */
    version?: pulumi.Input<string>;
}
