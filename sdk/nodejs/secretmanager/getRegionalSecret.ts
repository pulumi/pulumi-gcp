// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to get information about a Secret Manager Regional Secret
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const secretDatasource = gcp.secretmanager.getRegionalSecret({
 *     secretId: "secretname",
 *     location: "us-central1",
 * });
 * ```
 */
export function getRegionalSecret(args: GetRegionalSecretArgs, opts?: pulumi.InvokeOptions): Promise<GetRegionalSecretResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:secretmanager/getRegionalSecret:getRegionalSecret", {
        "location": args.location,
        "project": args.project,
        "secretId": args.secretId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegionalSecret.
 */
export interface GetRegionalSecretArgs {
    /**
     * The location of the regional secret. eg us-central1
     */
    location: string;
    /**
     * The ID of the project in which the resource belongs.
     */
    project?: string;
    /**
     * The name of the regional secret.
     */
    secretId: string;
}

/**
 * A collection of values returned by getRegionalSecret.
 */
export interface GetRegionalSecretResult {
    readonly annotations: {[key: string]: string};
    readonly createTime: string;
    readonly customerManagedEncryptions: outputs.secretmanager.GetRegionalSecretCustomerManagedEncryption[];
    readonly effectiveAnnotations: {[key: string]: string};
    readonly effectiveLabels: {[key: string]: string};
    readonly expireTime: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly labels: {[key: string]: string};
    readonly location: string;
    readonly name: string;
    readonly project?: string;
    readonly pulumiLabels: {[key: string]: string};
    readonly rotations: outputs.secretmanager.GetRegionalSecretRotation[];
    readonly secretId: string;
    readonly topics: outputs.secretmanager.GetRegionalSecretTopic[];
    readonly ttl: string;
    readonly versionAliases: {[key: string]: string};
    readonly versionDestroyTtl: string;
}
/**
 * Use this data source to get information about a Secret Manager Regional Secret
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const secretDatasource = gcp.secretmanager.getRegionalSecret({
 *     secretId: "secretname",
 *     location: "us-central1",
 * });
 * ```
 */
export function getRegionalSecretOutput(args: GetRegionalSecretOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRegionalSecretResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:secretmanager/getRegionalSecret:getRegionalSecret", {
        "location": args.location,
        "project": args.project,
        "secretId": args.secretId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegionalSecret.
 */
export interface GetRegionalSecretOutputArgs {
    /**
     * The location of the regional secret. eg us-central1
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     */
    project?: pulumi.Input<string>;
    /**
     * The name of the regional secret.
     */
    secretId: pulumi.Input<string>;
}
