// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetRegionalSecretArgs, GetRegionalSecretResult, GetRegionalSecretOutputArgs } from "./getRegionalSecret";
export const getRegionalSecret: typeof import("./getRegionalSecret").getRegionalSecret = null as any;
export const getRegionalSecretOutput: typeof import("./getRegionalSecret").getRegionalSecretOutput = null as any;
utilities.lazyLoad(exports, ["getRegionalSecret","getRegionalSecretOutput"], () => require("./getRegionalSecret"));

export { GetRegionalSecretIamPolicyArgs, GetRegionalSecretIamPolicyResult, GetRegionalSecretIamPolicyOutputArgs } from "./getRegionalSecretIamPolicy";
export const getRegionalSecretIamPolicy: typeof import("./getRegionalSecretIamPolicy").getRegionalSecretIamPolicy = null as any;
export const getRegionalSecretIamPolicyOutput: typeof import("./getRegionalSecretIamPolicy").getRegionalSecretIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRegionalSecretIamPolicy","getRegionalSecretIamPolicyOutput"], () => require("./getRegionalSecretIamPolicy"));

export { GetRegionalSecretVersionArgs, GetRegionalSecretVersionResult, GetRegionalSecretVersionOutputArgs } from "./getRegionalSecretVersion";
export const getRegionalSecretVersion: typeof import("./getRegionalSecretVersion").getRegionalSecretVersion = null as any;
export const getRegionalSecretVersionOutput: typeof import("./getRegionalSecretVersion").getRegionalSecretVersionOutput = null as any;
utilities.lazyLoad(exports, ["getRegionalSecretVersion","getRegionalSecretVersionOutput"], () => require("./getRegionalSecretVersion"));

export { GetSecretArgs, GetSecretResult, GetSecretOutputArgs } from "./getSecret";
export const getSecret: typeof import("./getSecret").getSecret = null as any;
export const getSecretOutput: typeof import("./getSecret").getSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecret","getSecretOutput"], () => require("./getSecret"));

export { GetSecretIamPolicyArgs, GetSecretIamPolicyResult, GetSecretIamPolicyOutputArgs } from "./getSecretIamPolicy";
export const getSecretIamPolicy: typeof import("./getSecretIamPolicy").getSecretIamPolicy = null as any;
export const getSecretIamPolicyOutput: typeof import("./getSecretIamPolicy").getSecretIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecretIamPolicy","getSecretIamPolicyOutput"], () => require("./getSecretIamPolicy"));

export { GetSecretVersionArgs, GetSecretVersionResult, GetSecretVersionOutputArgs } from "./getSecretVersion";
export const getSecretVersion: typeof import("./getSecretVersion").getSecretVersion = null as any;
export const getSecretVersionOutput: typeof import("./getSecretVersion").getSecretVersionOutput = null as any;
utilities.lazyLoad(exports, ["getSecretVersion","getSecretVersionOutput"], () => require("./getSecretVersion"));

export { GetSecretVersionAccessArgs, GetSecretVersionAccessResult, GetSecretVersionAccessOutputArgs } from "./getSecretVersionAccess";
export const getSecretVersionAccess: typeof import("./getSecretVersionAccess").getSecretVersionAccess = null as any;
export const getSecretVersionAccessOutput: typeof import("./getSecretVersionAccess").getSecretVersionAccessOutput = null as any;
utilities.lazyLoad(exports, ["getSecretVersionAccess","getSecretVersionAccessOutput"], () => require("./getSecretVersionAccess"));

export { GetSecretsArgs, GetSecretsResult, GetSecretsOutputArgs } from "./getSecrets";
export const getSecrets: typeof import("./getSecrets").getSecrets = null as any;
export const getSecretsOutput: typeof import("./getSecrets").getSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getSecrets","getSecretsOutput"], () => require("./getSecrets"));

export { RegionalSecretArgs, RegionalSecretState } from "./regionalSecret";
export type RegionalSecret = import("./regionalSecret").RegionalSecret;
export const RegionalSecret: typeof import("./regionalSecret").RegionalSecret = null as any;
utilities.lazyLoad(exports, ["RegionalSecret"], () => require("./regionalSecret"));

export { RegionalSecretIamBindingArgs, RegionalSecretIamBindingState } from "./regionalSecretIamBinding";
export type RegionalSecretIamBinding = import("./regionalSecretIamBinding").RegionalSecretIamBinding;
export const RegionalSecretIamBinding: typeof import("./regionalSecretIamBinding").RegionalSecretIamBinding = null as any;
utilities.lazyLoad(exports, ["RegionalSecretIamBinding"], () => require("./regionalSecretIamBinding"));

export { RegionalSecretIamMemberArgs, RegionalSecretIamMemberState } from "./regionalSecretIamMember";
export type RegionalSecretIamMember = import("./regionalSecretIamMember").RegionalSecretIamMember;
export const RegionalSecretIamMember: typeof import("./regionalSecretIamMember").RegionalSecretIamMember = null as any;
utilities.lazyLoad(exports, ["RegionalSecretIamMember"], () => require("./regionalSecretIamMember"));

export { RegionalSecretIamPolicyArgs, RegionalSecretIamPolicyState } from "./regionalSecretIamPolicy";
export type RegionalSecretIamPolicy = import("./regionalSecretIamPolicy").RegionalSecretIamPolicy;
export const RegionalSecretIamPolicy: typeof import("./regionalSecretIamPolicy").RegionalSecretIamPolicy = null as any;
utilities.lazyLoad(exports, ["RegionalSecretIamPolicy"], () => require("./regionalSecretIamPolicy"));

export { RegionalSecretVersionArgs, RegionalSecretVersionState } from "./regionalSecretVersion";
export type RegionalSecretVersion = import("./regionalSecretVersion").RegionalSecretVersion;
export const RegionalSecretVersion: typeof import("./regionalSecretVersion").RegionalSecretVersion = null as any;
utilities.lazyLoad(exports, ["RegionalSecretVersion"], () => require("./regionalSecretVersion"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { SecretIamBindingArgs, SecretIamBindingState } from "./secretIamBinding";
export type SecretIamBinding = import("./secretIamBinding").SecretIamBinding;
export const SecretIamBinding: typeof import("./secretIamBinding").SecretIamBinding = null as any;
utilities.lazyLoad(exports, ["SecretIamBinding"], () => require("./secretIamBinding"));

export { SecretIamMemberArgs, SecretIamMemberState } from "./secretIamMember";
export type SecretIamMember = import("./secretIamMember").SecretIamMember;
export const SecretIamMember: typeof import("./secretIamMember").SecretIamMember = null as any;
utilities.lazyLoad(exports, ["SecretIamMember"], () => require("./secretIamMember"));

export { SecretIamPolicyArgs, SecretIamPolicyState } from "./secretIamPolicy";
export type SecretIamPolicy = import("./secretIamPolicy").SecretIamPolicy;
export const SecretIamPolicy: typeof import("./secretIamPolicy").SecretIamPolicy = null as any;
utilities.lazyLoad(exports, ["SecretIamPolicy"], () => require("./secretIamPolicy"));

export { SecretVersionArgs, SecretVersionState } from "./secretVersion";
export type SecretVersion = import("./secretVersion").SecretVersion;
export const SecretVersion: typeof import("./secretVersion").SecretVersion = null as any;
utilities.lazyLoad(exports, ["SecretVersion"], () => require("./secretVersion"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:secretmanager/regionalSecret:RegionalSecret":
                return new RegionalSecret(name, <any>undefined, { urn })
            case "gcp:secretmanager/regionalSecretIamBinding:RegionalSecretIamBinding":
                return new RegionalSecretIamBinding(name, <any>undefined, { urn })
            case "gcp:secretmanager/regionalSecretIamMember:RegionalSecretIamMember":
                return new RegionalSecretIamMember(name, <any>undefined, { urn })
            case "gcp:secretmanager/regionalSecretIamPolicy:RegionalSecretIamPolicy":
                return new RegionalSecretIamPolicy(name, <any>undefined, { urn })
            case "gcp:secretmanager/regionalSecretVersion:RegionalSecretVersion":
                return new RegionalSecretVersion(name, <any>undefined, { urn })
            case "gcp:secretmanager/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "gcp:secretmanager/secretIamBinding:SecretIamBinding":
                return new SecretIamBinding(name, <any>undefined, { urn })
            case "gcp:secretmanager/secretIamMember:SecretIamMember":
                return new SecretIamMember(name, <any>undefined, { urn })
            case "gcp:secretmanager/secretIamPolicy:SecretIamPolicy":
                return new SecretIamPolicy(name, <any>undefined, { urn })
            case "gcp:secretmanager/secretVersion:SecretVersion":
                return new SecretVersion(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "secretmanager/regionalSecret", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/regionalSecretIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/regionalSecretIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/regionalSecretIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/regionalSecretVersion", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/secret", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/secretIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/secretIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/secretIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/secretVersion", _module)
