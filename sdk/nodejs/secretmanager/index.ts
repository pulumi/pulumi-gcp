// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetSecretArgs, GetSecretResult, GetSecretOutputArgs } from "./getSecret";
export const getSecret: typeof import("./getSecret").getSecret = null as any;
export const getSecretOutput: typeof import("./getSecret").getSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecret","getSecretOutput"], () => require("./getSecret"));

export { GetSecretVersionArgs, GetSecretVersionResult, GetSecretVersionOutputArgs } from "./getSecretVersion";
export const getSecretVersion: typeof import("./getSecretVersion").getSecretVersion = null as any;
export const getSecretVersionOutput: typeof import("./getSecretVersion").getSecretVersionOutput = null as any;
utilities.lazyLoad(exports, ["getSecretVersion","getSecretVersionOutput"], () => require("./getSecretVersion"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { SecretIamBindingArgs, SecretIamBindingState } from "./secretIamBinding";
export type SecretIamBinding = import("./secretIamBinding").SecretIamBinding;
export const SecretIamBinding: typeof import("./secretIamBinding").SecretIamBinding = null as any;
utilities.lazyLoad(exports, ["SecretIamBinding"], () => require("./secretIamBinding"));

export { SecretIamMemberArgs, SecretIamMemberState } from "./secretIamMember";
export type SecretIamMember = import("./secretIamMember").SecretIamMember;
export const SecretIamMember: typeof import("./secretIamMember").SecretIamMember = null as any;
utilities.lazyLoad(exports, ["SecretIamMember"], () => require("./secretIamMember"));

export { SecretIamPolicyArgs, SecretIamPolicyState } from "./secretIamPolicy";
export type SecretIamPolicy = import("./secretIamPolicy").SecretIamPolicy;
export const SecretIamPolicy: typeof import("./secretIamPolicy").SecretIamPolicy = null as any;
utilities.lazyLoad(exports, ["SecretIamPolicy"], () => require("./secretIamPolicy"));

export { SecretVersionArgs, SecretVersionState } from "./secretVersion";
export type SecretVersion = import("./secretVersion").SecretVersion;
export const SecretVersion: typeof import("./secretVersion").SecretVersion = null as any;
utilities.lazyLoad(exports, ["SecretVersion"], () => require("./secretVersion"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:secretmanager/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "gcp:secretmanager/secretIamBinding:SecretIamBinding":
                return new SecretIamBinding(name, <any>undefined, { urn })
            case "gcp:secretmanager/secretIamMember:SecretIamMember":
                return new SecretIamMember(name, <any>undefined, { urn })
            case "gcp:secretmanager/secretIamPolicy:SecretIamPolicy":
                return new SecretIamPolicy(name, <any>undefined, { urn })
            case "gcp:secretmanager/secretVersion:SecretVersion":
                return new SecretVersion(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "secretmanager/secret", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/secretIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/secretIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/secretIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "secretmanager/secretVersion", _module)
