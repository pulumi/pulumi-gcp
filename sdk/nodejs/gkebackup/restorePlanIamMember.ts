// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Represents a Restore Plan instance.
 *
 * To get more information about RestorePlan, see:
 *
 * * [API documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/projects.locations.restorePlans)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke)
 *
 * ## Example Usage
 *
 * ### Gkebackup Restoreplan All Namespaces
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     name: "restore-all-ns-cluster",
 *     location: "us-central1",
 *     initialNodeCount: 1,
 *     workloadIdentityConfig: {
 *         workloadPool: "my-project-name.svc.id.goog",
 *     },
 *     addonsConfig: {
 *         gkeBackupAgentConfig: {
 *             enabled: true,
 *         },
 *     },
 *     deletionProtection: "",
 *     network: "default",
 *     subnetwork: "default",
 * });
 * const basic = new gcp.gkebackup.BackupPlan("basic", {
 *     name: "restore-all-ns",
 *     cluster: primary.id,
 *     location: "us-central1",
 *     backupConfig: {
 *         includeVolumeData: true,
 *         includeSecrets: true,
 *         allNamespaces: true,
 *     },
 * });
 * const allNs = new gcp.gkebackup.RestorePlan("all_ns", {
 *     name: "restore-all-ns",
 *     location: "us-central1",
 *     backupPlan: basic.id,
 *     cluster: primary.id,
 *     restoreConfig: {
 *         allNamespaces: true,
 *         namespacedResourceRestoreMode: "FAIL_ON_CONFLICT",
 *         volumeDataRestorePolicy: "RESTORE_VOLUME_DATA_FROM_BACKUP",
 *         clusterResourceRestoreScope: {
 *             allGroupKinds: true,
 *         },
 *         clusterResourceConflictPolicy: "USE_EXISTING_VERSION",
 *     },
 * });
 * ```
 * ### Gkebackup Restoreplan Rollback Namespace
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     name: "rollback-ns-cluster",
 *     location: "us-central1",
 *     initialNodeCount: 1,
 *     workloadIdentityConfig: {
 *         workloadPool: "my-project-name.svc.id.goog",
 *     },
 *     addonsConfig: {
 *         gkeBackupAgentConfig: {
 *             enabled: true,
 *         },
 *     },
 *     deletionProtection: "",
 *     network: "default",
 *     subnetwork: "default",
 * });
 * const basic = new gcp.gkebackup.BackupPlan("basic", {
 *     name: "rollback-ns",
 *     cluster: primary.id,
 *     location: "us-central1",
 *     backupConfig: {
 *         includeVolumeData: true,
 *         includeSecrets: true,
 *         allNamespaces: true,
 *     },
 * });
 * const rollbackNs = new gcp.gkebackup.RestorePlan("rollback_ns", {
 *     name: "rollback-ns-rp",
 *     location: "us-central1",
 *     backupPlan: basic.id,
 *     cluster: primary.id,
 *     restoreConfig: {
 *         selectedNamespaces: {
 *             namespaces: ["my-ns"],
 *         },
 *         namespacedResourceRestoreMode: "DELETE_AND_RESTORE",
 *         volumeDataRestorePolicy: "RESTORE_VOLUME_DATA_FROM_BACKUP",
 *         clusterResourceRestoreScope: {
 *             selectedGroupKinds: [
 *                 {
 *                     resourceGroup: "apiextension.k8s.io",
 *                     resourceKind: "CustomResourceDefinition",
 *                 },
 *                 {
 *                     resourceGroup: "storage.k8s.io",
 *                     resourceKind: "StorageClass",
 *                 },
 *             ],
 *         },
 *         clusterResourceConflictPolicy: "USE_EXISTING_VERSION",
 *     },
 * });
 * ```
 * ### Gkebackup Restoreplan Protected Application
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     name: "rollback-app-cluster",
 *     location: "us-central1",
 *     initialNodeCount: 1,
 *     workloadIdentityConfig: {
 *         workloadPool: "my-project-name.svc.id.goog",
 *     },
 *     addonsConfig: {
 *         gkeBackupAgentConfig: {
 *             enabled: true,
 *         },
 *     },
 *     deletionProtection: "",
 *     network: "default",
 *     subnetwork: "default",
 * });
 * const basic = new gcp.gkebackup.BackupPlan("basic", {
 *     name: "rollback-app",
 *     cluster: primary.id,
 *     location: "us-central1",
 *     backupConfig: {
 *         includeVolumeData: true,
 *         includeSecrets: true,
 *         allNamespaces: true,
 *     },
 * });
 * const rollbackApp = new gcp.gkebackup.RestorePlan("rollback_app", {
 *     name: "rollback-app-rp",
 *     location: "us-central1",
 *     backupPlan: basic.id,
 *     cluster: primary.id,
 *     restoreConfig: {
 *         selectedApplications: {
 *             namespacedNames: [{
 *                 name: "my-app",
 *                 namespace: "my-ns",
 *             }],
 *         },
 *         namespacedResourceRestoreMode: "DELETE_AND_RESTORE",
 *         volumeDataRestorePolicy: "REUSE_VOLUME_HANDLE_FROM_BACKUP",
 *         clusterResourceRestoreScope: {
 *             noGroupKinds: true,
 *         },
 *     },
 * });
 * ```
 * ### Gkebackup Restoreplan All Cluster Resources
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     name: "all-groupkinds-cluster",
 *     location: "us-central1",
 *     initialNodeCount: 1,
 *     workloadIdentityConfig: {
 *         workloadPool: "my-project-name.svc.id.goog",
 *     },
 *     addonsConfig: {
 *         gkeBackupAgentConfig: {
 *             enabled: true,
 *         },
 *     },
 *     deletionProtection: "",
 *     network: "default",
 *     subnetwork: "default",
 * });
 * const basic = new gcp.gkebackup.BackupPlan("basic", {
 *     name: "all-groupkinds",
 *     cluster: primary.id,
 *     location: "us-central1",
 *     backupConfig: {
 *         includeVolumeData: true,
 *         includeSecrets: true,
 *         allNamespaces: true,
 *     },
 * });
 * const allClusterResources = new gcp.gkebackup.RestorePlan("all_cluster_resources", {
 *     name: "all-groupkinds-rp",
 *     location: "us-central1",
 *     backupPlan: basic.id,
 *     cluster: primary.id,
 *     restoreConfig: {
 *         noNamespaces: true,
 *         namespacedResourceRestoreMode: "FAIL_ON_CONFLICT",
 *         clusterResourceRestoreScope: {
 *             allGroupKinds: true,
 *         },
 *         clusterResourceConflictPolicy: "USE_EXISTING_VERSION",
 *     },
 * });
 * ```
 * ### Gkebackup Restoreplan Rename Namespace
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     name: "rename-ns-cluster",
 *     location: "us-central1",
 *     initialNodeCount: 1,
 *     workloadIdentityConfig: {
 *         workloadPool: "my-project-name.svc.id.goog",
 *     },
 *     addonsConfig: {
 *         gkeBackupAgentConfig: {
 *             enabled: true,
 *         },
 *     },
 *     deletionProtection: "",
 *     network: "default",
 *     subnetwork: "default",
 * });
 * const basic = new gcp.gkebackup.BackupPlan("basic", {
 *     name: "rename-ns",
 *     cluster: primary.id,
 *     location: "us-central1",
 *     backupConfig: {
 *         includeVolumeData: true,
 *         includeSecrets: true,
 *         allNamespaces: true,
 *     },
 * });
 * const renameNs = new gcp.gkebackup.RestorePlan("rename_ns", {
 *     name: "rename-ns-rp",
 *     location: "us-central1",
 *     backupPlan: basic.id,
 *     cluster: primary.id,
 *     restoreConfig: {
 *         selectedNamespaces: {
 *             namespaces: ["ns1"],
 *         },
 *         namespacedResourceRestoreMode: "FAIL_ON_CONFLICT",
 *         volumeDataRestorePolicy: "REUSE_VOLUME_HANDLE_FROM_BACKUP",
 *         clusterResourceRestoreScope: {
 *             noGroupKinds: true,
 *         },
 *         transformationRules: [
 *             {
 *                 description: "rename namespace from ns1 to ns2",
 *                 resourceFilter: {
 *                     groupKinds: [{
 *                         resourceKind: "Namespace",
 *                     }],
 *                     jsonPath: ".metadata[?(@.name == 'ns1')]",
 *                 },
 *                 fieldActions: [{
 *                     op: "REPLACE",
 *                     path: "/metadata/name",
 *                     value: "ns2",
 *                 }],
 *             },
 *             {
 *                 description: "move all resources from ns1 to ns2",
 *                 resourceFilter: {
 *                     namespaces: ["ns1"],
 *                 },
 *                 fieldActions: [{
 *                     op: "REPLACE",
 *                     path: "/metadata/namespace",
 *                     value: "ns2",
 *                 }],
 *             },
 *         ],
 *     },
 * });
 * ```
 * ### Gkebackup Restoreplan Second Transformation
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     name: "transform-rule-cluster",
 *     location: "us-central1",
 *     initialNodeCount: 1,
 *     workloadIdentityConfig: {
 *         workloadPool: "my-project-name.svc.id.goog",
 *     },
 *     addonsConfig: {
 *         gkeBackupAgentConfig: {
 *             enabled: true,
 *         },
 *     },
 *     deletionProtection: "",
 *     network: "default",
 *     subnetwork: "default",
 * });
 * const basic = new gcp.gkebackup.BackupPlan("basic", {
 *     name: "transform-rule",
 *     cluster: primary.id,
 *     location: "us-central1",
 *     backupConfig: {
 *         includeVolumeData: true,
 *         includeSecrets: true,
 *         allNamespaces: true,
 *     },
 * });
 * const transformRule = new gcp.gkebackup.RestorePlan("transform_rule", {
 *     name: "transform-rule-rp",
 *     description: "copy nginx env variables",
 *     labels: {
 *         app: "nginx",
 *     },
 *     location: "us-central1",
 *     backupPlan: basic.id,
 *     cluster: primary.id,
 *     restoreConfig: {
 *         excludedNamespaces: {
 *             namespaces: ["my-ns"],
 *         },
 *         namespacedResourceRestoreMode: "DELETE_AND_RESTORE",
 *         volumeDataRestorePolicy: "RESTORE_VOLUME_DATA_FROM_BACKUP",
 *         clusterResourceRestoreScope: {
 *             excludedGroupKinds: [{
 *                 resourceGroup: "apiextension.k8s.io",
 *                 resourceKind: "CustomResourceDefinition",
 *             }],
 *         },
 *         clusterResourceConflictPolicy: "USE_EXISTING_VERSION",
 *         transformationRules: [{
 *             description: "Copy environment variables from the nginx container to the install init container.",
 *             resourceFilter: {
 *                 groupKinds: [{
 *                     resourceKind: "Pod",
 *                     resourceGroup: "",
 *                 }],
 *                 jsonPath: ".metadata[?(@.name == 'nginx')]",
 *             },
 *             fieldActions: [{
 *                 op: "COPY",
 *                 path: "/spec/initContainers/0/env",
 *                 fromPath: "/spec/containers/0/env",
 *             }],
 *         }],
 *     },
 * });
 * ```
 * ### Gkebackup Restoreplan Gitops Mode
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     name: "gitops-mode-cluster",
 *     location: "us-central1",
 *     initialNodeCount: 1,
 *     workloadIdentityConfig: {
 *         workloadPool: "my-project-name.svc.id.goog",
 *     },
 *     addonsConfig: {
 *         gkeBackupAgentConfig: {
 *             enabled: true,
 *         },
 *     },
 *     deletionProtection: "",
 *     network: "default",
 *     subnetwork: "default",
 * });
 * const basic = new gcp.gkebackup.BackupPlan("basic", {
 *     name: "gitops-mode",
 *     cluster: primary.id,
 *     location: "us-central1",
 *     backupConfig: {
 *         includeVolumeData: true,
 *         includeSecrets: true,
 *         allNamespaces: true,
 *     },
 * });
 * const gitopsMode = new gcp.gkebackup.RestorePlan("gitops_mode", {
 *     name: "gitops-mode",
 *     location: "us-central1",
 *     backupPlan: basic.id,
 *     cluster: primary.id,
 *     restoreConfig: {
 *         allNamespaces: true,
 *         namespacedResourceRestoreMode: "MERGE_SKIP_ON_CONFLICT",
 *         volumeDataRestorePolicy: "RESTORE_VOLUME_DATA_FROM_BACKUP",
 *         clusterResourceRestoreScope: {
 *             allGroupKinds: true,
 *         },
 *         clusterResourceConflictPolicy: "USE_EXISTING_VERSION",
 *     },
 * });
 * ```
 * ### Gkebackup Restoreplan Restore Order
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     name: "restore-order-cluster",
 *     location: "us-central1",
 *     initialNodeCount: 1,
 *     workloadIdentityConfig: {
 *         workloadPool: "my-project-name.svc.id.goog",
 *     },
 *     addonsConfig: {
 *         gkeBackupAgentConfig: {
 *             enabled: true,
 *         },
 *     },
 *     deletionProtection: "",
 *     network: "default",
 *     subnetwork: "default",
 * });
 * const basic = new gcp.gkebackup.BackupPlan("basic", {
 *     name: "restore-order",
 *     cluster: primary.id,
 *     location: "us-central1",
 *     backupConfig: {
 *         includeVolumeData: true,
 *         includeSecrets: true,
 *         allNamespaces: true,
 *     },
 * });
 * const restoreOrder = new gcp.gkebackup.RestorePlan("restore_order", {
 *     name: "restore-order",
 *     location: "us-central1",
 *     backupPlan: basic.id,
 *     cluster: primary.id,
 *     restoreConfig: {
 *         allNamespaces: true,
 *         namespacedResourceRestoreMode: "FAIL_ON_CONFLICT",
 *         volumeDataRestorePolicy: "RESTORE_VOLUME_DATA_FROM_BACKUP",
 *         clusterResourceRestoreScope: {
 *             allGroupKinds: true,
 *         },
 *         clusterResourceConflictPolicy: "USE_EXISTING_VERSION",
 *         restoreOrder: {
 *             groupKindDependencies: [
 *                 {
 *                     satisfying: {
 *                         resourceGroup: "stable.example.com",
 *                         resourceKind: "kindA",
 *                     },
 *                     requiring: {
 *                         resourceGroup: "stable.example.com",
 *                         resourceKind: "kindB",
 *                     },
 *                 },
 *                 {
 *                     satisfying: {
 *                         resourceGroup: "stable.example.com",
 *                         resourceKind: "kindB",
 *                     },
 *                     requiring: {
 *                         resourceGroup: "stable.example.com",
 *                         resourceKind: "kindC",
 *                     },
 *                 },
 *             ],
 *         },
 *     },
 * });
 * ```
 * ### Gkebackup Restoreplan Volume Res
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     name: "volume-res-cluster",
 *     location: "us-central1",
 *     initialNodeCount: 1,
 *     workloadIdentityConfig: {
 *         workloadPool: "my-project-name.svc.id.goog",
 *     },
 *     addonsConfig: {
 *         gkeBackupAgentConfig: {
 *             enabled: true,
 *         },
 *     },
 *     deletionProtection: "",
 *     network: "default",
 *     subnetwork: "default",
 * });
 * const basic = new gcp.gkebackup.BackupPlan("basic", {
 *     name: "volume-res",
 *     cluster: primary.id,
 *     location: "us-central1",
 *     backupConfig: {
 *         includeVolumeData: true,
 *         includeSecrets: true,
 *         allNamespaces: true,
 *     },
 * });
 * const volumeRes = new gcp.gkebackup.RestorePlan("volume_res", {
 *     name: "volume-res",
 *     location: "us-central1",
 *     backupPlan: basic.id,
 *     cluster: primary.id,
 *     restoreConfig: {
 *         allNamespaces: true,
 *         namespacedResourceRestoreMode: "FAIL_ON_CONFLICT",
 *         volumeDataRestorePolicy: "NO_VOLUME_DATA_RESTORATION",
 *         clusterResourceRestoreScope: {
 *             allGroupKinds: true,
 *         },
 *         clusterResourceConflictPolicy: "USE_EXISTING_VERSION",
 *         volumeDataRestorePolicyBindings: [{
 *             policy: "RESTORE_VOLUME_DATA_FROM_BACKUP",
 *             volumeType: "GCE_PERSISTENT_DISK",
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * RestorePlan can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/restorePlans/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, RestorePlan can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember default projects/{{project}}/locations/{{location}}/restorePlans/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember default {{location}}/{{name}}
 * ```
 */
export class RestorePlanIamMember extends pulumi.CustomResource {
    /**
     * Get an existing RestorePlanIamMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RestorePlanIamMemberState, opts?: pulumi.CustomResourceOptions): RestorePlanIamMember {
        return new RestorePlanIamMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember';

    /**
     * Returns true if the given object is an instance of RestorePlanIamMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RestorePlanIamMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RestorePlanIamMember.__pulumiType;
    }

    public readonly condition!: pulumi.Output<outputs.gkebackup.RestorePlanIamMemberCondition | undefined>;
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The region of the Restore Plan.
     */
    public readonly location!: pulumi.Output<string>;
    public readonly member!: pulumi.Output<string>;
    /**
     * The full name of the BackupPlan Resource.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public readonly role!: pulumi.Output<string>;

    /**
     * Create a RestorePlanIamMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RestorePlanIamMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RestorePlanIamMemberArgs | RestorePlanIamMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RestorePlanIamMemberState | undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["member"] = state ? state.member : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
        } else {
            const args = argsOrState as RestorePlanIamMemberArgs | undefined;
            if ((!args || args.member === undefined) && !opts.urn) {
                throw new Error("Missing required property 'member'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["member"] = args ? args.member : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RestorePlanIamMember.__pulumiType, name, resourceInputs, opts, false /*remote*/);
    }
}

/**
 * Input properties used for looking up and filtering RestorePlanIamMember resources.
 */
export interface RestorePlanIamMemberState {
    condition?: pulumi.Input<inputs.gkebackup.RestorePlanIamMemberCondition>;
    etag?: pulumi.Input<string>;
    /**
     * The region of the Restore Plan.
     */
    location?: pulumi.Input<string>;
    member?: pulumi.Input<string>;
    /**
     * The full name of the BackupPlan Resource.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RestorePlanIamMember resource.
 */
export interface RestorePlanIamMemberArgs {
    condition?: pulumi.Input<inputs.gkebackup.RestorePlanIamMemberCondition>;
    /**
     * The region of the Restore Plan.
     */
    location?: pulumi.Input<string>;
    member: pulumi.Input<string>;
    /**
     * The full name of the BackupPlan Resource.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    role: pulumi.Input<string>;
}
