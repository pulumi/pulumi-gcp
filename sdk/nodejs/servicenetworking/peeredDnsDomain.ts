// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows management of a single peered DNS domain for an existing Google Cloud Platform project.
 *
 * When using Google Cloud DNS to manage internal DNS, create peered DNS domains to make your DNS available to services like Google Cloud Build.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const name = new gcp.servicenetworking.PeeredDnsDomain("name", {
 *     dnsSuffix: "example.com.",
 *     network: "default",
 *     project: "1e+07",
 *     service: "peering-service",
 * });
 * ```
 *
 * ## Import
 *
 * Project peered DNS domains can be imported using the `service`, `project`, `network` and `name`, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain my_domain services/{service}/projects/{project}/global/networks/{network}/peeredDnsDomains/{name}
 * ```
 *
 *  Where- `service` is the service connection, defaults to `servicenetworking.googleapis.com`. - `project` is the producer project name. - `network` is the consumer network name. - `name` is the name of your peered DNS domain.
 */
export class PeeredDnsDomain extends pulumi.CustomResource {
    /**
     * Get an existing PeeredDnsDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PeeredDnsDomainState, opts?: pulumi.CustomResourceOptions): PeeredDnsDomain {
        return new PeeredDnsDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain';

    /**
     * Returns true if the given object is an instance of PeeredDnsDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PeeredDnsDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PeeredDnsDomain.__pulumiType;
    }

    /**
     * The DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
     */
    public readonly dnsSuffix!: pulumi.Output<string>;
    /**
     * Internal name used for the peered DNS domain.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The network in the consumer project.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * an identifier for the resource with format `services/{{service}}/projects/{{project}}/global/networks/{{network}}`
     */
    public /*out*/ readonly parent!: pulumi.Output<string>;
    /**
     * The producer project number. If not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Private service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
     */
    public readonly service!: pulumi.Output<string | undefined>;

    /**
     * Create a PeeredDnsDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PeeredDnsDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PeeredDnsDomainArgs | PeeredDnsDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PeeredDnsDomainState | undefined;
            resourceInputs["dnsSuffix"] = state ? state.dnsSuffix : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
        } else {
            const args = argsOrState as PeeredDnsDomainArgs | undefined;
            if ((!args || args.dnsSuffix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsSuffix'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            resourceInputs["dnsSuffix"] = args ? args.dnsSuffix : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["parent"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PeeredDnsDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PeeredDnsDomain resources.
 */
export interface PeeredDnsDomainState {
    /**
     * The DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
     */
    dnsSuffix?: pulumi.Input<string>;
    /**
     * Internal name used for the peered DNS domain.
     */
    name?: pulumi.Input<string>;
    /**
     * The network in the consumer project.
     */
    network?: pulumi.Input<string>;
    /**
     * an identifier for the resource with format `services/{{service}}/projects/{{project}}/global/networks/{{network}}`
     */
    parent?: pulumi.Input<string>;
    /**
     * The producer project number. If not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Private service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
     */
    service?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PeeredDnsDomain resource.
 */
export interface PeeredDnsDomainArgs {
    /**
     * The DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
     */
    dnsSuffix: pulumi.Input<string>;
    /**
     * Internal name used for the peered DNS domain.
     */
    name?: pulumi.Input<string>;
    /**
     * The network in the consumer project.
     */
    network: pulumi.Input<string>;
    /**
     * The producer project number. If not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Private service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
     */
    service?: pulumi.Input<string>;
}
