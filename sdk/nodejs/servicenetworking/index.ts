// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { GetPeeredDnsDomainArgs, GetPeeredDnsDomainResult, GetPeeredDnsDomainOutputArgs } from "./getPeeredDnsDomain";
export const getPeeredDnsDomain: typeof import("./getPeeredDnsDomain").getPeeredDnsDomain = null as any;
export const getPeeredDnsDomainOutput: typeof import("./getPeeredDnsDomain").getPeeredDnsDomainOutput = null as any;
utilities.lazyLoad(exports, ["getPeeredDnsDomain","getPeeredDnsDomainOutput"], () => require("./getPeeredDnsDomain"));

export { PeeredDnsDomainArgs, PeeredDnsDomainState } from "./peeredDnsDomain";
export type PeeredDnsDomain = import("./peeredDnsDomain").PeeredDnsDomain;
export const PeeredDnsDomain: typeof import("./peeredDnsDomain").PeeredDnsDomain = null as any;
utilities.lazyLoad(exports, ["PeeredDnsDomain"], () => require("./peeredDnsDomain"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:servicenetworking/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain":
                return new PeeredDnsDomain(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "servicenetworking/connection", _module)
pulumi.runtime.registerResourceModule("gcp", "servicenetworking/peeredDnsDomain", _module)
