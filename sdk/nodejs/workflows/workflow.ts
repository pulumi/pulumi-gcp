// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Workflow program to be executed by Workflows.
 *
 * To get more information about Workflow, see:
 *
 * * [API documentation](https://cloud.google.com/workflows/docs/reference/rest/v1/projects.locations.workflows)
 * * How-to Guides
 *     * [Managing Workflows](https://cloud.google.com/workflows/docs/creating-updating-workflow)
 *
 * ## Example Usage
 * ### Workflow Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const testAccount = new gcp.serviceAccount.Account("testAccount", {
 *     accountId: "my-account",
 *     displayName: "Test Service Account",
 * });
 * const example = new gcp.workflows.Workflow("example", {
 *     region: "us-central1",
 *     description: "Magic",
 *     serviceAccount: testAccount.id,
 *     sourceContents: `# This is a sample workflow, feel free to replace it with your source code
 * #
 * # This workflow does the following:
 * # - reads current time and date information from an external API and stores
 * #   the response in CurrentDateTime variable
 * # - retrieves a list of Wikipedia articles related to the day of the week
 * #   from CurrentDateTime
 * # - returns the list of articles as an output of the workflow
 * # FYI, In terraform you need to escape the $$ or it will cause errors.
 *
 * - getCurrentTime:
 *     call: http.get
 *     args:
 *         url: https://us-central1-workflowsample.cloudfunctions.net/datetime
 *     result: CurrentDateTime
 * - readWikipedia:
 *     call: http.get
 *     args:
 *         url: https://en.wikipedia.org/w/api.php
 *         query:
 *             action: opensearch
 *             search: ${CurrentDateTime.body.dayOfTheWeek}
 *     result: WikiResult
 * - returnOutput:
 *     return: ${WikiResult.body[1]}
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * This resource does not support import.
 */
export class Workflow extends pulumi.CustomResource {
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkflowState, opts?: pulumi.CustomResourceOptions): Workflow {
        return new Workflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:workflows/workflow:Workflow';

    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workflow.__pulumiType;
    }

    /**
     * The timestamp of when the workflow was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
     * fractional digits.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the workflow provided by the user. Must be at most 1000 unicode characters long.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * A set of key/value label pairs to assign to this Workflow.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the Workflow.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Creates a unique name beginning with the
     * specified prefix. If this and name are unspecified, a random value is chosen for the name.
     */
    public readonly namePrefix!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The region of the workflow.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * The revision of the workflow. A new one is generated if the service account or source contents is changed.
     */
    public /*out*/ readonly revisionId!: pulumi.Output<string>;
    /**
     * Name of the service account associated with the latest workflow version. This service
     * account represents the identity of the workflow and determines what permissions the workflow has.
     * Format: projects/{project}/serviceAccounts/{account}.
     */
    public readonly serviceAccount!: pulumi.Output<string>;
    /**
     * Workflow code to be executed. The size limit is 32KB.
     */
    public readonly sourceContents!: pulumi.Output<string | undefined>;
    /**
     * State of the workflow deployment.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The timestamp of when the workflow was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
     * nine fractional digits.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Workflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkflowArgs | WorkflowState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkflowState | undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["revisionId"] = state ? state.revisionId : undefined;
            inputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            inputs["sourceContents"] = state ? state.sourceContents : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as WorkflowArgs | undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            inputs["sourceContents"] = args ? args.sourceContents : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["revisionId"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Workflow.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Workflow resources.
 */
export interface WorkflowState {
    /**
     * The timestamp of when the workflow was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
     * fractional digits.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the workflow provided by the user. Must be at most 1000 unicode characters long.
     */
    description?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to this Workflow.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Workflow.
     */
    name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the
     * specified prefix. If this and name are unspecified, a random value is chosen for the name.
     */
    namePrefix?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of the workflow.
     */
    region?: pulumi.Input<string>;
    /**
     * The revision of the workflow. A new one is generated if the service account or source contents is changed.
     */
    revisionId?: pulumi.Input<string>;
    /**
     * Name of the service account associated with the latest workflow version. This service
     * account represents the identity of the workflow and determines what permissions the workflow has.
     * Format: projects/{project}/serviceAccounts/{account}.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Workflow code to be executed. The size limit is 32KB.
     */
    sourceContents?: pulumi.Input<string>;
    /**
     * State of the workflow deployment.
     */
    state?: pulumi.Input<string>;
    /**
     * The timestamp of when the workflow was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
     * nine fractional digits.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Workflow resource.
 */
export interface WorkflowArgs {
    /**
     * Description of the workflow provided by the user. Must be at most 1000 unicode characters long.
     */
    description?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to this Workflow.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Workflow.
     */
    name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the
     * specified prefix. If this and name are unspecified, a random value is chosen for the name.
     */
    namePrefix?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of the workflow.
     */
    region?: pulumi.Input<string>;
    /**
     * Name of the service account associated with the latest workflow version. This service
     * account represents the identity of the workflow and determines what permissions the workflow has.
     * Format: projects/{project}/serviceAccounts/{account}.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Workflow code to be executed. The size limit is 32KB.
     */
    sourceContents?: pulumi.Input<string>;
}
