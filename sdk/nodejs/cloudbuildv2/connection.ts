// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A connection to a SCM like GitHub, GitHub Enterprise, Bitbucket Data Center/Cloud or GitLab.
 *
 * To get more information about Connection, see:
 *
 * * [API documentation](https://cloud.google.com/build/docs/api/reference/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/build/docs)
 *
 * ## Example Usage
 *
 * ### Cloudbuildv2 Connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_connection = new gcp.cloudbuildv2.Connection("my-connection", {
 *     location: "us-central1",
 *     name: "tf-test-connection",
 *     githubConfig: {
 *         appInstallationId: 0,
 *         authorizerCredential: {
 *             oauthTokenSecretVersion: "projects/gcb-terraform-creds/secrets/github-pat/versions/1",
 *         },
 *     },
 * });
 * ```
 * ## Import
 *
 * Connection can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/connections/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, Connection can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:cloudbuildv2/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:cloudbuildv2/connection:Connection default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:cloudbuildv2/connection:Connection default {{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:cloudbuildv2/connection:Connection default {{name}}
 * ```
 */
export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:cloudbuildv2/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * Allows clients to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Configuration for connections to Bitbucket Cloud.
     * Structure is documented below.
     */
    public readonly bitbucketCloudConfig!: pulumi.Output<outputs.cloudbuildv2.ConnectionBitbucketCloudConfig | undefined>;
    /**
     * Configuration for connections to Bitbucket Data Center.
     * Structure is documented below.
     */
    public readonly bitbucketDataCenterConfig!: pulumi.Output<outputs.cloudbuildv2.ConnectionBitbucketDataCenterConfig | undefined>;
    /**
     * Output only. Server assigned timestamp for when the connection was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Configuration for connections to github.com.
     * Structure is documented below.
     */
    public readonly githubConfig!: pulumi.Output<outputs.cloudbuildv2.ConnectionGithubConfig | undefined>;
    /**
     * Configuration for connections to an instance of GitHub Enterprise.
     * Structure is documented below.
     */
    public readonly githubEnterpriseConfig!: pulumi.Output<outputs.cloudbuildv2.ConnectionGithubEnterpriseConfig | undefined>;
    /**
     * Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
     * Structure is documented below.
     */
    public readonly gitlabConfig!: pulumi.Output<outputs.cloudbuildv2.ConnectionGitlabConfig | undefined>;
    /**
     * Output only. Installation state of the Connection.
     * Structure is documented below.
     */
    public /*out*/ readonly installationStates!: pulumi.Output<outputs.cloudbuildv2.ConnectionInstallationState[]>;
    /**
     * The location for the resource
     *
     *
     * - - -
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Immutable. The resource name of the connection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Output only. Set to true when the connection is being set up or updated in the background.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * Output only. Server assigned timestamp for when the connection was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["bitbucketCloudConfig"] = state ? state.bitbucketCloudConfig : undefined;
            resourceInputs["bitbucketDataCenterConfig"] = state ? state.bitbucketDataCenterConfig : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["githubConfig"] = state ? state.githubConfig : undefined;
            resourceInputs["githubEnterpriseConfig"] = state ? state.githubEnterpriseConfig : undefined;
            resourceInputs["gitlabConfig"] = state ? state.gitlabConfig : undefined;
            resourceInputs["installationStates"] = state ? state.installationStates : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["bitbucketCloudConfig"] = args ? args.bitbucketCloudConfig : undefined;
            resourceInputs["bitbucketDataCenterConfig"] = args ? args.bitbucketDataCenterConfig : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["githubConfig"] = args ? args.githubConfig : undefined;
            resourceInputs["githubEnterpriseConfig"] = args ? args.githubEnterpriseConfig : undefined;
            resourceInputs["gitlabConfig"] = args ? args.gitlabConfig : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["installationStates"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * Allows clients to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration for connections to Bitbucket Cloud.
     * Structure is documented below.
     */
    bitbucketCloudConfig?: pulumi.Input<inputs.cloudbuildv2.ConnectionBitbucketCloudConfig>;
    /**
     * Configuration for connections to Bitbucket Data Center.
     * Structure is documented below.
     */
    bitbucketDataCenterConfig?: pulumi.Input<inputs.cloudbuildv2.ConnectionBitbucketDataCenterConfig>;
    /**
     * Output only. Server assigned timestamp for when the connection was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
     */
    disabled?: pulumi.Input<boolean>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * Configuration for connections to github.com.
     * Structure is documented below.
     */
    githubConfig?: pulumi.Input<inputs.cloudbuildv2.ConnectionGithubConfig>;
    /**
     * Configuration for connections to an instance of GitHub Enterprise.
     * Structure is documented below.
     */
    githubEnterpriseConfig?: pulumi.Input<inputs.cloudbuildv2.ConnectionGithubEnterpriseConfig>;
    /**
     * Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
     * Structure is documented below.
     */
    gitlabConfig?: pulumi.Input<inputs.cloudbuildv2.ConnectionGitlabConfig>;
    /**
     * Output only. Installation state of the Connection.
     * Structure is documented below.
     */
    installationStates?: pulumi.Input<pulumi.Input<inputs.cloudbuildv2.ConnectionInstallationState>[]>;
    /**
     * The location for the resource
     *
     *
     * - - -
     */
    location?: pulumi.Input<string>;
    /**
     * Immutable. The resource name of the connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Output only. Set to true when the connection is being set up or updated in the background.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * Output only. Server assigned timestamp for when the connection was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * Allows clients to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration for connections to Bitbucket Cloud.
     * Structure is documented below.
     */
    bitbucketCloudConfig?: pulumi.Input<inputs.cloudbuildv2.ConnectionBitbucketCloudConfig>;
    /**
     * Configuration for connections to Bitbucket Data Center.
     * Structure is documented below.
     */
    bitbucketDataCenterConfig?: pulumi.Input<inputs.cloudbuildv2.ConnectionBitbucketDataCenterConfig>;
    /**
     * If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Configuration for connections to github.com.
     * Structure is documented below.
     */
    githubConfig?: pulumi.Input<inputs.cloudbuildv2.ConnectionGithubConfig>;
    /**
     * Configuration for connections to an instance of GitHub Enterprise.
     * Structure is documented below.
     */
    githubEnterpriseConfig?: pulumi.Input<inputs.cloudbuildv2.ConnectionGithubEnterpriseConfig>;
    /**
     * Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
     * Structure is documented below.
     */
    gitlabConfig?: pulumi.Input<inputs.cloudbuildv2.ConnectionGitlabConfig>;
    /**
     * The location for the resource
     *
     *
     * - - -
     */
    location: pulumi.Input<string>;
    /**
     * Immutable. The resource name of the connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
