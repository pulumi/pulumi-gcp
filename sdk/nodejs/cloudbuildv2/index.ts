// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ConnectionIAMBindingArgs, ConnectionIAMBindingState } from "./connectionIAMBinding";
export type ConnectionIAMBinding = import("./connectionIAMBinding").ConnectionIAMBinding;
export const ConnectionIAMBinding: typeof import("./connectionIAMBinding").ConnectionIAMBinding = null as any;
utilities.lazyLoad(exports, ["ConnectionIAMBinding"], () => require("./connectionIAMBinding"));

export { ConnectionIAMMemberArgs, ConnectionIAMMemberState } from "./connectionIAMMember";
export type ConnectionIAMMember = import("./connectionIAMMember").ConnectionIAMMember;
export const ConnectionIAMMember: typeof import("./connectionIAMMember").ConnectionIAMMember = null as any;
utilities.lazyLoad(exports, ["ConnectionIAMMember"], () => require("./connectionIAMMember"));

export { ConnectionIAMPolicyArgs, ConnectionIAMPolicyState } from "./connectionIAMPolicy";
export type ConnectionIAMPolicy = import("./connectionIAMPolicy").ConnectionIAMPolicy;
export const ConnectionIAMPolicy: typeof import("./connectionIAMPolicy").ConnectionIAMPolicy = null as any;
utilities.lazyLoad(exports, ["ConnectionIAMPolicy"], () => require("./connectionIAMPolicy"));

export { GetConnectionIamPolicyArgs, GetConnectionIamPolicyResult, GetConnectionIamPolicyOutputArgs } from "./getConnectionIamPolicy";
export const getConnectionIamPolicy: typeof import("./getConnectionIamPolicy").getConnectionIamPolicy = null as any;
export const getConnectionIamPolicyOutput: typeof import("./getConnectionIamPolicy").getConnectionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionIamPolicy","getConnectionIamPolicyOutput"], () => require("./getConnectionIamPolicy"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:cloudbuildv2/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "gcp:cloudbuildv2/connectionIAMBinding:ConnectionIAMBinding":
                return new ConnectionIAMBinding(name, <any>undefined, { urn })
            case "gcp:cloudbuildv2/connectionIAMMember:ConnectionIAMMember":
                return new ConnectionIAMMember(name, <any>undefined, { urn })
            case "gcp:cloudbuildv2/connectionIAMPolicy:ConnectionIAMPolicy":
                return new ConnectionIAMPolicy(name, <any>undefined, { urn })
            case "gcp:cloudbuildv2/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "cloudbuildv2/connection", _module)
pulumi.runtime.registerResourceModule("gcp", "cloudbuildv2/connectionIAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "cloudbuildv2/connectionIAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "cloudbuildv2/connectionIAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "cloudbuildv2/repository", _module)
