// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Beta only: The Cloudbuildv2 Repository resource
 *
 * ## Example Usage
 * ### Repository In GitHub Connection
 * Creates a Repository resource inside a Connection to github.com
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as gcp from "@pulumi/gcp";
 *
 * const github_token_secret = new gcp.secretmanager.Secret("github-token-secret", {
 *     secretId: "github-token-secret",
 *     replication: {
 *         automatic: true,
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const github_token_secret_version = new gcp.secretmanager.SecretVersion("github-token-secret-version", {
 *     secret: github_token_secret.id,
 *     secretData: fs.readFileSync("my-github-token.txt"),
 * }, {
 *     provider: google_beta,
 * });
 * const p4sa-secretAccessor = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/secretmanager.secretAccessor",
 *         members: ["serviceAccount:service-123456789@gcp-sa-cloudbuild.iam.gserviceaccount.com"],
 *     }],
 * });
 * const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
 *     secretId: github_token_secret.secretId,
 *     policyData: p4sa_secretAccessor.then(p4sa_secretAccessor => p4sa_secretAccessor.policyData),
 * }, {
 *     provider: google_beta,
 * });
 * const my_connection = new gcp.cloudbuildv2.Connection("my-connection", {
 *     location: "us-west1",
 *     githubConfig: {
 *         appInstallationId: 123123,
 *         authorizerCredential: {
 *             oauthTokenSecretVersion: github_token_secret_version.id,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const my_repository = new gcp.cloudbuildv2.Repository("my-repository", {
 *     location: "us-west1",
 *     parentConnection: my_connection.name,
 *     remoteUri: "https://github.com/myuser/myrepo.git",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Repository can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuildv2/repository:Repository default projects/{{project}}/locations/{{location}}/connections/{{parent_connection}}/repositories/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuildv2/repository:Repository default {{project}}/{{location}}/{{parent_connection}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuildv2/repository:Repository default {{location}}/{{parent_connection}}/{{name}}
 * ```
 */
export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:cloudbuildv2/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * Allows clients to store small amounts of arbitrary data.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Output only. Server assigned timestamp for when the connection was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The location for the resource
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of the repository.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The connection for the resource
     */
    public readonly parentConnection!: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Required. Git Clone HTTPS URI.
     */
    public readonly remoteUri!: pulumi.Output<string>;
    /**
     * Output only. Server assigned timestamp for when the connection was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentConnection"] = state ? state.parentConnection : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["remoteUri"] = state ? state.remoteUri : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if ((!args || args.parentConnection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentConnection'");
            }
            if ((!args || args.remoteUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteUri'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentConnection"] = args ? args.parentConnection : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["remoteUri"] = args ? args.remoteUri : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * Allows clients to store small amounts of arbitrary data.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. Server assigned timestamp for when the connection was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * The location for the resource
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The connection for the resource
     */
    parentConnection?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Required. Git Clone HTTPS URI.
     */
    remoteUri?: pulumi.Input<string>;
    /**
     * Output only. Server assigned timestamp for when the connection was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * Allows clients to store small amounts of arbitrary data.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location for the resource
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The connection for the resource
     */
    parentConnection: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Required. Git Clone HTTPS URI.
     */
    remoteUri: pulumi.Input<string>;
}
