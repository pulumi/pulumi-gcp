// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { Topic } from "./topic";
import * as cloudfunctions from "../cloudfunctions";

export interface TopicEventCallbackFunctionArgs extends cloudfunctions.CallbackFunctionArgs {
    callback?: TopicEventHandler;
    callbackFactory?: () => TopicEventHandler;
    httpsTriggerUrl?: never;
    triggerHttp?: never;
}

export interface TopicMessagePublishedArgs {
    failurePolicy?: cloudfunctions.FailurePolicy;
}

export interface TopicContext extends cloudfunctions.Context {
    eventType: "google.pubsub.topic.publish";

    resource: {
        service: "pubsub.googleapis.com",
        name: string,
        type: "type.googleapis.com/google.pubsub.v1.PubsubMessage"
    };
}

export interface TopicEventArgs {
    triggerType: "publish"
    failurePolicy?: cloudfunctions.FailurePolicy;
}

export interface TopicEvent {
    "@type": "type.googleapis.com/google.pubsub.v1.PubsubMessage",

    /**
     * key/value pairs included with the topic even.
     */
    attributes: Record<string, string>;

    /**
     * Base64 encoded data.  Use `Buffer.from(pubSubMessage.data, 'base64')` to get raw bytes of the
     * message.
     */
    data: string;
}

export type TopicEventHandler = cloudfunctions.Callback<TopicEvent, TopicContext, void>;

declare module "./topic" {
    interface Topic {
        onMessagePublished(name: string, handler: TopicEventHandler, args?: TopicMessagePublishedArgs, opts?: pulumi.ComponentResourceOptions): cloudfunctions.CallbackFunction;
        onMessageEvent(name: string, handler: TopicEventHandler, args: TopicEventArgs, opts?: pulumi.ComponentResourceOptions): cloudfunctions.CallbackFunction;
    }
}

Topic.prototype.onMessagePublished = function (this: Topic, name, handler, args, opts) {
    return this.onMessageEvent(name, handler, { ...args, triggerType: "publish" }, opts);
}

Topic.prototype.onMessageEvent = function (this: Topic, name, handler, args, opts = {}) {
    return new cloudfunctions.CallbackFunction(name, {
        callback: handler,
        eventTrigger: {
            resource: this.name,
            failurePolicy: args.failurePolicy,
            eventType: `google.pubsub.topic.${args.triggerType}`,
        }
    }, { parent: this, ...opts })
}

// Needed so that typescript won't elide this module
/** @internal */
export const __unused = 0;
