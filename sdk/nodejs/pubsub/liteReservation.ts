// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A named resource representing a shared pool of capacity.
 *
 * To get more information about Reservation, see:
 *
 * * [API documentation](https://cloud.google.com/pubsub/lite/docs/reference/rest/v1/admin.projects.locations.reservations)
 * * How-to Guides
 *     * [Managing Reservations](https://cloud.google.com/pubsub/lite/docs/reservations)
 *
 * ## Example Usage
 * ### Pubsub Lite Reservation Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const example = new gcp.pubsub.LiteReservation("example", {
 *     project: project.then(project => project.number),
 *     throughputCapacity: 2,
 * });
 * ```
 *
 * ## Import
 *
 * Reservation can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:pubsub/liteReservation:LiteReservation default projects/{{project}}/locations/{{region}}/reservations/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:pubsub/liteReservation:LiteReservation default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:pubsub/liteReservation:LiteReservation default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:pubsub/liteReservation:LiteReservation default {{name}}
 * ```
 */
export class LiteReservation extends pulumi.CustomResource {
    /**
     * Get an existing LiteReservation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LiteReservationState, opts?: pulumi.CustomResourceOptions): LiteReservation {
        return new LiteReservation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:pubsub/liteReservation:LiteReservation';

    /**
     * Returns true if the given object is an instance of LiteReservation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LiteReservation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LiteReservation.__pulumiType;
    }

    /**
     * Name of the reservation.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The region of the pubsub lite reservation.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * The reserved throughput capacity. Every unit of throughput capacity is
     * equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed
     * messages.
     */
    public readonly throughputCapacity!: pulumi.Output<number>;

    /**
     * Create a LiteReservation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LiteReservationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LiteReservationArgs | LiteReservationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LiteReservationState | undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["throughputCapacity"] = state ? state.throughputCapacity : undefined;
        } else {
            const args = argsOrState as LiteReservationArgs | undefined;
            if ((!args || args.throughputCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'throughputCapacity'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["throughputCapacity"] = args ? args.throughputCapacity : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(LiteReservation.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LiteReservation resources.
 */
export interface LiteReservationState {
    /**
     * Name of the reservation.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of the pubsub lite reservation.
     */
    region?: pulumi.Input<string>;
    /**
     * The reserved throughput capacity. Every unit of throughput capacity is
     * equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed
     * messages.
     */
    throughputCapacity?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LiteReservation resource.
 */
export interface LiteReservationArgs {
    /**
     * Name of the reservation.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of the pubsub lite reservation.
     */
    region?: pulumi.Input<string>;
    /**
     * The reserved throughput capacity. Every unit of throughput capacity is
     * equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed
     * messages.
     */
    throughputCapacity: pulumi.Input<number>;
}
