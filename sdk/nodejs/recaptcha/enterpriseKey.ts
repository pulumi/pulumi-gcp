// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * The RecaptchaEnterprise Key resource
 *
 * ## Example Usage
 * ### Android_key
 * A basic test of recaptcha enterprise key that can be used by Android apps
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.recaptcha.EnterpriseKey("primary", {
 *     androidSettings: {
 *         allowAllPackageNames: true,
 *         allowedPackageNames: [],
 *     },
 *     displayName: "display-name-one",
 *     labels: {
 *         "label-one": "value-one",
 *     },
 *     project: "my-project-name",
 *     testingOptions: {
 *         testingScore: 0.8,
 *     },
 * });
 * ```
 * ### Ios_key
 * A basic test of recaptcha enterprise key that can be used by iOS apps
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.recaptcha.EnterpriseKey("primary", {
 *     displayName: "display-name-one",
 *     iosSettings: {
 *         allowAllBundleIds: true,
 *         allowedBundleIds: [],
 *     },
 *     labels: {
 *         "label-one": "value-one",
 *     },
 *     project: "my-project-name",
 *     testingOptions: {
 *         testingScore: 1,
 *     },
 * });
 * ```
 * ### Minimal_key
 * A minimal test of recaptcha enterprise key
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.recaptcha.EnterpriseKey("primary", {
 *     displayName: "display-name-one",
 *     labels: {},
 *     project: "my-project-name",
 *     webSettings: {
 *         allowAllDomains: true,
 *         integrationType: "SCORE",
 *     },
 * });
 * ```
 * ### Web_key
 * A basic test of recaptcha enterprise key that can be used by websites
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.recaptcha.EnterpriseKey("primary", {
 *     displayName: "display-name-one",
 *     labels: {
 *         "label-one": "value-one",
 *     },
 *     project: "my-project-name",
 *     testingOptions: {
 *         testingChallenge: "NOCAPTCHA",
 *         testingScore: 0.5,
 *     },
 *     webSettings: {
 *         allowAllDomains: true,
 *         allowedDomains: [],
 *         challengeSecurityPreference: "USABILITY",
 *         integrationType: "CHECKBOX",
 *     },
 * });
 * ```
 * ### Web_score_key
 * A basic test of recaptcha enterprise key with score integration type that can be used by websites
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.recaptcha.EnterpriseKey("primary", {
 *     displayName: "display-name-one",
 *     labels: {
 *         "label-one": "value-one",
 *     },
 *     project: "my-project-name",
 *     testingOptions: {
 *         testingScore: 0.5,
 *     },
 *     webSettings: {
 *         allowAllDomains: true,
 *         allowAmpTraffic: false,
 *         allowedDomains: [],
 *         integrationType: "SCORE",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Key can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:recaptcha/enterpriseKey:EnterpriseKey default projects/{{project}}/keys/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:recaptcha/enterpriseKey:EnterpriseKey default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:recaptcha/enterpriseKey:EnterpriseKey default {{name}}
 * ```
 */
export class EnterpriseKey extends pulumi.CustomResource {
    /**
     * Get an existing EnterpriseKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnterpriseKeyState, opts?: pulumi.CustomResourceOptions): EnterpriseKey {
        return new EnterpriseKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:recaptcha/enterpriseKey:EnterpriseKey';

    /**
     * Returns true if the given object is an instance of EnterpriseKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnterpriseKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnterpriseKey.__pulumiType;
    }

    /**
     * Settings for keys that can be used by Android apps.
     */
    public readonly androidSettings!: pulumi.Output<outputs.recaptcha.EnterpriseKeyAndroidSettings | undefined>;
    /**
     * The timestamp corresponding to the creation of this Key.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Human-readable display name of this key. Modifiable by user.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Settings for keys that can be used by iOS apps.
     */
    public readonly iosSettings!: pulumi.Output<outputs.recaptcha.EnterpriseKeyIosSettings | undefined>;
    /**
     * See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels).
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource name for the Key in the format "projects/{project}/keys/{key}".
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Options for user acceptance testing.
     */
    public readonly testingOptions!: pulumi.Output<outputs.recaptcha.EnterpriseKeyTestingOptions | undefined>;
    /**
     * Settings for keys that can be used by websites.
     */
    public readonly webSettings!: pulumi.Output<outputs.recaptcha.EnterpriseKeyWebSettings | undefined>;

    /**
     * Create a EnterpriseKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnterpriseKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnterpriseKeyArgs | EnterpriseKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnterpriseKeyState | undefined;
            resourceInputs["androidSettings"] = state ? state.androidSettings : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["iosSettings"] = state ? state.iosSettings : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["testingOptions"] = state ? state.testingOptions : undefined;
            resourceInputs["webSettings"] = state ? state.webSettings : undefined;
        } else {
            const args = argsOrState as EnterpriseKeyArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["androidSettings"] = args ? args.androidSettings : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["iosSettings"] = args ? args.iosSettings : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["testingOptions"] = args ? args.testingOptions : undefined;
            resourceInputs["webSettings"] = args ? args.webSettings : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnterpriseKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EnterpriseKey resources.
 */
export interface EnterpriseKeyState {
    /**
     * Settings for keys that can be used by Android apps.
     */
    androidSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyAndroidSettings>;
    /**
     * The timestamp corresponding to the creation of this Key.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Human-readable display name of this key. Modifiable by user.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Settings for keys that can be used by iOS apps.
     */
    iosSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyIosSettings>;
    /**
     * See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels).
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name for the Key in the format "projects/{project}/keys/{key}".
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Options for user acceptance testing.
     */
    testingOptions?: pulumi.Input<inputs.recaptcha.EnterpriseKeyTestingOptions>;
    /**
     * Settings for keys that can be used by websites.
     */
    webSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyWebSettings>;
}

/**
 * The set of arguments for constructing a EnterpriseKey resource.
 */
export interface EnterpriseKeyArgs {
    /**
     * Settings for keys that can be used by Android apps.
     */
    androidSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyAndroidSettings>;
    /**
     * Human-readable display name of this key. Modifiable by user.
     */
    displayName: pulumi.Input<string>;
    /**
     * Settings for keys that can be used by iOS apps.
     */
    iosSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyIosSettings>;
    /**
     * See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels).
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Options for user acceptance testing.
     */
    testingOptions?: pulumi.Input<inputs.recaptcha.EnterpriseKeyTestingOptions>;
    /**
     * Settings for keys that can be used by websites.
     */
    webSettings?: pulumi.Input<inputs.recaptcha.EnterpriseKeyWebSettings>;
}
