// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * Version can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:firebase/hostingVersion:HostingVersion default sites/{{site_id}}/versions/{{version_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebase/hostingVersion:HostingVersion default {{site_id}}/{{version_id}}
 * ```
 */
export class HostingVersion extends pulumi.CustomResource {
    /**
     * Get an existing HostingVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostingVersionState, opts?: pulumi.CustomResourceOptions): HostingVersion {
        return new HostingVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:firebase/hostingVersion:HostingVersion';

    /**
     * Returns true if the given object is an instance of HostingVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HostingVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HostingVersion.__pulumiType;
    }

    /**
     * The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
     * Structure is documented below.
     */
    public readonly config!: pulumi.Output<outputs.firebase.HostingVersionConfig | undefined>;
    /**
     * The fully-qualified resource name for the version, in the format:
     * sites/SITE_ID/versions/VERSION_ID
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Required. The ID of the site in which to create this Version.
     *
     *
     * - - -
     */
    public readonly siteId!: pulumi.Output<string>;
    /**
     * The ID for the version as in sites/SITE_ID/versions/VERSION_ID
     */
    public /*out*/ readonly versionId!: pulumi.Output<string>;

    /**
     * Create a HostingVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostingVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostingVersionArgs | HostingVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostingVersionState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as HostingVersionArgs | undefined;
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HostingVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HostingVersion resources.
 */
export interface HostingVersionState {
    /**
     * The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
     * Structure is documented below.
     */
    config?: pulumi.Input<inputs.firebase.HostingVersionConfig>;
    /**
     * The fully-qualified resource name for the version, in the format:
     * sites/SITE_ID/versions/VERSION_ID
     */
    name?: pulumi.Input<string>;
    /**
     * Required. The ID of the site in which to create this Version.
     *
     *
     * - - -
     */
    siteId?: pulumi.Input<string>;
    /**
     * The ID for the version as in sites/SITE_ID/versions/VERSION_ID
     */
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HostingVersion resource.
 */
export interface HostingVersionArgs {
    /**
     * The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
     * Structure is documented below.
     */
    config?: pulumi.Input<inputs.firebase.HostingVersionConfig>;
    /**
     * Required. The ID of the site in which to create this Version.
     *
     *
     * - - -
     */
    siteId: pulumi.Input<string>;
}
