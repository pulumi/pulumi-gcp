// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A Firebase Data Connect service.
 *
 * To get more information about Service, see:
 *
 * * [API documentation](https://firebase.google.com/docs/reference/data-connect/rest)
 * * How-to Guides
 *     * [Official Documentation](https://firebase.google.com/docs/data-connect)
 *
 * ## Example Usage
 *
 * ### Firebasedataconnect Service Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // Enable Firebase Data Connect API
 * const fdc = new gcp.projects.Service("fdc", {
 *     project: "my-project-name",
 *     service: "firebasedataconnect.googleapis.com",
 *     disableOnDestroy: false,
 * });
 * // Create a Firebase Data Connect service
 * const _default = new gcp.firebase.DataConnectService("default", {
 *     project: "my-project-name",
 *     location: "us-central1",
 *     serviceId: "example-service",
 *     deletionPolicy: "DEFAULT",
 *     labels: {
 *         label: "my-label",
 *     },
 *     annotations: {
 *         key1: "value1",
 *         key2: "value2",
 *     },
 * }, {
 *     dependsOn: [fdc],
 * });
 * ```
 * ### Firebasedataconnect Service With Force Deletion
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // Enable Firebase Data Connect API
 * const fdc = new gcp.projects.Service("fdc", {
 *     project: "my-project-name",
 *     service: "firebasedataconnect.googleapis.com",
 *     disableOnDestroy: false,
 * });
 * // Create a Firebase Data Connect service
 * const _default = new gcp.firebase.DataConnectService("default", {
 *     project: "my-project-name",
 *     location: "us-central1",
 *     serviceId: "example-service",
 *     deletionPolicy: "FORCE",
 * }, {
 *     dependsOn: [fdc],
 * });
 * ```
 *
 * ## Import
 *
 * Service can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/services/{{service_id}}`
 *
 * * `{{project}}/{{location}}/{{service_id}}`
 *
 * * `{{location}}/{{service_id}}`
 *
 * When using the `pulumi import` command, Service can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:firebase/dataConnectService:DataConnectService default projects/{{project}}/locations/{{location}}/services/{{service_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:firebase/dataConnectService:DataConnectService default {{project}}/{{location}}/{{service_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:firebase/dataConnectService:DataConnectService default {{location}}/{{service_id}}
 * ```
 */
export class DataConnectService extends pulumi.CustomResource {
    /**
     * Get an existing DataConnectService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataConnectServiceState, opts?: pulumi.CustomResourceOptions): DataConnectService {
        return new DataConnectService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:firebase/dataConnectService:DataConnectService';

    /**
     * Returns true if the given object is an instance of DataConnectService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataConnectService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataConnectService.__pulumiType;
    }

    /**
     * Optional. Stores small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Output only. [Output only] Create time stamp.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The deletion policy for the database. Setting the field to FORCE allows the
     * Service to be deleted even if a Schema or Connector is present. By default,
     * the Service deletion will only succeed when no Schema or Connectors are
     * present.
     * Possible values: DEFAULT, FORCE
     */
    public readonly deletionPolicy!: pulumi.Output<string | undefined>;
    /**
     * Optional. Mutable human-readable name. 63 character limit.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Output only. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * [AIP-154](https://google.aip.dev/154)
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The region in which the service resides, e.g. "us-central1" or "asia-east1".
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Identifier. The relative resource name of the Firebase Data Connect service, in the
     * format:
     * ```
     * projects/{project}/locations/{location}/services/{service}
     * ```
     * Note that the service ID is specific to Firebase Data Connect and does not
     * correspond to any of the instance IDs of the underlying data source
     * connections.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Output only. A field that if true, indicates that the system is working update the
     * service.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * Required. The ID to use for the service, which will become the final component of the
     * service's resource name.
     *
     *
     * - - -
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * Output only. System-assigned, unique identifier.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Output only. [Output only] Update time stamp.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a DataConnectService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataConnectServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataConnectServiceArgs | DataConnectServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataConnectServiceState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deletionPolicy"] = state ? state.deletionPolicy : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as DataConnectServiceArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["deletionPolicy"] = args ? args.deletionPolicy : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DataConnectService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataConnectService resources.
 */
export interface DataConnectServiceState {
    /**
     * Optional. Stores small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. [Output only] Create time stamp.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The deletion policy for the database. Setting the field to FORCE allows the
     * Service to be deleted even if a Schema or Connector is present. By default,
     * the Service deletion will only succeed when no Schema or Connectors are
     * present.
     * Possible values: DEFAULT, FORCE
     */
    deletionPolicy?: pulumi.Input<string>;
    /**
     * Optional. Mutable human-readable name. 63 character limit.
     */
    displayName?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * [AIP-154](https://google.aip.dev/154)
     */
    etag?: pulumi.Input<string>;
    /**
     * Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The region in which the service resides, e.g. "us-central1" or "asia-east1".
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. The relative resource name of the Firebase Data Connect service, in the
     * format:
     * ```
     * projects/{project}/locations/{location}/services/{service}
     * ```
     * Note that the service ID is specific to Firebase Data Connect and does not
     * correspond to any of the instance IDs of the underlying data source
     * connections.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. A field that if true, indicates that the system is working update the
     * service.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * Required. The ID to use for the service, which will become the final component of the
     * service's resource name.
     *
     *
     * - - -
     */
    serviceId?: pulumi.Input<string>;
    /**
     * Output only. System-assigned, unique identifier.
     */
    uid?: pulumi.Input<string>;
    /**
     * Output only. [Output only] Update time stamp.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataConnectService resource.
 */
export interface DataConnectServiceArgs {
    /**
     * Optional. Stores small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The deletion policy for the database. Setting the field to FORCE allows the
     * Service to be deleted even if a Schema or Connector is present. By default,
     * the Service deletion will only succeed when no Schema or Connectors are
     * present.
     * Possible values: DEFAULT, FORCE
     */
    deletionPolicy?: pulumi.Input<string>;
    /**
     * Optional. Mutable human-readable name. 63 character limit.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The region in which the service resides, e.g. "us-central1" or "asia-east1".
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Required. The ID to use for the service, which will become the final component of the
     * service's resource name.
     *
     *
     * - - -
     */
    serviceId: pulumi.Input<string>;
}
