// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 * ### Firebasehosting Release In Site
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHostingSite = new gcp.firebase.HostingSite("defaultHostingSite", {
 *     project: "my-project-name",
 *     siteId: "site-id",
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHostingVersion = new gcp.firebase.HostingVersion("defaultHostingVersion", {
 *     siteId: defaultHostingSite.siteId,
 *     config: {
 *         redirects: [{
 *             glob: "/google/**",
 *             statusCode: 302,
 *             location: "https://www.google.com",
 *         }],
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHostingRelease = new gcp.firebase.HostingRelease("defaultHostingRelease", {
 *     siteId: defaultHostingSite.siteId,
 *     versionName: defaultHostingVersion.name,
 *     message: "Test release",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Firebasehosting Release In Channel
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHostingSite = new gcp.firebase.HostingSite("defaultHostingSite", {
 *     project: "my-project-name",
 *     siteId: "site-with-channel",
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHostingVersion = new gcp.firebase.HostingVersion("defaultHostingVersion", {
 *     siteId: defaultHostingSite.siteId,
 *     config: {
 *         redirects: [{
 *             glob: "/google/**",
 *             statusCode: 302,
 *             location: "https://www.google.com",
 *         }],
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHostingChannel = new gcp.firebase.HostingChannel("defaultHostingChannel", {
 *     siteId: defaultHostingSite.siteId,
 *     channelId: "channel-id",
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHostingRelease = new gcp.firebase.HostingRelease("defaultHostingRelease", {
 *     siteId: defaultHostingSite.siteId,
 *     channelId: defaultHostingChannel.channelId,
 *     versionName: defaultHostingVersion.name,
 *     message: "Test release in channel",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Firebasehosting Release Disable
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHostingSite = new gcp.firebase.HostingSite("defaultHostingSite", {
 *     project: "my-project-name",
 *     siteId: "site-id",
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHostingRelease = new gcp.firebase.HostingRelease("defaultHostingRelease", {
 *     siteId: defaultHostingSite.siteId,
 *     type: "SITE_DISABLE",
 *     message: "Take down site",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Release can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:firebase/hostingRelease:HostingRelease default sites/{{site_id}}/channels/{{channel_id}}/releases/{{release_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebase/hostingRelease:HostingRelease default sites/{{site_id}}/releases/{{release_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebase/hostingRelease:HostingRelease default {{site_id}}/{{channel_id}}/{{release_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebase/hostingRelease:HostingRelease default {{site_id}}/{{release_id}}
 * ```
 */
export class HostingRelease extends pulumi.CustomResource {
    /**
     * Get an existing HostingRelease resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostingReleaseState, opts?: pulumi.CustomResourceOptions): HostingRelease {
        return new HostingRelease(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:firebase/hostingRelease:HostingRelease';

    /**
     * Returns true if the given object is an instance of HostingRelease.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HostingRelease {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HostingRelease.__pulumiType;
    }

    /**
     * The ID of the channel to which the release belongs. If not provided, the release will
     * belong to the default "live" channel
     */
    public readonly channelId!: pulumi.Output<string | undefined>;
    /**
     * The deploy description when the release was created. The value can be up to 512 characters.
     */
    public readonly message!: pulumi.Output<string | undefined>;
    /**
     * The unique identifier for the release, in either of the following formats:
     * sites/SITE_ID/releases/RELEASE_ID
     * sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The unique identifier for the Release.
     */
    public /*out*/ readonly releaseId!: pulumi.Output<string>;
    /**
     * Required. The ID of the site to which the release belongs.
     */
    public readonly siteId!: pulumi.Output<string>;
    /**
     * The type of the release; indicates what happened to the content of the site. There is no need to specify
     * `DEPLOY` or `ROLLBACK` type if a `versionName` is provided.
     * DEPLOY: A version was uploaded to Firebase Hosting and released. Output only.
     * ROLLBACK: The release points back to a previously deployed version. Output only.
     * SITE_DISABLE: The release prevents the site from serving content. Firebase Hosting acts as if the site never existed
     * Possible values are `DEPLOY`, `ROLLBACK`, and `SITE_DISABLE`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The unique identifier for a version, in the format: sites/SITE_ID/versions/VERSION_ID.
     * The content of the version specified will be actively displayed on the appropriate URL.
     * The Version must belong to the same site as in the `siteId`.
     * This parameter must be empty if the `type` of the release is `SITE_DISABLE`.
     */
    public readonly versionName!: pulumi.Output<string | undefined>;

    /**
     * Create a HostingRelease resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostingReleaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostingReleaseArgs | HostingReleaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostingReleaseState | undefined;
            resourceInputs["channelId"] = state ? state.channelId : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["releaseId"] = state ? state.releaseId : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["versionName"] = state ? state.versionName : undefined;
        } else {
            const args = argsOrState as HostingReleaseArgs | undefined;
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["channelId"] = args ? args.channelId : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["versionName"] = args ? args.versionName : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["releaseId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HostingRelease.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HostingRelease resources.
 */
export interface HostingReleaseState {
    /**
     * The ID of the channel to which the release belongs. If not provided, the release will
     * belong to the default "live" channel
     */
    channelId?: pulumi.Input<string>;
    /**
     * The deploy description when the release was created. The value can be up to 512 characters.
     */
    message?: pulumi.Input<string>;
    /**
     * The unique identifier for the release, in either of the following formats:
     * sites/SITE_ID/releases/RELEASE_ID
     * sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID
     */
    name?: pulumi.Input<string>;
    /**
     * The unique identifier for the Release.
     */
    releaseId?: pulumi.Input<string>;
    /**
     * Required. The ID of the site to which the release belongs.
     */
    siteId?: pulumi.Input<string>;
    /**
     * The type of the release; indicates what happened to the content of the site. There is no need to specify
     * `DEPLOY` or `ROLLBACK` type if a `versionName` is provided.
     * DEPLOY: A version was uploaded to Firebase Hosting and released. Output only.
     * ROLLBACK: The release points back to a previously deployed version. Output only.
     * SITE_DISABLE: The release prevents the site from serving content. Firebase Hosting acts as if the site never existed
     * Possible values are `DEPLOY`, `ROLLBACK`, and `SITE_DISABLE`.
     */
    type?: pulumi.Input<string>;
    /**
     * The unique identifier for a version, in the format: sites/SITE_ID/versions/VERSION_ID.
     * The content of the version specified will be actively displayed on the appropriate URL.
     * The Version must belong to the same site as in the `siteId`.
     * This parameter must be empty if the `type` of the release is `SITE_DISABLE`.
     */
    versionName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HostingRelease resource.
 */
export interface HostingReleaseArgs {
    /**
     * The ID of the channel to which the release belongs. If not provided, the release will
     * belong to the default "live" channel
     */
    channelId?: pulumi.Input<string>;
    /**
     * The deploy description when the release was created. The value can be up to 512 characters.
     */
    message?: pulumi.Input<string>;
    /**
     * Required. The ID of the site to which the release belongs.
     */
    siteId: pulumi.Input<string>;
    /**
     * The type of the release; indicates what happened to the content of the site. There is no need to specify
     * `DEPLOY` or `ROLLBACK` type if a `versionName` is provided.
     * DEPLOY: A version was uploaded to Firebase Hosting and released. Output only.
     * ROLLBACK: The release points back to a previously deployed version. Output only.
     * SITE_DISABLE: The release prevents the site from serving content. Firebase Hosting acts as if the site never existed
     * Possible values are `DEPLOY`, `ROLLBACK`, and `SITE_DISABLE`.
     */
    type?: pulumi.Input<string>;
    /**
     * The unique identifier for a version, in the format: sites/SITE_ID/versions/VERSION_ID.
     * The content of the version specified will be actively displayed on the appropriate URL.
     * The Version must belong to the same site as in the `siteId`.
     * This parameter must be empty if the `type` of the release is `SITE_DISABLE`.
     */
    versionName?: pulumi.Input<string>;
}
