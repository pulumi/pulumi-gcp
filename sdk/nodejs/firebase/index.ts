// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AndroidAppArgs, AndroidAppState } from "./androidApp";
export type AndroidApp = import("./androidApp").AndroidApp;
export const AndroidApp: typeof import("./androidApp").AndroidApp = null as any;
utilities.lazyLoad(exports, ["AndroidApp"], () => require("./androidApp"));

export { AppCheckAppAttestConfigArgs, AppCheckAppAttestConfigState } from "./appCheckAppAttestConfig";
export type AppCheckAppAttestConfig = import("./appCheckAppAttestConfig").AppCheckAppAttestConfig;
export const AppCheckAppAttestConfig: typeof import("./appCheckAppAttestConfig").AppCheckAppAttestConfig = null as any;
utilities.lazyLoad(exports, ["AppCheckAppAttestConfig"], () => require("./appCheckAppAttestConfig"));

export { AppCheckDebugTokenArgs, AppCheckDebugTokenState } from "./appCheckDebugToken";
export type AppCheckDebugToken = import("./appCheckDebugToken").AppCheckDebugToken;
export const AppCheckDebugToken: typeof import("./appCheckDebugToken").AppCheckDebugToken = null as any;
utilities.lazyLoad(exports, ["AppCheckDebugToken"], () => require("./appCheckDebugToken"));

export { AppCheckDeviceCheckConfigArgs, AppCheckDeviceCheckConfigState } from "./appCheckDeviceCheckConfig";
export type AppCheckDeviceCheckConfig = import("./appCheckDeviceCheckConfig").AppCheckDeviceCheckConfig;
export const AppCheckDeviceCheckConfig: typeof import("./appCheckDeviceCheckConfig").AppCheckDeviceCheckConfig = null as any;
utilities.lazyLoad(exports, ["AppCheckDeviceCheckConfig"], () => require("./appCheckDeviceCheckConfig"));

export { AppCheckPlayIntegrityConfigArgs, AppCheckPlayIntegrityConfigState } from "./appCheckPlayIntegrityConfig";
export type AppCheckPlayIntegrityConfig = import("./appCheckPlayIntegrityConfig").AppCheckPlayIntegrityConfig;
export const AppCheckPlayIntegrityConfig: typeof import("./appCheckPlayIntegrityConfig").AppCheckPlayIntegrityConfig = null as any;
utilities.lazyLoad(exports, ["AppCheckPlayIntegrityConfig"], () => require("./appCheckPlayIntegrityConfig"));

export { AppCheckRecaptchaEnterpriseConfigArgs, AppCheckRecaptchaEnterpriseConfigState } from "./appCheckRecaptchaEnterpriseConfig";
export type AppCheckRecaptchaEnterpriseConfig = import("./appCheckRecaptchaEnterpriseConfig").AppCheckRecaptchaEnterpriseConfig;
export const AppCheckRecaptchaEnterpriseConfig: typeof import("./appCheckRecaptchaEnterpriseConfig").AppCheckRecaptchaEnterpriseConfig = null as any;
utilities.lazyLoad(exports, ["AppCheckRecaptchaEnterpriseConfig"], () => require("./appCheckRecaptchaEnterpriseConfig"));

export { AppCheckRecaptchaV3ConfigArgs, AppCheckRecaptchaV3ConfigState } from "./appCheckRecaptchaV3Config";
export type AppCheckRecaptchaV3Config = import("./appCheckRecaptchaV3Config").AppCheckRecaptchaV3Config;
export const AppCheckRecaptchaV3Config: typeof import("./appCheckRecaptchaV3Config").AppCheckRecaptchaV3Config = null as any;
utilities.lazyLoad(exports, ["AppCheckRecaptchaV3Config"], () => require("./appCheckRecaptchaV3Config"));

export { AppCheckServiceConfigArgs, AppCheckServiceConfigState } from "./appCheckServiceConfig";
export type AppCheckServiceConfig = import("./appCheckServiceConfig").AppCheckServiceConfig;
export const AppCheckServiceConfig: typeof import("./appCheckServiceConfig").AppCheckServiceConfig = null as any;
utilities.lazyLoad(exports, ["AppCheckServiceConfig"], () => require("./appCheckServiceConfig"));

export { AppleAppArgs, AppleAppState } from "./appleApp";
export type AppleApp = import("./appleApp").AppleApp;
export const AppleApp: typeof import("./appleApp").AppleApp = null as any;
utilities.lazyLoad(exports, ["AppleApp"], () => require("./appleApp"));

export { DatabaseInstanceArgs, DatabaseInstanceState } from "./databaseInstance";
export type DatabaseInstance = import("./databaseInstance").DatabaseInstance;
export const DatabaseInstance: typeof import("./databaseInstance").DatabaseInstance = null as any;
utilities.lazyLoad(exports, ["DatabaseInstance"], () => require("./databaseInstance"));

export { ExtensionsInstanceArgs, ExtensionsInstanceState } from "./extensionsInstance";
export type ExtensionsInstance = import("./extensionsInstance").ExtensionsInstance;
export const ExtensionsInstance: typeof import("./extensionsInstance").ExtensionsInstance = null as any;
utilities.lazyLoad(exports, ["ExtensionsInstance"], () => require("./extensionsInstance"));

export { GetAndroidAppArgs, GetAndroidAppResult, GetAndroidAppOutputArgs } from "./getAndroidApp";
export const getAndroidApp: typeof import("./getAndroidApp").getAndroidApp = null as any;
export const getAndroidAppOutput: typeof import("./getAndroidApp").getAndroidAppOutput = null as any;
utilities.lazyLoad(exports, ["getAndroidApp","getAndroidAppOutput"], () => require("./getAndroidApp"));

export { GetAndroidAppConfigArgs, GetAndroidAppConfigResult, GetAndroidAppConfigOutputArgs } from "./getAndroidAppConfig";
export const getAndroidAppConfig: typeof import("./getAndroidAppConfig").getAndroidAppConfig = null as any;
export const getAndroidAppConfigOutput: typeof import("./getAndroidAppConfig").getAndroidAppConfigOutput = null as any;
utilities.lazyLoad(exports, ["getAndroidAppConfig","getAndroidAppConfigOutput"], () => require("./getAndroidAppConfig"));

export { GetAppleAppArgs, GetAppleAppResult, GetAppleAppOutputArgs } from "./getAppleApp";
export const getAppleApp: typeof import("./getAppleApp").getAppleApp = null as any;
export const getAppleAppOutput: typeof import("./getAppleApp").getAppleAppOutput = null as any;
utilities.lazyLoad(exports, ["getAppleApp","getAppleAppOutput"], () => require("./getAppleApp"));

export { GetAppleAppConfigArgs, GetAppleAppConfigResult, GetAppleAppConfigOutputArgs } from "./getAppleAppConfig";
export const getAppleAppConfig: typeof import("./getAppleAppConfig").getAppleAppConfig = null as any;
export const getAppleAppConfigOutput: typeof import("./getAppleAppConfig").getAppleAppConfigOutput = null as any;
utilities.lazyLoad(exports, ["getAppleAppConfig","getAppleAppConfigOutput"], () => require("./getAppleAppConfig"));

export { GetHostingChannelArgs, GetHostingChannelResult, GetHostingChannelOutputArgs } from "./getHostingChannel";
export const getHostingChannel: typeof import("./getHostingChannel").getHostingChannel = null as any;
export const getHostingChannelOutput: typeof import("./getHostingChannel").getHostingChannelOutput = null as any;
utilities.lazyLoad(exports, ["getHostingChannel","getHostingChannelOutput"], () => require("./getHostingChannel"));

export { GetWebAppArgs, GetWebAppResult, GetWebAppOutputArgs } from "./getWebApp";
export const getWebApp: typeof import("./getWebApp").getWebApp = null as any;
export const getWebAppOutput: typeof import("./getWebApp").getWebAppOutput = null as any;
utilities.lazyLoad(exports, ["getWebApp","getWebAppOutput"], () => require("./getWebApp"));

export { GetWebAppConfigArgs, GetWebAppConfigResult, GetWebAppConfigOutputArgs } from "./getWebAppConfig";
export const getWebAppConfig: typeof import("./getWebAppConfig").getWebAppConfig = null as any;
export const getWebAppConfigOutput: typeof import("./getWebAppConfig").getWebAppConfigOutput = null as any;
utilities.lazyLoad(exports, ["getWebAppConfig","getWebAppConfigOutput"], () => require("./getWebAppConfig"));

export { HostingChannelArgs, HostingChannelState } from "./hostingChannel";
export type HostingChannel = import("./hostingChannel").HostingChannel;
export const HostingChannel: typeof import("./hostingChannel").HostingChannel = null as any;
utilities.lazyLoad(exports, ["HostingChannel"], () => require("./hostingChannel"));

export { HostingCustomDomainArgs, HostingCustomDomainState } from "./hostingCustomDomain";
export type HostingCustomDomain = import("./hostingCustomDomain").HostingCustomDomain;
export const HostingCustomDomain: typeof import("./hostingCustomDomain").HostingCustomDomain = null as any;
utilities.lazyLoad(exports, ["HostingCustomDomain"], () => require("./hostingCustomDomain"));

export { HostingReleaseArgs, HostingReleaseState } from "./hostingRelease";
export type HostingRelease = import("./hostingRelease").HostingRelease;
export const HostingRelease: typeof import("./hostingRelease").HostingRelease = null as any;
utilities.lazyLoad(exports, ["HostingRelease"], () => require("./hostingRelease"));

export { HostingSiteArgs, HostingSiteState } from "./hostingSite";
export type HostingSite = import("./hostingSite").HostingSite;
export const HostingSite: typeof import("./hostingSite").HostingSite = null as any;
utilities.lazyLoad(exports, ["HostingSite"], () => require("./hostingSite"));

export { HostingVersionArgs, HostingVersionState } from "./hostingVersion";
export type HostingVersion = import("./hostingVersion").HostingVersion;
export const HostingVersion: typeof import("./hostingVersion").HostingVersion = null as any;
utilities.lazyLoad(exports, ["HostingVersion"], () => require("./hostingVersion"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { StorageBucketArgs, StorageBucketState } from "./storageBucket";
export type StorageBucket = import("./storageBucket").StorageBucket;
export const StorageBucket: typeof import("./storageBucket").StorageBucket = null as any;
utilities.lazyLoad(exports, ["StorageBucket"], () => require("./storageBucket"));

export { WebAppArgs, WebAppState } from "./webApp";
export type WebApp = import("./webApp").WebApp;
export const WebApp: typeof import("./webApp").WebApp = null as any;
utilities.lazyLoad(exports, ["WebApp"], () => require("./webApp"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:firebase/androidApp:AndroidApp":
                return new AndroidApp(name, <any>undefined, { urn })
            case "gcp:firebase/appCheckAppAttestConfig:AppCheckAppAttestConfig":
                return new AppCheckAppAttestConfig(name, <any>undefined, { urn })
            case "gcp:firebase/appCheckDebugToken:AppCheckDebugToken":
                return new AppCheckDebugToken(name, <any>undefined, { urn })
            case "gcp:firebase/appCheckDeviceCheckConfig:AppCheckDeviceCheckConfig":
                return new AppCheckDeviceCheckConfig(name, <any>undefined, { urn })
            case "gcp:firebase/appCheckPlayIntegrityConfig:AppCheckPlayIntegrityConfig":
                return new AppCheckPlayIntegrityConfig(name, <any>undefined, { urn })
            case "gcp:firebase/appCheckRecaptchaEnterpriseConfig:AppCheckRecaptchaEnterpriseConfig":
                return new AppCheckRecaptchaEnterpriseConfig(name, <any>undefined, { urn })
            case "gcp:firebase/appCheckRecaptchaV3Config:AppCheckRecaptchaV3Config":
                return new AppCheckRecaptchaV3Config(name, <any>undefined, { urn })
            case "gcp:firebase/appCheckServiceConfig:AppCheckServiceConfig":
                return new AppCheckServiceConfig(name, <any>undefined, { urn })
            case "gcp:firebase/appleApp:AppleApp":
                return new AppleApp(name, <any>undefined, { urn })
            case "gcp:firebase/databaseInstance:DatabaseInstance":
                return new DatabaseInstance(name, <any>undefined, { urn })
            case "gcp:firebase/extensionsInstance:ExtensionsInstance":
                return new ExtensionsInstance(name, <any>undefined, { urn })
            case "gcp:firebase/hostingChannel:HostingChannel":
                return new HostingChannel(name, <any>undefined, { urn })
            case "gcp:firebase/hostingCustomDomain:HostingCustomDomain":
                return new HostingCustomDomain(name, <any>undefined, { urn })
            case "gcp:firebase/hostingRelease:HostingRelease":
                return new HostingRelease(name, <any>undefined, { urn })
            case "gcp:firebase/hostingSite:HostingSite":
                return new HostingSite(name, <any>undefined, { urn })
            case "gcp:firebase/hostingVersion:HostingVersion":
                return new HostingVersion(name, <any>undefined, { urn })
            case "gcp:firebase/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "gcp:firebase/storageBucket:StorageBucket":
                return new StorageBucket(name, <any>undefined, { urn })
            case "gcp:firebase/webApp:WebApp":
                return new WebApp(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "firebase/androidApp", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/appCheckAppAttestConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/appCheckDebugToken", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/appCheckDeviceCheckConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/appCheckPlayIntegrityConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/appCheckRecaptchaEnterpriseConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/appCheckRecaptchaV3Config", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/appCheckServiceConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/appleApp", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/databaseInstance", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/extensionsInstance", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/hostingChannel", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/hostingCustomDomain", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/hostingRelease", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/hostingSite", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/hostingVersion", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/project", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/storageBucket", _module)
pulumi.runtime.registerResourceModule("gcp", "firebase/webApp", _module)
