// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A single build for a backend, at a specific point codebase reference tag
 * and point in time. Encapsulates several resources, including an Artifact Registry
 * container image, a Cloud Build invocation that built the image, and the
 * Cloud Run revision that uses that image.
 *
 * ## Example Usage
 *
 * ### Firebase App Hosting Build Minimal
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * //## Include these blocks only once per project if you are starting from scratch ###
 * const serviceAccount = new gcp.serviceaccount.Account("service_account", {
 *     project: "my-project-name",
 *     accountId: "firebase-app-hosting-compute",
 *     displayName: "Firebase App Hosting compute service account",
 *     createIgnoreAlreadyExists: true,
 * });
 * const fah = new gcp.projects.Service("fah", {
 *     project: "my-project-name",
 *     service: "firebaseapphosting.googleapis.com",
 * });
 * const exampleAppHostingBackend = new gcp.firebase.AppHostingBackend("example", {
 *     project: "my-project-name",
 *     location: "us-central1",
 *     backendId: "mini",
 *     appId: "1:0000000000:web:674cde32020e16fbce9dbd",
 *     servingLocality: "GLOBAL_ACCESS",
 *     serviceAccount: serviceAccount.email,
 * }, {
 *     dependsOn: [fah],
 * });
 * const example = new gcp.firebase.AppHostingBuild("example", {
 *     project: exampleAppHostingBackend.project,
 *     location: exampleAppHostingBackend.location,
 *     backend: exampleAppHostingBackend.backendId,
 *     buildId: "mini-build",
 *     source: {
 *         container: {
 *             image: "us-docker.pkg.dev/cloudrun/container/hello",
 *         },
 *     },
 * });
 * const appHostingSaRunner = new gcp.projects.IAMMember("app_hosting_sa_runner", {
 *     project: "my-project-name",
 *     role: "roles/firebaseapphosting.computeRunner",
 *     member: serviceAccount.member,
 * });
 * ```
 * ### Firebase App Hosting Build Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * //## Include these blocks only once per project if you are starting from scratch ###
 * const serviceAccount = new gcp.serviceaccount.Account("service_account", {
 *     project: "my-project-name",
 *     accountId: "firebase-app-hosting-compute",
 *     displayName: "Firebase App Hosting compute service account",
 *     createIgnoreAlreadyExists: true,
 * });
 * const fah = new gcp.projects.Service("fah", {
 *     project: "my-project-name",
 *     service: "firebaseapphosting.googleapis.com",
 * });
 * const exampleAppHostingBackend = new gcp.firebase.AppHostingBackend("example", {
 *     project: "my-project-name",
 *     location: "us-central1",
 *     backendId: "full",
 *     appId: "1:0000000000:web:674cde32020e16fbce9dbd",
 *     servingLocality: "GLOBAL_ACCESS",
 *     serviceAccount: serviceAccount.email,
 * }, {
 *     dependsOn: [fah],
 * });
 * const example = new gcp.firebase.AppHostingBuild("example", {
 *     project: exampleAppHostingBackend.project,
 *     location: exampleAppHostingBackend.location,
 *     backend: exampleAppHostingBackend.backendId,
 *     buildId: "full-build",
 *     displayName: "My Build",
 *     annotations: {
 *         key: "value",
 *     },
 *     labels: {
 *         key: "value",
 *     },
 *     source: {
 *         container: {
 *             image: "us-docker.pkg.dev/cloudrun/container/hello",
 *         },
 *     },
 * });
 * const appHostingSaRunner = new gcp.projects.IAMMember("app_hosting_sa_runner", {
 *     project: "my-project-name",
 *     role: "roles/firebaseapphosting.computeRunner",
 *     member: serviceAccount.member,
 * });
 * ```
 * ## Import
 *
 * Build can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/backends/{{backend}}/builds/{{build_id}}`
 *
 * * `{{project}}/{{location}}/{{backend}}/{{build_id}}`
 *
 * * `{{location}}/{{backend}}/{{build_id}}`
 *
 * When using the `pulumi import` command, Build can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:firebase/appHostingBuild:AppHostingBuild default projects/{{project}}/locations/{{location}}/backends/{{backend}}/builds/{{build_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:firebase/appHostingBuild:AppHostingBuild default {{project}}/{{location}}/{{backend}}/{{build_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:firebase/appHostingBuild:AppHostingBuild default {{location}}/{{backend}}/{{build_id}}
 * ```
 */
export class AppHostingBuild extends pulumi.CustomResource {
    /**
     * Get an existing AppHostingBuild resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppHostingBuildState, opts?: pulumi.CustomResourceOptions): AppHostingBuild {
        return new AppHostingBuild(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:firebase/appHostingBuild:AppHostingBuild';

    /**
     * Returns true if the given object is an instance of AppHostingBuild.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppHostingBuild {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppHostingBuild.__pulumiType;
    }

    /**
     * Unstructured key value map that may be set by external tools to
     * store and arbitrary metadata. They are not queryable and should be
     * preserved when modifying objects.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the Backend that this Build applies to
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * The user-specified ID of the build being created.
     */
    declare public readonly buildId: pulumi.Output<string>;
    /**
     * The location of the [Cloud Build
     * logs](https://cloud.google.com/build/docs/view-build-results) for the build
     * process.
     */
    declare public /*out*/ readonly buildLogsUri: pulumi.Output<string>;
    /**
     * Time at which the build was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Human-readable name. 63 character limit.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly effectiveAnnotations: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The environment name of the backend when this build was created.
     */
    declare public /*out*/ readonly environment: pulumi.Output<string>;
    /**
     * The source of the error for the build, if in a `FAILED` state.
     * Possible values:
     * CLOUD_BUILD
     * CLOUD_RUN
     */
    declare public /*out*/ readonly errorSource: pulumi.Output<string>;
    /**
     * The `Status` type defines a logical error model that is suitable for
     * different programming environments, including REST APIs and RPC APIs. It is
     * used by [gRPC](https://github.com/grpc). Each `Status` message contains
     * three pieces of data: error code, error message, and error details.
     * You can find out more about this error model and how to work with it in the
     * [API Design Guide](https://cloud.google.com/apis/design/errors).
     * Structure is documented below.
     */
    declare public /*out*/ readonly errors: pulumi.Output<outputs.firebase.AppHostingBuildError[]>;
    /**
     * Server-computed checksum based on other values; may be sent
     * on update or delete to ensure operation is done on expected resource.
     */
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    /**
     * The Artifact Registry
     * [container
     * image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
     * URI, used by the Cloud Run
     * [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
     * for this build.
     */
    declare public /*out*/ readonly image: pulumi.Output<string>;
    /**
     * Unstructured key value map that can be used to organize and categorize
     * objects.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location of the Backend that this Build applies to
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Identifier. The resource name of the build.
     * Format:
     * `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The source for the build.
     * Structure is documented below.
     */
    declare public readonly source: pulumi.Output<outputs.firebase.AppHostingBuildSource>;
    /**
     * The state of the build.
     * Possible values:
     * BUILDING
     * BUILT
     * DEPLOYING
     * READY
     * FAILED
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * System-assigned, unique identifier.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * Time at which the build was last updated.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a AppHostingBuild resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppHostingBuildArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppHostingBuildArgs | AppHostingBuildState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppHostingBuildState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["buildId"] = state?.buildId;
            resourceInputs["buildLogsUri"] = state?.buildLogsUri;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["effectiveAnnotations"] = state?.effectiveAnnotations;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["errorSource"] = state?.errorSource;
            resourceInputs["errors"] = state?.errors;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["image"] = state?.image;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["source"] = state?.source;
            resourceInputs["state"] = state?.state;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as AppHostingBuildArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if (args?.buildId === undefined && !opts.urn) {
                throw new Error("Missing required property 'buildId'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.source === undefined && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["buildId"] = args?.buildId;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["project"] = args?.project;
            resourceInputs["source"] = args?.source;
            resourceInputs["buildLogsUri"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["environment"] = undefined /*out*/;
            resourceInputs["errorSource"] = undefined /*out*/;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["image"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AppHostingBuild.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppHostingBuild resources.
 */
export interface AppHostingBuildState {
    /**
     * Unstructured key value map that may be set by external tools to
     * store and arbitrary metadata. They are not queryable and should be
     * preserved when modifying objects.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the Backend that this Build applies to
     */
    backend?: pulumi.Input<string>;
    /**
     * The user-specified ID of the build being created.
     */
    buildId?: pulumi.Input<string>;
    /**
     * The location of the [Cloud Build
     * logs](https://cloud.google.com/build/docs/view-build-results) for the build
     * process.
     */
    buildLogsUri?: pulumi.Input<string>;
    /**
     * Time at which the build was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Human-readable name. 63 character limit.
     */
    displayName?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The environment name of the backend when this build was created.
     */
    environment?: pulumi.Input<string>;
    /**
     * The source of the error for the build, if in a `FAILED` state.
     * Possible values:
     * CLOUD_BUILD
     * CLOUD_RUN
     */
    errorSource?: pulumi.Input<string>;
    /**
     * The `Status` type defines a logical error model that is suitable for
     * different programming environments, including REST APIs and RPC APIs. It is
     * used by [gRPC](https://github.com/grpc). Each `Status` message contains
     * three pieces of data: error code, error message, and error details.
     * You can find out more about this error model and how to work with it in the
     * [API Design Guide](https://cloud.google.com/apis/design/errors).
     * Structure is documented below.
     */
    errors?: pulumi.Input<pulumi.Input<inputs.firebase.AppHostingBuildError>[]>;
    /**
     * Server-computed checksum based on other values; may be sent
     * on update or delete to ensure operation is done on expected resource.
     */
    etag?: pulumi.Input<string>;
    /**
     * The Artifact Registry
     * [container
     * image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
     * URI, used by the Cloud Run
     * [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
     * for this build.
     */
    image?: pulumi.Input<string>;
    /**
     * Unstructured key value map that can be used to organize and categorize
     * objects.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the Backend that this Build applies to
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. The resource name of the build.
     * Format:
     * `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The source for the build.
     * Structure is documented below.
     */
    source?: pulumi.Input<inputs.firebase.AppHostingBuildSource>;
    /**
     * The state of the build.
     * Possible values:
     * BUILDING
     * BUILT
     * DEPLOYING
     * READY
     * FAILED
     */
    state?: pulumi.Input<string>;
    /**
     * System-assigned, unique identifier.
     */
    uid?: pulumi.Input<string>;
    /**
     * Time at which the build was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppHostingBuild resource.
 */
export interface AppHostingBuildArgs {
    /**
     * Unstructured key value map that may be set by external tools to
     * store and arbitrary metadata. They are not queryable and should be
     * preserved when modifying objects.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the Backend that this Build applies to
     */
    backend: pulumi.Input<string>;
    /**
     * The user-specified ID of the build being created.
     */
    buildId: pulumi.Input<string>;
    /**
     * Human-readable name. 63 character limit.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Unstructured key value map that can be used to organize and categorize
     * objects.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the Backend that this Build applies to
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The source for the build.
     * Structure is documented below.
     */
    source: pulumi.Input<inputs.firebase.AppHostingBuildSource>;
}
