// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export function getAppleApp(args: GetAppleAppArgs, opts?: pulumi.InvokeOptions): Promise<GetAppleAppResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:firebase/getAppleApp:getAppleApp", {
        "appId": args.appId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAppleApp.
 */
export interface GetAppleAppArgs {
    /**
     * The appId of name of the Firebase iosApp.
     */
    appId: string;
}

/**
 * A collection of values returned by getAppleApp.
 */
export interface GetAppleAppResult {
    /**
     * Immutable. The globally unique, Firebase-assigned identifier of the App.
     * This identifier should be treated as an opaque token, as the data format is not specified.
     */
    readonly appId: string;
    /**
     * The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
     */
    readonly appStoreId: string;
    /**
     * The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
     */
    readonly bundleId: string;
    readonly deletionPolicy: string;
    /**
     * The user-assigned display name of the App.
     */
    readonly displayName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The fully qualified resource name of the App, for example:
     * projects/projectId/iosApps/appId
     */
    readonly name: string;
    readonly project: string;
    /**
     * The Apple Developer Team ID associated with the App in the App Store.
     */
    readonly teamId: string;
}
export function getAppleAppOutput(args: GetAppleAppOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppleAppResult> {
    return pulumi.output(args).apply((a: any) => getAppleApp(a, opts))
}

/**
 * A collection of arguments for invoking getAppleApp.
 */
export interface GetAppleAppOutputArgs {
    /**
     * The appId of name of the Firebase iosApp.
     */
    appId: pulumi.Input<string>;
}
