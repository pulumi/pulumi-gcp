// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Retrohunt is an execution of a Rule over a time range in the past.
 *
 * To get more information about Retrohunt, see:
 *
 * * [API documentation](https://cloud.google.com/chronicle/docs/reference/rest/v1/projects.locations.instances.rules.retrohunts)
 * * How-to Guides
 *     * [Google SecOps Guides](https://cloud.google.com/chronicle/docs/secops/secops-overview)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Retrohunt can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule}}/retrohunts/{{retrohunt}}`
 *
 * * `{{project}}/{{location}}/{{instance}}/{{rule}}/{{retrohunt}}`
 *
 * * `{{location}}/{{instance}}/{{rule}}/{{retrohunt}}`
 *
 * When using the `pulumi import` command, Retrohunt can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:chronicle/retrohunt:Retrohunt default projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule}}/retrohunts/{{retrohunt}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:chronicle/retrohunt:Retrohunt default {{project}}/{{location}}/{{instance}}/{{rule}}/{{retrohunt}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:chronicle/retrohunt:Retrohunt default {{location}}/{{instance}}/{{rule}}/{{retrohunt}}
 * ```
 */
export class Retrohunt extends pulumi.CustomResource {
    /**
     * Get an existing Retrohunt resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RetrohuntState, opts?: pulumi.CustomResourceOptions): Retrohunt {
        return new Retrohunt(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:chronicle/retrohunt:Retrohunt';

    /**
     * Returns true if the given object is an instance of Retrohunt.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Retrohunt {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Retrohunt.__pulumiType;
    }

    /**
     * The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
     */
    public readonly RetrohuntId!: pulumi.Output<string>;
    /**
     * Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     */
    public /*out*/ readonly executionIntervals!: pulumi.Output<outputs.chronicle.RetrohuntExecutionInterval[]>;
    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     */
    public readonly instance!: pulumi.Output<string>;
    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the retrohunt.
     * Retrohunt is the child of a rule revision. {rule} in the format below is
     * structured as {rule_id@revision_id}.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     */
    public readonly processInterval!: pulumi.Output<outputs.chronicle.RetrohuntProcessInterval>;
    /**
     * Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
     */
    public /*out*/ readonly progressPercentage!: pulumi.Output<number>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The Rule ID of the rule.
     */
    public readonly rule!: pulumi.Output<string>;
    /**
     * Output only. The state of the retrohunt.
     * Possible values:
     * RUNNING
     * DONE
     * CANCELLED
     * FAILED
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a Retrohunt resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RetrohuntArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RetrohuntArgs | RetrohuntState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RetrohuntState | undefined;
            resourceInputs["RetrohuntId"] = state ? state.RetrohuntId : undefined;
            resourceInputs["executionIntervals"] = state ? state.executionIntervals : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["processInterval"] = state ? state.processInterval : undefined;
            resourceInputs["progressPercentage"] = state ? state.progressPercentage : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as RetrohuntArgs | undefined;
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.processInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processInterval'");
            }
            if ((!args || args.rule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rule'");
            }
            resourceInputs["RetrohuntId"] = args ? args.RetrohuntId : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["processInterval"] = args ? args.processInterval : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["executionIntervals"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["progressPercentage"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Retrohunt.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Retrohunt resources.
 */
export interface RetrohuntState {
    /**
     * The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
     */
    RetrohuntId?: pulumi.Input<string>;
    /**
     * Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     */
    executionIntervals?: pulumi.Input<pulumi.Input<inputs.chronicle.RetrohuntExecutionInterval>[]>;
    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     */
    instance?: pulumi.Input<string>;
    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the retrohunt.
     * Retrohunt is the child of a rule revision. {rule} in the format below is
     * structured as {rule_id@revision_id}.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
     */
    name?: pulumi.Input<string>;
    /**
     * Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     */
    processInterval?: pulumi.Input<inputs.chronicle.RetrohuntProcessInterval>;
    /**
     * Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
     */
    progressPercentage?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * The Rule ID of the rule.
     */
    rule?: pulumi.Input<string>;
    /**
     * Output only. The state of the retrohunt.
     * Possible values:
     * RUNNING
     * DONE
     * CANCELLED
     * FAILED
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Retrohunt resource.
 */
export interface RetrohuntArgs {
    /**
     * The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
     */
    RetrohuntId?: pulumi.Input<string>;
    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     */
    instance: pulumi.Input<string>;
    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
     */
    location: pulumi.Input<string>;
    /**
     * Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     */
    processInterval: pulumi.Input<inputs.chronicle.RetrohuntProcessInterval>;
    project?: pulumi.Input<string>;
    /**
     * The Rule ID of the rule.
     */
    rule: pulumi.Input<string>;
}
