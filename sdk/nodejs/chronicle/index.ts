// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DataAccessLabelArgs, DataAccessLabelState } from "./dataAccessLabel";
export type DataAccessLabel = import("./dataAccessLabel").DataAccessLabel;
export const DataAccessLabel: typeof import("./dataAccessLabel").DataAccessLabel = null as any;
utilities.lazyLoad(exports, ["DataAccessLabel"], () => require("./dataAccessLabel"));

export { DataAccessScopeArgs, DataAccessScopeState } from "./dataAccessScope";
export type DataAccessScope = import("./dataAccessScope").DataAccessScope;
export const DataAccessScope: typeof import("./dataAccessScope").DataAccessScope = null as any;
utilities.lazyLoad(exports, ["DataAccessScope"], () => require("./dataAccessScope"));

export { ReferenceListArgs, ReferenceListState } from "./referenceList";
export type ReferenceList = import("./referenceList").ReferenceList;
export const ReferenceList: typeof import("./referenceList").ReferenceList = null as any;
utilities.lazyLoad(exports, ["ReferenceList"], () => require("./referenceList"));

export { RetrohuntArgs, RetrohuntState } from "./retrohunt";
export type Retrohunt = import("./retrohunt").Retrohunt;
export const Retrohunt: typeof import("./retrohunt").Retrohunt = null as any;
utilities.lazyLoad(exports, ["Retrohunt"], () => require("./retrohunt"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { RuleDeploymentArgs, RuleDeploymentState } from "./ruleDeployment";
export type RuleDeployment = import("./ruleDeployment").RuleDeployment;
export const RuleDeployment: typeof import("./ruleDeployment").RuleDeployment = null as any;
utilities.lazyLoad(exports, ["RuleDeployment"], () => require("./ruleDeployment"));

export { WatchlistArgs, WatchlistState } from "./watchlist";
export type Watchlist = import("./watchlist").Watchlist;
export const Watchlist: typeof import("./watchlist").Watchlist = null as any;
utilities.lazyLoad(exports, ["Watchlist"], () => require("./watchlist"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:chronicle/dataAccessLabel:DataAccessLabel":
                return new DataAccessLabel(name, <any>undefined, { urn })
            case "gcp:chronicle/dataAccessScope:DataAccessScope":
                return new DataAccessScope(name, <any>undefined, { urn })
            case "gcp:chronicle/referenceList:ReferenceList":
                return new ReferenceList(name, <any>undefined, { urn })
            case "gcp:chronicle/retrohunt:Retrohunt":
                return new Retrohunt(name, <any>undefined, { urn })
            case "gcp:chronicle/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "gcp:chronicle/ruleDeployment:RuleDeployment":
                return new RuleDeployment(name, <any>undefined, { urn })
            case "gcp:chronicle/watchlist:Watchlist":
                return new Watchlist(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "chronicle/dataAccessLabel", _module)
pulumi.runtime.registerResourceModule("gcp", "chronicle/dataAccessScope", _module)
pulumi.runtime.registerResourceModule("gcp", "chronicle/referenceList", _module)
pulumi.runtime.registerResourceModule("gcp", "chronicle/retrohunt", _module)
pulumi.runtime.registerResourceModule("gcp", "chronicle/rule", _module)
pulumi.runtime.registerResourceModule("gcp", "chronicle/ruleDeployment", _module)
pulumi.runtime.registerResourceModule("gcp", "chronicle/watchlist", _module)
