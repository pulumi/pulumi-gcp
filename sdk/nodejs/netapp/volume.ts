// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A volume is a file system container in a storage pool that stores application, database, and user data.
 *
 * You can create a volume's capacity using the available capacity in the storage pool and you can define and resize the capacity without disruption to any processes.
 *
 * Storage pool settings apply to the volumes contained within them automatically.
 *
 * To get more information about Volume, see:
 *
 * * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.volumes)
 * * How-to Guides
 *     * [Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/volumes/overview)
 *     * [Quickstart](https://cloud.google.com/netapp/volumes/docs/get-started/quickstarts/create-volume)
 *
 * ## Example Usage
 *
 * ### Netapp Volume Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default = gcp.compute.getNetwork({
 *     name: "test-network",
 * });
 * const defaultStoragePool = new gcp.netapp.StoragePool("default", {
 *     name: "test-pool",
 *     location: "us-west2",
 *     serviceLevel: "PREMIUM",
 *     capacityGib: "2048",
 *     network: _default.then(_default => _default.id),
 * });
 * const testVolume = new gcp.netapp.Volume("test_volume", {
 *     location: "us-west2",
 *     name: "test-volume",
 *     capacityGib: "100",
 *     shareName: "test-volume",
 *     storagePool: defaultStoragePool.name,
 *     protocols: ["NFSV3"],
 *     deletionPolicy: "DEFAULT",
 * });
 * ```
 *
 * ## Import
 *
 * Volume can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/volumes/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, Volume can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:netapp/volume:Volume default projects/{{project}}/locations/{{location}}/volumes/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/volume:Volume default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/volume:Volume default {{location}}/{{name}}
 * ```
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:netapp/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
     */
    public /*out*/ readonly activeDirectory!: pulumi.Output<string>;
    /**
     * Backup configuration for the volume.
     * Structure is documented below.
     */
    public readonly backupConfig!: pulumi.Output<outputs.netapp.VolumeBackupConfig | undefined>;
    /**
     * Capacity of the volume (in GiB).
     */
    public readonly capacityGib!: pulumi.Output<string>;
    /**
     * Create time of the volume. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Policy to determine if the volume should be deleted forcefully.
     * Volumes may have nested snapshot resources. Deleting such a volume will fail.
     * Setting this parameter to FORCE will delete volumes including nested snapshots.
     * Possible values: DEFAULT, FORCE.
     */
    public readonly deletionPolicy!: pulumi.Output<string | undefined>;
    /**
     * An optional description of this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
     */
    public /*out*/ readonly encryptionType!: pulumi.Output<string>;
    /**
     * Export policy of the volume for NFSV3 and/or NFSV4.1 access.
     * Structure is documented below.
     */
    public readonly exportPolicy!: pulumi.Output<outputs.netapp.VolumeExportPolicy | undefined>;
    /**
     * Indicates whether the volume is part of a volume replication relationship.
     */
    public /*out*/ readonly hasReplication!: pulumi.Output<boolean>;
    /**
     * Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
     */
    public readonly kerberosEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
     */
    public /*out*/ readonly kmsConfig!: pulumi.Output<string>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
     */
    public /*out*/ readonly ldapEnabled!: pulumi.Output<boolean>;
    /**
     * Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Reports mount instructions for this volume.
     * Structure is documented below.
     */
    public /*out*/ readonly mountOptions!: pulumi.Output<outputs.netapp.VolumeMountOption[]>;
    /**
     * The name of the volume. Needs to be unique per location.
     *
     *
     * - - -
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
     */
    public /*out*/ readonly network!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The protocol of the volume. Allowed combinations are `['NFSV3']`, `['NFSV4']`, `['SMB']`, `['NFSV3', 'NFSV4']`, `['SMB', 'NFSV3']` and `['SMB', 'NFSV4']`.
     * Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
     */
    public readonly protocols!: pulumi.Output<string[]>;
    /**
     * Name of the Private Service Access allocated range. Inherited from storage pool.
     */
    public /*out*/ readonly psaRange!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Specifies the replica zone for regional volume.
     */
    public /*out*/ readonly replicaZone!: pulumi.Output<string>;
    /**
     * Used to create this volume from a snapshot (= cloning) or an backup.
     * Structure is documented below.
     */
    public readonly restoreParameters!: pulumi.Output<outputs.netapp.VolumeRestoreParameters | undefined>;
    /**
     * List of actions that are restricted on this volume.
     * Each value may be one of: `DELETE`.
     */
    public readonly restrictedActions!: pulumi.Output<string[] | undefined>;
    /**
     * Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
     * Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
     * Possible values are: `NTFS`, `UNIX`.
     */
    public readonly securityStyle!: pulumi.Output<string>;
    /**
     * Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTERME, STANDARD, FLEX.
     */
    public /*out*/ readonly serviceLevel!: pulumi.Output<string>;
    /**
     * Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
     */
    public readonly shareName!: pulumi.Output<string>;
    /**
     * Settings for volumes with SMB access.
     * Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
     */
    public readonly smbSettings!: pulumi.Output<string[]>;
    /**
     * If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots. Will enable "Previous Versions" support for SMB.
     */
    public readonly snapshotDirectory!: pulumi.Output<boolean | undefined>;
    /**
     * Snapshot policy defines the schedule for automatic snapshot creation.
     * To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
     * Structure is documented below.
     */
    public readonly snapshotPolicy!: pulumi.Output<outputs.netapp.VolumeSnapshotPolicy | undefined>;
    /**
     * State of the volume.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * State details of the volume.
     */
    public /*out*/ readonly stateDetails!: pulumi.Output<string>;
    /**
     * Name of the storage pool to create the volume in. Pool needs enough spare capacity to accomodate the volume.
     */
    public readonly storagePool!: pulumi.Output<string>;
    /**
     * Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
     */
    public readonly unixPermissions!: pulumi.Output<string>;
    /**
     * Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
     */
    public /*out*/ readonly usedGib!: pulumi.Output<string>;
    /**
     * Specifies the active zone for regional volume.
     */
    public /*out*/ readonly zone!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["activeDirectory"] = state ? state.activeDirectory : undefined;
            resourceInputs["backupConfig"] = state ? state.backupConfig : undefined;
            resourceInputs["capacityGib"] = state ? state.capacityGib : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deletionPolicy"] = state ? state.deletionPolicy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["encryptionType"] = state ? state.encryptionType : undefined;
            resourceInputs["exportPolicy"] = state ? state.exportPolicy : undefined;
            resourceInputs["hasReplication"] = state ? state.hasReplication : undefined;
            resourceInputs["kerberosEnabled"] = state ? state.kerberosEnabled : undefined;
            resourceInputs["kmsConfig"] = state ? state.kmsConfig : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["ldapEnabled"] = state ? state.ldapEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mountOptions"] = state ? state.mountOptions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["psaRange"] = state ? state.psaRange : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["replicaZone"] = state ? state.replicaZone : undefined;
            resourceInputs["restoreParameters"] = state ? state.restoreParameters : undefined;
            resourceInputs["restrictedActions"] = state ? state.restrictedActions : undefined;
            resourceInputs["securityStyle"] = state ? state.securityStyle : undefined;
            resourceInputs["serviceLevel"] = state ? state.serviceLevel : undefined;
            resourceInputs["shareName"] = state ? state.shareName : undefined;
            resourceInputs["smbSettings"] = state ? state.smbSettings : undefined;
            resourceInputs["snapshotDirectory"] = state ? state.snapshotDirectory : undefined;
            resourceInputs["snapshotPolicy"] = state ? state.snapshotPolicy : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateDetails"] = state ? state.stateDetails : undefined;
            resourceInputs["storagePool"] = state ? state.storagePool : undefined;
            resourceInputs["unixPermissions"] = state ? state.unixPermissions : undefined;
            resourceInputs["usedGib"] = state ? state.usedGib : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.capacityGib === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacityGib'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.protocols === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocols'");
            }
            if ((!args || args.shareName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareName'");
            }
            if ((!args || args.storagePool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storagePool'");
            }
            resourceInputs["backupConfig"] = args ? args.backupConfig : undefined;
            resourceInputs["capacityGib"] = args ? args.capacityGib : undefined;
            resourceInputs["deletionPolicy"] = args ? args.deletionPolicy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["exportPolicy"] = args ? args.exportPolicy : undefined;
            resourceInputs["kerberosEnabled"] = args ? args.kerberosEnabled : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["restoreParameters"] = args ? args.restoreParameters : undefined;
            resourceInputs["restrictedActions"] = args ? args.restrictedActions : undefined;
            resourceInputs["securityStyle"] = args ? args.securityStyle : undefined;
            resourceInputs["shareName"] = args ? args.shareName : undefined;
            resourceInputs["smbSettings"] = args ? args.smbSettings : undefined;
            resourceInputs["snapshotDirectory"] = args ? args.snapshotDirectory : undefined;
            resourceInputs["snapshotPolicy"] = args ? args.snapshotPolicy : undefined;
            resourceInputs["storagePool"] = args ? args.storagePool : undefined;
            resourceInputs["unixPermissions"] = args ? args.unixPermissions : undefined;
            resourceInputs["activeDirectory"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["encryptionType"] = undefined /*out*/;
            resourceInputs["hasReplication"] = undefined /*out*/;
            resourceInputs["kmsConfig"] = undefined /*out*/;
            resourceInputs["ldapEnabled"] = undefined /*out*/;
            resourceInputs["mountOptions"] = undefined /*out*/;
            resourceInputs["network"] = undefined /*out*/;
            resourceInputs["psaRange"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["replicaZone"] = undefined /*out*/;
            resourceInputs["serviceLevel"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
            resourceInputs["usedGib"] = undefined /*out*/;
            resourceInputs["zone"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
     */
    activeDirectory?: pulumi.Input<string>;
    /**
     * Backup configuration for the volume.
     * Structure is documented below.
     */
    backupConfig?: pulumi.Input<inputs.netapp.VolumeBackupConfig>;
    /**
     * Capacity of the volume (in GiB).
     */
    capacityGib?: pulumi.Input<string>;
    /**
     * Create time of the volume. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * Policy to determine if the volume should be deleted forcefully.
     * Volumes may have nested snapshot resources. Deleting such a volume will fail.
     * Setting this parameter to FORCE will delete volumes including nested snapshots.
     * Possible values: DEFAULT, FORCE.
     */
    deletionPolicy?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
     */
    encryptionType?: pulumi.Input<string>;
    /**
     * Export policy of the volume for NFSV3 and/or NFSV4.1 access.
     * Structure is documented below.
     */
    exportPolicy?: pulumi.Input<inputs.netapp.VolumeExportPolicy>;
    /**
     * Indicates whether the volume is part of a volume replication relationship.
     */
    hasReplication?: pulumi.Input<boolean>;
    /**
     * Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
     */
    kerberosEnabled?: pulumi.Input<boolean>;
    /**
     * Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
     */
    kmsConfig?: pulumi.Input<string>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
     */
    ldapEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
     */
    location?: pulumi.Input<string>;
    /**
     * Reports mount instructions for this volume.
     * Structure is documented below.
     */
    mountOptions?: pulumi.Input<pulumi.Input<inputs.netapp.VolumeMountOption>[]>;
    /**
     * The name of the volume. Needs to be unique per location.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
     */
    network?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The protocol of the volume. Allowed combinations are `['NFSV3']`, `['NFSV4']`, `['SMB']`, `['NFSV3', 'NFSV4']`, `['SMB', 'NFSV3']` and `['SMB', 'NFSV4']`.
     * Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Private Service Access allocated range. Inherited from storage pool.
     */
    psaRange?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the replica zone for regional volume.
     */
    replicaZone?: pulumi.Input<string>;
    /**
     * Used to create this volume from a snapshot (= cloning) or an backup.
     * Structure is documented below.
     */
    restoreParameters?: pulumi.Input<inputs.netapp.VolumeRestoreParameters>;
    /**
     * List of actions that are restricted on this volume.
     * Each value may be one of: `DELETE`.
     */
    restrictedActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
     * Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
     * Possible values are: `NTFS`, `UNIX`.
     */
    securityStyle?: pulumi.Input<string>;
    /**
     * Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTERME, STANDARD, FLEX.
     */
    serviceLevel?: pulumi.Input<string>;
    /**
     * Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
     */
    shareName?: pulumi.Input<string>;
    /**
     * Settings for volumes with SMB access.
     * Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
     */
    smbSettings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots. Will enable "Previous Versions" support for SMB.
     */
    snapshotDirectory?: pulumi.Input<boolean>;
    /**
     * Snapshot policy defines the schedule for automatic snapshot creation.
     * To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
     * Structure is documented below.
     */
    snapshotPolicy?: pulumi.Input<inputs.netapp.VolumeSnapshotPolicy>;
    /**
     * State of the volume.
     */
    state?: pulumi.Input<string>;
    /**
     * State details of the volume.
     */
    stateDetails?: pulumi.Input<string>;
    /**
     * Name of the storage pool to create the volume in. Pool needs enough spare capacity to accomodate the volume.
     */
    storagePool?: pulumi.Input<string>;
    /**
     * Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
     */
    unixPermissions?: pulumi.Input<string>;
    /**
     * Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
     */
    usedGib?: pulumi.Input<string>;
    /**
     * Specifies the active zone for regional volume.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * Backup configuration for the volume.
     * Structure is documented below.
     */
    backupConfig?: pulumi.Input<inputs.netapp.VolumeBackupConfig>;
    /**
     * Capacity of the volume (in GiB).
     */
    capacityGib: pulumi.Input<string>;
    /**
     * Policy to determine if the volume should be deleted forcefully.
     * Volumes may have nested snapshot resources. Deleting such a volume will fail.
     * Setting this parameter to FORCE will delete volumes including nested snapshots.
     * Possible values: DEFAULT, FORCE.
     */
    deletionPolicy?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Export policy of the volume for NFSV3 and/or NFSV4.1 access.
     * Structure is documented below.
     */
    exportPolicy?: pulumi.Input<inputs.netapp.VolumeExportPolicy>;
    /**
     * Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
     */
    kerberosEnabled?: pulumi.Input<boolean>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
     */
    location: pulumi.Input<string>;
    /**
     * The name of the volume. Needs to be unique per location.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The protocol of the volume. Allowed combinations are `['NFSV3']`, `['NFSV4']`, `['SMB']`, `['NFSV3', 'NFSV4']`, `['SMB', 'NFSV3']` and `['SMB', 'NFSV4']`.
     * Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
     */
    protocols: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to create this volume from a snapshot (= cloning) or an backup.
     * Structure is documented below.
     */
    restoreParameters?: pulumi.Input<inputs.netapp.VolumeRestoreParameters>;
    /**
     * List of actions that are restricted on this volume.
     * Each value may be one of: `DELETE`.
     */
    restrictedActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
     * Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
     * Possible values are: `NTFS`, `UNIX`.
     */
    securityStyle?: pulumi.Input<string>;
    /**
     * Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
     */
    shareName: pulumi.Input<string>;
    /**
     * Settings for volumes with SMB access.
     * Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
     */
    smbSettings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots. Will enable "Previous Versions" support for SMB.
     */
    snapshotDirectory?: pulumi.Input<boolean>;
    /**
     * Snapshot policy defines the schedule for automatic snapshot creation.
     * To disable automatic snapshot creation you have to remove the whole snapshotPolicy block.
     * Structure is documented below.
     */
    snapshotPolicy?: pulumi.Input<inputs.netapp.VolumeSnapshotPolicy>;
    /**
     * Name of the storage pool to create the volume in. Pool needs enough spare capacity to accomodate the volume.
     */
    storagePool: pulumi.Input<string>;
    /**
     * Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
     */
    unixPermissions?: pulumi.Input<string>;
}
