// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ActiveDirectory is the public representation of the active directory config.
 *
 * To get more information about ActiveDirectory, see:
 *
 * * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.activeDirectories)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/active-directory/about-ad)
 *
 * ## Example Usage
 *
 * ### Netapp Active Directory Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const testActiveDirectoryFull = new gcp.netapp.ActiveDirectory("test_active_directory_full", {
 *     name: "test-active-directory-full",
 *     location: "us-central1",
 *     domain: "ad.internal",
 *     dns: "172.30.64.3",
 *     netBiosPrefix: "smbserver",
 *     username: "user",
 *     password: "pass",
 *     aesEncryption: false,
 *     backupOperators: [
 *         "test1",
 *         "test2",
 *     ],
 *     administrators: [
 *         "test1",
 *         "test2",
 *     ],
 *     description: "ActiveDirectory is the public representation of the active directory config.",
 *     encryptDcConnections: false,
 *     kdcHostname: "hostname",
 *     kdcIp: "10.10.0.11",
 *     labels: {
 *         foo: "bar",
 *     },
 *     ldapSigning: false,
 *     nfsUsersWithLdap: false,
 *     organizationalUnit: "CN=Computers",
 *     securityOperators: [
 *         "test1",
 *         "test2",
 *     ],
 *     site: "test-site",
 * });
 * ```
 *
 * ## Import
 *
 * ActiveDirectory can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, ActiveDirectory can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:netapp/activeDirectory:ActiveDirectory default projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/activeDirectory:ActiveDirectory default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/activeDirectory:ActiveDirectory default {{location}}/{{name}}
 * ```
 */
export class ActiveDirectory extends pulumi.CustomResource {
    /**
     * Get an existing ActiveDirectory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActiveDirectoryState, opts?: pulumi.CustomResourceOptions): ActiveDirectory {
        return new ActiveDirectory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:netapp/activeDirectory:ActiveDirectory';

    /**
     * Returns true if the given object is an instance of ActiveDirectory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActiveDirectory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActiveDirectory.__pulumiType;
    }

    /**
     * Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
     */
    declare public readonly administrators: pulumi.Output<string[] | undefined>;
    /**
     * Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
     */
    declare public readonly aesEncryption: pulumi.Output<boolean | undefined>;
    /**
     * Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
     */
    declare public readonly backupOperators: pulumi.Output<string[] | undefined>;
    /**
     * Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * An optional description of this resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Comma separated list of DNS server IP addresses for the Active Directory domain.
     */
    declare public readonly dns: pulumi.Output<string>;
    /**
     * Fully qualified domain name for the Active Directory domain.
     */
    declare public readonly domain: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
     */
    declare public readonly encryptDcConnections: pulumi.Output<boolean | undefined>;
    /**
     * Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
     */
    declare public readonly kdcHostname: pulumi.Output<string | undefined>;
    /**
     * IP address of the Active Directory server used as Kerberos Key Distribution Center.
     */
    declare public readonly kdcIp: pulumi.Output<string | undefined>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies whether or not the LDAP traffic needs to be signed.
     */
    declare public readonly ldapSigning: pulumi.Output<boolean | undefined>;
    /**
     * Name of the region for the policy to apply to.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The resource name of the Active Directory pool. Needs to be unique per location.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * NetBIOS name prefix of the server to be created.
     * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
     * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
     */
    declare public readonly netBiosPrefix: pulumi.Output<string>;
    /**
     * Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
     * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
     */
    declare public readonly nfsUsersWithLdap: pulumi.Output<boolean | undefined>;
    /**
     * Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
     * Defaults to `CN=Computers` if left empty.
     */
    declare public readonly organizationalUnit: pulumi.Output<string>;
    declare public readonly password: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
     */
    declare public readonly securityOperators: pulumi.Output<string[] | undefined>;
    /**
     * Specifies an Active Directory site to manage domain controller selection.
     * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
     */
    declare public readonly site: pulumi.Output<string | undefined>;
    /**
     * The state of the Active Directory policy (not the Active Directory itself).
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The state details of the Active Directory.
     */
    declare public /*out*/ readonly stateDetails: pulumi.Output<string>;
    /**
     * Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a ActiveDirectory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActiveDirectoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActiveDirectoryArgs | ActiveDirectoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActiveDirectoryState | undefined;
            resourceInputs["administrators"] = state?.administrators;
            resourceInputs["aesEncryption"] = state?.aesEncryption;
            resourceInputs["backupOperators"] = state?.backupOperators;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["dns"] = state?.dns;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["encryptDcConnections"] = state?.encryptDcConnections;
            resourceInputs["kdcHostname"] = state?.kdcHostname;
            resourceInputs["kdcIp"] = state?.kdcIp;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["ldapSigning"] = state?.ldapSigning;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["netBiosPrefix"] = state?.netBiosPrefix;
            resourceInputs["nfsUsersWithLdap"] = state?.nfsUsersWithLdap;
            resourceInputs["organizationalUnit"] = state?.organizationalUnit;
            resourceInputs["password"] = state?.password;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["securityOperators"] = state?.securityOperators;
            resourceInputs["site"] = state?.site;
            resourceInputs["state"] = state?.state;
            resourceInputs["stateDetails"] = state?.stateDetails;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as ActiveDirectoryArgs | undefined;
            if (args?.dns === undefined && !opts.urn) {
                throw new Error("Missing required property 'dns'");
            }
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.netBiosPrefix === undefined && !opts.urn) {
                throw new Error("Missing required property 'netBiosPrefix'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["administrators"] = args?.administrators;
            resourceInputs["aesEncryption"] = args?.aesEncryption;
            resourceInputs["backupOperators"] = args?.backupOperators;
            resourceInputs["description"] = args?.description;
            resourceInputs["dns"] = args?.dns;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["encryptDcConnections"] = args?.encryptDcConnections;
            resourceInputs["kdcHostname"] = args?.kdcHostname;
            resourceInputs["kdcIp"] = args?.kdcIp;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["ldapSigning"] = args?.ldapSigning;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["netBiosPrefix"] = args?.netBiosPrefix;
            resourceInputs["nfsUsersWithLdap"] = args?.nfsUsersWithLdap;
            resourceInputs["organizationalUnit"] = args?.organizationalUnit;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["project"] = args?.project;
            resourceInputs["securityOperators"] = args?.securityOperators;
            resourceInputs["site"] = args?.site;
            resourceInputs["username"] = args?.username;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "password", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ActiveDirectory.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ActiveDirectory resources.
 */
export interface ActiveDirectoryState {
    /**
     * Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
     */
    administrators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
     */
    aesEncryption?: pulumi.Input<boolean>;
    /**
     * Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
     */
    backupOperators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Comma separated list of DNS server IP addresses for the Active Directory domain.
     */
    dns?: pulumi.Input<string>;
    /**
     * Fully qualified domain name for the Active Directory domain.
     */
    domain?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
     */
    encryptDcConnections?: pulumi.Input<boolean>;
    /**
     * Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
     */
    kdcHostname?: pulumi.Input<string>;
    /**
     * IP address of the Active Directory server used as Kerberos Key Distribution Center.
     */
    kdcIp?: pulumi.Input<string>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies whether or not the LDAP traffic needs to be signed.
     */
    ldapSigning?: pulumi.Input<boolean>;
    /**
     * Name of the region for the policy to apply to.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the Active Directory pool. Needs to be unique per location.
     */
    name?: pulumi.Input<string>;
    /**
     * NetBIOS name prefix of the server to be created.
     * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
     * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
     */
    netBiosPrefix?: pulumi.Input<string>;
    /**
     * Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
     * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
     */
    nfsUsersWithLdap?: pulumi.Input<boolean>;
    /**
     * Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
     * Defaults to `CN=Computers` if left empty.
     */
    organizationalUnit?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
     */
    securityOperators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies an Active Directory site to manage domain controller selection.
     * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
     */
    site?: pulumi.Input<string>;
    /**
     * The state of the Active Directory policy (not the Active Directory itself).
     */
    state?: pulumi.Input<string>;
    /**
     * The state details of the Active Directory.
     */
    stateDetails?: pulumi.Input<string>;
    /**
     * Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ActiveDirectory resource.
 */
export interface ActiveDirectoryArgs {
    /**
     * Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
     */
    administrators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
     */
    aesEncryption?: pulumi.Input<boolean>;
    /**
     * Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
     */
    backupOperators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Comma separated list of DNS server IP addresses for the Active Directory domain.
     */
    dns: pulumi.Input<string>;
    /**
     * Fully qualified domain name for the Active Directory domain.
     */
    domain: pulumi.Input<string>;
    /**
     * If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
     */
    encryptDcConnections?: pulumi.Input<boolean>;
    /**
     * Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
     */
    kdcHostname?: pulumi.Input<string>;
    /**
     * IP address of the Active Directory server used as Kerberos Key Distribution Center.
     */
    kdcIp?: pulumi.Input<string>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies whether or not the LDAP traffic needs to be signed.
     */
    ldapSigning?: pulumi.Input<boolean>;
    /**
     * Name of the region for the policy to apply to.
     */
    location: pulumi.Input<string>;
    /**
     * The resource name of the Active Directory pool. Needs to be unique per location.
     */
    name?: pulumi.Input<string>;
    /**
     * NetBIOS name prefix of the server to be created.
     * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
     * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
     */
    netBiosPrefix: pulumi.Input<string>;
    /**
     * Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
     * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
     */
    nfsUsersWithLdap?: pulumi.Input<boolean>;
    /**
     * Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
     * Defaults to `CN=Computers` if left empty.
     */
    organizationalUnit?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
     */
    securityOperators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies an Active Directory site to manage domain controller selection.
     * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
     */
    site?: pulumi.Input<string>;
    /**
     * Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
     */
    username: pulumi.Input<string>;
}
