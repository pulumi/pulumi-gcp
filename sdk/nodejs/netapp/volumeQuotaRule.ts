// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * QuotaRule specifies the maximum capacity a user or group can use within a volume. They can be used for creating default and individual quota rules.
 *
 * To get more information about VolumeQuotaRule, see:
 *
 * * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.volumes.quotaRules)
 * * How-to Guides
 *     * [Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/volumes/overview#volume_user_and_group_quotas)
 *
 * ## Example Usage
 *
 * ### Netapp Volume Quota Rule Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = gcp.compute.getNetwork({
 *     name: "test-network",
 * });
 * const defaultStoragePool = new gcp.netapp.StoragePool("default", {
 *     name: "test-pool",
 *     location: "us-west2",
 *     serviceLevel: "PREMIUM",
 *     capacityGib: "2048",
 *     network: _default.then(_default => _default.id),
 * });
 * const defaultVolume = new gcp.netapp.Volume("default", {
 *     location: defaultStoragePool.location,
 *     name: "test-volume",
 *     capacityGib: "100",
 *     shareName: "test-volume",
 *     storagePool: defaultStoragePool.name,
 *     protocols: ["NFSV3"],
 * });
 * const testQuotaRule = new gcp.netapp.VolumeQuotaRule("test_quota_rule", {
 *     location: defaultVolume.location,
 *     volumeName: defaultVolume.name,
 *     type: "DEFAULT_USER_QUOTA",
 *     diskLimitMib: 50,
 *     name: "test-volume-quota-rule",
 * }, {
 *     dependsOn: [defaultVolume],
 * });
 * ```
 *
 * ## Import
 *
 * VolumeQuotaRule can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/quotaRules/{{name}}`
 *
 * * `{{project}}/{{location}}/{{volume_name}}/{{name}}`
 *
 * * `{{location}}/{{volume_name}}/{{name}}`
 *
 * When using the `pulumi import` command, VolumeQuotaRule can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:netapp/volumeQuotaRule:VolumeQuotaRule default projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/quotaRules/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/volumeQuotaRule:VolumeQuotaRule default {{project}}/{{location}}/{{volume_name}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/volumeQuotaRule:VolumeQuotaRule default {{location}}/{{volume_name}}/{{name}}
 * ```
 */
export class VolumeQuotaRule extends pulumi.CustomResource {
    /**
     * Get an existing VolumeQuotaRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeQuotaRuleState, opts?: pulumi.CustomResourceOptions): VolumeQuotaRule {
        return new VolumeQuotaRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:netapp/volumeQuotaRule:VolumeQuotaRule';

    /**
     * Returns true if the given object is an instance of VolumeQuotaRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VolumeQuotaRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeQuotaRule.__pulumiType;
    }

    /**
     * Create time of the quota rule. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description for the quota rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The maximum allowed capacity in MiB.
     */
    public readonly diskLimitMib!: pulumi.Output<number>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Labels as key value pairs of the quota rule. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Loction of the quotaRule. QuotaRules are child resources of volumes and live in the same location.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The resource name of the quotaRule.
     *
     *
     * - - -
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The state of the quota rule. Possible Values : [STATE_UNSPECIFIED, CREATING, UPDATING, READY, DELETING, ERROR]
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * State details of the quota rule
     */
    public /*out*/ readonly stateDetails!: pulumi.Output<string>;
    /**
     * The quota rule applies to the specified user or group.
     * Valid targets for volumes with NFS protocol enabled:
     * - UNIX UID for individual user quota
     * - UNIX GID for individual group quota
     * Valid targets for volumes with SMB protocol enabled:
     * - Windows SID for individual user quota
     * Leave empty for default quotas
     */
    public readonly target!: pulumi.Output<string | undefined>;
    /**
     * Types of Quota Rule.
     * Possible values are: `INDIVIDUAL_USER_QUOTA`, `INDIVIDUAL_GROUP_QUOTA`, `DEFAULT_USER_QUOTA`, `DEFAULT_GROUP_QUOTA`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Name of the volume to create the quotaRule in.
     */
    public readonly volumeName!: pulumi.Output<string>;

    /**
     * Create a VolumeQuotaRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeQuotaRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeQuotaRuleArgs | VolumeQuotaRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeQuotaRuleState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskLimitMib"] = state ? state.diskLimitMib : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateDetails"] = state ? state.stateDetails : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["volumeName"] = state ? state.volumeName : undefined;
        } else {
            const args = argsOrState as VolumeQuotaRuleArgs | undefined;
            if ((!args || args.diskLimitMib === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskLimitMib'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.volumeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskLimitMib"] = args ? args.diskLimitMib : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["volumeName"] = args ? args.volumeName : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VolumeQuotaRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VolumeQuotaRule resources.
 */
export interface VolumeQuotaRuleState {
    /**
     * Create time of the quota rule. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description for the quota rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The maximum allowed capacity in MiB.
     */
    diskLimitMib?: pulumi.Input<number>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Labels as key value pairs of the quota rule. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Loction of the quotaRule. QuotaRules are child resources of volumes and live in the same location.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the quotaRule.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The state of the quota rule. Possible Values : [STATE_UNSPECIFIED, CREATING, UPDATING, READY, DELETING, ERROR]
     */
    state?: pulumi.Input<string>;
    /**
     * State details of the quota rule
     */
    stateDetails?: pulumi.Input<string>;
    /**
     * The quota rule applies to the specified user or group.
     * Valid targets for volumes with NFS protocol enabled:
     * - UNIX UID for individual user quota
     * - UNIX GID for individual group quota
     * Valid targets for volumes with SMB protocol enabled:
     * - Windows SID for individual user quota
     * Leave empty for default quotas
     */
    target?: pulumi.Input<string>;
    /**
     * Types of Quota Rule.
     * Possible values are: `INDIVIDUAL_USER_QUOTA`, `INDIVIDUAL_GROUP_QUOTA`, `DEFAULT_USER_QUOTA`, `DEFAULT_GROUP_QUOTA`.
     */
    type?: pulumi.Input<string>;
    /**
     * Name of the volume to create the quotaRule in.
     */
    volumeName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VolumeQuotaRule resource.
 */
export interface VolumeQuotaRuleArgs {
    /**
     * Description for the quota rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The maximum allowed capacity in MiB.
     */
    diskLimitMib: pulumi.Input<number>;
    /**
     * Labels as key value pairs of the quota rule. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Loction of the quotaRule. QuotaRules are child resources of volumes and live in the same location.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the quotaRule.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The quota rule applies to the specified user or group.
     * Valid targets for volumes with NFS protocol enabled:
     * - UNIX UID for individual user quota
     * - UNIX GID for individual group quota
     * Valid targets for volumes with SMB protocol enabled:
     * - Windows SID for individual user quota
     * Leave empty for default quotas
     */
    target?: pulumi.Input<string>;
    /**
     * Types of Quota Rule.
     * Possible values are: `INDIVIDUAL_USER_QUOTA`, `INDIVIDUAL_GROUP_QUOTA`, `DEFAULT_USER_QUOTA`, `DEFAULT_GROUP_QUOTA`.
     */
    type: pulumi.Input<string>;
    /**
     * Name of the volume to create the quotaRule in.
     */
    volumeName: pulumi.Input<string>;
}
