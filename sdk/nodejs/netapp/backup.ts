// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * NetApp Volumes supports volume backups, which are copies of your volumes
 * stored independently from the volume. Backups are stored in backup vaults,
 * which are containers for backups. If a volume is lost or deleted, you can
 * use backups to restore your data to a new volume.
 *
 * When you create the first backup of a volume, all of the volume's used
 * data is sent to the backup vault. Subsequent backups of the same volume
 * only include data that has changed from the previous backup. This allows
 * for fast incremental-forever backups and reduces the required capacity
 * inside the backup vault.
 *
 * You can create manual and scheduled backups. Manual backups can be taken
 * from a volume or from an existing volume snapshot. Scheduled backups
 * require a backup policy.
 *
 * To get more information about backup, see:
 *
 * * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.backupVaults.backups)
 * * How-to Guides
 *     * [Documentation](https://cloud.google.com/netapp/volumes/docs/protect-data/about-volume-backups)
 *
 * ## Example Usage
 *
 * ### Netapp Backup
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default = gcp.compute.getNetwork({
 *     name: "",
 * });
 * const defaultStoragePool = new gcp.netapp.StoragePool("default", {
 *     name: "backup-pool",
 *     location: "us-central1",
 *     serviceLevel: "PREMIUM",
 *     capacityGib: "2048",
 *     network: _default.then(_default => _default.id),
 * });
 * const defaultBackupVault = new gcp.netapp.BackupVault("default", {
 *     name: "backup-vault",
 *     location: defaultStoragePool.location,
 * });
 * const defaultVolume = new gcp.netapp.Volume("default", {
 *     name: "backup-volume",
 *     location: defaultStoragePool.location,
 *     capacityGib: "100",
 *     shareName: "backup-volume",
 *     storagePool: defaultStoragePool.name,
 *     protocols: ["NFSV3"],
 *     deletionPolicy: "FORCE",
 *     backupConfig: {
 *         backupVault: defaultBackupVault.id,
 *     },
 * });
 * const testBackup = new gcp.netapp.Backup("test_backup", {
 *     name: "test-backup",
 *     location: defaultBackupVault.location,
 *     vaultName: defaultBackupVault.name,
 *     sourceVolume: defaultVolume.id,
 * });
 * ```
 *
 * ## Import
 *
 * backup can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/backupVaults/{{vault_name}}/backups/{{name}}`
 *
 * * `{{project}}/{{location}}/{{vault_name}}/{{name}}`
 *
 * * `{{location}}/{{vault_name}}/{{name}}`
 *
 * When using the `pulumi import` command, backup can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:netapp/backup:Backup default projects/{{project}}/locations/{{location}}/backupVaults/{{vault_name}}/backups/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/backup:Backup default {{project}}/{{location}}/{{vault_name}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/backup:Backup default {{location}}/{{vault_name}}/{{name}}
 * ```
 */
export class Backup extends pulumi.CustomResource {
    /**
     * Get an existing Backup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupState, opts?: pulumi.CustomResourceOptions): Backup {
        return new Backup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:netapp/backup:Backup';

    /**
     * Returns true if the given object is an instance of Backup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Backup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backup.__pulumiType;
    }

    /**
     * Type of backup, manually created or created by a backup policy. Possible Values : [TYPE_UNSPECIFIED, MANUAL, SCHEDULED]
     */
    public /*out*/ readonly backupType!: pulumi.Output<string>;
    /**
     * Backups of a volume build incrementally on top of each other. They form a "backup chain".
     * Total size of all backups in a chain in bytes = baseline backup size + sum(incremental backup size)
     */
    public /*out*/ readonly chainStorageBytes!: pulumi.Output<string>;
    /**
     * Create time of the backup. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Location of the backup.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the backup. Needs to be unique per location.
     *
     *
     * - - -
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * If specified, backup will be created from the given snapshot. If not specified,
     * there will be a new snapshot taken to initiate the backup creation.
     * Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
     */
    public readonly sourceSnapshot!: pulumi.Output<string | undefined>;
    /**
     * ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
     */
    public readonly sourceVolume!: pulumi.Output<string | undefined>;
    /**
     * The state of the Backup Vault. Possible Values : [STATE_UNSPECIFIED, CREATING, UPLOADING, READY, DELETING, ERROR, UPDATING]
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Name of the backup vault to store the backup in.
     */
    public readonly vaultName!: pulumi.Output<string>;
    /**
     * Size of the file system when the backup was created. When creating a new volume from the backup, the volume capacity will have to be at least as big.
     */
    public /*out*/ readonly volumeUsageBytes!: pulumi.Output<string>;

    /**
     * Create a Backup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupArgs | BackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupState | undefined;
            resourceInputs["backupType"] = state ? state.backupType : undefined;
            resourceInputs["chainStorageBytes"] = state ? state.chainStorageBytes : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["sourceSnapshot"] = state ? state.sourceSnapshot : undefined;
            resourceInputs["sourceVolume"] = state ? state.sourceVolume : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["vaultName"] = state ? state.vaultName : undefined;
            resourceInputs["volumeUsageBytes"] = state ? state.volumeUsageBytes : undefined;
        } else {
            const args = argsOrState as BackupArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.vaultName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["sourceSnapshot"] = args ? args.sourceSnapshot : undefined;
            resourceInputs["sourceVolume"] = args ? args.sourceVolume : undefined;
            resourceInputs["vaultName"] = args ? args.vaultName : undefined;
            resourceInputs["backupType"] = undefined /*out*/;
            resourceInputs["chainStorageBytes"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["volumeUsageBytes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Backup.__pulumiType, name, resourceInputs, opts, false /*remote*/);
    }
}

/**
 * Input properties used for looking up and filtering Backup resources.
 */
export interface BackupState {
    /**
     * Type of backup, manually created or created by a backup policy. Possible Values : [TYPE_UNSPECIFIED, MANUAL, SCHEDULED]
     */
    backupType?: pulumi.Input<string>;
    /**
     * Backups of a volume build incrementally on top of each other. They form a "backup chain".
     * Total size of all backups in a chain in bytes = baseline backup size + sum(incremental backup size)
     */
    chainStorageBytes?: pulumi.Input<string>;
    /**
     * Create time of the backup. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location of the backup.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the backup. Needs to be unique per location.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If specified, backup will be created from the given snapshot. If not specified,
     * there will be a new snapshot taken to initiate the backup creation.
     * Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
     */
    sourceSnapshot?: pulumi.Input<string>;
    /**
     * ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
     */
    sourceVolume?: pulumi.Input<string>;
    /**
     * The state of the Backup Vault. Possible Values : [STATE_UNSPECIFIED, CREATING, UPLOADING, READY, DELETING, ERROR, UPDATING]
     */
    state?: pulumi.Input<string>;
    /**
     * Name of the backup vault to store the backup in.
     */
    vaultName?: pulumi.Input<string>;
    /**
     * Size of the file system when the backup was created. When creating a new volume from the backup, the volume capacity will have to be at least as big.
     */
    volumeUsageBytes?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Backup resource.
 */
export interface BackupArgs {
    /**
     * A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location of the backup.
     */
    location: pulumi.Input<string>;
    /**
     * The resource name of the backup. Needs to be unique per location.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * If specified, backup will be created from the given snapshot. If not specified,
     * there will be a new snapshot taken to initiate the backup creation.
     * Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
     */
    sourceSnapshot?: pulumi.Input<string>;
    /**
     * ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
     */
    sourceVolume?: pulumi.Input<string>;
    /**
     * Name of the backup vault to store the backup in.
     */
    vaultName: pulumi.Input<string>;
}
