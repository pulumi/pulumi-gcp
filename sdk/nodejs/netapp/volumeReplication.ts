// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Netapp Volume Replication Create
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default = gcp.compute.getNetwork({
 *     name: "test-network",
 * });
 * const sourcePool = new gcp.netapp.StoragePool("source_pool", {
 *     name: "source-pool",
 *     location: "us-central1",
 *     serviceLevel: "PREMIUM",
 *     capacityGib: "2048",
 *     network: _default.then(_default => _default.id),
 * });
 * const destinationPool = new gcp.netapp.StoragePool("destination_pool", {
 *     name: "destination-pool",
 *     location: "us-west2",
 *     serviceLevel: "PREMIUM",
 *     capacityGib: "2048",
 *     network: _default.then(_default => _default.id),
 * });
 * const sourceVolume = new gcp.netapp.Volume("source_volume", {
 *     location: sourcePool.location,
 *     name: "source-volume",
 *     capacityGib: "100",
 *     shareName: "source-volume",
 *     storagePool: sourcePool.name,
 *     protocols: ["NFSV3"],
 *     deletionPolicy: "FORCE",
 * });
 * const testReplication = new gcp.netapp.VolumeReplication("test_replication", {
 *     location: sourceVolume.location,
 *     volumeName: sourceVolume.name,
 *     name: "test-replication",
 *     replicationSchedule: "EVERY_10_MINUTES",
 *     description: "This is a replication resource",
 *     destinationVolumeParameters: {
 *         storagePool: destinationPool.id,
 *         volumeId: "destination-volume",
 *         shareName: "source-volume",
 *         description: "This is a replicated volume",
 *     },
 *     deleteDestinationVolume: true,
 *     waitForMirror: true,
 * }, {
 *     dependsOn: [sourceVolume],
 * });
 * ```
 *
 * ## Import
 *
 * VolumeReplication can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/replications/{{name}}`
 *
 * * `{{project}}/{{location}}/{{volume_name}}/{{name}}`
 *
 * * `{{location}}/{{volume_name}}/{{name}}`
 *
 * When using the `pulumi import` command, VolumeReplication can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/replications/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default {{project}}/{{location}}/{{volume_name}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default {{location}}/{{volume_name}}/{{name}}
 * ```
 */
export class VolumeReplication extends pulumi.CustomResource {
    /**
     * Get an existing VolumeReplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeReplicationState, opts?: pulumi.CustomResourceOptions): VolumeReplication {
        return new VolumeReplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:netapp/volumeReplication:VolumeReplication';

    /**
     * Returns true if the given object is an instance of VolumeReplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VolumeReplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeReplication.__pulumiType;
    }

    /**
     * Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly deleteDestinationVolume!: pulumi.Output<boolean | undefined>;
    /**
     * An description of this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
     */
    public /*out*/ readonly destinationVolume!: pulumi.Output<string>;
    /**
     * Destination volume parameters.
     * Structure is documented below.
     */
    public readonly destinationVolumeParameters!: pulumi.Output<outputs.netapp.VolumeReplicationDestinationVolumeParameters | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
     * currently receives an update and stopping the update might be undesirable. Set this parameter to true
     * to stop anyway. All data transferred to the destination will be discarded and content of destination
     * volume will remain at the state of the last successful update. Default is false.
     */
    public readonly forceStopping!: pulumi.Output<boolean | undefined>;
    /**
     * Condition of the relationship. Can be one of the following:
     * - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
     * - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
     */
    public /*out*/ readonly healthy!: pulumi.Output<boolean>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of region for this resource. The resource needs to be created in the region of the destination volume.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
     * in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
     * transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
     * currently receives an update. Updated every 5 minutes.
     */
    public /*out*/ readonly mirrorState!: pulumi.Output<string>;
    /**
     * The name of the replication. Needs to be unique per location.
     *
     *
     * - - -
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
     * and act independently from the source volume.
     * Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
     * done to the destination volume with the content of the source volume.
     */
    public readonly replicationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the replication interval.
     * Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
     */
    public readonly replicationSchedule!: pulumi.Output<string>;
    /**
     * Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
     * the source or destination volume. For resume and revert and resume operations it is critical to understand
     * which volume is the source volume, since it will overwrite changes done to the destination volume.
     */
    public /*out*/ readonly role!: pulumi.Output<string>;
    /**
     * Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
     */
    public /*out*/ readonly sourceVolume!: pulumi.Output<string>;
    /**
     * Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * State details of the replication resource.
     */
    public /*out*/ readonly stateDetails!: pulumi.Output<string>;
    /**
     * Replication transfer statistics. All statistics are updated every 5 minutes.
     * Structure is documented below.
     */
    public /*out*/ readonly transferStats!: pulumi.Output<outputs.netapp.VolumeReplicationTransferStat[]>;
    /**
     * The name of the existing source volume.
     */
    public readonly volumeName!: pulumi.Output<string>;
    public readonly waitForMirror!: pulumi.Output<boolean | undefined>;

    /**
     * Create a VolumeReplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeReplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeReplicationArgs | VolumeReplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeReplicationState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteDestinationVolume"] = state ? state.deleteDestinationVolume : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationVolume"] = state ? state.destinationVolume : undefined;
            resourceInputs["destinationVolumeParameters"] = state ? state.destinationVolumeParameters : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["forceStopping"] = state ? state.forceStopping : undefined;
            resourceInputs["healthy"] = state ? state.healthy : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mirrorState"] = state ? state.mirrorState : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["replicationEnabled"] = state ? state.replicationEnabled : undefined;
            resourceInputs["replicationSchedule"] = state ? state.replicationSchedule : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["sourceVolume"] = state ? state.sourceVolume : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateDetails"] = state ? state.stateDetails : undefined;
            resourceInputs["transferStats"] = state ? state.transferStats : undefined;
            resourceInputs["volumeName"] = state ? state.volumeName : undefined;
            resourceInputs["waitForMirror"] = state ? state.waitForMirror : undefined;
        } else {
            const args = argsOrState as VolumeReplicationArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.replicationSchedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationSchedule'");
            }
            if ((!args || args.volumeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeName'");
            }
            resourceInputs["deleteDestinationVolume"] = args ? args.deleteDestinationVolume : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationVolumeParameters"] = args ? args.destinationVolumeParameters : undefined;
            resourceInputs["forceStopping"] = args ? args.forceStopping : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["replicationEnabled"] = args ? args.replicationEnabled : undefined;
            resourceInputs["replicationSchedule"] = args ? args.replicationSchedule : undefined;
            resourceInputs["volumeName"] = args ? args.volumeName : undefined;
            resourceInputs["waitForMirror"] = args ? args.waitForMirror : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["destinationVolume"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["healthy"] = undefined /*out*/;
            resourceInputs["mirrorState"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["sourceVolume"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
            resourceInputs["transferStats"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VolumeReplication.__pulumiType, name, resourceInputs, opts, false /*remote*/);
    }
}

/**
 * Input properties used for looking up and filtering VolumeReplication resources.
 */
export interface VolumeReplicationState {
    /**
     * Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
     */
    createTime?: pulumi.Input<string>;
    deleteDestinationVolume?: pulumi.Input<boolean>;
    /**
     * An description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
     */
    destinationVolume?: pulumi.Input<string>;
    /**
     * Destination volume parameters.
     * Structure is documented below.
     */
    destinationVolumeParameters?: pulumi.Input<inputs.netapp.VolumeReplicationDestinationVolumeParameters>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
     * currently receives an update and stopping the update might be undesirable. Set this parameter to true
     * to stop anyway. All data transferred to the destination will be discarded and content of destination
     * volume will remain at the state of the last successful update. Default is false.
     */
    forceStopping?: pulumi.Input<boolean>;
    /**
     * Condition of the relationship. Can be one of the following:
     * - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
     * - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
     */
    healthy?: pulumi.Input<boolean>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of region for this resource. The resource needs to be created in the region of the destination volume.
     */
    location?: pulumi.Input<string>;
    /**
     * Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
     * in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
     * transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
     * currently receives an update. Updated every 5 minutes.
     */
    mirrorState?: pulumi.Input<string>;
    /**
     * The name of the replication. Needs to be unique per location.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
     * and act independently from the source volume.
     * Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
     * done to the destination volume with the content of the source volume.
     */
    replicationEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the replication interval.
     * Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
     */
    replicationSchedule?: pulumi.Input<string>;
    /**
     * Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
     * the source or destination volume. For resume and revert and resume operations it is critical to understand
     * which volume is the source volume, since it will overwrite changes done to the destination volume.
     */
    role?: pulumi.Input<string>;
    /**
     * Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
     */
    sourceVolume?: pulumi.Input<string>;
    /**
     * Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
     */
    state?: pulumi.Input<string>;
    /**
     * State details of the replication resource.
     */
    stateDetails?: pulumi.Input<string>;
    /**
     * Replication transfer statistics. All statistics are updated every 5 minutes.
     * Structure is documented below.
     */
    transferStats?: pulumi.Input<pulumi.Input<inputs.netapp.VolumeReplicationTransferStat>[]>;
    /**
     * The name of the existing source volume.
     */
    volumeName?: pulumi.Input<string>;
    waitForMirror?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a VolumeReplication resource.
 */
export interface VolumeReplicationArgs {
    deleteDestinationVolume?: pulumi.Input<boolean>;
    /**
     * An description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Destination volume parameters.
     * Structure is documented below.
     */
    destinationVolumeParameters?: pulumi.Input<inputs.netapp.VolumeReplicationDestinationVolumeParameters>;
    /**
     * Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
     * currently receives an update and stopping the update might be undesirable. Set this parameter to true
     * to stop anyway. All data transferred to the destination will be discarded and content of destination
     * volume will remain at the state of the last successful update. Default is false.
     */
    forceStopping?: pulumi.Input<boolean>;
    /**
     * Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of region for this resource. The resource needs to be created in the region of the destination volume.
     */
    location: pulumi.Input<string>;
    /**
     * The name of the replication. Needs to be unique per location.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
     * and act independently from the source volume.
     * Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
     * done to the destination volume with the content of the source volume.
     */
    replicationEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the replication interval.
     * Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
     */
    replicationSchedule: pulumi.Input<string>;
    /**
     * The name of the existing source volume.
     */
    volumeName: pulumi.Input<string>;
    waitForMirror?: pulumi.Input<boolean>;
}
