// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ActiveDirectoryArgs, ActiveDirectoryState } from "./activeDirectory";
export type ActiveDirectory = import("./activeDirectory").ActiveDirectory;
export const ActiveDirectory: typeof import("./activeDirectory").ActiveDirectory = null as any;
utilities.lazyLoad(exports, ["ActiveDirectory"], () => require("./activeDirectory"));

export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { BackupPolicyArgs, BackupPolicyState } from "./backupPolicy";
export type BackupPolicy = import("./backupPolicy").BackupPolicy;
export const BackupPolicy: typeof import("./backupPolicy").BackupPolicy = null as any;
utilities.lazyLoad(exports, ["BackupPolicy"], () => require("./backupPolicy"));

export { BackupVaultArgs, BackupVaultState } from "./backupVault";
export type BackupVault = import("./backupVault").BackupVault;
export const BackupVault: typeof import("./backupVault").BackupVault = null as any;
utilities.lazyLoad(exports, ["BackupVault"], () => require("./backupVault"));

export { KmsconfigArgs, KmsconfigState } from "./kmsconfig";
export type Kmsconfig = import("./kmsconfig").Kmsconfig;
export const Kmsconfig: typeof import("./kmsconfig").Kmsconfig = null as any;
utilities.lazyLoad(exports, ["Kmsconfig"], () => require("./kmsconfig"));

export { StoragePoolArgs, StoragePoolState } from "./storagePool";
export type StoragePool = import("./storagePool").StoragePool;
export const StoragePool: typeof import("./storagePool").StoragePool = null as any;
utilities.lazyLoad(exports, ["StoragePool"], () => require("./storagePool"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));

export { VolumeReplicationArgs, VolumeReplicationState } from "./volumeReplication";
export type VolumeReplication = import("./volumeReplication").VolumeReplication;
export const VolumeReplication: typeof import("./volumeReplication").VolumeReplication = null as any;
utilities.lazyLoad(exports, ["VolumeReplication"], () => require("./volumeReplication"));

export { VolumeSnapshotArgs, VolumeSnapshotState } from "./volumeSnapshot";
export type VolumeSnapshot = import("./volumeSnapshot").VolumeSnapshot;
export const VolumeSnapshot: typeof import("./volumeSnapshot").VolumeSnapshot = null as any;
utilities.lazyLoad(exports, ["VolumeSnapshot"], () => require("./volumeSnapshot"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:netapp/activeDirectory:ActiveDirectory":
                return new ActiveDirectory(name, <any>undefined, { urn })
            case "gcp:netapp/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "gcp:netapp/backupPolicy:BackupPolicy":
                return new BackupPolicy(name, <any>undefined, { urn })
            case "gcp:netapp/backupVault:BackupVault":
                return new BackupVault(name, <any>undefined, { urn })
            case "gcp:netapp/kmsconfig:Kmsconfig":
                return new Kmsconfig(name, <any>undefined, { urn })
            case "gcp:netapp/storagePool:StoragePool":
                return new StoragePool(name, <any>undefined, { urn })
            case "gcp:netapp/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "gcp:netapp/volumeReplication:VolumeReplication":
                return new VolumeReplication(name, <any>undefined, { urn })
            case "gcp:netapp/volumeSnapshot:VolumeSnapshot":
                return new VolumeSnapshot(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "netapp/activeDirectory", _module)
pulumi.runtime.registerResourceModule("gcp", "netapp/backup", _module)
pulumi.runtime.registerResourceModule("gcp", "netapp/backupPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "netapp/backupVault", _module)
pulumi.runtime.registerResourceModule("gcp", "netapp/kmsconfig", _module)
pulumi.runtime.registerResourceModule("gcp", "netapp/storagePool", _module)
pulumi.runtime.registerResourceModule("gcp", "netapp/volume", _module)
pulumi.runtime.registerResourceModule("gcp", "netapp/volumeReplication", _module)
pulumi.runtime.registerResourceModule("gcp", "netapp/volumeSnapshot", _module)
