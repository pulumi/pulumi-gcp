// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The Eventarc Enrollment resource
 *
 * To get more information about Enrollment, see:
 *
 * * [API documentation](https://cloud.google.com/eventarc/docs/reference/rest/v1/projects.locations.enrollments)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/eventarc/advanced/docs/receive-events/create-enrollment)
 *
 * ## Example Usage
 *
 * ### Eventarc Enrollment With Pipeline Destination
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const pipeline = new gcp.eventarc.Pipeline("pipeline", {
 *     location: "us-central1",
 *     pipelineId: "some-pipeline",
 *     destinations: [{
 *         httpEndpoint: {
 *             uri: "https://10.77.0.0:80/route",
 *         },
 *         networkConfig: {
 *             networkAttachment: "projects/my-project-name/regions/us-central1/networkAttachments/some-network-attachment",
 *         },
 *     }],
 * });
 * const primary = new gcp.eventarc.Enrollment("primary", {
 *     location: "us-central1",
 *     enrollmentId: "some-enrollment",
 *     messageBus: primaryGoogleEventarcMessageBus.id,
 *     destination: pipeline.id,
 *     celMatch: "message.type == 'google.cloud.dataflow.job.v1beta3.statusChanged'",
 * });
 * const messageBus = new gcp.eventarc.MessageBus("message_bus", {
 *     location: "us-central1",
 *     messageBusId: "some-message-bus",
 * });
 * ```
 *
 * ## Import
 *
 * Enrollment can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/enrollments/{{enrollment_id}}`
 *
 * * `{{project}}/{{location}}/{{enrollment_id}}`
 *
 * * `{{location}}/{{enrollment_id}}`
 *
 * When using the `pulumi import` command, Enrollment can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:eventarc/enrollment:Enrollment default projects/{{project}}/locations/{{location}}/enrollments/{{enrollment_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:eventarc/enrollment:Enrollment default {{project}}/{{location}}/{{enrollment_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:eventarc/enrollment:Enrollment default {{location}}/{{enrollment_id}}
 * ```
 */
export class Enrollment extends pulumi.CustomResource {
    /**
     * Get an existing Enrollment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnrollmentState, opts?: pulumi.CustomResourceOptions): Enrollment {
        return new Enrollment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:eventarc/enrollment:Enrollment';

    /**
     * Returns true if the given object is an instance of Enrollment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Enrollment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Enrollment.__pulumiType;
    }

    /**
     * Resource annotations.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A CEL expression identifying which messages this enrollment applies to.
     */
    public readonly celMatch!: pulumi.Output<string>;
    /**
     * The creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Destination is the Pipeline that the Enrollment is delivering to. It must
     * point to the full resource name of a Pipeline. Format:
     * "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
     */
    public readonly destination!: pulumi.Output<string>;
    /**
     * Resource display name.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The user-provided ID to be assigned to the Enrollment. It should match the
     * format `^a-z?$`.
     *
     *
     * - - -
     */
    public readonly enrollmentId!: pulumi.Output<string>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and might be sent only on update and delete requests to ensure that
     * the client has an up-to-date value before proceeding.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource name of the message bus identifying the source of the messages. It
     * matches the form
     * projects/{project}/locations/{location}/messageBuses/{messageBus}.
     */
    public readonly messageBus!: pulumi.Output<string>;
    /**
     * Resource name of the form
     * projects/{project}/locations/{location}/enrollments/{enrollment}
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Server assigned unique identifier for the channel. The value is a UUID4
     * string and guaranteed to remain unchanged until the resource is deleted.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The last-modified time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Enrollment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnrollmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnrollmentArgs | EnrollmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnrollmentState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["celMatch"] = state ? state.celMatch : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["enrollmentId"] = state ? state.enrollmentId : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["messageBus"] = state ? state.messageBus : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as EnrollmentArgs | undefined;
            if ((!args || args.celMatch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'celMatch'");
            }
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.enrollmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enrollmentId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.messageBus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'messageBus'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["celMatch"] = args ? args.celMatch : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enrollmentId"] = args ? args.enrollmentId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["messageBus"] = args ? args.messageBus : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Enrollment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Enrollment resources.
 */
export interface EnrollmentState {
    /**
     * Resource annotations.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A CEL expression identifying which messages this enrollment applies to.
     */
    celMatch?: pulumi.Input<string>;
    /**
     * The creation time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Destination is the Pipeline that the Enrollment is delivering to. It must
     * point to the full resource name of a Pipeline. Format:
     * "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
     */
    destination?: pulumi.Input<string>;
    /**
     * Resource display name.
     */
    displayName?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The user-provided ID to be assigned to the Enrollment. It should match the
     * format `^a-z?$`.
     *
     *
     * - - -
     */
    enrollmentId?: pulumi.Input<string>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and might be sent only on update and delete requests to ensure that
     * the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * Resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * Resource name of the message bus identifying the source of the messages. It
     * matches the form
     * projects/{project}/locations/{location}/messageBuses/{messageBus}.
     */
    messageBus?: pulumi.Input<string>;
    /**
     * Resource name of the form
     * projects/{project}/locations/{location}/enrollments/{enrollment}
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Server assigned unique identifier for the channel. The value is a UUID4
     * string and guaranteed to remain unchanged until the resource is deleted.
     */
    uid?: pulumi.Input<string>;
    /**
     * The last-modified time.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Enrollment resource.
 */
export interface EnrollmentArgs {
    /**
     * Resource annotations.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A CEL expression identifying which messages this enrollment applies to.
     */
    celMatch: pulumi.Input<string>;
    /**
     * Destination is the Pipeline that the Enrollment is delivering to. It must
     * point to the full resource name of a Pipeline. Format:
     * "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
     */
    destination: pulumi.Input<string>;
    /**
     * Resource display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The user-provided ID to be assigned to the Enrollment. It should match the
     * format `^a-z?$`.
     *
     *
     * - - -
     */
    enrollmentId: pulumi.Input<string>;
    /**
     * Resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location: pulumi.Input<string>;
    /**
     * Resource name of the message bus identifying the source of the messages. It
     * matches the form
     * projects/{project}/locations/{location}/messageBuses/{messageBus}.
     */
    messageBus: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
