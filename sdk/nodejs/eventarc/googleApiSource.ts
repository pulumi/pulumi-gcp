// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The Eventarc GoogleApiSource resource
 *
 * To get more information about GoogleApiSource, see:
 *
 * * [API documentation](https://cloud.google.com/eventarc/docs/reference/rest/v1/projects.locations.googleApiSources)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/eventarc/advanced/docs/publish-events/publish-events-google-sources)
 *
 * ## Example Usage
 *
 * ### Eventarc Google Api Source With Cmek
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const testProject = gcp.organizations.getProject({
 *     projectId: "my-project-name",
 * });
 * const testKeyRing = gcp.kms.getKMSKeyRing({
 *     name: "keyring",
 *     location: "us-central1",
 * });
 * const key = testKeyRing.then(testKeyRing => gcp.kms.getKMSCryptoKey({
 *     name: "key",
 *     keyRing: testKeyRing.id,
 * }));
 * const keyMember = new gcp.kms.CryptoKeyIAMMember("key_member", {
 *     cryptoKeyId: key.then(key => key.id),
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     member: testProject.then(testProject => `serviceAccount:service-${testProject.number}@gcp-sa-eventarc.iam.gserviceaccount.com`),
 * });
 * const messageBus = new gcp.eventarc.MessageBus("message_bus", {
 *     location: "us-central1",
 *     messageBusId: "some-message-bus",
 * });
 * const primary = new gcp.eventarc.GoogleApiSource("primary", {
 *     location: "us-central1",
 *     googleApiSourceId: "some-google-api-source",
 *     destination: messageBus.id,
 *     cryptoKeyName: key.then(key => key.id),
 * }, {
 *     dependsOn: [keyMember],
 * });
 * ```
 *
 * ## Import
 *
 * GoogleApiSource can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/googleApiSources/{{google_api_source_id}}`
 *
 * * `{{project}}/{{location}}/{{google_api_source_id}}`
 *
 * * `{{location}}/{{google_api_source_id}}`
 *
 * When using the `pulumi import` command, GoogleApiSource can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:eventarc/googleApiSource:GoogleApiSource default projects/{{project}}/locations/{{location}}/googleApiSources/{{google_api_source_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:eventarc/googleApiSource:GoogleApiSource default {{project}}/{{location}}/{{google_api_source_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:eventarc/googleApiSource:GoogleApiSource default {{location}}/{{google_api_source_id}}
 * ```
 */
export class GoogleApiSource extends pulumi.CustomResource {
    /**
     * Get an existing GoogleApiSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GoogleApiSourceState, opts?: pulumi.CustomResourceOptions): GoogleApiSource {
        return new GoogleApiSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:eventarc/googleApiSource:GoogleApiSource';

    /**
     * Returns true if the given object is an instance of GoogleApiSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GoogleApiSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GoogleApiSource.__pulumiType;
    }

    /**
     * Resource annotations.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Resource name of a KMS crypto key (managed by the user) used to
     * encrypt/decrypt their event data.
     * It must match the pattern
     * `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*`.
     */
    public readonly cryptoKeyName!: pulumi.Output<string | undefined>;
    /**
     * Destination is the message bus that the GoogleApiSource is delivering to.
     * It must be point to the full resource name of a MessageBus. Format:
     * "projects/{PROJECT_ID}/locations/{region}/messagesBuses/{MESSAGE_BUS_ID)
     */
    public readonly destination!: pulumi.Output<string>;
    /**
     * Resource display name.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and might be sent only on update and delete requests to ensure that
     * the client has an up-to-date value before proceeding.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The user-provided ID to be assigned to the GoogleApiSource. It should match
     * the format `^a-z?$`.
     */
    public readonly googleApiSourceId!: pulumi.Output<string>;
    /**
     * Resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The configuration for Platform Telemetry logging for Eventarc Advanced
     * resources.
     * Structure is documented below.
     */
    public readonly loggingConfig!: pulumi.Output<outputs.eventarc.GoogleApiSourceLoggingConfig>;
    /**
     * Resource name of the form
     * projects/{project}/locations/{location}/googleApiSources/{google_api_source}
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Server assigned unique identifier for the channel. The value is a UUID4
     * string and guaranteed to remain unchanged until the resource is deleted.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The last-modified time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a GoogleApiSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GoogleApiSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GoogleApiSourceArgs | GoogleApiSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GoogleApiSourceState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["cryptoKeyName"] = state ? state.cryptoKeyName : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["googleApiSourceId"] = state ? state.googleApiSourceId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["loggingConfig"] = state ? state.loggingConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as GoogleApiSourceArgs | undefined;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.googleApiSourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'googleApiSourceId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["cryptoKeyName"] = args ? args.cryptoKeyName : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["googleApiSourceId"] = args ? args.googleApiSourceId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["loggingConfig"] = args ? args.loggingConfig : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GoogleApiSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GoogleApiSource resources.
 */
export interface GoogleApiSourceState {
    /**
     * Resource annotations.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The creation time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Resource name of a KMS crypto key (managed by the user) used to
     * encrypt/decrypt their event data.
     * It must match the pattern
     * `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*`.
     */
    cryptoKeyName?: pulumi.Input<string>;
    /**
     * Destination is the message bus that the GoogleApiSource is delivering to.
     * It must be point to the full resource name of a MessageBus. Format:
     * "projects/{PROJECT_ID}/locations/{region}/messagesBuses/{MESSAGE_BUS_ID)
     */
    destination?: pulumi.Input<string>;
    /**
     * Resource display name.
     */
    displayName?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and might be sent only on update and delete requests to ensure that
     * the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * The user-provided ID to be assigned to the GoogleApiSource. It should match
     * the format `^a-z?$`.
     */
    googleApiSourceId?: pulumi.Input<string>;
    /**
     * Resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * The configuration for Platform Telemetry logging for Eventarc Advanced
     * resources.
     * Structure is documented below.
     */
    loggingConfig?: pulumi.Input<inputs.eventarc.GoogleApiSourceLoggingConfig>;
    /**
     * Resource name of the form
     * projects/{project}/locations/{location}/googleApiSources/{google_api_source}
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Server assigned unique identifier for the channel. The value is a UUID4
     * string and guaranteed to remain unchanged until the resource is deleted.
     */
    uid?: pulumi.Input<string>;
    /**
     * The last-modified time.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GoogleApiSource resource.
 */
export interface GoogleApiSourceArgs {
    /**
     * Resource annotations.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource name of a KMS crypto key (managed by the user) used to
     * encrypt/decrypt their event data.
     * It must match the pattern
     * `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*`.
     */
    cryptoKeyName?: pulumi.Input<string>;
    /**
     * Destination is the message bus that the GoogleApiSource is delivering to.
     * It must be point to the full resource name of a MessageBus. Format:
     * "projects/{PROJECT_ID}/locations/{region}/messagesBuses/{MESSAGE_BUS_ID)
     */
    destination: pulumi.Input<string>;
    /**
     * Resource display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The user-provided ID to be assigned to the GoogleApiSource. It should match
     * the format `^a-z?$`.
     */
    googleApiSourceId: pulumi.Input<string>;
    /**
     * Resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location: pulumi.Input<string>;
    /**
     * The configuration for Platform Telemetry logging for Eventarc Advanced
     * resources.
     * Structure is documented below.
     */
    loggingConfig?: pulumi.Input<inputs.eventarc.GoogleApiSourceLoggingConfig>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
