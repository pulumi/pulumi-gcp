// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ChannelArgs, ChannelState } from "./channel";
export type Channel = import("./channel").Channel;
export const Channel: typeof import("./channel").Channel = null as any;
utilities.lazyLoad(exports, ["Channel"], () => require("./channel"));

export { GoogleApiSourceArgs, GoogleApiSourceState } from "./googleApiSource";
export type GoogleApiSource = import("./googleApiSource").GoogleApiSource;
export const GoogleApiSource: typeof import("./googleApiSource").GoogleApiSource = null as any;
utilities.lazyLoad(exports, ["GoogleApiSource"], () => require("./googleApiSource"));

export { GoogleChannelConfigArgs, GoogleChannelConfigState } from "./googleChannelConfig";
export type GoogleChannelConfig = import("./googleChannelConfig").GoogleChannelConfig;
export const GoogleChannelConfig: typeof import("./googleChannelConfig").GoogleChannelConfig = null as any;
utilities.lazyLoad(exports, ["GoogleChannelConfig"], () => require("./googleChannelConfig"));

export { MessageBusArgs, MessageBusState } from "./messageBus";
export type MessageBus = import("./messageBus").MessageBus;
export const MessageBus: typeof import("./messageBus").MessageBus = null as any;
utilities.lazyLoad(exports, ["MessageBus"], () => require("./messageBus"));

export { PipelineArgs, PipelineState } from "./pipeline";
export type Pipeline = import("./pipeline").Pipeline;
export const Pipeline: typeof import("./pipeline").Pipeline = null as any;
utilities.lazyLoad(exports, ["Pipeline"], () => require("./pipeline"));

export { TriggerArgs, TriggerState } from "./trigger";
export type Trigger = import("./trigger").Trigger;
export const Trigger: typeof import("./trigger").Trigger = null as any;
utilities.lazyLoad(exports, ["Trigger"], () => require("./trigger"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:eventarc/channel:Channel":
                return new Channel(name, <any>undefined, { urn })
            case "gcp:eventarc/googleApiSource:GoogleApiSource":
                return new GoogleApiSource(name, <any>undefined, { urn })
            case "gcp:eventarc/googleChannelConfig:GoogleChannelConfig":
                return new GoogleChannelConfig(name, <any>undefined, { urn })
            case "gcp:eventarc/messageBus:MessageBus":
                return new MessageBus(name, <any>undefined, { urn })
            case "gcp:eventarc/pipeline:Pipeline":
                return new Pipeline(name, <any>undefined, { urn })
            case "gcp:eventarc/trigger:Trigger":
                return new Trigger(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "eventarc/channel", _module)
pulumi.runtime.registerResourceModule("gcp", "eventarc/googleApiSource", _module)
pulumi.runtime.registerResourceModule("gcp", "eventarc/googleChannelConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "eventarc/messageBus", _module)
pulumi.runtime.registerResourceModule("gcp", "eventarc/pipeline", _module)
pulumi.runtime.registerResourceModule("gcp", "eventarc/trigger", _module)
