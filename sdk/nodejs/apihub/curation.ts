// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Description
 *
 * ## Example Usage
 *
 * ### Apihub Curation Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const apihubCurationBasic = new gcp.apihub.Curation("apihub_curation_basic", {
 *     location: "us-central1",
 *     curationId: "test",
 *     project: "apihub-terraform",
 *     displayName: "Test Curation",
 *     description: "This is a sample curation resource managed by Terraform.",
 *     endpoint: {
 *         applicationIntegrationEndpointDetails: {
 *             triggerId: "api_trigger/curation_API_1",
 *             uri: "https://integrations.googleapis.com/v1/projects/1082615593856/locations/us-central1/integrations/curation:execute",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Curation can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/curations/{{curation_id}}`
 *
 * * `{{project}}/{{location}}/{{curation_id}}`
 *
 * * `{{location}}/{{curation_id}}`
 *
 * When using the `pulumi import` command, Curation can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:apihub/curation:Curation default projects/{{project}}/locations/{{location}}/curations/{{curation_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:apihub/curation:Curation default {{project}}/{{location}}/{{curation_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:apihub/curation:Curation default {{location}}/{{curation_id}}
 * ```
 */
export class Curation extends pulumi.CustomResource {
    /**
     * Get an existing Curation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CurationState, opts?: pulumi.CustomResourceOptions): Curation {
        return new Curation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apihub/curation:Curation';

    /**
     * Returns true if the given object is an instance of Curation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Curation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Curation.__pulumiType;
    }

    /**
     * The time at which the curation was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The ID to use for the curation resource, which will become the final
     * component of the curations's resource name. This field is optional.
     * * If provided, the same will be used. The service will throw an error if
     * the specified ID is already used by another curation resource in the API
     * hub.
     * * If not provided, a system generated ID will be used.
     * This value should be 4-500 characters, and valid characters
     * are /a-z[0-9]-_/.
     */
    public readonly curationId!: pulumi.Output<string>;
    /**
     * The description of the curation.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of the curation.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The endpoint to be triggered for curation.
     * The endpoint will be invoked with a request payload containing
     * ApiMetadata.
     * Response should contain curated data in the form of
     * ApiMetadata.
     * Structure is documented below.
     */
    public readonly endpoint!: pulumi.Output<outputs.apihub.CurationEndpoint>;
    /**
     * The error code of the last execution of the curation. The error code is
     * populated only when the last execution state is failed.
     * Possible values:
     * ERROR_CODE_UNSPECIFIED
     * INTERNAL_ERROR
     * UNAUTHORIZED
     */
    public /*out*/ readonly lastExecutionErrorCode!: pulumi.Output<string>;
    /**
     * Error message describing the failure, if any, during the last execution of
     * the curation.
     */
    public /*out*/ readonly lastExecutionErrorMessage!: pulumi.Output<string>;
    /**
     * The last execution state of the curation.
     * Possible values:
     * LAST_EXECUTION_STATE_UNSPECIFIED
     * SUCCEEDED
     * FAILED
     */
    public /*out*/ readonly lastExecutionState!: pulumi.Output<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Identifier. The name of the curation.
     * Format:
     * `projects/{project}/locations/{location}/curations/{curation}`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The plugin instances and associated actions that are using the curation.
     * Note: A particular curation could be used by multiple plugin instances or
     * multiple actions in a plugin instance.
     * Structure is documented below.
     */
    public /*out*/ readonly pluginInstanceActions!: pulumi.Output<outputs.apihub.CurationPluginInstanceAction[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The time at which the curation was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Curation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CurationArgs | CurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CurationState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["curationId"] = state ? state.curationId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["lastExecutionErrorCode"] = state ? state.lastExecutionErrorCode : undefined;
            resourceInputs["lastExecutionErrorMessage"] = state ? state.lastExecutionErrorMessage : undefined;
            resourceInputs["lastExecutionState"] = state ? state.lastExecutionState : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pluginInstanceActions"] = state ? state.pluginInstanceActions : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as CurationArgs | undefined;
            if ((!args || args.curationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'curationId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.endpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["curationId"] = args ? args.curationId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["lastExecutionErrorCode"] = undefined /*out*/;
            resourceInputs["lastExecutionErrorMessage"] = undefined /*out*/;
            resourceInputs["lastExecutionState"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pluginInstanceActions"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Curation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Curation resources.
 */
export interface CurationState {
    /**
     * The time at which the curation was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The ID to use for the curation resource, which will become the final
     * component of the curations's resource name. This field is optional.
     * * If provided, the same will be used. The service will throw an error if
     * the specified ID is already used by another curation resource in the API
     * hub.
     * * If not provided, a system generated ID will be used.
     * This value should be 4-500 characters, and valid characters
     * are /a-z[0-9]-_/.
     */
    curationId?: pulumi.Input<string>;
    /**
     * The description of the curation.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the curation.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The endpoint to be triggered for curation.
     * The endpoint will be invoked with a request payload containing
     * ApiMetadata.
     * Response should contain curated data in the form of
     * ApiMetadata.
     * Structure is documented below.
     */
    endpoint?: pulumi.Input<inputs.apihub.CurationEndpoint>;
    /**
     * The error code of the last execution of the curation. The error code is
     * populated only when the last execution state is failed.
     * Possible values:
     * ERROR_CODE_UNSPECIFIED
     * INTERNAL_ERROR
     * UNAUTHORIZED
     */
    lastExecutionErrorCode?: pulumi.Input<string>;
    /**
     * Error message describing the failure, if any, during the last execution of
     * the curation.
     */
    lastExecutionErrorMessage?: pulumi.Input<string>;
    /**
     * The last execution state of the curation.
     * Possible values:
     * LAST_EXECUTION_STATE_UNSPECIFIED
     * SUCCEEDED
     * FAILED
     */
    lastExecutionState?: pulumi.Input<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. The name of the curation.
     * Format:
     * `projects/{project}/locations/{location}/curations/{curation}`
     */
    name?: pulumi.Input<string>;
    /**
     * The plugin instances and associated actions that are using the curation.
     * Note: A particular curation could be used by multiple plugin instances or
     * multiple actions in a plugin instance.
     * Structure is documented below.
     */
    pluginInstanceActions?: pulumi.Input<pulumi.Input<inputs.apihub.CurationPluginInstanceAction>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The time at which the curation was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Curation resource.
 */
export interface CurationArgs {
    /**
     * The ID to use for the curation resource, which will become the final
     * component of the curations's resource name. This field is optional.
     * * If provided, the same will be used. The service will throw an error if
     * the specified ID is already used by another curation resource in the API
     * hub.
     * * If not provided, a system generated ID will be used.
     * This value should be 4-500 characters, and valid characters
     * are /a-z[0-9]-_/.
     */
    curationId: pulumi.Input<string>;
    /**
     * The description of the curation.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the curation.
     */
    displayName: pulumi.Input<string>;
    /**
     * The endpoint to be triggered for curation.
     * The endpoint will be invoked with a request payload containing
     * ApiMetadata.
     * Response should contain curated data in the form of
     * ApiMetadata.
     * Structure is documented below.
     */
    endpoint: pulumi.Input<inputs.apihub.CurationEndpoint>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
