// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApiHubInstanceArgs, ApiHubInstanceState } from "./apiHubInstance";
export type ApiHubInstance = import("./apiHubInstance").ApiHubInstance;
export const ApiHubInstance: typeof import("./apiHubInstance").ApiHubInstance = null as any;
utilities.lazyLoad(exports, ["ApiHubInstance"], () => require("./apiHubInstance"));

export { HostProjectRegistrationArgs, HostProjectRegistrationState } from "./hostProjectRegistration";
export type HostProjectRegistration = import("./hostProjectRegistration").HostProjectRegistration;
export const HostProjectRegistration: typeof import("./hostProjectRegistration").HostProjectRegistration = null as any;
utilities.lazyLoad(exports, ["HostProjectRegistration"], () => require("./hostProjectRegistration"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:apihub/apiHubInstance:ApiHubInstance":
                return new ApiHubInstance(name, <any>undefined, { urn })
            case "gcp:apihub/hostProjectRegistration:HostProjectRegistration":
                return new HostProjectRegistration(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "apihub/apiHubInstance", _module)
pulumi.runtime.registerResourceModule("gcp", "apihub/hostProjectRegistration", _module)
