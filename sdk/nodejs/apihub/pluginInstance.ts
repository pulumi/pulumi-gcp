// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Description
 *
 * ## Example Usage
 *
 * ### Apihub Plugin Instance Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const apihubPluginInstanceBasic = new gcp.apihub.PluginInstance("apihub_plugin_instance_basic", {
 *     location: "us-central1",
 *     plugin: "existing-plugin-id",
 *     pluginInstanceId: "test",
 *     displayName: "Sample Plugin Instance Display Name",
 *     disable: false,
 *     actions: [{
 *         actionId: "existing-action-id",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * PluginInstance can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/plugins/{{plugin}}/instances/{{plugin_instance_id}}`
 *
 * * `{{project}}/{{location}}/{{plugin}}/{{plugin_instance_id}}`
 *
 * * `{{location}}/{{plugin}}/{{plugin_instance_id}}`
 *
 * When using the `pulumi import` command, PluginInstance can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:apihub/pluginInstance:PluginInstance default projects/{{project}}/locations/{{location}}/plugins/{{plugin}}/instances/{{plugin_instance_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:apihub/pluginInstance:PluginInstance default {{project}}/{{location}}/{{plugin}}/{{plugin_instance_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:apihub/pluginInstance:PluginInstance default {{location}}/{{plugin}}/{{plugin_instance_id}}
 * ```
 */
export class PluginInstance extends pulumi.CustomResource {
    /**
     * Get an existing PluginInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PluginInstanceState, opts?: pulumi.CustomResourceOptions): PluginInstance {
        return new PluginInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:apihub/pluginInstance:PluginInstance';

    /**
     * Returns true if the given object is an instance of PluginInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PluginInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PluginInstance.__pulumiType;
    }

    /**
     * The action status for the plugin instance.
     * Structure is documented below.
     */
    public readonly actions!: pulumi.Output<outputs.apihub.PluginInstanceAction[]>;
    /**
     * AuthConfig represents the authentication information.
     */
    public readonly authConfig!: pulumi.Output<outputs.apihub.PluginInstanceAuthConfig | undefined>;
    /**
     * Timestamp indicating when the plugin instance was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The display name for this plugin instance. Max length is 255 characters.
     */
    public readonly disable!: pulumi.Output<boolean | undefined>;
    /**
     * The display name for this plugin instance. Max length is 255 characters.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Error message describing the failure, if any, during Create, Delete or
     * ApplyConfig operation corresponding to the plugin instance.This field will
     * only be populated if the plugin instance is in the ERROR or FAILED state.
     */
    public /*out*/ readonly errorMessage!: pulumi.Output<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Identifier. The unique name of the plugin instance resource.
     * Format:
     * `projects/{project}/locations/{location}/plugins/{plugin}/instances/{instance}`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    public readonly plugin!: pulumi.Output<string>;
    /**
     * The ID to use for the plugin instance, which will become the final
     * component of the plugin instance's resource name. This field is optional.
     * * If provided, the same will be used. The service will throw an error if
     * the specified id is already used by another plugin instance in the plugin
     * resource.
     * * If not provided, a system generated id will be used.
     * This value should be 4-63 characters, and valid characters
     * are /a-z[0-9]-_/.
     */
    public readonly pluginInstanceId!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The current state of the plugin instance (e.g., enabled, disabled,
     * provisioning).
     * Possible values:
     * STATE_UNSPECIFIED
     * CREATING
     * ACTIVE
     * APPLYING_CONFIG
     * ERROR
     * FAILED
     * DELETING
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Timestamp indicating when the plugin instance was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a PluginInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PluginInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PluginInstanceArgs | PluginInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PluginInstanceState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["authConfig"] = state ? state.authConfig : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plugin"] = state ? state.plugin : undefined;
            resourceInputs["pluginInstanceId"] = state ? state.pluginInstanceId : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as PluginInstanceArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.plugin === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plugin'");
            }
            if ((!args || args.pluginInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pluginInstanceId'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["authConfig"] = args ? args.authConfig : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["plugin"] = args ? args.plugin : undefined;
            resourceInputs["pluginInstanceId"] = args ? args.pluginInstanceId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PluginInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PluginInstance resources.
 */
export interface PluginInstanceState {
    /**
     * The action status for the plugin instance.
     * Structure is documented below.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.apihub.PluginInstanceAction>[]>;
    /**
     * AuthConfig represents the authentication information.
     */
    authConfig?: pulumi.Input<inputs.apihub.PluginInstanceAuthConfig>;
    /**
     * Timestamp indicating when the plugin instance was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The display name for this plugin instance. Max length is 255 characters.
     */
    disable?: pulumi.Input<boolean>;
    /**
     * The display name for this plugin instance. Max length is 255 characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Error message describing the failure, if any, during Create, Delete or
     * ApplyConfig operation corresponding to the plugin instance.This field will
     * only be populated if the plugin instance is in the ERROR or FAILED state.
     */
    errorMessage?: pulumi.Input<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. The unique name of the plugin instance resource.
     * Format:
     * `projects/{project}/locations/{location}/plugins/{plugin}/instances/{instance}`
     */
    name?: pulumi.Input<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    plugin?: pulumi.Input<string>;
    /**
     * The ID to use for the plugin instance, which will become the final
     * component of the plugin instance's resource name. This field is optional.
     * * If provided, the same will be used. The service will throw an error if
     * the specified id is already used by another plugin instance in the plugin
     * resource.
     * * If not provided, a system generated id will be used.
     * This value should be 4-63 characters, and valid characters
     * are /a-z[0-9]-_/.
     */
    pluginInstanceId?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The current state of the plugin instance (e.g., enabled, disabled,
     * provisioning).
     * Possible values:
     * STATE_UNSPECIFIED
     * CREATING
     * ACTIVE
     * APPLYING_CONFIG
     * ERROR
     * FAILED
     * DELETING
     */
    state?: pulumi.Input<string>;
    /**
     * Timestamp indicating when the plugin instance was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PluginInstance resource.
 */
export interface PluginInstanceArgs {
    /**
     * The action status for the plugin instance.
     * Structure is documented below.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.apihub.PluginInstanceAction>[]>;
    /**
     * AuthConfig represents the authentication information.
     */
    authConfig?: pulumi.Input<inputs.apihub.PluginInstanceAuthConfig>;
    /**
     * The display name for this plugin instance. Max length is 255 characters.
     */
    disable?: pulumi.Input<boolean>;
    /**
     * The display name for this plugin instance. Max length is 255 characters.
     */
    displayName: pulumi.Input<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location: pulumi.Input<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    plugin: pulumi.Input<string>;
    /**
     * The ID to use for the plugin instance, which will become the final
     * component of the plugin instance's resource name. This field is optional.
     * * If provided, the same will be used. The service will throw an error if
     * the specified id is already used by another plugin instance in the plugin
     * resource.
     * * If not provided, a system generated id will be used.
     * This value should be 4-63 characters, and valid characters
     * are /a-z[0-9]-_/.
     */
    pluginInstanceId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
