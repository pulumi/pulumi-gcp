// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The PrivateConnection resource is used to establish private connectivity between Datastream and a customer's network.
 *
 * To get more information about PrivateConnection, see:
 *
 * * [API documentation](https://cloud.google.com/datastream/docs/reference/rest/v1/projects.locations.privateConnections)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/datastream/docs/create-a-private-connectivity-configuration)
 *
 * ## Example Usage
 *
 * ### Datastream Private Connection Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNetwork = new gcp.compute.Network("default", {name: "my-network"});
 * const _default = new gcp.datastream.PrivateConnection("default", {
 *     displayName: "Connection profile",
 *     location: "us-central1",
 *     privateConnectionId: "my-connection",
 *     labels: {
 *         key: "value",
 *     },
 *     vpcPeeringConfig: {
 *         vpc: defaultNetwork.id,
 *         subnet: "10.0.0.0/29",
 *     },
 * });
 * ```
 * ### Datastream Private Connection Psc Interface
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNetwork = new gcp.compute.Network("default", {
 *     name: "my-network",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "my-subnetwork",
 *     region: "us-central1",
 *     network: defaultNetwork.id,
 *     ipCidrRange: "10.0.0.0/16",
 * });
 * const defaultNetworkAttachment = new gcp.compute.NetworkAttachment("default", {
 *     name: "my-network-attachment",
 *     region: "us-central1",
 *     description: "basic network attachment description",
 *     connectionPreference: "ACCEPT_AUTOMATIC",
 *     subnetworks: [defaultSubnetwork.selfLink],
 * });
 * const _default = new gcp.datastream.PrivateConnection("default", {
 *     displayName: "Connection profile",
 *     location: "us-central1",
 *     privateConnectionId: "my-connection",
 *     labels: {
 *         key: "value",
 *     },
 *     pscInterfaceConfig: {
 *         networkAttachment: defaultNetworkAttachment.id,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * PrivateConnection can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/privateConnections/{{private_connection_id}}`
 *
 * * `{{project}}/{{location}}/{{private_connection_id}}`
 *
 * * `{{location}}/{{private_connection_id}}`
 *
 * When using the `pulumi import` command, PrivateConnection can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:datastream/privateConnection:PrivateConnection default projects/{{project}}/locations/{{location}}/privateConnections/{{private_connection_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:datastream/privateConnection:PrivateConnection default {{project}}/{{location}}/{{private_connection_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:datastream/privateConnection:PrivateConnection default {{location}}/{{private_connection_id}}
 * ```
 */
export class PrivateConnection extends pulumi.CustomResource {
    /**
     * Get an existing PrivateConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateConnectionState, opts?: pulumi.CustomResourceOptions): PrivateConnection {
        return new PrivateConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:datastream/privateConnection:PrivateConnection';

    /**
     * Returns true if the given object is an instance of PrivateConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateConnection.__pulumiType;
    }

    /**
     * If set to true, will skip validations.
     */
    declare public readonly createWithoutValidation: pulumi.Output<boolean | undefined>;
    /**
     * Display name.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The PrivateConnection error in case of failure.
     * Structure is documented below.
     */
    declare public /*out*/ readonly errors: pulumi.Output<outputs.datastream.PrivateConnectionError[]>;
    /**
     * Labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the location this private connection is located in.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The resource's name.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The private connectivity identifier.
     */
    declare public readonly privateConnectionId: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The PSC Interface configuration is used to create PSC Interface
     * between Datastream and the consumer's PSC.
     * Structure is documented below.
     */
    declare public readonly pscInterfaceConfig: pulumi.Output<outputs.datastream.PrivateConnectionPscInterfaceConfig | undefined>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * State of the PrivateConnection.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The VPC Peering configuration is used to create VPC peering
     * between Datastream and the consumer's VPC.
     * Structure is documented below.
     */
    declare public readonly vpcPeeringConfig: pulumi.Output<outputs.datastream.PrivateConnectionVpcPeeringConfig | undefined>;

    /**
     * Create a PrivateConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivateConnectionArgs | PrivateConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivateConnectionState | undefined;
            resourceInputs["createWithoutValidation"] = state?.createWithoutValidation;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["errors"] = state?.errors;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateConnectionId"] = state?.privateConnectionId;
            resourceInputs["project"] = state?.project;
            resourceInputs["pscInterfaceConfig"] = state?.pscInterfaceConfig;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["state"] = state?.state;
            resourceInputs["vpcPeeringConfig"] = state?.vpcPeeringConfig;
        } else {
            const args = argsOrState as PrivateConnectionArgs | undefined;
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.privateConnectionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'privateConnectionId'");
            }
            resourceInputs["createWithoutValidation"] = args?.createWithoutValidation;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["privateConnectionId"] = args?.privateConnectionId;
            resourceInputs["project"] = args?.project;
            resourceInputs["pscInterfaceConfig"] = args?.pscInterfaceConfig;
            resourceInputs["vpcPeeringConfig"] = args?.vpcPeeringConfig;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PrivateConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrivateConnection resources.
 */
export interface PrivateConnectionState {
    /**
     * If set to true, will skip validations.
     */
    createWithoutValidation?: pulumi.Input<boolean>;
    /**
     * Display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The PrivateConnection error in case of failure.
     * Structure is documented below.
     */
    errors?: pulumi.Input<pulumi.Input<inputs.datastream.PrivateConnectionError>[]>;
    /**
     * Labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the location this private connection is located in.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The private connectivity identifier.
     */
    privateConnectionId?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The PSC Interface configuration is used to create PSC Interface
     * between Datastream and the consumer's PSC.
     * Structure is documented below.
     */
    pscInterfaceConfig?: pulumi.Input<inputs.datastream.PrivateConnectionPscInterfaceConfig>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * State of the PrivateConnection.
     */
    state?: pulumi.Input<string>;
    /**
     * The VPC Peering configuration is used to create VPC peering
     * between Datastream and the consumer's VPC.
     * Structure is documented below.
     */
    vpcPeeringConfig?: pulumi.Input<inputs.datastream.PrivateConnectionVpcPeeringConfig>;
}

/**
 * The set of arguments for constructing a PrivateConnection resource.
 */
export interface PrivateConnectionArgs {
    /**
     * If set to true, will skip validations.
     */
    createWithoutValidation?: pulumi.Input<boolean>;
    /**
     * Display name.
     */
    displayName: pulumi.Input<string>;
    /**
     * Labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the location this private connection is located in.
     */
    location: pulumi.Input<string>;
    /**
     * The private connectivity identifier.
     */
    privateConnectionId: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The PSC Interface configuration is used to create PSC Interface
     * between Datastream and the consumer's PSC.
     * Structure is documented below.
     */
    pscInterfaceConfig?: pulumi.Input<inputs.datastream.PrivateConnectionPscInterfaceConfig>;
    /**
     * The VPC Peering configuration is used to create VPC peering
     * between Datastream and the consumer's VPC.
     * Structure is documented below.
     */
    vpcPeeringConfig?: pulumi.Input<inputs.datastream.PrivateConnectionVpcPeeringConfig>;
}
