// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AttestorArgs, AttestorState } from "./attestor";
export type Attestor = import("./attestor").Attestor;
export const Attestor: typeof import("./attestor").Attestor = null as any;
utilities.lazyLoad(exports, ["Attestor"], () => require("./attestor"));

export { AttestorIamBindingArgs, AttestorIamBindingState } from "./attestorIamBinding";
export type AttestorIamBinding = import("./attestorIamBinding").AttestorIamBinding;
export const AttestorIamBinding: typeof import("./attestorIamBinding").AttestorIamBinding = null as any;
utilities.lazyLoad(exports, ["AttestorIamBinding"], () => require("./attestorIamBinding"));

export { AttestorIamMemberArgs, AttestorIamMemberState } from "./attestorIamMember";
export type AttestorIamMember = import("./attestorIamMember").AttestorIamMember;
export const AttestorIamMember: typeof import("./attestorIamMember").AttestorIamMember = null as any;
utilities.lazyLoad(exports, ["AttestorIamMember"], () => require("./attestorIamMember"));

export { AttestorIamPolicyArgs, AttestorIamPolicyState } from "./attestorIamPolicy";
export type AttestorIamPolicy = import("./attestorIamPolicy").AttestorIamPolicy;
export const AttestorIamPolicy: typeof import("./attestorIamPolicy").AttestorIamPolicy = null as any;
utilities.lazyLoad(exports, ["AttestorIamPolicy"], () => require("./attestorIamPolicy"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:binaryauthorization/attestor:Attestor":
                return new Attestor(name, <any>undefined, { urn })
            case "gcp:binaryauthorization/attestorIamBinding:AttestorIamBinding":
                return new AttestorIamBinding(name, <any>undefined, { urn })
            case "gcp:binaryauthorization/attestorIamMember:AttestorIamMember":
                return new AttestorIamMember(name, <any>undefined, { urn })
            case "gcp:binaryauthorization/attestorIamPolicy:AttestorIamPolicy":
                return new AttestorIamPolicy(name, <any>undefined, { urn })
            case "gcp:binaryauthorization/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "binaryauthorization/attestor", _module)
pulumi.runtime.registerResourceModule("gcp", "binaryauthorization/attestorIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "binaryauthorization/attestorIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "binaryauthorization/attestorIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "binaryauthorization/policy", _module)
