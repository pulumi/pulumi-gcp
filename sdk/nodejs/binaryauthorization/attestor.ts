// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * An attestor that attests to container image artifacts.
 * 
 * 
 * To get more information about Attestor, see:
 * 
 * * [API documentation](https://cloud.google.com/binary-authorization/docs/reference/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/binary-authorization/)
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/binary_authorization_attestor.html.markdown.
 */
export class Attestor extends pulumi.CustomResource {
    /**
     * Get an existing Attestor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AttestorState, opts?: pulumi.CustomResourceOptions): Attestor {
        return new Attestor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:binaryauthorization/attestor:Attestor';

    /**
     * Returns true if the given object is an instance of Attestor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Attestor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Attestor.__pulumiType;
    }

    /**
     * A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.  Structure is documented below.
     */
    public readonly attestationAuthorityNote!: pulumi.Output<outputs.binaryauthorization.AttestorAttestationAuthorityNote>;
    /**
     * A descriptive comment. This field may be updated. The field may be
     * displayed in chooser dialogs.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a Attestor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AttestorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AttestorArgs | AttestorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AttestorState | undefined;
            inputs["attestationAuthorityNote"] = state ? state.attestationAuthorityNote : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as AttestorArgs | undefined;
            if (!args || args.attestationAuthorityNote === undefined) {
                throw new Error("Missing required property 'attestationAuthorityNote'");
            }
            inputs["attestationAuthorityNote"] = args ? args.attestationAuthorityNote : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Attestor.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Attestor resources.
 */
export interface AttestorState {
    /**
     * A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.  Structure is documented below.
     */
    readonly attestationAuthorityNote?: pulumi.Input<inputs.binaryauthorization.AttestorAttestationAuthorityNote>;
    /**
     * A descriptive comment. This field may be updated. The field may be
     * displayed in chooser dialogs.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Attestor resource.
 */
export interface AttestorArgs {
    /**
     * A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.  Structure is documented below.
     */
    readonly attestationAuthorityNote: pulumi.Input<inputs.binaryauthorization.AttestorAttestationAuthorityNote>;
    /**
     * A descriptive comment. This field may be updated. The field may be
     * displayed in chooser dialogs.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
}
