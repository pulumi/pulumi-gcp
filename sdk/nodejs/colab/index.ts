// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetRuntimeTemplateIamPolicyArgs, GetRuntimeTemplateIamPolicyResult, GetRuntimeTemplateIamPolicyOutputArgs } from "./getRuntimeTemplateIamPolicy";
export const getRuntimeTemplateIamPolicy: typeof import("./getRuntimeTemplateIamPolicy").getRuntimeTemplateIamPolicy = null as any;
export const getRuntimeTemplateIamPolicyOutput: typeof import("./getRuntimeTemplateIamPolicy").getRuntimeTemplateIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRuntimeTemplateIamPolicy","getRuntimeTemplateIamPolicyOutput"], () => require("./getRuntimeTemplateIamPolicy"));

export { RuntimeArgs, RuntimeState } from "./runtime";
export type Runtime = import("./runtime").Runtime;
export const Runtime: typeof import("./runtime").Runtime = null as any;
utilities.lazyLoad(exports, ["Runtime"], () => require("./runtime"));

export { RuntimeTemplateArgs, RuntimeTemplateState } from "./runtimeTemplate";
export type RuntimeTemplate = import("./runtimeTemplate").RuntimeTemplate;
export const RuntimeTemplate: typeof import("./runtimeTemplate").RuntimeTemplate = null as any;
utilities.lazyLoad(exports, ["RuntimeTemplate"], () => require("./runtimeTemplate"));

export { RuntimeTemplateIamBindingArgs, RuntimeTemplateIamBindingState } from "./runtimeTemplateIamBinding";
export type RuntimeTemplateIamBinding = import("./runtimeTemplateIamBinding").RuntimeTemplateIamBinding;
export const RuntimeTemplateIamBinding: typeof import("./runtimeTemplateIamBinding").RuntimeTemplateIamBinding = null as any;
utilities.lazyLoad(exports, ["RuntimeTemplateIamBinding"], () => require("./runtimeTemplateIamBinding"));

export { RuntimeTemplateIamMemberArgs, RuntimeTemplateIamMemberState } from "./runtimeTemplateIamMember";
export type RuntimeTemplateIamMember = import("./runtimeTemplateIamMember").RuntimeTemplateIamMember;
export const RuntimeTemplateIamMember: typeof import("./runtimeTemplateIamMember").RuntimeTemplateIamMember = null as any;
utilities.lazyLoad(exports, ["RuntimeTemplateIamMember"], () => require("./runtimeTemplateIamMember"));

export { RuntimeTemplateIamPolicyArgs, RuntimeTemplateIamPolicyState } from "./runtimeTemplateIamPolicy";
export type RuntimeTemplateIamPolicy = import("./runtimeTemplateIamPolicy").RuntimeTemplateIamPolicy;
export const RuntimeTemplateIamPolicy: typeof import("./runtimeTemplateIamPolicy").RuntimeTemplateIamPolicy = null as any;
utilities.lazyLoad(exports, ["RuntimeTemplateIamPolicy"], () => require("./runtimeTemplateIamPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:colab/runtime:Runtime":
                return new Runtime(name, <any>undefined, { urn })
            case "gcp:colab/runtimeTemplate:RuntimeTemplate":
                return new RuntimeTemplate(name, <any>undefined, { urn })
            case "gcp:colab/runtimeTemplateIamBinding:RuntimeTemplateIamBinding":
                return new RuntimeTemplateIamBinding(name, <any>undefined, { urn })
            case "gcp:colab/runtimeTemplateIamMember:RuntimeTemplateIamMember":
                return new RuntimeTemplateIamMember(name, <any>undefined, { urn })
            case "gcp:colab/runtimeTemplateIamPolicy:RuntimeTemplateIamPolicy":
                return new RuntimeTemplateIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "colab/runtime", _module)
pulumi.runtime.registerResourceModule("gcp", "colab/runtimeTemplate", _module)
pulumi.runtime.registerResourceModule("gcp", "colab/runtimeTemplateIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "colab/runtimeTemplateIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "colab/runtimeTemplateIamPolicy", _module)
