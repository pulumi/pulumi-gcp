// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * FeatureMembership can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default projects/{{project}}/locations/{{location}}/features/{{feature}}/membershipId/{{membership}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default {{project}}/{{location}}/{{feature}}/{{membership}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default {{location}}/{{feature}}/{{membership}}
 * ```
 */
export class FeatureMembership extends pulumi.CustomResource {
    /**
     * Get an existing FeatureMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeatureMembershipState, opts?: pulumi.CustomResourceOptions): FeatureMembership {
        return new FeatureMembership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:gkehub/featureMembership:FeatureMembership';

    /**
     * Returns true if the given object is an instance of FeatureMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FeatureMembership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FeatureMembership.__pulumiType;
    }

    /**
     * Config Management-specific spec.
     */
    public readonly configmanagement!: pulumi.Output<outputs.gkehub.FeatureMembershipConfigmanagement>;
    /**
     * The name of the feature
     */
    public readonly feature!: pulumi.Output<string>;
    /**
     * The location of the feature
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the membership
     */
    public readonly membership!: pulumi.Output<string>;
    /**
     * The project of the feature
     */
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a FeatureMembership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureMembershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FeatureMembershipArgs | FeatureMembershipState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FeatureMembershipState | undefined;
            inputs["configmanagement"] = state ? state.configmanagement : undefined;
            inputs["feature"] = state ? state.feature : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["membership"] = state ? state.membership : undefined;
            inputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as FeatureMembershipArgs | undefined;
            if ((!args || args.configmanagement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configmanagement'");
            }
            if ((!args || args.feature === undefined) && !opts.urn) {
                throw new Error("Missing required property 'feature'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.membership === undefined) && !opts.urn) {
                throw new Error("Missing required property 'membership'");
            }
            inputs["configmanagement"] = args ? args.configmanagement : undefined;
            inputs["feature"] = args ? args.feature : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["membership"] = args ? args.membership : undefined;
            inputs["project"] = args ? args.project : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(FeatureMembership.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FeatureMembership resources.
 */
export interface FeatureMembershipState {
    /**
     * Config Management-specific spec.
     */
    configmanagement?: pulumi.Input<inputs.gkehub.FeatureMembershipConfigmanagement>;
    /**
     * The name of the feature
     */
    feature?: pulumi.Input<string>;
    /**
     * The location of the feature
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the membership
     */
    membership?: pulumi.Input<string>;
    /**
     * The project of the feature
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FeatureMembership resource.
 */
export interface FeatureMembershipArgs {
    /**
     * Config Management-specific spec.
     */
    configmanagement: pulumi.Input<inputs.gkehub.FeatureMembershipConfigmanagement>;
    /**
     * The name of the feature
     */
    feature: pulumi.Input<string>;
    /**
     * The location of the feature
     */
    location: pulumi.Input<string>;
    /**
     * The name of the membership
     */
    membership: pulumi.Input<string>;
    /**
     * The project of the feature
     */
    project?: pulumi.Input<string>;
}
