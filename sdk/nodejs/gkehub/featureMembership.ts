// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 * ### Config Management
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cluster = new gcp.container.Cluster("cluster", {
 *     location: "us-central1-a",
 *     initialNodeCount: 1,
 * }, {
 *     provider: google_beta,
 * });
 * const membership = new gcp.gkehub.Membership("membership", {
 *     membershipId: "my-membership",
 *     endpoint: {
 *         gkeCluster: {
 *             resourceLink: pulumi.interpolate`//container.googleapis.com/${cluster.id}`,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const feature = new gcp.gkehub.Feature("feature", {
 *     location: "global",
 *     labels: {
 *         foo: "bar",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const featureMember = new gcp.gkehub.FeatureMembership("featureMember", {
 *     location: "global",
 *     feature: feature.name,
 *     membership: membership.membershipId,
 *     configmanagement: {
 *         version: "1.6.2",
 *         configSync: {
 *             git: {
 *                 syncRepo: "https://github.com/hashicorp/terraform",
 *             },
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Multi Cluster Service Discovery
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const feature = new gcp.gkehub.Feature("feature", {
 *     location: "global",
 *     labels: {
 *         foo: "bar",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Serivce Mesh
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cluster = new gcp.container.Cluster("cluster", {
 *     location: "us-central1-a",
 *     initialNodeCount: 1,
 * }, {
 *     provider: google_beta,
 * });
 * const membership = new gcp.gkehub.Membership("membership", {
 *     membershipId: "my-membership",
 *     endpoint: {
 *         gkeCluster: {
 *             resourceLink: pulumi.interpolate`//container.googleapis.com/${cluster.id}`,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const feature = new gcp.gkehub.Feature("feature", {location: "global"}, {
 *     provider: google_beta,
 * });
 * const featureMember = new gcp.gkehub.FeatureMembership("featureMember", {
 *     location: "global",
 *     feature: feature.name,
 *     membership: membership.membershipId,
 *     mesh: {
 *         management: "MANAGEMENT_AUTOMATIC",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * FeatureMembership can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default projects/{{project}}/locations/{{location}}/features/{{feature}}/membershipId/{{membership}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default {{project}}/{{location}}/{{feature}}/{{membership}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default {{location}}/{{feature}}/{{membership}}
 * ```
 */
export class FeatureMembership extends pulumi.CustomResource {
    /**
     * Get an existing FeatureMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeatureMembershipState, opts?: pulumi.CustomResourceOptions): FeatureMembership {
        return new FeatureMembership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:gkehub/featureMembership:FeatureMembership';

    /**
     * Returns true if the given object is an instance of FeatureMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FeatureMembership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FeatureMembership.__pulumiType;
    }

    /**
     * Config Management-specific spec. Structure is documented below.
     */
    public readonly configmanagement!: pulumi.Output<outputs.gkehub.FeatureMembershipConfigmanagement | undefined>;
    /**
     * The name of the feature
     */
    public readonly feature!: pulumi.Output<string>;
    /**
     * The location of the feature
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the membership
     */
    public readonly membership!: pulumi.Output<string>;
    /**
     * Service mesh specific spec. Structure is documented below.
     */
    public readonly mesh!: pulumi.Output<outputs.gkehub.FeatureMembershipMesh | undefined>;
    /**
     * The project of the feature
     */
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a FeatureMembership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureMembershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FeatureMembershipArgs | FeatureMembershipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FeatureMembershipState | undefined;
            resourceInputs["configmanagement"] = state ? state.configmanagement : undefined;
            resourceInputs["feature"] = state ? state.feature : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["membership"] = state ? state.membership : undefined;
            resourceInputs["mesh"] = state ? state.mesh : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as FeatureMembershipArgs | undefined;
            if ((!args || args.feature === undefined) && !opts.urn) {
                throw new Error("Missing required property 'feature'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.membership === undefined) && !opts.urn) {
                throw new Error("Missing required property 'membership'");
            }
            resourceInputs["configmanagement"] = args ? args.configmanagement : undefined;
            resourceInputs["feature"] = args ? args.feature : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["membership"] = args ? args.membership : undefined;
            resourceInputs["mesh"] = args ? args.mesh : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FeatureMembership.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FeatureMembership resources.
 */
export interface FeatureMembershipState {
    /**
     * Config Management-specific spec. Structure is documented below.
     */
    configmanagement?: pulumi.Input<inputs.gkehub.FeatureMembershipConfigmanagement>;
    /**
     * The name of the feature
     */
    feature?: pulumi.Input<string>;
    /**
     * The location of the feature
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the membership
     */
    membership?: pulumi.Input<string>;
    /**
     * Service mesh specific spec. Structure is documented below.
     */
    mesh?: pulumi.Input<inputs.gkehub.FeatureMembershipMesh>;
    /**
     * The project of the feature
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FeatureMembership resource.
 */
export interface FeatureMembershipArgs {
    /**
     * Config Management-specific spec. Structure is documented below.
     */
    configmanagement?: pulumi.Input<inputs.gkehub.FeatureMembershipConfigmanagement>;
    /**
     * The name of the feature
     */
    feature: pulumi.Input<string>;
    /**
     * The location of the feature
     */
    location: pulumi.Input<string>;
    /**
     * The name of the membership
     */
    membership: pulumi.Input<string>;
    /**
     * Service mesh specific spec. Structure is documented below.
     */
    mesh?: pulumi.Input<inputs.gkehub.FeatureMembershipMesh>;
    /**
     * The project of the feature
     */
    project?: pulumi.Input<string>;
}
