// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * RBACRoleBinding represents a rbacrolebinding across the Fleet.
 *
 * To get more information about ScopeRBACRoleBinding, see:
 *
 * * [API documentation](https://cloud.google.com/anthos/fleet-management/docs/reference/rest/v1/projects.locations.scopes.rbacrolebindings)
 * * How-to Guides
 *     * [Registering a Cluster](https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster#register_cluster)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * ScopeRBACRoleBinding can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default projects/{{project}}/locations/global/scopes/{{scope_id}}/rbacrolebindings/{{scope_rbac_role_binding_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default {{project}}/{{scope_id}}/{{scope_rbac_role_binding_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default {{scope_id}}/{{scope_rbac_role_binding_id}}
 * ```
 */
export class ScopeRbacRoleBinding extends pulumi.CustomResource {
    /**
     * Get an existing ScopeRbacRoleBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScopeRbacRoleBindingState, opts?: pulumi.CustomResourceOptions): ScopeRbacRoleBinding {
        return new ScopeRbacRoleBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding';

    /**
     * Returns true if the given object is an instance of ScopeRbacRoleBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScopeRbacRoleBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScopeRbacRoleBinding.__pulumiType;
    }

    /**
     * Time the RBAC Role Binding was created in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Time the RBAC Role Binding was deleted in UTC.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * group is the group, as seen by the kubernetes cluster.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * Labels for this ScopeRBACRoleBinding.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource name for the RBAC Role Binding
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Role to bind to the principal.
     * Structure is documented below.
     */
    public readonly role!: pulumi.Output<outputs.gkehub.ScopeRbacRoleBindingRole>;
    /**
     * Id of the scope
     */
    public readonly scopeId!: pulumi.Output<string>;
    /**
     * The client-provided identifier of the RBAC Role Binding.
     */
    public readonly scopeRbacRoleBindingId!: pulumi.Output<string>;
    /**
     * State of the RBAC Role Binding resource.
     * Structure is documented below.
     */
    public /*out*/ readonly states!: pulumi.Output<outputs.gkehub.ScopeRbacRoleBindingState[]>;
    /**
     * Google-generated UUID for this resource.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Time the RBAC Role Binding was updated in UTC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * user is the name of the user as seen by the kubernetes cluster, example
     * "alice" or "alice@domain.tld"
     */
    public readonly user!: pulumi.Output<string | undefined>;

    /**
     * Create a ScopeRbacRoleBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScopeRbacRoleBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScopeRbacRoleBindingArgs | ScopeRbacRoleBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScopeRbacRoleBindingState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteTime"] = state ? state.deleteTime : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["scopeId"] = state ? state.scopeId : undefined;
            resourceInputs["scopeRbacRoleBindingId"] = state ? state.scopeRbacRoleBindingId : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as ScopeRbacRoleBindingArgs | undefined;
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.scopeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeId'");
            }
            if ((!args || args.scopeRbacRoleBindingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeRbacRoleBindingId'");
            }
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["scopeId"] = args ? args.scopeId : undefined;
            resourceInputs["scopeRbacRoleBindingId"] = args ? args.scopeRbacRoleBindingId : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScopeRbacRoleBinding.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScopeRbacRoleBinding resources.
 */
export interface ScopeRbacRoleBindingState {
    /**
     * Time the RBAC Role Binding was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Time the RBAC Role Binding was deleted in UTC.
     */
    deleteTime?: pulumi.Input<string>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * group is the group, as seen by the kubernetes cluster.
     */
    group?: pulumi.Input<string>;
    /**
     * Labels for this ScopeRBACRoleBinding.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name for the RBAC Role Binding
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Role to bind to the principal.
     * Structure is documented below.
     */
    role?: pulumi.Input<inputs.gkehub.ScopeRbacRoleBindingRole>;
    /**
     * Id of the scope
     */
    scopeId?: pulumi.Input<string>;
    /**
     * The client-provided identifier of the RBAC Role Binding.
     */
    scopeRbacRoleBindingId?: pulumi.Input<string>;
    /**
     * State of the RBAC Role Binding resource.
     * Structure is documented below.
     */
    states?: pulumi.Input<pulumi.Input<inputs.gkehub.ScopeRbacRoleBindingState>[]>;
    /**
     * Google-generated UUID for this resource.
     */
    uid?: pulumi.Input<string>;
    /**
     * Time the RBAC Role Binding was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * user is the name of the user as seen by the kubernetes cluster, example
     * "alice" or "alice@domain.tld"
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScopeRbacRoleBinding resource.
 */
export interface ScopeRbacRoleBindingArgs {
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * group is the group, as seen by the kubernetes cluster.
     */
    group?: pulumi.Input<string>;
    /**
     * Labels for this ScopeRBACRoleBinding.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Role to bind to the principal.
     * Structure is documented below.
     */
    role: pulumi.Input<inputs.gkehub.ScopeRbacRoleBindingRole>;
    /**
     * Id of the scope
     */
    scopeId: pulumi.Input<string>;
    /**
     * The client-provided identifier of the RBAC Role Binding.
     */
    scopeRbacRoleBindingId: pulumi.Input<string>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * user is the name of the user as seen by the kubernetes cluster, example
     * "alice" or "alice@domain.tld"
     */
    user?: pulumi.Input<string>;
}
