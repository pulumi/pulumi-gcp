// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * RBACRoleBinding represents a rbacrolebinding across the Fleet.
 *
 * To get more information about ScopeRBACRoleBinding, see:
 *
 * * [API documentation](https://cloud.google.com/anthos/fleet-management/docs/reference/rest/v1/projects.locations.scopes.rbacrolebindings)
 * * How-to Guides
 *     * [Registering a Cluster](https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster#register_cluster)
 *
 * ## Example Usage
 *
 * ### Gkehub Scope Rbac Role Binding Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const scope = new gcp.gkehub.Scope("scope", {scopeId: "tf-test-scope_8270"});
 * const scopeRbacRoleBinding = new gcp.gkehub.ScopeRbacRoleBinding("scope_rbac_role_binding", {
 *     scopeRbacRoleBindingId: "tf-test-scope-rbac-role-binding_41150",
 *     scopeId: scope.scopeId,
 *     user: "test-email@gmail.com",
 *     role: {
 *         predefinedRole: "ADMIN",
 *     },
 *     labels: {
 *         key: "value",
 *     },
 * });
 * ```
 * ### Gkehub Scope Rbac Custom Role Binding Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const scope = new gcp.gkehub.Scope("scope", {scopeId: "tf-test-scope_89313"});
 * const rbacrolebindingactuation = new gcp.gkehub.Feature("rbacrolebindingactuation", {
 *     name: "rbacrolebindingactuation",
 *     location: "global",
 *     spec: {
 *         rbacrolebindingactuation: {
 *             allowedCustomRoles: ["my-custom-role"],
 *         },
 *     },
 * });
 * const scopeRbacRoleBinding = new gcp.gkehub.ScopeRbacRoleBinding("scope_rbac_role_binding", {
 *     scopeRbacRoleBindingId: "tf-test-scope-rbac-role-binding_60646",
 *     scopeId: scope.scopeId,
 *     user: "test-email@gmail.com",
 *     role: {
 *         customRole: "my-custom-role",
 *     },
 *     labels: {
 *         key: "value",
 *     },
 * }, {
 *     dependsOn: [rbacrolebindingactuation],
 * });
 * ```
 *
 * ## Import
 *
 * ScopeRBACRoleBinding can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/global/scopes/{{scope_id}}/rbacrolebindings/{{scope_rbac_role_binding_id}}`
 *
 * * `{{project}}/{{scope_id}}/{{scope_rbac_role_binding_id}}`
 *
 * * `{{scope_id}}/{{scope_rbac_role_binding_id}}`
 *
 * When using the `pulumi import` command, ScopeRBACRoleBinding can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default projects/{{project}}/locations/global/scopes/{{scope_id}}/rbacrolebindings/{{scope_rbac_role_binding_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default {{project}}/{{scope_id}}/{{scope_rbac_role_binding_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding default {{scope_id}}/{{scope_rbac_role_binding_id}}
 * ```
 */
export class ScopeRbacRoleBinding extends pulumi.CustomResource {
    /**
     * Get an existing ScopeRbacRoleBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScopeRbacRoleBindingState, opts?: pulumi.CustomResourceOptions): ScopeRbacRoleBinding {
        return new ScopeRbacRoleBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:gkehub/scopeRbacRoleBinding:ScopeRbacRoleBinding';

    /**
     * Returns true if the given object is an instance of ScopeRbacRoleBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScopeRbacRoleBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScopeRbacRoleBinding.__pulumiType;
    }

    /**
     * Time the RBAC Role Binding was created in UTC.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Time the RBAC Role Binding was deleted in UTC.
     */
    declare public /*out*/ readonly deleteTime: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * group is the group, as seen by the kubernetes cluster.
     */
    declare public readonly group: pulumi.Output<string | undefined>;
    /**
     * Labels for this ScopeRBACRoleBinding.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource name for the RBAC Role Binding
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Role to bind to the principal.
     * Structure is documented below.
     */
    declare public readonly role: pulumi.Output<outputs.gkehub.ScopeRbacRoleBindingRole>;
    /**
     * Id of the scope
     */
    declare public readonly scopeId: pulumi.Output<string>;
    /**
     * The client-provided identifier of the RBAC Role Binding.
     */
    declare public readonly scopeRbacRoleBindingId: pulumi.Output<string>;
    /**
     * State of the RBAC Role Binding resource.
     * Structure is documented below.
     */
    declare public /*out*/ readonly states: pulumi.Output<outputs.gkehub.ScopeRbacRoleBindingState[]>;
    /**
     * Google-generated UUID for this resource.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * Time the RBAC Role Binding was updated in UTC.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * user is the name of the user as seen by the kubernetes cluster, example
     * "alice" or "alice@domain.tld"
     */
    declare public readonly user: pulumi.Output<string | undefined>;

    /**
     * Create a ScopeRbacRoleBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScopeRbacRoleBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScopeRbacRoleBindingArgs | ScopeRbacRoleBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScopeRbacRoleBindingState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["deleteTime"] = state?.deleteTime;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["group"] = state?.group;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["role"] = state?.role;
            resourceInputs["scopeId"] = state?.scopeId;
            resourceInputs["scopeRbacRoleBindingId"] = state?.scopeRbacRoleBindingId;
            resourceInputs["states"] = state?.states;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["user"] = state?.user;
        } else {
            const args = argsOrState as ScopeRbacRoleBindingArgs | undefined;
            if (args?.role === undefined && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if (args?.scopeId === undefined && !opts.urn) {
                throw new Error("Missing required property 'scopeId'");
            }
            if (args?.scopeRbacRoleBindingId === undefined && !opts.urn) {
                throw new Error("Missing required property 'scopeRbacRoleBindingId'");
            }
            resourceInputs["group"] = args?.group;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["project"] = args?.project;
            resourceInputs["role"] = args?.role;
            resourceInputs["scopeId"] = args?.scopeId;
            resourceInputs["scopeRbacRoleBindingId"] = args?.scopeRbacRoleBindingId;
            resourceInputs["user"] = args?.user;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ScopeRbacRoleBinding.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScopeRbacRoleBinding resources.
 */
export interface ScopeRbacRoleBindingState {
    /**
     * Time the RBAC Role Binding was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Time the RBAC Role Binding was deleted in UTC.
     */
    deleteTime?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * group is the group, as seen by the kubernetes cluster.
     */
    group?: pulumi.Input<string>;
    /**
     * Labels for this ScopeRBACRoleBinding.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name for the RBAC Role Binding
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Role to bind to the principal.
     * Structure is documented below.
     */
    role?: pulumi.Input<inputs.gkehub.ScopeRbacRoleBindingRole>;
    /**
     * Id of the scope
     */
    scopeId?: pulumi.Input<string>;
    /**
     * The client-provided identifier of the RBAC Role Binding.
     */
    scopeRbacRoleBindingId?: pulumi.Input<string>;
    /**
     * State of the RBAC Role Binding resource.
     * Structure is documented below.
     */
    states?: pulumi.Input<pulumi.Input<inputs.gkehub.ScopeRbacRoleBindingState>[]>;
    /**
     * Google-generated UUID for this resource.
     */
    uid?: pulumi.Input<string>;
    /**
     * Time the RBAC Role Binding was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * user is the name of the user as seen by the kubernetes cluster, example
     * "alice" or "alice@domain.tld"
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScopeRbacRoleBinding resource.
 */
export interface ScopeRbacRoleBindingArgs {
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * group is the group, as seen by the kubernetes cluster.
     */
    group?: pulumi.Input<string>;
    /**
     * Labels for this ScopeRBACRoleBinding.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Role to bind to the principal.
     * Structure is documented below.
     */
    role: pulumi.Input<inputs.gkehub.ScopeRbacRoleBindingRole>;
    /**
     * Id of the scope
     */
    scopeId: pulumi.Input<string>;
    /**
     * The client-provided identifier of the RBAC Role Binding.
     */
    scopeRbacRoleBindingId: pulumi.Input<string>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * user is the name of the user as seen by the kubernetes cluster, example
     * "alice" or "alice@domain.tld"
     */
    user?: pulumi.Input<string>;
}
