// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * MembershipRBACRoleBinding can be imported using any of these accepted formats:
 *
 *  * `projects/{{project}}/locations/{{location}}/memberships/{{membership_id}}/rbacrolebindings/{{membership_rbac_role_binding_id}}`
 *
 *  * `{{project}}/{{location}}/{{membership_id}}/{{membership_rbac_role_binding_id}}`
 *
 *  * `{{location}}/{{membership_id}}/{{membership_rbac_role_binding_id}}`
 *
 *  When using the `pulumi import` command, MembershipRBACRoleBinding can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gkehub/membershipRbacRoleBinding:MembershipRbacRoleBinding default projects/{{project}}/locations/{{location}}/memberships/{{membership_id}}/rbacrolebindings/{{membership_rbac_role_binding_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkehub/membershipRbacRoleBinding:MembershipRbacRoleBinding default {{project}}/{{location}}/{{membership_id}}/{{membership_rbac_role_binding_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gkehub/membershipRbacRoleBinding:MembershipRbacRoleBinding default {{location}}/{{membership_id}}/{{membership_rbac_role_binding_id}}
 * ```
 */
export class MembershipRbacRoleBinding extends pulumi.CustomResource {
    /**
     * Get an existing MembershipRbacRoleBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MembershipRbacRoleBindingState, opts?: pulumi.CustomResourceOptions): MembershipRbacRoleBinding {
        return new MembershipRbacRoleBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:gkehub/membershipRbacRoleBinding:MembershipRbacRoleBinding';

    /**
     * Returns true if the given object is an instance of MembershipRbacRoleBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MembershipRbacRoleBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MembershipRbacRoleBinding.__pulumiType;
    }

    /**
     * Time the RBAC Role Binding was created in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Time the RBAC Role Binding was deleted in UTC.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * Location of the Membership
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Id of the membership
     */
    public readonly membershipId!: pulumi.Output<string>;
    /**
     * The client-provided identifier of the RBAC Role Binding.
     */
    public readonly membershipRbacRoleBindingId!: pulumi.Output<string>;
    /**
     * The resource name for the RBAC Role Binding
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Role to bind to the principal.
     * Structure is documented below.
     */
    public readonly role!: pulumi.Output<outputs.gkehub.MembershipRbacRoleBindingRole>;
    /**
     * State of the RBAC Role Binding resource.
     * Structure is documented below.
     */
    public /*out*/ readonly states!: pulumi.Output<outputs.gkehub.MembershipRbacRoleBindingState[]>;
    /**
     * Google-generated UUID for this resource.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Time the RBAC Role Binding was updated in UTC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * user is the name of the user as seen by the kubernetes cluster, example
     * "alice" or "alice@domain.tld"
     */
    public readonly user!: pulumi.Output<string>;

    /**
     * Create a MembershipRbacRoleBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MembershipRbacRoleBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MembershipRbacRoleBindingArgs | MembershipRbacRoleBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MembershipRbacRoleBindingState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteTime"] = state ? state.deleteTime : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["membershipId"] = state ? state.membershipId : undefined;
            resourceInputs["membershipRbacRoleBindingId"] = state ? state.membershipRbacRoleBindingId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as MembershipRbacRoleBindingArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.membershipId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'membershipId'");
            }
            if ((!args || args.membershipRbacRoleBindingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'membershipRbacRoleBindingId'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["membershipId"] = args ? args.membershipId : undefined;
            resourceInputs["membershipRbacRoleBindingId"] = args ? args.membershipRbacRoleBindingId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MembershipRbacRoleBinding.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MembershipRbacRoleBinding resources.
 */
export interface MembershipRbacRoleBindingState {
    /**
     * Time the RBAC Role Binding was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Time the RBAC Role Binding was deleted in UTC.
     */
    deleteTime?: pulumi.Input<string>;
    /**
     * Location of the Membership
     */
    location?: pulumi.Input<string>;
    /**
     * Id of the membership
     */
    membershipId?: pulumi.Input<string>;
    /**
     * The client-provided identifier of the RBAC Role Binding.
     */
    membershipRbacRoleBindingId?: pulumi.Input<string>;
    /**
     * The resource name for the RBAC Role Binding
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Role to bind to the principal.
     * Structure is documented below.
     */
    role?: pulumi.Input<inputs.gkehub.MembershipRbacRoleBindingRole>;
    /**
     * State of the RBAC Role Binding resource.
     * Structure is documented below.
     */
    states?: pulumi.Input<pulumi.Input<inputs.gkehub.MembershipRbacRoleBindingState>[]>;
    /**
     * Google-generated UUID for this resource.
     */
    uid?: pulumi.Input<string>;
    /**
     * Time the RBAC Role Binding was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * user is the name of the user as seen by the kubernetes cluster, example
     * "alice" or "alice@domain.tld"
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MembershipRbacRoleBinding resource.
 */
export interface MembershipRbacRoleBindingArgs {
    /**
     * Location of the Membership
     */
    location: pulumi.Input<string>;
    /**
     * Id of the membership
     */
    membershipId: pulumi.Input<string>;
    /**
     * The client-provided identifier of the RBAC Role Binding.
     */
    membershipRbacRoleBindingId: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Role to bind to the principal.
     * Structure is documented below.
     */
    role: pulumi.Input<inputs.gkehub.MembershipRbacRoleBindingRole>;
    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * user is the name of the user as seen by the kubernetes cluster, example
     * "alice" or "alice@domain.tld"
     */
    user: pulumi.Input<string>;
}
