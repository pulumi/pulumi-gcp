// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A Regional Parameter Version resource that stores the actual value of the regional parameter.
 *
 * To get more information about RegionalParameterVersion, see:
 *
 * * [API documentation](https://cloud.google.com/secret-manager/parameter-manager/docs/reference/rest/v1/projects.locations.parameters.versions)
 *
 * ## Example Usage
 *
 * ### Regional Parameter Version Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const regional_parameter_basic = new gcp.parametermanager.RegionalParameter("regional-parameter-basic", {
 *     parameterId: "regional_parameter",
 *     location: "us-central1",
 * });
 * const regional_parameter_version_basic = new gcp.parametermanager.RegionalParameterVersion("regional-parameter-version-basic", {
 *     parameter: regional_parameter_basic.id,
 *     parameterVersionId: "regional_parameter_version",
 *     parameterData: "regional-parameter-version-data",
 * });
 * ```
 * ### Regional Parameter Version With Json Format
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const regional_parameter_basic = new gcp.parametermanager.RegionalParameter("regional-parameter-basic", {
 *     parameterId: "regional_parameter",
 *     format: "JSON",
 *     location: "us-central1",
 * });
 * const regional_parameter_version_with_json_format = new gcp.parametermanager.RegionalParameterVersion("regional-parameter-version-with-json-format", {
 *     parameter: regional_parameter_basic.id,
 *     parameterVersionId: "regional_parameter_version",
 *     parameterData: JSON.stringify({
 *         key1: "val1",
 *         key2: "val2",
 *     }),
 * });
 * ```
 * ### Regional Parameter Version With Kms Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const regional_parameter_basic = new gcp.parametermanager.RegionalParameter("regional-parameter-basic", {
 *     parameterId: "regional_parameter",
 *     location: "us-central1",
 *     kmsKey: "kms-key",
 * });
 * const regional_parameter_version_with_kms_key = new gcp.parametermanager.RegionalParameterVersion("regional-parameter-version-with-kms-key", {
 *     parameter: regional_parameter_basic.id,
 *     parameterVersionId: "regional_parameter_version",
 *     parameterData: "regional-parameter-version-data",
 * });
 * ```
 *
 * ## Import
 *
 * RegionalParameterVersion can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
 *
 * When using the `pulumi import` command, RegionalParameterVersion can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:parametermanager/regionalParameterVersion:RegionalParameterVersion default projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}
 * ```
 */
export class RegionalParameterVersion extends pulumi.CustomResource {
    /**
     * Get an existing RegionalParameterVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegionalParameterVersionState, opts?: pulumi.CustomResourceOptions): RegionalParameterVersion {
        return new RegionalParameterVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:parametermanager/regionalParameterVersion:RegionalParameterVersion';

    /**
     * Returns true if the given object is an instance of RegionalParameterVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegionalParameterVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegionalParameterVersion.__pulumiType;
    }

    /**
     * The time at which the Regional Parameter Version was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The current state of Regional Parameter Version. This field is only applicable for updating Regional Parameter Version.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * The resource name of the Cloud KMS CryptoKeyVersion used to decrypt regional parameter version payload. Format
     * `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}/cryptoKeyVersions/{{crypto_key_version}}`
     */
    public /*out*/ readonly kmsKeyVersion!: pulumi.Output<string>;
    /**
     * Location of Parameter Manager Regional parameter resource.
     */
    public /*out*/ readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the Regional Parameter Version. Format:
     * `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Parameter Manager Regional Parameter resource.
     */
    public readonly parameter!: pulumi.Output<string>;
    /**
     * The Regional Parameter data.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     */
    public readonly parameterData!: pulumi.Output<string>;
    /**
     * Version ID of the Regional Parameter Version Resource. This must be unique within the Regional Parameter.
     *
     *
     * - - -
     */
    public readonly parameterVersionId!: pulumi.Output<string>;
    /**
     * The time at which the Regional Parameter Version was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a RegionalParameterVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegionalParameterVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegionalParameterVersionArgs | RegionalParameterVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegionalParameterVersionState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["kmsKeyVersion"] = state ? state.kmsKeyVersion : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameter"] = state ? state.parameter : undefined;
            resourceInputs["parameterData"] = state ? state.parameterData : undefined;
            resourceInputs["parameterVersionId"] = state ? state.parameterVersionId : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as RegionalParameterVersionArgs | undefined;
            if ((!args || args.parameter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameter'");
            }
            if ((!args || args.parameterData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameterData'");
            }
            if ((!args || args.parameterVersionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameterVersionId'");
            }
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["parameter"] = args ? args.parameter : undefined;
            resourceInputs["parameterData"] = args?.parameterData ? pulumi.secret(args.parameterData) : undefined;
            resourceInputs["parameterVersionId"] = args ? args.parameterVersionId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["kmsKeyVersion"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["parameterData"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RegionalParameterVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegionalParameterVersion resources.
 */
export interface RegionalParameterVersionState {
    /**
     * The time at which the Regional Parameter Version was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The current state of Regional Parameter Version. This field is only applicable for updating Regional Parameter Version.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The resource name of the Cloud KMS CryptoKeyVersion used to decrypt regional parameter version payload. Format
     * `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}/cryptoKeyVersions/{{crypto_key_version}}`
     */
    kmsKeyVersion?: pulumi.Input<string>;
    /**
     * Location of Parameter Manager Regional parameter resource.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the Regional Parameter Version. Format:
     * `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
     */
    name?: pulumi.Input<string>;
    /**
     * Parameter Manager Regional Parameter resource.
     */
    parameter?: pulumi.Input<string>;
    /**
     * The Regional Parameter data.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     */
    parameterData?: pulumi.Input<string>;
    /**
     * Version ID of the Regional Parameter Version Resource. This must be unique within the Regional Parameter.
     *
     *
     * - - -
     */
    parameterVersionId?: pulumi.Input<string>;
    /**
     * The time at which the Regional Parameter Version was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegionalParameterVersion resource.
 */
export interface RegionalParameterVersionArgs {
    /**
     * The current state of Regional Parameter Version. This field is only applicable for updating Regional Parameter Version.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Parameter Manager Regional Parameter resource.
     */
    parameter: pulumi.Input<string>;
    /**
     * The Regional Parameter data.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     */
    parameterData: pulumi.Input<string>;
    /**
     * Version ID of the Regional Parameter Version Resource. This must be unique within the Regional Parameter.
     *
     *
     * - - -
     */
    parameterVersionId: pulumi.Input<string>;
}
