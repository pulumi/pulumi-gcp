// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A Parameter resource is a logical parameter.
 *
 * To get more information about Parameter, see:
 *
 * * [API documentation](https://cloud.google.com/secret-manager/parameter-manager/docs/reference/rest/v1/projects.locations.parameters)
 *
 * ## Example Usage
 *
 * ### Parameter Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const parameter_basic = new gcp.parametermanager.Parameter("parameter-basic", {parameterId: "parameter"});
 * ```
 * ### Parameter With Format
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const parameter_with_format = new gcp.parametermanager.Parameter("parameter-with-format", {
 *     parameterId: "parameter",
 *     format: "JSON",
 * });
 * ```
 * ### Parameter With Labels
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const parameter_with_labels = new gcp.parametermanager.Parameter("parameter-with-labels", {
 *     parameterId: "parameter",
 *     labels: {
 *         key1: "val1",
 *         key2: "val2",
 *         key3: "val3",
 *         key4: "val4",
 *         key5: "val5",
 *     },
 * });
 * ```
 * ### Parameter With Kms Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const parameter_with_kms_key = new gcp.parametermanager.Parameter("parameter-with-kms-key", {
 *     parameterId: "parameter",
 *     kmsKey: "kms-key",
 * });
 * ```
 *
 * ## Import
 *
 * Parameter can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/global/parameters/{{parameter_id}}`
 *
 * * `{{project}}/{{parameter_id}}`
 *
 * * `{{parameter_id}}`
 *
 * When using the `pulumi import` command, Parameter can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:parametermanager/parameter:Parameter default projects/{{project}}/locations/global/parameters/{{parameter_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:parametermanager/parameter:Parameter default {{project}}/{{parameter_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:parametermanager/parameter:Parameter default {{parameter_id}}
 * ```
 */
export class Parameter extends pulumi.CustomResource {
    /**
     * Get an existing Parameter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ParameterState, opts?: pulumi.CustomResourceOptions): Parameter {
        return new Parameter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:parametermanager/parameter:Parameter';

    /**
     * Returns true if the given object is an instance of Parameter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Parameter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Parameter.__pulumiType;
    }

    /**
     * The time at which the Parameter was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The format type of the parameter resource.
     * Default value is `UNFORMATTED`.
     * Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
     */
    public readonly format!: pulumi.Output<string | undefined>;
    /**
     * The resource name of the Cloud KMS CryptoKey used to encrypt parameter version payload. Format
     * `projects/{{project}}/locations/global/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}`
     */
    public readonly kmsKey!: pulumi.Output<string | undefined>;
    /**
     * The labels assigned to this Parameter.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
     * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
     * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
     * No more than 64 labels can be assigned to a given resource.
     * An object containing a list of "key": value pairs. Example:
     * { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource name of the Parameter. Format:
     * `projects/{{project}}/locations/global/parameters/{{parameter_id}}`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * This must be unique within the project.
     */
    public readonly parameterId!: pulumi.Output<string>;
    /**
     * Policy member strings of a Google Cloud resource.
     * Structure is documented below.
     */
    public /*out*/ readonly policyMembers!: pulumi.Output<outputs.parametermanager.ParameterPolicyMember[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The time at which the Parameter was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Parameter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ParameterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ParameterArgs | ParameterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ParameterState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["kmsKey"] = state ? state.kmsKey : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameterId"] = state ? state.parameterId : undefined;
            resourceInputs["policyMembers"] = state ? state.policyMembers : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as ParameterArgs | undefined;
            if ((!args || args.parameterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameterId'");
            }
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["kmsKey"] = args ? args.kmsKey : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["parameterId"] = args ? args.parameterId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["policyMembers"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Parameter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Parameter resources.
 */
export interface ParameterState {
    /**
     * The time at which the Parameter was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The format type of the parameter resource.
     * Default value is `UNFORMATTED`.
     * Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
     */
    format?: pulumi.Input<string>;
    /**
     * The resource name of the Cloud KMS CryptoKey used to encrypt parameter version payload. Format
     * `projects/{{project}}/locations/global/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}`
     */
    kmsKey?: pulumi.Input<string>;
    /**
     * The labels assigned to this Parameter.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
     * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
     * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
     * No more than 64 labels can be assigned to a given resource.
     * An object containing a list of "key": value pairs. Example:
     * { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name of the Parameter. Format:
     * `projects/{{project}}/locations/global/parameters/{{parameter_id}}`
     */
    name?: pulumi.Input<string>;
    /**
     * This must be unique within the project.
     */
    parameterId?: pulumi.Input<string>;
    /**
     * Policy member strings of a Google Cloud resource.
     * Structure is documented below.
     */
    policyMembers?: pulumi.Input<pulumi.Input<inputs.parametermanager.ParameterPolicyMember>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time at which the Parameter was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Parameter resource.
 */
export interface ParameterArgs {
    /**
     * The format type of the parameter resource.
     * Default value is `UNFORMATTED`.
     * Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
     */
    format?: pulumi.Input<string>;
    /**
     * The resource name of the Cloud KMS CryptoKey used to encrypt parameter version payload. Format
     * `projects/{{project}}/locations/global/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}`
     */
    kmsKey?: pulumi.Input<string>;
    /**
     * The labels assigned to this Parameter.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
     * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
     * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
     * No more than 64 labels can be assigned to a given resource.
     * An object containing a list of "key": value pairs. Example:
     * { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * This must be unique within the project.
     */
    parameterId: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
