// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetParameterArgs, GetParameterResult, GetParameterOutputArgs } from "./getParameter";
export const getParameter: typeof import("./getParameter").getParameter = null as any;
export const getParameterOutput: typeof import("./getParameter").getParameterOutput = null as any;
utilities.lazyLoad(exports, ["getParameter","getParameterOutput"], () => require("./getParameter"));

export { GetParameterVersionArgs, GetParameterVersionResult, GetParameterVersionOutputArgs } from "./getParameterVersion";
export const getParameterVersion: typeof import("./getParameterVersion").getParameterVersion = null as any;
export const getParameterVersionOutput: typeof import("./getParameterVersion").getParameterVersionOutput = null as any;
utilities.lazyLoad(exports, ["getParameterVersion","getParameterVersionOutput"], () => require("./getParameterVersion"));

export { GetParameterVersionRenderArgs, GetParameterVersionRenderResult, GetParameterVersionRenderOutputArgs } from "./getParameterVersionRender";
export const getParameterVersionRender: typeof import("./getParameterVersionRender").getParameterVersionRender = null as any;
export const getParameterVersionRenderOutput: typeof import("./getParameterVersionRender").getParameterVersionRenderOutput = null as any;
utilities.lazyLoad(exports, ["getParameterVersionRender","getParameterVersionRenderOutput"], () => require("./getParameterVersionRender"));

export { GetParametersArgs, GetParametersResult, GetParametersOutputArgs } from "./getParameters";
export const getParameters: typeof import("./getParameters").getParameters = null as any;
export const getParametersOutput: typeof import("./getParameters").getParametersOutput = null as any;
utilities.lazyLoad(exports, ["getParameters","getParametersOutput"], () => require("./getParameters"));

export { GetRegionalParameterArgs, GetRegionalParameterResult, GetRegionalParameterOutputArgs } from "./getRegionalParameter";
export const getRegionalParameter: typeof import("./getRegionalParameter").getRegionalParameter = null as any;
export const getRegionalParameterOutput: typeof import("./getRegionalParameter").getRegionalParameterOutput = null as any;
utilities.lazyLoad(exports, ["getRegionalParameter","getRegionalParameterOutput"], () => require("./getRegionalParameter"));

export { GetRegionalParameterVersionArgs, GetRegionalParameterVersionResult, GetRegionalParameterVersionOutputArgs } from "./getRegionalParameterVersion";
export const getRegionalParameterVersion: typeof import("./getRegionalParameterVersion").getRegionalParameterVersion = null as any;
export const getRegionalParameterVersionOutput: typeof import("./getRegionalParameterVersion").getRegionalParameterVersionOutput = null as any;
utilities.lazyLoad(exports, ["getRegionalParameterVersion","getRegionalParameterVersionOutput"], () => require("./getRegionalParameterVersion"));

export { GetRegionalParameterVersionRenderArgs, GetRegionalParameterVersionRenderResult, GetRegionalParameterVersionRenderOutputArgs } from "./getRegionalParameterVersionRender";
export const getRegionalParameterVersionRender: typeof import("./getRegionalParameterVersionRender").getRegionalParameterVersionRender = null as any;
export const getRegionalParameterVersionRenderOutput: typeof import("./getRegionalParameterVersionRender").getRegionalParameterVersionRenderOutput = null as any;
utilities.lazyLoad(exports, ["getRegionalParameterVersionRender","getRegionalParameterVersionRenderOutput"], () => require("./getRegionalParameterVersionRender"));

export { GetRegionalParametersArgs, GetRegionalParametersResult, GetRegionalParametersOutputArgs } from "./getRegionalParameters";
export const getRegionalParameters: typeof import("./getRegionalParameters").getRegionalParameters = null as any;
export const getRegionalParametersOutput: typeof import("./getRegionalParameters").getRegionalParametersOutput = null as any;
utilities.lazyLoad(exports, ["getRegionalParameters","getRegionalParametersOutput"], () => require("./getRegionalParameters"));

export { ParameterArgs, ParameterState } from "./parameter";
export type Parameter = import("./parameter").Parameter;
export const Parameter: typeof import("./parameter").Parameter = null as any;
utilities.lazyLoad(exports, ["Parameter"], () => require("./parameter"));

export { ParameterVersionArgs, ParameterVersionState } from "./parameterVersion";
export type ParameterVersion = import("./parameterVersion").ParameterVersion;
export const ParameterVersion: typeof import("./parameterVersion").ParameterVersion = null as any;
utilities.lazyLoad(exports, ["ParameterVersion"], () => require("./parameterVersion"));

export { RegionalParameterArgs, RegionalParameterState } from "./regionalParameter";
export type RegionalParameter = import("./regionalParameter").RegionalParameter;
export const RegionalParameter: typeof import("./regionalParameter").RegionalParameter = null as any;
utilities.lazyLoad(exports, ["RegionalParameter"], () => require("./regionalParameter"));

export { RegionalParameterVersionArgs, RegionalParameterVersionState } from "./regionalParameterVersion";
export type RegionalParameterVersion = import("./regionalParameterVersion").RegionalParameterVersion;
export const RegionalParameterVersion: typeof import("./regionalParameterVersion").RegionalParameterVersion = null as any;
utilities.lazyLoad(exports, ["RegionalParameterVersion"], () => require("./regionalParameterVersion"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:parametermanager/parameter:Parameter":
                return new Parameter(name, <any>undefined, { urn })
            case "gcp:parametermanager/parameterVersion:ParameterVersion":
                return new ParameterVersion(name, <any>undefined, { urn })
            case "gcp:parametermanager/regionalParameter:RegionalParameter":
                return new RegionalParameter(name, <any>undefined, { urn })
            case "gcp:parametermanager/regionalParameterVersion:RegionalParameterVersion":
                return new RegionalParameterVersion(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "parametermanager/parameter", _module)
pulumi.runtime.registerResourceModule("gcp", "parametermanager/parameterVersion", _module)
pulumi.runtime.registerResourceModule("gcp", "parametermanager/regionalParameter", _module)
pulumi.runtime.registerResourceModule("gcp", "parametermanager/regionalParameterVersion", _module)
