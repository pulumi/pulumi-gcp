// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to get information about a Parameter Manager Parameter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const parameterDatasource = gcp.parametermanager.getParameter({
 *     parameterId: "foobar",
 * });
 * ```
 */
export function getParameter(args: GetParameterArgs, opts?: pulumi.InvokeOptions): Promise<GetParameterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:parametermanager/getParameter:getParameter", {
        "parameterId": args.parameterId,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getParameter.
 */
export interface GetParameterArgs {
    /**
     * The name of the parameter.
     */
    parameterId: string;
    /**
     * The ID of the project in which the resource belongs.
     */
    project?: string;
}

/**
 * A collection of values returned by getParameter.
 */
export interface GetParameterResult {
    readonly createTime: string;
    readonly effectiveLabels: {[key: string]: string};
    readonly format: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly kmsKey: string;
    readonly labels: {[key: string]: string};
    readonly name: string;
    readonly parameterId: string;
    readonly policyMembers: outputs.parametermanager.GetParameterPolicyMember[];
    readonly project?: string;
    readonly pulumiLabels: {[key: string]: string};
    readonly updateTime: string;
}
/**
 * Use this data source to get information about a Parameter Manager Parameter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const parameterDatasource = gcp.parametermanager.getParameter({
 *     parameterId: "foobar",
 * });
 * ```
 */
export function getParameterOutput(args: GetParameterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetParameterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:parametermanager/getParameter:getParameter", {
        "parameterId": args.parameterId,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getParameter.
 */
export interface GetParameterOutputArgs {
    /**
     * The name of the parameter.
     */
    parameterId: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     */
    project?: pulumi.Input<string>;
}
