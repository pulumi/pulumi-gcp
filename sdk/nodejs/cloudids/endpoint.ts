// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Cloud IDS is an intrusion detection service that provides threat detection for intrusions, malware, spyware, and command-and-control attacks on your network.
 *
 * To get more information about Endpoint, see:
 *
 * * [API documentation](https://cloud.google.com/intrusion-detection-system/docs/configuring-ids)
 *
 * ## Example Usage
 *
 * ### Cloudids Endpoint
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {name: "tf-test-my-network"});
 * const serviceRange = new gcp.compute.GlobalAddress("service_range", {
 *     name: "address",
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: _default.id,
 * });
 * const privateServiceConnection = new gcp.servicenetworking.Connection("private_service_connection", {
 *     network: _default.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [serviceRange.name],
 * });
 * const example_endpoint = new gcp.cloudids.Endpoint("example-endpoint", {
 *     name: "test",
 *     location: "us-central1-f",
 *     network: _default.id,
 *     severity: "INFORMATIONAL",
 * }, {
 *     dependsOn: [privateServiceConnection],
 * });
 * ```
 *
 * ## Import
 *
 * Endpoint can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/endpoints/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, Endpoint can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:cloudids/endpoint:Endpoint default projects/{{project}}/locations/{{location}}/endpoints/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:cloudids/endpoint:Endpoint default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:cloudids/endpoint:Endpoint default {{location}}/{{name}}
 * ```
 */
export class Endpoint extends pulumi.CustomResource {
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointState, opts?: pulumi.CustomResourceOptions): Endpoint {
        return new Endpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:cloudids/endpoint:Endpoint';

    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Endpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Endpoint.__pulumiType;
    }

    /**
     * Creation timestamp in RFC 3339 text format.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * An optional description of the endpoint.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * URL of the endpoint's network address to which traffic is to be sent by Packet Mirroring.
     */
    declare public /*out*/ readonly endpointForwardingRule: pulumi.Output<string>;
    /**
     * Internal IP address of the endpoint's network entry point.
     */
    declare public /*out*/ readonly endpointIp: pulumi.Output<string>;
    /**
     * The location for the endpoint.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Name of the endpoint in the format projects/{project_id}/locations/{locationId}/endpoints/{endpointId}.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Name of the VPC network that is connected to the IDS endpoint. This can either contain the VPC network name itself (like "src-net") or the full URL to the network (like "projects/{project_id}/global/networks/src-net").
     */
    declare public readonly network: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The minimum alert severity level that is reported by the endpoint.
     * Possible values are: `INFORMATIONAL`, `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`.
     */
    declare public readonly severity: pulumi.Output<string>;
    /**
     * Configuration for threat IDs excluded from generating alerts. Limit: 99 IDs.
     */
    declare public readonly threatExceptions: pulumi.Output<string[] | undefined>;
    /**
     * Last update timestamp in RFC 3339 text format.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointArgs | EndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EndpointState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["endpointForwardingRule"] = state?.endpointForwardingRule;
            resourceInputs["endpointIp"] = state?.endpointIp;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["network"] = state?.network;
            resourceInputs["project"] = state?.project;
            resourceInputs["severity"] = state?.severity;
            resourceInputs["threatExceptions"] = state?.threatExceptions;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as EndpointArgs | undefined;
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.network === undefined && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if (args?.severity === undefined && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["network"] = args?.network;
            resourceInputs["project"] = args?.project;
            resourceInputs["severity"] = args?.severity;
            resourceInputs["threatExceptions"] = args?.threatExceptions;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["endpointForwardingRule"] = undefined /*out*/;
            resourceInputs["endpointIp"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Endpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Endpoint resources.
 */
export interface EndpointState {
    /**
     * Creation timestamp in RFC 3339 text format.
     */
    createTime?: pulumi.Input<string>;
    /**
     * An optional description of the endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * URL of the endpoint's network address to which traffic is to be sent by Packet Mirroring.
     */
    endpointForwardingRule?: pulumi.Input<string>;
    /**
     * Internal IP address of the endpoint's network entry point.
     */
    endpointIp?: pulumi.Input<string>;
    /**
     * The location for the endpoint.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the endpoint in the format projects/{project_id}/locations/{locationId}/endpoints/{endpointId}.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the VPC network that is connected to the IDS endpoint. This can either contain the VPC network name itself (like "src-net") or the full URL to the network (like "projects/{project_id}/global/networks/src-net").
     */
    network?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The minimum alert severity level that is reported by the endpoint.
     * Possible values are: `INFORMATIONAL`, `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`.
     */
    severity?: pulumi.Input<string>;
    /**
     * Configuration for threat IDs excluded from generating alerts. Limit: 99 IDs.
     */
    threatExceptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Last update timestamp in RFC 3339 text format.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Endpoint resource.
 */
export interface EndpointArgs {
    /**
     * An optional description of the endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * The location for the endpoint.
     */
    location: pulumi.Input<string>;
    /**
     * Name of the endpoint in the format projects/{project_id}/locations/{locationId}/endpoints/{endpointId}.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the VPC network that is connected to the IDS endpoint. This can either contain the VPC network name itself (like "src-net") or the full URL to the network (like "projects/{project_id}/global/networks/src-net").
     */
    network: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The minimum alert severity level that is reported by the endpoint.
     * Possible values are: `INFORMATIONAL`, `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`.
     */
    severity: pulumi.Input<string>;
    /**
     * Configuration for threat IDs excluded from generating alerts. Limit: 99 IDs.
     */
    threatExceptions?: pulumi.Input<pulumi.Input<string>[]>;
}
