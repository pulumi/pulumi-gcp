// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Tpu V2 Queued Resource Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const qr = new gcp.tpu.V2QueuedResource("qr", {
 *     name: "test-qr",
 *     zone: "us-central1-c",
 *     project: "my-project-name",
 *     tpu: {
 *         nodeSpecs: [{
 *             parent: "projects/my-project-name/locations/us-central1-c",
 *             nodeId: "test-tpu",
 *             node: {
 *                 runtimeVersion: "tpu-vm-tf-2.13.0",
 *                 acceleratorType: "v2-8",
 *                 description: "Text description of the TPU.",
 *             },
 *         }],
 *     },
 * });
 * ```
 * ### Tpu V2 Queued Resource Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network = new gcp.compute.Network("network", {
 *     name: "tpu-net",
 *     autoCreateSubnetworks: false,
 * });
 * const subnet = new gcp.compute.Subnetwork("subnet", {
 *     name: "tpu-subnet",
 *     ipCidrRange: "10.0.0.0/16",
 *     region: "us-central1",
 *     network: network.id,
 * });
 * const qr = new gcp.tpu.V2QueuedResource("qr", {
 *     name: "test-qr",
 *     zone: "us-central1-c",
 *     project: "my-project-name",
 *     tpu: {
 *         nodeSpecs: [{
 *             parent: "projects/my-project-name/locations/us-central1-c",
 *             nodeId: "test-tpu",
 *             node: {
 *                 runtimeVersion: "tpu-vm-tf-2.13.0",
 *                 acceleratorType: "v2-8",
 *                 description: "Text description of the TPU.",
 *                 networkConfig: {
 *                     canIpForward: true,
 *                     enableExternalIps: true,
 *                     network: network.id,
 *                     subnetwork: subnet.id,
 *                     queueCount: 32,
 *                 },
 *             },
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * QueuedResource can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}`
 *
 * * `{{project}}/{{zone}}/{{name}}`
 *
 * * `{{zone}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, QueuedResource can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default {{project}}/{{zone}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default {{zone}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default {{name}}
 * ```
 */
export class V2QueuedResource extends pulumi.CustomResource {
    /**
     * Get an existing V2QueuedResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V2QueuedResourceState, opts?: pulumi.CustomResourceOptions): V2QueuedResource {
        return new V2QueuedResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:tpu/v2QueuedResource:V2QueuedResource';

    /**
     * Returns true if the given object is an instance of V2QueuedResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V2QueuedResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V2QueuedResource.__pulumiType;
    }

    /**
     * The immutable name of the Queued Resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Defines a TPU resource.
     * Structure is documented below.
     */
    declare public readonly tpu: pulumi.Output<outputs.tpu.V2QueuedResourceTpu | undefined>;
    /**
     * The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
     */
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a V2QueuedResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: V2QueuedResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V2QueuedResourceArgs | V2QueuedResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V2QueuedResourceState | undefined;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["tpu"] = state?.tpu;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as V2QueuedResourceArgs | undefined;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["tpu"] = args?.tpu;
            resourceInputs["zone"] = args?.zone;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(V2QueuedResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering V2QueuedResource resources.
 */
export interface V2QueuedResourceState {
    /**
     * The immutable name of the Queued Resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Defines a TPU resource.
     * Structure is documented below.
     */
    tpu?: pulumi.Input<inputs.tpu.V2QueuedResourceTpu>;
    /**
     * The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a V2QueuedResource resource.
 */
export interface V2QueuedResourceArgs {
    /**
     * The immutable name of the Queued Resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Defines a TPU resource.
     * Structure is documented below.
     */
    tpu?: pulumi.Input<inputs.tpu.V2QueuedResourceTpu>;
    /**
     * The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
     */
    zone?: pulumi.Input<string>;
}
