// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Resource Manager Capability
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as time from "@pulumiverse/time";
 *
 * const folder = new gcp.organizations.Folder("folder", {
 *     displayName: "my-folder",
 *     parent: "organizations/123456789",
 *     deletionProtection: false,
 * });
 * const wait60s = new time.index.Sleep("wait_60s", {createDuration: "60s"}, {
 *     dependsOn: [folder],
 * });
 * const capability = new gcp.resourcemanager.Capability("capability", {
 *     value: true,
 *     parent: folder.name,
 *     capabilityName: "app-management",
 * }, {
 *     dependsOn: [wait60s],
 * });
 * ```
 *
 * ## Import
 *
 * Capability can be imported using any of these accepted formats:
 *
 * * `{{parent}}/capabilities/{{capability_name}}`
 *
 * * `{{parent}}/{{capability_name}}`
 *
 * When using the `pulumi import` command, Capability can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:resourcemanager/capability:Capability default {{parent}}/capabilities/{{capability_name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:resourcemanager/capability:Capability default {{parent}}/{{capability_name}}
 * ```
 */
export class Capability extends pulumi.CustomResource {
    /**
     * Get an existing Capability resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CapabilityState, opts?: pulumi.CustomResourceOptions): Capability {
        return new Capability(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:resourcemanager/capability:Capability';

    /**
     * Returns true if the given object is an instance of Capability.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Capability {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Capability.__pulumiType;
    }

    /**
     * Capability name that should be updated on the folder.
     */
    declare public readonly capabilityName: pulumi.Output<string>;
    /**
     * Folder on which Capability needs to be updated in the format folders/folder_id.
     */
    declare public readonly parent: pulumi.Output<string>;
    /**
     * Capability Value.
     */
    declare public readonly value: pulumi.Output<boolean>;

    /**
     * Create a Capability resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CapabilityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CapabilityArgs | CapabilityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CapabilityState | undefined;
            resourceInputs["capabilityName"] = state?.capabilityName;
            resourceInputs["parent"] = state?.parent;
            resourceInputs["value"] = state?.value;
        } else {
            const args = argsOrState as CapabilityArgs | undefined;
            if (args?.capabilityName === undefined && !opts.urn) {
                throw new Error("Missing required property 'capabilityName'");
            }
            if (args?.parent === undefined && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            if (args?.value === undefined && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["capabilityName"] = args?.capabilityName;
            resourceInputs["parent"] = args?.parent;
            resourceInputs["value"] = args?.value;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Capability.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Capability resources.
 */
export interface CapabilityState {
    /**
     * Capability name that should be updated on the folder.
     */
    capabilityName?: pulumi.Input<string>;
    /**
     * Folder on which Capability needs to be updated in the format folders/folder_id.
     */
    parent?: pulumi.Input<string>;
    /**
     * Capability Value.
     */
    value?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Capability resource.
 */
export interface CapabilityArgs {
    /**
     * Capability name that should be updated on the folder.
     */
    capabilityName: pulumi.Input<string>;
    /**
     * Folder on which Capability needs to be updated in the format folders/folder_id.
     */
    parent: pulumi.Input<string>;
    /**
     * Capability Value.
     */
    value: pulumi.Input<boolean>;
}
