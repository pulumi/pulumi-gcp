// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Vertex AI Feature Group Feature is feature metadata information.
 *
 * To get more information about FeatureGroupFeature, see:
 *
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureGroups.features)
 * * How-to Guides
 *     * [Creating a Feature](https://cloud.google.com/vertex-ai/docs/featurestore/latest/create-feature)
 *
 * ## Example Usage
 *
 * ### Vertex Ai Feature Group Feature
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const sampleDataset = new gcp.bigquery.Dataset("sample_dataset", {
 *     datasetId: "job_load_dataset",
 *     friendlyName: "test",
 *     description: "This is a test description",
 *     location: "US",
 * });
 * const sampleTable = new gcp.bigquery.Table("sample_table", {
 *     deletionProtection: false,
 *     datasetId: sampleDataset.datasetId,
 *     tableId: "job_load_table",
 *     schema: `[
 *     {
 *         "name": "feature_id",
 *         "type": "STRING",
 *         "mode": "NULLABLE"
 *     },
 *     {
 *         "name": "example_feature",
 *         "type": "STRING",
 *         "mode": "NULLABLE"
 *     },
 *     {
 *         "name": "feature_timestamp",
 *         "type": "TIMESTAMP",
 *         "mode": "NULLABLE"
 *     }
 * ]
 * `,
 * });
 * const sampleFeatureGroup = new gcp.vertex.AiFeatureGroup("sample_feature_group", {
 *     name: "example_feature_group",
 *     description: "A sample feature group",
 *     region: "us-central1",
 *     labels: {
 *         "label-one": "value-one",
 *     },
 *     bigQuery: {
 *         bigQuerySource: {
 *             inputUri: pulumi.interpolate`bq://${sampleTable.project}.${sampleTable.datasetId}.${sampleTable.tableId}`,
 *         },
 *         entityIdColumns: ["feature_id"],
 *     },
 * });
 * const featureGroupFeature = new gcp.vertex.AiFeatureGroupFeature("feature_group_feature", {
 *     name: "example_feature",
 *     region: "us-central1",
 *     featureGroup: sampleFeatureGroup.name,
 *     description: "A sample feature",
 *     labels: {
 *         "label-one": "value-one",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * FeatureGroupFeature can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}}/features/{{name}}`
 *
 * * `{{project}}/{{region}}/{{feature_group}}/{{name}}`
 *
 * * `{{region}}/{{feature_group}}/{{name}}`
 *
 * * `{{feature_group}}/{{name}}`
 *
 * When using the `pulumi import` command, FeatureGroupFeature can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature default projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}}/features/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature default {{project}}/{{region}}/{{feature_group}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature default {{region}}/{{feature_group}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature default {{feature_group}}/{{name}}
 * ```
 */
export class AiFeatureGroupFeature extends pulumi.CustomResource {
    /**
     * Get an existing AiFeatureGroupFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AiFeatureGroupFeatureState, opts?: pulumi.CustomResourceOptions): AiFeatureGroupFeature {
        return new AiFeatureGroupFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature';

    /**
     * Returns true if the given object is an instance of AiFeatureGroupFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AiFeatureGroupFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AiFeatureGroupFeature.__pulumiType;
    }

    /**
     * The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The description of the FeatureGroup.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the Feature Group.
     */
    public readonly featureGroup!: pulumi.Output<string>;
    /**
     * The labels with user-defined metadata to organize your FeatureGroup.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource name of the Feature Group Feature.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The region for the resource. It should be the same as the feature group's region.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
     */
    public readonly versionColumnName!: pulumi.Output<string>;

    /**
     * Create a AiFeatureGroupFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AiFeatureGroupFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AiFeatureGroupFeatureArgs | AiFeatureGroupFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AiFeatureGroupFeatureState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["featureGroup"] = state ? state.featureGroup : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["versionColumnName"] = state ? state.versionColumnName : undefined;
        } else {
            const args = argsOrState as AiFeatureGroupFeatureArgs | undefined;
            if ((!args || args.featureGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureGroup'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["featureGroup"] = args ? args.featureGroup : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["versionColumnName"] = args ? args.versionColumnName : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AiFeatureGroupFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AiFeatureGroupFeature resources.
 */
export interface AiFeatureGroupFeatureState {
    /**
     * The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The description of the FeatureGroup.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Feature Group.
     */
    featureGroup?: pulumi.Input<string>;
    /**
     * The labels with user-defined metadata to organize your FeatureGroup.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name of the Feature Group Feature.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The region for the resource. It should be the same as the feature group's region.
     */
    region?: pulumi.Input<string>;
    /**
     * The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
     */
    versionColumnName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AiFeatureGroupFeature resource.
 */
export interface AiFeatureGroupFeatureArgs {
    /**
     * The description of the FeatureGroup.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Feature Group.
     */
    featureGroup: pulumi.Input<string>;
    /**
     * The labels with user-defined metadata to organize your FeatureGroup.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name of the Feature Group Feature.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region for the resource. It should be the same as the feature group's region.
     */
    region: pulumi.Input<string>;
    /**
     * The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
     */
    versionColumnName?: pulumi.Input<string>;
}
