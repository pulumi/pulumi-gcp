// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Feature Metadata information that describes an attribute of an entity type. For example, apple is an entity type, and color is a feature that describes apple.
 *
 * To get more information about FeaturestoreEntitytypeFeature, see:
 *
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/vertex-ai/docs)
 *
 * ## Example Usage
 * ### Vertex Ai Featurestore Entitytype Feature
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     region: "us-central1",
 *     onlineServingConfig: {
 *         fixedNodeCount: 2,
 *     },
 * });
 * const entity = new gcp.vertex.AiFeatureStoreEntityType("entity", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     featurestore: featurestore.id,
 * });
 * const feature = new gcp.vertex.AiFeatureStoreEntityTypeFeature("feature", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     entitytype: entity.id,
 *     valueType: "INT64_ARRAY",
 * });
 * ```
 * ### Vertex Ai Featurestore Entitytype Feature With Beta Fields
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     region: "us-central1",
 *     onlineServingConfig: {
 *         fixedNodeCount: 2,
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const entity = new gcp.vertex.AiFeatureStoreEntityType("entity", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     featurestore: featurestore.id,
 *     monitoringConfig: {
 *         snapshotAnalysis: {
 *             disabled: false,
 *             monitoringInterval: "86400s",
 *         },
 *         categoricalThresholdConfig: {
 *             value: 0.3,
 *         },
 *         numericalThresholdConfig: {
 *             value: 0.3,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const feature = new gcp.vertex.AiFeatureStoreEntityTypeFeature("feature", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     entitytype: entity.id,
 *     valueType: "INT64_ARRAY",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * FeaturestoreEntitytypeFeature can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStoreEntityTypeFeature:AiFeatureStoreEntityTypeFeature default {{entitytype}}/features/{{name}}
 * ```
 */
export class AiFeatureStoreEntityTypeFeature extends pulumi.CustomResource {
    /**
     * Get an existing AiFeatureStoreEntityTypeFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AiFeatureStoreEntityTypeFeatureState, opts?: pulumi.CustomResourceOptions): AiFeatureStoreEntityTypeFeature {
        return new AiFeatureStoreEntityTypeFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:vertex/aiFeatureStoreEntityTypeFeature:AiFeatureStoreEntityTypeFeature';

    /**
     * Returns true if the given object is an instance of AiFeatureStoreEntityTypeFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AiFeatureStoreEntityTypeFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AiFeatureStoreEntityTypeFeature.__pulumiType;
    }

    /**
     * The timestamp of when the entity type was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
     * nine fractional digits.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the feature.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entitytype}.
     */
    public readonly entitytype!: pulumi.Output<string>;
    /**
     * Used to perform consistent read-modify-write updates.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * A set of key/value label pairs to assign to the feature.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the feature. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The timestamp when the entity type was most recently updated in RFC3339 UTC "Zulu" format, with nanosecond resolution
     * and up to nine fractional digits.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Type of Feature value. Immutable. https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features#ValueType
     */
    public readonly valueType!: pulumi.Output<string>;

    /**
     * Create a AiFeatureStoreEntityTypeFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AiFeatureStoreEntityTypeFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AiFeatureStoreEntityTypeFeatureArgs | AiFeatureStoreEntityTypeFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AiFeatureStoreEntityTypeFeatureState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["entitytype"] = state ? state.entitytype : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["valueType"] = state ? state.valueType : undefined;
        } else {
            const args = argsOrState as AiFeatureStoreEntityTypeFeatureArgs | undefined;
            if ((!args || args.entitytype === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entitytype'");
            }
            if ((!args || args.valueType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'valueType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["entitytype"] = args ? args.entitytype : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["valueType"] = args ? args.valueType : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AiFeatureStoreEntityTypeFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AiFeatureStoreEntityTypeFeature resources.
 */
export interface AiFeatureStoreEntityTypeFeatureState {
    /**
     * The timestamp of when the entity type was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
     * nine fractional digits.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the feature.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entitytype}.
     */
    entitytype?: pulumi.Input<string>;
    /**
     * Used to perform consistent read-modify-write updates.
     */
    etag?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to the feature.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the feature. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
     */
    name?: pulumi.Input<string>;
    /**
     * The timestamp when the entity type was most recently updated in RFC3339 UTC "Zulu" format, with nanosecond resolution
     * and up to nine fractional digits.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Type of Feature value. Immutable. https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features#ValueType
     */
    valueType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AiFeatureStoreEntityTypeFeature resource.
 */
export interface AiFeatureStoreEntityTypeFeatureArgs {
    /**
     * Description of the feature.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entitytype}.
     */
    entitytype: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to the feature.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the feature. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
     */
    name?: pulumi.Input<string>;
    /**
     * Type of Feature value. Immutable. https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features#ValueType
     */
    valueType: pulumi.Input<string>;
}
