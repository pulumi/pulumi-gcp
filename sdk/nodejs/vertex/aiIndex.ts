// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A representation of a collection of database items organized in a way that allows for approximate nearest neighbor (a.k.a ANN) algorithms search.
 *
 * To get more information about Index, see:
 *
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes/)
 *
 * ## Example Usage
 * ### Vertex Ai Index
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const bucket = new gcp.storage.Bucket("bucket", {
 *     location: "us-central1",
 *     uniformBucketLevelAccess: true,
 * });
 * // The sample data comes from the following link:
 * // https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
 * const data = new gcp.storage.BucketObject("data", {
 *     bucket: bucket.name,
 *     content: `{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
 * {"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
 * `,
 * });
 * const index = new gcp.vertex.AiIndex("index", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     region: "us-central1",
 *     displayName: "test-index",
 *     description: "index for test",
 *     metadata: {
 *         contentsDeltaUri: pulumi.interpolate`gs://${bucket.name}/contents`,
 *         config: {
 *             dimensions: 2,
 *             approximateNeighborsCount: 150,
 *             distanceMeasureType: "DOT_PRODUCT_DISTANCE",
 *             algorithmConfig: {
 *                 treeAhConfig: {
 *                     leafNodeEmbeddingCount: 500,
 *                     leafNodesToSearchPercent: 7,
 *                 },
 *             },
 *         },
 *     },
 *     indexUpdateMethod: "BATCH_UPDATE",
 * });
 * ```
 * ### Vertex Ai Index Streaming
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const bucket = new gcp.storage.Bucket("bucket", {
 *     location: "us-central1",
 *     uniformBucketLevelAccess: true,
 * });
 * // The sample data comes from the following link:
 * // https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
 * const data = new gcp.storage.BucketObject("data", {
 *     bucket: bucket.name,
 *     content: `{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
 * {"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
 * `,
 * });
 * const index = new gcp.vertex.AiIndex("index", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     region: "us-central1",
 *     displayName: "test-index",
 *     description: "index for test",
 *     metadata: {
 *         contentsDeltaUri: pulumi.interpolate`gs://${bucket.name}/contents`,
 *         config: {
 *             dimensions: 2,
 *             distanceMeasureType: "COSINE_DISTANCE",
 *             featureNormType: "UNIT_L2_NORM",
 *             algorithmConfig: {
 *                 bruteForceConfig: {},
 *             },
 *         },
 *     },
 *     indexUpdateMethod: "STREAM_UPDATE",
 * });
 * ```
 *
 * ## Import
 *
 * Index can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiIndex:AiIndex default projects/{{project}}/locations/{{region}}/indexes/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiIndex:AiIndex default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiIndex:AiIndex default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiIndex:AiIndex default {{name}}
 * ```
 */
export class AiIndex extends pulumi.CustomResource {
    /**
     * Get an existing AiIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AiIndexState, opts?: pulumi.CustomResourceOptions): AiIndex {
        return new AiIndex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:vertex/aiIndex:AiIndex';

    /**
     * Returns true if the given object is an instance of AiIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AiIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AiIndex.__pulumiType;
    }

    /**
     * The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had been undeployed first.
     * Structure is documented below.
     */
    public /*out*/ readonly deployedIndexes!: pulumi.Output<outputs.vertex.AiIndexDeployedIndex[]>;
    /**
     * The description of the Index.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Used to perform consistent read-modify-write updates.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Stats of the index resource.
     * Structure is documented below.
     */
    public /*out*/ readonly indexStats!: pulumi.Output<outputs.vertex.AiIndexIndexStat[]>;
    /**
     * The update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by default.
     * * BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update.
     * * STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be applied in corresponding DeployedIndexes in nearly real-time.
     */
    public readonly indexUpdateMethod!: pulumi.Output<string | undefined>;
    /**
     * The labels with user-defined metadata to organize your Indexes.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * An additional information about the Index
     * Structure is documented below.
     */
    public readonly metadata!: pulumi.Output<outputs.vertex.AiIndexMetadata | undefined>;
    /**
     * Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific to it. Unset if the Index does not have any additional information.
     */
    public /*out*/ readonly metadataSchemaUri!: pulumi.Output<string>;
    /**
     * The resource name of the Index.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The region of the index. eg us-central1
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a AiIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AiIndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AiIndexArgs | AiIndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AiIndexState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deployedIndexes"] = state ? state.deployedIndexes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["indexStats"] = state ? state.indexStats : undefined;
            resourceInputs["indexUpdateMethod"] = state ? state.indexUpdateMethod : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataSchemaUri"] = state ? state.metadataSchemaUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as AiIndexArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["indexUpdateMethod"] = args ? args.indexUpdateMethod : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deployedIndexes"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["indexStats"] = undefined /*out*/;
            resourceInputs["metadataSchemaUri"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AiIndex.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AiIndex resources.
 */
export interface AiIndexState {
    /**
     * The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had been undeployed first.
     * Structure is documented below.
     */
    deployedIndexes?: pulumi.Input<pulumi.Input<inputs.vertex.AiIndexDeployedIndex>[]>;
    /**
     * The description of the Index.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Used to perform consistent read-modify-write updates.
     */
    etag?: pulumi.Input<string>;
    /**
     * Stats of the index resource.
     * Structure is documented below.
     */
    indexStats?: pulumi.Input<pulumi.Input<inputs.vertex.AiIndexIndexStat>[]>;
    /**
     * The update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by default.
     * * BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update.
     * * STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be applied in corresponding DeployedIndexes in nearly real-time.
     */
    indexUpdateMethod?: pulumi.Input<string>;
    /**
     * The labels with user-defined metadata to organize your Indexes.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An additional information about the Index
     * Structure is documented below.
     */
    metadata?: pulumi.Input<inputs.vertex.AiIndexMetadata>;
    /**
     * Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific to it. Unset if the Index does not have any additional information.
     */
    metadataSchemaUri?: pulumi.Input<string>;
    /**
     * The resource name of the Index.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of the index. eg us-central1
     */
    region?: pulumi.Input<string>;
    /**
     * The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AiIndex resource.
 */
export interface AiIndexArgs {
    /**
     * The description of the Index.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
     */
    displayName: pulumi.Input<string>;
    /**
     * The update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by default.
     * * BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update.
     * * STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be applied in corresponding DeployedIndexes in nearly real-time.
     */
    indexUpdateMethod?: pulumi.Input<string>;
    /**
     * The labels with user-defined metadata to organize your Indexes.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An additional information about the Index
     * Structure is documented below.
     */
    metadata?: pulumi.Input<inputs.vertex.AiIndexMetadata>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of the index. eg us-central1
     */
    region?: pulumi.Input<string>;
}
