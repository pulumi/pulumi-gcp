// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AiDatasetArgs, AiDatasetState } from "./aiDataset";
export type AiDataset = import("./aiDataset").AiDataset;
export const AiDataset: typeof import("./aiDataset").AiDataset = null as any;
utilities.lazyLoad(exports, ["AiDataset"], () => require("./aiDataset"));

export { AiDeploymentResourcePoolArgs, AiDeploymentResourcePoolState } from "./aiDeploymentResourcePool";
export type AiDeploymentResourcePool = import("./aiDeploymentResourcePool").AiDeploymentResourcePool;
export const AiDeploymentResourcePool: typeof import("./aiDeploymentResourcePool").AiDeploymentResourcePool = null as any;
utilities.lazyLoad(exports, ["AiDeploymentResourcePool"], () => require("./aiDeploymentResourcePool"));

export { AiEndpointArgs, AiEndpointState } from "./aiEndpoint";
export type AiEndpoint = import("./aiEndpoint").AiEndpoint;
export const AiEndpoint: typeof import("./aiEndpoint").AiEndpoint = null as any;
utilities.lazyLoad(exports, ["AiEndpoint"], () => require("./aiEndpoint"));

export { AiEndpointIamBindingArgs, AiEndpointIamBindingState } from "./aiEndpointIamBinding";
export type AiEndpointIamBinding = import("./aiEndpointIamBinding").AiEndpointIamBinding;
export const AiEndpointIamBinding: typeof import("./aiEndpointIamBinding").AiEndpointIamBinding = null as any;
utilities.lazyLoad(exports, ["AiEndpointIamBinding"], () => require("./aiEndpointIamBinding"));

export { AiEndpointIamMemberArgs, AiEndpointIamMemberState } from "./aiEndpointIamMember";
export type AiEndpointIamMember = import("./aiEndpointIamMember").AiEndpointIamMember;
export const AiEndpointIamMember: typeof import("./aiEndpointIamMember").AiEndpointIamMember = null as any;
utilities.lazyLoad(exports, ["AiEndpointIamMember"], () => require("./aiEndpointIamMember"));

export { AiEndpointIamPolicyArgs, AiEndpointIamPolicyState } from "./aiEndpointIamPolicy";
export type AiEndpointIamPolicy = import("./aiEndpointIamPolicy").AiEndpointIamPolicy;
export const AiEndpointIamPolicy: typeof import("./aiEndpointIamPolicy").AiEndpointIamPolicy = null as any;
utilities.lazyLoad(exports, ["AiEndpointIamPolicy"], () => require("./aiEndpointIamPolicy"));

export { AiFeatureGroupArgs, AiFeatureGroupState } from "./aiFeatureGroup";
export type AiFeatureGroup = import("./aiFeatureGroup").AiFeatureGroup;
export const AiFeatureGroup: typeof import("./aiFeatureGroup").AiFeatureGroup = null as any;
utilities.lazyLoad(exports, ["AiFeatureGroup"], () => require("./aiFeatureGroup"));

export { AiFeatureGroupFeatureArgs, AiFeatureGroupFeatureState } from "./aiFeatureGroupFeature";
export type AiFeatureGroupFeature = import("./aiFeatureGroupFeature").AiFeatureGroupFeature;
export const AiFeatureGroupFeature: typeof import("./aiFeatureGroupFeature").AiFeatureGroupFeature = null as any;
utilities.lazyLoad(exports, ["AiFeatureGroupFeature"], () => require("./aiFeatureGroupFeature"));

export { AiFeatureOnlineStoreArgs, AiFeatureOnlineStoreState } from "./aiFeatureOnlineStore";
export type AiFeatureOnlineStore = import("./aiFeatureOnlineStore").AiFeatureOnlineStore;
export const AiFeatureOnlineStore: typeof import("./aiFeatureOnlineStore").AiFeatureOnlineStore = null as any;
utilities.lazyLoad(exports, ["AiFeatureOnlineStore"], () => require("./aiFeatureOnlineStore"));

export { AiFeatureOnlineStoreFeatureviewArgs, AiFeatureOnlineStoreFeatureviewState } from "./aiFeatureOnlineStoreFeatureview";
export type AiFeatureOnlineStoreFeatureview = import("./aiFeatureOnlineStoreFeatureview").AiFeatureOnlineStoreFeatureview;
export const AiFeatureOnlineStoreFeatureview: typeof import("./aiFeatureOnlineStoreFeatureview").AiFeatureOnlineStoreFeatureview = null as any;
utilities.lazyLoad(exports, ["AiFeatureOnlineStoreFeatureview"], () => require("./aiFeatureOnlineStoreFeatureview"));

export { AiFeatureStoreArgs, AiFeatureStoreState } from "./aiFeatureStore";
export type AiFeatureStore = import("./aiFeatureStore").AiFeatureStore;
export const AiFeatureStore: typeof import("./aiFeatureStore").AiFeatureStore = null as any;
utilities.lazyLoad(exports, ["AiFeatureStore"], () => require("./aiFeatureStore"));

export { AiFeatureStoreEntityTypeArgs, AiFeatureStoreEntityTypeState } from "./aiFeatureStoreEntityType";
export type AiFeatureStoreEntityType = import("./aiFeatureStoreEntityType").AiFeatureStoreEntityType;
export const AiFeatureStoreEntityType: typeof import("./aiFeatureStoreEntityType").AiFeatureStoreEntityType = null as any;
utilities.lazyLoad(exports, ["AiFeatureStoreEntityType"], () => require("./aiFeatureStoreEntityType"));

export { AiFeatureStoreEntityTypeFeatureArgs, AiFeatureStoreEntityTypeFeatureState } from "./aiFeatureStoreEntityTypeFeature";
export type AiFeatureStoreEntityTypeFeature = import("./aiFeatureStoreEntityTypeFeature").AiFeatureStoreEntityTypeFeature;
export const AiFeatureStoreEntityTypeFeature: typeof import("./aiFeatureStoreEntityTypeFeature").AiFeatureStoreEntityTypeFeature = null as any;
utilities.lazyLoad(exports, ["AiFeatureStoreEntityTypeFeature"], () => require("./aiFeatureStoreEntityTypeFeature"));

export { AiFeatureStoreEntityTypeIamBindingArgs, AiFeatureStoreEntityTypeIamBindingState } from "./aiFeatureStoreEntityTypeIamBinding";
export type AiFeatureStoreEntityTypeIamBinding = import("./aiFeatureStoreEntityTypeIamBinding").AiFeatureStoreEntityTypeIamBinding;
export const AiFeatureStoreEntityTypeIamBinding: typeof import("./aiFeatureStoreEntityTypeIamBinding").AiFeatureStoreEntityTypeIamBinding = null as any;
utilities.lazyLoad(exports, ["AiFeatureStoreEntityTypeIamBinding"], () => require("./aiFeatureStoreEntityTypeIamBinding"));

export { AiFeatureStoreEntityTypeIamMemberArgs, AiFeatureStoreEntityTypeIamMemberState } from "./aiFeatureStoreEntityTypeIamMember";
export type AiFeatureStoreEntityTypeIamMember = import("./aiFeatureStoreEntityTypeIamMember").AiFeatureStoreEntityTypeIamMember;
export const AiFeatureStoreEntityTypeIamMember: typeof import("./aiFeatureStoreEntityTypeIamMember").AiFeatureStoreEntityTypeIamMember = null as any;
utilities.lazyLoad(exports, ["AiFeatureStoreEntityTypeIamMember"], () => require("./aiFeatureStoreEntityTypeIamMember"));

export { AiFeatureStoreEntityTypeIamPolicyArgs, AiFeatureStoreEntityTypeIamPolicyState } from "./aiFeatureStoreEntityTypeIamPolicy";
export type AiFeatureStoreEntityTypeIamPolicy = import("./aiFeatureStoreEntityTypeIamPolicy").AiFeatureStoreEntityTypeIamPolicy;
export const AiFeatureStoreEntityTypeIamPolicy: typeof import("./aiFeatureStoreEntityTypeIamPolicy").AiFeatureStoreEntityTypeIamPolicy = null as any;
utilities.lazyLoad(exports, ["AiFeatureStoreEntityTypeIamPolicy"], () => require("./aiFeatureStoreEntityTypeIamPolicy"));

export { AiFeatureStoreIamBindingArgs, AiFeatureStoreIamBindingState } from "./aiFeatureStoreIamBinding";
export type AiFeatureStoreIamBinding = import("./aiFeatureStoreIamBinding").AiFeatureStoreIamBinding;
export const AiFeatureStoreIamBinding: typeof import("./aiFeatureStoreIamBinding").AiFeatureStoreIamBinding = null as any;
utilities.lazyLoad(exports, ["AiFeatureStoreIamBinding"], () => require("./aiFeatureStoreIamBinding"));

export { AiFeatureStoreIamMemberArgs, AiFeatureStoreIamMemberState } from "./aiFeatureStoreIamMember";
export type AiFeatureStoreIamMember = import("./aiFeatureStoreIamMember").AiFeatureStoreIamMember;
export const AiFeatureStoreIamMember: typeof import("./aiFeatureStoreIamMember").AiFeatureStoreIamMember = null as any;
utilities.lazyLoad(exports, ["AiFeatureStoreIamMember"], () => require("./aiFeatureStoreIamMember"));

export { AiFeatureStoreIamPolicyArgs, AiFeatureStoreIamPolicyState } from "./aiFeatureStoreIamPolicy";
export type AiFeatureStoreIamPolicy = import("./aiFeatureStoreIamPolicy").AiFeatureStoreIamPolicy;
export const AiFeatureStoreIamPolicy: typeof import("./aiFeatureStoreIamPolicy").AiFeatureStoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["AiFeatureStoreIamPolicy"], () => require("./aiFeatureStoreIamPolicy"));

export { AiIndexArgs, AiIndexState } from "./aiIndex";
export type AiIndex = import("./aiIndex").AiIndex;
export const AiIndex: typeof import("./aiIndex").AiIndex = null as any;
utilities.lazyLoad(exports, ["AiIndex"], () => require("./aiIndex"));

export { AiIndexEndpointArgs, AiIndexEndpointState } from "./aiIndexEndpoint";
export type AiIndexEndpoint = import("./aiIndexEndpoint").AiIndexEndpoint;
export const AiIndexEndpoint: typeof import("./aiIndexEndpoint").AiIndexEndpoint = null as any;
utilities.lazyLoad(exports, ["AiIndexEndpoint"], () => require("./aiIndexEndpoint"));

export { AiMetadataStoreArgs, AiMetadataStoreState } from "./aiMetadataStore";
export type AiMetadataStore = import("./aiMetadataStore").AiMetadataStore;
export const AiMetadataStore: typeof import("./aiMetadataStore").AiMetadataStore = null as any;
utilities.lazyLoad(exports, ["AiMetadataStore"], () => require("./aiMetadataStore"));

export { AiTensorboardArgs, AiTensorboardState } from "./aiTensorboard";
export type AiTensorboard = import("./aiTensorboard").AiTensorboard;
export const AiTensorboard: typeof import("./aiTensorboard").AiTensorboard = null as any;
utilities.lazyLoad(exports, ["AiTensorboard"], () => require("./aiTensorboard"));

export { GetAiEndpointIamPolicyArgs, GetAiEndpointIamPolicyResult, GetAiEndpointIamPolicyOutputArgs } from "./getAiEndpointIamPolicy";
export const getAiEndpointIamPolicy: typeof import("./getAiEndpointIamPolicy").getAiEndpointIamPolicy = null as any;
export const getAiEndpointIamPolicyOutput: typeof import("./getAiEndpointIamPolicy").getAiEndpointIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAiEndpointIamPolicy","getAiEndpointIamPolicyOutput"], () => require("./getAiEndpointIamPolicy"));

export { GetAiFeaturestoreEntitytypeIamPolicyArgs, GetAiFeaturestoreEntitytypeIamPolicyResult, GetAiFeaturestoreEntitytypeIamPolicyOutputArgs } from "./getAiFeaturestoreEntitytypeIamPolicy";
export const getAiFeaturestoreEntitytypeIamPolicy: typeof import("./getAiFeaturestoreEntitytypeIamPolicy").getAiFeaturestoreEntitytypeIamPolicy = null as any;
export const getAiFeaturestoreEntitytypeIamPolicyOutput: typeof import("./getAiFeaturestoreEntitytypeIamPolicy").getAiFeaturestoreEntitytypeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAiFeaturestoreEntitytypeIamPolicy","getAiFeaturestoreEntitytypeIamPolicyOutput"], () => require("./getAiFeaturestoreEntitytypeIamPolicy"));

export { GetAiFeaturestoreIamPolicyArgs, GetAiFeaturestoreIamPolicyResult, GetAiFeaturestoreIamPolicyOutputArgs } from "./getAiFeaturestoreIamPolicy";
export const getAiFeaturestoreIamPolicy: typeof import("./getAiFeaturestoreIamPolicy").getAiFeaturestoreIamPolicy = null as any;
export const getAiFeaturestoreIamPolicyOutput: typeof import("./getAiFeaturestoreIamPolicy").getAiFeaturestoreIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAiFeaturestoreIamPolicy","getAiFeaturestoreIamPolicyOutput"], () => require("./getAiFeaturestoreIamPolicy"));

export { GetAiIndexArgs, GetAiIndexResult, GetAiIndexOutputArgs } from "./getAiIndex";
export const getAiIndex: typeof import("./getAiIndex").getAiIndex = null as any;
export const getAiIndexOutput: typeof import("./getAiIndex").getAiIndexOutput = null as any;
utilities.lazyLoad(exports, ["getAiIndex","getAiIndexOutput"], () => require("./getAiIndex"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:vertex/aiDataset:AiDataset":
                return new AiDataset(name, <any>undefined, { urn })
            case "gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool":
                return new AiDeploymentResourcePool(name, <any>undefined, { urn })
            case "gcp:vertex/aiEndpoint:AiEndpoint":
                return new AiEndpoint(name, <any>undefined, { urn })
            case "gcp:vertex/aiEndpointIamBinding:AiEndpointIamBinding":
                return new AiEndpointIamBinding(name, <any>undefined, { urn })
            case "gcp:vertex/aiEndpointIamMember:AiEndpointIamMember":
                return new AiEndpointIamMember(name, <any>undefined, { urn })
            case "gcp:vertex/aiEndpointIamPolicy:AiEndpointIamPolicy":
                return new AiEndpointIamPolicy(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureGroup:AiFeatureGroup":
                return new AiFeatureGroup(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature":
                return new AiFeatureGroupFeature(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureOnlineStore:AiFeatureOnlineStore":
                return new AiFeatureOnlineStore(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview":
                return new AiFeatureOnlineStoreFeatureview(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureStore:AiFeatureStore":
                return new AiFeatureStore(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureStoreEntityType:AiFeatureStoreEntityType":
                return new AiFeatureStoreEntityType(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureStoreEntityTypeFeature:AiFeatureStoreEntityTypeFeature":
                return new AiFeatureStoreEntityTypeFeature(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding":
                return new AiFeatureStoreEntityTypeIamBinding(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureStoreEntityTypeIamMember:AiFeatureStoreEntityTypeIamMember":
                return new AiFeatureStoreEntityTypeIamMember(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureStoreEntityTypeIamPolicy:AiFeatureStoreEntityTypeIamPolicy":
                return new AiFeatureStoreEntityTypeIamPolicy(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding":
                return new AiFeatureStoreIamBinding(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember":
                return new AiFeatureStoreIamMember(name, <any>undefined, { urn })
            case "gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy":
                return new AiFeatureStoreIamPolicy(name, <any>undefined, { urn })
            case "gcp:vertex/aiIndex:AiIndex":
                return new AiIndex(name, <any>undefined, { urn })
            case "gcp:vertex/aiIndexEndpoint:AiIndexEndpoint":
                return new AiIndexEndpoint(name, <any>undefined, { urn })
            case "gcp:vertex/aiMetadataStore:AiMetadataStore":
                return new AiMetadataStore(name, <any>undefined, { urn })
            case "gcp:vertex/aiTensorboard:AiTensorboard":
                return new AiTensorboard(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "vertex/aiDataset", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiDeploymentResourcePool", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiEndpoint", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiEndpointIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiEndpointIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiEndpointIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureGroup", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureGroupFeature", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureOnlineStore", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureOnlineStoreFeatureview", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStore", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreEntityType", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreEntityTypeFeature", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreEntityTypeIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreEntityTypeIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreEntityTypeIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiIndex", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiIndexEndpoint", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiMetadataStore", _module)
pulumi.runtime.registerResourceModule("gcp", "vertex/aiTensorboard", _module)
