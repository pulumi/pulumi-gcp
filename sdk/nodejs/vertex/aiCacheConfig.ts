// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Config of GenAI caching features. This is a singleton resource.
 *
 * To get more information about CacheConfig, see:
 *
 * * [API documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/reference/rest/v1/projects/updateCacheConfig)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/reference/rest/Shared.Types/CacheConfig)
 *
 * ## Example Usage
 *
 * ### Vertex Ai Cache Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cacheConfig = new gcp.vertex.AiCacheConfig("cache_config", {
 *     project: "my-project-name",
 *     disableCache: true,
 * });
 * ```
 *
 * ## Import
 *
 * CacheConfig can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/cacheConfig`
 *
 * * `{{project}}`
 *
 * When using the `pulumi import` command, CacheConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:vertex/aiCacheConfig:AiCacheConfig default projects/{{project}}/cacheConfig
 * ```
 *
 * ```sh
 * $ pulumi import gcp:vertex/aiCacheConfig:AiCacheConfig default {{project}}
 * ```
 */
export class AiCacheConfig extends pulumi.CustomResource {
    /**
     * Get an existing AiCacheConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AiCacheConfigState, opts?: pulumi.CustomResourceOptions): AiCacheConfig {
        return new AiCacheConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:vertex/aiCacheConfig:AiCacheConfig';

    /**
     * Returns true if the given object is an instance of AiCacheConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AiCacheConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AiCacheConfig.__pulumiType;
    }

    /**
     * If set to true, disables GenAI caching. Otherwise caching is enabled.
     */
    declare public readonly disableCache: pulumi.Output<boolean>;
    /**
     * Identifier. name of the cache config. Format: - `projects/{project}/cacheConfig`.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;

    /**
     * Create a AiCacheConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AiCacheConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AiCacheConfigArgs | AiCacheConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AiCacheConfigState | undefined;
            resourceInputs["disableCache"] = state?.disableCache;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
        } else {
            const args = argsOrState as AiCacheConfigArgs | undefined;
            if (args?.disableCache === undefined && !opts.urn) {
                throw new Error("Missing required property 'disableCache'");
            }
            resourceInputs["disableCache"] = args?.disableCache;
            resourceInputs["project"] = args?.project;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AiCacheConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AiCacheConfig resources.
 */
export interface AiCacheConfigState {
    /**
     * If set to true, disables GenAI caching. Otherwise caching is enabled.
     */
    disableCache?: pulumi.Input<boolean>;
    /**
     * Identifier. name of the cache config. Format: - `projects/{project}/cacheConfig`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AiCacheConfig resource.
 */
export interface AiCacheConfigArgs {
    /**
     * If set to true, disables GenAI caching. Otherwise caching is enabled.
     */
    disableCache: pulumi.Input<boolean>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
