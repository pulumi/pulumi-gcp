// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export function getAiFeaturestoreEntitytypeIamPolicy(args: GetAiFeaturestoreEntitytypeIamPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetAiFeaturestoreEntitytypeIamPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:vertex/getAiFeaturestoreEntitytypeIamPolicy:getAiFeaturestoreEntitytypeIamPolicy", {
        "entitytype": args.entitytype,
        "featurestore": args.featurestore,
    }, opts);
}

/**
 * A collection of arguments for invoking getAiFeaturestoreEntitytypeIamPolicy.
 */
export interface GetAiFeaturestoreEntitytypeIamPolicyArgs {
    /**
     * Used to find the parent resource to bind the IAM policy to
     */
    entitytype: string;
    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
     */
    featurestore: string;
}

/**
 * A collection of values returned by getAiFeaturestoreEntitytypeIamPolicy.
 */
export interface GetAiFeaturestoreEntitytypeIamPolicyResult {
    readonly entitytype: string;
    /**
     * (Computed) The etag of the IAM policy.
     */
    readonly etag: string;
    readonly featurestore: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * (Required only by `gcp.vertex.AiFeatureStoreEntityTypeIamPolicy`) The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     */
    readonly policyData: string;
}
export function getAiFeaturestoreEntitytypeIamPolicyOutput(args: GetAiFeaturestoreEntitytypeIamPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAiFeaturestoreEntitytypeIamPolicyResult> {
    return pulumi.output(args).apply((a: any) => getAiFeaturestoreEntitytypeIamPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getAiFeaturestoreEntitytypeIamPolicy.
 */
export interface GetAiFeaturestoreEntitytypeIamPolicyOutputArgs {
    /**
     * Used to find the parent resource to bind the IAM policy to
     */
    entitytype: pulumi.Input<string>;
    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
     */
    featurestore: pulumi.Input<string>;
}
