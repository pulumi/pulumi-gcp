// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as std from "@pulumi/std";
 *
 * const example = new gcp.composer.Environment("example", {
 *     name: "example-environment",
 *     project: "example-project",
 *     region: "us-central1",
 *     config: {
 *         softwareConfig: {
 *             imageVersion: "example-image-version",
 *         },
 *     },
 * });
 * const exampleUserWorkloadsSecret = new gcp.composer.UserWorkloadsSecret("example", {
 *     name: "example-secret",
 *     project: "example-project",
 *     region: "us-central1",
 *     environment: example.name,
 *     data: {
 *         email: std.base64encode({
 *             input: "example-email",
 *         }).then(invoke => invoke.result),
 *         password: std.base64encode({
 *             input: "example-password",
 *         }).then(invoke => invoke.result),
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Secret can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{region}}/environments/{{environment}}/userWorkloadsSecrets/{{name}}`
 *
 * * `{{project}}/{{region}}/{{environment}}/{{name}}`
 *
 * * `{{environment}}/{{name}}`
 *
 * When using the `pulumi import` command, Environment can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:composer/userWorkloadsSecret:UserWorkloadsSecret example projects/{{project}}/locations/{{region}}/environments/{{environment}}/userWorkloadsSecrets/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:composer/userWorkloadsSecret:UserWorkloadsSecret example {{project}}/{{region}}/{{environment}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:composer/userWorkloadsSecret:UserWorkloadsSecret example {{environment}}/{{name}}
 * ```
 */
export class UserWorkloadsSecret extends pulumi.CustomResource {
    /**
     * Get an existing UserWorkloadsSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserWorkloadsSecretState, opts?: pulumi.CustomResourceOptions): UserWorkloadsSecret {
        return new UserWorkloadsSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:composer/userWorkloadsSecret:UserWorkloadsSecret';

    /**
     * Returns true if the given object is an instance of UserWorkloadsSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserWorkloadsSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserWorkloadsSecret.__pulumiType;
    }

    /**
     * A map of the secret data.
     */
    public readonly data!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Environment where the Kubernetes Secret will be stored and used.
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * Name of the Kubernetes Secret.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The location or Compute Engine region for the environment.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a UserWorkloadsSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserWorkloadsSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserWorkloadsSecretArgs | UserWorkloadsSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserWorkloadsSecretState | undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as UserWorkloadsSecretArgs | undefined;
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            resourceInputs["data"] = args?.data ? pulumi.secret(args.data) : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["data"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(UserWorkloadsSecret.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserWorkloadsSecret resources.
 */
export interface UserWorkloadsSecretState {
    /**
     * A map of the secret data.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Environment where the Kubernetes Secret will be stored and used.
     */
    environment?: pulumi.Input<string>;
    /**
     * Name of the Kubernetes Secret.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The location or Compute Engine region for the environment.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserWorkloadsSecret resource.
 */
export interface UserWorkloadsSecretArgs {
    /**
     * A map of the secret data.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Environment where the Kubernetes Secret will be stored and used.
     */
    environment: pulumi.Input<string>;
    /**
     * Name of the Kubernetes Secret.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The location or Compute Engine region for the environment.
     */
    region?: pulumi.Input<string>;
}
