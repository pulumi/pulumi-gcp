// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetImageVersionsArgs, GetImageVersionsResult, GetImageVersionsOutputArgs } from "./getImageVersions";
export const getImageVersions: typeof import("./getImageVersions").getImageVersions = null as any;
export const getImageVersionsOutput: typeof import("./getImageVersions").getImageVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getImageVersions","getImageVersionsOutput"], () => require("./getImageVersions"));

export { GetUserWorkloadsConfigMapArgs, GetUserWorkloadsConfigMapResult, GetUserWorkloadsConfigMapOutputArgs } from "./getUserWorkloadsConfigMap";
export const getUserWorkloadsConfigMap: typeof import("./getUserWorkloadsConfigMap").getUserWorkloadsConfigMap = null as any;
export const getUserWorkloadsConfigMapOutput: typeof import("./getUserWorkloadsConfigMap").getUserWorkloadsConfigMapOutput = null as any;
utilities.lazyLoad(exports, ["getUserWorkloadsConfigMap","getUserWorkloadsConfigMapOutput"], () => require("./getUserWorkloadsConfigMap"));

export { GetUserWorkloadsSecretArgs, GetUserWorkloadsSecretResult, GetUserWorkloadsSecretOutputArgs } from "./getUserWorkloadsSecret";
export const getUserWorkloadsSecret: typeof import("./getUserWorkloadsSecret").getUserWorkloadsSecret = null as any;
export const getUserWorkloadsSecretOutput: typeof import("./getUserWorkloadsSecret").getUserWorkloadsSecretOutput = null as any;
utilities.lazyLoad(exports, ["getUserWorkloadsSecret","getUserWorkloadsSecretOutput"], () => require("./getUserWorkloadsSecret"));

export { UserWorkloadsConfigMapArgs, UserWorkloadsConfigMapState } from "./userWorkloadsConfigMap";
export type UserWorkloadsConfigMap = import("./userWorkloadsConfigMap").UserWorkloadsConfigMap;
export const UserWorkloadsConfigMap: typeof import("./userWorkloadsConfigMap").UserWorkloadsConfigMap = null as any;
utilities.lazyLoad(exports, ["UserWorkloadsConfigMap"], () => require("./userWorkloadsConfigMap"));

export { UserWorkloadsSecretArgs, UserWorkloadsSecretState } from "./userWorkloadsSecret";
export type UserWorkloadsSecret = import("./userWorkloadsSecret").UserWorkloadsSecret;
export const UserWorkloadsSecret: typeof import("./userWorkloadsSecret").UserWorkloadsSecret = null as any;
utilities.lazyLoad(exports, ["UserWorkloadsSecret"], () => require("./userWorkloadsSecret"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:composer/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap":
                return new UserWorkloadsConfigMap(name, <any>undefined, { urn })
            case "gcp:composer/userWorkloadsSecret:UserWorkloadsSecret":
                return new UserWorkloadsSecret(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "composer/environment", _module)
pulumi.runtime.registerResourceModule("gcp", "composer/userWorkloadsConfigMap", _module)
pulumi.runtime.registerResourceModule("gcp", "composer/userWorkloadsSecret", _module)
