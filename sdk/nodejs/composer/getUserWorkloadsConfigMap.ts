// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const exampleEnvironment = new gcp.composer.Environment("example", {
 *     name: "example-environment",
 *     config: {
 *         softwareConfig: {
 *             imageVersion: "composer-3-airflow-2",
 *         },
 *     },
 * });
 * const exampleUserWorkloadsConfigMap = new gcp.composer.UserWorkloadsConfigMap("example", {
 *     environment: exampleEnvironment.name,
 *     name: "example-config-map",
 *     data: {
 *         db_host: "dbhost:5432",
 *         api_host: "apihost:443",
 *     },
 * });
 * const example = exampleEnvironment.name.apply(name => gcp.composer.getUserWorkloadsConfigMapOutput({
 *     environment: name,
 *     name: googleComposerUserWorkloadsConfigMap.example.name,
 * }));
 * export const debug = example;
 * ```
 */
export function getUserWorkloadsConfigMap(args: GetUserWorkloadsConfigMapArgs, opts?: pulumi.InvokeOptions): Promise<GetUserWorkloadsConfigMapResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:composer/getUserWorkloadsConfigMap:getUserWorkloadsConfigMap", {
        "environment": args.environment,
        "name": args.name,
        "project": args.project,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getUserWorkloadsConfigMap.
 */
export interface GetUserWorkloadsConfigMapArgs {
    /**
     * Environment where the ConfigMap is stored.
     */
    environment: string;
    /**
     * Name of the ConfigMap.
     */
    name: string;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: string;
    /**
     * The location or Compute Engine region of the environment.
     */
    region?: string;
}

/**
 * A collection of values returned by getUserWorkloadsConfigMap.
 */
export interface GetUserWorkloadsConfigMapResult {
    /**
     * The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
     * For details see: <https://kubernetes.io/docs/concepts/configuration/configmap/>
     */
    readonly data: {[key: string]: string};
    readonly environment: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly project?: string;
    readonly region?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const exampleEnvironment = new gcp.composer.Environment("example", {
 *     name: "example-environment",
 *     config: {
 *         softwareConfig: {
 *             imageVersion: "composer-3-airflow-2",
 *         },
 *     },
 * });
 * const exampleUserWorkloadsConfigMap = new gcp.composer.UserWorkloadsConfigMap("example", {
 *     environment: exampleEnvironment.name,
 *     name: "example-config-map",
 *     data: {
 *         db_host: "dbhost:5432",
 *         api_host: "apihost:443",
 *     },
 * });
 * const example = exampleEnvironment.name.apply(name => gcp.composer.getUserWorkloadsConfigMapOutput({
 *     environment: name,
 *     name: googleComposerUserWorkloadsConfigMap.example.name,
 * }));
 * export const debug = example;
 * ```
 */
export function getUserWorkloadsConfigMapOutput(args: GetUserWorkloadsConfigMapOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserWorkloadsConfigMapResult> {
    return pulumi.output(args).apply((a: any) => getUserWorkloadsConfigMap(a, opts))
}

/**
 * A collection of arguments for invoking getUserWorkloadsConfigMap.
 */
export interface GetUserWorkloadsConfigMapOutputArgs {
    /**
     * Environment where the ConfigMap is stored.
     */
    environment: pulumi.Input<string>;
    /**
     * Name of the ConfigMap.
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The location or Compute Engine region of the environment.
     */
    region?: pulumi.Input<string>;
}
