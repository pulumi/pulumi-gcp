// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Composer User Workloads Config Map Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const environment = new gcp.composer.Environment("environment", {
 *     name: "test-environment",
 *     region: "us-central1",
 *     config: {
 *         softwareConfig: {
 *             imageVersion: "composer-3-airflow-2",
 *         },
 *     },
 * });
 * const configMap = new gcp.composer.UserWorkloadsConfigMap("config_map", {
 *     name: "test-config-map",
 *     region: "us-central1",
 *     environment: environment.name,
 *     data: {
 *         api_host: "apihost:443",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * UserWorkloadsConfigMap can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{region}}/environments/{{environment}}/userWorkloadsConfigMaps/{{name}}`
 *
 * * `{{project}}/{{region}}/{{environment}}/{{name}}`
 *
 * * `{{region}}/{{environment}}/{{name}}`
 *
 * * `{{environment}}/{{name}}`
 *
 * When using the `pulumi import` command, UserWorkloadsConfigMap can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default projects/{{project}}/locations/{{region}}/environments/{{environment}}/userWorkloadsConfigMaps/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default {{project}}/{{region}}/{{environment}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default {{region}}/{{environment}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default {{environment}}/{{name}}
 * ```
 */
export class UserWorkloadsConfigMap extends pulumi.CustomResource {
    /**
     * Get an existing UserWorkloadsConfigMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserWorkloadsConfigMapState, opts?: pulumi.CustomResourceOptions): UserWorkloadsConfigMap {
        return new UserWorkloadsConfigMap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap';

    /**
     * Returns true if the given object is an instance of UserWorkloadsConfigMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserWorkloadsConfigMap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserWorkloadsConfigMap.__pulumiType;
    }

    /**
     * The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
     * For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
     */
    public readonly data!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Environment where the Kubernetes ConfigMap will be stored and used.
     *
     *
     * - - -
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * Name of the Kubernetes ConfigMap.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The location or Compute Engine region for the environment.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a UserWorkloadsConfigMap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserWorkloadsConfigMapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserWorkloadsConfigMapArgs | UserWorkloadsConfigMapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserWorkloadsConfigMapState | undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as UserWorkloadsConfigMapArgs | undefined;
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserWorkloadsConfigMap.__pulumiType, name, resourceInputs, opts, false /*remote*/);
    }
}

/**
 * Input properties used for looking up and filtering UserWorkloadsConfigMap resources.
 */
export interface UserWorkloadsConfigMapState {
    /**
     * The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
     * For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Environment where the Kubernetes ConfigMap will be stored and used.
     *
     *
     * - - -
     */
    environment?: pulumi.Input<string>;
    /**
     * Name of the Kubernetes ConfigMap.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The location or Compute Engine region for the environment.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserWorkloadsConfigMap resource.
 */
export interface UserWorkloadsConfigMapArgs {
    /**
     * The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
     * For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Environment where the Kubernetes ConfigMap will be stored and used.
     *
     *
     * - - -
     */
    environment: pulumi.Input<string>;
    /**
     * Name of the Kubernetes ConfigMap.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The location or Compute Engine region for the environment.
     */
    region?: pulumi.Input<string>;
}
