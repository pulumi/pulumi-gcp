// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CodeRepositoryIndexArgs, CodeRepositoryIndexState } from "./codeRepositoryIndex";
export type CodeRepositoryIndex = import("./codeRepositoryIndex").CodeRepositoryIndex;
export const CodeRepositoryIndex: typeof import("./codeRepositoryIndex").CodeRepositoryIndex = null as any;
utilities.lazyLoad(exports, ["CodeRepositoryIndex"], () => require("./codeRepositoryIndex"));

export { GetRepositoryGroupIamPolicyArgs, GetRepositoryGroupIamPolicyResult, GetRepositoryGroupIamPolicyOutputArgs } from "./getRepositoryGroupIamPolicy";
export const getRepositoryGroupIamPolicy: typeof import("./getRepositoryGroupIamPolicy").getRepositoryGroupIamPolicy = null as any;
export const getRepositoryGroupIamPolicyOutput: typeof import("./getRepositoryGroupIamPolicy").getRepositoryGroupIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryGroupIamPolicy","getRepositoryGroupIamPolicyOutput"], () => require("./getRepositoryGroupIamPolicy"));

export { RepositoryGroupArgs, RepositoryGroupState } from "./repositoryGroup";
export type RepositoryGroup = import("./repositoryGroup").RepositoryGroup;
export const RepositoryGroup: typeof import("./repositoryGroup").RepositoryGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryGroup"], () => require("./repositoryGroup"));

export { RepositoryGroupIamBindingArgs, RepositoryGroupIamBindingState } from "./repositoryGroupIamBinding";
export type RepositoryGroupIamBinding = import("./repositoryGroupIamBinding").RepositoryGroupIamBinding;
export const RepositoryGroupIamBinding: typeof import("./repositoryGroupIamBinding").RepositoryGroupIamBinding = null as any;
utilities.lazyLoad(exports, ["RepositoryGroupIamBinding"], () => require("./repositoryGroupIamBinding"));

export { RepositoryGroupIamMemberArgs, RepositoryGroupIamMemberState } from "./repositoryGroupIamMember";
export type RepositoryGroupIamMember = import("./repositoryGroupIamMember").RepositoryGroupIamMember;
export const RepositoryGroupIamMember: typeof import("./repositoryGroupIamMember").RepositoryGroupIamMember = null as any;
utilities.lazyLoad(exports, ["RepositoryGroupIamMember"], () => require("./repositoryGroupIamMember"));

export { RepositoryGroupIamPolicyArgs, RepositoryGroupIamPolicyState } from "./repositoryGroupIamPolicy";
export type RepositoryGroupIamPolicy = import("./repositoryGroupIamPolicy").RepositoryGroupIamPolicy;
export const RepositoryGroupIamPolicy: typeof import("./repositoryGroupIamPolicy").RepositoryGroupIamPolicy = null as any;
utilities.lazyLoad(exports, ["RepositoryGroupIamPolicy"], () => require("./repositoryGroupIamPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:gemini/codeRepositoryIndex:CodeRepositoryIndex":
                return new CodeRepositoryIndex(name, <any>undefined, { urn })
            case "gcp:gemini/repositoryGroup:RepositoryGroup":
                return new RepositoryGroup(name, <any>undefined, { urn })
            case "gcp:gemini/repositoryGroupIamBinding:RepositoryGroupIamBinding":
                return new RepositoryGroupIamBinding(name, <any>undefined, { urn })
            case "gcp:gemini/repositoryGroupIamMember:RepositoryGroupIamMember":
                return new RepositoryGroupIamMember(name, <any>undefined, { urn })
            case "gcp:gemini/repositoryGroupIamPolicy:RepositoryGroupIamPolicy":
                return new RepositoryGroupIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "gemini/codeRepositoryIndex", _module)
pulumi.runtime.registerResourceModule("gcp", "gemini/repositoryGroup", _module)
pulumi.runtime.registerResourceModule("gcp", "gemini/repositoryGroupIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "gemini/repositoryGroupIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "gemini/repositoryGroupIamPolicy", _module)
