// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The resource for managing DataSharingWithGoogle setting bindings for Admin Control.
 *
 * To get more information about DataSharingWithGoogleSettingBinding, see:
 * * How-to Guides
 *     * [Gemini Cloud Assist overview](https://cloud.google.com/gemini/docs/cloud-assist/overview)
 *
 * ## Example Usage
 *
 * ### Gemini Data Sharing With Google Setting Binding Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.gemini.DataSharingWithGoogleSetting("basic", {
 *     dataSharingWithGoogleSettingId: "ls-tf1",
 *     location: "global",
 *     labels: {
 *         my_key: "my_value",
 *     },
 *     enablePreviewDataSharing: true,
 * });
 * const example = new gcp.gemini.DataSharingWithGoogleSettingBinding("example", {
 *     dataSharingWithGoogleSettingId: basic.dataSharingWithGoogleSettingId,
 *     settingBindingId: "ls-tf1b1",
 *     location: "global",
 *     target: "projects/980109375338",
 * });
 * ```
 *
 * ## Import
 *
 * DataSharingWithGoogleSettingBinding can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/dataSharingWithGoogleSettings/{{data_sharing_with_google_setting_id}}/settingBindings/{{setting_binding_id}}`
 *
 * * `{{project}}/{{location}}/{{data_sharing_with_google_setting_id}}/{{setting_binding_id}}`
 *
 * * `{{location}}/{{data_sharing_with_google_setting_id}}/{{setting_binding_id}}`
 *
 * When using the `pulumi import` command, DataSharingWithGoogleSettingBinding can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gemini/dataSharingWithGoogleSettingBinding:DataSharingWithGoogleSettingBinding default projects/{{project}}/locations/{{location}}/dataSharingWithGoogleSettings/{{data_sharing_with_google_setting_id}}/settingBindings/{{setting_binding_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gemini/dataSharingWithGoogleSettingBinding:DataSharingWithGoogleSettingBinding default {{project}}/{{location}}/{{data_sharing_with_google_setting_id}}/{{setting_binding_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gemini/dataSharingWithGoogleSettingBinding:DataSharingWithGoogleSettingBinding default {{location}}/{{data_sharing_with_google_setting_id}}/{{setting_binding_id}}
 * ```
 */
export class DataSharingWithGoogleSettingBinding extends pulumi.CustomResource {
    /**
     * Get an existing DataSharingWithGoogleSettingBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataSharingWithGoogleSettingBindingState, opts?: pulumi.CustomResourceOptions): DataSharingWithGoogleSettingBinding {
        return new DataSharingWithGoogleSettingBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:gemini/dataSharingWithGoogleSettingBinding:DataSharingWithGoogleSettingBinding';

    /**
     * Returns true if the given object is an instance of DataSharingWithGoogleSettingBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataSharingWithGoogleSettingBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataSharingWithGoogleSettingBinding.__pulumiType;
    }

    /**
     * Create time stamp.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    public readonly dataSharingWithGoogleSettingId!: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * Identifier. Name of the resource.
     * Format:projects/{project}/locations/{location}/dataSharingWithGoogleSettings/{setting}/settingBindings/{setting_binding}
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Product type of the setting binding.
     * Possible values are: `GEMINI_CLOUD_ASSIST`.
     */
    public readonly product!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Required. Id of the setting binding.
     *
     *
     * - - -
     */
    public readonly settingBindingId!: pulumi.Output<string>;
    /**
     * Target of the binding.
     */
    public readonly target!: pulumi.Output<string>;
    /**
     * Update time stamp.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a DataSharingWithGoogleSettingBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataSharingWithGoogleSettingBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataSharingWithGoogleSettingBindingArgs | DataSharingWithGoogleSettingBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataSharingWithGoogleSettingBindingState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dataSharingWithGoogleSettingId"] = state ? state.dataSharingWithGoogleSettingId : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["product"] = state ? state.product : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["settingBindingId"] = state ? state.settingBindingId : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as DataSharingWithGoogleSettingBindingArgs | undefined;
            if ((!args || args.dataSharingWithGoogleSettingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSharingWithGoogleSettingId'");
            }
            if ((!args || args.settingBindingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settingBindingId'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["dataSharingWithGoogleSettingId"] = args ? args.dataSharingWithGoogleSettingId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["product"] = args ? args.product : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["settingBindingId"] = args ? args.settingBindingId : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DataSharingWithGoogleSettingBinding.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataSharingWithGoogleSettingBinding resources.
 */
export interface DataSharingWithGoogleSettingBindingState {
    /**
     * Create time stamp.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    dataSharingWithGoogleSettingId?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * Identifier. Name of the resource.
     * Format:projects/{project}/locations/{location}/dataSharingWithGoogleSettings/{setting}/settingBindings/{setting_binding}
     */
    name?: pulumi.Input<string>;
    /**
     * Product type of the setting binding.
     * Possible values are: `GEMINI_CLOUD_ASSIST`.
     */
    product?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required. Id of the setting binding.
     *
     *
     * - - -
     */
    settingBindingId?: pulumi.Input<string>;
    /**
     * Target of the binding.
     */
    target?: pulumi.Input<string>;
    /**
     * Update time stamp.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataSharingWithGoogleSettingBinding resource.
 */
export interface DataSharingWithGoogleSettingBindingArgs {
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    dataSharingWithGoogleSettingId: pulumi.Input<string>;
    /**
     * Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     */
    location?: pulumi.Input<string>;
    /**
     * Product type of the setting binding.
     * Possible values are: `GEMINI_CLOUD_ASSIST`.
     */
    product?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Required. Id of the setting binding.
     *
     *
     * - - -
     */
    settingBindingId: pulumi.Input<string>;
    /**
     * Target of the binding.
     */
    target: pulumi.Input<string>;
}
