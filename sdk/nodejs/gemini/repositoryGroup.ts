// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The resource for managing Repository Group for Gemini Code Assist.
 *
 * To get more information about RepositoryGroup, see:
 *
 * * [API documentation](https://cloud.google.com/gemini/docs/api/reference/rest/v1/projects.locations.codeRepositoryIndexes.repositoryGroups)
 *
 * ## Example Usage
 *
 * ### Gemini Repository Group Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const example = new gcp.gemini.RepositoryGroup("example", {
 *     location: "us-central1",
 *     codeRepositoryIndex: "example-cri",
 *     repositoryGroupId: "example-repository-group",
 *     repositories: [{
 *         resource: "projects/example-project/locations/us-central1/connections/example-connection/gitRepositoryLinks/example-repo",
 *         branchPattern: "main",
 *     }],
 *     labels: {
 *         label1: "value1",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * RepositoryGroup can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}`
 *
 * * `{{project}}/{{location}}/{{code_repository_index}}/{{repository_group_id}}`
 *
 * * `{{location}}/{{code_repository_index}}/{{repository_group_id}}`
 *
 * When using the `pulumi import` command, RepositoryGroup can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gemini/repositoryGroup:RepositoryGroup default projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gemini/repositoryGroup:RepositoryGroup default {{project}}/{{location}}/{{code_repository_index}}/{{repository_group_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gemini/repositoryGroup:RepositoryGroup default {{location}}/{{code_repository_index}}/{{repository_group_id}}
 * ```
 */
export class RepositoryGroup extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryGroupState, opts?: pulumi.CustomResourceOptions): RepositoryGroup {
        return new RepositoryGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:gemini/repositoryGroup:RepositoryGroup';

    /**
     * Returns true if the given object is an instance of RepositoryGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryGroup.__pulumiType;
    }

    /**
     * Required. Id of the Code Repository Index.
     */
    public readonly codeRepositoryIndex!: pulumi.Output<string>;
    /**
     * Output only. Create time stamp.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
     * in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location of the Code Repository Index, for example `us-central1`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Immutable. Identifier. Name of Repository Group.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Required. List of repositories to group.
     * Structure is documented below.
     */
    public readonly repositories!: pulumi.Output<outputs.gemini.RepositoryGroupRepository[]>;
    /**
     * Required. Id of the Repository Group.
     */
    public readonly repositoryGroupId!: pulumi.Output<string>;
    /**
     * Output only. Update time stamp.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a RepositoryGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryGroupArgs | RepositoryGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryGroupState | undefined;
            resourceInputs["codeRepositoryIndex"] = state ? state.codeRepositoryIndex : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["repositories"] = state ? state.repositories : undefined;
            resourceInputs["repositoryGroupId"] = state ? state.repositoryGroupId : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as RepositoryGroupArgs | undefined;
            if ((!args || args.codeRepositoryIndex === undefined) && !opts.urn) {
                throw new Error("Missing required property 'codeRepositoryIndex'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.repositories === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositories'");
            }
            if ((!args || args.repositoryGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryGroupId'");
            }
            resourceInputs["codeRepositoryIndex"] = args ? args.codeRepositoryIndex : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["repositories"] = args ? args.repositories : undefined;
            resourceInputs["repositoryGroupId"] = args ? args.repositoryGroupId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RepositoryGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RepositoryGroup resources.
 */
export interface RepositoryGroupState {
    /**
     * Required. Id of the Code Repository Index.
     */
    codeRepositoryIndex?: pulumi.Input<string>;
    /**
     * Output only. Create time stamp.
     */
    createTime?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
     * in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the Code Repository Index, for example `us-central1`.
     */
    location?: pulumi.Input<string>;
    /**
     * Immutable. Identifier. Name of Repository Group.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required. List of repositories to group.
     * Structure is documented below.
     */
    repositories?: pulumi.Input<pulumi.Input<inputs.gemini.RepositoryGroupRepository>[]>;
    /**
     * Required. Id of the Repository Group.
     */
    repositoryGroupId?: pulumi.Input<string>;
    /**
     * Output only. Update time stamp.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RepositoryGroup resource.
 */
export interface RepositoryGroupArgs {
    /**
     * Required. Id of the Code Repository Index.
     */
    codeRepositoryIndex: pulumi.Input<string>;
    /**
     * Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
     * in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the Code Repository Index, for example `us-central1`.
     */
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Required. List of repositories to group.
     * Structure is documented below.
     */
    repositories: pulumi.Input<pulumi.Input<inputs.gemini.RepositoryGroupRepository>[]>;
    /**
     * Required. Id of the Repository Group.
     */
    repositoryGroupId: pulumi.Input<string>;
}
