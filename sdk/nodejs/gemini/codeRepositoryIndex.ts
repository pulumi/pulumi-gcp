// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Gemini Code Repository Index Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const example = new gcp.gemini.CodeRepositoryIndex("example", {
 *     location: "us-central1",
 *     codeRepositoryIndexId: "",
 *     kmsKey: "projects/projectExample/locations/locationExample/keyRings/keyRingExample/cryptoKeys/cryptoKeyExample",
 * });
 * ```
 *
 * ## Import
 *
 * CodeRepositoryIndex can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index_id}}`
 *
 * * `{{project}}/{{location}}/{{code_repository_index_id}}`
 *
 * * `{{location}}/{{code_repository_index_id}}`
 *
 * When using the `pulumi import` command, CodeRepositoryIndex can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:gemini/codeRepositoryIndex:CodeRepositoryIndex default projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gemini/codeRepositoryIndex:CodeRepositoryIndex default {{project}}/{{location}}/{{code_repository_index_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:gemini/codeRepositoryIndex:CodeRepositoryIndex default {{location}}/{{code_repository_index_id}}
 * ```
 */
export class CodeRepositoryIndex extends pulumi.CustomResource {
    /**
     * Get an existing CodeRepositoryIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodeRepositoryIndexState, opts?: pulumi.CustomResourceOptions): CodeRepositoryIndex {
        return new CodeRepositoryIndex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:gemini/codeRepositoryIndex:CodeRepositoryIndex';

    /**
     * Returns true if the given object is an instance of CodeRepositoryIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CodeRepositoryIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodeRepositoryIndex.__pulumiType;
    }

    /**
     * Required. Id of the Code Repository Index.
     *
     *
     * - - -
     */
    public readonly codeRepositoryIndexId!: pulumi.Output<string>;
    /**
     * Output only. Create time stamp.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
     */
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * Optional. Immutable. Customer-managed encryption key name, in the format
     * projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*.
     */
    public readonly kmsKey!: pulumi.Output<string | undefined>;
    /**
     * Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location of the Code Repository Index, for example `us-central1`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Immutable. Identifier. Name of Code Repository Index.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Output only. Code Repository Index instance State.
     * Possible values:
     * STATE_UNSPECIFIED
     * CREATING
     * ACTIVE
     * DELETING
     * SUSPENDED
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Output only. Update time stamp.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a CodeRepositoryIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodeRepositoryIndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodeRepositoryIndexArgs | CodeRepositoryIndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodeRepositoryIndexState | undefined;
            resourceInputs["codeRepositoryIndexId"] = state ? state.codeRepositoryIndexId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["kmsKey"] = state ? state.kmsKey : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as CodeRepositoryIndexArgs | undefined;
            if ((!args || args.codeRepositoryIndexId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'codeRepositoryIndexId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["codeRepositoryIndexId"] = args ? args.codeRepositoryIndexId : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["kmsKey"] = args ? args.kmsKey : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CodeRepositoryIndex.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CodeRepositoryIndex resources.
 */
export interface CodeRepositoryIndexState {
    /**
     * Required. Id of the Code Repository Index.
     *
     *
     * - - -
     */
    codeRepositoryIndexId?: pulumi.Input<string>;
    /**
     * Output only. Create time stamp.
     */
    createTime?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * Optional. Immutable. Customer-managed encryption key name, in the format
     * projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*.
     */
    kmsKey?: pulumi.Input<string>;
    /**
     * Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the Code Repository Index, for example `us-central1`.
     */
    location?: pulumi.Input<string>;
    /**
     * Immutable. Identifier. Name of Code Repository Index.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. Code Repository Index instance State.
     * Possible values:
     * STATE_UNSPECIFIED
     * CREATING
     * ACTIVE
     * DELETING
     * SUSPENDED
     */
    state?: pulumi.Input<string>;
    /**
     * Output only. Update time stamp.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CodeRepositoryIndex resource.
 */
export interface CodeRepositoryIndexArgs {
    /**
     * Required. Id of the Code Repository Index.
     *
     *
     * - - -
     */
    codeRepositoryIndexId: pulumi.Input<string>;
    /**
     * If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * Optional. Immutable. Customer-managed encryption key name, in the format
     * projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*.
     */
    kmsKey?: pulumi.Input<string>;
    /**
     * Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the Code Repository Index, for example `us-central1`.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
