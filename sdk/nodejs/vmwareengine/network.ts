// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 * ### Vmware Engine Network Legacy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as time from "@pulumi/time";
 *
 * // there can be only 1 Legacy network per region for a given project,
 * // so creating new project for isolation in CI.
 * const acceptanceProject = new gcp.organizations.Project("acceptanceProject", {
 *     projectId: "vmw-proj",
 *     orgId: "123456789",
 *     billingAccount: "000000-0000000-0000000-000000",
 * }, {
 *     provider: google_beta,
 * });
 * const wait60Seconds = new time.index.Time_sleep("wait60Seconds", {createDuration: "60s"}, {
 *     dependsOn: [acceptanceProject],
 * });
 * const acceptanceService = new gcp.projects.Service("acceptanceService", {
 *     project: acceptanceProject.projectId,
 *     service: "vmwareengine.googleapis.com",
 * }, {
 *     provider: google_beta,
 *     dependsOn: [wait60Seconds],
 * });
 * const vmw_engine_network = new gcp.vmwareengine.Network("vmw-engine-network", {
 *     project: acceptanceService.project,
 *     location: "us-west1",
 *     type: "LEGACY",
 *     description: "VMwareEngine legacy network sample",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Network can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:vmwareengine/network:Network default projects/{{project}}/locations/{{location}}/vmwareEngineNetworks/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vmwareengine/network:Network default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vmwareengine/network:Network default {{location}}/{{name}}
 * ```
 */
export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:vmwareengine/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * User-provided description for this VMware Engine network.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The location where the VMwareEngineNetwork should reside.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The ID of the VMwareEngineNetwork.
     *
     *
     * - - -
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * State of the VMware Engine network.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * VMware Engine network type.
     * Possible values are: `LEGACY`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * System-generated unique identifier for the resource.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * VMware Engine service VPC networks that provide connectivity from a private cloud to customer projects,
     * the internet, and other Google Cloud services.
     * Structure is documented below.
     */
    public /*out*/ readonly vpcNetworks!: pulumi.Output<outputs.vmwareengine.NetworkVpcNetwork[]>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["vpcNetworks"] = state ? state.vpcNetworks : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["vpcNetworks"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * User-provided description for this VMware Engine network.
     */
    description?: pulumi.Input<string>;
    /**
     * The location where the VMwareEngineNetwork should reside.
     */
    location?: pulumi.Input<string>;
    /**
     * The ID of the VMwareEngineNetwork.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * State of the VMware Engine network.
     */
    state?: pulumi.Input<string>;
    /**
     * VMware Engine network type.
     * Possible values are: `LEGACY`.
     */
    type?: pulumi.Input<string>;
    /**
     * System-generated unique identifier for the resource.
     */
    uid?: pulumi.Input<string>;
    /**
     * VMware Engine service VPC networks that provide connectivity from a private cloud to customer projects,
     * the internet, and other Google Cloud services.
     * Structure is documented below.
     */
    vpcNetworks?: pulumi.Input<pulumi.Input<inputs.vmwareengine.NetworkVpcNetwork>[]>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * User-provided description for this VMware Engine network.
     */
    description?: pulumi.Input<string>;
    /**
     * The location where the VMwareEngineNetwork should reside.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the VMwareEngineNetwork.
     *
     *
     * - - -
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * VMware Engine network type.
     * Possible values are: `LEGACY`.
     */
    type: pulumi.Input<string>;
}
