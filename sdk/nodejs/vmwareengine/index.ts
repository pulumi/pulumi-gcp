// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ExternalAccessRuleArgs, ExternalAccessRuleState } from "./externalAccessRule";
export type ExternalAccessRule = import("./externalAccessRule").ExternalAccessRule;
export const ExternalAccessRule: typeof import("./externalAccessRule").ExternalAccessRule = null as any;
utilities.lazyLoad(exports, ["ExternalAccessRule"], () => require("./externalAccessRule"));

export { ExternalAddressArgs, ExternalAddressState } from "./externalAddress";
export type ExternalAddress = import("./externalAddress").ExternalAddress;
export const ExternalAddress: typeof import("./externalAddress").ExternalAddress = null as any;
utilities.lazyLoad(exports, ["ExternalAddress"], () => require("./externalAddress"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetExternalAccessRuleArgs, GetExternalAccessRuleResult, GetExternalAccessRuleOutputArgs } from "./getExternalAccessRule";
export const getExternalAccessRule: typeof import("./getExternalAccessRule").getExternalAccessRule = null as any;
export const getExternalAccessRuleOutput: typeof import("./getExternalAccessRule").getExternalAccessRuleOutput = null as any;
utilities.lazyLoad(exports, ["getExternalAccessRule","getExternalAccessRuleOutput"], () => require("./getExternalAccessRule"));

export { GetExternalAddressArgs, GetExternalAddressResult, GetExternalAddressOutputArgs } from "./getExternalAddress";
export const getExternalAddress: typeof import("./getExternalAddress").getExternalAddress = null as any;
export const getExternalAddressOutput: typeof import("./getExternalAddress").getExternalAddressOutput = null as any;
utilities.lazyLoad(exports, ["getExternalAddress","getExternalAddressOutput"], () => require("./getExternalAddress"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetNetworkPeeringArgs, GetNetworkPeeringResult, GetNetworkPeeringOutputArgs } from "./getNetworkPeering";
export const getNetworkPeering: typeof import("./getNetworkPeering").getNetworkPeering = null as any;
export const getNetworkPeeringOutput: typeof import("./getNetworkPeering").getNetworkPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkPeering","getNetworkPeeringOutput"], () => require("./getNetworkPeering"));

export { GetNetworkPolicyArgs, GetNetworkPolicyResult, GetNetworkPolicyOutputArgs } from "./getNetworkPolicy";
export const getNetworkPolicy: typeof import("./getNetworkPolicy").getNetworkPolicy = null as any;
export const getNetworkPolicyOutput: typeof import("./getNetworkPolicy").getNetworkPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkPolicy","getNetworkPolicyOutput"], () => require("./getNetworkPolicy"));

export { GetNsxCredentialsArgs, GetNsxCredentialsResult, GetNsxCredentialsOutputArgs } from "./getNsxCredentials";
export const getNsxCredentials: typeof import("./getNsxCredentials").getNsxCredentials = null as any;
export const getNsxCredentialsOutput: typeof import("./getNsxCredentials").getNsxCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getNsxCredentials","getNsxCredentialsOutput"], () => require("./getNsxCredentials"));

export { GetPrivateCloudArgs, GetPrivateCloudResult, GetPrivateCloudOutputArgs } from "./getPrivateCloud";
export const getPrivateCloud: typeof import("./getPrivateCloud").getPrivateCloud = null as any;
export const getPrivateCloudOutput: typeof import("./getPrivateCloud").getPrivateCloudOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateCloud","getPrivateCloudOutput"], () => require("./getPrivateCloud"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetVcenterCredentialsArgs, GetVcenterCredentialsResult, GetVcenterCredentialsOutputArgs } from "./getVcenterCredentials";
export const getVcenterCredentials: typeof import("./getVcenterCredentials").getVcenterCredentials = null as any;
export const getVcenterCredentialsOutput: typeof import("./getVcenterCredentials").getVcenterCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getVcenterCredentials","getVcenterCredentialsOutput"], () => require("./getVcenterCredentials"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworkPeeringArgs, NetworkPeeringState } from "./networkPeering";
export type NetworkPeering = import("./networkPeering").NetworkPeering;
export const NetworkPeering: typeof import("./networkPeering").NetworkPeering = null as any;
utilities.lazyLoad(exports, ["NetworkPeering"], () => require("./networkPeering"));

export { NetworkPolicyArgs, NetworkPolicyState } from "./networkPolicy";
export type NetworkPolicy = import("./networkPolicy").NetworkPolicy;
export const NetworkPolicy: typeof import("./networkPolicy").NetworkPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkPolicy"], () => require("./networkPolicy"));

export { PrivateCloudArgs, PrivateCloudState } from "./privateCloud";
export type PrivateCloud = import("./privateCloud").PrivateCloud;
export const PrivateCloud: typeof import("./privateCloud").PrivateCloud = null as any;
utilities.lazyLoad(exports, ["PrivateCloud"], () => require("./privateCloud"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:vmwareengine/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "gcp:vmwareengine/externalAccessRule:ExternalAccessRule":
                return new ExternalAccessRule(name, <any>undefined, { urn })
            case "gcp:vmwareengine/externalAddress:ExternalAddress":
                return new ExternalAddress(name, <any>undefined, { urn })
            case "gcp:vmwareengine/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "gcp:vmwareengine/networkPeering:NetworkPeering":
                return new NetworkPeering(name, <any>undefined, { urn })
            case "gcp:vmwareengine/networkPolicy:NetworkPolicy":
                return new NetworkPolicy(name, <any>undefined, { urn })
            case "gcp:vmwareengine/privateCloud:PrivateCloud":
                return new PrivateCloud(name, <any>undefined, { urn })
            case "gcp:vmwareengine/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "vmwareengine/cluster", _module)
pulumi.runtime.registerResourceModule("gcp", "vmwareengine/externalAccessRule", _module)
pulumi.runtime.registerResourceModule("gcp", "vmwareengine/externalAddress", _module)
pulumi.runtime.registerResourceModule("gcp", "vmwareengine/network", _module)
pulumi.runtime.registerResourceModule("gcp", "vmwareengine/networkPeering", _module)
pulumi.runtime.registerResourceModule("gcp", "vmwareengine/networkPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "vmwareengine/privateCloud", _module)
pulumi.runtime.registerResourceModule("gcp", "vmwareengine/subnet", _module)
