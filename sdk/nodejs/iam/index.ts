// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessBoundaryPolicyArgs, AccessBoundaryPolicyState } from "./accessBoundaryPolicy";
export type AccessBoundaryPolicy = import("./accessBoundaryPolicy").AccessBoundaryPolicy;
export const AccessBoundaryPolicy: typeof import("./accessBoundaryPolicy").AccessBoundaryPolicy = null as any;
utilities.lazyLoad(exports, ["AccessBoundaryPolicy"], () => require("./accessBoundaryPolicy"));

export { DenyPolicyArgs, DenyPolicyState } from "./denyPolicy";
export type DenyPolicy = import("./denyPolicy").DenyPolicy;
export const DenyPolicy: typeof import("./denyPolicy").DenyPolicy = null as any;
utilities.lazyLoad(exports, ["DenyPolicy"], () => require("./denyPolicy"));

export { FoldersPolicyBindingArgs, FoldersPolicyBindingState } from "./foldersPolicyBinding";
export type FoldersPolicyBinding = import("./foldersPolicyBinding").FoldersPolicyBinding;
export const FoldersPolicyBinding: typeof import("./foldersPolicyBinding").FoldersPolicyBinding = null as any;
utilities.lazyLoad(exports, ["FoldersPolicyBinding"], () => require("./foldersPolicyBinding"));

export { GetRuleArgs, GetRuleResult, GetRuleOutputArgs } from "./getRule";
export const getRule: typeof import("./getRule").getRule = null as any;
export const getRuleOutput: typeof import("./getRule").getRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRule","getRuleOutput"], () => require("./getRule"));

export { GetTestablePermissionsArgs, GetTestablePermissionsResult, GetTestablePermissionsOutputArgs } from "./getTestablePermissions";
export const getTestablePermissions: typeof import("./getTestablePermissions").getTestablePermissions = null as any;
export const getTestablePermissionsOutput: typeof import("./getTestablePermissions").getTestablePermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getTestablePermissions","getTestablePermissionsOutput"], () => require("./getTestablePermissions"));

export { GetWorkloadIdentityPoolArgs, GetWorkloadIdentityPoolResult, GetWorkloadIdentityPoolOutputArgs } from "./getWorkloadIdentityPool";
export const getWorkloadIdentityPool: typeof import("./getWorkloadIdentityPool").getWorkloadIdentityPool = null as any;
export const getWorkloadIdentityPoolOutput: typeof import("./getWorkloadIdentityPool").getWorkloadIdentityPoolOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadIdentityPool","getWorkloadIdentityPoolOutput"], () => require("./getWorkloadIdentityPool"));

export { GetWorkloadIdentityPoolIamPolicyArgs, GetWorkloadIdentityPoolIamPolicyResult, GetWorkloadIdentityPoolIamPolicyOutputArgs } from "./getWorkloadIdentityPoolIamPolicy";
export const getWorkloadIdentityPoolIamPolicy: typeof import("./getWorkloadIdentityPoolIamPolicy").getWorkloadIdentityPoolIamPolicy = null as any;
export const getWorkloadIdentityPoolIamPolicyOutput: typeof import("./getWorkloadIdentityPoolIamPolicy").getWorkloadIdentityPoolIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadIdentityPoolIamPolicy","getWorkloadIdentityPoolIamPolicyOutput"], () => require("./getWorkloadIdentityPoolIamPolicy"));

export { GetWorkloadIdentityPoolProviderArgs, GetWorkloadIdentityPoolProviderResult, GetWorkloadIdentityPoolProviderOutputArgs } from "./getWorkloadIdentityPoolProvider";
export const getWorkloadIdentityPoolProvider: typeof import("./getWorkloadIdentityPoolProvider").getWorkloadIdentityPoolProvider = null as any;
export const getWorkloadIdentityPoolProviderOutput: typeof import("./getWorkloadIdentityPoolProvider").getWorkloadIdentityPoolProviderOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadIdentityPoolProvider","getWorkloadIdentityPoolProviderOutput"], () => require("./getWorkloadIdentityPoolProvider"));

export { OauthClientArgs, OauthClientState } from "./oauthClient";
export type OauthClient = import("./oauthClient").OauthClient;
export const OauthClient: typeof import("./oauthClient").OauthClient = null as any;
utilities.lazyLoad(exports, ["OauthClient"], () => require("./oauthClient"));

export { OauthClientCredentialArgs, OauthClientCredentialState } from "./oauthClientCredential";
export type OauthClientCredential = import("./oauthClientCredential").OauthClientCredential;
export const OauthClientCredential: typeof import("./oauthClientCredential").OauthClientCredential = null as any;
utilities.lazyLoad(exports, ["OauthClientCredential"], () => require("./oauthClientCredential"));

export { OrganizationsPolicyBindingArgs, OrganizationsPolicyBindingState } from "./organizationsPolicyBinding";
export type OrganizationsPolicyBinding = import("./organizationsPolicyBinding").OrganizationsPolicyBinding;
export const OrganizationsPolicyBinding: typeof import("./organizationsPolicyBinding").OrganizationsPolicyBinding = null as any;
utilities.lazyLoad(exports, ["OrganizationsPolicyBinding"], () => require("./organizationsPolicyBinding"));

export { PrincipalAccessBoundaryPolicyArgs, PrincipalAccessBoundaryPolicyState } from "./principalAccessBoundaryPolicy";
export type PrincipalAccessBoundaryPolicy = import("./principalAccessBoundaryPolicy").PrincipalAccessBoundaryPolicy;
export const PrincipalAccessBoundaryPolicy: typeof import("./principalAccessBoundaryPolicy").PrincipalAccessBoundaryPolicy = null as any;
utilities.lazyLoad(exports, ["PrincipalAccessBoundaryPolicy"], () => require("./principalAccessBoundaryPolicy"));

export { ProjectsPolicyBindingArgs, ProjectsPolicyBindingState } from "./projectsPolicyBinding";
export type ProjectsPolicyBinding = import("./projectsPolicyBinding").ProjectsPolicyBinding;
export const ProjectsPolicyBinding: typeof import("./projectsPolicyBinding").ProjectsPolicyBinding = null as any;
utilities.lazyLoad(exports, ["ProjectsPolicyBinding"], () => require("./projectsPolicyBinding"));

export { WorkforcePoolArgs, WorkforcePoolState } from "./workforcePool";
export type WorkforcePool = import("./workforcePool").WorkforcePool;
export const WorkforcePool: typeof import("./workforcePool").WorkforcePool = null as any;
utilities.lazyLoad(exports, ["WorkforcePool"], () => require("./workforcePool"));

export { WorkforcePoolProviderArgs, WorkforcePoolProviderState } from "./workforcePoolProvider";
export type WorkforcePoolProvider = import("./workforcePoolProvider").WorkforcePoolProvider;
export const WorkforcePoolProvider: typeof import("./workforcePoolProvider").WorkforcePoolProvider = null as any;
utilities.lazyLoad(exports, ["WorkforcePoolProvider"], () => require("./workforcePoolProvider"));

export { WorkforcePoolProviderKeyArgs, WorkforcePoolProviderKeyState } from "./workforcePoolProviderKey";
export type WorkforcePoolProviderKey = import("./workforcePoolProviderKey").WorkforcePoolProviderKey;
export const WorkforcePoolProviderKey: typeof import("./workforcePoolProviderKey").WorkforcePoolProviderKey = null as any;
utilities.lazyLoad(exports, ["WorkforcePoolProviderKey"], () => require("./workforcePoolProviderKey"));

export { WorkloadIdentityPoolArgs, WorkloadIdentityPoolState } from "./workloadIdentityPool";
export type WorkloadIdentityPool = import("./workloadIdentityPool").WorkloadIdentityPool;
export const WorkloadIdentityPool: typeof import("./workloadIdentityPool").WorkloadIdentityPool = null as any;
utilities.lazyLoad(exports, ["WorkloadIdentityPool"], () => require("./workloadIdentityPool"));

export { WorkloadIdentityPoolIamBindingArgs, WorkloadIdentityPoolIamBindingState } from "./workloadIdentityPoolIamBinding";
export type WorkloadIdentityPoolIamBinding = import("./workloadIdentityPoolIamBinding").WorkloadIdentityPoolIamBinding;
export const WorkloadIdentityPoolIamBinding: typeof import("./workloadIdentityPoolIamBinding").WorkloadIdentityPoolIamBinding = null as any;
utilities.lazyLoad(exports, ["WorkloadIdentityPoolIamBinding"], () => require("./workloadIdentityPoolIamBinding"));

export { WorkloadIdentityPoolIamMemberArgs, WorkloadIdentityPoolIamMemberState } from "./workloadIdentityPoolIamMember";
export type WorkloadIdentityPoolIamMember = import("./workloadIdentityPoolIamMember").WorkloadIdentityPoolIamMember;
export const WorkloadIdentityPoolIamMember: typeof import("./workloadIdentityPoolIamMember").WorkloadIdentityPoolIamMember = null as any;
utilities.lazyLoad(exports, ["WorkloadIdentityPoolIamMember"], () => require("./workloadIdentityPoolIamMember"));

export { WorkloadIdentityPoolIamPolicyArgs, WorkloadIdentityPoolIamPolicyState } from "./workloadIdentityPoolIamPolicy";
export type WorkloadIdentityPoolIamPolicy = import("./workloadIdentityPoolIamPolicy").WorkloadIdentityPoolIamPolicy;
export const WorkloadIdentityPoolIamPolicy: typeof import("./workloadIdentityPoolIamPolicy").WorkloadIdentityPoolIamPolicy = null as any;
utilities.lazyLoad(exports, ["WorkloadIdentityPoolIamPolicy"], () => require("./workloadIdentityPoolIamPolicy"));

export { WorkloadIdentityPoolManagedIdentityArgs, WorkloadIdentityPoolManagedIdentityState } from "./workloadIdentityPoolManagedIdentity";
export type WorkloadIdentityPoolManagedIdentity = import("./workloadIdentityPoolManagedIdentity").WorkloadIdentityPoolManagedIdentity;
export const WorkloadIdentityPoolManagedIdentity: typeof import("./workloadIdentityPoolManagedIdentity").WorkloadIdentityPoolManagedIdentity = null as any;
utilities.lazyLoad(exports, ["WorkloadIdentityPoolManagedIdentity"], () => require("./workloadIdentityPoolManagedIdentity"));

export { WorkloadIdentityPoolNamespaceArgs, WorkloadIdentityPoolNamespaceState } from "./workloadIdentityPoolNamespace";
export type WorkloadIdentityPoolNamespace = import("./workloadIdentityPoolNamespace").WorkloadIdentityPoolNamespace;
export const WorkloadIdentityPoolNamespace: typeof import("./workloadIdentityPoolNamespace").WorkloadIdentityPoolNamespace = null as any;
utilities.lazyLoad(exports, ["WorkloadIdentityPoolNamespace"], () => require("./workloadIdentityPoolNamespace"));

export { WorkloadIdentityPoolProviderArgs, WorkloadIdentityPoolProviderState } from "./workloadIdentityPoolProvider";
export type WorkloadIdentityPoolProvider = import("./workloadIdentityPoolProvider").WorkloadIdentityPoolProvider;
export const WorkloadIdentityPoolProvider: typeof import("./workloadIdentityPoolProvider").WorkloadIdentityPoolProvider = null as any;
utilities.lazyLoad(exports, ["WorkloadIdentityPoolProvider"], () => require("./workloadIdentityPoolProvider"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:iam/accessBoundaryPolicy:AccessBoundaryPolicy":
                return new AccessBoundaryPolicy(name, <any>undefined, { urn })
            case "gcp:iam/denyPolicy:DenyPolicy":
                return new DenyPolicy(name, <any>undefined, { urn })
            case "gcp:iam/foldersPolicyBinding:FoldersPolicyBinding":
                return new FoldersPolicyBinding(name, <any>undefined, { urn })
            case "gcp:iam/oauthClient:OauthClient":
                return new OauthClient(name, <any>undefined, { urn })
            case "gcp:iam/oauthClientCredential:OauthClientCredential":
                return new OauthClientCredential(name, <any>undefined, { urn })
            case "gcp:iam/organizationsPolicyBinding:OrganizationsPolicyBinding":
                return new OrganizationsPolicyBinding(name, <any>undefined, { urn })
            case "gcp:iam/principalAccessBoundaryPolicy:PrincipalAccessBoundaryPolicy":
                return new PrincipalAccessBoundaryPolicy(name, <any>undefined, { urn })
            case "gcp:iam/projectsPolicyBinding:ProjectsPolicyBinding":
                return new ProjectsPolicyBinding(name, <any>undefined, { urn })
            case "gcp:iam/workforcePool:WorkforcePool":
                return new WorkforcePool(name, <any>undefined, { urn })
            case "gcp:iam/workforcePoolProvider:WorkforcePoolProvider":
                return new WorkforcePoolProvider(name, <any>undefined, { urn })
            case "gcp:iam/workforcePoolProviderKey:WorkforcePoolProviderKey":
                return new WorkforcePoolProviderKey(name, <any>undefined, { urn })
            case "gcp:iam/workloadIdentityPool:WorkloadIdentityPool":
                return new WorkloadIdentityPool(name, <any>undefined, { urn })
            case "gcp:iam/workloadIdentityPoolIamBinding:WorkloadIdentityPoolIamBinding":
                return new WorkloadIdentityPoolIamBinding(name, <any>undefined, { urn })
            case "gcp:iam/workloadIdentityPoolIamMember:WorkloadIdentityPoolIamMember":
                return new WorkloadIdentityPoolIamMember(name, <any>undefined, { urn })
            case "gcp:iam/workloadIdentityPoolIamPolicy:WorkloadIdentityPoolIamPolicy":
                return new WorkloadIdentityPoolIamPolicy(name, <any>undefined, { urn })
            case "gcp:iam/workloadIdentityPoolManagedIdentity:WorkloadIdentityPoolManagedIdentity":
                return new WorkloadIdentityPoolManagedIdentity(name, <any>undefined, { urn })
            case "gcp:iam/workloadIdentityPoolNamespace:WorkloadIdentityPoolNamespace":
                return new WorkloadIdentityPoolNamespace(name, <any>undefined, { urn })
            case "gcp:iam/workloadIdentityPoolProvider:WorkloadIdentityPoolProvider":
                return new WorkloadIdentityPoolProvider(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "iam/accessBoundaryPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/denyPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/foldersPolicyBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/oauthClient", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/oauthClientCredential", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/organizationsPolicyBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/principalAccessBoundaryPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/projectsPolicyBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/workforcePool", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/workforcePoolProvider", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/workforcePoolProviderKey", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/workloadIdentityPool", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/workloadIdentityPoolIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/workloadIdentityPoolIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/workloadIdentityPoolIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/workloadIdentityPoolManagedIdentity", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/workloadIdentityPoolNamespace", _module)
pulumi.runtime.registerResourceModule("gcp", "iam/workloadIdentityPoolProvider", _module)
