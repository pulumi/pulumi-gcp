// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * WorkloadIdentityPoolProvider can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:iam/workloadIdentityPoolProvider:WorkloadIdentityPoolProvider default projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}/providers/{{workload_identity_pool_provider_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:iam/workloadIdentityPoolProvider:WorkloadIdentityPoolProvider default {{project}}/{{workload_identity_pool_id}}/{{workload_identity_pool_provider_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:iam/workloadIdentityPoolProvider:WorkloadIdentityPoolProvider default {{workload_identity_pool_id}}/{{workload_identity_pool_provider_id}}
 * ```
 */
export class WorkloadIdentityPoolProvider extends pulumi.CustomResource {
    /**
     * Get an existing WorkloadIdentityPoolProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkloadIdentityPoolProviderState, opts?: pulumi.CustomResourceOptions): WorkloadIdentityPoolProvider {
        return new WorkloadIdentityPoolProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:iam/workloadIdentityPoolProvider:WorkloadIdentityPoolProvider';

    /**
     * Returns true if the given object is an instance of WorkloadIdentityPoolProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkloadIdentityPoolProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkloadIdentityPoolProvider.__pulumiType;
    }

    /**
     * [A Common Expression Language](https://opensource.google/projects/cel) expression, in
     * plain text, to restrict what otherwise valid authentication credentials issued by the
     * provider should not be accepted.
     * The expression must output a boolean representing whether to allow the federation.
     * The following keywords may be referenced in the expressions:
     * * `assertion`: JSON representing the authentication credential issued by the provider.
     * * `google`: The Google attributes mapped from the assertion in the `attributeMappings`.
     * * `attribute`: The custom attributes mapped from the assertion in the `attributeMappings`.
     * The maximum length of the attribute condition expression is 4096 characters. If
     * unspecified, all valid authentication credential are accepted.
     * The following example shows how to only allow credentials with a mapped `google.groups`
     * value of `admins`:
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * ```
     */
    public readonly attributeCondition!: pulumi.Output<string | undefined>;
    /**
     * Maps attributes from authentication credentials issued by an external identity provider
     * to Google Cloud attributes, such as `subject` and `segment`.
     * Each key must be a string specifying the Google Cloud IAM attribute to map to.
     * The following keys are supported:
     * * `google.subject`: The principal IAM is authenticating. You can reference this value
     * in IAM bindings. This is also the subject that appears in Cloud Logging logs.
     * Cannot exceed 127 characters.
     * * `google.groups`: Groups the external identity belongs to. You can grant groups
     * access to resources using an IAM `principalSet` binding; access applies to all
     * members of the group.
     * You can also provide custom attributes by specifying `attribute.{custom_attribute}`,
     * where `{custom_attribute}` is the name of the custom attribute to be mapped. You can
     * define a maximum of 50 custom attributes. The maximum length of a mapped attribute key
     * is 100 characters, and the key may only contain the characters [a-z0-9_].
     * You can reference these attributes in IAM policies to define fine-grained access for a
     * workload to Google Cloud resources. For example:
     * * `google.subject`:
     * `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}`
     * * `google.groups`:
     * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}`
     * * `attribute.{custom_attribute}`:
     * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}`
     * Each value must be a [Common Expression Language](https://opensource.google/projects/cel)
     * function that maps an identity provider credential to the normalized attribute specified
     * by the corresponding map key.
     * You can use the `assertion` keyword in the expression to access a JSON representation of
     * the authentication credential issued by the provider.
     * The maximum length of an attribute mapping expression is 2048 characters. When evaluated,
     * the total size of all mapped attributes must not exceed 8KB.
     * For AWS providers, the following rules apply:
     * - If no attribute mapping is defined, the following default mapping applies:
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * ```
     * - If any custom attribute mappings are defined, they must include a mapping to the
     * `google.subject` attribute.
     * For OIDC providers, the following rules apply:
     * - Custom attribute mappings must be defined, and must include a mapping to the
     * `google.subject` attribute. For example, the following maps the `sub` claim of the
     * incoming credential to the `subject` attribute on a Google token.
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * ```
     */
    public readonly attributeMapping!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * An Amazon Web Services identity provider. Not compatible with the property oidc.
     * Structure is documented below.
     */
    public readonly aws!: pulumi.Output<outputs.iam.WorkloadIdentityPoolProviderAws | undefined>;
    /**
     * A description for the provider. Cannot exceed 256 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether the provider is disabled. You cannot use a disabled provider to exchange tokens.
     * However, existing tokens still grant access.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * A display name for the provider. Cannot exceed 32 characters.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The resource name of the provider as
     * 'projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}/providers/{workload_identity_pool_provider_id}'.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * An OpenId Connect 1.0 identity provider. Not compatible with the property aws.
     * Structure is documented below.
     */
    public readonly oidc!: pulumi.Output<outputs.iam.WorkloadIdentityPoolProviderOidc | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The state of the provider. * STATE_UNSPECIFIED: State unspecified. * ACTIVE: The provider is active, and may be used to
     * validate authentication credentials. * DELETED: The provider is soft-deleted. Soft-deleted providers are permanently
     * deleted after approximately 30 days. You can restore a soft-deleted provider using UndeleteWorkloadIdentityPoolProvider.
     * You cannot reuse the ID of a soft-deleted provider until it is permanently deleted.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The ID used for the pool, which is the final component of the pool resource name. This
     * value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
     * `gcp-` is reserved for use by Google, and may not be specified.
     */
    public readonly workloadIdentityPoolId!: pulumi.Output<string>;
    /**
     * The ID for the provider, which becomes the final component of the resource name. This
     * value must be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
     * `gcp-` is reserved for use by Google, and may not be specified.
     */
    public readonly workloadIdentityPoolProviderId!: pulumi.Output<string>;

    /**
     * Create a WorkloadIdentityPoolProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkloadIdentityPoolProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkloadIdentityPoolProviderArgs | WorkloadIdentityPoolProviderState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkloadIdentityPoolProviderState | undefined;
            inputs["attributeCondition"] = state ? state.attributeCondition : undefined;
            inputs["attributeMapping"] = state ? state.attributeMapping : undefined;
            inputs["aws"] = state ? state.aws : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["disabled"] = state ? state.disabled : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["oidc"] = state ? state.oidc : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["workloadIdentityPoolId"] = state ? state.workloadIdentityPoolId : undefined;
            inputs["workloadIdentityPoolProviderId"] = state ? state.workloadIdentityPoolProviderId : undefined;
        } else {
            const args = argsOrState as WorkloadIdentityPoolProviderArgs | undefined;
            if ((!args || args.workloadIdentityPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workloadIdentityPoolId'");
            }
            if ((!args || args.workloadIdentityPoolProviderId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workloadIdentityPoolProviderId'");
            }
            inputs["attributeCondition"] = args ? args.attributeCondition : undefined;
            inputs["attributeMapping"] = args ? args.attributeMapping : undefined;
            inputs["aws"] = args ? args.aws : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["disabled"] = args ? args.disabled : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["oidc"] = args ? args.oidc : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["workloadIdentityPoolId"] = args ? args.workloadIdentityPoolId : undefined;
            inputs["workloadIdentityPoolProviderId"] = args ? args.workloadIdentityPoolProviderId : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(WorkloadIdentityPoolProvider.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkloadIdentityPoolProvider resources.
 */
export interface WorkloadIdentityPoolProviderState {
    /**
     * [A Common Expression Language](https://opensource.google/projects/cel) expression, in
     * plain text, to restrict what otherwise valid authentication credentials issued by the
     * provider should not be accepted.
     * The expression must output a boolean representing whether to allow the federation.
     * The following keywords may be referenced in the expressions:
     * * `assertion`: JSON representing the authentication credential issued by the provider.
     * * `google`: The Google attributes mapped from the assertion in the `attributeMappings`.
     * * `attribute`: The custom attributes mapped from the assertion in the `attributeMappings`.
     * The maximum length of the attribute condition expression is 4096 characters. If
     * unspecified, all valid authentication credential are accepted.
     * The following example shows how to only allow credentials with a mapped `google.groups`
     * value of `admins`:
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * ```
     */
    readonly attributeCondition?: pulumi.Input<string>;
    /**
     * Maps attributes from authentication credentials issued by an external identity provider
     * to Google Cloud attributes, such as `subject` and `segment`.
     * Each key must be a string specifying the Google Cloud IAM attribute to map to.
     * The following keys are supported:
     * * `google.subject`: The principal IAM is authenticating. You can reference this value
     * in IAM bindings. This is also the subject that appears in Cloud Logging logs.
     * Cannot exceed 127 characters.
     * * `google.groups`: Groups the external identity belongs to. You can grant groups
     * access to resources using an IAM `principalSet` binding; access applies to all
     * members of the group.
     * You can also provide custom attributes by specifying `attribute.{custom_attribute}`,
     * where `{custom_attribute}` is the name of the custom attribute to be mapped. You can
     * define a maximum of 50 custom attributes. The maximum length of a mapped attribute key
     * is 100 characters, and the key may only contain the characters [a-z0-9_].
     * You can reference these attributes in IAM policies to define fine-grained access for a
     * workload to Google Cloud resources. For example:
     * * `google.subject`:
     * `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}`
     * * `google.groups`:
     * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}`
     * * `attribute.{custom_attribute}`:
     * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}`
     * Each value must be a [Common Expression Language](https://opensource.google/projects/cel)
     * function that maps an identity provider credential to the normalized attribute specified
     * by the corresponding map key.
     * You can use the `assertion` keyword in the expression to access a JSON representation of
     * the authentication credential issued by the provider.
     * The maximum length of an attribute mapping expression is 2048 characters. When evaluated,
     * the total size of all mapped attributes must not exceed 8KB.
     * For AWS providers, the following rules apply:
     * - If no attribute mapping is defined, the following default mapping applies:
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * ```
     * - If any custom attribute mappings are defined, they must include a mapping to the
     * `google.subject` attribute.
     * For OIDC providers, the following rules apply:
     * - Custom attribute mappings must be defined, and must include a mapping to the
     * `google.subject` attribute. For example, the following maps the `sub` claim of the
     * incoming credential to the `subject` attribute on a Google token.
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * ```
     */
    readonly attributeMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An Amazon Web Services identity provider. Not compatible with the property oidc.
     * Structure is documented below.
     */
    readonly aws?: pulumi.Input<inputs.iam.WorkloadIdentityPoolProviderAws>;
    /**
     * A description for the provider. Cannot exceed 256 characters.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Whether the provider is disabled. You cannot use a disabled provider to exchange tokens.
     * However, existing tokens still grant access.
     */
    readonly disabled?: pulumi.Input<boolean>;
    /**
     * A display name for the provider. Cannot exceed 32 characters.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * The resource name of the provider as
     * 'projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}/providers/{workload_identity_pool_provider_id}'.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * An OpenId Connect 1.0 identity provider. Not compatible with the property aws.
     * Structure is documented below.
     */
    readonly oidc?: pulumi.Input<inputs.iam.WorkloadIdentityPoolProviderOidc>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The state of the provider. * STATE_UNSPECIFIED: State unspecified. * ACTIVE: The provider is active, and may be used to
     * validate authentication credentials. * DELETED: The provider is soft-deleted. Soft-deleted providers are permanently
     * deleted after approximately 30 days. You can restore a soft-deleted provider using UndeleteWorkloadIdentityPoolProvider.
     * You cannot reuse the ID of a soft-deleted provider until it is permanently deleted.
     */
    readonly state?: pulumi.Input<string>;
    /**
     * The ID used for the pool, which is the final component of the pool resource name. This
     * value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
     * `gcp-` is reserved for use by Google, and may not be specified.
     */
    readonly workloadIdentityPoolId?: pulumi.Input<string>;
    /**
     * The ID for the provider, which becomes the final component of the resource name. This
     * value must be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
     * `gcp-` is reserved for use by Google, and may not be specified.
     */
    readonly workloadIdentityPoolProviderId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkloadIdentityPoolProvider resource.
 */
export interface WorkloadIdentityPoolProviderArgs {
    /**
     * [A Common Expression Language](https://opensource.google/projects/cel) expression, in
     * plain text, to restrict what otherwise valid authentication credentials issued by the
     * provider should not be accepted.
     * The expression must output a boolean representing whether to allow the federation.
     * The following keywords may be referenced in the expressions:
     * * `assertion`: JSON representing the authentication credential issued by the provider.
     * * `google`: The Google attributes mapped from the assertion in the `attributeMappings`.
     * * `attribute`: The custom attributes mapped from the assertion in the `attributeMappings`.
     * The maximum length of the attribute condition expression is 4096 characters. If
     * unspecified, all valid authentication credential are accepted.
     * The following example shows how to only allow credentials with a mapped `google.groups`
     * value of `admins`:
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * ```
     */
    readonly attributeCondition?: pulumi.Input<string>;
    /**
     * Maps attributes from authentication credentials issued by an external identity provider
     * to Google Cloud attributes, such as `subject` and `segment`.
     * Each key must be a string specifying the Google Cloud IAM attribute to map to.
     * The following keys are supported:
     * * `google.subject`: The principal IAM is authenticating. You can reference this value
     * in IAM bindings. This is also the subject that appears in Cloud Logging logs.
     * Cannot exceed 127 characters.
     * * `google.groups`: Groups the external identity belongs to. You can grant groups
     * access to resources using an IAM `principalSet` binding; access applies to all
     * members of the group.
     * You can also provide custom attributes by specifying `attribute.{custom_attribute}`,
     * where `{custom_attribute}` is the name of the custom attribute to be mapped. You can
     * define a maximum of 50 custom attributes. The maximum length of a mapped attribute key
     * is 100 characters, and the key may only contain the characters [a-z0-9_].
     * You can reference these attributes in IAM policies to define fine-grained access for a
     * workload to Google Cloud resources. For example:
     * * `google.subject`:
     * `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}`
     * * `google.groups`:
     * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}`
     * * `attribute.{custom_attribute}`:
     * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}`
     * Each value must be a [Common Expression Language](https://opensource.google/projects/cel)
     * function that maps an identity provider credential to the normalized attribute specified
     * by the corresponding map key.
     * You can use the `assertion` keyword in the expression to access a JSON representation of
     * the authentication credential issued by the provider.
     * The maximum length of an attribute mapping expression is 2048 characters. When evaluated,
     * the total size of all mapped attributes must not exceed 8KB.
     * For AWS providers, the following rules apply:
     * - If no attribute mapping is defined, the following default mapping applies:
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * ```
     * - If any custom attribute mappings are defined, they must include a mapping to the
     * `google.subject` attribute.
     * For OIDC providers, the following rules apply:
     * - Custom attribute mappings must be defined, and must include a mapping to the
     * `google.subject` attribute. For example, the following maps the `sub` claim of the
     * incoming credential to the `subject` attribute on a Google token.
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * ```
     */
    readonly attributeMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An Amazon Web Services identity provider. Not compatible with the property oidc.
     * Structure is documented below.
     */
    readonly aws?: pulumi.Input<inputs.iam.WorkloadIdentityPoolProviderAws>;
    /**
     * A description for the provider. Cannot exceed 256 characters.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Whether the provider is disabled. You cannot use a disabled provider to exchange tokens.
     * However, existing tokens still grant access.
     */
    readonly disabled?: pulumi.Input<boolean>;
    /**
     * A display name for the provider. Cannot exceed 32 characters.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * An OpenId Connect 1.0 identity provider. Not compatible with the property aws.
     * Structure is documented below.
     */
    readonly oidc?: pulumi.Input<inputs.iam.WorkloadIdentityPoolProviderOidc>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The ID used for the pool, which is the final component of the pool resource name. This
     * value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
     * `gcp-` is reserved for use by Google, and may not be specified.
     */
    readonly workloadIdentityPoolId: pulumi.Input<string>;
    /**
     * The ID for the provider, which becomes the final component of the resource name. This
     * value must be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
     * `gcp-` is reserved for use by Google, and may not be specified.
     */
    readonly workloadIdentityPoolProviderId: pulumi.Input<string>;
}
