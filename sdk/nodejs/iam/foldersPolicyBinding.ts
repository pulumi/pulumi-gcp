// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A policy binding to a folder
 *
 * To get more information about FoldersPolicyBinding, see:
 *
 * * [API documentation](https://cloud.google.com/iam/docs/reference/rest/v3/folders.locations.policyBindings)
 * * How-to Guides
 *     * [Apply a policy binding](https://cloud.google.com/iam/docs/principal-access-boundary-policies-create#create_binding)
 *
 * ## Example Usage
 *
 * ### Iam Folders Policy Binding
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as time from "@pulumi/time";
 *
 * const pabPolicy = new gcp.iam.PrincipalAccessBoundaryPolicy("pab_policy", {
 *     organization: "123456789",
 *     location: "global",
 *     displayName: "test folder binding",
 *     principalAccessBoundaryPolicyId: "my-pab-policy",
 * });
 * const folder = new gcp.organizations.Folder("folder", {
 *     displayName: "test folder",
 *     parent: "organizations/123456789",
 *     deletionProtection: false,
 * });
 * const wait120s = new time.index.Sleep("wait_120s", {createDuration: "120s"}, {
 *     dependsOn: [folder],
 * });
 * const my_folder_binding = new gcp.iam.FoldersPolicyBinding("my-folder-binding", {
 *     folder: folder.folderId,
 *     location: "global",
 *     displayName: "test folder binding",
 *     policyKind: "PRINCIPAL_ACCESS_BOUNDARY",
 *     policyBindingId: "test-folder-binding",
 *     policy: pulumi.interpolate`organizations/123456789/locations/global/principalAccessBoundaryPolicies/${pabPolicy.principalAccessBoundaryPolicyId}`,
 *     target: {
 *         principalSet: pulumi.interpolate`//cloudresourcemanager.googleapis.com/folders/${folder.folderId}`,
 *     },
 * }, {
 *     dependsOn: [wait120s],
 * });
 * ```
 *
 * ## Import
 *
 * FoldersPolicyBinding can be imported using any of these accepted formats:
 *
 * * `folders/{{folder}}/locations/{{location}}/policyBindings/{{policy_binding_id}}`
 *
 * * `{{folder}}/{{location}}/{{policy_binding_id}}`
 *
 * When using the `pulumi import` command, FoldersPolicyBinding can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:iam/foldersPolicyBinding:FoldersPolicyBinding default folders/{{folder}}/locations/{{location}}/policyBindings/{{policy_binding_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:iam/foldersPolicyBinding:FoldersPolicyBinding default {{folder}}/{{location}}/{{policy_binding_id}}
 * ```
 */
export class FoldersPolicyBinding extends pulumi.CustomResource {
    /**
     * Get an existing FoldersPolicyBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FoldersPolicyBindingState, opts?: pulumi.CustomResourceOptions): FoldersPolicyBinding {
        return new FoldersPolicyBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:iam/foldersPolicyBinding:FoldersPolicyBinding';

    /**
     * Returns true if the given object is an instance of FoldersPolicyBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FoldersPolicyBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FoldersPolicyBinding.__pulumiType;
    }

    /**
     * Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size
     * limitations **Note**: This field is non-authoritative, and will only manage the annotations present in your
     * configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The
     * syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary
     * size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() <
     * 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\"
     * expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description:
     * \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type
     * != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string
     * with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and
     * functions that may be referenced within an expression are determined by the service that evaluates it. See the service
     * documentation for additional information.
     */
    public readonly condition!: pulumi.Output<outputs.iam.FoldersPolicyBindingCondition | undefined>;
    /**
     * Output only. The time when the policy binding was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. The description of the policy binding. Must be less than or equal to 63 characters.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * Optional. The etag for the policy binding. If this is provided on update, it must match the server's etag.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The parent folder for the PolicyBinding.
     */
    public readonly folder!: pulumi.Output<string>;
    /**
     * The location of the PolicyBinding.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
     */
    public readonly policy!: pulumi.Output<string>;
    /**
     * The Policy Binding ID.
     */
    public readonly policyBindingId!: pulumi.Output<string>;
    /**
     * Immutable. The kind of the policy to attach in this binding. This field must be one of the following: - Left empty (will
     * be automatically set to the policy kind) - The input policy kind Possible values: POLICY_KIND_UNSPECIFIED
     * PRINCIPAL_ACCESS_BOUNDARY ACCESS
     */
    public readonly policyKind!: pulumi.Output<string | undefined>;
    /**
     * Output only. The globally unique ID of the policy to be bound.
     */
    public /*out*/ readonly policyUid!: pulumi.Output<string>;
    /**
     * Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
     * Structure is documented below.
     */
    public readonly target!: pulumi.Output<outputs.iam.FoldersPolicyBindingTarget>;
    /**
     * Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Output only. The time when the policy binding was most recently updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a FoldersPolicyBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FoldersPolicyBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FoldersPolicyBindingArgs | FoldersPolicyBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FoldersPolicyBindingState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["policyBindingId"] = state ? state.policyBindingId : undefined;
            resourceInputs["policyKind"] = state ? state.policyKind : undefined;
            resourceInputs["policyUid"] = state ? state.policyUid : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as FoldersPolicyBindingArgs | undefined;
            if ((!args || args.folder === undefined) && !opts.urn) {
                throw new Error("Missing required property 'folder'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if ((!args || args.policyBindingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyBindingId'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["policyBindingId"] = args ? args.policyBindingId : undefined;
            resourceInputs["policyKind"] = args ? args.policyKind : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["policyUid"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FoldersPolicyBinding.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FoldersPolicyBinding resources.
 */
export interface FoldersPolicyBindingState {
    /**
     * Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size
     * limitations **Note**: This field is non-authoritative, and will only manage the annotations present in your
     * configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The
     * syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary
     * size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() <
     * 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\"
     * expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description:
     * \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type
     * != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string
     * with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and
     * functions that may be referenced within an expression are determined by the service that evaluates it. See the service
     * documentation for additional information.
     */
    condition?: pulumi.Input<inputs.iam.FoldersPolicyBindingCondition>;
    /**
     * Output only. The time when the policy binding was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. The description of the policy binding. Must be less than or equal to 63 characters.
     */
    displayName?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. The etag for the policy binding. If this is provided on update, it must match the server's etag.
     */
    etag?: pulumi.Input<string>;
    /**
     * The parent folder for the PolicyBinding.
     */
    folder?: pulumi.Input<string>;
    /**
     * The location of the PolicyBinding.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
     */
    name?: pulumi.Input<string>;
    /**
     * Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
     */
    policy?: pulumi.Input<string>;
    /**
     * The Policy Binding ID.
     */
    policyBindingId?: pulumi.Input<string>;
    /**
     * Immutable. The kind of the policy to attach in this binding. This field must be one of the following: - Left empty (will
     * be automatically set to the policy kind) - The input policy kind Possible values: POLICY_KIND_UNSPECIFIED
     * PRINCIPAL_ACCESS_BOUNDARY ACCESS
     */
    policyKind?: pulumi.Input<string>;
    /**
     * Output only. The globally unique ID of the policy to be bound.
     */
    policyUid?: pulumi.Input<string>;
    /**
     * Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
     * Structure is documented below.
     */
    target?: pulumi.Input<inputs.iam.FoldersPolicyBindingTarget>;
    /**
     * Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
     */
    uid?: pulumi.Input<string>;
    /**
     * Output only. The time when the policy binding was most recently updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FoldersPolicyBinding resource.
 */
export interface FoldersPolicyBindingArgs {
    /**
     * Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size
     * limitations **Note**: This field is non-authoritative, and will only manage the annotations present in your
     * configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The
     * syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary
     * size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() <
     * 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\"
     * expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description:
     * \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type
     * != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string
     * with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and
     * functions that may be referenced within an expression are determined by the service that evaluates it. See the service
     * documentation for additional information.
     */
    condition?: pulumi.Input<inputs.iam.FoldersPolicyBindingCondition>;
    /**
     * Optional. The description of the policy binding. Must be less than or equal to 63 characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The parent folder for the PolicyBinding.
     */
    folder: pulumi.Input<string>;
    /**
     * The location of the PolicyBinding.
     */
    location: pulumi.Input<string>;
    /**
     * Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
     */
    policy: pulumi.Input<string>;
    /**
     * The Policy Binding ID.
     */
    policyBindingId: pulumi.Input<string>;
    /**
     * Immutable. The kind of the policy to attach in this binding. This field must be one of the following: - Left empty (will
     * be automatically set to the policy kind) - The input policy kind Possible values: POLICY_KIND_UNSPECIFIED
     * PRINCIPAL_ACCESS_BOUNDARY ACCESS
     */
    policyKind?: pulumi.Input<string>;
    /**
     * Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
     * Structure is documented below.
     */
    target: pulumi.Input<inputs.iam.FoldersPolicyBindingTarget>;
}
