// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * CmekConfig represents configurations used to enable CMEK data encryption with
 * Cloud KMS keys.
 *
 * To get more information about CmekConfig, see:
 *
 * * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.cmekConfigs)
 *
 * ## Example Usage
 *
 * ### Discoveryengine Cmekconfig Default
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const cryptoKey = new gcp.kms.CryptoKeyIAMMember("crypto_key", {
 *     cryptoKeyId: "kms-key-name",
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-discoveryengine.iam.gserviceaccount.com`),
 * });
 * const _default = new gcp.discoveryengine.CmekConfig("default", {
 *     location: "us",
 *     cmekConfigId: "cmek-config-id",
 *     kmsKey: "kms-key-name",
 * }, {
 *     dependsOn: [cryptoKey],
 * });
 * ```
 *
 * ## Import
 *
 * CmekConfig can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/cmekConfigs/{{cmek_config_id}}`
 *
 * * `{{project}}/{{location}}/{{cmek_config_id}}`
 *
 * * `{{location}}/{{cmek_config_id}}`
 *
 * When using the `pulumi import` command, CmekConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/cmekConfig:CmekConfig default projects/{{project}}/locations/{{location}}/cmekConfigs/{{cmek_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/cmekConfig:CmekConfig default {{project}}/{{location}}/{{cmek_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/cmekConfig:CmekConfig default {{location}}/{{cmek_config_id}}
 * ```
 */
export class CmekConfig extends pulumi.CustomResource {
    /**
     * Get an existing CmekConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmekConfigState, opts?: pulumi.CustomResourceOptions): CmekConfig {
        return new CmekConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:discoveryengine/cmekConfig:CmekConfig';

    /**
     * Returns true if the given object is an instance of CmekConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmekConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmekConfig.__pulumiType;
    }

    /**
     * The unique id of the cmek config.
     */
    public readonly cmekConfigId!: pulumi.Output<string | undefined>;
    /**
     * The default CmekConfig for the Customer.
     */
    public /*out*/ readonly isDefault!: pulumi.Output<boolean>;
    /**
     * KMS key resource name which will be used to encrypt resources
     * `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
     */
    public readonly kmsKey!: pulumi.Output<string>;
    /**
     * KMS key version resource name which will be used to encrypt resources
     * `<kms_key>/cryptoKeyVersions/{keyVersion}`.
     */
    public /*out*/ readonly kmsKeyVersion!: pulumi.Output<string>;
    /**
     * The timestamp of the last key rotation.
     */
    public /*out*/ readonly lastRotationTimestampMicros!: pulumi.Output<number>;
    /**
     * The geographic location where the CMEK config should reside. The value can
     * only be one of "us" and "eu".
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The unique full resource name of the cmek config. Values are of the format
     * `projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Whether the NotebookLM Corpus is ready to be used.
     */
    public /*out*/ readonly notebooklmState!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Set the following CmekConfig as the default to be used for child resources
     * if one is not specified. The default value is true.
     */
    public readonly setDefault!: pulumi.Output<boolean | undefined>;
    /**
     * Single-regional CMEKs that are required for some VAIS features.
     * Structure is documented below.
     */
    public readonly singleRegionKeys!: pulumi.Output<outputs.discoveryengine.CmekConfigSingleRegionKey[] | undefined>;
    /**
     * The state of the CmekConfig.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a CmekConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CmekConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmekConfigArgs | CmekConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmekConfigState | undefined;
            resourceInputs["cmekConfigId"] = state ? state.cmekConfigId : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["kmsKey"] = state ? state.kmsKey : undefined;
            resourceInputs["kmsKeyVersion"] = state ? state.kmsKeyVersion : undefined;
            resourceInputs["lastRotationTimestampMicros"] = state ? state.lastRotationTimestampMicros : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notebooklmState"] = state ? state.notebooklmState : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["setDefault"] = state ? state.setDefault : undefined;
            resourceInputs["singleRegionKeys"] = state ? state.singleRegionKeys : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as CmekConfigArgs | undefined;
            if ((!args || args.kmsKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kmsKey'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["cmekConfigId"] = args ? args.cmekConfigId : undefined;
            resourceInputs["kmsKey"] = args ? args.kmsKey : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["setDefault"] = args ? args.setDefault : undefined;
            resourceInputs["singleRegionKeys"] = args ? args.singleRegionKeys : undefined;
            resourceInputs["isDefault"] = undefined /*out*/;
            resourceInputs["kmsKeyVersion"] = undefined /*out*/;
            resourceInputs["lastRotationTimestampMicros"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["notebooklmState"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CmekConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CmekConfig resources.
 */
export interface CmekConfigState {
    /**
     * The unique id of the cmek config.
     */
    cmekConfigId?: pulumi.Input<string>;
    /**
     * The default CmekConfig for the Customer.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * KMS key resource name which will be used to encrypt resources
     * `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
     */
    kmsKey?: pulumi.Input<string>;
    /**
     * KMS key version resource name which will be used to encrypt resources
     * `<kms_key>/cryptoKeyVersions/{keyVersion}`.
     */
    kmsKeyVersion?: pulumi.Input<string>;
    /**
     * The timestamp of the last key rotation.
     */
    lastRotationTimestampMicros?: pulumi.Input<number>;
    /**
     * The geographic location where the CMEK config should reside. The value can
     * only be one of "us" and "eu".
     */
    location?: pulumi.Input<string>;
    /**
     * The unique full resource name of the cmek config. Values are of the format
     * `projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the NotebookLM Corpus is ready to be used.
     */
    notebooklmState?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Set the following CmekConfig as the default to be used for child resources
     * if one is not specified. The default value is true.
     */
    setDefault?: pulumi.Input<boolean>;
    /**
     * Single-regional CMEKs that are required for some VAIS features.
     * Structure is documented below.
     */
    singleRegionKeys?: pulumi.Input<pulumi.Input<inputs.discoveryengine.CmekConfigSingleRegionKey>[]>;
    /**
     * The state of the CmekConfig.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CmekConfig resource.
 */
export interface CmekConfigArgs {
    /**
     * The unique id of the cmek config.
     */
    cmekConfigId?: pulumi.Input<string>;
    /**
     * KMS key resource name which will be used to encrypt resources
     * `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
     */
    kmsKey: pulumi.Input<string>;
    /**
     * The geographic location where the CMEK config should reside. The value can
     * only be one of "us" and "eu".
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Set the following CmekConfig as the default to be used for child resources
     * if one is not specified. The default value is true.
     */
    setDefault?: pulumi.Input<boolean>;
    /**
     * Single-regional CMEKs that are required for some VAIS features.
     * Structure is documented below.
     */
    singleRegionKeys?: pulumi.Input<pulumi.Input<inputs.discoveryengine.CmekConfigSingleRegionKey>[]>;
}
