// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Vertex AI Search recommendation apps.
 *
 * To get more information about RecommendationEngine, see:
 *
 * * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.engines)
 * * How-to Guides
 *     * [Create a Recommendation Engine](https://cloud.google.com/generative-ai-app-builder/docs/create-generic-recommendations-app)
 *
 * ## Example Usage
 *
 * ### Discoveryengine Recommendationengine Generic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const generic = new gcp.discoveryengine.DataStore("generic", {
 *     location: "global",
 *     dataStoreId: "recommendation-datastore-id",
 *     displayName: "tf-test-structured-datastore",
 *     industryVertical: "GENERIC",
 *     contentConfig: "NO_CONTENT",
 *     solutionTypes: ["SOLUTION_TYPE_RECOMMENDATION"],
 *     createAdvancedSiteSearch: false,
 *     skipDefaultSchemaCreation: false,
 * });
 * const genericRecommendationEngine = new gcp.discoveryengine.RecommendationEngine("generic", {
 *     engineId: "recommendation-engine-id",
 *     location: generic.location,
 *     displayName: "Example Recommendation Engine",
 *     dataStoreIds: [generic.dataStoreId],
 *     industryVertical: "GENERIC",
 *     commonConfig: {
 *         companyName: "test-company",
 *     },
 * });
 * ```
 * ### Discoveryengine Recommendationengine Media
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const media = new gcp.discoveryengine.DataStore("media", {
 *     location: "global",
 *     dataStoreId: "recommendation-datastore-id",
 *     displayName: "tf-test-structured-datastore",
 *     industryVertical: "MEDIA",
 *     contentConfig: "NO_CONTENT",
 *     solutionTypes: ["SOLUTION_TYPE_RECOMMENDATION"],
 *     createAdvancedSiteSearch: false,
 *     skipDefaultSchemaCreation: false,
 * });
 * const mediaRecommendationEngine = new gcp.discoveryengine.RecommendationEngine("media", {
 *     engineId: "recommendation-engine-id",
 *     location: media.location,
 *     displayName: "Example Media Recommendation Engine",
 *     dataStoreIds: [media.dataStoreId],
 *     industryVertical: "MEDIA",
 *     mediaRecommendationEngineConfig: {
 *         type: "recommended-for-you",
 *         optimizationObjective: "ctr",
 *         trainingState: "PAUSED",
 *         engineFeaturesConfig: {
 *             recommendedForYouConfig: {
 *                 contextEventType: "generic",
 *             },
 *         },
 *     },
 *     commonConfig: {
 *         companyName: "test-company",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * RecommendationEngine can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/collections/default_collection/engines/{{engine_id}}`
 *
 * * `{{project}}/{{location}}/{{engine_id}}`
 *
 * * `{{location}}/{{engine_id}}`
 *
 * When using the `pulumi import` command, RecommendationEngine can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/recommendationEngine:RecommendationEngine default projects/{{project}}/locations/{{location}}/collections/default_collection/engines/{{engine_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/recommendationEngine:RecommendationEngine default {{project}}/{{location}}/{{engine_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/recommendationEngine:RecommendationEngine default {{location}}/{{engine_id}}
 * ```
 */
export class RecommendationEngine extends pulumi.CustomResource {
    /**
     * Get an existing RecommendationEngine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecommendationEngineState, opts?: pulumi.CustomResourceOptions): RecommendationEngine {
        return new RecommendationEngine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:discoveryengine/recommendationEngine:RecommendationEngine';

    /**
     * Returns true if the given object is an instance of RecommendationEngine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecommendationEngine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecommendationEngine.__pulumiType;
    }

    /**
     * Common config spec that specifies the metadata of the engine.
     * Structure is documented below.
     */
    public readonly commonConfig!: pulumi.Output<outputs.discoveryengine.RecommendationEngineCommonConfig | undefined>;
    /**
     * Timestamp the Engine was created at.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The data stores associated with this engine. For SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store.
     */
    public readonly dataStoreIds!: pulumi.Output<string[]>;
    /**
     * Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Unique ID to use for Recommendation Engine.
     */
    public readonly engineId!: pulumi.Output<string>;
    /**
     * The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
     * Default value is `GENERIC`.
     * Possible values are: `GENERIC`, `MEDIA`.
     */
    public readonly industryVertical!: pulumi.Output<string | undefined>;
    /**
     * The geographic location where the data store should reside. The value can
     * only be one of "global", "us" and "eu".
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Configurations for a Media Recommendation Engine. Only applicable on the data stores
     * with SOLUTION_TYPE_RECOMMENDATION solution type and MEDIA industry vertical.
     * Structure is documented below.
     */
    public readonly mediaRecommendationEngineConfig!: pulumi.Output<outputs.discoveryengine.RecommendationEngineMediaRecommendationEngineConfig | undefined>;
    /**
     * The unique full resource name of the recommendation engine. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024 characters.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Timestamp the Engine was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a RecommendationEngine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecommendationEngineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecommendationEngineArgs | RecommendationEngineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecommendationEngineState | undefined;
            resourceInputs["commonConfig"] = state ? state.commonConfig : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dataStoreIds"] = state ? state.dataStoreIds : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["engineId"] = state ? state.engineId : undefined;
            resourceInputs["industryVertical"] = state ? state.industryVertical : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mediaRecommendationEngineConfig"] = state ? state.mediaRecommendationEngineConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as RecommendationEngineArgs | undefined;
            if ((!args || args.dataStoreIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataStoreIds'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.engineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["commonConfig"] = args ? args.commonConfig : undefined;
            resourceInputs["dataStoreIds"] = args ? args.dataStoreIds : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["engineId"] = args ? args.engineId : undefined;
            resourceInputs["industryVertical"] = args ? args.industryVertical : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mediaRecommendationEngineConfig"] = args ? args.mediaRecommendationEngineConfig : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecommendationEngine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RecommendationEngine resources.
 */
export interface RecommendationEngineState {
    /**
     * Common config spec that specifies the metadata of the engine.
     * Structure is documented below.
     */
    commonConfig?: pulumi.Input<inputs.discoveryengine.RecommendationEngineCommonConfig>;
    /**
     * Timestamp the Engine was created at.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The data stores associated with this engine. For SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store.
     */
    dataStoreIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Unique ID to use for Recommendation Engine.
     */
    engineId?: pulumi.Input<string>;
    /**
     * The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
     * Default value is `GENERIC`.
     * Possible values are: `GENERIC`, `MEDIA`.
     */
    industryVertical?: pulumi.Input<string>;
    /**
     * The geographic location where the data store should reside. The value can
     * only be one of "global", "us" and "eu".
     */
    location?: pulumi.Input<string>;
    /**
     * Configurations for a Media Recommendation Engine. Only applicable on the data stores
     * with SOLUTION_TYPE_RECOMMENDATION solution type and MEDIA industry vertical.
     * Structure is documented below.
     */
    mediaRecommendationEngineConfig?: pulumi.Input<inputs.discoveryengine.RecommendationEngineMediaRecommendationEngineConfig>;
    /**
     * The unique full resource name of the recommendation engine. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Timestamp the Engine was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RecommendationEngine resource.
 */
export interface RecommendationEngineArgs {
    /**
     * Common config spec that specifies the metadata of the engine.
     * Structure is documented below.
     */
    commonConfig?: pulumi.Input<inputs.discoveryengine.RecommendationEngineCommonConfig>;
    /**
     * The data stores associated with this engine. For SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store.
     */
    dataStoreIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
     */
    displayName: pulumi.Input<string>;
    /**
     * Unique ID to use for Recommendation Engine.
     */
    engineId: pulumi.Input<string>;
    /**
     * The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
     * Default value is `GENERIC`.
     * Possible values are: `GENERIC`, `MEDIA`.
     */
    industryVertical?: pulumi.Input<string>;
    /**
     * The geographic location where the data store should reside. The value can
     * only be one of "global", "us" and "eu".
     */
    location: pulumi.Input<string>;
    /**
     * Configurations for a Media Recommendation Engine. Only applicable on the data stores
     * with SOLUTION_TYPE_RECOMMENDATION solution type and MEDIA industry vertical.
     * Structure is documented below.
     */
    mediaRecommendationEngineConfig?: pulumi.Input<inputs.discoveryengine.RecommendationEngineMediaRecommendationEngineConfig>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
