// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Access Control Configuration.
 *
 * To get more information about AclConfig, see:
 *
 * * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rpc/google.cloud.discoveryengine.v1alpha#aclconfigservice)
 *
 * ## Example Usage
 *
 * ### Discoveryengine Aclconfig Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.discoveryengine.AclConfig("basic", {
 *     location: "global",
 *     idpConfig: {
 *         idpType: "THIRD_PARTY",
 *         externalIdpConfig: {
 *             workforcePoolName: "locations/global/workforcePools/cloud-console-pool-manual",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * AclConfig can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/aclConfig`
 *
 * * `{{project}}/{{location}}`
 *
 * * `{{location}}`
 *
 * When using the `pulumi import` command, AclConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/aclConfig:AclConfig default projects/{{project}}/locations/{{location}}/aclConfig
 * ```
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/aclConfig:AclConfig default {{project}}/{{location}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/aclConfig:AclConfig default {{location}}
 * ```
 */
export class AclConfig extends pulumi.CustomResource {
    /**
     * Get an existing AclConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclConfigState, opts?: pulumi.CustomResourceOptions): AclConfig {
        return new AclConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:discoveryengine/aclConfig:AclConfig';

    /**
     * Returns true if the given object is an instance of AclConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AclConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AclConfig.__pulumiType;
    }

    /**
     * Identity provider config.
     * Structure is documented below.
     */
    declare public readonly idpConfig: pulumi.Output<outputs.discoveryengine.AclConfigIdpConfig | undefined>;
    /**
     * The geographic location where the data store should reside. The value can
     * only be one of "global", "us" and "eu".
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The unique full resource name of the aclConfig. Values are of the format
     * `projects/{project}/locations/{location}/aclConfig`.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;

    /**
     * Create a AclConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclConfigArgs | AclConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclConfigState | undefined;
            resourceInputs["idpConfig"] = state?.idpConfig;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
        } else {
            const args = argsOrState as AclConfigArgs | undefined;
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["idpConfig"] = args?.idpConfig;
            resourceInputs["location"] = args?.location;
            resourceInputs["project"] = args?.project;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AclConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AclConfig resources.
 */
export interface AclConfigState {
    /**
     * Identity provider config.
     * Structure is documented below.
     */
    idpConfig?: pulumi.Input<inputs.discoveryengine.AclConfigIdpConfig>;
    /**
     * The geographic location where the data store should reside. The value can
     * only be one of "global", "us" and "eu".
     */
    location?: pulumi.Input<string>;
    /**
     * The unique full resource name of the aclConfig. Values are of the format
     * `projects/{project}/locations/{location}/aclConfig`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AclConfig resource.
 */
export interface AclConfigArgs {
    /**
     * Identity provider config.
     * Structure is documented below.
     */
    idpConfig?: pulumi.Input<inputs.discoveryengine.AclConfigIdpConfig>;
    /**
     * The geographic location where the data store should reside. The value can
     * only be one of "global", "us" and "eu".
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
