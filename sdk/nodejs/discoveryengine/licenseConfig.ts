// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * License Configuration.
 *
 * To get more information about LicenseConfig, see:
 *
 * * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.licenseConfigs)
 *
 * ## Example Usage
 *
 * ### Discoveryengine Licenseconfig Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.discoveryengine.LicenseConfig("basic", {
 *     location: "global",
 *     licenseConfigId: "license-config-id",
 *     licenseCount: 50,
 *     subscriptionTier: "SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT",
 *     startDate: {
 *         year: 2099,
 *         month: 1,
 *         day: 1,
 *     },
 *     endDate: {
 *         year: 2100,
 *         month: 1,
 *         day: 1,
 *     },
 *     subscriptionTerm: "SUBSCRIPTION_TERM_ONE_YEAR",
 * });
 * ```
 *
 * ## Import
 *
 * LicenseConfig can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/licenseConfigs/{{license_config_id}}`
 *
 * * `{{project}}/{{location}}/{{license_config_id}}`
 *
 * * `{{location}}/{{license_config_id}}`
 *
 * When using the `pulumi import` command, LicenseConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/licenseConfig:LicenseConfig default projects/{{project}}/locations/{{location}}/licenseConfigs/{{license_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/licenseConfig:LicenseConfig default {{project}}/{{location}}/{{license_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:discoveryengine/licenseConfig:LicenseConfig default {{location}}/{{license_config_id}}
 * ```
 */
export class LicenseConfig extends pulumi.CustomResource {
    /**
     * Get an existing LicenseConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicenseConfigState, opts?: pulumi.CustomResourceOptions): LicenseConfig {
        return new LicenseConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:discoveryengine/licenseConfig:LicenseConfig';

    /**
     * Returns true if the given object is an instance of LicenseConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicenseConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicenseConfig.__pulumiType;
    }

    /**
     * Whether the license config should be auto renewed when it reaches the end date.
     */
    declare public readonly autoRenew: pulumi.Output<boolean | undefined>;
    /**
     * The planned end date.
     * Structure is documented below.
     */
    declare public readonly endDate: pulumi.Output<outputs.discoveryengine.LicenseConfigEndDate | undefined>;
    /**
     * Whether the license config is for free trial.
     */
    declare public readonly freeTrial: pulumi.Output<boolean | undefined>;
    /**
     * The unique id of the license config.
     */
    declare public readonly licenseConfigId: pulumi.Output<string>;
    /**
     * Number of licenses purchased.
     */
    declare public readonly licenseCount: pulumi.Output<number>;
    /**
     * The geographic location where the data store should reside. The value can
     * only be one of "global", "us" and "eu".
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The unique full resource name of the license config. Values are of the format
     * `projects/{project}/locations/{location}/licenseConfigs/{license_config}`.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The start date.
     * Structure is documented below.
     */
    declare public readonly startDate: pulumi.Output<outputs.discoveryengine.LicenseConfigStartDate>;
    /**
     * Subscription term.
     * Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
     */
    declare public readonly subscriptionTerm: pulumi.Output<string>;
    /**
     * Subscription tier information for the license config.
     * Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
     */
    declare public readonly subscriptionTier: pulumi.Output<string>;

    /**
     * Create a LicenseConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicenseConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicenseConfigArgs | LicenseConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicenseConfigState | undefined;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["endDate"] = state?.endDate;
            resourceInputs["freeTrial"] = state?.freeTrial;
            resourceInputs["licenseConfigId"] = state?.licenseConfigId;
            resourceInputs["licenseCount"] = state?.licenseCount;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["startDate"] = state?.startDate;
            resourceInputs["subscriptionTerm"] = state?.subscriptionTerm;
            resourceInputs["subscriptionTier"] = state?.subscriptionTier;
        } else {
            const args = argsOrState as LicenseConfigArgs | undefined;
            if (args?.licenseConfigId === undefined && !opts.urn) {
                throw new Error("Missing required property 'licenseConfigId'");
            }
            if (args?.licenseCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'licenseCount'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.startDate === undefined && !opts.urn) {
                throw new Error("Missing required property 'startDate'");
            }
            if (args?.subscriptionTerm === undefined && !opts.urn) {
                throw new Error("Missing required property 'subscriptionTerm'");
            }
            if (args?.subscriptionTier === undefined && !opts.urn) {
                throw new Error("Missing required property 'subscriptionTier'");
            }
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["endDate"] = args?.endDate;
            resourceInputs["freeTrial"] = args?.freeTrial;
            resourceInputs["licenseConfigId"] = args?.licenseConfigId;
            resourceInputs["licenseCount"] = args?.licenseCount;
            resourceInputs["location"] = args?.location;
            resourceInputs["project"] = args?.project;
            resourceInputs["startDate"] = args?.startDate;
            resourceInputs["subscriptionTerm"] = args?.subscriptionTerm;
            resourceInputs["subscriptionTier"] = args?.subscriptionTier;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LicenseConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LicenseConfig resources.
 */
export interface LicenseConfigState {
    /**
     * Whether the license config should be auto renewed when it reaches the end date.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The planned end date.
     * Structure is documented below.
     */
    endDate?: pulumi.Input<inputs.discoveryengine.LicenseConfigEndDate>;
    /**
     * Whether the license config is for free trial.
     */
    freeTrial?: pulumi.Input<boolean>;
    /**
     * The unique id of the license config.
     */
    licenseConfigId?: pulumi.Input<string>;
    /**
     * Number of licenses purchased.
     */
    licenseCount?: pulumi.Input<number>;
    /**
     * The geographic location where the data store should reside. The value can
     * only be one of "global", "us" and "eu".
     */
    location?: pulumi.Input<string>;
    /**
     * The unique full resource name of the license config. Values are of the format
     * `projects/{project}/locations/{location}/licenseConfigs/{license_config}`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The start date.
     * Structure is documented below.
     */
    startDate?: pulumi.Input<inputs.discoveryengine.LicenseConfigStartDate>;
    /**
     * Subscription term.
     * Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
     */
    subscriptionTerm?: pulumi.Input<string>;
    /**
     * Subscription tier information for the license config.
     * Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
     */
    subscriptionTier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LicenseConfig resource.
 */
export interface LicenseConfigArgs {
    /**
     * Whether the license config should be auto renewed when it reaches the end date.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The planned end date.
     * Structure is documented below.
     */
    endDate?: pulumi.Input<inputs.discoveryengine.LicenseConfigEndDate>;
    /**
     * Whether the license config is for free trial.
     */
    freeTrial?: pulumi.Input<boolean>;
    /**
     * The unique id of the license config.
     */
    licenseConfigId: pulumi.Input<string>;
    /**
     * Number of licenses purchased.
     */
    licenseCount: pulumi.Input<number>;
    /**
     * The geographic location where the data store should reside. The value can
     * only be one of "global", "us" and "eu".
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The start date.
     * Structure is documented below.
     */
    startDate: pulumi.Input<inputs.discoveryengine.LicenseConfigStartDate>;
    /**
     * Subscription term.
     * Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
     */
    subscriptionTerm: pulumi.Input<string>;
    /**
     * Subscription tier information for the license config.
     * Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
     */
    subscriptionTier: pulumi.Input<string>;
}
