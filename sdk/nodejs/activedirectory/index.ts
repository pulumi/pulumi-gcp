// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { DomainTrustArgs, DomainTrustState } from "./domainTrust";
export type DomainTrust = import("./domainTrust").DomainTrust;
export const DomainTrust: typeof import("./domainTrust").DomainTrust = null as any;
utilities.lazyLoad(exports, ["DomainTrust"], () => require("./domainTrust"));

export { PeeringArgs, PeeringState } from "./peering";
export type Peering = import("./peering").Peering;
export const Peering: typeof import("./peering").Peering = null as any;
utilities.lazyLoad(exports, ["Peering"], () => require("./peering"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:activedirectory/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "gcp:activedirectory/domainTrust:DomainTrust":
                return new DomainTrust(name, <any>undefined, { urn })
            case "gcp:activedirectory/peering:Peering":
                return new Peering(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "activedirectory/domain", _module)
pulumi.runtime.registerResourceModule("gcp", "activedirectory/domainTrust", _module)
pulumi.runtime.registerResourceModule("gcp", "activedirectory/peering", _module)
