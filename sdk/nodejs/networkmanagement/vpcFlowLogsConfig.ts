// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * VPC Flow Logs Config is a resource that lets you configure Flow Logs for VPC, Interconnect attachments or VPN Tunnels.
 *
 * ## Example Usage
 *
 * ### Network Management Vpc Flow Logs Config Interconnect Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const network = new gcp.compute.Network("network", {name: "full-interconnect-test-network"});
 * const router = new gcp.compute.Router("router", {
 *     name: "full-interconnect-test-router",
 *     network: network.name,
 *     bgp: {
 *         asn: 16550,
 *     },
 * });
 * const attachment = new gcp.compute.InterconnectAttachment("attachment", {
 *     name: "full-interconnect-test-id",
 *     edgeAvailabilityDomain: "AVAILABILITY_DOMAIN_1",
 *     type: "PARTNER",
 *     router: router.id,
 *     mtu: "1500",
 * });
 * const interconnect_test = new gcp.networkmanagement.VpcFlowLogsConfig("interconnect-test", {
 *     vpcFlowLogsConfigId: "full-interconnect-test-id",
 *     location: "global",
 *     interconnectAttachment: pulumi.all([project, attachment.name]).apply(([project, name]) => `projects/${project.number}/regions/us-east4/interconnectAttachments/${name}`),
 *     state: "ENABLED",
 *     aggregationInterval: "INTERVAL_5_SEC",
 *     description: "VPC Flow Logs over a VPN Gateway.",
 *     flowSampling: 0.5,
 *     metadata: "INCLUDE_ALL_METADATA",
 * });
 * ```
 * ### Network Management Vpc Flow Logs Config Interconnect Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const network = new gcp.compute.Network("network", {name: "basic-interconnect-test-network"});
 * const router = new gcp.compute.Router("router", {
 *     name: "basic-interconnect-test-router",
 *     network: network.name,
 *     bgp: {
 *         asn: 16550,
 *     },
 * });
 * const attachment = new gcp.compute.InterconnectAttachment("attachment", {
 *     name: "basic-interconnect-test-id",
 *     edgeAvailabilityDomain: "AVAILABILITY_DOMAIN_1",
 *     type: "PARTNER",
 *     router: router.id,
 *     mtu: "1500",
 * });
 * const interconnect_test = new gcp.networkmanagement.VpcFlowLogsConfig("interconnect-test", {
 *     vpcFlowLogsConfigId: "basic-interconnect-test-id",
 *     location: "global",
 *     interconnectAttachment: pulumi.all([project, attachment.name]).apply(([project, name]) => `projects/${project.number}/regions/us-east4/interconnectAttachments/${name}`),
 * });
 * ```
 * ### Network Management Vpc Flow Logs Config Vpn Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const network = new gcp.compute.Network("network", {name: "basic-test-network"});
 * const targetGateway = new gcp.compute.VPNGateway("target_gateway", {
 *     name: "basic-test-gateway",
 *     network: network.id,
 * });
 * const vpnStaticIp = new gcp.compute.Address("vpn_static_ip", {name: "basic-test-address"});
 * const frEsp = new gcp.compute.ForwardingRule("fr_esp", {
 *     name: "basic-test-fresp",
 *     ipProtocol: "ESP",
 *     ipAddress: vpnStaticIp.address,
 *     target: targetGateway.id,
 * });
 * const frUdp500 = new gcp.compute.ForwardingRule("fr_udp500", {
 *     name: "basic-test-fr500",
 *     ipProtocol: "UDP",
 *     portRange: "500",
 *     ipAddress: vpnStaticIp.address,
 *     target: targetGateway.id,
 * });
 * const frUdp4500 = new gcp.compute.ForwardingRule("fr_udp4500", {
 *     name: "basic-test-fr4500",
 *     ipProtocol: "UDP",
 *     portRange: "4500",
 *     ipAddress: vpnStaticIp.address,
 *     target: targetGateway.id,
 * });
 * const tunnel = new gcp.compute.VPNTunnel("tunnel", {
 *     name: "basic-test-tunnel",
 *     peerIp: "15.0.0.120",
 *     sharedSecret: "a secret message",
 *     targetVpnGateway: targetGateway.id,
 * }, {
 *     dependsOn: [
 *         frEsp,
 *         frUdp500,
 *         frUdp4500,
 *     ],
 * });
 * const vpn_test = new gcp.networkmanagement.VpcFlowLogsConfig("vpn-test", {
 *     vpcFlowLogsConfigId: "basic-test-id",
 *     location: "global",
 *     vpnTunnel: pulumi.all([project, tunnel.name]).apply(([project, name]) => `projects/${project.number}/regions/us-central1/vpnTunnels/${name}`),
 * });
 * const route = new gcp.compute.Route("route", {
 *     name: "basic-test-route",
 *     network: network.name,
 *     destRange: "15.0.0.0/24",
 *     priority: 1000,
 *     nextHopVpnTunnel: tunnel.id,
 * });
 * ```
 * ### Network Management Vpc Flow Logs Config Vpn Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const network = new gcp.compute.Network("network", {name: "full-test-network"});
 * const targetGateway = new gcp.compute.VPNGateway("target_gateway", {
 *     name: "full-test-gateway",
 *     network: network.id,
 * });
 * const vpnStaticIp = new gcp.compute.Address("vpn_static_ip", {name: "full-test-address"});
 * const frEsp = new gcp.compute.ForwardingRule("fr_esp", {
 *     name: "full-test-fresp",
 *     ipProtocol: "ESP",
 *     ipAddress: vpnStaticIp.address,
 *     target: targetGateway.id,
 * });
 * const frUdp500 = new gcp.compute.ForwardingRule("fr_udp500", {
 *     name: "full-test-fr500",
 *     ipProtocol: "UDP",
 *     portRange: "500",
 *     ipAddress: vpnStaticIp.address,
 *     target: targetGateway.id,
 * });
 * const frUdp4500 = new gcp.compute.ForwardingRule("fr_udp4500", {
 *     name: "full-test-fr4500",
 *     ipProtocol: "UDP",
 *     portRange: "4500",
 *     ipAddress: vpnStaticIp.address,
 *     target: targetGateway.id,
 * });
 * const tunnel = new gcp.compute.VPNTunnel("tunnel", {
 *     name: "full-test-tunnel",
 *     peerIp: "15.0.0.120",
 *     sharedSecret: "a secret message",
 *     targetVpnGateway: targetGateway.id,
 * }, {
 *     dependsOn: [
 *         frEsp,
 *         frUdp500,
 *         frUdp4500,
 *     ],
 * });
 * const vpn_test = new gcp.networkmanagement.VpcFlowLogsConfig("vpn-test", {
 *     vpcFlowLogsConfigId: "full-test-id",
 *     location: "global",
 *     vpnTunnel: pulumi.all([project, tunnel.name]).apply(([project, name]) => `projects/${project.number}/regions/us-central1/vpnTunnels/${name}`),
 *     state: "ENABLED",
 *     aggregationInterval: "INTERVAL_5_SEC",
 *     description: "VPC Flow Logs over a VPN Gateway.",
 *     flowSampling: 0.5,
 *     metadata: "INCLUDE_ALL_METADATA",
 * });
 * const route = new gcp.compute.Route("route", {
 *     name: "full-test-route",
 *     network: network.name,
 *     destRange: "15.0.0.0/24",
 *     priority: 1000,
 *     nextHopVpnTunnel: tunnel.id,
 * });
 * ```
 *
 * ## Import
 *
 * VpcFlowLogsConfig can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs/{{vpc_flow_logs_config_id}}`
 *
 * * `{{project}}/{{location}}/{{vpc_flow_logs_config_id}}`
 *
 * * `{{location}}/{{vpc_flow_logs_config_id}}`
 *
 * When using the `pulumi import` command, VpcFlowLogsConfig can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig default projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs/{{vpc_flow_logs_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig default {{project}}/{{location}}/{{vpc_flow_logs_config_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig default {{location}}/{{vpc_flow_logs_config_id}}
 * ```
 */
export class VpcFlowLogsConfig extends pulumi.CustomResource {
    /**
     * Get an existing VpcFlowLogsConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcFlowLogsConfigState, opts?: pulumi.CustomResourceOptions): VpcFlowLogsConfig {
        return new VpcFlowLogsConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig';

    /**
     * Returns true if the given object is an instance of VpcFlowLogsConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcFlowLogsConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcFlowLogsConfig.__pulumiType;
    }

    /**
     * Optional. The aggregation interval for the logs. Default value is
     * INTERVAL_5_SEC.   Possible values:  AGGREGATION_INTERVAL_UNSPECIFIED INTERVAL_5_SEC INTERVAL_30_SEC INTERVAL_1_MIN INTERVAL_5_MIN INTERVAL_10_MIN INTERVAL_15_MIN"
     */
    public readonly aggregationInterval!: pulumi.Output<string>;
    /**
     * Output only. The time the config was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. The user-supplied description of the VPC Flow Logs configuration. Maximum
     * of 512 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Optional. Export filter used to define which VPC Flow Logs should be logged.
     */
    public readonly filterExpr!: pulumi.Output<string | undefined>;
    /**
     * Optional. The value of the field must be in (0, 1]. The sampling rate
     * of VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
     * sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs, use
     * the state field instead. Default value is 1.0.
     */
    public readonly flowSampling!: pulumi.Output<number>;
    /**
     * Traffic will be logged from the Interconnect Attachment. Format: projects/{project_id}/regions/{region}/interconnectAttachments/{name}
     */
    public readonly interconnectAttachment!: pulumi.Output<string | undefined>;
    /**
     * Optional. Resource labels to represent user-provided metadata.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource
     * within its parent collection as described in https://google.aip.dev/122. See documentation
     * for resource type `networkmanagement.googleapis.com/VpcFlowLogsConfig`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Optional. Configures whether all, none or a subset of metadata fields
     * should be added to the reported VPC flow logs. Default value is INCLUDE_ALL_METADATA.
     * Possible values:  METADATA_UNSPECIFIED INCLUDE_ALL_METADATA EXCLUDE_ALL_METADATA CUSTOM_METADATA
     */
    public readonly metadata!: pulumi.Output<string>;
    /**
     * Optional. Custom metadata fields to include in the reported VPC flow
     * logs. Can only be specified if \"metadata\" was set to CUSTOM_METADATA.
     */
    public readonly metadataFields!: pulumi.Output<string[] | undefined>;
    /**
     * Identifier. Unique name of the configuration using the form:     `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Optional. The state of the VPC Flow Log configuration. Default value
     * is ENABLED. When creating a new configuration, it must be enabled.   Possible
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Output only. The time the config was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Required. ID of the `VpcFlowLogsConfig`.
     */
    public readonly vpcFlowLogsConfigId!: pulumi.Output<string>;
    /**
     * Traffic will be logged from the VPN Tunnel. Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}
     */
    public readonly vpnTunnel!: pulumi.Output<string | undefined>;

    /**
     * Create a VpcFlowLogsConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcFlowLogsConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcFlowLogsConfigArgs | VpcFlowLogsConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcFlowLogsConfigState | undefined;
            resourceInputs["aggregationInterval"] = state ? state.aggregationInterval : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["filterExpr"] = state ? state.filterExpr : undefined;
            resourceInputs["flowSampling"] = state ? state.flowSampling : undefined;
            resourceInputs["interconnectAttachment"] = state ? state.interconnectAttachment : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataFields"] = state ? state.metadataFields : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vpcFlowLogsConfigId"] = state ? state.vpcFlowLogsConfigId : undefined;
            resourceInputs["vpnTunnel"] = state ? state.vpnTunnel : undefined;
        } else {
            const args = argsOrState as VpcFlowLogsConfigArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.vpcFlowLogsConfigId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcFlowLogsConfigId'");
            }
            resourceInputs["aggregationInterval"] = args ? args.aggregationInterval : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["filterExpr"] = args ? args.filterExpr : undefined;
            resourceInputs["flowSampling"] = args ? args.flowSampling : undefined;
            resourceInputs["interconnectAttachment"] = args ? args.interconnectAttachment : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataFields"] = args ? args.metadataFields : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["vpcFlowLogsConfigId"] = args ? args.vpcFlowLogsConfigId : undefined;
            resourceInputs["vpnTunnel"] = args ? args.vpnTunnel : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VpcFlowLogsConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcFlowLogsConfig resources.
 */
export interface VpcFlowLogsConfigState {
    /**
     * Optional. The aggregation interval for the logs. Default value is
     * INTERVAL_5_SEC.   Possible values:  AGGREGATION_INTERVAL_UNSPECIFIED INTERVAL_5_SEC INTERVAL_30_SEC INTERVAL_1_MIN INTERVAL_5_MIN INTERVAL_10_MIN INTERVAL_15_MIN"
     */
    aggregationInterval?: pulumi.Input<string>;
    /**
     * Output only. The time the config was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. The user-supplied description of the VPC Flow Logs configuration. Maximum
     * of 512 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. Export filter used to define which VPC Flow Logs should be logged.
     */
    filterExpr?: pulumi.Input<string>;
    /**
     * Optional. The value of the field must be in (0, 1]. The sampling rate
     * of VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
     * sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs, use
     * the state field instead. Default value is 1.0.
     */
    flowSampling?: pulumi.Input<number>;
    /**
     * Traffic will be logged from the Interconnect Attachment. Format: projects/{project_id}/regions/{region}/interconnectAttachments/{name}
     */
    interconnectAttachment?: pulumi.Input<string>;
    /**
     * Optional. Resource labels to represent user-provided metadata.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource
     * within its parent collection as described in https://google.aip.dev/122. See documentation
     * for resource type `networkmanagement.googleapis.com/VpcFlowLogsConfig`.
     */
    location?: pulumi.Input<string>;
    /**
     * Optional. Configures whether all, none or a subset of metadata fields
     * should be added to the reported VPC flow logs. Default value is INCLUDE_ALL_METADATA.
     * Possible values:  METADATA_UNSPECIFIED INCLUDE_ALL_METADATA EXCLUDE_ALL_METADATA CUSTOM_METADATA
     */
    metadata?: pulumi.Input<string>;
    /**
     * Optional. Custom metadata fields to include in the reported VPC flow
     * logs. Can only be specified if \"metadata\" was set to CUSTOM_METADATA.
     */
    metadataFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier. Unique name of the configuration using the form:     `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}`
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. The state of the VPC Flow Log configuration. Default value
     * is ENABLED. When creating a new configuration, it must be enabled.   Possible
     */
    state?: pulumi.Input<string>;
    /**
     * Output only. The time the config was updated.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Required. ID of the `VpcFlowLogsConfig`.
     */
    vpcFlowLogsConfigId?: pulumi.Input<string>;
    /**
     * Traffic will be logged from the VPN Tunnel. Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}
     */
    vpnTunnel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcFlowLogsConfig resource.
 */
export interface VpcFlowLogsConfigArgs {
    /**
     * Optional. The aggregation interval for the logs. Default value is
     * INTERVAL_5_SEC.   Possible values:  AGGREGATION_INTERVAL_UNSPECIFIED INTERVAL_5_SEC INTERVAL_30_SEC INTERVAL_1_MIN INTERVAL_5_MIN INTERVAL_10_MIN INTERVAL_15_MIN"
     */
    aggregationInterval?: pulumi.Input<string>;
    /**
     * Optional. The user-supplied description of the VPC Flow Logs configuration. Maximum
     * of 512 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. Export filter used to define which VPC Flow Logs should be logged.
     */
    filterExpr?: pulumi.Input<string>;
    /**
     * Optional. The value of the field must be in (0, 1]. The sampling rate
     * of VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
     * sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs, use
     * the state field instead. Default value is 1.0.
     */
    flowSampling?: pulumi.Input<number>;
    /**
     * Traffic will be logged from the Interconnect Attachment. Format: projects/{project_id}/regions/{region}/interconnectAttachments/{name}
     */
    interconnectAttachment?: pulumi.Input<string>;
    /**
     * Optional. Resource labels to represent user-provided metadata.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource ID segment making up resource `name`. It identifies the resource
     * within its parent collection as described in https://google.aip.dev/122. See documentation
     * for resource type `networkmanagement.googleapis.com/VpcFlowLogsConfig`.
     */
    location: pulumi.Input<string>;
    /**
     * Optional. Configures whether all, none or a subset of metadata fields
     * should be added to the reported VPC flow logs. Default value is INCLUDE_ALL_METADATA.
     * Possible values:  METADATA_UNSPECIFIED INCLUDE_ALL_METADATA EXCLUDE_ALL_METADATA CUSTOM_METADATA
     */
    metadata?: pulumi.Input<string>;
    /**
     * Optional. Custom metadata fields to include in the reported VPC flow
     * logs. Can only be specified if \"metadata\" was set to CUSTOM_METADATA.
     */
    metadataFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Optional. The state of the VPC Flow Log configuration. Default value
     * is ENABLED. When creating a new configuration, it must be enabled.   Possible
     */
    state?: pulumi.Input<string>;
    /**
     * Required. ID of the `VpcFlowLogsConfig`.
     */
    vpcFlowLogsConfigId: pulumi.Input<string>;
    /**
     * Traffic will be logged from the VPN Tunnel. Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}
     */
    vpnTunnel?: pulumi.Input<string>;
}
