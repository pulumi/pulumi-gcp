// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * !> This datasource triggers side effects on the target resource. It will take a long time to refresh (i.e. `pulumi preview` will take much longer than usual) and may modify the state of the parent resource or other copies of the resource copying the same parent.
 *
 * A connectivity test is a static analysis of your resource configurations
 * that enables you to evaluate connectivity to and from Google Cloud
 * resources in your Virtual Private Cloud (VPC) network. This data source allows
 * you to trigger a rerun operation on a connectivity test and return the results.
 *
 * To get more information about connectivity tests, see:
 *
 * * [API documentation](https://cloud.google.com/network-intelligence-center/docs/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests/rerun)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
 *
 * ## Example Usage
 *
 * ### Network Management Connectivity Test Run Instances
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const vpc = new gcp.compute.Network("vpc", {name: "conn-test-net"});
 * const debian9 = gcp.compute.getImage({
 *     family: "debian-11",
 *     project: "debian-cloud",
 * });
 * const source = new gcp.compute.Instance("source", {
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: vpc.id,
 *     }],
 *     name: "source-vm",
 *     machineType: "e2-medium",
 *     bootDisk: {
 *         initializeParams: {
 *             image: debian9.then(debian9 => debian9.id),
 *         },
 *     },
 * });
 * const destination = new gcp.compute.Instance("destination", {
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: vpc.id,
 *     }],
 *     name: "dest-vm",
 *     machineType: "e2-medium",
 *     bootDisk: {
 *         initializeParams: {
 *             image: debian9.then(debian9 => debian9.id),
 *         },
 *     },
 * });
 * const instance_test = new gcp.networkmanagement.ConnectivityTest("instance-test", {
 *     name: "conn-test-instances",
 *     source: {
 *         instance: source.id,
 *     },
 *     destination: {
 *         instance: destination.id,
 *     },
 *     protocol: "TCP",
 *     labels: {
 *         env: "test",
 *     },
 * });
 * const instance_test_run = gcp.networkmanagement.getConnectivityTestRunOutput({
 *     name: instance_test.name,
 * });
 * ```
 */
export function getConnectivityTestRun(args: GetConnectivityTestRunArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectivityTestRunResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:networkmanagement/getConnectivityTestRun:getConnectivityTestRun", {
        "name": args.name,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectivityTestRun.
 */
export interface GetConnectivityTestRunArgs {
    /**
     * Unique name for the connectivity test.
     *
     *
     * - - -
     */
    name: string;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: string;
}

/**
 * A collection of values returned by getConnectivityTestRun.
 */
export interface GetConnectivityTestRunResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly project: string;
    /**
     * Connectivity test reachability details.
     * Structure is documented below.
     */
    readonly reachabilityDetails: outputs.networkmanagement.GetConnectivityTestRunReachabilityDetail[];
}
/**
 * !> This datasource triggers side effects on the target resource. It will take a long time to refresh (i.e. `pulumi preview` will take much longer than usual) and may modify the state of the parent resource or other copies of the resource copying the same parent.
 *
 * A connectivity test is a static analysis of your resource configurations
 * that enables you to evaluate connectivity to and from Google Cloud
 * resources in your Virtual Private Cloud (VPC) network. This data source allows
 * you to trigger a rerun operation on a connectivity test and return the results.
 *
 * To get more information about connectivity tests, see:
 *
 * * [API documentation](https://cloud.google.com/network-intelligence-center/docs/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests/rerun)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
 *
 * ## Example Usage
 *
 * ### Network Management Connectivity Test Run Instances
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const vpc = new gcp.compute.Network("vpc", {name: "conn-test-net"});
 * const debian9 = gcp.compute.getImage({
 *     family: "debian-11",
 *     project: "debian-cloud",
 * });
 * const source = new gcp.compute.Instance("source", {
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: vpc.id,
 *     }],
 *     name: "source-vm",
 *     machineType: "e2-medium",
 *     bootDisk: {
 *         initializeParams: {
 *             image: debian9.then(debian9 => debian9.id),
 *         },
 *     },
 * });
 * const destination = new gcp.compute.Instance("destination", {
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: vpc.id,
 *     }],
 *     name: "dest-vm",
 *     machineType: "e2-medium",
 *     bootDisk: {
 *         initializeParams: {
 *             image: debian9.then(debian9 => debian9.id),
 *         },
 *     },
 * });
 * const instance_test = new gcp.networkmanagement.ConnectivityTest("instance-test", {
 *     name: "conn-test-instances",
 *     source: {
 *         instance: source.id,
 *     },
 *     destination: {
 *         instance: destination.id,
 *     },
 *     protocol: "TCP",
 *     labels: {
 *         env: "test",
 *     },
 * });
 * const instance_test_run = gcp.networkmanagement.getConnectivityTestRunOutput({
 *     name: instance_test.name,
 * });
 * ```
 */
export function getConnectivityTestRunOutput(args: GetConnectivityTestRunOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetConnectivityTestRunResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:networkmanagement/getConnectivityTestRun:getConnectivityTestRun", {
        "name": args.name,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectivityTestRun.
 */
export interface GetConnectivityTestRunOutputArgs {
    /**
     * Unique name for the connectivity test.
     *
     *
     * - - -
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
