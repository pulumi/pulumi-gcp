// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConsentStoreArgs, ConsentStoreState } from "./consentStore";
export type ConsentStore = import("./consentStore").ConsentStore;
export const ConsentStore: typeof import("./consentStore").ConsentStore = null as any;
utilities.lazyLoad(exports, ["ConsentStore"], () => require("./consentStore"));

export { ConsentStoreIamBindingArgs, ConsentStoreIamBindingState } from "./consentStoreIamBinding";
export type ConsentStoreIamBinding = import("./consentStoreIamBinding").ConsentStoreIamBinding;
export const ConsentStoreIamBinding: typeof import("./consentStoreIamBinding").ConsentStoreIamBinding = null as any;
utilities.lazyLoad(exports, ["ConsentStoreIamBinding"], () => require("./consentStoreIamBinding"));

export { ConsentStoreIamMemberArgs, ConsentStoreIamMemberState } from "./consentStoreIamMember";
export type ConsentStoreIamMember = import("./consentStoreIamMember").ConsentStoreIamMember;
export const ConsentStoreIamMember: typeof import("./consentStoreIamMember").ConsentStoreIamMember = null as any;
utilities.lazyLoad(exports, ["ConsentStoreIamMember"], () => require("./consentStoreIamMember"));

export { ConsentStoreIamPolicyArgs, ConsentStoreIamPolicyState } from "./consentStoreIamPolicy";
export type ConsentStoreIamPolicy = import("./consentStoreIamPolicy").ConsentStoreIamPolicy;
export const ConsentStoreIamPolicy: typeof import("./consentStoreIamPolicy").ConsentStoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["ConsentStoreIamPolicy"], () => require("./consentStoreIamPolicy"));

export { DatasetArgs, DatasetState } from "./dataset";
export type Dataset = import("./dataset").Dataset;
export const Dataset: typeof import("./dataset").Dataset = null as any;
utilities.lazyLoad(exports, ["Dataset"], () => require("./dataset"));

export { DatasetIamBindingArgs, DatasetIamBindingState } from "./datasetIamBinding";
export type DatasetIamBinding = import("./datasetIamBinding").DatasetIamBinding;
export const DatasetIamBinding: typeof import("./datasetIamBinding").DatasetIamBinding = null as any;
utilities.lazyLoad(exports, ["DatasetIamBinding"], () => require("./datasetIamBinding"));

export { DatasetIamMemberArgs, DatasetIamMemberState } from "./datasetIamMember";
export type DatasetIamMember = import("./datasetIamMember").DatasetIamMember;
export const DatasetIamMember: typeof import("./datasetIamMember").DatasetIamMember = null as any;
utilities.lazyLoad(exports, ["DatasetIamMember"], () => require("./datasetIamMember"));

export { DatasetIamPolicyArgs, DatasetIamPolicyState } from "./datasetIamPolicy";
export type DatasetIamPolicy = import("./datasetIamPolicy").DatasetIamPolicy;
export const DatasetIamPolicy: typeof import("./datasetIamPolicy").DatasetIamPolicy = null as any;
utilities.lazyLoad(exports, ["DatasetIamPolicy"], () => require("./datasetIamPolicy"));

export { DicomStoreArgs, DicomStoreState } from "./dicomStore";
export type DicomStore = import("./dicomStore").DicomStore;
export const DicomStore: typeof import("./dicomStore").DicomStore = null as any;
utilities.lazyLoad(exports, ["DicomStore"], () => require("./dicomStore"));

export { DicomStoreIamBindingArgs, DicomStoreIamBindingState } from "./dicomStoreIamBinding";
export type DicomStoreIamBinding = import("./dicomStoreIamBinding").DicomStoreIamBinding;
export const DicomStoreIamBinding: typeof import("./dicomStoreIamBinding").DicomStoreIamBinding = null as any;
utilities.lazyLoad(exports, ["DicomStoreIamBinding"], () => require("./dicomStoreIamBinding"));

export { DicomStoreIamMemberArgs, DicomStoreIamMemberState } from "./dicomStoreIamMember";
export type DicomStoreIamMember = import("./dicomStoreIamMember").DicomStoreIamMember;
export const DicomStoreIamMember: typeof import("./dicomStoreIamMember").DicomStoreIamMember = null as any;
utilities.lazyLoad(exports, ["DicomStoreIamMember"], () => require("./dicomStoreIamMember"));

export { DicomStoreIamPolicyArgs, DicomStoreIamPolicyState } from "./dicomStoreIamPolicy";
export type DicomStoreIamPolicy = import("./dicomStoreIamPolicy").DicomStoreIamPolicy;
export const DicomStoreIamPolicy: typeof import("./dicomStoreIamPolicy").DicomStoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["DicomStoreIamPolicy"], () => require("./dicomStoreIamPolicy"));

export { FhirStoreArgs, FhirStoreState } from "./fhirStore";
export type FhirStore = import("./fhirStore").FhirStore;
export const FhirStore: typeof import("./fhirStore").FhirStore = null as any;
utilities.lazyLoad(exports, ["FhirStore"], () => require("./fhirStore"));

export { FhirStoreIamBindingArgs, FhirStoreIamBindingState } from "./fhirStoreIamBinding";
export type FhirStoreIamBinding = import("./fhirStoreIamBinding").FhirStoreIamBinding;
export const FhirStoreIamBinding: typeof import("./fhirStoreIamBinding").FhirStoreIamBinding = null as any;
utilities.lazyLoad(exports, ["FhirStoreIamBinding"], () => require("./fhirStoreIamBinding"));

export { FhirStoreIamMemberArgs, FhirStoreIamMemberState } from "./fhirStoreIamMember";
export type FhirStoreIamMember = import("./fhirStoreIamMember").FhirStoreIamMember;
export const FhirStoreIamMember: typeof import("./fhirStoreIamMember").FhirStoreIamMember = null as any;
utilities.lazyLoad(exports, ["FhirStoreIamMember"], () => require("./fhirStoreIamMember"));

export { FhirStoreIamPolicyArgs, FhirStoreIamPolicyState } from "./fhirStoreIamPolicy";
export type FhirStoreIamPolicy = import("./fhirStoreIamPolicy").FhirStoreIamPolicy;
export const FhirStoreIamPolicy: typeof import("./fhirStoreIamPolicy").FhirStoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["FhirStoreIamPolicy"], () => require("./fhirStoreIamPolicy"));

export { Hl7StoreArgs, Hl7StoreState } from "./hl7Store";
export type Hl7Store = import("./hl7Store").Hl7Store;
export const Hl7Store: typeof import("./hl7Store").Hl7Store = null as any;
utilities.lazyLoad(exports, ["Hl7Store"], () => require("./hl7Store"));

export { Hl7StoreIamBindingArgs, Hl7StoreIamBindingState } from "./hl7StoreIamBinding";
export type Hl7StoreIamBinding = import("./hl7StoreIamBinding").Hl7StoreIamBinding;
export const Hl7StoreIamBinding: typeof import("./hl7StoreIamBinding").Hl7StoreIamBinding = null as any;
utilities.lazyLoad(exports, ["Hl7StoreIamBinding"], () => require("./hl7StoreIamBinding"));

export { Hl7StoreIamMemberArgs, Hl7StoreIamMemberState } from "./hl7StoreIamMember";
export type Hl7StoreIamMember = import("./hl7StoreIamMember").Hl7StoreIamMember;
export const Hl7StoreIamMember: typeof import("./hl7StoreIamMember").Hl7StoreIamMember = null as any;
utilities.lazyLoad(exports, ["Hl7StoreIamMember"], () => require("./hl7StoreIamMember"));

export { Hl7StoreIamPolicyArgs, Hl7StoreIamPolicyState } from "./hl7StoreIamPolicy";
export type Hl7StoreIamPolicy = import("./hl7StoreIamPolicy").Hl7StoreIamPolicy;
export const Hl7StoreIamPolicy: typeof import("./hl7StoreIamPolicy").Hl7StoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["Hl7StoreIamPolicy"], () => require("./hl7StoreIamPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:healthcare/consentStore:ConsentStore":
                return new ConsentStore(name, <any>undefined, { urn })
            case "gcp:healthcare/consentStoreIamBinding:ConsentStoreIamBinding":
                return new ConsentStoreIamBinding(name, <any>undefined, { urn })
            case "gcp:healthcare/consentStoreIamMember:ConsentStoreIamMember":
                return new ConsentStoreIamMember(name, <any>undefined, { urn })
            case "gcp:healthcare/consentStoreIamPolicy:ConsentStoreIamPolicy":
                return new ConsentStoreIamPolicy(name, <any>undefined, { urn })
            case "gcp:healthcare/dataset:Dataset":
                return new Dataset(name, <any>undefined, { urn })
            case "gcp:healthcare/datasetIamBinding:DatasetIamBinding":
                return new DatasetIamBinding(name, <any>undefined, { urn })
            case "gcp:healthcare/datasetIamMember:DatasetIamMember":
                return new DatasetIamMember(name, <any>undefined, { urn })
            case "gcp:healthcare/datasetIamPolicy:DatasetIamPolicy":
                return new DatasetIamPolicy(name, <any>undefined, { urn })
            case "gcp:healthcare/dicomStore:DicomStore":
                return new DicomStore(name, <any>undefined, { urn })
            case "gcp:healthcare/dicomStoreIamBinding:DicomStoreIamBinding":
                return new DicomStoreIamBinding(name, <any>undefined, { urn })
            case "gcp:healthcare/dicomStoreIamMember:DicomStoreIamMember":
                return new DicomStoreIamMember(name, <any>undefined, { urn })
            case "gcp:healthcare/dicomStoreIamPolicy:DicomStoreIamPolicy":
                return new DicomStoreIamPolicy(name, <any>undefined, { urn })
            case "gcp:healthcare/fhirStore:FhirStore":
                return new FhirStore(name, <any>undefined, { urn })
            case "gcp:healthcare/fhirStoreIamBinding:FhirStoreIamBinding":
                return new FhirStoreIamBinding(name, <any>undefined, { urn })
            case "gcp:healthcare/fhirStoreIamMember:FhirStoreIamMember":
                return new FhirStoreIamMember(name, <any>undefined, { urn })
            case "gcp:healthcare/fhirStoreIamPolicy:FhirStoreIamPolicy":
                return new FhirStoreIamPolicy(name, <any>undefined, { urn })
            case "gcp:healthcare/hl7Store:Hl7Store":
                return new Hl7Store(name, <any>undefined, { urn })
            case "gcp:healthcare/hl7StoreIamBinding:Hl7StoreIamBinding":
                return new Hl7StoreIamBinding(name, <any>undefined, { urn })
            case "gcp:healthcare/hl7StoreIamMember:Hl7StoreIamMember":
                return new Hl7StoreIamMember(name, <any>undefined, { urn })
            case "gcp:healthcare/hl7StoreIamPolicy:Hl7StoreIamPolicy":
                return new Hl7StoreIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "healthcare/consentStore", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/consentStoreIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/consentStoreIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/consentStoreIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/dataset", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/datasetIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/datasetIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/datasetIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/dicomStore", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/dicomStoreIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/dicomStoreIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/dicomStoreIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/fhirStore", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/fhirStoreIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/fhirStoreIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/fhirStoreIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/hl7Store", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/hl7StoreIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/hl7StoreIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "healthcare/hl7StoreIamPolicy", _module)
