// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * PipelineJobs are Long Running Operations on Healthcare API to Map or Reconcile
 * incoming data into FHIR format
 *
 * To get more information about PipelineJob, see:
 *
 * * [API documentation](https://cloud.google.com/healthcare-api/healthcare-data-engine/docs/reference/rest/v1/projects.locations.datasets.pipelineJobs)
 * * How-to Guides
 *     * [Creating a PipelineJob](https://cloud.google.com/healthcare-api/private/healthcare-data-engine/docs/reference/rest/v1/projects.locations.datasets.pipelineJobs#PipelineJob)
 *
 * ## Example Usage
 *
 * ### Healthcare Pipeline Job Reconciliation
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const dataset = new gcp.healthcare.Dataset("dataset", {
 *     name: "example_dataset",
 *     location: "us-central1",
 * });
 * const fhirstore = new gcp.healthcare.FhirStore("fhirstore", {
 *     name: "fhir_store",
 *     dataset: dataset.id,
 *     version: "R4",
 *     enableUpdateCreate: true,
 *     disableReferentialIntegrity: true,
 * });
 * const bucket = new gcp.storage.Bucket("bucket", {
 *     name: "example_bucket_name",
 *     location: "us-central1",
 *     uniformBucketLevelAccess: true,
 * });
 * const mergeFile = new gcp.storage.BucketObject("merge_file", {
 *     name: "merge.wstl",
 *     content: " ",
 *     bucket: bucket.name,
 * });
 * const example_pipeline = new gcp.healthcare.PipelineJob("example-pipeline", {
 *     name: "example_pipeline_job",
 *     location: "us-central1",
 *     dataset: dataset.id,
 *     disableLineage: true,
 *     reconciliationPipelineJob: {
 *         mergeConfig: {
 *             description: "sample description for reconciliation rules",
 *             whistleConfigSource: {
 *                 uri: pulumi.interpolate`gs://${bucket.name}/${mergeFile.name}`,
 *                 importUriPrefix: pulumi.interpolate`gs://${bucket.name}`,
 *             },
 *         },
 *         matchingUriPrefix: pulumi.interpolate`gs://${bucket.name}`,
 *         fhirStoreDestination: pulumi.interpolate`${dataset.id}/fhirStores/${fhirstore.name}`,
 *     },
 * });
 * const hsa = new gcp.storage.BucketIAMMember("hsa", {
 *     bucket: bucket.name,
 *     role: "roles/storage.objectUser",
 *     member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-healthcare.iam.gserviceaccount.com`),
 * });
 * ```
 * ### Healthcare Pipeline Job Backfill
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const dataset = new gcp.healthcare.Dataset("dataset", {
 *     name: "example_dataset",
 *     location: "us-central1",
 * });
 * const example_pipeline = new gcp.healthcare.PipelineJob("example-pipeline", {
 *     name: "example_backfill_pipeline",
 *     location: "us-central1",
 *     dataset: dataset.id,
 *     backfillPipelineJob: {
 *         mappingPipelineJob: pulumi.interpolate`${dataset.id}/pipelineJobs/example_mapping_pipeline_job`,
 *     },
 * });
 * ```
 * ### Healthcare Pipeline Job Whistle Mapping
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const dataset = new gcp.healthcare.Dataset("dataset", {
 *     name: "example_dataset",
 *     location: "us-central1",
 * });
 * const sourceFhirstore = new gcp.healthcare.FhirStore("source_fhirstore", {
 *     name: "source_fhir_store",
 *     dataset: dataset.id,
 *     version: "R4",
 *     enableUpdateCreate: true,
 *     disableReferentialIntegrity: true,
 * });
 * const destFhirstore = new gcp.healthcare.FhirStore("dest_fhirstore", {
 *     name: "dest_fhir_store",
 *     dataset: dataset.id,
 *     version: "R4",
 *     enableUpdateCreate: true,
 *     disableReferentialIntegrity: true,
 * });
 * const bucket = new gcp.storage.Bucket("bucket", {
 *     name: "example_bucket_name",
 *     location: "us-central1",
 *     uniformBucketLevelAccess: true,
 * });
 * const mappingFile = new gcp.storage.BucketObject("mapping_file", {
 *     name: "mapping.wstl",
 *     content: " ",
 *     bucket: bucket.name,
 * });
 * const example_mapping_pipeline = new gcp.healthcare.PipelineJob("example-mapping-pipeline", {
 *     name: "example_mapping_pipeline_job",
 *     location: "us-central1",
 *     dataset: dataset.id,
 *     disableLineage: true,
 *     labels: {
 *         example_label_key: "example_label_value",
 *     },
 *     mappingPipelineJob: {
 *         mappingConfig: {
 *             whistleConfigSource: {
 *                 uri: pulumi.interpolate`gs://${bucket.name}/${mappingFile.name}`,
 *                 importUriPrefix: pulumi.interpolate`gs://${bucket.name}`,
 *             },
 *             description: "example description for mapping configuration",
 *         },
 *         fhirStreamingSource: {
 *             fhirStore: pulumi.interpolate`${dataset.id}/fhirStores/${sourceFhirstore.name}`,
 *             description: "example description for streaming fhirstore",
 *         },
 *         fhirStoreDestination: pulumi.interpolate`${dataset.id}/fhirStores/${destFhirstore.name}`,
 *     },
 * });
 * const hsa = new gcp.storage.BucketIAMMember("hsa", {
 *     bucket: bucket.name,
 *     role: "roles/storage.objectUser",
 *     member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-healthcare.iam.gserviceaccount.com`),
 * });
 * ```
 * ### Healthcare Pipeline Job Mapping Recon Dest
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const dataset = new gcp.healthcare.Dataset("dataset", {
 *     name: "example_dataset",
 *     location: "us-central1",
 * });
 * const destFhirstore = new gcp.healthcare.FhirStore("dest_fhirstore", {
 *     name: "dest_fhir_store",
 *     dataset: dataset.id,
 *     version: "R4",
 *     enableUpdateCreate: true,
 *     disableReferentialIntegrity: true,
 * });
 * const bucket = new gcp.storage.Bucket("bucket", {
 *     name: "example_bucket_name",
 *     location: "us-central1",
 *     uniformBucketLevelAccess: true,
 * });
 * const mergeFile = new gcp.storage.BucketObject("merge_file", {
 *     name: "merge.wstl",
 *     content: " ",
 *     bucket: bucket.name,
 * });
 * const recon = new gcp.healthcare.PipelineJob("recon", {
 *     name: "example_recon_pipeline_job",
 *     location: "us-central1",
 *     dataset: dataset.id,
 *     disableLineage: true,
 *     reconciliationPipelineJob: {
 *         mergeConfig: {
 *             description: "sample description for reconciliation rules",
 *             whistleConfigSource: {
 *                 uri: pulumi.interpolate`gs://${bucket.name}/${mergeFile.name}`,
 *                 importUriPrefix: pulumi.interpolate`gs://${bucket.name}`,
 *             },
 *         },
 *         matchingUriPrefix: pulumi.interpolate`gs://${bucket.name}`,
 *         fhirStoreDestination: pulumi.interpolate`${dataset.id}/fhirStores/${destFhirstore.name}`,
 *     },
 * });
 * const sourceFhirstore = new gcp.healthcare.FhirStore("source_fhirstore", {
 *     name: "source_fhir_store",
 *     dataset: dataset.id,
 *     version: "R4",
 *     enableUpdateCreate: true,
 *     disableReferentialIntegrity: true,
 * });
 * const mappingFile = new gcp.storage.BucketObject("mapping_file", {
 *     name: "mapping.wstl",
 *     content: " ",
 *     bucket: bucket.name,
 * });
 * const example_mapping_pipeline = new gcp.healthcare.PipelineJob("example-mapping-pipeline", {
 *     name: "example_mapping_pipeline_job",
 *     location: "us-central1",
 *     dataset: dataset.id,
 *     disableLineage: true,
 *     labels: {
 *         example_label_key: "example_label_value",
 *     },
 *     mappingPipelineJob: {
 *         mappingConfig: {
 *             whistleConfigSource: {
 *                 uri: pulumi.interpolate`gs://${bucket.name}/${mappingFile.name}`,
 *                 importUriPrefix: pulumi.interpolate`gs://${bucket.name}`,
 *             },
 *             description: "example description for mapping configuration",
 *         },
 *         fhirStreamingSource: {
 *             fhirStore: pulumi.interpolate`${dataset.id}/fhirStores/${sourceFhirstore.name}`,
 *             description: "example description for streaming fhirstore",
 *         },
 *         reconciliationDestination: true,
 *     },
 * }, {
 *     dependsOn: [recon],
 * });
 * const hsa = new gcp.storage.BucketIAMMember("hsa", {
 *     bucket: bucket.name,
 *     role: "roles/storage.objectUser",
 *     member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-healthcare.iam.gserviceaccount.com`),
 * });
 * ```
 *
 * ## Import
 *
 * PipelineJob can be imported using any of these accepted formats:
 *
 * * `{{dataset}}/pipelineJobs/{{name}}`
 *
 * * `{{dataset}}/pipelineJobs?pipelineJobId={{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, PipelineJob can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:healthcare/pipelineJob:PipelineJob default {{dataset}}/pipelineJobs/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:healthcare/pipelineJob:PipelineJob default {{dataset}}/pipelineJobs?pipelineJobId={{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:healthcare/pipelineJob:PipelineJob default {{name}}
 * ```
 */
export class PipelineJob extends pulumi.CustomResource {
    /**
     * Get an existing PipelineJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PipelineJobState, opts?: pulumi.CustomResourceOptions): PipelineJob {
        return new PipelineJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:healthcare/pipelineJob:PipelineJob';

    /**
     * Returns true if the given object is an instance of PipelineJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PipelineJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PipelineJob.__pulumiType;
    }

    /**
     * Specifies the backfill configuration.
     * Structure is documented below.
     */
    declare public readonly backfillPipelineJob: pulumi.Output<outputs.healthcare.PipelineJobBackfillPipelineJob | undefined>;
    /**
     * Healthcare Dataset under which the Pipeline Job is to run
     */
    declare public readonly dataset: pulumi.Output<string>;
    /**
     * If true, disables writing lineage for the pipeline.
     */
    declare public readonly disableLineage: pulumi.Output<boolean | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * User-supplied key-value pairs used to organize Pipeline Jobs.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
     * maximum 128 bytes, and must conform to the following PCRE regular expression:
     * [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values are optional, must be between 1 and 63 characters long, have a
     * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
     * regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
     * No more than 64 labels can be associated with a given pipeline.
     * An object containing a list of "key": value pairs.
     * Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Location where the Pipeline Job is to run
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Specifies mapping configuration.
     * Structure is documented below.
     */
    declare public readonly mappingPipelineJob: pulumi.Output<outputs.healthcare.PipelineJobMappingPipelineJob | undefined>;
    /**
     * Specifies the name of the pipeline job. This field is user-assigned.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Specifies reconciliation configuration.
     * Structure is documented below.
     */
    declare public readonly reconciliationPipelineJob: pulumi.Output<outputs.healthcare.PipelineJobReconciliationPipelineJob | undefined>;
    /**
     * The fully qualified name of this dataset
     */
    declare public /*out*/ readonly selfLink: pulumi.Output<string>;

    /**
     * Create a PipelineJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PipelineJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PipelineJobArgs | PipelineJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PipelineJobState | undefined;
            resourceInputs["backfillPipelineJob"] = state?.backfillPipelineJob;
            resourceInputs["dataset"] = state?.dataset;
            resourceInputs["disableLineage"] = state?.disableLineage;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["mappingPipelineJob"] = state?.mappingPipelineJob;
            resourceInputs["name"] = state?.name;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["reconciliationPipelineJob"] = state?.reconciliationPipelineJob;
            resourceInputs["selfLink"] = state?.selfLink;
        } else {
            const args = argsOrState as PipelineJobArgs | undefined;
            if (args?.dataset === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataset'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["backfillPipelineJob"] = args?.backfillPipelineJob;
            resourceInputs["dataset"] = args?.dataset;
            resourceInputs["disableLineage"] = args?.disableLineage;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["mappingPipelineJob"] = args?.mappingPipelineJob;
            resourceInputs["name"] = args?.name;
            resourceInputs["reconciliationPipelineJob"] = args?.reconciliationPipelineJob;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PipelineJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PipelineJob resources.
 */
export interface PipelineJobState {
    /**
     * Specifies the backfill configuration.
     * Structure is documented below.
     */
    backfillPipelineJob?: pulumi.Input<inputs.healthcare.PipelineJobBackfillPipelineJob>;
    /**
     * Healthcare Dataset under which the Pipeline Job is to run
     */
    dataset?: pulumi.Input<string>;
    /**
     * If true, disables writing lineage for the pipeline.
     */
    disableLineage?: pulumi.Input<boolean>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User-supplied key-value pairs used to organize Pipeline Jobs.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
     * maximum 128 bytes, and must conform to the following PCRE regular expression:
     * [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values are optional, must be between 1 and 63 characters long, have a
     * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
     * regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
     * No more than 64 labels can be associated with a given pipeline.
     * An object containing a list of "key": value pairs.
     * Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location where the Pipeline Job is to run
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies mapping configuration.
     * Structure is documented below.
     */
    mappingPipelineJob?: pulumi.Input<inputs.healthcare.PipelineJobMappingPipelineJob>;
    /**
     * Specifies the name of the pipeline job. This field is user-assigned.
     */
    name?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies reconciliation configuration.
     * Structure is documented below.
     */
    reconciliationPipelineJob?: pulumi.Input<inputs.healthcare.PipelineJobReconciliationPipelineJob>;
    /**
     * The fully qualified name of this dataset
     */
    selfLink?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PipelineJob resource.
 */
export interface PipelineJobArgs {
    /**
     * Specifies the backfill configuration.
     * Structure is documented below.
     */
    backfillPipelineJob?: pulumi.Input<inputs.healthcare.PipelineJobBackfillPipelineJob>;
    /**
     * Healthcare Dataset under which the Pipeline Job is to run
     */
    dataset: pulumi.Input<string>;
    /**
     * If true, disables writing lineage for the pipeline.
     */
    disableLineage?: pulumi.Input<boolean>;
    /**
     * User-supplied key-value pairs used to organize Pipeline Jobs.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
     * maximum 128 bytes, and must conform to the following PCRE regular expression:
     * [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values are optional, must be between 1 and 63 characters long, have a
     * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
     * regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
     * No more than 64 labels can be associated with a given pipeline.
     * An object containing a list of "key": value pairs.
     * Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location where the Pipeline Job is to run
     */
    location: pulumi.Input<string>;
    /**
     * Specifies mapping configuration.
     * Structure is documented below.
     */
    mappingPipelineJob?: pulumi.Input<inputs.healthcare.PipelineJobMappingPipelineJob>;
    /**
     * Specifies the name of the pipeline job. This field is user-assigned.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies reconciliation configuration.
     * Structure is documented below.
     */
    reconciliationPipelineJob?: pulumi.Input<inputs.healthcare.PipelineJobReconciliationPipelineJob>;
}
