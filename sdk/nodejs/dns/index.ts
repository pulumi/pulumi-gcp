// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetKeysArgs, GetKeysResult, GetKeysOutputArgs } from "./getKeys";
export const getKeys: typeof import("./getKeys").getKeys = null as any;
export const getKeysOutput: typeof import("./getKeys").getKeysOutput = null as any;
utilities.lazyLoad(exports, ["getKeys","getKeysOutput"], () => require("./getKeys"));

export { GetManagedZoneArgs, GetManagedZoneResult, GetManagedZoneOutputArgs } from "./getManagedZone";
export const getManagedZone: typeof import("./getManagedZone").getManagedZone = null as any;
export const getManagedZoneOutput: typeof import("./getManagedZone").getManagedZoneOutput = null as any;
utilities.lazyLoad(exports, ["getManagedZone","getManagedZoneOutput"], () => require("./getManagedZone"));

export { GetRecordSetArgs, GetRecordSetResult, GetRecordSetOutputArgs } from "./getRecordSet";
export const getRecordSet: typeof import("./getRecordSet").getRecordSet = null as any;
export const getRecordSetOutput: typeof import("./getRecordSet").getRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getRecordSet","getRecordSetOutput"], () => require("./getRecordSet"));

export { ManagedZoneArgs, ManagedZoneState } from "./managedZone";
export type ManagedZone = import("./managedZone").ManagedZone;
export const ManagedZone: typeof import("./managedZone").ManagedZone = null as any;
utilities.lazyLoad(exports, ["ManagedZone"], () => require("./managedZone"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { RecordSetArgs, RecordSetState } from "./recordSet";
export type RecordSet = import("./recordSet").RecordSet;
export const RecordSet: typeof import("./recordSet").RecordSet = null as any;
utilities.lazyLoad(exports, ["RecordSet"], () => require("./recordSet"));

export { ResponsePolicyArgs, ResponsePolicyState } from "./responsePolicy";
export type ResponsePolicy = import("./responsePolicy").ResponsePolicy;
export const ResponsePolicy: typeof import("./responsePolicy").ResponsePolicy = null as any;
utilities.lazyLoad(exports, ["ResponsePolicy"], () => require("./responsePolicy"));

export { ResponsePolicyRuleArgs, ResponsePolicyRuleState } from "./responsePolicyRule";
export type ResponsePolicyRule = import("./responsePolicyRule").ResponsePolicyRule;
export const ResponsePolicyRule: typeof import("./responsePolicyRule").ResponsePolicyRule = null as any;
utilities.lazyLoad(exports, ["ResponsePolicyRule"], () => require("./responsePolicyRule"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:dns/managedZone:ManagedZone":
                return new ManagedZone(name, <any>undefined, { urn })
            case "gcp:dns/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "gcp:dns/recordSet:RecordSet":
                return new RecordSet(name, <any>undefined, { urn })
            case "gcp:dns/responsePolicy:ResponsePolicy":
                return new ResponsePolicy(name, <any>undefined, { urn })
            case "gcp:dns/responsePolicyRule:ResponsePolicyRule":
                return new ResponsePolicyRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "dns/managedZone", _module)
pulumi.runtime.registerResourceModule("gcp", "dns/policy", _module)
pulumi.runtime.registerResourceModule("gcp", "dns/recordSet", _module)
pulumi.runtime.registerResourceModule("gcp", "dns/responsePolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "dns/responsePolicyRule", _module)
