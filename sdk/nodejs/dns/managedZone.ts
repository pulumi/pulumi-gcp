// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A zone is a subtree of the DNS namespace under one administrative
 * responsibility. A ManagedZone is a resource that represents a DNS zone
 * hosted by the Cloud DNS service.
 * 
 * 
 * To get more information about ManagedZone, see:
 * 
 * * [API documentation](https://cloud.google.com/dns/api/v1/managedZones)
 * * How-to Guides
 *     * [Managing Zones](https://cloud.google.com/dns/zones/)
 * 
 * ## Example Usage - Dns Managed Zone Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 * 
 * const rnd = new random.RandomId("rnd", {
 *     byteLength: 4,
 * });
 * const example_zone = new gcp.dns.ManagedZone("example-zone", {
 *     description: "Example DNS zone",
 *     dnsName: rnd.hex.apply(hex => `example-${hex}.com.`),
 *     labels: {
 *         foo: "bar",
 *     },
 * });
 * ```
 * ## Example Usage - Dns Managed Zone Private
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const network_1 = new gcp.compute.Network("network-1", {
 *     autoCreateSubnetworks: false,
 * });
 * const network_2 = new gcp.compute.Network("network-2", {
 *     autoCreateSubnetworks: false,
 * });
 * const private_zone = new gcp.dns.ManagedZone("private-zone", {
 *     description: "Example private DNS zone",
 *     dnsName: "private.example.com.",
 *     labels: {
 *         foo: "bar",
 *     },
 *     privateVisibilityConfig: {
 *         networks: [
 *             {
 *                 networkUrl: network_1.selfLink,
 *             },
 *             {
 *                 networkUrl: network_2.selfLink,
 *             },
 *         ],
 *     },
 *     visibility: "private",
 * });
 * ```
 */
export class ManagedZone extends pulumi.CustomResource {
    /**
     * Get an existing ManagedZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedZoneState, opts?: pulumi.CustomResourceOptions): ManagedZone {
        return new ManagedZone(name, <any>state, { ...opts, id: id });
    }

    public readonly description: pulumi.Output<string>;
    public readonly dnsName: pulumi.Output<string>;
    public readonly forwardingConfig: pulumi.Output<{ targetNameServers?: { ipv4Address?: string }[] } | undefined>;
    public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name: pulumi.Output<string>;
    public /*out*/ readonly nameServers: pulumi.Output<string[]>;
    public readonly peeringConfig: pulumi.Output<{ targetNetwork?: { networkUrl?: string } } | undefined>;
    public readonly privateVisibilityConfig: pulumi.Output<{ networks?: { networkUrl?: string }[] } | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project: pulumi.Output<string>;
    public readonly visibility: pulumi.Output<string | undefined>;

    /**
     * Create a ManagedZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedZoneArgs | ManagedZoneState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ManagedZoneState = argsOrState as ManagedZoneState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["forwardingConfig"] = state ? state.forwardingConfig : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nameServers"] = state ? state.nameServers : undefined;
            inputs["peeringConfig"] = state ? state.peeringConfig : undefined;
            inputs["privateVisibilityConfig"] = state ? state.privateVisibilityConfig : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as ManagedZoneArgs | undefined;
            if (!args || args.dnsName === undefined) {
                throw new Error("Missing required property 'dnsName'");
            }
            inputs["description"] = (args ? args.description : undefined) || "Managed by Pulumi";
            inputs["dnsName"] = args ? args.dnsName : undefined;
            inputs["forwardingConfig"] = args ? args.forwardingConfig : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["peeringConfig"] = args ? args.peeringConfig : undefined;
            inputs["privateVisibilityConfig"] = args ? args.privateVisibilityConfig : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["visibility"] = args ? args.visibility : undefined;
            inputs["nameServers"] = undefined /*out*/;
        }
        super("gcp:dns/managedZone:ManagedZone", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedZone resources.
 */
export interface ManagedZoneState {
    readonly description?: pulumi.Input<string>;
    readonly dnsName?: pulumi.Input<string>;
    readonly forwardingConfig?: pulumi.Input<{ targetNameServers?: pulumi.Input<pulumi.Input<{ ipv4Address?: pulumi.Input<string> }>[]> }>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly name?: pulumi.Input<string>;
    readonly nameServers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly peeringConfig?: pulumi.Input<{ targetNetwork?: pulumi.Input<{ networkUrl?: pulumi.Input<string> }> }>;
    readonly privateVisibilityConfig?: pulumi.Input<{ networks?: pulumi.Input<pulumi.Input<{ networkUrl?: pulumi.Input<string> }>[]> }>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    readonly visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedZone resource.
 */
export interface ManagedZoneArgs {
    readonly description?: pulumi.Input<string>;
    readonly dnsName: pulumi.Input<string>;
    readonly forwardingConfig?: pulumi.Input<{ targetNameServers?: pulumi.Input<pulumi.Input<{ ipv4Address?: pulumi.Input<string> }>[]> }>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly name?: pulumi.Input<string>;
    readonly peeringConfig?: pulumi.Input<{ targetNetwork?: pulumi.Input<{ networkUrl?: pulumi.Input<string> }> }>;
    readonly privateVisibilityConfig?: pulumi.Input<{ networks?: pulumi.Input<pulumi.Input<{ networkUrl?: pulumi.Input<string> }>[]> }>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    readonly visibility?: pulumi.Input<string>;
}
