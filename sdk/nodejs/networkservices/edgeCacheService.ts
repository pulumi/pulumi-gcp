// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * EdgeCacheService defines the IP addresses, protocols, security policies, cache policies and routing configuration.
 *
 * > **Warning:** These resources require allow-listing to use, and are not openly available to all Cloud customers. Engage with your Cloud account team to discuss how to onboard.
 *
 * ## Example Usage
 * ### Network Services Edge Cache Service Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const dest = new gcp.storage.Bucket("dest", {forceDestroy: true});
 * const instanceEdgeCacheOrigin = new gcp.networkservices.EdgeCacheOrigin("instanceEdgeCacheOrigin", {
 *     originAddress: dest.url,
 *     description: "The default bucket for media edge test",
 *     maxAttempts: 2,
 *     timeout: {
 *         connectTimeout: "10s",
 *     },
 * });
 * const instanceEdgeCacheService = new gcp.networkservices.EdgeCacheService("instanceEdgeCacheService", {
 *     description: "some description",
 *     routing: {
 *         hostRules: [{
 *             description: "host rule description",
 *             hosts: ["sslcert.tf-test.club"],
 *             pathMatcher: "routes",
 *         }],
 *         pathMatchers: [{
 *             name: "routes",
 *             routeRules: [{
 *                 description: "a route rule to match against",
 *                 priority: 1,
 *                 matchRules: [{
 *                     prefixMatch: "/",
 *                 }],
 *                 origin: instanceEdgeCacheOrigin.name,
 *                 routeAction: {
 *                     cdnPolicy: {
 *                         cacheMode: "CACHE_ALL_STATIC",
 *                         defaultTtl: "3600s",
 *                     },
 *                 },
 *                 headerAction: {
 *                     responseHeaderToAdds: [{
 *                         headerName: "x-cache-status",
 *                         headerValue: "{cdn_cache_status}",
 *                     }],
 *                 },
 *             }],
 *         }],
 *     },
 * });
 * ```
 * ### Network Services Edge Cache Service Advanced
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const dest = new gcp.storage.Bucket("dest", {forceDestroy: true});
 * const google = new gcp.networkservices.EdgeCacheOrigin("google", {
 *     originAddress: "google.com",
 *     description: "The default bucket for media edge test",
 *     maxAttempts: 2,
 *     timeout: {
 *         connectTimeout: "10s",
 *     },
 * });
 * const instanceEdgeCacheOrigin = new gcp.networkservices.EdgeCacheOrigin("instanceEdgeCacheOrigin", {
 *     originAddress: dest.url,
 *     description: "The default bucket for media edge test",
 *     maxAttempts: 2,
 *     timeout: {
 *         connectTimeout: "10s",
 *     },
 * });
 * const instanceEdgeCacheService = new gcp.networkservices.EdgeCacheService("instanceEdgeCacheService", {
 *     description: "some description",
 *     disableQuic: true,
 *     labels: {
 *         a: "b",
 *     },
 *     routing: {
 *         hostRules: [
 *             {
 *                 description: "host rule description",
 *                 hosts: ["sslcert.tf-test.club"],
 *                 pathMatcher: "routes",
 *             },
 *             {
 *                 description: "host rule2",
 *                 hosts: ["sslcert.tf-test2.club"],
 *                 pathMatcher: "routes",
 *             },
 *             {
 *                 description: "host rule3",
 *                 hosts: ["sslcert.tf-test3.club"],
 *                 pathMatcher: "routesAdvanced",
 *             },
 *         ],
 *         pathMatchers: [
 *             {
 *                 name: "routes",
 *                 routeRules: [{
 *                     description: "a route rule to match against",
 *                     priority: 1,
 *                     matchRules: [{
 *                         prefixMatch: "/",
 *                     }],
 *                     origin: instanceEdgeCacheOrigin.name,
 *                     routeAction: {
 *                         cdnPolicy: {
 *                             cacheMode: "CACHE_ALL_STATIC",
 *                             defaultTtl: "3600s",
 *                         },
 *                     },
 *                     headerAction: {
 *                         responseHeaderToAdds: [{
 *                             headerName: "x-cache-status",
 *                             headerValue: "{cdn_cache_status}",
 *                         }],
 *                     },
 *                 }],
 *             },
 *             {
 *                 name: "routesAdvanced",
 *                 description: "an advanced ruleset",
 *                 routeRules: [
 *                     {
 *                         description: "an advanced route rule to match against",
 *                         priority: 1,
 *                         matchRules: [
 *                             {
 *                                 prefixMatch: "/potato/",
 *                                 queryParameterMatches: [
 *                                     {
 *                                         name: "debug",
 *                                         presentMatch: true,
 *                                     },
 *                                     {
 *                                         name: "state",
 *                                         exactMatch: "debug",
 *                                     },
 *                                 ],
 *                             },
 *                             {
 *                                 fullPathMatch: "/apple",
 *                             },
 *                         ],
 *                         headerAction: {
 *                             requestHeaderToAdds: [
 *                                 {
 *                                     headerName: "debug",
 *                                     headerValue: "true",
 *                                     replace: true,
 *                                 },
 *                                 {
 *                                     headerName: "potato",
 *                                     headerValue: "plant",
 *                                 },
 *                             ],
 *                             responseHeaderToAdds: [{
 *                                 headerName: "potato",
 *                                 headerValue: "plant",
 *                                 replace: true,
 *                             }],
 *                             requestHeaderToRemoves: [{
 *                                 headerName: "prod",
 *                             }],
 *                             responseHeaderToRemoves: [{
 *                                 headerName: "prod",
 *                             }],
 *                         },
 *                         origin: instanceEdgeCacheOrigin.name,
 *                         routeAction: {
 *                             cdnPolicy: {
 *                                 cacheMode: "CACHE_ALL_STATIC",
 *                                 defaultTtl: "3800s",
 *                                 clientTtl: "3600s",
 *                                 maxTtl: "9000s",
 *                                 cacheKeyPolicy: {
 *                                     includeProtocol: true,
 *                                     excludeHost: true,
 *                                     includedQueryParameters: [
 *                                         "apple",
 *                                         "dev",
 *                                         "santa",
 *                                         "claus",
 *                                     ],
 *                                     includedHeaderNames: ["banana"],
 *                                 },
 *                                 negativeCaching: true,
 *                                 signedRequestMode: "DISABLED",
 *                                 negativeCachingPolicy: {
 *                                     "500": "3000s",
 *                                 },
 *                             },
 *                             urlRewrite: {
 *                                 pathPrefixRewrite: "/dev",
 *                                 hostRewrite: "dev.club",
 *                             },
 *                             corsPolicy: {
 *                                 maxAge: "2500s",
 *                                 allowCredentials: true,
 *                                 allowOrigins: ["*"],
 *                                 allowMethods: ["GET"],
 *                                 allowHeaders: ["dev"],
 *                                 exposeHeaders: ["prod"],
 *                             },
 *                         },
 *                     },
 *                     {
 *                         description: "a second route rule to match against",
 *                         priority: 2,
 *                         matchRules: [{
 *                             fullPathMatch: "/yay",
 *                         }],
 *                         origin: instanceEdgeCacheOrigin.name,
 *                         routeAction: {
 *                             cdnPolicy: {
 *                                 cacheMode: "CACHE_ALL_STATIC",
 *                                 defaultTtl: "3600s",
 *                                 cacheKeyPolicy: {
 *                                     excludedQueryParameters: ["dev"],
 *                                 },
 *                             },
 *                             corsPolicy: {
 *                                 maxAge: "3000s",
 *                                 allowHeaders: ["dev"],
 *                                 disabled: true,
 *                             },
 *                         },
 *                     },
 *                 ],
 *             },
 *         ],
 *     },
 *     logConfig: {
 *         enable: true,
 *         sampleRate: 0.01,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * EdgeCacheService can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/edgeCacheService:EdgeCacheService default projects/{{project}}/locations/global/edgeCacheServices/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/edgeCacheService:EdgeCacheService default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/edgeCacheService:EdgeCacheService default {{name}}
 * ```
 */
export class EdgeCacheService extends pulumi.CustomResource {
    /**
     * Get an existing EdgeCacheService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgeCacheServiceState, opts?: pulumi.CustomResourceOptions): EdgeCacheService {
        return new EdgeCacheService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:networkservices/edgeCacheService:EdgeCacheService';

    /**
     * Returns true if the given object is an instance of EdgeCacheService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgeCacheService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgeCacheService.__pulumiType;
    }

    /**
     * A human-readable description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
     */
    public readonly disableQuic!: pulumi.Output<boolean>;
    /**
     * Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
     */
    public readonly edgeSecurityPolicy!: pulumi.Output<string | undefined>;
    /**
     * URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
     * Note that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
     */
    public readonly edgeSslCertificates!: pulumi.Output<string[] | undefined>;
    /**
     * The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
     */
    public /*out*/ readonly ipv4Addresses!: pulumi.Output<string[]>;
    /**
     * The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
     */
    public /*out*/ readonly ipv6Addresses!: pulumi.Output<string[]>;
    /**
     * Set of label tags associated with the EdgeCache resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
     * Structure is documented below.
     */
    public readonly logConfig!: pulumi.Output<outputs.networkservices.EdgeCacheServiceLogConfig | undefined>;
    /**
     * The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Require TLS (HTTPS) for all clients connecting to this service.
     * Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
     * You must have at least one (1) edgeSslCertificate specified to enable this.
     */
    public readonly requireTls!: pulumi.Output<boolean>;
    /**
     * Defines how requests are routed, modified, cached and/or which origin content is filled from.
     * Structure is documented below.
     */
    public readonly routing!: pulumi.Output<outputs.networkservices.EdgeCacheServiceRouting>;
    /**
     * URL of the SslPolicy resource that will be associated with the EdgeCacheService.
     * If not set, the EdgeCacheService has no SSL policy configured, and will default to the "COMPATIBLE" policy.
     */
    public readonly sslPolicy!: pulumi.Output<string | undefined>;

    /**
     * Create a EdgeCacheService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgeCacheServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgeCacheServiceArgs | EdgeCacheServiceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgeCacheServiceState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["disableQuic"] = state ? state.disableQuic : undefined;
            inputs["edgeSecurityPolicy"] = state ? state.edgeSecurityPolicy : undefined;
            inputs["edgeSslCertificates"] = state ? state.edgeSslCertificates : undefined;
            inputs["ipv4Addresses"] = state ? state.ipv4Addresses : undefined;
            inputs["ipv6Addresses"] = state ? state.ipv6Addresses : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["logConfig"] = state ? state.logConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["requireTls"] = state ? state.requireTls : undefined;
            inputs["routing"] = state ? state.routing : undefined;
            inputs["sslPolicy"] = state ? state.sslPolicy : undefined;
        } else {
            const args = argsOrState as EdgeCacheServiceArgs | undefined;
            if ((!args || args.routing === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routing'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["disableQuic"] = args ? args.disableQuic : undefined;
            inputs["edgeSecurityPolicy"] = args ? args.edgeSecurityPolicy : undefined;
            inputs["edgeSslCertificates"] = args ? args.edgeSslCertificates : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["logConfig"] = args ? args.logConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["requireTls"] = args ? args.requireTls : undefined;
            inputs["routing"] = args ? args.routing : undefined;
            inputs["sslPolicy"] = args ? args.sslPolicy : undefined;
            inputs["ipv4Addresses"] = undefined /*out*/;
            inputs["ipv6Addresses"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(EdgeCacheService.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EdgeCacheService resources.
 */
export interface EdgeCacheServiceState {
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
     */
    disableQuic?: pulumi.Input<boolean>;
    /**
     * Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
     */
    edgeSecurityPolicy?: pulumi.Input<string>;
    /**
     * URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
     * Note that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
     */
    edgeSslCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
     */
    ipv4Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
     */
    ipv6Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of label tags associated with the EdgeCache resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
     * Structure is documented below.
     */
    logConfig?: pulumi.Input<inputs.networkservices.EdgeCacheServiceLogConfig>;
    /**
     * The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Require TLS (HTTPS) for all clients connecting to this service.
     * Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
     * You must have at least one (1) edgeSslCertificate specified to enable this.
     */
    requireTls?: pulumi.Input<boolean>;
    /**
     * Defines how requests are routed, modified, cached and/or which origin content is filled from.
     * Structure is documented below.
     */
    routing?: pulumi.Input<inputs.networkservices.EdgeCacheServiceRouting>;
    /**
     * URL of the SslPolicy resource that will be associated with the EdgeCacheService.
     * If not set, the EdgeCacheService has no SSL policy configured, and will default to the "COMPATIBLE" policy.
     */
    sslPolicy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EdgeCacheService resource.
 */
export interface EdgeCacheServiceArgs {
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
     */
    disableQuic?: pulumi.Input<boolean>;
    /**
     * Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
     */
    edgeSecurityPolicy?: pulumi.Input<string>;
    /**
     * URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
     * Note that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
     */
    edgeSslCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of label tags associated with the EdgeCache resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
     * Structure is documented below.
     */
    logConfig?: pulumi.Input<inputs.networkservices.EdgeCacheServiceLogConfig>;
    /**
     * The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Require TLS (HTTPS) for all clients connecting to this service.
     * Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
     * You must have at least one (1) edgeSslCertificate specified to enable this.
     */
    requireTls?: pulumi.Input<boolean>;
    /**
     * Defines how requests are routed, modified, cached and/or which origin content is filled from.
     * Structure is documented below.
     */
    routing: pulumi.Input<inputs.networkservices.EdgeCacheServiceRouting>;
    /**
     * URL of the SslPolicy resource that will be associated with the EdgeCacheService.
     * If not set, the EdgeCacheService has no SSL policy configured, and will default to the "COMPATIBLE" policy.
     */
    sslPolicy?: pulumi.Input<string>;
}
