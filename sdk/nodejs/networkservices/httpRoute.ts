// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 * ### Network Services Http Route Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.networkservices.HttpRoute("default", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     hostnames: ["example"],
 *     rules: [{
 *         matches: [{
 *             queryParameters: [{
 *                 queryParameter: "key",
 *                 exactMatch: "value",
 *             }],
 *             fullPathMatch: "example",
 *         }],
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Network Services Http Route Matches And Actions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.networkservices.HttpRoute("default", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     hostnames: ["example"],
 *     rules: [{
 *         matches: [
 *             {
 *                 headers: [{
 *                     header: "header",
 *                     invertMatch: false,
 *                     regexMatch: "header-value",
 *                 }],
 *                 queryParameters: [{
 *                     queryParameter: "key",
 *                     exactMatch: "value",
 *                 }],
 *                 prefixMatch: "example",
 *                 ignoreCase: false,
 *             },
 *             {
 *                 headers: [{
 *                     header: "header",
 *                     invertMatch: false,
 *                     presentMatch: true,
 *                 }],
 *                 queryParameters: [{
 *                     queryParameter: "key",
 *                     regexMatch: "value",
 *                 }],
 *                 regexMatch: "example",
 *                 ignoreCase: false,
 *             },
 *             {
 *                 headers: [{
 *                     header: "header",
 *                     invertMatch: false,
 *                     presentMatch: true,
 *                 }],
 *                 queryParameters: [{
 *                     queryParameter: "key",
 *                     presentMatch: true,
 *                 }],
 *                 fullPathMatch: "example",
 *                 ignoreCase: false,
 *             },
 *         ],
 *         action: {
 *             redirect: {
 *                 hostRedirect: "new-host",
 *                 pathRedirect: "new-path",
 *                 prefixRewrite: "new-prefix",
 *                 httpsRedirect: true,
 *                 stripQuery: true,
 *                 portRedirect: 8081,
 *             },
 *             urlRewrite: {
 *                 pathPrefixRewrite: "new-prefix",
 *                 hostRewrite: "new-host",
 *             },
 *             retryPolicy: {
 *                 retryConditions: ["server_error"],
 *                 numRetries: 1,
 *                 perTryTimeout: "1s",
 *             },
 *             requestMirrorPolicy: {
 *                 destination: {
 *                     serviceName: "new",
 *                     weight: 1,
 *                 },
 *             },
 *             corsPolicy: {
 *                 allowOrigins: ["example"],
 *                 allowMethods: [
 *                     "GET",
 *                     "PUT",
 *                 ],
 *                 allowHeaders: [
 *                     "version",
 *                     "type",
 *                 ],
 *                 exposeHeaders: [
 *                     "version",
 *                     "type",
 *                 ],
 *                 maxAge: "1s",
 *                 allowCredentials: true,
 *                 disabled: false,
 *             },
 *         },
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Network Services Http Route Actions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.networkservices.HttpRoute("default", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     hostnames: ["example"],
 *     rules: [{
 *         action: {
 *             faultInjectionPolicy: {
 *                 delay: {
 *                     fixedDelay: "1s",
 *                     percentage: 1,
 *                 },
 *                 abort: {
 *                     httpStatus: 500,
 *                     percentage: 1,
 *                 },
 *             },
 *             urlRewrite: {
 *                 pathPrefixRewrite: "new-prefix",
 *                 hostRewrite: "new-host",
 *             },
 *             retryPolicy: {
 *                 retryConditions: ["server_error"],
 *                 numRetries: 1,
 *                 perTryTimeout: "1s",
 *             },
 *             requestMirrorPolicy: {
 *                 destination: {
 *                     serviceName: "new",
 *                     weight: 1,
 *                 },
 *             },
 *             corsPolicy: {
 *                 allowOrigins: ["example"],
 *                 allowMethods: [
 *                     "GET",
 *                     "PUT",
 *                 ],
 *                 allowHeaders: [
 *                     "version",
 *                     "type",
 *                 ],
 *                 exposeHeaders: [
 *                     "version",
 *                     "type",
 *                 ],
 *                 maxAge: "1s",
 *                 allowCredentials: true,
 *                 disabled: false,
 *             },
 *             requestHeaderModifier: {
 *                 set: {
 *                     version: "1",
 *                     type: "json",
 *                 },
 *                 add: {
 *                     "minor-version": "1",
 *                 },
 *                 removes: ["arg"],
 *             },
 *             responseHeaderModifier: {
 *                 set: {
 *                     version: "1",
 *                     type: "json",
 *                 },
 *                 add: {
 *                     "minor-version": "1",
 *                 },
 *                 removes: ["removearg"],
 *             },
 *         },
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Network Services Http Route Mesh Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultMesh = new gcp.networkservices.Mesh("defaultMesh", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHttpRoute = new gcp.networkservices.HttpRoute("defaultHttpRoute", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     hostnames: ["example"],
 *     meshes: [defaultMesh.id],
 *     rules: [{
 *         matches: [{
 *             queryParameters: [{
 *                 queryParameter: "key",
 *                 exactMatch: "value",
 *             }],
 *             fullPathMatch: "example",
 *         }],
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * HttpRoute can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/httpRoute:HttpRoute default projects/{{project}}/locations/global/httpRoutes/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/httpRoute:HttpRoute default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/httpRoute:HttpRoute default {{name}}
 * ```
 */
export class HttpRoute extends pulumi.CustomResource {
    /**
     * Get an existing HttpRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HttpRouteState, opts?: pulumi.CustomResourceOptions): HttpRoute {
        return new HttpRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:networkservices/httpRoute:HttpRoute';

    /**
     * Returns true if the given object is an instance of HttpRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HttpRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HttpRoute.__pulumiType;
    }

    /**
     * Time the HttpRoute was created in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
     * Each gateway reference should match the pattern: projects/*&#47;locations/global/gateways/<gateway_name>
     */
    public readonly gateways!: pulumi.Output<string[] | undefined>;
    /**
     * Set of hosts that should match against the HTTP host header to select a HttpRoute to process the request.
     */
    public readonly hostnames!: pulumi.Output<string[]>;
    /**
     * Set of label tags associated with the HttpRoute resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
     * Each mesh reference should match the pattern: projects/*&#47;locations/global/meshes/<mesh_name>.
     * The attached Mesh should be of a type SIDECAR.
     */
    public readonly meshes!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the HttpRoute resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Rules that define how traffic is routed and handled.
     * Structure is documented below.
     */
    public readonly rules!: pulumi.Output<outputs.networkservices.HttpRouteRule[]>;
    /**
     * Server-defined URL of this resource.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Time the HttpRoute was updated in UTC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a HttpRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HttpRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HttpRouteArgs | HttpRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HttpRouteState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gateways"] = state ? state.gateways : undefined;
            resourceInputs["hostnames"] = state ? state.hostnames : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["meshes"] = state ? state.meshes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as HttpRouteArgs | undefined;
            if ((!args || args.hostnames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostnames'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gateways"] = args ? args.gateways : undefined;
            resourceInputs["hostnames"] = args ? args.hostnames : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["meshes"] = args ? args.meshes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HttpRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HttpRoute resources.
 */
export interface HttpRouteState {
    /**
     * Time the HttpRoute was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
     * Each gateway reference should match the pattern: projects/*&#47;locations/global/gateways/<gateway_name>
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of hosts that should match against the HTTP host header to select a HttpRoute to process the request.
     */
    hostnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of label tags associated with the HttpRoute resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
     * Each mesh reference should match the pattern: projects/*&#47;locations/global/meshes/<mesh_name>.
     * The attached Mesh should be of a type SIDECAR.
     */
    meshes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the HttpRoute resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Rules that define how traffic is routed and handled.
     * Structure is documented below.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.networkservices.HttpRouteRule>[]>;
    /**
     * Server-defined URL of this resource.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * Time the HttpRoute was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HttpRoute resource.
 */
export interface HttpRouteArgs {
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
     * Each gateway reference should match the pattern: projects/*&#47;locations/global/gateways/<gateway_name>
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of hosts that should match against the HTTP host header to select a HttpRoute to process the request.
     */
    hostnames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of label tags associated with the HttpRoute resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
     * Each mesh reference should match the pattern: projects/*&#47;locations/global/meshes/<mesh_name>.
     * The attached Mesh should be of a type SIDECAR.
     */
    meshes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the HttpRoute resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Rules that define how traffic is routed and handled.
     * Structure is documented below.
     */
    rules: pulumi.Input<pulumi.Input<inputs.networkservices.HttpRouteRule>[]>;
}
