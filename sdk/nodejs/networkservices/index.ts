// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { EdgeCacheKeysetArgs, EdgeCacheKeysetState } from "./edgeCacheKeyset";
export type EdgeCacheKeyset = import("./edgeCacheKeyset").EdgeCacheKeyset;
export const EdgeCacheKeyset: typeof import("./edgeCacheKeyset").EdgeCacheKeyset = null as any;
utilities.lazyLoad(exports, ["EdgeCacheKeyset"], () => require("./edgeCacheKeyset"));

export { EdgeCacheOriginArgs, EdgeCacheOriginState } from "./edgeCacheOrigin";
export type EdgeCacheOrigin = import("./edgeCacheOrigin").EdgeCacheOrigin;
export const EdgeCacheOrigin: typeof import("./edgeCacheOrigin").EdgeCacheOrigin = null as any;
utilities.lazyLoad(exports, ["EdgeCacheOrigin"], () => require("./edgeCacheOrigin"));

export { EdgeCacheServiceArgs, EdgeCacheServiceState } from "./edgeCacheService";
export type EdgeCacheService = import("./edgeCacheService").EdgeCacheService;
export const EdgeCacheService: typeof import("./edgeCacheService").EdgeCacheService = null as any;
utilities.lazyLoad(exports, ["EdgeCacheService"], () => require("./edgeCacheService"));

export { GatewayArgs, GatewayState } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { HttpRouteArgs, HttpRouteState } from "./httpRoute";
export type HttpRoute = import("./httpRoute").HttpRoute;
export const HttpRoute: typeof import("./httpRoute").HttpRoute = null as any;
utilities.lazyLoad(exports, ["HttpRoute"], () => require("./httpRoute"));

export { MeshArgs, MeshState } from "./mesh";
export type Mesh = import("./mesh").Mesh;
export const Mesh: typeof import("./mesh").Mesh = null as any;
utilities.lazyLoad(exports, ["Mesh"], () => require("./mesh"));

export { TcpRouteArgs, TcpRouteState } from "./tcpRoute";
export type TcpRoute = import("./tcpRoute").TcpRoute;
export const TcpRoute: typeof import("./tcpRoute").TcpRoute = null as any;
utilities.lazyLoad(exports, ["TcpRoute"], () => require("./tcpRoute"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:networkservices/edgeCacheKeyset:EdgeCacheKeyset":
                return new EdgeCacheKeyset(name, <any>undefined, { urn })
            case "gcp:networkservices/edgeCacheOrigin:EdgeCacheOrigin":
                return new EdgeCacheOrigin(name, <any>undefined, { urn })
            case "gcp:networkservices/edgeCacheService:EdgeCacheService":
                return new EdgeCacheService(name, <any>undefined, { urn })
            case "gcp:networkservices/gateway:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "gcp:networkservices/httpRoute:HttpRoute":
                return new HttpRoute(name, <any>undefined, { urn })
            case "gcp:networkservices/mesh:Mesh":
                return new Mesh(name, <any>undefined, { urn })
            case "gcp:networkservices/tcpRoute:TcpRoute":
                return new TcpRoute(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "networkservices/edgeCacheKeyset", _module)
pulumi.runtime.registerResourceModule("gcp", "networkservices/edgeCacheOrigin", _module)
pulumi.runtime.registerResourceModule("gcp", "networkservices/edgeCacheService", _module)
pulumi.runtime.registerResourceModule("gcp", "networkservices/gateway", _module)
pulumi.runtime.registerResourceModule("gcp", "networkservices/httpRoute", _module)
pulumi.runtime.registerResourceModule("gcp", "networkservices/mesh", _module)
pulumi.runtime.registerResourceModule("gcp", "networkservices/tcpRoute", _module)
