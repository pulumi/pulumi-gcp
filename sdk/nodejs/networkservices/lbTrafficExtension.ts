// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * LbTrafficExtension is a resource that lets the extension service modify the headers and payloads of both requests and responses without impacting the choice of backend services or any other security policies associated with the backend service.
 *
 * To get more information about LbTrafficExtension, see:
 *
 * * [API documentation](https://cloud.google.com/service-extensions/docs/reference/rest/v1beta1/projects.locations.lbTrafficExtensions)
 * * How-to Guides
 *     * [Configure a traffic extension](https://cloud.google.com/service-extensions/docs/configure-callout#configure_a_traffic_extension)
 *
 * ## Example Usage
 *
 * ### Network Services Lb Traffic Extension Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // Internal HTTP load balancer with a managed instance group backend
 * // VPC network
 * const ilbNetwork = new gcp.compute.Network("ilb_network", {
 *     name: "l7-ilb-network",
 *     autoCreateSubnetworks: false,
 * });
 * // proxy-only subnet
 * const proxySubnet = new gcp.compute.Subnetwork("proxy_subnet", {
 *     name: "l7-ilb-proxy-subnet",
 *     ipCidrRange: "10.0.0.0/24",
 *     region: "us-west1",
 *     purpose: "REGIONAL_MANAGED_PROXY",
 *     role: "ACTIVE",
 *     network: ilbNetwork.id,
 * });
 * // backend subnet
 * const ilbSubnet = new gcp.compute.Subnetwork("ilb_subnet", {
 *     name: "l7-ilb-subnet",
 *     ipCidrRange: "10.0.1.0/24",
 *     region: "us-west1",
 *     network: ilbNetwork.id,
 * });
 * // health check
 * const defaultRegionHealthCheck = new gcp.compute.RegionHealthCheck("default", {
 *     name: "l7-ilb-hc",
 *     region: "us-west1",
 *     httpHealthCheck: {
 *         portSpecification: "USE_SERVING_PORT",
 *     },
 * });
 * // instance template
 * const instanceTemplate = new gcp.compute.InstanceTemplate("instance_template", {
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: ilbNetwork.id,
 *         subnetwork: ilbSubnet.id,
 *     }],
 *     name: "l7-ilb-mig-template",
 *     machineType: "e2-small",
 *     tags: ["http-server"],
 *     disks: [{
 *         sourceImage: "debian-cloud/debian-10",
 *         autoDelete: true,
 *         boot: true,
 *     }],
 *     metadata: {
 *         "startup-script": `#! /bin/bash
 * set -euo pipefail
 *
 * export DEBIAN_FRONTEND=noninteractive
 * apt-get update
 * apt-get install -y nginx-light jq
 *
 * NAME=(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
 * IP=(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
 * METADATA=(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')
 *
 * cat <<EOF > /var/www/html/index.html
 * <pre>
 * Name: NAME
 * IP: IP
 * Metadata: METADATA
 * </pre>
 * EOF
 * `,
 *     },
 * });
 * // MIG
 * const mig = new gcp.compute.RegionInstanceGroupManager("mig", {
 *     name: "l7-ilb-mig1",
 *     region: "us-west1",
 *     baseInstanceName: "vm",
 *     targetSize: 2,
 *     versions: [{
 *         instanceTemplate: instanceTemplate.id,
 *         name: "primary",
 *     }],
 * });
 * // backend service
 * const defaultRegionBackendService = new gcp.compute.RegionBackendService("default", {
 *     name: "l7-ilb-backend-subnet",
 *     region: "us-west1",
 *     protocol: "HTTP",
 *     loadBalancingScheme: "INTERNAL_MANAGED",
 *     timeoutSec: 10,
 *     healthChecks: defaultRegionHealthCheck.id,
 *     backends: [{
 *         group: mig.instanceGroup,
 *         balancingMode: "UTILIZATION",
 *         capacityScaler: 1,
 *     }],
 * });
 * // URL map
 * const defaultRegionUrlMap = new gcp.compute.RegionUrlMap("default", {
 *     name: "l7-ilb-regional-url-map",
 *     region: "us-west1",
 *     defaultService: defaultRegionBackendService.id,
 * });
 * // HTTP target proxy
 * const defaultRegionTargetHttpProxy = new gcp.compute.RegionTargetHttpProxy("default", {
 *     name: "l7-ilb-target-http-proxy",
 *     region: "us-west1",
 *     urlMap: defaultRegionUrlMap.id,
 * });
 * // forwarding rule
 * const _default = new gcp.compute.ForwardingRule("default", {
 *     name: "l7-ilb-forwarding-rule",
 *     region: "us-west1",
 *     ipProtocol: "TCP",
 *     loadBalancingScheme: "INTERNAL_MANAGED",
 *     portRange: "80",
 *     target: defaultRegionTargetHttpProxy.id,
 *     network: ilbNetwork.id,
 *     subnetwork: ilbSubnet.id,
 *     networkTier: "PREMIUM",
 * });
 * // allow all access from IAP and health check ranges
 * const fwIap = new gcp.compute.Firewall("fw_iap", {
 *     name: "l7-ilb-fw-allow-iap-hc",
 *     direction: "INGRESS",
 *     network: ilbNetwork.id,
 *     sourceRanges: [
 *         "130.211.0.0/22",
 *         "35.191.0.0/16",
 *         "35.235.240.0/20",
 *     ],
 *     allows: [{
 *         protocol: "tcp",
 *     }],
 * });
 * // allow http from proxy subnet to backends
 * const fwIlbToBackends = new gcp.compute.Firewall("fw_ilb_to_backends", {
 *     name: "l7-ilb-fw-allow-ilb-to-backends",
 *     direction: "INGRESS",
 *     network: ilbNetwork.id,
 *     sourceRanges: ["10.0.0.0/24"],
 *     targetTags: ["http-server"],
 *     allows: [{
 *         protocol: "tcp",
 *         ports: [
 *             "80",
 *             "443",
 *             "8080",
 *         ],
 *     }],
 * });
 * // Traffic Extension Backend Instance
 * const calloutsInstance = new gcp.compute.Instance("callouts_instance", {
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: ilbNetwork.id,
 *         subnetwork: ilbSubnet.id,
 *     }],
 *     name: "l7-ilb-callouts-ins",
 *     zone: "us-west1-a",
 *     machineType: "e2-small",
 *     labels: {
 *         "container-vm": "cos-stable-109-17800-147-54",
 *     },
 *     tags: [
 *         "allow-ssh",
 *         "load-balanced-backend",
 *     ],
 *     bootDisk: {
 *         autoDelete: true,
 *         initializeParams: {
 *             type: "pd-standard",
 *             size: 10,
 *             image: "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/cos-stable-109-17800-147-54",
 *         },
 *     },
 *     metadata: {
 *         "gce-container-declaration": `# DISCLAIMER:
 * # This container declaration format is not a public API and may change without
 * # notice. Please use gcloud command-line tool or Google Cloud Console to run
 * # Containers on Google Compute Engine.
 *
 * spec:
 *   containers:
 *   - image: us-docker.pkg.dev/service-extensions/ext-proc/service-callout-basic-example-python:latest
 *     name: callouts-vm
 *     securityContext:
 *       privileged: false
 *     stdin: false
 *     tty: false
 *     volumeMounts: []
 *   restartPolicy: Always
 *   volumes: []
 * `,
 *         "google-logging-enabled": "true",
 *     },
 *     deletionProtection: false,
 * });
 * // callouts instance group
 * const calloutsInstanceGroup = new gcp.compute.InstanceGroup("callouts_instance_group", {
 *     name: "l7-ilb-callouts-ins-group",
 *     description: "Terraform test instance group",
 *     zone: "us-west1-a",
 *     instances: [calloutsInstance.id],
 *     namedPorts: [
 *         {
 *             name: "http",
 *             port: 80,
 *         },
 *         {
 *             name: "grpc",
 *             port: 443,
 *         },
 *     ],
 * });
 * // callout health check
 * const calloutsHealthCheck = new gcp.compute.RegionHealthCheck("callouts_health_check", {
 *     name: "l7-ilb-callouts-hc",
 *     region: "us-west1",
 *     httpHealthCheck: {
 *         port: 80,
 *     },
 * });
 * // callout backend service
 * const calloutsBackend = new gcp.compute.RegionBackendService("callouts_backend", {
 *     name: "l7-ilb-callouts-backend",
 *     region: "us-west1",
 *     protocol: "HTTP2",
 *     loadBalancingScheme: "INTERNAL_MANAGED",
 *     timeoutSec: 10,
 *     portName: "grpc",
 *     healthChecks: calloutsHealthCheck.id,
 *     backends: [{
 *         group: calloutsInstanceGroup.id,
 *         balancingMode: "UTILIZATION",
 *         capacityScaler: 1,
 *     }],
 * });
 * const defaultLbTrafficExtension = new gcp.networkservices.LbTrafficExtension("default", {
 *     name: "l7-ilb-traffic-ext",
 *     description: "my traffic extension",
 *     location: "us-west1",
 *     loadBalancingScheme: "INTERNAL_MANAGED",
 *     forwardingRules: [_default.selfLink],
 *     extensionChains: [{
 *         name: "chain1",
 *         matchCondition: {
 *             celExpression: "request.host == 'example.com'",
 *         },
 *         extensions: [{
 *             name: "ext11",
 *             authority: "ext11.com",
 *             service: calloutsBackend.selfLink,
 *             timeout: "0.1s",
 *             failOpen: false,
 *             supportedEvents: ["REQUEST_HEADERS"],
 *             forwardHeaders: ["custom-header"],
 *         }],
 *     }],
 *     labels: {
 *         foo: "bar",
 *     },
 * });
 * // test instance
 * const vmTest = new gcp.compute.Instance("vm_test", {
 *     name: "l7-ilb-test-vm",
 *     zone: "us-west1-b",
 *     machineType: "e2-small",
 *     networkInterfaces: [{
 *         network: ilbNetwork.id,
 *         subnetwork: ilbSubnet.id,
 *     }],
 *     bootDisk: {
 *         initializeParams: {
 *             image: "debian-cloud/debian-11",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * LbTrafficExtension can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, LbTrafficExtension can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:networkservices/lbTrafficExtension:LbTrafficExtension default projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkservices/lbTrafficExtension:LbTrafficExtension default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkservices/lbTrafficExtension:LbTrafficExtension default {{location}}/{{name}}
 * ```
 */
export class LbTrafficExtension extends pulumi.CustomResource {
    /**
     * Get an existing LbTrafficExtension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbTrafficExtensionState, opts?: pulumi.CustomResourceOptions): LbTrafficExtension {
        return new LbTrafficExtension(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:networkservices/lbTrafficExtension:LbTrafficExtension';

    /**
     * Returns true if the given object is an instance of LbTrafficExtension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbTrafficExtension {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbTrafficExtension.__pulumiType;
    }

    /**
     * A human-readable description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * A set of ordered extension chains that contain the match conditions and extensions to execute.
     * Match conditions for each extension chain are evaluated in sequence for a given request.
     * The first extension chain that has a condition that matches the request is executed.
     * Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
     * Structure is documented below.
     */
    public readonly extensionChains!: pulumi.Output<outputs.networkservices.LbTrafficExtensionExtensionChain[]>;
    /**
     * A list of references to the forwarding rules to which this service extension is attached to.
     * At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
     */
    public readonly forwardingRules!: pulumi.Output<string[]>;
    /**
     * Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
     * more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
     * "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
     */
    public readonly loadBalancingScheme!: pulumi.Output<string | undefined>;
    /**
     * The location of the traffic extension
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a LbTrafficExtension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbTrafficExtensionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbTrafficExtensionArgs | LbTrafficExtensionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbTrafficExtensionState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["extensionChains"] = state ? state.extensionChains : undefined;
            resourceInputs["forwardingRules"] = state ? state.forwardingRules : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["loadBalancingScheme"] = state ? state.loadBalancingScheme : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
        } else {
            const args = argsOrState as LbTrafficExtensionArgs | undefined;
            if ((!args || args.extensionChains === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extensionChains'");
            }
            if ((!args || args.forwardingRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'forwardingRules'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["extensionChains"] = args ? args.extensionChains : undefined;
            resourceInputs["forwardingRules"] = args ? args.forwardingRules : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["loadBalancingScheme"] = args ? args.loadBalancingScheme : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LbTrafficExtension.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LbTrafficExtension resources.
 */
export interface LbTrafficExtensionState {
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of ordered extension chains that contain the match conditions and extensions to execute.
     * Match conditions for each extension chain are evaluated in sequence for a given request.
     * The first extension chain that has a condition that matches the request is executed.
     * Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
     * Structure is documented below.
     */
    extensionChains?: pulumi.Input<pulumi.Input<inputs.networkservices.LbTrafficExtensionExtensionChain>[]>;
    /**
     * A list of references to the forwarding rules to which this service extension is attached to.
     * At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
     */
    forwardingRules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
     * more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
     * "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
     */
    loadBalancingScheme?: pulumi.Input<string>;
    /**
     * The location of the traffic extension
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a LbTrafficExtension resource.
 */
export interface LbTrafficExtensionArgs {
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * A set of ordered extension chains that contain the match conditions and extensions to execute.
     * Match conditions for each extension chain are evaluated in sequence for a given request.
     * The first extension chain that has a condition that matches the request is executed.
     * Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
     * Structure is documented below.
     */
    extensionChains: pulumi.Input<pulumi.Input<inputs.networkservices.LbTrafficExtensionExtensionChain>[]>;
    /**
     * A list of references to the forwarding rules to which this service extension is attached to.
     * At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
     */
    forwardingRules: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
     * more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
     * "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
     */
    loadBalancingScheme?: pulumi.Input<string>;
    /**
     * The location of the traffic extension
     */
    location: pulumi.Input<string>;
    /**
     * Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
