// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * WasmPlugin is a resource representing a service executing a customer-provided Wasm module.
 *
 * To get more information about WasmPlugin, see:
 *
 * * [API documentation](https://cloud.google.com/service-extensions/docs/reference/rest/v1/projects.locations.wasmPlugins)
 * * How-to Guides
 *     * [Configure a route extension](https://cloud.google.com/service-extensions/docs/create-plugin)
 *
 * ## Example Usage
 *
 * ### Wasm Plugin Basic Docker Repository
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const wasmPlugin = new gcp.networkservices.WasmPlugin("wasm_plugin", {
 *     name: "my-wasm-plugin",
 *     description: "my wasm plugin from a docker repository",
 *     mainVersionId: "v1",
 *     labels: {
 *         test_label: "test_value",
 *     },
 *     logConfig: {
 *         enable: true,
 *         sampleRate: 1,
 *         minLogLevel: "WARN",
 *     },
 *     versions: [{
 *         versionName: "v1",
 *         description: "v1 version of my wasm plugin",
 *         imageUri: project.then(project => `us-central1-docker.pkg.dev/${project.name}/my-artifact-registry-docker-repository/my-wasm-plugin-data:prod`),
 *         labels: {
 *             test_label: "test_value",
 *         },
 *     }],
 * });
 * ```
 * ### Wasm Plugin Basic Generic Repository
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const wasmPlugin = new gcp.networkservices.WasmPlugin("wasm_plugin", {
 *     name: "my-wasm-plugin",
 *     description: "my wasm plugin from a generic repository",
 *     mainVersionId: "v1",
 *     labels: {
 *         test_label: "test_value",
 *     },
 *     logConfig: {
 *         enable: true,
 *         sampleRate: 1,
 *         minLogLevel: "WARN",
 *     },
 *     versions: [{
 *         versionName: "v1",
 *         description: "v1 version of my wasm plugin",
 *         imageUri: project.then(project => `projects/${project.name}/locations/us-central1/repositories/my-artifact-registry-generic-repository/genericArtifacts/my-wasm-plugin-data:v1`),
 *         labels: {
 *             test_label: "test_value",
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * WasmPlugin can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/wasmPlugins/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, WasmPlugin can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:networkservices/wasmPlugin:WasmPlugin default projects/{{project}}/locations/{{location}}/wasmPlugins/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkservices/wasmPlugin:WasmPlugin default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkservices/wasmPlugin:WasmPlugin default {{location}}/{{name}}
 * ```
 */
export class WasmPlugin extends pulumi.CustomResource {
    /**
     * Get an existing WasmPlugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WasmPluginState, opts?: pulumi.CustomResourceOptions): WasmPlugin {
        return new WasmPlugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:networkservices/wasmPlugin:WasmPlugin';

    /**
     * Returns true if the given object is an instance of WasmPlugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WasmPlugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WasmPlugin.__pulumiType;
    }

    /**
     * Output only. The timestamp when the resource was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Optional. A human-readable description of the resource.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Optional. Set of labels associated with the WasmPlugin resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location of the traffic extension
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
     * Note that the settings relate to the logs generated by using logging statements in your Wasm code.
     * Structure is documented below.
     */
    declare public readonly logConfig: pulumi.Output<outputs.networkservices.WasmPluginLogConfig | undefined>;
    /**
     * The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the "versions" field.
     */
    declare public readonly mainVersionId: pulumi.Output<string>;
    /**
     * Identifier. Name of the WasmPlugin resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Output only. The timestamp when the resource was updated.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;
    /**
     * Output only. List of all extensions that use this WasmPlugin resource.
     * Structure is documented below.
     */
    declare public /*out*/ readonly usedBies: pulumi.Output<outputs.networkservices.WasmPluginUsedBy[]>;
    /**
     * All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
     * Structure is documented below.
     */
    declare public readonly versions: pulumi.Output<outputs.networkservices.WasmPluginVersion[]>;

    /**
     * Create a WasmPlugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WasmPluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WasmPluginArgs | WasmPluginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WasmPluginState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["logConfig"] = state?.logConfig;
            resourceInputs["mainVersionId"] = state?.mainVersionId;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["usedBies"] = state?.usedBies;
            resourceInputs["versions"] = state?.versions;
        } else {
            const args = argsOrState as WasmPluginArgs | undefined;
            if (args?.mainVersionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'mainVersionId'");
            }
            if (args?.versions === undefined && !opts.urn) {
                throw new Error("Missing required property 'versions'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["logConfig"] = args?.logConfig;
            resourceInputs["mainVersionId"] = args?.mainVersionId;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["versions"] = args?.versions;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["usedBies"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WasmPlugin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WasmPlugin resources.
 */
export interface WasmPluginState {
    /**
     * Output only. The timestamp when the resource was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. Set of labels associated with the WasmPlugin resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the traffic extension
     */
    location?: pulumi.Input<string>;
    /**
     * Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
     * Note that the settings relate to the logs generated by using logging statements in your Wasm code.
     * Structure is documented below.
     */
    logConfig?: pulumi.Input<inputs.networkservices.WasmPluginLogConfig>;
    /**
     * The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the "versions" field.
     */
    mainVersionId?: pulumi.Input<string>;
    /**
     * Identifier. Name of the WasmPlugin resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. The timestamp when the resource was updated.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Output only. List of all extensions that use this WasmPlugin resource.
     * Structure is documented below.
     */
    usedBies?: pulumi.Input<pulumi.Input<inputs.networkservices.WasmPluginUsedBy>[]>;
    /**
     * All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
     * Structure is documented below.
     */
    versions?: pulumi.Input<pulumi.Input<inputs.networkservices.WasmPluginVersion>[]>;
}

/**
 * The set of arguments for constructing a WasmPlugin resource.
 */
export interface WasmPluginArgs {
    /**
     * Optional. A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. Set of labels associated with the WasmPlugin resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the traffic extension
     */
    location?: pulumi.Input<string>;
    /**
     * Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
     * Note that the settings relate to the logs generated by using logging statements in your Wasm code.
     * Structure is documented below.
     */
    logConfig?: pulumi.Input<inputs.networkservices.WasmPluginLogConfig>;
    /**
     * The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the "versions" field.
     */
    mainVersionId: pulumi.Input<string>;
    /**
     * Identifier. Name of the WasmPlugin resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
     * Structure is documented below.
     */
    versions: pulumi.Input<pulumi.Input<inputs.networkservices.WasmPluginVersion>[]>;
}
