// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Gateway represents the configuration for a proxy, typically a load balancer.
 * It captures the ip:port over which the services are exposed by the proxy,
 * along with any policy configurations. Routes have reference to to Gateways
 * to dictate how requests should be routed by this Gateway.
 *
 * To get more information about Gateway, see:
 *
 * * [API documentation](https://cloud.google.com/traffic-director/docs/reference/network-services/rest/v1/projects.locations.gateways)
 *
 * ## Example Usage
 *
 * ### Network Services Gateway Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.networkservices.Gateway("default", {
 *     name: "my-gateway",
 *     scope: "default-scope-basic",
 *     type: "OPEN_MESH",
 *     ports: [443],
 * });
 * ```
 * ### Network Services Gateway Advanced
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.networkservices.Gateway("default", {
 *     name: "my-gateway",
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     type: "OPEN_MESH",
 *     ports: [443],
 *     scope: "default-scope-advance",
 * });
 * ```
 * ### Network Services Gateway Secure Web Proxy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as std from "@pulumi/std";
 *
 * const _default = new gcp.certificatemanager.Certificate("default", {
 *     name: "my-certificate",
 *     location: "us-central1",
 *     selfManaged: {
 *         pemCertificate: std.file({
 *             input: "test-fixtures/cert.pem",
 *         }).then(invoke => invoke.result),
 *         pemPrivateKey: std.file({
 *             input: "test-fixtures/private-key.pem",
 *         }).then(invoke => invoke.result),
 *     },
 * });
 * const defaultNetwork = new gcp.compute.Network("default", {
 *     name: "my-network",
 *     routingMode: "REGIONAL",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "my-subnetwork-name",
 *     purpose: "PRIVATE",
 *     ipCidrRange: "10.128.0.0/20",
 *     region: "us-central1",
 *     network: defaultNetwork.id,
 *     role: "ACTIVE",
 * });
 * const proxyonlysubnet = new gcp.compute.Subnetwork("proxyonlysubnet", {
 *     name: "my-proxy-only-subnetwork",
 *     purpose: "REGIONAL_MANAGED_PROXY",
 *     ipCidrRange: "192.168.0.0/23",
 *     region: "us-central1",
 *     network: defaultNetwork.id,
 *     role: "ACTIVE",
 * });
 * const defaultGatewaySecurityPolicy = new gcp.networksecurity.GatewaySecurityPolicy("default", {
 *     name: "my-policy-name",
 *     location: "us-central1",
 * });
 * const defaultGatewaySecurityPolicyRule = new gcp.networksecurity.GatewaySecurityPolicyRule("default", {
 *     name: "my-policyrule-name",
 *     location: "us-central1",
 *     gatewaySecurityPolicy: defaultGatewaySecurityPolicy.name,
 *     enabled: true,
 *     priority: 1,
 *     sessionMatcher: "host() == 'example.com'",
 *     basicProfile: "ALLOW",
 * });
 * const defaultGateway = new gcp.networkservices.Gateway("default", {
 *     name: "my-gateway1",
 *     location: "us-central1",
 *     addresses: ["10.128.0.99"],
 *     type: "SECURE_WEB_GATEWAY",
 *     ports: [443],
 *     scope: "my-default-scope1",
 *     certificateUrls: [_default.id],
 *     gatewaySecurityPolicy: defaultGatewaySecurityPolicy.id,
 *     network: defaultNetwork.id,
 *     subnetwork: defaultSubnetwork.id,
 *     deleteSwgAutogenRouterOnDestroy: true,
 * }, {
 *     dependsOn: [proxyonlysubnet],
 * });
 * ```
 * ### Network Services Gateway Multiple Swp Same Network
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as std from "@pulumi/std";
 *
 * const _default = new gcp.certificatemanager.Certificate("default", {
 *     name: "my-certificate",
 *     location: "us-south1",
 *     selfManaged: {
 *         pemCertificate: std.file({
 *             input: "test-fixtures/cert.pem",
 *         }).then(invoke => invoke.result),
 *         pemPrivateKey: std.file({
 *             input: "test-fixtures/private-key.pem",
 *         }).then(invoke => invoke.result),
 *     },
 * });
 * const defaultNetwork = new gcp.compute.Network("default", {
 *     name: "my-network",
 *     routingMode: "REGIONAL",
 *     autoCreateSubnetworks: false,
 * });
 * const defaultSubnetwork = new gcp.compute.Subnetwork("default", {
 *     name: "my-subnetwork-name",
 *     purpose: "PRIVATE",
 *     ipCidrRange: "10.128.0.0/20",
 *     region: "us-south1",
 *     network: defaultNetwork.id,
 *     role: "ACTIVE",
 * });
 * const proxyonlysubnet = new gcp.compute.Subnetwork("proxyonlysubnet", {
 *     name: "my-proxy-only-subnetwork",
 *     purpose: "REGIONAL_MANAGED_PROXY",
 *     ipCidrRange: "192.168.0.0/23",
 *     region: "us-south1",
 *     network: defaultNetwork.id,
 *     role: "ACTIVE",
 * });
 * const defaultGatewaySecurityPolicy = new gcp.networksecurity.GatewaySecurityPolicy("default", {
 *     name: "my-policy-name",
 *     location: "us-south1",
 * });
 * const defaultGatewaySecurityPolicyRule = new gcp.networksecurity.GatewaySecurityPolicyRule("default", {
 *     name: "my-policyrule-name",
 *     location: "us-south1",
 *     gatewaySecurityPolicy: defaultGatewaySecurityPolicy.name,
 *     enabled: true,
 *     priority: 1,
 *     sessionMatcher: "host() == 'example.com'",
 *     basicProfile: "ALLOW",
 * });
 * const defaultGateway = new gcp.networkservices.Gateway("default", {
 *     name: "my-gateway1",
 *     location: "us-south1",
 *     addresses: ["10.128.0.99"],
 *     type: "SECURE_WEB_GATEWAY",
 *     ports: [443],
 *     scope: "my-default-scope1",
 *     certificateUrls: [_default.id],
 *     gatewaySecurityPolicy: defaultGatewaySecurityPolicy.id,
 *     network: defaultNetwork.id,
 *     subnetwork: defaultSubnetwork.id,
 *     deleteSwgAutogenRouterOnDestroy: true,
 * }, {
 *     dependsOn: [proxyonlysubnet],
 * });
 * const gateway2 = new gcp.networkservices.Gateway("gateway2", {
 *     name: "my-gateway2",
 *     location: "us-south1",
 *     addresses: ["10.128.0.98"],
 *     type: "SECURE_WEB_GATEWAY",
 *     ports: [443],
 *     scope: "my-default-scope2",
 *     certificateUrls: [_default.id],
 *     gatewaySecurityPolicy: defaultGatewaySecurityPolicy.id,
 *     network: defaultNetwork.id,
 *     subnetwork: defaultSubnetwork.id,
 *     deleteSwgAutogenRouterOnDestroy: true,
 * }, {
 *     dependsOn: [proxyonlysubnet],
 * });
 * ```
 *
 * ## Import
 *
 * Gateway can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/gateways/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * When using the `pulumi import` command, Gateway can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:networkservices/gateway:Gateway default projects/{{project}}/locations/{{location}}/gateways/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkservices/gateway:Gateway default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkservices/gateway:Gateway default {{location}}/{{name}}
 * ```
 */
export class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayState, opts?: pulumi.CustomResourceOptions): Gateway {
        return new Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:networkservices/gateway:Gateway';

    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }

    /**
     * Zero or one IPv4 or IPv6 address on which the Gateway will receive the traffic.
     * When no address is provided, an IP from the subnetwork is allocated.
     * This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
     * Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6.
     */
    declare public readonly addresses: pulumi.Output<string[]>;
    /**
     * A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
     * This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    declare public readonly certificateUrls: pulumi.Output<string[] | undefined>;
    /**
     * The timestamp when the resource was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * When deleting a gateway of type 'SECURE_WEB_GATEWAY', this boolean option will also delete auto generated router by the gateway creation.
     * If there is no other gateway of type 'SECURE_WEB_GATEWAY' remaining for that region and network it will be deleted.
     */
    declare public readonly deleteSwgAutogenRouterOnDestroy: pulumi.Output<boolean | undefined>;
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    declare public /*out*/ readonly effectiveLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * Determines if envoy will insert internal debug headers into upstream requests.
     * Other Envoy headers may still be injected.
     * By default, envoy will not insert any debug headers.
     * Possible values are: `NONE`, `DEBUG_HEADERS`.
     */
    declare public readonly envoyHeaders: pulumi.Output<string | undefined>;
    /**
     * A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
     * For example: 'projects/*&#47;locations/*&#47;gatewaySecurityPolicies/swg-policy'.
     * This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    declare public readonly gatewaySecurityPolicy: pulumi.Output<string | undefined>;
    /**
     * The IP Version that will be used by this gateway.
     * Possible values are: `IPV4`, `IPV6`.
     */
    declare public readonly ipVersion: pulumi.Output<string | undefined>;
    /**
     * Set of label tags associated with the Gateway resource.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location of the gateway.
     * The default value is `global`.
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * Name of the Gateway resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The relative resource name identifying the VPC network that is using this configuration.
     * For example: 'projects/*&#47;global/networks/network-1'.
     * Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    declare public readonly network: pulumi.Output<string | undefined>;
    /**
     * One or more port numbers (1-65535), on which the Gateway will receive traffic.
     * The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port.
     * Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.
     */
    declare public readonly ports: pulumi.Output<number[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    declare public /*out*/ readonly pulumiLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The routing mode of the Gateway. This field is configurable only for gateways of type SECURE_WEB_GATEWAY. This field is required for gateways of type SECURE_WEB_GATEWAY.
     * Possible values are: `NEXT_HOP_ROUTING_MODE`.
     */
    declare public readonly routingMode: pulumi.Output<string | undefined>;
    /**
     * Immutable. Scope determines how configuration across multiple Gateway instances are merged.
     * The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer.
     * Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;
    /**
     * Server-defined URL of this resource.
     */
    declare public /*out*/ readonly selfLink: pulumi.Output<string>;
    /**
     * A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
     */
    declare public readonly serverTlsPolicy: pulumi.Output<string | undefined>;
    /**
     * The relative resource name identifying the subnetwork in which this SWG is allocated.
     * For example: projects/*&#47;regions/us-central1/subnetworks/network-1.
     * Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    declare public readonly subnetwork: pulumi.Output<string | undefined>;
    /**
     * Immutable. The type of the customer managed gateway.
     * Possible values are: `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * The timestamp when the resource was updated.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayArgs | GatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayState | undefined;
            resourceInputs["addresses"] = state?.addresses;
            resourceInputs["certificateUrls"] = state?.certificateUrls;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["deleteSwgAutogenRouterOnDestroy"] = state?.deleteSwgAutogenRouterOnDestroy;
            resourceInputs["description"] = state?.description;
            resourceInputs["effectiveLabels"] = state?.effectiveLabels;
            resourceInputs["envoyHeaders"] = state?.envoyHeaders;
            resourceInputs["gatewaySecurityPolicy"] = state?.gatewaySecurityPolicy;
            resourceInputs["ipVersion"] = state?.ipVersion;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["network"] = state?.network;
            resourceInputs["ports"] = state?.ports;
            resourceInputs["project"] = state?.project;
            resourceInputs["pulumiLabels"] = state?.pulumiLabels;
            resourceInputs["routingMode"] = state?.routingMode;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["selfLink"] = state?.selfLink;
            resourceInputs["serverTlsPolicy"] = state?.serverTlsPolicy;
            resourceInputs["subnetwork"] = state?.subnetwork;
            resourceInputs["type"] = state?.type;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as GatewayArgs | undefined;
            if (args?.ports === undefined && !opts.urn) {
                throw new Error("Missing required property 'ports'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["addresses"] = args?.addresses;
            resourceInputs["certificateUrls"] = args?.certificateUrls;
            resourceInputs["deleteSwgAutogenRouterOnDestroy"] = args?.deleteSwgAutogenRouterOnDestroy;
            resourceInputs["description"] = args?.description;
            resourceInputs["envoyHeaders"] = args?.envoyHeaders;
            resourceInputs["gatewaySecurityPolicy"] = args?.gatewaySecurityPolicy;
            resourceInputs["ipVersion"] = args?.ipVersion;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["network"] = args?.network;
            resourceInputs["ports"] = args?.ports;
            resourceInputs["project"] = args?.project;
            resourceInputs["routingMode"] = args?.routingMode;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["serverTlsPolicy"] = args?.serverTlsPolicy;
            resourceInputs["subnetwork"] = args?.subnetwork;
            resourceInputs["type"] = args?.type;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Gateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Gateway resources.
 */
export interface GatewayState {
    /**
     * Zero or one IPv4 or IPv6 address on which the Gateway will receive the traffic.
     * When no address is provided, an IP from the subnetwork is allocated.
     * This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
     * Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6.
     */
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
     * This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    certificateUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The timestamp when the resource was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * When deleting a gateway of type 'SECURE_WEB_GATEWAY', this boolean option will also delete auto generated router by the gateway creation.
     * If there is no other gateway of type 'SECURE_WEB_GATEWAY' remaining for that region and network it will be deleted.
     */
    deleteSwgAutogenRouterOnDestroy?: pulumi.Input<boolean>;
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Determines if envoy will insert internal debug headers into upstream requests.
     * Other Envoy headers may still be injected.
     * By default, envoy will not insert any debug headers.
     * Possible values are: `NONE`, `DEBUG_HEADERS`.
     */
    envoyHeaders?: pulumi.Input<string>;
    /**
     * A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
     * For example: 'projects/*&#47;locations/*&#47;gatewaySecurityPolicies/swg-policy'.
     * This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    gatewaySecurityPolicy?: pulumi.Input<string>;
    /**
     * The IP Version that will be used by this gateway.
     * Possible values are: `IPV4`, `IPV6`.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * Set of label tags associated with the Gateway resource.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the gateway.
     * The default value is `global`.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the Gateway resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The relative resource name identifying the VPC network that is using this configuration.
     * For example: 'projects/*&#47;global/networks/network-1'.
     * Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    network?: pulumi.Input<string>;
    /**
     * One or more port numbers (1-65535), on which the Gateway will receive traffic.
     * The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port.
     * Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.
     */
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The routing mode of the Gateway. This field is configurable only for gateways of type SECURE_WEB_GATEWAY. This field is required for gateways of type SECURE_WEB_GATEWAY.
     * Possible values are: `NEXT_HOP_ROUTING_MODE`.
     */
    routingMode?: pulumi.Input<string>;
    /**
     * Immutable. Scope determines how configuration across multiple Gateway instances are merged.
     * The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer.
     * Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     */
    scope?: pulumi.Input<string>;
    /**
     * Server-defined URL of this resource.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
     */
    serverTlsPolicy?: pulumi.Input<string>;
    /**
     * The relative resource name identifying the subnetwork in which this SWG is allocated.
     * For example: projects/*&#47;regions/us-central1/subnetworks/network-1.
     * Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    subnetwork?: pulumi.Input<string>;
    /**
     * Immutable. The type of the customer managed gateway.
     * Possible values are: `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
     */
    type?: pulumi.Input<string>;
    /**
     * The timestamp when the resource was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    /**
     * Zero or one IPv4 or IPv6 address on which the Gateway will receive the traffic.
     * When no address is provided, an IP from the subnetwork is allocated.
     * This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
     * Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6.
     */
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
     * This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    certificateUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When deleting a gateway of type 'SECURE_WEB_GATEWAY', this boolean option will also delete auto generated router by the gateway creation.
     * If there is no other gateway of type 'SECURE_WEB_GATEWAY' remaining for that region and network it will be deleted.
     */
    deleteSwgAutogenRouterOnDestroy?: pulumi.Input<boolean>;
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines if envoy will insert internal debug headers into upstream requests.
     * Other Envoy headers may still be injected.
     * By default, envoy will not insert any debug headers.
     * Possible values are: `NONE`, `DEBUG_HEADERS`.
     */
    envoyHeaders?: pulumi.Input<string>;
    /**
     * A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
     * For example: 'projects/*&#47;locations/*&#47;gatewaySecurityPolicies/swg-policy'.
     * This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    gatewaySecurityPolicy?: pulumi.Input<string>;
    /**
     * The IP Version that will be used by this gateway.
     * Possible values are: `IPV4`, `IPV6`.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * Set of label tags associated with the Gateway resource.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the gateway.
     * The default value is `global`.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the Gateway resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The relative resource name identifying the VPC network that is using this configuration.
     * For example: 'projects/*&#47;global/networks/network-1'.
     * Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    network?: pulumi.Input<string>;
    /**
     * One or more port numbers (1-65535), on which the Gateway will receive traffic.
     * The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port.
     * Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.
     */
    ports: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The routing mode of the Gateway. This field is configurable only for gateways of type SECURE_WEB_GATEWAY. This field is required for gateways of type SECURE_WEB_GATEWAY.
     * Possible values are: `NEXT_HOP_ROUTING_MODE`.
     */
    routingMode?: pulumi.Input<string>;
    /**
     * Immutable. Scope determines how configuration across multiple Gateway instances are merged.
     * The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer.
     * Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     */
    scope?: pulumi.Input<string>;
    /**
     * A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
     */
    serverTlsPolicy?: pulumi.Input<string>;
    /**
     * The relative resource name identifying the subnetwork in which this SWG is allocated.
     * For example: projects/*&#47;regions/us-central1/subnetworks/network-1.
     * Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
     */
    subnetwork?: pulumi.Input<string>;
    /**
     * Immutable. The type of the customer managed gateway.
     * Possible values are: `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
     */
    type: pulumi.Input<string>;
}
