// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * AuthzExtension is a resource that allows traffic forwarding to a callout backend service to make an authorization decision.
 *
 * To get more information about AuthzExtension, see:
 *
 * * [API documentation](https://cloud.google.com/service-extensions/docs/reference/rest/v1beta1/projects.locations.authzExtensions)
 *
 * ## Example Usage
 *
 * ### Network Services Authz Extension Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.RegionBackendService("default", {
 *     name: "authz-service",
 *     project: "my-project-name",
 *     region: "us-west1",
 *     protocol: "HTTP2",
 *     loadBalancingScheme: "INTERNAL_MANAGED",
 *     portName: "grpc",
 * });
 * const defaultAuthzExtension = new gcp.networkservices.AuthzExtension("default", {
 *     name: "my-authz-ext",
 *     project: "my-project-name",
 *     location: "us-west1",
 *     description: "my description",
 *     loadBalancingScheme: "INTERNAL_MANAGED",
 *     authority: "ext11.com",
 *     service: _default.selfLink,
 *     timeout: "0.1s",
 *     failOpen: false,
 *     forwardHeaders: ["Authorization"],
 * });
 * ```
 *
 * ## Import
 *
 * AuthzExtension can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/authzExtensions/{{name}}`
 *
 * * `{{project}}/{{location}}/{{name}}`
 *
 * * `{{location}}/{{name}}`
 *
 * * `{{name}}`
 *
 * When using the `pulumi import` command, AuthzExtension can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:networkservices/authzExtension:AuthzExtension default projects/{{project}}/locations/{{location}}/authzExtensions/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkservices/authzExtension:AuthzExtension default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkservices/authzExtension:AuthzExtension default {{location}}/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:networkservices/authzExtension:AuthzExtension default {{name}}
 * ```
 */
export class AuthzExtension extends pulumi.CustomResource {
    /**
     * Get an existing AuthzExtension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthzExtensionState, opts?: pulumi.CustomResourceOptions): AuthzExtension {
        return new AuthzExtension(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:networkservices/authzExtension:AuthzExtension';

    /**
     * Returns true if the given object is an instance of AuthzExtension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthzExtension {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthzExtension.__pulumiType;
    }

    /**
     * The :authority header in the gRPC request sent from Envoy to the extension service.
     */
    public readonly authority!: pulumi.Output<string>;
    /**
     * The timestamp when the resource was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A human-readable description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Determines how the proxy behaves if the call to the extension fails or times out.
     * When set to TRUE, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to FALSE or the default setting of FALSE is used, one of the following happens:
     * * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer.
     * * If response headers have been delivered, then the HTTP stream to the downstream client is reset.
     */
    public readonly failOpen!: pulumi.Output<boolean>;
    /**
     * List of the HTTP headers to forward to the extension (from the client). If omitted, all headers are sent. Each element is a string indicating the header name.
     */
    public readonly forwardHeaders!: pulumi.Output<string[] | undefined>;
    /**
     * Set of labels associated with the AuthzExtension resource.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
     * For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
     * Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
     */
    public readonly loadBalancingScheme!: pulumi.Output<string>;
    /**
     * The location of the resource.
     *
     *
     * - - -
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The metadata provided here is included as part of the metadataContext (of type google.protobuf.Struct) in the ProcessingRequest message sent to the extension server. The metadata is available under the namespace com.google.authz_extension.<resourceName>. The following variables are supported in the metadata Struct:
     * {forwarding_rule_id} - substituted with the forwarding rule's fully qualified resource name.
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Identifier. Name of the AuthzExtension resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The reference to the service that runs the extension.
     * To configure a callout extension, service must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format:
     * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService} or https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}.
     */
    public readonly service!: pulumi.Output<string>;
    /**
     * Specifies the timeout for each individual message on the stream. The timeout must be between 10-10000 milliseconds.
     */
    public readonly timeout!: pulumi.Output<string>;
    /**
     * The timestamp when the resource was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The format of communication supported by the callout extension. Will be set to EXT_PROC_GRPC by the backend if no value is set.
     * Possible values are: `WIRE_FORMAT_UNSPECIFIED`, `EXT_PROC_GRPC`.
     */
    public readonly wireFormat!: pulumi.Output<string>;

    /**
     * Create a AuthzExtension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthzExtensionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthzExtensionArgs | AuthzExtensionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthzExtensionState | undefined;
            resourceInputs["authority"] = state ? state.authority : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["failOpen"] = state ? state.failOpen : undefined;
            resourceInputs["forwardHeaders"] = state ? state.forwardHeaders : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["loadBalancingScheme"] = state ? state.loadBalancingScheme : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["wireFormat"] = state ? state.wireFormat : undefined;
        } else {
            const args = argsOrState as AuthzExtensionArgs | undefined;
            if ((!args || args.authority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authority'");
            }
            if ((!args || args.loadBalancingScheme === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancingScheme'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            if ((!args || args.timeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeout'");
            }
            resourceInputs["authority"] = args ? args.authority : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["failOpen"] = args ? args.failOpen : undefined;
            resourceInputs["forwardHeaders"] = args ? args.forwardHeaders : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["loadBalancingScheme"] = args ? args.loadBalancingScheme : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["wireFormat"] = args ? args.wireFormat : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AuthzExtension.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthzExtension resources.
 */
export interface AuthzExtensionState {
    /**
     * The :authority header in the gRPC request sent from Envoy to the extension service.
     */
    authority?: pulumi.Input<string>;
    /**
     * The timestamp when the resource was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Determines how the proxy behaves if the call to the extension fails or times out.
     * When set to TRUE, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to FALSE or the default setting of FALSE is used, one of the following happens:
     * * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer.
     * * If response headers have been delivered, then the HTTP stream to the downstream client is reset.
     */
    failOpen?: pulumi.Input<boolean>;
    /**
     * List of the HTTP headers to forward to the extension (from the client). If omitted, all headers are sent. Each element is a string indicating the header name.
     */
    forwardHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of labels associated with the AuthzExtension resource.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
     * For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
     * Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
     */
    loadBalancingScheme?: pulumi.Input<string>;
    /**
     * The location of the resource.
     *
     *
     * - - -
     */
    location?: pulumi.Input<string>;
    /**
     * The metadata provided here is included as part of the metadataContext (of type google.protobuf.Struct) in the ProcessingRequest message sent to the extension server. The metadata is available under the namespace com.google.authz_extension.<resourceName>. The following variables are supported in the metadata Struct:
     * {forwarding_rule_id} - substituted with the forwarding rule's fully qualified resource name.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Identifier. Name of the AuthzExtension resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The reference to the service that runs the extension.
     * To configure a callout extension, service must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format:
     * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService} or https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}.
     */
    service?: pulumi.Input<string>;
    /**
     * Specifies the timeout for each individual message on the stream. The timeout must be between 10-10000 milliseconds.
     */
    timeout?: pulumi.Input<string>;
    /**
     * The timestamp when the resource was updated.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The format of communication supported by the callout extension. Will be set to EXT_PROC_GRPC by the backend if no value is set.
     * Possible values are: `WIRE_FORMAT_UNSPECIFIED`, `EXT_PROC_GRPC`.
     */
    wireFormat?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthzExtension resource.
 */
export interface AuthzExtensionArgs {
    /**
     * The :authority header in the gRPC request sent from Envoy to the extension service.
     */
    authority: pulumi.Input<string>;
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines how the proxy behaves if the call to the extension fails or times out.
     * When set to TRUE, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to FALSE or the default setting of FALSE is used, one of the following happens:
     * * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer.
     * * If response headers have been delivered, then the HTTP stream to the downstream client is reset.
     */
    failOpen?: pulumi.Input<boolean>;
    /**
     * List of the HTTP headers to forward to the extension (from the client). If omitted, all headers are sent. Each element is a string indicating the header name.
     */
    forwardHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of labels associated with the AuthzExtension resource.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * All backend services and forwarding rules referenced by this extension must share the same load balancing scheme.
     * For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
     * Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
     */
    loadBalancingScheme: pulumi.Input<string>;
    /**
     * The location of the resource.
     *
     *
     * - - -
     */
    location: pulumi.Input<string>;
    /**
     * The metadata provided here is included as part of the metadataContext (of type google.protobuf.Struct) in the ProcessingRequest message sent to the extension server. The metadata is available under the namespace com.google.authz_extension.<resourceName>. The following variables are supported in the metadata Struct:
     * {forwarding_rule_id} - substituted with the forwarding rule's fully qualified resource name.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Identifier. Name of the AuthzExtension resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The reference to the service that runs the extension.
     * To configure a callout extension, service must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format:
     * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService} or https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}.
     */
    service: pulumi.Input<string>;
    /**
     * Specifies the timeout for each individual message on the stream. The timeout must be between 10-10000 milliseconds.
     */
    timeout: pulumi.Input<string>;
    /**
     * The format of communication supported by the callout extension. Will be set to EXT_PROC_GRPC by the backend if no value is set.
     * Possible values are: `WIRE_FORMAT_UNSPECIFIED`, `EXT_PROC_GRPC`.
     */
    wireFormat?: pulumi.Input<string>;
}
