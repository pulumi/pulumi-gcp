// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DomainMappingArgs, DomainMappingState } from "./domainMapping";
export type DomainMapping = import("./domainMapping").DomainMapping;
export const DomainMapping: typeof import("./domainMapping").DomainMapping = null as any;
utilities.lazyLoad(exports, ["DomainMapping"], () => require("./domainMapping"));

export { GetLocationsArgs, GetLocationsResult, GetLocationsOutputArgs } from "./getLocations";
export const getLocations: typeof import("./getLocations").getLocations = null as any;
export const getLocationsOutput: typeof import("./getLocations").getLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getLocations","getLocationsOutput"], () => require("./getLocations"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { IamBindingArgs, IamBindingState } from "./iamBinding";
export type IamBinding = import("./iamBinding").IamBinding;
export const IamBinding: typeof import("./iamBinding").IamBinding = null as any;
utilities.lazyLoad(exports, ["IamBinding"], () => require("./iamBinding"));

export { IamMemberArgs, IamMemberState } from "./iamMember";
export type IamMember = import("./iamMember").IamMember;
export const IamMember: typeof import("./iamMember").IamMember = null as any;
utilities.lazyLoad(exports, ["IamMember"], () => require("./iamMember"));

export { IamPolicyArgs, IamPolicyState } from "./iamPolicy";
export type IamPolicy = import("./iamPolicy").IamPolicy;
export const IamPolicy: typeof import("./iamPolicy").IamPolicy = null as any;
utilities.lazyLoad(exports, ["IamPolicy"], () => require("./iamPolicy"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:cloudrun/domainMapping:DomainMapping":
                return new DomainMapping(name, <any>undefined, { urn })
            case "gcp:cloudrun/iamBinding:IamBinding":
                return new IamBinding(name, <any>undefined, { urn })
            case "gcp:cloudrun/iamMember:IamMember":
                return new IamMember(name, <any>undefined, { urn })
            case "gcp:cloudrun/iamPolicy:IamPolicy":
                return new IamPolicy(name, <any>undefined, { urn })
            case "gcp:cloudrun/service:Service":
                return new Service(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "cloudrun/domainMapping", _module)
pulumi.runtime.registerResourceModule("gcp", "cloudrun/iamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "cloudrun/iamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "cloudrun/iamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "cloudrun/service", _module)
