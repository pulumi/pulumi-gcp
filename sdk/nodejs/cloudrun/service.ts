// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Service acts as a top-level container that manages a set of Routes and
 * Configurations which implement a network service. Service exists to provide a
 * singular abstraction which can be access controlled, reasoned about, and
 * which encapsulates software lifecycle decisions such as rollout policy and
 * team resource ownership. Service acts only as an orchestrator of the
 * underlying Routes and Configurations (much as a kubernetes Deployment
 * orchestrates ReplicaSets).
 *
 * The Service's controller will track the statuses of its owned Configuration
 * and Route, reflecting their statuses and conditions as its own.
 *
 * See also:
 * https://github.com/knative/specs/blob/main/specs/serving/overview.md
 *
 * To get more information about Service, see:
 *
 * * [API documentation](https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/run/docs/)
 *
 * > **Warning:** `googleCloudrunService` creates a Managed Google Cloud Run Service. If you need to create
 * a Cloud Run Service on Anthos(GKE/VMWare) then you will need to create it using the kubernetes alpha provider.
 * Have a look at the Cloud Run Anthos example below.
 *
 * ## Example Usage
 * ### Cloud Run Service Pubsub
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "gcr.io/cloudrun/hello",
 *             }],
 *         },
 *     },
 *     traffics: [{
 *         percent: 100,
 *         latestRevision: true,
 *     }],
 * });
 * const sa = new gcp.serviceaccount.Account("sa", {
 *     accountId: "cloud-run-pubsub-invoker",
 *     displayName: "Cloud Run Pub/Sub Invoker",
 * });
 * const binding = new gcp.cloudrun.IamBinding("binding", {
 *     location: _default.location,
 *     service: _default.name,
 *     role: "roles/run.invoker",
 *     members: [pulumi.interpolate`serviceAccount:${sa.email}`],
 * });
 * const project = new gcp.projects.IAMBinding("project", {
 *     role: "roles/iam.serviceAccountTokenCreator",
 *     members: [pulumi.interpolate`serviceAccount:${sa.email}`],
 * });
 * const topic = new gcp.pubsub.Topic("topic", {});
 * const subscription = new gcp.pubsub.Subscription("subscription", {
 *     topic: topic.name,
 *     pushConfig: {
 *         pushEndpoint: _default.statuses.apply(statuses => statuses[0].url),
 *         oidcToken: {
 *             serviceAccountEmail: sa.email,
 *         },
 *         attributes: {
 *             "x-goog-version": "v1",
 *         },
 *     },
 * });
 * ```
 * ### Cloud Run Service Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultService = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *         },
 *     },
 *     traffics: [{
 *         latestRevision: true,
 *         percent: 100,
 *     }],
 * });
 * ```
 * ### Cloud Run Service Sql
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.sql.DatabaseInstance("instance", {
 *     region: "us-east1",
 *     databaseVersion: "MYSQL_5_7",
 *     settings: {
 *         tier: "db-f1-micro",
 *     },
 *     deletionProtection: true,
 * });
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *         },
 *         metadata: {
 *             annotations: {
 *                 "autoscaling.knative.dev/maxScale": "1000",
 *                 "run.googleapis.com/cloudsql-instances": instance.connectionName,
 *                 "run.googleapis.com/client-name": "demo",
 *             },
 *         },
 *     },
 *     autogenerateRevisionName: true,
 * });
 * ```
 * ### Cloud Run Service Noauth
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // Example of how to deploy a publicly-accessible Cloud Run application
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *         },
 *     },
 * });
 * const noauthIAMPolicy = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/run.invoker",
 *         members: ["allUsers"],
 *     }],
 * });
 * const noauthIamPolicy = new gcp.cloudrun.IamPolicy("noauthIamPolicy", {
 *     location: _default.location,
 *     project: _default.project,
 *     service: _default.name,
 *     policyData: noauthIAMPolicy.then(noauthIAMPolicy => noauthIAMPolicy.policyData),
 * });
 * ```
 * ### Cloud Run Service Multiple Environment Variables
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *                 envs: [
 *                     {
 *                         name: "SOURCE",
 *                         value: "remote",
 *                     },
 *                     {
 *                         name: "TARGET",
 *                         value: "home",
 *                     },
 *                 ],
 *             }],
 *         },
 *     },
 *     metadata: {
 *         annotations: {
 *             "generated-by": "magic-modules",
 *         },
 *     },
 *     traffics: [{
 *         percent: 100,
 *         latestRevision: true,
 *     }],
 *     autogenerateRevisionName: true,
 * });
 * ```
 * ### Cloud Run Service Traffic Split
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultService = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         metadata: {
 *             name: "cloudrun-srv-green",
 *         },
 *         spec: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *         },
 *     },
 *     traffics: [
 *         {
 *             percent: 25,
 *             revisionName: "cloudrun-srv-green",
 *         },
 *         {
 *             percent: 75,
 *             // This revision needs to already exist
 *             revisionName: "cloudrun-srv-blue",
 *         },
 *     ],
 * });
 * ```
 * ### Cloud Run Service Scheduled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const runApi = new gcp.projects.Service("runApi", {
 *     project: "my-project-name",
 *     service: "run.googleapis.com",
 *     disableDependentServices: true,
 *     disableOnDestroy: false,
 * }, {
 *     provider: google_beta,
 * });
 * const iamApi = new gcp.projects.Service("iamApi", {
 *     project: "my-project-name",
 *     service: "iam.googleapis.com",
 *     disableOnDestroy: false,
 * }, {
 *     provider: google_beta,
 * });
 * const resourceManagerApi = new gcp.projects.Service("resourceManagerApi", {
 *     project: "my-project-name",
 *     service: "cloudresourcemanager.googleapis.com",
 *     disableOnDestroy: false,
 * }, {
 *     provider: google_beta,
 * });
 * const schedulerApi = new gcp.projects.Service("schedulerApi", {
 *     project: "my-project-name",
 *     service: "cloudscheduler.googleapis.com",
 *     disableOnDestroy: false,
 * }, {
 *     provider: google_beta,
 * });
 * const defaultService = new gcp.cloudrun.Service("defaultService", {
 *     project: "my-project-name",
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *         },
 *     },
 *     traffics: [{
 *         percent: 100,
 *         latestRevision: true,
 *     }],
 * }, {
 *     provider: google_beta,
 *     dependsOn: [runApi],
 * });
 * const defaultAccount = new gcp.serviceaccount.Account("defaultAccount", {
 *     project: "my-project-name",
 *     accountId: "scheduler-sa",
 *     description: "Cloud Scheduler service account; used to trigger scheduled Cloud Run jobs.",
 *     displayName: "scheduler-sa",
 * }, {
 *     provider: google_beta,
 *     dependsOn: [iamApi],
 * });
 * const defaultJob = new gcp.cloudscheduler.Job("defaultJob", {
 *     description: "Invoke a Cloud Run container on a schedule.",
 *     schedule: "*&#47;8 * * * *",
 *     timeZone: "America/New_York",
 *     attemptDeadline: "320s",
 *     retryConfig: {
 *         retryCount: 1,
 *     },
 *     httpTarget: {
 *         httpMethod: "POST",
 *         uri: defaultService.statuses.apply(statuses => statuses[0].url),
 *         oidcToken: {
 *             serviceAccountEmail: defaultAccount.email,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 *     dependsOn: [schedulerApi],
 * });
 * const defaultIamMember = new gcp.cloudrun.IamMember("defaultIamMember", {
 *     project: "my-project-name",
 *     location: defaultService.location,
 *     service: defaultService.name,
 *     role: "roles/run.invoker",
 *     member: pulumi.interpolate`serviceAccount:${defaultAccount.email}`,
 * });
 * ```
 * ### Cloud Run Service Secret Environment Variables
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const secret = new gcp.secretmanager.Secret("secret", {
 *     secretId: "secret",
 *     replication: {
 *         automatic: true,
 *     },
 * });
 * const secret_version_data = new gcp.secretmanager.SecretVersion("secret-version-data", {
 *     secret: secret.name,
 *     secretData: "secret-data",
 * });
 * const secret_access = new gcp.secretmanager.SecretIamMember("secret-access", {
 *     secretId: secret.id,
 *     role: "roles/secretmanager.secretAccessor",
 *     member: project.then(project => `serviceAccount:${project.number}-compute@developer.gserviceaccount.com`),
 * }, {
 *     dependsOn: [secret],
 * });
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "gcr.io/cloudrun/hello",
 *                 envs: [{
 *                     name: "SECRET_ENV_VAR",
 *                     valueFrom: {
 *                         secretKeyRef: {
 *                             name: secret.secretId,
 *                             key: "1",
 *                         },
 *                     },
 *                 }],
 *             }],
 *         },
 *     },
 *     metadata: {
 *         annotations: {
 *             "generated-by": "magic-modules",
 *         },
 *     },
 *     traffics: [{
 *         percent: 100,
 *         latestRevision: true,
 *     }],
 *     autogenerateRevisionName: true,
 * }, {
 *     dependsOn: [secret_version_data],
 * });
 * ```
 * ### Cloud Run Service Secret Volumes
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const secret = new gcp.secretmanager.Secret("secret", {
 *     secretId: "secret",
 *     replication: {
 *         automatic: true,
 *     },
 * });
 * const secret_version_data = new gcp.secretmanager.SecretVersion("secret-version-data", {
 *     secret: secret.name,
 *     secretData: "secret-data",
 * });
 * const secret_access = new gcp.secretmanager.SecretIamMember("secret-access", {
 *     secretId: secret.id,
 *     role: "roles/secretmanager.secretAccessor",
 *     member: project.then(project => `serviceAccount:${project.number}-compute@developer.gserviceaccount.com`),
 * }, {
 *     dependsOn: [secret],
 * });
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "gcr.io/cloudrun/hello",
 *                 volumeMounts: [{
 *                     name: "a-volume",
 *                     mountPath: "/secrets",
 *                 }],
 *             }],
 *             volumes: [{
 *                 name: "a-volume",
 *                 secret: {
 *                     secretName: secret.secretId,
 *                     defaultMode: 292,
 *                     items: [{
 *                         key: "1",
 *                         path: "my-secret",
 *                         mode: 256,
 *                     }],
 *                 },
 *             }],
 *         },
 *     },
 *     metadata: {
 *         annotations: {
 *             "generated-by": "magic-modules",
 *         },
 *     },
 *     traffics: [{
 *         percent: 100,
 *         latestRevision: true,
 *     }],
 *     autogenerateRevisionName: true,
 * }, {
 *     dependsOn: [secret_version_data],
 * });
 * ```
 * ### Cloud Run Service Ingress
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "gcr.io/cloudrun/hello",
 *             }],
 *         },
 *     },
 *     traffics: [{
 *         percent: 100,
 *         latestRevision: true,
 *     }],
 *     metadata: {
 *         annotations: {
 *             "run.googleapis.com/ingress": "internal",
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Eventarc Basic Tf
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const projectProject = gcp.organizations.getProject({});
 * // Enable Cloud Run API
 * const run = new gcp.projects.Service("run", {
 *     service: "run.googleapis.com",
 *     disableOnDestroy: false,
 * }, {
 *     provider: google_beta,
 * });
 * // Enable Eventarc API
 * const eventarc = new gcp.projects.Service("eventarc", {
 *     service: "eventarc.googleapis.com",
 *     disableOnDestroy: false,
 * }, {
 *     provider: google_beta,
 * });
 * // Deploy Cloud Run service
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-east1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "gcr.io/cloudrun/hello",
 *             }],
 *         },
 *     },
 *     traffics: [{
 *         percent: 100,
 *         latestRevision: true,
 *     }],
 * }, {
 *     provider: google_beta,
 *     dependsOn: [run],
 * });
 * // Make Cloud Run service publicly accessible
 * const allUsers = new gcp.cloudrun.IamMember("allUsers", {
 *     service: _default.name,
 *     location: _default.location,
 *     role: "roles/run.invoker",
 *     member: "allUsers",
 * }, {
 *     provider: google_beta,
 * });
 * // Create a Pub/Sub trigger
 * const trigger_pubsub_tf = new gcp.eventarc.Trigger("trigger-pubsub-tf", {
 *     location: _default.location,
 *     matchingCriterias: [{
 *         attribute: "type",
 *         value: "google.cloud.pubsub.topic.v1.messagePublished",
 *     }],
 *     destination: {
 *         cloudRunService: {
 *             service: _default.name,
 *             region: _default.location,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 *     dependsOn: [eventarc],
 * });
 * // Give default Compute service account eventarc.eventReceiver role
 * const projectIAMBinding = new gcp.projects.IAMBinding("projectIAMBinding", {
 *     project: projectProject.then(projectProject => projectProject.id),
 *     role: "roles/eventarc.eventReceiver",
 *     members: [projectProject.then(projectProject => `serviceAccount:${projectProject.number}-compute@developer.gserviceaccount.com`)],
 * }, {
 *     provider: google_beta,
 * });
 * // Create an AuditLog for Cloud Storage trigger
 * const trigger_auditlog_tf = new gcp.eventarc.Trigger("trigger-auditlog-tf", {
 *     location: _default.location,
 *     project: projectProject.then(projectProject => projectProject.id),
 *     matchingCriterias: [
 *         {
 *             attribute: "type",
 *             value: "google.cloud.audit.log.v1.written",
 *         },
 *         {
 *             attribute: "serviceName",
 *             value: "storage.googleapis.com",
 *         },
 *         {
 *             attribute: "methodName",
 *             value: "storage.objects.create",
 *         },
 *     ],
 *     destination: {
 *         cloudRunService: {
 *             service: _default.name,
 *             region: _default.location,
 *         },
 *     },
 *     serviceAccount: projectProject.then(projectProject => `${projectProject.number}-compute@developer.gserviceaccount.com`),
 * }, {
 *     provider: google_beta,
 *     dependsOn: [eventarc],
 * });
 * ```
 * ### Cloud Run Service Multiple Regions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // Cloud Run service replicated across multiple GCP regions
 * const computeApi = new gcp.projects.Service("computeApi", {
 *     project: "my-project-name",
 *     service: "compute.googleapis.com",
 *     disableDependentServices: true,
 *     disableOnDestroy: false,
 * }, {
 *     provider: google_beta,
 * });
 * const runApi = new gcp.projects.Service("runApi", {
 *     project: "my-project-name",
 *     service: "run.googleapis.com",
 *     disableDependentServices: true,
 *     disableOnDestroy: false,
 * }, {
 *     provider: google_beta,
 * });
 * const config = new pulumi.Config();
 * const domainName = config.get("domainName") || "example.com";
 * const runRegions = config.getObject("runRegions") || [
 *     "us-central1",
 *     "europe-west1",
 * ];
 * const lbDefaultGlobalAddress = new gcp.compute.GlobalAddress("lbDefaultGlobalAddress", {project: "my-project-name"}, {
 *     provider: google_beta,
 *     dependsOn: [computeApi],
 * });
 * const runDefault: gcp.cloudrun.Service[];
 * for (const range = {value: 0}; range.value < runRegions.length; range.value++) {
 *     runDefault.push(new gcp.cloudrun.Service(`runDefault-${range.value}`, {
 *         project: "my-project-name",
 *         location: runRegions[range.value],
 *         template: {
 *             spec: {
 *                 containers: [{
 *                     image: "us-docker.pkg.dev/cloudrun/container/hello",
 *                 }],
 *             },
 *         },
 *         traffics: [{
 *             percent: 100,
 *             latestRevision: true,
 *         }],
 *     }, {
 *     provider: google_beta,
 *     dependsOn: [runApi],
 * }));
 * }
 * const lbDefaultRegionNetworkEndpointGroup: gcp.compute.RegionNetworkEndpointGroup[];
 * for (const range = {value: 0}; range.value < runRegions.length; range.value++) {
 *     lbDefaultRegionNetworkEndpointGroup.push(new gcp.compute.RegionNetworkEndpointGroup(`lbDefaultRegionNetworkEndpointGroup-${range.value}`, {
 *         project: "my-project-name",
 *         networkEndpointType: "SERVERLESS",
 *         region: runRegions[range.value],
 *         cloudRun: {
 *             service: runDefault[count.index].name,
 *         },
 *     }, {
 *     provider: google_beta,
 * }));
 * }
 * const lbDefaultBackendService = new gcp.compute.BackendService("lbDefaultBackendService", {
 *     project: "my-project-name",
 *     loadBalancingScheme: "EXTERNAL_MANAGED",
 *     backends: [
 *         {
 *             balancingMode: "UTILIZATION",
 *             capacityScaler: 0.85,
 *             group: lbDefaultRegionNetworkEndpointGroup[0].id,
 *         },
 *         {
 *             balancingMode: "UTILIZATION",
 *             capacityScaler: 0.85,
 *             group: lbDefaultRegionNetworkEndpointGroup[1].id,
 *         },
 *     ],
 * }, {
 *     provider: google_beta,
 *     dependsOn: [computeApi],
 * });
 * const lbDefaultURLMap = new gcp.compute.URLMap("lbDefaultURLMap", {
 *     project: "my-project-name",
 *     defaultService: lbDefaultBackendService.id,
 *     pathMatchers: [{
 *         name: "allpaths",
 *         defaultService: lbDefaultBackendService.id,
 *         routeRules: [{
 *             priority: 1,
 *             urlRedirect: {
 *                 httpsRedirect: true,
 *                 redirectResponseCode: "MOVED_PERMANENTLY_DEFAULT",
 *             },
 *         }],
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * const lbDefaultManagedSslCertificate = new gcp.compute.ManagedSslCertificate("lbDefaultManagedSslCertificate", {
 *     project: "my-project-name",
 *     managed: {
 *         domains: [domainName],
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const lbDefaultTargetHttpsProxy = new gcp.compute.TargetHttpsProxy("lbDefaultTargetHttpsProxy", {
 *     project: "my-project-name",
 *     urlMap: lbDefaultURLMap.id,
 *     sslCertificates: [lbDefaultManagedSslCertificate.name],
 * }, {
 *     provider: google_beta,
 *     dependsOn: [lbDefaultManagedSslCertificate],
 * });
 * const lbDefaultGlobalForwardingRule = new gcp.compute.GlobalForwardingRule("lbDefaultGlobalForwardingRule", {
 *     project: "my-project-name",
 *     loadBalancingScheme: "EXTERNAL_MANAGED",
 *     target: lbDefaultTargetHttpsProxy.id,
 *     ipAddress: lbDefaultGlobalAddress.id,
 *     portRange: "443",
 * }, {
 *     provider: google_beta,
 *     dependsOn: [lbDefaultTargetHttpsProxy],
 * });
 * export const loadBalancerIpAddr = lbDefaultGlobalAddress.address;
 * const runAllowUnauthenticated: gcp.cloudrun.IamMember[];
 * for (const range = {value: 0}; range.value < runRegions.length; range.value++) {
 *     runAllowUnauthenticated.push(new gcp.cloudrun.IamMember(`runAllowUnauthenticated-${range.value}`, {
 *         project: "my-project-name",
 *         location: runDefault[range.value].location,
 *         service: runDefault[range.value].name,
 *         role: "roles/run.invoker",
 *         member: "allUsers",
 *     }, {
 *     provider: google_beta,
 * }));
 * }
 * const httpsDefaultURLMap = new gcp.compute.URLMap("httpsDefaultURLMap", {
 *     project: "my-project-name",
 *     defaultUrlRedirect: {
 *         redirectResponseCode: "MOVED_PERMANENTLY_DEFAULT",
 *         httpsRedirect: true,
 *         stripQuery: false,
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const httpsDefaultTargetHttpProxy = new gcp.compute.TargetHttpProxy("httpsDefaultTargetHttpProxy", {
 *     project: "my-project-name",
 *     urlMap: httpsDefaultURLMap.id,
 * }, {
 *     provider: google_beta,
 *     dependsOn: [httpsDefaultURLMap],
 * });
 * const httpsDefaultGlobalForwardingRule = new gcp.compute.GlobalForwardingRule("httpsDefaultGlobalForwardingRule", {
 *     project: "my-project-name",
 *     target: httpsDefaultTargetHttpProxy.id,
 *     ipAddress: lbDefaultGlobalAddress.id,
 *     portRange: "80",
 * }, {
 *     provider: google_beta,
 *     dependsOn: [httpsDefaultTargetHttpProxy],
 * });
 * ```
 * ### Cloud Run Service Remove Tag
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultService = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {},
 *     traffics: [
 *         {
 *             percent: 100,
 *             // This revision needs to already exist
 *             revisionName: "cloudrun-srv-green",
 *         },
 *         {
 *             // No tags for this revision
 *             // Keep revision at 0% traffic
 *             percent: 0,
 *             // This revision needs to already exist
 *             revisionName: "cloudrun-srv-blue",
 *         },
 *     ],
 * });
 * ```
 * ### Cloud Run Service Deploy Tag
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultService = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         metadata: {
 *             name: "cloudrun-srv-blue",
 *         },
 *         spec: {
 *             containers: [{
 *                 // image or tag must be different from previous revision
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *         },
 *     },
 *     traffics: [
 *         {
 *             percent: 100,
 *             // This revision needs to already exist
 *             revisionName: "cloudrun-srv-green",
 *         },
 *         {
 *             // Deploy new revision with 0% traffic
 *             percent: 0,
 *             revisionName: "cloudrun-srv-blue",
 *             tag: "tag-name",
 *         },
 *     ],
 * });
 * ```
 * ### Cloud Run Service Add Tag
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultService = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {},
 *     traffics: [
 *         {
 *             percent: 100,
 *             // This revision needs to already exist
 *             revisionName: "cloudrun-srv-green",
 *         },
 *         {
 *             // Deploy new revision with 0% traffic
 *             percent: 0,
 *             revisionName: "cloudrun-srv-blue",
 *             tag: "tag-name",
 *         },
 *     ],
 * });
 * ```
 * ### Cloud Run Service Traffic Gradual Rollout
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultService = new gcp.cloudrun.Service("default", {
 *     autogenerateRevisionName: true,
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 // Image or image tag must be different from previous revision
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *         },
 *     },
 *     traffics: [
 *         {
 *             percent: 100,
 *             // This revision needs to already exist
 *             revisionName: "cloudrun-srv-green",
 *         },
 *         {
 *             latestRevision: true,
 *             // Deploy new revision with 0% traffic
 *             percent: 0,
 *         },
 *     ],
 * });
 * ```
 * ### Cloud Run Service Traffic Latest Revision
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultService = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {},
 *     traffics: [{
 *         latestRevision: true,
 *         percent: 100,
 *     }],
 * });
 * ```
 * ### Cloud Run Service Traffic Rollback
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultService = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {},
 *     traffics: [{
 *         percent: 100,
 *         // This revision needs to already exist
 *         revisionName: "cloudrun-srv-green",
 *     }],
 * });
 * ```
 * ### Cloud Run Service Traffic Split Tag
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultService = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {},
 *     traffics: [
 *         {
 *             // Update revision to 50% traffic
 *             percent: 50,
 *             // This revision needs to already exist
 *             revisionName: "cloudrun-srv-green",
 *         },
 *         {
 *             // Update tag to 50% traffic
 *             percent: 50,
 *             // This tag needs to already exist
 *             tag: "tag-name",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Service can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudrun/service:Service default locations/{{location}}/namespaces/{{project}}/services/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudrun/service:Service default {{location}}/{{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudrun/service:Service default {{location}}/{{name}}
 * ```
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:cloudrun/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * If set to `true`, the revision name (template.metadata.name) will be omitted and
     * autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
     * is also set.
     * (For legacy support, if `template.metadata.name` is unset in state while
     * this field is set to false, the revision name will still autogenerate.)
     */
    public readonly autogenerateRevisionName!: pulumi.Output<boolean | undefined>;
    /**
     * The location of the cloud run instance. eg us-central1
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Metadata associated with this Service, including name, namespace, labels,
     * and annotations.
     * Structure is documented below.
     */
    public readonly metadata!: pulumi.Output<outputs.cloudrun.ServiceMetadata>;
    /**
     * Volume's name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The current status of the Service.
     */
    public /*out*/ readonly statuses!: pulumi.Output<outputs.cloudrun.ServiceStatus[]>;
    /**
     * template holds the latest specification for the Revision to
     * be stamped out. The template references the container image, and may also
     * include labels and annotations that should be attached to the Revision.
     * To correlate a Revision, and/or to force a Revision to be created when the
     * spec doesn't otherwise change, a nonce label may be provided in the
     * template metadata. For more details, see:
     * https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
     * Cloud Run does not currently support referencing a build that is
     * responsible for materializing the container image from source.
     * Structure is documented below.
     */
    public readonly template!: pulumi.Output<outputs.cloudrun.ServiceTemplate | undefined>;
    /**
     * Traffic specifies how to distribute traffic over a collection of Knative Revisions
     * and Configurations
     * Structure is documented below.
     */
    public readonly traffics!: pulumi.Output<outputs.cloudrun.ServiceTraffic[]>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["autogenerateRevisionName"] = state ? state.autogenerateRevisionName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["statuses"] = state ? state.statuses : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["traffics"] = state ? state.traffics : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["autogenerateRevisionName"] = args ? args.autogenerateRevisionName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["traffics"] = args ? args.traffics : undefined;
            resourceInputs["statuses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * If set to `true`, the revision name (template.metadata.name) will be omitted and
     * autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
     * is also set.
     * (For legacy support, if `template.metadata.name` is unset in state while
     * this field is set to false, the revision name will still autogenerate.)
     */
    autogenerateRevisionName?: pulumi.Input<boolean>;
    /**
     * The location of the cloud run instance. eg us-central1
     */
    location?: pulumi.Input<string>;
    /**
     * Metadata associated with this Service, including name, namespace, labels,
     * and annotations.
     * Structure is documented below.
     */
    metadata?: pulumi.Input<inputs.cloudrun.ServiceMetadata>;
    /**
     * Volume's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The current status of the Service.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.cloudrun.ServiceStatus>[]>;
    /**
     * template holds the latest specification for the Revision to
     * be stamped out. The template references the container image, and may also
     * include labels and annotations that should be attached to the Revision.
     * To correlate a Revision, and/or to force a Revision to be created when the
     * spec doesn't otherwise change, a nonce label may be provided in the
     * template metadata. For more details, see:
     * https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
     * Cloud Run does not currently support referencing a build that is
     * responsible for materializing the container image from source.
     * Structure is documented below.
     */
    template?: pulumi.Input<inputs.cloudrun.ServiceTemplate>;
    /**
     * Traffic specifies how to distribute traffic over a collection of Knative Revisions
     * and Configurations
     * Structure is documented below.
     */
    traffics?: pulumi.Input<pulumi.Input<inputs.cloudrun.ServiceTraffic>[]>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * If set to `true`, the revision name (template.metadata.name) will be omitted and
     * autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
     * is also set.
     * (For legacy support, if `template.metadata.name` is unset in state while
     * this field is set to false, the revision name will still autogenerate.)
     */
    autogenerateRevisionName?: pulumi.Input<boolean>;
    /**
     * The location of the cloud run instance. eg us-central1
     */
    location: pulumi.Input<string>;
    /**
     * Metadata associated with this Service, including name, namespace, labels,
     * and annotations.
     * Structure is documented below.
     */
    metadata?: pulumi.Input<inputs.cloudrun.ServiceMetadata>;
    /**
     * Volume's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * template holds the latest specification for the Revision to
     * be stamped out. The template references the container image, and may also
     * include labels and annotations that should be attached to the Revision.
     * To correlate a Revision, and/or to force a Revision to be created when the
     * spec doesn't otherwise change, a nonce label may be provided in the
     * template metadata. For more details, see:
     * https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
     * Cloud Run does not currently support referencing a build that is
     * responsible for materializing the container image from source.
     * Structure is documented below.
     */
    template?: pulumi.Input<inputs.cloudrun.ServiceTemplate>;
    /**
     * Traffic specifies how to distribute traffic over a collection of Knative Revisions
     * and Configurations
     * Structure is documented below.
     */
    traffics?: pulumi.Input<pulumi.Input<inputs.cloudrun.ServiceTraffic>[]>;
}
