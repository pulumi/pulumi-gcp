// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Settings for Generative AI.
 *
 * To get more information about GenerativeSettings, see:
 *
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents/getGenerativeSettings)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
 *
 * ## Example Usage
 *
 * ### Dialogflowcx Generative Settings Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const agent = new gcp.diagflow.CxAgent("agent", {
 *     displayName: "dialogflowcx-agent",
 *     location: "global",
 *     defaultLanguageCode: "en",
 *     timeZone: "America/New_York",
 *     description: "Example description.",
 * });
 * const fullGenerativeSettings = new gcp.diagflow.CxGenerativeSettings("full_generative_settings", {
 *     parent: agent.id,
 *     fallbackSettings: {
 *         selectedPrompt: "example prompt",
 *         promptTemplates: [{
 *             displayName: "example prompt",
 *             promptText: "example prompt text",
 *             frozen: false,
 *         }],
 *     },
 *     generativeSafetySettings: {
 *         defaultBannedPhraseMatchStrategy: "PARTIAL_MATCH",
 *         bannedPhrases: [{
 *             text: "example text",
 *             languageCode: "en",
 *         }],
 *     },
 *     knowledgeConnectorSettings: {
 *         business: "example business",
 *         agent: "example agent",
 *         agentIdentity: "virtual agent",
 *         businessDescription: "a family company selling freshly roasted coffee beans",
 *         agentScope: "Example company website",
 *         disableDataStoreFallback: false,
 *     },
 *     languageCode: "en",
 *     llmModelSettings: {
 *         model: "gemini-2.0-flash-001",
 *         promptText: "example prompt text",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * GenerativeSettings can be imported using any of these accepted formats:
 *
 * * `{{parent}}/generativeSettings`
 *
 * * `{{parent}}`
 *
 * When using the `pulumi import` command, GenerativeSettings can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:diagflow/cxGenerativeSettings:CxGenerativeSettings default {{parent}}/generativeSettings
 * ```
 *
 * ```sh
 * $ pulumi import gcp:diagflow/cxGenerativeSettings:CxGenerativeSettings default {{parent}}
 * ```
 */
export class CxGenerativeSettings extends pulumi.CustomResource {
    /**
     * Get an existing CxGenerativeSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CxGenerativeSettingsState, opts?: pulumi.CustomResourceOptions): CxGenerativeSettings {
        return new CxGenerativeSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:diagflow/cxGenerativeSettings:CxGenerativeSettings';

    /**
     * Returns true if the given object is an instance of CxGenerativeSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CxGenerativeSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CxGenerativeSettings.__pulumiType;
    }

    /**
     * Settings for Generative Fallback.
     * Structure is documented below.
     */
    public readonly fallbackSettings!: pulumi.Output<outputs.diagflow.CxGenerativeSettingsFallbackSettings | undefined>;
    /**
     * Settings for Generative Safety.
     * w
     * Structure is documented below.
     */
    public readonly generativeSafetySettings!: pulumi.Output<outputs.diagflow.CxGenerativeSettingsGenerativeSafetySettings | undefined>;
    /**
     * Settings for knowledge connector.
     * Structure is documented below.
     */
    public readonly knowledgeConnectorSettings!: pulumi.Output<outputs.diagflow.CxGenerativeSettingsKnowledgeConnectorSettings | undefined>;
    /**
     * Language for this settings.
     */
    public readonly languageCode!: pulumi.Output<string>;
    /**
     * LLM model settings.
     * Structure is documented below.
     */
    public readonly llmModelSettings!: pulumi.Output<outputs.diagflow.CxGenerativeSettingsLlmModelSettings | undefined>;
    /**
     * The unique identifier of the generativeSettings.
     * Format: projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/generativeSettings.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The agent to create a flow for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    public readonly parent!: pulumi.Output<string | undefined>;

    /**
     * Create a CxGenerativeSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CxGenerativeSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CxGenerativeSettingsArgs | CxGenerativeSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CxGenerativeSettingsState | undefined;
            resourceInputs["fallbackSettings"] = state ? state.fallbackSettings : undefined;
            resourceInputs["generativeSafetySettings"] = state ? state.generativeSafetySettings : undefined;
            resourceInputs["knowledgeConnectorSettings"] = state ? state.knowledgeConnectorSettings : undefined;
            resourceInputs["languageCode"] = state ? state.languageCode : undefined;
            resourceInputs["llmModelSettings"] = state ? state.llmModelSettings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
        } else {
            const args = argsOrState as CxGenerativeSettingsArgs | undefined;
            if ((!args || args.languageCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'languageCode'");
            }
            resourceInputs["fallbackSettings"] = args ? args.fallbackSettings : undefined;
            resourceInputs["generativeSafetySettings"] = args ? args.generativeSafetySettings : undefined;
            resourceInputs["knowledgeConnectorSettings"] = args ? args.knowledgeConnectorSettings : undefined;
            resourceInputs["languageCode"] = args ? args.languageCode : undefined;
            resourceInputs["llmModelSettings"] = args ? args.llmModelSettings : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CxGenerativeSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CxGenerativeSettings resources.
 */
export interface CxGenerativeSettingsState {
    /**
     * Settings for Generative Fallback.
     * Structure is documented below.
     */
    fallbackSettings?: pulumi.Input<inputs.diagflow.CxGenerativeSettingsFallbackSettings>;
    /**
     * Settings for Generative Safety.
     * w
     * Structure is documented below.
     */
    generativeSafetySettings?: pulumi.Input<inputs.diagflow.CxGenerativeSettingsGenerativeSafetySettings>;
    /**
     * Settings for knowledge connector.
     * Structure is documented below.
     */
    knowledgeConnectorSettings?: pulumi.Input<inputs.diagflow.CxGenerativeSettingsKnowledgeConnectorSettings>;
    /**
     * Language for this settings.
     */
    languageCode?: pulumi.Input<string>;
    /**
     * LLM model settings.
     * Structure is documented below.
     */
    llmModelSettings?: pulumi.Input<inputs.diagflow.CxGenerativeSettingsLlmModelSettings>;
    /**
     * The unique identifier of the generativeSettings.
     * Format: projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/generativeSettings.
     */
    name?: pulumi.Input<string>;
    /**
     * The agent to create a flow for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    parent?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CxGenerativeSettings resource.
 */
export interface CxGenerativeSettingsArgs {
    /**
     * Settings for Generative Fallback.
     * Structure is documented below.
     */
    fallbackSettings?: pulumi.Input<inputs.diagflow.CxGenerativeSettingsFallbackSettings>;
    /**
     * Settings for Generative Safety.
     * w
     * Structure is documented below.
     */
    generativeSafetySettings?: pulumi.Input<inputs.diagflow.CxGenerativeSettingsGenerativeSafetySettings>;
    /**
     * Settings for knowledge connector.
     * Structure is documented below.
     */
    knowledgeConnectorSettings?: pulumi.Input<inputs.diagflow.CxGenerativeSettingsKnowledgeConnectorSettings>;
    /**
     * Language for this settings.
     */
    languageCode: pulumi.Input<string>;
    /**
     * LLM model settings.
     * Structure is documented below.
     */
    llmModelSettings?: pulumi.Input<inputs.diagflow.CxGenerativeSettingsLlmModelSettings>;
    /**
     * The agent to create a flow for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    parent?: pulumi.Input<string>;
}
