// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Generators contain prompt to be sent to the LLM model to generate text. The prompt can contain parameters which will be resolved before calling the model. It can optionally contain banned phrases to ensure the model responses are safe.
 *
 * To get more information about Generator, see:
 *
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.generators)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
 *
 * ## Example Usage
 *
 * ### Dialogflowcx Generator Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const agent = new gcp.diagflow.CxAgent("agent", {
 *     displayName: "dialogflowcx-agent-fucntion",
 *     location: "global",
 *     defaultLanguageCode: "en",
 *     supportedLanguageCodes: [
 *         "fr",
 *         "de",
 *         "es",
 *     ],
 *     timeZone: "America/New_York",
 *     description: "Example description.",
 * });
 * const generator = new gcp.diagflow.CxGenerator("generator", {
 *     parent: agent.id,
 *     languageCode: "fr",
 *     displayName: "TF Prompt generator",
 *     llmModelSettings: {
 *         model: "gemini-2.0-flash-001",
 *         promptText: "Return me some great results",
 *     },
 *     promptText: {
 *         text: "Send me great results in french",
 *     },
 *     modelParameter: {
 *         temperature: 0.55,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Generator can be imported using any of these accepted formats:
 *
 * * `{{parent}}/generators/{{name}}`
 *
 * * `{{parent}}/{{name}}`
 *
 * When using the `pulumi import` command, Generator can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:diagflow/cxGenerator:CxGenerator default {{parent}}/generators/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:diagflow/cxGenerator:CxGenerator default {{parent}}/{{name}}
 * ```
 */
export class CxGenerator extends pulumi.CustomResource {
    /**
     * Get an existing CxGenerator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CxGeneratorState, opts?: pulumi.CustomResourceOptions): CxGenerator {
        return new CxGenerator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:diagflow/cxGenerator:CxGenerator';

    /**
     * Returns true if the given object is an instance of CxGenerator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CxGenerator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CxGenerator.__pulumiType;
    }

    /**
     * The human-readable name of the generator, unique within the agent.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The language to create generators for the following fields:
     * * Generator.prompt_text.text
     * If not specified, the agent's default language is used.
     */
    public readonly languageCode!: pulumi.Output<string | undefined>;
    /**
     * The LLM model settings.
     * Structure is documented below.
     */
    public readonly llmModelSettings!: pulumi.Output<outputs.diagflow.CxGeneratorLlmModelSettings | undefined>;
    /**
     * Parameters passed to the LLM to configure its behavior.
     * Structure is documented below.
     */
    public readonly modelParameter!: pulumi.Output<outputs.diagflow.CxGeneratorModelParameter | undefined>;
    /**
     * The unique identifier of the Generator.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/generators/<Generator ID>.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The agent to create a Generator for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    public readonly parent!: pulumi.Output<string | undefined>;
    /**
     * List of custom placeholders in the prompt text.
     * Structure is documented below.
     */
    public readonly placeholders!: pulumi.Output<outputs.diagflow.CxGeneratorPlaceholder[] | undefined>;
    /**
     * Prompt for the LLM model.
     * Structure is documented below.
     */
    public readonly promptText!: pulumi.Output<outputs.diagflow.CxGeneratorPromptText>;

    /**
     * Create a CxGenerator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CxGeneratorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CxGeneratorArgs | CxGeneratorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CxGeneratorState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["languageCode"] = state ? state.languageCode : undefined;
            resourceInputs["llmModelSettings"] = state ? state.llmModelSettings : undefined;
            resourceInputs["modelParameter"] = state ? state.modelParameter : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["placeholders"] = state ? state.placeholders : undefined;
            resourceInputs["promptText"] = state ? state.promptText : undefined;
        } else {
            const args = argsOrState as CxGeneratorArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.promptText === undefined) && !opts.urn) {
                throw new Error("Missing required property 'promptText'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["languageCode"] = args ? args.languageCode : undefined;
            resourceInputs["llmModelSettings"] = args ? args.llmModelSettings : undefined;
            resourceInputs["modelParameter"] = args ? args.modelParameter : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["placeholders"] = args ? args.placeholders : undefined;
            resourceInputs["promptText"] = args ? args.promptText : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CxGenerator.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CxGenerator resources.
 */
export interface CxGeneratorState {
    /**
     * The human-readable name of the generator, unique within the agent.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The language to create generators for the following fields:
     * * Generator.prompt_text.text
     * If not specified, the agent's default language is used.
     */
    languageCode?: pulumi.Input<string>;
    /**
     * The LLM model settings.
     * Structure is documented below.
     */
    llmModelSettings?: pulumi.Input<inputs.diagflow.CxGeneratorLlmModelSettings>;
    /**
     * Parameters passed to the LLM to configure its behavior.
     * Structure is documented below.
     */
    modelParameter?: pulumi.Input<inputs.diagflow.CxGeneratorModelParameter>;
    /**
     * The unique identifier of the Generator.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/generators/<Generator ID>.
     */
    name?: pulumi.Input<string>;
    /**
     * The agent to create a Generator for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    parent?: pulumi.Input<string>;
    /**
     * List of custom placeholders in the prompt text.
     * Structure is documented below.
     */
    placeholders?: pulumi.Input<pulumi.Input<inputs.diagflow.CxGeneratorPlaceholder>[]>;
    /**
     * Prompt for the LLM model.
     * Structure is documented below.
     */
    promptText?: pulumi.Input<inputs.diagflow.CxGeneratorPromptText>;
}

/**
 * The set of arguments for constructing a CxGenerator resource.
 */
export interface CxGeneratorArgs {
    /**
     * The human-readable name of the generator, unique within the agent.
     */
    displayName: pulumi.Input<string>;
    /**
     * The language to create generators for the following fields:
     * * Generator.prompt_text.text
     * If not specified, the agent's default language is used.
     */
    languageCode?: pulumi.Input<string>;
    /**
     * The LLM model settings.
     * Structure is documented below.
     */
    llmModelSettings?: pulumi.Input<inputs.diagflow.CxGeneratorLlmModelSettings>;
    /**
     * Parameters passed to the LLM to configure its behavior.
     * Structure is documented below.
     */
    modelParameter?: pulumi.Input<inputs.diagflow.CxGeneratorModelParameter>;
    /**
     * The agent to create a Generator for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    parent?: pulumi.Input<string>;
    /**
     * List of custom placeholders in the prompt text.
     * Structure is documented below.
     */
    placeholders?: pulumi.Input<pulumi.Input<inputs.diagflow.CxGeneratorPlaceholder>[]>;
    /**
     * Prompt for the LLM model.
     * Structure is documented below.
     */
    promptText: pulumi.Input<inputs.diagflow.CxGeneratorPromptText>;
}
