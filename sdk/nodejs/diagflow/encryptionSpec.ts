// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Initializes a location-level encryption key specification.
 *
 * To get more information about EncryptionSpec, see:
 *
 * * [API documentation](https://cloud.google.com/dialogflow/es/docs/reference/rest/v2/projects.locations.encryptionSpec)
 * * How-to Guides
 *     * [Official CX Documentation](https://cloud.google.com/dialogflow/cx/docs)
 *     * [Official ES Documentation](https://cloud.google.com/dialogflow/es/docs)
 *
 * ## Example Usage
 *
 * ### Dialogflow Encryption Spec Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as std from "@pulumi/std";
 * import * as time from "@pulumiverse/time";
 *
 * const project = new gcp.organizations.Project("project", {
 *     projectId: "my-proj",
 *     name: "my-proj",
 *     orgId: "123456789",
 *     billingAccount: "000000-0000000-0000000-000000",
 *     deletionPolicy: "DELETE",
 * });
 * const cloudkms = new gcp.projects.Service("cloudkms", {
 *     project: project.projectId,
 *     service: "cloudkms.googleapis.com",
 * });
 * const dialogflow = new gcp.projects.Service("dialogflow", {
 *     project: project.projectId,
 *     service: "dialogflow.googleapis.com",
 * });
 * const waitEnableServiceApi = new time.index.Sleep("wait_enable_service_api", {createDuration: "30s"}, {
 *     dependsOn: [
 *         cloudkms,
 *         dialogflow,
 *     ],
 * });
 * const gcpSa = new gcp.projects.ServiceIdentity("gcp_sa", {
 *     service: "dialogflow.googleapis.com",
 *     project: project.projectId,
 * }, {
 *     dependsOn: [waitEnableServiceApi],
 * });
 * const waitCreateSa = new time.index.Sleep("wait_create_sa", {createDuration: "30s"}, {
 *     dependsOn: [gcpSa],
 * });
 * const keyring = new gcp.kms.KeyRing("keyring", {
 *     name: "my-keyring",
 *     location: "us-central1",
 *     project: project.projectId,
 * }, {
 *     dependsOn: [waitEnableServiceApi],
 * });
 * const key = new gcp.kms.CryptoKey("key", {
 *     name: "my-key",
 *     keyRing: keyring.id,
 *     purpose: "ENCRYPT_DECRYPT",
 * });
 * const cryptoKey = new gcp.kms.CryptoKeyIAMMember("crypto_key", {
 *     cryptoKeyId: key.id,
 *     member: std.replaceOutput({
 *         text: gcpSa.member,
 *         search: "@gcp-sa-dialogflow.iam",
 *         replace: "@gcp-sa-ccai-cmek.iam",
 *     }).apply(invoke => invoke.result),
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 * }, {
 *     dependsOn: [waitCreateSa],
 * });
 * const my_encryption_spec = new gcp.diagflow.EncryptionSpec("my-encryption-spec", {
 *     project: project.projectId,
 *     location: "us-central1",
 *     encryptionSpec: {
 *         kmsKey: key.id,
 *     },
 * }, {
 *     dependsOn: [cryptoKey],
 * });
 * ```
 *
 * ## Import
 *
 * This resource does not support import.
 */
export class EncryptionSpec extends pulumi.CustomResource {
    /**
     * Get an existing EncryptionSpec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EncryptionSpecState, opts?: pulumi.CustomResourceOptions): EncryptionSpec {
        return new EncryptionSpec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:diagflow/encryptionSpec:EncryptionSpec';

    /**
     * Returns true if the given object is an instance of EncryptionSpec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EncryptionSpec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EncryptionSpec.__pulumiType;
    }

    /**
     * A nested object resource.
     * Structure is documented below.
     */
    public readonly encryptionSpec!: pulumi.Output<outputs.diagflow.EncryptionSpecEncryptionSpec>;
    /**
     * The location in which the encryptionSpec is to be initialized.
     */
    public readonly location!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a EncryptionSpec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EncryptionSpecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EncryptionSpecArgs | EncryptionSpecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EncryptionSpecState | undefined;
            resourceInputs["encryptionSpec"] = state ? state.encryptionSpec : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as EncryptionSpecArgs | undefined;
            if ((!args || args.encryptionSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryptionSpec'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["encryptionSpec"] = args ? args.encryptionSpec : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EncryptionSpec.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EncryptionSpec resources.
 */
export interface EncryptionSpecState {
    /**
     * A nested object resource.
     * Structure is documented below.
     */
    encryptionSpec?: pulumi.Input<inputs.diagflow.EncryptionSpecEncryptionSpec>;
    /**
     * The location in which the encryptionSpec is to be initialized.
     */
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EncryptionSpec resource.
 */
export interface EncryptionSpecArgs {
    /**
     * A nested object resource.
     * Structure is documented below.
     */
    encryptionSpec: pulumi.Input<inputs.diagflow.EncryptionSpecEncryptionSpec>;
    /**
     * The location in which the encryptionSpec is to be initialized.
     */
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
