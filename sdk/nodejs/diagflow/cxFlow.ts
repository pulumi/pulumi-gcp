// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Flows represents the conversation flows when you build your chatbot agent.
 *
 * To get more information about Flow, see:
 *
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
 *
 * ## Example Usage
 * ### Dialogflowcx Flow Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const agent = new gcp.diagflow.CxAgent("agent", {
 *     displayName: "dialogflowcx-agent",
 *     location: "global",
 *     defaultLanguageCode: "en",
 *     supportedLanguageCodes: [
 *         "fr",
 *         "de",
 *         "es",
 *     ],
 *     timeZone: "America/New_York",
 *     description: "Example description.",
 *     avatarUri: "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
 *     enableStackdriverLogging: true,
 *     enableSpellCorrection: true,
 *     speechToTextSettings: {
 *         enableSpeechAdaptation: true,
 *     },
 * });
 * const basicFlow = new gcp.diagflow.CxFlow("basicFlow", {
 *     parent: agent.id,
 *     displayName: "MyFlow",
 *     description: "Test Flow",
 *     nluSettings: {
 *         classificationThreshold: 0.3,
 *         modelType: "MODEL_TYPE_STANDARD",
 *     },
 *     eventHandlers: [
 *         {
 *             event: "custom-event",
 *             triggerFulfillment: {
 *                 returnPartialResponses: false,
 *                 messages: [{
 *                     text: {
 *                         texts: ["I didn't get that. Can you say it again?"],
 *                     },
 *                 }],
 *             },
 *         },
 *         {
 *             event: "sys.no-match-default",
 *             triggerFulfillment: {
 *                 returnPartialResponses: false,
 *                 messages: [{
 *                     text: {
 *                         texts: ["Sorry, could you say that again?"],
 *                     },
 *                 }],
 *             },
 *         },
 *         {
 *             event: "sys.no-input-default",
 *             triggerFulfillment: {
 *                 returnPartialResponses: false,
 *                 messages: [{
 *                     text: {
 *                         texts: ["One more time?"],
 *                     },
 *                 }],
 *             },
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Flow can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:diagflow/cxFlow:CxFlow default {{parent}}/flows/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:diagflow/cxFlow:CxFlow default {{parent}}/{{name}}
 * ```
 */
export class CxFlow extends pulumi.CustomResource {
    /**
     * Get an existing CxFlow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CxFlowState, opts?: pulumi.CustomResourceOptions): CxFlow {
        return new CxFlow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:diagflow/cxFlow:CxFlow';

    /**
     * Returns true if the given object is an instance of CxFlow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CxFlow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CxFlow.__pulumiType;
    }

    /**
     * The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The human-readable name of the flow.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * A flow's event handlers serve two purposes:
     * They are responsible for handling events (e.g. no match, webhook errors) in the flow.
     * They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
     * Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
     * Structure is documented below.
     */
    public readonly eventHandlers!: pulumi.Output<outputs.diagflow.CxFlowEventHandler[]>;
    /**
     * The language of the following fields in flow:
     * Flow.event_handlers.trigger_fulfillment.messages
     * Flow.event_handlers.trigger_fulfillment.conditional_cases
     * Flow.transition_routes.trigger_fulfillment.messages
     * Flow.transition_routes.trigger_fulfillment.conditional_cases
     * If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     */
    public readonly languageCode!: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of this transition route.
     * The unique identifier of this event handler.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * NLU related settings of the flow.
     * Structure is documented below.
     */
    public readonly nluSettings!: pulumi.Output<outputs.diagflow.CxFlowNluSettings | undefined>;
    /**
     * The agent to create a flow for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    public readonly parent!: pulumi.Output<string | undefined>;
    /**
     * A flow's transition route group serve two purposes:
     * They are responsible for matching the user's first utterances in the flow.
     * They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
     * Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
     */
    public readonly transitionRouteGroups!: pulumi.Output<string[] | undefined>;
    /**
     * A flow's transition routes serve two purposes:
     * They are responsible for matching the user's first utterances in the flow.
     * They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
     * TransitionRoutes are evalauted in the following order:
     * TransitionRoutes with intent specified.
     * TransitionRoutes with only condition specified.
     * TransitionRoutes with intent specified are inherited by pages in the flow.
     * Structure is documented below.
     */
    public readonly transitionRoutes!: pulumi.Output<outputs.diagflow.CxFlowTransitionRoute[] | undefined>;

    /**
     * Create a CxFlow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CxFlowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CxFlowArgs | CxFlowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CxFlowState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["eventHandlers"] = state ? state.eventHandlers : undefined;
            resourceInputs["languageCode"] = state ? state.languageCode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nluSettings"] = state ? state.nluSettings : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["transitionRouteGroups"] = state ? state.transitionRouteGroups : undefined;
            resourceInputs["transitionRoutes"] = state ? state.transitionRoutes : undefined;
        } else {
            const args = argsOrState as CxFlowArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["eventHandlers"] = args ? args.eventHandlers : undefined;
            resourceInputs["languageCode"] = args ? args.languageCode : undefined;
            resourceInputs["nluSettings"] = args ? args.nluSettings : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["transitionRouteGroups"] = args ? args.transitionRouteGroups : undefined;
            resourceInputs["transitionRoutes"] = args ? args.transitionRoutes : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CxFlow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CxFlow resources.
 */
export interface CxFlowState {
    /**
     * The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
     */
    description?: pulumi.Input<string>;
    /**
     * The human-readable name of the flow.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A flow's event handlers serve two purposes:
     * They are responsible for handling events (e.g. no match, webhook errors) in the flow.
     * They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
     * Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
     * Structure is documented below.
     */
    eventHandlers?: pulumi.Input<pulumi.Input<inputs.diagflow.CxFlowEventHandler>[]>;
    /**
     * The language of the following fields in flow:
     * Flow.event_handlers.trigger_fulfillment.messages
     * Flow.event_handlers.trigger_fulfillment.conditional_cases
     * Flow.transition_routes.trigger_fulfillment.messages
     * Flow.transition_routes.trigger_fulfillment.conditional_cases
     * If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     */
    languageCode?: pulumi.Input<string>;
    /**
     * The unique identifier of this transition route.
     * The unique identifier of this event handler.
     */
    name?: pulumi.Input<string>;
    /**
     * NLU related settings of the flow.
     * Structure is documented below.
     */
    nluSettings?: pulumi.Input<inputs.diagflow.CxFlowNluSettings>;
    /**
     * The agent to create a flow for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    parent?: pulumi.Input<string>;
    /**
     * A flow's transition route group serve two purposes:
     * They are responsible for matching the user's first utterances in the flow.
     * They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
     * Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
     */
    transitionRouteGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A flow's transition routes serve two purposes:
     * They are responsible for matching the user's first utterances in the flow.
     * They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
     * TransitionRoutes are evalauted in the following order:
     * TransitionRoutes with intent specified.
     * TransitionRoutes with only condition specified.
     * TransitionRoutes with intent specified are inherited by pages in the flow.
     * Structure is documented below.
     */
    transitionRoutes?: pulumi.Input<pulumi.Input<inputs.diagflow.CxFlowTransitionRoute>[]>;
}

/**
 * The set of arguments for constructing a CxFlow resource.
 */
export interface CxFlowArgs {
    /**
     * The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
     */
    description?: pulumi.Input<string>;
    /**
     * The human-readable name of the flow.
     */
    displayName: pulumi.Input<string>;
    /**
     * A flow's event handlers serve two purposes:
     * They are responsible for handling events (e.g. no match, webhook errors) in the flow.
     * They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
     * Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
     * Structure is documented below.
     */
    eventHandlers?: pulumi.Input<pulumi.Input<inputs.diagflow.CxFlowEventHandler>[]>;
    /**
     * The language of the following fields in flow:
     * Flow.event_handlers.trigger_fulfillment.messages
     * Flow.event_handlers.trigger_fulfillment.conditional_cases
     * Flow.transition_routes.trigger_fulfillment.messages
     * Flow.transition_routes.trigger_fulfillment.conditional_cases
     * If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     */
    languageCode?: pulumi.Input<string>;
    /**
     * NLU related settings of the flow.
     * Structure is documented below.
     */
    nluSettings?: pulumi.Input<inputs.diagflow.CxFlowNluSettings>;
    /**
     * The agent to create a flow for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    parent?: pulumi.Input<string>;
    /**
     * A flow's transition route group serve two purposes:
     * They are responsible for matching the user's first utterances in the flow.
     * They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
     * Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
     */
    transitionRouteGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A flow's transition routes serve two purposes:
     * They are responsible for matching the user's first utterances in the flow.
     * They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
     * TransitionRoutes are evalauted in the following order:
     * TransitionRoutes with intent specified.
     * TransitionRoutes with only condition specified.
     * TransitionRoutes with intent specified are inherited by pages in the flow.
     * Structure is documented below.
     */
    transitionRoutes?: pulumi.Input<pulumi.Input<inputs.diagflow.CxFlowTransitionRoute>[]>;
}
