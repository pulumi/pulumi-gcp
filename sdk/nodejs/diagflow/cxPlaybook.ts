// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Playbook is the basic building block to instruct the LLM how to execute a certain task.
 *
 * To get more information about Playbook, see:
 *
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.playbooks)
 * * How-to Guides
 *     * [Official CX Documentation](https://cloud.google.com/dialogflow/cx/docs)
 *
 * ## Example Usage
 *
 * ### Dialogflowcx Playbook Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const agent = new gcp.diagflow.CxAgent("agent", {
 *     displayName: "dialogflowcx-agent-basic",
 *     location: "global",
 *     defaultLanguageCode: "en",
 *     timeZone: "America/New_York",
 *     description: "Example description.",
 * });
 * const my_playbook = new gcp.diagflow.CxPlaybook("my-playbook", {
 *     parent: agent.id,
 *     displayName: "Example Display Name",
 *     goal: "Example Goal",
 *     playbookType: "ROUTINE",
 *     instruction: {
 *         steps: [
 *             {
 *                 text: "step 1",
 *                 steps: JSON.stringify([
 *                     {
 *                         text: "step 1 1",
 *                     },
 *                     {
 *                         text: "step 1 2",
 *                         steps: [
 *                             {
 *                                 text: "step 1 2 1",
 *                             },
 *                             {
 *                                 text: "step 1 2 2",
 *                             },
 *                         ],
 *                     },
 *                     {
 *                         text: "step 1 3",
 *                     },
 *                 ]),
 *             },
 *             {
 *                 text: "step 2",
 *             },
 *             {
 *                 text: "step 3",
 *             },
 *         ],
 *     },
 * });
 * ```
 * ### Dialogflowcx Playbook Fulfillment
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const agent = new gcp.diagflow.CxAgent("agent", {
 *     displayName: "dialogflowcx-agent",
 *     location: "global",
 *     defaultLanguageCode: "en",
 *     timeZone: "America/New_York",
 *     description: "Example description.",
 * });
 * const bucket = new gcp.storage.Bucket("bucket", {
 *     name: "dialogflowcx-bucket",
 *     location: "US",
 *     uniformBucketLevelAccess: true,
 * });
 * const myWebhook = new gcp.diagflow.CxWebhook("my_webhook", {
 *     parent: agent.id,
 *     displayName: "MyWebhook",
 *     genericWebService: {
 *         uri: "https://example.com",
 *     },
 * });
 * const myTool = new gcp.diagflow.CxTool("my_tool", {
 *     parent: agent.id,
 *     displayName: "Example Tool",
 *     description: "Example Description",
 * });
 * const myGenerator = new gcp.diagflow.CxGenerator("my_generator", {
 *     parent: agent.id,
 *     displayName: "TF Prompt generator",
 *     llmModelSettings: {
 *         model: "gemini-2.0-flash-001",
 *         promptText: "Return me some great results",
 *     },
 *     promptText: {
 *         text: "Send me great results in french",
 *     },
 *     modelParameter: {
 *         temperature: 0.55,
 *     },
 * });
 * const my_playbook = new gcp.diagflow.CxPlaybook("my-playbook", {
 *     parent: agent.id,
 *     displayName: "Playbook Example with Fulfillment",
 *     goal: "Example Goal",
 *     instruction: {
 *         guidelines: "Example Guidelines",
 *         steps: [
 *             {
 *                 text: "step 1",
 *                 steps: JSON.stringify([
 *                     {
 *                         text: "step 1 1",
 *                     },
 *                     {
 *                         text: "step 1 2",
 *                         steps: [
 *                             {
 *                                 text: "step 1 2 1",
 *                             },
 *                             {
 *                                 text: "step 1 2 2",
 *                             },
 *                         ],
 *                     },
 *                     {
 *                         text: "step 1 3",
 *                     },
 *                 ]),
 *             },
 *             {
 *                 text: "step 2",
 *             },
 *             {
 *                 text: "step 3",
 *             },
 *         ],
 *     },
 *     llmModelSettings: {
 *         model: "gemini-2.0-flash-001",
 *         promptText: "Return me some great results",
 *     },
 *     referencedTools: [myTool.id],
 * });
 * ```
 *
 * ## Import
 *
 * Playbook can be imported using any of these accepted formats:
 *
 * * `{{parent}}/playbooks/{{name}}`
 *
 * * `{{parent}}/{{name}}`
 *
 * When using the `pulumi import` command, Playbook can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:diagflow/cxPlaybook:CxPlaybook default {{parent}}/playbooks/{{name}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:diagflow/cxPlaybook:CxPlaybook default {{parent}}/{{name}}
 * ```
 */
export class CxPlaybook extends pulumi.CustomResource {
    /**
     * Get an existing CxPlaybook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CxPlaybookState, opts?: pulumi.CustomResourceOptions): CxPlaybook {
        return new CxPlaybook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:diagflow/cxPlaybook:CxPlaybook';

    /**
     * Returns true if the given object is an instance of CxPlaybook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CxPlaybook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CxPlaybook.__pulumiType;
    }

    /**
     * The timestamp of initial playbook creation.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The human-readable name of the playbook, unique within an agent.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * High level description of the goal the playbook intend to accomplish. A goal should be concise since it's visible to other playbooks that may reference this playbook.
     */
    public readonly goal!: pulumi.Output<string>;
    /**
     * Instruction to accomplish target goal.
     * Structure is documented below.
     */
    public readonly instruction!: pulumi.Output<outputs.diagflow.CxPlaybookInstruction | undefined>;
    /**
     * Llm model settings for the playbook.
     * Structure is documented below.
     */
    public readonly llmModelSettings!: pulumi.Output<outputs.diagflow.CxPlaybookLlmModelSettings | undefined>;
    /**
     * The unique identifier of the Playbook.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/playbooks/<Playbook ID>.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The agent to create a Playbook for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    public readonly parent!: pulumi.Output<string | undefined>;
    /**
     * Type of the playbook.
     * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
     */
    public readonly playbookType!: pulumi.Output<string | undefined>;
    /**
     * The resource name of flows referenced by the current playbook in the instructions.
     */
    public /*out*/ readonly referencedFlows!: pulumi.Output<string[]>;
    /**
     * The resource name of other playbooks referenced by the current playbook in the instructions.
     */
    public /*out*/ readonly referencedPlaybooks!: pulumi.Output<string[]>;
    /**
     * The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
     */
    public readonly referencedTools!: pulumi.Output<string[] | undefined>;
    /**
     * Estimated number of tokes current playbook takes when sent to the LLM.
     */
    public /*out*/ readonly tokenCount!: pulumi.Output<string>;
    /**
     * Last time the playbook version was updated.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a CxPlaybook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CxPlaybookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CxPlaybookArgs | CxPlaybookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CxPlaybookState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["goal"] = state ? state.goal : undefined;
            resourceInputs["instruction"] = state ? state.instruction : undefined;
            resourceInputs["llmModelSettings"] = state ? state.llmModelSettings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["playbookType"] = state ? state.playbookType : undefined;
            resourceInputs["referencedFlows"] = state ? state.referencedFlows : undefined;
            resourceInputs["referencedPlaybooks"] = state ? state.referencedPlaybooks : undefined;
            resourceInputs["referencedTools"] = state ? state.referencedTools : undefined;
            resourceInputs["tokenCount"] = state ? state.tokenCount : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as CxPlaybookArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.goal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'goal'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["goal"] = args ? args.goal : undefined;
            resourceInputs["instruction"] = args ? args.instruction : undefined;
            resourceInputs["llmModelSettings"] = args ? args.llmModelSettings : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["playbookType"] = args ? args.playbookType : undefined;
            resourceInputs["referencedTools"] = args ? args.referencedTools : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["referencedFlows"] = undefined /*out*/;
            resourceInputs["referencedPlaybooks"] = undefined /*out*/;
            resourceInputs["tokenCount"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CxPlaybook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CxPlaybook resources.
 */
export interface CxPlaybookState {
    /**
     * The timestamp of initial playbook creation.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
     */
    createTime?: pulumi.Input<string>;
    /**
     * The human-readable name of the playbook, unique within an agent.
     */
    displayName?: pulumi.Input<string>;
    /**
     * High level description of the goal the playbook intend to accomplish. A goal should be concise since it's visible to other playbooks that may reference this playbook.
     */
    goal?: pulumi.Input<string>;
    /**
     * Instruction to accomplish target goal.
     * Structure is documented below.
     */
    instruction?: pulumi.Input<inputs.diagflow.CxPlaybookInstruction>;
    /**
     * Llm model settings for the playbook.
     * Structure is documented below.
     */
    llmModelSettings?: pulumi.Input<inputs.diagflow.CxPlaybookLlmModelSettings>;
    /**
     * The unique identifier of the Playbook.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/playbooks/<Playbook ID>.
     */
    name?: pulumi.Input<string>;
    /**
     * The agent to create a Playbook for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    parent?: pulumi.Input<string>;
    /**
     * Type of the playbook.
     * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
     */
    playbookType?: pulumi.Input<string>;
    /**
     * The resource name of flows referenced by the current playbook in the instructions.
     */
    referencedFlows?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource name of other playbooks referenced by the current playbook in the instructions.
     */
    referencedPlaybooks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
     */
    referencedTools?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Estimated number of tokes current playbook takes when sent to the LLM.
     */
    tokenCount?: pulumi.Input<string>;
    /**
     * Last time the playbook version was updated.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CxPlaybook resource.
 */
export interface CxPlaybookArgs {
    /**
     * The human-readable name of the playbook, unique within an agent.
     */
    displayName: pulumi.Input<string>;
    /**
     * High level description of the goal the playbook intend to accomplish. A goal should be concise since it's visible to other playbooks that may reference this playbook.
     */
    goal: pulumi.Input<string>;
    /**
     * Instruction to accomplish target goal.
     * Structure is documented below.
     */
    instruction?: pulumi.Input<inputs.diagflow.CxPlaybookInstruction>;
    /**
     * Llm model settings for the playbook.
     * Structure is documented below.
     */
    llmModelSettings?: pulumi.Input<inputs.diagflow.CxPlaybookLlmModelSettings>;
    /**
     * The agent to create a Playbook for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    parent?: pulumi.Input<string>;
    /**
     * Type of the playbook.
     * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
     */
    playbookType?: pulumi.Input<string>;
    /**
     * The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
     */
    referencedTools?: pulumi.Input<pulumi.Input<string>[]>;
}
