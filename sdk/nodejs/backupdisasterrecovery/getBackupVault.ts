// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A Backup and DRBackupVault.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_backup_vault = gcp.backupdisasterrecovery.getBackupVault({
 *     location: "us-central1",
 *     backupVaultId: "bv-1",
 * });
 * ```
 */
export function getBackupVault(args: GetBackupVaultArgs, opts?: pulumi.InvokeOptions): Promise<GetBackupVaultResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:backupdisasterrecovery/getBackupVault:getBackupVault", {
        "backupVaultId": args.backupVaultId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackupVault.
 */
export interface GetBackupVaultArgs {
    /**
     * The id of Backup Vault resource.
     *
     * - - -
     */
    backupVaultId: string;
    /**
     * The location in which the Backup Vault resource belongs.
     */
    location: string;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: string;
}

/**
 * A collection of values returned by getBackupVault.
 */
export interface GetBackupVaultResult {
    readonly accessRestriction: string;
    readonly allowMissing: boolean;
    readonly annotations: {[key: string]: string};
    readonly backupCount: string;
    readonly backupMinimumEnforcedRetentionDuration: string;
    readonly backupRetentionInheritance: string;
    readonly backupVaultId: string;
    readonly createTime: string;
    readonly deletable: boolean;
    readonly description: string;
    readonly effectiveAnnotations: {[key: string]: string};
    readonly effectiveLabels: {[key: string]: string};
    readonly effectiveTime: string;
    readonly etag: string;
    readonly forceDelete: boolean;
    readonly forceUpdate: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ignoreBackupPlanReferences: boolean;
    readonly ignoreInactiveDatasources: boolean;
    readonly labels: {[key: string]: string};
    readonly location: string;
    readonly name: string;
    readonly project?: string;
    readonly pulumiLabels: {[key: string]: string};
    readonly serviceAccount: string;
    readonly state: string;
    readonly totalStoredBytes: string;
    readonly uid: string;
    readonly updateTime: string;
}
/**
 * A Backup and DRBackupVault.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_backup_vault = gcp.backupdisasterrecovery.getBackupVault({
 *     location: "us-central1",
 *     backupVaultId: "bv-1",
 * });
 * ```
 */
export function getBackupVaultOutput(args: GetBackupVaultOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetBackupVaultResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:backupdisasterrecovery/getBackupVault:getBackupVault", {
        "backupVaultId": args.backupVaultId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackupVault.
 */
export interface GetBackupVaultOutputArgs {
    /**
     * The id of Backup Vault resource.
     *
     * - - -
     */
    backupVaultId: pulumi.Input<string>;
    /**
     * The location in which the Backup Vault resource belongs.
     */
    location: pulumi.Input<string>;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
