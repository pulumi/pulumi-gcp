// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A Backup and DR BackupPlanAssociation.
 *
 * To get more information about BackupPlanAssociation, see:
 *
 * * [API documentation](https://cloud.google.com/backup-disaster-recovery/docs/reference/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/backup-disaster-recovery/docs)
 *
 * ## Example Usage
 *
 * ### Backup Dr Bpa
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const mySA = new gcp.serviceaccount.Account("mySA", {
 *     accountId: "my-custom",
 *     displayName: "Custom SA for VM Instance",
 * });
 * const myinstance = new gcp.compute.Instance("myinstance", {
 *     networkInterfaces: [{
 *         accessConfigs: [{}],
 *         network: "default",
 *     }],
 *     name: "test-instance",
 *     machineType: "n2-standard-2",
 *     zone: "us-central1-a",
 *     bootDisk: {
 *         initializeParams: {
 *             image: "debian-cloud/debian-11",
 *             labels: {
 *                 my_label: "value",
 *             },
 *         },
 *     },
 *     scratchDisks: [{
 *         "interface": "NVME",
 *     }],
 *     serviceAccount: {
 *         email: mySA.email,
 *         scopes: ["cloud-platform"],
 *     },
 * });
 * const bv1 = new gcp.backupdisasterrecovery.BackupVault("bv1", {
 *     location: "us-central1",
 *     backupVaultId: "bv-bpa",
 *     backupMinimumEnforcedRetentionDuration: "100000s",
 *     forceDelete: true,
 * });
 * const bp1 = new gcp.backupdisasterrecovery.BackupPlan("bp1", {
 *     location: "us-central1",
 *     backupPlanId: "bp-bpa-test",
 *     resourceType: "compute.googleapis.com/Instance",
 *     backupVault: bv1.id,
 *     backupRules: [{
 *         ruleId: "rule-1",
 *         backupRetentionDays: 2,
 *         standardSchedule: {
 *             recurrenceType: "HOURLY",
 *             hourlyFrequency: 6,
 *             timeZone: "UTC",
 *             backupWindow: {
 *                 startHourOfDay: 12,
 *                 endHourOfDay: 18,
 *             },
 *         },
 *     }],
 * });
 * const my_backup_plan_association = new gcp.backupdisasterrecovery.BackupPlanAssociation("my-backup-plan-association", {
 *     location: "us-central1",
 *     resourceType: "compute.googleapis.com/Instance",
 *     backupPlanAssociationId: "my-bpa",
 *     resource: myinstance.id,
 *     backupPlan: bp1.name,
 * });
 * ```
 *
 * ## Import
 *
 * BackupPlanAssociation can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/backupPlanAssociations/{{backup_plan_association_id}}`
 *
 * * `{{project}}/{{location}}/{{backup_plan_association_id}}`
 *
 * * `{{location}}/{{backup_plan_association_id}}`
 *
 * When using the `pulumi import` command, BackupPlanAssociation can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:backupdisasterrecovery/backupPlanAssociation:BackupPlanAssociation default projects/{{project}}/locations/{{location}}/backupPlanAssociations/{{backup_plan_association_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:backupdisasterrecovery/backupPlanAssociation:BackupPlanAssociation default {{project}}/{{location}}/{{backup_plan_association_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:backupdisasterrecovery/backupPlanAssociation:BackupPlanAssociation default {{location}}/{{backup_plan_association_id}}
 * ```
 */
export class BackupPlanAssociation extends pulumi.CustomResource {
    /**
     * Get an existing BackupPlanAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupPlanAssociationState, opts?: pulumi.CustomResourceOptions): BackupPlanAssociation {
        return new BackupPlanAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:backupdisasterrecovery/backupPlanAssociation:BackupPlanAssociation';

    /**
     * Returns true if the given object is an instance of BackupPlanAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupPlanAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupPlanAssociation.__pulumiType;
    }

    /**
     * The BP with which resource needs to be created
     */
    public readonly backupPlan!: pulumi.Output<string>;
    /**
     * The id of backupplan association
     *
     *
     * - - -
     */
    public readonly backupPlanAssociationId!: pulumi.Output<string>;
    /**
     * The time when the instance was created
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Resource name of data source which will be used as storage location for backups taken
     */
    public /*out*/ readonly dataSource!: pulumi.Output<string>;
    /**
     * The point in time when the last successful backup was captured from the source
     */
    public /*out*/ readonly lastSuccessfulBackupConsistencyTime!: pulumi.Output<string>;
    /**
     * The location for the backupplan association
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of backup plan association resource created
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The resource for which BPA needs to be created
     */
    public readonly resource!: pulumi.Output<string>;
    /**
     * The resource type of workload on which backupplan is applied
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * Message for rules config info
     * Structure is documented below.
     */
    public /*out*/ readonly rulesConfigInfos!: pulumi.Output<outputs.backupdisasterrecovery.BackupPlanAssociationRulesConfigInfo[]>;
    /**
     * The time when the instance was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a BackupPlanAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupPlanAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupPlanAssociationArgs | BackupPlanAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupPlanAssociationState | undefined;
            resourceInputs["backupPlan"] = state ? state.backupPlan : undefined;
            resourceInputs["backupPlanAssociationId"] = state ? state.backupPlanAssociationId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dataSource"] = state ? state.dataSource : undefined;
            resourceInputs["lastSuccessfulBackupConsistencyTime"] = state ? state.lastSuccessfulBackupConsistencyTime : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["resource"] = state ? state.resource : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["rulesConfigInfos"] = state ? state.rulesConfigInfos : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as BackupPlanAssociationArgs | undefined;
            if ((!args || args.backupPlan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupPlan'");
            }
            if ((!args || args.backupPlanAssociationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupPlanAssociationId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resource'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["backupPlan"] = args ? args.backupPlan : undefined;
            resourceInputs["backupPlanAssociationId"] = args ? args.backupPlanAssociationId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["resource"] = args ? args.resource : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dataSource"] = undefined /*out*/;
            resourceInputs["lastSuccessfulBackupConsistencyTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["rulesConfigInfos"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupPlanAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackupPlanAssociation resources.
 */
export interface BackupPlanAssociationState {
    /**
     * The BP with which resource needs to be created
     */
    backupPlan?: pulumi.Input<string>;
    /**
     * The id of backupplan association
     *
     *
     * - - -
     */
    backupPlanAssociationId?: pulumi.Input<string>;
    /**
     * The time when the instance was created
     */
    createTime?: pulumi.Input<string>;
    /**
     * Resource name of data source which will be used as storage location for backups taken
     */
    dataSource?: pulumi.Input<string>;
    /**
     * The point in time when the last successful backup was captured from the source
     */
    lastSuccessfulBackupConsistencyTime?: pulumi.Input<string>;
    /**
     * The location for the backupplan association
     */
    location?: pulumi.Input<string>;
    /**
     * The name of backup plan association resource created
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The resource for which BPA needs to be created
     */
    resource?: pulumi.Input<string>;
    /**
     * The resource type of workload on which backupplan is applied
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Message for rules config info
     * Structure is documented below.
     */
    rulesConfigInfos?: pulumi.Input<pulumi.Input<inputs.backupdisasterrecovery.BackupPlanAssociationRulesConfigInfo>[]>;
    /**
     * The time when the instance was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackupPlanAssociation resource.
 */
export interface BackupPlanAssociationArgs {
    /**
     * The BP with which resource needs to be created
     */
    backupPlan: pulumi.Input<string>;
    /**
     * The id of backupplan association
     *
     *
     * - - -
     */
    backupPlanAssociationId: pulumi.Input<string>;
    /**
     * The location for the backupplan association
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The resource for which BPA needs to be created
     */
    resource: pulumi.Input<string>;
    /**
     * The resource type of workload on which backupplan is applied
     */
    resourceType: pulumi.Input<string>;
}
