// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BackupPlanArgs, BackupPlanState } from "./backupPlan";
export type BackupPlan = import("./backupPlan").BackupPlan;
export const BackupPlan: typeof import("./backupPlan").BackupPlan = null as any;
utilities.lazyLoad(exports, ["BackupPlan"], () => require("./backupPlan"));

export { BackupPlanAssociationArgs, BackupPlanAssociationState } from "./backupPlanAssociation";
export type BackupPlanAssociation = import("./backupPlanAssociation").BackupPlanAssociation;
export const BackupPlanAssociation: typeof import("./backupPlanAssociation").BackupPlanAssociation = null as any;
utilities.lazyLoad(exports, ["BackupPlanAssociation"], () => require("./backupPlanAssociation"));

export { BackupVaultArgs, BackupVaultState } from "./backupVault";
export type BackupVault = import("./backupVault").BackupVault;
export const BackupVault: typeof import("./backupVault").BackupVault = null as any;
utilities.lazyLoad(exports, ["BackupVault"], () => require("./backupVault"));

export { GetBackupArgs, GetBackupResult, GetBackupOutputArgs } from "./getBackup";
export const getBackup: typeof import("./getBackup").getBackup = null as any;
export const getBackupOutput: typeof import("./getBackup").getBackupOutput = null as any;
utilities.lazyLoad(exports, ["getBackup","getBackupOutput"], () => require("./getBackup"));

export { GetBackupPlanArgs, GetBackupPlanResult, GetBackupPlanOutputArgs } from "./getBackupPlan";
export const getBackupPlan: typeof import("./getBackupPlan").getBackupPlan = null as any;
export const getBackupPlanOutput: typeof import("./getBackupPlan").getBackupPlanOutput = null as any;
utilities.lazyLoad(exports, ["getBackupPlan","getBackupPlanOutput"], () => require("./getBackupPlan"));

export { GetBackupPlanAssociationArgs, GetBackupPlanAssociationResult, GetBackupPlanAssociationOutputArgs } from "./getBackupPlanAssociation";
export const getBackupPlanAssociation: typeof import("./getBackupPlanAssociation").getBackupPlanAssociation = null as any;
export const getBackupPlanAssociationOutput: typeof import("./getBackupPlanAssociation").getBackupPlanAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getBackupPlanAssociation","getBackupPlanAssociationOutput"], () => require("./getBackupPlanAssociation"));

export { GetBackupPlanAssociationsArgs, GetBackupPlanAssociationsResult, GetBackupPlanAssociationsOutputArgs } from "./getBackupPlanAssociations";
export const getBackupPlanAssociations: typeof import("./getBackupPlanAssociations").getBackupPlanAssociations = null as any;
export const getBackupPlanAssociationsOutput: typeof import("./getBackupPlanAssociations").getBackupPlanAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getBackupPlanAssociations","getBackupPlanAssociationsOutput"], () => require("./getBackupPlanAssociations"));

export { GetBackupVaultArgs, GetBackupVaultResult, GetBackupVaultOutputArgs } from "./getBackupVault";
export const getBackupVault: typeof import("./getBackupVault").getBackupVault = null as any;
export const getBackupVaultOutput: typeof import("./getBackupVault").getBackupVaultOutput = null as any;
utilities.lazyLoad(exports, ["getBackupVault","getBackupVaultOutput"], () => require("./getBackupVault"));

export { GetDataSourceArgs, GetDataSourceResult, GetDataSourceOutputArgs } from "./getDataSource";
export const getDataSource: typeof import("./getDataSource").getDataSource = null as any;
export const getDataSourceOutput: typeof import("./getDataSource").getDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getDataSource","getDataSourceOutput"], () => require("./getDataSource"));

export { GetDataSourceReferenceArgs, GetDataSourceReferenceResult, GetDataSourceReferenceOutputArgs } from "./getDataSourceReference";
export const getDataSourceReference: typeof import("./getDataSourceReference").getDataSourceReference = null as any;
export const getDataSourceReferenceOutput: typeof import("./getDataSourceReference").getDataSourceReferenceOutput = null as any;
utilities.lazyLoad(exports, ["getDataSourceReference","getDataSourceReferenceOutput"], () => require("./getDataSourceReference"));

export { GetDataSourceReferencesArgs, GetDataSourceReferencesResult, GetDataSourceReferencesOutputArgs } from "./getDataSourceReferences";
export const getDataSourceReferences: typeof import("./getDataSourceReferences").getDataSourceReferences = null as any;
export const getDataSourceReferencesOutput: typeof import("./getDataSourceReferences").getDataSourceReferencesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSourceReferences","getDataSourceReferencesOutput"], () => require("./getDataSourceReferences"));

export { GetManagementServerArgs, GetManagementServerResult, GetManagementServerOutputArgs } from "./getManagementServer";
export const getManagementServer: typeof import("./getManagementServer").getManagementServer = null as any;
export const getManagementServerOutput: typeof import("./getManagementServer").getManagementServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementServer","getManagementServerOutput"], () => require("./getManagementServer"));

export { ManagementServerArgs, ManagementServerState } from "./managementServer";
export type ManagementServer = import("./managementServer").ManagementServer;
export const ManagementServer: typeof import("./managementServer").ManagementServer = null as any;
utilities.lazyLoad(exports, ["ManagementServer"], () => require("./managementServer"));

export { ServiceConfigArgs, ServiceConfigState } from "./serviceConfig";
export type ServiceConfig = import("./serviceConfig").ServiceConfig;
export const ServiceConfig: typeof import("./serviceConfig").ServiceConfig = null as any;
utilities.lazyLoad(exports, ["ServiceConfig"], () => require("./serviceConfig"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:backupdisasterrecovery/backupPlan:BackupPlan":
                return new BackupPlan(name, <any>undefined, { urn })
            case "gcp:backupdisasterrecovery/backupPlanAssociation:BackupPlanAssociation":
                return new BackupPlanAssociation(name, <any>undefined, { urn })
            case "gcp:backupdisasterrecovery/backupVault:BackupVault":
                return new BackupVault(name, <any>undefined, { urn })
            case "gcp:backupdisasterrecovery/managementServer:ManagementServer":
                return new ManagementServer(name, <any>undefined, { urn })
            case "gcp:backupdisasterrecovery/serviceConfig:ServiceConfig":
                return new ServiceConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "backupdisasterrecovery/backupPlan", _module)
pulumi.runtime.registerResourceModule("gcp", "backupdisasterrecovery/backupPlanAssociation", _module)
pulumi.runtime.registerResourceModule("gcp", "backupdisasterrecovery/backupVault", _module)
pulumi.runtime.registerResourceModule("gcp", "backupdisasterrecovery/managementServer", _module)
pulumi.runtime.registerResourceModule("gcp", "backupdisasterrecovery/serviceConfig", _module)
