// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Initializes a Project-level default Backupdr config. It creates default Backupvault and default Backup Plan in same project for customers to protect instances.
 *
 * To get more information about ServiceConfig, see:
 *
 * * [API documentation](https://cloud.google.com/backup-disaster-recovery/docs/reference/rest/v1/projects.locations.serviceConfig)
 *
 * ## Example Usage
 *
 * ### Backup Dr Service Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const bpa1 = new gcp.backupdisasterrecovery.ServiceConfig("bpa1", {
 *     location: "us-central1",
 *     resourceType: "compute.googleapis.com/Instance",
 * });
 * ```
 *
 * ## Import
 *
 * This resource does not support import.
 */
export class ServiceConfig extends pulumi.CustomResource {
    /**
     * Get an existing ServiceConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceConfigState, opts?: pulumi.CustomResourceOptions): ServiceConfig {
        return new ServiceConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:backupdisasterrecovery/serviceConfig:ServiceConfig';

    /**
     * Returns true if the given object is an instance of ServiceConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceConfig.__pulumiType;
    }

    /**
     * The location in which the Service config is to be initialized.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The resource type to which the default service config will be applied.
     */
    declare public readonly resourceType: pulumi.Output<string>;

    /**
     * Create a ServiceConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceConfigArgs | ServiceConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceConfigState | undefined;
            resourceInputs["location"] = state?.location;
            resourceInputs["project"] = state?.project;
            resourceInputs["resourceType"] = state?.resourceType;
        } else {
            const args = argsOrState as ServiceConfigArgs | undefined;
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.resourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["location"] = args?.location;
            resourceInputs["project"] = args?.project;
            resourceInputs["resourceType"] = args?.resourceType;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceConfig resources.
 */
export interface ServiceConfigState {
    /**
     * The location in which the Service config is to be initialized.
     */
    location?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The resource type to which the default service config will be applied.
     */
    resourceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceConfig resource.
 */
export interface ServiceConfigArgs {
    /**
     * The location in which the Service config is to be initialized.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The resource type to which the default service config will be applied.
     */
    resourceType: pulumi.Input<string>;
}
