// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Retrieve the ancestors for a project.
 * See the [REST API](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getAncestry) for more details.
 *
 * ## Example Usage
 */
export function getAncestry(args?: GetAncestryArgs, opts?: pulumi.InvokeOptions): Promise<GetAncestryResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:projects/getAncestry:getAncestry", {
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getAncestry.
 */
export interface GetAncestryArgs {
    /**
     * The ID of the project. If it is not provided, the provider project is used.
     */
    project?: string;
}

/**
 * A collection of values returned by getAncestry.
 */
export interface GetAncestryResult {
    /**
     * A list of the project's ancestors. Structure is defined below.
     */
    readonly ancestors: outputs.projects.GetAncestryAncestor[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The optional user-assigned display name of the project.
     */
    readonly orgId: string;
    /**
     * The parent's id.
     */
    readonly parentId: string;
    /**
     * One of `"folder"` or `"organization"`.
     */
    readonly parentType: string;
    readonly project?: string;
}
/**
 * Retrieve the ancestors for a project.
 * See the [REST API](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getAncestry) for more details.
 *
 * ## Example Usage
 */
export function getAncestryOutput(args?: GetAncestryOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAncestryResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gcp:projects/getAncestry:getAncestry", {
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getAncestry.
 */
export interface GetAncestryOutputArgs {
    /**
     * The ID of the project. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
