// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessApprovalSettingsArgs, AccessApprovalSettingsState } from "./accessApprovalSettings";
export type AccessApprovalSettings = import("./accessApprovalSettings").AccessApprovalSettings;
export const AccessApprovalSettings: typeof import("./accessApprovalSettings").AccessApprovalSettings = null as any;
utilities.lazyLoad(exports, ["AccessApprovalSettings"], () => require("./accessApprovalSettings"));

export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { DefaultServiceAccountsArgs, DefaultServiceAccountsState } from "./defaultServiceAccounts";
export type DefaultServiceAccounts = import("./defaultServiceAccounts").DefaultServiceAccounts;
export const DefaultServiceAccounts: typeof import("./defaultServiceAccounts").DefaultServiceAccounts = null as any;
utilities.lazyLoad(exports, ["DefaultServiceAccounts"], () => require("./defaultServiceAccounts"));

export { GetOrganizationPolicyArgs, GetOrganizationPolicyResult, GetOrganizationPolicyOutputArgs } from "./getOrganizationPolicy";
export const getOrganizationPolicy: typeof import("./getOrganizationPolicy").getOrganizationPolicy = null as any;
export const getOrganizationPolicyOutput: typeof import("./getOrganizationPolicy").getOrganizationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationPolicy","getOrganizationPolicyOutput"], () => require("./getOrganizationPolicy"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectServiceArgs, GetProjectServiceResult, GetProjectServiceOutputArgs } from "./getProjectService";
export const getProjectService: typeof import("./getProjectService").getProjectService = null as any;
export const getProjectServiceOutput: typeof import("./getProjectService").getProjectServiceOutput = null as any;
utilities.lazyLoad(exports, ["getProjectService","getProjectServiceOutput"], () => require("./getProjectService"));

export { IAMAuditConfigArgs, IAMAuditConfigState } from "./iamauditConfig";
export type IAMAuditConfig = import("./iamauditConfig").IAMAuditConfig;
export const IAMAuditConfig: typeof import("./iamauditConfig").IAMAuditConfig = null as any;
utilities.lazyLoad(exports, ["IAMAuditConfig"], () => require("./iamauditConfig"));

export { IAMBindingArgs, IAMBindingState } from "./iambinding";
export type IAMBinding = import("./iambinding").IAMBinding;
export const IAMBinding: typeof import("./iambinding").IAMBinding = null as any;
utilities.lazyLoad(exports, ["IAMBinding"], () => require("./iambinding"));

export { IAMCustomRoleArgs, IAMCustomRoleState } from "./iamcustomRole";
export type IAMCustomRole = import("./iamcustomRole").IAMCustomRole;
export const IAMCustomRole: typeof import("./iamcustomRole").IAMCustomRole = null as any;
utilities.lazyLoad(exports, ["IAMCustomRole"], () => require("./iamcustomRole"));

export { IAMMemberArgs, IAMMemberState } from "./iammember";
export type IAMMember = import("./iammember").IAMMember;
export const IAMMember: typeof import("./iammember").IAMMember = null as any;
utilities.lazyLoad(exports, ["IAMMember"], () => require("./iammember"));

export { IAMPolicyArgs, IAMPolicyState } from "./iampolicy";
export type IAMPolicy = import("./iampolicy").IAMPolicy;
export const IAMPolicy: typeof import("./iampolicy").IAMPolicy = null as any;
utilities.lazyLoad(exports, ["IAMPolicy"], () => require("./iampolicy"));

export { OrganizationPolicyArgs, OrganizationPolicyState } from "./organizationPolicy";
export type OrganizationPolicy = import("./organizationPolicy").OrganizationPolicy;
export const OrganizationPolicy: typeof import("./organizationPolicy").OrganizationPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationPolicy"], () => require("./organizationPolicy"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceIdentityArgs, ServiceIdentityState } from "./serviceIdentity";
export type ServiceIdentity = import("./serviceIdentity").ServiceIdentity;
export const ServiceIdentity: typeof import("./serviceIdentity").ServiceIdentity = null as any;
utilities.lazyLoad(exports, ["ServiceIdentity"], () => require("./serviceIdentity"));

export { UsageExportBucketArgs, UsageExportBucketState } from "./usageExportBucket";
export type UsageExportBucket = import("./usageExportBucket").UsageExportBucket;
export const UsageExportBucket: typeof import("./usageExportBucket").UsageExportBucket = null as any;
utilities.lazyLoad(exports, ["UsageExportBucket"], () => require("./usageExportBucket"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:projects/accessApprovalSettings:AccessApprovalSettings":
                return new AccessApprovalSettings(name, <any>undefined, { urn })
            case "gcp:projects/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "gcp:projects/defaultServiceAccounts:DefaultServiceAccounts":
                return new DefaultServiceAccounts(name, <any>undefined, { urn })
            case "gcp:projects/iAMAuditConfig:IAMAuditConfig":
                return new IAMAuditConfig(name, <any>undefined, { urn })
            case "gcp:projects/iAMBinding:IAMBinding":
                return new IAMBinding(name, <any>undefined, { urn })
            case "gcp:projects/iAMCustomRole:IAMCustomRole":
                return new IAMCustomRole(name, <any>undefined, { urn })
            case "gcp:projects/iAMMember:IAMMember":
                return new IAMMember(name, <any>undefined, { urn })
            case "gcp:projects/iAMPolicy:IAMPolicy":
                return new IAMPolicy(name, <any>undefined, { urn })
            case "gcp:projects/organizationPolicy:OrganizationPolicy":
                return new OrganizationPolicy(name, <any>undefined, { urn })
            case "gcp:projects/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "gcp:projects/serviceIdentity:ServiceIdentity":
                return new ServiceIdentity(name, <any>undefined, { urn })
            case "gcp:projects/usageExportBucket:UsageExportBucket":
                return new UsageExportBucket(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "projects/accessApprovalSettings", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/apiKey", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/defaultServiceAccounts", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/iAMAuditConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/iAMBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/iAMCustomRole", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/iAMMember", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/iAMPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/organizationPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/service", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/serviceIdentity", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/usageExportBucket", _module)
