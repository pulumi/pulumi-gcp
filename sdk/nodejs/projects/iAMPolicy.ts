// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";

export class IAMPolicy extends pulumi.CustomResource {
    /**
     * Get an existing IAMPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IAMPolicyState): IAMPolicy {
        return new IAMPolicy(name, <any>state, { id });
    }

    public readonly authoritative: pulumi.Output<boolean | undefined>;
    public readonly disableProject: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly etag: pulumi.Output<string>;
    public readonly policyData: pulumi.Output<string>;
    public readonly project: pulumi.Output<string>;
    public /*out*/ readonly restorePolicy: pulumi.Output<string>;

    /**
     * Create a IAMPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IAMPolicyArgs, opts?: pulumi.ResourceOptions)
    constructor(name: string, argsOrState?: IAMPolicyArgs | IAMPolicyState, opts?: pulumi.ResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: IAMPolicyState = argsOrState as IAMPolicyState | undefined;
            inputs["authoritative"] = state ? state.authoritative : undefined;
            inputs["disableProject"] = state ? state.disableProject : undefined;
            inputs["etag"] = state ? state.etag : undefined;
            inputs["policyData"] = state ? state.policyData : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["restorePolicy"] = state ? state.restorePolicy : undefined;
        } else {
            const args = argsOrState as IAMPolicyArgs | undefined;
            if (!args || args.policyData === undefined) {
                throw new Error("Missing required property 'policyData'");
            }
            inputs["authoritative"] = args ? args.authoritative : undefined;
            inputs["disableProject"] = args ? args.disableProject : undefined;
            inputs["policyData"] = args ? args.policyData : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["etag"] = undefined /*out*/;
            inputs["restorePolicy"] = undefined /*out*/;
        }
        super("gcp:projects/iAMPolicy:IAMPolicy", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IAMPolicy resources.
 */
export interface IAMPolicyState {
    readonly authoritative?: pulumi.Input<boolean>;
    readonly disableProject?: pulumi.Input<boolean>;
    readonly etag?: pulumi.Input<string>;
    readonly policyData?: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
    readonly restorePolicy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IAMPolicy resource.
 */
export interface IAMPolicyArgs {
    readonly authoritative?: pulumi.Input<boolean>;
    readonly disableProject?: pulumi.Input<boolean>;
    readonly policyData: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
}
