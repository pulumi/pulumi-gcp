// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Allows management of Organization Policies for a Google Cloud Project.
 *
 * > **Warning:** This resource has been superseded by `gcp.orgpolicy.Policy`. `gcp.orgpolicy.Policy` uses Organization Policy API V2 instead of Cloud Resource Manager API V1 and it supports additional features such as tags and conditions.
 *
 * To get more information about Organization Policies, see:
 *
 * * [API documentation](https://cloud.google.com/resource-manager/reference/rest/v1/projects/setOrgPolicy)
 * * How-to Guides
 *     * [Introduction to the Organization Policy Service](https://cloud.google.com/resource-manager/docs/organization-policy/overview)
 *
 * ## Example Usage
 *
 * To set policy with a [boolean constraint](https://cloud.google.com/resource-manager/docs/organization-policy/quickstart-boolean-constraints):
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const serialPortPolicy = new gcp.projects.OrganizationPolicy("serialPortPolicy", {
 *     booleanPolicy: {
 *         enforced: true,
 *     },
 *     constraint: "compute.disableSerialPortAccess",
 *     project: "your-project-id",
 * });
 * ```
 *
 * To set a policy with a [list constraint](https://cloud.google.com/resource-manager/docs/organization-policy/quickstart-list-constraints):
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const servicesPolicy = new gcp.projects.OrganizationPolicy("servicesPolicy", {
 *     constraint: "serviceuser.services",
 *     listPolicy: {
 *         allow: {
 *             all: true,
 *         },
 *     },
 *     project: "your-project-id",
 * });
 * ```
 *
 * Or to deny some services, use the following instead:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const servicesPolicy = new gcp.projects.OrganizationPolicy("servicesPolicy", {
 *     constraint: "serviceuser.services",
 *     listPolicy: {
 *         deny: {
 *             values: ["cloudresourcemanager.googleapis.com"],
 *         },
 *         suggestedValue: "compute.googleapis.com",
 *     },
 *     project: "your-project-id",
 * });
 * ```
 *
 * To restore the default project organization policy, use the following instead:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const servicesPolicy = new gcp.projects.OrganizationPolicy("servicesPolicy", {
 *     constraint: "serviceuser.services",
 *     project: "your-project-id",
 *     restorePolicy: {
 *         "default": true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Project organization policies can be imported using any of the follow formats
 *
 * ```sh
 *  $ pulumi import gcp:projects/organizationPolicy:OrganizationPolicy policy projects/test-project:constraints/serviceuser.services
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:projects/organizationPolicy:OrganizationPolicy policy test-project:constraints/serviceuser.services
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:projects/organizationPolicy:OrganizationPolicy policy test-project:serviceuser.services
 * ```
 */
export class OrganizationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationPolicyState, opts?: pulumi.CustomResourceOptions): OrganizationPolicy {
        return new OrganizationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:projects/organizationPolicy:OrganizationPolicy';

    /**
     * Returns true if the given object is an instance of OrganizationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationPolicy.__pulumiType;
    }

    /**
     * A boolean policy is a constraint that is either enforced or not. Structure is documented below.
     */
    public readonly booleanPolicy!: pulumi.Output<outputs.projects.OrganizationPolicyBooleanPolicy | undefined>;
    /**
     * The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
     */
    public readonly constraint!: pulumi.Output<string>;
    /**
     * (Computed) The etag of the organization policy. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to allow or deny all values. Structure is documented below.
     */
    public readonly listPolicy!: pulumi.Output<outputs.projects.OrganizationPolicyListPolicy | undefined>;
    /**
     * The project id of the project to set the policy for.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * A restore policy is a constraint to restore the default policy. Structure is documented below.
     */
    public readonly restorePolicy!: pulumi.Output<outputs.projects.OrganizationPolicyRestorePolicy | undefined>;
    /**
     * (Computed) The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated. Example: "2016-10-09T12:33:37.578138407Z".
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Version of the Policy. Default version is 0.
     */
    public readonly version!: pulumi.Output<number>;

    /**
     * Create a OrganizationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationPolicyArgs | OrganizationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationPolicyState | undefined;
            resourceInputs["booleanPolicy"] = state ? state.booleanPolicy : undefined;
            resourceInputs["constraint"] = state ? state.constraint : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["listPolicy"] = state ? state.listPolicy : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["restorePolicy"] = state ? state.restorePolicy : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as OrganizationPolicyArgs | undefined;
            if ((!args || args.constraint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'constraint'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["booleanPolicy"] = args ? args.booleanPolicy : undefined;
            resourceInputs["constraint"] = args ? args.constraint : undefined;
            resourceInputs["listPolicy"] = args ? args.listPolicy : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["restorePolicy"] = args ? args.restorePolicy : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationPolicy resources.
 */
export interface OrganizationPolicyState {
    /**
     * A boolean policy is a constraint that is either enforced or not. Structure is documented below.
     */
    booleanPolicy?: pulumi.Input<inputs.projects.OrganizationPolicyBooleanPolicy>;
    /**
     * The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
     */
    constraint?: pulumi.Input<string>;
    /**
     * (Computed) The etag of the organization policy. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other.
     */
    etag?: pulumi.Input<string>;
    /**
     * A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to allow or deny all values. Structure is documented below.
     */
    listPolicy?: pulumi.Input<inputs.projects.OrganizationPolicyListPolicy>;
    /**
     * The project id of the project to set the policy for.
     */
    project?: pulumi.Input<string>;
    /**
     * A restore policy is a constraint to restore the default policy. Structure is documented below.
     */
    restorePolicy?: pulumi.Input<inputs.projects.OrganizationPolicyRestorePolicy>;
    /**
     * (Computed) The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated. Example: "2016-10-09T12:33:37.578138407Z".
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Version of the Policy. Default version is 0.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OrganizationPolicy resource.
 */
export interface OrganizationPolicyArgs {
    /**
     * A boolean policy is a constraint that is either enforced or not. Structure is documented below.
     */
    booleanPolicy?: pulumi.Input<inputs.projects.OrganizationPolicyBooleanPolicy>;
    /**
     * The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
     */
    constraint: pulumi.Input<string>;
    /**
     * A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to allow or deny all values. Structure is documented below.
     */
    listPolicy?: pulumi.Input<inputs.projects.OrganizationPolicyListPolicy>;
    /**
     * The project id of the project to set the policy for.
     */
    project: pulumi.Input<string>;
    /**
     * A restore policy is a constraint to restore the default policy. Structure is documented below.
     */
    restorePolicy?: pulumi.Input<inputs.projects.OrganizationPolicyRestorePolicy>;
    /**
     * Version of the Policy. Default version is 0.
     */
    version?: pulumi.Input<number>;
}
