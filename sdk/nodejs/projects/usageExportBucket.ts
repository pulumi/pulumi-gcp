// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";

/**
 * Allows creation and management of a Google Cloud Platform project.
 * 
 * Projects created with this resource must be associated with an Organization.
 * See the [Organization documentation](https://cloud.google.com/resource-manager/docs/quickstarts) for more details.
 * 
 * The service account used to run Terraform when creating a `google_project`
 * resource must have `roles/resourcemanager.projectCreator`. See the
 * [Access Control for Organizations Using IAM](https://cloud.google.com/resource-manager/docs/access-control-org)
 * doc for more information.
 * 
 * Note that prior to 0.8.5, `google_project` functioned like a data source,
 * meaning any project referenced by it had to be created and managed outside
 * Terraform. As of 0.8.5, `google_project` functions like any other Terraform
 * resource, with Terraform creating and managing the project. To replicate the old
 * behavior, either:
 * 
 * * Use the project ID directly in whatever is referencing the project, using the
 *   [google_project_iam_policy](/docs/providers/google/r/google_project_iam.html)
 *   to replace the old `policy_data` property.
 * * Use the [import](/docs/import/usage.html) functionality
 *   to import your pre-existing project into Terraform, where it can be referenced and
 *   used just like always, keeping in mind that Terraform will attempt to undo any changes
 *   made outside Terraform.
 * 
 * ~> It's important to note that any project resources that were added to your Terraform config
 * prior to 0.8.5 will continue to function as they always have, and will not be managed by
 * Terraform. Only newly added projects are affected.
 */
export class UsageExportBucket extends pulumi.CustomResource {
    /**
     * Get an existing UsageExportBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UsageExportBucketState): UsageExportBucket {
        return new UsageExportBucket(name, <any>state, { id });
    }

    public readonly bucketName: pulumi.Output<string>;
    public readonly prefix: pulumi.Output<string | undefined>;
    public readonly project: pulumi.Output<string>;

    /**
     * Create a UsageExportBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UsageExportBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UsageExportBucketArgs | UsageExportBucketState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: UsageExportBucketState = argsOrState as UsageExportBucketState | undefined;
            inputs["bucketName"] = state ? state.bucketName : undefined;
            inputs["prefix"] = state ? state.prefix : undefined;
            inputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as UsageExportBucketArgs | undefined;
            if (!args || args.bucketName === undefined) {
                throw new Error("Missing required property 'bucketName'");
            }
            inputs["bucketName"] = args ? args.bucketName : undefined;
            inputs["prefix"] = args ? args.prefix : undefined;
            inputs["project"] = args ? args.project : undefined;
        }
        super("gcp:projects/usageExportBucket:UsageExportBucket", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UsageExportBucket resources.
 */
export interface UsageExportBucketState {
    readonly bucketName?: pulumi.Input<string>;
    readonly prefix?: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UsageExportBucket resource.
 */
export interface UsageExportBucketArgs {
    readonly bucketName: pulumi.Input<string>;
    readonly prefix?: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
}
