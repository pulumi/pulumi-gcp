// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ServicePerimeter describes a set of GCP resources which can freely import
 * and export data amongst themselves, but not export outside of the
 * ServicePerimeter. If a request with a source within this ServicePerimeter
 * has a target outside of the ServicePerimeter, the request will be blocked.
 * Otherwise the request is allowed. There are two types of Service Perimeter
 * - Regular and Bridge. Regular Service Perimeters cannot overlap, a single
 * GCP project can only belong to a single regular Service Perimeter. Service
 * Perimeter Bridges can contain only GCP projects as members, a single GCP
 * project may belong to multiple Service Perimeter Bridges.
 * 
 * > **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
 * See [Provider Versions](https://terraform.io/docs/providers/google/provider_versions.html) for more details on beta resources.
 * 
 * To get more information about ServicePerimeter, see:
 * 
 * * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1beta/accessPolicies.servicePerimeters)
 * * How-to Guides
 *     * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)
 * 
 * ## Example Usage - Access Context Manager Service Perimeter Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const access_level = new gcp.accesscontextmanager.AccessLevel("access-level", {
 *     basic: {
 *         conditions: [{
 *             devicePolicy: {
 *                 osConstraints: [{
 *                     osType: "IOS",
 *                 }],
 *                 requireScreenLock: false,
 *             },
 *         }],
 *     },
 *     parent: google_access_context_manager_access_policy_test_access.name.apply(name => `accessPolicies/${name}`),
 *     title: "ios_no_lock",
 * });
 * const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
 *     parent: "organizations/123456789",
 *     title: "my policy",
 * });
 * const service_perimeter = new gcp.accesscontextmanager.ServicePerimeter("service-perimeter", {
 *     parent: google_access_context_manager_access_policy_test_access.name.apply(name => `accessPolicies/${name}`),
 *     status: {
 *         restrictedServices: ["*"],
 *     },
 *     title: "restrict_all",
 * });
 * ```
 */
export class ServicePerimeter extends pulumi.CustomResource {
    /**
     * Get an existing ServicePerimeter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicePerimeterState, opts?: pulumi.CustomResourceOptions): ServicePerimeter {
        return new ServicePerimeter(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly createTime: pulumi.Output<string>;
    public readonly description: pulumi.Output<string | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly parent: pulumi.Output<string>;
    public readonly perimeterType: pulumi.Output<string | undefined>;
    public readonly status: pulumi.Output<{ accessLevels?: string[], resources?: string[], restrictedServices?: string[], unrestrictedServices?: string[] } | undefined>;
    public readonly title: pulumi.Output<string>;
    public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a ServicePerimeter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicePerimeterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicePerimeterArgs | ServicePerimeterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ServicePerimeterState = argsOrState as ServicePerimeterState | undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["parent"] = state ? state.parent : undefined;
            inputs["perimeterType"] = state ? state.perimeterType : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["title"] = state ? state.title : undefined;
            inputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as ServicePerimeterArgs | undefined;
            if (!args || args.parent === undefined) {
                throw new Error("Missing required property 'parent'");
            }
            if (!args || args.title === undefined) {
                throw new Error("Missing required property 'title'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["parent"] = args ? args.parent : undefined;
            inputs["perimeterType"] = args ? args.perimeterType : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["title"] = args ? args.title : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        super("gcp:accesscontextmanager/servicePerimeter:ServicePerimeter", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServicePerimeter resources.
 */
export interface ServicePerimeterState {
    readonly createTime?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly parent?: pulumi.Input<string>;
    readonly perimeterType?: pulumi.Input<string>;
    readonly status?: pulumi.Input<{ accessLevels?: pulumi.Input<pulumi.Input<string>[]>, resources?: pulumi.Input<pulumi.Input<string>[]>, restrictedServices?: pulumi.Input<pulumi.Input<string>[]>, unrestrictedServices?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly title?: pulumi.Input<string>;
    readonly updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServicePerimeter resource.
 */
export interface ServicePerimeterArgs {
    readonly description?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly parent: pulumi.Input<string>;
    readonly perimeterType?: pulumi.Input<string>;
    readonly status?: pulumi.Input<{ accessLevels?: pulumi.Input<pulumi.Input<string>[]>, resources?: pulumi.Input<pulumi.Input<string>[]>, restrictedServices?: pulumi.Input<pulumi.Input<string>[]>, unrestrictedServices?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly title: pulumi.Input<string>;
}
