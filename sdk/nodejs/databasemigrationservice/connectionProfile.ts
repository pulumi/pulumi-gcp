// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A connection profile definition.
 *
 * To get more information about ConnectionProfile, see:
 *
 * * [API documentation](https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.connectionProfiles/create)
 * * How-to Guides
 *     * [Database Migration](https://cloud.google.com/database-migration/docs/)
 *
 * ## Example Usage
 *
 * ### Database Migration Service Connection Profile Cloudsql
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const cloudsqldb = new gcp.sql.DatabaseInstance("cloudsqldb", {
 *     name: "my-database",
 *     databaseVersion: "MYSQL_5_7",
 *     settings: {
 *         tier: "db-n1-standard-1",
 *         deletionProtectionEnabled: false,
 *     },
 *     deletionProtection: false,
 * });
 * const sqlClientCert = new gcp.sql.SslCert("sql_client_cert", {
 *     commonName: "my-cert",
 *     instance: cloudsqldb.name,
 * }, {
 *     dependsOn: [cloudsqldb],
 * });
 * const sqldbUser = new gcp.sql.User("sqldb_user", {
 *     name: "my-username",
 *     instance: cloudsqldb.name,
 *     password: "my-password",
 * }, {
 *     dependsOn: [sqlClientCert],
 * });
 * const cloudsqlprofile = new gcp.databasemigrationservice.ConnectionProfile("cloudsqlprofile", {
 *     location: "us-central1",
 *     connectionProfileId: "my-fromprofileid",
 *     displayName: "my-fromprofileid_display",
 *     labels: {
 *         foo: "bar",
 *     },
 *     mysql: {
 *         host: cloudsqldb.ipAddresses.apply(ipAddresses => ipAddresses[0].ipAddress),
 *         port: 3306,
 *         username: sqldbUser.name,
 *         password: sqldbUser.password,
 *         ssl: {
 *             clientKey: sqlClientCert.privateKey,
 *             clientCertificate: sqlClientCert.cert,
 *             caCertificate: sqlClientCert.serverCaCert,
 *             type: "SERVER_CLIENT",
 *         },
 *         cloudSqlId: "my-database",
 *     },
 * }, {
 *     dependsOn: [sqldbUser],
 * });
 * const cloudsqlprofileDestination = new gcp.databasemigrationservice.ConnectionProfile("cloudsqlprofile_destination", {
 *     location: "us-central1",
 *     connectionProfileId: "my-toprofileid",
 *     displayName: "my-toprofileid_displayname",
 *     labels: {
 *         foo: "bar",
 *     },
 *     cloudsql: {
 *         settings: {
 *             databaseVersion: "MYSQL_5_7",
 *             userLabels: {
 *                 cloudfoo: "cloudbar",
 *             },
 *             tier: "db-n1-standard-1",
 *             edition: "ENTERPRISE",
 *             storageAutoResizeLimit: "0",
 *             activationPolicy: "ALWAYS",
 *             ipConfig: {
 *                 enableIpv4: true,
 *                 requireSsl: true,
 *             },
 *             autoStorageIncrease: true,
 *             dataDiskType: "PD_HDD",
 *             dataDiskSizeGb: "11",
 *             zone: "us-central1-b",
 *             sourceId: project.then(project => `projects/${project.projectId}/locations/us-central1/connectionProfiles/my-fromprofileid`),
 *             rootPassword: "testpasscloudsql",
 *         },
 *     },
 * }, {
 *     dependsOn: [cloudsqlprofile],
 * });
 * ```
 * ### Database Migration Service Connection Profile Postgres
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const postgresqldb = new gcp.sql.DatabaseInstance("postgresqldb", {
 *     name: "my-database",
 *     databaseVersion: "POSTGRES_12",
 *     settings: {
 *         tier: "db-custom-2-13312",
 *     },
 *     deletionProtection: false,
 * });
 * const sqlClientCert = new gcp.sql.SslCert("sql_client_cert", {
 *     commonName: "my-cert",
 *     instance: postgresqldb.name,
 * }, {
 *     dependsOn: [postgresqldb],
 * });
 * const sqldbUser = new gcp.sql.User("sqldb_user", {
 *     name: "my-username",
 *     instance: postgresqldb.name,
 *     password: "my-password",
 * }, {
 *     dependsOn: [sqlClientCert],
 * });
 * const postgresprofile = new gcp.databasemigrationservice.ConnectionProfile("postgresprofile", {
 *     location: "us-central1",
 *     connectionProfileId: "my-profileid",
 *     displayName: "my-profileid_display",
 *     labels: {
 *         foo: "bar",
 *     },
 *     postgresql: {
 *         host: postgresqldb.ipAddresses.apply(ipAddresses => ipAddresses[0].ipAddress),
 *         port: 5432,
 *         username: sqldbUser.name,
 *         password: sqldbUser.password,
 *         ssl: {
 *             clientKey: sqlClientCert.privateKey,
 *             clientCertificate: sqlClientCert.cert,
 *             caCertificate: sqlClientCert.serverCaCert,
 *             type: "SERVER_CLIENT",
 *         },
 *         cloudSqlId: "my-database",
 *     },
 * }, {
 *     dependsOn: [sqldbUser],
 * });
 * ```
 * ### Database Migration Service Connection Profile Postgres No Ssl
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const postgresqldb = new gcp.sql.DatabaseInstance("postgresqldb", {
 *     name: "my-database",
 *     databaseVersion: "POSTGRES_12",
 *     settings: {
 *         tier: "db-custom-2-13312",
 *     },
 *     deletionProtection: false,
 * });
 * const sqlClientCert = new gcp.sql.SslCert("sql_client_cert", {
 *     commonName: "my-cert",
 *     instance: postgresqldb.name,
 * }, {
 *     dependsOn: [postgresqldb],
 * });
 * const sqldbUser = new gcp.sql.User("sqldb_user", {
 *     name: "my-username",
 *     instance: postgresqldb.name,
 *     password: "my-password",
 * }, {
 *     dependsOn: [sqlClientCert],
 * });
 * const postgresprofile = new gcp.databasemigrationservice.ConnectionProfile("postgresprofile", {
 *     location: "us-central1",
 *     connectionProfileId: "my-profileid",
 *     displayName: "my-profileid_display",
 *     labels: {
 *         foo: "bar",
 *     },
 *     postgresql: {
 *         host: postgresqldb.ipAddresses.apply(ipAddresses => ipAddresses[0].ipAddress),
 *         port: 5432,
 *         username: sqldbUser.name,
 *         password: sqldbUser.password,
 *         ssl: {
 *             type: "NONE",
 *         },
 *         cloudSqlId: "my-database",
 *     },
 * }, {
 *     dependsOn: [sqldbUser],
 * });
 * ```
 * ### Database Migration Service Connection Profile Postgres Required Ssl
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const postgresqldb = new gcp.sql.DatabaseInstance("postgresqldb", {
 *     name: "my-database",
 *     databaseVersion: "POSTGRES_12",
 *     settings: {
 *         tier: "db-custom-2-13312",
 *     },
 *     deletionProtection: false,
 * });
 * const sqlClientCert = new gcp.sql.SslCert("sql_client_cert", {
 *     commonName: "my-cert",
 *     instance: postgresqldb.name,
 * }, {
 *     dependsOn: [postgresqldb],
 * });
 * const sqldbUser = new gcp.sql.User("sqldb_user", {
 *     name: "my-username",
 *     instance: postgresqldb.name,
 *     password: "my-password",
 * }, {
 *     dependsOn: [sqlClientCert],
 * });
 * const postgresprofile = new gcp.databasemigrationservice.ConnectionProfile("postgresprofile", {
 *     location: "us-central1",
 *     connectionProfileId: "my-profileid",
 *     displayName: "my-profileid_display",
 *     labels: {
 *         foo: "bar",
 *     },
 *     postgresql: {
 *         host: postgresqldb.ipAddresses.apply(ipAddresses => ipAddresses[0].ipAddress),
 *         port: 5432,
 *         username: sqldbUser.name,
 *         password: sqldbUser.password,
 *         ssl: {
 *             type: "REQUIRED",
 *         },
 *         cloudSqlId: "my-database",
 *     },
 * }, {
 *     dependsOn: [sqldbUser],
 * });
 * ```
 * ### Database Migration Service Connection Profile Oracle
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const oracleprofile = new gcp.databasemigrationservice.ConnectionProfile("oracleprofile", {
 *     location: "us-central1",
 *     connectionProfileId: "my-profileid",
 *     displayName: "my-profileid_display",
 *     labels: {
 *         foo: "bar",
 *     },
 *     oracle: {
 *         host: "host",
 *         port: 1521,
 *         username: "username",
 *         password: "password",
 *         databaseService: "dbprovider",
 *         staticServiceIpConnectivity: {},
 *     },
 * });
 * ```
 * ### Database Migration Service Connection Profile Alloydb
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const _default = new gcp.compute.Network("default", {name: "vpc-network"});
 * const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
 *     name: "private-ip-alloc",
 *     addressType: "INTERNAL",
 *     purpose: "VPC_PEERING",
 *     prefixLength: 16,
 *     network: _default.id,
 * });
 * const vpcConnection = new gcp.servicenetworking.Connection("vpc_connection", {
 *     network: _default.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [privateIpAlloc.name],
 * });
 * const alloydbprofile = new gcp.databasemigrationservice.ConnectionProfile("alloydbprofile", {
 *     location: "us-central1",
 *     connectionProfileId: "my-profileid",
 *     displayName: "my-profileid_display",
 *     labels: {
 *         foo: "bar",
 *     },
 *     alloydb: {
 *         clusterId: "tf-test-dbmsalloycluster_85840",
 *         settings: {
 *             initialUser: {
 *                 user: "alloyuser_60302",
 *                 password: "alloypass_22811",
 *             },
 *             vpcNetwork: _default.id,
 *             labels: {
 *                 alloyfoo: "alloybar",
 *             },
 *             primaryInstanceSettings: {
 *                 id: "priminstid",
 *                 machineConfig: {
 *                     cpuCount: 2,
 *                 },
 *                 databaseFlags: {},
 *                 labels: {
 *                     alloysinstfoo: "allowinstbar",
 *                 },
 *             },
 *         },
 *     },
 * }, {
 *     dependsOn: [vpcConnection],
 * });
 * ```
 * ### Database Migration Service Connection Profile Existing Mysql
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const destinationCsql = new gcp.sql.DatabaseInstance("destination_csql", {
 *     name: "destination-csql",
 *     databaseVersion: "MYSQL_5_7",
 *     settings: {
 *         tier: "db-n1-standard-1",
 *         deletionProtectionEnabled: false,
 *     },
 *     deletionProtection: false,
 * });
 * const existing_mysql = new gcp.databasemigrationservice.ConnectionProfile("existing-mysql", {
 *     location: "us-central1",
 *     connectionProfileId: "destination-cp",
 *     displayName: "destination-cp_display",
 *     labels: {
 *         foo: "bar",
 *     },
 *     mysql: {
 *         cloudSqlId: "destination-csql",
 *     },
 * }, {
 *     dependsOn: [destinationCsql],
 * });
 * ```
 * ### Database Migration Service Connection Profile Existing Postgres
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const destinationCsql = new gcp.sql.DatabaseInstance("destination_csql", {
 *     name: "destination-csql",
 *     databaseVersion: "POSTGRES_15",
 *     settings: {
 *         tier: "db-custom-2-13312",
 *         deletionProtectionEnabled: false,
 *     },
 *     deletionProtection: false,
 * });
 * const existing_psql = new gcp.databasemigrationservice.ConnectionProfile("existing-psql", {
 *     location: "us-central1",
 *     connectionProfileId: "destination-cp",
 *     displayName: "destination-cp_display",
 *     labels: {
 *         foo: "bar",
 *     },
 *     postgresql: {
 *         cloudSqlId: "destination-csql",
 *     },
 * }, {
 *     dependsOn: [destinationCsql],
 * });
 * ```
 * ### Database Migration Service Connection Profile Existing Alloydb
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const _default = new gcp.compute.Network("default", {name: "destination-alloydb"});
 * const destinationAlloydb = new gcp.alloydb.Cluster("destination_alloydb", {
 *     clusterId: "destination-alloydb",
 *     location: "us-central1",
 *     networkConfig: {
 *         network: _default.id,
 *     },
 *     databaseVersion: "POSTGRES_15",
 *     initialUser: {
 *         user: "destination-alloydb",
 *         password: "destination-alloydb",
 *     },
 * });
 * const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
 *     name: "destination-alloydb",
 *     addressType: "INTERNAL",
 *     purpose: "VPC_PEERING",
 *     prefixLength: 16,
 *     network: _default.id,
 * });
 * const vpcConnection = new gcp.servicenetworking.Connection("vpc_connection", {
 *     network: _default.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [privateIpAlloc.name],
 * });
 * const destinationAlloydbPrimary = new gcp.alloydb.Instance("destination_alloydb_primary", {
 *     cluster: destinationAlloydb.name,
 *     instanceId: "destination-alloydb-primary",
 *     instanceType: "PRIMARY",
 * }, {
 *     dependsOn: [vpcConnection],
 * });
 * const existing_alloydb = new gcp.databasemigrationservice.ConnectionProfile("existing-alloydb", {
 *     location: "us-central1",
 *     connectionProfileId: "destination-cp",
 *     displayName: "destination-cp_display",
 *     labels: {
 *         foo: "bar",
 *     },
 *     postgresql: {
 *         alloydbClusterId: "destination-alloydb",
 *     },
 * }, {
 *     dependsOn: [
 *         destinationAlloydb,
 *         destinationAlloydbPrimary,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ConnectionProfile can be imported using any of these accepted formats:
 *
 * * `projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}`
 *
 * * `{{project}}/{{location}}/{{connection_profile_id}}`
 *
 * * `{{location}}/{{connection_profile_id}}`
 *
 * When using the `pulumi import` command, ConnectionProfile can be imported using one of the formats above. For example:
 *
 * ```sh
 * $ pulumi import gcp:databasemigrationservice/connectionProfile:ConnectionProfile default projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:databasemigrationservice/connectionProfile:ConnectionProfile default {{project}}/{{location}}/{{connection_profile_id}}
 * ```
 *
 * ```sh
 * $ pulumi import gcp:databasemigrationservice/connectionProfile:ConnectionProfile default {{location}}/{{connection_profile_id}}
 * ```
 */
export class ConnectionProfile extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionProfileState, opts?: pulumi.CustomResourceOptions): ConnectionProfile {
        return new ConnectionProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:databasemigrationservice/connectionProfile:ConnectionProfile';

    /**
     * Returns true if the given object is an instance of ConnectionProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectionProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectionProfile.__pulumiType;
    }

    /**
     * Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
     * Structure is documented below.
     */
    public readonly alloydb!: pulumi.Output<outputs.databasemigrationservice.ConnectionProfileAlloydb | undefined>;
    /**
     * Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
     * Structure is documented below.
     */
    public readonly cloudsql!: pulumi.Output<outputs.databasemigrationservice.ConnectionProfileCloudsql | undefined>;
    /**
     * The ID of the connection profile.
     */
    public readonly connectionProfileId!: pulumi.Output<string>;
    /**
     * Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC 'Zulu' format, accurate to nanoseconds. Example: '2014-10-02T15:01:23.045123456Z'.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The database provider.
     */
    public /*out*/ readonly dbprovider!: pulumi.Output<string>;
    /**
     * The connection profile display name.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Output only. The error details in case of state FAILED.
     * Structure is documented below.
     */
    public /*out*/ readonly errors!: pulumi.Output<outputs.databasemigrationservice.ConnectionProfileError[]>;
    /**
     * The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location where the connection profile should reside.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * Specifies connection parameters required specifically for MySQL databases.
     * Structure is documented below.
     */
    public readonly mysql!: pulumi.Output<outputs.databasemigrationservice.ConnectionProfileMysql | undefined>;
    /**
     * The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Specifies connection parameters required specifically for Oracle databases.
     * Structure is documented below.
     */
    public readonly oracle!: pulumi.Output<outputs.databasemigrationservice.ConnectionProfileOracle | undefined>;
    /**
     * Specifies connection parameters required specifically for PostgreSQL databases.
     * Structure is documented below.
     */
    public readonly postgresql!: pulumi.Output<outputs.databasemigrationservice.ConnectionProfilePostgresql | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    public /*out*/ readonly pulumiLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The current connection profile state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a ConnectionProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionProfileArgs | ConnectionProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionProfileState | undefined;
            resourceInputs["alloydb"] = state ? state.alloydb : undefined;
            resourceInputs["cloudsql"] = state ? state.cloudsql : undefined;
            resourceInputs["connectionProfileId"] = state ? state.connectionProfileId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dbprovider"] = state ? state.dbprovider : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["errors"] = state ? state.errors : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mysql"] = state ? state.mysql : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oracle"] = state ? state.oracle : undefined;
            resourceInputs["postgresql"] = state ? state.postgresql : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pulumiLabels"] = state ? state.pulumiLabels : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as ConnectionProfileArgs | undefined;
            if ((!args || args.connectionProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionProfileId'");
            }
            resourceInputs["alloydb"] = args ? args.alloydb : undefined;
            resourceInputs["cloudsql"] = args ? args.cloudsql : undefined;
            resourceInputs["connectionProfileId"] = args ? args.connectionProfileId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mysql"] = args ? args.mysql : undefined;
            resourceInputs["oracle"] = args ? args.oracle : undefined;
            resourceInputs["postgresql"] = args ? args.postgresql : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dbprovider"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pulumiLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["effectiveLabels", "pulumiLabels"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ConnectionProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectionProfile resources.
 */
export interface ConnectionProfileState {
    /**
     * Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
     * Structure is documented below.
     */
    alloydb?: pulumi.Input<inputs.databasemigrationservice.ConnectionProfileAlloydb>;
    /**
     * Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
     * Structure is documented below.
     */
    cloudsql?: pulumi.Input<inputs.databasemigrationservice.ConnectionProfileCloudsql>;
    /**
     * The ID of the connection profile.
     */
    connectionProfileId?: pulumi.Input<string>;
    /**
     * Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC 'Zulu' format, accurate to nanoseconds. Example: '2014-10-02T15:01:23.045123456Z'.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The database provider.
     */
    dbprovider?: pulumi.Input<string>;
    /**
     * The connection profile display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     */
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. The error details in case of state FAILED.
     * Structure is documented below.
     */
    errors?: pulumi.Input<pulumi.Input<inputs.databasemigrationservice.ConnectionProfileError>[]>;
    /**
     * The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location where the connection profile should reside.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies connection parameters required specifically for MySQL databases.
     * Structure is documented below.
     */
    mysql?: pulumi.Input<inputs.databasemigrationservice.ConnectionProfileMysql>;
    /**
     * The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies connection parameters required specifically for Oracle databases.
     * Structure is documented below.
     */
    oracle?: pulumi.Input<inputs.databasemigrationservice.ConnectionProfileOracle>;
    /**
     * Specifies connection parameters required specifically for PostgreSQL databases.
     * Structure is documented below.
     */
    postgresql?: pulumi.Input<inputs.databasemigrationservice.ConnectionProfilePostgresql>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     */
    pulumiLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The current connection profile state.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectionProfile resource.
 */
export interface ConnectionProfileArgs {
    /**
     * Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
     * Structure is documented below.
     */
    alloydb?: pulumi.Input<inputs.databasemigrationservice.ConnectionProfileAlloydb>;
    /**
     * Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
     * Structure is documented below.
     */
    cloudsql?: pulumi.Input<inputs.databasemigrationservice.ConnectionProfileCloudsql>;
    /**
     * The ID of the connection profile.
     */
    connectionProfileId: pulumi.Input<string>;
    /**
     * The connection profile display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs.
     *
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location where the connection profile should reside.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies connection parameters required specifically for MySQL databases.
     * Structure is documented below.
     */
    mysql?: pulumi.Input<inputs.databasemigrationservice.ConnectionProfileMysql>;
    /**
     * Specifies connection parameters required specifically for Oracle databases.
     * Structure is documented below.
     */
    oracle?: pulumi.Input<inputs.databasemigrationservice.ConnectionProfileOracle>;
    /**
     * Specifies connection parameters required specifically for PostgreSQL databases.
     * Structure is documented below.
     */
    postgresql?: pulumi.Input<inputs.databasemigrationservice.ConnectionProfilePostgresql>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
