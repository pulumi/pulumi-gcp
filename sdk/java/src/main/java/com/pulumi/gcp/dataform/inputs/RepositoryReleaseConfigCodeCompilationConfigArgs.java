// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryReleaseConfigCodeCompilationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryReleaseConfigCodeCompilationConfigArgs Empty = new RepositoryReleaseConfigCodeCompilationConfigArgs();

    /**
     * Optional. The default schema (BigQuery dataset ID) for assertions.
     * 
     */
    @Import(name="assertionSchema")
    private @Nullable Output<String> assertionSchema;

    /**
     * @return Optional. The default schema (BigQuery dataset ID) for assertions.
     * 
     */
    public Optional<Output<String>> assertionSchema() {
        return Optional.ofNullable(this.assertionSchema);
    }

    /**
     * Optional. The suffix that should be appended to all database (Google Cloud project ID) names.
     * 
     */
    @Import(name="databaseSuffix")
    private @Nullable Output<String> databaseSuffix;

    /**
     * @return Optional. The suffix that should be appended to all database (Google Cloud project ID) names.
     * 
     */
    public Optional<Output<String>> databaseSuffix() {
        return Optional.ofNullable(this.databaseSuffix);
    }

    /**
     * Optional. The default database (Google Cloud project ID).
     * 
     */
    @Import(name="defaultDatabase")
    private @Nullable Output<String> defaultDatabase;

    /**
     * @return Optional. The default database (Google Cloud project ID).
     * 
     */
    public Optional<Output<String>> defaultDatabase() {
        return Optional.ofNullable(this.defaultDatabase);
    }

    /**
     * Optional. The default BigQuery location to use. Defaults to &#34;US&#34;.
     * See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations.
     * 
     */
    @Import(name="defaultLocation")
    private @Nullable Output<String> defaultLocation;

    /**
     * @return Optional. The default BigQuery location to use. Defaults to &#34;US&#34;.
     * See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations.
     * 
     */
    public Optional<Output<String>> defaultLocation() {
        return Optional.ofNullable(this.defaultLocation);
    }

    /**
     * Optional. The default schema (BigQuery dataset ID).
     * 
     */
    @Import(name="defaultSchema")
    private @Nullable Output<String> defaultSchema;

    /**
     * @return Optional. The default schema (BigQuery dataset ID).
     * 
     */
    public Optional<Output<String>> defaultSchema() {
        return Optional.ofNullable(this.defaultSchema);
    }

    /**
     * Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
     * 
     */
    @Import(name="schemaSuffix")
    private @Nullable Output<String> schemaSuffix;

    /**
     * @return Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
     * 
     */
    public Optional<Output<String>> schemaSuffix() {
        return Optional.ofNullable(this.schemaSuffix);
    }

    /**
     * Optional. The prefix that should be prepended to all table names.
     * 
     */
    @Import(name="tablePrefix")
    private @Nullable Output<String> tablePrefix;

    /**
     * @return Optional. The prefix that should be prepended to all table names.
     * 
     */
    public Optional<Output<String>> tablePrefix() {
        return Optional.ofNullable(this.tablePrefix);
    }

    /**
     * Optional. User-defined variables that are made available to project code during compilation.
     * An object containing a list of &#34;key&#34;: value pairs.
     * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    @Import(name="vars")
    private @Nullable Output<Map<String,String>> vars;

    /**
     * @return Optional. User-defined variables that are made available to project code during compilation.
     * An object containing a list of &#34;key&#34;: value pairs.
     * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    public Optional<Output<Map<String,String>>> vars() {
        return Optional.ofNullable(this.vars);
    }

    private RepositoryReleaseConfigCodeCompilationConfigArgs() {}

    private RepositoryReleaseConfigCodeCompilationConfigArgs(RepositoryReleaseConfigCodeCompilationConfigArgs $) {
        this.assertionSchema = $.assertionSchema;
        this.databaseSuffix = $.databaseSuffix;
        this.defaultDatabase = $.defaultDatabase;
        this.defaultLocation = $.defaultLocation;
        this.defaultSchema = $.defaultSchema;
        this.schemaSuffix = $.schemaSuffix;
        this.tablePrefix = $.tablePrefix;
        this.vars = $.vars;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryReleaseConfigCodeCompilationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryReleaseConfigCodeCompilationConfigArgs $;

        public Builder() {
            $ = new RepositoryReleaseConfigCodeCompilationConfigArgs();
        }

        public Builder(RepositoryReleaseConfigCodeCompilationConfigArgs defaults) {
            $ = new RepositoryReleaseConfigCodeCompilationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assertionSchema Optional. The default schema (BigQuery dataset ID) for assertions.
         * 
         * @return builder
         * 
         */
        public Builder assertionSchema(@Nullable Output<String> assertionSchema) {
            $.assertionSchema = assertionSchema;
            return this;
        }

        /**
         * @param assertionSchema Optional. The default schema (BigQuery dataset ID) for assertions.
         * 
         * @return builder
         * 
         */
        public Builder assertionSchema(String assertionSchema) {
            return assertionSchema(Output.of(assertionSchema));
        }

        /**
         * @param databaseSuffix Optional. The suffix that should be appended to all database (Google Cloud project ID) names.
         * 
         * @return builder
         * 
         */
        public Builder databaseSuffix(@Nullable Output<String> databaseSuffix) {
            $.databaseSuffix = databaseSuffix;
            return this;
        }

        /**
         * @param databaseSuffix Optional. The suffix that should be appended to all database (Google Cloud project ID) names.
         * 
         * @return builder
         * 
         */
        public Builder databaseSuffix(String databaseSuffix) {
            return databaseSuffix(Output.of(databaseSuffix));
        }

        /**
         * @param defaultDatabase Optional. The default database (Google Cloud project ID).
         * 
         * @return builder
         * 
         */
        public Builder defaultDatabase(@Nullable Output<String> defaultDatabase) {
            $.defaultDatabase = defaultDatabase;
            return this;
        }

        /**
         * @param defaultDatabase Optional. The default database (Google Cloud project ID).
         * 
         * @return builder
         * 
         */
        public Builder defaultDatabase(String defaultDatabase) {
            return defaultDatabase(Output.of(defaultDatabase));
        }

        /**
         * @param defaultLocation Optional. The default BigQuery location to use. Defaults to &#34;US&#34;.
         * See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations.
         * 
         * @return builder
         * 
         */
        public Builder defaultLocation(@Nullable Output<String> defaultLocation) {
            $.defaultLocation = defaultLocation;
            return this;
        }

        /**
         * @param defaultLocation Optional. The default BigQuery location to use. Defaults to &#34;US&#34;.
         * See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations.
         * 
         * @return builder
         * 
         */
        public Builder defaultLocation(String defaultLocation) {
            return defaultLocation(Output.of(defaultLocation));
        }

        /**
         * @param defaultSchema Optional. The default schema (BigQuery dataset ID).
         * 
         * @return builder
         * 
         */
        public Builder defaultSchema(@Nullable Output<String> defaultSchema) {
            $.defaultSchema = defaultSchema;
            return this;
        }

        /**
         * @param defaultSchema Optional. The default schema (BigQuery dataset ID).
         * 
         * @return builder
         * 
         */
        public Builder defaultSchema(String defaultSchema) {
            return defaultSchema(Output.of(defaultSchema));
        }

        /**
         * @param schemaSuffix Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
         * 
         * @return builder
         * 
         */
        public Builder schemaSuffix(@Nullable Output<String> schemaSuffix) {
            $.schemaSuffix = schemaSuffix;
            return this;
        }

        /**
         * @param schemaSuffix Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
         * 
         * @return builder
         * 
         */
        public Builder schemaSuffix(String schemaSuffix) {
            return schemaSuffix(Output.of(schemaSuffix));
        }

        /**
         * @param tablePrefix Optional. The prefix that should be prepended to all table names.
         * 
         * @return builder
         * 
         */
        public Builder tablePrefix(@Nullable Output<String> tablePrefix) {
            $.tablePrefix = tablePrefix;
            return this;
        }

        /**
         * @param tablePrefix Optional. The prefix that should be prepended to all table names.
         * 
         * @return builder
         * 
         */
        public Builder tablePrefix(String tablePrefix) {
            return tablePrefix(Output.of(tablePrefix));
        }

        /**
         * @param vars Optional. User-defined variables that are made available to project code during compilation.
         * An object containing a list of &#34;key&#34;: value pairs.
         * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * @return builder
         * 
         */
        public Builder vars(@Nullable Output<Map<String,String>> vars) {
            $.vars = vars;
            return this;
        }

        /**
         * @param vars Optional. User-defined variables that are made available to project code during compilation.
         * An object containing a list of &#34;key&#34;: value pairs.
         * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * @return builder
         * 
         */
        public Builder vars(Map<String,String> vars) {
            return vars(Output.of(vars));
        }

        public RepositoryReleaseConfigCodeCompilationConfigArgs build() {
            return $;
        }
    }

}
