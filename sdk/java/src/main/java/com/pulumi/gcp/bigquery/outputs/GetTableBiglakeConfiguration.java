// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTableBiglakeConfiguration {
    /**
     * @return The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form &#34;&amp;lt;project\_id&amp;gt;.&amp;lt;location\_id&amp;gt;.&amp;lt;connection\_id&amp;gt;&#34; or &#34;projects/&amp;lt;project\_id&amp;gt;/locations/&amp;lt;location\_id&amp;gt;/connections/&amp;lt;connection\_id&amp;gt;&#34;.
     * 
     */
    private String connectionId;
    /**
     * @return The file format the data is stored in.
     * 
     */
    private String fileFormat;
    /**
     * @return The fully qualified location prefix of the external folder where table data is stored. The &#39;*&#39; wildcard character is not allowed. The URI should be in the format &#34;gs://bucket/path_to_table/&#34;
     * 
     */
    private String storageUri;
    /**
     * @return The table format the metadata only snapshots are stored in.
     * 
     */
    private String tableFormat;

    private GetTableBiglakeConfiguration() {}
    /**
     * @return The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form &#34;&amp;lt;project\_id&amp;gt;.&amp;lt;location\_id&amp;gt;.&amp;lt;connection\_id&amp;gt;&#34; or &#34;projects/&amp;lt;project\_id&amp;gt;/locations/&amp;lt;location\_id&amp;gt;/connections/&amp;lt;connection\_id&amp;gt;&#34;.
     * 
     */
    public String connectionId() {
        return this.connectionId;
    }
    /**
     * @return The file format the data is stored in.
     * 
     */
    public String fileFormat() {
        return this.fileFormat;
    }
    /**
     * @return The fully qualified location prefix of the external folder where table data is stored. The &#39;*&#39; wildcard character is not allowed. The URI should be in the format &#34;gs://bucket/path_to_table/&#34;
     * 
     */
    public String storageUri() {
        return this.storageUri;
    }
    /**
     * @return The table format the metadata only snapshots are stored in.
     * 
     */
    public String tableFormat() {
        return this.tableFormat;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableBiglakeConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectionId;
        private String fileFormat;
        private String storageUri;
        private String tableFormat;
        public Builder() {}
        public Builder(GetTableBiglakeConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionId = defaults.connectionId;
    	      this.fileFormat = defaults.fileFormat;
    	      this.storageUri = defaults.storageUri;
    	      this.tableFormat = defaults.tableFormat;
        }

        @CustomType.Setter
        public Builder connectionId(String connectionId) {
            if (connectionId == null) {
              throw new MissingRequiredPropertyException("GetTableBiglakeConfiguration", "connectionId");
            }
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder fileFormat(String fileFormat) {
            if (fileFormat == null) {
              throw new MissingRequiredPropertyException("GetTableBiglakeConfiguration", "fileFormat");
            }
            this.fileFormat = fileFormat;
            return this;
        }
        @CustomType.Setter
        public Builder storageUri(String storageUri) {
            if (storageUri == null) {
              throw new MissingRequiredPropertyException("GetTableBiglakeConfiguration", "storageUri");
            }
            this.storageUri = storageUri;
            return this;
        }
        @CustomType.Setter
        public Builder tableFormat(String tableFormat) {
            if (tableFormat == null) {
              throw new MissingRequiredPropertyException("GetTableBiglakeConfiguration", "tableFormat");
            }
            this.tableFormat = tableFormat;
            return this;
        }
        public GetTableBiglakeConfiguration build() {
            final var _resultValue = new GetTableBiglakeConfiguration();
            _resultValue.connectionId = connectionId;
            _resultValue.fileFormat = fileFormat;
            _resultValue.storageUri = storageUri;
            _resultValue.tableFormat = tableFormat;
            return _resultValue;
        }
    }
}
