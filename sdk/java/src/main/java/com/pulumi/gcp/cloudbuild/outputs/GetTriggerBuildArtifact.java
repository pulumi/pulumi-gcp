// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBuildArtifactMavenArtifact;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBuildArtifactNpmPackage;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBuildArtifactObject;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBuildArtifactPythonPackage;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTriggerBuildArtifact {
    /**
     * @return A list of images to be pushed upon the successful completion of all build steps.
     * 
     * The images will be pushed using the builder service account&#39;s credentials.
     * 
     * The digests of the pushed images will be stored in the Build resource&#39;s results field.
     * 
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * 
     */
    private List<String> images;
    /**
     * @return A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
     * 
     * The location and generation of the uploaded objects will be stored in the Build resource&#39;s results field.
     * 
     * If any objects fail to be pushed, the build is marked FAILURE.
     * 
     */
    private List<GetTriggerBuildArtifactMavenArtifact> mavenArtifacts;
    /**
     * @return Npm package to upload to Artifact Registry upon successful completion of all build steps.
     * 
     * The location and generation of the uploaded objects will be stored in the Build resource&#39;s results field.
     * 
     * If any objects fail to be pushed, the build is marked FAILURE.
     * 
     */
    private List<GetTriggerBuildArtifactNpmPackage> npmPackages;
    /**
     * @return A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
     * 
     * Files in the workspace matching specified paths globs will be uploaded to the
     * Cloud Storage location using the builder service account&#39;s credentials.
     * 
     * The location and generation of the uploaded objects will be stored in the Build resource&#39;s results field.
     * 
     * If any objects fail to be pushed, the build is marked FAILURE.
     * 
     */
    private List<GetTriggerBuildArtifactObject> objects;
    /**
     * @return Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
     * 
     * The location and generation of the uploaded objects will be stored in the Build resource&#39;s results field.
     * 
     * If any objects fail to be pushed, the build is marked FAILURE.
     * 
     */
    private List<GetTriggerBuildArtifactPythonPackage> pythonPackages;

    private GetTriggerBuildArtifact() {}
    /**
     * @return A list of images to be pushed upon the successful completion of all build steps.
     * 
     * The images will be pushed using the builder service account&#39;s credentials.
     * 
     * The digests of the pushed images will be stored in the Build resource&#39;s results field.
     * 
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * 
     */
    public List<String> images() {
        return this.images;
    }
    /**
     * @return A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
     * 
     * The location and generation of the uploaded objects will be stored in the Build resource&#39;s results field.
     * 
     * If any objects fail to be pushed, the build is marked FAILURE.
     * 
     */
    public List<GetTriggerBuildArtifactMavenArtifact> mavenArtifacts() {
        return this.mavenArtifacts;
    }
    /**
     * @return Npm package to upload to Artifact Registry upon successful completion of all build steps.
     * 
     * The location and generation of the uploaded objects will be stored in the Build resource&#39;s results field.
     * 
     * If any objects fail to be pushed, the build is marked FAILURE.
     * 
     */
    public List<GetTriggerBuildArtifactNpmPackage> npmPackages() {
        return this.npmPackages;
    }
    /**
     * @return A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
     * 
     * Files in the workspace matching specified paths globs will be uploaded to the
     * Cloud Storage location using the builder service account&#39;s credentials.
     * 
     * The location and generation of the uploaded objects will be stored in the Build resource&#39;s results field.
     * 
     * If any objects fail to be pushed, the build is marked FAILURE.
     * 
     */
    public List<GetTriggerBuildArtifactObject> objects() {
        return this.objects;
    }
    /**
     * @return Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
     * 
     * The location and generation of the uploaded objects will be stored in the Build resource&#39;s results field.
     * 
     * If any objects fail to be pushed, the build is marked FAILURE.
     * 
     */
    public List<GetTriggerBuildArtifactPythonPackage> pythonPackages() {
        return this.pythonPackages;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTriggerBuildArtifact defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> images;
        private List<GetTriggerBuildArtifactMavenArtifact> mavenArtifacts;
        private List<GetTriggerBuildArtifactNpmPackage> npmPackages;
        private List<GetTriggerBuildArtifactObject> objects;
        private List<GetTriggerBuildArtifactPythonPackage> pythonPackages;
        public Builder() {}
        public Builder(GetTriggerBuildArtifact defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.images = defaults.images;
    	      this.mavenArtifacts = defaults.mavenArtifacts;
    	      this.npmPackages = defaults.npmPackages;
    	      this.objects = defaults.objects;
    	      this.pythonPackages = defaults.pythonPackages;
        }

        @CustomType.Setter
        public Builder images(List<String> images) {
            if (images == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildArtifact", "images");
            }
            this.images = images;
            return this;
        }
        public Builder images(String... images) {
            return images(List.of(images));
        }
        @CustomType.Setter
        public Builder mavenArtifacts(List<GetTriggerBuildArtifactMavenArtifact> mavenArtifacts) {
            if (mavenArtifacts == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildArtifact", "mavenArtifacts");
            }
            this.mavenArtifacts = mavenArtifacts;
            return this;
        }
        public Builder mavenArtifacts(GetTriggerBuildArtifactMavenArtifact... mavenArtifacts) {
            return mavenArtifacts(List.of(mavenArtifacts));
        }
        @CustomType.Setter
        public Builder npmPackages(List<GetTriggerBuildArtifactNpmPackage> npmPackages) {
            if (npmPackages == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildArtifact", "npmPackages");
            }
            this.npmPackages = npmPackages;
            return this;
        }
        public Builder npmPackages(GetTriggerBuildArtifactNpmPackage... npmPackages) {
            return npmPackages(List.of(npmPackages));
        }
        @CustomType.Setter
        public Builder objects(List<GetTriggerBuildArtifactObject> objects) {
            if (objects == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildArtifact", "objects");
            }
            this.objects = objects;
            return this;
        }
        public Builder objects(GetTriggerBuildArtifactObject... objects) {
            return objects(List.of(objects));
        }
        @CustomType.Setter
        public Builder pythonPackages(List<GetTriggerBuildArtifactPythonPackage> pythonPackages) {
            if (pythonPackages == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildArtifact", "pythonPackages");
            }
            this.pythonPackages = pythonPackages;
            return this;
        }
        public Builder pythonPackages(GetTriggerBuildArtifactPythonPackage... pythonPackages) {
            return pythonPackages(List.of(pythonPackages));
        }
        public GetTriggerBuildArtifact build() {
            final var _resultValue = new GetTriggerBuildArtifact();
            _resultValue.images = images;
            _resultValue.mavenArtifacts = mavenArtifacts;
            _resultValue.npmPackages = npmPackages;
            _resultValue.objects = objects;
            _resultValue.pythonPackages = pythonPackages;
            return _resultValue;
        }
    }
}
