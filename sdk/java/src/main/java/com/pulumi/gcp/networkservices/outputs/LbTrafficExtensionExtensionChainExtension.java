// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LbTrafficExtensionExtensionChainExtension {
    /**
     * @return The :authority header in the gRPC request sent from Envoy to the extension service.
     * 
     */
    private @Nullable String authority;
    /**
     * @return Determines how the proxy behaves if the call to the extension fails or times out.
     * When set to TRUE, request or response processing continues without error.
     * Any subsequent extensions in the extension chain are also executed.
     * When set to FALSE: * If response headers have not been delivered to the downstream client,
     * a generic 500 error is returned to the client. The error response can be tailored by
     * configuring a custom error response in the load balancer.
     * 
     */
    private @Nullable Boolean failOpen;
    /**
     * @return List of the HTTP headers to forward to the extension (from the client or backend).
     * If omitted, all headers are sent. Each element is a string indicating the header name.
     * 
     */
    private @Nullable List<String> forwardHeaders;
    /**
     * @return Metadata associated with the extension. This field is used to pass metadata to the extension service.
     * You can set up key value pairs for metadata as you like and need.
     * f.e. {&#34;key&#34;: &#34;value&#34;, &#34;key2&#34;: &#34;value2&#34;}.
     * 
     */
    private @Nullable Map<String,String> metadata;
    /**
     * @return The name for this extension. The name is logged as part of the HTTP request logs.
     * The name must conform with RFC-1034, is restricted to lower-cased letters, numbers and hyphens,
     * and can have a maximum length of 63 characters. Additionally, the first character must be a letter
     * and the last a letter or a number.
     * 
     */
    private String name;
    /**
     * @return The reference to the service that runs the extension. Must be a reference to a backend service
     * 
     */
    private String service;
    /**
     * @return A set of events during request or response processing for which this extension is called.
     * This field is required for the LbTrafficExtension resource. It&#39;s not relevant for the LbRouteExtension
     * resource. Possible values:`EVENT_TYPE_UNSPECIFIED`, `REQUEST_HEADERS`, `REQUEST_BODY`, `RESPONSE_HEADERS`,
     * `RESPONSE_BODY`, `RESPONSE_BODY` and `RESPONSE_BODY`.
     * 
     */
    private @Nullable List<String> supportedEvents;
    /**
     * @return Specifies the timeout for each individual message on the stream. The timeout must be between 10-1000 milliseconds.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    private @Nullable String timeout;

    private LbTrafficExtensionExtensionChainExtension() {}
    /**
     * @return The :authority header in the gRPC request sent from Envoy to the extension service.
     * 
     */
    public Optional<String> authority() {
        return Optional.ofNullable(this.authority);
    }
    /**
     * @return Determines how the proxy behaves if the call to the extension fails or times out.
     * When set to TRUE, request or response processing continues without error.
     * Any subsequent extensions in the extension chain are also executed.
     * When set to FALSE: * If response headers have not been delivered to the downstream client,
     * a generic 500 error is returned to the client. The error response can be tailored by
     * configuring a custom error response in the load balancer.
     * 
     */
    public Optional<Boolean> failOpen() {
        return Optional.ofNullable(this.failOpen);
    }
    /**
     * @return List of the HTTP headers to forward to the extension (from the client or backend).
     * If omitted, all headers are sent. Each element is a string indicating the header name.
     * 
     */
    public List<String> forwardHeaders() {
        return this.forwardHeaders == null ? List.of() : this.forwardHeaders;
    }
    /**
     * @return Metadata associated with the extension. This field is used to pass metadata to the extension service.
     * You can set up key value pairs for metadata as you like and need.
     * f.e. {&#34;key&#34;: &#34;value&#34;, &#34;key2&#34;: &#34;value2&#34;}.
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata == null ? Map.of() : this.metadata;
    }
    /**
     * @return The name for this extension. The name is logged as part of the HTTP request logs.
     * The name must conform with RFC-1034, is restricted to lower-cased letters, numbers and hyphens,
     * and can have a maximum length of 63 characters. Additionally, the first character must be a letter
     * and the last a letter or a number.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The reference to the service that runs the extension. Must be a reference to a backend service
     * 
     */
    public String service() {
        return this.service;
    }
    /**
     * @return A set of events during request or response processing for which this extension is called.
     * This field is required for the LbTrafficExtension resource. It&#39;s not relevant for the LbRouteExtension
     * resource. Possible values:`EVENT_TYPE_UNSPECIFIED`, `REQUEST_HEADERS`, `REQUEST_BODY`, `RESPONSE_HEADERS`,
     * `RESPONSE_BODY`, `RESPONSE_BODY` and `RESPONSE_BODY`.
     * 
     */
    public List<String> supportedEvents() {
        return this.supportedEvents == null ? List.of() : this.supportedEvents;
    }
    /**
     * @return Specifies the timeout for each individual message on the stream. The timeout must be between 10-1000 milliseconds.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<String> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LbTrafficExtensionExtensionChainExtension defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authority;
        private @Nullable Boolean failOpen;
        private @Nullable List<String> forwardHeaders;
        private @Nullable Map<String,String> metadata;
        private String name;
        private String service;
        private @Nullable List<String> supportedEvents;
        private @Nullable String timeout;
        public Builder() {}
        public Builder(LbTrafficExtensionExtensionChainExtension defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authority = defaults.authority;
    	      this.failOpen = defaults.failOpen;
    	      this.forwardHeaders = defaults.forwardHeaders;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.service = defaults.service;
    	      this.supportedEvents = defaults.supportedEvents;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder authority(@Nullable String authority) {

            this.authority = authority;
            return this;
        }
        @CustomType.Setter
        public Builder failOpen(@Nullable Boolean failOpen) {

            this.failOpen = failOpen;
            return this;
        }
        @CustomType.Setter
        public Builder forwardHeaders(@Nullable List<String> forwardHeaders) {

            this.forwardHeaders = forwardHeaders;
            return this;
        }
        public Builder forwardHeaders(String... forwardHeaders) {
            return forwardHeaders(List.of(forwardHeaders));
        }
        @CustomType.Setter
        public Builder metadata(@Nullable Map<String,String> metadata) {

            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("LbTrafficExtensionExtensionChainExtension", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder service(String service) {
            if (service == null) {
              throw new MissingRequiredPropertyException("LbTrafficExtensionExtensionChainExtension", "service");
            }
            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder supportedEvents(@Nullable List<String> supportedEvents) {

            this.supportedEvents = supportedEvents;
            return this;
        }
        public Builder supportedEvents(String... supportedEvents) {
            return supportedEvents(List.of(supportedEvents));
        }
        @CustomType.Setter
        public Builder timeout(@Nullable String timeout) {

            this.timeout = timeout;
            return this;
        }
        public LbTrafficExtensionExtensionChainExtension build() {
            final var _resultValue = new LbTrafficExtensionExtensionChainExtension();
            _resultValue.authority = authority;
            _resultValue.failOpen = failOpen;
            _resultValue.forwardHeaders = forwardHeaders;
            _resultValue.metadata = metadata;
            _resultValue.name = name;
            _resultValue.service = service;
            _resultValue.supportedEvents = supportedEvents;
            _resultValue.timeout = timeout;
            return _resultValue;
        }
    }
}
