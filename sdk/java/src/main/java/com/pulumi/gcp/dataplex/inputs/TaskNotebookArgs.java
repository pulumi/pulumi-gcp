// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.TaskNotebookInfrastructureSpecArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskNotebookArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskNotebookArgs Empty = new TaskNotebookArgs();

    /**
     * Cloud Storage URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     * 
     */
    @Import(name="archiveUris")
    private @Nullable Output<List<String>> archiveUris;

    /**
     * @return Cloud Storage URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     * 
     */
    public Optional<Output<List<String>>> archiveUris() {
        return Optional.ofNullable(this.archiveUris);
    }

    /**
     * Cloud Storage URIs of files to be placed in the working directory of each executor.
     * 
     */
    @Import(name="fileUris")
    private @Nullable Output<List<String>> fileUris;

    /**
     * @return Cloud Storage URIs of files to be placed in the working directory of each executor.
     * 
     */
    public Optional<Output<List<String>>> fileUris() {
        return Optional.ofNullable(this.fileUris);
    }

    /**
     * Infrastructure specification for the execution.
     * Structure is documented below.
     * 
     */
    @Import(name="infrastructureSpec")
    private @Nullable Output<TaskNotebookInfrastructureSpecArgs> infrastructureSpec;

    /**
     * @return Infrastructure specification for the execution.
     * Structure is documented below.
     * 
     */
    public Optional<Output<TaskNotebookInfrastructureSpecArgs>> infrastructureSpec() {
        return Optional.ofNullable(this.infrastructureSpec);
    }

    /**
     * Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).
     * 
     */
    @Import(name="notebook", required=true)
    private Output<String> notebook;

    /**
     * @return Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).
     * 
     */
    public Output<String> notebook() {
        return this.notebook;
    }

    private TaskNotebookArgs() {}

    private TaskNotebookArgs(TaskNotebookArgs $) {
        this.archiveUris = $.archiveUris;
        this.fileUris = $.fileUris;
        this.infrastructureSpec = $.infrastructureSpec;
        this.notebook = $.notebook;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskNotebookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskNotebookArgs $;

        public Builder() {
            $ = new TaskNotebookArgs();
        }

        public Builder(TaskNotebookArgs defaults) {
            $ = new TaskNotebookArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archiveUris Cloud Storage URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
         * 
         * @return builder
         * 
         */
        public Builder archiveUris(@Nullable Output<List<String>> archiveUris) {
            $.archiveUris = archiveUris;
            return this;
        }

        /**
         * @param archiveUris Cloud Storage URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
         * 
         * @return builder
         * 
         */
        public Builder archiveUris(List<String> archiveUris) {
            return archiveUris(Output.of(archiveUris));
        }

        /**
         * @param archiveUris Cloud Storage URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
         * 
         * @return builder
         * 
         */
        public Builder archiveUris(String... archiveUris) {
            return archiveUris(List.of(archiveUris));
        }

        /**
         * @param fileUris Cloud Storage URIs of files to be placed in the working directory of each executor.
         * 
         * @return builder
         * 
         */
        public Builder fileUris(@Nullable Output<List<String>> fileUris) {
            $.fileUris = fileUris;
            return this;
        }

        /**
         * @param fileUris Cloud Storage URIs of files to be placed in the working directory of each executor.
         * 
         * @return builder
         * 
         */
        public Builder fileUris(List<String> fileUris) {
            return fileUris(Output.of(fileUris));
        }

        /**
         * @param fileUris Cloud Storage URIs of files to be placed in the working directory of each executor.
         * 
         * @return builder
         * 
         */
        public Builder fileUris(String... fileUris) {
            return fileUris(List.of(fileUris));
        }

        /**
         * @param infrastructureSpec Infrastructure specification for the execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureSpec(@Nullable Output<TaskNotebookInfrastructureSpecArgs> infrastructureSpec) {
            $.infrastructureSpec = infrastructureSpec;
            return this;
        }

        /**
         * @param infrastructureSpec Infrastructure specification for the execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureSpec(TaskNotebookInfrastructureSpecArgs infrastructureSpec) {
            return infrastructureSpec(Output.of(infrastructureSpec));
        }

        /**
         * @param notebook Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).
         * 
         * @return builder
         * 
         */
        public Builder notebook(Output<String> notebook) {
            $.notebook = notebook;
            return this;
        }

        /**
         * @param notebook Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).
         * 
         * @return builder
         * 
         */
        public Builder notebook(String notebook) {
            return notebook(Output.of(notebook));
        }

        public TaskNotebookArgs build() {
            $.notebook = Objects.requireNonNull($.notebook, "expected parameter 'notebook' to be non-null");
            return $;
        }
    }

}
