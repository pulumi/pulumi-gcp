// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainMappingSpec {
    /**
     * @return The mode of the certificate.
     * Default value is `AUTOMATIC`.
     * Possible values are `NONE` and `AUTOMATIC`.
     * 
     */
    private @Nullable String certificateMode;
    /**
     * @return If set, the mapping will override any mapping set before this spec was set.
     * It is recommended that the user leaves this empty to receive an error
     * warning about a potential conflict and only set it once the respective UI
     * has given such a warning.
     * 
     */
    private @Nullable Boolean forceOverride;
    /**
     * @return The name of the Cloud Run Service that this DomainMapping applies to.
     * The route must exist.
     * 
     */
    private String routeName;

    private DomainMappingSpec() {}
    /**
     * @return The mode of the certificate.
     * Default value is `AUTOMATIC`.
     * Possible values are `NONE` and `AUTOMATIC`.
     * 
     */
    public Optional<String> certificateMode() {
        return Optional.ofNullable(this.certificateMode);
    }
    /**
     * @return If set, the mapping will override any mapping set before this spec was set.
     * It is recommended that the user leaves this empty to receive an error
     * warning about a potential conflict and only set it once the respective UI
     * has given such a warning.
     * 
     */
    public Optional<Boolean> forceOverride() {
        return Optional.ofNullable(this.forceOverride);
    }
    /**
     * @return The name of the Cloud Run Service that this DomainMapping applies to.
     * The route must exist.
     * 
     */
    public String routeName() {
        return this.routeName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainMappingSpec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certificateMode;
        private @Nullable Boolean forceOverride;
        private String routeName;
        public Builder() {}
        public Builder(DomainMappingSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateMode = defaults.certificateMode;
    	      this.forceOverride = defaults.forceOverride;
    	      this.routeName = defaults.routeName;
        }

        @CustomType.Setter
        public Builder certificateMode(@Nullable String certificateMode) {
            this.certificateMode = certificateMode;
            return this;
        }
        @CustomType.Setter
        public Builder forceOverride(@Nullable Boolean forceOverride) {
            this.forceOverride = forceOverride;
            return this;
        }
        @CustomType.Setter
        public Builder routeName(String routeName) {
            this.routeName = Objects.requireNonNull(routeName);
            return this;
        }
        public DomainMappingSpec build() {
            final var o = new DomainMappingSpec();
            o.certificateMode = certificateMode;
            o.forceOverride = forceOverride;
            o.routeName = routeName;
            return o;
        }
    }
}
