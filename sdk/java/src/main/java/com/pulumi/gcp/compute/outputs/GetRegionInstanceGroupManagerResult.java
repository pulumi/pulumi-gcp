// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerAllInstancesConfig;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerAutoHealingPolicy;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerInstanceFlexibilityPolicy;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerInstanceLifecyclePolicy;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerNamedPort;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerParam;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerStandbyPolicy;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerStatefulDisk;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerStatefulExternalIp;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerStatefulInternalIp;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerStatus;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerUpdatePolicy;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceGroupManagerVersion;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRegionInstanceGroupManagerResult {
    private List<GetRegionInstanceGroupManagerAllInstancesConfig> allInstancesConfigs;
    private List<GetRegionInstanceGroupManagerAutoHealingPolicy> autoHealingPolicies;
    private String baseInstanceName;
    private String creationTimestamp;
    private String description;
    private String distributionPolicyTargetShape;
    private List<String> distributionPolicyZones;
    private String fingerprint;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetRegionInstanceGroupManagerInstanceFlexibilityPolicy> instanceFlexibilityPolicies;
    private String instanceGroup;
    private Integer instanceGroupManagerId;
    private List<GetRegionInstanceGroupManagerInstanceLifecyclePolicy> instanceLifecyclePolicies;
    private String listManagedInstancesResults;
    private @Nullable String name;
    private List<GetRegionInstanceGroupManagerNamedPort> namedPorts;
    private List<GetRegionInstanceGroupManagerParam> params;
    private @Nullable String project;
    private @Nullable String region;
    private @Nullable String selfLink;
    private List<GetRegionInstanceGroupManagerStandbyPolicy> standbyPolicies;
    private List<GetRegionInstanceGroupManagerStatefulDisk> statefulDisks;
    private List<GetRegionInstanceGroupManagerStatefulExternalIp> statefulExternalIps;
    private List<GetRegionInstanceGroupManagerStatefulInternalIp> statefulInternalIps;
    private List<GetRegionInstanceGroupManagerStatus> statuses;
    private List<String> targetPools;
    private Integer targetSize;
    private Integer targetStoppedSize;
    private Integer targetSuspendedSize;
    private List<GetRegionInstanceGroupManagerUpdatePolicy> updatePolicies;
    private List<GetRegionInstanceGroupManagerVersion> versions;
    private Boolean waitForInstances;
    private String waitForInstancesStatus;

    private GetRegionInstanceGroupManagerResult() {}
    public List<GetRegionInstanceGroupManagerAllInstancesConfig> allInstancesConfigs() {
        return this.allInstancesConfigs;
    }
    public List<GetRegionInstanceGroupManagerAutoHealingPolicy> autoHealingPolicies() {
        return this.autoHealingPolicies;
    }
    public String baseInstanceName() {
        return this.baseInstanceName;
    }
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    public String description() {
        return this.description;
    }
    public String distributionPolicyTargetShape() {
        return this.distributionPolicyTargetShape;
    }
    public List<String> distributionPolicyZones() {
        return this.distributionPolicyZones;
    }
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetRegionInstanceGroupManagerInstanceFlexibilityPolicy> instanceFlexibilityPolicies() {
        return this.instanceFlexibilityPolicies;
    }
    public String instanceGroup() {
        return this.instanceGroup;
    }
    public Integer instanceGroupManagerId() {
        return this.instanceGroupManagerId;
    }
    public List<GetRegionInstanceGroupManagerInstanceLifecyclePolicy> instanceLifecyclePolicies() {
        return this.instanceLifecyclePolicies;
    }
    public String listManagedInstancesResults() {
        return this.listManagedInstancesResults;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public List<GetRegionInstanceGroupManagerNamedPort> namedPorts() {
        return this.namedPorts;
    }
    public List<GetRegionInstanceGroupManagerParam> params() {
        return this.params;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public Optional<String> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }
    public List<GetRegionInstanceGroupManagerStandbyPolicy> standbyPolicies() {
        return this.standbyPolicies;
    }
    public List<GetRegionInstanceGroupManagerStatefulDisk> statefulDisks() {
        return this.statefulDisks;
    }
    public List<GetRegionInstanceGroupManagerStatefulExternalIp> statefulExternalIps() {
        return this.statefulExternalIps;
    }
    public List<GetRegionInstanceGroupManagerStatefulInternalIp> statefulInternalIps() {
        return this.statefulInternalIps;
    }
    public List<GetRegionInstanceGroupManagerStatus> statuses() {
        return this.statuses;
    }
    public List<String> targetPools() {
        return this.targetPools;
    }
    public Integer targetSize() {
        return this.targetSize;
    }
    public Integer targetStoppedSize() {
        return this.targetStoppedSize;
    }
    public Integer targetSuspendedSize() {
        return this.targetSuspendedSize;
    }
    public List<GetRegionInstanceGroupManagerUpdatePolicy> updatePolicies() {
        return this.updatePolicies;
    }
    public List<GetRegionInstanceGroupManagerVersion> versions() {
        return this.versions;
    }
    public Boolean waitForInstances() {
        return this.waitForInstances;
    }
    public String waitForInstancesStatus() {
        return this.waitForInstancesStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionInstanceGroupManagerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRegionInstanceGroupManagerAllInstancesConfig> allInstancesConfigs;
        private List<GetRegionInstanceGroupManagerAutoHealingPolicy> autoHealingPolicies;
        private String baseInstanceName;
        private String creationTimestamp;
        private String description;
        private String distributionPolicyTargetShape;
        private List<String> distributionPolicyZones;
        private String fingerprint;
        private String id;
        private List<GetRegionInstanceGroupManagerInstanceFlexibilityPolicy> instanceFlexibilityPolicies;
        private String instanceGroup;
        private Integer instanceGroupManagerId;
        private List<GetRegionInstanceGroupManagerInstanceLifecyclePolicy> instanceLifecyclePolicies;
        private String listManagedInstancesResults;
        private @Nullable String name;
        private List<GetRegionInstanceGroupManagerNamedPort> namedPorts;
        private List<GetRegionInstanceGroupManagerParam> params;
        private @Nullable String project;
        private @Nullable String region;
        private @Nullable String selfLink;
        private List<GetRegionInstanceGroupManagerStandbyPolicy> standbyPolicies;
        private List<GetRegionInstanceGroupManagerStatefulDisk> statefulDisks;
        private List<GetRegionInstanceGroupManagerStatefulExternalIp> statefulExternalIps;
        private List<GetRegionInstanceGroupManagerStatefulInternalIp> statefulInternalIps;
        private List<GetRegionInstanceGroupManagerStatus> statuses;
        private List<String> targetPools;
        private Integer targetSize;
        private Integer targetStoppedSize;
        private Integer targetSuspendedSize;
        private List<GetRegionInstanceGroupManagerUpdatePolicy> updatePolicies;
        private List<GetRegionInstanceGroupManagerVersion> versions;
        private Boolean waitForInstances;
        private String waitForInstancesStatus;
        public Builder() {}
        public Builder(GetRegionInstanceGroupManagerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allInstancesConfigs = defaults.allInstancesConfigs;
    	      this.autoHealingPolicies = defaults.autoHealingPolicies;
    	      this.baseInstanceName = defaults.baseInstanceName;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.distributionPolicyTargetShape = defaults.distributionPolicyTargetShape;
    	      this.distributionPolicyZones = defaults.distributionPolicyZones;
    	      this.fingerprint = defaults.fingerprint;
    	      this.id = defaults.id;
    	      this.instanceFlexibilityPolicies = defaults.instanceFlexibilityPolicies;
    	      this.instanceGroup = defaults.instanceGroup;
    	      this.instanceGroupManagerId = defaults.instanceGroupManagerId;
    	      this.instanceLifecyclePolicies = defaults.instanceLifecyclePolicies;
    	      this.listManagedInstancesResults = defaults.listManagedInstancesResults;
    	      this.name = defaults.name;
    	      this.namedPorts = defaults.namedPorts;
    	      this.params = defaults.params;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.selfLink = defaults.selfLink;
    	      this.standbyPolicies = defaults.standbyPolicies;
    	      this.statefulDisks = defaults.statefulDisks;
    	      this.statefulExternalIps = defaults.statefulExternalIps;
    	      this.statefulInternalIps = defaults.statefulInternalIps;
    	      this.statuses = defaults.statuses;
    	      this.targetPools = defaults.targetPools;
    	      this.targetSize = defaults.targetSize;
    	      this.targetStoppedSize = defaults.targetStoppedSize;
    	      this.targetSuspendedSize = defaults.targetSuspendedSize;
    	      this.updatePolicies = defaults.updatePolicies;
    	      this.versions = defaults.versions;
    	      this.waitForInstances = defaults.waitForInstances;
    	      this.waitForInstancesStatus = defaults.waitForInstancesStatus;
        }

        @CustomType.Setter
        public Builder allInstancesConfigs(List<GetRegionInstanceGroupManagerAllInstancesConfig> allInstancesConfigs) {
            if (allInstancesConfigs == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "allInstancesConfigs");
            }
            this.allInstancesConfigs = allInstancesConfigs;
            return this;
        }
        public Builder allInstancesConfigs(GetRegionInstanceGroupManagerAllInstancesConfig... allInstancesConfigs) {
            return allInstancesConfigs(List.of(allInstancesConfigs));
        }
        @CustomType.Setter
        public Builder autoHealingPolicies(List<GetRegionInstanceGroupManagerAutoHealingPolicy> autoHealingPolicies) {
            if (autoHealingPolicies == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "autoHealingPolicies");
            }
            this.autoHealingPolicies = autoHealingPolicies;
            return this;
        }
        public Builder autoHealingPolicies(GetRegionInstanceGroupManagerAutoHealingPolicy... autoHealingPolicies) {
            return autoHealingPolicies(List.of(autoHealingPolicies));
        }
        @CustomType.Setter
        public Builder baseInstanceName(String baseInstanceName) {
            if (baseInstanceName == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "baseInstanceName");
            }
            this.baseInstanceName = baseInstanceName;
            return this;
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            if (creationTimestamp == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "creationTimestamp");
            }
            this.creationTimestamp = creationTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder distributionPolicyTargetShape(String distributionPolicyTargetShape) {
            if (distributionPolicyTargetShape == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "distributionPolicyTargetShape");
            }
            this.distributionPolicyTargetShape = distributionPolicyTargetShape;
            return this;
        }
        @CustomType.Setter
        public Builder distributionPolicyZones(List<String> distributionPolicyZones) {
            if (distributionPolicyZones == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "distributionPolicyZones");
            }
            this.distributionPolicyZones = distributionPolicyZones;
            return this;
        }
        public Builder distributionPolicyZones(String... distributionPolicyZones) {
            return distributionPolicyZones(List.of(distributionPolicyZones));
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceFlexibilityPolicies(List<GetRegionInstanceGroupManagerInstanceFlexibilityPolicy> instanceFlexibilityPolicies) {
            if (instanceFlexibilityPolicies == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "instanceFlexibilityPolicies");
            }
            this.instanceFlexibilityPolicies = instanceFlexibilityPolicies;
            return this;
        }
        public Builder instanceFlexibilityPolicies(GetRegionInstanceGroupManagerInstanceFlexibilityPolicy... instanceFlexibilityPolicies) {
            return instanceFlexibilityPolicies(List.of(instanceFlexibilityPolicies));
        }
        @CustomType.Setter
        public Builder instanceGroup(String instanceGroup) {
            if (instanceGroup == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "instanceGroup");
            }
            this.instanceGroup = instanceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder instanceGroupManagerId(Integer instanceGroupManagerId) {
            if (instanceGroupManagerId == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "instanceGroupManagerId");
            }
            this.instanceGroupManagerId = instanceGroupManagerId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceLifecyclePolicies(List<GetRegionInstanceGroupManagerInstanceLifecyclePolicy> instanceLifecyclePolicies) {
            if (instanceLifecyclePolicies == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "instanceLifecyclePolicies");
            }
            this.instanceLifecyclePolicies = instanceLifecyclePolicies;
            return this;
        }
        public Builder instanceLifecyclePolicies(GetRegionInstanceGroupManagerInstanceLifecyclePolicy... instanceLifecyclePolicies) {
            return instanceLifecyclePolicies(List.of(instanceLifecyclePolicies));
        }
        @CustomType.Setter
        public Builder listManagedInstancesResults(String listManagedInstancesResults) {
            if (listManagedInstancesResults == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "listManagedInstancesResults");
            }
            this.listManagedInstancesResults = listManagedInstancesResults;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namedPorts(List<GetRegionInstanceGroupManagerNamedPort> namedPorts) {
            if (namedPorts == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "namedPorts");
            }
            this.namedPorts = namedPorts;
            return this;
        }
        public Builder namedPorts(GetRegionInstanceGroupManagerNamedPort... namedPorts) {
            return namedPorts(List.of(namedPorts));
        }
        @CustomType.Setter
        public Builder params(List<GetRegionInstanceGroupManagerParam> params) {
            if (params == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "params");
            }
            this.params = params;
            return this;
        }
        public Builder params(GetRegionInstanceGroupManagerParam... params) {
            return params(List.of(params));
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(@Nullable String selfLink) {

            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder standbyPolicies(List<GetRegionInstanceGroupManagerStandbyPolicy> standbyPolicies) {
            if (standbyPolicies == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "standbyPolicies");
            }
            this.standbyPolicies = standbyPolicies;
            return this;
        }
        public Builder standbyPolicies(GetRegionInstanceGroupManagerStandbyPolicy... standbyPolicies) {
            return standbyPolicies(List.of(standbyPolicies));
        }
        @CustomType.Setter
        public Builder statefulDisks(List<GetRegionInstanceGroupManagerStatefulDisk> statefulDisks) {
            if (statefulDisks == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "statefulDisks");
            }
            this.statefulDisks = statefulDisks;
            return this;
        }
        public Builder statefulDisks(GetRegionInstanceGroupManagerStatefulDisk... statefulDisks) {
            return statefulDisks(List.of(statefulDisks));
        }
        @CustomType.Setter
        public Builder statefulExternalIps(List<GetRegionInstanceGroupManagerStatefulExternalIp> statefulExternalIps) {
            if (statefulExternalIps == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "statefulExternalIps");
            }
            this.statefulExternalIps = statefulExternalIps;
            return this;
        }
        public Builder statefulExternalIps(GetRegionInstanceGroupManagerStatefulExternalIp... statefulExternalIps) {
            return statefulExternalIps(List.of(statefulExternalIps));
        }
        @CustomType.Setter
        public Builder statefulInternalIps(List<GetRegionInstanceGroupManagerStatefulInternalIp> statefulInternalIps) {
            if (statefulInternalIps == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "statefulInternalIps");
            }
            this.statefulInternalIps = statefulInternalIps;
            return this;
        }
        public Builder statefulInternalIps(GetRegionInstanceGroupManagerStatefulInternalIp... statefulInternalIps) {
            return statefulInternalIps(List.of(statefulInternalIps));
        }
        @CustomType.Setter
        public Builder statuses(List<GetRegionInstanceGroupManagerStatus> statuses) {
            if (statuses == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "statuses");
            }
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(GetRegionInstanceGroupManagerStatus... statuses) {
            return statuses(List.of(statuses));
        }
        @CustomType.Setter
        public Builder targetPools(List<String> targetPools) {
            if (targetPools == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "targetPools");
            }
            this.targetPools = targetPools;
            return this;
        }
        public Builder targetPools(String... targetPools) {
            return targetPools(List.of(targetPools));
        }
        @CustomType.Setter
        public Builder targetSize(Integer targetSize) {
            if (targetSize == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "targetSize");
            }
            this.targetSize = targetSize;
            return this;
        }
        @CustomType.Setter
        public Builder targetStoppedSize(Integer targetStoppedSize) {
            if (targetStoppedSize == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "targetStoppedSize");
            }
            this.targetStoppedSize = targetStoppedSize;
            return this;
        }
        @CustomType.Setter
        public Builder targetSuspendedSize(Integer targetSuspendedSize) {
            if (targetSuspendedSize == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "targetSuspendedSize");
            }
            this.targetSuspendedSize = targetSuspendedSize;
            return this;
        }
        @CustomType.Setter
        public Builder updatePolicies(List<GetRegionInstanceGroupManagerUpdatePolicy> updatePolicies) {
            if (updatePolicies == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "updatePolicies");
            }
            this.updatePolicies = updatePolicies;
            return this;
        }
        public Builder updatePolicies(GetRegionInstanceGroupManagerUpdatePolicy... updatePolicies) {
            return updatePolicies(List.of(updatePolicies));
        }
        @CustomType.Setter
        public Builder versions(List<GetRegionInstanceGroupManagerVersion> versions) {
            if (versions == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "versions");
            }
            this.versions = versions;
            return this;
        }
        public Builder versions(GetRegionInstanceGroupManagerVersion... versions) {
            return versions(List.of(versions));
        }
        @CustomType.Setter
        public Builder waitForInstances(Boolean waitForInstances) {
            if (waitForInstances == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "waitForInstances");
            }
            this.waitForInstances = waitForInstances;
            return this;
        }
        @CustomType.Setter
        public Builder waitForInstancesStatus(String waitForInstancesStatus) {
            if (waitForInstancesStatus == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerResult", "waitForInstancesStatus");
            }
            this.waitForInstancesStatus = waitForInstancesStatus;
            return this;
        }
        public GetRegionInstanceGroupManagerResult build() {
            final var _resultValue = new GetRegionInstanceGroupManagerResult();
            _resultValue.allInstancesConfigs = allInstancesConfigs;
            _resultValue.autoHealingPolicies = autoHealingPolicies;
            _resultValue.baseInstanceName = baseInstanceName;
            _resultValue.creationTimestamp = creationTimestamp;
            _resultValue.description = description;
            _resultValue.distributionPolicyTargetShape = distributionPolicyTargetShape;
            _resultValue.distributionPolicyZones = distributionPolicyZones;
            _resultValue.fingerprint = fingerprint;
            _resultValue.id = id;
            _resultValue.instanceFlexibilityPolicies = instanceFlexibilityPolicies;
            _resultValue.instanceGroup = instanceGroup;
            _resultValue.instanceGroupManagerId = instanceGroupManagerId;
            _resultValue.instanceLifecyclePolicies = instanceLifecyclePolicies;
            _resultValue.listManagedInstancesResults = listManagedInstancesResults;
            _resultValue.name = name;
            _resultValue.namedPorts = namedPorts;
            _resultValue.params = params;
            _resultValue.project = project;
            _resultValue.region = region;
            _resultValue.selfLink = selfLink;
            _resultValue.standbyPolicies = standbyPolicies;
            _resultValue.statefulDisks = statefulDisks;
            _resultValue.statefulExternalIps = statefulExternalIps;
            _resultValue.statefulInternalIps = statefulInternalIps;
            _resultValue.statuses = statuses;
            _resultValue.targetPools = targetPools;
            _resultValue.targetSize = targetSize;
            _resultValue.targetStoppedSize = targetStoppedSize;
            _resultValue.targetSuspendedSize = targetSuspendedSize;
            _resultValue.updatePolicies = updatePolicies;
            _resultValue.versions = versions;
            _resultValue.waitForInstances = waitForInstances;
            _resultValue.waitForInstancesStatus = waitForInstancesStatus;
            return _resultValue;
        }
    }
}
