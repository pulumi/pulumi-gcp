// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableTableReplicationInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableTableReplicationInfoArgs Empty = new TableTableReplicationInfoArgs();

    /**
     * The interval at which the source
     * materialized view is polled for updates. The default is 300000.
     * 
     */
    @Import(name="replicationIntervalMs")
    private @Nullable Output<Integer> replicationIntervalMs;

    /**
     * @return The interval at which the source
     * materialized view is polled for updates. The default is 300000.
     * 
     */
    public Optional<Output<Integer>> replicationIntervalMs() {
        return Optional.ofNullable(this.replicationIntervalMs);
    }

    /**
     * The ID of the source dataset.
     * 
     */
    @Import(name="sourceDatasetId", required=true)
    private Output<String> sourceDatasetId;

    /**
     * @return The ID of the source dataset.
     * 
     */
    public Output<String> sourceDatasetId() {
        return this.sourceDatasetId;
    }

    /**
     * The ID of the source project.
     * 
     */
    @Import(name="sourceProjectId", required=true)
    private Output<String> sourceProjectId;

    /**
     * @return The ID of the source project.
     * 
     */
    public Output<String> sourceProjectId() {
        return this.sourceProjectId;
    }

    /**
     * The ID of the source materialized view.
     * 
     */
    @Import(name="sourceTableId", required=true)
    private Output<String> sourceTableId;

    /**
     * @return The ID of the source materialized view.
     * 
     */
    public Output<String> sourceTableId() {
        return this.sourceTableId;
    }

    private TableTableReplicationInfoArgs() {}

    private TableTableReplicationInfoArgs(TableTableReplicationInfoArgs $) {
        this.replicationIntervalMs = $.replicationIntervalMs;
        this.sourceDatasetId = $.sourceDatasetId;
        this.sourceProjectId = $.sourceProjectId;
        this.sourceTableId = $.sourceTableId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableTableReplicationInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableTableReplicationInfoArgs $;

        public Builder() {
            $ = new TableTableReplicationInfoArgs();
        }

        public Builder(TableTableReplicationInfoArgs defaults) {
            $ = new TableTableReplicationInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param replicationIntervalMs The interval at which the source
         * materialized view is polled for updates. The default is 300000.
         * 
         * @return builder
         * 
         */
        public Builder replicationIntervalMs(@Nullable Output<Integer> replicationIntervalMs) {
            $.replicationIntervalMs = replicationIntervalMs;
            return this;
        }

        /**
         * @param replicationIntervalMs The interval at which the source
         * materialized view is polled for updates. The default is 300000.
         * 
         * @return builder
         * 
         */
        public Builder replicationIntervalMs(Integer replicationIntervalMs) {
            return replicationIntervalMs(Output.of(replicationIntervalMs));
        }

        /**
         * @param sourceDatasetId The ID of the source dataset.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatasetId(Output<String> sourceDatasetId) {
            $.sourceDatasetId = sourceDatasetId;
            return this;
        }

        /**
         * @param sourceDatasetId The ID of the source dataset.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatasetId(String sourceDatasetId) {
            return sourceDatasetId(Output.of(sourceDatasetId));
        }

        /**
         * @param sourceProjectId The ID of the source project.
         * 
         * @return builder
         * 
         */
        public Builder sourceProjectId(Output<String> sourceProjectId) {
            $.sourceProjectId = sourceProjectId;
            return this;
        }

        /**
         * @param sourceProjectId The ID of the source project.
         * 
         * @return builder
         * 
         */
        public Builder sourceProjectId(String sourceProjectId) {
            return sourceProjectId(Output.of(sourceProjectId));
        }

        /**
         * @param sourceTableId The ID of the source materialized view.
         * 
         * @return builder
         * 
         */
        public Builder sourceTableId(Output<String> sourceTableId) {
            $.sourceTableId = sourceTableId;
            return this;
        }

        /**
         * @param sourceTableId The ID of the source materialized view.
         * 
         * @return builder
         * 
         */
        public Builder sourceTableId(String sourceTableId) {
            return sourceTableId(Output.of(sourceTableId));
        }

        public TableTableReplicationInfoArgs build() {
            if ($.sourceDatasetId == null) {
                throw new MissingRequiredPropertyException("TableTableReplicationInfoArgs", "sourceDatasetId");
            }
            if ($.sourceProjectId == null) {
                throw new MissingRequiredPropertyException("TableTableReplicationInfoArgs", "sourceProjectId");
            }
            if ($.sourceTableId == null) {
                throw new MissingRequiredPropertyException("TableTableReplicationInfoArgs", "sourceTableId");
            }
            return $;
        }
    }

}
