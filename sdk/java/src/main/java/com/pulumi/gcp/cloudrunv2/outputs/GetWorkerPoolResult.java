// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudrunv2.outputs.GetWorkerPoolBinaryAuthorization;
import com.pulumi.gcp.cloudrunv2.outputs.GetWorkerPoolCondition;
import com.pulumi.gcp.cloudrunv2.outputs.GetWorkerPoolInstanceSplit;
import com.pulumi.gcp.cloudrunv2.outputs.GetWorkerPoolInstanceSplitStatus;
import com.pulumi.gcp.cloudrunv2.outputs.GetWorkerPoolScaling;
import com.pulumi.gcp.cloudrunv2.outputs.GetWorkerPoolTemplate;
import com.pulumi.gcp.cloudrunv2.outputs.GetWorkerPoolTerminalCondition;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWorkerPoolResult {
    private Map<String,String> annotations;
    private List<GetWorkerPoolBinaryAuthorization> binaryAuthorizations;
    private String client;
    private String clientVersion;
    private List<GetWorkerPoolCondition> conditions;
    private String createTime;
    private String creator;
    private List<String> customAudiences;
    private String deleteTime;
    private Boolean deletionProtection;
    private String description;
    private Map<String,String> effectiveAnnotations;
    private Map<String,String> effectiveLabels;
    private String etag;
    private String expireTime;
    private String generation;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetWorkerPoolInstanceSplitStatus> instanceSplitStatuses;
    private List<GetWorkerPoolInstanceSplit> instanceSplits;
    private Map<String,String> labels;
    private String lastModifier;
    private String latestCreatedRevision;
    private String latestReadyRevision;
    private String launchStage;
    private @Nullable String location;
    private String name;
    private String observedGeneration;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private Boolean reconciling;
    private List<GetWorkerPoolScaling> scalings;
    private List<GetWorkerPoolTemplate> templates;
    private List<GetWorkerPoolTerminalCondition> terminalConditions;
    private String uid;
    private String updateTime;

    private GetWorkerPoolResult() {}
    public Map<String,String> annotations() {
        return this.annotations;
    }
    public List<GetWorkerPoolBinaryAuthorization> binaryAuthorizations() {
        return this.binaryAuthorizations;
    }
    public String client() {
        return this.client;
    }
    public String clientVersion() {
        return this.clientVersion;
    }
    public List<GetWorkerPoolCondition> conditions() {
        return this.conditions;
    }
    public String createTime() {
        return this.createTime;
    }
    public String creator() {
        return this.creator;
    }
    public List<String> customAudiences() {
        return this.customAudiences;
    }
    public String deleteTime() {
        return this.deleteTime;
    }
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    public String description() {
        return this.description;
    }
    public Map<String,String> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String etag() {
        return this.etag;
    }
    public String expireTime() {
        return this.expireTime;
    }
    public String generation() {
        return this.generation;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetWorkerPoolInstanceSplitStatus> instanceSplitStatuses() {
        return this.instanceSplitStatuses;
    }
    public List<GetWorkerPoolInstanceSplit> instanceSplits() {
        return this.instanceSplits;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String lastModifier() {
        return this.lastModifier;
    }
    public String latestCreatedRevision() {
        return this.latestCreatedRevision;
    }
    public String latestReadyRevision() {
        return this.latestReadyRevision;
    }
    public String launchStage() {
        return this.launchStage;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public String name() {
        return this.name;
    }
    public String observedGeneration() {
        return this.observedGeneration;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public Boolean reconciling() {
        return this.reconciling;
    }
    public List<GetWorkerPoolScaling> scalings() {
        return this.scalings;
    }
    public List<GetWorkerPoolTemplate> templates() {
        return this.templates;
    }
    public List<GetWorkerPoolTerminalCondition> terminalConditions() {
        return this.terminalConditions;
    }
    public String uid() {
        return this.uid;
    }
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkerPoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private List<GetWorkerPoolBinaryAuthorization> binaryAuthorizations;
        private String client;
        private String clientVersion;
        private List<GetWorkerPoolCondition> conditions;
        private String createTime;
        private String creator;
        private List<String> customAudiences;
        private String deleteTime;
        private Boolean deletionProtection;
        private String description;
        private Map<String,String> effectiveAnnotations;
        private Map<String,String> effectiveLabels;
        private String etag;
        private String expireTime;
        private String generation;
        private String id;
        private List<GetWorkerPoolInstanceSplitStatus> instanceSplitStatuses;
        private List<GetWorkerPoolInstanceSplit> instanceSplits;
        private Map<String,String> labels;
        private String lastModifier;
        private String latestCreatedRevision;
        private String latestReadyRevision;
        private String launchStage;
        private @Nullable String location;
        private String name;
        private String observedGeneration;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private Boolean reconciling;
        private List<GetWorkerPoolScaling> scalings;
        private List<GetWorkerPoolTemplate> templates;
        private List<GetWorkerPoolTerminalCondition> terminalConditions;
        private String uid;
        private String updateTime;
        public Builder() {}
        public Builder(GetWorkerPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.binaryAuthorizations = defaults.binaryAuthorizations;
    	      this.client = defaults.client;
    	      this.clientVersion = defaults.clientVersion;
    	      this.conditions = defaults.conditions;
    	      this.createTime = defaults.createTime;
    	      this.creator = defaults.creator;
    	      this.customAudiences = defaults.customAudiences;
    	      this.deleteTime = defaults.deleteTime;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.description = defaults.description;
    	      this.effectiveAnnotations = defaults.effectiveAnnotations;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.etag = defaults.etag;
    	      this.expireTime = defaults.expireTime;
    	      this.generation = defaults.generation;
    	      this.id = defaults.id;
    	      this.instanceSplitStatuses = defaults.instanceSplitStatuses;
    	      this.instanceSplits = defaults.instanceSplits;
    	      this.labels = defaults.labels;
    	      this.lastModifier = defaults.lastModifier;
    	      this.latestCreatedRevision = defaults.latestCreatedRevision;
    	      this.latestReadyRevision = defaults.latestReadyRevision;
    	      this.launchStage = defaults.launchStage;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.observedGeneration = defaults.observedGeneration;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.reconciling = defaults.reconciling;
    	      this.scalings = defaults.scalings;
    	      this.templates = defaults.templates;
    	      this.terminalConditions = defaults.terminalConditions;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder binaryAuthorizations(List<GetWorkerPoolBinaryAuthorization> binaryAuthorizations) {
            if (binaryAuthorizations == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "binaryAuthorizations");
            }
            this.binaryAuthorizations = binaryAuthorizations;
            return this;
        }
        public Builder binaryAuthorizations(GetWorkerPoolBinaryAuthorization... binaryAuthorizations) {
            return binaryAuthorizations(List.of(binaryAuthorizations));
        }
        @CustomType.Setter
        public Builder client(String client) {
            if (client == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "client");
            }
            this.client = client;
            return this;
        }
        @CustomType.Setter
        public Builder clientVersion(String clientVersion) {
            if (clientVersion == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "clientVersion");
            }
            this.clientVersion = clientVersion;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(List<GetWorkerPoolCondition> conditions) {
            if (conditions == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "conditions");
            }
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(GetWorkerPoolCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder creator(String creator) {
            if (creator == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "creator");
            }
            this.creator = creator;
            return this;
        }
        @CustomType.Setter
        public Builder customAudiences(List<String> customAudiences) {
            if (customAudiences == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "customAudiences");
            }
            this.customAudiences = customAudiences;
            return this;
        }
        public Builder customAudiences(String... customAudiences) {
            return customAudiences(List.of(customAudiences));
        }
        @CustomType.Setter
        public Builder deleteTime(String deleteTime) {
            if (deleteTime == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "deleteTime");
            }
            this.deleteTime = deleteTime;
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            if (effectiveAnnotations == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "effectiveAnnotations");
            }
            this.effectiveAnnotations = effectiveAnnotations;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            if (etag == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "etag");
            }
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            if (expireTime == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "expireTime");
            }
            this.expireTime = expireTime;
            return this;
        }
        @CustomType.Setter
        public Builder generation(String generation) {
            if (generation == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "generation");
            }
            this.generation = generation;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceSplitStatuses(List<GetWorkerPoolInstanceSplitStatus> instanceSplitStatuses) {
            if (instanceSplitStatuses == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "instanceSplitStatuses");
            }
            this.instanceSplitStatuses = instanceSplitStatuses;
            return this;
        }
        public Builder instanceSplitStatuses(GetWorkerPoolInstanceSplitStatus... instanceSplitStatuses) {
            return instanceSplitStatuses(List.of(instanceSplitStatuses));
        }
        @CustomType.Setter
        public Builder instanceSplits(List<GetWorkerPoolInstanceSplit> instanceSplits) {
            if (instanceSplits == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "instanceSplits");
            }
            this.instanceSplits = instanceSplits;
            return this;
        }
        public Builder instanceSplits(GetWorkerPoolInstanceSplit... instanceSplits) {
            return instanceSplits(List.of(instanceSplits));
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder lastModifier(String lastModifier) {
            if (lastModifier == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "lastModifier");
            }
            this.lastModifier = lastModifier;
            return this;
        }
        @CustomType.Setter
        public Builder latestCreatedRevision(String latestCreatedRevision) {
            if (latestCreatedRevision == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "latestCreatedRevision");
            }
            this.latestCreatedRevision = latestCreatedRevision;
            return this;
        }
        @CustomType.Setter
        public Builder latestReadyRevision(String latestReadyRevision) {
            if (latestReadyRevision == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "latestReadyRevision");
            }
            this.latestReadyRevision = latestReadyRevision;
            return this;
        }
        @CustomType.Setter
        public Builder launchStage(String launchStage) {
            if (launchStage == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "launchStage");
            }
            this.launchStage = launchStage;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder observedGeneration(String observedGeneration) {
            if (observedGeneration == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "observedGeneration");
            }
            this.observedGeneration = observedGeneration;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder reconciling(Boolean reconciling) {
            if (reconciling == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "reconciling");
            }
            this.reconciling = reconciling;
            return this;
        }
        @CustomType.Setter
        public Builder scalings(List<GetWorkerPoolScaling> scalings) {
            if (scalings == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "scalings");
            }
            this.scalings = scalings;
            return this;
        }
        public Builder scalings(GetWorkerPoolScaling... scalings) {
            return scalings(List.of(scalings));
        }
        @CustomType.Setter
        public Builder templates(List<GetWorkerPoolTemplate> templates) {
            if (templates == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "templates");
            }
            this.templates = templates;
            return this;
        }
        public Builder templates(GetWorkerPoolTemplate... templates) {
            return templates(List.of(templates));
        }
        @CustomType.Setter
        public Builder terminalConditions(List<GetWorkerPoolTerminalCondition> terminalConditions) {
            if (terminalConditions == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "terminalConditions");
            }
            this.terminalConditions = terminalConditions;
            return this;
        }
        public Builder terminalConditions(GetWorkerPoolTerminalCondition... terminalConditions) {
            return terminalConditions(List.of(terminalConditions));
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "uid");
            }
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetWorkerPoolResult build() {
            final var _resultValue = new GetWorkerPoolResult();
            _resultValue.annotations = annotations;
            _resultValue.binaryAuthorizations = binaryAuthorizations;
            _resultValue.client = client;
            _resultValue.clientVersion = clientVersion;
            _resultValue.conditions = conditions;
            _resultValue.createTime = createTime;
            _resultValue.creator = creator;
            _resultValue.customAudiences = customAudiences;
            _resultValue.deleteTime = deleteTime;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.description = description;
            _resultValue.effectiveAnnotations = effectiveAnnotations;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.etag = etag;
            _resultValue.expireTime = expireTime;
            _resultValue.generation = generation;
            _resultValue.id = id;
            _resultValue.instanceSplitStatuses = instanceSplitStatuses;
            _resultValue.instanceSplits = instanceSplits;
            _resultValue.labels = labels;
            _resultValue.lastModifier = lastModifier;
            _resultValue.latestCreatedRevision = latestCreatedRevision;
            _resultValue.latestReadyRevision = latestReadyRevision;
            _resultValue.launchStage = launchStage;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.observedGeneration = observedGeneration;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.reconciling = reconciling;
            _resultValue.scalings = scalings;
            _resultValue.templates = templates;
            _resultValue.terminalConditions = terminalConditions;
            _resultValue.uid = uid;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
