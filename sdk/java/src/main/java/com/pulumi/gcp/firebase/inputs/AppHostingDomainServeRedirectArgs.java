// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppHostingDomainServeRedirectArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppHostingDomainServeRedirectArgs Empty = new AppHostingDomainServeRedirectArgs();

    /**
     * The status code to use in a redirect response. Must be a valid HTTP 3XX
     * status code. Defaults to 302 if not present.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status code to use in a redirect response. Must be a valid HTTP 3XX
     * status code. Defaults to 302 if not present.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The URI of the redirect&#39;s intended destination. This URI will be
     * prepended to the original request path. URI without a scheme are
     * assumed to be HTTPS.
     * 
     */
    @Import(name="uri", required=true)
    private Output<String> uri;

    /**
     * @return The URI of the redirect&#39;s intended destination. This URI will be
     * prepended to the original request path. URI without a scheme are
     * assumed to be HTTPS.
     * 
     */
    public Output<String> uri() {
        return this.uri;
    }

    private AppHostingDomainServeRedirectArgs() {}

    private AppHostingDomainServeRedirectArgs(AppHostingDomainServeRedirectArgs $) {
        this.status = $.status;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppHostingDomainServeRedirectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppHostingDomainServeRedirectArgs $;

        public Builder() {
            $ = new AppHostingDomainServeRedirectArgs();
        }

        public Builder(AppHostingDomainServeRedirectArgs defaults) {
            $ = new AppHostingDomainServeRedirectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param status The status code to use in a redirect response. Must be a valid HTTP 3XX
         * status code. Defaults to 302 if not present.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status code to use in a redirect response. Must be a valid HTTP 3XX
         * status code. Defaults to 302 if not present.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param uri The URI of the redirect&#39;s intended destination. This URI will be
         * prepended to the original request path. URI without a scheme are
         * assumed to be HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder uri(Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The URI of the redirect&#39;s intended destination. This URI will be
         * prepended to the original request path. URI without a scheme are
         * assumed to be HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public AppHostingDomainServeRedirectArgs build() {
            if ($.uri == null) {
                throw new MissingRequiredPropertyException("AppHostingDomainServeRedirectArgs", "uri");
            }
            return $;
        }
    }

}
