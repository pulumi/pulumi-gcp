// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.diagflow.inputs.CxGeneratorLlmModelSettingsArgs;
import com.pulumi.gcp.diagflow.inputs.CxGeneratorModelParameterArgs;
import com.pulumi.gcp.diagflow.inputs.CxGeneratorPlaceholderArgs;
import com.pulumi.gcp.diagflow.inputs.CxGeneratorPromptTextArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxGeneratorArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxGeneratorArgs Empty = new CxGeneratorArgs();

    /**
     * The human-readable name of the generator, unique within the agent.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The human-readable name of the generator, unique within the agent.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The language to create generators for the following fields:
     * * Generator.prompt_text.text
     *   If not specified, the agent&#39;s default language is used.
     * 
     */
    @Import(name="languageCode")
    private @Nullable Output<String> languageCode;

    /**
     * @return The language to create generators for the following fields:
     * * Generator.prompt_text.text
     *   If not specified, the agent&#39;s default language is used.
     * 
     */
    public Optional<Output<String>> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }

    /**
     * The LLM model settings.
     * Structure is documented below.
     * 
     */
    @Import(name="llmModelSettings")
    private @Nullable Output<CxGeneratorLlmModelSettingsArgs> llmModelSettings;

    /**
     * @return The LLM model settings.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxGeneratorLlmModelSettingsArgs>> llmModelSettings() {
        return Optional.ofNullable(this.llmModelSettings);
    }

    /**
     * Parameters passed to the LLM to configure its behavior.
     * Structure is documented below.
     * 
     */
    @Import(name="modelParameter")
    private @Nullable Output<CxGeneratorModelParameterArgs> modelParameter;

    /**
     * @return Parameters passed to the LLM to configure its behavior.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxGeneratorModelParameterArgs>> modelParameter() {
        return Optional.ofNullable(this.modelParameter);
    }

    /**
     * The agent to create a Generator for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return The agent to create a Generator for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * List of custom placeholders in the prompt text.
     * Structure is documented below.
     * 
     */
    @Import(name="placeholders")
    private @Nullable Output<List<CxGeneratorPlaceholderArgs>> placeholders;

    /**
     * @return List of custom placeholders in the prompt text.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<CxGeneratorPlaceholderArgs>>> placeholders() {
        return Optional.ofNullable(this.placeholders);
    }

    /**
     * Prompt for the LLM model.
     * Structure is documented below.
     * 
     */
    @Import(name="promptText", required=true)
    private Output<CxGeneratorPromptTextArgs> promptText;

    /**
     * @return Prompt for the LLM model.
     * Structure is documented below.
     * 
     */
    public Output<CxGeneratorPromptTextArgs> promptText() {
        return this.promptText;
    }

    private CxGeneratorArgs() {}

    private CxGeneratorArgs(CxGeneratorArgs $) {
        this.displayName = $.displayName;
        this.languageCode = $.languageCode;
        this.llmModelSettings = $.llmModelSettings;
        this.modelParameter = $.modelParameter;
        this.parent = $.parent;
        this.placeholders = $.placeholders;
        this.promptText = $.promptText;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxGeneratorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxGeneratorArgs $;

        public Builder() {
            $ = new CxGeneratorArgs();
        }

        public Builder(CxGeneratorArgs defaults) {
            $ = new CxGeneratorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The human-readable name of the generator, unique within the agent.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human-readable name of the generator, unique within the agent.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param languageCode The language to create generators for the following fields:
         * * Generator.prompt_text.text
         *   If not specified, the agent&#39;s default language is used.
         * 
         * @return builder
         * 
         */
        public Builder languageCode(@Nullable Output<String> languageCode) {
            $.languageCode = languageCode;
            return this;
        }

        /**
         * @param languageCode The language to create generators for the following fields:
         * * Generator.prompt_text.text
         *   If not specified, the agent&#39;s default language is used.
         * 
         * @return builder
         * 
         */
        public Builder languageCode(String languageCode) {
            return languageCode(Output.of(languageCode));
        }

        /**
         * @param llmModelSettings The LLM model settings.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder llmModelSettings(@Nullable Output<CxGeneratorLlmModelSettingsArgs> llmModelSettings) {
            $.llmModelSettings = llmModelSettings;
            return this;
        }

        /**
         * @param llmModelSettings The LLM model settings.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder llmModelSettings(CxGeneratorLlmModelSettingsArgs llmModelSettings) {
            return llmModelSettings(Output.of(llmModelSettings));
        }

        /**
         * @param modelParameter Parameters passed to the LLM to configure its behavior.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder modelParameter(@Nullable Output<CxGeneratorModelParameterArgs> modelParameter) {
            $.modelParameter = modelParameter;
            return this;
        }

        /**
         * @param modelParameter Parameters passed to the LLM to configure its behavior.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder modelParameter(CxGeneratorModelParameterArgs modelParameter) {
            return modelParameter(Output.of(modelParameter));
        }

        /**
         * @param parent The agent to create a Generator for.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The agent to create a Generator for.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param placeholders List of custom placeholders in the prompt text.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder placeholders(@Nullable Output<List<CxGeneratorPlaceholderArgs>> placeholders) {
            $.placeholders = placeholders;
            return this;
        }

        /**
         * @param placeholders List of custom placeholders in the prompt text.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder placeholders(List<CxGeneratorPlaceholderArgs> placeholders) {
            return placeholders(Output.of(placeholders));
        }

        /**
         * @param placeholders List of custom placeholders in the prompt text.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder placeholders(CxGeneratorPlaceholderArgs... placeholders) {
            return placeholders(List.of(placeholders));
        }

        /**
         * @param promptText Prompt for the LLM model.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder promptText(Output<CxGeneratorPromptTextArgs> promptText) {
            $.promptText = promptText;
            return this;
        }

        /**
         * @param promptText Prompt for the LLM model.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder promptText(CxGeneratorPromptTextArgs promptText) {
            return promptText(Output.of(promptText));
        }

        public CxGeneratorArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("CxGeneratorArgs", "displayName");
            }
            if ($.promptText == null) {
                throw new MissingRequiredPropertyException("CxGeneratorArgs", "promptText");
            }
            return $;
        }
    }

}
