// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.chronicle;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataAccessLabelArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataAccessLabelArgs Empty = new DataAccessLabelArgs();

    /**
     * Required. The ID to use for the data access label, which will become the label&#39;s
     * display name and the final component of the label&#39;s resource name. It must
     * only contain ASCII lowercase letters, numbers, and dashes; it must begin
     * with a letter, and it must not exceed 1000 characters.
     * 
     * ***
     * 
     */
    @Import(name="dataAccessLabelId", required=true)
    private Output<String> dataAccessLabelId;

    /**
     * @return Required. The ID to use for the data access label, which will become the label&#39;s
     * display name and the final component of the label&#39;s resource name. It must
     * only contain ASCII lowercase letters, numbers, and dashes; it must begin
     * with a letter, and it must not exceed 1000 characters.
     * 
     * ***
     * 
     */
    public Output<String> dataAccessLabelId() {
        return this.dataAccessLabelId;
    }

    /**
     * Optional. A description of the data access label for a human reader.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. A description of the data access label for a human reader.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    @Import(name="instance", required=true)
    private Output<String> instance;

    /**
     * @return The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }

    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A UDM query over event data.
     * 
     */
    @Import(name="udmQuery", required=true)
    private Output<String> udmQuery;

    /**
     * @return A UDM query over event data.
     * 
     */
    public Output<String> udmQuery() {
        return this.udmQuery;
    }

    private DataAccessLabelArgs() {}

    private DataAccessLabelArgs(DataAccessLabelArgs $) {
        this.dataAccessLabelId = $.dataAccessLabelId;
        this.description = $.description;
        this.instance = $.instance;
        this.location = $.location;
        this.project = $.project;
        this.udmQuery = $.udmQuery;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataAccessLabelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataAccessLabelArgs $;

        public Builder() {
            $ = new DataAccessLabelArgs();
        }

        public Builder(DataAccessLabelArgs defaults) {
            $ = new DataAccessLabelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataAccessLabelId Required. The ID to use for the data access label, which will become the label&#39;s
         * display name and the final component of the label&#39;s resource name. It must
         * only contain ASCII lowercase letters, numbers, and dashes; it must begin
         * with a letter, and it must not exceed 1000 characters.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder dataAccessLabelId(Output<String> dataAccessLabelId) {
            $.dataAccessLabelId = dataAccessLabelId;
            return this;
        }

        /**
         * @param dataAccessLabelId Required. The ID to use for the data access label, which will become the label&#39;s
         * display name and the final component of the label&#39;s resource name. It must
         * only contain ASCII lowercase letters, numbers, and dashes; it must begin
         * with a letter, and it must not exceed 1000 characters.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder dataAccessLabelId(String dataAccessLabelId) {
            return dataAccessLabelId(Output.of(dataAccessLabelId));
        }

        /**
         * @param description Optional. A description of the data access label for a human reader.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. A description of the data access label for a human reader.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param udmQuery A UDM query over event data.
         * 
         * @return builder
         * 
         */
        public Builder udmQuery(Output<String> udmQuery) {
            $.udmQuery = udmQuery;
            return this;
        }

        /**
         * @param udmQuery A UDM query over event data.
         * 
         * @return builder
         * 
         */
        public Builder udmQuery(String udmQuery) {
            return udmQuery(Output.of(udmQuery));
        }

        public DataAccessLabelArgs build() {
            if ($.dataAccessLabelId == null) {
                throw new MissingRequiredPropertyException("DataAccessLabelArgs", "dataAccessLabelId");
            }
            if ($.instance == null) {
                throw new MissingRequiredPropertyException("DataAccessLabelArgs", "instance");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("DataAccessLabelArgs", "location");
            }
            if ($.udmQuery == null) {
                throw new MissingRequiredPropertyException("DataAccessLabelArgs", "udmQuery");
            }
            return $;
        }
    }

}
