// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class RouterNatSubnetwork {
    /**
     * @return Self-link of the subnetwork resource that will use NAT64
     * 
     */
    private String name;
    /**
     * @return List of the secondary ranges of the subnetwork that are allowed
     * to use NAT. This can be populated only if
     * `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
     * sourceIpRangesToNat
     * 
     * &lt;a name=&#34;nestedNat64Subnetwork&#34;&gt;&lt;/a&gt;The `nat64Subnetwork` block supports:
     * 
     */
    private @Nullable List<String> secondaryIpRangeNames;
    /**
     * @return List of options for which source IPs in the subnetwork
     * should have NAT enabled. Supported values include:
     * `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
     * `PRIMARY_IP_RANGE`.
     * 
     */
    private List<String> sourceIpRangesToNats;

    private RouterNatSubnetwork() {}
    /**
     * @return Self-link of the subnetwork resource that will use NAT64
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of the secondary ranges of the subnetwork that are allowed
     * to use NAT. This can be populated only if
     * `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
     * sourceIpRangesToNat
     * 
     * &lt;a name=&#34;nestedNat64Subnetwork&#34;&gt;&lt;/a&gt;The `nat64Subnetwork` block supports:
     * 
     */
    public List<String> secondaryIpRangeNames() {
        return this.secondaryIpRangeNames == null ? List.of() : this.secondaryIpRangeNames;
    }
    /**
     * @return List of options for which source IPs in the subnetwork
     * should have NAT enabled. Supported values include:
     * `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
     * `PRIMARY_IP_RANGE`.
     * 
     */
    public List<String> sourceIpRangesToNats() {
        return this.sourceIpRangesToNats;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterNatSubnetwork defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String name;
        private @Nullable List<String> secondaryIpRangeNames;
        private List<String> sourceIpRangesToNats;
        public Builder() {}
        public Builder(RouterNatSubnetwork defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.secondaryIpRangeNames = defaults.secondaryIpRangeNames;
    	      this.sourceIpRangesToNats = defaults.sourceIpRangesToNats;
        }

        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("RouterNatSubnetwork", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryIpRangeNames(@Nullable List<String> secondaryIpRangeNames) {

            this.secondaryIpRangeNames = secondaryIpRangeNames;
            return this;
        }
        public Builder secondaryIpRangeNames(String... secondaryIpRangeNames) {
            return secondaryIpRangeNames(List.of(secondaryIpRangeNames));
        }
        @CustomType.Setter
        public Builder sourceIpRangesToNats(List<String> sourceIpRangesToNats) {
            if (sourceIpRangesToNats == null) {
              throw new MissingRequiredPropertyException("RouterNatSubnetwork", "sourceIpRangesToNats");
            }
            this.sourceIpRangesToNats = sourceIpRangesToNats;
            return this;
        }
        public Builder sourceIpRangesToNats(String... sourceIpRangesToNats) {
            return sourceIpRangesToNats(List.of(sourceIpRangesToNats));
        }
        public RouterNatSubnetwork build() {
            final var _resultValue = new RouterNatSubnetwork();
            _resultValue.name = name;
            _resultValue.secondaryIpRangeNames = secondaryIpRangeNames;
            _resultValue.sourceIpRangesToNats = sourceIpRangesToNats;
            return _resultValue;
        }
    }
}
