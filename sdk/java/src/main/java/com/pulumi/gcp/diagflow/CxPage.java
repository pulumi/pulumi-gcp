// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.diagflow.CxPageArgs;
import com.pulumi.gcp.diagflow.inputs.CxPageState;
import com.pulumi.gcp.diagflow.outputs.CxPageAdvancedSettings;
import com.pulumi.gcp.diagflow.outputs.CxPageEntryFulfillment;
import com.pulumi.gcp.diagflow.outputs.CxPageEventHandler;
import com.pulumi.gcp.diagflow.outputs.CxPageForm;
import com.pulumi.gcp.diagflow.outputs.CxPageKnowledgeConnectorSettings;
import com.pulumi.gcp.diagflow.outputs.CxPageTransitionRoute;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages.
 * 
 * To get more information about Page, see:
 * 
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
 * 
 * ## Example Usage
 * 
 * ### Dialogflowcx Page Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.diagflow.CxAgent;
 * import com.pulumi.gcp.diagflow.CxAgentArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxAgentSpeechToTextSettingsArgs;
 * import com.pulumi.gcp.diagflow.CxPage;
 * import com.pulumi.gcp.diagflow.CxPageArgs;
 * import com.pulumi.gcp.diagflow.CxWebhook;
 * import com.pulumi.gcp.diagflow.CxWebhookArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxWebhookGenericWebServiceArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageEntryFulfillmentArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageEventHandlerArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageEventHandlerTriggerFulfillmentArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageFormArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageTransitionRouteArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageTransitionRouteTriggerFulfillmentArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageAdvancedSettingsArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageAdvancedSettingsDtmfSettingsArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageKnowledgeConnectorSettingsArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageKnowledgeConnectorSettingsTriggerFulfillmentArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPageKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettingsArgs;
 * import com.pulumi.gcp.discoveryengine.DataStore;
 * import com.pulumi.gcp.discoveryengine.DataStoreArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var agent = new CxAgent("agent", CxAgentArgs.builder()
 *             .displayName("dialogflowcx-agent")
 *             .location("global")
 *             .defaultLanguageCode("en")
 *             .supportedLanguageCodes(            
 *                 "fr",
 *                 "de",
 *                 "es")
 *             .timeZone("America/New_York")
 *             .description("Example description.")
 *             .avatarUri("https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png")
 *             .enableStackdriverLogging(true)
 *             .enableSpellCorrection(true)
 *             .speechToTextSettings(CxAgentSpeechToTextSettingsArgs.builder()
 *                 .enableSpeechAdaptation(true)
 *                 .build())
 *             .build());
 * 
 *         var myPage2 = new CxPage("myPage2", CxPageArgs.builder()
 *             .parent(agent.startFlow())
 *             .displayName("MyPage2")
 *             .build());
 * 
 *         var myWebhook = new CxWebhook("myWebhook", CxWebhookArgs.builder()
 *             .parent(agent.id())
 *             .displayName("MyWebhook")
 *             .genericWebService(CxWebhookGenericWebServiceArgs.builder()
 *                 .uri("https://example.com")
 *                 .build())
 *             .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var basicPage = new CxPage("basicPage", CxPageArgs.builder()
 *             .parent(agent.startFlow())
 *             .displayName("MyPage")
 *             .entryFulfillment(CxPageEntryFulfillmentArgs.builder()
 *                 .messages(                
 *                     CxPageEntryFulfillmentMessageArgs.builder()
 *                         .channel("some-channel")
 *                         .text(CxPageEntryFulfillmentMessageTextArgs.builder()
 *                             .texts("Welcome to page")
 *                             .build())
 *                         .build(),
 *                     CxPageEntryFulfillmentMessageArgs.builder()
 *                         .payload("""
 *         {"some-key": "some-value", "other-key": ["other-value"]}
 *                         """)
 *                         .build(),
 *                     CxPageEntryFulfillmentMessageArgs.builder()
 *                         .conversationSuccess(CxPageEntryFulfillmentMessageConversationSuccessArgs.builder()
 *                             .metadata("""
 *           {"some-metadata-key": "some-value", "other-metadata-key": 1234}
 *                             """)
 *                             .build())
 *                         .build(),
 *                     CxPageEntryFulfillmentMessageArgs.builder()
 *                         .outputAudioText(CxPageEntryFulfillmentMessageOutputAudioTextArgs.builder()
 *                             .text("some output text")
 *                             .build())
 *                         .build(),
 *                     CxPageEntryFulfillmentMessageArgs.builder()
 *                         .outputAudioText(CxPageEntryFulfillmentMessageOutputAudioTextArgs.builder()
 *                             .ssml("""
 *           <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
 *                             """)
 *                             .build())
 *                         .build(),
 *                     CxPageEntryFulfillmentMessageArgs.builder()
 *                         .liveAgentHandoff(CxPageEntryFulfillmentMessageLiveAgentHandoffArgs.builder()
 *                             .metadata("""
 *           {"some-metadata-key": "some-value", "other-metadata-key": 1234}
 *                             """)
 *                             .build())
 *                         .build(),
 *                     CxPageEntryFulfillmentMessageArgs.builder()
 *                         .playAudio(CxPageEntryFulfillmentMessagePlayAudioArgs.builder()
 *                             .audioUri("http://example.com/some-audio-file.mp3")
 *                             .build())
 *                         .build(),
 *                     CxPageEntryFulfillmentMessageArgs.builder()
 *                         .telephonyTransferCall(CxPageEntryFulfillmentMessageTelephonyTransferCallArgs.builder()
 *                             .phoneNumber("1-234-567-8901")
 *                             .build())
 *                         .build())
 *                 .setParameterActions(                
 *                     CxPageEntryFulfillmentSetParameterActionArgs.builder()
 *                         .parameter("some-param")
 *                         .value("123.45")
 *                         .build(),
 *                     CxPageEntryFulfillmentSetParameterActionArgs.builder()
 *                         .parameter("another-param")
 *                         .value(serializeJson(
 *                             "abc"))
 *                         .build(),
 *                     CxPageEntryFulfillmentSetParameterActionArgs.builder()
 *                         .parameter("other-param")
 *                         .value(serializeJson(
 *                             jsonArray("foo")))
 *                         .build())
 *                 .conditionalCases(CxPageEntryFulfillmentConditionalCaseArgs.builder()
 *                     .cases(serializeJson(
 *                         jsonArray(
 *                             jsonObject(
 *                                 jsonProperty("condition", "$sys.func.RAND() < 0.5"),
 *                                 jsonProperty("caseContent", jsonArray(
 *                                     jsonObject(
 *                                         jsonProperty("message", jsonObject(
 *                                             jsonProperty("text", jsonObject(
 *                                                 jsonProperty("text", jsonArray("First case"))
 *                                             ))
 *                                         ))
 *                                     ), 
 *                                     jsonObject(
 *                                         jsonProperty("additionalCases", jsonObject(
 *                                             jsonProperty("cases", jsonArray(jsonObject(
 *                                                 jsonProperty("condition", "$sys.func.RAND() < 0.2"),
 *                                                 jsonProperty("caseContent", jsonArray(jsonObject(
 *                                                     jsonProperty("message", jsonObject(
 *                                                         jsonProperty("text", jsonObject(
 *                                                             jsonProperty("text", jsonArray("Nested case"))
 *                                                         ))
 *                                                     ))
 *                                                 )))
 *                                             )))
 *                                         ))
 *                                     )
 *                                 ))
 *                             ), 
 *                             jsonObject(
 *                                 jsonProperty("caseContent", jsonArray(jsonObject(
 *                                     jsonProperty("message", jsonObject(
 *                                         jsonProperty("text", jsonObject(
 *                                             jsonProperty("text", jsonArray("Final case"))
 *                                         ))
 *                                     ))
 *                                 )))
 *                             )
 *                         )))
 *                     .build())
 *                 .build())
 *             .eventHandlers(CxPageEventHandlerArgs.builder()
 *                 .event("some-event")
 *                 .triggerFulfillment(CxPageEventHandlerTriggerFulfillmentArgs.builder()
 *                     .returnPartialResponses(true)
 *                     .messages(                    
 *                         CxPageEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                             .channel("some-channel")
 *                             .text(CxPageEventHandlerTriggerFulfillmentMessageTextArgs.builder()
 *                                 .texts("Some text")
 *                                 .build())
 *                             .build(),
 *                         CxPageEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                             .payload("""
 *           {"some-key": "some-value", "other-key": ["other-value"]}
 *                             """)
 *                             .build(),
 *                         CxPageEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                             .conversationSuccess(CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArgs.builder()
 *                                 .metadata("""
 *             {"some-metadata-key": "some-value", "other-metadata-key": 1234}
 *                                 """)
 *                                 .build())
 *                             .build(),
 *                         CxPageEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                             .outputAudioText(CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs.builder()
 *                                 .text("some output text")
 *                                 .build())
 *                             .build(),
 *                         CxPageEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                             .outputAudioText(CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs.builder()
 *                                 .ssml("""
 *             <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
 *                                 """)
 *                                 .build())
 *                             .build(),
 *                         CxPageEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                             .liveAgentHandoff(CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs.builder()
 *                                 .metadata("""
 *             {"some-metadata-key": "some-value", "other-metadata-key": 1234}
 *                                 """)
 *                                 .build())
 *                             .build(),
 *                         CxPageEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                             .playAudio(CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArgs.builder()
 *                                 .audioUri("http://example.com/some-audio-file.mp3")
 *                                 .build())
 *                             .build(),
 *                         CxPageEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                             .telephonyTransferCall(CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs.builder()
 *                                 .phoneNumber("1-234-567-8901")
 *                                 .build())
 *                             .build())
 *                     .setParameterActions(                    
 *                         CxPageEventHandlerTriggerFulfillmentSetParameterActionArgs.builder()
 *                             .parameter("some-param")
 *                             .value("123.45")
 *                             .build(),
 *                         CxPageEventHandlerTriggerFulfillmentSetParameterActionArgs.builder()
 *                             .parameter("another-param")
 *                             .value(serializeJson(
 *                                 "abc"))
 *                             .build(),
 *                         CxPageEventHandlerTriggerFulfillmentSetParameterActionArgs.builder()
 *                             .parameter("other-param")
 *                             .value(serializeJson(
 *                                 jsonArray("foo")))
 *                             .build())
 *                     .conditionalCases(CxPageEventHandlerTriggerFulfillmentConditionalCaseArgs.builder()
 *                         .cases(serializeJson(
 *                             jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("condition", "$sys.func.RAND() < 0.5"),
 *                                     jsonProperty("caseContent", jsonArray(
 *                                         jsonObject(
 *                                             jsonProperty("message", jsonObject(
 *                                                 jsonProperty("text", jsonObject(
 *                                                     jsonProperty("text", jsonArray("First case"))
 *                                                 ))
 *                                             ))
 *                                         ), 
 *                                         jsonObject(
 *                                             jsonProperty("additionalCases", jsonObject(
 *                                                 jsonProperty("cases", jsonArray(jsonObject(
 *                                                     jsonProperty("condition", "$sys.func.RAND() < 0.2"),
 *                                                     jsonProperty("caseContent", jsonArray(jsonObject(
 *                                                         jsonProperty("message", jsonObject(
 *                                                             jsonProperty("text", jsonObject(
 *                                                                 jsonProperty("text", jsonArray("Nested case"))
 *                                                             ))
 *                                                         ))
 *                                                     )))
 *                                                 )))
 *                                             ))
 *                                         )
 *                                     ))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("caseContent", jsonArray(jsonObject(
 *                                         jsonProperty("message", jsonObject(
 *                                             jsonProperty("text", jsonObject(
 *                                                 jsonProperty("text", jsonArray("Final case"))
 *                                             ))
 *                                         ))
 *                                     )))
 *                                 )
 *                             )))
 *                         .build())
 *                     .build())
 *                 .build())
 *             .form(CxPageFormArgs.builder()
 *                 .parameters(CxPageFormParameterArgs.builder()
 *                     .displayName("param1")
 *                     .entityType("projects/-/locations/-/agents/-/entityTypes/sys.date")
 *                     .defaultValue(serializeJson(
 *                         "2000-01-01"))
 *                     .fillBehavior(CxPageFormParameterFillBehaviorArgs.builder()
 *                         .initialPromptFulfillment(CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs.builder()
 *                             .messages(                            
 *                                 CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs.builder()
 *                                     .channel("some-channel")
 *                                     .text(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs.builder()
 *                                         .texts("Please provide param1")
 *                                         .build())
 *                                     .build(),
 *                                 CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs.builder()
 *                                     .payload("""
 *               {"some-key": "some-value", "other-key": ["other-value"]}
 *                                     """)
 *                                     .build(),
 *                                 CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs.builder()
 *                                     .conversationSuccess(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArgs.builder()
 *                                         .metadata("""
 *                 {"some-metadata-key": "some-value", "other-metadata-key": 1234}
 *                                         """)
 *                                         .build())
 *                                     .build(),
 *                                 CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs.builder()
 *                                     .outputAudioText(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs.builder()
 *                                         .text("some output text")
 *                                         .build())
 *                                     .build(),
 *                                 CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs.builder()
 *                                     .outputAudioText(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArgs.builder()
 *                                         .ssml("""
 *                 <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
 *                                         """)
 *                                         .build())
 *                                     .build(),
 *                                 CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs.builder()
 *                                     .liveAgentHandoff(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArgs.builder()
 *                                         .metadata("""
 *                 {"some-metadata-key": "some-value", "other-metadata-key": 1234}
 *                                         """)
 *                                         .build())
 *                                     .build(),
 *                                 CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs.builder()
 *                                     .playAudio(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArgs.builder()
 *                                         .audioUri("http://example.com/some-audio-file.mp3")
 *                                         .build())
 *                                     .build(),
 *                                 CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs.builder()
 *                                     .telephonyTransferCall(CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArgs.builder()
 *                                         .phoneNumber("1-234-567-8901")
 *                                         .build())
 *                                     .build())
 *                             .setParameterActions(                            
 *                                 CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArgs.builder()
 *                                     .parameter("some-param")
 *                                     .value("123.45")
 *                                     .build(),
 *                                 CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArgs.builder()
 *                                     .parameter("another-param")
 *                                     .value(serializeJson(
 *                                         "abc"))
 *                                     .build(),
 *                                 CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArgs.builder()
 *                                     .parameter("other-param")
 *                                     .value(serializeJson(
 *                                         jsonArray("foo")))
 *                                     .build())
 *                             .conditionalCases(CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArgs.builder()
 *                                 .cases(serializeJson(
 *                                     jsonArray(
 *                                         jsonObject(
 *                                             jsonProperty("condition", "$sys.func.RAND() < 0.5"),
 *                                             jsonProperty("caseContent", jsonArray(
 *                                                 jsonObject(
 *                                                     jsonProperty("message", jsonObject(
 *                                                         jsonProperty("text", jsonObject(
 *                                                             jsonProperty("text", jsonArray("First case"))
 *                                                         ))
 *                                                     ))
 *                                                 ), 
 *                                                 jsonObject(
 *                                                     jsonProperty("additionalCases", jsonObject(
 *                                                         jsonProperty("cases", jsonArray(jsonObject(
 *                                                             jsonProperty("condition", "$sys.func.RAND() < 0.2"),
 *                                                             jsonProperty("caseContent", jsonArray(jsonObject(
 *                                                                 jsonProperty("message", jsonObject(
 *                                                                     jsonProperty("text", jsonObject(
 *                                                                         jsonProperty("text", jsonArray("Nested case"))
 *                                                                     ))
 *                                                                 ))
 *                                                             )))
 *                                                         )))
 *                                                     ))
 *                                                 )
 *                                             ))
 *                                         ), 
 *                                         jsonObject(
 *                                             jsonProperty("caseContent", jsonArray(jsonObject(
 *                                                 jsonProperty("message", jsonObject(
 *                                                     jsonProperty("text", jsonObject(
 *                                                         jsonProperty("text", jsonArray("Final case"))
 *                                                     ))
 *                                                 ))
 *                                             )))
 *                                         )
 *                                     )))
 *                                 .build())
 *                             .build())
 *                         .repromptEventHandlers(                        
 *                             CxPageFormParameterFillBehaviorRepromptEventHandlerArgs.builder()
 *                                 .event("sys.no-match-1")
 *                                 .triggerFulfillment(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArgs.builder()
 *                                     .returnPartialResponses(true)
 *                                     .webhook(myWebhook.id())
 *                                     .tag("some-tag")
 *                                     .messages(                                    
 *                                         CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                                             .channel("some-channel")
 *                                             .text(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArgs.builder()
 *                                                 .texts("Please provide param1")
 *                                                 .build())
 *                                             .build(),
 *                                         CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                                             .payload("""
 *                 {"some-key": "some-value", "other-key": ["other-value"]}
 *                                             """)
 *                                             .build(),
 *                                         CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                                             .conversationSuccess(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArgs.builder()
 *                                                 .metadata("""
 *                   {"some-metadata-key": "some-value", "other-metadata-key": 1234}
 *                                                 """)
 *                                                 .build())
 *                                             .build(),
 *                                         CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                                             .outputAudioText(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs.builder()
 *                                                 .text("some output text")
 *                                                 .build())
 *                                             .build(),
 *                                         CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                                             .outputAudioText(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs.builder()
 *                                                 .ssml("""
 *                   <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
 *                                                 """)
 *                                                 .build())
 *                                             .build(),
 *                                         CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                                             .liveAgentHandoff(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs.builder()
 *                                                 .metadata("""
 *                   {"some-metadata-key": "some-value", "other-metadata-key": 1234}
 *                                                 """)
 *                                                 .build())
 *                                             .build(),
 *                                         CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                                             .playAudio(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArgs.builder()
 *                                                 .audioUri("http://example.com/some-audio-file.mp3")
 *                                                 .build())
 *                                             .build(),
 *                                         CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArgs.builder()
 *                                             .telephonyTransferCall(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs.builder()
 *                                                 .phoneNumber("1-234-567-8901")
 *                                                 .build())
 *                                             .build())
 *                                     .setParameterActions(                                    
 *                                         CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArgs.builder()
 *                                             .parameter("some-param")
 *                                             .value("123.45")
 *                                             .build(),
 *                                         CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArgs.builder()
 *                                             .parameter("another-param")
 *                                             .value(serializeJson(
 *                                                 "abc"))
 *                                             .build(),
 *                                         CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArgs.builder()
 *                                             .parameter("other-param")
 *                                             .value(serializeJson(
 *                                                 jsonArray("foo")))
 *                                             .build())
 *                                     .conditionalCases(CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArgs.builder()
 *                                         .cases(serializeJson(
 *                                             jsonArray(
 *                                                 jsonObject(
 *                                                     jsonProperty("condition", "$sys.func.RAND() < 0.5"),
 *                                                     jsonProperty("caseContent", jsonArray(
 *                                                         jsonObject(
 *                                                             jsonProperty("message", jsonObject(
 *                                                                 jsonProperty("text", jsonObject(
 *                                                                     jsonProperty("text", jsonArray("First case"))
 *                                                                 ))
 *                                                             ))
 *                                                         ), 
 *                                                         jsonObject(
 *                                                             jsonProperty("additionalCases", jsonObject(
 *                                                                 jsonProperty("cases", jsonArray(jsonObject(
 *                                                                     jsonProperty("condition", "$sys.func.RAND() < 0.2"),
 *                                                                     jsonProperty("caseContent", jsonArray(jsonObject(
 *                                                                         jsonProperty("message", jsonObject(
 *                                                                             jsonProperty("text", jsonObject(
 *                                                                                 jsonProperty("text", jsonArray("Nested case"))
 *                                                                             ))
 *                                                                         ))
 *                                                                     )))
 *                                                                 )))
 *                                                             ))
 *                                                         )
 *                                                     ))
 *                                                 ), 
 *                                                 jsonObject(
 *                                                     jsonProperty("caseContent", jsonArray(jsonObject(
 *                                                         jsonProperty("message", jsonObject(
 *                                                             jsonProperty("text", jsonObject(
 *                                                                 jsonProperty("text", jsonArray("Final case"))
 *                                                             ))
 *                                                         ))
 *                                                     )))
 *                                                 )
 *                                             )))
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             CxPageFormParameterFillBehaviorRepromptEventHandlerArgs.builder()
 *                                 .event("sys.no-match-2")
 *                                 .targetFlow(agent.startFlow())
 *                                 .build(),
 *                             CxPageFormParameterFillBehaviorRepromptEventHandlerArgs.builder()
 *                                 .event("sys.no-match-3")
 *                                 .targetPage(myPage2.id())
 *                                 .build())
 *                         .build())
 *                     .required(true)
 *                     .redact(true)
 *                     .advancedSettings(CxPageFormParameterAdvancedSettingsArgs.builder()
 *                         .dtmfSettings(CxPageFormParameterAdvancedSettingsDtmfSettingsArgs.builder()
 *                             .enabled(true)
 *                             .maxDigits(1)
 *                             .finishDigit("#")
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .transitionRoutes(CxPageTransitionRouteArgs.builder()
 *                 .condition("$page.params.status = 'FINAL'")
 *                 .triggerFulfillment(CxPageTransitionRouteTriggerFulfillmentArgs.builder()
 *                     .messages(                    
 *                         CxPageTransitionRouteTriggerFulfillmentMessageArgs.builder()
 *                             .channel("some-channel")
 *                             .text(CxPageTransitionRouteTriggerFulfillmentMessageTextArgs.builder()
 *                                 .texts("information completed, navigating to page 2")
 *                                 .build())
 *                             .build(),
 *                         CxPageTransitionRouteTriggerFulfillmentMessageArgs.builder()
 *                             .payload("""
 *           {"some-key": "some-value", "other-key": ["other-value"]}
 *                             """)
 *                             .build(),
 *                         CxPageTransitionRouteTriggerFulfillmentMessageArgs.builder()
 *                             .conversationSuccess(CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArgs.builder()
 *                                 .metadata("""
 *             {"some-metadata-key": "some-value", "other-metadata-key": 1234}
 *                                 """)
 *                                 .build())
 *                             .build(),
 *                         CxPageTransitionRouteTriggerFulfillmentMessageArgs.builder()
 *                             .outputAudioText(CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs.builder()
 *                                 .text("some output text")
 *                                 .build())
 *                             .build(),
 *                         CxPageTransitionRouteTriggerFulfillmentMessageArgs.builder()
 *                             .outputAudioText(CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArgs.builder()
 *                                 .ssml("""
 *             <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
 *                                 """)
 *                                 .build())
 *                             .build(),
 *                         CxPageTransitionRouteTriggerFulfillmentMessageArgs.builder()
 *                             .liveAgentHandoff(CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArgs.builder()
 *                                 .metadata("""
 *             {"some-metadata-key": "some-value", "other-metadata-key": 1234}
 *                                 """)
 *                                 .build())
 *                             .build(),
 *                         CxPageTransitionRouteTriggerFulfillmentMessageArgs.builder()
 *                             .playAudio(CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArgs.builder()
 *                                 .audioUri("http://example.com/some-audio-file.mp3")
 *                                 .build())
 *                             .build(),
 *                         CxPageTransitionRouteTriggerFulfillmentMessageArgs.builder()
 *                             .telephonyTransferCall(CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArgs.builder()
 *                                 .phoneNumber("1-234-567-8901")
 *                                 .build())
 *                             .build())
 *                     .setParameterActions(                    
 *                         CxPageTransitionRouteTriggerFulfillmentSetParameterActionArgs.builder()
 *                             .parameter("some-param")
 *                             .value("123.45")
 *                             .build(),
 *                         CxPageTransitionRouteTriggerFulfillmentSetParameterActionArgs.builder()
 *                             .parameter("another-param")
 *                             .value(serializeJson(
 *                                 "abc"))
 *                             .build(),
 *                         CxPageTransitionRouteTriggerFulfillmentSetParameterActionArgs.builder()
 *                             .parameter("other-param")
 *                             .value(serializeJson(
 *                                 jsonArray("foo")))
 *                             .build())
 *                     .conditionalCases(CxPageTransitionRouteTriggerFulfillmentConditionalCaseArgs.builder()
 *                         .cases(serializeJson(
 *                             jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("condition", "$sys.func.RAND() < 0.5"),
 *                                     jsonProperty("caseContent", jsonArray(
 *                                         jsonObject(
 *                                             jsonProperty("message", jsonObject(
 *                                                 jsonProperty("text", jsonObject(
 *                                                     jsonProperty("text", jsonArray("First case"))
 *                                                 ))
 *                                             ))
 *                                         ), 
 *                                         jsonObject(
 *                                             jsonProperty("additionalCases", jsonObject(
 *                                                 jsonProperty("cases", jsonArray(jsonObject(
 *                                                     jsonProperty("condition", "$sys.func.RAND() < 0.2"),
 *                                                     jsonProperty("caseContent", jsonArray(jsonObject(
 *                                                         jsonProperty("message", jsonObject(
 *                                                             jsonProperty("text", jsonObject(
 *                                                                 jsonProperty("text", jsonArray("Nested case"))
 *                                                             ))
 *                                                         ))
 *                                                     )))
 *                                                 )))
 *                                             ))
 *                                         )
 *                                     ))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("caseContent", jsonArray(jsonObject(
 *                                         jsonProperty("message", jsonObject(
 *                                             jsonProperty("text", jsonObject(
 *                                                 jsonProperty("text", jsonArray("Final case"))
 *                                             ))
 *                                         ))
 *                                     )))
 *                                 )
 *                             )))
 *                         .build())
 *                     .build())
 *                 .targetPage(myPage2.id())
 *                 .build())
 *             .advancedSettings(CxPageAdvancedSettingsArgs.builder()
 *                 .dtmfSettings(CxPageAdvancedSettingsDtmfSettingsArgs.builder()
 *                     .enabled(true)
 *                     .maxDigits(1)
 *                     .finishDigit("#")
 *                     .build())
 *                 .build())
 *             .knowledgeConnectorSettings(CxPageKnowledgeConnectorSettingsArgs.builder()
 *                 .enabled(true)
 *                 .triggerFulfillment(CxPageKnowledgeConnectorSettingsTriggerFulfillmentArgs.builder()
 *                     .messages(                    
 *                         CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageArgs.builder()
 *                             .channel("some-channel")
 *                             .knowledgeInfoCard(CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageKnowledgeInfoCardArgs.builder()
 *                                 .build())
 *                             .build(),
 *                         CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageArgs.builder()
 *                             .channel("some-channel")
 *                             .text(CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageTextArgs.builder()
 *                                 .texts("information completed, navigating to page 2")
 *                                 .build())
 *                             .build(),
 *                         CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageArgs.builder()
 *                             .payload("""
 *           {"some-key": "some-value", "other-key": ["other-value"]}
 *                             """)
 *                             .build(),
 *                         CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageArgs.builder()
 *                             .conversationSuccess(CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageConversationSuccessArgs.builder()
 *                                 .metadata("""
 *             {"some-metadata-key": "some-value", "other-metadata-key": 1234}
 *                                 """)
 *                                 .build())
 *                             .build(),
 *                         CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageArgs.builder()
 *                             .outputAudioText(CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageOutputAudioTextArgs.builder()
 *                                 .text("some output text")
 *                                 .build())
 *                             .build(),
 *                         CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageArgs.builder()
 *                             .outputAudioText(CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageOutputAudioTextArgs.builder()
 *                                 .ssml("""
 *             <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
 *                                 """)
 *                                 .build())
 *                             .build(),
 *                         CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageArgs.builder()
 *                             .liveAgentHandoff(CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageLiveAgentHandoffArgs.builder()
 *                                 .metadata("""
 *             {"some-metadata-key": "some-value", "other-metadata-key": 1234}
 *                                 """)
 *                                 .build())
 *                             .build(),
 *                         CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageArgs.builder()
 *                             .playAudio(CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessagePlayAudioArgs.builder()
 *                                 .audioUri("http://example.com/some-audio-file.mp3")
 *                                 .build())
 *                             .build(),
 *                         CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageArgs.builder()
 *                             .telephonyTransferCall(CxPageKnowledgeConnectorSettingsTriggerFulfillmentMessageTelephonyTransferCallArgs.builder()
 *                                 .phoneNumber("1-234-567-8902")
 *                                 .build())
 *                             .build())
 *                     .webhook(myWebhook.id())
 *                     .returnPartialResponses(true)
 *                     .tag("some-tag")
 *                     .setParameterActions(CxPageKnowledgeConnectorSettingsTriggerFulfillmentSetParameterActionArgs.builder()
 *                         .parameter("some-param")
 *                         .value("123.45")
 *                         .build())
 *                     .conditionalCases(CxPageKnowledgeConnectorSettingsTriggerFulfillmentConditionalCaseArgs.builder()
 *                         .cases(serializeJson(
 *                             jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("condition", "$sys.func.RAND() < 0.5"),
 *                                     jsonProperty("caseContent", jsonArray(jsonObject(
 *                                         jsonProperty("message", jsonObject(
 *                                             jsonProperty("text", jsonObject(
 *                                                 jsonProperty("text", jsonArray("First case"))
 *                                             ))
 *                                         ))
 *                                     )))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("caseContent", jsonArray(jsonObject(
 *                                         jsonProperty("message", jsonObject(
 *                                             jsonProperty("text", jsonObject(
 *                                                 jsonProperty("text", jsonArray("Final case"))
 *                                             ))
 *                                         ))
 *                                     )))
 *                                 )
 *                             )))
 *                         .build())
 *                     .advancedSettings(CxPageKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsArgs.builder()
 *                         .speechSettings(CxPageKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsSpeechSettingsArgs.builder()
 *                             .endpointerSensitivity(30)
 *                             .noSpeechTimeout("3.500s")
 *                             .useTimeoutBasedEndpointing(true)
 *                             .models(Map.ofEntries(
 *                                 Map.entry("name", "wrench"),
 *                                 Map.entry("mass", "1.3kg"),
 *                                 Map.entry("count", "3")
 *                             ))
 *                             .build())
 *                         .dtmfSettings(CxPageKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsDtmfSettingsArgs.builder()
 *                             .enabled(true)
 *                             .maxDigits(1)
 *                             .finishDigit("#")
 *                             .interdigitTimeoutDuration("3.500s")
 *                             .endpointingTimeoutDuration("3.500s")
 *                             .build())
 *                         .loggingSettings(CxPageKnowledgeConnectorSettingsTriggerFulfillmentAdvancedSettingsLoggingSettingsArgs.builder()
 *                             .enableStackdriverLogging(true)
 *                             .enableInteractionLogging(true)
 *                             .enableConsentBasedRedaction(true)
 *                             .build())
 *                         .build())
 *                     .enableGenerativeFallback(true)
 *                     .build())
 *                 .dataStoreConnections(CxPageKnowledgeConnectorSettingsDataStoreConnectionArgs.builder()
 *                     .dataStoreType("PUBLIC_WEB")
 *                     .dataStore(agent.location().applyValue(_location -> String.format("projects/%s/locations/%s/collections/default_collection/dataStores/datastore-page-full", project.number(),_location)))
 *                     .documentProcessingMode("CHUNKS")
 *                     .build())
 *                 .targetPage(myPage2.id())
 *                 .build())
 *             .build());
 * 
 *         var myDatastore = new DataStore("myDatastore", DataStoreArgs.builder()
 *             .location("global")
 *             .dataStoreId("datastore-page-full")
 *             .displayName("datastore-page-full")
 *             .industryVertical("GENERIC")
 *             .contentConfig("NO_CONTENT")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Page can be imported using any of these accepted formats:
 * 
 * * `{{parent}}/pages/{{name}}`
 * 
 * * `{{parent}}/{{name}}`
 * 
 * When using the `pulumi import` command, Page can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:diagflow/cxPage:CxPage default {{parent}}/pages/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:diagflow/cxPage:CxPage default {{parent}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:diagflow/cxPage:CxPage")
public class CxPage extends com.pulumi.resources.CustomResource {
    /**
     * Hierarchical advanced settings for this page. The settings exposed at the lower level overrides the settings exposed at the higher level.
     * Hierarchy: Agent-&gt;Flow-&gt;Page-&gt;Fulfillment/Parameter.
     * Structure is documented below.
     * 
     */
    @Export(name="advancedSettings", refs={CxPageAdvancedSettings.class}, tree="[0]")
    private Output</* @Nullable */ CxPageAdvancedSettings> advancedSettings;

    /**
     * @return Hierarchical advanced settings for this page. The settings exposed at the lower level overrides the settings exposed at the higher level.
     * Hierarchy: Agent-&gt;Flow-&gt;Page-&gt;Fulfillment/Parameter.
     * Structure is documented below.
     * 
     */
    public Output<Optional<CxPageAdvancedSettings>> advancedSettings() {
        return Codegen.optional(this.advancedSettings);
    }
    /**
     * The human-readable name of the page, unique within the agent.
     * 
     * ***
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The human-readable name of the page, unique within the agent.
     * 
     * ***
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The fulfillment to call when the session is entering the page.
     * Structure is documented below.
     * 
     */
    @Export(name="entryFulfillment", refs={CxPageEntryFulfillment.class}, tree="[0]")
    private Output</* @Nullable */ CxPageEntryFulfillment> entryFulfillment;

    /**
     * @return The fulfillment to call when the session is entering the page.
     * Structure is documented below.
     * 
     */
    public Output<Optional<CxPageEntryFulfillment>> entryFulfillment() {
        return Codegen.optional(this.entryFulfillment);
    }
    /**
     * Handlers associated with the page to handle events such as webhook errors, no match or no input.
     * Structure is documented below.
     * 
     */
    @Export(name="eventHandlers", refs={List.class,CxPageEventHandler.class}, tree="[0,1]")
    private Output</* @Nullable */ List<CxPageEventHandler>> eventHandlers;

    /**
     * @return Handlers associated with the page to handle events such as webhook errors, no match or no input.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<CxPageEventHandler>>> eventHandlers() {
        return Codegen.optional(this.eventHandlers);
    }
    /**
     * The form associated with the page, used for collecting parameters relevant to the page.
     * Structure is documented below.
     * 
     */
    @Export(name="form", refs={CxPageForm.class}, tree="[0]")
    private Output</* @Nullable */ CxPageForm> form;

    /**
     * @return The form associated with the page, used for collecting parameters relevant to the page.
     * Structure is documented below.
     * 
     */
    public Output<Optional<CxPageForm>> form() {
        return Codegen.optional(this.form);
    }
    /**
     * Knowledge connector configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="knowledgeConnectorSettings", refs={CxPageKnowledgeConnectorSettings.class}, tree="[0]")
    private Output</* @Nullable */ CxPageKnowledgeConnectorSettings> knowledgeConnectorSettings;

    /**
     * @return Knowledge connector configuration.
     * Structure is documented below.
     * 
     */
    public Output<Optional<CxPageKnowledgeConnectorSettings>> knowledgeConnectorSettings() {
        return Codegen.optional(this.knowledgeConnectorSettings);
    }
    /**
     * The language of the following fields in page:
     * Page.entry_fulfillment.messages
     * Page.entry_fulfillment.conditional_cases
     * Page.event_handlers.trigger_fulfillment.messages
     * Page.event_handlers.trigger_fulfillment.conditional_cases
     * Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
     * Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
     * Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
     * Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
     * Page.transition_routes.trigger_fulfillment.messages
     * Page.transition_routes.trigger_fulfillment.conditional_cases
     * If not specified, the agent&#39;s default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     * 
     */
    @Export(name="languageCode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> languageCode;

    /**
     * @return The language of the following fields in page:
     * Page.entry_fulfillment.messages
     * Page.entry_fulfillment.conditional_cases
     * Page.event_handlers.trigger_fulfillment.messages
     * Page.event_handlers.trigger_fulfillment.conditional_cases
     * Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
     * Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
     * Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
     * Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
     * Page.transition_routes.trigger_fulfillment.messages
     * Page.transition_routes.trigger_fulfillment.conditional_cases
     * If not specified, the agent&#39;s default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     * 
     */
    public Output<Optional<String>> languageCode() {
        return Codegen.optional(this.languageCode);
    }
    /**
     * The unique identifier of the page.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/pages/&lt;Page ID&gt;.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The unique identifier of the page.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/pages/&lt;Page ID&gt;.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The flow to create a page for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
     * 
     */
    @Export(name="parent", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> parent;

    /**
     * @return The flow to create a page for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
     * 
     */
    public Output<Optional<String>> parent() {
        return Codegen.optional(this.parent);
    }
    /**
     * Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
     * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page&#39;s transition route &gt; page&#39;s transition route group &gt; flow&#39;s transition routes.
     * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
     * Format:projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/transitionRouteGroups/&lt;TransitionRouteGroup ID&gt;.
     * 
     */
    @Export(name="transitionRouteGroups", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> transitionRouteGroups;

    /**
     * @return Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
     * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page&#39;s transition route &gt; page&#39;s transition route group &gt; flow&#39;s transition routes.
     * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
     * Format:projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/transitionRouteGroups/&lt;TransitionRouteGroup ID&gt;.
     * 
     */
    public Output<Optional<List<String>>> transitionRouteGroups() {
        return Codegen.optional(this.transitionRouteGroups);
    }
    /**
     * A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
     * When we are in a certain page, the TransitionRoutes are evalauted in the following order:
     * TransitionRoutes defined in the page with intent specified.
     * TransitionRoutes defined in the transition route groups with intent specified.
     * TransitionRoutes defined in flow with intent specified.
     * TransitionRoutes defined in the transition route groups with intent specified.
     * TransitionRoutes defined in the page with only condition specified.
     * TransitionRoutes defined in the transition route groups with only condition specified.
     * Structure is documented below.
     * 
     */
    @Export(name="transitionRoutes", refs={List.class,CxPageTransitionRoute.class}, tree="[0,1]")
    private Output</* @Nullable */ List<CxPageTransitionRoute>> transitionRoutes;

    /**
     * @return A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
     * When we are in a certain page, the TransitionRoutes are evalauted in the following order:
     * TransitionRoutes defined in the page with intent specified.
     * TransitionRoutes defined in the transition route groups with intent specified.
     * TransitionRoutes defined in flow with intent specified.
     * TransitionRoutes defined in the transition route groups with intent specified.
     * TransitionRoutes defined in the page with only condition specified.
     * TransitionRoutes defined in the transition route groups with only condition specified.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<CxPageTransitionRoute>>> transitionRoutes() {
        return Codegen.optional(this.transitionRoutes);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CxPage(java.lang.String name) {
        this(name, CxPageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CxPage(java.lang.String name, CxPageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CxPage(java.lang.String name, CxPageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/cxPage:CxPage", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CxPage(java.lang.String name, Output<java.lang.String> id, @Nullable CxPageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/cxPage:CxPage", name, state, makeResourceOptions(options, id), false);
    }

    private static CxPageArgs makeArgs(CxPageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CxPageArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CxPage get(java.lang.String name, Output<java.lang.String> id, @Nullable CxPageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CxPage(name, id, state, options);
    }
}
