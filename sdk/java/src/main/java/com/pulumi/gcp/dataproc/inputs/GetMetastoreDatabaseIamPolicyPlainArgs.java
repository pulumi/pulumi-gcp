// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMetastoreDatabaseIamPolicyPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMetastoreDatabaseIamPolicyPlainArgs Empty = new GetMetastoreDatabaseIamPolicyPlainArgs();

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="database", required=true)
    private String database;

    /**
     * @return Used to find the parent resource to bind the IAM policy to
     * 
     */
    public String database() {
        return this.database;
    }

    @Import(name="location")
    private @Nullable String location;

    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="serviceId", required=true)
    private String serviceId;

    public String serviceId() {
        return this.serviceId;
    }

    private GetMetastoreDatabaseIamPolicyPlainArgs() {}

    private GetMetastoreDatabaseIamPolicyPlainArgs(GetMetastoreDatabaseIamPolicyPlainArgs $) {
        this.database = $.database;
        this.location = $.location;
        this.project = $.project;
        this.serviceId = $.serviceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMetastoreDatabaseIamPolicyPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMetastoreDatabaseIamPolicyPlainArgs $;

        public Builder() {
            $ = new GetMetastoreDatabaseIamPolicyPlainArgs();
        }

        public Builder(GetMetastoreDatabaseIamPolicyPlainArgs defaults) {
            $ = new GetMetastoreDatabaseIamPolicyPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param database Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            $.database = database;
            return this;
        }

        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        public Builder serviceId(String serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        public GetMetastoreDatabaseIamPolicyPlainArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("GetMetastoreDatabaseIamPolicyPlainArgs", "database");
            }
            if ($.serviceId == null) {
                throw new MissingRequiredPropertyException("GetMetastoreDatabaseIamPolicyPlainArgs", "serviceId");
            }
            return $;
        }
    }

}
