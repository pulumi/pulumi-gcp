// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SitemapState extends com.pulumi.resources.ResourceArgs {

    public static final SitemapState Empty = new SitemapState();

    /**
     * Timestamp when the sitemap was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Timestamp when the sitemap was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The unique id of the data store.
     * 
     */
    @Import(name="dataStoreId")
    private @Nullable Output<String> dataStoreId;

    /**
     * @return The unique id of the data store.
     * 
     */
    public Optional<Output<String>> dataStoreId() {
        return Optional.ofNullable(this.dataStoreId);
    }

    /**
     * The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The unique full resource name of the sitemap. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/sitemaps/{sitemap_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique full resource name of the sitemap. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/sitemaps/{sitemap_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The unique id of the sitemap.
     * 
     */
    @Import(name="sitemapId")
    private @Nullable Output<String> sitemapId;

    /**
     * @return The unique id of the sitemap.
     * 
     */
    public Optional<Output<String>> sitemapId() {
        return Optional.ofNullable(this.sitemapId);
    }

    /**
     * Public URI for the sitemap, e.g. &#34;www.example.com/sitemap.xml&#34;.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return Public URI for the sitemap, e.g. &#34;www.example.com/sitemap.xml&#34;.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private SitemapState() {}

    private SitemapState(SitemapState $) {
        this.createTime = $.createTime;
        this.dataStoreId = $.dataStoreId;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.sitemapId = $.sitemapId;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SitemapState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SitemapState $;

        public Builder() {
            $ = new SitemapState();
        }

        public Builder(SitemapState defaults) {
            $ = new SitemapState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Timestamp when the sitemap was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Timestamp when the sitemap was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dataStoreId The unique id of the data store.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreId(@Nullable Output<String> dataStoreId) {
            $.dataStoreId = dataStoreId;
            return this;
        }

        /**
         * @param dataStoreId The unique id of the data store.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreId(String dataStoreId) {
            return dataStoreId(Output.of(dataStoreId));
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The unique full resource name of the sitemap. Values are of the format
         * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/sitemaps/{sitemap_id}`.
         * This field must be a UTF-8 encoded string with a length limit of 1024
         * characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique full resource name of the sitemap. Values are of the format
         * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/sitemaps/{sitemap_id}`.
         * This field must be a UTF-8 encoded string with a length limit of 1024
         * characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param sitemapId The unique id of the sitemap.
         * 
         * @return builder
         * 
         */
        public Builder sitemapId(@Nullable Output<String> sitemapId) {
            $.sitemapId = sitemapId;
            return this;
        }

        /**
         * @param sitemapId The unique id of the sitemap.
         * 
         * @return builder
         * 
         */
        public Builder sitemapId(String sitemapId) {
            return sitemapId(Output.of(sitemapId));
        }

        /**
         * @param uri Public URI for the sitemap, e.g. &#34;www.example.com/sitemap.xml&#34;.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri Public URI for the sitemap, e.g. &#34;www.example.com/sitemap.xml&#34;.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public SitemapState build() {
            return $;
        }
    }

}
