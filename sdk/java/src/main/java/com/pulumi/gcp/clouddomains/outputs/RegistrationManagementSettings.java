// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddomains.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistrationManagementSettings {
    /**
     * @return The desired renewal method for this Registration. The actual renewalMethod is automatically updated to reflect this choice.
     * If unset or equal to RENEWAL_METHOD_UNSPECIFIED, the actual renewalMethod is treated as if it were set to AUTOMATIC_RENEWAL.
     * You cannot use RENEWAL_DISABLED during resource creation, and you can update the renewal status only when the Registration
     * resource has state ACTIVE or SUSPENDED.
     * When preferredRenewalMethod is set to AUTOMATIC_RENEWAL, the actual renewalMethod can be set to RENEWAL_DISABLED in case of
     * problems with the billing account or reported domain abuse. In such cases, check the issues field on the Registration. After
     * the problem is resolved, the renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
     * 
     */
    private @Nullable String preferredRenewalMethod;
    /**
     * @return (Output)
     * Output only. The actual renewal method for this Registration. When preferredRenewalMethod is set to AUTOMATIC_RENEWAL,
     * the actual renewalMethod can be equal to RENEWAL_DISABLED—for example, when there are problems with the billing account
     * or reported domain abuse. In such cases, check the issues field on the Registration. After the problem is resolved, the
     * renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
     * 
     */
    private @Nullable String renewalMethod;
    /**
     * @return Controls whether the domain can be transferred to another registrar. Values are UNLOCKED or LOCKED.
     * 
     */
    private @Nullable String transferLockState;

    private RegistrationManagementSettings() {}
    /**
     * @return The desired renewal method for this Registration. The actual renewalMethod is automatically updated to reflect this choice.
     * If unset or equal to RENEWAL_METHOD_UNSPECIFIED, the actual renewalMethod is treated as if it were set to AUTOMATIC_RENEWAL.
     * You cannot use RENEWAL_DISABLED during resource creation, and you can update the renewal status only when the Registration
     * resource has state ACTIVE or SUSPENDED.
     * When preferredRenewalMethod is set to AUTOMATIC_RENEWAL, the actual renewalMethod can be set to RENEWAL_DISABLED in case of
     * problems with the billing account or reported domain abuse. In such cases, check the issues field on the Registration. After
     * the problem is resolved, the renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
     * 
     */
    public Optional<String> preferredRenewalMethod() {
        return Optional.ofNullable(this.preferredRenewalMethod);
    }
    /**
     * @return (Output)
     * Output only. The actual renewal method for this Registration. When preferredRenewalMethod is set to AUTOMATIC_RENEWAL,
     * the actual renewalMethod can be equal to RENEWAL_DISABLED—for example, when there are problems with the billing account
     * or reported domain abuse. In such cases, check the issues field on the Registration. After the problem is resolved, the
     * renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
     * 
     */
    public Optional<String> renewalMethod() {
        return Optional.ofNullable(this.renewalMethod);
    }
    /**
     * @return Controls whether the domain can be transferred to another registrar. Values are UNLOCKED or LOCKED.
     * 
     */
    public Optional<String> transferLockState() {
        return Optional.ofNullable(this.transferLockState);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistrationManagementSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String preferredRenewalMethod;
        private @Nullable String renewalMethod;
        private @Nullable String transferLockState;
        public Builder() {}
        public Builder(RegistrationManagementSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.preferredRenewalMethod = defaults.preferredRenewalMethod;
    	      this.renewalMethod = defaults.renewalMethod;
    	      this.transferLockState = defaults.transferLockState;
        }

        @CustomType.Setter
        public Builder preferredRenewalMethod(@Nullable String preferredRenewalMethod) {

            this.preferredRenewalMethod = preferredRenewalMethod;
            return this;
        }
        @CustomType.Setter
        public Builder renewalMethod(@Nullable String renewalMethod) {

            this.renewalMethod = renewalMethod;
            return this;
        }
        @CustomType.Setter
        public Builder transferLockState(@Nullable String transferLockState) {

            this.transferLockState = transferLockState;
            return this;
        }
        public RegistrationManagementSettings build() {
            final var _resultValue = new RegistrationManagementSettings();
            _resultValue.preferredRenewalMethod = preferredRenewalMethod;
            _resultValue.renewalMethod = renewalMethod;
            _resultValue.transferLockState = transferLockState;
            return _resultValue;
        }
    }
}
