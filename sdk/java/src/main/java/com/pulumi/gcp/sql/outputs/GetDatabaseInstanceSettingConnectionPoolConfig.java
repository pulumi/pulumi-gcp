// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingConnectionPoolConfigFlag;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatabaseInstanceSettingConnectionPoolConfig {
    /**
     * @return Whether Managed Connection Pool is enabled for this instance.
     * 
     */
    private Boolean connectionPoolingEnabled;
    /**
     * @return List of connection pool configuration flags
     * 
     */
    private List<GetDatabaseInstanceSettingConnectionPoolConfigFlag> flags;

    private GetDatabaseInstanceSettingConnectionPoolConfig() {}
    /**
     * @return Whether Managed Connection Pool is enabled for this instance.
     * 
     */
    public Boolean connectionPoolingEnabled() {
        return this.connectionPoolingEnabled;
    }
    /**
     * @return List of connection pool configuration flags
     * 
     */
    public List<GetDatabaseInstanceSettingConnectionPoolConfigFlag> flags() {
        return this.flags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstanceSettingConnectionPoolConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean connectionPoolingEnabled;
        private List<GetDatabaseInstanceSettingConnectionPoolConfigFlag> flags;
        public Builder() {}
        public Builder(GetDatabaseInstanceSettingConnectionPoolConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionPoolingEnabled = defaults.connectionPoolingEnabled;
    	      this.flags = defaults.flags;
        }

        @CustomType.Setter
        public Builder connectionPoolingEnabled(Boolean connectionPoolingEnabled) {
            if (connectionPoolingEnabled == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSettingConnectionPoolConfig", "connectionPoolingEnabled");
            }
            this.connectionPoolingEnabled = connectionPoolingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder flags(List<GetDatabaseInstanceSettingConnectionPoolConfigFlag> flags) {
            if (flags == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSettingConnectionPoolConfig", "flags");
            }
            this.flags = flags;
            return this;
        }
        public Builder flags(GetDatabaseInstanceSettingConnectionPoolConfigFlag... flags) {
            return flags(List.of(flags));
        }
        public GetDatabaseInstanceSettingConnectionPoolConfig build() {
            final var _resultValue = new GetDatabaseInstanceSettingConnectionPoolConfig();
            _resultValue.connectionPoolingEnabled = connectionPoolingEnabled;
            _resultValue.flags = flags;
            return _resultValue;
        }
    }
}
