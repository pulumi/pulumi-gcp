// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetStoragePoolTypesDeprecated {
    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED.
     * This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    private String deleted;
    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED.
     * This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    private String deprecated;
    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE.
     * This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    private String obsolete;
    /**
     * @return The URL of the suggested replacement for a deprecated resource.
     * The suggested replacement resource must be the same kind of resource as the deprecated resource.
     * 
     */
    private String replacement;
    /**
     * @return The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED.
     * Operations which communicate the end of life date for an image, can use ACTIVE.
     * Operations which create a new resource using a DEPRECATED resource will return successfully,
     * but with a warning indicating the deprecated resource and recommending its replacement.
     * Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
     * 
     */
    private String state;

    private GetStoragePoolTypesDeprecated() {}
    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED.
     * This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    public String deleted() {
        return this.deleted;
    }
    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED.
     * This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    public String deprecated() {
        return this.deprecated;
    }
    /**
     * @return An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE.
     * This is only informational and the status will not change unless the client explicitly changes it.
     * 
     */
    public String obsolete() {
        return this.obsolete;
    }
    /**
     * @return The URL of the suggested replacement for a deprecated resource.
     * The suggested replacement resource must be the same kind of resource as the deprecated resource.
     * 
     */
    public String replacement() {
        return this.replacement;
    }
    /**
     * @return The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED.
     * Operations which communicate the end of life date for an image, can use ACTIVE.
     * Operations which create a new resource using a DEPRECATED resource will return successfully,
     * but with a warning indicating the deprecated resource and recommending its replacement.
     * Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStoragePoolTypesDeprecated defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String deleted;
        private String deprecated;
        private String obsolete;
        private String replacement;
        private String state;
        public Builder() {}
        public Builder(GetStoragePoolTypesDeprecated defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleted = defaults.deleted;
    	      this.deprecated = defaults.deprecated;
    	      this.obsolete = defaults.obsolete;
    	      this.replacement = defaults.replacement;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder deleted(String deleted) {
            if (deleted == null) {
              throw new MissingRequiredPropertyException("GetStoragePoolTypesDeprecated", "deleted");
            }
            this.deleted = deleted;
            return this;
        }
        @CustomType.Setter
        public Builder deprecated(String deprecated) {
            if (deprecated == null) {
              throw new MissingRequiredPropertyException("GetStoragePoolTypesDeprecated", "deprecated");
            }
            this.deprecated = deprecated;
            return this;
        }
        @CustomType.Setter
        public Builder obsolete(String obsolete) {
            if (obsolete == null) {
              throw new MissingRequiredPropertyException("GetStoragePoolTypesDeprecated", "obsolete");
            }
            this.obsolete = obsolete;
            return this;
        }
        @CustomType.Setter
        public Builder replacement(String replacement) {
            if (replacement == null) {
              throw new MissingRequiredPropertyException("GetStoragePoolTypesDeprecated", "replacement");
            }
            this.replacement = replacement;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetStoragePoolTypesDeprecated", "state");
            }
            this.state = state;
            return this;
        }
        public GetStoragePoolTypesDeprecated build() {
            final var _resultValue = new GetStoragePoolTypesDeprecated();
            _resultValue.deleted = deleted;
            _resultValue.deprecated = deprecated;
            _resultValue.obsolete = obsolete;
            _resultValue.replacement = replacement;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
