// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.parametermanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.parametermanager.outputs.GetParametersParameter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetParametersResult {
    private @Nullable String filter;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of parameters matching the filter. Structure is defined below.
     * 
     */
    private List<GetParametersParameter> parameters;
    /**
     * @return The ID of the project in which the resource belongs.
     * 
     */
    private String project;

    private GetParametersResult() {}
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of parameters matching the filter. Structure is defined below.
     * 
     */
    public List<GetParametersParameter> parameters() {
        return this.parameters;
    }
    /**
     * @return The ID of the project in which the resource belongs.
     * 
     */
    public String project() {
        return this.project;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetParametersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String filter;
        private String id;
        private List<GetParametersParameter> parameters;
        private String project;
        public Builder() {}
        public Builder(GetParametersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.parameters = defaults.parameters;
    	      this.project = defaults.project;
        }

        @CustomType.Setter
        public Builder filter(@Nullable String filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetParametersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(List<GetParametersParameter> parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetParametersResult", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(GetParametersParameter... parameters) {
            return parameters(List.of(parameters));
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetParametersResult", "project");
            }
            this.project = project;
            return this;
        }
        public GetParametersResult build() {
            final var _resultValue = new GetParametersResult();
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.parameters = parameters;
            _resultValue.project = project;
            return _resultValue;
        }
    }
}
