// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.ZoneDiscoverySpecCsvOptionsArgs;
import com.pulumi.gcp.dataplex.inputs.ZoneDiscoverySpecJsonOptionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneDiscoverySpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneDiscoverySpecArgs Empty = new ZoneDiscoverySpecArgs();

    /**
     * Optional. Configuration for CSV data.
     * 
     */
    @Import(name="csvOptions")
    private @Nullable Output<ZoneDiscoverySpecCsvOptionsArgs> csvOptions;

    /**
     * @return Optional. Configuration for CSV data.
     * 
     */
    public Optional<Output<ZoneDiscoverySpecCsvOptionsArgs>> csvOptions() {
        return Optional.ofNullable(this.csvOptions);
    }

    /**
     * Required. Whether discovery is enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Required. Whether discovery is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
     * 
     */
    @Import(name="excludePatterns")
    private @Nullable Output<List<String>> excludePatterns;

    /**
     * @return Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
     * 
     */
    public Optional<Output<List<String>>> excludePatterns() {
        return Optional.ofNullable(this.excludePatterns);
    }

    /**
     * Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
     * 
     */
    @Import(name="includePatterns")
    private @Nullable Output<List<String>> includePatterns;

    /**
     * @return Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
     * 
     */
    public Optional<Output<List<String>>> includePatterns() {
        return Optional.ofNullable(this.includePatterns);
    }

    /**
     * Optional. Configuration for Json data.
     * 
     */
    @Import(name="jsonOptions")
    private @Nullable Output<ZoneDiscoverySpecJsonOptionsArgs> jsonOptions;

    /**
     * @return Optional. Configuration for Json data.
     * 
     */
    public Optional<Output<ZoneDiscoverySpecJsonOptionsArgs>> jsonOptions() {
        return Optional.ofNullable(this.jsonOptions);
    }

    /**
     * Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: &#34;CRON_TZ=${IANA_TIME_ZONE}&#34; or TZ=${IANA_TIME_ZONE}&#34;. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, &#34;CRON_TZ=America/New_York 1 * * * *&#34;, or &#34;TZ=America/New_York 1 * * * *&#34;.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    /**
     * @return Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: &#34;CRON_TZ=${IANA_TIME_ZONE}&#34; or TZ=${IANA_TIME_ZONE}&#34;. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, &#34;CRON_TZ=America/New_York 1 * * * *&#34;, or &#34;TZ=America/New_York 1 * * * *&#34;.
     * 
     */
    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    private ZoneDiscoverySpecArgs() {}

    private ZoneDiscoverySpecArgs(ZoneDiscoverySpecArgs $) {
        this.csvOptions = $.csvOptions;
        this.enabled = $.enabled;
        this.excludePatterns = $.excludePatterns;
        this.includePatterns = $.includePatterns;
        this.jsonOptions = $.jsonOptions;
        this.schedule = $.schedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneDiscoverySpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneDiscoverySpecArgs $;

        public Builder() {
            $ = new ZoneDiscoverySpecArgs();
        }

        public Builder(ZoneDiscoverySpecArgs defaults) {
            $ = new ZoneDiscoverySpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param csvOptions Optional. Configuration for CSV data.
         * 
         * @return builder
         * 
         */
        public Builder csvOptions(@Nullable Output<ZoneDiscoverySpecCsvOptionsArgs> csvOptions) {
            $.csvOptions = csvOptions;
            return this;
        }

        /**
         * @param csvOptions Optional. Configuration for CSV data.
         * 
         * @return builder
         * 
         */
        public Builder csvOptions(ZoneDiscoverySpecCsvOptionsArgs csvOptions) {
            return csvOptions(Output.of(csvOptions));
        }

        /**
         * @param enabled Required. Whether discovery is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Required. Whether discovery is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param excludePatterns Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
         * 
         * @return builder
         * 
         */
        public Builder excludePatterns(@Nullable Output<List<String>> excludePatterns) {
            $.excludePatterns = excludePatterns;
            return this;
        }

        /**
         * @param excludePatterns Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
         * 
         * @return builder
         * 
         */
        public Builder excludePatterns(List<String> excludePatterns) {
            return excludePatterns(Output.of(excludePatterns));
        }

        /**
         * @param excludePatterns Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
         * 
         * @return builder
         * 
         */
        public Builder excludePatterns(String... excludePatterns) {
            return excludePatterns(List.of(excludePatterns));
        }

        /**
         * @param includePatterns Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
         * 
         * @return builder
         * 
         */
        public Builder includePatterns(@Nullable Output<List<String>> includePatterns) {
            $.includePatterns = includePatterns;
            return this;
        }

        /**
         * @param includePatterns Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
         * 
         * @return builder
         * 
         */
        public Builder includePatterns(List<String> includePatterns) {
            return includePatterns(Output.of(includePatterns));
        }

        /**
         * @param includePatterns Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
         * 
         * @return builder
         * 
         */
        public Builder includePatterns(String... includePatterns) {
            return includePatterns(List.of(includePatterns));
        }

        /**
         * @param jsonOptions Optional. Configuration for Json data.
         * 
         * @return builder
         * 
         */
        public Builder jsonOptions(@Nullable Output<ZoneDiscoverySpecJsonOptionsArgs> jsonOptions) {
            $.jsonOptions = jsonOptions;
            return this;
        }

        /**
         * @param jsonOptions Optional. Configuration for Json data.
         * 
         * @return builder
         * 
         */
        public Builder jsonOptions(ZoneDiscoverySpecJsonOptionsArgs jsonOptions) {
            return jsonOptions(Output.of(jsonOptions));
        }

        /**
         * @param schedule Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: &#34;CRON_TZ=${IANA_TIME_ZONE}&#34; or TZ=${IANA_TIME_ZONE}&#34;. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, &#34;CRON_TZ=America/New_York 1 * * * *&#34;, or &#34;TZ=America/New_York 1 * * * *&#34;.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: &#34;CRON_TZ=${IANA_TIME_ZONE}&#34; or TZ=${IANA_TIME_ZONE}&#34;. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, &#34;CRON_TZ=America/New_York 1 * * * *&#34;, or &#34;TZ=America/New_York 1 * * * *&#34;.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        public ZoneDiscoverySpecArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
