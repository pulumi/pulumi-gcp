// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterExclusionLabelArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInclusionLabelArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArgs;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs Empty = new V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs();

    /**
     * Target all VMs in the project. If true, no other criteria is
     * permitted.
     * 
     */
    @Import(name="all")
    private @Nullable Output<Boolean> all;

    /**
     * @return Target all VMs in the project. If true, no other criteria is
     * permitted.
     * 
     */
    public Optional<Output<Boolean>> all() {
        return Optional.ofNullable(this.all);
    }

    /**
     * List of label sets used for VM exclusion.
     * If the list has more than one label set, the VM is excluded if any
     * of the label sets are applicable for the VM.
     * Structure is documented below.
     * 
     */
    @Import(name="exclusionLabels")
    private @Nullable Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterExclusionLabelArgs>> exclusionLabels;

    /**
     * @return List of label sets used for VM exclusion.
     * If the list has more than one label set, the VM is excluded if any
     * of the label sets are applicable for the VM.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterExclusionLabelArgs>>> exclusionLabels() {
        return Optional.ofNullable(this.exclusionLabels);
    }

    /**
     * List of label sets used for VM inclusion.
     * If the list has more than one `LabelSet`, the VM is included if any
     * of the label sets are applicable for the VM.
     * Structure is documented below.
     * 
     */
    @Import(name="inclusionLabels")
    private @Nullable Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInclusionLabelArgs>> inclusionLabels;

    /**
     * @return List of label sets used for VM inclusion.
     * If the list has more than one `LabelSet`, the VM is included if any
     * of the label sets are applicable for the VM.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInclusionLabelArgs>>> inclusionLabels() {
        return Optional.ofNullable(this.inclusionLabels);
    }

    /**
     * List of inventories to select VMs.
     * A VM is selected if its inventory data matches at least one of the
     * following inventories.
     * Structure is documented below.
     * 
     */
    @Import(name="inventories")
    private @Nullable Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArgs>> inventories;

    /**
     * @return List of inventories to select VMs.
     * A VM is selected if its inventory data matches at least one of the
     * following inventories.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArgs>>> inventories() {
        return Optional.ofNullable(this.inventories);
    }

    private V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs() {}

    private V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs(V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs $) {
        this.all = $.all;
        this.exclusionLabels = $.exclusionLabels;
        this.inclusionLabels = $.inclusionLabels;
        this.inventories = $.inventories;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs();
        }

        public Builder(V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs defaults) {
            $ = new V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param all Target all VMs in the project. If true, no other criteria is
         * permitted.
         * 
         * @return builder
         * 
         */
        public Builder all(@Nullable Output<Boolean> all) {
            $.all = all;
            return this;
        }

        /**
         * @param all Target all VMs in the project. If true, no other criteria is
         * permitted.
         * 
         * @return builder
         * 
         */
        public Builder all(Boolean all) {
            return all(Output.of(all));
        }

        /**
         * @param exclusionLabels List of label sets used for VM exclusion.
         * If the list has more than one label set, the VM is excluded if any
         * of the label sets are applicable for the VM.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exclusionLabels(@Nullable Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterExclusionLabelArgs>> exclusionLabels) {
            $.exclusionLabels = exclusionLabels;
            return this;
        }

        /**
         * @param exclusionLabels List of label sets used for VM exclusion.
         * If the list has more than one label set, the VM is excluded if any
         * of the label sets are applicable for the VM.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exclusionLabels(List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterExclusionLabelArgs> exclusionLabels) {
            return exclusionLabels(Output.of(exclusionLabels));
        }

        /**
         * @param exclusionLabels List of label sets used for VM exclusion.
         * If the list has more than one label set, the VM is excluded if any
         * of the label sets are applicable for the VM.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exclusionLabels(V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterExclusionLabelArgs... exclusionLabels) {
            return exclusionLabels(List.of(exclusionLabels));
        }

        /**
         * @param inclusionLabels List of label sets used for VM inclusion.
         * If the list has more than one `LabelSet`, the VM is included if any
         * of the label sets are applicable for the VM.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inclusionLabels(@Nullable Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInclusionLabelArgs>> inclusionLabels) {
            $.inclusionLabels = inclusionLabels;
            return this;
        }

        /**
         * @param inclusionLabels List of label sets used for VM inclusion.
         * If the list has more than one `LabelSet`, the VM is included if any
         * of the label sets are applicable for the VM.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inclusionLabels(List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInclusionLabelArgs> inclusionLabels) {
            return inclusionLabels(Output.of(inclusionLabels));
        }

        /**
         * @param inclusionLabels List of label sets used for VM inclusion.
         * If the list has more than one `LabelSet`, the VM is included if any
         * of the label sets are applicable for the VM.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inclusionLabels(V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInclusionLabelArgs... inclusionLabels) {
            return inclusionLabels(List.of(inclusionLabels));
        }

        /**
         * @param inventories List of inventories to select VMs.
         * A VM is selected if its inventory data matches at least one of the
         * following inventories.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inventories(@Nullable Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArgs>> inventories) {
            $.inventories = inventories;
            return this;
        }

        /**
         * @param inventories List of inventories to select VMs.
         * A VM is selected if its inventory data matches at least one of the
         * following inventories.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inventories(List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArgs> inventories) {
            return inventories(Output.of(inventories));
        }

        /**
         * @param inventories List of inventories to select VMs.
         * A VM is selected if its inventory data matches at least one of the
         * following inventories.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inventories(V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArgs... inventories) {
            return inventories(List.of(inventories));
        }

        public V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs build() {
            return $;
        }
    }

}
