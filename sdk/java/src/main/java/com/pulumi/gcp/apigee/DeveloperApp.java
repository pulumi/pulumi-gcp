// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.apigee.DeveloperAppArgs;
import com.pulumi.gcp.apigee.inputs.DeveloperAppState;
import com.pulumi.gcp.apigee.outputs.DeveloperAppAttribute;
import com.pulumi.gcp.apigee.outputs.DeveloperAppCredential;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates an app associated with a developer.
 * This API associates the developer app with the specified API product
 * and auto-generates an API key for the app to use in calls to API proxies
 * inside that API product.
 * 
 * To get more information about DeveloperApp, see:
 * 
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.developers.apps)
 * * How-to Guides
 *     * [Creating a developer](https://cloud.google.com/apigee/docs/api-platform/publish/creating-apps-surface-your-api)
 * 
 * ## Example Usage
 * 
 * ### Apigee Developer App Basic
 * 
 * ### Apigee Developer App Basic Test
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.Project;
 * import com.pulumi.gcp.organizations.ProjectArgs;
 * import com.pulumi.time.sleep;
 * import com.pulumi.time.sleepArgs;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.gcp.apigee.Organization;
 * import com.pulumi.gcp.apigee.OrganizationArgs;
 * import com.pulumi.gcp.apigee.Instance;
 * import com.pulumi.gcp.apigee.InstanceArgs;
 * import com.pulumi.gcp.apigee.ApiProduct;
 * import com.pulumi.gcp.apigee.ApiProductArgs;
 * import com.pulumi.gcp.apigee.Developer;
 * import com.pulumi.gcp.apigee.DeveloperArgs;
 * import com.pulumi.gcp.apigee.DeveloperApp;
 * import com.pulumi.gcp.apigee.DeveloperAppArgs;
 * import com.pulumi.gcp.apigee.inputs.DeveloperAppAttributeArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var project = new Project("project", ProjectArgs.builder()
 *             .projectId("prj")
 *             .name("prj")
 *             .orgId("123456789")
 *             .billingAccount("000000-0000000-0000000-000000")
 *             .deletionPolicy("DELETE")
 *             .build());
 * 
 *         var wait60Seconds = new Sleep("wait60Seconds", SleepArgs.builder()
 *             .createDuration("60s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(List.of(project))
 *                 .build());
 * 
 *         var apigee = new Service("apigee", ServiceArgs.builder()
 *             .project(project.projectId())
 *             .service("apigee.googleapis.com")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(wait60Seconds)
 *                 .build());
 * 
 *         var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
 *             .analyticsRegion("us-central1")
 *             .projectId(project.projectId())
 *             .disableVpcPeering(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigee)
 *                 .build());
 * 
 *         var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
 *             .name("instance")
 *             .location("us-central1")
 *             .orgId(apigeeOrg.id())
 *             .build());
 * 
 *         var apiProduct = new ApiProduct("apiProduct", ApiProductArgs.builder()
 *             .name("sample-api")
 *             .orgId(apigeeOrg.id())
 *             .displayName("A sample API Product")
 *             .approvalType("auto")
 *             .scopes(            
 *                 "read:weather",
 *                 "write:reports",
 *                 "write:files")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigeeInstance)
 *                 .build());
 * 
 *         var developer = new Developer("developer", DeveloperArgs.builder()
 *             .email("john.doe}{@literal @}{@code acme.com")
 *             .firstName("John")
 *             .lastName("Doe")
 *             .userName("john.doe")
 *             .orgId(apigeeOrg.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigeeInstance)
 *                 .build());
 * 
 *         var apigeeDeveloperApp = new DeveloperApp("apigeeDeveloperApp", DeveloperAppArgs.builder()
 *             .name("sample-app")
 *             .appFamily("default")
 *             .developerEmail(developer.email())
 *             .orgId(apigeeOrg.id())
 *             .callbackUrl("https://example-call.url")
 *             .keyExpiresIn("-1")
 *             .status("approved")
 *             .apiProducts(apiProduct.name())
 *             .scopes(apiProduct.scopes())
 *             .attributes(DeveloperAppAttributeArgs.builder()
 *                 .name("sample_name")
 *                 .value("sample_value")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * DeveloperApp can be imported using any of these accepted formats:
 * 
 * * `{{org_id}}/developers/{{developer_email}}/apps/{{name}}`
 * 
 * * `{{org_id}}/{{developer_email}}/{{name}}`
 * 
 * When using the `pulumi import` command, DeveloperApp can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:apigee/developerApp:DeveloperApp default {{org_id}}/developers/{{developer_email}}/apps/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:apigee/developerApp:DeveloperApp default {{org_id}}/{{developer_email}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:apigee/developerApp:DeveloperApp")
public class DeveloperApp extends com.pulumi.resources.CustomResource {
    /**
     * List of API products associated with the developer app.
     * 
     */
    @Export(name="apiProducts", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> apiProducts;

    /**
     * @return List of API products associated with the developer app.
     * 
     */
    public Output<Optional<List<String>>> apiProducts() {
        return Codegen.optional(this.apiProducts);
    }
    /**
     * Developer app family.
     * 
     */
    @Export(name="appFamily", refs={String.class}, tree="[0]")
    private Output<String> appFamily;

    /**
     * @return Developer app family.
     * 
     */
    public Output<String> appFamily() {
        return this.appFamily;
    }
    /**
     * ID of the developer app. This ID is not user specified but is
     * automatically generated on app creation. appId is a UUID.
     * 
     */
    @Export(name="appId", refs={String.class}, tree="[0]")
    private Output<String> appId;

    /**
     * @return ID of the developer app. This ID is not user specified but is
     * automatically generated on app creation. appId is a UUID.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }
    /**
     * Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     * 
     */
    @Export(name="attributes", refs={List.class,DeveloperAppAttribute.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DeveloperAppAttribute>> attributes;

    /**
     * @return Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<DeveloperAppAttribute>>> attributes() {
        return Codegen.optional(this.attributes);
    }
    /**
     * Callback URL used by OAuth 2.0 authorization servers to communicate
     * authorization codes back to developer apps.
     * 
     */
    @Export(name="callbackUrl", refs={String.class}, tree="[0]")
    private Output<String> callbackUrl;

    /**
     * @return Callback URL used by OAuth 2.0 authorization servers to communicate
     * authorization codes back to developer apps.
     * 
     */
    public Output<String> callbackUrl() {
        return this.callbackUrl;
    }
    /**
     * Time at which the developer was created in milliseconds since epoch.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return Time at which the developer was created in milliseconds since epoch.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Output only. Set of credentials for the developer app consisting of
     * the consumer key/secret pairs associated with the API products.
     * Structure is documented below.
     * 
     */
    @Export(name="credentials", refs={List.class,DeveloperAppCredential.class}, tree="[0,1]")
    private Output<List<DeveloperAppCredential>> credentials;

    /**
     * @return Output only. Set of credentials for the developer app consisting of
     * the consumer key/secret pairs associated with the API products.
     * Structure is documented below.
     * 
     */
    public Output<List<DeveloperAppCredential>> credentials() {
        return this.credentials;
    }
    /**
     * Email address of the developer.
     * This value is used to uniquely identify the developer in Apigee hybrid.
     * Note that the email address has to be in lowercase only.
     * 
     */
    @Export(name="developerEmail", refs={String.class}, tree="[0]")
    private Output<String> developerEmail;

    /**
     * @return Email address of the developer.
     * This value is used to uniquely identify the developer in Apigee hybrid.
     * Note that the email address has to be in lowercase only.
     * 
     */
    public Output<String> developerEmail() {
        return this.developerEmail;
    }
    /**
     * ID of the developer.
     * 
     */
    @Export(name="developerId", refs={String.class}, tree="[0]")
    private Output<String> developerId;

    /**
     * @return ID of the developer.
     * 
     */
    public Output<String> developerId() {
        return this.developerId;
    }
    /**
     * Expiration time, in milliseconds, for the consumer key that is generated
     * for the developer app. If not set or left to the default value of -1,
     * the API key never expires. The expiration time can&#39;t be updated after it is set.
     * 
     */
    @Export(name="keyExpiresIn", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> keyExpiresIn;

    /**
     * @return Expiration time, in milliseconds, for the consumer key that is generated
     * for the developer app. If not set or left to the default value of -1,
     * the API key never expires. The expiration time can&#39;t be updated after it is set.
     * 
     */
    public Output<Optional<String>> keyExpiresIn() {
        return Codegen.optional(this.keyExpiresIn);
    }
    /**
     * Time at which the developer was last modified in milliseconds since epoch.
     * 
     */
    @Export(name="lastModifiedAt", refs={String.class}, tree="[0]")
    private Output<String> lastModifiedAt;

    /**
     * @return Time at which the developer was last modified in milliseconds since epoch.
     * 
     */
    public Output<String> lastModifiedAt() {
        return this.lastModifiedAt;
    }
    /**
     * Name of the developer app.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the developer app.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output<String> orgId;

    /**
     * @return The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * Scopes to apply to the developer app.
     * The specified scopes must already exist for the API product that
     * you associate with the developer app.
     * 
     */
    @Export(name="scopes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> scopes;

    /**
     * @return Scopes to apply to the developer app.
     * The specified scopes must already exist for the API product that
     * you associate with the developer app.
     * 
     */
    public Output<Optional<List<String>>> scopes() {
        return Codegen.optional(this.scopes);
    }
    /**
     * Status of the credential. Valid values include approved or revoked.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the credential. Valid values include approved or revoked.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DeveloperApp(java.lang.String name) {
        this(name, DeveloperAppArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DeveloperApp(java.lang.String name, DeveloperAppArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DeveloperApp(java.lang.String name, DeveloperAppArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/developerApp:DeveloperApp", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DeveloperApp(java.lang.String name, Output<java.lang.String> id, @Nullable DeveloperAppState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/developerApp:DeveloperApp", name, state, makeResourceOptions(options, id), false);
    }

    private static DeveloperAppArgs makeArgs(DeveloperAppArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DeveloperAppArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DeveloperApp get(java.lang.String name, Output<java.lang.String> id, @Nullable DeveloperAppState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DeveloperApp(name, id, state, options);
    }
}
