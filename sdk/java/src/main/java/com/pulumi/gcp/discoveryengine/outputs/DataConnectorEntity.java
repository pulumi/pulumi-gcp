// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataConnectorEntity {
    /**
     * @return (Output)
     * The full resource name of the associated data store for the source
     * entity.
     * Format: `projects/*&#47;locations/*&#47;collections/*&#47;dataStores/*`.
     * When the connector is initialized by the DataConnectorService.SetUpDataConnector
     * method, a DataStore is automatically created for each source entity.
     * 
     */
    private @Nullable String dataStore;
    /**
     * @return The name of the entity. Supported values by data source:
     * * Salesforce: `Lead`, `Opportunity`, `Contact`, `Account`, `Case`, `Contract`, `Campaign`
     * * Jira: project, issue, attachment, comment, worklog
     * * Confluence: `Content`, `Space`
     * 
     */
    private @Nullable String entityName;
    /**
     * @return Attributes for indexing.
     * Key: Field name.
     * Value: The key property to map a field to, such as `title`, and
     * `description`. Supported key properties:
     * 
     */
    private @Nullable Map<String,String> keyPropertyMappings;
    /**
     * @return The parameters for the entity to facilitate data ingestion.
     * 
     */
    private @Nullable String params;

    private DataConnectorEntity() {}
    /**
     * @return (Output)
     * The full resource name of the associated data store for the source
     * entity.
     * Format: `projects/*&#47;locations/*&#47;collections/*&#47;dataStores/*`.
     * When the connector is initialized by the DataConnectorService.SetUpDataConnector
     * method, a DataStore is automatically created for each source entity.
     * 
     */
    public Optional<String> dataStore() {
        return Optional.ofNullable(this.dataStore);
    }
    /**
     * @return The name of the entity. Supported values by data source:
     * * Salesforce: `Lead`, `Opportunity`, `Contact`, `Account`, `Case`, `Contract`, `Campaign`
     * * Jira: project, issue, attachment, comment, worklog
     * * Confluence: `Content`, `Space`
     * 
     */
    public Optional<String> entityName() {
        return Optional.ofNullable(this.entityName);
    }
    /**
     * @return Attributes for indexing.
     * Key: Field name.
     * Value: The key property to map a field to, such as `title`, and
     * `description`. Supported key properties:
     * 
     */
    public Map<String,String> keyPropertyMappings() {
        return this.keyPropertyMappings == null ? Map.of() : this.keyPropertyMappings;
    }
    /**
     * @return The parameters for the entity to facilitate data ingestion.
     * 
     */
    public Optional<String> params() {
        return Optional.ofNullable(this.params);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataConnectorEntity defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dataStore;
        private @Nullable String entityName;
        private @Nullable Map<String,String> keyPropertyMappings;
        private @Nullable String params;
        public Builder() {}
        public Builder(DataConnectorEntity defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataStore = defaults.dataStore;
    	      this.entityName = defaults.entityName;
    	      this.keyPropertyMappings = defaults.keyPropertyMappings;
    	      this.params = defaults.params;
        }

        @CustomType.Setter
        public Builder dataStore(@Nullable String dataStore) {

            this.dataStore = dataStore;
            return this;
        }
        @CustomType.Setter
        public Builder entityName(@Nullable String entityName) {

            this.entityName = entityName;
            return this;
        }
        @CustomType.Setter
        public Builder keyPropertyMappings(@Nullable Map<String,String> keyPropertyMappings) {

            this.keyPropertyMappings = keyPropertyMappings;
            return this;
        }
        @CustomType.Setter
        public Builder params(@Nullable String params) {

            this.params = params;
            return this;
        }
        public DataConnectorEntity build() {
            final var _resultValue = new DataConnectorEntity();
            _resultValue.dataStore = dataStore;
            _resultValue.entityName = entityName;
            _resultValue.keyPropertyMappings = keyPropertyMappings;
            _resultValue.params = params;
            return _resultValue;
        }
    }
}
