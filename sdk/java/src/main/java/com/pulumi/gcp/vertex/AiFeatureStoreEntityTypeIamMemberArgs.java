// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeIamMemberConditionArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiFeatureStoreEntityTypeIamMemberArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiFeatureStoreEntityTypeIamMemberArgs Empty = new AiFeatureStoreEntityTypeIamMemberArgs();

    @Import(name="condition")
    private @Nullable Output<AiFeatureStoreEntityTypeIamMemberConditionArgs> condition;

    public Optional<Output<AiFeatureStoreEntityTypeIamMemberConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="entitytype", required=true)
    private Output<String> entitytype;

    /**
     * @return Used to find the parent resource to bind the IAM policy to
     * 
     */
    public Output<String> entitytype() {
        return this.entitytype;
    }

    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="featurestore", required=true)
    private Output<String> featurestore;

    /**
     * @return The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
     * 
     */
    public Output<String> featurestore() {
        return this.featurestore;
    }

    @Import(name="member", required=true)
    private Output<String> member;

    public Output<String> member() {
        return this.member;
    }

    /**
     * The role that should be applied. Only one
     * `gcp.vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return The role that should be applied. Only one
     * `gcp.vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    private AiFeatureStoreEntityTypeIamMemberArgs() {}

    private AiFeatureStoreEntityTypeIamMemberArgs(AiFeatureStoreEntityTypeIamMemberArgs $) {
        this.condition = $.condition;
        this.entitytype = $.entitytype;
        this.featurestore = $.featurestore;
        this.member = $.member;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiFeatureStoreEntityTypeIamMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiFeatureStoreEntityTypeIamMemberArgs $;

        public Builder() {
            $ = new AiFeatureStoreEntityTypeIamMemberArgs();
        }

        public Builder(AiFeatureStoreEntityTypeIamMemberArgs defaults) {
            $ = new AiFeatureStoreEntityTypeIamMemberArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<AiFeatureStoreEntityTypeIamMemberConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(AiFeatureStoreEntityTypeIamMemberConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param entitytype Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder entitytype(Output<String> entitytype) {
            $.entitytype = entitytype;
            return this;
        }

        /**
         * @param entitytype Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder entitytype(String entitytype) {
            return entitytype(Output.of(entitytype));
        }

        /**
         * @param featurestore The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder featurestore(Output<String> featurestore) {
            $.featurestore = featurestore;
            return this;
        }

        /**
         * @param featurestore The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder featurestore(String featurestore) {
            return featurestore(Output.of(featurestore));
        }

        public Builder member(Output<String> member) {
            $.member = member;
            return this;
        }

        public Builder member(String member) {
            return member(Output.of(member));
        }

        /**
         * @param role The role that should be applied. Only one
         * `gcp.vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
         * `[projects|organizations]/{parent-name}/roles/{role-name}`.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role that should be applied. Only one
         * `gcp.vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
         * `[projects|organizations]/{parent-name}/roles/{role-name}`.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public AiFeatureStoreEntityTypeIamMemberArgs build() {
            $.entitytype = Objects.requireNonNull($.entitytype, "expected parameter 'entitytype' to be non-null");
            $.featurestore = Objects.requireNonNull($.featurestore, "expected parameter 'featurestore' to be non-null");
            $.member = Objects.requireNonNull($.member, "expected parameter 'member' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            return $;
        }
    }

}
