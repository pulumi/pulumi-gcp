// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatascanDataDiscoverySpecStorageConfigCsvOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatascanDataDiscoverySpecStorageConfigCsvOptionsArgs Empty = new DatascanDataDiscoverySpecStorageConfigCsvOptionsArgs();

    /**
     * The delimiter that is used to separate values. The default is `,` (comma).
     * 
     */
    @Import(name="delimiter")
    private @Nullable Output<String> delimiter;

    /**
     * @return The delimiter that is used to separate values. The default is `,` (comma).
     * 
     */
    public Optional<Output<String>> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }

    /**
     * The character encoding of the data. The default is UTF-8.
     * 
     */
    @Import(name="encoding")
    private @Nullable Output<String> encoding;

    /**
     * @return The character encoding of the data. The default is UTF-8.
     * 
     */
    public Optional<Output<String>> encoding() {
        return Optional.ofNullable(this.encoding);
    }

    /**
     * The number of rows to interpret as header rows that should be skipped when reading data rows.
     * 
     */
    @Import(name="headerRows")
    private @Nullable Output<Integer> headerRows;

    /**
     * @return The number of rows to interpret as header rows that should be skipped when reading data rows.
     * 
     */
    public Optional<Output<Integer>> headerRows() {
        return Optional.ofNullable(this.headerRows);
    }

    /**
     * The character used to quote column values. Accepts `&#34;` (double quotation mark) or `&#39;` (single quotation mark). If unspecified, defaults to `&#34;` (double quotation mark).
     * 
     */
    @Import(name="quote")
    private @Nullable Output<String> quote;

    /**
     * @return The character used to quote column values. Accepts `&#34;` (double quotation mark) or `&#39;` (single quotation mark). If unspecified, defaults to `&#34;` (double quotation mark).
     * 
     */
    public Optional<Output<String>> quote() {
        return Optional.ofNullable(this.quote);
    }

    /**
     * Whether to disable the inference of data types for CSV data. If true, all columns are registered as strings.
     * 
     */
    @Import(name="typeInferenceDisabled")
    private @Nullable Output<Boolean> typeInferenceDisabled;

    /**
     * @return Whether to disable the inference of data types for CSV data. If true, all columns are registered as strings.
     * 
     */
    public Optional<Output<Boolean>> typeInferenceDisabled() {
        return Optional.ofNullable(this.typeInferenceDisabled);
    }

    private DatascanDataDiscoverySpecStorageConfigCsvOptionsArgs() {}

    private DatascanDataDiscoverySpecStorageConfigCsvOptionsArgs(DatascanDataDiscoverySpecStorageConfigCsvOptionsArgs $) {
        this.delimiter = $.delimiter;
        this.encoding = $.encoding;
        this.headerRows = $.headerRows;
        this.quote = $.quote;
        this.typeInferenceDisabled = $.typeInferenceDisabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatascanDataDiscoverySpecStorageConfigCsvOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatascanDataDiscoverySpecStorageConfigCsvOptionsArgs $;

        public Builder() {
            $ = new DatascanDataDiscoverySpecStorageConfigCsvOptionsArgs();
        }

        public Builder(DatascanDataDiscoverySpecStorageConfigCsvOptionsArgs defaults) {
            $ = new DatascanDataDiscoverySpecStorageConfigCsvOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delimiter The delimiter that is used to separate values. The default is `,` (comma).
         * 
         * @return builder
         * 
         */
        public Builder delimiter(@Nullable Output<String> delimiter) {
            $.delimiter = delimiter;
            return this;
        }

        /**
         * @param delimiter The delimiter that is used to separate values. The default is `,` (comma).
         * 
         * @return builder
         * 
         */
        public Builder delimiter(String delimiter) {
            return delimiter(Output.of(delimiter));
        }

        /**
         * @param encoding The character encoding of the data. The default is UTF-8.
         * 
         * @return builder
         * 
         */
        public Builder encoding(@Nullable Output<String> encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param encoding The character encoding of the data. The default is UTF-8.
         * 
         * @return builder
         * 
         */
        public Builder encoding(String encoding) {
            return encoding(Output.of(encoding));
        }

        /**
         * @param headerRows The number of rows to interpret as header rows that should be skipped when reading data rows.
         * 
         * @return builder
         * 
         */
        public Builder headerRows(@Nullable Output<Integer> headerRows) {
            $.headerRows = headerRows;
            return this;
        }

        /**
         * @param headerRows The number of rows to interpret as header rows that should be skipped when reading data rows.
         * 
         * @return builder
         * 
         */
        public Builder headerRows(Integer headerRows) {
            return headerRows(Output.of(headerRows));
        }

        /**
         * @param quote The character used to quote column values. Accepts `&#34;` (double quotation mark) or `&#39;` (single quotation mark). If unspecified, defaults to `&#34;` (double quotation mark).
         * 
         * @return builder
         * 
         */
        public Builder quote(@Nullable Output<String> quote) {
            $.quote = quote;
            return this;
        }

        /**
         * @param quote The character used to quote column values. Accepts `&#34;` (double quotation mark) or `&#39;` (single quotation mark). If unspecified, defaults to `&#34;` (double quotation mark).
         * 
         * @return builder
         * 
         */
        public Builder quote(String quote) {
            return quote(Output.of(quote));
        }

        /**
         * @param typeInferenceDisabled Whether to disable the inference of data types for CSV data. If true, all columns are registered as strings.
         * 
         * @return builder
         * 
         */
        public Builder typeInferenceDisabled(@Nullable Output<Boolean> typeInferenceDisabled) {
            $.typeInferenceDisabled = typeInferenceDisabled;
            return this;
        }

        /**
         * @param typeInferenceDisabled Whether to disable the inference of data types for CSV data. If true, all columns are registered as strings.
         * 
         * @return builder
         * 
         */
        public Builder typeInferenceDisabled(Boolean typeInferenceDisabled) {
            return typeInferenceDisabled(Output.of(typeInferenceDisabled));
        }

        public DatascanDataDiscoverySpecStorageConfigCsvOptionsArgs build() {
            return $;
        }
    }

}
