// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.serviceaccount;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenPlainArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenPlainArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountJwtArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountJwtPlainArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountKeyArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountKeyPlainArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountPlainArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetIamPolicyArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetIamPolicyPlainArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetSArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetSPlainArgs;
import com.pulumi.gcp.serviceaccount.outputs.GetAccountAccessTokenResult;
import com.pulumi.gcp.serviceaccount.outputs.GetAccountIdTokenResult;
import com.pulumi.gcp.serviceaccount.outputs.GetAccountJwtResult;
import com.pulumi.gcp.serviceaccount.outputs.GetAccountKeyResult;
import com.pulumi.gcp.serviceaccount.outputs.GetAccountResult;
import com.pulumi.gcp.serviceaccount.outputs.GetIamPolicyResult;
import com.pulumi.gcp.serviceaccount.outputs.GetSResult;
import java.util.concurrent.CompletableFuture;

public final class ServiceaccountFunctions {
    /**
     * Get the service account from a project. For more information see
     * the official [API](https://cloud.google.com/compute/docs/access/service-accounts) documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var objectViewer = ServiceaccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId("object-viewer")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Save Key In Kubernetes Secret
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
     * import com.pulumi.gcp.serviceaccount.Key;
     * import com.pulumi.gcp.serviceaccount.KeyArgs;
     * import com.pulumi.kubernetes.core_v1.Secret;
     * import com.pulumi.kubernetes.core_v1.SecretArgs;
     * import com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myaccount = ServiceaccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId("myaccount-id")
     *             .build());
     * 
     *         var mykey = new Key("mykey", KeyArgs.builder()
     *             .serviceAccountId(myaccount.applyValue(getAccountResult -> getAccountResult.name()))
     *             .build());
     * 
     *         var google_application_credentials = new Secret("google-application-credentials", SecretArgs.builder()
     *             .metadata(ObjectMetaArgs.builder()
     *                 .name("google-application-credentials")
     *                 .build())
     *             .data(Map.of("json", StdFunctions.base64decode().applyValue(invoke -> invoke.result())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccountResult> getAccount(GetAccountArgs args) {
        return getAccount(args, InvokeOptions.Empty);
    }
    /**
     * Get the service account from a project. For more information see
     * the official [API](https://cloud.google.com/compute/docs/access/service-accounts) documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var objectViewer = ServiceaccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId("object-viewer")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Save Key In Kubernetes Secret
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
     * import com.pulumi.gcp.serviceaccount.Key;
     * import com.pulumi.gcp.serviceaccount.KeyArgs;
     * import com.pulumi.kubernetes.core_v1.Secret;
     * import com.pulumi.kubernetes.core_v1.SecretArgs;
     * import com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myaccount = ServiceaccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId("myaccount-id")
     *             .build());
     * 
     *         var mykey = new Key("mykey", KeyArgs.builder()
     *             .serviceAccountId(myaccount.applyValue(getAccountResult -> getAccountResult.name()))
     *             .build());
     * 
     *         var google_application_credentials = new Secret("google-application-credentials", SecretArgs.builder()
     *             .metadata(ObjectMetaArgs.builder()
     *                 .name("google-application-credentials")
     *                 .build())
     *             .data(Map.of("json", StdFunctions.base64decode().applyValue(invoke -> invoke.result())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain(GetAccountPlainArgs args) {
        return getAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get the service account from a project. For more information see
     * the official [API](https://cloud.google.com/compute/docs/access/service-accounts) documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var objectViewer = ServiceaccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId("object-viewer")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Save Key In Kubernetes Secret
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
     * import com.pulumi.gcp.serviceaccount.Key;
     * import com.pulumi.gcp.serviceaccount.KeyArgs;
     * import com.pulumi.kubernetes.core_v1.Secret;
     * import com.pulumi.kubernetes.core_v1.SecretArgs;
     * import com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myaccount = ServiceaccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId("myaccount-id")
     *             .build());
     * 
     *         var mykey = new Key("mykey", KeyArgs.builder()
     *             .serviceAccountId(myaccount.applyValue(getAccountResult -> getAccountResult.name()))
     *             .build());
     * 
     *         var google_application_credentials = new Secret("google-application-credentials", SecretArgs.builder()
     *             .metadata(ObjectMetaArgs.builder()
     *                 .name("google-application-credentials")
     *                 .build())
     *             .data(Map.of("json", StdFunctions.base64decode().applyValue(invoke -> invoke.result())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccountResult> getAccount(GetAccountArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the service account from a project. For more information see
     * the official [API](https://cloud.google.com/compute/docs/access/service-accounts) documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var objectViewer = ServiceaccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId("object-viewer")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Save Key In Kubernetes Secret
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
     * import com.pulumi.gcp.serviceaccount.Key;
     * import com.pulumi.gcp.serviceaccount.KeyArgs;
     * import com.pulumi.kubernetes.core_v1.Secret;
     * import com.pulumi.kubernetes.core_v1.SecretArgs;
     * import com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myaccount = ServiceaccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId("myaccount-id")
     *             .build());
     * 
     *         var mykey = new Key("mykey", KeyArgs.builder()
     *             .serviceAccountId(myaccount.applyValue(getAccountResult -> getAccountResult.name()))
     *             .build());
     * 
     *         var google_application_credentials = new Secret("google-application-credentials", SecretArgs.builder()
     *             .metadata(ObjectMetaArgs.builder()
     *                 .name("google-application-credentials")
     *                 .build())
     *             .data(Map.of("json", StdFunctions.base64decode().applyValue(invoke -> invoke.result())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccountResult> getAccount(GetAccountArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the service account from a project. For more information see
     * the official [API](https://cloud.google.com/compute/docs/access/service-accounts) documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var objectViewer = ServiceaccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId("object-viewer")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Save Key In Kubernetes Secret
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
     * import com.pulumi.gcp.serviceaccount.Key;
     * import com.pulumi.gcp.serviceaccount.KeyArgs;
     * import com.pulumi.kubernetes.core_v1.Secret;
     * import com.pulumi.kubernetes.core_v1.SecretArgs;
     * import com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myaccount = ServiceaccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId("myaccount-id")
     *             .build());
     * 
     *         var mykey = new Key("mykey", KeyArgs.builder()
     *             .serviceAccountId(myaccount.applyValue(getAccountResult -> getAccountResult.name()))
     *             .build());
     * 
     *         var google_application_credentials = new Secret("google-application-credentials", SecretArgs.builder()
     *             .metadata(ObjectMetaArgs.builder()
     *                 .name("google-application-credentials")
     *                 .build())
     *             .data(Map.of("json", StdFunctions.base64decode().applyValue(invoke -> invoke.result())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain(GetAccountPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceaccount/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a google `oauth2` `access_token` for a different service account than the one initially running the script.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials) as well as [iamcredentials.generateAccessToken()](https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateAccessToken)
     * 
     * ## Example Usage
     * 
     * To allow `service_A` to impersonate `service_B`, grant the [Service Account Token Creator](https://cloud.google.com/iam/docs/service-accounts#the_service_account_token_creator_role) on B to A.
     * 
     * In the IAM policy below, `service_A` is given the Token Creator role impersonate `service_B`
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.IAMBinding;
     * import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         var token_creator_iam = new IAMBinding("token-creator-iam", IAMBindingArgs.builder()
     *             .serviceAccountId("projects/-/serviceAccounts/service_B}{@literal @}{@code projectB.iam.gserviceaccount.com")
     *             .role("roles/iam.serviceAccountTokenCreator")
     *             .members("serviceAccount:service_A}{@literal @}{@code projectA.iam.gserviceaccount.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Once the IAM permissions are set, you can apply the new token to a provider bootstrapped with it.  Any resources that references the aliased provider will run as the new identity.
     * 
     * In the example below, `gcp.organizations.Project` will run as `service_B`.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.organizations.OrganizationsFunctions;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var default = OrganizationsFunctions.getClientConfig();
     * 
     *         final var defaultGetAccountAccessToken = ServiceaccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount("service_B}{@literal @}{@code projectB.iam.gserviceaccount.com")
     *             .scopes(            
     *                 "userinfo-email",
     *                 "cloud-platform")
     *             .lifetime("300s")
     *             .build());
     * 
     *         final var me = OrganizationsFunctions.getClientOpenIdUserInfo();
     * 
     *         ctx.export("target-email", me.applyValue(getClientOpenIdUserInfoResult -> getClientOpenIdUserInfoResult.email()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; *Note*: the generated token is non-refreshable and can have a maximum `lifetime` of `3600` seconds.
     * 
     */
    public static Output<GetAccountAccessTokenResult> getAccountAccessToken(GetAccountAccessTokenArgs args) {
        return getAccountAccessToken(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides a google `oauth2` `access_token` for a different service account than the one initially running the script.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials) as well as [iamcredentials.generateAccessToken()](https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateAccessToken)
     * 
     * ## Example Usage
     * 
     * To allow `service_A` to impersonate `service_B`, grant the [Service Account Token Creator](https://cloud.google.com/iam/docs/service-accounts#the_service_account_token_creator_role) on B to A.
     * 
     * In the IAM policy below, `service_A` is given the Token Creator role impersonate `service_B`
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.IAMBinding;
     * import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         var token_creator_iam = new IAMBinding("token-creator-iam", IAMBindingArgs.builder()
     *             .serviceAccountId("projects/-/serviceAccounts/service_B}{@literal @}{@code projectB.iam.gserviceaccount.com")
     *             .role("roles/iam.serviceAccountTokenCreator")
     *             .members("serviceAccount:service_A}{@literal @}{@code projectA.iam.gserviceaccount.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Once the IAM permissions are set, you can apply the new token to a provider bootstrapped with it.  Any resources that references the aliased provider will run as the new identity.
     * 
     * In the example below, `gcp.organizations.Project` will run as `service_B`.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.organizations.OrganizationsFunctions;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var default = OrganizationsFunctions.getClientConfig();
     * 
     *         final var defaultGetAccountAccessToken = ServiceaccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount("service_B}{@literal @}{@code projectB.iam.gserviceaccount.com")
     *             .scopes(            
     *                 "userinfo-email",
     *                 "cloud-platform")
     *             .lifetime("300s")
     *             .build());
     * 
     *         final var me = OrganizationsFunctions.getClientOpenIdUserInfo();
     * 
     *         ctx.export("target-email", me.applyValue(getClientOpenIdUserInfoResult -> getClientOpenIdUserInfoResult.email()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; *Note*: the generated token is non-refreshable and can have a maximum `lifetime` of `3600` seconds.
     * 
     */
    public static CompletableFuture<GetAccountAccessTokenResult> getAccountAccessTokenPlain(GetAccountAccessTokenPlainArgs args) {
        return getAccountAccessTokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides a google `oauth2` `access_token` for a different service account than the one initially running the script.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials) as well as [iamcredentials.generateAccessToken()](https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateAccessToken)
     * 
     * ## Example Usage
     * 
     * To allow `service_A` to impersonate `service_B`, grant the [Service Account Token Creator](https://cloud.google.com/iam/docs/service-accounts#the_service_account_token_creator_role) on B to A.
     * 
     * In the IAM policy below, `service_A` is given the Token Creator role impersonate `service_B`
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.IAMBinding;
     * import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         var token_creator_iam = new IAMBinding("token-creator-iam", IAMBindingArgs.builder()
     *             .serviceAccountId("projects/-/serviceAccounts/service_B}{@literal @}{@code projectB.iam.gserviceaccount.com")
     *             .role("roles/iam.serviceAccountTokenCreator")
     *             .members("serviceAccount:service_A}{@literal @}{@code projectA.iam.gserviceaccount.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Once the IAM permissions are set, you can apply the new token to a provider bootstrapped with it.  Any resources that references the aliased provider will run as the new identity.
     * 
     * In the example below, `gcp.organizations.Project` will run as `service_B`.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.organizations.OrganizationsFunctions;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var default = OrganizationsFunctions.getClientConfig();
     * 
     *         final var defaultGetAccountAccessToken = ServiceaccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount("service_B}{@literal @}{@code projectB.iam.gserviceaccount.com")
     *             .scopes(            
     *                 "userinfo-email",
     *                 "cloud-platform")
     *             .lifetime("300s")
     *             .build());
     * 
     *         final var me = OrganizationsFunctions.getClientOpenIdUserInfo();
     * 
     *         ctx.export("target-email", me.applyValue(getClientOpenIdUserInfoResult -> getClientOpenIdUserInfoResult.email()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; *Note*: the generated token is non-refreshable and can have a maximum `lifetime` of `3600` seconds.
     * 
     */
    public static Output<GetAccountAccessTokenResult> getAccountAccessToken(GetAccountAccessTokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getAccountAccessToken:getAccountAccessToken", TypeShape.of(GetAccountAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a google `oauth2` `access_token` for a different service account than the one initially running the script.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials) as well as [iamcredentials.generateAccessToken()](https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateAccessToken)
     * 
     * ## Example Usage
     * 
     * To allow `service_A` to impersonate `service_B`, grant the [Service Account Token Creator](https://cloud.google.com/iam/docs/service-accounts#the_service_account_token_creator_role) on B to A.
     * 
     * In the IAM policy below, `service_A` is given the Token Creator role impersonate `service_B`
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.IAMBinding;
     * import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         var token_creator_iam = new IAMBinding("token-creator-iam", IAMBindingArgs.builder()
     *             .serviceAccountId("projects/-/serviceAccounts/service_B}{@literal @}{@code projectB.iam.gserviceaccount.com")
     *             .role("roles/iam.serviceAccountTokenCreator")
     *             .members("serviceAccount:service_A}{@literal @}{@code projectA.iam.gserviceaccount.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Once the IAM permissions are set, you can apply the new token to a provider bootstrapped with it.  Any resources that references the aliased provider will run as the new identity.
     * 
     * In the example below, `gcp.organizations.Project` will run as `service_B`.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.organizations.OrganizationsFunctions;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var default = OrganizationsFunctions.getClientConfig();
     * 
     *         final var defaultGetAccountAccessToken = ServiceaccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount("service_B}{@literal @}{@code projectB.iam.gserviceaccount.com")
     *             .scopes(            
     *                 "userinfo-email",
     *                 "cloud-platform")
     *             .lifetime("300s")
     *             .build());
     * 
     *         final var me = OrganizationsFunctions.getClientOpenIdUserInfo();
     * 
     *         ctx.export("target-email", me.applyValue(getClientOpenIdUserInfoResult -> getClientOpenIdUserInfoResult.email()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; *Note*: the generated token is non-refreshable and can have a maximum `lifetime` of `3600` seconds.
     * 
     */
    public static Output<GetAccountAccessTokenResult> getAccountAccessToken(GetAccountAccessTokenArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getAccountAccessToken:getAccountAccessToken", TypeShape.of(GetAccountAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a google `oauth2` `access_token` for a different service account than the one initially running the script.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials) as well as [iamcredentials.generateAccessToken()](https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateAccessToken)
     * 
     * ## Example Usage
     * 
     * To allow `service_A` to impersonate `service_B`, grant the [Service Account Token Creator](https://cloud.google.com/iam/docs/service-accounts#the_service_account_token_creator_role) on B to A.
     * 
     * In the IAM policy below, `service_A` is given the Token Creator role impersonate `service_B`
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.IAMBinding;
     * import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         var token_creator_iam = new IAMBinding("token-creator-iam", IAMBindingArgs.builder()
     *             .serviceAccountId("projects/-/serviceAccounts/service_B}{@literal @}{@code projectB.iam.gserviceaccount.com")
     *             .role("roles/iam.serviceAccountTokenCreator")
     *             .members("serviceAccount:service_A}{@literal @}{@code projectA.iam.gserviceaccount.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Once the IAM permissions are set, you can apply the new token to a provider bootstrapped with it.  Any resources that references the aliased provider will run as the new identity.
     * 
     * In the example below, `gcp.organizations.Project` will run as `service_B`.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.organizations.OrganizationsFunctions;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var default = OrganizationsFunctions.getClientConfig();
     * 
     *         final var defaultGetAccountAccessToken = ServiceaccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount("service_B}{@literal @}{@code projectB.iam.gserviceaccount.com")
     *             .scopes(            
     *                 "userinfo-email",
     *                 "cloud-platform")
     *             .lifetime("300s")
     *             .build());
     * 
     *         final var me = OrganizationsFunctions.getClientOpenIdUserInfo();
     * 
     *         ctx.export("target-email", me.applyValue(getClientOpenIdUserInfoResult -> getClientOpenIdUserInfoResult.email()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; *Note*: the generated token is non-refreshable and can have a maximum `lifetime` of `3600` seconds.
     * 
     */
    public static CompletableFuture<GetAccountAccessTokenResult> getAccountAccessTokenPlain(GetAccountAccessTokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceaccount/getAccountAccessToken:getAccountAccessToken", TypeShape.of(GetAccountAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a Google OpenID Connect (`oidc`) `id_token`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
     * 
     * For more information see
     * [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
     * 
     * ## Example Usage
     * 
     * ### ServiceAccount JSON Credential File.
     *   `gcp.serviceaccount.getAccountIdToken` will use the configured provider credentials
     * 
     *   &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetAudience("https://foo.bar/")
     *             .build());
     * 
     *         ctx.export("oidcToken", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Service Account Impersonation.
     *   `gcp.serviceaccount.getAccountIdToken` will use background impersonated credentials provided by `gcp.serviceaccount.getAccountAccessToken`.
     * 
     *   Note: to use the following, you must grant `target_service_account` the
     *   `roles/iam.serviceAccountTokenCreator` role on itself.
     * 
     *   &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var impersonated = ServiceaccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .delegates()
     *             .scopes(            
     *                 "userinfo-email",
     *                 "cloud-platform")
     *             .lifetime("300s")
     *             .build());
     * 
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .delegates()
     *             .includeEmail(true)
     *             .targetAudience("https://foo.bar/")
     *             .build());
     * 
     *         ctx.export("oidcToken", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Invoking Cloud Run Endpoint
     * 
     *   The following configuration will invoke [Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service) endpoint where the service account for the provider has been granted `roles/run.invoker` role previously.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import com.pulumi.http.HttpFunctions;
     * import com.pulumi.http.inputs.GetHttpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetAudience("https://your.cloud.run.app/")
     *             .build());
     * 
     *         final var cloudrun = HttpFunctions.getHttp(GetHttpArgs.builder()
     *             .url("https://your.cloud.run.app/")
     *             .requestHeaders(Map.of("Authorization", String.format("Bearer %s", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()))))
     *             .build());
     * 
     *         ctx.export("cloudRunResponse", cloudrun.applyValue(getHttpResult -> getHttpResult.body()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccountIdTokenResult> getAccountIdToken(GetAccountIdTokenArgs args) {
        return getAccountIdToken(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides a Google OpenID Connect (`oidc`) `id_token`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
     * 
     * For more information see
     * [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
     * 
     * ## Example Usage
     * 
     * ### ServiceAccount JSON Credential File.
     *   `gcp.serviceaccount.getAccountIdToken` will use the configured provider credentials
     * 
     *   &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetAudience("https://foo.bar/")
     *             .build());
     * 
     *         ctx.export("oidcToken", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Service Account Impersonation.
     *   `gcp.serviceaccount.getAccountIdToken` will use background impersonated credentials provided by `gcp.serviceaccount.getAccountAccessToken`.
     * 
     *   Note: to use the following, you must grant `target_service_account` the
     *   `roles/iam.serviceAccountTokenCreator` role on itself.
     * 
     *   &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var impersonated = ServiceaccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .delegates()
     *             .scopes(            
     *                 "userinfo-email",
     *                 "cloud-platform")
     *             .lifetime("300s")
     *             .build());
     * 
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .delegates()
     *             .includeEmail(true)
     *             .targetAudience("https://foo.bar/")
     *             .build());
     * 
     *         ctx.export("oidcToken", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Invoking Cloud Run Endpoint
     * 
     *   The following configuration will invoke [Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service) endpoint where the service account for the provider has been granted `roles/run.invoker` role previously.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import com.pulumi.http.HttpFunctions;
     * import com.pulumi.http.inputs.GetHttpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetAudience("https://your.cloud.run.app/")
     *             .build());
     * 
     *         final var cloudrun = HttpFunctions.getHttp(GetHttpArgs.builder()
     *             .url("https://your.cloud.run.app/")
     *             .requestHeaders(Map.of("Authorization", String.format("Bearer %s", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()))))
     *             .build());
     * 
     *         ctx.export("cloudRunResponse", cloudrun.applyValue(getHttpResult -> getHttpResult.body()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccountIdTokenResult> getAccountIdTokenPlain(GetAccountIdTokenPlainArgs args) {
        return getAccountIdTokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides a Google OpenID Connect (`oidc`) `id_token`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
     * 
     * For more information see
     * [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
     * 
     * ## Example Usage
     * 
     * ### ServiceAccount JSON Credential File.
     *   `gcp.serviceaccount.getAccountIdToken` will use the configured provider credentials
     * 
     *   &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetAudience("https://foo.bar/")
     *             .build());
     * 
     *         ctx.export("oidcToken", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Service Account Impersonation.
     *   `gcp.serviceaccount.getAccountIdToken` will use background impersonated credentials provided by `gcp.serviceaccount.getAccountAccessToken`.
     * 
     *   Note: to use the following, you must grant `target_service_account` the
     *   `roles/iam.serviceAccountTokenCreator` role on itself.
     * 
     *   &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var impersonated = ServiceaccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .delegates()
     *             .scopes(            
     *                 "userinfo-email",
     *                 "cloud-platform")
     *             .lifetime("300s")
     *             .build());
     * 
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .delegates()
     *             .includeEmail(true)
     *             .targetAudience("https://foo.bar/")
     *             .build());
     * 
     *         ctx.export("oidcToken", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Invoking Cloud Run Endpoint
     * 
     *   The following configuration will invoke [Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service) endpoint where the service account for the provider has been granted `roles/run.invoker` role previously.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import com.pulumi.http.HttpFunctions;
     * import com.pulumi.http.inputs.GetHttpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetAudience("https://your.cloud.run.app/")
     *             .build());
     * 
     *         final var cloudrun = HttpFunctions.getHttp(GetHttpArgs.builder()
     *             .url("https://your.cloud.run.app/")
     *             .requestHeaders(Map.of("Authorization", String.format("Bearer %s", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()))))
     *             .build());
     * 
     *         ctx.export("cloudRunResponse", cloudrun.applyValue(getHttpResult -> getHttpResult.body()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccountIdTokenResult> getAccountIdToken(GetAccountIdTokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getAccountIdToken:getAccountIdToken", TypeShape.of(GetAccountIdTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a Google OpenID Connect (`oidc`) `id_token`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
     * 
     * For more information see
     * [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
     * 
     * ## Example Usage
     * 
     * ### ServiceAccount JSON Credential File.
     *   `gcp.serviceaccount.getAccountIdToken` will use the configured provider credentials
     * 
     *   &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetAudience("https://foo.bar/")
     *             .build());
     * 
     *         ctx.export("oidcToken", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Service Account Impersonation.
     *   `gcp.serviceaccount.getAccountIdToken` will use background impersonated credentials provided by `gcp.serviceaccount.getAccountAccessToken`.
     * 
     *   Note: to use the following, you must grant `target_service_account` the
     *   `roles/iam.serviceAccountTokenCreator` role on itself.
     * 
     *   &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var impersonated = ServiceaccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .delegates()
     *             .scopes(            
     *                 "userinfo-email",
     *                 "cloud-platform")
     *             .lifetime("300s")
     *             .build());
     * 
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .delegates()
     *             .includeEmail(true)
     *             .targetAudience("https://foo.bar/")
     *             .build());
     * 
     *         ctx.export("oidcToken", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Invoking Cloud Run Endpoint
     * 
     *   The following configuration will invoke [Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service) endpoint where the service account for the provider has been granted `roles/run.invoker` role previously.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import com.pulumi.http.HttpFunctions;
     * import com.pulumi.http.inputs.GetHttpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetAudience("https://your.cloud.run.app/")
     *             .build());
     * 
     *         final var cloudrun = HttpFunctions.getHttp(GetHttpArgs.builder()
     *             .url("https://your.cloud.run.app/")
     *             .requestHeaders(Map.of("Authorization", String.format("Bearer %s", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()))))
     *             .build());
     * 
     *         ctx.export("cloudRunResponse", cloudrun.applyValue(getHttpResult -> getHttpResult.body()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccountIdTokenResult> getAccountIdToken(GetAccountIdTokenArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getAccountIdToken:getAccountIdToken", TypeShape.of(GetAccountIdTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a Google OpenID Connect (`oidc`) `id_token`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
     * 
     * For more information see
     * [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
     * 
     * ## Example Usage
     * 
     * ### ServiceAccount JSON Credential File.
     *   `gcp.serviceaccount.getAccountIdToken` will use the configured provider credentials
     * 
     *   &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetAudience("https://foo.bar/")
     *             .build());
     * 
     *         ctx.export("oidcToken", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Service Account Impersonation.
     *   `gcp.serviceaccount.getAccountAccessToken` will use background impersonated credentials provided by `gcp.serviceaccount.getAccountAccessToken`.
     * 
     *   Note: to use the following, you must grant `target_service_account` the
     *   `roles/iam.serviceAccountTokenCreator` role on itself.
     * 
     *   &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var impersonated = ServiceaccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .delegates()
     *             .scopes(            
     *                 "userinfo-email",
     *                 "cloud-platform")
     *             .lifetime("300s")
     *             .build());
     * 
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .delegates()
     *             .includeEmail(true)
     *             .targetAudience("https://foo.bar/")
     *             .build());
     * 
     *         ctx.export("oidcToken", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Invoking Cloud Run Endpoint
     * 
     *   The following configuration will invoke [Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service) endpoint where the service account for the provider has been granted `roles/run.invoker` role previously.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
     * import com.pulumi.http.HttpFunctions;
     * import com.pulumi.http.inputs.GetHttpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
     *             .targetAudience("https://your.cloud.run.app/")
     *             .build());
     * 
     *         final var cloudrun = HttpFunctions.getHttp(GetHttpArgs.builder()
     *             .url("https://your.cloud.run.app/")
     *             .requestHeaders(Map.of("Authorization", String.format("Bearer %s", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()))))
     *             .build());
     * 
     *         ctx.export("cloudRunResponse", cloudrun.applyValue(getHttpResult -> getHttpResult.body()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccountIdTokenResult> getAccountIdTokenPlain(GetAccountIdTokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceaccount/getAccountIdToken:getAccountIdToken", TypeShape.of(GetAccountIdTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
     * 
     * ## Example Usage
     * 
     * Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `target_service_account`.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountJwtArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var foo = ServiceaccountFunctions.getAccountJwt(GetAccountJwtArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .payload(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("foo", "bar"),
     *                     jsonProperty("sub", "subject")
     *                 )))
     *             .expiresIn(60)
     *             .build());
     * 
     *         ctx.export("jwt", foo.applyValue(getAccountJwtResult -> getAccountJwtResult.jwt()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccountJwtResult> getAccountJwt(GetAccountJwtArgs args) {
        return getAccountJwt(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
     * 
     * ## Example Usage
     * 
     * Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `target_service_account`.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountJwtArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var foo = ServiceaccountFunctions.getAccountJwt(GetAccountJwtArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .payload(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("foo", "bar"),
     *                     jsonProperty("sub", "subject")
     *                 )))
     *             .expiresIn(60)
     *             .build());
     * 
     *         ctx.export("jwt", foo.applyValue(getAccountJwtResult -> getAccountJwtResult.jwt()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccountJwtResult> getAccountJwtPlain(GetAccountJwtPlainArgs args) {
        return getAccountJwtPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
     * 
     * ## Example Usage
     * 
     * Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `target_service_account`.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountJwtArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var foo = ServiceaccountFunctions.getAccountJwt(GetAccountJwtArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .payload(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("foo", "bar"),
     *                     jsonProperty("sub", "subject")
     *                 )))
     *             .expiresIn(60)
     *             .build());
     * 
     *         ctx.export("jwt", foo.applyValue(getAccountJwtResult -> getAccountJwtResult.jwt()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccountJwtResult> getAccountJwt(GetAccountJwtArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getAccountJwt:getAccountJwt", TypeShape.of(GetAccountJwtResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
     * 
     * ## Example Usage
     * 
     * Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `target_service_account`.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountJwtArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var foo = ServiceaccountFunctions.getAccountJwt(GetAccountJwtArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .payload(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("foo", "bar"),
     *                     jsonProperty("sub", "subject")
     *                 )))
     *             .expiresIn(60)
     *             .build());
     * 
     *         ctx.export("jwt", foo.applyValue(getAccountJwtResult -> getAccountJwtResult.jwt()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccountJwtResult> getAccountJwt(GetAccountJwtArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getAccountJwt:getAccountJwt", TypeShape.of(GetAccountJwtResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
     * 
     * ## Example Usage
     * 
     * Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `target_service_account`.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountJwtArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var foo = ServiceaccountFunctions.getAccountJwt(GetAccountJwtArgs.builder()
     *             .targetServiceAccount("impersonated-account}{@literal @}{@code project.iam.gserviceaccount.com")
     *             .payload(serializeJson(
     *                 jsonObject(
     *                     jsonProperty("foo", "bar"),
     *                     jsonProperty("sub", "subject")
     *                 )))
     *             .expiresIn(60)
     *             .build());
     * 
     *         ctx.export("jwt", foo.applyValue(getAccountJwtResult -> getAccountJwtResult.jwt()));
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccountJwtResult> getAccountJwtPlain(GetAccountJwtPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceaccount/getAccountJwt:getAccountJwt", TypeShape.of(GetAccountJwtResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get service account public key. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys/get).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.Account;
     * import com.pulumi.gcp.serviceaccount.AccountArgs;
     * import com.pulumi.gcp.serviceaccount.Key;
     * import com.pulumi.gcp.serviceaccount.KeyArgs;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myaccount = new Account("myaccount", AccountArgs.builder()
     *             .accountId("dev-foo-account")
     *             .build());
     * 
     *         var mykeyKey = new Key("mykeyKey", KeyArgs.builder()
     *             .serviceAccountId(myaccount.name())
     *             .build());
     * 
     *         final var mykey = ServiceaccountFunctions.getAccountKey(GetAccountKeyArgs.builder()
     *             .name(mykeyKey.name())
     *             .publicKeyType("TYPE_X509_PEM_FILE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccountKeyResult> getAccountKey(GetAccountKeyArgs args) {
        return getAccountKey(args, InvokeOptions.Empty);
    }
    /**
     * Get service account public key. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys/get).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.Account;
     * import com.pulumi.gcp.serviceaccount.AccountArgs;
     * import com.pulumi.gcp.serviceaccount.Key;
     * import com.pulumi.gcp.serviceaccount.KeyArgs;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myaccount = new Account("myaccount", AccountArgs.builder()
     *             .accountId("dev-foo-account")
     *             .build());
     * 
     *         var mykeyKey = new Key("mykeyKey", KeyArgs.builder()
     *             .serviceAccountId(myaccount.name())
     *             .build());
     * 
     *         final var mykey = ServiceaccountFunctions.getAccountKey(GetAccountKeyArgs.builder()
     *             .name(mykeyKey.name())
     *             .publicKeyType("TYPE_X509_PEM_FILE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccountKeyResult> getAccountKeyPlain(GetAccountKeyPlainArgs args) {
        return getAccountKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get service account public key. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys/get).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.Account;
     * import com.pulumi.gcp.serviceaccount.AccountArgs;
     * import com.pulumi.gcp.serviceaccount.Key;
     * import com.pulumi.gcp.serviceaccount.KeyArgs;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myaccount = new Account("myaccount", AccountArgs.builder()
     *             .accountId("dev-foo-account")
     *             .build());
     * 
     *         var mykeyKey = new Key("mykeyKey", KeyArgs.builder()
     *             .serviceAccountId(myaccount.name())
     *             .build());
     * 
     *         final var mykey = ServiceaccountFunctions.getAccountKey(GetAccountKeyArgs.builder()
     *             .name(mykeyKey.name())
     *             .publicKeyType("TYPE_X509_PEM_FILE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccountKeyResult> getAccountKey(GetAccountKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getAccountKey:getAccountKey", TypeShape.of(GetAccountKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get service account public key. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys/get).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.Account;
     * import com.pulumi.gcp.serviceaccount.AccountArgs;
     * import com.pulumi.gcp.serviceaccount.Key;
     * import com.pulumi.gcp.serviceaccount.KeyArgs;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myaccount = new Account("myaccount", AccountArgs.builder()
     *             .accountId("dev-foo-account")
     *             .build());
     * 
     *         var mykeyKey = new Key("mykeyKey", KeyArgs.builder()
     *             .serviceAccountId(myaccount.name())
     *             .build());
     * 
     *         final var mykey = ServiceaccountFunctions.getAccountKey(GetAccountKeyArgs.builder()
     *             .name(mykeyKey.name())
     *             .publicKeyType("TYPE_X509_PEM_FILE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccountKeyResult> getAccountKey(GetAccountKeyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getAccountKey:getAccountKey", TypeShape.of(GetAccountKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get service account public key. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys/get).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.Account;
     * import com.pulumi.gcp.serviceaccount.AccountArgs;
     * import com.pulumi.gcp.serviceaccount.Key;
     * import com.pulumi.gcp.serviceaccount.KeyArgs;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetAccountKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myaccount = new Account("myaccount", AccountArgs.builder()
     *             .accountId("dev-foo-account")
     *             .build());
     * 
     *         var mykeyKey = new Key("mykeyKey", KeyArgs.builder()
     *             .serviceAccountId(myaccount.name())
     *             .build());
     * 
     *         final var mykey = ServiceaccountFunctions.getAccountKey(GetAccountKeyArgs.builder()
     *             .name(mykeyKey.name())
     *             .publicKeyType("TYPE_X509_PEM_FILE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccountKeyResult> getAccountKeyPlain(GetAccountKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceaccount/getAccountKey:getAccountKey", TypeShape.of(GetAccountKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for a service account.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceaccountFunctions.getIamPolicy(GetIamPolicyArgs.builder()
     *             .serviceAccountId(testAccount.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIamPolicyResult> getIamPolicy(GetIamPolicyArgs args) {
        return getIamPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for a service account.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceaccountFunctions.getIamPolicy(GetIamPolicyArgs.builder()
     *             .serviceAccountId(testAccount.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetIamPolicyResult> getIamPolicyPlain(GetIamPolicyPlainArgs args) {
        return getIamPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for a service account.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceaccountFunctions.getIamPolicy(GetIamPolicyArgs.builder()
     *             .serviceAccountId(testAccount.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIamPolicyResult> getIamPolicy(GetIamPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getIamPolicy:getIamPolicy", TypeShape.of(GetIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for a service account.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceaccountFunctions.getIamPolicy(GetIamPolicyArgs.builder()
     *             .serviceAccountId(testAccount.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIamPolicyResult> getIamPolicy(GetIamPolicyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getIamPolicy:getIamPolicy", TypeShape.of(GetIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for a service account.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceaccountFunctions.getIamPolicy(GetIamPolicyArgs.builder()
     *             .serviceAccountId(testAccount.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetIamPolicyResult> getIamPolicyPlain(GetIamPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceaccount/getIamPolicy:getIamPolicy", TypeShape.of(GetIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets a list of all service accounts from a project.
     * See [the official documentation](https://cloud.google.com/iam/docs/service-account-overview)
     * and [API](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
     * 
     * ## Example Usage
     * 
     * Example service accounts.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetSArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ServiceaccountFunctions.getS(GetSArgs.builder()
     *             .project("example-project")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSResult> getS() {
        return getS(GetSArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets a list of all service accounts from a project.
     * See [the official documentation](https://cloud.google.com/iam/docs/service-account-overview)
     * and [API](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
     * 
     * ## Example Usage
     * 
     * Example service accounts.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetSArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ServiceaccountFunctions.getS(GetSArgs.builder()
     *             .project("example-project")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSResult> getSPlain() {
        return getSPlain(GetSPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets a list of all service accounts from a project.
     * See [the official documentation](https://cloud.google.com/iam/docs/service-account-overview)
     * and [API](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
     * 
     * ## Example Usage
     * 
     * Example service accounts.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetSArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ServiceaccountFunctions.getS(GetSArgs.builder()
     *             .project("example-project")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSResult> getS(GetSArgs args) {
        return getS(args, InvokeOptions.Empty);
    }
    /**
     * Gets a list of all service accounts from a project.
     * See [the official documentation](https://cloud.google.com/iam/docs/service-account-overview)
     * and [API](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
     * 
     * ## Example Usage
     * 
     * Example service accounts.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetSArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ServiceaccountFunctions.getS(GetSArgs.builder()
     *             .project("example-project")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSResult> getSPlain(GetSPlainArgs args) {
        return getSPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets a list of all service accounts from a project.
     * See [the official documentation](https://cloud.google.com/iam/docs/service-account-overview)
     * and [API](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
     * 
     * ## Example Usage
     * 
     * Example service accounts.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetSArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ServiceaccountFunctions.getS(GetSArgs.builder()
     *             .project("example-project")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSResult> getS(GetSArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getS:getS", TypeShape.of(GetSResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets a list of all service accounts from a project.
     * See [the official documentation](https://cloud.google.com/iam/docs/service-account-overview)
     * and [API](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
     * 
     * ## Example Usage
     * 
     * Example service accounts.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetSArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ServiceaccountFunctions.getS(GetSArgs.builder()
     *             .project("example-project")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSResult> getS(GetSArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceaccount/getS:getS", TypeShape.of(GetSResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets a list of all service accounts from a project.
     * See [the official documentation](https://cloud.google.com/iam/docs/service-account-overview)
     * and [API](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
     * 
     * ## Example Usage
     * 
     * Example service accounts.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
     * import com.pulumi.gcp.serviceaccount.inputs.GetSArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ServiceaccountFunctions.getS(GetSArgs.builder()
     *             .project("example-project")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSResult> getSPlain(GetSPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceaccount/getS:getS", TypeShape.of(GetSResult.class), args, Utilities.withVersion(options));
    }
}
