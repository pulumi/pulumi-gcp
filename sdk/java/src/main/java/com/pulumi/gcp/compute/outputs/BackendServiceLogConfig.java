// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BackendServiceLogConfig {
    /**
     * @return Whether to enable logging for the load balancer traffic served by this backend service.
     * 
     */
    private final @Nullable Boolean enable;
    /**
     * @return This field can only be specified if logging is enabled for this backend service. The value of
     * the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
     * where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
     * The default value is 1.0.
     * 
     */
    private final @Nullable Double sampleRate;

    @CustomType.Constructor
    private BackendServiceLogConfig(
        @CustomType.Parameter("enable") @Nullable Boolean enable,
        @CustomType.Parameter("sampleRate") @Nullable Double sampleRate) {
        this.enable = enable;
        this.sampleRate = sampleRate;
    }

    /**
     * @return Whether to enable logging for the load balancer traffic served by this backend service.
     * 
     */
    public Optional<Boolean> enable() {
        return Optional.ofNullable(this.enable);
    }
    /**
     * @return This field can only be specified if logging is enabled for this backend service. The value of
     * the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
     * where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
     * The default value is 1.0.
     * 
     */
    public Optional<Double> sampleRate() {
        return Optional.ofNullable(this.sampleRate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendServiceLogConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean enable;
        private @Nullable Double sampleRate;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendServiceLogConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enable = defaults.enable;
    	      this.sampleRate = defaults.sampleRate;
        }

        public Builder enable(@Nullable Boolean enable) {
            this.enable = enable;
            return this;
        }
        public Builder sampleRate(@Nullable Double sampleRate) {
            this.sampleRate = sampleRate;
            return this;
        }        public BackendServiceLogConfig build() {
            return new BackendServiceLogConfig(enable, sampleRate);
        }
    }
}
