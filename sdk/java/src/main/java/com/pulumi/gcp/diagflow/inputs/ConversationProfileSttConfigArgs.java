// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConversationProfileSttConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConversationProfileSttConfigArgs Empty = new ConversationProfileSttConfigArgs();

    /**
     * Audio encoding of the audio content to process.
     * Possible values are: `AUDIO_ENCODING_UNSPECIFIED`, `AUDIO_ENCODING_LINEAR_16`, `AUDIO_ENCODING_FLAC`, `AUDIO_ENCODING_MULAW`, `AUDIO_ENCODING_AMR`, `AUDIO_ENCODING_AMR_WB`, `AUDIO_ENCODING_OGG_OPUS`, `AUDIOENCODING_SPEEX_WITH_HEADER_BYTE`.
     * 
     */
    @Import(name="audioEncoding")
    private @Nullable Output<String> audioEncoding;

    /**
     * @return Audio encoding of the audio content to process.
     * Possible values are: `AUDIO_ENCODING_UNSPECIFIED`, `AUDIO_ENCODING_LINEAR_16`, `AUDIO_ENCODING_FLAC`, `AUDIO_ENCODING_MULAW`, `AUDIO_ENCODING_AMR`, `AUDIO_ENCODING_AMR_WB`, `AUDIO_ENCODING_OGG_OPUS`, `AUDIOENCODING_SPEEX_WITH_HEADER_BYTE`.
     * 
     */
    public Optional<Output<String>> audioEncoding() {
        return Optional.ofNullable(this.audioEncoding);
    }

    /**
     * If true, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words.
     * 
     */
    @Import(name="enableWordInfo")
    private @Nullable Output<Boolean> enableWordInfo;

    /**
     * @return If true, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words.
     * 
     */
    public Optional<Output<Boolean>> enableWordInfo() {
        return Optional.ofNullable(this.enableWordInfo);
    }

    /**
     * The language of the supplied audio.
     * 
     */
    @Import(name="languageCode")
    private @Nullable Output<String> languageCode;

    /**
     * @return The language of the supplied audio.
     * 
     */
    public Optional<Output<String>> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }

    /**
     * Which Speech model to select.
     * Leave this field unspecified to use Agent Speech settings for model selection.
     * 
     */
    @Import(name="model")
    private @Nullable Output<String> model;

    /**
     * @return Which Speech model to select.
     * Leave this field unspecified to use Agent Speech settings for model selection.
     * 
     */
    public Optional<Output<String>> model() {
        return Optional.ofNullable(this.model);
    }

    /**
     * Sample rate (in Hertz) of the audio content sent in the query.
     * 
     */
    @Import(name="sampleRateHertz")
    private @Nullable Output<Integer> sampleRateHertz;

    /**
     * @return Sample rate (in Hertz) of the audio content sent in the query.
     * 
     */
    public Optional<Output<Integer>> sampleRateHertz() {
        return Optional.ofNullable(this.sampleRateHertz);
    }

    /**
     * The speech model used in speech to text.
     * Possible values are: `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE`, `USE_STANDARD`, `USE_ENHANCED`.
     * 
     */
    @Import(name="speechModelVariant")
    private @Nullable Output<String> speechModelVariant;

    /**
     * @return The speech model used in speech to text.
     * Possible values are: `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE`, `USE_STANDARD`, `USE_ENHANCED`.
     * 
     */
    public Optional<Output<String>> speechModelVariant() {
        return Optional.ofNullable(this.speechModelVariant);
    }

    /**
     * Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value.
     * 
     */
    @Import(name="useTimeoutBasedEndpointing")
    private @Nullable Output<Boolean> useTimeoutBasedEndpointing;

    /**
     * @return Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value.
     * 
     */
    public Optional<Output<Boolean>> useTimeoutBasedEndpointing() {
        return Optional.ofNullable(this.useTimeoutBasedEndpointing);
    }

    private ConversationProfileSttConfigArgs() {}

    private ConversationProfileSttConfigArgs(ConversationProfileSttConfigArgs $) {
        this.audioEncoding = $.audioEncoding;
        this.enableWordInfo = $.enableWordInfo;
        this.languageCode = $.languageCode;
        this.model = $.model;
        this.sampleRateHertz = $.sampleRateHertz;
        this.speechModelVariant = $.speechModelVariant;
        this.useTimeoutBasedEndpointing = $.useTimeoutBasedEndpointing;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConversationProfileSttConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConversationProfileSttConfigArgs $;

        public Builder() {
            $ = new ConversationProfileSttConfigArgs();
        }

        public Builder(ConversationProfileSttConfigArgs defaults) {
            $ = new ConversationProfileSttConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audioEncoding Audio encoding of the audio content to process.
         * Possible values are: `AUDIO_ENCODING_UNSPECIFIED`, `AUDIO_ENCODING_LINEAR_16`, `AUDIO_ENCODING_FLAC`, `AUDIO_ENCODING_MULAW`, `AUDIO_ENCODING_AMR`, `AUDIO_ENCODING_AMR_WB`, `AUDIO_ENCODING_OGG_OPUS`, `AUDIOENCODING_SPEEX_WITH_HEADER_BYTE`.
         * 
         * @return builder
         * 
         */
        public Builder audioEncoding(@Nullable Output<String> audioEncoding) {
            $.audioEncoding = audioEncoding;
            return this;
        }

        /**
         * @param audioEncoding Audio encoding of the audio content to process.
         * Possible values are: `AUDIO_ENCODING_UNSPECIFIED`, `AUDIO_ENCODING_LINEAR_16`, `AUDIO_ENCODING_FLAC`, `AUDIO_ENCODING_MULAW`, `AUDIO_ENCODING_AMR`, `AUDIO_ENCODING_AMR_WB`, `AUDIO_ENCODING_OGG_OPUS`, `AUDIOENCODING_SPEEX_WITH_HEADER_BYTE`.
         * 
         * @return builder
         * 
         */
        public Builder audioEncoding(String audioEncoding) {
            return audioEncoding(Output.of(audioEncoding));
        }

        /**
         * @param enableWordInfo If true, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words.
         * 
         * @return builder
         * 
         */
        public Builder enableWordInfo(@Nullable Output<Boolean> enableWordInfo) {
            $.enableWordInfo = enableWordInfo;
            return this;
        }

        /**
         * @param enableWordInfo If true, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words.
         * 
         * @return builder
         * 
         */
        public Builder enableWordInfo(Boolean enableWordInfo) {
            return enableWordInfo(Output.of(enableWordInfo));
        }

        /**
         * @param languageCode The language of the supplied audio.
         * 
         * @return builder
         * 
         */
        public Builder languageCode(@Nullable Output<String> languageCode) {
            $.languageCode = languageCode;
            return this;
        }

        /**
         * @param languageCode The language of the supplied audio.
         * 
         * @return builder
         * 
         */
        public Builder languageCode(String languageCode) {
            return languageCode(Output.of(languageCode));
        }

        /**
         * @param model Which Speech model to select.
         * Leave this field unspecified to use Agent Speech settings for model selection.
         * 
         * @return builder
         * 
         */
        public Builder model(@Nullable Output<String> model) {
            $.model = model;
            return this;
        }

        /**
         * @param model Which Speech model to select.
         * Leave this field unspecified to use Agent Speech settings for model selection.
         * 
         * @return builder
         * 
         */
        public Builder model(String model) {
            return model(Output.of(model));
        }

        /**
         * @param sampleRateHertz Sample rate (in Hertz) of the audio content sent in the query.
         * 
         * @return builder
         * 
         */
        public Builder sampleRateHertz(@Nullable Output<Integer> sampleRateHertz) {
            $.sampleRateHertz = sampleRateHertz;
            return this;
        }

        /**
         * @param sampleRateHertz Sample rate (in Hertz) of the audio content sent in the query.
         * 
         * @return builder
         * 
         */
        public Builder sampleRateHertz(Integer sampleRateHertz) {
            return sampleRateHertz(Output.of(sampleRateHertz));
        }

        /**
         * @param speechModelVariant The speech model used in speech to text.
         * Possible values are: `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE`, `USE_STANDARD`, `USE_ENHANCED`.
         * 
         * @return builder
         * 
         */
        public Builder speechModelVariant(@Nullable Output<String> speechModelVariant) {
            $.speechModelVariant = speechModelVariant;
            return this;
        }

        /**
         * @param speechModelVariant The speech model used in speech to text.
         * Possible values are: `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE`, `USE_STANDARD`, `USE_ENHANCED`.
         * 
         * @return builder
         * 
         */
        public Builder speechModelVariant(String speechModelVariant) {
            return speechModelVariant(Output.of(speechModelVariant));
        }

        /**
         * @param useTimeoutBasedEndpointing Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value.
         * 
         * @return builder
         * 
         */
        public Builder useTimeoutBasedEndpointing(@Nullable Output<Boolean> useTimeoutBasedEndpointing) {
            $.useTimeoutBasedEndpointing = useTimeoutBasedEndpointing;
            return this;
        }

        /**
         * @param useTimeoutBasedEndpointing Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value.
         * 
         * @return builder
         * 
         */
        public Builder useTimeoutBasedEndpointing(Boolean useTimeoutBasedEndpointing) {
            return useTimeoutBasedEndpointing(Output.of(useTimeoutBasedEndpointing));
        }

        public ConversationProfileSttConfigArgs build() {
            return $;
        }
    }

}
