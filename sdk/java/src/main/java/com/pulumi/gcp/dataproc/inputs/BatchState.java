// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataproc.inputs.BatchEnvironmentConfigArgs;
import com.pulumi.gcp.dataproc.inputs.BatchPysparkBatchArgs;
import com.pulumi.gcp.dataproc.inputs.BatchRuntimeConfigArgs;
import com.pulumi.gcp.dataproc.inputs.BatchRuntimeInfoArgs;
import com.pulumi.gcp.dataproc.inputs.BatchSparkBatchArgs;
import com.pulumi.gcp.dataproc.inputs.BatchSparkRBatchArgs;
import com.pulumi.gcp.dataproc.inputs.BatchSparkSqlBatchArgs;
import com.pulumi.gcp.dataproc.inputs.BatchStateHistoryArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BatchState extends com.pulumi.resources.ResourceArgs {

    public static final BatchState Empty = new BatchState();

    /**
     * The ID to use for the batch, which will become the final component of the batch&#39;s resource name.
     * This value must be 4-63 characters. Valid characters are /[a-z][0-9]-/.
     * 
     */
    @Import(name="batchId")
    private @Nullable Output<String> batchId;

    /**
     * @return The ID to use for the batch, which will become the final component of the batch&#39;s resource name.
     * This value must be 4-63 characters. Valid characters are /[a-z][0-9]-/.
     * 
     */
    public Optional<Output<String>> batchId() {
        return Optional.ofNullable(this.batchId);
    }

    /**
     * The time when the batch was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The time when the batch was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The email address of the user who created the batch.
     * 
     */
    @Import(name="creator")
    private @Nullable Output<String> creator;

    /**
     * @return The email address of the user who created the batch.
     * 
     */
    public Optional<Output<String>> creator() {
        return Optional.ofNullable(this.creator);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * Environment configuration for the batch execution.
     * Structure is documented below.
     * 
     */
    @Import(name="environmentConfig")
    private @Nullable Output<BatchEnvironmentConfigArgs> environmentConfig;

    /**
     * @return Environment configuration for the batch execution.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BatchEnvironmentConfigArgs>> environmentConfig() {
        return Optional.ofNullable(this.environmentConfig);
    }

    /**
     * The labels to associate with this batch.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels to associate with this batch.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location in which the batch will be created in.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location in which the batch will be created in.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the batch.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the batch.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The resource name of the operation associated with this batch.
     * 
     */
    @Import(name="operation")
    private @Nullable Output<String> operation;

    /**
     * @return The resource name of the operation associated with this batch.
     * 
     */
    public Optional<Output<String>> operation() {
        return Optional.ofNullable(this.operation);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * PySpark batch config.
     * Structure is documented below.
     * 
     */
    @Import(name="pysparkBatch")
    private @Nullable Output<BatchPysparkBatchArgs> pysparkBatch;

    /**
     * @return PySpark batch config.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BatchPysparkBatchArgs>> pysparkBatch() {
        return Optional.ofNullable(this.pysparkBatch);
    }

    /**
     * Runtime configuration for the batch execution.
     * Structure is documented below.
     * 
     */
    @Import(name="runtimeConfig")
    private @Nullable Output<BatchRuntimeConfigArgs> runtimeConfig;

    /**
     * @return Runtime configuration for the batch execution.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BatchRuntimeConfigArgs>> runtimeConfig() {
        return Optional.ofNullable(this.runtimeConfig);
    }

    /**
     * Runtime information about batch execution.
     * Structure is documented below.
     * 
     */
    @Import(name="runtimeInfos")
    private @Nullable Output<List<BatchRuntimeInfoArgs>> runtimeInfos;

    /**
     * @return Runtime information about batch execution.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<BatchRuntimeInfoArgs>>> runtimeInfos() {
        return Optional.ofNullable(this.runtimeInfos);
    }

    /**
     * Spark batch config.
     * Structure is documented below.
     * 
     */
    @Import(name="sparkBatch")
    private @Nullable Output<BatchSparkBatchArgs> sparkBatch;

    /**
     * @return Spark batch config.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BatchSparkBatchArgs>> sparkBatch() {
        return Optional.ofNullable(this.sparkBatch);
    }

    /**
     * SparkR batch config.
     * Structure is documented below.
     * 
     */
    @Import(name="sparkRBatch")
    private @Nullable Output<BatchSparkRBatchArgs> sparkRBatch;

    /**
     * @return SparkR batch config.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BatchSparkRBatchArgs>> sparkRBatch() {
        return Optional.ofNullable(this.sparkRBatch);
    }

    /**
     * Spark SQL batch config.
     * Structure is documented below.
     * 
     */
    @Import(name="sparkSqlBatch")
    private @Nullable Output<BatchSparkSqlBatchArgs> sparkSqlBatch;

    /**
     * @return Spark SQL batch config.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BatchSparkSqlBatchArgs>> sparkSqlBatch() {
        return Optional.ofNullable(this.sparkSqlBatch);
    }

    /**
     * (Output)
     * The state of the batch at this point in history. For possible values, see the [API documentation](https://cloud.google.com/dataproc-serverless/docs/reference/rest/v1/projects.locations.batches#State).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Output)
     * The state of the batch at this point in history. For possible values, see the [API documentation](https://cloud.google.com/dataproc-serverless/docs/reference/rest/v1/projects.locations.batches#State).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Historical state information for the batch.
     * Structure is documented below.
     * 
     */
    @Import(name="stateHistories")
    private @Nullable Output<List<BatchStateHistoryArgs>> stateHistories;

    /**
     * @return Historical state information for the batch.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<BatchStateHistoryArgs>>> stateHistories() {
        return Optional.ofNullable(this.stateHistories);
    }

    /**
     * (Output)
     * Details about the state at this point in history.
     * 
     */
    @Import(name="stateMessage")
    private @Nullable Output<String> stateMessage;

    /**
     * @return (Output)
     * Details about the state at this point in history.
     * 
     */
    public Optional<Output<String>> stateMessage() {
        return Optional.ofNullable(this.stateMessage);
    }

    /**
     * Batch state details, such as a failure description if the state is FAILED.
     * 
     */
    @Import(name="stateTime")
    private @Nullable Output<String> stateTime;

    /**
     * @return Batch state details, such as a failure description if the state is FAILED.
     * 
     */
    public Optional<Output<String>> stateTime() {
        return Optional.ofNullable(this.stateTime);
    }

    /**
     * A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private BatchState() {}

    private BatchState(BatchState $) {
        this.batchId = $.batchId;
        this.createTime = $.createTime;
        this.creator = $.creator;
        this.effectiveLabels = $.effectiveLabels;
        this.environmentConfig = $.environmentConfig;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.operation = $.operation;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.pysparkBatch = $.pysparkBatch;
        this.runtimeConfig = $.runtimeConfig;
        this.runtimeInfos = $.runtimeInfos;
        this.sparkBatch = $.sparkBatch;
        this.sparkRBatch = $.sparkRBatch;
        this.sparkSqlBatch = $.sparkSqlBatch;
        this.state = $.state;
        this.stateHistories = $.stateHistories;
        this.stateMessage = $.stateMessage;
        this.stateTime = $.stateTime;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BatchState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BatchState $;

        public Builder() {
            $ = new BatchState();
        }

        public Builder(BatchState defaults) {
            $ = new BatchState(Objects.requireNonNull(defaults));
        }

        /**
         * @param batchId The ID to use for the batch, which will become the final component of the batch&#39;s resource name.
         * This value must be 4-63 characters. Valid characters are /[a-z][0-9]-/.
         * 
         * @return builder
         * 
         */
        public Builder batchId(@Nullable Output<String> batchId) {
            $.batchId = batchId;
            return this;
        }

        /**
         * @param batchId The ID to use for the batch, which will become the final component of the batch&#39;s resource name.
         * This value must be 4-63 characters. Valid characters are /[a-z][0-9]-/.
         * 
         * @return builder
         * 
         */
        public Builder batchId(String batchId) {
            return batchId(Output.of(batchId));
        }

        /**
         * @param createTime The time when the batch was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The time when the batch was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param creator The email address of the user who created the batch.
         * 
         * @return builder
         * 
         */
        public Builder creator(@Nullable Output<String> creator) {
            $.creator = creator;
            return this;
        }

        /**
         * @param creator The email address of the user who created the batch.
         * 
         * @return builder
         * 
         */
        public Builder creator(String creator) {
            return creator(Output.of(creator));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param environmentConfig Environment configuration for the batch execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder environmentConfig(@Nullable Output<BatchEnvironmentConfigArgs> environmentConfig) {
            $.environmentConfig = environmentConfig;
            return this;
        }

        /**
         * @param environmentConfig Environment configuration for the batch execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder environmentConfig(BatchEnvironmentConfigArgs environmentConfig) {
            return environmentConfig(Output.of(environmentConfig));
        }

        /**
         * @param labels The labels to associate with this batch.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels to associate with this batch.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location in which the batch will be created in.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location in which the batch will be created in.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the batch.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the batch.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param operation The resource name of the operation associated with this batch.
         * 
         * @return builder
         * 
         */
        public Builder operation(@Nullable Output<String> operation) {
            $.operation = operation;
            return this;
        }

        /**
         * @param operation The resource name of the operation associated with this batch.
         * 
         * @return builder
         * 
         */
        public Builder operation(String operation) {
            return operation(Output.of(operation));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param pysparkBatch PySpark batch config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pysparkBatch(@Nullable Output<BatchPysparkBatchArgs> pysparkBatch) {
            $.pysparkBatch = pysparkBatch;
            return this;
        }

        /**
         * @param pysparkBatch PySpark batch config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pysparkBatch(BatchPysparkBatchArgs pysparkBatch) {
            return pysparkBatch(Output.of(pysparkBatch));
        }

        /**
         * @param runtimeConfig Runtime configuration for the batch execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder runtimeConfig(@Nullable Output<BatchRuntimeConfigArgs> runtimeConfig) {
            $.runtimeConfig = runtimeConfig;
            return this;
        }

        /**
         * @param runtimeConfig Runtime configuration for the batch execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder runtimeConfig(BatchRuntimeConfigArgs runtimeConfig) {
            return runtimeConfig(Output.of(runtimeConfig));
        }

        /**
         * @param runtimeInfos Runtime information about batch execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder runtimeInfos(@Nullable Output<List<BatchRuntimeInfoArgs>> runtimeInfos) {
            $.runtimeInfos = runtimeInfos;
            return this;
        }

        /**
         * @param runtimeInfos Runtime information about batch execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder runtimeInfos(List<BatchRuntimeInfoArgs> runtimeInfos) {
            return runtimeInfos(Output.of(runtimeInfos));
        }

        /**
         * @param runtimeInfos Runtime information about batch execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder runtimeInfos(BatchRuntimeInfoArgs... runtimeInfos) {
            return runtimeInfos(List.of(runtimeInfos));
        }

        /**
         * @param sparkBatch Spark batch config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkBatch(@Nullable Output<BatchSparkBatchArgs> sparkBatch) {
            $.sparkBatch = sparkBatch;
            return this;
        }

        /**
         * @param sparkBatch Spark batch config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkBatch(BatchSparkBatchArgs sparkBatch) {
            return sparkBatch(Output.of(sparkBatch));
        }

        /**
         * @param sparkRBatch SparkR batch config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkRBatch(@Nullable Output<BatchSparkRBatchArgs> sparkRBatch) {
            $.sparkRBatch = sparkRBatch;
            return this;
        }

        /**
         * @param sparkRBatch SparkR batch config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkRBatch(BatchSparkRBatchArgs sparkRBatch) {
            return sparkRBatch(Output.of(sparkRBatch));
        }

        /**
         * @param sparkSqlBatch Spark SQL batch config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkSqlBatch(@Nullable Output<BatchSparkSqlBatchArgs> sparkSqlBatch) {
            $.sparkSqlBatch = sparkSqlBatch;
            return this;
        }

        /**
         * @param sparkSqlBatch Spark SQL batch config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkSqlBatch(BatchSparkSqlBatchArgs sparkSqlBatch) {
            return sparkSqlBatch(Output.of(sparkSqlBatch));
        }

        /**
         * @param state (Output)
         * The state of the batch at this point in history. For possible values, see the [API documentation](https://cloud.google.com/dataproc-serverless/docs/reference/rest/v1/projects.locations.batches#State).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Output)
         * The state of the batch at this point in history. For possible values, see the [API documentation](https://cloud.google.com/dataproc-serverless/docs/reference/rest/v1/projects.locations.batches#State).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stateHistories Historical state information for the batch.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder stateHistories(@Nullable Output<List<BatchStateHistoryArgs>> stateHistories) {
            $.stateHistories = stateHistories;
            return this;
        }

        /**
         * @param stateHistories Historical state information for the batch.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder stateHistories(List<BatchStateHistoryArgs> stateHistories) {
            return stateHistories(Output.of(stateHistories));
        }

        /**
         * @param stateHistories Historical state information for the batch.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder stateHistories(BatchStateHistoryArgs... stateHistories) {
            return stateHistories(List.of(stateHistories));
        }

        /**
         * @param stateMessage (Output)
         * Details about the state at this point in history.
         * 
         * @return builder
         * 
         */
        public Builder stateMessage(@Nullable Output<String> stateMessage) {
            $.stateMessage = stateMessage;
            return this;
        }

        /**
         * @param stateMessage (Output)
         * Details about the state at this point in history.
         * 
         * @return builder
         * 
         */
        public Builder stateMessage(String stateMessage) {
            return stateMessage(Output.of(stateMessage));
        }

        /**
         * @param stateTime Batch state details, such as a failure description if the state is FAILED.
         * 
         * @return builder
         * 
         */
        public Builder stateTime(@Nullable Output<String> stateTime) {
            $.stateTime = stateTime;
            return this;
        }

        /**
         * @param stateTime Batch state details, such as a failure description if the state is FAILED.
         * 
         * @return builder
         * 
         */
        public Builder stateTime(String stateTime) {
            return stateTime(Output.of(stateTime));
        }

        /**
         * @param uuid A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public BatchState build() {
            return $;
        }
    }

}
