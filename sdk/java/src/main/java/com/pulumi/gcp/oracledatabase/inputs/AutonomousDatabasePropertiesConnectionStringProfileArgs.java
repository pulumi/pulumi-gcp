// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutonomousDatabasePropertiesConnectionStringProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutonomousDatabasePropertiesConnectionStringProfileArgs Empty = new AutonomousDatabasePropertiesConnectionStringProfileArgs();

    /**
     * The current consumer group being used by the connection.
     *  Possible values:
     *  CONSUMER_GROUP_UNSPECIFIED
     * HIGH
     * MEDIUM
     * LOW
     * TP
     * TPURGENT
     * 
     */
    @Import(name="consumerGroup")
    private @Nullable Output<String> consumerGroup;

    /**
     * @return The current consumer group being used by the connection.
     *  Possible values:
     *  CONSUMER_GROUP_UNSPECIFIED
     * HIGH
     * MEDIUM
     * LOW
     * TP
     * TPURGENT
     * 
     */
    public Optional<Output<String>> consumerGroup() {
        return Optional.ofNullable(this.consumerGroup);
    }

    /**
     * The display name for the database connection.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name for the database connection.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The host name format being currently used in connection string.
     *  Possible values:
     *  HOST_FORMAT_UNSPECIFIED
     * FQDN
     * IP
     * 
     */
    @Import(name="hostFormat")
    private @Nullable Output<String> hostFormat;

    /**
     * @return The host name format being currently used in connection string.
     *  Possible values:
     *  HOST_FORMAT_UNSPECIFIED
     * FQDN
     * IP
     * 
     */
    public Optional<Output<String>> hostFormat() {
        return Optional.ofNullable(this.hostFormat);
    }

    /**
     * This field indicates if the connection string is regional and is only
     * applicable for cross-region Data Guard.
     * 
     */
    @Import(name="isRegional")
    private @Nullable Output<Boolean> isRegional;

    /**
     * @return This field indicates if the connection string is regional and is only
     * applicable for cross-region Data Guard.
     * 
     */
    public Optional<Output<Boolean>> isRegional() {
        return Optional.ofNullable(this.isRegional);
    }

    /**
     * The protocol being used by the connection.
     *  Possible values:
     *  PROTOCOL_UNSPECIFIED
     * TCP
     * TCPS
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol being used by the connection.
     *  Possible values:
     *  PROTOCOL_UNSPECIFIED
     * TCP
     * TCPS
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The current session mode of the connection.
     *  Possible values:
     *  SESSION_MODE_UNSPECIFIED
     * DIRECT
     * INDIRECT
     * 
     */
    @Import(name="sessionMode")
    private @Nullable Output<String> sessionMode;

    /**
     * @return The current session mode of the connection.
     *  Possible values:
     *  SESSION_MODE_UNSPECIFIED
     * DIRECT
     * INDIRECT
     * 
     */
    public Optional<Output<String>> sessionMode() {
        return Optional.ofNullable(this.sessionMode);
    }

    /**
     * The syntax of the connection string.
     *  Possible values:
     *  SYNTAX_FORMAT_UNSPECIFIED
     * LONG
     * EZCONNECT
     * EZCONNECTPLUS
     * 
     */
    @Import(name="syntaxFormat")
    private @Nullable Output<String> syntaxFormat;

    /**
     * @return The syntax of the connection string.
     *  Possible values:
     *  SYNTAX_FORMAT_UNSPECIFIED
     * LONG
     * EZCONNECT
     * EZCONNECTPLUS
     * 
     */
    public Optional<Output<String>> syntaxFormat() {
        return Optional.ofNullable(this.syntaxFormat);
    }

    /**
     * This field indicates the TLS authentication type of the connection.
     *  Possible values:
     *  TLS_AUTHENTICATION_UNSPECIFIED
     * SERVER
     * MUTUAL
     * 
     */
    @Import(name="tlsAuthentication")
    private @Nullable Output<String> tlsAuthentication;

    /**
     * @return This field indicates the TLS authentication type of the connection.
     *  Possible values:
     *  TLS_AUTHENTICATION_UNSPECIFIED
     * SERVER
     * MUTUAL
     * 
     */
    public Optional<Output<String>> tlsAuthentication() {
        return Optional.ofNullable(this.tlsAuthentication);
    }

    /**
     * The value of the connection string.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The value of the connection string.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private AutonomousDatabasePropertiesConnectionStringProfileArgs() {}

    private AutonomousDatabasePropertiesConnectionStringProfileArgs(AutonomousDatabasePropertiesConnectionStringProfileArgs $) {
        this.consumerGroup = $.consumerGroup;
        this.displayName = $.displayName;
        this.hostFormat = $.hostFormat;
        this.isRegional = $.isRegional;
        this.protocol = $.protocol;
        this.sessionMode = $.sessionMode;
        this.syntaxFormat = $.syntaxFormat;
        this.tlsAuthentication = $.tlsAuthentication;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutonomousDatabasePropertiesConnectionStringProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutonomousDatabasePropertiesConnectionStringProfileArgs $;

        public Builder() {
            $ = new AutonomousDatabasePropertiesConnectionStringProfileArgs();
        }

        public Builder(AutonomousDatabasePropertiesConnectionStringProfileArgs defaults) {
            $ = new AutonomousDatabasePropertiesConnectionStringProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consumerGroup The current consumer group being used by the connection.
         *  Possible values:
         *  CONSUMER_GROUP_UNSPECIFIED
         * HIGH
         * MEDIUM
         * LOW
         * TP
         * TPURGENT
         * 
         * @return builder
         * 
         */
        public Builder consumerGroup(@Nullable Output<String> consumerGroup) {
            $.consumerGroup = consumerGroup;
            return this;
        }

        /**
         * @param consumerGroup The current consumer group being used by the connection.
         *  Possible values:
         *  CONSUMER_GROUP_UNSPECIFIED
         * HIGH
         * MEDIUM
         * LOW
         * TP
         * TPURGENT
         * 
         * @return builder
         * 
         */
        public Builder consumerGroup(String consumerGroup) {
            return consumerGroup(Output.of(consumerGroup));
        }

        /**
         * @param displayName The display name for the database connection.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name for the database connection.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param hostFormat The host name format being currently used in connection string.
         *  Possible values:
         *  HOST_FORMAT_UNSPECIFIED
         * FQDN
         * IP
         * 
         * @return builder
         * 
         */
        public Builder hostFormat(@Nullable Output<String> hostFormat) {
            $.hostFormat = hostFormat;
            return this;
        }

        /**
         * @param hostFormat The host name format being currently used in connection string.
         *  Possible values:
         *  HOST_FORMAT_UNSPECIFIED
         * FQDN
         * IP
         * 
         * @return builder
         * 
         */
        public Builder hostFormat(String hostFormat) {
            return hostFormat(Output.of(hostFormat));
        }

        /**
         * @param isRegional This field indicates if the connection string is regional and is only
         * applicable for cross-region Data Guard.
         * 
         * @return builder
         * 
         */
        public Builder isRegional(@Nullable Output<Boolean> isRegional) {
            $.isRegional = isRegional;
            return this;
        }

        /**
         * @param isRegional This field indicates if the connection string is regional and is only
         * applicable for cross-region Data Guard.
         * 
         * @return builder
         * 
         */
        public Builder isRegional(Boolean isRegional) {
            return isRegional(Output.of(isRegional));
        }

        /**
         * @param protocol The protocol being used by the connection.
         *  Possible values:
         *  PROTOCOL_UNSPECIFIED
         * TCP
         * TCPS
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol being used by the connection.
         *  Possible values:
         *  PROTOCOL_UNSPECIFIED
         * TCP
         * TCPS
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param sessionMode The current session mode of the connection.
         *  Possible values:
         *  SESSION_MODE_UNSPECIFIED
         * DIRECT
         * INDIRECT
         * 
         * @return builder
         * 
         */
        public Builder sessionMode(@Nullable Output<String> sessionMode) {
            $.sessionMode = sessionMode;
            return this;
        }

        /**
         * @param sessionMode The current session mode of the connection.
         *  Possible values:
         *  SESSION_MODE_UNSPECIFIED
         * DIRECT
         * INDIRECT
         * 
         * @return builder
         * 
         */
        public Builder sessionMode(String sessionMode) {
            return sessionMode(Output.of(sessionMode));
        }

        /**
         * @param syntaxFormat The syntax of the connection string.
         *  Possible values:
         *  SYNTAX_FORMAT_UNSPECIFIED
         * LONG
         * EZCONNECT
         * EZCONNECTPLUS
         * 
         * @return builder
         * 
         */
        public Builder syntaxFormat(@Nullable Output<String> syntaxFormat) {
            $.syntaxFormat = syntaxFormat;
            return this;
        }

        /**
         * @param syntaxFormat The syntax of the connection string.
         *  Possible values:
         *  SYNTAX_FORMAT_UNSPECIFIED
         * LONG
         * EZCONNECT
         * EZCONNECTPLUS
         * 
         * @return builder
         * 
         */
        public Builder syntaxFormat(String syntaxFormat) {
            return syntaxFormat(Output.of(syntaxFormat));
        }

        /**
         * @param tlsAuthentication This field indicates the TLS authentication type of the connection.
         *  Possible values:
         *  TLS_AUTHENTICATION_UNSPECIFIED
         * SERVER
         * MUTUAL
         * 
         * @return builder
         * 
         */
        public Builder tlsAuthentication(@Nullable Output<String> tlsAuthentication) {
            $.tlsAuthentication = tlsAuthentication;
            return this;
        }

        /**
         * @param tlsAuthentication This field indicates the TLS authentication type of the connection.
         *  Possible values:
         *  TLS_AUTHENTICATION_UNSPECIFIED
         * SERVER
         * MUTUAL
         * 
         * @return builder
         * 
         */
        public Builder tlsAuthentication(String tlsAuthentication) {
            return tlsAuthentication(Output.of(tlsAuthentication));
        }

        /**
         * @param value The value of the connection string.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value of the connection string.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public AutonomousDatabasePropertiesConnectionStringProfileArgs build() {
            return $;
        }
    }

}
