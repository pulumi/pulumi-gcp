// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceFromMachineImageAttachedDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceFromMachineImageAttachedDiskArgs Empty = new InstanceFromMachineImageAttachedDiskArgs();

    /**
     * Name with which the attached disk is accessible under /dev/disk/by-id/
     * 
     */
    @Import(name="deviceName")
    private @Nullable Output<String> deviceName;

    /**
     * @return Name with which the attached disk is accessible under /dev/disk/by-id/
     * 
     */
    public Optional<Output<String>> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }

    /**
     * A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_rsa and disk_encryption_key_raw may be set.
     * 
     */
    @Import(name="diskEncryptionKeyRaw")
    private @Nullable Output<String> diskEncryptionKeyRaw;

    /**
     * @return A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_rsa and disk_encryption_key_raw may be set.
     * 
     */
    public Optional<Output<String>> diskEncryptionKeyRaw() {
        return Optional.ofNullable(this.diskEncryptionKeyRaw);
    }

    /**
     * Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. Only one of kms_key_self_link, disk_encryption_key_rsa and disk_encryption_key_raw may be set.
     * 
     */
    @Import(name="diskEncryptionKeyRsa")
    private @Nullable Output<String> diskEncryptionKeyRsa;

    /**
     * @return Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. Only one of kms_key_self_link, disk_encryption_key_rsa and disk_encryption_key_raw may be set.
     * 
     */
    public Optional<Output<String>> diskEncryptionKeyRsa() {
        return Optional.ofNullable(this.diskEncryptionKeyRsa);
    }

    /**
     * The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
     * 
     */
    @Import(name="diskEncryptionKeySha256")
    private @Nullable Output<String> diskEncryptionKeySha256;

    /**
     * @return The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
     * 
     */
    public Optional<Output<String>> diskEncryptionKeySha256() {
        return Optional.ofNullable(this.diskEncryptionKeySha256);
    }

    /**
     * The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used
     * 
     */
    @Import(name="diskEncryptionServiceAccount")
    private @Nullable Output<String> diskEncryptionServiceAccount;

    /**
     * @return The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used
     * 
     */
    public Optional<Output<String>> diskEncryptionServiceAccount() {
        return Optional.ofNullable(this.diskEncryptionServiceAccount);
    }

    /**
     * The self_link of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_rsa and disk_encryption_key_raw may be set.
     * 
     */
    @Import(name="kmsKeySelfLink")
    private @Nullable Output<String> kmsKeySelfLink;

    /**
     * @return The self_link of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_rsa and disk_encryption_key_raw may be set.
     * 
     */
    public Optional<Output<String>> kmsKeySelfLink() {
        return Optional.ofNullable(this.kmsKeySelfLink);
    }

    /**
     * Read/write mode for the disk. One of &#34;READ_ONLY&#34; or &#34;READ_WRITE&#34;.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Read/write mode for the disk. One of &#34;READ_ONLY&#34; or &#34;READ_WRITE&#34;.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name or self_link of the disk attached to this instance.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return The name or self_link of the disk attached to this instance.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    private InstanceFromMachineImageAttachedDiskArgs() {}

    private InstanceFromMachineImageAttachedDiskArgs(InstanceFromMachineImageAttachedDiskArgs $) {
        this.deviceName = $.deviceName;
        this.diskEncryptionKeyRaw = $.diskEncryptionKeyRaw;
        this.diskEncryptionKeyRsa = $.diskEncryptionKeyRsa;
        this.diskEncryptionKeySha256 = $.diskEncryptionKeySha256;
        this.diskEncryptionServiceAccount = $.diskEncryptionServiceAccount;
        this.kmsKeySelfLink = $.kmsKeySelfLink;
        this.mode = $.mode;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceFromMachineImageAttachedDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceFromMachineImageAttachedDiskArgs $;

        public Builder() {
            $ = new InstanceFromMachineImageAttachedDiskArgs();
        }

        public Builder(InstanceFromMachineImageAttachedDiskArgs defaults) {
            $ = new InstanceFromMachineImageAttachedDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deviceName Name with which the attached disk is accessible under /dev/disk/by-id/
         * 
         * @return builder
         * 
         */
        public Builder deviceName(@Nullable Output<String> deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        /**
         * @param deviceName Name with which the attached disk is accessible under /dev/disk/by-id/
         * 
         * @return builder
         * 
         */
        public Builder deviceName(String deviceName) {
            return deviceName(Output.of(deviceName));
        }

        /**
         * @param diskEncryptionKeyRaw A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_rsa and disk_encryption_key_raw may be set.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeyRaw(@Nullable Output<String> diskEncryptionKeyRaw) {
            $.diskEncryptionKeyRaw = diskEncryptionKeyRaw;
            return this;
        }

        /**
         * @param diskEncryptionKeyRaw A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_rsa and disk_encryption_key_raw may be set.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeyRaw(String diskEncryptionKeyRaw) {
            return diskEncryptionKeyRaw(Output.of(diskEncryptionKeyRaw));
        }

        /**
         * @param diskEncryptionKeyRsa Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. Only one of kms_key_self_link, disk_encryption_key_rsa and disk_encryption_key_raw may be set.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeyRsa(@Nullable Output<String> diskEncryptionKeyRsa) {
            $.diskEncryptionKeyRsa = diskEncryptionKeyRsa;
            return this;
        }

        /**
         * @param diskEncryptionKeyRsa Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. Only one of kms_key_self_link, disk_encryption_key_rsa and disk_encryption_key_raw may be set.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeyRsa(String diskEncryptionKeyRsa) {
            return diskEncryptionKeyRsa(Output.of(diskEncryptionKeyRsa));
        }

        /**
         * @param diskEncryptionKeySha256 The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeySha256(@Nullable Output<String> diskEncryptionKeySha256) {
            $.diskEncryptionKeySha256 = diskEncryptionKeySha256;
            return this;
        }

        /**
         * @param diskEncryptionKeySha256 The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeySha256(String diskEncryptionKeySha256) {
            return diskEncryptionKeySha256(Output.of(diskEncryptionKeySha256));
        }

        /**
         * @param diskEncryptionServiceAccount The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionServiceAccount(@Nullable Output<String> diskEncryptionServiceAccount) {
            $.diskEncryptionServiceAccount = diskEncryptionServiceAccount;
            return this;
        }

        /**
         * @param diskEncryptionServiceAccount The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionServiceAccount(String diskEncryptionServiceAccount) {
            return diskEncryptionServiceAccount(Output.of(diskEncryptionServiceAccount));
        }

        /**
         * @param kmsKeySelfLink The self_link of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_rsa and disk_encryption_key_raw may be set.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeySelfLink(@Nullable Output<String> kmsKeySelfLink) {
            $.kmsKeySelfLink = kmsKeySelfLink;
            return this;
        }

        /**
         * @param kmsKeySelfLink The self_link of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_rsa and disk_encryption_key_raw may be set.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeySelfLink(String kmsKeySelfLink) {
            return kmsKeySelfLink(Output.of(kmsKeySelfLink));
        }

        /**
         * @param mode Read/write mode for the disk. One of &#34;READ_ONLY&#34; or &#34;READ_WRITE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Read/write mode for the disk. One of &#34;READ_ONLY&#34; or &#34;READ_WRITE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param source The name or self_link of the disk attached to this instance.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The name or self_link of the disk attached to this instance.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public InstanceFromMachineImageAttachedDiskArgs build() {
            if ($.source == null) {
                throw new MissingRequiredPropertyException("InstanceFromMachineImageAttachedDiskArgs", "source");
            }
            return $;
        }
    }

}
