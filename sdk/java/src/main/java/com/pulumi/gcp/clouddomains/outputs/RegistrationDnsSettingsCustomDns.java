// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddomains.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.clouddomains.outputs.RegistrationDnsSettingsCustomDnsDsRecord;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class RegistrationDnsSettingsCustomDns {
    /**
     * @return The list of DS records for this domain, which are used to enable DNSSEC. The domain&#39;s DNS provider can provide
     * the values to set here. If this field is empty, DNSSEC is disabled.
     * Structure is documented below.
     * 
     */
    private @Nullable List<RegistrationDnsSettingsCustomDnsDsRecord> dsRecords;
    /**
     * @return Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
     * name, with Unicode domain names expressed in Punycode format.
     * 
     */
    private List<String> nameServers;

    private RegistrationDnsSettingsCustomDns() {}
    /**
     * @return The list of DS records for this domain, which are used to enable DNSSEC. The domain&#39;s DNS provider can provide
     * the values to set here. If this field is empty, DNSSEC is disabled.
     * Structure is documented below.
     * 
     */
    public List<RegistrationDnsSettingsCustomDnsDsRecord> dsRecords() {
        return this.dsRecords == null ? List.of() : this.dsRecords;
    }
    /**
     * @return Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
     * name, with Unicode domain names expressed in Punycode format.
     * 
     */
    public List<String> nameServers() {
        return this.nameServers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistrationDnsSettingsCustomDns defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<RegistrationDnsSettingsCustomDnsDsRecord> dsRecords;
        private List<String> nameServers;
        public Builder() {}
        public Builder(RegistrationDnsSettingsCustomDns defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dsRecords = defaults.dsRecords;
    	      this.nameServers = defaults.nameServers;
        }

        @CustomType.Setter
        public Builder dsRecords(@Nullable List<RegistrationDnsSettingsCustomDnsDsRecord> dsRecords) {

            this.dsRecords = dsRecords;
            return this;
        }
        public Builder dsRecords(RegistrationDnsSettingsCustomDnsDsRecord... dsRecords) {
            return dsRecords(List.of(dsRecords));
        }
        @CustomType.Setter
        public Builder nameServers(List<String> nameServers) {
            if (nameServers == null) {
              throw new MissingRequiredPropertyException("RegistrationDnsSettingsCustomDns", "nameServers");
            }
            this.nameServers = nameServers;
            return this;
        }
        public Builder nameServers(String... nameServers) {
            return nameServers(List.of(nameServers));
        }
        public RegistrationDnsSettingsCustomDns build() {
            final var _resultValue = new RegistrationDnsSettingsCustomDns();
            _resultValue.dsRecords = dsRecords;
            _resultValue.nameServers = nameServers;
            return _resultValue;
        }
    }
}
