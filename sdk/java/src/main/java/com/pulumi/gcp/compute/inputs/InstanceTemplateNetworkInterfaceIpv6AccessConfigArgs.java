// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs Empty = new InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs();

    /**
     * The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. The field is output only, an IPv6 address from a subnetwork associated with the instance will be allocated dynamically.
     * 
     */
    @Import(name="externalIpv6")
    private @Nullable Output<String> externalIpv6;

    /**
     * @return The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. The field is output only, an IPv6 address from a subnetwork associated with the instance will be allocated dynamically.
     * 
     */
    public Optional<Output<String>> externalIpv6() {
        return Optional.ofNullable(this.externalIpv6);
    }

    /**
     * The prefix length of the external IPv6 range.
     * 
     */
    @Import(name="externalIpv6PrefixLength")
    private @Nullable Output<String> externalIpv6PrefixLength;

    /**
     * @return The prefix length of the external IPv6 range.
     * 
     */
    public Optional<Output<String>> externalIpv6PrefixLength() {
        return Optional.ofNullable(this.externalIpv6PrefixLength);
    }

    /**
     * The name of the instance template. If you leave
     * this blank, the provider will auto-generate a unique name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the instance template. If you leave
     * this blank, the provider will auto-generate a unique name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The service-level to be provided for IPv6 traffic when the subnet has an external subnet. Only PREMIUM tier is valid for IPv6
     * 
     */
    @Import(name="networkTier", required=true)
    private Output<String> networkTier;

    /**
     * @return The service-level to be provided for IPv6 traffic when the subnet has an external subnet. Only PREMIUM tier is valid for IPv6
     * 
     */
    public Output<String> networkTier() {
        return this.networkTier;
    }

    /**
     * The domain name to be used when creating DNSv6 records for the external IPv6 ranges.
     * 
     */
    @Import(name="publicPtrDomainName")
    private @Nullable Output<String> publicPtrDomainName;

    /**
     * @return The domain name to be used when creating DNSv6 records for the external IPv6 ranges.
     * 
     */
    public Optional<Output<String>> publicPtrDomainName() {
        return Optional.ofNullable(this.publicPtrDomainName);
    }

    private InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs() {}

    private InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs(InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs $) {
        this.externalIpv6 = $.externalIpv6;
        this.externalIpv6PrefixLength = $.externalIpv6PrefixLength;
        this.name = $.name;
        this.networkTier = $.networkTier;
        this.publicPtrDomainName = $.publicPtrDomainName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs $;

        public Builder() {
            $ = new InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs();
        }

        public Builder(InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs defaults) {
            $ = new InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalIpv6 The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. The field is output only, an IPv6 address from a subnetwork associated with the instance will be allocated dynamically.
         * 
         * @return builder
         * 
         */
        public Builder externalIpv6(@Nullable Output<String> externalIpv6) {
            $.externalIpv6 = externalIpv6;
            return this;
        }

        /**
         * @param externalIpv6 The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. The field is output only, an IPv6 address from a subnetwork associated with the instance will be allocated dynamically.
         * 
         * @return builder
         * 
         */
        public Builder externalIpv6(String externalIpv6) {
            return externalIpv6(Output.of(externalIpv6));
        }

        /**
         * @param externalIpv6PrefixLength The prefix length of the external IPv6 range.
         * 
         * @return builder
         * 
         */
        public Builder externalIpv6PrefixLength(@Nullable Output<String> externalIpv6PrefixLength) {
            $.externalIpv6PrefixLength = externalIpv6PrefixLength;
            return this;
        }

        /**
         * @param externalIpv6PrefixLength The prefix length of the external IPv6 range.
         * 
         * @return builder
         * 
         */
        public Builder externalIpv6PrefixLength(String externalIpv6PrefixLength) {
            return externalIpv6PrefixLength(Output.of(externalIpv6PrefixLength));
        }

        /**
         * @param name The name of the instance template. If you leave
         * this blank, the provider will auto-generate a unique name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the instance template. If you leave
         * this blank, the provider will auto-generate a unique name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkTier The service-level to be provided for IPv6 traffic when the subnet has an external subnet. Only PREMIUM tier is valid for IPv6
         * 
         * @return builder
         * 
         */
        public Builder networkTier(Output<String> networkTier) {
            $.networkTier = networkTier;
            return this;
        }

        /**
         * @param networkTier The service-level to be provided for IPv6 traffic when the subnet has an external subnet. Only PREMIUM tier is valid for IPv6
         * 
         * @return builder
         * 
         */
        public Builder networkTier(String networkTier) {
            return networkTier(Output.of(networkTier));
        }

        /**
         * @param publicPtrDomainName The domain name to be used when creating DNSv6 records for the external IPv6 ranges.
         * 
         * @return builder
         * 
         */
        public Builder publicPtrDomainName(@Nullable Output<String> publicPtrDomainName) {
            $.publicPtrDomainName = publicPtrDomainName;
            return this;
        }

        /**
         * @param publicPtrDomainName The domain name to be used when creating DNSv6 records for the external IPv6 ranges.
         * 
         * @return builder
         * 
         */
        public Builder publicPtrDomainName(String publicPtrDomainName) {
            return publicPtrDomainName(Output.of(publicPtrDomainName));
        }

        public InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs build() {
            if ($.networkTier == null) {
                throw new MissingRequiredPropertyException("InstanceTemplateNetworkInterfaceIpv6AccessConfigArgs", "networkTier");
            }
            return $;
        }
    }

}
