// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.essentialcontacts;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.essentialcontacts.inputs.DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DocumentAiWarehouseDocumentSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final DocumentAiWarehouseDocumentSchemaArgs Empty = new DocumentAiWarehouseDocumentSchemaArgs();

    /**
     * Name of the schema given by the user.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Name of the schema given by the user.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Tells whether the document is a folder or a typical document.
     * 
     */
    @Import(name="documentIsFolder")
    private @Nullable Output<Boolean> documentIsFolder;

    /**
     * @return Tells whether the document is a folder or a typical document.
     * 
     */
    public Optional<Output<Boolean>> documentIsFolder() {
        return Optional.ofNullable(this.documentIsFolder);
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The unique identifier of the project.
     * 
     */
    @Import(name="projectNumber", required=true)
    private Output<String> projectNumber;

    /**
     * @return The unique identifier of the project.
     * 
     */
    public Output<String> projectNumber() {
        return this.projectNumber;
    }

    /**
     * Defines the metadata for a schema property.
     * Structure is documented below.
     * 
     */
    @Import(name="propertyDefinitions", required=true)
    private Output<List<DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs>> propertyDefinitions;

    /**
     * @return Defines the metadata for a schema property.
     * Structure is documented below.
     * 
     */
    public Output<List<DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs>> propertyDefinitions() {
        return this.propertyDefinitions;
    }

    private DocumentAiWarehouseDocumentSchemaArgs() {}

    private DocumentAiWarehouseDocumentSchemaArgs(DocumentAiWarehouseDocumentSchemaArgs $) {
        this.displayName = $.displayName;
        this.documentIsFolder = $.documentIsFolder;
        this.location = $.location;
        this.projectNumber = $.projectNumber;
        this.propertyDefinitions = $.propertyDefinitions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DocumentAiWarehouseDocumentSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DocumentAiWarehouseDocumentSchemaArgs $;

        public Builder() {
            $ = new DocumentAiWarehouseDocumentSchemaArgs();
        }

        public Builder(DocumentAiWarehouseDocumentSchemaArgs defaults) {
            $ = new DocumentAiWarehouseDocumentSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName Name of the schema given by the user.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Name of the schema given by the user.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param documentIsFolder Tells whether the document is a folder or a typical document.
         * 
         * @return builder
         * 
         */
        public Builder documentIsFolder(@Nullable Output<Boolean> documentIsFolder) {
            $.documentIsFolder = documentIsFolder;
            return this;
        }

        /**
         * @param documentIsFolder Tells whether the document is a folder or a typical document.
         * 
         * @return builder
         * 
         */
        public Builder documentIsFolder(Boolean documentIsFolder) {
            return documentIsFolder(Output.of(documentIsFolder));
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param projectNumber The unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectNumber(Output<String> projectNumber) {
            $.projectNumber = projectNumber;
            return this;
        }

        /**
         * @param projectNumber The unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectNumber(String projectNumber) {
            return projectNumber(Output.of(projectNumber));
        }

        /**
         * @param propertyDefinitions Defines the metadata for a schema property.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder propertyDefinitions(Output<List<DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs>> propertyDefinitions) {
            $.propertyDefinitions = propertyDefinitions;
            return this;
        }

        /**
         * @param propertyDefinitions Defines the metadata for a schema property.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder propertyDefinitions(List<DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs> propertyDefinitions) {
            return propertyDefinitions(Output.of(propertyDefinitions));
        }

        /**
         * @param propertyDefinitions Defines the metadata for a schema property.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder propertyDefinitions(DocumentAiWarehouseDocumentSchemaPropertyDefinitionArgs... propertyDefinitions) {
            return propertyDefinitions(List.of(propertyDefinitions));
        }

        public DocumentAiWarehouseDocumentSchemaArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.projectNumber = Objects.requireNonNull($.projectNumber, "expected parameter 'projectNumber' to be non-null");
            $.propertyDefinitions = Objects.requireNonNull($.propertyDefinitions, "expected parameter 'propertyDefinitions' to be non-null");
            return $;
        }
    }

}
