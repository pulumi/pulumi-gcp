// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetHealthCheckGrpcTlsHealthCheck {
    /**
     * @return The gRPC service name for the health check.
     * The value of grpcServiceName has the following meanings by convention:
     *   - Empty serviceName means the overall status of all services at the backend.
     *   - Non-empty serviceName means the health of that gRPC service, as defined by the owner of the service.
     *     The grpcServiceName can only be ASCII.
     * 
     */
    private String grpcServiceName;
    /**
     * @return The port number for the health check request.
     * Must be specified if portSpecification is USE_FIXED_PORT. Valid values are 1 through 65535.
     * 
     */
    private Integer port;
    /**
     * @return Specifies how port is selected for health checking, can be one of the
     * following values:
     * 
     *   * &#39;USE_FIXED_PORT&#39;: The port number in &#39;port&#39; is used for health checking.
     * 
     *   * &#39;USE_NAMED_PORT&#39;: Not supported for GRPC with TLS health checking.
     * 
     *   * &#39;USE_SERVING_PORT&#39;: For NetworkEndpointGroup, the port specified for each
     *   network endpoint is used for health checking. For other backends, the
     *   port or named port specified in the Backend Service is used for health
     *   checking.
     * 
     * If not specified, gRPC with TLS health check follows behavior specified in the &#39;port&#39; field. Possible values: [&#34;USE_FIXED_PORT&#34;, &#34;USE_NAMED_PORT&#34;, &#34;USE_SERVING_PORT&#34;]
     * 
     */
    private String portSpecification;

    private GetHealthCheckGrpcTlsHealthCheck() {}
    /**
     * @return The gRPC service name for the health check.
     * The value of grpcServiceName has the following meanings by convention:
     *   - Empty serviceName means the overall status of all services at the backend.
     *   - Non-empty serviceName means the health of that gRPC service, as defined by the owner of the service.
     *     The grpcServiceName can only be ASCII.
     * 
     */
    public String grpcServiceName() {
        return this.grpcServiceName;
    }
    /**
     * @return The port number for the health check request.
     * Must be specified if portSpecification is USE_FIXED_PORT. Valid values are 1 through 65535.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Specifies how port is selected for health checking, can be one of the
     * following values:
     * 
     *   * &#39;USE_FIXED_PORT&#39;: The port number in &#39;port&#39; is used for health checking.
     * 
     *   * &#39;USE_NAMED_PORT&#39;: Not supported for GRPC with TLS health checking.
     * 
     *   * &#39;USE_SERVING_PORT&#39;: For NetworkEndpointGroup, the port specified for each
     *   network endpoint is used for health checking. For other backends, the
     *   port or named port specified in the Backend Service is used for health
     *   checking.
     * 
     * If not specified, gRPC with TLS health check follows behavior specified in the &#39;port&#39; field. Possible values: [&#34;USE_FIXED_PORT&#34;, &#34;USE_NAMED_PORT&#34;, &#34;USE_SERVING_PORT&#34;]
     * 
     */
    public String portSpecification() {
        return this.portSpecification;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHealthCheckGrpcTlsHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String grpcServiceName;
        private Integer port;
        private String portSpecification;
        public Builder() {}
        public Builder(GetHealthCheckGrpcTlsHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.grpcServiceName = defaults.grpcServiceName;
    	      this.port = defaults.port;
    	      this.portSpecification = defaults.portSpecification;
        }

        @CustomType.Setter
        public Builder grpcServiceName(String grpcServiceName) {
            if (grpcServiceName == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckGrpcTlsHealthCheck", "grpcServiceName");
            }
            this.grpcServiceName = grpcServiceName;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckGrpcTlsHealthCheck", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder portSpecification(String portSpecification) {
            if (portSpecification == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckGrpcTlsHealthCheck", "portSpecification");
            }
            this.portSpecification = portSpecification;
            return this;
        }
        public GetHealthCheckGrpcTlsHealthCheck build() {
            final var _resultValue = new GetHealthCheckGrpcTlsHealthCheck();
            _resultValue.grpcServiceName = grpcServiceName;
            _resultValue.port = port;
            _resultValue.portSpecification = portSpecification;
            return _resultValue;
        }
    }
}
