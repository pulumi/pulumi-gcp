// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.datastream.inputs.StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs Empty = new StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs();

    /**
     * Tables in the database.
     * Structure is documented below.
     * 
     */
    @Import(name="oracleTables")
    private @Nullable Output<List<StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs>> oracleTables;

    /**
     * @return Tables in the database.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs>>> oracleTables() {
        return Optional.ofNullable(this.oracleTables);
    }

    /**
     * Schema name.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return Schema name.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    private StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs() {}

    private StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs(StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs $) {
        this.oracleTables = $.oracleTables;
        this.schema = $.schema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs $;

        public Builder() {
            $ = new StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs();
        }

        public Builder(StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs defaults) {
            $ = new StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param oracleTables Tables in the database.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oracleTables(@Nullable Output<List<StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs>> oracleTables) {
            $.oracleTables = oracleTables;
            return this;
        }

        /**
         * @param oracleTables Tables in the database.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oracleTables(List<StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs> oracleTables) {
            return oracleTables(Output.of(oracleTables));
        }

        /**
         * @param oracleTables Tables in the database.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oracleTables(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs... oracleTables) {
            return oracleTables(List.of(oracleTables));
        }

        /**
         * @param schema Schema name.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema Schema name.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        public StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs build() {
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs", "schema");
            }
            return $;
        }
    }

}
