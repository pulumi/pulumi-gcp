// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.vertex.inputs.AiEndpointIamBindingConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiEndpointIamBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiEndpointIamBindingArgs Empty = new AiEndpointIamBindingArgs();

    @Import(name="condition")
    private @Nullable Output<AiEndpointIamBindingConditionArgs> condition;

    public Optional<Output<AiEndpointIamBindingConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    public Output<String> endpoint() {
        return this.endpoint;
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="members", required=true)
    private Output<List<String>> members;

    public Output<List<String>> members() {
        return this.members;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="role", required=true)
    private Output<String> role;

    public Output<String> role() {
        return this.role;
    }

    private AiEndpointIamBindingArgs() {}

    private AiEndpointIamBindingArgs(AiEndpointIamBindingArgs $) {
        this.condition = $.condition;
        this.endpoint = $.endpoint;
        this.location = $.location;
        this.members = $.members;
        this.project = $.project;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiEndpointIamBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiEndpointIamBindingArgs $;

        public Builder() {
            $ = new AiEndpointIamBindingArgs();
        }

        public Builder(AiEndpointIamBindingArgs defaults) {
            $ = new AiEndpointIamBindingArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<AiEndpointIamBindingConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(AiEndpointIamBindingConditionArgs condition) {
            return condition(Output.of(condition));
        }

        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder members(Output<List<String>> members) {
            $.members = members;
            return this;
        }

        public Builder members(List<String> members) {
            return members(Output.of(members));
        }

        public Builder members(String... members) {
            return members(List.of(members));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public AiEndpointIamBindingArgs build() {
            if ($.endpoint == null) {
                throw new MissingRequiredPropertyException("AiEndpointIamBindingArgs", "endpoint");
            }
            if ($.members == null) {
                throw new MissingRequiredPropertyException("AiEndpointIamBindingArgs", "members");
            }
            if ($.role == null) {
                throw new MissingRequiredPropertyException("AiEndpointIamBindingArgs", "role");
            }
            return $;
        }
    }

}
