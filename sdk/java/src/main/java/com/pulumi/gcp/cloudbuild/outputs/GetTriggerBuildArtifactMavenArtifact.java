// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTriggerBuildArtifactMavenArtifact {
    /**
     * @return Maven artifactId value used when uploading the artifact to Artifact Registry.
     * 
     */
    private String artifactId;
    /**
     * @return Maven groupId value used when uploading the artifact to Artifact Registry.
     * 
     */
    private String groupId;
    /**
     * @return Path to an artifact in the build&#39;s workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
     * 
     */
    private String path;
    /**
     * @return Artifact Registry repository, in the form &#34;https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY&#34;
     * 
     * Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
     * 
     */
    private String repository;
    /**
     * @return Maven version value used when uploading the artifact to Artifact Registry.
     * 
     */
    private String version;

    private GetTriggerBuildArtifactMavenArtifact() {}
    /**
     * @return Maven artifactId value used when uploading the artifact to Artifact Registry.
     * 
     */
    public String artifactId() {
        return this.artifactId;
    }
    /**
     * @return Maven groupId value used when uploading the artifact to Artifact Registry.
     * 
     */
    public String groupId() {
        return this.groupId;
    }
    /**
     * @return Path to an artifact in the build&#39;s workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Artifact Registry repository, in the form &#34;https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY&#34;
     * 
     * Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
     * 
     */
    public String repository() {
        return this.repository;
    }
    /**
     * @return Maven version value used when uploading the artifact to Artifact Registry.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTriggerBuildArtifactMavenArtifact defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String artifactId;
        private String groupId;
        private String path;
        private String repository;
        private String version;
        public Builder() {}
        public Builder(GetTriggerBuildArtifactMavenArtifact defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactId = defaults.artifactId;
    	      this.groupId = defaults.groupId;
    	      this.path = defaults.path;
    	      this.repository = defaults.repository;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder artifactId(String artifactId) {
            if (artifactId == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildArtifactMavenArtifact", "artifactId");
            }
            this.artifactId = artifactId;
            return this;
        }
        @CustomType.Setter
        public Builder groupId(String groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildArtifactMavenArtifact", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildArtifactMavenArtifact", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder repository(String repository) {
            if (repository == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildArtifactMavenArtifact", "repository");
            }
            this.repository = repository;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildArtifactMavenArtifact", "version");
            }
            this.version = version;
            return this;
        }
        public GetTriggerBuildArtifactMavenArtifact build() {
            final var _resultValue = new GetTriggerBuildArtifactMavenArtifact();
            _resultValue.artifactId = artifactId;
            _resultValue.groupId = groupId;
            _resultValue.path = path;
            _resultValue.repository = repository;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
