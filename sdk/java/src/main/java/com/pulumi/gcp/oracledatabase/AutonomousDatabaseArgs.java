// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.oracledatabase.inputs.AutonomousDatabasePropertiesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutonomousDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutonomousDatabaseArgs Empty = new AutonomousDatabaseArgs();

    /**
     * The password for the default ADMIN user.
     * 
     */
    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    /**
     * @return The password for the default ADMIN user.
     * 
     */
    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    /**
     * The ID of the Autonomous Database to create. This value is restricted
     * to (^a-z?$) and must be a maximum of 63
     * characters in length. The value must start with a letter and end with
     * a letter or a number.
     * 
     */
    @Import(name="autonomousDatabaseId", required=true)
    private Output<String> autonomousDatabaseId;

    /**
     * @return The ID of the Autonomous Database to create. This value is restricted
     * to (^a-z?$) and must be a maximum of 63
     * characters in length. The value must start with a letter and end with
     * a letter or a number.
     * 
     */
    public Output<String> autonomousDatabaseId() {
        return this.autonomousDatabaseId;
    }

    /**
     * The subnet CIDR range for the Autonmous Database.
     * 
     */
    @Import(name="cidr")
    private @Nullable Output<String> cidr;

    /**
     * @return The subnet CIDR range for the Autonmous Database.
     * 
     */
    public Optional<Output<String>> cidr() {
        return Optional.ofNullable(this.cidr);
    }

    /**
     * The name of the Autonomous Database. The database name must be unique in
     * the project. The name must begin with a letter and can
     * contain a maximum of 30 alphanumeric characters.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The name of the Autonomous Database. The database name must be unique in
     * the project. The name must begin with a letter and can
     * contain a maximum of 30 alphanumeric characters.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    @Import(name="deletionProtection")
    private @Nullable Output<Boolean> deletionProtection;

    public Optional<Output<Boolean>> deletionProtection() {
        return Optional.ofNullable(this.deletionProtection);
    }

    /**
     * The display name for the Autonomous Database. The name does not have to
     * be unique within your project.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name for the Autonomous Database. The name does not have to
     * be unique within your project.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The labels or tags associated with the Autonomous Database.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels or tags associated with the Autonomous Database.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. See documentation for resource type `oracledatabase.googleapis.com/AutonomousDatabaseBackup`.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. See documentation for resource type `oracledatabase.googleapis.com/AutonomousDatabaseBackup`.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The name of the VPC network used by the Autonomous Database.
     * Format: projects/{project}/global/networks/{network}
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The name of the VPC network used by the Autonomous Database.
     * Format: projects/{project}/global/networks/{network}
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * The name of the OdbNetwork associated with the Autonomous Database.
     * Format:
     * projects/{project}/locations/{location}/odbNetworks/{odb_network}
     * It is optional but if specified, this should match the parent ODBNetwork of
     * the odb_subnet and backup_odb_subnet.
     * 
     */
    @Import(name="odbNetwork")
    private @Nullable Output<String> odbNetwork;

    /**
     * @return The name of the OdbNetwork associated with the Autonomous Database.
     * Format:
     * projects/{project}/locations/{location}/odbNetworks/{odb_network}
     * It is optional but if specified, this should match the parent ODBNetwork of
     * the odb_subnet and backup_odb_subnet.
     * 
     */
    public Optional<Output<String>> odbNetwork() {
        return Optional.ofNullable(this.odbNetwork);
    }

    /**
     * The name of the OdbSubnet associated with the Autonomous Database for
     * IP allocation. Format:
     * projects/{project}/locations/{location}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}
     * 
     */
    @Import(name="odbSubnet")
    private @Nullable Output<String> odbSubnet;

    /**
     * @return The name of the OdbSubnet associated with the Autonomous Database for
     * IP allocation. Format:
     * projects/{project}/locations/{location}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}
     * 
     */
    public Optional<Output<String>> odbSubnet() {
        return Optional.ofNullable(this.odbSubnet);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The properties of an Autonomous Database.
     * Structure is documented below.
     * 
     */
    @Import(name="properties", required=true)
    private Output<AutonomousDatabasePropertiesArgs> properties;

    /**
     * @return The properties of an Autonomous Database.
     * Structure is documented below.
     * 
     */
    public Output<AutonomousDatabasePropertiesArgs> properties() {
        return this.properties;
    }

    private AutonomousDatabaseArgs() {}

    private AutonomousDatabaseArgs(AutonomousDatabaseArgs $) {
        this.adminPassword = $.adminPassword;
        this.autonomousDatabaseId = $.autonomousDatabaseId;
        this.cidr = $.cidr;
        this.database = $.database;
        this.deletionProtection = $.deletionProtection;
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.location = $.location;
        this.network = $.network;
        this.odbNetwork = $.odbNetwork;
        this.odbSubnet = $.odbSubnet;
        this.project = $.project;
        this.properties = $.properties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutonomousDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutonomousDatabaseArgs $;

        public Builder() {
            $ = new AutonomousDatabaseArgs();
        }

        public Builder(AutonomousDatabaseArgs defaults) {
            $ = new AutonomousDatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminPassword The password for the default ADMIN user.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword The password for the default ADMIN user.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param autonomousDatabaseId The ID of the Autonomous Database to create. This value is restricted
         * to (^a-z?$) and must be a maximum of 63
         * characters in length. The value must start with a letter and end with
         * a letter or a number.
         * 
         * @return builder
         * 
         */
        public Builder autonomousDatabaseId(Output<String> autonomousDatabaseId) {
            $.autonomousDatabaseId = autonomousDatabaseId;
            return this;
        }

        /**
         * @param autonomousDatabaseId The ID of the Autonomous Database to create. This value is restricted
         * to (^a-z?$) and must be a maximum of 63
         * characters in length. The value must start with a letter and end with
         * a letter or a number.
         * 
         * @return builder
         * 
         */
        public Builder autonomousDatabaseId(String autonomousDatabaseId) {
            return autonomousDatabaseId(Output.of(autonomousDatabaseId));
        }

        /**
         * @param cidr The subnet CIDR range for the Autonmous Database.
         * 
         * @return builder
         * 
         */
        public Builder cidr(@Nullable Output<String> cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param cidr The subnet CIDR range for the Autonmous Database.
         * 
         * @return builder
         * 
         */
        public Builder cidr(String cidr) {
            return cidr(Output.of(cidr));
        }

        /**
         * @param database The name of the Autonomous Database. The database name must be unique in
         * the project. The name must begin with a letter and can
         * contain a maximum of 30 alphanumeric characters.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The name of the Autonomous Database. The database name must be unique in
         * the project. The name must begin with a letter and can
         * contain a maximum of 30 alphanumeric characters.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        public Builder deletionProtection(@Nullable Output<Boolean> deletionProtection) {
            $.deletionProtection = deletionProtection;
            return this;
        }

        public Builder deletionProtection(Boolean deletionProtection) {
            return deletionProtection(Output.of(deletionProtection));
        }

        /**
         * @param displayName The display name for the Autonomous Database. The name does not have to
         * be unique within your project.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name for the Autonomous Database. The name does not have to
         * be unique within your project.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param labels The labels or tags associated with the Autonomous Database.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels or tags associated with the Autonomous Database.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. See documentation for resource type `oracledatabase.googleapis.com/AutonomousDatabaseBackup`.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. See documentation for resource type `oracledatabase.googleapis.com/AutonomousDatabaseBackup`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param network The name of the VPC network used by the Autonomous Database.
         * Format: projects/{project}/global/networks/{network}
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The name of the VPC network used by the Autonomous Database.
         * Format: projects/{project}/global/networks/{network}
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param odbNetwork The name of the OdbNetwork associated with the Autonomous Database.
         * Format:
         * projects/{project}/locations/{location}/odbNetworks/{odb_network}
         * It is optional but if specified, this should match the parent ODBNetwork of
         * the odb_subnet and backup_odb_subnet.
         * 
         * @return builder
         * 
         */
        public Builder odbNetwork(@Nullable Output<String> odbNetwork) {
            $.odbNetwork = odbNetwork;
            return this;
        }

        /**
         * @param odbNetwork The name of the OdbNetwork associated with the Autonomous Database.
         * Format:
         * projects/{project}/locations/{location}/odbNetworks/{odb_network}
         * It is optional but if specified, this should match the parent ODBNetwork of
         * the odb_subnet and backup_odb_subnet.
         * 
         * @return builder
         * 
         */
        public Builder odbNetwork(String odbNetwork) {
            return odbNetwork(Output.of(odbNetwork));
        }

        /**
         * @param odbSubnet The name of the OdbSubnet associated with the Autonomous Database for
         * IP allocation. Format:
         * projects/{project}/locations/{location}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}
         * 
         * @return builder
         * 
         */
        public Builder odbSubnet(@Nullable Output<String> odbSubnet) {
            $.odbSubnet = odbSubnet;
            return this;
        }

        /**
         * @param odbSubnet The name of the OdbSubnet associated with the Autonomous Database for
         * IP allocation. Format:
         * projects/{project}/locations/{location}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}
         * 
         * @return builder
         * 
         */
        public Builder odbSubnet(String odbSubnet) {
            return odbSubnet(Output.of(odbSubnet));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param properties The properties of an Autonomous Database.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder properties(Output<AutonomousDatabasePropertiesArgs> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties The properties of an Autonomous Database.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder properties(AutonomousDatabasePropertiesArgs properties) {
            return properties(Output.of(properties));
        }

        public AutonomousDatabaseArgs build() {
            if ($.autonomousDatabaseId == null) {
                throw new MissingRequiredPropertyException("AutonomousDatabaseArgs", "autonomousDatabaseId");
            }
            if ($.database == null) {
                throw new MissingRequiredPropertyException("AutonomousDatabaseArgs", "database");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("AutonomousDatabaseArgs", "location");
            }
            if ($.properties == null) {
                throw new MissingRequiredPropertyException("AutonomousDatabaseArgs", "properties");
            }
            return $;
        }
    }

}
