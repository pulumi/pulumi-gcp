// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.managedkafka;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TopicArgs extends com.pulumi.resources.ResourceArgs {

    public static final TopicArgs Empty = new TopicArgs();

    /**
     * The cluster name.
     * 
     */
    @Import(name="cluster", required=true)
    private Output<String> cluster;

    /**
     * @return The cluster name.
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }

    /**
     * Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property name, for example: `cleanup.policy=compact`, `compression.type=producer`.
     * 
     */
    @Import(name="configs")
    private @Nullable Output<Map<String,String>> configs;

    /**
     * @return Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property name, for example: `cleanup.policy=compact`, `compression.type=producer`.
     * 
     */
    public Optional<Output<Map<String,String>>> configs() {
        return Optional.ofNullable(this.configs);
    }

    /**
     * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it. Increasing partitions for a topic that uses a key might change how messages are distributed.
     * 
     */
    @Import(name="partitionCount")
    private @Nullable Output<Integer> partitionCount;

    /**
     * @return The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it. Increasing partitions for a topic that uses a key might change how messages are distributed.
     * 
     */
    public Optional<Output<Integer>> partitionCount() {
        return Optional.ofNullable(this.partitionCount);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
     * 
     */
    @Import(name="replicationFactor", required=true)
    private Output<Integer> replicationFactor;

    /**
     * @return The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
     * 
     */
    public Output<Integer> replicationFactor() {
        return this.replicationFactor;
    }

    /**
     * The ID to use for the topic, which will become the final component of the topic&#39;s name. This value is structured like: `my-topic-name`.
     * 
     * ***
     * 
     */
    @Import(name="topicId", required=true)
    private Output<String> topicId;

    /**
     * @return The ID to use for the topic, which will become the final component of the topic&#39;s name. This value is structured like: `my-topic-name`.
     * 
     * ***
     * 
     */
    public Output<String> topicId() {
        return this.topicId;
    }

    private TopicArgs() {}

    private TopicArgs(TopicArgs $) {
        this.cluster = $.cluster;
        this.configs = $.configs;
        this.location = $.location;
        this.partitionCount = $.partitionCount;
        this.project = $.project;
        this.replicationFactor = $.replicationFactor;
        this.topicId = $.topicId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TopicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TopicArgs $;

        public Builder() {
            $ = new TopicArgs();
        }

        public Builder(TopicArgs defaults) {
            $ = new TopicArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cluster The cluster name.
         * 
         * @return builder
         * 
         */
        public Builder cluster(Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster The cluster name.
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param configs Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property name, for example: `cleanup.policy=compact`, `compression.type=producer`.
         * 
         * @return builder
         * 
         */
        public Builder configs(@Nullable Output<Map<String,String>> configs) {
            $.configs = configs;
            return this;
        }

        /**
         * @param configs Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property name, for example: `cleanup.policy=compact`, `compression.type=producer`.
         * 
         * @return builder
         * 
         */
        public Builder configs(Map<String,String> configs) {
            return configs(Output.of(configs));
        }

        /**
         * @param location ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param partitionCount The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it. Increasing partitions for a topic that uses a key might change how messages are distributed.
         * 
         * @return builder
         * 
         */
        public Builder partitionCount(@Nullable Output<Integer> partitionCount) {
            $.partitionCount = partitionCount;
            return this;
        }

        /**
         * @param partitionCount The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it. Increasing partitions for a topic that uses a key might change how messages are distributed.
         * 
         * @return builder
         * 
         */
        public Builder partitionCount(Integer partitionCount) {
            return partitionCount(Output.of(partitionCount));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param replicationFactor The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
         * 
         * @return builder
         * 
         */
        public Builder replicationFactor(Output<Integer> replicationFactor) {
            $.replicationFactor = replicationFactor;
            return this;
        }

        /**
         * @param replicationFactor The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
         * 
         * @return builder
         * 
         */
        public Builder replicationFactor(Integer replicationFactor) {
            return replicationFactor(Output.of(replicationFactor));
        }

        /**
         * @param topicId The ID to use for the topic, which will become the final component of the topic&#39;s name. This value is structured like: `my-topic-name`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder topicId(Output<String> topicId) {
            $.topicId = topicId;
            return this;
        }

        /**
         * @param topicId The ID to use for the topic, which will become the final component of the topic&#39;s name. This value is structured like: `my-topic-name`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder topicId(String topicId) {
            return topicId(Output.of(topicId));
        }

        public TopicArgs build() {
            if ($.cluster == null) {
                throw new MissingRequiredPropertyException("TopicArgs", "cluster");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("TopicArgs", "location");
            }
            if ($.replicationFactor == null) {
                throw new MissingRequiredPropertyException("TopicArgs", "replicationFactor");
            }
            if ($.topicId == null) {
                throw new MissingRequiredPropertyException("TopicArgs", "topicId");
            }
            return $;
        }
    }

}
