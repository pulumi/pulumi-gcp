// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudrunv2.outputs.WorkerPoolTemplateContainerEnv;
import com.pulumi.gcp.cloudrunv2.outputs.WorkerPoolTemplateContainerResources;
import com.pulumi.gcp.cloudrunv2.outputs.WorkerPoolTemplateContainerVolumeMount;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkerPoolTemplateContainer {
    /**
     * @return Arguments to the entrypoint. The docker image&#39;s CMD is used if this is not provided. Variable references are not supported in Cloud Run.
     * 
     */
    private @Nullable List<String> args;
    /**
     * @return Entrypoint array. Not executed within a shell. The docker image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    private @Nullable List<String> commands;
    /**
     * @return Containers which should be started before this container. If specified the container will wait to start until all containers with the listed names are healthy.
     * 
     */
    private @Nullable List<String> dependsOns;
    /**
     * @return List of environment variables to set in the container.
     * Structure is documented below.
     * 
     */
    private @Nullable List<WorkerPoolTemplateContainerEnv> envs;
    /**
     * @return URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
     * 
     */
    private String image;
    /**
     * @return Name of the container specified as a DNS_LABEL.
     * 
     */
    private @Nullable String name;
    /**
     * @return Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     * Structure is documented below.
     * 
     */
    private @Nullable WorkerPoolTemplateContainerResources resources;
    /**
     * @return Volume to mount into the container&#39;s filesystem.
     * Structure is documented below.
     * 
     */
    private @Nullable List<WorkerPoolTemplateContainerVolumeMount> volumeMounts;
    /**
     * @return Container&#39;s working directory. If not specified, the container runtime&#39;s default will be used, which might be configured in the container image.
     * 
     */
    private @Nullable String workingDir;

    private WorkerPoolTemplateContainer() {}
    /**
     * @return Arguments to the entrypoint. The docker image&#39;s CMD is used if this is not provided. Variable references are not supported in Cloud Run.
     * 
     */
    public List<String> args() {
        return this.args == null ? List.of() : this.args;
    }
    /**
     * @return Entrypoint array. Not executed within a shell. The docker image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    public List<String> commands() {
        return this.commands == null ? List.of() : this.commands;
    }
    /**
     * @return Containers which should be started before this container. If specified the container will wait to start until all containers with the listed names are healthy.
     * 
     */
    public List<String> dependsOns() {
        return this.dependsOns == null ? List.of() : this.dependsOns;
    }
    /**
     * @return List of environment variables to set in the container.
     * Structure is documented below.
     * 
     */
    public List<WorkerPoolTemplateContainerEnv> envs() {
        return this.envs == null ? List.of() : this.envs;
    }
    /**
     * @return URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return Name of the container specified as a DNS_LABEL.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     * Structure is documented below.
     * 
     */
    public Optional<WorkerPoolTemplateContainerResources> resources() {
        return Optional.ofNullable(this.resources);
    }
    /**
     * @return Volume to mount into the container&#39;s filesystem.
     * Structure is documented below.
     * 
     */
    public List<WorkerPoolTemplateContainerVolumeMount> volumeMounts() {
        return this.volumeMounts == null ? List.of() : this.volumeMounts;
    }
    /**
     * @return Container&#39;s working directory. If not specified, the container runtime&#39;s default will be used, which might be configured in the container image.
     * 
     */
    public Optional<String> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkerPoolTemplateContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> args;
        private @Nullable List<String> commands;
        private @Nullable List<String> dependsOns;
        private @Nullable List<WorkerPoolTemplateContainerEnv> envs;
        private String image;
        private @Nullable String name;
        private @Nullable WorkerPoolTemplateContainerResources resources;
        private @Nullable List<WorkerPoolTemplateContainerVolumeMount> volumeMounts;
        private @Nullable String workingDir;
        public Builder() {}
        public Builder(WorkerPoolTemplateContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.commands = defaults.commands;
    	      this.dependsOns = defaults.dependsOns;
    	      this.envs = defaults.envs;
    	      this.image = defaults.image;
    	      this.name = defaults.name;
    	      this.resources = defaults.resources;
    	      this.volumeMounts = defaults.volumeMounts;
    	      this.workingDir = defaults.workingDir;
        }

        @CustomType.Setter
        public Builder args(@Nullable List<String> args) {

            this.args = args;
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        @CustomType.Setter
        public Builder commands(@Nullable List<String> commands) {

            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder dependsOns(@Nullable List<String> dependsOns) {

            this.dependsOns = dependsOns;
            return this;
        }
        public Builder dependsOns(String... dependsOns) {
            return dependsOns(List.of(dependsOns));
        }
        @CustomType.Setter
        public Builder envs(@Nullable List<WorkerPoolTemplateContainerEnv> envs) {

            this.envs = envs;
            return this;
        }
        public Builder envs(WorkerPoolTemplateContainerEnv... envs) {
            return envs(List.of(envs));
        }
        @CustomType.Setter
        public Builder image(String image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("WorkerPoolTemplateContainer", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resources(@Nullable WorkerPoolTemplateContainerResources resources) {

            this.resources = resources;
            return this;
        }
        @CustomType.Setter
        public Builder volumeMounts(@Nullable List<WorkerPoolTemplateContainerVolumeMount> volumeMounts) {

            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(WorkerPoolTemplateContainerVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        @CustomType.Setter
        public Builder workingDir(@Nullable String workingDir) {

            this.workingDir = workingDir;
            return this;
        }
        public WorkerPoolTemplateContainer build() {
            final var _resultValue = new WorkerPoolTemplateContainer();
            _resultValue.args = args;
            _resultValue.commands = commands;
            _resultValue.dependsOns = dependsOns;
            _resultValue.envs = envs;
            _resultValue.image = image;
            _resultValue.name = name;
            _resultValue.resources = resources;
            _resultValue.volumeMounts = volumeMounts;
            _resultValue.workingDir = workingDir;
            return _resultValue;
        }
    }
}
