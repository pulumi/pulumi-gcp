// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupInventoryFilterArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs Empty = new V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs();

    /**
     * List of inventory filters for the resource group.
     * The resources in this resource group are applied to the target VM if it
     * satisfies at least one of the following inventory filters.
     * For example, to apply this resource group to VMs running either `RHEL` or
     * `CentOS` operating systems, specify 2 items for the list with following
     * values:
     * inventory_filters[0].os_short_name=&#39;rhel&#39; and
     * inventory_filters[1].os_short_name=&#39;centos&#39;
     * If the list is empty, this resource group will be applied to the target
     * VM unconditionally.
     * Structure is documented below.
     * 
     */
    @Import(name="inventoryFilters")
    private @Nullable Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupInventoryFilterArgs>> inventoryFilters;

    /**
     * @return List of inventory filters for the resource group.
     * The resources in this resource group are applied to the target VM if it
     * satisfies at least one of the following inventory filters.
     * For example, to apply this resource group to VMs running either `RHEL` or
     * `CentOS` operating systems, specify 2 items for the list with following
     * values:
     * inventory_filters[0].os_short_name=&#39;rhel&#39; and
     * inventory_filters[1].os_short_name=&#39;centos&#39;
     * If the list is empty, this resource group will be applied to the target
     * VM unconditionally.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupInventoryFilterArgs>>> inventoryFilters() {
        return Optional.ofNullable(this.inventoryFilters);
    }

    /**
     * Required. List of resources configured for this resource group.
     * The resources are executed in the exact order specified here.
     * Structure is documented below.
     * 
     */
    @Import(name="resources", required=true)
    private Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArgs>> resources;

    /**
     * @return Required. List of resources configured for this resource group.
     * The resources are executed in the exact order specified here.
     * Structure is documented below.
     * 
     */
    public Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArgs>> resources() {
        return this.resources;
    }

    private V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs() {}

    private V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs(V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs $) {
        this.inventoryFilters = $.inventoryFilters;
        this.resources = $.resources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs();
        }

        public Builder(V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs defaults) {
            $ = new V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param inventoryFilters List of inventory filters for the resource group.
         * The resources in this resource group are applied to the target VM if it
         * satisfies at least one of the following inventory filters.
         * For example, to apply this resource group to VMs running either `RHEL` or
         * `CentOS` operating systems, specify 2 items for the list with following
         * values:
         * inventory_filters[0].os_short_name=&#39;rhel&#39; and
         * inventory_filters[1].os_short_name=&#39;centos&#39;
         * If the list is empty, this resource group will be applied to the target
         * VM unconditionally.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inventoryFilters(@Nullable Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupInventoryFilterArgs>> inventoryFilters) {
            $.inventoryFilters = inventoryFilters;
            return this;
        }

        /**
         * @param inventoryFilters List of inventory filters for the resource group.
         * The resources in this resource group are applied to the target VM if it
         * satisfies at least one of the following inventory filters.
         * For example, to apply this resource group to VMs running either `RHEL` or
         * `CentOS` operating systems, specify 2 items for the list with following
         * values:
         * inventory_filters[0].os_short_name=&#39;rhel&#39; and
         * inventory_filters[1].os_short_name=&#39;centos&#39;
         * If the list is empty, this resource group will be applied to the target
         * VM unconditionally.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inventoryFilters(List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupInventoryFilterArgs> inventoryFilters) {
            return inventoryFilters(Output.of(inventoryFilters));
        }

        /**
         * @param inventoryFilters List of inventory filters for the resource group.
         * The resources in this resource group are applied to the target VM if it
         * satisfies at least one of the following inventory filters.
         * For example, to apply this resource group to VMs running either `RHEL` or
         * `CentOS` operating systems, specify 2 items for the list with following
         * values:
         * inventory_filters[0].os_short_name=&#39;rhel&#39; and
         * inventory_filters[1].os_short_name=&#39;centos&#39;
         * If the list is empty, this resource group will be applied to the target
         * VM unconditionally.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inventoryFilters(V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupInventoryFilterArgs... inventoryFilters) {
            return inventoryFilters(List.of(inventoryFilters));
        }

        /**
         * @param resources Required. List of resources configured for this resource group.
         * The resources are executed in the exact order specified here.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resources(Output<List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArgs>> resources) {
            $.resources = resources;
            return this;
        }

        /**
         * @param resources Required. List of resources configured for this resource group.
         * The resources are executed in the exact order specified here.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resources(List<V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArgs> resources) {
            return resources(Output.of(resources));
        }

        /**
         * @param resources Required. List of resources configured for this resource group.
         * The resources are executed in the exact order specified here.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resources(V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArgs... resources) {
            return resources(List.of(resources));
        }

        public V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs build() {
            if ($.resources == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForOrganizationOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs", "resources");
            }
            return $;
        }
    }

}
