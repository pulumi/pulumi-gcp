// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.integrationconnectors.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionEventingConfigAuthConfigAdditionalVariableArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionEventingConfigAuthConfigUserPasswordArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionEventingConfigAuthConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionEventingConfigAuthConfigArgs Empty = new ConnectionEventingConfigAuthConfigArgs();

    /**
     * List containing additional auth configs.
     * Structure is documented below.
     * 
     */
    @Import(name="additionalVariables")
    private @Nullable Output<List<ConnectionEventingConfigAuthConfigAdditionalVariableArgs>> additionalVariables;

    /**
     * @return List containing additional auth configs.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ConnectionEventingConfigAuthConfigAdditionalVariableArgs>>> additionalVariables() {
        return Optional.ofNullable(this.additionalVariables);
    }

    /**
     * The type of authentication configured.
     * 
     */
    @Import(name="authKey")
    private @Nullable Output<String> authKey;

    /**
     * @return The type of authentication configured.
     * 
     */
    public Optional<Output<String>> authKey() {
        return Optional.ofNullable(this.authKey);
    }

    /**
     * authType of the Connection
     * Possible values are: `USER_PASSWORD`.
     * 
     */
    @Import(name="authType", required=true)
    private Output<String> authType;

    /**
     * @return authType of the Connection
     * Possible values are: `USER_PASSWORD`.
     * 
     */
    public Output<String> authType() {
        return this.authType;
    }

    /**
     * User password for Authentication.
     * Structure is documented below.
     * 
     */
    @Import(name="userPassword", required=true)
    private Output<ConnectionEventingConfigAuthConfigUserPasswordArgs> userPassword;

    /**
     * @return User password for Authentication.
     * Structure is documented below.
     * 
     */
    public Output<ConnectionEventingConfigAuthConfigUserPasswordArgs> userPassword() {
        return this.userPassword;
    }

    private ConnectionEventingConfigAuthConfigArgs() {}

    private ConnectionEventingConfigAuthConfigArgs(ConnectionEventingConfigAuthConfigArgs $) {
        this.additionalVariables = $.additionalVariables;
        this.authKey = $.authKey;
        this.authType = $.authType;
        this.userPassword = $.userPassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionEventingConfigAuthConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionEventingConfigAuthConfigArgs $;

        public Builder() {
            $ = new ConnectionEventingConfigAuthConfigArgs();
        }

        public Builder(ConnectionEventingConfigAuthConfigArgs defaults) {
            $ = new ConnectionEventingConfigAuthConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalVariables List containing additional auth configs.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder additionalVariables(@Nullable Output<List<ConnectionEventingConfigAuthConfigAdditionalVariableArgs>> additionalVariables) {
            $.additionalVariables = additionalVariables;
            return this;
        }

        /**
         * @param additionalVariables List containing additional auth configs.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder additionalVariables(List<ConnectionEventingConfigAuthConfigAdditionalVariableArgs> additionalVariables) {
            return additionalVariables(Output.of(additionalVariables));
        }

        /**
         * @param additionalVariables List containing additional auth configs.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder additionalVariables(ConnectionEventingConfigAuthConfigAdditionalVariableArgs... additionalVariables) {
            return additionalVariables(List.of(additionalVariables));
        }

        /**
         * @param authKey The type of authentication configured.
         * 
         * @return builder
         * 
         */
        public Builder authKey(@Nullable Output<String> authKey) {
            $.authKey = authKey;
            return this;
        }

        /**
         * @param authKey The type of authentication configured.
         * 
         * @return builder
         * 
         */
        public Builder authKey(String authKey) {
            return authKey(Output.of(authKey));
        }

        /**
         * @param authType authType of the Connection
         * Possible values are: `USER_PASSWORD`.
         * 
         * @return builder
         * 
         */
        public Builder authType(Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType authType of the Connection
         * Possible values are: `USER_PASSWORD`.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param userPassword User password for Authentication.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder userPassword(Output<ConnectionEventingConfigAuthConfigUserPasswordArgs> userPassword) {
            $.userPassword = userPassword;
            return this;
        }

        /**
         * @param userPassword User password for Authentication.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder userPassword(ConnectionEventingConfigAuthConfigUserPasswordArgs userPassword) {
            return userPassword(Output.of(userPassword));
        }

        public ConnectionEventingConfigAuthConfigArgs build() {
            if ($.authType == null) {
                throw new MissingRequiredPropertyException("ConnectionEventingConfigAuthConfigArgs", "authType");
            }
            if ($.userPassword == null) {
                throw new MissingRequiredPropertyException("ConnectionEventingConfigAuthConfigArgs", "userPassword");
            }
            return $;
        }
    }

}
