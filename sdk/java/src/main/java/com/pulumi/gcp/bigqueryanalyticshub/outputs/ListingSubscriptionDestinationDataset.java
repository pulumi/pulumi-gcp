// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigqueryanalyticshub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigqueryanalyticshub.outputs.ListingSubscriptionDestinationDatasetDatasetReference;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ListingSubscriptionDestinationDataset {
    /**
     * @return A reference that identifies the destination dataset.
     * Structure is documented below.
     * 
     */
    private ListingSubscriptionDestinationDatasetDatasetReference datasetReference;
    /**
     * @return A user-friendly description of the dataset.
     * 
     */
    private @Nullable String description;
    /**
     * @return A descriptive name for the dataset.
     * 
     */
    private @Nullable String friendlyName;
    /**
     * @return The labels associated with this dataset. You can use these to
     * organize and group your datasets.
     * 
     */
    private @Nullable Map<String,String> labels;
    /**
     * @return The geographic location where the dataset should reside.
     * See https://cloud.google.com/bigquery/docs/locations for supported locations.
     * 
     */
    private String location;

    private ListingSubscriptionDestinationDataset() {}
    /**
     * @return A reference that identifies the destination dataset.
     * Structure is documented below.
     * 
     */
    public ListingSubscriptionDestinationDatasetDatasetReference datasetReference() {
        return this.datasetReference;
    }
    /**
     * @return A user-friendly description of the dataset.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A descriptive name for the dataset.
     * 
     */
    public Optional<String> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }
    /**
     * @return The labels associated with this dataset. You can use these to
     * organize and group your datasets.
     * 
     */
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return The geographic location where the dataset should reside.
     * See https://cloud.google.com/bigquery/docs/locations for supported locations.
     * 
     */
    public String location() {
        return this.location;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListingSubscriptionDestinationDataset defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ListingSubscriptionDestinationDatasetDatasetReference datasetReference;
        private @Nullable String description;
        private @Nullable String friendlyName;
        private @Nullable Map<String,String> labels;
        private String location;
        public Builder() {}
        public Builder(ListingSubscriptionDestinationDataset defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasetReference = defaults.datasetReference;
    	      this.description = defaults.description;
    	      this.friendlyName = defaults.friendlyName;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
        }

        @CustomType.Setter
        public Builder datasetReference(ListingSubscriptionDestinationDatasetDatasetReference datasetReference) {
            if (datasetReference == null) {
              throw new MissingRequiredPropertyException("ListingSubscriptionDestinationDataset", "datasetReference");
            }
            this.datasetReference = datasetReference;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder friendlyName(@Nullable String friendlyName) {

            this.friendlyName = friendlyName;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,String> labels) {

            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("ListingSubscriptionDestinationDataset", "location");
            }
            this.location = location;
            return this;
        }
        public ListingSubscriptionDestinationDataset build() {
            final var _resultValue = new ListingSubscriptionDestinationDataset();
            _resultValue.datasetReference = datasetReference;
            _resultValue.description = description;
            _resultValue.friendlyName = friendlyName;
            _resultValue.labels = labels;
            _resultValue.location = location;
            return _resultValue;
        }
    }
}
