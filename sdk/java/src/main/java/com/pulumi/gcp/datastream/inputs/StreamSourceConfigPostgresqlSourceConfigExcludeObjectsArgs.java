// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.datastream.inputs.StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs;
import java.util.List;
import java.util.Objects;


public final class StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs Empty = new StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs();

    /**
     * PostgreSQL schemas on the server
     * Structure is documented below.
     * 
     */
    @Import(name="postgresqlSchemas", required=true)
    private Output<List<StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs>> postgresqlSchemas;

    /**
     * @return PostgreSQL schemas on the server
     * Structure is documented below.
     * 
     */
    public Output<List<StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs>> postgresqlSchemas() {
        return this.postgresqlSchemas;
    }

    private StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs() {}

    private StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs $) {
        this.postgresqlSchemas = $.postgresqlSchemas;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs $;

        public Builder() {
            $ = new StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs();
        }

        public Builder(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs defaults) {
            $ = new StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param postgresqlSchemas PostgreSQL schemas on the server
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder postgresqlSchemas(Output<List<StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs>> postgresqlSchemas) {
            $.postgresqlSchemas = postgresqlSchemas;
            return this;
        }

        /**
         * @param postgresqlSchemas PostgreSQL schemas on the server
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder postgresqlSchemas(List<StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs> postgresqlSchemas) {
            return postgresqlSchemas(Output.of(postgresqlSchemas));
        }

        /**
         * @param postgresqlSchemas PostgreSQL schemas on the server
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder postgresqlSchemas(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs... postgresqlSchemas) {
            return postgresqlSchemas(List.of(postgresqlSchemas));
        }

        public StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs build() {
            if ($.postgresqlSchemas == null) {
                throw new MissingRequiredPropertyException("StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs", "postgresqlSchemas");
            }
            return $;
        }
    }

}
