// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddomains.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistrationYearlyPrice {
    /**
     * @return The three-letter currency code defined in ISO 4217.
     * 
     */
    private @Nullable String currencyCode;
    /**
     * @return The whole units of the amount. For example if currencyCode is &#34;USD&#34;, then 1 unit is one US dollar.
     * 
     */
    private @Nullable String units;

    private RegistrationYearlyPrice() {}
    /**
     * @return The three-letter currency code defined in ISO 4217.
     * 
     */
    public Optional<String> currencyCode() {
        return Optional.ofNullable(this.currencyCode);
    }
    /**
     * @return The whole units of the amount. For example if currencyCode is &#34;USD&#34;, then 1 unit is one US dollar.
     * 
     */
    public Optional<String> units() {
        return Optional.ofNullable(this.units);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistrationYearlyPrice defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String currencyCode;
        private @Nullable String units;
        public Builder() {}
        public Builder(RegistrationYearlyPrice defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.currencyCode = defaults.currencyCode;
    	      this.units = defaults.units;
        }

        @CustomType.Setter
        public Builder currencyCode(@Nullable String currencyCode) {

            this.currencyCode = currencyCode;
            return this;
        }
        @CustomType.Setter
        public Builder units(@Nullable String units) {

            this.units = units;
            return this;
        }
        public RegistrationYearlyPrice build() {
            final var _resultValue = new RegistrationYearlyPrice();
            _resultValue.currencyCode = currencyCode;
            _resultValue.units = units;
            return _resultValue;
        }
    }
}
