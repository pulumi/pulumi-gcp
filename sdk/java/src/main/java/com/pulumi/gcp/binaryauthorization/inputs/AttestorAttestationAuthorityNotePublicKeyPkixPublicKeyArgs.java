// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.binaryauthorization.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs Empty = new AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs();

    /**
     * A PEM-encoded public key, as described in
     * `https://tools.ietf.org/html/rfc7468#section-13`
     * 
     */
    @Import(name="publicKeyPem")
    private @Nullable Output<String> publicKeyPem;

    /**
     * @return A PEM-encoded public key, as described in
     * `https://tools.ietf.org/html/rfc7468#section-13`
     * 
     */
    public Optional<Output<String>> publicKeyPem() {
        return Optional.ofNullable(this.publicKeyPem);
    }

    /**
     * The signature algorithm used to verify a message against
     * a signature using this key. These signature algorithm must
     * match the structure and any object identifiers encoded in
     * publicKeyPem (i.e. this algorithm must match that of the
     * public key).
     * 
     */
    @Import(name="signatureAlgorithm")
    private @Nullable Output<String> signatureAlgorithm;

    /**
     * @return The signature algorithm used to verify a message against
     * a signature using this key. These signature algorithm must
     * match the structure and any object identifiers encoded in
     * publicKeyPem (i.e. this algorithm must match that of the
     * public key).
     * 
     */
    public Optional<Output<String>> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    private AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs() {}

    private AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs(AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs $) {
        this.publicKeyPem = $.publicKeyPem;
        this.signatureAlgorithm = $.signatureAlgorithm;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs $;

        public Builder() {
            $ = new AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs();
        }

        public Builder(AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs defaults) {
            $ = new AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param publicKeyPem A PEM-encoded public key, as described in
         * `https://tools.ietf.org/html/rfc7468#section-13`
         * 
         * @return builder
         * 
         */
        public Builder publicKeyPem(@Nullable Output<String> publicKeyPem) {
            $.publicKeyPem = publicKeyPem;
            return this;
        }

        /**
         * @param publicKeyPem A PEM-encoded public key, as described in
         * `https://tools.ietf.org/html/rfc7468#section-13`
         * 
         * @return builder
         * 
         */
        public Builder publicKeyPem(String publicKeyPem) {
            return publicKeyPem(Output.of(publicKeyPem));
        }

        /**
         * @param signatureAlgorithm The signature algorithm used to verify a message against
         * a signature using this key. These signature algorithm must
         * match the structure and any object identifiers encoded in
         * publicKeyPem (i.e. this algorithm must match that of the
         * public key).
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(@Nullable Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm The signature algorithm used to verify a message against
         * a signature using this key. These signature algorithm must
         * match the structure and any object identifiers encoded in
         * publicKeyPem (i.e. this algorithm must match that of the
         * public key).
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        public AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs build() {
            return $;
        }
    }

}
