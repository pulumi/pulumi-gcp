// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatabaseInstanceClone {
    private String allocatedIpRange;
    private List<String> databaseNames;
    private String pointInTime;
    private String preferredZone;
    private String sourceInstanceName;

    private GetDatabaseInstanceClone() {}
    public String allocatedIpRange() {
        return this.allocatedIpRange;
    }
    public List<String> databaseNames() {
        return this.databaseNames;
    }
    public String pointInTime() {
        return this.pointInTime;
    }
    public String preferredZone() {
        return this.preferredZone;
    }
    public String sourceInstanceName() {
        return this.sourceInstanceName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstanceClone defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String allocatedIpRange;
        private List<String> databaseNames;
        private String pointInTime;
        private String preferredZone;
        private String sourceInstanceName;
        public Builder() {}
        public Builder(GetDatabaseInstanceClone defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedIpRange = defaults.allocatedIpRange;
    	      this.databaseNames = defaults.databaseNames;
    	      this.pointInTime = defaults.pointInTime;
    	      this.preferredZone = defaults.preferredZone;
    	      this.sourceInstanceName = defaults.sourceInstanceName;
        }

        @CustomType.Setter
        public Builder allocatedIpRange(String allocatedIpRange) {
            if (allocatedIpRange == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceClone", "allocatedIpRange");
            }
            this.allocatedIpRange = allocatedIpRange;
            return this;
        }
        @CustomType.Setter
        public Builder databaseNames(List<String> databaseNames) {
            if (databaseNames == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceClone", "databaseNames");
            }
            this.databaseNames = databaseNames;
            return this;
        }
        public Builder databaseNames(String... databaseNames) {
            return databaseNames(List.of(databaseNames));
        }
        @CustomType.Setter
        public Builder pointInTime(String pointInTime) {
            if (pointInTime == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceClone", "pointInTime");
            }
            this.pointInTime = pointInTime;
            return this;
        }
        @CustomType.Setter
        public Builder preferredZone(String preferredZone) {
            if (preferredZone == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceClone", "preferredZone");
            }
            this.preferredZone = preferredZone;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInstanceName(String sourceInstanceName) {
            if (sourceInstanceName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceClone", "sourceInstanceName");
            }
            this.sourceInstanceName = sourceInstanceName;
            return this;
        }
        public GetDatabaseInstanceClone build() {
            final var _resultValue = new GetDatabaseInstanceClone();
            _resultValue.allocatedIpRange = allocatedIpRange;
            _resultValue.databaseNames = databaseNames;
            _resultValue.pointInTime = pointInTime;
            _resultValue.preferredZone = preferredZone;
            _resultValue.sourceInstanceName = sourceInstanceName;
            return _resultValue;
        }
    }
}
