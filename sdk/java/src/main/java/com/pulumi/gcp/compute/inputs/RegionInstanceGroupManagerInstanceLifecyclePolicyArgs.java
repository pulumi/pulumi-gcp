// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionInstanceGroupManagerInstanceLifecyclePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionInstanceGroupManagerInstanceLifecyclePolicyArgs Empty = new RegionInstanceGroupManagerInstanceLifecyclePolicyArgs();

    /**
     * , Default behavior for all instance or health check failures. Valid options are: `REPAIR`, `DO_NOTHING`. If `DO_NOTHING` then instances will not be repaired. If `REPAIR` (default), then failed instances will be repaired.
     * 
     */
    @Import(name="defaultActionOnFailure")
    private @Nullable Output<String> defaultActionOnFailure;

    /**
     * @return , Default behavior for all instance or health check failures. Valid options are: `REPAIR`, `DO_NOTHING`. If `DO_NOTHING` then instances will not be repaired. If `REPAIR` (default), then failed instances will be repaired.
     * 
     */
    public Optional<Output<String>> defaultActionOnFailure() {
        return Optional.ofNullable(this.defaultActionOnFailure);
    }

    /**
     * , Specifies whether to apply the group&#39;s latest configuration when repairing a VM. Valid options are: `YES`, `NO`. If `YES` and you updated the group&#39;s instance template or per-instance configurations after the VM was created, then these changes are applied when VM is repaired. If `NO` (default), then updates are applied in accordance with the group&#39;s update policy type.
     * 
     */
    @Import(name="forceUpdateOnRepair")
    private @Nullable Output<String> forceUpdateOnRepair;

    /**
     * @return , Specifies whether to apply the group&#39;s latest configuration when repairing a VM. Valid options are: `YES`, `NO`. If `YES` and you updated the group&#39;s instance template or per-instance configurations after the VM was created, then these changes are applied when VM is repaired. If `NO` (default), then updates are applied in accordance with the group&#39;s update policy type.
     * 
     */
    public Optional<Output<String>> forceUpdateOnRepair() {
        return Optional.ofNullable(this.forceUpdateOnRepair);
    }

    private RegionInstanceGroupManagerInstanceLifecyclePolicyArgs() {}

    private RegionInstanceGroupManagerInstanceLifecyclePolicyArgs(RegionInstanceGroupManagerInstanceLifecyclePolicyArgs $) {
        this.defaultActionOnFailure = $.defaultActionOnFailure;
        this.forceUpdateOnRepair = $.forceUpdateOnRepair;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionInstanceGroupManagerInstanceLifecyclePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionInstanceGroupManagerInstanceLifecyclePolicyArgs $;

        public Builder() {
            $ = new RegionInstanceGroupManagerInstanceLifecyclePolicyArgs();
        }

        public Builder(RegionInstanceGroupManagerInstanceLifecyclePolicyArgs defaults) {
            $ = new RegionInstanceGroupManagerInstanceLifecyclePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultActionOnFailure , Default behavior for all instance or health check failures. Valid options are: `REPAIR`, `DO_NOTHING`. If `DO_NOTHING` then instances will not be repaired. If `REPAIR` (default), then failed instances will be repaired.
         * 
         * @return builder
         * 
         */
        public Builder defaultActionOnFailure(@Nullable Output<String> defaultActionOnFailure) {
            $.defaultActionOnFailure = defaultActionOnFailure;
            return this;
        }

        /**
         * @param defaultActionOnFailure , Default behavior for all instance or health check failures. Valid options are: `REPAIR`, `DO_NOTHING`. If `DO_NOTHING` then instances will not be repaired. If `REPAIR` (default), then failed instances will be repaired.
         * 
         * @return builder
         * 
         */
        public Builder defaultActionOnFailure(String defaultActionOnFailure) {
            return defaultActionOnFailure(Output.of(defaultActionOnFailure));
        }

        /**
         * @param forceUpdateOnRepair , Specifies whether to apply the group&#39;s latest configuration when repairing a VM. Valid options are: `YES`, `NO`. If `YES` and you updated the group&#39;s instance template or per-instance configurations after the VM was created, then these changes are applied when VM is repaired. If `NO` (default), then updates are applied in accordance with the group&#39;s update policy type.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdateOnRepair(@Nullable Output<String> forceUpdateOnRepair) {
            $.forceUpdateOnRepair = forceUpdateOnRepair;
            return this;
        }

        /**
         * @param forceUpdateOnRepair , Specifies whether to apply the group&#39;s latest configuration when repairing a VM. Valid options are: `YES`, `NO`. If `YES` and you updated the group&#39;s instance template or per-instance configurations after the VM was created, then these changes are applied when VM is repaired. If `NO` (default), then updates are applied in accordance with the group&#39;s update policy type.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdateOnRepair(String forceUpdateOnRepair) {
            return forceUpdateOnRepair(Output.of(forceUpdateOnRepair));
        }

        public RegionInstanceGroupManagerInstanceLifecyclePolicyArgs build() {
            return $;
        }
    }

}
