// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.apigee.inputs.DeveloperAppAttributeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeveloperAppArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeveloperAppArgs Empty = new DeveloperAppArgs();

    /**
     * List of API products associated with the developer app.
     * 
     */
    @Import(name="apiProducts")
    private @Nullable Output<List<String>> apiProducts;

    /**
     * @return List of API products associated with the developer app.
     * 
     */
    public Optional<Output<List<String>>> apiProducts() {
        return Optional.ofNullable(this.apiProducts);
    }

    /**
     * Developer app family.
     * 
     */
    @Import(name="appFamily")
    private @Nullable Output<String> appFamily;

    /**
     * @return Developer app family.
     * 
     */
    public Optional<Output<String>> appFamily() {
        return Optional.ofNullable(this.appFamily);
    }

    /**
     * Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<List<DeveloperAppAttributeArgs>> attributes;

    /**
     * @return Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DeveloperAppAttributeArgs>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Callback URL used by OAuth 2.0 authorization servers to communicate
     * authorization codes back to developer apps.
     * 
     */
    @Import(name="callbackUrl", required=true)
    private Output<String> callbackUrl;

    /**
     * @return Callback URL used by OAuth 2.0 authorization servers to communicate
     * authorization codes back to developer apps.
     * 
     */
    public Output<String> callbackUrl() {
        return this.callbackUrl;
    }

    /**
     * Email address of the developer.
     * This value is used to uniquely identify the developer in Apigee hybrid.
     * Note that the email address has to be in lowercase only.
     * 
     */
    @Import(name="developerEmail", required=true)
    private Output<String> developerEmail;

    /**
     * @return Email address of the developer.
     * This value is used to uniquely identify the developer in Apigee hybrid.
     * Note that the email address has to be in lowercase only.
     * 
     */
    public Output<String> developerEmail() {
        return this.developerEmail;
    }

    /**
     * Expiration time, in milliseconds, for the consumer key that is generated
     * for the developer app. If not set or left to the default value of -1,
     * the API key never expires. The expiration time can&#39;t be updated after it is set.
     * 
     */
    @Import(name="keyExpiresIn")
    private @Nullable Output<String> keyExpiresIn;

    /**
     * @return Expiration time, in milliseconds, for the consumer key that is generated
     * for the developer app. If not set or left to the default value of -1,
     * the API key never expires. The expiration time can&#39;t be updated after it is set.
     * 
     */
    public Optional<Output<String>> keyExpiresIn() {
        return Optional.ofNullable(this.keyExpiresIn);
    }

    /**
     * Name of the developer app.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the developer app.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Scopes to apply to the developer app.
     * The specified scopes must already exist for the API product that
     * you associate with the developer app.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return Scopes to apply to the developer app.
     * The specified scopes must already exist for the API product that
     * you associate with the developer app.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * Status of the credential. Valid values include approved or revoked.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the credential. Valid values include approved or revoked.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private DeveloperAppArgs() {}

    private DeveloperAppArgs(DeveloperAppArgs $) {
        this.apiProducts = $.apiProducts;
        this.appFamily = $.appFamily;
        this.attributes = $.attributes;
        this.callbackUrl = $.callbackUrl;
        this.developerEmail = $.developerEmail;
        this.keyExpiresIn = $.keyExpiresIn;
        this.name = $.name;
        this.orgId = $.orgId;
        this.scopes = $.scopes;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeveloperAppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeveloperAppArgs $;

        public Builder() {
            $ = new DeveloperAppArgs();
        }

        public Builder(DeveloperAppArgs defaults) {
            $ = new DeveloperAppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiProducts List of API products associated with the developer app.
         * 
         * @return builder
         * 
         */
        public Builder apiProducts(@Nullable Output<List<String>> apiProducts) {
            $.apiProducts = apiProducts;
            return this;
        }

        /**
         * @param apiProducts List of API products associated with the developer app.
         * 
         * @return builder
         * 
         */
        public Builder apiProducts(List<String> apiProducts) {
            return apiProducts(Output.of(apiProducts));
        }

        /**
         * @param apiProducts List of API products associated with the developer app.
         * 
         * @return builder
         * 
         */
        public Builder apiProducts(String... apiProducts) {
            return apiProducts(List.of(apiProducts));
        }

        /**
         * @param appFamily Developer app family.
         * 
         * @return builder
         * 
         */
        public Builder appFamily(@Nullable Output<String> appFamily) {
            $.appFamily = appFamily;
            return this;
        }

        /**
         * @param appFamily Developer app family.
         * 
         * @return builder
         * 
         */
        public Builder appFamily(String appFamily) {
            return appFamily(Output.of(appFamily));
        }

        /**
         * @param attributes Developer attributes (name/value pairs). The custom attribute limit is 18.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<List<DeveloperAppAttributeArgs>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Developer attributes (name/value pairs). The custom attribute limit is 18.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(List<DeveloperAppAttributeArgs> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param attributes Developer attributes (name/value pairs). The custom attribute limit is 18.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(DeveloperAppAttributeArgs... attributes) {
            return attributes(List.of(attributes));
        }

        /**
         * @param callbackUrl Callback URL used by OAuth 2.0 authorization servers to communicate
         * authorization codes back to developer apps.
         * 
         * @return builder
         * 
         */
        public Builder callbackUrl(Output<String> callbackUrl) {
            $.callbackUrl = callbackUrl;
            return this;
        }

        /**
         * @param callbackUrl Callback URL used by OAuth 2.0 authorization servers to communicate
         * authorization codes back to developer apps.
         * 
         * @return builder
         * 
         */
        public Builder callbackUrl(String callbackUrl) {
            return callbackUrl(Output.of(callbackUrl));
        }

        /**
         * @param developerEmail Email address of the developer.
         * This value is used to uniquely identify the developer in Apigee hybrid.
         * Note that the email address has to be in lowercase only.
         * 
         * @return builder
         * 
         */
        public Builder developerEmail(Output<String> developerEmail) {
            $.developerEmail = developerEmail;
            return this;
        }

        /**
         * @param developerEmail Email address of the developer.
         * This value is used to uniquely identify the developer in Apigee hybrid.
         * Note that the email address has to be in lowercase only.
         * 
         * @return builder
         * 
         */
        public Builder developerEmail(String developerEmail) {
            return developerEmail(Output.of(developerEmail));
        }

        /**
         * @param keyExpiresIn Expiration time, in milliseconds, for the consumer key that is generated
         * for the developer app. If not set or left to the default value of -1,
         * the API key never expires. The expiration time can&#39;t be updated after it is set.
         * 
         * @return builder
         * 
         */
        public Builder keyExpiresIn(@Nullable Output<String> keyExpiresIn) {
            $.keyExpiresIn = keyExpiresIn;
            return this;
        }

        /**
         * @param keyExpiresIn Expiration time, in milliseconds, for the consumer key that is generated
         * for the developer app. If not set or left to the default value of -1,
         * the API key never expires. The expiration time can&#39;t be updated after it is set.
         * 
         * @return builder
         * 
         */
        public Builder keyExpiresIn(String keyExpiresIn) {
            return keyExpiresIn(Output.of(keyExpiresIn));
        }

        /**
         * @param name Name of the developer app.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the developer app.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The Apigee Organization associated with the Apigee instance,
         * in the format `organizations/{{org_name}}`.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The Apigee Organization associated with the Apigee instance,
         * in the format `organizations/{{org_name}}`.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param scopes Scopes to apply to the developer app.
         * The specified scopes must already exist for the API product that
         * you associate with the developer app.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Scopes to apply to the developer app.
         * The specified scopes must already exist for the API product that
         * you associate with the developer app.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Scopes to apply to the developer app.
         * The specified scopes must already exist for the API product that
         * you associate with the developer app.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param status Status of the credential. Valid values include approved or revoked.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the credential. Valid values include approved or revoked.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public DeveloperAppArgs build() {
            if ($.callbackUrl == null) {
                throw new MissingRequiredPropertyException("DeveloperAppArgs", "callbackUrl");
            }
            if ($.developerEmail == null) {
                throw new MissingRequiredPropertyException("DeveloperAppArgs", "developerEmail");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("DeveloperAppArgs", "orgId");
            }
            return $;
        }
    }

}
