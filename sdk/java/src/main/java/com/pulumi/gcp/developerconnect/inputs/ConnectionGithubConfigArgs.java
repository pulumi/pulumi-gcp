// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubConfigAuthorizerCredentialArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionGithubConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionGithubConfigArgs Empty = new ConnectionGithubConfigArgs();

    /**
     * Optional. GitHub App installation id.
     * 
     */
    @Import(name="appInstallationId")
    private @Nullable Output<String> appInstallationId;

    /**
     * @return Optional. GitHub App installation id.
     * 
     */
    public Optional<Output<String>> appInstallationId() {
        return Optional.ofNullable(this.appInstallationId);
    }

    /**
     * Represents an OAuth token of the account that authorized the Connection,and
     * associated metadata.
     * Structure is documented below.
     * 
     */
    @Import(name="authorizerCredential")
    private @Nullable Output<ConnectionGithubConfigAuthorizerCredentialArgs> authorizerCredential;

    /**
     * @return Represents an OAuth token of the account that authorized the Connection,and
     * associated metadata.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionGithubConfigAuthorizerCredentialArgs>> authorizerCredential() {
        return Optional.ofNullable(this.authorizerCredential);
    }

    /**
     * Required. Immutable. The GitHub Application that was installed to
     * the GitHub user or organization.
     * Possible values:
     * GIT_HUB_APP_UNSPECIFIED
     * DEVELOPER_CONNECT
     * FIREBASE&#34;
     * 
     */
    @Import(name="githubApp", required=true)
    private Output<String> githubApp;

    /**
     * @return Required. Immutable. The GitHub Application that was installed to
     * the GitHub user or organization.
     * Possible values:
     * GIT_HUB_APP_UNSPECIFIED
     * DEVELOPER_CONNECT
     * FIREBASE&#34;
     * 
     */
    public Output<String> githubApp() {
        return this.githubApp;
    }

    /**
     * (Output)
     * Output only. The URI to navigate to in order to manage the installation
     * associated with this GitHubConfig.
     * 
     */
    @Import(name="installationUri")
    private @Nullable Output<String> installationUri;

    /**
     * @return (Output)
     * Output only. The URI to navigate to in order to manage the installation
     * associated with this GitHubConfig.
     * 
     */
    public Optional<Output<String>> installationUri() {
        return Optional.ofNullable(this.installationUri);
    }

    private ConnectionGithubConfigArgs() {}

    private ConnectionGithubConfigArgs(ConnectionGithubConfigArgs $) {
        this.appInstallationId = $.appInstallationId;
        this.authorizerCredential = $.authorizerCredential;
        this.githubApp = $.githubApp;
        this.installationUri = $.installationUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionGithubConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionGithubConfigArgs $;

        public Builder() {
            $ = new ConnectionGithubConfigArgs();
        }

        public Builder(ConnectionGithubConfigArgs defaults) {
            $ = new ConnectionGithubConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appInstallationId Optional. GitHub App installation id.
         * 
         * @return builder
         * 
         */
        public Builder appInstallationId(@Nullable Output<String> appInstallationId) {
            $.appInstallationId = appInstallationId;
            return this;
        }

        /**
         * @param appInstallationId Optional. GitHub App installation id.
         * 
         * @return builder
         * 
         */
        public Builder appInstallationId(String appInstallationId) {
            return appInstallationId(Output.of(appInstallationId));
        }

        /**
         * @param authorizerCredential Represents an OAuth token of the account that authorized the Connection,and
         * associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authorizerCredential(@Nullable Output<ConnectionGithubConfigAuthorizerCredentialArgs> authorizerCredential) {
            $.authorizerCredential = authorizerCredential;
            return this;
        }

        /**
         * @param authorizerCredential Represents an OAuth token of the account that authorized the Connection,and
         * associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authorizerCredential(ConnectionGithubConfigAuthorizerCredentialArgs authorizerCredential) {
            return authorizerCredential(Output.of(authorizerCredential));
        }

        /**
         * @param githubApp Required. Immutable. The GitHub Application that was installed to
         * the GitHub user or organization.
         * Possible values:
         * GIT_HUB_APP_UNSPECIFIED
         * DEVELOPER_CONNECT
         * FIREBASE&#34;
         * 
         * @return builder
         * 
         */
        public Builder githubApp(Output<String> githubApp) {
            $.githubApp = githubApp;
            return this;
        }

        /**
         * @param githubApp Required. Immutable. The GitHub Application that was installed to
         * the GitHub user or organization.
         * Possible values:
         * GIT_HUB_APP_UNSPECIFIED
         * DEVELOPER_CONNECT
         * FIREBASE&#34;
         * 
         * @return builder
         * 
         */
        public Builder githubApp(String githubApp) {
            return githubApp(Output.of(githubApp));
        }

        /**
         * @param installationUri (Output)
         * Output only. The URI to navigate to in order to manage the installation
         * associated with this GitHubConfig.
         * 
         * @return builder
         * 
         */
        public Builder installationUri(@Nullable Output<String> installationUri) {
            $.installationUri = installationUri;
            return this;
        }

        /**
         * @param installationUri (Output)
         * Output only. The URI to navigate to in order to manage the installation
         * associated with this GitHubConfig.
         * 
         * @return builder
         * 
         */
        public Builder installationUri(String installationUri) {
            return installationUri(Output.of(installationUri));
        }

        public ConnectionGithubConfigArgs build() {
            if ($.githubApp == null) {
                throw new MissingRequiredPropertyException("ConnectionGithubConfigArgs", "githubApp");
            }
            return $;
        }
    }

}
