// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class AlertPolicyConditionConditionSqlRowCountTestArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertPolicyConditionConditionSqlRowCountTestArgs Empty = new AlertPolicyConditionConditionSqlRowCountTestArgs();

    /**
     * The comparison to apply between the time
     * series (indicated by filter and aggregation)
     * and the threshold (indicated by
     * threshold_value). The comparison is applied
     * on each time series, with the time series on
     * the left-hand side and the threshold on the
     * right-hand side. Only COMPARISON_LT and
     * COMPARISON_GT are supported currently.
     * Possible values are: `COMPARISON_GT`, `COMPARISON_GE`, `COMPARISON_LT`, `COMPARISON_LE`, `COMPARISON_EQ`, `COMPARISON_NE`.
     * 
     */
    @Import(name="comparison", required=true)
    private Output<String> comparison;

    /**
     * @return The comparison to apply between the time
     * series (indicated by filter and aggregation)
     * and the threshold (indicated by
     * threshold_value). The comparison is applied
     * on each time series, with the time series on
     * the left-hand side and the threshold on the
     * right-hand side. Only COMPARISON_LT and
     * COMPARISON_GT are supported currently.
     * Possible values are: `COMPARISON_GT`, `COMPARISON_GE`, `COMPARISON_LT`, `COMPARISON_LE`, `COMPARISON_EQ`, `COMPARISON_NE`.
     * 
     */
    public Output<String> comparison() {
        return this.comparison;
    }

    /**
     * The value against which to compare the row count.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Integer> threshold;

    /**
     * @return The value against which to compare the row count.
     * 
     */
    public Output<Integer> threshold() {
        return this.threshold;
    }

    private AlertPolicyConditionConditionSqlRowCountTestArgs() {}

    private AlertPolicyConditionConditionSqlRowCountTestArgs(AlertPolicyConditionConditionSqlRowCountTestArgs $) {
        this.comparison = $.comparison;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertPolicyConditionConditionSqlRowCountTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertPolicyConditionConditionSqlRowCountTestArgs $;

        public Builder() {
            $ = new AlertPolicyConditionConditionSqlRowCountTestArgs();
        }

        public Builder(AlertPolicyConditionConditionSqlRowCountTestArgs defaults) {
            $ = new AlertPolicyConditionConditionSqlRowCountTestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comparison The comparison to apply between the time
         * series (indicated by filter and aggregation)
         * and the threshold (indicated by
         * threshold_value). The comparison is applied
         * on each time series, with the time series on
         * the left-hand side and the threshold on the
         * right-hand side. Only COMPARISON_LT and
         * COMPARISON_GT are supported currently.
         * Possible values are: `COMPARISON_GT`, `COMPARISON_GE`, `COMPARISON_LT`, `COMPARISON_LE`, `COMPARISON_EQ`, `COMPARISON_NE`.
         * 
         * @return builder
         * 
         */
        public Builder comparison(Output<String> comparison) {
            $.comparison = comparison;
            return this;
        }

        /**
         * @param comparison The comparison to apply between the time
         * series (indicated by filter and aggregation)
         * and the threshold (indicated by
         * threshold_value). The comparison is applied
         * on each time series, with the time series on
         * the left-hand side and the threshold on the
         * right-hand side. Only COMPARISON_LT and
         * COMPARISON_GT are supported currently.
         * Possible values are: `COMPARISON_GT`, `COMPARISON_GE`, `COMPARISON_LT`, `COMPARISON_LE`, `COMPARISON_EQ`, `COMPARISON_NE`.
         * 
         * @return builder
         * 
         */
        public Builder comparison(String comparison) {
            return comparison(Output.of(comparison));
        }

        /**
         * @param threshold The value against which to compare the row count.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The value against which to compare the row count.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        public AlertPolicyConditionConditionSqlRowCountTestArgs build() {
            if ($.comparison == null) {
                throw new MissingRequiredPropertyException("AlertPolicyConditionConditionSqlRowCountTestArgs", "comparison");
            }
            if ($.threshold == null) {
                throw new MissingRequiredPropertyException("AlertPolicyConditionConditionSqlRowCountTestArgs", "threshold");
            }
            return $;
        }
    }

}
