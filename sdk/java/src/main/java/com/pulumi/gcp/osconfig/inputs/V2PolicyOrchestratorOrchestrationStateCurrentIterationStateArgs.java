// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorOrchestrationStateCurrentIterationStateErrorArgs;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorOrchestrationStateCurrentIterationStateArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorOrchestrationStateCurrentIterationStateArgs Empty = new V2PolicyOrchestratorOrchestrationStateCurrentIterationStateArgs();

    /**
     * The `Status` type defines a logical error model that is suitable for
     * different programming environments, including REST APIs and RPC APIs. It is
     * used by [gRPC](https://github.com/grpc). Each `Status` message contains
     * three pieces of data: error code, error message, and error details.
     * You can find out more about this error model and how to work with it in the
     * [API Design Guide](https://cloud.google.com/apis/design/errors).
     * Structure is documented below.
     * 
     */
    @Import(name="error")
    private @Nullable Output<V2PolicyOrchestratorOrchestrationStateCurrentIterationStateErrorArgs> error;

    /**
     * @return The `Status` type defines a logical error model that is suitable for
     * different programming environments, including REST APIs and RPC APIs. It is
     * used by [gRPC](https://github.com/grpc). Each `Status` message contains
     * three pieces of data: error code, error message, and error details.
     * You can find out more about this error model and how to work with it in the
     * [API Design Guide](https://cloud.google.com/apis/design/errors).
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorOrchestrationStateCurrentIterationStateErrorArgs>> error() {
        return Optional.ofNullable(this.error);
    }

    /**
     * (Output)
     * Output only. Number of orchestration actions which failed so far. For more details,
     * query the Cloud Logs.
     * 
     */
    @Import(name="failedActions")
    private @Nullable Output<String> failedActions;

    /**
     * @return (Output)
     * Output only. Number of orchestration actions which failed so far. For more details,
     * query the Cloud Logs.
     * 
     */
    public Optional<Output<String>> failedActions() {
        return Optional.ofNullable(this.failedActions);
    }

    /**
     * (Output)
     * Output only. Finish time of the wave iteration.
     * 
     */
    @Import(name="finishTime")
    private @Nullable Output<String> finishTime;

    /**
     * @return (Output)
     * Output only. Finish time of the wave iteration.
     * 
     */
    public Optional<Output<String>> finishTime() {
        return Optional.ofNullable(this.finishTime);
    }

    /**
     * (Output)
     * Output only. Overall number of actions done by the orchestrator so far.
     * 
     */
    @Import(name="performedActions")
    private @Nullable Output<String> performedActions;

    /**
     * @return (Output)
     * Output only. Overall number of actions done by the orchestrator so far.
     * 
     */
    public Optional<Output<String>> performedActions() {
        return Optional.ofNullable(this.performedActions);
    }

    /**
     * (Output)
     * Output only. An estimated percentage of the progress. Number between 0 and 100.
     * 
     */
    @Import(name="progress")
    private @Nullable Output<Double> progress;

    /**
     * @return (Output)
     * Output only. An estimated percentage of the progress. Number between 0 and 100.
     * 
     */
    public Optional<Output<Double>> progress() {
        return Optional.ofNullable(this.progress);
    }

    /**
     * (Output)
     * Output only. Handle to the Progressive Rollouts API rollout resource, which contains
     * detailed information about a particular orchestration iteration.
     * 
     */
    @Import(name="rolloutResource")
    private @Nullable Output<String> rolloutResource;

    /**
     * @return (Output)
     * Output only. Handle to the Progressive Rollouts API rollout resource, which contains
     * detailed information about a particular orchestration iteration.
     * 
     */
    public Optional<Output<String>> rolloutResource() {
        return Optional.ofNullable(this.rolloutResource);
    }

    /**
     * (Output)
     * Output only. Start time of the wave iteration.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return (Output)
     * Output only. Start time of the wave iteration.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
     * Allowed values:
     * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
     * - `STOPPED` - orchestrator won&#39;t make any changes.
     *   Note: There might be more states added in the future. We use string here
     *   instead of an enum, to avoid the need of propagating new states to all the
     *   client code.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
     * Allowed values:
     * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
     * - `STOPPED` - orchestrator won&#39;t make any changes.
     *   Note: There might be more states added in the future. We use string here
     *   instead of an enum, to avoid the need of propagating new states to all the
     *   client code.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private V2PolicyOrchestratorOrchestrationStateCurrentIterationStateArgs() {}

    private V2PolicyOrchestratorOrchestrationStateCurrentIterationStateArgs(V2PolicyOrchestratorOrchestrationStateCurrentIterationStateArgs $) {
        this.error = $.error;
        this.failedActions = $.failedActions;
        this.finishTime = $.finishTime;
        this.performedActions = $.performedActions;
        this.progress = $.progress;
        this.rolloutResource = $.rolloutResource;
        this.startTime = $.startTime;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorOrchestrationStateCurrentIterationStateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorOrchestrationStateCurrentIterationStateArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorOrchestrationStateCurrentIterationStateArgs();
        }

        public Builder(V2PolicyOrchestratorOrchestrationStateCurrentIterationStateArgs defaults) {
            $ = new V2PolicyOrchestratorOrchestrationStateCurrentIterationStateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param error The `Status` type defines a logical error model that is suitable for
         * different programming environments, including REST APIs and RPC APIs. It is
         * used by [gRPC](https://github.com/grpc). Each `Status` message contains
         * three pieces of data: error code, error message, and error details.
         * You can find out more about this error model and how to work with it in the
         * [API Design Guide](https://cloud.google.com/apis/design/errors).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder error(@Nullable Output<V2PolicyOrchestratorOrchestrationStateCurrentIterationStateErrorArgs> error) {
            $.error = error;
            return this;
        }

        /**
         * @param error The `Status` type defines a logical error model that is suitable for
         * different programming environments, including REST APIs and RPC APIs. It is
         * used by [gRPC](https://github.com/grpc). Each `Status` message contains
         * three pieces of data: error code, error message, and error details.
         * You can find out more about this error model and how to work with it in the
         * [API Design Guide](https://cloud.google.com/apis/design/errors).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder error(V2PolicyOrchestratorOrchestrationStateCurrentIterationStateErrorArgs error) {
            return error(Output.of(error));
        }

        /**
         * @param failedActions (Output)
         * Output only. Number of orchestration actions which failed so far. For more details,
         * query the Cloud Logs.
         * 
         * @return builder
         * 
         */
        public Builder failedActions(@Nullable Output<String> failedActions) {
            $.failedActions = failedActions;
            return this;
        }

        /**
         * @param failedActions (Output)
         * Output only. Number of orchestration actions which failed so far. For more details,
         * query the Cloud Logs.
         * 
         * @return builder
         * 
         */
        public Builder failedActions(String failedActions) {
            return failedActions(Output.of(failedActions));
        }

        /**
         * @param finishTime (Output)
         * Output only. Finish time of the wave iteration.
         * 
         * @return builder
         * 
         */
        public Builder finishTime(@Nullable Output<String> finishTime) {
            $.finishTime = finishTime;
            return this;
        }

        /**
         * @param finishTime (Output)
         * Output only. Finish time of the wave iteration.
         * 
         * @return builder
         * 
         */
        public Builder finishTime(String finishTime) {
            return finishTime(Output.of(finishTime));
        }

        /**
         * @param performedActions (Output)
         * Output only. Overall number of actions done by the orchestrator so far.
         * 
         * @return builder
         * 
         */
        public Builder performedActions(@Nullable Output<String> performedActions) {
            $.performedActions = performedActions;
            return this;
        }

        /**
         * @param performedActions (Output)
         * Output only. Overall number of actions done by the orchestrator so far.
         * 
         * @return builder
         * 
         */
        public Builder performedActions(String performedActions) {
            return performedActions(Output.of(performedActions));
        }

        /**
         * @param progress (Output)
         * Output only. An estimated percentage of the progress. Number between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder progress(@Nullable Output<Double> progress) {
            $.progress = progress;
            return this;
        }

        /**
         * @param progress (Output)
         * Output only. An estimated percentage of the progress. Number between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder progress(Double progress) {
            return progress(Output.of(progress));
        }

        /**
         * @param rolloutResource (Output)
         * Output only. Handle to the Progressive Rollouts API rollout resource, which contains
         * detailed information about a particular orchestration iteration.
         * 
         * @return builder
         * 
         */
        public Builder rolloutResource(@Nullable Output<String> rolloutResource) {
            $.rolloutResource = rolloutResource;
            return this;
        }

        /**
         * @param rolloutResource (Output)
         * Output only. Handle to the Progressive Rollouts API rollout resource, which contains
         * detailed information about a particular orchestration iteration.
         * 
         * @return builder
         * 
         */
        public Builder rolloutResource(String rolloutResource) {
            return rolloutResource(Output.of(rolloutResource));
        }

        /**
         * @param startTime (Output)
         * Output only. Start time of the wave iteration.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime (Output)
         * Output only. Start time of the wave iteration.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param state Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
         * Allowed values:
         * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
         * - `STOPPED` - orchestrator won&#39;t make any changes.
         *   Note: There might be more states added in the future. We use string here
         *   instead of an enum, to avoid the need of propagating new states to all the
         *   client code.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
         * Allowed values:
         * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
         * - `STOPPED` - orchestrator won&#39;t make any changes.
         *   Note: There might be more states added in the future. We use string here
         *   instead of an enum, to avoid the need of propagating new states to all the
         *   client code.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public V2PolicyOrchestratorOrchestrationStateCurrentIterationStateArgs build() {
            return $;
        }
    }

}
