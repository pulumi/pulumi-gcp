// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskExecutionStatusLatestJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskExecutionStatusLatestJobArgs Empty = new TaskExecutionStatusLatestJobArgs();

    /**
     * (Output)
     * The time when the job ended.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return (Output)
     * The time when the job ended.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * (Output)
     * Additional information about the current state.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return (Output)
     * Additional information about the current state.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * (Output)
     * The relative resource name of the job, of the form: projects/{project_number}/locations/{locationId}/lakes/{lakeId}/tasks/{taskId}/jobs/{jobId}.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Output)
     * The relative resource name of the job, of the form: projects/{project_number}/locations/{locationId}/lakes/{lakeId}/tasks/{taskId}/jobs/{jobId}.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Output)
     * The number of times the job has been retried (excluding the initial attempt).
     * 
     */
    @Import(name="retryCount")
    private @Nullable Output<Integer> retryCount;

    /**
     * @return (Output)
     * The number of times the job has been retried (excluding the initial attempt).
     * 
     */
    public Optional<Output<Integer>> retryCount() {
        return Optional.ofNullable(this.retryCount);
    }

    /**
     * (Output)
     * The underlying service running a job.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return (Output)
     * The underlying service running a job.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * (Output)
     * The full resource name for the job run under a particular service.
     * 
     */
    @Import(name="serviceJob")
    private @Nullable Output<String> serviceJob;

    /**
     * @return (Output)
     * The full resource name for the job run under a particular service.
     * 
     */
    public Optional<Output<String>> serviceJob() {
        return Optional.ofNullable(this.serviceJob);
    }

    /**
     * The first run of the task will be after this time. If not specified, the task will run shortly after being submitted if ON_DEMAND and based on the schedule if RECURRING.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The first run of the task will be after this time. If not specified, the task will run shortly after being submitted if ON_DEMAND and based on the schedule if RECURRING.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * (Output)
     * Execution state for the job.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Output)
     * Execution state for the job.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Output)
     * System generated globally unique ID for the job.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return (Output)
     * System generated globally unique ID for the job.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private TaskExecutionStatusLatestJobArgs() {}

    private TaskExecutionStatusLatestJobArgs(TaskExecutionStatusLatestJobArgs $) {
        this.endTime = $.endTime;
        this.message = $.message;
        this.name = $.name;
        this.retryCount = $.retryCount;
        this.service = $.service;
        this.serviceJob = $.serviceJob;
        this.startTime = $.startTime;
        this.state = $.state;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskExecutionStatusLatestJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskExecutionStatusLatestJobArgs $;

        public Builder() {
            $ = new TaskExecutionStatusLatestJobArgs();
        }

        public Builder(TaskExecutionStatusLatestJobArgs defaults) {
            $ = new TaskExecutionStatusLatestJobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime (Output)
         * The time when the job ended.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime (Output)
         * The time when the job ended.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param message (Output)
         * Additional information about the current state.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message (Output)
         * Additional information about the current state.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param name (Output)
         * The relative resource name of the job, of the form: projects/{project_number}/locations/{locationId}/lakes/{lakeId}/tasks/{taskId}/jobs/{jobId}.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Output)
         * The relative resource name of the job, of the form: projects/{project_number}/locations/{locationId}/lakes/{lakeId}/tasks/{taskId}/jobs/{jobId}.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param retryCount (Output)
         * The number of times the job has been retried (excluding the initial attempt).
         * 
         * @return builder
         * 
         */
        public Builder retryCount(@Nullable Output<Integer> retryCount) {
            $.retryCount = retryCount;
            return this;
        }

        /**
         * @param retryCount (Output)
         * The number of times the job has been retried (excluding the initial attempt).
         * 
         * @return builder
         * 
         */
        public Builder retryCount(Integer retryCount) {
            return retryCount(Output.of(retryCount));
        }

        /**
         * @param service (Output)
         * The underlying service running a job.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service (Output)
         * The underlying service running a job.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param serviceJob (Output)
         * The full resource name for the job run under a particular service.
         * 
         * @return builder
         * 
         */
        public Builder serviceJob(@Nullable Output<String> serviceJob) {
            $.serviceJob = serviceJob;
            return this;
        }

        /**
         * @param serviceJob (Output)
         * The full resource name for the job run under a particular service.
         * 
         * @return builder
         * 
         */
        public Builder serviceJob(String serviceJob) {
            return serviceJob(Output.of(serviceJob));
        }

        /**
         * @param startTime The first run of the task will be after this time. If not specified, the task will run shortly after being submitted if ON_DEMAND and based on the schedule if RECURRING.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The first run of the task will be after this time. If not specified, the task will run shortly after being submitted if ON_DEMAND and based on the schedule if RECURRING.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param state (Output)
         * Execution state for the job.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Output)
         * Execution state for the job.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param uid (Output)
         * System generated globally unique ID for the job.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid (Output)
         * System generated globally unique ID for the job.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public TaskExecutionStatusLatestJobArgs build() {
            return $;
        }
    }

}
