// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WasmPluginLogConfig {
    /**
     * @return Optional. Specifies whether to enable logging for activity by this plugin.
     * 
     */
    private @Nullable Boolean enable;
    /**
     * @return Non-empty default. Specificies the lowest level of the plugin logs that are exported to Cloud Logging. This setting relates to the logs generated by using logging statements in your Wasm code.
     * This field is can be set only if logging is enabled for the plugin.
     * If the field is not provided when logging is enabled, it is set to INFO by default.
     * Possible values are: `LOG_LEVEL_UNSPECIFIED`, `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR`, `CRITICAL`.
     * 
     */
    private @Nullable String minLogLevel;
    /**
     * @return Non-empty default. Configures the sampling rate of activity logs, where 1.0 means all logged activity is reported and 0.0 means no activity is reported.
     * A floating point value between 0.0 and 1.0 indicates that a percentage of log messages is stored.
     * The default value when logging is enabled is 1.0. The value of the field must be between 0 and 1 (inclusive).
     * This field can be specified only if logging is enabled for this plugin.
     * 
     */
    private @Nullable Double sampleRate;

    private WasmPluginLogConfig() {}
    /**
     * @return Optional. Specifies whether to enable logging for activity by this plugin.
     * 
     */
    public Optional<Boolean> enable() {
        return Optional.ofNullable(this.enable);
    }
    /**
     * @return Non-empty default. Specificies the lowest level of the plugin logs that are exported to Cloud Logging. This setting relates to the logs generated by using logging statements in your Wasm code.
     * This field is can be set only if logging is enabled for the plugin.
     * If the field is not provided when logging is enabled, it is set to INFO by default.
     * Possible values are: `LOG_LEVEL_UNSPECIFIED`, `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR`, `CRITICAL`.
     * 
     */
    public Optional<String> minLogLevel() {
        return Optional.ofNullable(this.minLogLevel);
    }
    /**
     * @return Non-empty default. Configures the sampling rate of activity logs, where 1.0 means all logged activity is reported and 0.0 means no activity is reported.
     * A floating point value between 0.0 and 1.0 indicates that a percentage of log messages is stored.
     * The default value when logging is enabled is 1.0. The value of the field must be between 0 and 1 (inclusive).
     * This field can be specified only if logging is enabled for this plugin.
     * 
     */
    public Optional<Double> sampleRate() {
        return Optional.ofNullable(this.sampleRate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WasmPluginLogConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enable;
        private @Nullable String minLogLevel;
        private @Nullable Double sampleRate;
        public Builder() {}
        public Builder(WasmPluginLogConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enable = defaults.enable;
    	      this.minLogLevel = defaults.minLogLevel;
    	      this.sampleRate = defaults.sampleRate;
        }

        @CustomType.Setter
        public Builder enable(@Nullable Boolean enable) {

            this.enable = enable;
            return this;
        }
        @CustomType.Setter
        public Builder minLogLevel(@Nullable String minLogLevel) {

            this.minLogLevel = minLogLevel;
            return this;
        }
        @CustomType.Setter
        public Builder sampleRate(@Nullable Double sampleRate) {

            this.sampleRate = sampleRate;
            return this;
        }
        public WasmPluginLogConfig build() {
            final var _resultValue = new WasmPluginLogConfig();
            _resultValue.enable = enable;
            _resultValue.minLogLevel = minLogLevel;
            _resultValue.sampleRate = sampleRate;
            return _resultValue;
        }
    }
}
