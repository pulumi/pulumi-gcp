// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureviewArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewState;
import com.pulumi.gcp.vertex.outputs.AiFeatureOnlineStoreFeatureviewBigQuerySource;
import com.pulumi.gcp.vertex.outputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySource;
import com.pulumi.gcp.vertex.outputs.AiFeatureOnlineStoreFeatureviewSyncConfig;
import com.pulumi.gcp.vertex.outputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfig;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * FeatureView is representation of values that the FeatureOnlineStore will serve based on its syncConfig.
 * 
 * To get more information about FeatureOnlineStoreFeatureview, see:
 * 
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featureOnlineStores.featureViews)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/vertex-ai/docs)
 * 
 * ## Example Usage
 * 
 * ### Vertex Ai Featureonlinestore Featureview
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStore;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStoreArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs;
 * import com.pulumi.gcp.bigquery.Dataset;
 * import com.pulumi.gcp.bigquery.DatasetArgs;
 * import com.pulumi.gcp.bigquery.Table;
 * import com.pulumi.gcp.bigquery.TableArgs;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureview;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureviewArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var featureonlinestore = new AiFeatureOnlineStore("featureonlinestore", AiFeatureOnlineStoreArgs.builder()
 *             .name("example_feature_view")
 *             .labels(Map.of("foo", "bar"))
 *             .region("us-central1")
 *             .bigtable(AiFeatureOnlineStoreBigtableArgs.builder()
 *                 .autoScaling(AiFeatureOnlineStoreBigtableAutoScalingArgs.builder()
 *                     .minNodeCount(1)
 *                     .maxNodeCount(2)
 *                     .cpuUtilizationTarget(80)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var tf_test_dataset = new Dataset("tf-test-dataset", DatasetArgs.builder()
 *             .datasetId("example_feature_view")
 *             .friendlyName("test")
 *             .description("This is a test description")
 *             .location("US")
 *             .build());
 * 
 *         var tf_test_table = new Table("tf-test-table", TableArgs.builder()
 *             .deletionProtection(false)
 *             .datasetId(tf_test_dataset.datasetId())
 *             .tableId("example_feature_view")
 *             .schema("""
 *   [
 *   {
 *     "name": "entity_id",
 *     "mode": "NULLABLE",
 *     "type": "STRING",
 *     "description": "Test default entity_id"
 *   },
 *     {
 *     "name": "test_entity_column",
 *     "mode": "NULLABLE",
 *     "type": "STRING",
 *     "description": "test secondary entity column"
 *   },
 *   {
 *     "name": "feature_timestamp",
 *     "mode": "NULLABLE",
 *     "type": "TIMESTAMP",
 *     "description": "Default timestamp value"
 *   }
 * ]
 *             """)
 *             .build());
 * 
 *         var featureview = new AiFeatureOnlineStoreFeatureview("featureview", AiFeatureOnlineStoreFeatureviewArgs.builder()
 *             .name("example_feature_view")
 *             .region("us-central1")
 *             .featureOnlineStore(featureonlinestore.name())
 *             .syncConfig(AiFeatureOnlineStoreFeatureviewSyncConfigArgs.builder()
 *                 .cron("0 0 * * *")
 *                 .build())
 *             .bigQuerySource(AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs.builder()
 *                 .uri(Output.tuple(tf_test_table.project(), tf_test_table.datasetId(), tf_test_table.tableId()).applyValue(values -> {
 *                     var project = values.t1;
 *                     var datasetId = values.t2;
 *                     var tableId = values.t3;
 *                     return String.format("bq://%s.%s.%s", project,datasetId,tableId);
 *                 }))
 *                 .entityIdColumns("test_entity_column")
 *                 .build())
 *             .build());
 * 
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Vertex Ai Featureonlinestore Featureview Feature Registry
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStore;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStoreArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs;
 * import com.pulumi.gcp.bigquery.Dataset;
 * import com.pulumi.gcp.bigquery.DatasetArgs;
 * import com.pulumi.gcp.bigquery.Table;
 * import com.pulumi.gcp.bigquery.TableArgs;
 * import com.pulumi.gcp.vertex.AiFeatureGroup;
 * import com.pulumi.gcp.vertex.AiFeatureGroupArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryBigQuerySourceArgs;
 * import com.pulumi.gcp.vertex.AiFeatureGroupFeature;
 * import com.pulumi.gcp.vertex.AiFeatureGroupFeatureArgs;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureview;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureviewArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var featureonlinestore = new AiFeatureOnlineStore("featureonlinestore", AiFeatureOnlineStoreArgs.builder()
 *             .name("example_feature_view_feature_registry")
 *             .labels(Map.of("foo", "bar"))
 *             .region("us-central1")
 *             .bigtable(AiFeatureOnlineStoreBigtableArgs.builder()
 *                 .autoScaling(AiFeatureOnlineStoreBigtableAutoScalingArgs.builder()
 *                     .minNodeCount(1)
 *                     .maxNodeCount(2)
 *                     .cpuUtilizationTarget(80)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var sampleDataset = new Dataset("sampleDataset", DatasetArgs.builder()
 *             .datasetId("example_feature_view_feature_registry")
 *             .friendlyName("test")
 *             .description("This is a test description")
 *             .location("US")
 *             .build());
 * 
 *         var sampleTable = new Table("sampleTable", TableArgs.builder()
 *             .deletionProtection(false)
 *             .datasetId(sampleDataset.datasetId())
 *             .tableId("example_feature_view_feature_registry")
 *             .schema("""
 * [
 *     {
 *         "name": "feature_id",
 *         "type": "STRING",
 *         "mode": "NULLABLE"
 *     },
 *     {
 *         "name": "example_feature_view_feature_registry",
 *         "type": "STRING",
 *         "mode": "NULLABLE"
 *     },
 *     {
 *         "name": "feature_timestamp",
 *         "type": "TIMESTAMP",
 *         "mode": "NULLABLE"
 *     }
 * ]
 *             """)
 *             .build());
 * 
 *         var sampleFeatureGroup = new AiFeatureGroup("sampleFeatureGroup", AiFeatureGroupArgs.builder()
 *             .name("example_feature_view_feature_registry")
 *             .description("A sample feature group")
 *             .region("us-central1")
 *             .labels(Map.of("label-one", "value-one"))
 *             .bigQuery(AiFeatureGroupBigQueryArgs.builder()
 *                 .bigQuerySource(AiFeatureGroupBigQueryBigQuerySourceArgs.builder()
 *                     .inputUri(Output.tuple(sampleTable.project(), sampleTable.datasetId(), sampleTable.tableId()).applyValue(values -> {
 *                         var project = values.t1;
 *                         var datasetId = values.t2;
 *                         var tableId = values.t3;
 *                         return String.format("bq://%s.%s.%s", project,datasetId,tableId);
 *                     }))
 *                     .build())
 *                 .entityIdColumns("feature_id")
 *                 .build())
 *             .build());
 * 
 *         var sampleFeature = new AiFeatureGroupFeature("sampleFeature", AiFeatureGroupFeatureArgs.builder()
 *             .name("example_feature_view_feature_registry")
 *             .region("us-central1")
 *             .featureGroup(sampleFeatureGroup.name())
 *             .description("A sample feature")
 *             .labels(Map.of("label-one", "value-one"))
 *             .build());
 * 
 *         var featureviewFeatureregistry = new AiFeatureOnlineStoreFeatureview("featureviewFeatureregistry", AiFeatureOnlineStoreFeatureviewArgs.builder()
 *             .name("example_feature_view_feature_registry")
 *             .region("us-central1")
 *             .featureOnlineStore(featureonlinestore.name())
 *             .syncConfig(AiFeatureOnlineStoreFeatureviewSyncConfigArgs.builder()
 *                 .cron("0 0 * * *")
 *                 .build())
 *             .featureRegistrySource(AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs.builder()
 *                 .featureGroups(AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs.builder()
 *                     .featureGroupId(sampleFeatureGroup.name())
 *                     .featureIds(sampleFeature.name())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Vertex Ai Featureonlinestore Featureview Cross Project
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.organizations.Project;
 * import com.pulumi.gcp.organizations.ProjectArgs;
 * import com.pulumi.time.sleep;
 * import com.pulumi.time.SleepArgs;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStore;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStoreArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs;
 * import com.pulumi.gcp.bigquery.Dataset;
 * import com.pulumi.gcp.bigquery.DatasetArgs;
 * import com.pulumi.gcp.bigquery.DatasetIamMember;
 * import com.pulumi.gcp.bigquery.DatasetIamMemberArgs;
 * import com.pulumi.gcp.bigquery.Table;
 * import com.pulumi.gcp.bigquery.TableArgs;
 * import com.pulumi.gcp.vertex.AiFeatureGroup;
 * import com.pulumi.gcp.vertex.AiFeatureGroupArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryBigQuerySourceArgs;
 * import com.pulumi.gcp.vertex.AiFeatureGroupFeature;
 * import com.pulumi.gcp.vertex.AiFeatureGroupFeatureArgs;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureview;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureviewArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var testProject = OrganizationsFunctions.getProject();
 * 
 *         var project = new Project("project", ProjectArgs.builder()
 *             .projectId("tf-test_13293")
 *             .name("tf-test_40289")
 *             .orgId("123456789")
 *             .billingAccount("000000-0000000-0000000-000000")
 *             .build());
 * 
 *         var wait60Seconds = new Sleep("wait60Seconds", SleepArgs.builder()
 *             .createDuration("60s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(project)
 *                 .build());
 * 
 *         var vertexai = new Service("vertexai", ServiceArgs.builder()
 *             .service("aiplatform.googleapis.com")
 *             .project(project.projectId())
 *             .disableOnDestroy(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(wait60Seconds)
 *                 .build());
 * 
 *         var featureonlinestore = new AiFeatureOnlineStore("featureonlinestore", AiFeatureOnlineStoreArgs.builder()
 *             .name("example_cross_project_featureview")
 *             .project(project.projectId())
 *             .labels(Map.of("foo", "bar"))
 *             .region("us-central1")
 *             .bigtable(AiFeatureOnlineStoreBigtableArgs.builder()
 *                 .autoScaling(AiFeatureOnlineStoreBigtableAutoScalingArgs.builder()
 *                     .minNodeCount(1)
 *                     .maxNodeCount(2)
 *                     .cpuUtilizationTarget(80)
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(vertexai)
 *                 .build());
 * 
 *         var sampleDataset = new Dataset("sampleDataset", DatasetArgs.builder()
 *             .datasetId("example_cross_project_featureview")
 *             .friendlyName("test")
 *             .description("This is a test description")
 *             .location("US")
 *             .build());
 * 
 *         var viewer = new DatasetIamMember("viewer", DatasetIamMemberArgs.builder()
 *             .project(testProject.applyValue(getProjectResult -> getProjectResult.projectId()))
 *             .datasetId(sampleDataset.datasetId())
 *             .role("roles/bigquery.dataViewer")
 *             .member(project.number().applyValue(number -> String.format("serviceAccount:service-%s{@literal @}gcp-sa-aiplatform.iam.gserviceaccount.com", number)))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(featureonlinestore)
 *                 .build());
 * 
 *         var wait30Seconds = new Sleep("wait30Seconds", SleepArgs.builder()
 *             .createDuration("30s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(viewer)
 *                 .build());
 * 
 *         var sampleTable = new Table("sampleTable", TableArgs.builder()
 *             .deletionProtection(false)
 *             .datasetId(sampleDataset.datasetId())
 *             .tableId("example_cross_project_featureview")
 *             .schema("""
 * [
 *     {
 *         "name": "feature_id",
 *         "type": "STRING",
 *         "mode": "NULLABLE"
 *     },
 *     {
 *         "name": "example_cross_project_featureview",
 *         "type": "STRING",
 *         "mode": "NULLABLE"
 *     },
 *     {
 *         "name": "feature_timestamp",
 *         "type": "TIMESTAMP",
 *         "mode": "NULLABLE"
 *     }
 * ]
 *             """)
 *             .build());
 * 
 *         var sampleFeatureGroup = new AiFeatureGroup("sampleFeatureGroup", AiFeatureGroupArgs.builder()
 *             .name("example_cross_project_featureview")
 *             .description("A sample feature group")
 *             .region("us-central1")
 *             .labels(Map.of("label-one", "value-one"))
 *             .bigQuery(AiFeatureGroupBigQueryArgs.builder()
 *                 .bigQuerySource(AiFeatureGroupBigQueryBigQuerySourceArgs.builder()
 *                     .inputUri(Output.tuple(sampleTable.project(), sampleTable.datasetId(), sampleTable.tableId()).applyValue(values -> {
 *                         var project = values.t1;
 *                         var datasetId = values.t2;
 *                         var tableId = values.t3;
 *                         return String.format("bq://%s.%s.%s", project,datasetId,tableId);
 *                     }))
 *                     .build())
 *                 .entityIdColumns("feature_id")
 *                 .build())
 *             .build());
 * 
 *         var sampleFeature = new AiFeatureGroupFeature("sampleFeature", AiFeatureGroupFeatureArgs.builder()
 *             .name("example_cross_project_featureview")
 *             .region("us-central1")
 *             .featureGroup(sampleFeatureGroup.name())
 *             .description("A sample feature")
 *             .labels(Map.of("label-one", "value-one"))
 *             .build());
 * 
 *         var crossProjectFeatureview = new AiFeatureOnlineStoreFeatureview("crossProjectFeatureview", AiFeatureOnlineStoreFeatureviewArgs.builder()
 *             .name("example_cross_project_featureview")
 *             .project(project.projectId())
 *             .region("us-central1")
 *             .featureOnlineStore(featureonlinestore.name())
 *             .syncConfig(AiFeatureOnlineStoreFeatureviewSyncConfigArgs.builder()
 *                 .cron("0 0 * * *")
 *                 .build())
 *             .featureRegistrySource(AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs.builder()
 *                 .featureGroups(AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs.builder()
 *                     .featureGroupId(sampleFeatureGroup.name())
 *                     .featureIds(sampleFeature.name())
 *                     .build())
 *                 .projectNumber(testProject.applyValue(getProjectResult -> getProjectResult.number()))
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     vertexai,
 *                     wait30Seconds)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Vertex Ai Featureonlinestore Featureview With Vector Search
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStore;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStoreArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreEmbeddingManagementArgs;
 * import com.pulumi.gcp.bigquery.Dataset;
 * import com.pulumi.gcp.bigquery.DatasetArgs;
 * import com.pulumi.gcp.bigquery.Table;
 * import com.pulumi.gcp.bigquery.TableArgs;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureview;
 * import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureviewArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs;
 * import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var featureonlinestore = new AiFeatureOnlineStore("featureonlinestore", AiFeatureOnlineStoreArgs.builder()
 *             .name("example_feature_view_vector_search")
 *             .labels(Map.of("foo", "bar"))
 *             .region("us-central1")
 *             .bigtable(AiFeatureOnlineStoreBigtableArgs.builder()
 *                 .autoScaling(AiFeatureOnlineStoreBigtableAutoScalingArgs.builder()
 *                     .minNodeCount(1)
 *                     .maxNodeCount(2)
 *                     .cpuUtilizationTarget(80)
 *                     .build())
 *                 .build())
 *             .embeddingManagement(AiFeatureOnlineStoreEmbeddingManagementArgs.builder()
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *         var tf_test_dataset = new Dataset("tf-test-dataset", DatasetArgs.builder()
 *             .datasetId("example_feature_view_vector_search")
 *             .friendlyName("test")
 *             .description("This is a test description")
 *             .location("US")
 *             .build());
 * 
 *         var tf_test_table = new Table("tf-test-table", TableArgs.builder()
 *             .deletionProtection(false)
 *             .datasetId(tf_test_dataset.datasetId())
 *             .tableId("example_feature_view_vector_search")
 *             .schema("""
 * [
 * {
 *   "name": "test_primary_id",
 *   "mode": "NULLABLE",
 *   "type": "STRING",
 *   "description": "primary test id"
 * },
 * {
 *   "name": "embedding",
 *   "mode": "REPEATED",
 *   "type": "FLOAT",
 *   "description": "embedding column for primary_id column"
 * },
 * {
 *   "name": "country",
 *   "mode": "NULLABLE",
 *   "type": "STRING",
 *   "description": "country"
 * },
 * {
 *   "name": "test_crowding_column",
 *   "mode": "NULLABLE",
 *   "type": "INTEGER",
 *   "description": "test crowding column"
 * },
 * {
 *   "name": "entity_id",
 *   "mode": "NULLABLE",
 *   "type": "STRING",
 *   "description": "Test default entity_id"
 * },
 * {
 *   "name": "test_entity_column",
 *   "mode": "NULLABLE",
 *   "type": "STRING",
 *   "description": "test secondary entity column"
 * },
 * {
 *   "name": "feature_timestamp",
 *   "mode": "NULLABLE",
 *   "type": "TIMESTAMP",
 *   "description": "Default timestamp value"
 * }
 * ]
 *             """)
 *             .build());
 * 
 *         var featureviewVectorSearch = new AiFeatureOnlineStoreFeatureview("featureviewVectorSearch", AiFeatureOnlineStoreFeatureviewArgs.builder()
 *             .name("example_feature_view_vector_search")
 *             .region("us-central1")
 *             .featureOnlineStore(featureonlinestore.name())
 *             .syncConfig(AiFeatureOnlineStoreFeatureviewSyncConfigArgs.builder()
 *                 .cron("0 0 * * *")
 *                 .build())
 *             .bigQuerySource(AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs.builder()
 *                 .uri(Output.tuple(tf_test_table.project(), tf_test_table.datasetId(), tf_test_table.tableId()).applyValue(values -> {
 *                     var project = values.t1;
 *                     var datasetId = values.t2;
 *                     var tableId = values.t3;
 *                     return String.format("bq://%s.%s.%s", project,datasetId,tableId);
 *                 }))
 *                 .entityIdColumns("test_entity_column")
 *                 .build())
 *             .vectorSearchConfig(AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs.builder()
 *                 .embeddingColumn("embedding")
 *                 .filterColumns("country")
 *                 .crowdingColumn("test_crowding_column")
 *                 .distanceMeasureType("DOT_PRODUCT_DISTANCE")
 *                 .treeAhConfig(AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs.builder()
 *                     .leafNodeEmbeddingCount("1000")
 *                     .build())
 *                 .embeddingDimension("2")
 *                 .build())
 *             .build());
 * 
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * FeatureOnlineStoreFeatureview can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{region}}/featureOnlineStores/{{feature_online_store}}/featureViews/{{name}}`
 * 
 * * `{{project}}/{{region}}/{{feature_online_store}}/{{name}}`
 * 
 * * `{{region}}/{{feature_online_store}}/{{name}}`
 * 
 * * `{{feature_online_store}}/{{name}}`
 * 
 * When using the `pulumi import` command, FeatureOnlineStoreFeatureview can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview default projects/{{project}}/locations/{{region}}/featureOnlineStores/{{feature_online_store}}/featureViews/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview default {{project}}/{{region}}/{{feature_online_store}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview default {{region}}/{{feature_online_store}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview default {{feature_online_store}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview")
public class AiFeatureOnlineStoreFeatureview extends com.pulumi.resources.CustomResource {
    /**
     * Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
     * Structure is documented below.
     * 
     */
    @Export(name="bigQuerySource", refs={AiFeatureOnlineStoreFeatureviewBigQuerySource.class}, tree="[0]")
    private Output</* @Nullable */ AiFeatureOnlineStoreFeatureviewBigQuerySource> bigQuerySource;

    /**
     * @return Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AiFeatureOnlineStoreFeatureviewBigQuerySource>> bigQuerySource() {
        return Codegen.optional(this.bigQuerySource);
    }
    /**
     * The timestamp of when the featureOnlinestore was created in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The timestamp of when the featureOnlinestore was created in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * The name of the FeatureOnlineStore to use for the featureview.
     * 
     */
    @Export(name="featureOnlineStore", refs={String.class}, tree="[0]")
    private Output<String> featureOnlineStore;

    /**
     * @return The name of the FeatureOnlineStore to use for the featureview.
     * 
     */
    public Output<String> featureOnlineStore() {
        return this.featureOnlineStore;
    }
    /**
     * Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
     * Structure is documented below.
     * 
     */
    @Export(name="featureRegistrySource", refs={AiFeatureOnlineStoreFeatureviewFeatureRegistrySource.class}, tree="[0]")
    private Output</* @Nullable */ AiFeatureOnlineStoreFeatureviewFeatureRegistrySource> featureRegistrySource;

    /**
     * @return Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AiFeatureOnlineStoreFeatureviewFeatureRegistrySource>> featureRegistrySource() {
        return Codegen.optional(this.featureRegistrySource);
    }
    /**
     * A set of key/value label pairs to assign to this FeatureView.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return A set of key/value label pairs to assign to this FeatureView.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Name of the FeatureView. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the FeatureView. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The region for the resource. It should be the same as the featureonlinestore region.
     * 
     * ***
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The region for the resource. It should be the same as the featureonlinestore region.
     * 
     * ***
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.
     * Structure is documented below.
     * 
     */
    @Export(name="syncConfig", refs={AiFeatureOnlineStoreFeatureviewSyncConfig.class}, tree="[0]")
    private Output</* @Nullable */ AiFeatureOnlineStoreFeatureviewSyncConfig> syncConfig;

    /**
     * @return Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AiFeatureOnlineStoreFeatureviewSyncConfig>> syncConfig() {
        return Codegen.optional(this.syncConfig);
    }
    /**
     * The timestamp of when the featureOnlinestore was last updated in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The timestamp of when the featureOnlinestore was last updated in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * Configuration for vector search. It contains the required configurations to create an index from source data, so that approximate nearest neighbor (a.k.a ANN) algorithms search can be performed during online serving.
     * Structure is documented below.
     * 
     */
    @Export(name="vectorSearchConfig", refs={AiFeatureOnlineStoreFeatureviewVectorSearchConfig.class}, tree="[0]")
    private Output</* @Nullable */ AiFeatureOnlineStoreFeatureviewVectorSearchConfig> vectorSearchConfig;

    /**
     * @return Configuration for vector search. It contains the required configurations to create an index from source data, so that approximate nearest neighbor (a.k.a ANN) algorithms search can be performed during online serving.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AiFeatureOnlineStoreFeatureviewVectorSearchConfig>> vectorSearchConfig() {
        return Codegen.optional(this.vectorSearchConfig);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AiFeatureOnlineStoreFeatureview(String name) {
        this(name, AiFeatureOnlineStoreFeatureviewArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AiFeatureOnlineStoreFeatureview(String name, AiFeatureOnlineStoreFeatureviewArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AiFeatureOnlineStoreFeatureview(String name, AiFeatureOnlineStoreFeatureviewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private AiFeatureOnlineStoreFeatureview(String name, Output<String> id, @Nullable AiFeatureOnlineStoreFeatureviewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview", name, state, makeResourceOptions(options, id));
    }

    private static AiFeatureOnlineStoreFeatureviewArgs makeArgs(AiFeatureOnlineStoreFeatureviewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AiFeatureOnlineStoreFeatureviewArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AiFeatureOnlineStoreFeatureview get(String name, Output<String> id, @Nullable AiFeatureOnlineStoreFeatureviewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AiFeatureOnlineStoreFeatureview(name, id, state, options);
    }
}
