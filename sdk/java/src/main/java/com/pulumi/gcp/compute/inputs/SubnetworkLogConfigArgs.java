// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubnetworkLogConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubnetworkLogConfigArgs Empty = new SubnetworkLogConfigArgs();

    /**
     * Can only be specified if VPC flow logging for this subnetwork is enabled.
     * Toggles the aggregation interval for collecting flow logs. Increasing the
     * interval time will reduce the amount of generated flow logs for long
     * lasting connections. Default is an interval of 5 seconds per connection.
     * Default value is `INTERVAL_5_SEC`.
     * Possible values are `INTERVAL_5_SEC`, `INTERVAL_30_SEC`, `INTERVAL_1_MIN`, `INTERVAL_5_MIN`, `INTERVAL_10_MIN`, and `INTERVAL_15_MIN`.
     * 
     */
    @Import(name="aggregationInterval")
    private @Nullable Output<String> aggregationInterval;

    /**
     * @return Can only be specified if VPC flow logging for this subnetwork is enabled.
     * Toggles the aggregation interval for collecting flow logs. Increasing the
     * interval time will reduce the amount of generated flow logs for long
     * lasting connections. Default is an interval of 5 seconds per connection.
     * Default value is `INTERVAL_5_SEC`.
     * Possible values are `INTERVAL_5_SEC`, `INTERVAL_30_SEC`, `INTERVAL_1_MIN`, `INTERVAL_5_MIN`, `INTERVAL_10_MIN`, and `INTERVAL_15_MIN`.
     * 
     */
    public Optional<Output<String>> aggregationInterval() {
        return Optional.ofNullable(this.aggregationInterval);
    }

    /**
     * Export filter used to define which VPC flow logs should be logged, as as CEL expression. See
     * https://cloud.google.com/vpc/docs/flow-logs#filtering for details on how to format this field.
     * The default value is &#39;true&#39;, which evaluates to include everything.
     * 
     */
    @Import(name="filterExpr")
    private @Nullable Output<String> filterExpr;

    /**
     * @return Export filter used to define which VPC flow logs should be logged, as as CEL expression. See
     * https://cloud.google.com/vpc/docs/flow-logs#filtering for details on how to format this field.
     * The default value is &#39;true&#39;, which evaluates to include everything.
     * 
     */
    public Optional<Output<String>> filterExpr() {
        return Optional.ofNullable(this.filterExpr);
    }

    /**
     * Can only be specified if VPC flow logging for this subnetwork is enabled.
     * The value of the field must be in [0, 1]. Set the sampling rate of VPC
     * flow logs within the subnetwork where 1.0 means all collected logs are
     * reported and 0.0 means no logs are reported. Default is 0.5 which means
     * half of all collected logs are reported.
     * 
     */
    @Import(name="flowSampling")
    private @Nullable Output<Double> flowSampling;

    /**
     * @return Can only be specified if VPC flow logging for this subnetwork is enabled.
     * The value of the field must be in [0, 1]. Set the sampling rate of VPC
     * flow logs within the subnetwork where 1.0 means all collected logs are
     * reported and 0.0 means no logs are reported. Default is 0.5 which means
     * half of all collected logs are reported.
     * 
     */
    public Optional<Output<Double>> flowSampling() {
        return Optional.ofNullable(this.flowSampling);
    }

    /**
     * Can only be specified if VPC flow logging for this subnetwork is enabled.
     * Configures whether metadata fields should be added to the reported VPC
     * flow logs.
     * Default value is `INCLUDE_ALL_METADATA`.
     * Possible values are `EXCLUDE_ALL_METADATA`, `INCLUDE_ALL_METADATA`, and `CUSTOM_METADATA`.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<String> metadata;

    /**
     * @return Can only be specified if VPC flow logging for this subnetwork is enabled.
     * Configures whether metadata fields should be added to the reported VPC
     * flow logs.
     * Default value is `INCLUDE_ALL_METADATA`.
     * Possible values are `EXCLUDE_ALL_METADATA`, `INCLUDE_ALL_METADATA`, and `CUSTOM_METADATA`.
     * 
     */
    public Optional<Output<String>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * List of metadata fields that should be added to reported logs.
     * Can only be specified if VPC flow logs for this subnetwork is enabled and &#34;metadata&#34; is set to CUSTOM_METADATA.
     * 
     */
    @Import(name="metadataFields")
    private @Nullable Output<List<String>> metadataFields;

    /**
     * @return List of metadata fields that should be added to reported logs.
     * Can only be specified if VPC flow logs for this subnetwork is enabled and &#34;metadata&#34; is set to CUSTOM_METADATA.
     * 
     */
    public Optional<Output<List<String>>> metadataFields() {
        return Optional.ofNullable(this.metadataFields);
    }

    private SubnetworkLogConfigArgs() {}

    private SubnetworkLogConfigArgs(SubnetworkLogConfigArgs $) {
        this.aggregationInterval = $.aggregationInterval;
        this.filterExpr = $.filterExpr;
        this.flowSampling = $.flowSampling;
        this.metadata = $.metadata;
        this.metadataFields = $.metadataFields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubnetworkLogConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubnetworkLogConfigArgs $;

        public Builder() {
            $ = new SubnetworkLogConfigArgs();
        }

        public Builder(SubnetworkLogConfigArgs defaults) {
            $ = new SubnetworkLogConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregationInterval Can only be specified if VPC flow logging for this subnetwork is enabled.
         * Toggles the aggregation interval for collecting flow logs. Increasing the
         * interval time will reduce the amount of generated flow logs for long
         * lasting connections. Default is an interval of 5 seconds per connection.
         * Default value is `INTERVAL_5_SEC`.
         * Possible values are `INTERVAL_5_SEC`, `INTERVAL_30_SEC`, `INTERVAL_1_MIN`, `INTERVAL_5_MIN`, `INTERVAL_10_MIN`, and `INTERVAL_15_MIN`.
         * 
         * @return builder
         * 
         */
        public Builder aggregationInterval(@Nullable Output<String> aggregationInterval) {
            $.aggregationInterval = aggregationInterval;
            return this;
        }

        /**
         * @param aggregationInterval Can only be specified if VPC flow logging for this subnetwork is enabled.
         * Toggles the aggregation interval for collecting flow logs. Increasing the
         * interval time will reduce the amount of generated flow logs for long
         * lasting connections. Default is an interval of 5 seconds per connection.
         * Default value is `INTERVAL_5_SEC`.
         * Possible values are `INTERVAL_5_SEC`, `INTERVAL_30_SEC`, `INTERVAL_1_MIN`, `INTERVAL_5_MIN`, `INTERVAL_10_MIN`, and `INTERVAL_15_MIN`.
         * 
         * @return builder
         * 
         */
        public Builder aggregationInterval(String aggregationInterval) {
            return aggregationInterval(Output.of(aggregationInterval));
        }

        /**
         * @param filterExpr Export filter used to define which VPC flow logs should be logged, as as CEL expression. See
         * https://cloud.google.com/vpc/docs/flow-logs#filtering for details on how to format this field.
         * The default value is &#39;true&#39;, which evaluates to include everything.
         * 
         * @return builder
         * 
         */
        public Builder filterExpr(@Nullable Output<String> filterExpr) {
            $.filterExpr = filterExpr;
            return this;
        }

        /**
         * @param filterExpr Export filter used to define which VPC flow logs should be logged, as as CEL expression. See
         * https://cloud.google.com/vpc/docs/flow-logs#filtering for details on how to format this field.
         * The default value is &#39;true&#39;, which evaluates to include everything.
         * 
         * @return builder
         * 
         */
        public Builder filterExpr(String filterExpr) {
            return filterExpr(Output.of(filterExpr));
        }

        /**
         * @param flowSampling Can only be specified if VPC flow logging for this subnetwork is enabled.
         * The value of the field must be in [0, 1]. Set the sampling rate of VPC
         * flow logs within the subnetwork where 1.0 means all collected logs are
         * reported and 0.0 means no logs are reported. Default is 0.5 which means
         * half of all collected logs are reported.
         * 
         * @return builder
         * 
         */
        public Builder flowSampling(@Nullable Output<Double> flowSampling) {
            $.flowSampling = flowSampling;
            return this;
        }

        /**
         * @param flowSampling Can only be specified if VPC flow logging for this subnetwork is enabled.
         * The value of the field must be in [0, 1]. Set the sampling rate of VPC
         * flow logs within the subnetwork where 1.0 means all collected logs are
         * reported and 0.0 means no logs are reported. Default is 0.5 which means
         * half of all collected logs are reported.
         * 
         * @return builder
         * 
         */
        public Builder flowSampling(Double flowSampling) {
            return flowSampling(Output.of(flowSampling));
        }

        /**
         * @param metadata Can only be specified if VPC flow logging for this subnetwork is enabled.
         * Configures whether metadata fields should be added to the reported VPC
         * flow logs.
         * Default value is `INCLUDE_ALL_METADATA`.
         * Possible values are `EXCLUDE_ALL_METADATA`, `INCLUDE_ALL_METADATA`, and `CUSTOM_METADATA`.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Can only be specified if VPC flow logging for this subnetwork is enabled.
         * Configures whether metadata fields should be added to the reported VPC
         * flow logs.
         * Default value is `INCLUDE_ALL_METADATA`.
         * Possible values are `EXCLUDE_ALL_METADATA`, `INCLUDE_ALL_METADATA`, and `CUSTOM_METADATA`.
         * 
         * @return builder
         * 
         */
        public Builder metadata(String metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param metadataFields List of metadata fields that should be added to reported logs.
         * Can only be specified if VPC flow logs for this subnetwork is enabled and &#34;metadata&#34; is set to CUSTOM_METADATA.
         * 
         * @return builder
         * 
         */
        public Builder metadataFields(@Nullable Output<List<String>> metadataFields) {
            $.metadataFields = metadataFields;
            return this;
        }

        /**
         * @param metadataFields List of metadata fields that should be added to reported logs.
         * Can only be specified if VPC flow logs for this subnetwork is enabled and &#34;metadata&#34; is set to CUSTOM_METADATA.
         * 
         * @return builder
         * 
         */
        public Builder metadataFields(List<String> metadataFields) {
            return metadataFields(Output.of(metadataFields));
        }

        /**
         * @param metadataFields List of metadata fields that should be added to reported logs.
         * Can only be specified if VPC flow logs for this subnetwork is enabled and &#34;metadata&#34; is set to CUSTOM_METADATA.
         * 
         * @return builder
         * 
         */
        public Builder metadataFields(String... metadataFields) {
            return metadataFields(List.of(metadataFields));
        }

        public SubnetworkLogConfigArgs build() {
            return $;
        }
    }

}
