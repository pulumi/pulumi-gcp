// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs extends com.pulumi.resources.ResourceArgs {

    public static final EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs Empty = new EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs();

    /**
     * Prior to forwarding the request to the selected origin, the request&#39;s host header is replaced with contents of hostRewrite.
     * 
     */
    @Import(name="hostRewrite")
    private @Nullable Output<String> hostRewrite;

    /**
     * @return Prior to forwarding the request to the selected origin, the request&#39;s host header is replaced with contents of hostRewrite.
     * 
     */
    public Optional<Output<String>> hostRewrite() {
        return Optional.ofNullable(this.hostRewrite);
    }

    /**
     * Prior to forwarding the request to the selected origin, the matching portion of the request&#39;s path is replaced by pathPrefixRewrite.
     * 
     */
    @Import(name="pathPrefixRewrite")
    private @Nullable Output<String> pathPrefixRewrite;

    /**
     * @return Prior to forwarding the request to the selected origin, the matching portion of the request&#39;s path is replaced by pathPrefixRewrite.
     * 
     */
    public Optional<Output<String>> pathPrefixRewrite() {
        return Optional.ofNullable(this.pathPrefixRewrite);
    }

    /**
     * Prior to forwarding the request to the selected origin, if the
     * request matched a pathTemplateMatch, the matching portion of the
     * request&#39;s path is replaced re-written using the pattern specified
     * by pathTemplateRewrite.
     * pathTemplateRewrite must be between 1 and 255 characters
     * (inclusive), must start with a &#39;/&#39;, and must only use variables
     * captured by the route&#39;s pathTemplate matchers.
     * pathTemplateRewrite may only be used when all of a route&#39;s
     * MatchRules specify pathTemplate.
     * Only one of pathPrefixRewrite and pathTemplateRewrite may be
     * specified.
     * 
     */
    @Import(name="pathTemplateRewrite")
    private @Nullable Output<String> pathTemplateRewrite;

    /**
     * @return Prior to forwarding the request to the selected origin, if the
     * request matched a pathTemplateMatch, the matching portion of the
     * request&#39;s path is replaced re-written using the pattern specified
     * by pathTemplateRewrite.
     * pathTemplateRewrite must be between 1 and 255 characters
     * (inclusive), must start with a &#39;/&#39;, and must only use variables
     * captured by the route&#39;s pathTemplate matchers.
     * pathTemplateRewrite may only be used when all of a route&#39;s
     * MatchRules specify pathTemplate.
     * Only one of pathPrefixRewrite and pathTemplateRewrite may be
     * specified.
     * 
     */
    public Optional<Output<String>> pathTemplateRewrite() {
        return Optional.ofNullable(this.pathTemplateRewrite);
    }

    private EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs() {}

    private EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs $) {
        this.hostRewrite = $.hostRewrite;
        this.pathPrefixRewrite = $.pathPrefixRewrite;
        this.pathTemplateRewrite = $.pathTemplateRewrite;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs $;

        public Builder() {
            $ = new EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs();
        }

        public Builder(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs defaults) {
            $ = new EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostRewrite Prior to forwarding the request to the selected origin, the request&#39;s host header is replaced with contents of hostRewrite.
         * 
         * @return builder
         * 
         */
        public Builder hostRewrite(@Nullable Output<String> hostRewrite) {
            $.hostRewrite = hostRewrite;
            return this;
        }

        /**
         * @param hostRewrite Prior to forwarding the request to the selected origin, the request&#39;s host header is replaced with contents of hostRewrite.
         * 
         * @return builder
         * 
         */
        public Builder hostRewrite(String hostRewrite) {
            return hostRewrite(Output.of(hostRewrite));
        }

        /**
         * @param pathPrefixRewrite Prior to forwarding the request to the selected origin, the matching portion of the request&#39;s path is replaced by pathPrefixRewrite.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefixRewrite(@Nullable Output<String> pathPrefixRewrite) {
            $.pathPrefixRewrite = pathPrefixRewrite;
            return this;
        }

        /**
         * @param pathPrefixRewrite Prior to forwarding the request to the selected origin, the matching portion of the request&#39;s path is replaced by pathPrefixRewrite.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefixRewrite(String pathPrefixRewrite) {
            return pathPrefixRewrite(Output.of(pathPrefixRewrite));
        }

        /**
         * @param pathTemplateRewrite Prior to forwarding the request to the selected origin, if the
         * request matched a pathTemplateMatch, the matching portion of the
         * request&#39;s path is replaced re-written using the pattern specified
         * by pathTemplateRewrite.
         * pathTemplateRewrite must be between 1 and 255 characters
         * (inclusive), must start with a &#39;/&#39;, and must only use variables
         * captured by the route&#39;s pathTemplate matchers.
         * pathTemplateRewrite may only be used when all of a route&#39;s
         * MatchRules specify pathTemplate.
         * Only one of pathPrefixRewrite and pathTemplateRewrite may be
         * specified.
         * 
         * @return builder
         * 
         */
        public Builder pathTemplateRewrite(@Nullable Output<String> pathTemplateRewrite) {
            $.pathTemplateRewrite = pathTemplateRewrite;
            return this;
        }

        /**
         * @param pathTemplateRewrite Prior to forwarding the request to the selected origin, if the
         * request matched a pathTemplateMatch, the matching portion of the
         * request&#39;s path is replaced re-written using the pattern specified
         * by pathTemplateRewrite.
         * pathTemplateRewrite must be between 1 and 255 characters
         * (inclusive), must start with a &#39;/&#39;, and must only use variables
         * captured by the route&#39;s pathTemplate matchers.
         * pathTemplateRewrite may only be used when all of a route&#39;s
         * MatchRules specify pathTemplate.
         * Only one of pathPrefixRewrite and pathTemplateRewrite may be
         * specified.
         * 
         * @return builder
         * 
         */
        public Builder pathTemplateRewrite(String pathTemplateRewrite) {
            return pathTemplateRewrite(Output.of(pathTemplateRewrite));
        }

        public EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs build() {
            return $;
        }
    }

}
