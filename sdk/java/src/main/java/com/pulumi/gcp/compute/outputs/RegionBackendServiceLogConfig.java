// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionBackendServiceLogConfig {
    /**
     * @return Whether to enable logging for the load balancer traffic served by this backend service.
     * 
     */
    private @Nullable Boolean enable;
    /**
     * @return Specifies the fields to include in logging. This field can only be specified if logging is enabled for this backend service.
     * 
     */
    private @Nullable List<String> optionalFields;
    /**
     * @return Specifies the optional logging mode for the load balancer traffic.
     * Supported values: INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM.
     * Possible values are: `INCLUDE_ALL_OPTIONAL`, `EXCLUDE_ALL_OPTIONAL`, `CUSTOM`.
     * 
     */
    private @Nullable String optionalMode;
    /**
     * @return This field can only be specified if logging is enabled for this backend service. The value of
     * the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
     * where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
     * The default value is 1.0.
     * 
     */
    private @Nullable Double sampleRate;

    private RegionBackendServiceLogConfig() {}
    /**
     * @return Whether to enable logging for the load balancer traffic served by this backend service.
     * 
     */
    public Optional<Boolean> enable() {
        return Optional.ofNullable(this.enable);
    }
    /**
     * @return Specifies the fields to include in logging. This field can only be specified if logging is enabled for this backend service.
     * 
     */
    public List<String> optionalFields() {
        return this.optionalFields == null ? List.of() : this.optionalFields;
    }
    /**
     * @return Specifies the optional logging mode for the load balancer traffic.
     * Supported values: INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM.
     * Possible values are: `INCLUDE_ALL_OPTIONAL`, `EXCLUDE_ALL_OPTIONAL`, `CUSTOM`.
     * 
     */
    public Optional<String> optionalMode() {
        return Optional.ofNullable(this.optionalMode);
    }
    /**
     * @return This field can only be specified if logging is enabled for this backend service. The value of
     * the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
     * where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
     * The default value is 1.0.
     * 
     */
    public Optional<Double> sampleRate() {
        return Optional.ofNullable(this.sampleRate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionBackendServiceLogConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enable;
        private @Nullable List<String> optionalFields;
        private @Nullable String optionalMode;
        private @Nullable Double sampleRate;
        public Builder() {}
        public Builder(RegionBackendServiceLogConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enable = defaults.enable;
    	      this.optionalFields = defaults.optionalFields;
    	      this.optionalMode = defaults.optionalMode;
    	      this.sampleRate = defaults.sampleRate;
        }

        @CustomType.Setter
        public Builder enable(@Nullable Boolean enable) {

            this.enable = enable;
            return this;
        }
        @CustomType.Setter
        public Builder optionalFields(@Nullable List<String> optionalFields) {

            this.optionalFields = optionalFields;
            return this;
        }
        public Builder optionalFields(String... optionalFields) {
            return optionalFields(List.of(optionalFields));
        }
        @CustomType.Setter
        public Builder optionalMode(@Nullable String optionalMode) {

            this.optionalMode = optionalMode;
            return this;
        }
        @CustomType.Setter
        public Builder sampleRate(@Nullable Double sampleRate) {

            this.sampleRate = sampleRate;
            return this;
        }
        public RegionBackendServiceLogConfig build() {
            final var _resultValue = new RegionBackendServiceLogConfig();
            _resultValue.enable = enable;
            _resultValue.optionalFields = optionalFields;
            _resultValue.optionalMode = optionalMode;
            _resultValue.sampleRate = sampleRate;
            return _resultValue;
        }
    }
}
