// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.beyondcorp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.beyondcorp.outputs.GetSecurityGatewayProxyProtocolConfigContextualHeader;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSecurityGatewayProxyProtocolConfig {
    /**
     * @return The configuration for the proxy.
     * 
     */
    private List<String> allowedClientHeaders;
    /**
     * @return Client IP configuration. The client IP address is included if true.
     * 
     */
    private Boolean clientIp;
    /**
     * @return Configuration for the contextual headers.
     * 
     */
    private List<GetSecurityGatewayProxyProtocolConfigContextualHeader> contextualHeaders;
    /**
     * @return Gateway identity configuration. Possible values: [&#34;RESOURCE_NAME&#34;]
     * 
     */
    private String gatewayIdentity;
    /**
     * @return Custom resource specific headers along with the values.
     * The names should conform to RFC 9110:
     * &gt; Field names SHOULD constrain themselves to alphanumeric characters, &#34;-&#34;,
     *   and &#34;.&#34;, and SHOULD begin with a letter.
     * Field values SHOULD contain only ASCII printable characters and tab.
     * 
     */
    private Map<String,String> metadataHeaders;

    private GetSecurityGatewayProxyProtocolConfig() {}
    /**
     * @return The configuration for the proxy.
     * 
     */
    public List<String> allowedClientHeaders() {
        return this.allowedClientHeaders;
    }
    /**
     * @return Client IP configuration. The client IP address is included if true.
     * 
     */
    public Boolean clientIp() {
        return this.clientIp;
    }
    /**
     * @return Configuration for the contextual headers.
     * 
     */
    public List<GetSecurityGatewayProxyProtocolConfigContextualHeader> contextualHeaders() {
        return this.contextualHeaders;
    }
    /**
     * @return Gateway identity configuration. Possible values: [&#34;RESOURCE_NAME&#34;]
     * 
     */
    public String gatewayIdentity() {
        return this.gatewayIdentity;
    }
    /**
     * @return Custom resource specific headers along with the values.
     * The names should conform to RFC 9110:
     * &gt; Field names SHOULD constrain themselves to alphanumeric characters, &#34;-&#34;,
     *   and &#34;.&#34;, and SHOULD begin with a letter.
     * Field values SHOULD contain only ASCII printable characters and tab.
     * 
     */
    public Map<String,String> metadataHeaders() {
        return this.metadataHeaders;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityGatewayProxyProtocolConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedClientHeaders;
        private Boolean clientIp;
        private List<GetSecurityGatewayProxyProtocolConfigContextualHeader> contextualHeaders;
        private String gatewayIdentity;
        private Map<String,String> metadataHeaders;
        public Builder() {}
        public Builder(GetSecurityGatewayProxyProtocolConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedClientHeaders = defaults.allowedClientHeaders;
    	      this.clientIp = defaults.clientIp;
    	      this.contextualHeaders = defaults.contextualHeaders;
    	      this.gatewayIdentity = defaults.gatewayIdentity;
    	      this.metadataHeaders = defaults.metadataHeaders;
        }

        @CustomType.Setter
        public Builder allowedClientHeaders(List<String> allowedClientHeaders) {
            if (allowedClientHeaders == null) {
              throw new MissingRequiredPropertyException("GetSecurityGatewayProxyProtocolConfig", "allowedClientHeaders");
            }
            this.allowedClientHeaders = allowedClientHeaders;
            return this;
        }
        public Builder allowedClientHeaders(String... allowedClientHeaders) {
            return allowedClientHeaders(List.of(allowedClientHeaders));
        }
        @CustomType.Setter
        public Builder clientIp(Boolean clientIp) {
            if (clientIp == null) {
              throw new MissingRequiredPropertyException("GetSecurityGatewayProxyProtocolConfig", "clientIp");
            }
            this.clientIp = clientIp;
            return this;
        }
        @CustomType.Setter
        public Builder contextualHeaders(List<GetSecurityGatewayProxyProtocolConfigContextualHeader> contextualHeaders) {
            if (contextualHeaders == null) {
              throw new MissingRequiredPropertyException("GetSecurityGatewayProxyProtocolConfig", "contextualHeaders");
            }
            this.contextualHeaders = contextualHeaders;
            return this;
        }
        public Builder contextualHeaders(GetSecurityGatewayProxyProtocolConfigContextualHeader... contextualHeaders) {
            return contextualHeaders(List.of(contextualHeaders));
        }
        @CustomType.Setter
        public Builder gatewayIdentity(String gatewayIdentity) {
            if (gatewayIdentity == null) {
              throw new MissingRequiredPropertyException("GetSecurityGatewayProxyProtocolConfig", "gatewayIdentity");
            }
            this.gatewayIdentity = gatewayIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder metadataHeaders(Map<String,String> metadataHeaders) {
            if (metadataHeaders == null) {
              throw new MissingRequiredPropertyException("GetSecurityGatewayProxyProtocolConfig", "metadataHeaders");
            }
            this.metadataHeaders = metadataHeaders;
            return this;
        }
        public GetSecurityGatewayProxyProtocolConfig build() {
            final var _resultValue = new GetSecurityGatewayProxyProtocolConfig();
            _resultValue.allowedClientHeaders = allowedClientHeaders;
            _resultValue.clientIp = clientIp;
            _resultValue.contextualHeaders = contextualHeaders;
            _resultValue.gatewayIdentity = gatewayIdentity;
            _resultValue.metadataHeaders = metadataHeaders;
            return _resultValue;
        }
    }
}
