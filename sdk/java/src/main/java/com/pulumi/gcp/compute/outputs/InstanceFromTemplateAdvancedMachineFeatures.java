// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceFromTemplateAdvancedMachineFeatures {
    /**
     * @return Whether to enable nested virtualization or not.
     * 
     */
    private @Nullable Boolean enableNestedVirtualization;
    /**
     * @return The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    private @Nullable Integer threadsPerCore;
    /**
     * @return Turbo frequency mode to use for the instance. Currently supported modes is &#34;ALL_CORE_MAX&#34;.
     * 
     */
    private @Nullable String turboMode;
    /**
     * @return The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance\&#39;s nominal CPU count and the underlying platform\&#39;s SMT width.
     * 
     */
    private @Nullable Integer visibleCoreCount;

    private InstanceFromTemplateAdvancedMachineFeatures() {}
    /**
     * @return Whether to enable nested virtualization or not.
     * 
     */
    public Optional<Boolean> enableNestedVirtualization() {
        return Optional.ofNullable(this.enableNestedVirtualization);
    }
    /**
     * @return The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    public Optional<Integer> threadsPerCore() {
        return Optional.ofNullable(this.threadsPerCore);
    }
    /**
     * @return Turbo frequency mode to use for the instance. Currently supported modes is &#34;ALL_CORE_MAX&#34;.
     * 
     */
    public Optional<String> turboMode() {
        return Optional.ofNullable(this.turboMode);
    }
    /**
     * @return The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance\&#39;s nominal CPU count and the underlying platform\&#39;s SMT width.
     * 
     */
    public Optional<Integer> visibleCoreCount() {
        return Optional.ofNullable(this.visibleCoreCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceFromTemplateAdvancedMachineFeatures defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enableNestedVirtualization;
        private @Nullable Integer threadsPerCore;
        private @Nullable String turboMode;
        private @Nullable Integer visibleCoreCount;
        public Builder() {}
        public Builder(InstanceFromTemplateAdvancedMachineFeatures defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableNestedVirtualization = defaults.enableNestedVirtualization;
    	      this.threadsPerCore = defaults.threadsPerCore;
    	      this.turboMode = defaults.turboMode;
    	      this.visibleCoreCount = defaults.visibleCoreCount;
        }

        @CustomType.Setter
        public Builder enableNestedVirtualization(@Nullable Boolean enableNestedVirtualization) {

            this.enableNestedVirtualization = enableNestedVirtualization;
            return this;
        }
        @CustomType.Setter
        public Builder threadsPerCore(@Nullable Integer threadsPerCore) {

            this.threadsPerCore = threadsPerCore;
            return this;
        }
        @CustomType.Setter
        public Builder turboMode(@Nullable String turboMode) {

            this.turboMode = turboMode;
            return this;
        }
        @CustomType.Setter
        public Builder visibleCoreCount(@Nullable Integer visibleCoreCount) {

            this.visibleCoreCount = visibleCoreCount;
            return this;
        }
        public InstanceFromTemplateAdvancedMachineFeatures build() {
            final var _resultValue = new InstanceFromTemplateAdvancedMachineFeatures();
            _resultValue.enableNestedVirtualization = enableNestedVirtualization;
            _resultValue.threadsPerCore = threadsPerCore;
            _resultValue.turboMode = turboMode;
            _resultValue.visibleCoreCount = visibleCoreCount;
            return _resultValue;
        }
    }
}
