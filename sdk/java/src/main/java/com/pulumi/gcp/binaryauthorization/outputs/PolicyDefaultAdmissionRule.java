// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.binaryauthorization.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class PolicyDefaultAdmissionRule {
    /**
     * @return The action when a pod creation is denied by the admission rule.
     * Possible values are `ENFORCED_BLOCK_AND_AUDIT_LOG` and `DRYRUN_AUDIT_LOG_ONLY`.
     * 
     */
    private String enforcementMode;
    /**
     * @return How this admission rule will be evaluated.
     * Possible values are `ALWAYS_ALLOW`, `REQUIRE_ATTESTATION`, and `ALWAYS_DENY`.
     * 
     */
    private String evaluationMode;
    /**
     * @return The resource names of the attestors that must attest to a
     * container image. If the attestor is in a different project from the
     * policy, it should be specified in the format `projects/*{@literal /}attestors/*`.
     * Each attestor must exist before a policy can reference it. To add an
     * attestor to a policy the principal issuing the policy change
     * request must be able to read the attestor resource.
     * Note: this field must be non-empty when the evaluation_mode field
     * specifies REQUIRE_ATTESTATION, otherwise it must be empty.
     * 
     */
    private @Nullable List<String> requireAttestationsBies;

    private PolicyDefaultAdmissionRule() {}
    /**
     * @return The action when a pod creation is denied by the admission rule.
     * Possible values are `ENFORCED_BLOCK_AND_AUDIT_LOG` and `DRYRUN_AUDIT_LOG_ONLY`.
     * 
     */
    public String enforcementMode() {
        return this.enforcementMode;
    }
    /**
     * @return How this admission rule will be evaluated.
     * Possible values are `ALWAYS_ALLOW`, `REQUIRE_ATTESTATION`, and `ALWAYS_DENY`.
     * 
     */
    public String evaluationMode() {
        return this.evaluationMode;
    }
    /**
     * @return The resource names of the attestors that must attest to a
     * container image. If the attestor is in a different project from the
     * policy, it should be specified in the format `projects/*{@literal /}attestors/*`.
     * Each attestor must exist before a policy can reference it. To add an
     * attestor to a policy the principal issuing the policy change
     * request must be able to read the attestor resource.
     * Note: this field must be non-empty when the evaluation_mode field
     * specifies REQUIRE_ATTESTATION, otherwise it must be empty.
     * 
     */
    public List<String> requireAttestationsBies() {
        return this.requireAttestationsBies == null ? List.of() : this.requireAttestationsBies;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyDefaultAdmissionRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String enforcementMode;
        private String evaluationMode;
        private @Nullable List<String> requireAttestationsBies;
        public Builder() {}
        public Builder(PolicyDefaultAdmissionRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enforcementMode = defaults.enforcementMode;
    	      this.evaluationMode = defaults.evaluationMode;
    	      this.requireAttestationsBies = defaults.requireAttestationsBies;
        }

        @CustomType.Setter
        public Builder enforcementMode(String enforcementMode) {
            this.enforcementMode = Objects.requireNonNull(enforcementMode);
            return this;
        }
        @CustomType.Setter
        public Builder evaluationMode(String evaluationMode) {
            this.evaluationMode = Objects.requireNonNull(evaluationMode);
            return this;
        }
        @CustomType.Setter
        public Builder requireAttestationsBies(@Nullable List<String> requireAttestationsBies) {
            this.requireAttestationsBies = requireAttestationsBies;
            return this;
        }
        public Builder requireAttestationsBies(String... requireAttestationsBies) {
            return requireAttestationsBies(List.of(requireAttestationsBies));
        }
        public PolicyDefaultAdmissionRule build() {
            final var o = new PolicyDefaultAdmissionRule();
            o.enforcementMode = enforcementMode;
            o.evaluationMode = evaluationMode;
            o.requireAttestationsBies = requireAttestationsBies;
            return o;
        }
    }
}
