// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.transcoder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigElementaryStreamVideoStreamH264HlgArgs;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigElementaryStreamVideoStreamH264SdrArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobTemplateConfigElementaryStreamVideoStreamH264Args extends com.pulumi.resources.ResourceArgs {

    public static final JobTemplateConfigElementaryStreamVideoStreamH264Args Empty = new JobTemplateConfigElementaryStreamVideoStreamH264Args();

    /**
     * The video bitrate in bits per second.
     * 
     */
    @Import(name="bitrateBps", required=true)
    private Output<Integer> bitrateBps;

    /**
     * @return The video bitrate in bits per second.
     * 
     */
    public Output<Integer> bitrateBps() {
        return this.bitrateBps;
    }

    /**
     * Target CRF level. The default is &#39;21&#39;.
     * 
     */
    @Import(name="crfLevel")
    private @Nullable Output<Integer> crfLevel;

    /**
     * @return Target CRF level. The default is &#39;21&#39;.
     * 
     */
    public Optional<Output<Integer>> crfLevel() {
        return Optional.ofNullable(this.crfLevel);
    }

    /**
     * The entropy coder to use. The default is &#39;cabac&#39;.
     * 
     */
    @Import(name="entropyCoder")
    private @Nullable Output<String> entropyCoder;

    /**
     * @return The entropy coder to use. The default is &#39;cabac&#39;.
     * 
     */
    public Optional<Output<String>> entropyCoder() {
        return Optional.ofNullable(this.entropyCoder);
    }

    /**
     * The target video frame rate in frames per second (FPS).
     * 
     */
    @Import(name="frameRate", required=true)
    private Output<Integer> frameRate;

    /**
     * @return The target video frame rate in frames per second (FPS).
     * 
     */
    public Output<Integer> frameRate() {
        return this.frameRate;
    }

    /**
     * Select the GOP size based on the specified duration. The default is &#39;3s&#39;.
     * 
     */
    @Import(name="gopDuration")
    private @Nullable Output<String> gopDuration;

    /**
     * @return Select the GOP size based on the specified duration. The default is &#39;3s&#39;.
     * 
     */
    public Optional<Output<String>> gopDuration() {
        return Optional.ofNullable(this.gopDuration);
    }

    /**
     * The height of the video in pixels.
     * 
     */
    @Import(name="heightPixels")
    private @Nullable Output<Integer> heightPixels;

    /**
     * @return The height of the video in pixels.
     * 
     */
    public Optional<Output<Integer>> heightPixels() {
        return Optional.ofNullable(this.heightPixels);
    }

    /**
     * HLG color format setting for H264.
     * 
     */
    @Import(name="hlg")
    private @Nullable Output<JobTemplateConfigElementaryStreamVideoStreamH264HlgArgs> hlg;

    /**
     * @return HLG color format setting for H264.
     * 
     */
    public Optional<Output<JobTemplateConfigElementaryStreamVideoStreamH264HlgArgs>> hlg() {
        return Optional.ofNullable(this.hlg);
    }

    /**
     * Pixel format to use. The default is &#39;yuv420p&#39;.
     * 
     */
    @Import(name="pixelFormat")
    private @Nullable Output<String> pixelFormat;

    /**
     * @return Pixel format to use. The default is &#39;yuv420p&#39;.
     * 
     */
    public Optional<Output<String>> pixelFormat() {
        return Optional.ofNullable(this.pixelFormat);
    }

    /**
     * Enforces the specified codec preset. The default is &#39;veryfast&#39;.
     * 
     */
    @Import(name="preset")
    private @Nullable Output<String> preset;

    /**
     * @return Enforces the specified codec preset. The default is &#39;veryfast&#39;.
     * 
     */
    public Optional<Output<String>> preset() {
        return Optional.ofNullable(this.preset);
    }

    /**
     * Enforces the specified codec profile.
     * 
     */
    @Import(name="profile")
    private @Nullable Output<String> profile;

    /**
     * @return Enforces the specified codec profile.
     * 
     */
    public Optional<Output<String>> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * Specify the mode. The default is &#39;vbr&#39;.
     * 
     */
    @Import(name="rateControlMode")
    private @Nullable Output<String> rateControlMode;

    /**
     * @return Specify the mode. The default is &#39;vbr&#39;.
     * 
     */
    public Optional<Output<String>> rateControlMode() {
        return Optional.ofNullable(this.rateControlMode);
    }

    /**
     * SDR color format setting for H264.
     * 
     */
    @Import(name="sdr")
    private @Nullable Output<JobTemplateConfigElementaryStreamVideoStreamH264SdrArgs> sdr;

    /**
     * @return SDR color format setting for H264.
     * 
     */
    public Optional<Output<JobTemplateConfigElementaryStreamVideoStreamH264SdrArgs>> sdr() {
        return Optional.ofNullable(this.sdr);
    }

    /**
     * Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
     * 
     */
    @Import(name="vbvFullnessBits")
    private @Nullable Output<Integer> vbvFullnessBits;

    /**
     * @return Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
     * 
     */
    public Optional<Output<Integer>> vbvFullnessBits() {
        return Optional.ofNullable(this.vbvFullnessBits);
    }

    /**
     * Size of the Video Buffering Verifier (VBV) buffer in bits.
     * 
     */
    @Import(name="vbvSizeBits")
    private @Nullable Output<Integer> vbvSizeBits;

    /**
     * @return Size of the Video Buffering Verifier (VBV) buffer in bits.
     * 
     */
    public Optional<Output<Integer>> vbvSizeBits() {
        return Optional.ofNullable(this.vbvSizeBits);
    }

    /**
     * The width of the video in pixels.
     * 
     */
    @Import(name="widthPixels")
    private @Nullable Output<Integer> widthPixels;

    /**
     * @return The width of the video in pixels.
     * 
     */
    public Optional<Output<Integer>> widthPixels() {
        return Optional.ofNullable(this.widthPixels);
    }

    private JobTemplateConfigElementaryStreamVideoStreamH264Args() {}

    private JobTemplateConfigElementaryStreamVideoStreamH264Args(JobTemplateConfigElementaryStreamVideoStreamH264Args $) {
        this.bitrateBps = $.bitrateBps;
        this.crfLevel = $.crfLevel;
        this.entropyCoder = $.entropyCoder;
        this.frameRate = $.frameRate;
        this.gopDuration = $.gopDuration;
        this.heightPixels = $.heightPixels;
        this.hlg = $.hlg;
        this.pixelFormat = $.pixelFormat;
        this.preset = $.preset;
        this.profile = $.profile;
        this.rateControlMode = $.rateControlMode;
        this.sdr = $.sdr;
        this.vbvFullnessBits = $.vbvFullnessBits;
        this.vbvSizeBits = $.vbvSizeBits;
        this.widthPixels = $.widthPixels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobTemplateConfigElementaryStreamVideoStreamH264Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobTemplateConfigElementaryStreamVideoStreamH264Args $;

        public Builder() {
            $ = new JobTemplateConfigElementaryStreamVideoStreamH264Args();
        }

        public Builder(JobTemplateConfigElementaryStreamVideoStreamH264Args defaults) {
            $ = new JobTemplateConfigElementaryStreamVideoStreamH264Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param bitrateBps The video bitrate in bits per second.
         * 
         * @return builder
         * 
         */
        public Builder bitrateBps(Output<Integer> bitrateBps) {
            $.bitrateBps = bitrateBps;
            return this;
        }

        /**
         * @param bitrateBps The video bitrate in bits per second.
         * 
         * @return builder
         * 
         */
        public Builder bitrateBps(Integer bitrateBps) {
            return bitrateBps(Output.of(bitrateBps));
        }

        /**
         * @param crfLevel Target CRF level. The default is &#39;21&#39;.
         * 
         * @return builder
         * 
         */
        public Builder crfLevel(@Nullable Output<Integer> crfLevel) {
            $.crfLevel = crfLevel;
            return this;
        }

        /**
         * @param crfLevel Target CRF level. The default is &#39;21&#39;.
         * 
         * @return builder
         * 
         */
        public Builder crfLevel(Integer crfLevel) {
            return crfLevel(Output.of(crfLevel));
        }

        /**
         * @param entropyCoder The entropy coder to use. The default is &#39;cabac&#39;.
         * 
         * @return builder
         * 
         */
        public Builder entropyCoder(@Nullable Output<String> entropyCoder) {
            $.entropyCoder = entropyCoder;
            return this;
        }

        /**
         * @param entropyCoder The entropy coder to use. The default is &#39;cabac&#39;.
         * 
         * @return builder
         * 
         */
        public Builder entropyCoder(String entropyCoder) {
            return entropyCoder(Output.of(entropyCoder));
        }

        /**
         * @param frameRate The target video frame rate in frames per second (FPS).
         * 
         * @return builder
         * 
         */
        public Builder frameRate(Output<Integer> frameRate) {
            $.frameRate = frameRate;
            return this;
        }

        /**
         * @param frameRate The target video frame rate in frames per second (FPS).
         * 
         * @return builder
         * 
         */
        public Builder frameRate(Integer frameRate) {
            return frameRate(Output.of(frameRate));
        }

        /**
         * @param gopDuration Select the GOP size based on the specified duration. The default is &#39;3s&#39;.
         * 
         * @return builder
         * 
         */
        public Builder gopDuration(@Nullable Output<String> gopDuration) {
            $.gopDuration = gopDuration;
            return this;
        }

        /**
         * @param gopDuration Select the GOP size based on the specified duration. The default is &#39;3s&#39;.
         * 
         * @return builder
         * 
         */
        public Builder gopDuration(String gopDuration) {
            return gopDuration(Output.of(gopDuration));
        }

        /**
         * @param heightPixels The height of the video in pixels.
         * 
         * @return builder
         * 
         */
        public Builder heightPixels(@Nullable Output<Integer> heightPixels) {
            $.heightPixels = heightPixels;
            return this;
        }

        /**
         * @param heightPixels The height of the video in pixels.
         * 
         * @return builder
         * 
         */
        public Builder heightPixels(Integer heightPixels) {
            return heightPixels(Output.of(heightPixels));
        }

        /**
         * @param hlg HLG color format setting for H264.
         * 
         * @return builder
         * 
         */
        public Builder hlg(@Nullable Output<JobTemplateConfigElementaryStreamVideoStreamH264HlgArgs> hlg) {
            $.hlg = hlg;
            return this;
        }

        /**
         * @param hlg HLG color format setting for H264.
         * 
         * @return builder
         * 
         */
        public Builder hlg(JobTemplateConfigElementaryStreamVideoStreamH264HlgArgs hlg) {
            return hlg(Output.of(hlg));
        }

        /**
         * @param pixelFormat Pixel format to use. The default is &#39;yuv420p&#39;.
         * 
         * @return builder
         * 
         */
        public Builder pixelFormat(@Nullable Output<String> pixelFormat) {
            $.pixelFormat = pixelFormat;
            return this;
        }

        /**
         * @param pixelFormat Pixel format to use. The default is &#39;yuv420p&#39;.
         * 
         * @return builder
         * 
         */
        public Builder pixelFormat(String pixelFormat) {
            return pixelFormat(Output.of(pixelFormat));
        }

        /**
         * @param preset Enforces the specified codec preset. The default is &#39;veryfast&#39;.
         * 
         * @return builder
         * 
         */
        public Builder preset(@Nullable Output<String> preset) {
            $.preset = preset;
            return this;
        }

        /**
         * @param preset Enforces the specified codec preset. The default is &#39;veryfast&#39;.
         * 
         * @return builder
         * 
         */
        public Builder preset(String preset) {
            return preset(Output.of(preset));
        }

        /**
         * @param profile Enforces the specified codec profile.
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable Output<String> profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param profile Enforces the specified codec profile.
         * 
         * @return builder
         * 
         */
        public Builder profile(String profile) {
            return profile(Output.of(profile));
        }

        /**
         * @param rateControlMode Specify the mode. The default is &#39;vbr&#39;.
         * 
         * @return builder
         * 
         */
        public Builder rateControlMode(@Nullable Output<String> rateControlMode) {
            $.rateControlMode = rateControlMode;
            return this;
        }

        /**
         * @param rateControlMode Specify the mode. The default is &#39;vbr&#39;.
         * 
         * @return builder
         * 
         */
        public Builder rateControlMode(String rateControlMode) {
            return rateControlMode(Output.of(rateControlMode));
        }

        /**
         * @param sdr SDR color format setting for H264.
         * 
         * @return builder
         * 
         */
        public Builder sdr(@Nullable Output<JobTemplateConfigElementaryStreamVideoStreamH264SdrArgs> sdr) {
            $.sdr = sdr;
            return this;
        }

        /**
         * @param sdr SDR color format setting for H264.
         * 
         * @return builder
         * 
         */
        public Builder sdr(JobTemplateConfigElementaryStreamVideoStreamH264SdrArgs sdr) {
            return sdr(Output.of(sdr));
        }

        /**
         * @param vbvFullnessBits Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
         * 
         * @return builder
         * 
         */
        public Builder vbvFullnessBits(@Nullable Output<Integer> vbvFullnessBits) {
            $.vbvFullnessBits = vbvFullnessBits;
            return this;
        }

        /**
         * @param vbvFullnessBits Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
         * 
         * @return builder
         * 
         */
        public Builder vbvFullnessBits(Integer vbvFullnessBits) {
            return vbvFullnessBits(Output.of(vbvFullnessBits));
        }

        /**
         * @param vbvSizeBits Size of the Video Buffering Verifier (VBV) buffer in bits.
         * 
         * @return builder
         * 
         */
        public Builder vbvSizeBits(@Nullable Output<Integer> vbvSizeBits) {
            $.vbvSizeBits = vbvSizeBits;
            return this;
        }

        /**
         * @param vbvSizeBits Size of the Video Buffering Verifier (VBV) buffer in bits.
         * 
         * @return builder
         * 
         */
        public Builder vbvSizeBits(Integer vbvSizeBits) {
            return vbvSizeBits(Output.of(vbvSizeBits));
        }

        /**
         * @param widthPixels The width of the video in pixels.
         * 
         * @return builder
         * 
         */
        public Builder widthPixels(@Nullable Output<Integer> widthPixels) {
            $.widthPixels = widthPixels;
            return this;
        }

        /**
         * @param widthPixels The width of the video in pixels.
         * 
         * @return builder
         * 
         */
        public Builder widthPixels(Integer widthPixels) {
            return widthPixels(Output.of(widthPixels));
        }

        public JobTemplateConfigElementaryStreamVideoStreamH264Args build() {
            if ($.bitrateBps == null) {
                throw new MissingRequiredPropertyException("JobTemplateConfigElementaryStreamVideoStreamH264Args", "bitrateBps");
            }
            if ($.frameRate == null) {
                throw new MissingRequiredPropertyException("JobTemplateConfigElementaryStreamVideoStreamH264Args", "frameRate");
            }
            return $;
        }
    }

}
