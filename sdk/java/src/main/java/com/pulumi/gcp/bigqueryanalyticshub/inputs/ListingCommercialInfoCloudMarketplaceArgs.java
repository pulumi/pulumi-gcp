// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigqueryanalyticshub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListingCommercialInfoCloudMarketplaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListingCommercialInfoCloudMarketplaceArgs Empty = new ListingCommercialInfoCloudMarketplaceArgs();

    /**
     * (Output)
     * Commercial state of the Marketplace Data Product.
     * Possible values: COMMERCIAL_STATE_UNSPECIFIED, ONBOARDING, ACTIVE
     * 
     */
    @Import(name="commercialState")
    private @Nullable Output<String> commercialState;

    /**
     * @return (Output)
     * Commercial state of the Marketplace Data Product.
     * Possible values: COMMERCIAL_STATE_UNSPECIFIED, ONBOARDING, ACTIVE
     * 
     */
    public Optional<Output<String>> commercialState() {
        return Optional.ofNullable(this.commercialState);
    }

    /**
     * (Output)
     * Resource name of the commercial service associated with the Marketplace Data Product. e.g. example.com
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return (Output)
     * Resource name of the commercial service associated with the Marketplace Data Product. e.g. example.com
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    private ListingCommercialInfoCloudMarketplaceArgs() {}

    private ListingCommercialInfoCloudMarketplaceArgs(ListingCommercialInfoCloudMarketplaceArgs $) {
        this.commercialState = $.commercialState;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListingCommercialInfoCloudMarketplaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListingCommercialInfoCloudMarketplaceArgs $;

        public Builder() {
            $ = new ListingCommercialInfoCloudMarketplaceArgs();
        }

        public Builder(ListingCommercialInfoCloudMarketplaceArgs defaults) {
            $ = new ListingCommercialInfoCloudMarketplaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commercialState (Output)
         * Commercial state of the Marketplace Data Product.
         * Possible values: COMMERCIAL_STATE_UNSPECIFIED, ONBOARDING, ACTIVE
         * 
         * @return builder
         * 
         */
        public Builder commercialState(@Nullable Output<String> commercialState) {
            $.commercialState = commercialState;
            return this;
        }

        /**
         * @param commercialState (Output)
         * Commercial state of the Marketplace Data Product.
         * Possible values: COMMERCIAL_STATE_UNSPECIFIED, ONBOARDING, ACTIVE
         * 
         * @return builder
         * 
         */
        public Builder commercialState(String commercialState) {
            return commercialState(Output.of(commercialState));
        }

        /**
         * @param service (Output)
         * Resource name of the commercial service associated with the Marketplace Data Product. e.g. example.com
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service (Output)
         * Resource name of the commercial service associated with the Marketplace Data Product. e.g. example.com
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public ListingCommercialInfoCloudMarketplaceArgs build() {
            return $;
        }
    }

}
