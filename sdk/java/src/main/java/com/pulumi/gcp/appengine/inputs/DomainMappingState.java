// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.appengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.appengine.inputs.DomainMappingResourceRecordArgs;
import com.pulumi.gcp.appengine.inputs.DomainMappingSslSettingsArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainMappingState extends com.pulumi.resources.ResourceArgs {

    public static final DomainMappingState Empty = new DomainMappingState();

    /**
     * Relative name of the domain serving the application. Example: example.com.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return Relative name of the domain serving the application. Example: example.com.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether the domain creation should override any existing mappings for this domain.
     * By default, overrides are rejected.
     * Default value is `STRICT`.
     * Possible values are `STRICT` and `OVERRIDE`.
     * 
     */
    @Import(name="overrideStrategy")
    private @Nullable Output<String> overrideStrategy;

    /**
     * @return Whether the domain creation should override any existing mappings for this domain.
     * By default, overrides are rejected.
     * Default value is `STRICT`.
     * Possible values are `STRICT` and `OVERRIDE`.
     * 
     */
    public Optional<Output<String>> overrideStrategy() {
        return Optional.ofNullable(this.overrideStrategy);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The resource records required to configure this domain mapping. These records must be added to the domain&#39;s DNS
     * configuration in order to serve the application via this domain mapping.
     * 
     */
    @Import(name="resourceRecords")
    private @Nullable Output<List<DomainMappingResourceRecordArgs>> resourceRecords;

    /**
     * @return The resource records required to configure this domain mapping. These records must be added to the domain&#39;s DNS
     * configuration in order to serve the application via this domain mapping.
     * 
     */
    public Optional<Output<List<DomainMappingResourceRecordArgs>>> resourceRecords() {
        return Optional.ofNullable(this.resourceRecords);
    }

    /**
     * SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
     * Structure is documented below.
     * 
     */
    @Import(name="sslSettings")
    private @Nullable Output<DomainMappingSslSettingsArgs> sslSettings;

    /**
     * @return SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DomainMappingSslSettingsArgs>> sslSettings() {
        return Optional.ofNullable(this.sslSettings);
    }

    private DomainMappingState() {}

    private DomainMappingState(DomainMappingState $) {
        this.domainName = $.domainName;
        this.name = $.name;
        this.overrideStrategy = $.overrideStrategy;
        this.project = $.project;
        this.resourceRecords = $.resourceRecords;
        this.sslSettings = $.sslSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainMappingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainMappingState $;

        public Builder() {
            $ = new DomainMappingState();
        }

        public Builder(DomainMappingState defaults) {
            $ = new DomainMappingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName Relative name of the domain serving the application. Example: example.com.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Relative name of the domain serving the application. Example: example.com.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param name Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param overrideStrategy Whether the domain creation should override any existing mappings for this domain.
         * By default, overrides are rejected.
         * Default value is `STRICT`.
         * Possible values are `STRICT` and `OVERRIDE`.
         * 
         * @return builder
         * 
         */
        public Builder overrideStrategy(@Nullable Output<String> overrideStrategy) {
            $.overrideStrategy = overrideStrategy;
            return this;
        }

        /**
         * @param overrideStrategy Whether the domain creation should override any existing mappings for this domain.
         * By default, overrides are rejected.
         * Default value is `STRICT`.
         * Possible values are `STRICT` and `OVERRIDE`.
         * 
         * @return builder
         * 
         */
        public Builder overrideStrategy(String overrideStrategy) {
            return overrideStrategy(Output.of(overrideStrategy));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param resourceRecords The resource records required to configure this domain mapping. These records must be added to the domain&#39;s DNS
         * configuration in order to serve the application via this domain mapping.
         * 
         * @return builder
         * 
         */
        public Builder resourceRecords(@Nullable Output<List<DomainMappingResourceRecordArgs>> resourceRecords) {
            $.resourceRecords = resourceRecords;
            return this;
        }

        /**
         * @param resourceRecords The resource records required to configure this domain mapping. These records must be added to the domain&#39;s DNS
         * configuration in order to serve the application via this domain mapping.
         * 
         * @return builder
         * 
         */
        public Builder resourceRecords(List<DomainMappingResourceRecordArgs> resourceRecords) {
            return resourceRecords(Output.of(resourceRecords));
        }

        /**
         * @param resourceRecords The resource records required to configure this domain mapping. These records must be added to the domain&#39;s DNS
         * configuration in order to serve the application via this domain mapping.
         * 
         * @return builder
         * 
         */
        public Builder resourceRecords(DomainMappingResourceRecordArgs... resourceRecords) {
            return resourceRecords(List.of(resourceRecords));
        }

        /**
         * @param sslSettings SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sslSettings(@Nullable Output<DomainMappingSslSettingsArgs> sslSettings) {
            $.sslSettings = sslSettings;
            return this;
        }

        /**
         * @param sslSettings SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sslSettings(DomainMappingSslSettingsArgs sslSettings) {
            return sslSettings(Output.of(sslSettings));
        }

        public DomainMappingState build() {
            return $;
        }
    }

}
