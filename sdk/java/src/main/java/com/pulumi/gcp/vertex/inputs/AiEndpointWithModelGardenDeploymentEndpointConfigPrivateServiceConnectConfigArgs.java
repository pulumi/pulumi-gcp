// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.vertex.inputs.AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs Empty = new AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs();

    /**
     * Required. If true, expose the IndexEndpoint via private service connect.
     * 
     */
    @Import(name="enablePrivateServiceConnect", required=true)
    private Output<Boolean> enablePrivateServiceConnect;

    /**
     * @return Required. If true, expose the IndexEndpoint via private service connect.
     * 
     */
    public Output<Boolean> enablePrivateServiceConnect() {
        return this.enablePrivateServiceConnect;
    }

    /**
     * A list of Projects from which the forwarding rule will target the service attachment.
     * 
     */
    @Import(name="projectAllowlists")
    private @Nullable Output<List<String>> projectAllowlists;

    /**
     * @return A list of Projects from which the forwarding rule will target the service attachment.
     * 
     */
    public Optional<Output<List<String>>> projectAllowlists() {
        return Optional.ofNullable(this.projectAllowlists);
    }

    /**
     * PSC config that is used to automatically create PSC endpoints in the user projects.
     * Structure is documented below.
     * 
     */
    @Import(name="pscAutomationConfigs")
    private @Nullable Output<AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsArgs> pscAutomationConfigs;

    /**
     * @return PSC config that is used to automatically create PSC endpoints in the user projects.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsArgs>> pscAutomationConfigs() {
        return Optional.ofNullable(this.pscAutomationConfigs);
    }

    /**
     * (Output)
     * Output only. The name of the generated service attachment resource.
     * This is only populated if the endpoint is deployed with PrivateServiceConnect.
     * 
     */
    @Import(name="serviceAttachment")
    private @Nullable Output<String> serviceAttachment;

    /**
     * @return (Output)
     * Output only. The name of the generated service attachment resource.
     * This is only populated if the endpoint is deployed with PrivateServiceConnect.
     * 
     */
    public Optional<Output<String>> serviceAttachment() {
        return Optional.ofNullable(this.serviceAttachment);
    }

    private AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs() {}

    private AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs(AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs $) {
        this.enablePrivateServiceConnect = $.enablePrivateServiceConnect;
        this.projectAllowlists = $.projectAllowlists;
        this.pscAutomationConfigs = $.pscAutomationConfigs;
        this.serviceAttachment = $.serviceAttachment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs $;

        public Builder() {
            $ = new AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs();
        }

        public Builder(AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs defaults) {
            $ = new AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enablePrivateServiceConnect Required. If true, expose the IndexEndpoint via private service connect.
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateServiceConnect(Output<Boolean> enablePrivateServiceConnect) {
            $.enablePrivateServiceConnect = enablePrivateServiceConnect;
            return this;
        }

        /**
         * @param enablePrivateServiceConnect Required. If true, expose the IndexEndpoint via private service connect.
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateServiceConnect(Boolean enablePrivateServiceConnect) {
            return enablePrivateServiceConnect(Output.of(enablePrivateServiceConnect));
        }

        /**
         * @param projectAllowlists A list of Projects from which the forwarding rule will target the service attachment.
         * 
         * @return builder
         * 
         */
        public Builder projectAllowlists(@Nullable Output<List<String>> projectAllowlists) {
            $.projectAllowlists = projectAllowlists;
            return this;
        }

        /**
         * @param projectAllowlists A list of Projects from which the forwarding rule will target the service attachment.
         * 
         * @return builder
         * 
         */
        public Builder projectAllowlists(List<String> projectAllowlists) {
            return projectAllowlists(Output.of(projectAllowlists));
        }

        /**
         * @param projectAllowlists A list of Projects from which the forwarding rule will target the service attachment.
         * 
         * @return builder
         * 
         */
        public Builder projectAllowlists(String... projectAllowlists) {
            return projectAllowlists(List.of(projectAllowlists));
        }

        /**
         * @param pscAutomationConfigs PSC config that is used to automatically create PSC endpoints in the user projects.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pscAutomationConfigs(@Nullable Output<AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsArgs> pscAutomationConfigs) {
            $.pscAutomationConfigs = pscAutomationConfigs;
            return this;
        }

        /**
         * @param pscAutomationConfigs PSC config that is used to automatically create PSC endpoints in the user projects.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pscAutomationConfigs(AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsArgs pscAutomationConfigs) {
            return pscAutomationConfigs(Output.of(pscAutomationConfigs));
        }

        /**
         * @param serviceAttachment (Output)
         * Output only. The name of the generated service attachment resource.
         * This is only populated if the endpoint is deployed with PrivateServiceConnect.
         * 
         * @return builder
         * 
         */
        public Builder serviceAttachment(@Nullable Output<String> serviceAttachment) {
            $.serviceAttachment = serviceAttachment;
            return this;
        }

        /**
         * @param serviceAttachment (Output)
         * Output only. The name of the generated service attachment resource.
         * This is only populated if the endpoint is deployed with PrivateServiceConnect.
         * 
         * @return builder
         * 
         */
        public Builder serviceAttachment(String serviceAttachment) {
            return serviceAttachment(Output.of(serviceAttachment));
        }

        public AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs build() {
            if ($.enablePrivateServiceConnect == null) {
                throw new MissingRequiredPropertyException("AiEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigArgs", "enablePrivateServiceConnect");
            }
            return $;
        }
    }

}
