// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.contactcenterinsights;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.contactcenterinsights.AnalysisRuleArgs;
import com.pulumi.gcp.contactcenterinsights.inputs.AnalysisRuleState;
import com.pulumi.gcp.contactcenterinsights.outputs.AnalysisRuleAnnotatorSelector;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The CCAI Insights project wide analysis rule.
 * This rule will be applied to all conversations that match the filter defined in the rule.
 * For a conversation matches the filter, the annotators specified in the rule will be run.
 * If a conversation matches multiple rules, a union of all the annotators will be run.
 * One project can have multiple analysis rules.
 * 
 * To get more information about AnalysisRule, see:
 * 
 * * [API documentation](https://cloud.google.com/contact-center/insights/docs/reference/rest/v1/projects.locations.analysisRules)
 * * How-to Guides
 *     * [Configure analysis rules using the API](https://cloud.google.com/contact-center/insights/docs/analysis-rule)
 * 
 * ## Example Usage
 * 
 * ### Contact Center Insights Analysis Rule Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.contactcenterinsights.AnalysisRule;
 * import com.pulumi.gcp.contactcenterinsights.AnalysisRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var analysisRuleBasic = new AnalysisRule("analysisRuleBasic", AnalysisRuleArgs.builder()
 *             .location("us-central1")
 *             .displayName("analysis-rule-display-name")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Contact Center Insights Analysis Rule Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.contactcenterinsights.AnalysisRule;
 * import com.pulumi.gcp.contactcenterinsights.AnalysisRuleArgs;
 * import com.pulumi.gcp.contactcenterinsights.inputs.AnalysisRuleAnnotatorSelectorArgs;
 * import com.pulumi.gcp.contactcenterinsights.inputs.AnalysisRuleAnnotatorSelectorQaConfigArgs;
 * import com.pulumi.gcp.contactcenterinsights.inputs.AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs;
 * import com.pulumi.gcp.contactcenterinsights.inputs.AnalysisRuleAnnotatorSelectorSummarizationConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var analysisRuleFull = new AnalysisRule("analysisRuleFull", AnalysisRuleArgs.builder()
 *             .location("us-central1")
 *             .displayName("analysis-rule-display-name")
 *             .conversationFilter("agent_id = \"1\"")
 *             .annotatorSelector(AnalysisRuleAnnotatorSelectorArgs.builder()
 *                 .runInterruptionAnnotator(false)
 *                 .issueModels("projects/1111111111111/locations/us-central1/issueModels/some_issue_model_id")
 *                 .phraseMatchers("projects/1111111111111/locations/us-central1/phraseMatchers/123")
 *                 .qaConfig(AnalysisRuleAnnotatorSelectorQaConfigArgs.builder()
 *                     .scorecardList(AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs.builder()
 *                         .qaScorecardRevisions("projects/1111111111111/locations/us-central1/qaScorecards/*}&#47;{@code revisions/some_scorecard_revision_id")
 *                         .build())
 *                     .build())
 *                 .runEntityAnnotator(false)
 *                 .runIntentAnnotator(false)
 *                 .runIssueModelAnnotator(false)
 *                 .runPhraseMatcherAnnotator(false)
 *                 .runQaAnnotator(false)
 *                 .runSentimentAnnotator(false)
 *                 .runSilenceAnnotator(true)
 *                 .runSummarizationAnnotator(false)
 *                 .summarizationConfig(AnalysisRuleAnnotatorSelectorSummarizationConfigArgs.builder()
 *                     .summarizationModel("BASELINE_MODEL")
 *                     .build())
 *                 .build())
 *             .analysisPercentage(0.5)
 *             .active(true)
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Contact Center Insights Analysis Rule Profile
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.contactcenterinsights.AnalysisRule;
 * import com.pulumi.gcp.contactcenterinsights.AnalysisRuleArgs;
 * import com.pulumi.gcp.contactcenterinsights.inputs.AnalysisRuleAnnotatorSelectorArgs;
 * import com.pulumi.gcp.contactcenterinsights.inputs.AnalysisRuleAnnotatorSelectorQaConfigArgs;
 * import com.pulumi.gcp.contactcenterinsights.inputs.AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs;
 * import com.pulumi.gcp.contactcenterinsights.inputs.AnalysisRuleAnnotatorSelectorSummarizationConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var analysisRuleProfile = new AnalysisRule("analysisRuleProfile", AnalysisRuleArgs.builder()
 *             .location("us-central1")
 *             .displayName("analysis-rule-display-name")
 *             .conversationFilter("agent_id = \"1\"")
 *             .annotatorSelector(AnalysisRuleAnnotatorSelectorArgs.builder()
 *                 .runInterruptionAnnotator(false)
 *                 .issueModels("projects/1111111111111/locations/us-central1/issueModels/some_issue_model_id")
 *                 .phraseMatchers("projects/1111111111111/locations/us-central1/phraseMatchers/123")
 *                 .qaConfig(AnalysisRuleAnnotatorSelectorQaConfigArgs.builder()
 *                     .scorecardList(AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs.builder()
 *                         .qaScorecardRevisions("projects/1111111111111/locations/us-central1/qaScorecards/*}&#47;{@code revisions/some_scorecard_revision_id")
 *                         .build())
 *                     .build())
 *                 .runEntityAnnotator(false)
 *                 .runIntentAnnotator(false)
 *                 .runIssueModelAnnotator(false)
 *                 .runPhraseMatcherAnnotator(false)
 *                 .runQaAnnotator(false)
 *                 .runSentimentAnnotator(false)
 *                 .runSilenceAnnotator(true)
 *                 .runSummarizationAnnotator(false)
 *                 .summarizationConfig(AnalysisRuleAnnotatorSelectorSummarizationConfigArgs.builder()
 *                     .conversationProfile("projects/1111111111111/locations/us-central1/conversationProfiles/some_conversation_profile")
 *                     .build())
 *                 .build())
 *             .analysisPercentage(0.5)
 *             .active(true)
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * AnalysisRule can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/analysisRules/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, AnalysisRule can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:contactcenterinsights/analysisRule:AnalysisRule default projects/{{project}}/locations/{{location}}/analysisRules/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:contactcenterinsights/analysisRule:AnalysisRule default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:contactcenterinsights/analysisRule:AnalysisRule default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:contactcenterinsights/analysisRule:AnalysisRule")
public class AnalysisRule extends com.pulumi.resources.CustomResource {
    /**
     * If true, apply this rule to conversations. Otherwise, this rule is
     * inactive and saved as a draft.
     * 
     */
    @Export(name="active", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> active;

    /**
     * @return If true, apply this rule to conversations. Otherwise, this rule is
     * inactive and saved as a draft.
     * 
     */
    public Output<Optional<Boolean>> active() {
        return Codegen.optional(this.active);
    }
    /**
     * Percentage of conversations that we should apply this analysis setting
     * automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
     * are sampled in a determenestic way. The original runtime_percentage &amp;
     * upload percentage will be replaced by defining filters on the conversation.
     * 
     */
    @Export(name="analysisPercentage", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> analysisPercentage;

    /**
     * @return Percentage of conversations that we should apply this analysis setting
     * automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
     * are sampled in a determenestic way. The original runtime_percentage &amp;
     * upload percentage will be replaced by defining filters on the conversation.
     * 
     */
    public Output<Optional<Double>> analysisPercentage() {
        return Codegen.optional(this.analysisPercentage);
    }
    /**
     * Selector of all available annotators and phrase matchers to run.
     * Structure is documented below.
     * 
     */
    @Export(name="annotatorSelector", refs={AnalysisRuleAnnotatorSelector.class}, tree="[0]")
    private Output</* @Nullable */ AnalysisRuleAnnotatorSelector> annotatorSelector;

    /**
     * @return Selector of all available annotators and phrase matchers to run.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AnalysisRuleAnnotatorSelector>> annotatorSelector() {
        return Codegen.optional(this.annotatorSelector);
    }
    /**
     * Filter for the conversations that should apply this analysis
     * rule. An empty filter means this analysis rule applies to all
     * conversations.
     * Refer to https://cloud.google.com/contact-center/insights/docs/filtering
     * for details.
     * 
     */
    @Export(name="conversationFilter", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> conversationFilter;

    /**
     * @return Filter for the conversations that should apply this analysis
     * rule. An empty filter means this analysis rule applies to all
     * conversations.
     * Refer to https://cloud.google.com/contact-center/insights/docs/filtering
     * for details.
     * 
     */
    public Output<Optional<String>> conversationFilter() {
        return Codegen.optional(this.conversationFilter);
    }
    /**
     * Output only. The time at which this analysis rule was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The time at which this analysis rule was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Display Name of the analysis rule.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return Display Name of the analysis rule.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * Location of the resource.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Location of the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The resource name of the analysis rule. Randomly generated by Insights.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name of the analysis rule. Randomly generated by Insights.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Output only. The most recent time at which this analysis rule was updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. The most recent time at which this analysis rule was updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AnalysisRule(java.lang.String name) {
        this(name, AnalysisRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AnalysisRule(java.lang.String name, AnalysisRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AnalysisRule(java.lang.String name, AnalysisRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:contactcenterinsights/analysisRule:AnalysisRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AnalysisRule(java.lang.String name, Output<java.lang.String> id, @Nullable AnalysisRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:contactcenterinsights/analysisRule:AnalysisRule", name, state, makeResourceOptions(options, id), false);
    }

    private static AnalysisRuleArgs makeArgs(AnalysisRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AnalysisRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AnalysisRule get(java.lang.String name, Output<java.lang.String> id, @Nullable AnalysisRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AnalysisRule(name, id, state, options);
    }
}
