// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigquery.outputs.TableTableConstraintsForeignKeyColumnReferences;
import com.pulumi.gcp.bigquery.outputs.TableTableConstraintsForeignKeyReferencedTable;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TableTableConstraintsForeignKey {
    /**
     * @return The pair of the foreign key column and primary key column.
     * Structure is documented below.
     * 
     */
    private TableTableConstraintsForeignKeyColumnReferences columnReferences;
    /**
     * @return Set only if the foreign key constraint is named.
     * 
     */
    private @Nullable String name;
    /**
     * @return The table that holds the primary key
     * and is referenced by this foreign key.
     * Structure is documented below.
     * 
     */
    private TableTableConstraintsForeignKeyReferencedTable referencedTable;

    private TableTableConstraintsForeignKey() {}
    /**
     * @return The pair of the foreign key column and primary key column.
     * Structure is documented below.
     * 
     */
    public TableTableConstraintsForeignKeyColumnReferences columnReferences() {
        return this.columnReferences;
    }
    /**
     * @return Set only if the foreign key constraint is named.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The table that holds the primary key
     * and is referenced by this foreign key.
     * Structure is documented below.
     * 
     */
    public TableTableConstraintsForeignKeyReferencedTable referencedTable() {
        return this.referencedTable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableTableConstraintsForeignKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private TableTableConstraintsForeignKeyColumnReferences columnReferences;
        private @Nullable String name;
        private TableTableConstraintsForeignKeyReferencedTable referencedTable;
        public Builder() {}
        public Builder(TableTableConstraintsForeignKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnReferences = defaults.columnReferences;
    	      this.name = defaults.name;
    	      this.referencedTable = defaults.referencedTable;
        }

        @CustomType.Setter
        public Builder columnReferences(TableTableConstraintsForeignKeyColumnReferences columnReferences) {
            if (columnReferences == null) {
              throw new MissingRequiredPropertyException("TableTableConstraintsForeignKey", "columnReferences");
            }
            this.columnReferences = columnReferences;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder referencedTable(TableTableConstraintsForeignKeyReferencedTable referencedTable) {
            if (referencedTable == null) {
              throw new MissingRequiredPropertyException("TableTableConstraintsForeignKey", "referencedTable");
            }
            this.referencedTable = referencedTable;
            return this;
        }
        public TableTableConstraintsForeignKey build() {
            final var _resultValue = new TableTableConstraintsForeignKey();
            _resultValue.columnReferences = columnReferences;
            _resultValue.name = name;
            _resultValue.referencedTable = referencedTable;
            return _resultValue;
        }
    }
}
