// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.inputs.RegionInstanceTemplateSchedulingGracefulShutdownMaxDurationArgs;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionInstanceTemplateSchedulingGracefulShutdownArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionInstanceTemplateSchedulingGracefulShutdownArgs Empty = new RegionInstanceTemplateSchedulingGracefulShutdownArgs();

    /**
     * Opts-in for graceful shutdown.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Opts-in for graceful shutdown.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The time allotted for the instance to gracefully shut down.
     * If the graceful shutdown isn&#39;t complete after this time, then the instance
     * transitions to the STOPPING state. Structure is documented below:
     * 
     */
    @Import(name="maxDuration")
    private @Nullable Output<RegionInstanceTemplateSchedulingGracefulShutdownMaxDurationArgs> maxDuration;

    /**
     * @return The time allotted for the instance to gracefully shut down.
     * If the graceful shutdown isn&#39;t complete after this time, then the instance
     * transitions to the STOPPING state. Structure is documented below:
     * 
     */
    public Optional<Output<RegionInstanceTemplateSchedulingGracefulShutdownMaxDurationArgs>> maxDuration() {
        return Optional.ofNullable(this.maxDuration);
    }

    private RegionInstanceTemplateSchedulingGracefulShutdownArgs() {}

    private RegionInstanceTemplateSchedulingGracefulShutdownArgs(RegionInstanceTemplateSchedulingGracefulShutdownArgs $) {
        this.enabled = $.enabled;
        this.maxDuration = $.maxDuration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionInstanceTemplateSchedulingGracefulShutdownArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionInstanceTemplateSchedulingGracefulShutdownArgs $;

        public Builder() {
            $ = new RegionInstanceTemplateSchedulingGracefulShutdownArgs();
        }

        public Builder(RegionInstanceTemplateSchedulingGracefulShutdownArgs defaults) {
            $ = new RegionInstanceTemplateSchedulingGracefulShutdownArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Opts-in for graceful shutdown.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Opts-in for graceful shutdown.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param maxDuration The time allotted for the instance to gracefully shut down.
         * If the graceful shutdown isn&#39;t complete after this time, then the instance
         * transitions to the STOPPING state. Structure is documented below:
         * 
         * @return builder
         * 
         */
        public Builder maxDuration(@Nullable Output<RegionInstanceTemplateSchedulingGracefulShutdownMaxDurationArgs> maxDuration) {
            $.maxDuration = maxDuration;
            return this;
        }

        /**
         * @param maxDuration The time allotted for the instance to gracefully shut down.
         * If the graceful shutdown isn&#39;t complete after this time, then the instance
         * transitions to the STOPPING state. Structure is documented below:
         * 
         * @return builder
         * 
         */
        public Builder maxDuration(RegionInstanceTemplateSchedulingGracefulShutdownMaxDurationArgs maxDuration) {
            return maxDuration(Output.of(maxDuration));
        }

        public RegionInstanceTemplateSchedulingGracefulShutdownArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("RegionInstanceTemplateSchedulingGracefulShutdownArgs", "enabled");
            }
            return $;
        }
    }

}
