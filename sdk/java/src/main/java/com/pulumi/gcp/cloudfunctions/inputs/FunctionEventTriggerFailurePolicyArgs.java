// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudfunctions.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


public final class FunctionEventTriggerFailurePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionEventTriggerFailurePolicyArgs Empty = new FunctionEventTriggerFailurePolicyArgs();

    /**
     * Whether the function should be retried on failure. Defaults to `false`.
     * 
     */
    @Import(name="retry", required=true)
    private Output<Boolean> retry;

    /**
     * @return Whether the function should be retried on failure. Defaults to `false`.
     * 
     */
    public Output<Boolean> retry() {
        return this.retry;
    }

    private FunctionEventTriggerFailurePolicyArgs() {}

    private FunctionEventTriggerFailurePolicyArgs(FunctionEventTriggerFailurePolicyArgs $) {
        this.retry = $.retry;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionEventTriggerFailurePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionEventTriggerFailurePolicyArgs $;

        public Builder() {
            $ = new FunctionEventTriggerFailurePolicyArgs();
        }

        public Builder(FunctionEventTriggerFailurePolicyArgs defaults) {
            $ = new FunctionEventTriggerFailurePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param retry Whether the function should be retried on failure. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder retry(Output<Boolean> retry) {
            $.retry = retry;
            return this;
        }

        /**
         * @param retry Whether the function should be retried on failure. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder retry(Boolean retry) {
            return retry(Output.of(retry));
        }

        public FunctionEventTriggerFailurePolicyArgs build() {
            $.retry = Objects.requireNonNull($.retry, "expected parameter 'retry' to be non-null");
            return $;
        }
    }

}
