// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


public final class ClusterAddonsConfigHttpLoadBalancingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterAddonsConfigHttpLoadBalancingArgs Empty = new ClusterAddonsConfigHttpLoadBalancingArgs();

    /**
     * Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when defaultSnatStatus is disabled.When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic
     * 
     * &lt;a name=&#34;nested_cluster_telemetry&#34;&gt;&lt;/a&gt;The `cluster_telemetry` block supports
     * 
     */
    @Import(name="disabled", required=true)
    private Output<Boolean> disabled;

    /**
     * @return Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when defaultSnatStatus is disabled.When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic
     * 
     * &lt;a name=&#34;nested_cluster_telemetry&#34;&gt;&lt;/a&gt;The `cluster_telemetry` block supports
     * 
     */
    public Output<Boolean> disabled() {
        return this.disabled;
    }

    private ClusterAddonsConfigHttpLoadBalancingArgs() {}

    private ClusterAddonsConfigHttpLoadBalancingArgs(ClusterAddonsConfigHttpLoadBalancingArgs $) {
        this.disabled = $.disabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterAddonsConfigHttpLoadBalancingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterAddonsConfigHttpLoadBalancingArgs $;

        public Builder() {
            $ = new ClusterAddonsConfigHttpLoadBalancingArgs();
        }

        public Builder(ClusterAddonsConfigHttpLoadBalancingArgs defaults) {
            $ = new ClusterAddonsConfigHttpLoadBalancingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disabled Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when defaultSnatStatus is disabled.When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic
         * 
         * &lt;a name=&#34;nested_cluster_telemetry&#34;&gt;&lt;/a&gt;The `cluster_telemetry` block supports
         * 
         * @return builder
         * 
         */
        public Builder disabled(Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when defaultSnatStatus is disabled.When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic
         * 
         * &lt;a name=&#34;nested_cluster_telemetry&#34;&gt;&lt;/a&gt;The `cluster_telemetry` block supports
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        public ClusterAddonsConfigHttpLoadBalancingArgs build() {
            $.disabled = Objects.requireNonNull($.disabled, "expected parameter 'disabled' to be non-null");
            return $;
        }
    }

}
