// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificatemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.certificatemanager.inputs.TrustConfigAllowlistedCertificateArgs;
import com.pulumi.gcp.certificatemanager.inputs.TrustConfigTrustStoreArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrustConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final TrustConfigArgs Empty = new TrustConfigArgs();

    /**
     * Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as long as
     * the certificate is parseable, proof of private key possession is established, and constraints on the certificate&#39;s SAN field are met.
     * Structure is documented below.
     * 
     */
    @Import(name="allowlistedCertificates")
    private @Nullable Output<List<TrustConfigAllowlistedCertificateArgs>> allowlistedCertificates;

    /**
     * @return Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as long as
     * the certificate is parseable, proof of private key possession is established, and constraints on the certificate&#39;s SAN field are met.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<TrustConfigAllowlistedCertificateArgs>>> allowlistedCertificates() {
        return Optional.ofNullable(this.allowlistedCertificates);
    }

    /**
     * One or more paragraphs of text description of a trust config.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return One or more paragraphs of text description of a trust config.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Set of label tags associated with the trust config.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Set of label tags associated with the trust config.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The trust config location.
     * 
     * ***
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The trust config location.
     * 
     * ***
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * A user-defined name of the trust config. Trust config names must be unique globally.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A user-defined name of the trust config. Trust config names must be unique globally.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Set of trust stores to perform validation against.
     * This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
     * Structure is documented below.
     * 
     */
    @Import(name="trustStores")
    private @Nullable Output<List<TrustConfigTrustStoreArgs>> trustStores;

    /**
     * @return Set of trust stores to perform validation against.
     * This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<TrustConfigTrustStoreArgs>>> trustStores() {
        return Optional.ofNullable(this.trustStores);
    }

    private TrustConfigArgs() {}

    private TrustConfigArgs(TrustConfigArgs $) {
        this.allowlistedCertificates = $.allowlistedCertificates;
        this.description = $.description;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.trustStores = $.trustStores;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrustConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrustConfigArgs $;

        public Builder() {
            $ = new TrustConfigArgs();
        }

        public Builder(TrustConfigArgs defaults) {
            $ = new TrustConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowlistedCertificates Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as long as
         * the certificate is parseable, proof of private key possession is established, and constraints on the certificate&#39;s SAN field are met.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allowlistedCertificates(@Nullable Output<List<TrustConfigAllowlistedCertificateArgs>> allowlistedCertificates) {
            $.allowlistedCertificates = allowlistedCertificates;
            return this;
        }

        /**
         * @param allowlistedCertificates Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as long as
         * the certificate is parseable, proof of private key possession is established, and constraints on the certificate&#39;s SAN field are met.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allowlistedCertificates(List<TrustConfigAllowlistedCertificateArgs> allowlistedCertificates) {
            return allowlistedCertificates(Output.of(allowlistedCertificates));
        }

        /**
         * @param allowlistedCertificates Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as long as
         * the certificate is parseable, proof of private key possession is established, and constraints on the certificate&#39;s SAN field are met.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allowlistedCertificates(TrustConfigAllowlistedCertificateArgs... allowlistedCertificates) {
            return allowlistedCertificates(List.of(allowlistedCertificates));
        }

        /**
         * @param description One or more paragraphs of text description of a trust config.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description One or more paragraphs of text description of a trust config.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param labels Set of label tags associated with the trust config.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Set of label tags associated with the trust config.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The trust config location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The trust config location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name A user-defined name of the trust config. Trust config names must be unique globally.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-defined name of the trust config. Trust config names must be unique globally.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param trustStores Set of trust stores to perform validation against.
         * This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder trustStores(@Nullable Output<List<TrustConfigTrustStoreArgs>> trustStores) {
            $.trustStores = trustStores;
            return this;
        }

        /**
         * @param trustStores Set of trust stores to perform validation against.
         * This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder trustStores(List<TrustConfigTrustStoreArgs> trustStores) {
            return trustStores(Output.of(trustStores));
        }

        /**
         * @param trustStores Set of trust stores to perform validation against.
         * This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder trustStores(TrustConfigTrustStoreArgs... trustStores) {
            return trustStores(List.of(trustStores));
        }

        public TrustConfigArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("TrustConfigArgs", "location");
            }
            return $;
        }
    }

}
