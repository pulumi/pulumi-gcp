// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.biglake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.biglake.inputs.TableHiveOptionsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableArgs Empty = new TableArgs();

    /**
     * The id of the parent database.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return The id of the parent database.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * Options of a Hive table.
     * Structure is documented below.
     * 
     */
    @Import(name="hiveOptions")
    private @Nullable Output<TableHiveOptionsArgs> hiveOptions;

    /**
     * @return Options of a Hive table.
     * Structure is documented below.
     * 
     */
    public Optional<Output<TableHiveOptionsArgs>> hiveOptions() {
        return Optional.ofNullable(this.hiveOptions);
    }

    /**
     * Output only. The name of the Table. Format:
     * projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}/databases/{databaseId}/tables/{tableId}
     * 
     * ***
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Output only. The name of the Table. Format:
     * projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}/databases/{databaseId}/tables/{tableId}
     * 
     * ***
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The database type.
     * Possible values are: `HIVE`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The database type.
     * Possible values are: `HIVE`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private TableArgs() {}

    private TableArgs(TableArgs $) {
        this.database = $.database;
        this.hiveOptions = $.hiveOptions;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableArgs $;

        public Builder() {
            $ = new TableArgs();
        }

        public Builder(TableArgs defaults) {
            $ = new TableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param database The id of the parent database.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The id of the parent database.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param hiveOptions Options of a Hive table.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hiveOptions(@Nullable Output<TableHiveOptionsArgs> hiveOptions) {
            $.hiveOptions = hiveOptions;
            return this;
        }

        /**
         * @param hiveOptions Options of a Hive table.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hiveOptions(TableHiveOptionsArgs hiveOptions) {
            return hiveOptions(Output.of(hiveOptions));
        }

        /**
         * @param name Output only. The name of the Table. Format:
         * projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}/databases/{databaseId}/tables/{tableId}
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Output only. The name of the Table. Format:
         * projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}/databases/{databaseId}/tables/{tableId}
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The database type.
         * Possible values are: `HIVE`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The database type.
         * Possible values are: `HIVE`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TableArgs build() {
            return $;
        }
    }

}
