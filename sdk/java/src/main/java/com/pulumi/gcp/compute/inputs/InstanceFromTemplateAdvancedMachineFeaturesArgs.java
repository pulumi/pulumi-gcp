// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceFromTemplateAdvancedMachineFeaturesArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceFromTemplateAdvancedMachineFeaturesArgs Empty = new InstanceFromTemplateAdvancedMachineFeaturesArgs();

    /**
     * Whether to enable nested virtualization or not.
     * 
     */
    @Import(name="enableNestedVirtualization")
    private @Nullable Output<Boolean> enableNestedVirtualization;

    /**
     * @return Whether to enable nested virtualization or not.
     * 
     */
    public Optional<Output<Boolean>> enableNestedVirtualization() {
        return Optional.ofNullable(this.enableNestedVirtualization);
    }

    /**
     * The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    @Import(name="threadsPerCore")
    private @Nullable Output<Integer> threadsPerCore;

    /**
     * @return The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    public Optional<Output<Integer>> threadsPerCore() {
        return Optional.ofNullable(this.threadsPerCore);
    }

    /**
     * Turbo frequency mode to use for the instance. Currently supported modes is &#34;ALL_CORE_MAX&#34;.
     * 
     */
    @Import(name="turboMode")
    private @Nullable Output<String> turboMode;

    /**
     * @return Turbo frequency mode to use for the instance. Currently supported modes is &#34;ALL_CORE_MAX&#34;.
     * 
     */
    public Optional<Output<String>> turboMode() {
        return Optional.ofNullable(this.turboMode);
    }

    /**
     * The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance\&#39;s nominal CPU count and the underlying platform\&#39;s SMT width.
     * 
     */
    @Import(name="visibleCoreCount")
    private @Nullable Output<Integer> visibleCoreCount;

    /**
     * @return The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance\&#39;s nominal CPU count and the underlying platform\&#39;s SMT width.
     * 
     */
    public Optional<Output<Integer>> visibleCoreCount() {
        return Optional.ofNullable(this.visibleCoreCount);
    }

    private InstanceFromTemplateAdvancedMachineFeaturesArgs() {}

    private InstanceFromTemplateAdvancedMachineFeaturesArgs(InstanceFromTemplateAdvancedMachineFeaturesArgs $) {
        this.enableNestedVirtualization = $.enableNestedVirtualization;
        this.threadsPerCore = $.threadsPerCore;
        this.turboMode = $.turboMode;
        this.visibleCoreCount = $.visibleCoreCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceFromTemplateAdvancedMachineFeaturesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceFromTemplateAdvancedMachineFeaturesArgs $;

        public Builder() {
            $ = new InstanceFromTemplateAdvancedMachineFeaturesArgs();
        }

        public Builder(InstanceFromTemplateAdvancedMachineFeaturesArgs defaults) {
            $ = new InstanceFromTemplateAdvancedMachineFeaturesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableNestedVirtualization Whether to enable nested virtualization or not.
         * 
         * @return builder
         * 
         */
        public Builder enableNestedVirtualization(@Nullable Output<Boolean> enableNestedVirtualization) {
            $.enableNestedVirtualization = enableNestedVirtualization;
            return this;
        }

        /**
         * @param enableNestedVirtualization Whether to enable nested virtualization or not.
         * 
         * @return builder
         * 
         */
        public Builder enableNestedVirtualization(Boolean enableNestedVirtualization) {
            return enableNestedVirtualization(Output.of(enableNestedVirtualization));
        }

        /**
         * @param threadsPerCore The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
         * 
         * @return builder
         * 
         */
        public Builder threadsPerCore(@Nullable Output<Integer> threadsPerCore) {
            $.threadsPerCore = threadsPerCore;
            return this;
        }

        /**
         * @param threadsPerCore The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
         * 
         * @return builder
         * 
         */
        public Builder threadsPerCore(Integer threadsPerCore) {
            return threadsPerCore(Output.of(threadsPerCore));
        }

        /**
         * @param turboMode Turbo frequency mode to use for the instance. Currently supported modes is &#34;ALL_CORE_MAX&#34;.
         * 
         * @return builder
         * 
         */
        public Builder turboMode(@Nullable Output<String> turboMode) {
            $.turboMode = turboMode;
            return this;
        }

        /**
         * @param turboMode Turbo frequency mode to use for the instance. Currently supported modes is &#34;ALL_CORE_MAX&#34;.
         * 
         * @return builder
         * 
         */
        public Builder turboMode(String turboMode) {
            return turboMode(Output.of(turboMode));
        }

        /**
         * @param visibleCoreCount The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance\&#39;s nominal CPU count and the underlying platform\&#39;s SMT width.
         * 
         * @return builder
         * 
         */
        public Builder visibleCoreCount(@Nullable Output<Integer> visibleCoreCount) {
            $.visibleCoreCount = visibleCoreCount;
            return this;
        }

        /**
         * @param visibleCoreCount The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance\&#39;s nominal CPU count and the underlying platform\&#39;s SMT width.
         * 
         * @return builder
         * 
         */
        public Builder visibleCoreCount(Integer visibleCoreCount) {
            return visibleCoreCount(Output.of(visibleCoreCount));
        }

        public InstanceFromTemplateAdvancedMachineFeaturesArgs build() {
            return $;
        }
    }

}
