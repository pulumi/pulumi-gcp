// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.datastream.inputs.StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs;
import com.pulumi.gcp.datastream.inputs.StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamSourceConfigMysqlSourceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamSourceConfigMysqlSourceConfigArgs Empty = new StreamSourceConfigMysqlSourceConfigArgs();

    /**
     * MySQL objects to exclude from the stream.
     * Structure is documented below.
     * 
     */
    @Import(name="excludeObjects")
    private @Nullable Output<StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs> excludeObjects;

    /**
     * @return MySQL objects to exclude from the stream.
     * Structure is documented below.
     * 
     */
    public Optional<Output<StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs>> excludeObjects() {
        return Optional.ofNullable(this.excludeObjects);
    }

    /**
     * MySQL objects to retrieve from the source.
     * Structure is documented below.
     * 
     */
    @Import(name="includeObjects")
    private @Nullable Output<StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs> includeObjects;

    /**
     * @return MySQL objects to retrieve from the source.
     * Structure is documented below.
     * 
     */
    public Optional<Output<StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs>> includeObjects() {
        return Optional.ofNullable(this.includeObjects);
    }

    /**
     * Maximum number of concurrent CDC tasks. The number should be non negative.
     * If not set (or set to 0), the system&#39;s default value will be used.
     * 
     */
    @Import(name="maxConcurrentCdcTasks")
    private @Nullable Output<Integer> maxConcurrentCdcTasks;

    /**
     * @return Maximum number of concurrent CDC tasks. The number should be non negative.
     * If not set (or set to 0), the system&#39;s default value will be used.
     * 
     */
    public Optional<Output<Integer>> maxConcurrentCdcTasks() {
        return Optional.ofNullable(this.maxConcurrentCdcTasks);
    }

    private StreamSourceConfigMysqlSourceConfigArgs() {}

    private StreamSourceConfigMysqlSourceConfigArgs(StreamSourceConfigMysqlSourceConfigArgs $) {
        this.excludeObjects = $.excludeObjects;
        this.includeObjects = $.includeObjects;
        this.maxConcurrentCdcTasks = $.maxConcurrentCdcTasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamSourceConfigMysqlSourceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamSourceConfigMysqlSourceConfigArgs $;

        public Builder() {
            $ = new StreamSourceConfigMysqlSourceConfigArgs();
        }

        public Builder(StreamSourceConfigMysqlSourceConfigArgs defaults) {
            $ = new StreamSourceConfigMysqlSourceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludeObjects MySQL objects to exclude from the stream.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder excludeObjects(@Nullable Output<StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs> excludeObjects) {
            $.excludeObjects = excludeObjects;
            return this;
        }

        /**
         * @param excludeObjects MySQL objects to exclude from the stream.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder excludeObjects(StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs excludeObjects) {
            return excludeObjects(Output.of(excludeObjects));
        }

        /**
         * @param includeObjects MySQL objects to retrieve from the source.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder includeObjects(@Nullable Output<StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs> includeObjects) {
            $.includeObjects = includeObjects;
            return this;
        }

        /**
         * @param includeObjects MySQL objects to retrieve from the source.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder includeObjects(StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs includeObjects) {
            return includeObjects(Output.of(includeObjects));
        }

        /**
         * @param maxConcurrentCdcTasks Maximum number of concurrent CDC tasks. The number should be non negative.
         * If not set (or set to 0), the system&#39;s default value will be used.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentCdcTasks(@Nullable Output<Integer> maxConcurrentCdcTasks) {
            $.maxConcurrentCdcTasks = maxConcurrentCdcTasks;
            return this;
        }

        /**
         * @param maxConcurrentCdcTasks Maximum number of concurrent CDC tasks. The number should be non negative.
         * If not set (or set to 0), the system&#39;s default value will be used.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentCdcTasks(Integer maxConcurrentCdcTasks) {
            return maxConcurrentCdcTasks(Output.of(maxConcurrentCdcTasks));
        }

        public StreamSourceConfigMysqlSourceConfigArgs build() {
            return $;
        }
    }

}
