// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securesourcemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.securesourcemanager.InstanceArgs;
import com.pulumi.gcp.securesourcemanager.inputs.InstanceState;
import com.pulumi.gcp.securesourcemanager.outputs.InstanceHostConfig;
import com.pulumi.gcp.securesourcemanager.outputs.InstancePrivateConfig;
import com.pulumi.gcp.securesourcemanager.outputs.InstanceWorkforceIdentityFederationConfig;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Instances are deployed to an available Google Cloud region and are accessible via their web interface.
 * 
 * To get more information about Instance, see:
 * 
 * * [API documentation](https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.instances)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/secure-source-manager/docs/create-instance)
 * 
 * ## Example Usage
 * 
 * ### Secure Source Manager Instance Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.securesourcemanager.Instance;
 * import com.pulumi.gcp.securesourcemanager.InstanceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Instance("default", InstanceArgs.builder()
 *             .location("us-central1")
 *             .instanceId("my-instance")
 *             .labels(Map.of("foo", "bar"))
 *             .deletionPolicy("PREVENT")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Secure Source Manager Instance Cmek
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMember;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
 * import com.pulumi.gcp.securesourcemanager.Instance;
 * import com.pulumi.gcp.securesourcemanager.InstanceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var cryptoKeyBinding = new CryptoKeyIAMMember("cryptoKeyBinding", CryptoKeyIAMMemberArgs.builder()
 *             .cryptoKeyId("my-key")
 *             .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-sourcemanager.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         var default_ = new Instance("default", InstanceArgs.builder()
 *             .location("us-central1")
 *             .instanceId("my-instance")
 *             .kmsKey("my-key")
 *             .deletionPolicy("PREVENT")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(cryptoKeyBinding)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Secure Source Manager Instance Private
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.certificateauthority.CaPool;
 * import com.pulumi.gcp.certificateauthority.CaPoolArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.CaPoolPublishingOptionsArgs;
 * import com.pulumi.gcp.certificateauthority.Authority;
 * import com.pulumi.gcp.certificateauthority.AuthorityArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigSubjectConfigArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigSubjectConfigSubjectArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigCaOptionsArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityKeySpecArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.certificateauthority.CaPoolIamBinding;
 * import com.pulumi.gcp.certificateauthority.CaPoolIamBindingArgs;
 * import com.pulumi.time.sleep;
 * import com.pulumi.time.sleepArgs;
 * import com.pulumi.gcp.securesourcemanager.Instance;
 * import com.pulumi.gcp.securesourcemanager.InstanceArgs;
 * import com.pulumi.gcp.securesourcemanager.inputs.InstancePrivateConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var caPool = new CaPool("caPool", CaPoolArgs.builder()
 *             .name("ca-pool")
 *             .location("us-central1")
 *             .tier("ENTERPRISE")
 *             .publishingOptions(CaPoolPublishingOptionsArgs.builder()
 *                 .publishCaCert(true)
 *                 .publishCrl(true)
 *                 .build())
 *             .build());
 * 
 *         var rootCa = new Authority("rootCa", AuthorityArgs.builder()
 *             .pool(caPool.name())
 *             .certificateAuthorityId("root-ca")
 *             .location("us-central1")
 *             .config(AuthorityConfigArgs.builder()
 *                 .subjectConfig(AuthorityConfigSubjectConfigArgs.builder()
 *                     .subject(AuthorityConfigSubjectConfigSubjectArgs.builder()
 *                         .organization("google")
 *                         .commonName("my-certificate-authority")
 *                         .build())
 *                     .build())
 *                 .x509Config(AuthorityConfigX509ConfigArgs.builder()
 *                     .caOptions(AuthorityConfigX509ConfigCaOptionsArgs.builder()
 *                         .isCa(true)
 *                         .build())
 *                     .keyUsage(AuthorityConfigX509ConfigKeyUsageArgs.builder()
 *                         .baseKeyUsage(AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs.builder()
 *                             .certSign(true)
 *                             .crlSign(true)
 *                             .build())
 *                         .extendedKeyUsage(AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs.builder()
 *                             .serverAuth(true)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .keySpec(AuthorityKeySpecArgs.builder()
 *                 .algorithm("RSA_PKCS1_4096_SHA256")
 *                 .build())
 *             .deletionProtection(false)
 *             .ignoreActiveCertificatesOnDeletion(true)
 *             .skipGracePeriod(true)
 *             .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var caPoolBinding = new CaPoolIamBinding("caPoolBinding", CaPoolIamBindingArgs.builder()
 *             .caPool(caPool.id())
 *             .role("roles/privateca.certificateRequester")
 *             .members(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-sourcemanager.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         // ca pool IAM permissions can take time to propagate
 *         var wait120Seconds = new Sleep("wait120Seconds", SleepArgs.builder()
 *             .createDuration("120s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(List.of(caPoolBinding))
 *                 .build());
 * 
 *         var default_ = new Instance("default", InstanceArgs.builder()
 *             .instanceId("my-instance")
 *             .location("us-central1")
 *             .privateConfig(InstancePrivateConfigArgs.builder()
 *                 .isPrivate(true)
 *                 .caPool(caPool.id())
 *                 .build())
 *             .deletionPolicy("PREVENT")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     rootCa,
 *                     wait120Seconds)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Secure Source Manager Instance Private Psc Backend
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.certificateauthority.CaPool;
 * import com.pulumi.gcp.certificateauthority.CaPoolArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.CaPoolPublishingOptionsArgs;
 * import com.pulumi.gcp.certificateauthority.Authority;
 * import com.pulumi.gcp.certificateauthority.AuthorityArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigSubjectConfigArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigSubjectConfigSubjectArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigCaOptionsArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityKeySpecArgs;
 * import com.pulumi.gcp.certificateauthority.CaPoolIamBinding;
 * import com.pulumi.gcp.certificateauthority.CaPoolIamBindingArgs;
 * import com.pulumi.time.sleep;
 * import com.pulumi.time.sleepArgs;
 * import com.pulumi.gcp.securesourcemanager.Instance;
 * import com.pulumi.gcp.securesourcemanager.InstanceArgs;
 * import com.pulumi.gcp.securesourcemanager.inputs.InstancePrivateConfigArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.RegionNetworkEndpointGroup;
 * import com.pulumi.gcp.compute.RegionNetworkEndpointGroupArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceBackendArgs;
 * import com.pulumi.gcp.compute.RegionTargetTcpProxy;
 * import com.pulumi.gcp.compute.RegionTargetTcpProxyArgs;
 * import com.pulumi.gcp.compute.ForwardingRule;
 * import com.pulumi.gcp.compute.ForwardingRuleArgs;
 * import com.pulumi.gcp.dns.ManagedZone;
 * import com.pulumi.gcp.dns.ManagedZoneArgs;
 * import com.pulumi.gcp.dns.inputs.ManagedZonePrivateVisibilityConfigArgs;
 * import com.pulumi.gcp.dns.RecordSet;
 * import com.pulumi.gcp.dns.RecordSetArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var caPool = new CaPool("caPool", CaPoolArgs.builder()
 *             .name("ca-pool")
 *             .location("us-central1")
 *             .tier("ENTERPRISE")
 *             .publishingOptions(CaPoolPublishingOptionsArgs.builder()
 *                 .publishCaCert(true)
 *                 .publishCrl(true)
 *                 .build())
 *             .build());
 * 
 *         var rootCa = new Authority("rootCa", AuthorityArgs.builder()
 *             .pool(caPool.name())
 *             .certificateAuthorityId("root-ca")
 *             .location("us-central1")
 *             .config(AuthorityConfigArgs.builder()
 *                 .subjectConfig(AuthorityConfigSubjectConfigArgs.builder()
 *                     .subject(AuthorityConfigSubjectConfigSubjectArgs.builder()
 *                         .organization("google")
 *                         .commonName("my-certificate-authority")
 *                         .build())
 *                     .build())
 *                 .x509Config(AuthorityConfigX509ConfigArgs.builder()
 *                     .caOptions(AuthorityConfigX509ConfigCaOptionsArgs.builder()
 *                         .isCa(true)
 *                         .build())
 *                     .keyUsage(AuthorityConfigX509ConfigKeyUsageArgs.builder()
 *                         .baseKeyUsage(AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs.builder()
 *                             .certSign(true)
 *                             .crlSign(true)
 *                             .build())
 *                         .extendedKeyUsage(AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs.builder()
 *                             .serverAuth(true)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .keySpec(AuthorityKeySpecArgs.builder()
 *                 .algorithm("RSA_PKCS1_4096_SHA256")
 *                 .build())
 *             .deletionProtection(false)
 *             .ignoreActiveCertificatesOnDeletion(true)
 *             .skipGracePeriod(true)
 *             .build());
 * 
 *         var caPoolBinding = new CaPoolIamBinding("caPoolBinding", CaPoolIamBindingArgs.builder()
 *             .caPool(caPool.id())
 *             .role("roles/privateca.certificateRequester")
 *             .members(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-sourcemanager.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         // ca pool IAM permissions can take time to propagate
 *         var wait120Seconds = new Sleep("wait120Seconds", SleepArgs.builder()
 *             .createDuration("120s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(List.of(caPoolBinding))
 *                 .build());
 * 
 *         // See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
 *         var default_ = new Instance("default", InstanceArgs.builder()
 *             .instanceId("my-instance")
 *             .location("us-central1")
 *             .privateConfig(InstancePrivateConfigArgs.builder()
 *                 .isPrivate(true)
 *                 .caPool(caPool.id())
 *                 .build())
 *             .deletionPolicy("PREVENT")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     rootCa,
 *                     wait120Seconds)
 *                 .build());
 * 
 *         // Connect SSM private instance with L4 proxy ILB.
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("my-network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var subnet = new Subnetwork("subnet", SubnetworkArgs.builder()
 *             .name("my-subnet")
 *             .region("us-central1")
 *             .network(network.id())
 *             .ipCidrRange("10.0.1.0/24")
 *             .privateIpGoogleAccess(true)
 *             .build());
 * 
 *         var pscNeg = new RegionNetworkEndpointGroup("pscNeg", RegionNetworkEndpointGroupArgs.builder()
 *             .name("my-neg")
 *             .region("us-central1")
 *             .networkEndpointType("PRIVATE_SERVICE_CONNECT")
 *             .pscTargetService(default_.privateConfig().applyValue(_privateConfig -> _privateConfig.httpServiceAttachment()))
 *             .network(network.id())
 *             .subnetwork(subnet.id())
 *             .build());
 * 
 *         var backendService = new RegionBackendService("backendService", RegionBackendServiceArgs.builder()
 *             .name("my-backend-service")
 *             .region("us-central1")
 *             .protocol("TCP")
 *             .loadBalancingScheme("INTERNAL_MANAGED")
 *             .backends(RegionBackendServiceBackendArgs.builder()
 *                 .group(pscNeg.id())
 *                 .balancingMode("UTILIZATION")
 *                 .capacityScaler(1.0)
 *                 .build())
 *             .build());
 * 
 *         var proxySubnet = new Subnetwork("proxySubnet", SubnetworkArgs.builder()
 *             .name("my-proxy-subnet")
 *             .region("us-central1")
 *             .network(network.id())
 *             .ipCidrRange("10.0.2.0/24")
 *             .purpose("REGIONAL_MANAGED_PROXY")
 *             .role("ACTIVE")
 *             .build());
 * 
 *         var targetProxy = new RegionTargetTcpProxy("targetProxy", RegionTargetTcpProxyArgs.builder()
 *             .name("my-target-proxy")
 *             .region("us-central1")
 *             .backendService(backendService.id())
 *             .build());
 * 
 *         var fwRuleTargetProxy = new ForwardingRule("fwRuleTargetProxy", ForwardingRuleArgs.builder()
 *             .name("fw-rule-target-proxy")
 *             .region("us-central1")
 *             .loadBalancingScheme("INTERNAL_MANAGED")
 *             .ipProtocol("TCP")
 *             .portRange("443")
 *             .target(targetProxy.id())
 *             .network(network.id())
 *             .subnetwork(subnet.id())
 *             .networkTier("PREMIUM")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(proxySubnet)
 *                 .build());
 * 
 *         var privateZone = new ManagedZone("privateZone", ManagedZoneArgs.builder()
 *             .name("my-dns-zone")
 *             .dnsName("p.sourcemanager.dev.")
 *             .visibility("private")
 *             .privateVisibilityConfig(ManagedZonePrivateVisibilityConfigArgs.builder()
 *                 .networks(ManagedZonePrivateVisibilityConfigNetworkArgs.builder()
 *                     .networkUrl(network.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var ssmInstanceHtmlRecord = new RecordSet("ssmInstanceHtmlRecord", RecordSetArgs.builder()
 *             .name(default_.hostConfigs().applyValue(_hostConfigs -> String.format("%s.", _hostConfigs[0].html())))
 *             .type("A")
 *             .ttl(300)
 *             .managedZone(privateZone.name())
 *             .rrdatas(fwRuleTargetProxy.ipAddress())
 *             .build());
 * 
 *         var ssmInstanceApiRecord = new RecordSet("ssmInstanceApiRecord", RecordSetArgs.builder()
 *             .name(default_.hostConfigs().applyValue(_hostConfigs -> String.format("%s.", _hostConfigs[0].api())))
 *             .type("A")
 *             .ttl(300)
 *             .managedZone(privateZone.name())
 *             .rrdatas(fwRuleTargetProxy.ipAddress())
 *             .build());
 * 
 *         var ssmInstanceGitRecord = new RecordSet("ssmInstanceGitRecord", RecordSetArgs.builder()
 *             .name(default_.hostConfigs().applyValue(_hostConfigs -> String.format("%s.", _hostConfigs[0].gitHttp())))
 *             .type("A")
 *             .ttl(300)
 *             .managedZone(privateZone.name())
 *             .rrdatas(fwRuleTargetProxy.ipAddress())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Secure Source Manager Instance Private Psc Endpoint
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.certificateauthority.CaPool;
 * import com.pulumi.gcp.certificateauthority.CaPoolArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.CaPoolPublishingOptionsArgs;
 * import com.pulumi.gcp.certificateauthority.Authority;
 * import com.pulumi.gcp.certificateauthority.AuthorityArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigSubjectConfigArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigSubjectConfigSubjectArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigCaOptionsArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs;
 * import com.pulumi.gcp.certificateauthority.inputs.AuthorityKeySpecArgs;
 * import com.pulumi.gcp.certificateauthority.CaPoolIamBinding;
 * import com.pulumi.gcp.certificateauthority.CaPoolIamBindingArgs;
 * import com.pulumi.time.sleep;
 * import com.pulumi.time.sleepArgs;
 * import com.pulumi.gcp.securesourcemanager.Instance;
 * import com.pulumi.gcp.securesourcemanager.InstanceArgs;
 * import com.pulumi.gcp.securesourcemanager.inputs.InstancePrivateConfigArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.Address;
 * import com.pulumi.gcp.compute.AddressArgs;
 * import com.pulumi.gcp.compute.ForwardingRule;
 * import com.pulumi.gcp.compute.ForwardingRuleArgs;
 * import com.pulumi.gcp.dns.ManagedZone;
 * import com.pulumi.gcp.dns.ManagedZoneArgs;
 * import com.pulumi.gcp.dns.inputs.ManagedZonePrivateVisibilityConfigArgs;
 * import com.pulumi.gcp.dns.RecordSet;
 * import com.pulumi.gcp.dns.RecordSetArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var caPool = new CaPool("caPool", CaPoolArgs.builder()
 *             .name("ca-pool")
 *             .location("us-central1")
 *             .tier("ENTERPRISE")
 *             .publishingOptions(CaPoolPublishingOptionsArgs.builder()
 *                 .publishCaCert(true)
 *                 .publishCrl(true)
 *                 .build())
 *             .build());
 * 
 *         var rootCa = new Authority("rootCa", AuthorityArgs.builder()
 *             .pool(caPool.name())
 *             .certificateAuthorityId("root-ca")
 *             .location("us-central1")
 *             .config(AuthorityConfigArgs.builder()
 *                 .subjectConfig(AuthorityConfigSubjectConfigArgs.builder()
 *                     .subject(AuthorityConfigSubjectConfigSubjectArgs.builder()
 *                         .organization("google")
 *                         .commonName("my-certificate-authority")
 *                         .build())
 *                     .build())
 *                 .x509Config(AuthorityConfigX509ConfigArgs.builder()
 *                     .caOptions(AuthorityConfigX509ConfigCaOptionsArgs.builder()
 *                         .isCa(true)
 *                         .build())
 *                     .keyUsage(AuthorityConfigX509ConfigKeyUsageArgs.builder()
 *                         .baseKeyUsage(AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs.builder()
 *                             .certSign(true)
 *                             .crlSign(true)
 *                             .build())
 *                         .extendedKeyUsage(AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs.builder()
 *                             .serverAuth(true)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .keySpec(AuthorityKeySpecArgs.builder()
 *                 .algorithm("RSA_PKCS1_4096_SHA256")
 *                 .build())
 *             .deletionProtection(false)
 *             .ignoreActiveCertificatesOnDeletion(true)
 *             .skipGracePeriod(true)
 *             .build());
 * 
 *         var caPoolBinding = new CaPoolIamBinding("caPoolBinding", CaPoolIamBindingArgs.builder()
 *             .caPool(caPool.id())
 *             .role("roles/privateca.certificateRequester")
 *             .members(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-sourcemanager.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         // ca pool IAM permissions can take time to propagate
 *         var wait120Seconds = new Sleep("wait120Seconds", SleepArgs.builder()
 *             .createDuration("120s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(List.of(caPoolBinding))
 *                 .build());
 * 
 *         // See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
 *         var default_ = new Instance("default", InstanceArgs.builder()
 *             .instanceId("my-instance")
 *             .location("us-central1")
 *             .privateConfig(InstancePrivateConfigArgs.builder()
 *                 .isPrivate(true)
 *                 .caPool(caPool.id())
 *                 .build())
 *             .deletionPolicy("PREVENT")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     rootCa,
 *                     wait120Seconds)
 *                 .build());
 * 
 *         // Connect SSM private instance with endpoint.
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("my-network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var subnet = new Subnetwork("subnet", SubnetworkArgs.builder()
 *             .name("my-subnet")
 *             .region("us-central1")
 *             .network(network.id())
 *             .ipCidrRange("10.0.60.0/24")
 *             .privateIpGoogleAccess(true)
 *             .build());
 * 
 *         var address = new Address("address", AddressArgs.builder()
 *             .name("my-address")
 *             .region("us-central1")
 *             .address("10.0.60.100")
 *             .addressType("INTERNAL")
 *             .subnetwork(subnet.id())
 *             .build());
 * 
 *         var fwRuleServiceAttachment = new ForwardingRule("fwRuleServiceAttachment", ForwardingRuleArgs.builder()
 *             .name("fw-rule-service-attachment")
 *             .region("us-central1")
 *             .loadBalancingScheme("")
 *             .ipAddress(address.id())
 *             .network(network.id())
 *             .target(default_.privateConfig().applyValue(_privateConfig -> _privateConfig.httpServiceAttachment()))
 *             .build());
 * 
 *         var privateZone = new ManagedZone("privateZone", ManagedZoneArgs.builder()
 *             .name("my-dns-zone")
 *             .dnsName("p.sourcemanager.dev.")
 *             .visibility("private")
 *             .privateVisibilityConfig(ManagedZonePrivateVisibilityConfigArgs.builder()
 *                 .networks(ManagedZonePrivateVisibilityConfigNetworkArgs.builder()
 *                     .networkUrl(network.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var ssmInstanceHtmlRecord = new RecordSet("ssmInstanceHtmlRecord", RecordSetArgs.builder()
 *             .name(default_.hostConfigs().applyValue(_hostConfigs -> String.format("%s.", _hostConfigs[0].html())))
 *             .type("A")
 *             .ttl(300)
 *             .managedZone(privateZone.name())
 *             .rrdatas(fwRuleServiceAttachment.ipAddress())
 *             .build());
 * 
 *         var ssmInstanceApiRecord = new RecordSet("ssmInstanceApiRecord", RecordSetArgs.builder()
 *             .name(default_.hostConfigs().applyValue(_hostConfigs -> String.format("%s.", _hostConfigs[0].api())))
 *             .type("A")
 *             .ttl(300)
 *             .managedZone(privateZone.name())
 *             .rrdatas(fwRuleServiceAttachment.ipAddress())
 *             .build());
 * 
 *         var ssmInstanceGitRecord = new RecordSet("ssmInstanceGitRecord", RecordSetArgs.builder()
 *             .name(default_.hostConfigs().applyValue(_hostConfigs -> String.format("%s.", _hostConfigs[0].gitHttp())))
 *             .type("A")
 *             .ttl(300)
 *             .managedZone(privateZone.name())
 *             .rrdatas(fwRuleServiceAttachment.ipAddress())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Secure Source Manager Instance Workforce Identity Federation
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.securesourcemanager.Instance;
 * import com.pulumi.gcp.securesourcemanager.InstanceArgs;
 * import com.pulumi.gcp.securesourcemanager.inputs.InstanceWorkforceIdentityFederationConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Instance("default", InstanceArgs.builder()
 *             .location("us-central1")
 *             .instanceId("my-instance")
 *             .workforceIdentityFederationConfig(InstanceWorkforceIdentityFederationConfigArgs.builder()
 *                 .enabled(true)
 *                 .build())
 *             .deletionPolicy("PREVENT")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Instance can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/instances/{{instance_id}}`
 * 
 * * `{{project}}/{{location}}/{{instance_id}}`
 * 
 * * `{{location}}/{{instance_id}}`
 * 
 * * `{{instance_id}}`
 * 
 * When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{instance_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/instance:Instance default {{project}}/{{location}}/{{instance_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/instance:Instance default {{location}}/{{instance_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/instance:Instance default {{instance_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:securesourcemanager/instance:Instance")
public class Instance extends com.pulumi.resources.CustomResource {
    /**
     * Time the Instance was created in UTC.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Time the Instance was created in UTC.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The deletion policy for the instance. Setting `ABANDON` allows the resource
     * to be abandoned, rather than deleted. Setting `DELETE` deletes the resource
     * and all its contents. Setting `PREVENT` prevents the resource from accidental
     * deletion by erroring out during plan.
     * Default is `PREVENT`.  Possible values are:
     * * DELETE
     * * PREVENT
     * * ABANDON
     * 
     */
    @Export(name="deletionPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deletionPolicy;

    /**
     * @return The deletion policy for the instance. Setting `ABANDON` allows the resource
     * to be abandoned, rather than deleted. Setting `DELETE` deletes the resource
     * and all its contents. Setting `PREVENT` prevents the resource from accidental
     * deletion by erroring out during plan.
     * Default is `PREVENT`.  Possible values are:
     * * DELETE
     * * PREVENT
     * * ABANDON
     * 
     */
    public Output<Optional<String>> deletionPolicy() {
        return Codegen.optional(this.deletionPolicy);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * A list of hostnames for this instance.
     * Structure is documented below.
     * 
     */
    @Export(name="hostConfigs", refs={List.class,InstanceHostConfig.class}, tree="[0,1]")
    private Output<List<InstanceHostConfig>> hostConfigs;

    /**
     * @return A list of hostnames for this instance.
     * Structure is documented below.
     * 
     */
    public Output<List<InstanceHostConfig>> hostConfigs() {
        return this.hostConfigs;
    }
    /**
     * The name for the Instance.
     * 
     */
    @Export(name="instanceId", refs={String.class}, tree="[0]")
    private Output<String> instanceId;

    /**
     * @return The name for the Instance.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }
    /**
     * Customer-managed encryption key name, in the format projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*.
     * 
     */
    @Export(name="kmsKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kmsKey;

    /**
     * @return Customer-managed encryption key name, in the format projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*.
     * 
     */
    public Output<Optional<String>> kmsKey() {
        return Codegen.optional(this.kmsKey);
    }
    /**
     * Labels as key value pairs.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels as key value pairs.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location for the Instance.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the Instance.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The resource name for the Instance.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name for the Instance.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Private settings for private instance.
     * Structure is documented below.
     * 
     */
    @Export(name="privateConfig", refs={InstancePrivateConfig.class}, tree="[0]")
    private Output</* @Nullable */ InstancePrivateConfig> privateConfig;

    /**
     * @return Private settings for private instance.
     * Structure is documented below.
     * 
     */
    public Output<Optional<InstancePrivateConfig>> privateConfig() {
        return Codegen.optional(this.privateConfig);
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The current state of the Instance.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current state of the Instance.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Provides information about the current instance state.
     * 
     */
    @Export(name="stateNote", refs={String.class}, tree="[0]")
    private Output<String> stateNote;

    /**
     * @return Provides information about the current instance state.
     * 
     */
    public Output<String> stateNote() {
        return this.stateNote;
    }
    /**
     * Time the Instance was updated in UTC.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Time the Instance was updated in UTC.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * Configuration for Workforce Identity Federation to support third party identity provider.
     * If unset, defaults to the Google OIDC IdP.
     * Structure is documented below.
     * 
     */
    @Export(name="workforceIdentityFederationConfig", refs={InstanceWorkforceIdentityFederationConfig.class}, tree="[0]")
    private Output</* @Nullable */ InstanceWorkforceIdentityFederationConfig> workforceIdentityFederationConfig;

    /**
     * @return Configuration for Workforce Identity Federation to support third party identity provider.
     * If unset, defaults to the Google OIDC IdP.
     * Structure is documented below.
     * 
     */
    public Output<Optional<InstanceWorkforceIdentityFederationConfig>> workforceIdentityFederationConfig() {
        return Codegen.optional(this.workforceIdentityFederationConfig);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Instance(java.lang.String name) {
        this(name, InstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Instance(java.lang.String name, InstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Instance(java.lang.String name, InstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:securesourcemanager/instance:Instance", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Instance(java.lang.String name, Output<java.lang.String> id, @Nullable InstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:securesourcemanager/instance:Instance", name, state, makeResourceOptions(options, id), false);
    }

    private static InstanceArgs makeArgs(InstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InstanceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Instance get(java.lang.String name, Output<java.lang.String> id, @Nullable InstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Instance(name, id, state, options);
    }
}
