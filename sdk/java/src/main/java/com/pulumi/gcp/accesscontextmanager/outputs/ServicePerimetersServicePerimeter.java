// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.accesscontextmanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.accesscontextmanager.outputs.ServicePerimetersServicePerimeterSpec;
import com.pulumi.gcp.accesscontextmanager.outputs.ServicePerimetersServicePerimeterStatus;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServicePerimetersServicePerimeter {
    /**
     * @return -
     * Time the AccessPolicy was created in UTC.
     * 
     */
    private @Nullable String createTime;
    /**
     * @return Description of the ServicePerimeter and its use. Does not affect
     * behavior.
     * 
     */
    private @Nullable String description;
    /**
     * @return Resource name for the ServicePerimeter. The short_name component must
     * begin with a letter and only include alphanumeric and &#39;_&#39;.
     * Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
     * 
     */
    private String name;
    /**
     * @return Specifies the type of the Perimeter. There are two types: regular and
     * bridge. Regular Service Perimeter contains resources, access levels,
     * and restricted services. Every resource can be in at most
     * ONE regular Service Perimeter.
     * In addition to being in a regular service perimeter, a resource can also
     * be in zero or more perimeter bridges. A perimeter bridge only contains
     * resources. Cross project operations are permitted if all effected
     * resources share some perimeter (whether bridge or regular). Perimeter
     * Bridge does not contain access levels or services: those are governed
     * entirely by the regular perimeter that resource is in.
     * Perimeter Bridges are typically useful when building more complex
     * topologies with many independent perimeters that need to share some data
     * with a common perimeter, but should not be able to share data among
     * themselves.
     * Default value is `PERIMETER_TYPE_REGULAR`.
     * Possible values are `PERIMETER_TYPE_REGULAR` and `PERIMETER_TYPE_BRIDGE`.
     * 
     */
    private @Nullable String perimeterType;
    /**
     * @return Proposed (or dry run) ServicePerimeter configuration.
     * This configuration allows to specify and test ServicePerimeter configuration
     * without enforcing actual access restrictions. Only allowed to be set when
     * the `useExplicitDryRunSpec` flag is set.
     * Structure is documented below.
     * 
     */
    private @Nullable ServicePerimetersServicePerimeterSpec spec;
    /**
     * @return ServicePerimeter configuration. Specifies sets of resources,
     * restricted services and access levels that determine
     * perimeter content and boundaries.
     * Structure is documented below.
     * 
     */
    private @Nullable ServicePerimetersServicePerimeterStatus status;
    /**
     * @return Human readable title. Must be unique within the Policy.
     * 
     */
    private String title;
    /**
     * @return -
     * Time the AccessPolicy was updated in UTC.
     * 
     */
    private @Nullable String updateTime;
    /**
     * @return Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists
     * for all Service Perimeters, and that spec is identical to the status for those
     * Service Perimeters. When this flag is set, it inhibits the generation of the
     * implicit spec, thereby allowing the user to explicitly provide a
     * configuration (&#34;spec&#34;) to use in a dry-run version of the Service Perimeter.
     * This allows the user to test changes to the enforced config (&#34;status&#34;) without
     * actually enforcing them. This testing is done through analyzing the differences
     * between currently enforced and suggested restrictions. useExplicitDryRunSpec must
     * bet set to True if any of the fields in the spec are set to non-default values.
     * 
     */
    private @Nullable Boolean useExplicitDryRunSpec;

    private ServicePerimetersServicePerimeter() {}
    /**
     * @return -
     * Time the AccessPolicy was created in UTC.
     * 
     */
    public Optional<String> createTime() {
        return Optional.ofNullable(this.createTime);
    }
    /**
     * @return Description of the ServicePerimeter and its use. Does not affect
     * behavior.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Resource name for the ServicePerimeter. The short_name component must
     * begin with a letter and only include alphanumeric and &#39;_&#39;.
     * Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies the type of the Perimeter. There are two types: regular and
     * bridge. Regular Service Perimeter contains resources, access levels,
     * and restricted services. Every resource can be in at most
     * ONE regular Service Perimeter.
     * In addition to being in a regular service perimeter, a resource can also
     * be in zero or more perimeter bridges. A perimeter bridge only contains
     * resources. Cross project operations are permitted if all effected
     * resources share some perimeter (whether bridge or regular). Perimeter
     * Bridge does not contain access levels or services: those are governed
     * entirely by the regular perimeter that resource is in.
     * Perimeter Bridges are typically useful when building more complex
     * topologies with many independent perimeters that need to share some data
     * with a common perimeter, but should not be able to share data among
     * themselves.
     * Default value is `PERIMETER_TYPE_REGULAR`.
     * Possible values are `PERIMETER_TYPE_REGULAR` and `PERIMETER_TYPE_BRIDGE`.
     * 
     */
    public Optional<String> perimeterType() {
        return Optional.ofNullable(this.perimeterType);
    }
    /**
     * @return Proposed (or dry run) ServicePerimeter configuration.
     * This configuration allows to specify and test ServicePerimeter configuration
     * without enforcing actual access restrictions. Only allowed to be set when
     * the `useExplicitDryRunSpec` flag is set.
     * Structure is documented below.
     * 
     */
    public Optional<ServicePerimetersServicePerimeterSpec> spec() {
        return Optional.ofNullable(this.spec);
    }
    /**
     * @return ServicePerimeter configuration. Specifies sets of resources,
     * restricted services and access levels that determine
     * perimeter content and boundaries.
     * Structure is documented below.
     * 
     */
    public Optional<ServicePerimetersServicePerimeterStatus> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Human readable title. Must be unique within the Policy.
     * 
     */
    public String title() {
        return this.title;
    }
    /**
     * @return -
     * Time the AccessPolicy was updated in UTC.
     * 
     */
    public Optional<String> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }
    /**
     * @return Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists
     * for all Service Perimeters, and that spec is identical to the status for those
     * Service Perimeters. When this flag is set, it inhibits the generation of the
     * implicit spec, thereby allowing the user to explicitly provide a
     * configuration (&#34;spec&#34;) to use in a dry-run version of the Service Perimeter.
     * This allows the user to test changes to the enforced config (&#34;status&#34;) without
     * actually enforcing them. This testing is done through analyzing the differences
     * between currently enforced and suggested restrictions. useExplicitDryRunSpec must
     * bet set to True if any of the fields in the spec are set to non-default values.
     * 
     */
    public Optional<Boolean> useExplicitDryRunSpec() {
        return Optional.ofNullable(this.useExplicitDryRunSpec);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServicePerimetersServicePerimeter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String createTime;
        private @Nullable String description;
        private String name;
        private @Nullable String perimeterType;
        private @Nullable ServicePerimetersServicePerimeterSpec spec;
        private @Nullable ServicePerimetersServicePerimeterStatus status;
        private String title;
        private @Nullable String updateTime;
        private @Nullable Boolean useExplicitDryRunSpec;
        public Builder() {}
        public Builder(ServicePerimetersServicePerimeter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.perimeterType = defaults.perimeterType;
    	      this.spec = defaults.spec;
    	      this.status = defaults.status;
    	      this.title = defaults.title;
    	      this.updateTime = defaults.updateTime;
    	      this.useExplicitDryRunSpec = defaults.useExplicitDryRunSpec;
        }

        @CustomType.Setter
        public Builder createTime(@Nullable String createTime) {
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder perimeterType(@Nullable String perimeterType) {
            this.perimeterType = perimeterType;
            return this;
        }
        @CustomType.Setter
        public Builder spec(@Nullable ServicePerimetersServicePerimeterSpec spec) {
            this.spec = spec;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable ServicePerimetersServicePerimeterStatus status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(@Nullable String updateTime) {
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder useExplicitDryRunSpec(@Nullable Boolean useExplicitDryRunSpec) {
            this.useExplicitDryRunSpec = useExplicitDryRunSpec;
            return this;
        }
        public ServicePerimetersServicePerimeter build() {
            final var o = new ServicePerimetersServicePerimeter();
            o.createTime = createTime;
            o.description = description;
            o.name = name;
            o.perimeterType = perimeterType;
            o.spec = spec;
            o.status = status;
            o.title = title;
            o.updateTime = updateTime;
            o.useExplicitDryRunSpec = useExplicitDryRunSpec;
            return o;
        }
    }
}
