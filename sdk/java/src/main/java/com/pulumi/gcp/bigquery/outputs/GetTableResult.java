// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigquery.outputs.GetTableBiglakeConfiguration;
import com.pulumi.gcp.bigquery.outputs.GetTableEncryptionConfiguration;
import com.pulumi.gcp.bigquery.outputs.GetTableExternalCatalogTableOption;
import com.pulumi.gcp.bigquery.outputs.GetTableExternalDataConfiguration;
import com.pulumi.gcp.bigquery.outputs.GetTableMaterializedView;
import com.pulumi.gcp.bigquery.outputs.GetTableRangePartitioning;
import com.pulumi.gcp.bigquery.outputs.GetTableSchemaForeignTypeInfo;
import com.pulumi.gcp.bigquery.outputs.GetTableTableConstraint;
import com.pulumi.gcp.bigquery.outputs.GetTableTableReplicationInfo;
import com.pulumi.gcp.bigquery.outputs.GetTableTimePartitioning;
import com.pulumi.gcp.bigquery.outputs.GetTableView;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTableResult {
    private List<GetTableBiglakeConfiguration> biglakeConfigurations;
    private List<String> clusterings;
    private Integer creationTime;
    private String datasetId;
    private Boolean deletionProtection;
    private String description;
    private Map<String,String> effectiveLabels;
    private List<GetTableEncryptionConfiguration> encryptionConfigurations;
    private String etag;
    private Integer expirationTime;
    private List<GetTableExternalCatalogTableOption> externalCatalogTableOptions;
    private List<GetTableExternalDataConfiguration> externalDataConfigurations;
    private String friendlyName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private Integer lastModifiedTime;
    private String location;
    private List<GetTableMaterializedView> materializedViews;
    private String maxStaleness;
    private Integer numBytes;
    private Integer numLongTermBytes;
    private Integer numRows;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private List<GetTableRangePartitioning> rangePartitionings;
    private Boolean requirePartitionFilter;
    private Map<String,String> resourceTags;
    private String schema;
    private List<GetTableSchemaForeignTypeInfo> schemaForeignTypeInfos;
    private String selfLink;
    private List<GetTableTableConstraint> tableConstraints;
    private String tableId;
    private String tableMetadataView;
    private List<GetTableTableReplicationInfo> tableReplicationInfos;
    private List<GetTableTimePartitioning> timePartitionings;
    private String type;
    private List<GetTableView> views;

    private GetTableResult() {}
    public List<GetTableBiglakeConfiguration> biglakeConfigurations() {
        return this.biglakeConfigurations;
    }
    public List<String> clusterings() {
        return this.clusterings;
    }
    public Integer creationTime() {
        return this.creationTime;
    }
    public String datasetId() {
        return this.datasetId;
    }
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    public String description() {
        return this.description;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public List<GetTableEncryptionConfiguration> encryptionConfigurations() {
        return this.encryptionConfigurations;
    }
    public String etag() {
        return this.etag;
    }
    public Integer expirationTime() {
        return this.expirationTime;
    }
    public List<GetTableExternalCatalogTableOption> externalCatalogTableOptions() {
        return this.externalCatalogTableOptions;
    }
    public List<GetTableExternalDataConfiguration> externalDataConfigurations() {
        return this.externalDataConfigurations;
    }
    public String friendlyName() {
        return this.friendlyName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public Integer lastModifiedTime() {
        return this.lastModifiedTime;
    }
    public String location() {
        return this.location;
    }
    public List<GetTableMaterializedView> materializedViews() {
        return this.materializedViews;
    }
    public String maxStaleness() {
        return this.maxStaleness;
    }
    public Integer numBytes() {
        return this.numBytes;
    }
    public Integer numLongTermBytes() {
        return this.numLongTermBytes;
    }
    public Integer numRows() {
        return this.numRows;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public List<GetTableRangePartitioning> rangePartitionings() {
        return this.rangePartitionings;
    }
    public Boolean requirePartitionFilter() {
        return this.requirePartitionFilter;
    }
    public Map<String,String> resourceTags() {
        return this.resourceTags;
    }
    public String schema() {
        return this.schema;
    }
    public List<GetTableSchemaForeignTypeInfo> schemaForeignTypeInfos() {
        return this.schemaForeignTypeInfos;
    }
    public String selfLink() {
        return this.selfLink;
    }
    public List<GetTableTableConstraint> tableConstraints() {
        return this.tableConstraints;
    }
    public String tableId() {
        return this.tableId;
    }
    public String tableMetadataView() {
        return this.tableMetadataView;
    }
    public List<GetTableTableReplicationInfo> tableReplicationInfos() {
        return this.tableReplicationInfos;
    }
    public List<GetTableTimePartitioning> timePartitionings() {
        return this.timePartitionings;
    }
    public String type() {
        return this.type;
    }
    public List<GetTableView> views() {
        return this.views;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetTableBiglakeConfiguration> biglakeConfigurations;
        private List<String> clusterings;
        private Integer creationTime;
        private String datasetId;
        private Boolean deletionProtection;
        private String description;
        private Map<String,String> effectiveLabels;
        private List<GetTableEncryptionConfiguration> encryptionConfigurations;
        private String etag;
        private Integer expirationTime;
        private List<GetTableExternalCatalogTableOption> externalCatalogTableOptions;
        private List<GetTableExternalDataConfiguration> externalDataConfigurations;
        private String friendlyName;
        private String id;
        private Map<String,String> labels;
        private Integer lastModifiedTime;
        private String location;
        private List<GetTableMaterializedView> materializedViews;
        private String maxStaleness;
        private Integer numBytes;
        private Integer numLongTermBytes;
        private Integer numRows;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private List<GetTableRangePartitioning> rangePartitionings;
        private Boolean requirePartitionFilter;
        private Map<String,String> resourceTags;
        private String schema;
        private List<GetTableSchemaForeignTypeInfo> schemaForeignTypeInfos;
        private String selfLink;
        private List<GetTableTableConstraint> tableConstraints;
        private String tableId;
        private String tableMetadataView;
        private List<GetTableTableReplicationInfo> tableReplicationInfos;
        private List<GetTableTimePartitioning> timePartitionings;
        private String type;
        private List<GetTableView> views;
        public Builder() {}
        public Builder(GetTableResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.biglakeConfigurations = defaults.biglakeConfigurations;
    	      this.clusterings = defaults.clusterings;
    	      this.creationTime = defaults.creationTime;
    	      this.datasetId = defaults.datasetId;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.description = defaults.description;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.encryptionConfigurations = defaults.encryptionConfigurations;
    	      this.etag = defaults.etag;
    	      this.expirationTime = defaults.expirationTime;
    	      this.externalCatalogTableOptions = defaults.externalCatalogTableOptions;
    	      this.externalDataConfigurations = defaults.externalDataConfigurations;
    	      this.friendlyName = defaults.friendlyName;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.location = defaults.location;
    	      this.materializedViews = defaults.materializedViews;
    	      this.maxStaleness = defaults.maxStaleness;
    	      this.numBytes = defaults.numBytes;
    	      this.numLongTermBytes = defaults.numLongTermBytes;
    	      this.numRows = defaults.numRows;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.rangePartitionings = defaults.rangePartitionings;
    	      this.requirePartitionFilter = defaults.requirePartitionFilter;
    	      this.resourceTags = defaults.resourceTags;
    	      this.schema = defaults.schema;
    	      this.schemaForeignTypeInfos = defaults.schemaForeignTypeInfos;
    	      this.selfLink = defaults.selfLink;
    	      this.tableConstraints = defaults.tableConstraints;
    	      this.tableId = defaults.tableId;
    	      this.tableMetadataView = defaults.tableMetadataView;
    	      this.tableReplicationInfos = defaults.tableReplicationInfos;
    	      this.timePartitionings = defaults.timePartitionings;
    	      this.type = defaults.type;
    	      this.views = defaults.views;
        }

        @CustomType.Setter
        public Builder biglakeConfigurations(List<GetTableBiglakeConfiguration> biglakeConfigurations) {
            if (biglakeConfigurations == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "biglakeConfigurations");
            }
            this.biglakeConfigurations = biglakeConfigurations;
            return this;
        }
        public Builder biglakeConfigurations(GetTableBiglakeConfiguration... biglakeConfigurations) {
            return biglakeConfigurations(List.of(biglakeConfigurations));
        }
        @CustomType.Setter
        public Builder clusterings(List<String> clusterings) {
            if (clusterings == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "clusterings");
            }
            this.clusterings = clusterings;
            return this;
        }
        public Builder clusterings(String... clusterings) {
            return clusterings(List.of(clusterings));
        }
        @CustomType.Setter
        public Builder creationTime(Integer creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder datasetId(String datasetId) {
            if (datasetId == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "datasetId");
            }
            this.datasetId = datasetId;
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionConfigurations(List<GetTableEncryptionConfiguration> encryptionConfigurations) {
            if (encryptionConfigurations == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "encryptionConfigurations");
            }
            this.encryptionConfigurations = encryptionConfigurations;
            return this;
        }
        public Builder encryptionConfigurations(GetTableEncryptionConfiguration... encryptionConfigurations) {
            return encryptionConfigurations(List.of(encryptionConfigurations));
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            if (etag == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "etag");
            }
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder expirationTime(Integer expirationTime) {
            if (expirationTime == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "expirationTime");
            }
            this.expirationTime = expirationTime;
            return this;
        }
        @CustomType.Setter
        public Builder externalCatalogTableOptions(List<GetTableExternalCatalogTableOption> externalCatalogTableOptions) {
            if (externalCatalogTableOptions == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "externalCatalogTableOptions");
            }
            this.externalCatalogTableOptions = externalCatalogTableOptions;
            return this;
        }
        public Builder externalCatalogTableOptions(GetTableExternalCatalogTableOption... externalCatalogTableOptions) {
            return externalCatalogTableOptions(List.of(externalCatalogTableOptions));
        }
        @CustomType.Setter
        public Builder externalDataConfigurations(List<GetTableExternalDataConfiguration> externalDataConfigurations) {
            if (externalDataConfigurations == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "externalDataConfigurations");
            }
            this.externalDataConfigurations = externalDataConfigurations;
            return this;
        }
        public Builder externalDataConfigurations(GetTableExternalDataConfiguration... externalDataConfigurations) {
            return externalDataConfigurations(List.of(externalDataConfigurations));
        }
        @CustomType.Setter
        public Builder friendlyName(String friendlyName) {
            if (friendlyName == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "friendlyName");
            }
            this.friendlyName = friendlyName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedTime(Integer lastModifiedTime) {
            if (lastModifiedTime == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "lastModifiedTime");
            }
            this.lastModifiedTime = lastModifiedTime;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder materializedViews(List<GetTableMaterializedView> materializedViews) {
            if (materializedViews == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "materializedViews");
            }
            this.materializedViews = materializedViews;
            return this;
        }
        public Builder materializedViews(GetTableMaterializedView... materializedViews) {
            return materializedViews(List.of(materializedViews));
        }
        @CustomType.Setter
        public Builder maxStaleness(String maxStaleness) {
            if (maxStaleness == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "maxStaleness");
            }
            this.maxStaleness = maxStaleness;
            return this;
        }
        @CustomType.Setter
        public Builder numBytes(Integer numBytes) {
            if (numBytes == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "numBytes");
            }
            this.numBytes = numBytes;
            return this;
        }
        @CustomType.Setter
        public Builder numLongTermBytes(Integer numLongTermBytes) {
            if (numLongTermBytes == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "numLongTermBytes");
            }
            this.numLongTermBytes = numLongTermBytes;
            return this;
        }
        @CustomType.Setter
        public Builder numRows(Integer numRows) {
            if (numRows == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "numRows");
            }
            this.numRows = numRows;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder rangePartitionings(List<GetTableRangePartitioning> rangePartitionings) {
            if (rangePartitionings == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "rangePartitionings");
            }
            this.rangePartitionings = rangePartitionings;
            return this;
        }
        public Builder rangePartitionings(GetTableRangePartitioning... rangePartitionings) {
            return rangePartitionings(List.of(rangePartitionings));
        }
        @CustomType.Setter
        public Builder requirePartitionFilter(Boolean requirePartitionFilter) {
            if (requirePartitionFilter == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "requirePartitionFilter");
            }
            this.requirePartitionFilter = requirePartitionFilter;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTags(Map<String,String> resourceTags) {
            if (resourceTags == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "resourceTags");
            }
            this.resourceTags = resourceTags;
            return this;
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            if (schema == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "schema");
            }
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder schemaForeignTypeInfos(List<GetTableSchemaForeignTypeInfo> schemaForeignTypeInfos) {
            if (schemaForeignTypeInfos == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "schemaForeignTypeInfos");
            }
            this.schemaForeignTypeInfos = schemaForeignTypeInfos;
            return this;
        }
        public Builder schemaForeignTypeInfos(GetTableSchemaForeignTypeInfo... schemaForeignTypeInfos) {
            return schemaForeignTypeInfos(List.of(schemaForeignTypeInfos));
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder tableConstraints(List<GetTableTableConstraint> tableConstraints) {
            if (tableConstraints == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "tableConstraints");
            }
            this.tableConstraints = tableConstraints;
            return this;
        }
        public Builder tableConstraints(GetTableTableConstraint... tableConstraints) {
            return tableConstraints(List.of(tableConstraints));
        }
        @CustomType.Setter
        public Builder tableId(String tableId) {
            if (tableId == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "tableId");
            }
            this.tableId = tableId;
            return this;
        }
        @CustomType.Setter
        public Builder tableMetadataView(String tableMetadataView) {
            if (tableMetadataView == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "tableMetadataView");
            }
            this.tableMetadataView = tableMetadataView;
            return this;
        }
        @CustomType.Setter
        public Builder tableReplicationInfos(List<GetTableTableReplicationInfo> tableReplicationInfos) {
            if (tableReplicationInfos == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "tableReplicationInfos");
            }
            this.tableReplicationInfos = tableReplicationInfos;
            return this;
        }
        public Builder tableReplicationInfos(GetTableTableReplicationInfo... tableReplicationInfos) {
            return tableReplicationInfos(List.of(tableReplicationInfos));
        }
        @CustomType.Setter
        public Builder timePartitionings(List<GetTableTimePartitioning> timePartitionings) {
            if (timePartitionings == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "timePartitionings");
            }
            this.timePartitionings = timePartitionings;
            return this;
        }
        public Builder timePartitionings(GetTableTimePartitioning... timePartitionings) {
            return timePartitionings(List.of(timePartitionings));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder views(List<GetTableView> views) {
            if (views == null) {
              throw new MissingRequiredPropertyException("GetTableResult", "views");
            }
            this.views = views;
            return this;
        }
        public Builder views(GetTableView... views) {
            return views(List.of(views));
        }
        public GetTableResult build() {
            final var _resultValue = new GetTableResult();
            _resultValue.biglakeConfigurations = biglakeConfigurations;
            _resultValue.clusterings = clusterings;
            _resultValue.creationTime = creationTime;
            _resultValue.datasetId = datasetId;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.description = description;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.encryptionConfigurations = encryptionConfigurations;
            _resultValue.etag = etag;
            _resultValue.expirationTime = expirationTime;
            _resultValue.externalCatalogTableOptions = externalCatalogTableOptions;
            _resultValue.externalDataConfigurations = externalDataConfigurations;
            _resultValue.friendlyName = friendlyName;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.lastModifiedTime = lastModifiedTime;
            _resultValue.location = location;
            _resultValue.materializedViews = materializedViews;
            _resultValue.maxStaleness = maxStaleness;
            _resultValue.numBytes = numBytes;
            _resultValue.numLongTermBytes = numLongTermBytes;
            _resultValue.numRows = numRows;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.rangePartitionings = rangePartitionings;
            _resultValue.requirePartitionFilter = requirePartitionFilter;
            _resultValue.resourceTags = resourceTags;
            _resultValue.schema = schema;
            _resultValue.schemaForeignTypeInfos = schemaForeignTypeInfos;
            _resultValue.selfLink = selfLink;
            _resultValue.tableConstraints = tableConstraints;
            _resultValue.tableId = tableId;
            _resultValue.tableMetadataView = tableMetadataView;
            _resultValue.tableReplicationInfos = tableReplicationInfos;
            _resultValue.timePartitionings = timePartitionings;
            _resultValue.type = type;
            _resultValue.views = views;
            return _resultValue;
        }
    }
}
