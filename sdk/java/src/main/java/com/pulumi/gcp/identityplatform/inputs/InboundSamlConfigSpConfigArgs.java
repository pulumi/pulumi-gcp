// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.identityplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.identityplatform.inputs.InboundSamlConfigSpConfigSpCertificateArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InboundSamlConfigSpConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InboundSamlConfigSpConfigArgs Empty = new InboundSamlConfigSpConfigArgs();

    /**
     * Callback URI where responses from IDP are handled. Must start with `https://`.
     * 
     */
    @Import(name="callbackUri")
    private @Nullable Output<String> callbackUri;

    /**
     * @return Callback URI where responses from IDP are handled. Must start with `https://`.
     * 
     */
    public Optional<Output<String>> callbackUri() {
        return Optional.ofNullable(this.callbackUri);
    }

    /**
     * (Output)
     * The IDP&#39;s certificate data to verify the signature in the SAMLResponse issued by the IDP.
     * Structure is documented below.
     * 
     * &lt;a name=&#34;nested_sp_certificates&#34;&gt;&lt;/a&gt;The `sp_certificates` block contains:
     * 
     */
    @Import(name="spCertificates")
    private @Nullable Output<List<InboundSamlConfigSpConfigSpCertificateArgs>> spCertificates;

    /**
     * @return (Output)
     * The IDP&#39;s certificate data to verify the signature in the SAMLResponse issued by the IDP.
     * Structure is documented below.
     * 
     * &lt;a name=&#34;nested_sp_certificates&#34;&gt;&lt;/a&gt;The `sp_certificates` block contains:
     * 
     */
    public Optional<Output<List<InboundSamlConfigSpConfigSpCertificateArgs>>> spCertificates() {
        return Optional.ofNullable(this.spCertificates);
    }

    /**
     * Unique identifier for all SAML entities.
     * 
     */
    @Import(name="spEntityId")
    private @Nullable Output<String> spEntityId;

    /**
     * @return Unique identifier for all SAML entities.
     * 
     */
    public Optional<Output<String>> spEntityId() {
        return Optional.ofNullable(this.spEntityId);
    }

    private InboundSamlConfigSpConfigArgs() {}

    private InboundSamlConfigSpConfigArgs(InboundSamlConfigSpConfigArgs $) {
        this.callbackUri = $.callbackUri;
        this.spCertificates = $.spCertificates;
        this.spEntityId = $.spEntityId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InboundSamlConfigSpConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InboundSamlConfigSpConfigArgs $;

        public Builder() {
            $ = new InboundSamlConfigSpConfigArgs();
        }

        public Builder(InboundSamlConfigSpConfigArgs defaults) {
            $ = new InboundSamlConfigSpConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param callbackUri Callback URI where responses from IDP are handled. Must start with `https://`.
         * 
         * @return builder
         * 
         */
        public Builder callbackUri(@Nullable Output<String> callbackUri) {
            $.callbackUri = callbackUri;
            return this;
        }

        /**
         * @param callbackUri Callback URI where responses from IDP are handled. Must start with `https://`.
         * 
         * @return builder
         * 
         */
        public Builder callbackUri(String callbackUri) {
            return callbackUri(Output.of(callbackUri));
        }

        /**
         * @param spCertificates (Output)
         * The IDP&#39;s certificate data to verify the signature in the SAMLResponse issued by the IDP.
         * Structure is documented below.
         * 
         * &lt;a name=&#34;nested_sp_certificates&#34;&gt;&lt;/a&gt;The `sp_certificates` block contains:
         * 
         * @return builder
         * 
         */
        public Builder spCertificates(@Nullable Output<List<InboundSamlConfigSpConfigSpCertificateArgs>> spCertificates) {
            $.spCertificates = spCertificates;
            return this;
        }

        /**
         * @param spCertificates (Output)
         * The IDP&#39;s certificate data to verify the signature in the SAMLResponse issued by the IDP.
         * Structure is documented below.
         * 
         * &lt;a name=&#34;nested_sp_certificates&#34;&gt;&lt;/a&gt;The `sp_certificates` block contains:
         * 
         * @return builder
         * 
         */
        public Builder spCertificates(List<InboundSamlConfigSpConfigSpCertificateArgs> spCertificates) {
            return spCertificates(Output.of(spCertificates));
        }

        /**
         * @param spCertificates (Output)
         * The IDP&#39;s certificate data to verify the signature in the SAMLResponse issued by the IDP.
         * Structure is documented below.
         * 
         * &lt;a name=&#34;nested_sp_certificates&#34;&gt;&lt;/a&gt;The `sp_certificates` block contains:
         * 
         * @return builder
         * 
         */
        public Builder spCertificates(InboundSamlConfigSpConfigSpCertificateArgs... spCertificates) {
            return spCertificates(List.of(spCertificates));
        }

        /**
         * @param spEntityId Unique identifier for all SAML entities.
         * 
         * @return builder
         * 
         */
        public Builder spEntityId(@Nullable Output<String> spEntityId) {
            $.spEntityId = spEntityId;
            return this;
        }

        /**
         * @param spEntityId Unique identifier for all SAML entities.
         * 
         * @return builder
         * 
         */
        public Builder spEntityId(String spEntityId) {
            return spEntityId(Output.of(spEntityId));
        }

        public InboundSamlConfigSpConfigArgs build() {
            return $;
        }
    }

}
