// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.CxTestCaseLastTestResultConversationTurnArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxTestCaseLastTestResultArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxTestCaseLastTestResultArgs Empty = new CxTestCaseLastTestResultArgs();

    /**
     * The conversation turns uttered during the test case replay in chronological order.
     * Structure is documented below.
     * 
     */
    @Import(name="conversationTurns")
    private @Nullable Output<List<CxTestCaseLastTestResultConversationTurnArgs>> conversationTurns;

    /**
     * @return The conversation turns uttered during the test case replay in chronological order.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<CxTestCaseLastTestResultConversationTurnArgs>>> conversationTurns() {
        return Optional.ofNullable(this.conversationTurns);
    }

    /**
     * Environment where the test was run. If not set, it indicates the draft environment.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return Environment where the test was run. If not set, it indicates the draft environment.
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * The unique identifier of the page.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/pages/&lt;Page ID&gt;.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique identifier of the page.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/pages/&lt;Page ID&gt;.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether the test case passed in the agent environment.
     * * PASSED: The test passed.
     * * FAILED: The test did not pass.
     *   Possible values are: `PASSED`, `FAILED`.
     * 
     */
    @Import(name="testResult")
    private @Nullable Output<String> testResult;

    /**
     * @return Whether the test case passed in the agent environment.
     * * PASSED: The test passed.
     * * FAILED: The test did not pass.
     *   Possible values are: `PASSED`, `FAILED`.
     * 
     */
    public Optional<Output<String>> testResult() {
        return Optional.ofNullable(this.testResult);
    }

    /**
     * The time that the test was run. A timestamp in RFC3339 text format.
     * 
     */
    @Import(name="testTime")
    private @Nullable Output<String> testTime;

    /**
     * @return The time that the test was run. A timestamp in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> testTime() {
        return Optional.ofNullable(this.testTime);
    }

    private CxTestCaseLastTestResultArgs() {}

    private CxTestCaseLastTestResultArgs(CxTestCaseLastTestResultArgs $) {
        this.conversationTurns = $.conversationTurns;
        this.environment = $.environment;
        this.name = $.name;
        this.testResult = $.testResult;
        this.testTime = $.testTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxTestCaseLastTestResultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxTestCaseLastTestResultArgs $;

        public Builder() {
            $ = new CxTestCaseLastTestResultArgs();
        }

        public Builder(CxTestCaseLastTestResultArgs defaults) {
            $ = new CxTestCaseLastTestResultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conversationTurns The conversation turns uttered during the test case replay in chronological order.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conversationTurns(@Nullable Output<List<CxTestCaseLastTestResultConversationTurnArgs>> conversationTurns) {
            $.conversationTurns = conversationTurns;
            return this;
        }

        /**
         * @param conversationTurns The conversation turns uttered during the test case replay in chronological order.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conversationTurns(List<CxTestCaseLastTestResultConversationTurnArgs> conversationTurns) {
            return conversationTurns(Output.of(conversationTurns));
        }

        /**
         * @param conversationTurns The conversation turns uttered during the test case replay in chronological order.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conversationTurns(CxTestCaseLastTestResultConversationTurnArgs... conversationTurns) {
            return conversationTurns(List.of(conversationTurns));
        }

        /**
         * @param environment Environment where the test was run. If not set, it indicates the draft environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment where the test was run. If not set, it indicates the draft environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param name The unique identifier of the page.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/pages/&lt;Page ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique identifier of the page.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/pages/&lt;Page ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param testResult Whether the test case passed in the agent environment.
         * * PASSED: The test passed.
         * * FAILED: The test did not pass.
         *   Possible values are: `PASSED`, `FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder testResult(@Nullable Output<String> testResult) {
            $.testResult = testResult;
            return this;
        }

        /**
         * @param testResult Whether the test case passed in the agent environment.
         * * PASSED: The test passed.
         * * FAILED: The test did not pass.
         *   Possible values are: `PASSED`, `FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder testResult(String testResult) {
            return testResult(Output.of(testResult));
        }

        /**
         * @param testTime The time that the test was run. A timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder testTime(@Nullable Output<String> testTime) {
            $.testTime = testTime;
            return this;
        }

        /**
         * @param testTime The time that the test was run. A timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder testTime(String testTime) {
            return testTime(Output.of(testTime));
        }

        public CxTestCaseLastTestResultArgs build() {
            return $;
        }
    }

}
