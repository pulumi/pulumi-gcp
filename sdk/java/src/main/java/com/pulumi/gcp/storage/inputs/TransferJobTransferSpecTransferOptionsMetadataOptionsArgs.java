// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransferJobTransferSpecTransferOptionsMetadataOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransferJobTransferSpecTransferOptionsMetadataOptionsArgs Empty = new TransferJobTransferSpecTransferOptionsMetadataOptionsArgs();

    /**
     * Specifies how each object&#39;s ACLs should be preserved for transfers between Google Cloud Storage buckets
     * 
     */
    @Import(name="acl")
    private @Nullable Output<String> acl;

    /**
     * @return Specifies how each object&#39;s ACLs should be preserved for transfers between Google Cloud Storage buckets
     * 
     */
    public Optional<Output<String>> acl() {
        return Optional.ofNullable(this.acl);
    }

    /**
     * Specifies how each file&#39;s POSIX group ID (GID) attribute should be handled by the transfer.
     * 
     */
    @Import(name="gid")
    private @Nullable Output<String> gid;

    /**
     * @return Specifies how each file&#39;s POSIX group ID (GID) attribute should be handled by the transfer.
     * 
     */
    public Optional<Output<String>> gid() {
        return Optional.ofNullable(this.gid);
    }

    /**
     * Specifies how each object&#39;s Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets
     * 
     */
    @Import(name="kmsKey")
    private @Nullable Output<String> kmsKey;

    /**
     * @return Specifies how each object&#39;s Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets
     * 
     */
    public Optional<Output<String>> kmsKey() {
        return Optional.ofNullable(this.kmsKey);
    }

    /**
     * Specifies how each file&#39;s mode attribute should be handled by the transfer.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Specifies how each file&#39;s mode attribute should be handled by the transfer.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets
     * 
     */
    @Import(name="storageClass")
    private @Nullable Output<String> storageClass;

    /**
     * @return Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets
     * 
     */
    public Optional<Output<String>> storageClass() {
        return Optional.ofNullable(this.storageClass);
    }

    /**
     * Specifies how symlinks should be handled by the transfer.
     * 
     */
    @Import(name="symlink")
    private @Nullable Output<String> symlink;

    /**
     * @return Specifies how symlinks should be handled by the transfer.
     * 
     */
    public Optional<Output<String>> symlink() {
        return Optional.ofNullable(this.symlink);
    }

    /**
     * SSpecifies how each object&#39;s temporary hold status should be preserved for transfers between Google Cloud Storage buckets
     * 
     */
    @Import(name="temporaryHold")
    private @Nullable Output<String> temporaryHold;

    /**
     * @return SSpecifies how each object&#39;s temporary hold status should be preserved for transfers between Google Cloud Storage buckets
     * 
     */
    public Optional<Output<String>> temporaryHold() {
        return Optional.ofNullable(this.temporaryHold);
    }

    /**
     * Specifies how each object&#39;s timeCreated metadata is preserved for transfers.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return Specifies how each object&#39;s timeCreated metadata is preserved for transfers.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * Specifies how each file&#39;s POSIX user ID (UID) attribute should be handled by the transfer.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Specifies how each file&#39;s POSIX user ID (UID) attribute should be handled by the transfer.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private TransferJobTransferSpecTransferOptionsMetadataOptionsArgs() {}

    private TransferJobTransferSpecTransferOptionsMetadataOptionsArgs(TransferJobTransferSpecTransferOptionsMetadataOptionsArgs $) {
        this.acl = $.acl;
        this.gid = $.gid;
        this.kmsKey = $.kmsKey;
        this.mode = $.mode;
        this.storageClass = $.storageClass;
        this.symlink = $.symlink;
        this.temporaryHold = $.temporaryHold;
        this.timeCreated = $.timeCreated;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferJobTransferSpecTransferOptionsMetadataOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferJobTransferSpecTransferOptionsMetadataOptionsArgs $;

        public Builder() {
            $ = new TransferJobTransferSpecTransferOptionsMetadataOptionsArgs();
        }

        public Builder(TransferJobTransferSpecTransferOptionsMetadataOptionsArgs defaults) {
            $ = new TransferJobTransferSpecTransferOptionsMetadataOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acl Specifies how each object&#39;s ACLs should be preserved for transfers between Google Cloud Storage buckets
         * 
         * @return builder
         * 
         */
        public Builder acl(@Nullable Output<String> acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param acl Specifies how each object&#39;s ACLs should be preserved for transfers between Google Cloud Storage buckets
         * 
         * @return builder
         * 
         */
        public Builder acl(String acl) {
            return acl(Output.of(acl));
        }

        /**
         * @param gid Specifies how each file&#39;s POSIX group ID (GID) attribute should be handled by the transfer.
         * 
         * @return builder
         * 
         */
        public Builder gid(@Nullable Output<String> gid) {
            $.gid = gid;
            return this;
        }

        /**
         * @param gid Specifies how each file&#39;s POSIX group ID (GID) attribute should be handled by the transfer.
         * 
         * @return builder
         * 
         */
        public Builder gid(String gid) {
            return gid(Output.of(gid));
        }

        /**
         * @param kmsKey Specifies how each object&#39;s Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        /**
         * @param kmsKey Specifies how each object&#39;s Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(String kmsKey) {
            return kmsKey(Output.of(kmsKey));
        }

        /**
         * @param mode Specifies how each file&#39;s mode attribute should be handled by the transfer.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Specifies how each file&#39;s mode attribute should be handled by the transfer.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param storageClass Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets
         * 
         * @return builder
         * 
         */
        public Builder storageClass(@Nullable Output<String> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        /**
         * @param storageClass Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets
         * 
         * @return builder
         * 
         */
        public Builder storageClass(String storageClass) {
            return storageClass(Output.of(storageClass));
        }

        /**
         * @param symlink Specifies how symlinks should be handled by the transfer.
         * 
         * @return builder
         * 
         */
        public Builder symlink(@Nullable Output<String> symlink) {
            $.symlink = symlink;
            return this;
        }

        /**
         * @param symlink Specifies how symlinks should be handled by the transfer.
         * 
         * @return builder
         * 
         */
        public Builder symlink(String symlink) {
            return symlink(Output.of(symlink));
        }

        /**
         * @param temporaryHold SSpecifies how each object&#39;s temporary hold status should be preserved for transfers between Google Cloud Storage buckets
         * 
         * @return builder
         * 
         */
        public Builder temporaryHold(@Nullable Output<String> temporaryHold) {
            $.temporaryHold = temporaryHold;
            return this;
        }

        /**
         * @param temporaryHold SSpecifies how each object&#39;s temporary hold status should be preserved for transfers between Google Cloud Storage buckets
         * 
         * @return builder
         * 
         */
        public Builder temporaryHold(String temporaryHold) {
            return temporaryHold(Output.of(temporaryHold));
        }

        /**
         * @param timeCreated Specifies how each object&#39;s timeCreated metadata is preserved for transfers.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated Specifies how each object&#39;s timeCreated metadata is preserved for transfers.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param uid Specifies how each file&#39;s POSIX user ID (UID) attribute should be handled by the transfer.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Specifies how each file&#39;s POSIX user ID (UID) attribute should be handled by the transfer.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public TransferJobTransferSpecTransferOptionsMetadataOptionsArgs build() {
            return $;
        }
    }

}
