// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securityposture.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.securityposture.inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleConditionArgs;
import com.pulumi.gcp.securityposture.inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleValuesArgs;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs Empty = new PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs();

    /**
     * Setting this to true means that all values are allowed. This field can be set only in policies for list constraints.
     * 
     */
    @Import(name="allowAll")
    private @Nullable Output<Boolean> allowAll;

    /**
     * @return Setting this to true means that all values are allowed. This field can be set only in policies for list constraints.
     * 
     */
    public Optional<Output<Boolean>> allowAll() {
        return Optional.ofNullable(this.allowAll);
    }

    /**
     * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
     * This page details the objects and attributes that are used to the build the CEL expressions for
     * custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
     * Structure is documented below.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleConditionArgs> condition;

    /**
     * @return Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
     * This page details the objects and attributes that are used to the build the CEL expressions for
     * custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * Setting this to true means that all values are denied. This field can be set only in policies for list constraints.
     * 
     */
    @Import(name="denyAll")
    private @Nullable Output<Boolean> denyAll;

    /**
     * @return Setting this to true means that all values are denied. This field can be set only in policies for list constraints.
     * 
     */
    public Optional<Output<Boolean>> denyAll() {
        return Optional.ofNullable(this.denyAll);
    }

    /**
     * If `true`, then the policy is enforced. If `false`, then any configuration is acceptable.
     * This field can be set only in policies for boolean constraints.
     * 
     */
    @Import(name="enforce")
    private @Nullable Output<Boolean> enforce;

    /**
     * @return If `true`, then the policy is enforced. If `false`, then any configuration is acceptable.
     * This field can be set only in policies for boolean constraints.
     * 
     */
    public Optional<Output<Boolean>> enforce() {
        return Optional.ofNullable(this.enforce);
    }

    /**
     * List of values to be used for this policy rule. This field can be set only in policies for list constraints.
     * Structure is documented below.
     * 
     */
    @Import(name="values")
    private @Nullable Output<PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleValuesArgs> values;

    /**
     * @return List of values to be used for this policy rule. This field can be set only in policies for list constraints.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleValuesArgs>> values() {
        return Optional.ofNullable(this.values);
    }

    private PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs() {}

    private PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs(PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs $) {
        this.allowAll = $.allowAll;
        this.condition = $.condition;
        this.denyAll = $.denyAll;
        this.enforce = $.enforce;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs $;

        public Builder() {
            $ = new PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs();
        }

        public Builder(PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs defaults) {
            $ = new PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowAll Setting this to true means that all values are allowed. This field can be set only in policies for list constraints.
         * 
         * @return builder
         * 
         */
        public Builder allowAll(@Nullable Output<Boolean> allowAll) {
            $.allowAll = allowAll;
            return this;
        }

        /**
         * @param allowAll Setting this to true means that all values are allowed. This field can be set only in policies for list constraints.
         * 
         * @return builder
         * 
         */
        public Builder allowAll(Boolean allowAll) {
            return allowAll(Output.of(allowAll));
        }

        /**
         * @param condition Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
         * This page details the objects and attributes that are used to the build the CEL expressions for
         * custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
         * This page details the objects and attributes that are used to the build the CEL expressions for
         * custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder condition(PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param denyAll Setting this to true means that all values are denied. This field can be set only in policies for list constraints.
         * 
         * @return builder
         * 
         */
        public Builder denyAll(@Nullable Output<Boolean> denyAll) {
            $.denyAll = denyAll;
            return this;
        }

        /**
         * @param denyAll Setting this to true means that all values are denied. This field can be set only in policies for list constraints.
         * 
         * @return builder
         * 
         */
        public Builder denyAll(Boolean denyAll) {
            return denyAll(Output.of(denyAll));
        }

        /**
         * @param enforce If `true`, then the policy is enforced. If `false`, then any configuration is acceptable.
         * This field can be set only in policies for boolean constraints.
         * 
         * @return builder
         * 
         */
        public Builder enforce(@Nullable Output<Boolean> enforce) {
            $.enforce = enforce;
            return this;
        }

        /**
         * @param enforce If `true`, then the policy is enforced. If `false`, then any configuration is acceptable.
         * This field can be set only in policies for boolean constraints.
         * 
         * @return builder
         * 
         */
        public Builder enforce(Boolean enforce) {
            return enforce(Output.of(enforce));
        }

        /**
         * @param values List of values to be used for this policy rule. This field can be set only in policies for list constraints.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleValuesArgs> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values List of values to be used for this policy rule. This field can be set only in policies for list constraints.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder values(PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleValuesArgs values) {
            return values(Output.of(values));
        }

        public PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs build() {
            return $;
        }
    }

}
