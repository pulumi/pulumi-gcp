// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudrunv2.inputs.JobTemplateTemplateContainerEnvValueSourceArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobTemplateTemplateContainerEnvArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobTemplateTemplateContainerEnvArgs Empty = new JobTemplateTemplateContainerEnvArgs();

    /**
     * Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to &#34;&#34;, and the maximum length is 32768 bytes
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to &#34;&#34;, and the maximum length is 32768 bytes
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * Source for the environment variable&#39;s value.
     * Structure is documented below.
     * 
     */
    @Import(name="valueSource")
    private @Nullable Output<JobTemplateTemplateContainerEnvValueSourceArgs> valueSource;

    /**
     * @return Source for the environment variable&#39;s value.
     * Structure is documented below.
     * 
     */
    public Optional<Output<JobTemplateTemplateContainerEnvValueSourceArgs>> valueSource() {
        return Optional.ofNullable(this.valueSource);
    }

    private JobTemplateTemplateContainerEnvArgs() {}

    private JobTemplateTemplateContainerEnvArgs(JobTemplateTemplateContainerEnvArgs $) {
        this.name = $.name;
        this.value = $.value;
        this.valueSource = $.valueSource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobTemplateTemplateContainerEnvArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobTemplateTemplateContainerEnvArgs $;

        public Builder() {
            $ = new JobTemplateTemplateContainerEnvArgs();
        }

        public Builder(JobTemplateTemplateContainerEnvArgs defaults) {
            $ = new JobTemplateTemplateContainerEnvArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param value Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to &#34;&#34;, and the maximum length is 32768 bytes
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to &#34;&#34;, and the maximum length is 32768 bytes
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param valueSource Source for the environment variable&#39;s value.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder valueSource(@Nullable Output<JobTemplateTemplateContainerEnvValueSourceArgs> valueSource) {
            $.valueSource = valueSource;
            return this;
        }

        /**
         * @param valueSource Source for the environment variable&#39;s value.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder valueSource(JobTemplateTemplateContainerEnvValueSourceArgs valueSource) {
            return valueSource(Output.of(valueSource));
        }

        public JobTemplateTemplateContainerEnvArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
