// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.discoveryengine.inputs.DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataStoreDocumentProcessingConfigChunkingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataStoreDocumentProcessingConfigChunkingConfigArgs Empty = new DataStoreDocumentProcessingConfigChunkingConfigArgs();

    /**
     * Configuration for the layout based chunking.
     * Structure is documented below.
     * 
     */
    @Import(name="layoutBasedChunkingConfig")
    private @Nullable Output<DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs> layoutBasedChunkingConfig;

    /**
     * @return Configuration for the layout based chunking.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs>> layoutBasedChunkingConfig() {
        return Optional.ofNullable(this.layoutBasedChunkingConfig);
    }

    private DataStoreDocumentProcessingConfigChunkingConfigArgs() {}

    private DataStoreDocumentProcessingConfigChunkingConfigArgs(DataStoreDocumentProcessingConfigChunkingConfigArgs $) {
        this.layoutBasedChunkingConfig = $.layoutBasedChunkingConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataStoreDocumentProcessingConfigChunkingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataStoreDocumentProcessingConfigChunkingConfigArgs $;

        public Builder() {
            $ = new DataStoreDocumentProcessingConfigChunkingConfigArgs();
        }

        public Builder(DataStoreDocumentProcessingConfigChunkingConfigArgs defaults) {
            $ = new DataStoreDocumentProcessingConfigChunkingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param layoutBasedChunkingConfig Configuration for the layout based chunking.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder layoutBasedChunkingConfig(@Nullable Output<DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs> layoutBasedChunkingConfig) {
            $.layoutBasedChunkingConfig = layoutBasedChunkingConfig;
            return this;
        }

        /**
         * @param layoutBasedChunkingConfig Configuration for the layout based chunking.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder layoutBasedChunkingConfig(DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs layoutBasedChunkingConfig) {
            return layoutBasedChunkingConfig(Output.of(layoutBasedChunkingConfig));
        }

        public DataStoreDocumentProcessingConfigChunkingConfigArgs build() {
            return $;
        }
    }

}
