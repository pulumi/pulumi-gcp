// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddeploy.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.clouddeploy.outputs.AutomationRuleRepairRolloutRuleRepairPhase;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class AutomationRuleRepairRolloutRule {
    /**
     * @return Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
     * 
     */
    private String id;
    /**
     * @return Optional. Jobs to repair. Proceeds only after job name matched any one in the list, or for all jobs if unspecified or empty. The phase that includes the job must match the phase ID specified in sourcePhase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: ^a-z?$.
     * 
     */
    private @Nullable List<String> jobs;
    /**
     * @return Optional. Phases within which jobs are subject to automatic repair actions on failure. Proceeds only after phase name matched any one in the list, or for all phases if unspecified. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: ^a-z?$.
     * 
     */
    private @Nullable List<String> phases;
    /**
     * @return Optional. Proceeds only after phase name matched any one in the list. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^a-z?$`.
     * Structure is documented below.
     * 
     */
    private @Nullable List<AutomationRuleRepairRolloutRuleRepairPhase> repairPhases;

    private AutomationRuleRepairRolloutRule() {}
    /**
     * @return Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Optional. Jobs to repair. Proceeds only after job name matched any one in the list, or for all jobs if unspecified or empty. The phase that includes the job must match the phase ID specified in sourcePhase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: ^a-z?$.
     * 
     */
    public List<String> jobs() {
        return this.jobs == null ? List.of() : this.jobs;
    }
    /**
     * @return Optional. Phases within which jobs are subject to automatic repair actions on failure. Proceeds only after phase name matched any one in the list, or for all phases if unspecified. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: ^a-z?$.
     * 
     */
    public List<String> phases() {
        return this.phases == null ? List.of() : this.phases;
    }
    /**
     * @return Optional. Proceeds only after phase name matched any one in the list. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^a-z?$`.
     * Structure is documented below.
     * 
     */
    public List<AutomationRuleRepairRolloutRuleRepairPhase> repairPhases() {
        return this.repairPhases == null ? List.of() : this.repairPhases;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutomationRuleRepairRolloutRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable List<String> jobs;
        private @Nullable List<String> phases;
        private @Nullable List<AutomationRuleRepairRolloutRuleRepairPhase> repairPhases;
        public Builder() {}
        public Builder(AutomationRuleRepairRolloutRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.jobs = defaults.jobs;
    	      this.phases = defaults.phases;
    	      this.repairPhases = defaults.repairPhases;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("AutomationRuleRepairRolloutRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder jobs(@Nullable List<String> jobs) {

            this.jobs = jobs;
            return this;
        }
        public Builder jobs(String... jobs) {
            return jobs(List.of(jobs));
        }
        @CustomType.Setter
        public Builder phases(@Nullable List<String> phases) {

            this.phases = phases;
            return this;
        }
        public Builder phases(String... phases) {
            return phases(List.of(phases));
        }
        @CustomType.Setter
        public Builder repairPhases(@Nullable List<AutomationRuleRepairRolloutRuleRepairPhase> repairPhases) {

            this.repairPhases = repairPhases;
            return this;
        }
        public Builder repairPhases(AutomationRuleRepairRolloutRuleRepairPhase... repairPhases) {
            return repairPhases(List.of(repairPhases));
        }
        public AutomationRuleRepairRolloutRule build() {
            final var _resultValue = new AutomationRuleRepairRolloutRule();
            _resultValue.id = id;
            _resultValue.jobs = jobs;
            _resultValue.phases = phases;
            _resultValue.repairPhases = repairPhases;
            return _resultValue;
        }
    }
}
