// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuildv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudbuildv2.inputs.ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionGithubEnterpriseConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionGithubEnterpriseConfigArgs Empty = new ConnectionGithubEnterpriseConfigArgs();

    /**
     * Id of the GitHub App created from the manifest.
     * 
     */
    @Import(name="appId")
    private @Nullable Output<Integer> appId;

    /**
     * @return Id of the GitHub App created from the manifest.
     * 
     */
    public Optional<Output<Integer>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * ID of the installation of the GitHub App.
     * 
     */
    @Import(name="appInstallationId")
    private @Nullable Output<Integer> appInstallationId;

    /**
     * @return ID of the installation of the GitHub App.
     * 
     */
    public Optional<Output<Integer>> appInstallationId() {
        return Optional.ofNullable(this.appInstallationId);
    }

    /**
     * The URL-friendly name of the GitHub App.
     * 
     */
    @Import(name="appSlug")
    private @Nullable Output<String> appSlug;

    /**
     * @return The URL-friendly name of the GitHub App.
     * 
     */
    public Optional<Output<String>> appSlug() {
        return Optional.ofNullable(this.appSlug);
    }

    /**
     * Required. The URI of the GitHub Enterprise host this connection is for.
     * 
     */
    @Import(name="hostUri", required=true)
    private Output<String> hostUri;

    /**
     * @return Required. The URI of the GitHub Enterprise host this connection is for.
     * 
     */
    public Output<String> hostUri() {
        return this.hostUri;
    }

    /**
     * SecretManager resource containing the private key of the GitHub App, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    @Import(name="privateKeySecretVersion")
    private @Nullable Output<String> privateKeySecretVersion;

    /**
     * @return SecretManager resource containing the private key of the GitHub App, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    public Optional<Output<String>> privateKeySecretVersion() {
        return Optional.ofNullable(this.privateKeySecretVersion);
    }

    /**
     * Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
     * 
     */
    @Import(name="serviceDirectoryConfig")
    private @Nullable Output<ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs> serviceDirectoryConfig;

    /**
     * @return Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
     * 
     */
    public Optional<Output<ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs>> serviceDirectoryConfig() {
        return Optional.ofNullable(this.serviceDirectoryConfig);
    }

    /**
     * SSL certificate to use for requests to GitHub Enterprise.
     * 
     */
    @Import(name="sslCa")
    private @Nullable Output<String> sslCa;

    /**
     * @return SSL certificate to use for requests to GitHub Enterprise.
     * 
     */
    public Optional<Output<String>> sslCa() {
        return Optional.ofNullable(this.sslCa);
    }

    /**
     * SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    @Import(name="webhookSecretSecretVersion")
    private @Nullable Output<String> webhookSecretSecretVersion;

    /**
     * @return SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    public Optional<Output<String>> webhookSecretSecretVersion() {
        return Optional.ofNullable(this.webhookSecretSecretVersion);
    }

    private ConnectionGithubEnterpriseConfigArgs() {}

    private ConnectionGithubEnterpriseConfigArgs(ConnectionGithubEnterpriseConfigArgs $) {
        this.appId = $.appId;
        this.appInstallationId = $.appInstallationId;
        this.appSlug = $.appSlug;
        this.hostUri = $.hostUri;
        this.privateKeySecretVersion = $.privateKeySecretVersion;
        this.serviceDirectoryConfig = $.serviceDirectoryConfig;
        this.sslCa = $.sslCa;
        this.webhookSecretSecretVersion = $.webhookSecretSecretVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionGithubEnterpriseConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionGithubEnterpriseConfigArgs $;

        public Builder() {
            $ = new ConnectionGithubEnterpriseConfigArgs();
        }

        public Builder(ConnectionGithubEnterpriseConfigArgs defaults) {
            $ = new ConnectionGithubEnterpriseConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId Id of the GitHub App created from the manifest.
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<Integer> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId Id of the GitHub App created from the manifest.
         * 
         * @return builder
         * 
         */
        public Builder appId(Integer appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param appInstallationId ID of the installation of the GitHub App.
         * 
         * @return builder
         * 
         */
        public Builder appInstallationId(@Nullable Output<Integer> appInstallationId) {
            $.appInstallationId = appInstallationId;
            return this;
        }

        /**
         * @param appInstallationId ID of the installation of the GitHub App.
         * 
         * @return builder
         * 
         */
        public Builder appInstallationId(Integer appInstallationId) {
            return appInstallationId(Output.of(appInstallationId));
        }

        /**
         * @param appSlug The URL-friendly name of the GitHub App.
         * 
         * @return builder
         * 
         */
        public Builder appSlug(@Nullable Output<String> appSlug) {
            $.appSlug = appSlug;
            return this;
        }

        /**
         * @param appSlug The URL-friendly name of the GitHub App.
         * 
         * @return builder
         * 
         */
        public Builder appSlug(String appSlug) {
            return appSlug(Output.of(appSlug));
        }

        /**
         * @param hostUri Required. The URI of the GitHub Enterprise host this connection is for.
         * 
         * @return builder
         * 
         */
        public Builder hostUri(Output<String> hostUri) {
            $.hostUri = hostUri;
            return this;
        }

        /**
         * @param hostUri Required. The URI of the GitHub Enterprise host this connection is for.
         * 
         * @return builder
         * 
         */
        public Builder hostUri(String hostUri) {
            return hostUri(Output.of(hostUri));
        }

        /**
         * @param privateKeySecretVersion SecretManager resource containing the private key of the GitHub App, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder privateKeySecretVersion(@Nullable Output<String> privateKeySecretVersion) {
            $.privateKeySecretVersion = privateKeySecretVersion;
            return this;
        }

        /**
         * @param privateKeySecretVersion SecretManager resource containing the private key of the GitHub App, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder privateKeySecretVersion(String privateKeySecretVersion) {
            return privateKeySecretVersion(Output.of(privateKeySecretVersion));
        }

        /**
         * @param serviceDirectoryConfig Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryConfig(@Nullable Output<ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs> serviceDirectoryConfig) {
            $.serviceDirectoryConfig = serviceDirectoryConfig;
            return this;
        }

        /**
         * @param serviceDirectoryConfig Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryConfig(ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs serviceDirectoryConfig) {
            return serviceDirectoryConfig(Output.of(serviceDirectoryConfig));
        }

        /**
         * @param sslCa SSL certificate to use for requests to GitHub Enterprise.
         * 
         * @return builder
         * 
         */
        public Builder sslCa(@Nullable Output<String> sslCa) {
            $.sslCa = sslCa;
            return this;
        }

        /**
         * @param sslCa SSL certificate to use for requests to GitHub Enterprise.
         * 
         * @return builder
         * 
         */
        public Builder sslCa(String sslCa) {
            return sslCa(Output.of(sslCa));
        }

        /**
         * @param webhookSecretSecretVersion SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecretSecretVersion(@Nullable Output<String> webhookSecretSecretVersion) {
            $.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return this;
        }

        /**
         * @param webhookSecretSecretVersion SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecretSecretVersion(String webhookSecretSecretVersion) {
            return webhookSecretSecretVersion(Output.of(webhookSecretSecretVersion));
        }

        public ConnectionGithubEnterpriseConfigArgs build() {
            $.hostUri = Objects.requireNonNull($.hostUri, "expected parameter 'hostUri' to be non-null");
            return $;
        }
    }

}
