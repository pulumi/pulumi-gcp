// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apphub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.apphub.ServiceArgs;
import com.pulumi.gcp.apphub.inputs.ServiceState;
import com.pulumi.gcp.apphub.outputs.ServiceAttributes;
import com.pulumi.gcp.apphub.outputs.ServiceServiceProperty;
import com.pulumi.gcp.apphub.outputs.ServiceServiceReference;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Service is a network/api interface that exposes some functionality to clients for consumption over the network. Service typically has one or more Workloads behind it. It registers identified service to the Application.
 * 
 * ## Example Usage
 * 
 * ### Apphub Service Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.apphub.Application;
 * import com.pulumi.gcp.apphub.ApplicationArgs;
 * import com.pulumi.gcp.apphub.inputs.ApplicationScopeArgs;
 * import com.pulumi.gcp.organizations.Project;
 * import com.pulumi.gcp.organizations.ProjectArgs;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.time.sleep;
 * import com.pulumi.time.SleepArgs;
 * import com.pulumi.gcp.apphub.ServiceProjectAttachment;
 * import com.pulumi.gcp.apphub.ServiceProjectAttachmentArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.ForwardingRule;
 * import com.pulumi.gcp.compute.ForwardingRuleArgs;
 * import com.pulumi.gcp.apphub.ApphubFunctions;
 * import com.pulumi.gcp.apphub.inputs.GetDiscoveredServiceArgs;
 * import com.pulumi.gcp.apphub.Service;
 * import com.pulumi.gcp.apphub.ServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var application = new Application(&#34;application&#34;, ApplicationArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .applicationId(&#34;example-application-1&#34;)
 *             .scope(ApplicationScopeArgs.builder()
 *                 .type(&#34;REGIONAL&#34;)
 *                 .build())
 *             .build());
 * 
 *         var serviceProject = new Project(&#34;serviceProject&#34;, ProjectArgs.builder()        
 *             .projectId(&#34;project-1&#34;)
 *             .name(&#34;Service Project&#34;)
 *             .orgId(&#34;123456789&#34;)
 *             .billingAccount(&#34;000000-0000000-0000000-000000&#34;)
 *             .build());
 * 
 *         var computeServiceProject = new Service(&#34;computeServiceProject&#34;, ServiceArgs.builder()        
 *             .project(serviceProject.projectId())
 *             .service(&#34;compute.googleapis.com&#34;)
 *             .build());
 * 
 *         var wait120s = new Sleep(&#34;wait120s&#34;, SleepArgs.builder()        
 *             .createDuration(&#34;120s&#34;)
 *             .build());
 * 
 *         var serviceProjectAttachment = new ServiceProjectAttachment(&#34;serviceProjectAttachment&#34;, ServiceProjectAttachmentArgs.builder()        
 *             .serviceProjectAttachmentId(serviceProject.projectId())
 *             .build());
 * 
 *         var ilbNetwork = new Network(&#34;ilbNetwork&#34;, NetworkArgs.builder()        
 *             .name(&#34;l7-ilb-network&#34;)
 *             .project(serviceProject.projectId())
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var ilbSubnet = new Subnetwork(&#34;ilbSubnet&#34;, SubnetworkArgs.builder()        
 *             .name(&#34;l7-ilb-subnet&#34;)
 *             .project(serviceProject.projectId())
 *             .ipCidrRange(&#34;10.0.1.0/24&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .network(ilbNetwork.id())
 *             .build());
 * 
 *         var default_ = new HealthCheck(&#34;default&#34;, HealthCheckArgs.builder()        
 *             .name(&#34;l7-ilb-hc&#34;)
 *             .project(serviceProject.projectId())
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .port(&#34;80&#34;)
 *                 .build())
 *             .build());
 * 
 *         var backend = new RegionBackendService(&#34;backend&#34;, RegionBackendServiceArgs.builder()        
 *             .name(&#34;l7-ilb-backend-subnet&#34;)
 *             .project(serviceProject.projectId())
 *             .region(&#34;us-central1&#34;)
 *             .healthChecks(default_.id())
 *             .build());
 * 
 *         var forwardingRule = new ForwardingRule(&#34;forwardingRule&#34;, ForwardingRuleArgs.builder()        
 *             .name(&#34;l7-ilb-forwarding-rule&#34;)
 *             .project(serviceProject.projectId())
 *             .region(&#34;us-central1&#34;)
 *             .ipVersion(&#34;IPV4&#34;)
 *             .loadBalancingScheme(&#34;INTERNAL&#34;)
 *             .allPorts(true)
 *             .backendService(backend.id())
 *             .network(ilbNetwork.id())
 *             .subnetwork(ilbSubnet.id())
 *             .build());
 * 
 *         final var catalog-service = ApphubFunctions.getDiscoveredService(GetDiscoveredServiceArgs.builder()
 *             .location(&#34;us-central1&#34;)
 *             .serviceUri(forwardingRule.id().applyValue(id -&gt; String.format(&#34;//compute.googleapis.com/%s&#34;, id)))
 *             .build());
 * 
 *         var wait120sForResourceIngestion = new Sleep(&#34;wait120sForResourceIngestion&#34;, SleepArgs.builder()        
 *             .createDuration(&#34;120s&#34;)
 *             .build());
 * 
 *         var example = new Service(&#34;example&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .applicationId(application.applicationId())
 *             .serviceId(forwardingRule.name())
 *             .discoveredService(catalog_service.applyValue(catalog_service -&gt; catalog_service.name()))
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Apphub Service Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.apphub.Application;
 * import com.pulumi.gcp.apphub.ApplicationArgs;
 * import com.pulumi.gcp.apphub.inputs.ApplicationScopeArgs;
 * import com.pulumi.gcp.organizations.Project;
 * import com.pulumi.gcp.organizations.ProjectArgs;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.time.sleep;
 * import com.pulumi.time.SleepArgs;
 * import com.pulumi.gcp.apphub.ServiceProjectAttachment;
 * import com.pulumi.gcp.apphub.ServiceProjectAttachmentArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.ForwardingRule;
 * import com.pulumi.gcp.compute.ForwardingRuleArgs;
 * import com.pulumi.gcp.apphub.ApphubFunctions;
 * import com.pulumi.gcp.apphub.inputs.GetDiscoveredServiceArgs;
 * import com.pulumi.gcp.apphub.Service;
 * import com.pulumi.gcp.apphub.ServiceArgs;
 * import com.pulumi.gcp.apphub.inputs.ServiceAttributesArgs;
 * import com.pulumi.gcp.apphub.inputs.ServiceAttributesEnvironmentArgs;
 * import com.pulumi.gcp.apphub.inputs.ServiceAttributesCriticalityArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var application = new Application(&#34;application&#34;, ApplicationArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .applicationId(&#34;example-application-1&#34;)
 *             .scope(ApplicationScopeArgs.builder()
 *                 .type(&#34;REGIONAL&#34;)
 *                 .build())
 *             .build());
 * 
 *         var serviceProject = new Project(&#34;serviceProject&#34;, ProjectArgs.builder()        
 *             .projectId(&#34;project-1&#34;)
 *             .name(&#34;Service Project&#34;)
 *             .orgId(&#34;123456789&#34;)
 *             .billingAccount(&#34;000000-0000000-0000000-000000&#34;)
 *             .build());
 * 
 *         var computeServiceProject = new Service(&#34;computeServiceProject&#34;, ServiceArgs.builder()        
 *             .project(serviceProject.projectId())
 *             .service(&#34;compute.googleapis.com&#34;)
 *             .build());
 * 
 *         var wait120s = new Sleep(&#34;wait120s&#34;, SleepArgs.builder()        
 *             .createDuration(&#34;120s&#34;)
 *             .build());
 * 
 *         var serviceProjectAttachment = new ServiceProjectAttachment(&#34;serviceProjectAttachment&#34;, ServiceProjectAttachmentArgs.builder()        
 *             .serviceProjectAttachmentId(serviceProject.projectId())
 *             .build());
 * 
 *         var ilbNetwork = new Network(&#34;ilbNetwork&#34;, NetworkArgs.builder()        
 *             .name(&#34;l7-ilb-network&#34;)
 *             .project(serviceProject.projectId())
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var ilbSubnet = new Subnetwork(&#34;ilbSubnet&#34;, SubnetworkArgs.builder()        
 *             .name(&#34;l7-ilb-subnet&#34;)
 *             .project(serviceProject.projectId())
 *             .ipCidrRange(&#34;10.0.1.0/24&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .network(ilbNetwork.id())
 *             .build());
 * 
 *         var default_ = new HealthCheck(&#34;default&#34;, HealthCheckArgs.builder()        
 *             .name(&#34;l7-ilb-hc&#34;)
 *             .project(serviceProject.projectId())
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .port(&#34;80&#34;)
 *                 .build())
 *             .build());
 * 
 *         var backend = new RegionBackendService(&#34;backend&#34;, RegionBackendServiceArgs.builder()        
 *             .name(&#34;l7-ilb-backend-subnet&#34;)
 *             .project(serviceProject.projectId())
 *             .region(&#34;us-central1&#34;)
 *             .healthChecks(default_.id())
 *             .build());
 * 
 *         var forwardingRule = new ForwardingRule(&#34;forwardingRule&#34;, ForwardingRuleArgs.builder()        
 *             .name(&#34;l7-ilb-forwarding-rule&#34;)
 *             .project(serviceProject.projectId())
 *             .region(&#34;us-central1&#34;)
 *             .ipVersion(&#34;IPV4&#34;)
 *             .loadBalancingScheme(&#34;INTERNAL&#34;)
 *             .allPorts(true)
 *             .backendService(backend.id())
 *             .network(ilbNetwork.id())
 *             .subnetwork(ilbSubnet.id())
 *             .build());
 * 
 *         final var catalog-service = ApphubFunctions.getDiscoveredService(GetDiscoveredServiceArgs.builder()
 *             .location(&#34;us-central1&#34;)
 *             .serviceUri(forwardingRule.id().applyValue(id -&gt; String.format(&#34;//compute.googleapis.com/%s&#34;, id)))
 *             .build());
 * 
 *         var wait120sForResourceIngestion = new Sleep(&#34;wait120sForResourceIngestion&#34;, SleepArgs.builder()        
 *             .createDuration(&#34;120s&#34;)
 *             .build());
 * 
 *         var example = new Service(&#34;example&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .applicationId(application.applicationId())
 *             .serviceId(forwardingRule.name())
 *             .discoveredService(catalog_service.applyValue(catalog_service -&gt; catalog_service.name()))
 *             .displayName(&#34;Example Service Full&#34;)
 *             .description(&#34;Register service for testing&#34;)
 *             .attributes(ServiceAttributesArgs.builder()
 *                 .environment(ServiceAttributesEnvironmentArgs.builder()
 *                     .type(&#34;STAGING&#34;)
 *                     .build())
 *                 .criticality(ServiceAttributesCriticalityArgs.builder()
 *                     .type(&#34;MISSION_CRITICAL&#34;)
 *                     .build())
 *                 .businessOwners(ServiceAttributesBusinessOwnerArgs.builder()
 *                     .displayName(&#34;Alice&#34;)
 *                     .email(&#34;alice@google.com&#34;)
 *                     .build())
 *                 .developerOwners(ServiceAttributesDeveloperOwnerArgs.builder()
 *                     .displayName(&#34;Bob&#34;)
 *                     .email(&#34;bob@google.com&#34;)
 *                     .build())
 *                 .operatorOwners(ServiceAttributesOperatorOwnerArgs.builder()
 *                     .displayName(&#34;Charlie&#34;)
 *                     .email(&#34;charlie@google.com&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Service can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/applications/{{application_id}}/services/{{service_id}}`
 * 
 * * `{{project}}/{{location}}/{{application_id}}/{{service_id}}`
 * 
 * * `{{location}}/{{application_id}}/{{service_id}}`
 * 
 * When using the `pulumi import` command, Service can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:apphub/service:Service default projects/{{project}}/locations/{{location}}/applications/{{application_id}}/services/{{service_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:apphub/service:Service default {{project}}/{{location}}/{{application_id}}/{{service_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:apphub/service:Service default {{location}}/{{application_id}}/{{service_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:apphub/service:Service")
public class Service extends com.pulumi.resources.CustomResource {
    /**
     * Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
     * 
     */
    @Export(name="applicationId", refs={String.class}, tree="[0]")
    private Output<String> applicationId;

    /**
     * @return Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
     * 
     */
    public Output<String> applicationId() {
        return this.applicationId;
    }
    /**
     * Consumer provided attributes.
     * Structure is documented below.
     * 
     */
    @Export(name="attributes", refs={ServiceAttributes.class}, tree="[0]")
    private Output</* @Nullable */ ServiceAttributes> attributes;

    /**
     * @return Consumer provided attributes.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ServiceAttributes>> attributes() {
        return Codegen.optional(this.attributes);
    }
    /**
     * Output only. Create time.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. Create time.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * User-defined description of a Service.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return User-defined description of a Service.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Immutable. The resource name of the original discovered service.
     * 
     */
    @Export(name="discoveredService", refs={String.class}, tree="[0]")
    private Output<String> discoveredService;

    /**
     * @return Immutable. The resource name of the original discovered service.
     * 
     */
    public Output<String> discoveredService() {
        return this.discoveredService;
    }
    /**
     * User-defined name for the Service.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return User-defined name for the Service.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Identifier. The resource name of a Service. Format:
     * &#34;projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}&#34;
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. The resource name of a Service. Format:
     * &#34;projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}&#34;
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The Service identifier.
     * 
     * ***
     * 
     */
    @Export(name="serviceId", refs={String.class}, tree="[0]")
    private Output<String> serviceId;

    /**
     * @return The Service identifier.
     * 
     * ***
     * 
     */
    public Output<String> serviceId() {
        return this.serviceId;
    }
    /**
     * Properties of an underlying cloud resource that can comprise a Service.
     * Structure is documented below.
     * 
     */
    @Export(name="serviceProperties", refs={List.class,ServiceServiceProperty.class}, tree="[0,1]")
    private Output<List<ServiceServiceProperty>> serviceProperties;

    /**
     * @return Properties of an underlying cloud resource that can comprise a Service.
     * Structure is documented below.
     * 
     */
    public Output<List<ServiceServiceProperty>> serviceProperties() {
        return this.serviceProperties;
    }
    /**
     * Reference to an underlying networking resource that can comprise a Service.
     * Structure is documented below.
     * 
     */
    @Export(name="serviceReferences", refs={List.class,ServiceServiceReference.class}, tree="[0,1]")
    private Output<List<ServiceServiceReference>> serviceReferences;

    /**
     * @return Reference to an underlying networking resource that can comprise a Service.
     * Structure is documented below.
     * 
     */
    public Output<List<ServiceServiceReference>> serviceReferences() {
        return this.serviceReferences;
    }
    /**
     * Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
     * format.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
     * format.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Output only. Update time.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. Update time.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Service(String name) {
        this(name, ServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Service(String name, ServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Service(String name, ServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apphub/service:Service", name, args == null ? ServiceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Service(String name, Output<String> id, @Nullable ServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apphub/service:Service", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Service get(String name, Output<String> id, @Nullable ServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Service(name, id, state, options);
    }
}
