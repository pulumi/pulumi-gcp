// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securesourcemanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryUriArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryUriArgs Empty = new RepositoryUriArgs();

    /**
     * (Output)
     * API is the URI for API access.
     * 
     */
    @Import(name="api")
    private @Nullable Output<String> api;

    /**
     * @return (Output)
     * API is the URI for API access.
     * 
     */
    public Optional<Output<String>> api() {
        return Optional.ofNullable(this.api);
    }

    /**
     * (Output)
     * git_https is the git HTTPS URI for git operations.
     * 
     */
    @Import(name="gitHttps")
    private @Nullable Output<String> gitHttps;

    /**
     * @return (Output)
     * git_https is the git HTTPS URI for git operations.
     * 
     */
    public Optional<Output<String>> gitHttps() {
        return Optional.ofNullable(this.gitHttps);
    }

    /**
     * (Output)
     * HTML is the URI for the user to view the repository in a browser.
     * 
     */
    @Import(name="html")
    private @Nullable Output<String> html;

    /**
     * @return (Output)
     * HTML is the URI for the user to view the repository in a browser.
     * 
     */
    public Optional<Output<String>> html() {
        return Optional.ofNullable(this.html);
    }

    private RepositoryUriArgs() {}

    private RepositoryUriArgs(RepositoryUriArgs $) {
        this.api = $.api;
        this.gitHttps = $.gitHttps;
        this.html = $.html;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryUriArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryUriArgs $;

        public Builder() {
            $ = new RepositoryUriArgs();
        }

        public Builder(RepositoryUriArgs defaults) {
            $ = new RepositoryUriArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param api (Output)
         * API is the URI for API access.
         * 
         * @return builder
         * 
         */
        public Builder api(@Nullable Output<String> api) {
            $.api = api;
            return this;
        }

        /**
         * @param api (Output)
         * API is the URI for API access.
         * 
         * @return builder
         * 
         */
        public Builder api(String api) {
            return api(Output.of(api));
        }

        /**
         * @param gitHttps (Output)
         * git_https is the git HTTPS URI for git operations.
         * 
         * @return builder
         * 
         */
        public Builder gitHttps(@Nullable Output<String> gitHttps) {
            $.gitHttps = gitHttps;
            return this;
        }

        /**
         * @param gitHttps (Output)
         * git_https is the git HTTPS URI for git operations.
         * 
         * @return builder
         * 
         */
        public Builder gitHttps(String gitHttps) {
            return gitHttps(Output.of(gitHttps));
        }

        /**
         * @param html (Output)
         * HTML is the URI for the user to view the repository in a browser.
         * 
         * @return builder
         * 
         */
        public Builder html(@Nullable Output<String> html) {
            $.html = html;
            return this;
        }

        /**
         * @param html (Output)
         * HTML is the URI for the user to view the repository in a browser.
         * 
         * @return builder
         * 
         */
        public Builder html(String html) {
            return html(Output.of(html));
        }

        public RepositoryUriArgs build() {
            return $;
        }
    }

}
