// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class EncryptionSpecEncryptionSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final EncryptionSpecEncryptionSpecArgs Empty = new EncryptionSpecEncryptionSpecArgs();

    /**
     * The name of customer-managed encryption key that is used to secure a resource and its sub-resources.
     * If empty, the resource is secured by the default Google encryption key.
     * Only the key in the same location as this resource is allowed to be used for encryption.
     * Format: projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{key}
     * 
     * ***
     * 
     */
    @Import(name="kmsKey", required=true)
    private Output<String> kmsKey;

    /**
     * @return The name of customer-managed encryption key that is used to secure a resource and its sub-resources.
     * If empty, the resource is secured by the default Google encryption key.
     * Only the key in the same location as this resource is allowed to be used for encryption.
     * Format: projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{key}
     * 
     * ***
     * 
     */
    public Output<String> kmsKey() {
        return this.kmsKey;
    }

    private EncryptionSpecEncryptionSpecArgs() {}

    private EncryptionSpecEncryptionSpecArgs(EncryptionSpecEncryptionSpecArgs $) {
        this.kmsKey = $.kmsKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncryptionSpecEncryptionSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncryptionSpecEncryptionSpecArgs $;

        public Builder() {
            $ = new EncryptionSpecEncryptionSpecArgs();
        }

        public Builder(EncryptionSpecEncryptionSpecArgs defaults) {
            $ = new EncryptionSpecEncryptionSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param kmsKey The name of customer-managed encryption key that is used to secure a resource and its sub-resources.
         * If empty, the resource is secured by the default Google encryption key.
         * Only the key in the same location as this resource is allowed to be used for encryption.
         * Format: projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{key}
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(Output<String> kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        /**
         * @param kmsKey The name of customer-managed encryption key that is used to secure a resource and its sub-resources.
         * If empty, the resource is secured by the default Google encryption key.
         * Only the key in the same location as this resource is allowed to be used for encryption.
         * Format: projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{key}
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(String kmsKey) {
            return kmsKey(Output.of(kmsKey));
        }

        public EncryptionSpecEncryptionSpecArgs build() {
            if ($.kmsKey == null) {
                throw new MissingRequiredPropertyException("EncryptionSpecEncryptionSpecArgs", "kmsKey");
            }
            return $;
        }
    }

}
