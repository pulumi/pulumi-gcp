// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.datastream.outputs.StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class StreamBackfillAllOracleExcludedObjectsOracleSchema {
    /**
     * @return Tables in the database.
     * Structure is documented below.
     * 
     */
    private @Nullable List<StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable> oracleTables;
    /**
     * @return Schema name.
     * 
     */
    private String schema;

    private StreamBackfillAllOracleExcludedObjectsOracleSchema() {}
    /**
     * @return Tables in the database.
     * Structure is documented below.
     * 
     */
    public List<StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable> oracleTables() {
        return this.oracleTables == null ? List.of() : this.oracleTables;
    }
    /**
     * @return Schema name.
     * 
     */
    public String schema() {
        return this.schema;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamBackfillAllOracleExcludedObjectsOracleSchema defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable> oracleTables;
        private String schema;
        public Builder() {}
        public Builder(StreamBackfillAllOracleExcludedObjectsOracleSchema defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.oracleTables = defaults.oracleTables;
    	      this.schema = defaults.schema;
        }

        @CustomType.Setter
        public Builder oracleTables(@Nullable List<StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable> oracleTables) {
            this.oracleTables = oracleTables;
            return this;
        }
        public Builder oracleTables(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTable... oracleTables) {
            return oracleTables(List.of(oracleTables));
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }
        public StreamBackfillAllOracleExcludedObjectsOracleSchema build() {
            final var _resultValue = new StreamBackfillAllOracleExcludedObjectsOracleSchema();
            _resultValue.oracleTables = oracleTables;
            _resultValue.schema = schema;
            return _resultValue;
        }
    }
}
