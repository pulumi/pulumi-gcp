// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualitySpecRuleNonNullExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualitySpecRuleRangeExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualitySpecRuleRegexExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualitySpecRuleRowConditionExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualitySpecRuleSetExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualitySpecRuleSqlAssertionArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualitySpecRuleStatisticRangeExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualitySpecRuleTableConditionExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualitySpecRuleUniquenessExpectationArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatascanDataQualitySpecRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatascanDataQualitySpecRuleArgs Empty = new DatascanDataQualitySpecRuleArgs();

    /**
     * The unnested column which this rule is evaluated against.
     * 
     */
    @Import(name="column")
    private @Nullable Output<String> column;

    /**
     * @return The unnested column which this rule is evaluated against.
     * 
     */
    public Optional<Output<String>> column() {
        return Optional.ofNullable(this.column);
    }

    /**
     * Description of the rule.
     * The maximum length is 1,024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the rule.
     * The maximum length is 1,024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The dimension name a rule belongs to. Custom dimension name is supported with all uppercase letters and maximum length of 30 characters.
     * 
     */
    @Import(name="dimension", required=true)
    private Output<String> dimension;

    /**
     * @return The dimension name a rule belongs to. Custom dimension name is supported with all uppercase letters and maximum length of 30 characters.
     * 
     */
    public Output<String> dimension() {
        return this.dimension;
    }

    /**
     * Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
     * 
     */
    @Import(name="ignoreNull")
    private @Nullable Output<Boolean> ignoreNull;

    /**
     * @return Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
     * 
     */
    public Optional<Output<Boolean>> ignoreNull() {
        return Optional.ofNullable(this.ignoreNull);
    }

    /**
     * A mutable name for the rule.
     * The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-).
     * The maximum length is 63 characters.
     * Must start with a letter.
     * Must end with a number or a letter.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A mutable name for the rule.
     * The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-).
     * The maximum length is 63 characters.
     * Must start with a letter.
     * Must end with a number or a letter.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ColumnMap rule which evaluates whether each column value is null.
     * 
     */
    @Import(name="nonNullExpectation")
    private @Nullable Output<DatascanDataQualitySpecRuleNonNullExpectationArgs> nonNullExpectation;

    /**
     * @return ColumnMap rule which evaluates whether each column value is null.
     * 
     */
    public Optional<Output<DatascanDataQualitySpecRuleNonNullExpectationArgs>> nonNullExpectation() {
        return Optional.ofNullable(this.nonNullExpectation);
    }

    /**
     * ColumnMap rule which evaluates whether each column value lies between a specified range.
     * Structure is documented below.
     * 
     */
    @Import(name="rangeExpectation")
    private @Nullable Output<DatascanDataQualitySpecRuleRangeExpectationArgs> rangeExpectation;

    /**
     * @return ColumnMap rule which evaluates whether each column value lies between a specified range.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DatascanDataQualitySpecRuleRangeExpectationArgs>> rangeExpectation() {
        return Optional.ofNullable(this.rangeExpectation);
    }

    /**
     * ColumnMap rule which evaluates whether each column value matches a specified regex.
     * Structure is documented below.
     * 
     */
    @Import(name="regexExpectation")
    private @Nullable Output<DatascanDataQualitySpecRuleRegexExpectationArgs> regexExpectation;

    /**
     * @return ColumnMap rule which evaluates whether each column value matches a specified regex.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DatascanDataQualitySpecRuleRegexExpectationArgs>> regexExpectation() {
        return Optional.ofNullable(this.regexExpectation);
    }

    /**
     * Table rule which evaluates whether each row passes the specified condition.
     * Structure is documented below.
     * 
     */
    @Import(name="rowConditionExpectation")
    private @Nullable Output<DatascanDataQualitySpecRuleRowConditionExpectationArgs> rowConditionExpectation;

    /**
     * @return Table rule which evaluates whether each row passes the specified condition.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DatascanDataQualitySpecRuleRowConditionExpectationArgs>> rowConditionExpectation() {
        return Optional.ofNullable(this.rowConditionExpectation);
    }

    /**
     * ColumnMap rule which evaluates whether each column value is contained by a specified set.
     * Structure is documented below.
     * 
     */
    @Import(name="setExpectation")
    private @Nullable Output<DatascanDataQualitySpecRuleSetExpectationArgs> setExpectation;

    /**
     * @return ColumnMap rule which evaluates whether each column value is contained by a specified set.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DatascanDataQualitySpecRuleSetExpectationArgs>> setExpectation() {
        return Optional.ofNullable(this.setExpectation);
    }

    /**
     * Table rule which evaluates whether any row matches invalid state.
     * Structure is documented below.
     * 
     */
    @Import(name="sqlAssertion")
    private @Nullable Output<DatascanDataQualitySpecRuleSqlAssertionArgs> sqlAssertion;

    /**
     * @return Table rule which evaluates whether any row matches invalid state.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DatascanDataQualitySpecRuleSqlAssertionArgs>> sqlAssertion() {
        return Optional.ofNullable(this.sqlAssertion);
    }

    /**
     * ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
     * Structure is documented below.
     * 
     */
    @Import(name="statisticRangeExpectation")
    private @Nullable Output<DatascanDataQualitySpecRuleStatisticRangeExpectationArgs> statisticRangeExpectation;

    /**
     * @return ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DatascanDataQualitySpecRuleStatisticRangeExpectationArgs>> statisticRangeExpectation() {
        return Optional.ofNullable(this.statisticRangeExpectation);
    }

    /**
     * Whether the Rule is active or suspended. Default = false.
     * 
     */
    @Import(name="suspended")
    private @Nullable Output<Boolean> suspended;

    /**
     * @return Whether the Rule is active or suspended. Default = false.
     * 
     */
    public Optional<Output<Boolean>> suspended() {
        return Optional.ofNullable(this.suspended);
    }

    /**
     * Table rule which evaluates whether the provided expression is true.
     * Structure is documented below.
     * 
     */
    @Import(name="tableConditionExpectation")
    private @Nullable Output<DatascanDataQualitySpecRuleTableConditionExpectationArgs> tableConditionExpectation;

    /**
     * @return Table rule which evaluates whether the provided expression is true.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DatascanDataQualitySpecRuleTableConditionExpectationArgs>> tableConditionExpectation() {
        return Optional.ofNullable(this.tableConditionExpectation);
    }

    /**
     * The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Double> threshold;

    /**
     * @return The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
     * 
     */
    public Optional<Output<Double>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    /**
     * Row-level rule which evaluates whether each column value is unique.
     * 
     */
    @Import(name="uniquenessExpectation")
    private @Nullable Output<DatascanDataQualitySpecRuleUniquenessExpectationArgs> uniquenessExpectation;

    /**
     * @return Row-level rule which evaluates whether each column value is unique.
     * 
     */
    public Optional<Output<DatascanDataQualitySpecRuleUniquenessExpectationArgs>> uniquenessExpectation() {
        return Optional.ofNullable(this.uniquenessExpectation);
    }

    private DatascanDataQualitySpecRuleArgs() {}

    private DatascanDataQualitySpecRuleArgs(DatascanDataQualitySpecRuleArgs $) {
        this.column = $.column;
        this.description = $.description;
        this.dimension = $.dimension;
        this.ignoreNull = $.ignoreNull;
        this.name = $.name;
        this.nonNullExpectation = $.nonNullExpectation;
        this.rangeExpectation = $.rangeExpectation;
        this.regexExpectation = $.regexExpectation;
        this.rowConditionExpectation = $.rowConditionExpectation;
        this.setExpectation = $.setExpectation;
        this.sqlAssertion = $.sqlAssertion;
        this.statisticRangeExpectation = $.statisticRangeExpectation;
        this.suspended = $.suspended;
        this.tableConditionExpectation = $.tableConditionExpectation;
        this.threshold = $.threshold;
        this.uniquenessExpectation = $.uniquenessExpectation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatascanDataQualitySpecRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatascanDataQualitySpecRuleArgs $;

        public Builder() {
            $ = new DatascanDataQualitySpecRuleArgs();
        }

        public Builder(DatascanDataQualitySpecRuleArgs defaults) {
            $ = new DatascanDataQualitySpecRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param column The unnested column which this rule is evaluated against.
         * 
         * @return builder
         * 
         */
        public Builder column(@Nullable Output<String> column) {
            $.column = column;
            return this;
        }

        /**
         * @param column The unnested column which this rule is evaluated against.
         * 
         * @return builder
         * 
         */
        public Builder column(String column) {
            return column(Output.of(column));
        }

        /**
         * @param description Description of the rule.
         * The maximum length is 1,024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the rule.
         * The maximum length is 1,024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dimension The dimension name a rule belongs to. Custom dimension name is supported with all uppercase letters and maximum length of 30 characters.
         * 
         * @return builder
         * 
         */
        public Builder dimension(Output<String> dimension) {
            $.dimension = dimension;
            return this;
        }

        /**
         * @param dimension The dimension name a rule belongs to. Custom dimension name is supported with all uppercase letters and maximum length of 30 characters.
         * 
         * @return builder
         * 
         */
        public Builder dimension(String dimension) {
            return dimension(Output.of(dimension));
        }

        /**
         * @param ignoreNull Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
         * 
         * @return builder
         * 
         */
        public Builder ignoreNull(@Nullable Output<Boolean> ignoreNull) {
            $.ignoreNull = ignoreNull;
            return this;
        }

        /**
         * @param ignoreNull Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
         * 
         * @return builder
         * 
         */
        public Builder ignoreNull(Boolean ignoreNull) {
            return ignoreNull(Output.of(ignoreNull));
        }

        /**
         * @param name A mutable name for the rule.
         * The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-).
         * The maximum length is 63 characters.
         * Must start with a letter.
         * Must end with a number or a letter.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A mutable name for the rule.
         * The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-).
         * The maximum length is 63 characters.
         * Must start with a letter.
         * Must end with a number or a letter.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nonNullExpectation ColumnMap rule which evaluates whether each column value is null.
         * 
         * @return builder
         * 
         */
        public Builder nonNullExpectation(@Nullable Output<DatascanDataQualitySpecRuleNonNullExpectationArgs> nonNullExpectation) {
            $.nonNullExpectation = nonNullExpectation;
            return this;
        }

        /**
         * @param nonNullExpectation ColumnMap rule which evaluates whether each column value is null.
         * 
         * @return builder
         * 
         */
        public Builder nonNullExpectation(DatascanDataQualitySpecRuleNonNullExpectationArgs nonNullExpectation) {
            return nonNullExpectation(Output.of(nonNullExpectation));
        }

        /**
         * @param rangeExpectation ColumnMap rule which evaluates whether each column value lies between a specified range.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rangeExpectation(@Nullable Output<DatascanDataQualitySpecRuleRangeExpectationArgs> rangeExpectation) {
            $.rangeExpectation = rangeExpectation;
            return this;
        }

        /**
         * @param rangeExpectation ColumnMap rule which evaluates whether each column value lies between a specified range.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rangeExpectation(DatascanDataQualitySpecRuleRangeExpectationArgs rangeExpectation) {
            return rangeExpectation(Output.of(rangeExpectation));
        }

        /**
         * @param regexExpectation ColumnMap rule which evaluates whether each column value matches a specified regex.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder regexExpectation(@Nullable Output<DatascanDataQualitySpecRuleRegexExpectationArgs> regexExpectation) {
            $.regexExpectation = regexExpectation;
            return this;
        }

        /**
         * @param regexExpectation ColumnMap rule which evaluates whether each column value matches a specified regex.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder regexExpectation(DatascanDataQualitySpecRuleRegexExpectationArgs regexExpectation) {
            return regexExpectation(Output.of(regexExpectation));
        }

        /**
         * @param rowConditionExpectation Table rule which evaluates whether each row passes the specified condition.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rowConditionExpectation(@Nullable Output<DatascanDataQualitySpecRuleRowConditionExpectationArgs> rowConditionExpectation) {
            $.rowConditionExpectation = rowConditionExpectation;
            return this;
        }

        /**
         * @param rowConditionExpectation Table rule which evaluates whether each row passes the specified condition.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rowConditionExpectation(DatascanDataQualitySpecRuleRowConditionExpectationArgs rowConditionExpectation) {
            return rowConditionExpectation(Output.of(rowConditionExpectation));
        }

        /**
         * @param setExpectation ColumnMap rule which evaluates whether each column value is contained by a specified set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder setExpectation(@Nullable Output<DatascanDataQualitySpecRuleSetExpectationArgs> setExpectation) {
            $.setExpectation = setExpectation;
            return this;
        }

        /**
         * @param setExpectation ColumnMap rule which evaluates whether each column value is contained by a specified set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder setExpectation(DatascanDataQualitySpecRuleSetExpectationArgs setExpectation) {
            return setExpectation(Output.of(setExpectation));
        }

        /**
         * @param sqlAssertion Table rule which evaluates whether any row matches invalid state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sqlAssertion(@Nullable Output<DatascanDataQualitySpecRuleSqlAssertionArgs> sqlAssertion) {
            $.sqlAssertion = sqlAssertion;
            return this;
        }

        /**
         * @param sqlAssertion Table rule which evaluates whether any row matches invalid state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sqlAssertion(DatascanDataQualitySpecRuleSqlAssertionArgs sqlAssertion) {
            return sqlAssertion(Output.of(sqlAssertion));
        }

        /**
         * @param statisticRangeExpectation ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statisticRangeExpectation(@Nullable Output<DatascanDataQualitySpecRuleStatisticRangeExpectationArgs> statisticRangeExpectation) {
            $.statisticRangeExpectation = statisticRangeExpectation;
            return this;
        }

        /**
         * @param statisticRangeExpectation ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statisticRangeExpectation(DatascanDataQualitySpecRuleStatisticRangeExpectationArgs statisticRangeExpectation) {
            return statisticRangeExpectation(Output.of(statisticRangeExpectation));
        }

        /**
         * @param suspended Whether the Rule is active or suspended. Default = false.
         * 
         * @return builder
         * 
         */
        public Builder suspended(@Nullable Output<Boolean> suspended) {
            $.suspended = suspended;
            return this;
        }

        /**
         * @param suspended Whether the Rule is active or suspended. Default = false.
         * 
         * @return builder
         * 
         */
        public Builder suspended(Boolean suspended) {
            return suspended(Output.of(suspended));
        }

        /**
         * @param tableConditionExpectation Table rule which evaluates whether the provided expression is true.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder tableConditionExpectation(@Nullable Output<DatascanDataQualitySpecRuleTableConditionExpectationArgs> tableConditionExpectation) {
            $.tableConditionExpectation = tableConditionExpectation;
            return this;
        }

        /**
         * @param tableConditionExpectation Table rule which evaluates whether the provided expression is true.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder tableConditionExpectation(DatascanDataQualitySpecRuleTableConditionExpectationArgs tableConditionExpectation) {
            return tableConditionExpectation(Output.of(tableConditionExpectation));
        }

        /**
         * @param threshold The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param uniquenessExpectation Row-level rule which evaluates whether each column value is unique.
         * 
         * @return builder
         * 
         */
        public Builder uniquenessExpectation(@Nullable Output<DatascanDataQualitySpecRuleUniquenessExpectationArgs> uniquenessExpectation) {
            $.uniquenessExpectation = uniquenessExpectation;
            return this;
        }

        /**
         * @param uniquenessExpectation Row-level rule which evaluates whether each column value is unique.
         * 
         * @return builder
         * 
         */
        public Builder uniquenessExpectation(DatascanDataQualitySpecRuleUniquenessExpectationArgs uniquenessExpectation) {
            return uniquenessExpectation(Output.of(uniquenessExpectation));
        }

        public DatascanDataQualitySpecRuleArgs build() {
            if ($.dimension == null) {
                throw new MissingRequiredPropertyException("DatascanDataQualitySpecRuleArgs", "dimension");
            }
            return $;
        }
    }

}
