// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfigMysqlSourceConfigExcludeObjects;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfigMysqlSourceConfigIncludeObjects;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StreamSourceConfigMysqlSourceConfig {
    /**
     * @return MySQL objects to exclude from the stream.
     * Structure is documented below.
     * 
     */
    private @Nullable StreamSourceConfigMysqlSourceConfigExcludeObjects excludeObjects;
    /**
     * @return MySQL objects to retrieve from the source.
     * Structure is documented below.
     * 
     */
    private @Nullable StreamSourceConfigMysqlSourceConfigIncludeObjects includeObjects;
    /**
     * @return Maximum number of concurrent CDC tasks. The number should be non negative.
     * If not set (or set to 0), the system&#39;s default value will be used.
     * 
     */
    private @Nullable Integer maxConcurrentCdcTasks;

    private StreamSourceConfigMysqlSourceConfig() {}
    /**
     * @return MySQL objects to exclude from the stream.
     * Structure is documented below.
     * 
     */
    public Optional<StreamSourceConfigMysqlSourceConfigExcludeObjects> excludeObjects() {
        return Optional.ofNullable(this.excludeObjects);
    }
    /**
     * @return MySQL objects to retrieve from the source.
     * Structure is documented below.
     * 
     */
    public Optional<StreamSourceConfigMysqlSourceConfigIncludeObjects> includeObjects() {
        return Optional.ofNullable(this.includeObjects);
    }
    /**
     * @return Maximum number of concurrent CDC tasks. The number should be non negative.
     * If not set (or set to 0), the system&#39;s default value will be used.
     * 
     */
    public Optional<Integer> maxConcurrentCdcTasks() {
        return Optional.ofNullable(this.maxConcurrentCdcTasks);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamSourceConfigMysqlSourceConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable StreamSourceConfigMysqlSourceConfigExcludeObjects excludeObjects;
        private @Nullable StreamSourceConfigMysqlSourceConfigIncludeObjects includeObjects;
        private @Nullable Integer maxConcurrentCdcTasks;
        public Builder() {}
        public Builder(StreamSourceConfigMysqlSourceConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludeObjects = defaults.excludeObjects;
    	      this.includeObjects = defaults.includeObjects;
    	      this.maxConcurrentCdcTasks = defaults.maxConcurrentCdcTasks;
        }

        @CustomType.Setter
        public Builder excludeObjects(@Nullable StreamSourceConfigMysqlSourceConfigExcludeObjects excludeObjects) {
            this.excludeObjects = excludeObjects;
            return this;
        }
        @CustomType.Setter
        public Builder includeObjects(@Nullable StreamSourceConfigMysqlSourceConfigIncludeObjects includeObjects) {
            this.includeObjects = includeObjects;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentCdcTasks(@Nullable Integer maxConcurrentCdcTasks) {
            this.maxConcurrentCdcTasks = maxConcurrentCdcTasks;
            return this;
        }
        public StreamSourceConfigMysqlSourceConfig build() {
            final var o = new StreamSourceConfigMysqlSourceConfig();
            o.excludeObjects = excludeObjects;
            o.includeObjects = includeObjects;
            o.maxConcurrentCdcTasks = maxConcurrentCdcTasks;
            return o;
        }
    }
}
