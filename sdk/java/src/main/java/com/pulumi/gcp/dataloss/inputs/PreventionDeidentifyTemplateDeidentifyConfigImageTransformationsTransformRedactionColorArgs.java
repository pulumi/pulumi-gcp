// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs Empty = new PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs();

    /**
     * The amount of blue in the color as a value in the interval [0, 1].
     * 
     */
    @Import(name="blue")
    private @Nullable Output<Double> blue;

    /**
     * @return The amount of blue in the color as a value in the interval [0, 1].
     * 
     */
    public Optional<Output<Double>> blue() {
        return Optional.ofNullable(this.blue);
    }

    /**
     * The amount of green in the color as a value in the interval [0, 1].
     * 
     */
    @Import(name="green")
    private @Nullable Output<Double> green;

    /**
     * @return The amount of green in the color as a value in the interval [0, 1].
     * 
     */
    public Optional<Output<Double>> green() {
        return Optional.ofNullable(this.green);
    }

    /**
     * The amount of red in the color as a value in the interval [0, 1].
     * 
     */
    @Import(name="red")
    private @Nullable Output<Double> red;

    /**
     * @return The amount of red in the color as a value in the interval [0, 1].
     * 
     */
    public Optional<Output<Double>> red() {
        return Optional.ofNullable(this.red);
    }

    private PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs() {}

    private PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs $) {
        this.blue = $.blue;
        this.green = $.green;
        this.red = $.red;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs $;

        public Builder() {
            $ = new PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs();
        }

        public Builder(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs defaults) {
            $ = new PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blue The amount of blue in the color as a value in the interval [0, 1].
         * 
         * @return builder
         * 
         */
        public Builder blue(@Nullable Output<Double> blue) {
            $.blue = blue;
            return this;
        }

        /**
         * @param blue The amount of blue in the color as a value in the interval [0, 1].
         * 
         * @return builder
         * 
         */
        public Builder blue(Double blue) {
            return blue(Output.of(blue));
        }

        /**
         * @param green The amount of green in the color as a value in the interval [0, 1].
         * 
         * @return builder
         * 
         */
        public Builder green(@Nullable Output<Double> green) {
            $.green = green;
            return this;
        }

        /**
         * @param green The amount of green in the color as a value in the interval [0, 1].
         * 
         * @return builder
         * 
         */
        public Builder green(Double green) {
            return green(Output.of(green));
        }

        /**
         * @param red The amount of red in the color as a value in the interval [0, 1].
         * 
         * @return builder
         * 
         */
        public Builder red(@Nullable Output<Double> red) {
            $.red = red;
            return this;
        }

        /**
         * @param red The amount of red in the color as a value in the interval [0, 1].
         * 
         * @return builder
         * 
         */
        public Builder red(Double red) {
            return red(Output.of(red));
        }

        public PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs build() {
            return $;
        }
    }

}
