// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodePoolAutoscaling {
    /**
     * @return Location policy specifies the algorithm used when
     * scaling-up the node pool. Location policy is supported only in 1.24.1+ clusters.
     * * &#34;BALANCED&#34; - Is a best effort policy that aims to balance the sizes of available zones.
     * * &#34;ANY&#34; - Instructs the cluster autoscaler to prioritize utilization of unused reservations,
     *   and reduce preemption risk for Spot VMs.
     * 
     */
    private @Nullable String locationPolicy;
    /**
     * @return Maximum number of nodes per zone in the NodePool.
     * Must be &gt;= min_node_count. Cannot be used with total limits.
     * 
     */
    private @Nullable Integer maxNodeCount;
    /**
     * @return Minimum number of nodes per zone in the NodePool.
     * Must be &gt;=0 and &lt;= `max_node_count`. Cannot be used with total limits.
     * 
     */
    private @Nullable Integer minNodeCount;
    /**
     * @return Total maximum number of nodes in the NodePool.
     * Must be &gt;= total_min_node_count. Cannot be used with per zone limits.
     * Total size limits are supported only in 1.24.1+ clusters.
     * 
     */
    private @Nullable Integer totalMaxNodeCount;
    /**
     * @return Total minimum number of nodes in the NodePool.
     * Must be &gt;=0 and &lt;= `total_max_node_count`. Cannot be used with per zone limits.
     * Total size limits are supported only in 1.24.1+ clusters.
     * 
     */
    private @Nullable Integer totalMinNodeCount;

    private NodePoolAutoscaling() {}
    /**
     * @return Location policy specifies the algorithm used when
     * scaling-up the node pool. Location policy is supported only in 1.24.1+ clusters.
     * * &#34;BALANCED&#34; - Is a best effort policy that aims to balance the sizes of available zones.
     * * &#34;ANY&#34; - Instructs the cluster autoscaler to prioritize utilization of unused reservations,
     *   and reduce preemption risk for Spot VMs.
     * 
     */
    public Optional<String> locationPolicy() {
        return Optional.ofNullable(this.locationPolicy);
    }
    /**
     * @return Maximum number of nodes per zone in the NodePool.
     * Must be &gt;= min_node_count. Cannot be used with total limits.
     * 
     */
    public Optional<Integer> maxNodeCount() {
        return Optional.ofNullable(this.maxNodeCount);
    }
    /**
     * @return Minimum number of nodes per zone in the NodePool.
     * Must be &gt;=0 and &lt;= `max_node_count`. Cannot be used with total limits.
     * 
     */
    public Optional<Integer> minNodeCount() {
        return Optional.ofNullable(this.minNodeCount);
    }
    /**
     * @return Total maximum number of nodes in the NodePool.
     * Must be &gt;= total_min_node_count. Cannot be used with per zone limits.
     * Total size limits are supported only in 1.24.1+ clusters.
     * 
     */
    public Optional<Integer> totalMaxNodeCount() {
        return Optional.ofNullable(this.totalMaxNodeCount);
    }
    /**
     * @return Total minimum number of nodes in the NodePool.
     * Must be &gt;=0 and &lt;= `total_max_node_count`. Cannot be used with per zone limits.
     * Total size limits are supported only in 1.24.1+ clusters.
     * 
     */
    public Optional<Integer> totalMinNodeCount() {
        return Optional.ofNullable(this.totalMinNodeCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodePoolAutoscaling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String locationPolicy;
        private @Nullable Integer maxNodeCount;
        private @Nullable Integer minNodeCount;
        private @Nullable Integer totalMaxNodeCount;
        private @Nullable Integer totalMinNodeCount;
        public Builder() {}
        public Builder(NodePoolAutoscaling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.locationPolicy = defaults.locationPolicy;
    	      this.maxNodeCount = defaults.maxNodeCount;
    	      this.minNodeCount = defaults.minNodeCount;
    	      this.totalMaxNodeCount = defaults.totalMaxNodeCount;
    	      this.totalMinNodeCount = defaults.totalMinNodeCount;
        }

        @CustomType.Setter
        public Builder locationPolicy(@Nullable String locationPolicy) {
            this.locationPolicy = locationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder maxNodeCount(@Nullable Integer maxNodeCount) {
            this.maxNodeCount = maxNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder minNodeCount(@Nullable Integer minNodeCount) {
            this.minNodeCount = minNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder totalMaxNodeCount(@Nullable Integer totalMaxNodeCount) {
            this.totalMaxNodeCount = totalMaxNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder totalMinNodeCount(@Nullable Integer totalMinNodeCount) {
            this.totalMinNodeCount = totalMinNodeCount;
            return this;
        }
        public NodePoolAutoscaling build() {
            final var _resultValue = new NodePoolAutoscaling();
            _resultValue.locationPolicy = locationPolicy;
            _resultValue.maxNodeCount = maxNodeCount;
            _resultValue.minNodeCount = minNodeCount;
            _resultValue.totalMaxNodeCount = totalMaxNodeCount;
            _resultValue.totalMinNodeCount = totalMinNodeCount;
            return _resultValue;
        }
    }
}
