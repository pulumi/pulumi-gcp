// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.netapp.inputs.VolumeBackupConfigArgs;
import com.pulumi.gcp.netapp.inputs.VolumeExportPolicyArgs;
import com.pulumi.gcp.netapp.inputs.VolumeHybridReplicationParametersArgs;
import com.pulumi.gcp.netapp.inputs.VolumeMountOptionArgs;
import com.pulumi.gcp.netapp.inputs.VolumeRestoreParametersArgs;
import com.pulumi.gcp.netapp.inputs.VolumeSnapshotPolicyArgs;
import com.pulumi.gcp.netapp.inputs.VolumeTieringPolicyArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeState extends com.pulumi.resources.ResourceArgs {

    public static final VolumeState Empty = new VolumeState();

    /**
     * Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
     * 
     */
    @Import(name="activeDirectory")
    private @Nullable Output<String> activeDirectory;

    /**
     * @return Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
     * 
     */
    public Optional<Output<String>> activeDirectory() {
        return Optional.ofNullable(this.activeDirectory);
    }

    /**
     * Backup configuration for the volume.
     * Structure is documented below.
     * 
     */
    @Import(name="backupConfig")
    private @Nullable Output<VolumeBackupConfigArgs> backupConfig;

    /**
     * @return Backup configuration for the volume.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VolumeBackupConfigArgs>> backupConfig() {
        return Optional.ofNullable(this.backupConfig);
    }

    /**
     * Capacity of the volume (in GiB).
     * 
     */
    @Import(name="capacityGib")
    private @Nullable Output<String> capacityGib;

    /**
     * @return Capacity of the volume (in GiB).
     * 
     */
    public Optional<Output<String>> capacityGib() {
        return Optional.ofNullable(this.capacityGib);
    }

    /**
     * Output only. Size of the volume cold tier data in GiB.
     * 
     */
    @Import(name="coldTierSizeGib")
    private @Nullable Output<String> coldTierSizeGib;

    /**
     * @return Output only. Size of the volume cold tier data in GiB.
     * 
     */
    public Optional<Output<String>> coldTierSizeGib() {
        return Optional.ofNullable(this.coldTierSizeGib);
    }

    /**
     * Create time of the volume. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Create time of the volume. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Policy to determine if the volume should be deleted forcefully.
     * Volumes may have nested snapshot resources. Deleting such a volume will fail.
     * Setting this parameter to FORCE will delete volumes including nested snapshots.
     * Possible values: DEFAULT, FORCE.
     * 
     */
    @Import(name="deletionPolicy")
    private @Nullable Output<String> deletionPolicy;

    /**
     * @return Policy to determine if the volume should be deleted forcefully.
     * Volumes may have nested snapshot resources. Deleting such a volume will fail.
     * Setting this parameter to FORCE will delete volumes including nested snapshots.
     * Possible values: DEFAULT, FORCE.
     * 
     */
    public Optional<Output<String>> deletionPolicy() {
        return Optional.ofNullable(this.deletionPolicy);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
     * 
     */
    @Import(name="encryptionType")
    private @Nullable Output<String> encryptionType;

    /**
     * @return Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
     * 
     */
    public Optional<Output<String>> encryptionType() {
        return Optional.ofNullable(this.encryptionType);
    }

    /**
     * Export policy of the volume for NFSV3 and/or NFSV4.1 access.
     * Structure is documented below.
     * 
     */
    @Import(name="exportPolicy")
    private @Nullable Output<VolumeExportPolicyArgs> exportPolicy;

    /**
     * @return Export policy of the volume for NFSV3 and/or NFSV4.1 access.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VolumeExportPolicyArgs>> exportPolicy() {
        return Optional.ofNullable(this.exportPolicy);
    }

    /**
     * Indicates whether the volume is part of a volume replication relationship.
     * 
     */
    @Import(name="hasReplication")
    private @Nullable Output<Boolean> hasReplication;

    /**
     * @return Indicates whether the volume is part of a volume replication relationship.
     * 
     */
    public Optional<Output<Boolean>> hasReplication() {
        return Optional.ofNullable(this.hasReplication);
    }

    /**
     * The Hybrid Replication parameters for the volume.
     * Structure is documented below.
     * 
     */
    @Import(name="hybridReplicationParameters")
    private @Nullable Output<VolumeHybridReplicationParametersArgs> hybridReplicationParameters;

    /**
     * @return The Hybrid Replication parameters for the volume.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VolumeHybridReplicationParametersArgs>> hybridReplicationParameters() {
        return Optional.ofNullable(this.hybridReplicationParameters);
    }

    /**
     * Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
     * 
     */
    @Import(name="kerberosEnabled")
    private @Nullable Output<Boolean> kerberosEnabled;

    /**
     * @return Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
     * 
     */
    public Optional<Output<Boolean>> kerberosEnabled() {
        return Optional.ofNullable(this.kerberosEnabled);
    }

    /**
     * Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
     * 
     */
    @Import(name="kmsConfig")
    private @Nullable Output<String> kmsConfig;

    /**
     * @return Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
     * 
     */
    public Optional<Output<String>> kmsConfig() {
        return Optional.ofNullable(this.kmsConfig);
    }

    /**
     * Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
     * 
     */
    @Import(name="largeCapacity")
    private @Nullable Output<Boolean> largeCapacity;

    /**
     * @return Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
     * 
     */
    public Optional<Output<Boolean>> largeCapacity() {
        return Optional.ofNullable(this.largeCapacity);
    }

    /**
     * Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
     * 
     */
    @Import(name="ldapEnabled")
    private @Nullable Output<Boolean> ldapEnabled;

    /**
     * @return Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
     * 
     */
    public Optional<Output<Boolean>> ldapEnabled() {
        return Optional.ofNullable(this.ldapEnabled);
    }

    /**
     * Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Reports mount instructions for this volume.
     * Structure is documented below.
     * 
     */
    @Import(name="mountOptions")
    private @Nullable Output<List<VolumeMountOptionArgs>> mountOptions;

    /**
     * @return Reports mount instructions for this volume.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<VolumeMountOptionArgs>>> mountOptions() {
        return Optional.ofNullable(this.mountOptions);
    }

    /**
     * Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
     * Only the volume with largeCapacity will be allowed to have multiple endpoints.
     * 
     */
    @Import(name="multipleEndpoints")
    private @Nullable Output<Boolean> multipleEndpoints;

    /**
     * @return Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
     * Only the volume with largeCapacity will be allowed to have multiple endpoints.
     * 
     */
    public Optional<Output<Boolean>> multipleEndpoints() {
        return Optional.ofNullable(this.multipleEndpoints);
    }

    /**
     * The name of the volume. Needs to be unique per location.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the volume. Needs to be unique per location.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The protocol of the volume. Allowed combinations are `[&#39;NFSV3&#39;]`, `[&#39;NFSV4&#39;]`, `[&#39;SMB&#39;]`, `[&#39;NFSV3&#39;, &#39;NFSV4&#39;]`, `[&#39;SMB&#39;, &#39;NFSV3&#39;]` and `[&#39;SMB&#39;, &#39;NFSV4&#39;]`.
     * Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
     * 
     */
    @Import(name="protocols")
    private @Nullable Output<List<String>> protocols;

    /**
     * @return The protocol of the volume. Allowed combinations are `[&#39;NFSV3&#39;]`, `[&#39;NFSV4&#39;]`, `[&#39;SMB&#39;]`, `[&#39;NFSV3&#39;, &#39;NFSV4&#39;]`, `[&#39;SMB&#39;, &#39;NFSV3&#39;]` and `[&#39;SMB&#39;, &#39;NFSV4&#39;]`.
     * Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
     * 
     */
    public Optional<Output<List<String>>> protocols() {
        return Optional.ofNullable(this.protocols);
    }

    /**
     * Name of the Private Service Access allocated range. Inherited from storage pool.
     * 
     */
    @Import(name="psaRange")
    private @Nullable Output<String> psaRange;

    /**
     * @return Name of the Private Service Access allocated range. Inherited from storage pool.
     * 
     */
    public Optional<Output<String>> psaRange() {
        return Optional.ofNullable(this.psaRange);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Specifies the replica zone for regional volume.
     * 
     */
    @Import(name="replicaZone")
    private @Nullable Output<String> replicaZone;

    /**
     * @return Specifies the replica zone for regional volume.
     * 
     */
    public Optional<Output<String>> replicaZone() {
        return Optional.ofNullable(this.replicaZone);
    }

    /**
     * Used to create this volume from a snapshot (= cloning) or an backup.
     * Structure is documented below.
     * 
     */
    @Import(name="restoreParameters")
    private @Nullable Output<VolumeRestoreParametersArgs> restoreParameters;

    /**
     * @return Used to create this volume from a snapshot (= cloning) or an backup.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VolumeRestoreParametersArgs>> restoreParameters() {
        return Optional.ofNullable(this.restoreParameters);
    }

    /**
     * List of actions that are restricted on this volume.
     * Each value may be one of: `DELETE`.
     * 
     */
    @Import(name="restrictedActions")
    private @Nullable Output<List<String>> restrictedActions;

    /**
     * @return List of actions that are restricted on this volume.
     * Each value may be one of: `DELETE`.
     * 
     */
    public Optional<Output<List<String>>> restrictedActions() {
        return Optional.ofNullable(this.restrictedActions);
    }

    /**
     * Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
     * Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
     * Possible values are: `NTFS`, `UNIX`.
     * 
     */
    @Import(name="securityStyle")
    private @Nullable Output<String> securityStyle;

    /**
     * @return Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
     * Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
     * Possible values are: `NTFS`, `UNIX`.
     * 
     */
    public Optional<Output<String>> securityStyle() {
        return Optional.ofNullable(this.securityStyle);
    }

    /**
     * Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTREME, STANDARD, FLEX.
     * 
     */
    @Import(name="serviceLevel")
    private @Nullable Output<String> serviceLevel;

    /**
     * @return Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTREME, STANDARD, FLEX.
     * 
     */
    public Optional<Output<String>> serviceLevel() {
        return Optional.ofNullable(this.serviceLevel);
    }

    /**
     * Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
     * 
     */
    @Import(name="shareName")
    private @Nullable Output<String> shareName;

    /**
     * @return Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
     * 
     */
    public Optional<Output<String>> shareName() {
        return Optional.ofNullable(this.shareName);
    }

    /**
     * Settings for volumes with SMB access.
     * Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
     * 
     */
    @Import(name="smbSettings")
    private @Nullable Output<List<String>> smbSettings;

    /**
     * @return Settings for volumes with SMB access.
     * Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
     * 
     */
    public Optional<Output<List<String>>> smbSettings() {
        return Optional.ofNullable(this.smbSettings);
    }

    /**
     * If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume&#39;s snapshots. Will enable &#34;Previous Versions&#34; support for SMB.
     * 
     */
    @Import(name="snapshotDirectory")
    private @Nullable Output<Boolean> snapshotDirectory;

    /**
     * @return If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume&#39;s snapshots. Will enable &#34;Previous Versions&#34; support for SMB.
     * 
     */
    public Optional<Output<Boolean>> snapshotDirectory() {
        return Optional.ofNullable(this.snapshotDirectory);
    }

    /**
     * Snapshot policy defines the schedule for automatic snapshot creation.
     * To disable automatic snapshot creation you have to remove the whole snapshot_policy block.
     * Structure is documented below.
     * 
     */
    @Import(name="snapshotPolicy")
    private @Nullable Output<VolumeSnapshotPolicyArgs> snapshotPolicy;

    /**
     * @return Snapshot policy defines the schedule for automatic snapshot creation.
     * To disable automatic snapshot creation you have to remove the whole snapshot_policy block.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VolumeSnapshotPolicyArgs>> snapshotPolicy() {
        return Optional.ofNullable(this.snapshotPolicy);
    }

    /**
     * State of the volume.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the volume.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * State details of the volume.
     * 
     */
    @Import(name="stateDetails")
    private @Nullable Output<String> stateDetails;

    /**
     * @return State details of the volume.
     * 
     */
    public Optional<Output<String>> stateDetails() {
        return Optional.ofNullable(this.stateDetails);
    }

    /**
     * Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
     * 
     */
    @Import(name="storagePool")
    private @Nullable Output<String> storagePool;

    /**
     * @return Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
     * 
     */
    public Optional<Output<String>> storagePool() {
        return Optional.ofNullable(this.storagePool);
    }

    /**
     * Optional. Custom Performance Total Throughput of the pool (in MiB/s).
     * 
     */
    @Import(name="throughputMibps")
    private @Nullable Output<Double> throughputMibps;

    /**
     * @return Optional. Custom Performance Total Throughput of the pool (in MiB/s).
     * 
     */
    public Optional<Output<Double>> throughputMibps() {
        return Optional.ofNullable(this.throughputMibps);
    }

    /**
     * Tiering policy for the volume.
     * Structure is documented below.
     * 
     */
    @Import(name="tieringPolicy")
    private @Nullable Output<VolumeTieringPolicyArgs> tieringPolicy;

    /**
     * @return Tiering policy for the volume.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VolumeTieringPolicyArgs>> tieringPolicy() {
        return Optional.ofNullable(this.tieringPolicy);
    }

    /**
     * Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
     * 
     */
    @Import(name="unixPermissions")
    private @Nullable Output<String> unixPermissions;

    /**
     * @return Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
     * 
     */
    public Optional<Output<String>> unixPermissions() {
        return Optional.ofNullable(this.unixPermissions);
    }

    /**
     * Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
     * 
     */
    @Import(name="usedGib")
    private @Nullable Output<String> usedGib;

    /**
     * @return Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
     * 
     */
    public Optional<Output<String>> usedGib() {
        return Optional.ofNullable(this.usedGib);
    }

    /**
     * Specifies the active zone for regional volume.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return Specifies the active zone for regional volume.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private VolumeState() {}

    private VolumeState(VolumeState $) {
        this.activeDirectory = $.activeDirectory;
        this.backupConfig = $.backupConfig;
        this.capacityGib = $.capacityGib;
        this.coldTierSizeGib = $.coldTierSizeGib;
        this.createTime = $.createTime;
        this.deletionPolicy = $.deletionPolicy;
        this.description = $.description;
        this.effectiveLabels = $.effectiveLabels;
        this.encryptionType = $.encryptionType;
        this.exportPolicy = $.exportPolicy;
        this.hasReplication = $.hasReplication;
        this.hybridReplicationParameters = $.hybridReplicationParameters;
        this.kerberosEnabled = $.kerberosEnabled;
        this.kmsConfig = $.kmsConfig;
        this.labels = $.labels;
        this.largeCapacity = $.largeCapacity;
        this.ldapEnabled = $.ldapEnabled;
        this.location = $.location;
        this.mountOptions = $.mountOptions;
        this.multipleEndpoints = $.multipleEndpoints;
        this.name = $.name;
        this.network = $.network;
        this.project = $.project;
        this.protocols = $.protocols;
        this.psaRange = $.psaRange;
        this.pulumiLabels = $.pulumiLabels;
        this.replicaZone = $.replicaZone;
        this.restoreParameters = $.restoreParameters;
        this.restrictedActions = $.restrictedActions;
        this.securityStyle = $.securityStyle;
        this.serviceLevel = $.serviceLevel;
        this.shareName = $.shareName;
        this.smbSettings = $.smbSettings;
        this.snapshotDirectory = $.snapshotDirectory;
        this.snapshotPolicy = $.snapshotPolicy;
        this.state = $.state;
        this.stateDetails = $.stateDetails;
        this.storagePool = $.storagePool;
        this.throughputMibps = $.throughputMibps;
        this.tieringPolicy = $.tieringPolicy;
        this.unixPermissions = $.unixPermissions;
        this.usedGib = $.usedGib;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeState $;

        public Builder() {
            $ = new VolumeState();
        }

        public Builder(VolumeState defaults) {
            $ = new VolumeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeDirectory Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
         * 
         * @return builder
         * 
         */
        public Builder activeDirectory(@Nullable Output<String> activeDirectory) {
            $.activeDirectory = activeDirectory;
            return this;
        }

        /**
         * @param activeDirectory Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
         * 
         * @return builder
         * 
         */
        public Builder activeDirectory(String activeDirectory) {
            return activeDirectory(Output.of(activeDirectory));
        }

        /**
         * @param backupConfig Backup configuration for the volume.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backupConfig(@Nullable Output<VolumeBackupConfigArgs> backupConfig) {
            $.backupConfig = backupConfig;
            return this;
        }

        /**
         * @param backupConfig Backup configuration for the volume.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backupConfig(VolumeBackupConfigArgs backupConfig) {
            return backupConfig(Output.of(backupConfig));
        }

        /**
         * @param capacityGib Capacity of the volume (in GiB).
         * 
         * @return builder
         * 
         */
        public Builder capacityGib(@Nullable Output<String> capacityGib) {
            $.capacityGib = capacityGib;
            return this;
        }

        /**
         * @param capacityGib Capacity of the volume (in GiB).
         * 
         * @return builder
         * 
         */
        public Builder capacityGib(String capacityGib) {
            return capacityGib(Output.of(capacityGib));
        }

        /**
         * @param coldTierSizeGib Output only. Size of the volume cold tier data in GiB.
         * 
         * @return builder
         * 
         */
        public Builder coldTierSizeGib(@Nullable Output<String> coldTierSizeGib) {
            $.coldTierSizeGib = coldTierSizeGib;
            return this;
        }

        /**
         * @param coldTierSizeGib Output only. Size of the volume cold tier data in GiB.
         * 
         * @return builder
         * 
         */
        public Builder coldTierSizeGib(String coldTierSizeGib) {
            return coldTierSizeGib(Output.of(coldTierSizeGib));
        }

        /**
         * @param createTime Create time of the volume. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Create time of the volume. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param deletionPolicy Policy to determine if the volume should be deleted forcefully.
         * Volumes may have nested snapshot resources. Deleting such a volume will fail.
         * Setting this parameter to FORCE will delete volumes including nested snapshots.
         * Possible values: DEFAULT, FORCE.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(@Nullable Output<String> deletionPolicy) {
            $.deletionPolicy = deletionPolicy;
            return this;
        }

        /**
         * @param deletionPolicy Policy to determine if the volume should be deleted forcefully.
         * Volumes may have nested snapshot resources. Deleting such a volume will fail.
         * Setting this parameter to FORCE will delete volumes including nested snapshots.
         * Possible values: DEFAULT, FORCE.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(String deletionPolicy) {
            return deletionPolicy(Output.of(deletionPolicy));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param encryptionType Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
         * 
         * @return builder
         * 
         */
        public Builder encryptionType(@Nullable Output<String> encryptionType) {
            $.encryptionType = encryptionType;
            return this;
        }

        /**
         * @param encryptionType Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
         * 
         * @return builder
         * 
         */
        public Builder encryptionType(String encryptionType) {
            return encryptionType(Output.of(encryptionType));
        }

        /**
         * @param exportPolicy Export policy of the volume for NFSV3 and/or NFSV4.1 access.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exportPolicy(@Nullable Output<VolumeExportPolicyArgs> exportPolicy) {
            $.exportPolicy = exportPolicy;
            return this;
        }

        /**
         * @param exportPolicy Export policy of the volume for NFSV3 and/or NFSV4.1 access.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exportPolicy(VolumeExportPolicyArgs exportPolicy) {
            return exportPolicy(Output.of(exportPolicy));
        }

        /**
         * @param hasReplication Indicates whether the volume is part of a volume replication relationship.
         * 
         * @return builder
         * 
         */
        public Builder hasReplication(@Nullable Output<Boolean> hasReplication) {
            $.hasReplication = hasReplication;
            return this;
        }

        /**
         * @param hasReplication Indicates whether the volume is part of a volume replication relationship.
         * 
         * @return builder
         * 
         */
        public Builder hasReplication(Boolean hasReplication) {
            return hasReplication(Output.of(hasReplication));
        }

        /**
         * @param hybridReplicationParameters The Hybrid Replication parameters for the volume.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hybridReplicationParameters(@Nullable Output<VolumeHybridReplicationParametersArgs> hybridReplicationParameters) {
            $.hybridReplicationParameters = hybridReplicationParameters;
            return this;
        }

        /**
         * @param hybridReplicationParameters The Hybrid Replication parameters for the volume.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hybridReplicationParameters(VolumeHybridReplicationParametersArgs hybridReplicationParameters) {
            return hybridReplicationParameters(Output.of(hybridReplicationParameters));
        }

        /**
         * @param kerberosEnabled Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
         * 
         * @return builder
         * 
         */
        public Builder kerberosEnabled(@Nullable Output<Boolean> kerberosEnabled) {
            $.kerberosEnabled = kerberosEnabled;
            return this;
        }

        /**
         * @param kerberosEnabled Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
         * 
         * @return builder
         * 
         */
        public Builder kerberosEnabled(Boolean kerberosEnabled) {
            return kerberosEnabled(Output.of(kerberosEnabled));
        }

        /**
         * @param kmsConfig Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
         * 
         * @return builder
         * 
         */
        public Builder kmsConfig(@Nullable Output<String> kmsConfig) {
            $.kmsConfig = kmsConfig;
            return this;
        }

        /**
         * @param kmsConfig Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
         * 
         * @return builder
         * 
         */
        public Builder kmsConfig(String kmsConfig) {
            return kmsConfig(Output.of(kmsConfig));
        }

        /**
         * @param labels Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param largeCapacity Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
         * 
         * @return builder
         * 
         */
        public Builder largeCapacity(@Nullable Output<Boolean> largeCapacity) {
            $.largeCapacity = largeCapacity;
            return this;
        }

        /**
         * @param largeCapacity Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
         * 
         * @return builder
         * 
         */
        public Builder largeCapacity(Boolean largeCapacity) {
            return largeCapacity(Output.of(largeCapacity));
        }

        /**
         * @param ldapEnabled Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
         * 
         * @return builder
         * 
         */
        public Builder ldapEnabled(@Nullable Output<Boolean> ldapEnabled) {
            $.ldapEnabled = ldapEnabled;
            return this;
        }

        /**
         * @param ldapEnabled Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
         * 
         * @return builder
         * 
         */
        public Builder ldapEnabled(Boolean ldapEnabled) {
            return ldapEnabled(Output.of(ldapEnabled));
        }

        /**
         * @param location Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param mountOptions Reports mount instructions for this volume.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(@Nullable Output<List<VolumeMountOptionArgs>> mountOptions) {
            $.mountOptions = mountOptions;
            return this;
        }

        /**
         * @param mountOptions Reports mount instructions for this volume.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(List<VolumeMountOptionArgs> mountOptions) {
            return mountOptions(Output.of(mountOptions));
        }

        /**
         * @param mountOptions Reports mount instructions for this volume.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(VolumeMountOptionArgs... mountOptions) {
            return mountOptions(List.of(mountOptions));
        }

        /**
         * @param multipleEndpoints Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
         * Only the volume with largeCapacity will be allowed to have multiple endpoints.
         * 
         * @return builder
         * 
         */
        public Builder multipleEndpoints(@Nullable Output<Boolean> multipleEndpoints) {
            $.multipleEndpoints = multipleEndpoints;
            return this;
        }

        /**
         * @param multipleEndpoints Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
         * Only the volume with largeCapacity will be allowed to have multiple endpoints.
         * 
         * @return builder
         * 
         */
        public Builder multipleEndpoints(Boolean multipleEndpoints) {
            return multipleEndpoints(Output.of(multipleEndpoints));
        }

        /**
         * @param name The name of the volume. Needs to be unique per location.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the volume. Needs to be unique per location.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param protocols The protocol of the volume. Allowed combinations are `[&#39;NFSV3&#39;]`, `[&#39;NFSV4&#39;]`, `[&#39;SMB&#39;]`, `[&#39;NFSV3&#39;, &#39;NFSV4&#39;]`, `[&#39;SMB&#39;, &#39;NFSV3&#39;]` and `[&#39;SMB&#39;, &#39;NFSV4&#39;]`.
         * Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
         * 
         * @return builder
         * 
         */
        public Builder protocols(@Nullable Output<List<String>> protocols) {
            $.protocols = protocols;
            return this;
        }

        /**
         * @param protocols The protocol of the volume. Allowed combinations are `[&#39;NFSV3&#39;]`, `[&#39;NFSV4&#39;]`, `[&#39;SMB&#39;]`, `[&#39;NFSV3&#39;, &#39;NFSV4&#39;]`, `[&#39;SMB&#39;, &#39;NFSV3&#39;]` and `[&#39;SMB&#39;, &#39;NFSV4&#39;]`.
         * Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
         * 
         * @return builder
         * 
         */
        public Builder protocols(List<String> protocols) {
            return protocols(Output.of(protocols));
        }

        /**
         * @param protocols The protocol of the volume. Allowed combinations are `[&#39;NFSV3&#39;]`, `[&#39;NFSV4&#39;]`, `[&#39;SMB&#39;]`, `[&#39;NFSV3&#39;, &#39;NFSV4&#39;]`, `[&#39;SMB&#39;, &#39;NFSV3&#39;]` and `[&#39;SMB&#39;, &#39;NFSV4&#39;]`.
         * Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
         * 
         * @return builder
         * 
         */
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }

        /**
         * @param psaRange Name of the Private Service Access allocated range. Inherited from storage pool.
         * 
         * @return builder
         * 
         */
        public Builder psaRange(@Nullable Output<String> psaRange) {
            $.psaRange = psaRange;
            return this;
        }

        /**
         * @param psaRange Name of the Private Service Access allocated range. Inherited from storage pool.
         * 
         * @return builder
         * 
         */
        public Builder psaRange(String psaRange) {
            return psaRange(Output.of(psaRange));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param replicaZone Specifies the replica zone for regional volume.
         * 
         * @return builder
         * 
         */
        public Builder replicaZone(@Nullable Output<String> replicaZone) {
            $.replicaZone = replicaZone;
            return this;
        }

        /**
         * @param replicaZone Specifies the replica zone for regional volume.
         * 
         * @return builder
         * 
         */
        public Builder replicaZone(String replicaZone) {
            return replicaZone(Output.of(replicaZone));
        }

        /**
         * @param restoreParameters Used to create this volume from a snapshot (= cloning) or an backup.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder restoreParameters(@Nullable Output<VolumeRestoreParametersArgs> restoreParameters) {
            $.restoreParameters = restoreParameters;
            return this;
        }

        /**
         * @param restoreParameters Used to create this volume from a snapshot (= cloning) or an backup.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder restoreParameters(VolumeRestoreParametersArgs restoreParameters) {
            return restoreParameters(Output.of(restoreParameters));
        }

        /**
         * @param restrictedActions List of actions that are restricted on this volume.
         * Each value may be one of: `DELETE`.
         * 
         * @return builder
         * 
         */
        public Builder restrictedActions(@Nullable Output<List<String>> restrictedActions) {
            $.restrictedActions = restrictedActions;
            return this;
        }

        /**
         * @param restrictedActions List of actions that are restricted on this volume.
         * Each value may be one of: `DELETE`.
         * 
         * @return builder
         * 
         */
        public Builder restrictedActions(List<String> restrictedActions) {
            return restrictedActions(Output.of(restrictedActions));
        }

        /**
         * @param restrictedActions List of actions that are restricted on this volume.
         * Each value may be one of: `DELETE`.
         * 
         * @return builder
         * 
         */
        public Builder restrictedActions(String... restrictedActions) {
            return restrictedActions(List.of(restrictedActions));
        }

        /**
         * @param securityStyle Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
         * Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
         * Possible values are: `NTFS`, `UNIX`.
         * 
         * @return builder
         * 
         */
        public Builder securityStyle(@Nullable Output<String> securityStyle) {
            $.securityStyle = securityStyle;
            return this;
        }

        /**
         * @param securityStyle Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
         * Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
         * Possible values are: `NTFS`, `UNIX`.
         * 
         * @return builder
         * 
         */
        public Builder securityStyle(String securityStyle) {
            return securityStyle(Output.of(securityStyle));
        }

        /**
         * @param serviceLevel Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTREME, STANDARD, FLEX.
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(@Nullable Output<String> serviceLevel) {
            $.serviceLevel = serviceLevel;
            return this;
        }

        /**
         * @param serviceLevel Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTREME, STANDARD, FLEX.
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(String serviceLevel) {
            return serviceLevel(Output.of(serviceLevel));
        }

        /**
         * @param shareName Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
         * 
         * @return builder
         * 
         */
        public Builder shareName(@Nullable Output<String> shareName) {
            $.shareName = shareName;
            return this;
        }

        /**
         * @param shareName Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
         * 
         * @return builder
         * 
         */
        public Builder shareName(String shareName) {
            return shareName(Output.of(shareName));
        }

        /**
         * @param smbSettings Settings for volumes with SMB access.
         * Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
         * 
         * @return builder
         * 
         */
        public Builder smbSettings(@Nullable Output<List<String>> smbSettings) {
            $.smbSettings = smbSettings;
            return this;
        }

        /**
         * @param smbSettings Settings for volumes with SMB access.
         * Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
         * 
         * @return builder
         * 
         */
        public Builder smbSettings(List<String> smbSettings) {
            return smbSettings(Output.of(smbSettings));
        }

        /**
         * @param smbSettings Settings for volumes with SMB access.
         * Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
         * 
         * @return builder
         * 
         */
        public Builder smbSettings(String... smbSettings) {
            return smbSettings(List.of(smbSettings));
        }

        /**
         * @param snapshotDirectory If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume&#39;s snapshots. Will enable &#34;Previous Versions&#34; support for SMB.
         * 
         * @return builder
         * 
         */
        public Builder snapshotDirectory(@Nullable Output<Boolean> snapshotDirectory) {
            $.snapshotDirectory = snapshotDirectory;
            return this;
        }

        /**
         * @param snapshotDirectory If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume&#39;s snapshots. Will enable &#34;Previous Versions&#34; support for SMB.
         * 
         * @return builder
         * 
         */
        public Builder snapshotDirectory(Boolean snapshotDirectory) {
            return snapshotDirectory(Output.of(snapshotDirectory));
        }

        /**
         * @param snapshotPolicy Snapshot policy defines the schedule for automatic snapshot creation.
         * To disable automatic snapshot creation you have to remove the whole snapshot_policy block.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder snapshotPolicy(@Nullable Output<VolumeSnapshotPolicyArgs> snapshotPolicy) {
            $.snapshotPolicy = snapshotPolicy;
            return this;
        }

        /**
         * @param snapshotPolicy Snapshot policy defines the schedule for automatic snapshot creation.
         * To disable automatic snapshot creation you have to remove the whole snapshot_policy block.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder snapshotPolicy(VolumeSnapshotPolicyArgs snapshotPolicy) {
            return snapshotPolicy(Output.of(snapshotPolicy));
        }

        /**
         * @param state State of the volume.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the volume.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stateDetails State details of the volume.
         * 
         * @return builder
         * 
         */
        public Builder stateDetails(@Nullable Output<String> stateDetails) {
            $.stateDetails = stateDetails;
            return this;
        }

        /**
         * @param stateDetails State details of the volume.
         * 
         * @return builder
         * 
         */
        public Builder stateDetails(String stateDetails) {
            return stateDetails(Output.of(stateDetails));
        }

        /**
         * @param storagePool Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
         * 
         * @return builder
         * 
         */
        public Builder storagePool(@Nullable Output<String> storagePool) {
            $.storagePool = storagePool;
            return this;
        }

        /**
         * @param storagePool Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
         * 
         * @return builder
         * 
         */
        public Builder storagePool(String storagePool) {
            return storagePool(Output.of(storagePool));
        }

        /**
         * @param throughputMibps Optional. Custom Performance Total Throughput of the pool (in MiB/s).
         * 
         * @return builder
         * 
         */
        public Builder throughputMibps(@Nullable Output<Double> throughputMibps) {
            $.throughputMibps = throughputMibps;
            return this;
        }

        /**
         * @param throughputMibps Optional. Custom Performance Total Throughput of the pool (in MiB/s).
         * 
         * @return builder
         * 
         */
        public Builder throughputMibps(Double throughputMibps) {
            return throughputMibps(Output.of(throughputMibps));
        }

        /**
         * @param tieringPolicy Tiering policy for the volume.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder tieringPolicy(@Nullable Output<VolumeTieringPolicyArgs> tieringPolicy) {
            $.tieringPolicy = tieringPolicy;
            return this;
        }

        /**
         * @param tieringPolicy Tiering policy for the volume.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder tieringPolicy(VolumeTieringPolicyArgs tieringPolicy) {
            return tieringPolicy(Output.of(tieringPolicy));
        }

        /**
         * @param unixPermissions Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
         * 
         * @return builder
         * 
         */
        public Builder unixPermissions(@Nullable Output<String> unixPermissions) {
            $.unixPermissions = unixPermissions;
            return this;
        }

        /**
         * @param unixPermissions Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
         * 
         * @return builder
         * 
         */
        public Builder unixPermissions(String unixPermissions) {
            return unixPermissions(Output.of(unixPermissions));
        }

        /**
         * @param usedGib Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
         * 
         * @return builder
         * 
         */
        public Builder usedGib(@Nullable Output<String> usedGib) {
            $.usedGib = usedGib;
            return this;
        }

        /**
         * @param usedGib Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
         * 
         * @return builder
         * 
         */
        public Builder usedGib(String usedGib) {
            return usedGib(Output.of(usedGib));
        }

        /**
         * @param zone Specifies the active zone for regional volume.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Specifies the active zone for regional volume.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public VolumeState build() {
            return $;
        }
    }

}
