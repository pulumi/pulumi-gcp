// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.composer;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.composer.inputs.GetEnvironmentArgs;
import com.pulumi.gcp.composer.inputs.GetEnvironmentPlainArgs;
import com.pulumi.gcp.composer.inputs.GetImageVersionsArgs;
import com.pulumi.gcp.composer.inputs.GetImageVersionsPlainArgs;
import com.pulumi.gcp.composer.inputs.GetUserWorkloadsConfigMapArgs;
import com.pulumi.gcp.composer.inputs.GetUserWorkloadsConfigMapPlainArgs;
import com.pulumi.gcp.composer.inputs.GetUserWorkloadsSecretArgs;
import com.pulumi.gcp.composer.inputs.GetUserWorkloadsSecretPlainArgs;
import com.pulumi.gcp.composer.outputs.GetEnvironmentResult;
import com.pulumi.gcp.composer.outputs.GetImageVersionsResult;
import com.pulumi.gcp.composer.outputs.GetUserWorkloadsConfigMapResult;
import com.pulumi.gcp.composer.outputs.GetUserWorkloadsSecretResult;
import java.util.concurrent.CompletableFuture;

public final class ComposerFunctions {
    /**
     * Provides access to Cloud Composer environment configuration in a region for a given project.
     * 
     * To get more information about Composer Environment, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetEnvironmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var composerEnvEnvironment = new Environment("composerEnvEnvironment", EnvironmentArgs.builder()
     *             .name("composer-environment")
     *             .build());
     * 
     *         final var composerEnv = ComposerFunctions.getEnvironment(GetEnvironmentArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *         ctx.export("debug", composerEnv.applyValue(getEnvironmentResult -> getEnvironmentResult.configs()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentResult> getEnvironment(GetEnvironmentArgs args) {
        return getEnvironment(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to Cloud Composer environment configuration in a region for a given project.
     * 
     * To get more information about Composer Environment, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetEnvironmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var composerEnvEnvironment = new Environment("composerEnvEnvironment", EnvironmentArgs.builder()
     *             .name("composer-environment")
     *             .build());
     * 
     *         final var composerEnv = ComposerFunctions.getEnvironment(GetEnvironmentArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *         ctx.export("debug", composerEnv.applyValue(getEnvironmentResult -> getEnvironmentResult.configs()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentResult> getEnvironmentPlain(GetEnvironmentPlainArgs args) {
        return getEnvironmentPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to Cloud Composer environment configuration in a region for a given project.
     * 
     * To get more information about Composer Environment, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetEnvironmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var composerEnvEnvironment = new Environment("composerEnvEnvironment", EnvironmentArgs.builder()
     *             .name("composer-environment")
     *             .build());
     * 
     *         final var composerEnv = ComposerFunctions.getEnvironment(GetEnvironmentArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *         ctx.export("debug", composerEnv.applyValue(getEnvironmentResult -> getEnvironmentResult.configs()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentResult> getEnvironment(GetEnvironmentArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:composer/getEnvironment:getEnvironment", TypeShape.of(GetEnvironmentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Cloud Composer environment configuration in a region for a given project.
     * 
     * To get more information about Composer Environment, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetEnvironmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var composerEnvEnvironment = new Environment("composerEnvEnvironment", EnvironmentArgs.builder()
     *             .name("composer-environment")
     *             .build());
     * 
     *         final var composerEnv = ComposerFunctions.getEnvironment(GetEnvironmentArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *         ctx.export("debug", composerEnv.applyValue(getEnvironmentResult -> getEnvironmentResult.configs()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEnvironmentResult> getEnvironment(GetEnvironmentArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:composer/getEnvironment:getEnvironment", TypeShape.of(GetEnvironmentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Cloud Composer environment configuration in a region for a given project.
     * 
     * To get more information about Composer Environment, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetEnvironmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var composerEnvEnvironment = new Environment("composerEnvEnvironment", EnvironmentArgs.builder()
     *             .name("composer-environment")
     *             .build());
     * 
     *         final var composerEnv = ComposerFunctions.getEnvironment(GetEnvironmentArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *         ctx.export("debug", composerEnv.applyValue(getEnvironmentResult -> getEnvironmentResult.configs()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEnvironmentResult> getEnvironmentPlain(GetEnvironmentPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:composer/getEnvironment:getEnvironment", TypeShape.of(GetEnvironmentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to available Cloud Composer versions in a region for a given project.
     * 
     * To get more information about Composer Image Versions, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.imageVersions)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetImageVersionsArgs;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = ComposerFunctions.getImageVersions();
     * 
     *         var test = new Environment("test", EnvironmentArgs.builder()
     *             .name("test-env")
     *             .region("us-central1")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion(all.applyValue(getImageVersionsResult -> getImageVersionsResult.imageVersions()[0].imageVersionId()))
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImageVersionsResult> getImageVersions() {
        return getImageVersions(GetImageVersionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides access to available Cloud Composer versions in a region for a given project.
     * 
     * To get more information about Composer Image Versions, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.imageVersions)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetImageVersionsArgs;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = ComposerFunctions.getImageVersions();
     * 
     *         var test = new Environment("test", EnvironmentArgs.builder()
     *             .name("test-env")
     *             .region("us-central1")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion(all.applyValue(getImageVersionsResult -> getImageVersionsResult.imageVersions()[0].imageVersionId()))
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetImageVersionsResult> getImageVersionsPlain() {
        return getImageVersionsPlain(GetImageVersionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides access to available Cloud Composer versions in a region for a given project.
     * 
     * To get more information about Composer Image Versions, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.imageVersions)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetImageVersionsArgs;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = ComposerFunctions.getImageVersions();
     * 
     *         var test = new Environment("test", EnvironmentArgs.builder()
     *             .name("test-env")
     *             .region("us-central1")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion(all.applyValue(getImageVersionsResult -> getImageVersionsResult.imageVersions()[0].imageVersionId()))
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImageVersionsResult> getImageVersions(GetImageVersionsArgs args) {
        return getImageVersions(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to available Cloud Composer versions in a region for a given project.
     * 
     * To get more information about Composer Image Versions, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.imageVersions)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetImageVersionsArgs;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = ComposerFunctions.getImageVersions();
     * 
     *         var test = new Environment("test", EnvironmentArgs.builder()
     *             .name("test-env")
     *             .region("us-central1")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion(all.applyValue(getImageVersionsResult -> getImageVersionsResult.imageVersions()[0].imageVersionId()))
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetImageVersionsResult> getImageVersionsPlain(GetImageVersionsPlainArgs args) {
        return getImageVersionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to available Cloud Composer versions in a region for a given project.
     * 
     * To get more information about Composer Image Versions, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.imageVersions)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetImageVersionsArgs;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = ComposerFunctions.getImageVersions();
     * 
     *         var test = new Environment("test", EnvironmentArgs.builder()
     *             .name("test-env")
     *             .region("us-central1")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion(all.applyValue(getImageVersionsResult -> getImageVersionsResult.imageVersions()[0].imageVersionId()))
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImageVersionsResult> getImageVersions(GetImageVersionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:composer/getImageVersions:getImageVersions", TypeShape.of(GetImageVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to available Cloud Composer versions in a region for a given project.
     * 
     * To get more information about Composer Image Versions, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.imageVersions)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetImageVersionsArgs;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = ComposerFunctions.getImageVersions();
     * 
     *         var test = new Environment("test", EnvironmentArgs.builder()
     *             .name("test-env")
     *             .region("us-central1")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion(all.applyValue(getImageVersionsResult -> getImageVersionsResult.imageVersions()[0].imageVersionId()))
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImageVersionsResult> getImageVersions(GetImageVersionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:composer/getImageVersions:getImageVersions", TypeShape.of(GetImageVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to available Cloud Composer versions in a region for a given project.
     * 
     * To get more information about Composer Image Versions, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.imageVersions)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetImageVersionsArgs;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = ComposerFunctions.getImageVersions();
     * 
     *         var test = new Environment("test", EnvironmentArgs.builder()
     *             .name("test-env")
     *             .region("us-central1")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion(all.applyValue(getImageVersionsResult -> getImageVersionsResult.imageVersions()[0].imageVersionId()))
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetImageVersionsResult> getImageVersionsPlain(GetImageVersionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:composer/getImageVersions:getImageVersions", TypeShape.of(GetImageVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Kubernetes ConfigMap configuration for a given project, region and Composer Environment.
     * 
     * To get more information about Composer User Workloads Config Map, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments.userWorkloadsConfigMaps)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import com.pulumi.gcp.composer.UserWorkloadsConfigMap;
     * import com.pulumi.gcp.composer.UserWorkloadsConfigMapArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetUserWorkloadsConfigMapArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleEnvironment = new Environment("exampleEnvironment", EnvironmentArgs.builder()
     *             .name("example-environment")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion("composer-3-airflow-2")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleUserWorkloadsConfigMap = new UserWorkloadsConfigMap("exampleUserWorkloadsConfigMap", UserWorkloadsConfigMapArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name("example-config-map")
     *             .data(Map.ofEntries(
     *                 Map.entry("db_host", "dbhost:5432"),
     *                 Map.entry("api_host", "apihost:443")
     *             ))
     *             .build());
     * 
     *         final var example = ComposerFunctions.getUserWorkloadsConfigMap(GetUserWorkloadsConfigMapArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name(googleComposerUserWorkloadsConfigMap.example().name())
     *             .build());
     * 
     *         ctx.export("debug", example.applyValue(getUserWorkloadsConfigMapResult -> getUserWorkloadsConfigMapResult));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserWorkloadsConfigMapResult> getUserWorkloadsConfigMap(GetUserWorkloadsConfigMapArgs args) {
        return getUserWorkloadsConfigMap(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to Kubernetes ConfigMap configuration for a given project, region and Composer Environment.
     * 
     * To get more information about Composer User Workloads Config Map, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments.userWorkloadsConfigMaps)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import com.pulumi.gcp.composer.UserWorkloadsConfigMap;
     * import com.pulumi.gcp.composer.UserWorkloadsConfigMapArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetUserWorkloadsConfigMapArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleEnvironment = new Environment("exampleEnvironment", EnvironmentArgs.builder()
     *             .name("example-environment")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion("composer-3-airflow-2")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleUserWorkloadsConfigMap = new UserWorkloadsConfigMap("exampleUserWorkloadsConfigMap", UserWorkloadsConfigMapArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name("example-config-map")
     *             .data(Map.ofEntries(
     *                 Map.entry("db_host", "dbhost:5432"),
     *                 Map.entry("api_host", "apihost:443")
     *             ))
     *             .build());
     * 
     *         final var example = ComposerFunctions.getUserWorkloadsConfigMap(GetUserWorkloadsConfigMapArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name(googleComposerUserWorkloadsConfigMap.example().name())
     *             .build());
     * 
     *         ctx.export("debug", example.applyValue(getUserWorkloadsConfigMapResult -> getUserWorkloadsConfigMapResult));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserWorkloadsConfigMapResult> getUserWorkloadsConfigMapPlain(GetUserWorkloadsConfigMapPlainArgs args) {
        return getUserWorkloadsConfigMapPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to Kubernetes ConfigMap configuration for a given project, region and Composer Environment.
     * 
     * To get more information about Composer User Workloads Config Map, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments.userWorkloadsConfigMaps)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import com.pulumi.gcp.composer.UserWorkloadsConfigMap;
     * import com.pulumi.gcp.composer.UserWorkloadsConfigMapArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetUserWorkloadsConfigMapArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleEnvironment = new Environment("exampleEnvironment", EnvironmentArgs.builder()
     *             .name("example-environment")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion("composer-3-airflow-2")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleUserWorkloadsConfigMap = new UserWorkloadsConfigMap("exampleUserWorkloadsConfigMap", UserWorkloadsConfigMapArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name("example-config-map")
     *             .data(Map.ofEntries(
     *                 Map.entry("db_host", "dbhost:5432"),
     *                 Map.entry("api_host", "apihost:443")
     *             ))
     *             .build());
     * 
     *         final var example = ComposerFunctions.getUserWorkloadsConfigMap(GetUserWorkloadsConfigMapArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name(googleComposerUserWorkloadsConfigMap.example().name())
     *             .build());
     * 
     *         ctx.export("debug", example.applyValue(getUserWorkloadsConfigMapResult -> getUserWorkloadsConfigMapResult));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserWorkloadsConfigMapResult> getUserWorkloadsConfigMap(GetUserWorkloadsConfigMapArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:composer/getUserWorkloadsConfigMap:getUserWorkloadsConfigMap", TypeShape.of(GetUserWorkloadsConfigMapResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Kubernetes ConfigMap configuration for a given project, region and Composer Environment.
     * 
     * To get more information about Composer User Workloads Config Map, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments.userWorkloadsConfigMaps)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import com.pulumi.gcp.composer.UserWorkloadsConfigMap;
     * import com.pulumi.gcp.composer.UserWorkloadsConfigMapArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetUserWorkloadsConfigMapArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleEnvironment = new Environment("exampleEnvironment", EnvironmentArgs.builder()
     *             .name("example-environment")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion("composer-3-airflow-2")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleUserWorkloadsConfigMap = new UserWorkloadsConfigMap("exampleUserWorkloadsConfigMap", UserWorkloadsConfigMapArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name("example-config-map")
     *             .data(Map.ofEntries(
     *                 Map.entry("db_host", "dbhost:5432"),
     *                 Map.entry("api_host", "apihost:443")
     *             ))
     *             .build());
     * 
     *         final var example = ComposerFunctions.getUserWorkloadsConfigMap(GetUserWorkloadsConfigMapArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name(googleComposerUserWorkloadsConfigMap.example().name())
     *             .build());
     * 
     *         ctx.export("debug", example.applyValue(getUserWorkloadsConfigMapResult -> getUserWorkloadsConfigMapResult));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserWorkloadsConfigMapResult> getUserWorkloadsConfigMap(GetUserWorkloadsConfigMapArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:composer/getUserWorkloadsConfigMap:getUserWorkloadsConfigMap", TypeShape.of(GetUserWorkloadsConfigMapResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Kubernetes ConfigMap configuration for a given project, region and Composer Environment.
     * 
     * To get more information about Composer User Workloads Config Map, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments.userWorkloadsConfigMaps)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/composer/docs/concepts/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import com.pulumi.gcp.composer.UserWorkloadsConfigMap;
     * import com.pulumi.gcp.composer.UserWorkloadsConfigMapArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetUserWorkloadsConfigMapArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleEnvironment = new Environment("exampleEnvironment", EnvironmentArgs.builder()
     *             .name("example-environment")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion("composer-3-airflow-2")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleUserWorkloadsConfigMap = new UserWorkloadsConfigMap("exampleUserWorkloadsConfigMap", UserWorkloadsConfigMapArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name("example-config-map")
     *             .data(Map.ofEntries(
     *                 Map.entry("db_host", "dbhost:5432"),
     *                 Map.entry("api_host", "apihost:443")
     *             ))
     *             .build());
     * 
     *         final var example = ComposerFunctions.getUserWorkloadsConfigMap(GetUserWorkloadsConfigMapArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name(googleComposerUserWorkloadsConfigMap.example().name())
     *             .build());
     * 
     *         ctx.export("debug", example.applyValue(getUserWorkloadsConfigMapResult -> getUserWorkloadsConfigMapResult));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserWorkloadsConfigMapResult> getUserWorkloadsConfigMapPlain(GetUserWorkloadsConfigMapPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:composer/getUserWorkloadsConfigMap:getUserWorkloadsConfigMap", TypeShape.of(GetUserWorkloadsConfigMapResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Kubernetes Secret configuration for a given project, region and Composer Environment.
     * 
     * To get more information about Composer User Workloads Secrets, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments.userWorkloadsSecrets)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import com.pulumi.gcp.composer.UserWorkloadsSecret;
     * import com.pulumi.gcp.composer.UserWorkloadsSecretArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetUserWorkloadsSecretArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleEnvironment = new Environment("exampleEnvironment", EnvironmentArgs.builder()
     *             .name("example-environment")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion("composer-3-airflow-2")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleUserWorkloadsSecret = new UserWorkloadsSecret("exampleUserWorkloadsSecret", UserWorkloadsSecretArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name("example-secret")
     *             .data(Map.ofEntries(
     *                 Map.entry("username", StdFunctions.base64encode(Base64encodeArgs.builder()
     *                     .input("username")
     *                     .build()).result()),
     *                 Map.entry("password", StdFunctions.base64encode(Base64encodeArgs.builder()
     *                     .input("password")
     *                     .build()).result())
     *             ))
     *             .build());
     * 
     *         final var example = ComposerFunctions.getUserWorkloadsSecret(GetUserWorkloadsSecretArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name(googleComposerUserWorkloadsSecret.example().name())
     *             .build());
     * 
     *         ctx.export("debug", example.applyValue(getUserWorkloadsSecretResult -> getUserWorkloadsSecretResult));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserWorkloadsSecretResult> getUserWorkloadsSecret(GetUserWorkloadsSecretArgs args) {
        return getUserWorkloadsSecret(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to Kubernetes Secret configuration for a given project, region and Composer Environment.
     * 
     * To get more information about Composer User Workloads Secrets, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments.userWorkloadsSecrets)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import com.pulumi.gcp.composer.UserWorkloadsSecret;
     * import com.pulumi.gcp.composer.UserWorkloadsSecretArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetUserWorkloadsSecretArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleEnvironment = new Environment("exampleEnvironment", EnvironmentArgs.builder()
     *             .name("example-environment")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion("composer-3-airflow-2")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleUserWorkloadsSecret = new UserWorkloadsSecret("exampleUserWorkloadsSecret", UserWorkloadsSecretArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name("example-secret")
     *             .data(Map.ofEntries(
     *                 Map.entry("username", StdFunctions.base64encode(Base64encodeArgs.builder()
     *                     .input("username")
     *                     .build()).result()),
     *                 Map.entry("password", StdFunctions.base64encode(Base64encodeArgs.builder()
     *                     .input("password")
     *                     .build()).result())
     *             ))
     *             .build());
     * 
     *         final var example = ComposerFunctions.getUserWorkloadsSecret(GetUserWorkloadsSecretArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name(googleComposerUserWorkloadsSecret.example().name())
     *             .build());
     * 
     *         ctx.export("debug", example.applyValue(getUserWorkloadsSecretResult -> getUserWorkloadsSecretResult));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserWorkloadsSecretResult> getUserWorkloadsSecretPlain(GetUserWorkloadsSecretPlainArgs args) {
        return getUserWorkloadsSecretPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to Kubernetes Secret configuration for a given project, region and Composer Environment.
     * 
     * To get more information about Composer User Workloads Secrets, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments.userWorkloadsSecrets)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import com.pulumi.gcp.composer.UserWorkloadsSecret;
     * import com.pulumi.gcp.composer.UserWorkloadsSecretArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetUserWorkloadsSecretArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleEnvironment = new Environment("exampleEnvironment", EnvironmentArgs.builder()
     *             .name("example-environment")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion("composer-3-airflow-2")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleUserWorkloadsSecret = new UserWorkloadsSecret("exampleUserWorkloadsSecret", UserWorkloadsSecretArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name("example-secret")
     *             .data(Map.ofEntries(
     *                 Map.entry("username", StdFunctions.base64encode(Base64encodeArgs.builder()
     *                     .input("username")
     *                     .build()).result()),
     *                 Map.entry("password", StdFunctions.base64encode(Base64encodeArgs.builder()
     *                     .input("password")
     *                     .build()).result())
     *             ))
     *             .build());
     * 
     *         final var example = ComposerFunctions.getUserWorkloadsSecret(GetUserWorkloadsSecretArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name(googleComposerUserWorkloadsSecret.example().name())
     *             .build());
     * 
     *         ctx.export("debug", example.applyValue(getUserWorkloadsSecretResult -> getUserWorkloadsSecretResult));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserWorkloadsSecretResult> getUserWorkloadsSecret(GetUserWorkloadsSecretArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:composer/getUserWorkloadsSecret:getUserWorkloadsSecret", TypeShape.of(GetUserWorkloadsSecretResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Kubernetes Secret configuration for a given project, region and Composer Environment.
     * 
     * To get more information about Composer User Workloads Secrets, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments.userWorkloadsSecrets)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import com.pulumi.gcp.composer.UserWorkloadsSecret;
     * import com.pulumi.gcp.composer.UserWorkloadsSecretArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetUserWorkloadsSecretArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleEnvironment = new Environment("exampleEnvironment", EnvironmentArgs.builder()
     *             .name("example-environment")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion("composer-3-airflow-2")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleUserWorkloadsSecret = new UserWorkloadsSecret("exampleUserWorkloadsSecret", UserWorkloadsSecretArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name("example-secret")
     *             .data(Map.ofEntries(
     *                 Map.entry("username", StdFunctions.base64encode(Base64encodeArgs.builder()
     *                     .input("username")
     *                     .build()).result()),
     *                 Map.entry("password", StdFunctions.base64encode(Base64encodeArgs.builder()
     *                     .input("password")
     *                     .build()).result())
     *             ))
     *             .build());
     * 
     *         final var example = ComposerFunctions.getUserWorkloadsSecret(GetUserWorkloadsSecretArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name(googleComposerUserWorkloadsSecret.example().name())
     *             .build());
     * 
     *         ctx.export("debug", example.applyValue(getUserWorkloadsSecretResult -> getUserWorkloadsSecretResult));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserWorkloadsSecretResult> getUserWorkloadsSecret(GetUserWorkloadsSecretArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:composer/getUserWorkloadsSecret:getUserWorkloadsSecret", TypeShape.of(GetUserWorkloadsSecretResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Kubernetes Secret configuration for a given project, region and Composer Environment.
     * 
     * To get more information about Composer User Workloads Secrets, see:
     * 
     * * [API documentation](https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments.userWorkloadsSecrets)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.composer.Environment;
     * import com.pulumi.gcp.composer.EnvironmentArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigArgs;
     * import com.pulumi.gcp.composer.inputs.EnvironmentConfigSoftwareConfigArgs;
     * import com.pulumi.gcp.composer.UserWorkloadsSecret;
     * import com.pulumi.gcp.composer.UserWorkloadsSecretArgs;
     * import com.pulumi.gcp.composer.ComposerFunctions;
     * import com.pulumi.gcp.composer.inputs.GetUserWorkloadsSecretArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleEnvironment = new Environment("exampleEnvironment", EnvironmentArgs.builder()
     *             .name("example-environment")
     *             .config(EnvironmentConfigArgs.builder()
     *                 .softwareConfig(EnvironmentConfigSoftwareConfigArgs.builder()
     *                     .imageVersion("composer-3-airflow-2")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleUserWorkloadsSecret = new UserWorkloadsSecret("exampleUserWorkloadsSecret", UserWorkloadsSecretArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name("example-secret")
     *             .data(Map.ofEntries(
     *                 Map.entry("username", StdFunctions.base64encode(Base64encodeArgs.builder()
     *                     .input("username")
     *                     .build()).result()),
     *                 Map.entry("password", StdFunctions.base64encode(Base64encodeArgs.builder()
     *                     .input("password")
     *                     .build()).result())
     *             ))
     *             .build());
     * 
     *         final var example = ComposerFunctions.getUserWorkloadsSecret(GetUserWorkloadsSecretArgs.builder()
     *             .environment(exampleEnvironment.name())
     *             .name(googleComposerUserWorkloadsSecret.example().name())
     *             .build());
     * 
     *         ctx.export("debug", example.applyValue(getUserWorkloadsSecretResult -> getUserWorkloadsSecretResult));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserWorkloadsSecretResult> getUserWorkloadsSecretPlain(GetUserWorkloadsSecretPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:composer/getUserWorkloadsSecret:getUserWorkloadsSecret", TypeShape.of(GetUserWorkloadsSecretResult.class), args, Utilities.withVersion(options));
    }
}
