// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudtasks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetUriOverridePathOverrideArgs;
import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetUriOverrideQueryOverrideArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueueHttpTargetUriOverrideArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueueHttpTargetUriOverrideArgs Empty = new QueueHttpTargetUriOverrideArgs();

    /**
     * Host override.
     * When specified, replaces the host part of the task URL.
     * For example, if the task URL is &#34;https://www.google.com&#34;, and host value
     * is set to &#34;example.net&#34;, the overridden URI will be changed to &#34;https://example.net&#34;.
     * Host value cannot be an empty string (INVALID_ARGUMENT).
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Host override.
     * When specified, replaces the host part of the task URL.
     * For example, if the task URL is &#34;https://www.google.com&#34;, and host value
     * is set to &#34;example.net&#34;, the overridden URI will be changed to &#34;https://example.net&#34;.
     * Host value cannot be an empty string (INVALID_ARGUMENT).
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * URI path.
     * When specified, replaces the existing path of the task URL.
     * Setting the path value to an empty string clears the URI path segment.
     * Structure is documented below.
     * 
     */
    @Import(name="pathOverride")
    private @Nullable Output<QueueHttpTargetUriOverridePathOverrideArgs> pathOverride;

    /**
     * @return URI path.
     * When specified, replaces the existing path of the task URL.
     * Setting the path value to an empty string clears the URI path segment.
     * Structure is documented below.
     * 
     */
    public Optional<Output<QueueHttpTargetUriOverridePathOverrideArgs>> pathOverride() {
        return Optional.ofNullable(this.pathOverride);
    }

    /**
     * Port override.
     * When specified, replaces the port part of the task URI.
     * For instance, for a URI http://www.google.com/foo and port=123, the overridden URI becomes http://www.google.com:123/foo.
     * Note that the port value must be a positive integer.
     * Setting the port to 0 (Zero) clears the URI port.
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return Port override.
     * When specified, replaces the port part of the task URI.
     * For instance, for a URI http://www.google.com/foo and port=123, the overridden URI becomes http://www.google.com:123/foo.
     * Note that the port value must be a positive integer.
     * Setting the port to 0 (Zero) clears the URI port.
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * URI query.
     * When specified, replaces the query part of the task URI. Setting the query value to an empty string clears the URI query segment.
     * Structure is documented below.
     * 
     */
    @Import(name="queryOverride")
    private @Nullable Output<QueueHttpTargetUriOverrideQueryOverrideArgs> queryOverride;

    /**
     * @return URI query.
     * When specified, replaces the query part of the task URI. Setting the query value to an empty string clears the URI query segment.
     * Structure is documented below.
     * 
     */
    public Optional<Output<QueueHttpTargetUriOverrideQueryOverrideArgs>> queryOverride() {
        return Optional.ofNullable(this.queryOverride);
    }

    /**
     * Scheme override.
     * When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
     * Possible values are: `HTTP`, `HTTPS`.
     * 
     */
    @Import(name="scheme")
    private @Nullable Output<String> scheme;

    /**
     * @return Scheme override.
     * When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
     * Possible values are: `HTTP`, `HTTPS`.
     * 
     */
    public Optional<Output<String>> scheme() {
        return Optional.ofNullable(this.scheme);
    }

    /**
     * URI Override Enforce Mode
     * When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
     * Possible values are: `ALWAYS`, `IF_NOT_EXISTS`.
     * 
     */
    @Import(name="uriOverrideEnforceMode")
    private @Nullable Output<String> uriOverrideEnforceMode;

    /**
     * @return URI Override Enforce Mode
     * When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
     * Possible values are: `ALWAYS`, `IF_NOT_EXISTS`.
     * 
     */
    public Optional<Output<String>> uriOverrideEnforceMode() {
        return Optional.ofNullable(this.uriOverrideEnforceMode);
    }

    private QueueHttpTargetUriOverrideArgs() {}

    private QueueHttpTargetUriOverrideArgs(QueueHttpTargetUriOverrideArgs $) {
        this.host = $.host;
        this.pathOverride = $.pathOverride;
        this.port = $.port;
        this.queryOverride = $.queryOverride;
        this.scheme = $.scheme;
        this.uriOverrideEnforceMode = $.uriOverrideEnforceMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueueHttpTargetUriOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueueHttpTargetUriOverrideArgs $;

        public Builder() {
            $ = new QueueHttpTargetUriOverrideArgs();
        }

        public Builder(QueueHttpTargetUriOverrideArgs defaults) {
            $ = new QueueHttpTargetUriOverrideArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host Host override.
         * When specified, replaces the host part of the task URL.
         * For example, if the task URL is &#34;https://www.google.com&#34;, and host value
         * is set to &#34;example.net&#34;, the overridden URI will be changed to &#34;https://example.net&#34;.
         * Host value cannot be an empty string (INVALID_ARGUMENT).
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Host override.
         * When specified, replaces the host part of the task URL.
         * For example, if the task URL is &#34;https://www.google.com&#34;, and host value
         * is set to &#34;example.net&#34;, the overridden URI will be changed to &#34;https://example.net&#34;.
         * Host value cannot be an empty string (INVALID_ARGUMENT).
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param pathOverride URI path.
         * When specified, replaces the existing path of the task URL.
         * Setting the path value to an empty string clears the URI path segment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pathOverride(@Nullable Output<QueueHttpTargetUriOverridePathOverrideArgs> pathOverride) {
            $.pathOverride = pathOverride;
            return this;
        }

        /**
         * @param pathOverride URI path.
         * When specified, replaces the existing path of the task URL.
         * Setting the path value to an empty string clears the URI path segment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pathOverride(QueueHttpTargetUriOverridePathOverrideArgs pathOverride) {
            return pathOverride(Output.of(pathOverride));
        }

        /**
         * @param port Port override.
         * When specified, replaces the port part of the task URI.
         * For instance, for a URI http://www.google.com/foo and port=123, the overridden URI becomes http://www.google.com:123/foo.
         * Note that the port value must be a positive integer.
         * Setting the port to 0 (Zero) clears the URI port.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port override.
         * When specified, replaces the port part of the task URI.
         * For instance, for a URI http://www.google.com/foo and port=123, the overridden URI becomes http://www.google.com:123/foo.
         * Note that the port value must be a positive integer.
         * Setting the port to 0 (Zero) clears the URI port.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param queryOverride URI query.
         * When specified, replaces the query part of the task URI. Setting the query value to an empty string clears the URI query segment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queryOverride(@Nullable Output<QueueHttpTargetUriOverrideQueryOverrideArgs> queryOverride) {
            $.queryOverride = queryOverride;
            return this;
        }

        /**
         * @param queryOverride URI query.
         * When specified, replaces the query part of the task URI. Setting the query value to an empty string clears the URI query segment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queryOverride(QueueHttpTargetUriOverrideQueryOverrideArgs queryOverride) {
            return queryOverride(Output.of(queryOverride));
        }

        /**
         * @param scheme Scheme override.
         * When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
         * Possible values are: `HTTP`, `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder scheme(@Nullable Output<String> scheme) {
            $.scheme = scheme;
            return this;
        }

        /**
         * @param scheme Scheme override.
         * When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
         * Possible values are: `HTTP`, `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder scheme(String scheme) {
            return scheme(Output.of(scheme));
        }

        /**
         * @param uriOverrideEnforceMode URI Override Enforce Mode
         * When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
         * Possible values are: `ALWAYS`, `IF_NOT_EXISTS`.
         * 
         * @return builder
         * 
         */
        public Builder uriOverrideEnforceMode(@Nullable Output<String> uriOverrideEnforceMode) {
            $.uriOverrideEnforceMode = uriOverrideEnforceMode;
            return this;
        }

        /**
         * @param uriOverrideEnforceMode URI Override Enforce Mode
         * When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
         * Possible values are: `ALWAYS`, `IF_NOT_EXISTS`.
         * 
         * @return builder
         * 
         */
        public Builder uriOverrideEnforceMode(String uriOverrideEnforceMode) {
            return uriOverrideEnforceMode(Output.of(uriOverrideEnforceMode));
        }

        public QueueHttpTargetUriOverrideArgs build() {
            return $;
        }
    }

}
