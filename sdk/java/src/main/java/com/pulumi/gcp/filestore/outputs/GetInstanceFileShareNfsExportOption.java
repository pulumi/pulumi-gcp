// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.filestore.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceFileShareNfsExportOption {
    /**
     * @return Either READ_ONLY, for allowing only read requests on the exported directory,
     * or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE. Default value: &#34;READ_WRITE&#34; Possible values: [&#34;READ_ONLY&#34;, &#34;READ_WRITE&#34;]
     * 
     */
    private String accessMode;
    /**
     * @return An integer representing the anonymous group id with a default value of 65534.
     * Anon_gid may only be set with squashMode of ROOT_SQUASH. An error will be returned
     * if this field is specified for other squashMode settings.
     * 
     */
    private Integer anonGid;
    /**
     * @return An integer representing the anonymous user id with a default value of 65534.
     * Anon_uid may only be set with squashMode of ROOT_SQUASH. An error will be returned
     * if this field is specified for other squashMode settings.
     * 
     */
    private Integer anonUid;
    /**
     * @return List of either IPv4 addresses, or ranges in CIDR notation which may mount the file share.
     * Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned.
     * The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
     * 
     */
    private List<String> ipRanges;
    /**
     * @return The source VPC network for &#39;ip_ranges&#39;.
     * Required for instances using Private Service Connect, optional otherwise.
     * 
     */
    private String network;
    /**
     * @return Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH,
     * for not allowing root access. The default is NO_ROOT_SQUASH. Default value: &#34;NO_ROOT_SQUASH&#34; Possible values: [&#34;NO_ROOT_SQUASH&#34;, &#34;ROOT_SQUASH&#34;]
     * 
     */
    private String squashMode;

    private GetInstanceFileShareNfsExportOption() {}
    /**
     * @return Either READ_ONLY, for allowing only read requests on the exported directory,
     * or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE. Default value: &#34;READ_WRITE&#34; Possible values: [&#34;READ_ONLY&#34;, &#34;READ_WRITE&#34;]
     * 
     */
    public String accessMode() {
        return this.accessMode;
    }
    /**
     * @return An integer representing the anonymous group id with a default value of 65534.
     * Anon_gid may only be set with squashMode of ROOT_SQUASH. An error will be returned
     * if this field is specified for other squashMode settings.
     * 
     */
    public Integer anonGid() {
        return this.anonGid;
    }
    /**
     * @return An integer representing the anonymous user id with a default value of 65534.
     * Anon_uid may only be set with squashMode of ROOT_SQUASH. An error will be returned
     * if this field is specified for other squashMode settings.
     * 
     */
    public Integer anonUid() {
        return this.anonUid;
    }
    /**
     * @return List of either IPv4 addresses, or ranges in CIDR notation which may mount the file share.
     * Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned.
     * The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
     * 
     */
    public List<String> ipRanges() {
        return this.ipRanges;
    }
    /**
     * @return The source VPC network for &#39;ip_ranges&#39;.
     * Required for instances using Private Service Connect, optional otherwise.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH,
     * for not allowing root access. The default is NO_ROOT_SQUASH. Default value: &#34;NO_ROOT_SQUASH&#34; Possible values: [&#34;NO_ROOT_SQUASH&#34;, &#34;ROOT_SQUASH&#34;]
     * 
     */
    public String squashMode() {
        return this.squashMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceFileShareNfsExportOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessMode;
        private Integer anonGid;
        private Integer anonUid;
        private List<String> ipRanges;
        private String network;
        private String squashMode;
        public Builder() {}
        public Builder(GetInstanceFileShareNfsExportOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessMode = defaults.accessMode;
    	      this.anonGid = defaults.anonGid;
    	      this.anonUid = defaults.anonUid;
    	      this.ipRanges = defaults.ipRanges;
    	      this.network = defaults.network;
    	      this.squashMode = defaults.squashMode;
        }

        @CustomType.Setter
        public Builder accessMode(String accessMode) {
            if (accessMode == null) {
              throw new MissingRequiredPropertyException("GetInstanceFileShareNfsExportOption", "accessMode");
            }
            this.accessMode = accessMode;
            return this;
        }
        @CustomType.Setter
        public Builder anonGid(Integer anonGid) {
            if (anonGid == null) {
              throw new MissingRequiredPropertyException("GetInstanceFileShareNfsExportOption", "anonGid");
            }
            this.anonGid = anonGid;
            return this;
        }
        @CustomType.Setter
        public Builder anonUid(Integer anonUid) {
            if (anonUid == null) {
              throw new MissingRequiredPropertyException("GetInstanceFileShareNfsExportOption", "anonUid");
            }
            this.anonUid = anonUid;
            return this;
        }
        @CustomType.Setter
        public Builder ipRanges(List<String> ipRanges) {
            if (ipRanges == null) {
              throw new MissingRequiredPropertyException("GetInstanceFileShareNfsExportOption", "ipRanges");
            }
            this.ipRanges = ipRanges;
            return this;
        }
        public Builder ipRanges(String... ipRanges) {
            return ipRanges(List.of(ipRanges));
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetInstanceFileShareNfsExportOption", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder squashMode(String squashMode) {
            if (squashMode == null) {
              throw new MissingRequiredPropertyException("GetInstanceFileShareNfsExportOption", "squashMode");
            }
            this.squashMode = squashMode;
            return this;
        }
        public GetInstanceFileShareNfsExportOption build() {
            final var _resultValue = new GetInstanceFileShareNfsExportOption();
            _resultValue.accessMode = accessMode;
            _resultValue.anonGid = anonGid;
            _resultValue.anonUid = anonUid;
            _resultValue.ipRanges = ipRanges;
            _resultValue.network = network;
            _resultValue.squashMode = squashMode;
            return _resultValue;
        }
    }
}
