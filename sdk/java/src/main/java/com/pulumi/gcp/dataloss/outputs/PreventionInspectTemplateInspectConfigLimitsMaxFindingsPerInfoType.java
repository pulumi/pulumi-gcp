// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.dataloss.outputs.PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoType;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType {
    /**
     * @return Type of information the findings limit applies to. Only one limit per infoType should be provided. If InfoTypeLimit does
     * not have an infoType, the DLP API applies the limit against all infoTypes that are found but not
     * specified in another InfoTypeLimit.
     * Structure is documented below.
     * 
     */
    private PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoType infoType;
    /**
     * @return Max findings limit for the given infoType.
     * 
     */
    private Integer maxFindings;

    private PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType() {}
    /**
     * @return Type of information the findings limit applies to. Only one limit per infoType should be provided. If InfoTypeLimit does
     * not have an infoType, the DLP API applies the limit against all infoTypes that are found but not
     * specified in another InfoTypeLimit.
     * Structure is documented below.
     * 
     */
    public PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoType infoType() {
        return this.infoType;
    }
    /**
     * @return Max findings limit for the given infoType.
     * 
     */
    public Integer maxFindings() {
        return this.maxFindings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoType infoType;
        private Integer maxFindings;
        public Builder() {}
        public Builder(PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.infoType = defaults.infoType;
    	      this.maxFindings = defaults.maxFindings;
        }

        @CustomType.Setter
        public Builder infoType(PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoType infoType) {
            if (infoType == null) {
              throw new MissingRequiredPropertyException("PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType", "infoType");
            }
            this.infoType = infoType;
            return this;
        }
        @CustomType.Setter
        public Builder maxFindings(Integer maxFindings) {
            if (maxFindings == null) {
              throw new MissingRequiredPropertyException("PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType", "maxFindings");
            }
            this.maxFindings = maxFindings;
            return this;
        }
        public PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType build() {
            final var _resultValue = new PreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoType();
            _resultValue.infoType = infoType;
            _resultValue.maxFindings = maxFindings;
            return _resultValue;
        }
    }
}
