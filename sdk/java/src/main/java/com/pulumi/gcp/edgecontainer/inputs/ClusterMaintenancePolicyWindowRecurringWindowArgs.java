// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.edgecontainer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.edgecontainer.inputs.ClusterMaintenancePolicyWindowRecurringWindowWindowArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterMaintenancePolicyWindowRecurringWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterMaintenancePolicyWindowRecurringWindowArgs Empty = new ClusterMaintenancePolicyWindowRecurringWindowArgs();

    /**
     * An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how
     * this window recurs. They go on for the span of time between the start and
     * end time.
     * 
     */
    @Import(name="recurrence")
    private @Nullable Output<String> recurrence;

    /**
     * @return An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how
     * this window recurs. They go on for the span of time between the start and
     * end time.
     * 
     */
    public Optional<Output<String>> recurrence() {
        return Optional.ofNullable(this.recurrence);
    }

    /**
     * Represents an arbitrary window of time.
     * Structure is documented below.
     * 
     */
    @Import(name="window")
    private @Nullable Output<ClusterMaintenancePolicyWindowRecurringWindowWindowArgs> window;

    /**
     * @return Represents an arbitrary window of time.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ClusterMaintenancePolicyWindowRecurringWindowWindowArgs>> window() {
        return Optional.ofNullable(this.window);
    }

    private ClusterMaintenancePolicyWindowRecurringWindowArgs() {}

    private ClusterMaintenancePolicyWindowRecurringWindowArgs(ClusterMaintenancePolicyWindowRecurringWindowArgs $) {
        this.recurrence = $.recurrence;
        this.window = $.window;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterMaintenancePolicyWindowRecurringWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterMaintenancePolicyWindowRecurringWindowArgs $;

        public Builder() {
            $ = new ClusterMaintenancePolicyWindowRecurringWindowArgs();
        }

        public Builder(ClusterMaintenancePolicyWindowRecurringWindowArgs defaults) {
            $ = new ClusterMaintenancePolicyWindowRecurringWindowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param recurrence An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how
         * this window recurs. They go on for the span of time between the start and
         * end time.
         * 
         * @return builder
         * 
         */
        public Builder recurrence(@Nullable Output<String> recurrence) {
            $.recurrence = recurrence;
            return this;
        }

        /**
         * @param recurrence An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how
         * this window recurs. They go on for the span of time between the start and
         * end time.
         * 
         * @return builder
         * 
         */
        public Builder recurrence(String recurrence) {
            return recurrence(Output.of(recurrence));
        }

        /**
         * @param window Represents an arbitrary window of time.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder window(@Nullable Output<ClusterMaintenancePolicyWindowRecurringWindowWindowArgs> window) {
            $.window = window;
            return this;
        }

        /**
         * @param window Represents an arbitrary window of time.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder window(ClusterMaintenancePolicyWindowRecurringWindowWindowArgs window) {
            return window(Output.of(window));
        }

        public ClusterMaintenancePolicyWindowRecurringWindowArgs build() {
            return $;
        }
    }

}
