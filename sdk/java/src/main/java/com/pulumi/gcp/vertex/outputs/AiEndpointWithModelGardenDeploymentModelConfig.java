// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.vertex.outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpec;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AiEndpointWithModelGardenDeploymentModelConfig {
    /**
     * @return Whether the user accepts the End User License Agreement (EULA)
     * for the model.
     * 
     */
    private @Nullable Boolean acceptEula;
    /**
     * @return Specification of a container for serving predictions. Some fields in this
     * message correspond to fields in the [Kubernetes Container v1 core
     * specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
     * Structure is documented below.
     * 
     */
    private @Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpec containerSpec;
    /**
     * @return The Hugging Face read access token used to access the model
     * artifacts of gated models.
     * 
     */
    private @Nullable String huggingFaceAccessToken;
    /**
     * @return If true, the model will deploy with a cached version instead of directly
     * downloading the model artifacts from Hugging Face. This is suitable for
     * VPC-SC users with limited internet access.
     * 
     */
    private @Nullable Boolean huggingFaceCacheEnabled;
    /**
     * @return The user-specified display name of the uploaded model. If not
     * set, a default name will be used.
     * 
     */
    private @Nullable String modelDisplayName;

    private AiEndpointWithModelGardenDeploymentModelConfig() {}
    /**
     * @return Whether the user accepts the End User License Agreement (EULA)
     * for the model.
     * 
     */
    public Optional<Boolean> acceptEula() {
        return Optional.ofNullable(this.acceptEula);
    }
    /**
     * @return Specification of a container for serving predictions. Some fields in this
     * message correspond to fields in the [Kubernetes Container v1 core
     * specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
     * Structure is documented below.
     * 
     */
    public Optional<AiEndpointWithModelGardenDeploymentModelConfigContainerSpec> containerSpec() {
        return Optional.ofNullable(this.containerSpec);
    }
    /**
     * @return The Hugging Face read access token used to access the model
     * artifacts of gated models.
     * 
     */
    public Optional<String> huggingFaceAccessToken() {
        return Optional.ofNullable(this.huggingFaceAccessToken);
    }
    /**
     * @return If true, the model will deploy with a cached version instead of directly
     * downloading the model artifacts from Hugging Face. This is suitable for
     * VPC-SC users with limited internet access.
     * 
     */
    public Optional<Boolean> huggingFaceCacheEnabled() {
        return Optional.ofNullable(this.huggingFaceCacheEnabled);
    }
    /**
     * @return The user-specified display name of the uploaded model. If not
     * set, a default name will be used.
     * 
     */
    public Optional<String> modelDisplayName() {
        return Optional.ofNullable(this.modelDisplayName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AiEndpointWithModelGardenDeploymentModelConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean acceptEula;
        private @Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpec containerSpec;
        private @Nullable String huggingFaceAccessToken;
        private @Nullable Boolean huggingFaceCacheEnabled;
        private @Nullable String modelDisplayName;
        public Builder() {}
        public Builder(AiEndpointWithModelGardenDeploymentModelConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptEula = defaults.acceptEula;
    	      this.containerSpec = defaults.containerSpec;
    	      this.huggingFaceAccessToken = defaults.huggingFaceAccessToken;
    	      this.huggingFaceCacheEnabled = defaults.huggingFaceCacheEnabled;
    	      this.modelDisplayName = defaults.modelDisplayName;
        }

        @CustomType.Setter
        public Builder acceptEula(@Nullable Boolean acceptEula) {

            this.acceptEula = acceptEula;
            return this;
        }
        @CustomType.Setter
        public Builder containerSpec(@Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpec containerSpec) {

            this.containerSpec = containerSpec;
            return this;
        }
        @CustomType.Setter
        public Builder huggingFaceAccessToken(@Nullable String huggingFaceAccessToken) {

            this.huggingFaceAccessToken = huggingFaceAccessToken;
            return this;
        }
        @CustomType.Setter
        public Builder huggingFaceCacheEnabled(@Nullable Boolean huggingFaceCacheEnabled) {

            this.huggingFaceCacheEnabled = huggingFaceCacheEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder modelDisplayName(@Nullable String modelDisplayName) {

            this.modelDisplayName = modelDisplayName;
            return this;
        }
        public AiEndpointWithModelGardenDeploymentModelConfig build() {
            final var _resultValue = new AiEndpointWithModelGardenDeploymentModelConfig();
            _resultValue.acceptEula = acceptEula;
            _resultValue.containerSpec = containerSpec;
            _resultValue.huggingFaceAccessToken = huggingFaceAccessToken;
            _resultValue.huggingFaceCacheEnabled = huggingFaceCacheEnabled;
            _resultValue.modelDisplayName = modelDisplayName;
            return _resultValue;
        }
    }
}
