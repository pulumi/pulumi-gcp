// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.datastream.inputs.PrivateConnectionErrorArgs;
import com.pulumi.gcp.datastream.inputs.PrivateConnectionVpcPeeringConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrivateConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final PrivateConnectionState Empty = new PrivateConnectionState();

    /**
     * Display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The PrivateConnection error in case of failure.
     * 
     */
    @Import(name="errors")
    private @Nullable Output<List<PrivateConnectionErrorArgs>> errors;

    /**
     * @return The PrivateConnection error in case of failure.
     * 
     */
    public Optional<Output<List<PrivateConnectionErrorArgs>>> errors() {
        return Optional.ofNullable(this.errors);
    }

    /**
     * Labels.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The name of the location this repository is located in.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The name of the location this repository is located in.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource&#39;s name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource&#39;s name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The private connectivity identifier.
     * 
     */
    @Import(name="privateConnectionId")
    private @Nullable Output<String> privateConnectionId;

    /**
     * @return The private connectivity identifier.
     * 
     */
    public Optional<Output<String>> privateConnectionId() {
        return Optional.ofNullable(this.privateConnectionId);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * State of the PrivateConnection.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the PrivateConnection.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The VPC Peering configuration is used to create VPC peering
     * between Datastream and the consumer&#39;s VPC.
     * Structure is documented below.
     * 
     */
    @Import(name="vpcPeeringConfig")
    private @Nullable Output<PrivateConnectionVpcPeeringConfigArgs> vpcPeeringConfig;

    /**
     * @return The VPC Peering configuration is used to create VPC peering
     * between Datastream and the consumer&#39;s VPC.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PrivateConnectionVpcPeeringConfigArgs>> vpcPeeringConfig() {
        return Optional.ofNullable(this.vpcPeeringConfig);
    }

    private PrivateConnectionState() {}

    private PrivateConnectionState(PrivateConnectionState $) {
        this.displayName = $.displayName;
        this.errors = $.errors;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.privateConnectionId = $.privateConnectionId;
        this.project = $.project;
        this.state = $.state;
        this.vpcPeeringConfig = $.vpcPeeringConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateConnectionState $;

        public Builder() {
            $ = new PrivateConnectionState();
        }

        public Builder(PrivateConnectionState defaults) {
            $ = new PrivateConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName Display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param errors The PrivateConnection error in case of failure.
         * 
         * @return builder
         * 
         */
        public Builder errors(@Nullable Output<List<PrivateConnectionErrorArgs>> errors) {
            $.errors = errors;
            return this;
        }

        /**
         * @param errors The PrivateConnection error in case of failure.
         * 
         * @return builder
         * 
         */
        public Builder errors(List<PrivateConnectionErrorArgs> errors) {
            return errors(Output.of(errors));
        }

        /**
         * @param errors The PrivateConnection error in case of failure.
         * 
         * @return builder
         * 
         */
        public Builder errors(PrivateConnectionErrorArgs... errors) {
            return errors(List.of(errors));
        }

        /**
         * @param labels Labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The name of the location this repository is located in.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of the location this repository is located in.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privateConnectionId The private connectivity identifier.
         * 
         * @return builder
         * 
         */
        public Builder privateConnectionId(@Nullable Output<String> privateConnectionId) {
            $.privateConnectionId = privateConnectionId;
            return this;
        }

        /**
         * @param privateConnectionId The private connectivity identifier.
         * 
         * @return builder
         * 
         */
        public Builder privateConnectionId(String privateConnectionId) {
            return privateConnectionId(Output.of(privateConnectionId));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param state State of the PrivateConnection.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the PrivateConnection.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param vpcPeeringConfig The VPC Peering configuration is used to create VPC peering
         * between Datastream and the consumer&#39;s VPC.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcPeeringConfig(@Nullable Output<PrivateConnectionVpcPeeringConfigArgs> vpcPeeringConfig) {
            $.vpcPeeringConfig = vpcPeeringConfig;
            return this;
        }

        /**
         * @param vpcPeeringConfig The VPC Peering configuration is used to create VPC peering
         * between Datastream and the consumer&#39;s VPC.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcPeeringConfig(PrivateConnectionVpcPeeringConfigArgs vpcPeeringConfig) {
            return vpcPeeringConfig(Output.of(vpcPeeringConfig));
        }

        public PrivateConnectionState build() {
            return $;
        }
    }

}
