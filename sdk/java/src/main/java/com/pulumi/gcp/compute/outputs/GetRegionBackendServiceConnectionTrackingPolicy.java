// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRegionBackendServiceConnectionTrackingPolicy {
    /**
     * @return Specifies connection persistence when backends are unhealthy.
     * 
     * If set to &#39;DEFAULT_FOR_PROTOCOL&#39;, the existing connections persist on
     * unhealthy backends only for connection-oriented protocols (TCP and SCTP)
     * and only if the Tracking Mode is PER_CONNECTION (default tracking mode)
     * or the Session Affinity is configured for 5-tuple. They do not persist
     * for UDP.
     * 
     * If set to &#39;NEVER_PERSIST&#39;, after a backend becomes unhealthy, the existing
     * connections on the unhealthy backend are never persisted on the unhealthy
     * backend. They are always diverted to newly selected healthy backends
     * (unless all backends are unhealthy).
     * 
     * If set to &#39;ALWAYS_PERSIST&#39;, existing connections always persist on
     * unhealthy backends regardless of protocol and session affinity. It is
     * generally not recommended to use this mode overriding the default. Default value: &#34;DEFAULT_FOR_PROTOCOL&#34; Possible values: [&#34;DEFAULT_FOR_PROTOCOL&#34;, &#34;NEVER_PERSIST&#34;, &#34;ALWAYS_PERSIST&#34;]
     * 
     */
    private String connectionPersistenceOnUnhealthyBackends;
    /**
     * @return Enable Strong Session Affinity for Network Load Balancing. This option is not available publicly.
     * 
     */
    private Boolean enableStrongAffinity;
    /**
     * @return Specifies how long to keep a Connection Tracking entry while there is
     * no matching traffic (in seconds).
     * 
     * For L4 ILB the minimum(default) is 10 minutes and maximum is 16 hours.
     * 
     * For NLB the minimum(default) is 60 seconds and the maximum is 16 hours.
     * 
     */
    private Integer idleTimeoutSec;
    /**
     * @return Specifies the key used for connection tracking. There are two options:
     * &#39;PER_CONNECTION&#39;: The Connection Tracking is performed as per the
     * Connection Key (default Hash Method) for the specific protocol.
     * 
     * &#39;PER_SESSION&#39;: The Connection Tracking is performed as per the
     * configured Session Affinity. It matches the configured Session Affinity. Default value: &#34;PER_CONNECTION&#34; Possible values: [&#34;PER_CONNECTION&#34;, &#34;PER_SESSION&#34;]
     * 
     */
    private String trackingMode;

    private GetRegionBackendServiceConnectionTrackingPolicy() {}
    /**
     * @return Specifies connection persistence when backends are unhealthy.
     * 
     * If set to &#39;DEFAULT_FOR_PROTOCOL&#39;, the existing connections persist on
     * unhealthy backends only for connection-oriented protocols (TCP and SCTP)
     * and only if the Tracking Mode is PER_CONNECTION (default tracking mode)
     * or the Session Affinity is configured for 5-tuple. They do not persist
     * for UDP.
     * 
     * If set to &#39;NEVER_PERSIST&#39;, after a backend becomes unhealthy, the existing
     * connections on the unhealthy backend are never persisted on the unhealthy
     * backend. They are always diverted to newly selected healthy backends
     * (unless all backends are unhealthy).
     * 
     * If set to &#39;ALWAYS_PERSIST&#39;, existing connections always persist on
     * unhealthy backends regardless of protocol and session affinity. It is
     * generally not recommended to use this mode overriding the default. Default value: &#34;DEFAULT_FOR_PROTOCOL&#34; Possible values: [&#34;DEFAULT_FOR_PROTOCOL&#34;, &#34;NEVER_PERSIST&#34;, &#34;ALWAYS_PERSIST&#34;]
     * 
     */
    public String connectionPersistenceOnUnhealthyBackends() {
        return this.connectionPersistenceOnUnhealthyBackends;
    }
    /**
     * @return Enable Strong Session Affinity for Network Load Balancing. This option is not available publicly.
     * 
     */
    public Boolean enableStrongAffinity() {
        return this.enableStrongAffinity;
    }
    /**
     * @return Specifies how long to keep a Connection Tracking entry while there is
     * no matching traffic (in seconds).
     * 
     * For L4 ILB the minimum(default) is 10 minutes and maximum is 16 hours.
     * 
     * For NLB the minimum(default) is 60 seconds and the maximum is 16 hours.
     * 
     */
    public Integer idleTimeoutSec() {
        return this.idleTimeoutSec;
    }
    /**
     * @return Specifies the key used for connection tracking. There are two options:
     * &#39;PER_CONNECTION&#39;: The Connection Tracking is performed as per the
     * Connection Key (default Hash Method) for the specific protocol.
     * 
     * &#39;PER_SESSION&#39;: The Connection Tracking is performed as per the
     * configured Session Affinity. It matches the configured Session Affinity. Default value: &#34;PER_CONNECTION&#34; Possible values: [&#34;PER_CONNECTION&#34;, &#34;PER_SESSION&#34;]
     * 
     */
    public String trackingMode() {
        return this.trackingMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionBackendServiceConnectionTrackingPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectionPersistenceOnUnhealthyBackends;
        private Boolean enableStrongAffinity;
        private Integer idleTimeoutSec;
        private String trackingMode;
        public Builder() {}
        public Builder(GetRegionBackendServiceConnectionTrackingPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionPersistenceOnUnhealthyBackends = defaults.connectionPersistenceOnUnhealthyBackends;
    	      this.enableStrongAffinity = defaults.enableStrongAffinity;
    	      this.idleTimeoutSec = defaults.idleTimeoutSec;
    	      this.trackingMode = defaults.trackingMode;
        }

        @CustomType.Setter
        public Builder connectionPersistenceOnUnhealthyBackends(String connectionPersistenceOnUnhealthyBackends) {
            if (connectionPersistenceOnUnhealthyBackends == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceConnectionTrackingPolicy", "connectionPersistenceOnUnhealthyBackends");
            }
            this.connectionPersistenceOnUnhealthyBackends = connectionPersistenceOnUnhealthyBackends;
            return this;
        }
        @CustomType.Setter
        public Builder enableStrongAffinity(Boolean enableStrongAffinity) {
            if (enableStrongAffinity == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceConnectionTrackingPolicy", "enableStrongAffinity");
            }
            this.enableStrongAffinity = enableStrongAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder idleTimeoutSec(Integer idleTimeoutSec) {
            if (idleTimeoutSec == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceConnectionTrackingPolicy", "idleTimeoutSec");
            }
            this.idleTimeoutSec = idleTimeoutSec;
            return this;
        }
        @CustomType.Setter
        public Builder trackingMode(String trackingMode) {
            if (trackingMode == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceConnectionTrackingPolicy", "trackingMode");
            }
            this.trackingMode = trackingMode;
            return this;
        }
        public GetRegionBackendServiceConnectionTrackingPolicy build() {
            final var _resultValue = new GetRegionBackendServiceConnectionTrackingPolicy();
            _resultValue.connectionPersistenceOnUnhealthyBackends = connectionPersistenceOnUnhealthyBackends;
            _resultValue.enableStrongAffinity = enableStrongAffinity;
            _resultValue.idleTimeoutSec = idleTimeoutSec;
            _resultValue.trackingMode = trackingMode;
            return _resultValue;
        }
    }
}
