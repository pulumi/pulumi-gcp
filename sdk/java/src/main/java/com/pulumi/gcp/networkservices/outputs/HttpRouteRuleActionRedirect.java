// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HttpRouteRuleActionRedirect {
    /**
     * @return The host that will be used in the redirect response instead of the one that was supplied in the request.
     * 
     */
    private @Nullable String hostRedirect;
    /**
     * @return If set to true, the URL scheme in the redirected request is set to https.
     * 
     */
    private @Nullable Boolean httpsRedirect;
    /**
     * @return The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect can not be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
     * 
     */
    private @Nullable String pathRedirect;
    /**
     * @return The port that will be used in the redirected request instead of the one that was supplied in the request.
     * 
     */
    private @Nullable Integer portRedirect;
    /**
     * @return Indicates that during redirection, the matched prefix (or path) should be swapped with this value.
     * 
     */
    private @Nullable String prefixRewrite;
    /**
     * @return The HTTP Status code to use for the redirect.
     * 
     */
    private @Nullable String responseCode;
    /**
     * @return If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request.
     * 
     */
    private @Nullable Boolean stripQuery;

    private HttpRouteRuleActionRedirect() {}
    /**
     * @return The host that will be used in the redirect response instead of the one that was supplied in the request.
     * 
     */
    public Optional<String> hostRedirect() {
        return Optional.ofNullable(this.hostRedirect);
    }
    /**
     * @return If set to true, the URL scheme in the redirected request is set to https.
     * 
     */
    public Optional<Boolean> httpsRedirect() {
        return Optional.ofNullable(this.httpsRedirect);
    }
    /**
     * @return The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect can not be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
     * 
     */
    public Optional<String> pathRedirect() {
        return Optional.ofNullable(this.pathRedirect);
    }
    /**
     * @return The port that will be used in the redirected request instead of the one that was supplied in the request.
     * 
     */
    public Optional<Integer> portRedirect() {
        return Optional.ofNullable(this.portRedirect);
    }
    /**
     * @return Indicates that during redirection, the matched prefix (or path) should be swapped with this value.
     * 
     */
    public Optional<String> prefixRewrite() {
        return Optional.ofNullable(this.prefixRewrite);
    }
    /**
     * @return The HTTP Status code to use for the redirect.
     * 
     */
    public Optional<String> responseCode() {
        return Optional.ofNullable(this.responseCode);
    }
    /**
     * @return If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request.
     * 
     */
    public Optional<Boolean> stripQuery() {
        return Optional.ofNullable(this.stripQuery);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRouteRuleActionRedirect defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String hostRedirect;
        private @Nullable Boolean httpsRedirect;
        private @Nullable String pathRedirect;
        private @Nullable Integer portRedirect;
        private @Nullable String prefixRewrite;
        private @Nullable String responseCode;
        private @Nullable Boolean stripQuery;
        public Builder() {}
        public Builder(HttpRouteRuleActionRedirect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostRedirect = defaults.hostRedirect;
    	      this.httpsRedirect = defaults.httpsRedirect;
    	      this.pathRedirect = defaults.pathRedirect;
    	      this.portRedirect = defaults.portRedirect;
    	      this.prefixRewrite = defaults.prefixRewrite;
    	      this.responseCode = defaults.responseCode;
    	      this.stripQuery = defaults.stripQuery;
        }

        @CustomType.Setter
        public Builder hostRedirect(@Nullable String hostRedirect) {
            this.hostRedirect = hostRedirect;
            return this;
        }
        @CustomType.Setter
        public Builder httpsRedirect(@Nullable Boolean httpsRedirect) {
            this.httpsRedirect = httpsRedirect;
            return this;
        }
        @CustomType.Setter
        public Builder pathRedirect(@Nullable String pathRedirect) {
            this.pathRedirect = pathRedirect;
            return this;
        }
        @CustomType.Setter
        public Builder portRedirect(@Nullable Integer portRedirect) {
            this.portRedirect = portRedirect;
            return this;
        }
        @CustomType.Setter
        public Builder prefixRewrite(@Nullable String prefixRewrite) {
            this.prefixRewrite = prefixRewrite;
            return this;
        }
        @CustomType.Setter
        public Builder responseCode(@Nullable String responseCode) {
            this.responseCode = responseCode;
            return this;
        }
        @CustomType.Setter
        public Builder stripQuery(@Nullable Boolean stripQuery) {
            this.stripQuery = stripQuery;
            return this;
        }
        public HttpRouteRuleActionRedirect build() {
            final var o = new HttpRouteRuleActionRedirect();
            o.hostRedirect = hostRedirect;
            o.httpsRedirect = httpsRedirect;
            o.pathRedirect = pathRedirect;
            o.portRedirect = portRedirect;
            o.prefixRewrite = prefixRewrite;
            o.responseCode = responseCode;
            o.stripQuery = stripQuery;
            return o;
        }
    }
}
