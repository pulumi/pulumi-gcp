// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowhookArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowhookArgs Empty = new FlowhookArgs();

    /**
     * Flag that specifies whether execution should continue if the flow hook throws an exception. Set to true to continue execution. Set to false to stop execution if the flow hook throws an exception. Defaults to true.
     * 
     */
    @Import(name="continueOnError")
    private @Nullable Output<Boolean> continueOnError;

    /**
     * @return Flag that specifies whether execution should continue if the flow hook throws an exception. Set to true to continue execution. Set to false to stop execution if the flow hook throws an exception. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> continueOnError() {
        return Optional.ofNullable(this.continueOnError);
    }

    /**
     * Description of the flow hook.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the flow hook.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The resource ID of the environment.
     * 
     */
    @Import(name="environment", required=true)
    private Output<String> environment;

    /**
     * @return The resource ID of the environment.
     * 
     */
    public Output<String> environment() {
        return this.environment;
    }

    /**
     * Where in the API call flow the flow hook is invoked. Must be one of PreProxyFlowHook, PostProxyFlowHook, PreTargetFlowHook, or PostTargetFlowHook.
     * 
     */
    @Import(name="flowHookPoint", required=true)
    private Output<String> flowHookPoint;

    /**
     * @return Where in the API call flow the flow hook is invoked. Must be one of PreProxyFlowHook, PostProxyFlowHook, PreTargetFlowHook, or PostTargetFlowHook.
     * 
     */
    public Output<String> flowHookPoint() {
        return this.flowHookPoint;
    }

    /**
     * The Apigee Organization associated with the environment
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return The Apigee Organization associated with the environment
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Id of the Sharedflow attaching to a flowhook point.
     * 
     */
    @Import(name="sharedflow", required=true)
    private Output<String> sharedflow;

    /**
     * @return Id of the Sharedflow attaching to a flowhook point.
     * 
     */
    public Output<String> sharedflow() {
        return this.sharedflow;
    }

    private FlowhookArgs() {}

    private FlowhookArgs(FlowhookArgs $) {
        this.continueOnError = $.continueOnError;
        this.description = $.description;
        this.environment = $.environment;
        this.flowHookPoint = $.flowHookPoint;
        this.orgId = $.orgId;
        this.sharedflow = $.sharedflow;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowhookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowhookArgs $;

        public Builder() {
            $ = new FlowhookArgs();
        }

        public Builder(FlowhookArgs defaults) {
            $ = new FlowhookArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param continueOnError Flag that specifies whether execution should continue if the flow hook throws an exception. Set to true to continue execution. Set to false to stop execution if the flow hook throws an exception. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder continueOnError(@Nullable Output<Boolean> continueOnError) {
            $.continueOnError = continueOnError;
            return this;
        }

        /**
         * @param continueOnError Flag that specifies whether execution should continue if the flow hook throws an exception. Set to true to continue execution. Set to false to stop execution if the flow hook throws an exception. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder continueOnError(Boolean continueOnError) {
            return continueOnError(Output.of(continueOnError));
        }

        /**
         * @param description Description of the flow hook.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the flow hook.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environment The resource ID of the environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The resource ID of the environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param flowHookPoint Where in the API call flow the flow hook is invoked. Must be one of PreProxyFlowHook, PostProxyFlowHook, PreTargetFlowHook, or PostTargetFlowHook.
         * 
         * @return builder
         * 
         */
        public Builder flowHookPoint(Output<String> flowHookPoint) {
            $.flowHookPoint = flowHookPoint;
            return this;
        }

        /**
         * @param flowHookPoint Where in the API call flow the flow hook is invoked. Must be one of PreProxyFlowHook, PostProxyFlowHook, PreTargetFlowHook, or PostTargetFlowHook.
         * 
         * @return builder
         * 
         */
        public Builder flowHookPoint(String flowHookPoint) {
            return flowHookPoint(Output.of(flowHookPoint));
        }

        /**
         * @param orgId The Apigee Organization associated with the environment
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The Apigee Organization associated with the environment
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param sharedflow Id of the Sharedflow attaching to a flowhook point.
         * 
         * @return builder
         * 
         */
        public Builder sharedflow(Output<String> sharedflow) {
            $.sharedflow = sharedflow;
            return this;
        }

        /**
         * @param sharedflow Id of the Sharedflow attaching to a flowhook point.
         * 
         * @return builder
         * 
         */
        public Builder sharedflow(String sharedflow) {
            return sharedflow(Output.of(sharedflow));
        }

        public FlowhookArgs build() {
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            $.flowHookPoint = Objects.requireNonNull($.flowHookPoint, "expected parameter 'flowHookPoint' to be non-null");
            $.orgId = Objects.requireNonNull($.orgId, "expected parameter 'orgId' to be non-null");
            $.sharedflow = Objects.requireNonNull($.sharedflow, "expected parameter 'sharedflow' to be non-null");
            return $;
        }
    }

}
