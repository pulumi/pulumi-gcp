// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.identityplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigBlockingFunctionsTriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigBlockingFunctionsTriggerArgs Empty = new ConfigBlockingFunctionsTriggerArgs();

    /**
     * The identifier for this object. Format specified above.
     * 
     */
    @Import(name="eventType", required=true)
    private Output<String> eventType;

    /**
     * @return The identifier for this object. Format specified above.
     * 
     */
    public Output<String> eventType() {
        return this.eventType;
    }

    /**
     * HTTP URI trigger for the Cloud Function.
     * 
     */
    @Import(name="functionUri", required=true)
    private Output<String> functionUri;

    /**
     * @return HTTP URI trigger for the Cloud Function.
     * 
     */
    public Output<String> functionUri() {
        return this.functionUri;
    }

    /**
     * (Output)
     * When the trigger was changed.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return (Output)
     * When the trigger was changed.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private ConfigBlockingFunctionsTriggerArgs() {}

    private ConfigBlockingFunctionsTriggerArgs(ConfigBlockingFunctionsTriggerArgs $) {
        this.eventType = $.eventType;
        this.functionUri = $.functionUri;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigBlockingFunctionsTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigBlockingFunctionsTriggerArgs $;

        public Builder() {
            $ = new ConfigBlockingFunctionsTriggerArgs();
        }

        public Builder(ConfigBlockingFunctionsTriggerArgs defaults) {
            $ = new ConfigBlockingFunctionsTriggerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eventType The identifier for this object. Format specified above.
         * 
         * @return builder
         * 
         */
        public Builder eventType(Output<String> eventType) {
            $.eventType = eventType;
            return this;
        }

        /**
         * @param eventType The identifier for this object. Format specified above.
         * 
         * @return builder
         * 
         */
        public Builder eventType(String eventType) {
            return eventType(Output.of(eventType));
        }

        /**
         * @param functionUri HTTP URI trigger for the Cloud Function.
         * 
         * @return builder
         * 
         */
        public Builder functionUri(Output<String> functionUri) {
            $.functionUri = functionUri;
            return this;
        }

        /**
         * @param functionUri HTTP URI trigger for the Cloud Function.
         * 
         * @return builder
         * 
         */
        public Builder functionUri(String functionUri) {
            return functionUri(Output.of(functionUri));
        }

        /**
         * @param updateTime (Output)
         * When the trigger was changed.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime (Output)
         * When the trigger was changed.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public ConfigBlockingFunctionsTriggerArgs build() {
            $.eventType = Objects.requireNonNull($.eventType, "expected parameter 'eventType' to be non-null");
            $.functionUri = Objects.requireNonNull($.functionUri, "expected parameter 'functionUri' to be non-null");
            return $;
        }
    }

}
