// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkebackup;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.gkebackup.RestorePlanIamMemberArgs;
import com.pulumi.gcp.gkebackup.inputs.RestorePlanIamMemberState;
import com.pulumi.gcp.gkebackup.outputs.RestorePlanIamMemberCondition;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Represents a Restore Plan instance.
 * 
 * To get more information about RestorePlan, see:
 * 
 * * [API documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/projects.locations.restorePlans)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke)
 * 
 * ## Example Usage
 * 
 * ### Gkebackup Restoreplan All Namespaces
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.container.inputs.ClusterWorkloadIdentityConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigGkeBackupAgentConfigArgs;
 * import com.pulumi.gcp.gkebackup.BackupPlan;
 * import com.pulumi.gcp.gkebackup.BackupPlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.BackupPlanBackupConfigArgs;
 * import com.pulumi.gcp.gkebackup.RestorePlan;
 * import com.pulumi.gcp.gkebackup.RestorePlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new Cluster("primary", ClusterArgs.builder()
 *             .name("restore-all-ns-cluster")
 *             .location("us-central1")
 *             .initialNodeCount(1)
 *             .workloadIdentityConfig(ClusterWorkloadIdentityConfigArgs.builder()
 *                 .workloadPool("my-project-name.svc.id.goog")
 *                 .build())
 *             .addonsConfig(ClusterAddonsConfigArgs.builder()
 *                 .gkeBackupAgentConfig(ClusterAddonsConfigGkeBackupAgentConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .deletionProtection("")
 *             .network("default")
 *             .subnetwork("default")
 *             .build());
 * 
 *         var basic = new BackupPlan("basic", BackupPlanArgs.builder()
 *             .name("restore-all-ns")
 *             .cluster(primary.id())
 *             .location("us-central1")
 *             .backupConfig(BackupPlanBackupConfigArgs.builder()
 *                 .includeVolumeData(true)
 *                 .includeSecrets(true)
 *                 .allNamespaces(true)
 *                 .build())
 *             .build());
 * 
 *         var allNs = new RestorePlan("allNs", RestorePlanArgs.builder()
 *             .name("restore-all-ns")
 *             .location("us-central1")
 *             .backupPlan(basic.id())
 *             .cluster(primary.id())
 *             .restoreConfig(RestorePlanRestoreConfigArgs.builder()
 *                 .allNamespaces(true)
 *                 .namespacedResourceRestoreMode("FAIL_ON_CONFLICT")
 *                 .volumeDataRestorePolicy("RESTORE_VOLUME_DATA_FROM_BACKUP")
 *                 .clusterResourceRestoreScope(RestorePlanRestoreConfigClusterResourceRestoreScopeArgs.builder()
 *                     .allGroupKinds(true)
 *                     .build())
 *                 .clusterResourceConflictPolicy("USE_EXISTING_VERSION")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Gkebackup Restoreplan Rollback Namespace
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.container.inputs.ClusterWorkloadIdentityConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigGkeBackupAgentConfigArgs;
 * import com.pulumi.gcp.gkebackup.BackupPlan;
 * import com.pulumi.gcp.gkebackup.BackupPlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.BackupPlanBackupConfigArgs;
 * import com.pulumi.gcp.gkebackup.RestorePlan;
 * import com.pulumi.gcp.gkebackup.RestorePlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigSelectedNamespacesArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new Cluster("primary", ClusterArgs.builder()
 *             .name("rollback-ns-cluster")
 *             .location("us-central1")
 *             .initialNodeCount(1)
 *             .workloadIdentityConfig(ClusterWorkloadIdentityConfigArgs.builder()
 *                 .workloadPool("my-project-name.svc.id.goog")
 *                 .build())
 *             .addonsConfig(ClusterAddonsConfigArgs.builder()
 *                 .gkeBackupAgentConfig(ClusterAddonsConfigGkeBackupAgentConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .deletionProtection("")
 *             .network("default")
 *             .subnetwork("default")
 *             .build());
 * 
 *         var basic = new BackupPlan("basic", BackupPlanArgs.builder()
 *             .name("rollback-ns")
 *             .cluster(primary.id())
 *             .location("us-central1")
 *             .backupConfig(BackupPlanBackupConfigArgs.builder()
 *                 .includeVolumeData(true)
 *                 .includeSecrets(true)
 *                 .allNamespaces(true)
 *                 .build())
 *             .build());
 * 
 *         var rollbackNs = new RestorePlan("rollbackNs", RestorePlanArgs.builder()
 *             .name("rollback-ns-rp")
 *             .location("us-central1")
 *             .backupPlan(basic.id())
 *             .cluster(primary.id())
 *             .restoreConfig(RestorePlanRestoreConfigArgs.builder()
 *                 .selectedNamespaces(RestorePlanRestoreConfigSelectedNamespacesArgs.builder()
 *                     .namespaces("my-ns")
 *                     .build())
 *                 .namespacedResourceRestoreMode("DELETE_AND_RESTORE")
 *                 .volumeDataRestorePolicy("RESTORE_VOLUME_DATA_FROM_BACKUP")
 *                 .clusterResourceRestoreScope(RestorePlanRestoreConfigClusterResourceRestoreScopeArgs.builder()
 *                     .selectedGroupKinds(                    
 *                         RestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindArgs.builder()
 *                             .resourceGroup("apiextension.k8s.io")
 *                             .resourceKind("CustomResourceDefinition")
 *                             .build(),
 *                         RestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindArgs.builder()
 *                             .resourceGroup("storage.k8s.io")
 *                             .resourceKind("StorageClass")
 *                             .build())
 *                     .build())
 *                 .clusterResourceConflictPolicy("USE_EXISTING_VERSION")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Gkebackup Restoreplan Protected Application
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.container.inputs.ClusterWorkloadIdentityConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigGkeBackupAgentConfigArgs;
 * import com.pulumi.gcp.gkebackup.BackupPlan;
 * import com.pulumi.gcp.gkebackup.BackupPlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.BackupPlanBackupConfigArgs;
 * import com.pulumi.gcp.gkebackup.RestorePlan;
 * import com.pulumi.gcp.gkebackup.RestorePlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigSelectedApplicationsArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new Cluster("primary", ClusterArgs.builder()
 *             .name("rollback-app-cluster")
 *             .location("us-central1")
 *             .initialNodeCount(1)
 *             .workloadIdentityConfig(ClusterWorkloadIdentityConfigArgs.builder()
 *                 .workloadPool("my-project-name.svc.id.goog")
 *                 .build())
 *             .addonsConfig(ClusterAddonsConfigArgs.builder()
 *                 .gkeBackupAgentConfig(ClusterAddonsConfigGkeBackupAgentConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .deletionProtection("")
 *             .network("default")
 *             .subnetwork("default")
 *             .build());
 * 
 *         var basic = new BackupPlan("basic", BackupPlanArgs.builder()
 *             .name("rollback-app")
 *             .cluster(primary.id())
 *             .location("us-central1")
 *             .backupConfig(BackupPlanBackupConfigArgs.builder()
 *                 .includeVolumeData(true)
 *                 .includeSecrets(true)
 *                 .allNamespaces(true)
 *                 .build())
 *             .build());
 * 
 *         var rollbackApp = new RestorePlan("rollbackApp", RestorePlanArgs.builder()
 *             .name("rollback-app-rp")
 *             .location("us-central1")
 *             .backupPlan(basic.id())
 *             .cluster(primary.id())
 *             .restoreConfig(RestorePlanRestoreConfigArgs.builder()
 *                 .selectedApplications(RestorePlanRestoreConfigSelectedApplicationsArgs.builder()
 *                     .namespacedNames(RestorePlanRestoreConfigSelectedApplicationsNamespacedNameArgs.builder()
 *                         .name("my-app")
 *                         .namespace("my-ns")
 *                         .build())
 *                     .build())
 *                 .namespacedResourceRestoreMode("DELETE_AND_RESTORE")
 *                 .volumeDataRestorePolicy("REUSE_VOLUME_HANDLE_FROM_BACKUP")
 *                 .clusterResourceRestoreScope(RestorePlanRestoreConfigClusterResourceRestoreScopeArgs.builder()
 *                     .noGroupKinds(true)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Gkebackup Restoreplan All Cluster Resources
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.container.inputs.ClusterWorkloadIdentityConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigGkeBackupAgentConfigArgs;
 * import com.pulumi.gcp.gkebackup.BackupPlan;
 * import com.pulumi.gcp.gkebackup.BackupPlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.BackupPlanBackupConfigArgs;
 * import com.pulumi.gcp.gkebackup.RestorePlan;
 * import com.pulumi.gcp.gkebackup.RestorePlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new Cluster("primary", ClusterArgs.builder()
 *             .name("all-groupkinds-cluster")
 *             .location("us-central1")
 *             .initialNodeCount(1)
 *             .workloadIdentityConfig(ClusterWorkloadIdentityConfigArgs.builder()
 *                 .workloadPool("my-project-name.svc.id.goog")
 *                 .build())
 *             .addonsConfig(ClusterAddonsConfigArgs.builder()
 *                 .gkeBackupAgentConfig(ClusterAddonsConfigGkeBackupAgentConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .deletionProtection("")
 *             .network("default")
 *             .subnetwork("default")
 *             .build());
 * 
 *         var basic = new BackupPlan("basic", BackupPlanArgs.builder()
 *             .name("all-groupkinds")
 *             .cluster(primary.id())
 *             .location("us-central1")
 *             .backupConfig(BackupPlanBackupConfigArgs.builder()
 *                 .includeVolumeData(true)
 *                 .includeSecrets(true)
 *                 .allNamespaces(true)
 *                 .build())
 *             .build());
 * 
 *         var allClusterResources = new RestorePlan("allClusterResources", RestorePlanArgs.builder()
 *             .name("all-groupkinds-rp")
 *             .location("us-central1")
 *             .backupPlan(basic.id())
 *             .cluster(primary.id())
 *             .restoreConfig(RestorePlanRestoreConfigArgs.builder()
 *                 .noNamespaces(true)
 *                 .namespacedResourceRestoreMode("FAIL_ON_CONFLICT")
 *                 .clusterResourceRestoreScope(RestorePlanRestoreConfigClusterResourceRestoreScopeArgs.builder()
 *                     .allGroupKinds(true)
 *                     .build())
 *                 .clusterResourceConflictPolicy("USE_EXISTING_VERSION")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Gkebackup Restoreplan Rename Namespace
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.container.inputs.ClusterWorkloadIdentityConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigGkeBackupAgentConfigArgs;
 * import com.pulumi.gcp.gkebackup.BackupPlan;
 * import com.pulumi.gcp.gkebackup.BackupPlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.BackupPlanBackupConfigArgs;
 * import com.pulumi.gcp.gkebackup.RestorePlan;
 * import com.pulumi.gcp.gkebackup.RestorePlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigSelectedNamespacesArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new Cluster("primary", ClusterArgs.builder()
 *             .name("rename-ns-cluster")
 *             .location("us-central1")
 *             .initialNodeCount(1)
 *             .workloadIdentityConfig(ClusterWorkloadIdentityConfigArgs.builder()
 *                 .workloadPool("my-project-name.svc.id.goog")
 *                 .build())
 *             .addonsConfig(ClusterAddonsConfigArgs.builder()
 *                 .gkeBackupAgentConfig(ClusterAddonsConfigGkeBackupAgentConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .deletionProtection("")
 *             .network("default")
 *             .subnetwork("default")
 *             .build());
 * 
 *         var basic = new BackupPlan("basic", BackupPlanArgs.builder()
 *             .name("rename-ns")
 *             .cluster(primary.id())
 *             .location("us-central1")
 *             .backupConfig(BackupPlanBackupConfigArgs.builder()
 *                 .includeVolumeData(true)
 *                 .includeSecrets(true)
 *                 .allNamespaces(true)
 *                 .build())
 *             .build());
 * 
 *         var renameNs = new RestorePlan("renameNs", RestorePlanArgs.builder()
 *             .name("rename-ns-rp")
 *             .location("us-central1")
 *             .backupPlan(basic.id())
 *             .cluster(primary.id())
 *             .restoreConfig(RestorePlanRestoreConfigArgs.builder()
 *                 .selectedNamespaces(RestorePlanRestoreConfigSelectedNamespacesArgs.builder()
 *                     .namespaces("ns1")
 *                     .build())
 *                 .namespacedResourceRestoreMode("FAIL_ON_CONFLICT")
 *                 .volumeDataRestorePolicy("REUSE_VOLUME_HANDLE_FROM_BACKUP")
 *                 .clusterResourceRestoreScope(RestorePlanRestoreConfigClusterResourceRestoreScopeArgs.builder()
 *                     .noGroupKinds(true)
 *                     .build())
 *                 .transformationRules(                
 *                     RestorePlanRestoreConfigTransformationRuleArgs.builder()
 *                         .description("rename namespace from ns1 to ns2")
 *                         .resourceFilter(RestorePlanRestoreConfigTransformationRuleResourceFilterArgs.builder()
 *                             .groupKinds(RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs.builder()
 *                                 .resourceKind("Namespace")
 *                                 .build())
 *                             .jsonPath(".metadata[?({@literal @}.name == 'ns1')]")
 *                             .build())
 *                         .fieldActions(RestorePlanRestoreConfigTransformationRuleFieldActionArgs.builder()
 *                             .op("REPLACE")
 *                             .path("/metadata/name")
 *                             .value("ns2")
 *                             .build())
 *                         .build(),
 *                     RestorePlanRestoreConfigTransformationRuleArgs.builder()
 *                         .description("move all resources from ns1 to ns2")
 *                         .resourceFilter(RestorePlanRestoreConfigTransformationRuleResourceFilterArgs.builder()
 *                             .namespaces("ns1")
 *                             .build())
 *                         .fieldActions(RestorePlanRestoreConfigTransformationRuleFieldActionArgs.builder()
 *                             .op("REPLACE")
 *                             .path("/metadata/namespace")
 *                             .value("ns2")
 *                             .build())
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Gkebackup Restoreplan Second Transformation
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.container.inputs.ClusterWorkloadIdentityConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigGkeBackupAgentConfigArgs;
 * import com.pulumi.gcp.gkebackup.BackupPlan;
 * import com.pulumi.gcp.gkebackup.BackupPlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.BackupPlanBackupConfigArgs;
 * import com.pulumi.gcp.gkebackup.RestorePlan;
 * import com.pulumi.gcp.gkebackup.RestorePlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigExcludedNamespacesArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new Cluster("primary", ClusterArgs.builder()
 *             .name("transform-rule-cluster")
 *             .location("us-central1")
 *             .initialNodeCount(1)
 *             .workloadIdentityConfig(ClusterWorkloadIdentityConfigArgs.builder()
 *                 .workloadPool("my-project-name.svc.id.goog")
 *                 .build())
 *             .addonsConfig(ClusterAddonsConfigArgs.builder()
 *                 .gkeBackupAgentConfig(ClusterAddonsConfigGkeBackupAgentConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .deletionProtection("")
 *             .network("default")
 *             .subnetwork("default")
 *             .build());
 * 
 *         var basic = new BackupPlan("basic", BackupPlanArgs.builder()
 *             .name("transform-rule")
 *             .cluster(primary.id())
 *             .location("us-central1")
 *             .backupConfig(BackupPlanBackupConfigArgs.builder()
 *                 .includeVolumeData(true)
 *                 .includeSecrets(true)
 *                 .allNamespaces(true)
 *                 .build())
 *             .build());
 * 
 *         var transformRule = new RestorePlan("transformRule", RestorePlanArgs.builder()
 *             .name("transform-rule-rp")
 *             .description("copy nginx env variables")
 *             .labels(Map.of("app", "nginx"))
 *             .location("us-central1")
 *             .backupPlan(basic.id())
 *             .cluster(primary.id())
 *             .restoreConfig(RestorePlanRestoreConfigArgs.builder()
 *                 .excludedNamespaces(RestorePlanRestoreConfigExcludedNamespacesArgs.builder()
 *                     .namespaces("my-ns")
 *                     .build())
 *                 .namespacedResourceRestoreMode("DELETE_AND_RESTORE")
 *                 .volumeDataRestorePolicy("RESTORE_VOLUME_DATA_FROM_BACKUP")
 *                 .clusterResourceRestoreScope(RestorePlanRestoreConfigClusterResourceRestoreScopeArgs.builder()
 *                     .excludedGroupKinds(RestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindArgs.builder()
 *                         .resourceGroup("apiextension.k8s.io")
 *                         .resourceKind("CustomResourceDefinition")
 *                         .build())
 *                     .build())
 *                 .clusterResourceConflictPolicy("USE_EXISTING_VERSION")
 *                 .transformationRules(RestorePlanRestoreConfigTransformationRuleArgs.builder()
 *                     .description("Copy environment variables from the nginx container to the install init container.")
 *                     .resourceFilter(RestorePlanRestoreConfigTransformationRuleResourceFilterArgs.builder()
 *                         .groupKinds(RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs.builder()
 *                             .resourceKind("Pod")
 *                             .resourceGroup("")
 *                             .build())
 *                         .jsonPath(".metadata[?({@literal @}.name == 'nginx')]")
 *                         .build())
 *                     .fieldActions(RestorePlanRestoreConfigTransformationRuleFieldActionArgs.builder()
 *                         .op("COPY")
 *                         .path("/spec/initContainers/0/env")
 *                         .fromPath("/spec/containers/0/env")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Gkebackup Restoreplan Gitops Mode
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.container.inputs.ClusterWorkloadIdentityConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigGkeBackupAgentConfigArgs;
 * import com.pulumi.gcp.gkebackup.BackupPlan;
 * import com.pulumi.gcp.gkebackup.BackupPlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.BackupPlanBackupConfigArgs;
 * import com.pulumi.gcp.gkebackup.RestorePlan;
 * import com.pulumi.gcp.gkebackup.RestorePlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new Cluster("primary", ClusterArgs.builder()
 *             .name("gitops-mode-cluster")
 *             .location("us-central1")
 *             .initialNodeCount(1)
 *             .workloadIdentityConfig(ClusterWorkloadIdentityConfigArgs.builder()
 *                 .workloadPool("my-project-name.svc.id.goog")
 *                 .build())
 *             .addonsConfig(ClusterAddonsConfigArgs.builder()
 *                 .gkeBackupAgentConfig(ClusterAddonsConfigGkeBackupAgentConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .deletionProtection("")
 *             .network("default")
 *             .subnetwork("default")
 *             .build());
 * 
 *         var basic = new BackupPlan("basic", BackupPlanArgs.builder()
 *             .name("gitops-mode")
 *             .cluster(primary.id())
 *             .location("us-central1")
 *             .backupConfig(BackupPlanBackupConfigArgs.builder()
 *                 .includeVolumeData(true)
 *                 .includeSecrets(true)
 *                 .allNamespaces(true)
 *                 .build())
 *             .build());
 * 
 *         var gitopsMode = new RestorePlan("gitopsMode", RestorePlanArgs.builder()
 *             .name("gitops-mode")
 *             .location("us-central1")
 *             .backupPlan(basic.id())
 *             .cluster(primary.id())
 *             .restoreConfig(RestorePlanRestoreConfigArgs.builder()
 *                 .allNamespaces(true)
 *                 .namespacedResourceRestoreMode("MERGE_SKIP_ON_CONFLICT")
 *                 .volumeDataRestorePolicy("RESTORE_VOLUME_DATA_FROM_BACKUP")
 *                 .clusterResourceRestoreScope(RestorePlanRestoreConfigClusterResourceRestoreScopeArgs.builder()
 *                     .allGroupKinds(true)
 *                     .build())
 *                 .clusterResourceConflictPolicy("USE_EXISTING_VERSION")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Gkebackup Restoreplan Restore Order
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.container.inputs.ClusterWorkloadIdentityConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigGkeBackupAgentConfigArgs;
 * import com.pulumi.gcp.gkebackup.BackupPlan;
 * import com.pulumi.gcp.gkebackup.BackupPlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.BackupPlanBackupConfigArgs;
 * import com.pulumi.gcp.gkebackup.RestorePlan;
 * import com.pulumi.gcp.gkebackup.RestorePlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigRestoreOrderArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new Cluster("primary", ClusterArgs.builder()
 *             .name("restore-order-cluster")
 *             .location("us-central1")
 *             .initialNodeCount(1)
 *             .workloadIdentityConfig(ClusterWorkloadIdentityConfigArgs.builder()
 *                 .workloadPool("my-project-name.svc.id.goog")
 *                 .build())
 *             .addonsConfig(ClusterAddonsConfigArgs.builder()
 *                 .gkeBackupAgentConfig(ClusterAddonsConfigGkeBackupAgentConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .deletionProtection("")
 *             .network("default")
 *             .subnetwork("default")
 *             .build());
 * 
 *         var basic = new BackupPlan("basic", BackupPlanArgs.builder()
 *             .name("restore-order")
 *             .cluster(primary.id())
 *             .location("us-central1")
 *             .backupConfig(BackupPlanBackupConfigArgs.builder()
 *                 .includeVolumeData(true)
 *                 .includeSecrets(true)
 *                 .allNamespaces(true)
 *                 .build())
 *             .build());
 * 
 *         var restoreOrder = new RestorePlan("restoreOrder", RestorePlanArgs.builder()
 *             .name("restore-order")
 *             .location("us-central1")
 *             .backupPlan(basic.id())
 *             .cluster(primary.id())
 *             .restoreConfig(RestorePlanRestoreConfigArgs.builder()
 *                 .allNamespaces(true)
 *                 .namespacedResourceRestoreMode("FAIL_ON_CONFLICT")
 *                 .volumeDataRestorePolicy("RESTORE_VOLUME_DATA_FROM_BACKUP")
 *                 .clusterResourceRestoreScope(RestorePlanRestoreConfigClusterResourceRestoreScopeArgs.builder()
 *                     .allGroupKinds(true)
 *                     .build())
 *                 .clusterResourceConflictPolicy("USE_EXISTING_VERSION")
 *                 .restoreOrder(RestorePlanRestoreConfigRestoreOrderArgs.builder()
 *                     .groupKindDependencies(                    
 *                         RestorePlanRestoreConfigRestoreOrderGroupKindDependencyArgs.builder()
 *                             .satisfying(RestorePlanRestoreConfigRestoreOrderGroupKindDependencySatisfyingArgs.builder()
 *                                 .resourceGroup("stable.example.com")
 *                                 .resourceKind("kindA")
 *                                 .build())
 *                             .requiring(RestorePlanRestoreConfigRestoreOrderGroupKindDependencyRequiringArgs.builder()
 *                                 .resourceGroup("stable.example.com")
 *                                 .resourceKind("kindB")
 *                                 .build())
 *                             .build(),
 *                         RestorePlanRestoreConfigRestoreOrderGroupKindDependencyArgs.builder()
 *                             .satisfying(RestorePlanRestoreConfigRestoreOrderGroupKindDependencySatisfyingArgs.builder()
 *                                 .resourceGroup("stable.example.com")
 *                                 .resourceKind("kindB")
 *                                 .build())
 *                             .requiring(RestorePlanRestoreConfigRestoreOrderGroupKindDependencyRequiringArgs.builder()
 *                                 .resourceGroup("stable.example.com")
 *                                 .resourceKind("kindC")
 *                                 .build())
 *                             .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Gkebackup Restoreplan Volume Res
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.container.inputs.ClusterWorkloadIdentityConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigArgs;
 * import com.pulumi.gcp.container.inputs.ClusterAddonsConfigGkeBackupAgentConfigArgs;
 * import com.pulumi.gcp.gkebackup.BackupPlan;
 * import com.pulumi.gcp.gkebackup.BackupPlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.BackupPlanBackupConfigArgs;
 * import com.pulumi.gcp.gkebackup.RestorePlan;
 * import com.pulumi.gcp.gkebackup.RestorePlanArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigArgs;
 * import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new Cluster("primary", ClusterArgs.builder()
 *             .name("volume-res-cluster")
 *             .location("us-central1")
 *             .initialNodeCount(1)
 *             .workloadIdentityConfig(ClusterWorkloadIdentityConfigArgs.builder()
 *                 .workloadPool("my-project-name.svc.id.goog")
 *                 .build())
 *             .addonsConfig(ClusterAddonsConfigArgs.builder()
 *                 .gkeBackupAgentConfig(ClusterAddonsConfigGkeBackupAgentConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .deletionProtection("")
 *             .network("default")
 *             .subnetwork("default")
 *             .build());
 * 
 *         var basic = new BackupPlan("basic", BackupPlanArgs.builder()
 *             .name("volume-res")
 *             .cluster(primary.id())
 *             .location("us-central1")
 *             .backupConfig(BackupPlanBackupConfigArgs.builder()
 *                 .includeVolumeData(true)
 *                 .includeSecrets(true)
 *                 .allNamespaces(true)
 *                 .build())
 *             .build());
 * 
 *         var volumeRes = new RestorePlan("volumeRes", RestorePlanArgs.builder()
 *             .name("volume-res")
 *             .location("us-central1")
 *             .backupPlan(basic.id())
 *             .cluster(primary.id())
 *             .restoreConfig(RestorePlanRestoreConfigArgs.builder()
 *                 .allNamespaces(true)
 *                 .namespacedResourceRestoreMode("FAIL_ON_CONFLICT")
 *                 .volumeDataRestorePolicy("NO_VOLUME_DATA_RESTORATION")
 *                 .clusterResourceRestoreScope(RestorePlanRestoreConfigClusterResourceRestoreScopeArgs.builder()
 *                     .allGroupKinds(true)
 *                     .build())
 *                 .clusterResourceConflictPolicy("USE_EXISTING_VERSION")
 *                 .volumeDataRestorePolicyBindings(RestorePlanRestoreConfigVolumeDataRestorePolicyBindingArgs.builder()
 *                     .policy("RESTORE_VOLUME_DATA_FROM_BACKUP")
 *                     .volumeType("GCE_PERSISTENT_DISK")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * RestorePlan can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/restorePlans/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, RestorePlan can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember default projects/{{project}}/locations/{{location}}/restorePlans/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember")
public class RestorePlanIamMember extends com.pulumi.resources.CustomResource {
    @Export(name="condition", refs={RestorePlanIamMemberCondition.class}, tree="[0]")
    private Output</* @Nullable */ RestorePlanIamMemberCondition> condition;

    public Output<Optional<RestorePlanIamMemberCondition>> condition() {
        return Codegen.optional(this.condition);
    }
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    public Output<String> etag() {
        return this.etag;
    }
    /**
     * The region of the Restore Plan.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The region of the Restore Plan.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    @Export(name="member", refs={String.class}, tree="[0]")
    private Output<String> member;

    public Output<String> member() {
        return this.member;
    }
    /**
     * The full name of the BackupPlan Resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The full name of the BackupPlan Resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    @Export(name="role", refs={String.class}, tree="[0]")
    private Output<String> role;

    public Output<String> role() {
        return this.role;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RestorePlanIamMember(String name) {
        this(name, RestorePlanIamMemberArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RestorePlanIamMember(String name, RestorePlanIamMemberArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RestorePlanIamMember(String name, RestorePlanIamMemberArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember", name, args == null ? RestorePlanIamMemberArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RestorePlanIamMember(String name, Output<String> id, @Nullable RestorePlanIamMemberState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:gkebackup/restorePlanIamMember:RestorePlanIamMember", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RestorePlanIamMember get(String name, Output<String> id, @Nullable RestorePlanIamMemberState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RestorePlanIamMember(name, id, state, options);
    }
}
