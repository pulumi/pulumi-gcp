// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iap.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.iap.outputs.SettingsAccessSettingsAllowedDomainsSettings;
import com.pulumi.gcp.iap.outputs.SettingsAccessSettingsCorsSettings;
import com.pulumi.gcp.iap.outputs.SettingsAccessSettingsGcipSettings;
import com.pulumi.gcp.iap.outputs.SettingsAccessSettingsOauthSettings;
import com.pulumi.gcp.iap.outputs.SettingsAccessSettingsReauthSettings;
import com.pulumi.gcp.iap.outputs.SettingsAccessSettingsWorkforceIdentitySettings;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SettingsAccessSettings {
    /**
     * @return Settings to configure and enable allowed domains.
     * Structure is documented below.
     * 
     */
    private @Nullable SettingsAccessSettingsAllowedDomainsSettings allowedDomainsSettings;
    /**
     * @return Configuration to allow cross-origin requests via IAP.
     * Structure is documented below.
     * 
     */
    private @Nullable SettingsAccessSettingsCorsSettings corsSettings;
    /**
     * @return GCIP claims and endpoint configurations for 3p identity providers.
     * * Enabling gcipSetting significantly changes the way IAP authenticates users. Identity Platform does not support IAM, so IAP will not enforce any IAM policies for requests to your application.
     *   Structure is documented below.
     * 
     */
    private @Nullable SettingsAccessSettingsGcipSettings gcipSettings;
    /**
     * @return Identity sources that IAP can use to authenticate the end user. Only one identity source
     * can be configured. The possible values are:
     * * `WORKFORCE_IDENTITY_FEDERATION`: Use external identities set up on Google Cloud Workforce
     *   Identity Federation.
     *   Each value may be one of: `WORKFORCE_IDENTITY_FEDERATION`.
     * 
     */
    private @Nullable List<String> identitySources;
    /**
     * @return Settings to configure IAP&#39;s OAuth behavior.
     * Structure is documented below.
     * 
     */
    private @Nullable SettingsAccessSettingsOauthSettings oauthSettings;
    /**
     * @return Settings to configure reauthentication policies in IAP.
     * Structure is documented below.
     * 
     */
    private @Nullable SettingsAccessSettingsReauthSettings reauthSettings;
    /**
     * @return Settings to configure the workforce identity federation, including workforce pools
     * and OAuth 2.0 settings.
     * Structure is documented below.
     * 
     */
    private @Nullable SettingsAccessSettingsWorkforceIdentitySettings workforceIdentitySettings;

    private SettingsAccessSettings() {}
    /**
     * @return Settings to configure and enable allowed domains.
     * Structure is documented below.
     * 
     */
    public Optional<SettingsAccessSettingsAllowedDomainsSettings> allowedDomainsSettings() {
        return Optional.ofNullable(this.allowedDomainsSettings);
    }
    /**
     * @return Configuration to allow cross-origin requests via IAP.
     * Structure is documented below.
     * 
     */
    public Optional<SettingsAccessSettingsCorsSettings> corsSettings() {
        return Optional.ofNullable(this.corsSettings);
    }
    /**
     * @return GCIP claims and endpoint configurations for 3p identity providers.
     * * Enabling gcipSetting significantly changes the way IAP authenticates users. Identity Platform does not support IAM, so IAP will not enforce any IAM policies for requests to your application.
     *   Structure is documented below.
     * 
     */
    public Optional<SettingsAccessSettingsGcipSettings> gcipSettings() {
        return Optional.ofNullable(this.gcipSettings);
    }
    /**
     * @return Identity sources that IAP can use to authenticate the end user. Only one identity source
     * can be configured. The possible values are:
     * * `WORKFORCE_IDENTITY_FEDERATION`: Use external identities set up on Google Cloud Workforce
     *   Identity Federation.
     *   Each value may be one of: `WORKFORCE_IDENTITY_FEDERATION`.
     * 
     */
    public List<String> identitySources() {
        return this.identitySources == null ? List.of() : this.identitySources;
    }
    /**
     * @return Settings to configure IAP&#39;s OAuth behavior.
     * Structure is documented below.
     * 
     */
    public Optional<SettingsAccessSettingsOauthSettings> oauthSettings() {
        return Optional.ofNullable(this.oauthSettings);
    }
    /**
     * @return Settings to configure reauthentication policies in IAP.
     * Structure is documented below.
     * 
     */
    public Optional<SettingsAccessSettingsReauthSettings> reauthSettings() {
        return Optional.ofNullable(this.reauthSettings);
    }
    /**
     * @return Settings to configure the workforce identity federation, including workforce pools
     * and OAuth 2.0 settings.
     * Structure is documented below.
     * 
     */
    public Optional<SettingsAccessSettingsWorkforceIdentitySettings> workforceIdentitySettings() {
        return Optional.ofNullable(this.workforceIdentitySettings);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SettingsAccessSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable SettingsAccessSettingsAllowedDomainsSettings allowedDomainsSettings;
        private @Nullable SettingsAccessSettingsCorsSettings corsSettings;
        private @Nullable SettingsAccessSettingsGcipSettings gcipSettings;
        private @Nullable List<String> identitySources;
        private @Nullable SettingsAccessSettingsOauthSettings oauthSettings;
        private @Nullable SettingsAccessSettingsReauthSettings reauthSettings;
        private @Nullable SettingsAccessSettingsWorkforceIdentitySettings workforceIdentitySettings;
        public Builder() {}
        public Builder(SettingsAccessSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedDomainsSettings = defaults.allowedDomainsSettings;
    	      this.corsSettings = defaults.corsSettings;
    	      this.gcipSettings = defaults.gcipSettings;
    	      this.identitySources = defaults.identitySources;
    	      this.oauthSettings = defaults.oauthSettings;
    	      this.reauthSettings = defaults.reauthSettings;
    	      this.workforceIdentitySettings = defaults.workforceIdentitySettings;
        }

        @CustomType.Setter
        public Builder allowedDomainsSettings(@Nullable SettingsAccessSettingsAllowedDomainsSettings allowedDomainsSettings) {

            this.allowedDomainsSettings = allowedDomainsSettings;
            return this;
        }
        @CustomType.Setter
        public Builder corsSettings(@Nullable SettingsAccessSettingsCorsSettings corsSettings) {

            this.corsSettings = corsSettings;
            return this;
        }
        @CustomType.Setter
        public Builder gcipSettings(@Nullable SettingsAccessSettingsGcipSettings gcipSettings) {

            this.gcipSettings = gcipSettings;
            return this;
        }
        @CustomType.Setter
        public Builder identitySources(@Nullable List<String> identitySources) {

            this.identitySources = identitySources;
            return this;
        }
        public Builder identitySources(String... identitySources) {
            return identitySources(List.of(identitySources));
        }
        @CustomType.Setter
        public Builder oauthSettings(@Nullable SettingsAccessSettingsOauthSettings oauthSettings) {

            this.oauthSettings = oauthSettings;
            return this;
        }
        @CustomType.Setter
        public Builder reauthSettings(@Nullable SettingsAccessSettingsReauthSettings reauthSettings) {

            this.reauthSettings = reauthSettings;
            return this;
        }
        @CustomType.Setter
        public Builder workforceIdentitySettings(@Nullable SettingsAccessSettingsWorkforceIdentitySettings workforceIdentitySettings) {

            this.workforceIdentitySettings = workforceIdentitySettings;
            return this;
        }
        public SettingsAccessSettings build() {
            final var _resultValue = new SettingsAccessSettings();
            _resultValue.allowedDomainsSettings = allowedDomainsSettings;
            _resultValue.corsSettings = corsSettings;
            _resultValue.gcipSettings = gcipSettings;
            _resultValue.identitySources = identitySources;
            _resultValue.oauthSettings = oauthSettings;
            _resultValue.reauthSettings = reauthSettings;
            _resultValue.workforceIdentitySettings = workforceIdentitySettings;
            return _resultValue;
        }
    }
}
