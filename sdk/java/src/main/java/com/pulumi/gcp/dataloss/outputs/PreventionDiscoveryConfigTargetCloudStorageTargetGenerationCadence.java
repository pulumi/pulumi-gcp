// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.dataloss.outputs.PreventionDiscoveryConfigTargetCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadence;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PreventionDiscoveryConfigTargetCloudStorageTargetGenerationCadence {
    /**
     * @return Governs when to update data profiles when the inspection rules defined by the `InspectTemplate` change. If not set, changing the template will not cause a data profile to update.
     * Structure is documented below.
     * 
     */
    private @Nullable PreventionDiscoveryConfigTargetCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadence inspectTemplateModifiedCadence;
    /**
     * @return Data changes in Cloud Storage can&#39;t trigger reprofiling. If you set this field, profiles are refreshed at this frequency regardless of whether the underlying buckets have changes. Defaults to never.
     * Possible values are: `UPDATE_FREQUENCY_NEVER`, `UPDATE_FREQUENCY_DAILY`, `UPDATE_FREQUENCY_MONTHLY`.
     * 
     */
    private @Nullable String refreshFrequency;

    private PreventionDiscoveryConfigTargetCloudStorageTargetGenerationCadence() {}
    /**
     * @return Governs when to update data profiles when the inspection rules defined by the `InspectTemplate` change. If not set, changing the template will not cause a data profile to update.
     * Structure is documented below.
     * 
     */
    public Optional<PreventionDiscoveryConfigTargetCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadence> inspectTemplateModifiedCadence() {
        return Optional.ofNullable(this.inspectTemplateModifiedCadence);
    }
    /**
     * @return Data changes in Cloud Storage can&#39;t trigger reprofiling. If you set this field, profiles are refreshed at this frequency regardless of whether the underlying buckets have changes. Defaults to never.
     * Possible values are: `UPDATE_FREQUENCY_NEVER`, `UPDATE_FREQUENCY_DAILY`, `UPDATE_FREQUENCY_MONTHLY`.
     * 
     */
    public Optional<String> refreshFrequency() {
        return Optional.ofNullable(this.refreshFrequency);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreventionDiscoveryConfigTargetCloudStorageTargetGenerationCadence defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable PreventionDiscoveryConfigTargetCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadence inspectTemplateModifiedCadence;
        private @Nullable String refreshFrequency;
        public Builder() {}
        public Builder(PreventionDiscoveryConfigTargetCloudStorageTargetGenerationCadence defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inspectTemplateModifiedCadence = defaults.inspectTemplateModifiedCadence;
    	      this.refreshFrequency = defaults.refreshFrequency;
        }

        @CustomType.Setter
        public Builder inspectTemplateModifiedCadence(@Nullable PreventionDiscoveryConfigTargetCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadence inspectTemplateModifiedCadence) {

            this.inspectTemplateModifiedCadence = inspectTemplateModifiedCadence;
            return this;
        }
        @CustomType.Setter
        public Builder refreshFrequency(@Nullable String refreshFrequency) {

            this.refreshFrequency = refreshFrequency;
            return this;
        }
        public PreventionDiscoveryConfigTargetCloudStorageTargetGenerationCadence build() {
            final var _resultValue = new PreventionDiscoveryConfigTargetCloudStorageTargetGenerationCadence();
            _resultValue.inspectTemplateModifiedCadence = inspectTemplateModifiedCadence;
            _resultValue.refreshFrequency = refreshFrequency;
            return _resultValue;
        }
    }
}
