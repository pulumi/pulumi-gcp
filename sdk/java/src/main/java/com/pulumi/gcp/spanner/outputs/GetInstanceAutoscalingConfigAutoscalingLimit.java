// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.spanner.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetInstanceAutoscalingConfigAutoscalingLimit {
    /**
     * @return Specifies maximum number of nodes allocated to the instance. If set, this number
     * should be greater than or equal to min_nodes.
     * 
     */
    private Integer maxNodes;
    /**
     * @return Specifies maximum number of processing units allocated to the instance.
     * If set, this number should be multiples of 1000 and be greater than or equal to
     * min_processing_units.
     * 
     */
    private Integer maxProcessingUnits;
    /**
     * @return Specifies number of nodes allocated to the instance. If set, this number
     * should be greater than or equal to 1.
     * 
     */
    private Integer minNodes;
    /**
     * @return Specifies minimum number of processing units allocated to the instance.
     * If set, this number should be multiples of 1000.
     * 
     */
    private Integer minProcessingUnits;

    private GetInstanceAutoscalingConfigAutoscalingLimit() {}
    /**
     * @return Specifies maximum number of nodes allocated to the instance. If set, this number
     * should be greater than or equal to min_nodes.
     * 
     */
    public Integer maxNodes() {
        return this.maxNodes;
    }
    /**
     * @return Specifies maximum number of processing units allocated to the instance.
     * If set, this number should be multiples of 1000 and be greater than or equal to
     * min_processing_units.
     * 
     */
    public Integer maxProcessingUnits() {
        return this.maxProcessingUnits;
    }
    /**
     * @return Specifies number of nodes allocated to the instance. If set, this number
     * should be greater than or equal to 1.
     * 
     */
    public Integer minNodes() {
        return this.minNodes;
    }
    /**
     * @return Specifies minimum number of processing units allocated to the instance.
     * If set, this number should be multiples of 1000.
     * 
     */
    public Integer minProcessingUnits() {
        return this.minProcessingUnits;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceAutoscalingConfigAutoscalingLimit defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer maxNodes;
        private Integer maxProcessingUnits;
        private Integer minNodes;
        private Integer minProcessingUnits;
        public Builder() {}
        public Builder(GetInstanceAutoscalingConfigAutoscalingLimit defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxNodes = defaults.maxNodes;
    	      this.maxProcessingUnits = defaults.maxProcessingUnits;
    	      this.minNodes = defaults.minNodes;
    	      this.minProcessingUnits = defaults.minProcessingUnits;
        }

        @CustomType.Setter
        public Builder maxNodes(Integer maxNodes) {
            if (maxNodes == null) {
              throw new MissingRequiredPropertyException("GetInstanceAutoscalingConfigAutoscalingLimit", "maxNodes");
            }
            this.maxNodes = maxNodes;
            return this;
        }
        @CustomType.Setter
        public Builder maxProcessingUnits(Integer maxProcessingUnits) {
            if (maxProcessingUnits == null) {
              throw new MissingRequiredPropertyException("GetInstanceAutoscalingConfigAutoscalingLimit", "maxProcessingUnits");
            }
            this.maxProcessingUnits = maxProcessingUnits;
            return this;
        }
        @CustomType.Setter
        public Builder minNodes(Integer minNodes) {
            if (minNodes == null) {
              throw new MissingRequiredPropertyException("GetInstanceAutoscalingConfigAutoscalingLimit", "minNodes");
            }
            this.minNodes = minNodes;
            return this;
        }
        @CustomType.Setter
        public Builder minProcessingUnits(Integer minProcessingUnits) {
            if (minProcessingUnits == null) {
              throw new MissingRequiredPropertyException("GetInstanceAutoscalingConfigAutoscalingLimit", "minProcessingUnits");
            }
            this.minProcessingUnits = minProcessingUnits;
            return this;
        }
        public GetInstanceAutoscalingConfigAutoscalingLimit build() {
            final var _resultValue = new GetInstanceAutoscalingConfigAutoscalingLimit();
            _resultValue.maxNodes = maxNodes;
            _resultValue.maxProcessingUnits = maxProcessingUnits;
            _resultValue.minNodes = minNodes;
            _resultValue.minProcessingUnits = minProcessingUnits;
            return _resultValue;
        }
    }
}
