// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.kms.inputs.OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationKajPolicyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationKajPolicyConfigArgs Empty = new OrganizationKajPolicyConfigArgs();

    /**
     * The default key access justification policy used when a CryptoKey is
     * created in this organization. This is only used when a Key Access Justifications
     * policy is not provided in the CreateCryptoKeyRequest.
     * Structure is documented below.
     * 
     */
    @Import(name="defaultKeyAccessJustificationPolicy")
    private @Nullable Output<OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs> defaultKeyAccessJustificationPolicy;

    /**
     * @return The default key access justification policy used when a CryptoKey is
     * created in this organization. This is only used when a Key Access Justifications
     * policy is not provided in the CreateCryptoKeyRequest.
     * Structure is documented below.
     * 
     */
    public Optional<Output<OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs>> defaultKeyAccessJustificationPolicy() {
        return Optional.ofNullable(this.defaultKeyAccessJustificationPolicy);
    }

    /**
     * The organization number for which to retrieve config.
     * 
     */
    @Import(name="organization", required=true)
    private Output<String> organization;

    /**
     * @return The organization number for which to retrieve config.
     * 
     */
    public Output<String> organization() {
        return this.organization;
    }

    private OrganizationKajPolicyConfigArgs() {}

    private OrganizationKajPolicyConfigArgs(OrganizationKajPolicyConfigArgs $) {
        this.defaultKeyAccessJustificationPolicy = $.defaultKeyAccessJustificationPolicy;
        this.organization = $.organization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationKajPolicyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationKajPolicyConfigArgs $;

        public Builder() {
            $ = new OrganizationKajPolicyConfigArgs();
        }

        public Builder(OrganizationKajPolicyConfigArgs defaults) {
            $ = new OrganizationKajPolicyConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultKeyAccessJustificationPolicy The default key access justification policy used when a CryptoKey is
         * created in this organization. This is only used when a Key Access Justifications
         * policy is not provided in the CreateCryptoKeyRequest.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder defaultKeyAccessJustificationPolicy(@Nullable Output<OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs> defaultKeyAccessJustificationPolicy) {
            $.defaultKeyAccessJustificationPolicy = defaultKeyAccessJustificationPolicy;
            return this;
        }

        /**
         * @param defaultKeyAccessJustificationPolicy The default key access justification policy used when a CryptoKey is
         * created in this organization. This is only used when a Key Access Justifications
         * policy is not provided in the CreateCryptoKeyRequest.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder defaultKeyAccessJustificationPolicy(OrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs defaultKeyAccessJustificationPolicy) {
            return defaultKeyAccessJustificationPolicy(Output.of(defaultKeyAccessJustificationPolicy));
        }

        /**
         * @param organization The organization number for which to retrieve config.
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization The organization number for which to retrieve config.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        public OrganizationKajPolicyConfigArgs build() {
            if ($.organization == null) {
                throw new MissingRequiredPropertyException("OrganizationKajPolicyConfigArgs", "organization");
            }
            return $;
        }
    }

}
