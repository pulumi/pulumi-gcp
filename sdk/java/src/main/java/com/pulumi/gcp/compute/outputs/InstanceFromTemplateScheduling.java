// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.InstanceFromTemplateSchedulingLocalSsdRecoveryTimeout;
import com.pulumi.gcp.compute.outputs.InstanceFromTemplateSchedulingMaxRunDuration;
import com.pulumi.gcp.compute.outputs.InstanceFromTemplateSchedulingNodeAffinity;
import com.pulumi.gcp.compute.outputs.InstanceFromTemplateSchedulingOnInstanceStopAction;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceFromTemplateScheduling {
    /**
     * @return Specifies if the instance should be restarted if it was terminated by Compute Engine (not a user).
     * 
     */
    private @Nullable Boolean automaticRestart;
    /**
     * @return Specifies the availability domain, which this instance should be scheduled on.
     * 
     */
    private @Nullable Integer availabilityDomain;
    /**
     * @return Specify the time in seconds for host error detection, the value must be within the range of [90, 330] with the increment of 30, if unset, the default behavior of host error recovery will be used.
     * 
     */
    private @Nullable Integer hostErrorTimeoutSeconds;
    /**
     * @return Specifies the action GCE should take when SPOT VM is preempted.
     * 
     */
    private @Nullable String instanceTerminationAction;
    /**
     * @return Specifies the maximum amount of time a Local Ssd Vm should wait while
     *   recovery of the Local Ssd state is attempted. Its value should be in
     *   between 0 and 168 hours with hour granularity and the default value being 1
     *   hour.
     * 
     */
    private @Nullable InstanceFromTemplateSchedulingLocalSsdRecoveryTimeout localSsdRecoveryTimeout;
    /**
     * @return Specifies the frequency of planned maintenance events. The accepted values are: PERIODIC
     * 
     */
    private @Nullable String maintenanceInterval;
    /**
     * @return The timeout for new network connections to hosts.
     * 
     */
    private @Nullable InstanceFromTemplateSchedulingMaxRunDuration maxRunDuration;
    private @Nullable Integer minNodeCpus;
    /**
     * @return Specifies node affinities or anti-affinities to determine which sole-tenant nodes your instances and managed instance groups will use as host systems.
     * 
     */
    private @Nullable List<InstanceFromTemplateSchedulingNodeAffinity> nodeAffinities;
    /**
     * @return Describes maintenance behavior for the instance. One of MIGRATE or TERMINATE,
     * 
     */
    private @Nullable String onHostMaintenance;
    /**
     * @return Defines the behaviour for instances with the instance_termination_action.
     * 
     */
    private @Nullable InstanceFromTemplateSchedulingOnInstanceStopAction onInstanceStopAction;
    /**
     * @return Whether the instance is preemptible.
     * 
     */
    private @Nullable Boolean preemptible;
    /**
     * @return Whether the instance is spot. If this is set as SPOT.
     * 
     */
    private @Nullable String provisioningModel;

    private InstanceFromTemplateScheduling() {}
    /**
     * @return Specifies if the instance should be restarted if it was terminated by Compute Engine (not a user).
     * 
     */
    public Optional<Boolean> automaticRestart() {
        return Optional.ofNullable(this.automaticRestart);
    }
    /**
     * @return Specifies the availability domain, which this instance should be scheduled on.
     * 
     */
    public Optional<Integer> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    /**
     * @return Specify the time in seconds for host error detection, the value must be within the range of [90, 330] with the increment of 30, if unset, the default behavior of host error recovery will be used.
     * 
     */
    public Optional<Integer> hostErrorTimeoutSeconds() {
        return Optional.ofNullable(this.hostErrorTimeoutSeconds);
    }
    /**
     * @return Specifies the action GCE should take when SPOT VM is preempted.
     * 
     */
    public Optional<String> instanceTerminationAction() {
        return Optional.ofNullable(this.instanceTerminationAction);
    }
    /**
     * @return Specifies the maximum amount of time a Local Ssd Vm should wait while
     *   recovery of the Local Ssd state is attempted. Its value should be in
     *   between 0 and 168 hours with hour granularity and the default value being 1
     *   hour.
     * 
     */
    public Optional<InstanceFromTemplateSchedulingLocalSsdRecoveryTimeout> localSsdRecoveryTimeout() {
        return Optional.ofNullable(this.localSsdRecoveryTimeout);
    }
    /**
     * @return Specifies the frequency of planned maintenance events. The accepted values are: PERIODIC
     * 
     */
    public Optional<String> maintenanceInterval() {
        return Optional.ofNullable(this.maintenanceInterval);
    }
    /**
     * @return The timeout for new network connections to hosts.
     * 
     */
    public Optional<InstanceFromTemplateSchedulingMaxRunDuration> maxRunDuration() {
        return Optional.ofNullable(this.maxRunDuration);
    }
    public Optional<Integer> minNodeCpus() {
        return Optional.ofNullable(this.minNodeCpus);
    }
    /**
     * @return Specifies node affinities or anti-affinities to determine which sole-tenant nodes your instances and managed instance groups will use as host systems.
     * 
     */
    public List<InstanceFromTemplateSchedulingNodeAffinity> nodeAffinities() {
        return this.nodeAffinities == null ? List.of() : this.nodeAffinities;
    }
    /**
     * @return Describes maintenance behavior for the instance. One of MIGRATE or TERMINATE,
     * 
     */
    public Optional<String> onHostMaintenance() {
        return Optional.ofNullable(this.onHostMaintenance);
    }
    /**
     * @return Defines the behaviour for instances with the instance_termination_action.
     * 
     */
    public Optional<InstanceFromTemplateSchedulingOnInstanceStopAction> onInstanceStopAction() {
        return Optional.ofNullable(this.onInstanceStopAction);
    }
    /**
     * @return Whether the instance is preemptible.
     * 
     */
    public Optional<Boolean> preemptible() {
        return Optional.ofNullable(this.preemptible);
    }
    /**
     * @return Whether the instance is spot. If this is set as SPOT.
     * 
     */
    public Optional<String> provisioningModel() {
        return Optional.ofNullable(this.provisioningModel);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceFromTemplateScheduling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean automaticRestart;
        private @Nullable Integer availabilityDomain;
        private @Nullable Integer hostErrorTimeoutSeconds;
        private @Nullable String instanceTerminationAction;
        private @Nullable InstanceFromTemplateSchedulingLocalSsdRecoveryTimeout localSsdRecoveryTimeout;
        private @Nullable String maintenanceInterval;
        private @Nullable InstanceFromTemplateSchedulingMaxRunDuration maxRunDuration;
        private @Nullable Integer minNodeCpus;
        private @Nullable List<InstanceFromTemplateSchedulingNodeAffinity> nodeAffinities;
        private @Nullable String onHostMaintenance;
        private @Nullable InstanceFromTemplateSchedulingOnInstanceStopAction onInstanceStopAction;
        private @Nullable Boolean preemptible;
        private @Nullable String provisioningModel;
        public Builder() {}
        public Builder(InstanceFromTemplateScheduling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticRestart = defaults.automaticRestart;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.hostErrorTimeoutSeconds = defaults.hostErrorTimeoutSeconds;
    	      this.instanceTerminationAction = defaults.instanceTerminationAction;
    	      this.localSsdRecoveryTimeout = defaults.localSsdRecoveryTimeout;
    	      this.maintenanceInterval = defaults.maintenanceInterval;
    	      this.maxRunDuration = defaults.maxRunDuration;
    	      this.minNodeCpus = defaults.minNodeCpus;
    	      this.nodeAffinities = defaults.nodeAffinities;
    	      this.onHostMaintenance = defaults.onHostMaintenance;
    	      this.onInstanceStopAction = defaults.onInstanceStopAction;
    	      this.preemptible = defaults.preemptible;
    	      this.provisioningModel = defaults.provisioningModel;
        }

        @CustomType.Setter
        public Builder automaticRestart(@Nullable Boolean automaticRestart) {

            this.automaticRestart = automaticRestart;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityDomain(@Nullable Integer availabilityDomain) {

            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder hostErrorTimeoutSeconds(@Nullable Integer hostErrorTimeoutSeconds) {

            this.hostErrorTimeoutSeconds = hostErrorTimeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder instanceTerminationAction(@Nullable String instanceTerminationAction) {

            this.instanceTerminationAction = instanceTerminationAction;
            return this;
        }
        @CustomType.Setter
        public Builder localSsdRecoveryTimeout(@Nullable InstanceFromTemplateSchedulingLocalSsdRecoveryTimeout localSsdRecoveryTimeout) {

            this.localSsdRecoveryTimeout = localSsdRecoveryTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceInterval(@Nullable String maintenanceInterval) {

            this.maintenanceInterval = maintenanceInterval;
            return this;
        }
        @CustomType.Setter
        public Builder maxRunDuration(@Nullable InstanceFromTemplateSchedulingMaxRunDuration maxRunDuration) {

            this.maxRunDuration = maxRunDuration;
            return this;
        }
        @CustomType.Setter
        public Builder minNodeCpus(@Nullable Integer minNodeCpus) {

            this.minNodeCpus = minNodeCpus;
            return this;
        }
        @CustomType.Setter
        public Builder nodeAffinities(@Nullable List<InstanceFromTemplateSchedulingNodeAffinity> nodeAffinities) {

            this.nodeAffinities = nodeAffinities;
            return this;
        }
        public Builder nodeAffinities(InstanceFromTemplateSchedulingNodeAffinity... nodeAffinities) {
            return nodeAffinities(List.of(nodeAffinities));
        }
        @CustomType.Setter
        public Builder onHostMaintenance(@Nullable String onHostMaintenance) {

            this.onHostMaintenance = onHostMaintenance;
            return this;
        }
        @CustomType.Setter
        public Builder onInstanceStopAction(@Nullable InstanceFromTemplateSchedulingOnInstanceStopAction onInstanceStopAction) {

            this.onInstanceStopAction = onInstanceStopAction;
            return this;
        }
        @CustomType.Setter
        public Builder preemptible(@Nullable Boolean preemptible) {

            this.preemptible = preemptible;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningModel(@Nullable String provisioningModel) {

            this.provisioningModel = provisioningModel;
            return this;
        }
        public InstanceFromTemplateScheduling build() {
            final var _resultValue = new InstanceFromTemplateScheduling();
            _resultValue.automaticRestart = automaticRestart;
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.hostErrorTimeoutSeconds = hostErrorTimeoutSeconds;
            _resultValue.instanceTerminationAction = instanceTerminationAction;
            _resultValue.localSsdRecoveryTimeout = localSsdRecoveryTimeout;
            _resultValue.maintenanceInterval = maintenanceInterval;
            _resultValue.maxRunDuration = maxRunDuration;
            _resultValue.minNodeCpus = minNodeCpus;
            _resultValue.nodeAffinities = nodeAffinities;
            _resultValue.onHostMaintenance = onHostMaintenance;
            _resultValue.onInstanceStopAction = onInstanceStopAction;
            _resultValue.preemptible = preemptible;
            _resultValue.provisioningModel = provisioningModel;
            return _resultValue;
        }
    }
}
