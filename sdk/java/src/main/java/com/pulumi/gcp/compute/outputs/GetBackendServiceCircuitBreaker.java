// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.GetBackendServiceCircuitBreakerConnectTimeout;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackendServiceCircuitBreaker {
    private final List<GetBackendServiceCircuitBreakerConnectTimeout> connectTimeouts;
    private final Integer maxConnections;
    private final Integer maxPendingRequests;
    private final Integer maxRequests;
    private final Integer maxRequestsPerConnection;
    private final Integer maxRetries;

    @CustomType.Constructor
    private GetBackendServiceCircuitBreaker(
        @CustomType.Parameter("connectTimeouts") List<GetBackendServiceCircuitBreakerConnectTimeout> connectTimeouts,
        @CustomType.Parameter("maxConnections") Integer maxConnections,
        @CustomType.Parameter("maxPendingRequests") Integer maxPendingRequests,
        @CustomType.Parameter("maxRequests") Integer maxRequests,
        @CustomType.Parameter("maxRequestsPerConnection") Integer maxRequestsPerConnection,
        @CustomType.Parameter("maxRetries") Integer maxRetries) {
        this.connectTimeouts = connectTimeouts;
        this.maxConnections = maxConnections;
        this.maxPendingRequests = maxPendingRequests;
        this.maxRequests = maxRequests;
        this.maxRequestsPerConnection = maxRequestsPerConnection;
        this.maxRetries = maxRetries;
    }

    public List<GetBackendServiceCircuitBreakerConnectTimeout> connectTimeouts() {
        return this.connectTimeouts;
    }
    public Integer maxConnections() {
        return this.maxConnections;
    }
    public Integer maxPendingRequests() {
        return this.maxPendingRequests;
    }
    public Integer maxRequests() {
        return this.maxRequests;
    }
    public Integer maxRequestsPerConnection() {
        return this.maxRequestsPerConnection;
    }
    public Integer maxRetries() {
        return this.maxRetries;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendServiceCircuitBreaker defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetBackendServiceCircuitBreakerConnectTimeout> connectTimeouts;
        private Integer maxConnections;
        private Integer maxPendingRequests;
        private Integer maxRequests;
        private Integer maxRequestsPerConnection;
        private Integer maxRetries;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackendServiceCircuitBreaker defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectTimeouts = defaults.connectTimeouts;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxPendingRequests = defaults.maxPendingRequests;
    	      this.maxRequests = defaults.maxRequests;
    	      this.maxRequestsPerConnection = defaults.maxRequestsPerConnection;
    	      this.maxRetries = defaults.maxRetries;
        }

        public Builder connectTimeouts(List<GetBackendServiceCircuitBreakerConnectTimeout> connectTimeouts) {
            this.connectTimeouts = Objects.requireNonNull(connectTimeouts);
            return this;
        }
        public Builder connectTimeouts(GetBackendServiceCircuitBreakerConnectTimeout... connectTimeouts) {
            return connectTimeouts(List.of(connectTimeouts));
        }
        public Builder maxConnections(Integer maxConnections) {
            this.maxConnections = Objects.requireNonNull(maxConnections);
            return this;
        }
        public Builder maxPendingRequests(Integer maxPendingRequests) {
            this.maxPendingRequests = Objects.requireNonNull(maxPendingRequests);
            return this;
        }
        public Builder maxRequests(Integer maxRequests) {
            this.maxRequests = Objects.requireNonNull(maxRequests);
            return this;
        }
        public Builder maxRequestsPerConnection(Integer maxRequestsPerConnection) {
            this.maxRequestsPerConnection = Objects.requireNonNull(maxRequestsPerConnection);
            return this;
        }
        public Builder maxRetries(Integer maxRetries) {
            this.maxRetries = Objects.requireNonNull(maxRetries);
            return this;
        }        public GetBackendServiceCircuitBreaker build() {
            return new GetBackendServiceCircuitBreaker(connectTimeouts, maxConnections, maxPendingRequests, maxRequests, maxRequestsPerConnection, maxRetries);
        }
    }
}
