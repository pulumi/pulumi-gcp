// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.secretmanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretVersionState extends com.pulumi.resources.ResourceArgs {

    public static final SecretVersionState Empty = new SecretVersionState();

    /**
     * The time at which the Secret was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The time at which the Secret was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The time at which the Secret was destroyed. Only present if state is DESTROYED.
     * 
     */
    @Import(name="destroyTime")
    private @Nullable Output<String> destroyTime;

    /**
     * @return The time at which the Secret was destroyed. Only present if state is DESTROYED.
     * 
     */
    public Optional<Output<String>> destroyTime() {
        return Optional.ofNullable(this.destroyTime);
    }

    /**
     * The current state of the SecretVersion.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return The current state of the SecretVersion.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The resource name of the SecretVersion. Format: &#39;projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}&#39;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the SecretVersion. Format: &#39;projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}&#39;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Secret Manager secret resource
     * 
     */
    @Import(name="secret")
    private @Nullable Output<String> secret;

    /**
     * @return Secret Manager secret resource
     * 
     */
    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    /**
     * The secret data. Must be no larger than 64KiB.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="secretData")
    private @Nullable Output<String> secretData;

    /**
     * @return The secret data. Must be no larger than 64KiB.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> secretData() {
        return Optional.ofNullable(this.secretData);
    }

    /**
     * The version of the Secret.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version of the Secret.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private SecretVersionState() {}

    private SecretVersionState(SecretVersionState $) {
        this.createTime = $.createTime;
        this.destroyTime = $.destroyTime;
        this.enabled = $.enabled;
        this.name = $.name;
        this.secret = $.secret;
        this.secretData = $.secretData;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretVersionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretVersionState $;

        public Builder() {
            $ = new SecretVersionState();
        }

        public Builder(SecretVersionState defaults) {
            $ = new SecretVersionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The time at which the Secret was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The time at which the Secret was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param destroyTime The time at which the Secret was destroyed. Only present if state is DESTROYED.
         * 
         * @return builder
         * 
         */
        public Builder destroyTime(@Nullable Output<String> destroyTime) {
            $.destroyTime = destroyTime;
            return this;
        }

        /**
         * @param destroyTime The time at which the Secret was destroyed. Only present if state is DESTROYED.
         * 
         * @return builder
         * 
         */
        public Builder destroyTime(String destroyTime) {
            return destroyTime(Output.of(destroyTime));
        }

        /**
         * @param enabled The current state of the SecretVersion.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled The current state of the SecretVersion.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The resource name of the SecretVersion. Format: &#39;projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}&#39;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the SecretVersion. Format: &#39;projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}&#39;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secret Secret Manager secret resource
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret Secret Manager secret resource
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        /**
         * @param secretData The secret data. Must be no larger than 64KiB.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder secretData(@Nullable Output<String> secretData) {
            $.secretData = secretData;
            return this;
        }

        /**
         * @param secretData The secret data. Must be no larger than 64KiB.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder secretData(String secretData) {
            return secretData(Output.of(secretData));
        }

        /**
         * @param version The version of the Secret.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the Secret.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public SecretVersionState build() {
            return $;
        }
    }

}
