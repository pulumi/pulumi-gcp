// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudquota.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SQuotaAdjusterSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final SQuotaAdjusterSettingsState Empty = new SQuotaAdjusterSettingsState();

    /**
     * Fields to capture the hierarchy enablement.
     * The container (org/folder/project) that determines if the quota adjuster is set for this project/folder/org. We use the nearest-ancestor to determine the effective container.
     * The nearest ancestor (including this container) with `enabled` set (either true or false) will be returned.
     * 
     */
    @Import(name="effectiveContainer")
    private @Nullable Output<String> effectiveContainer;

    /**
     * @return Fields to capture the hierarchy enablement.
     * The container (org/folder/project) that determines if the quota adjuster is set for this project/folder/org. We use the nearest-ancestor to determine the effective container.
     * The nearest ancestor (including this container) with `enabled` set (either true or false) will be returned.
     * 
     */
    public Optional<Output<String>> effectiveContainer() {
        return Optional.ofNullable(this.effectiveContainer);
    }

    /**
     * Based on the effective container`s setting above, determines Whether this container has the quota adjuster enabled.
     * 
     */
    @Import(name="effectiveEnablement")
    private @Nullable Output<String> effectiveEnablement;

    /**
     * @return Based on the effective container`s setting above, determines Whether this container has the quota adjuster enabled.
     * 
     */
    public Optional<Output<String>> effectiveEnablement() {
        return Optional.ofNullable(this.effectiveEnablement);
    }

    /**
     * Required. The configured value of the enablement at the given resource.
     * Possible values are: `ENABLED`, `DISABLED`.
     * 
     */
    @Import(name="enablement")
    private @Nullable Output<String> enablement;

    /**
     * @return Required. The configured value of the enablement at the given resource.
     * Possible values are: `ENABLED`, `DISABLED`.
     * 
     */
    public Optional<Output<String>> enablement() {
        return Optional.ofNullable(this.enablement);
    }

    /**
     * The parent of the quota preference. Allowed parents are &#34;projects/[project-id / number]&#34; or &#34;folders/[folder-id / number]&#34; or &#34;organizations/[org-id / number]&#34;.
     * 
     * ***
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return The parent of the quota preference. Allowed parents are &#34;projects/[project-id / number]&#34; or &#34;folders/[folder-id / number]&#34; or &#34;organizations/[org-id / number]&#34;.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    private SQuotaAdjusterSettingsState() {}

    private SQuotaAdjusterSettingsState(SQuotaAdjusterSettingsState $) {
        this.effectiveContainer = $.effectiveContainer;
        this.effectiveEnablement = $.effectiveEnablement;
        this.enablement = $.enablement;
        this.parent = $.parent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SQuotaAdjusterSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SQuotaAdjusterSettingsState $;

        public Builder() {
            $ = new SQuotaAdjusterSettingsState();
        }

        public Builder(SQuotaAdjusterSettingsState defaults) {
            $ = new SQuotaAdjusterSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param effectiveContainer Fields to capture the hierarchy enablement.
         * The container (org/folder/project) that determines if the quota adjuster is set for this project/folder/org. We use the nearest-ancestor to determine the effective container.
         * The nearest ancestor (including this container) with `enabled` set (either true or false) will be returned.
         * 
         * @return builder
         * 
         */
        public Builder effectiveContainer(@Nullable Output<String> effectiveContainer) {
            $.effectiveContainer = effectiveContainer;
            return this;
        }

        /**
         * @param effectiveContainer Fields to capture the hierarchy enablement.
         * The container (org/folder/project) that determines if the quota adjuster is set for this project/folder/org. We use the nearest-ancestor to determine the effective container.
         * The nearest ancestor (including this container) with `enabled` set (either true or false) will be returned.
         * 
         * @return builder
         * 
         */
        public Builder effectiveContainer(String effectiveContainer) {
            return effectiveContainer(Output.of(effectiveContainer));
        }

        /**
         * @param effectiveEnablement Based on the effective container`s setting above, determines Whether this container has the quota adjuster enabled.
         * 
         * @return builder
         * 
         */
        public Builder effectiveEnablement(@Nullable Output<String> effectiveEnablement) {
            $.effectiveEnablement = effectiveEnablement;
            return this;
        }

        /**
         * @param effectiveEnablement Based on the effective container`s setting above, determines Whether this container has the quota adjuster enabled.
         * 
         * @return builder
         * 
         */
        public Builder effectiveEnablement(String effectiveEnablement) {
            return effectiveEnablement(Output.of(effectiveEnablement));
        }

        /**
         * @param enablement Required. The configured value of the enablement at the given resource.
         * Possible values are: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder enablement(@Nullable Output<String> enablement) {
            $.enablement = enablement;
            return this;
        }

        /**
         * @param enablement Required. The configured value of the enablement at the given resource.
         * Possible values are: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder enablement(String enablement) {
            return enablement(Output.of(enablement));
        }

        /**
         * @param parent The parent of the quota preference. Allowed parents are &#34;projects/[project-id / number]&#34; or &#34;folders/[folder-id / number]&#34; or &#34;organizations/[org-id / number]&#34;.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The parent of the quota preference. Allowed parents are &#34;projects/[project-id / number]&#34; or &#34;folders/[folder-id / number]&#34; or &#34;organizations/[org-id / number]&#34;.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        public SQuotaAdjusterSettingsState build() {
            return $;
        }
    }

}
