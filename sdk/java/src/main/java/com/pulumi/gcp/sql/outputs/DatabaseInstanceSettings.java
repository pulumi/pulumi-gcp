// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsActiveDirectoryConfig;
import com.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsBackupConfiguration;
import com.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsDatabaseFlag;
import com.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsInsightsConfig;
import com.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsIpConfiguration;
import com.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsLocationPreference;
import com.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsMaintenanceWindow;
import com.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsPasswordValidationPolicy;
import com.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsSqlServerAuditConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseInstanceSettings {
    /**
     * @return This specifies when the instance should be
     * active. Can be either `ALWAYS`, `NEVER` or `ON_DEMAND`.
     * 
     */
    private @Nullable String activationPolicy;
    private @Nullable DatabaseInstanceSettingsActiveDirectoryConfig activeDirectoryConfig;
    /**
     * @return The availability type of the Cloud SQL
     * instance, high availability (`REGIONAL`) or single zone (`ZONAL`).&#39; For all instances, ensure that
     * `settings.backup_configuration.enabled` is set to `true`.
     * For MySQL instances, ensure that `settings.backup_configuration.binary_log_enabled` is set to `true`.
     * For Postgres instances, ensure that `settings.backup_configuration.point_in_time_recovery_enabled`
     * is set to `true`. Defaults to `ZONAL`.
     * 
     */
    private @Nullable String availabilityType;
    private @Nullable DatabaseInstanceSettingsBackupConfiguration backupConfiguration;
    /**
     * @return The name of server instance collation.
     * 
     */
    private @Nullable String collation;
    private @Nullable List<DatabaseInstanceSettingsDatabaseFlag> databaseFlags;
    /**
     * @return Enables auto-resizing of the storage size. Defaults to `true`.
     * 
     */
    private @Nullable Boolean diskAutoresize;
    /**
     * @return The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
     * 
     */
    private @Nullable Integer diskAutoresizeLimit;
    /**
     * @return The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.
     * 
     */
    private @Nullable Integer diskSize;
    /**
     * @return The type of data disk: PD_SSD or PD_HDD. Defaults to `PD_SSD`.
     * 
     */
    private @Nullable String diskType;
    private @Nullable DatabaseInstanceSettingsInsightsConfig insightsConfig;
    private @Nullable DatabaseInstanceSettingsIpConfiguration ipConfiguration;
    private @Nullable DatabaseInstanceSettingsLocationPreference locationPreference;
    private @Nullable DatabaseInstanceSettingsMaintenanceWindow maintenanceWindow;
    private @Nullable DatabaseInstanceSettingsPasswordValidationPolicy passwordValidationPolicy;
    /**
     * @return Pricing plan for this instance, can only be `PER_USE`.
     * 
     */
    private @Nullable String pricingPlan;
    private @Nullable DatabaseInstanceSettingsSqlServerAuditConfig sqlServerAuditConfig;
    /**
     * @return The machine type to use. See [tiers](https://cloud.google.com/sql/docs/admin-api/v1beta4/tiers)
     * for more details and supported versions. Postgres supports only shared-core machine types,
     * and custom machine types such as `db-custom-2-13312`. See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.
     * 
     */
    private String tier;
    /**
     * @return A set of key/value user label pairs to assign to the instance.
     * 
     */
    private @Nullable Map<String,String> userLabels;
    private @Nullable Integer version;

    private DatabaseInstanceSettings() {}
    /**
     * @return This specifies when the instance should be
     * active. Can be either `ALWAYS`, `NEVER` or `ON_DEMAND`.
     * 
     */
    public Optional<String> activationPolicy() {
        return Optional.ofNullable(this.activationPolicy);
    }
    public Optional<DatabaseInstanceSettingsActiveDirectoryConfig> activeDirectoryConfig() {
        return Optional.ofNullable(this.activeDirectoryConfig);
    }
    /**
     * @return The availability type of the Cloud SQL
     * instance, high availability (`REGIONAL`) or single zone (`ZONAL`).&#39; For all instances, ensure that
     * `settings.backup_configuration.enabled` is set to `true`.
     * For MySQL instances, ensure that `settings.backup_configuration.binary_log_enabled` is set to `true`.
     * For Postgres instances, ensure that `settings.backup_configuration.point_in_time_recovery_enabled`
     * is set to `true`. Defaults to `ZONAL`.
     * 
     */
    public Optional<String> availabilityType() {
        return Optional.ofNullable(this.availabilityType);
    }
    public Optional<DatabaseInstanceSettingsBackupConfiguration> backupConfiguration() {
        return Optional.ofNullable(this.backupConfiguration);
    }
    /**
     * @return The name of server instance collation.
     * 
     */
    public Optional<String> collation() {
        return Optional.ofNullable(this.collation);
    }
    public List<DatabaseInstanceSettingsDatabaseFlag> databaseFlags() {
        return this.databaseFlags == null ? List.of() : this.databaseFlags;
    }
    /**
     * @return Enables auto-resizing of the storage size. Defaults to `true`.
     * 
     */
    public Optional<Boolean> diskAutoresize() {
        return Optional.ofNullable(this.diskAutoresize);
    }
    /**
     * @return The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
     * 
     */
    public Optional<Integer> diskAutoresizeLimit() {
        return Optional.ofNullable(this.diskAutoresizeLimit);
    }
    /**
     * @return The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.
     * 
     */
    public Optional<Integer> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }
    /**
     * @return The type of data disk: PD_SSD or PD_HDD. Defaults to `PD_SSD`.
     * 
     */
    public Optional<String> diskType() {
        return Optional.ofNullable(this.diskType);
    }
    public Optional<DatabaseInstanceSettingsInsightsConfig> insightsConfig() {
        return Optional.ofNullable(this.insightsConfig);
    }
    public Optional<DatabaseInstanceSettingsIpConfiguration> ipConfiguration() {
        return Optional.ofNullable(this.ipConfiguration);
    }
    public Optional<DatabaseInstanceSettingsLocationPreference> locationPreference() {
        return Optional.ofNullable(this.locationPreference);
    }
    public Optional<DatabaseInstanceSettingsMaintenanceWindow> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }
    public Optional<DatabaseInstanceSettingsPasswordValidationPolicy> passwordValidationPolicy() {
        return Optional.ofNullable(this.passwordValidationPolicy);
    }
    /**
     * @return Pricing plan for this instance, can only be `PER_USE`.
     * 
     */
    public Optional<String> pricingPlan() {
        return Optional.ofNullable(this.pricingPlan);
    }
    public Optional<DatabaseInstanceSettingsSqlServerAuditConfig> sqlServerAuditConfig() {
        return Optional.ofNullable(this.sqlServerAuditConfig);
    }
    /**
     * @return The machine type to use. See [tiers](https://cloud.google.com/sql/docs/admin-api/v1beta4/tiers)
     * for more details and supported versions. Postgres supports only shared-core machine types,
     * and custom machine types such as `db-custom-2-13312`. See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.
     * 
     */
    public String tier() {
        return this.tier;
    }
    /**
     * @return A set of key/value user label pairs to assign to the instance.
     * 
     */
    public Map<String,String> userLabels() {
        return this.userLabels == null ? Map.of() : this.userLabels;
    }
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInstanceSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String activationPolicy;
        private @Nullable DatabaseInstanceSettingsActiveDirectoryConfig activeDirectoryConfig;
        private @Nullable String availabilityType;
        private @Nullable DatabaseInstanceSettingsBackupConfiguration backupConfiguration;
        private @Nullable String collation;
        private @Nullable List<DatabaseInstanceSettingsDatabaseFlag> databaseFlags;
        private @Nullable Boolean diskAutoresize;
        private @Nullable Integer diskAutoresizeLimit;
        private @Nullable Integer diskSize;
        private @Nullable String diskType;
        private @Nullable DatabaseInstanceSettingsInsightsConfig insightsConfig;
        private @Nullable DatabaseInstanceSettingsIpConfiguration ipConfiguration;
        private @Nullable DatabaseInstanceSettingsLocationPreference locationPreference;
        private @Nullable DatabaseInstanceSettingsMaintenanceWindow maintenanceWindow;
        private @Nullable DatabaseInstanceSettingsPasswordValidationPolicy passwordValidationPolicy;
        private @Nullable String pricingPlan;
        private @Nullable DatabaseInstanceSettingsSqlServerAuditConfig sqlServerAuditConfig;
        private String tier;
        private @Nullable Map<String,String> userLabels;
        private @Nullable Integer version;
        public Builder() {}
        public Builder(DatabaseInstanceSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activationPolicy = defaults.activationPolicy;
    	      this.activeDirectoryConfig = defaults.activeDirectoryConfig;
    	      this.availabilityType = defaults.availabilityType;
    	      this.backupConfiguration = defaults.backupConfiguration;
    	      this.collation = defaults.collation;
    	      this.databaseFlags = defaults.databaseFlags;
    	      this.diskAutoresize = defaults.diskAutoresize;
    	      this.diskAutoresizeLimit = defaults.diskAutoresizeLimit;
    	      this.diskSize = defaults.diskSize;
    	      this.diskType = defaults.diskType;
    	      this.insightsConfig = defaults.insightsConfig;
    	      this.ipConfiguration = defaults.ipConfiguration;
    	      this.locationPreference = defaults.locationPreference;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.passwordValidationPolicy = defaults.passwordValidationPolicy;
    	      this.pricingPlan = defaults.pricingPlan;
    	      this.sqlServerAuditConfig = defaults.sqlServerAuditConfig;
    	      this.tier = defaults.tier;
    	      this.userLabels = defaults.userLabels;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder activationPolicy(@Nullable String activationPolicy) {
            this.activationPolicy = activationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder activeDirectoryConfig(@Nullable DatabaseInstanceSettingsActiveDirectoryConfig activeDirectoryConfig) {
            this.activeDirectoryConfig = activeDirectoryConfig;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityType(@Nullable String availabilityType) {
            this.availabilityType = availabilityType;
            return this;
        }
        @CustomType.Setter
        public Builder backupConfiguration(@Nullable DatabaseInstanceSettingsBackupConfiguration backupConfiguration) {
            this.backupConfiguration = backupConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder collation(@Nullable String collation) {
            this.collation = collation;
            return this;
        }
        @CustomType.Setter
        public Builder databaseFlags(@Nullable List<DatabaseInstanceSettingsDatabaseFlag> databaseFlags) {
            this.databaseFlags = databaseFlags;
            return this;
        }
        public Builder databaseFlags(DatabaseInstanceSettingsDatabaseFlag... databaseFlags) {
            return databaseFlags(List.of(databaseFlags));
        }
        @CustomType.Setter
        public Builder diskAutoresize(@Nullable Boolean diskAutoresize) {
            this.diskAutoresize = diskAutoresize;
            return this;
        }
        @CustomType.Setter
        public Builder diskAutoresizeLimit(@Nullable Integer diskAutoresizeLimit) {
            this.diskAutoresizeLimit = diskAutoresizeLimit;
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(@Nullable Integer diskSize) {
            this.diskSize = diskSize;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(@Nullable String diskType) {
            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder insightsConfig(@Nullable DatabaseInstanceSettingsInsightsConfig insightsConfig) {
            this.insightsConfig = insightsConfig;
            return this;
        }
        @CustomType.Setter
        public Builder ipConfiguration(@Nullable DatabaseInstanceSettingsIpConfiguration ipConfiguration) {
            this.ipConfiguration = ipConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder locationPreference(@Nullable DatabaseInstanceSettingsLocationPreference locationPreference) {
            this.locationPreference = locationPreference;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindow(@Nullable DatabaseInstanceSettingsMaintenanceWindow maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }
        @CustomType.Setter
        public Builder passwordValidationPolicy(@Nullable DatabaseInstanceSettingsPasswordValidationPolicy passwordValidationPolicy) {
            this.passwordValidationPolicy = passwordValidationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder pricingPlan(@Nullable String pricingPlan) {
            this.pricingPlan = pricingPlan;
            return this;
        }
        @CustomType.Setter
        public Builder sqlServerAuditConfig(@Nullable DatabaseInstanceSettingsSqlServerAuditConfig sqlServerAuditConfig) {
            this.sqlServerAuditConfig = sqlServerAuditConfig;
            return this;
        }
        @CustomType.Setter
        public Builder tier(String tier) {
            this.tier = Objects.requireNonNull(tier);
            return this;
        }
        @CustomType.Setter
        public Builder userLabels(@Nullable Map<String,String> userLabels) {
            this.userLabels = userLabels;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable Integer version) {
            this.version = version;
            return this;
        }
        public DatabaseInstanceSettings build() {
            final var o = new DatabaseInstanceSettings();
            o.activationPolicy = activationPolicy;
            o.activeDirectoryConfig = activeDirectoryConfig;
            o.availabilityType = availabilityType;
            o.backupConfiguration = backupConfiguration;
            o.collation = collation;
            o.databaseFlags = databaseFlags;
            o.diskAutoresize = diskAutoresize;
            o.diskAutoresizeLimit = diskAutoresizeLimit;
            o.diskSize = diskSize;
            o.diskType = diskType;
            o.insightsConfig = insightsConfig;
            o.ipConfiguration = ipConfiguration;
            o.locationPreference = locationPreference;
            o.maintenanceWindow = maintenanceWindow;
            o.passwordValidationPolicy = passwordValidationPolicy;
            o.pricingPlan = pricingPlan;
            o.sqlServerAuditConfig = sqlServerAuditConfig;
            o.tier = tier;
            o.userLabels = userLabels;
            o.version = version;
            return o;
        }
    }
}
