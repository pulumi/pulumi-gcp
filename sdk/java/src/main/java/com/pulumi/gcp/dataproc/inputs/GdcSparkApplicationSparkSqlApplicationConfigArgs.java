// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataproc.inputs.GdcSparkApplicationSparkSqlApplicationConfigQueryListArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GdcSparkApplicationSparkSqlApplicationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GdcSparkApplicationSparkSqlApplicationConfigArgs Empty = new GdcSparkApplicationSparkSqlApplicationConfigArgs();

    /**
     * HCFS URIs of jar files to be added to the Spark CLASSPATH.
     * 
     */
    @Import(name="jarFileUris")
    private @Nullable Output<List<String>> jarFileUris;

    /**
     * @return HCFS URIs of jar files to be added to the Spark CLASSPATH.
     * 
     */
    public Optional<Output<List<String>>> jarFileUris() {
        return Optional.ofNullable(this.jarFileUris);
    }

    /**
     * The HCFS URI of the script that contains SQL queries.
     * 
     */
    @Import(name="queryFileUri")
    private @Nullable Output<String> queryFileUri;

    /**
     * @return The HCFS URI of the script that contains SQL queries.
     * 
     */
    public Optional<Output<String>> queryFileUri() {
        return Optional.ofNullable(this.queryFileUri);
    }

    /**
     * Represents a list of queries.
     * Structure is documented below.
     * 
     */
    @Import(name="queryList")
    private @Nullable Output<GdcSparkApplicationSparkSqlApplicationConfigQueryListArgs> queryList;

    /**
     * @return Represents a list of queries.
     * Structure is documented below.
     * 
     */
    public Optional<Output<GdcSparkApplicationSparkSqlApplicationConfigQueryListArgs>> queryList() {
        return Optional.ofNullable(this.queryList);
    }

    /**
     * Mapping of query variable names to values (equivalent to the Spark SQL command: SET `name=&#34;value&#34;;`).
     * 
     */
    @Import(name="scriptVariables")
    private @Nullable Output<Map<String,String>> scriptVariables;

    /**
     * @return Mapping of query variable names to values (equivalent to the Spark SQL command: SET `name=&#34;value&#34;;`).
     * 
     */
    public Optional<Output<Map<String,String>>> scriptVariables() {
        return Optional.ofNullable(this.scriptVariables);
    }

    private GdcSparkApplicationSparkSqlApplicationConfigArgs() {}

    private GdcSparkApplicationSparkSqlApplicationConfigArgs(GdcSparkApplicationSparkSqlApplicationConfigArgs $) {
        this.jarFileUris = $.jarFileUris;
        this.queryFileUri = $.queryFileUri;
        this.queryList = $.queryList;
        this.scriptVariables = $.scriptVariables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GdcSparkApplicationSparkSqlApplicationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GdcSparkApplicationSparkSqlApplicationConfigArgs $;

        public Builder() {
            $ = new GdcSparkApplicationSparkSqlApplicationConfigArgs();
        }

        public Builder(GdcSparkApplicationSparkSqlApplicationConfigArgs defaults) {
            $ = new GdcSparkApplicationSparkSqlApplicationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param jarFileUris HCFS URIs of jar files to be added to the Spark CLASSPATH.
         * 
         * @return builder
         * 
         */
        public Builder jarFileUris(@Nullable Output<List<String>> jarFileUris) {
            $.jarFileUris = jarFileUris;
            return this;
        }

        /**
         * @param jarFileUris HCFS URIs of jar files to be added to the Spark CLASSPATH.
         * 
         * @return builder
         * 
         */
        public Builder jarFileUris(List<String> jarFileUris) {
            return jarFileUris(Output.of(jarFileUris));
        }

        /**
         * @param jarFileUris HCFS URIs of jar files to be added to the Spark CLASSPATH.
         * 
         * @return builder
         * 
         */
        public Builder jarFileUris(String... jarFileUris) {
            return jarFileUris(List.of(jarFileUris));
        }

        /**
         * @param queryFileUri The HCFS URI of the script that contains SQL queries.
         * 
         * @return builder
         * 
         */
        public Builder queryFileUri(@Nullable Output<String> queryFileUri) {
            $.queryFileUri = queryFileUri;
            return this;
        }

        /**
         * @param queryFileUri The HCFS URI of the script that contains SQL queries.
         * 
         * @return builder
         * 
         */
        public Builder queryFileUri(String queryFileUri) {
            return queryFileUri(Output.of(queryFileUri));
        }

        /**
         * @param queryList Represents a list of queries.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queryList(@Nullable Output<GdcSparkApplicationSparkSqlApplicationConfigQueryListArgs> queryList) {
            $.queryList = queryList;
            return this;
        }

        /**
         * @param queryList Represents a list of queries.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queryList(GdcSparkApplicationSparkSqlApplicationConfigQueryListArgs queryList) {
            return queryList(Output.of(queryList));
        }

        /**
         * @param scriptVariables Mapping of query variable names to values (equivalent to the Spark SQL command: SET `name=&#34;value&#34;;`).
         * 
         * @return builder
         * 
         */
        public Builder scriptVariables(@Nullable Output<Map<String,String>> scriptVariables) {
            $.scriptVariables = scriptVariables;
            return this;
        }

        /**
         * @param scriptVariables Mapping of query variable names to values (equivalent to the Spark SQL command: SET `name=&#34;value&#34;;`).
         * 
         * @return builder
         * 
         */
        public Builder scriptVariables(Map<String,String> scriptVariables) {
            return scriptVariables(Output.of(scriptVariables));
        }

        public GdcSparkApplicationSparkSqlApplicationConfigArgs build() {
            return $;
        }
    }

}
