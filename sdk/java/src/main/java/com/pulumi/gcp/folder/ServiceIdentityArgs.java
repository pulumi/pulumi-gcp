// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.folder;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ServiceIdentityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceIdentityArgs Empty = new ServiceIdentityArgs();

    /**
     * The folder in which the resource belongs.
     * 
     */
    @Import(name="folder", required=true)
    private Output<String> folder;

    /**
     * @return The folder in which the resource belongs.
     * 
     */
    public Output<String> folder() {
        return this.folder;
    }

    /**
     * The service to generate identity for.
     * 
     * ***
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return The service to generate identity for.
     * 
     * ***
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    private ServiceIdentityArgs() {}

    private ServiceIdentityArgs(ServiceIdentityArgs $) {
        this.folder = $.folder;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceIdentityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceIdentityArgs $;

        public Builder() {
            $ = new ServiceIdentityArgs();
        }

        public Builder(ServiceIdentityArgs defaults) {
            $ = new ServiceIdentityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param folder The folder in which the resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder folder(Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The folder in which the resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param service The service to generate identity for.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The service to generate identity for.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public ServiceIdentityArgs build() {
            if ($.folder == null) {
                throw new MissingRequiredPropertyException("ServiceIdentityArgs", "folder");
            }
            if ($.service == null) {
                throw new MissingRequiredPropertyException("ServiceIdentityArgs", "service");
            }
            return $;
        }
    }

}
