// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfigPostgresqlSourceConfigExcludeObjects;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfigPostgresqlSourceConfigIncludeObjects;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StreamSourceConfigPostgresqlSourceConfig {
    /**
     * @return PostgreSQL objects to exclude from the stream.
     * Structure is documented below.
     * 
     */
    private @Nullable StreamSourceConfigPostgresqlSourceConfigExcludeObjects excludeObjects;
    /**
     * @return PostgreSQL objects to retrieve from the source.
     * Structure is documented below.
     * 
     */
    private @Nullable StreamSourceConfigPostgresqlSourceConfigIncludeObjects includeObjects;
    /**
     * @return Maximum number of concurrent backfill tasks. The number should be non
     * negative. If not set (or set to 0), the system&#39;s default value will be used.
     * 
     */
    private @Nullable Integer maxConcurrentBackfillTasks;
    /**
     * @return The name of the publication that includes the set of all tables
     * that are defined in the stream&#39;s include_objects.
     * 
     */
    private String publication;
    /**
     * @return The name of the logical replication slot that&#39;s configured with
     * the pgoutput plugin.
     * 
     */
    private String replicationSlot;

    private StreamSourceConfigPostgresqlSourceConfig() {}
    /**
     * @return PostgreSQL objects to exclude from the stream.
     * Structure is documented below.
     * 
     */
    public Optional<StreamSourceConfigPostgresqlSourceConfigExcludeObjects> excludeObjects() {
        return Optional.ofNullable(this.excludeObjects);
    }
    /**
     * @return PostgreSQL objects to retrieve from the source.
     * Structure is documented below.
     * 
     */
    public Optional<StreamSourceConfigPostgresqlSourceConfigIncludeObjects> includeObjects() {
        return Optional.ofNullable(this.includeObjects);
    }
    /**
     * @return Maximum number of concurrent backfill tasks. The number should be non
     * negative. If not set (or set to 0), the system&#39;s default value will be used.
     * 
     */
    public Optional<Integer> maxConcurrentBackfillTasks() {
        return Optional.ofNullable(this.maxConcurrentBackfillTasks);
    }
    /**
     * @return The name of the publication that includes the set of all tables
     * that are defined in the stream&#39;s include_objects.
     * 
     */
    public String publication() {
        return this.publication;
    }
    /**
     * @return The name of the logical replication slot that&#39;s configured with
     * the pgoutput plugin.
     * 
     */
    public String replicationSlot() {
        return this.replicationSlot;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamSourceConfigPostgresqlSourceConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable StreamSourceConfigPostgresqlSourceConfigExcludeObjects excludeObjects;
        private @Nullable StreamSourceConfigPostgresqlSourceConfigIncludeObjects includeObjects;
        private @Nullable Integer maxConcurrentBackfillTasks;
        private String publication;
        private String replicationSlot;
        public Builder() {}
        public Builder(StreamSourceConfigPostgresqlSourceConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludeObjects = defaults.excludeObjects;
    	      this.includeObjects = defaults.includeObjects;
    	      this.maxConcurrentBackfillTasks = defaults.maxConcurrentBackfillTasks;
    	      this.publication = defaults.publication;
    	      this.replicationSlot = defaults.replicationSlot;
        }

        @CustomType.Setter
        public Builder excludeObjects(@Nullable StreamSourceConfigPostgresqlSourceConfigExcludeObjects excludeObjects) {

            this.excludeObjects = excludeObjects;
            return this;
        }
        @CustomType.Setter
        public Builder includeObjects(@Nullable StreamSourceConfigPostgresqlSourceConfigIncludeObjects includeObjects) {

            this.includeObjects = includeObjects;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentBackfillTasks(@Nullable Integer maxConcurrentBackfillTasks) {

            this.maxConcurrentBackfillTasks = maxConcurrentBackfillTasks;
            return this;
        }
        @CustomType.Setter
        public Builder publication(String publication) {
            if (publication == null) {
              throw new MissingRequiredPropertyException("StreamSourceConfigPostgresqlSourceConfig", "publication");
            }
            this.publication = publication;
            return this;
        }
        @CustomType.Setter
        public Builder replicationSlot(String replicationSlot) {
            if (replicationSlot == null) {
              throw new MissingRequiredPropertyException("StreamSourceConfigPostgresqlSourceConfig", "replicationSlot");
            }
            this.replicationSlot = replicationSlot;
            return this;
        }
        public StreamSourceConfigPostgresqlSourceConfig build() {
            final var _resultValue = new StreamSourceConfigPostgresqlSourceConfig();
            _resultValue.excludeObjects = excludeObjects;
            _resultValue.includeObjects = includeObjects;
            _resultValue.maxConcurrentBackfillTasks = maxConcurrentBackfillTasks;
            _resultValue.publication = publication;
            _resultValue.replicationSlot = replicationSlot;
            return _resultValue;
        }
    }
}
