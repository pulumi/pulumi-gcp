// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDataSourceReferencesDataSourceReference {
    /**
     * @return The state of the backup config for the data source.
     * 
     */
    private String backupConfigState;
    /**
     * @return The number of backups for the data source.
     * 
     */
    private Integer backupCount;
    /**
     * @return The underlying data source resource.
     * 
     */
    private String dataSource;
    /**
     * @return The GCP resource name for the data source.
     * 
     */
    private String gcpResourceName;
    /**
     * @return The state of the last backup.
     * 
     */
    private String lastBackupState;
    /**
     * @return The last time a successful backup was made.
     * 
     */
    private String lastSuccessfulBackupTime;
    private String name;
    /**
     * @return - (Required) The resource type to get the data source references for. Examples include, &#34;sqladmin.googleapis.com/Instance&#34; , &#34;compute.googleapis.com/Instance&#34; (right now this service not available for compute Instances , it will be added soon )
     * 
     */
    private String resourceType;

    private GetDataSourceReferencesDataSourceReference() {}
    /**
     * @return The state of the backup config for the data source.
     * 
     */
    public String backupConfigState() {
        return this.backupConfigState;
    }
    /**
     * @return The number of backups for the data source.
     * 
     */
    public Integer backupCount() {
        return this.backupCount;
    }
    /**
     * @return The underlying data source resource.
     * 
     */
    public String dataSource() {
        return this.dataSource;
    }
    /**
     * @return The GCP resource name for the data source.
     * 
     */
    public String gcpResourceName() {
        return this.gcpResourceName;
    }
    /**
     * @return The state of the last backup.
     * 
     */
    public String lastBackupState() {
        return this.lastBackupState;
    }
    /**
     * @return The last time a successful backup was made.
     * 
     */
    public String lastSuccessfulBackupTime() {
        return this.lastSuccessfulBackupTime;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return - (Required) The resource type to get the data source references for. Examples include, &#34;sqladmin.googleapis.com/Instance&#34; , &#34;compute.googleapis.com/Instance&#34; (right now this service not available for compute Instances , it will be added soon )
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSourceReferencesDataSourceReference defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupConfigState;
        private Integer backupCount;
        private String dataSource;
        private String gcpResourceName;
        private String lastBackupState;
        private String lastSuccessfulBackupTime;
        private String name;
        private String resourceType;
        public Builder() {}
        public Builder(GetDataSourceReferencesDataSourceReference defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupConfigState = defaults.backupConfigState;
    	      this.backupCount = defaults.backupCount;
    	      this.dataSource = defaults.dataSource;
    	      this.gcpResourceName = defaults.gcpResourceName;
    	      this.lastBackupState = defaults.lastBackupState;
    	      this.lastSuccessfulBackupTime = defaults.lastSuccessfulBackupTime;
    	      this.name = defaults.name;
    	      this.resourceType = defaults.resourceType;
        }

        @CustomType.Setter
        public Builder backupConfigState(String backupConfigState) {
            if (backupConfigState == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesDataSourceReference", "backupConfigState");
            }
            this.backupConfigState = backupConfigState;
            return this;
        }
        @CustomType.Setter
        public Builder backupCount(Integer backupCount) {
            if (backupCount == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesDataSourceReference", "backupCount");
            }
            this.backupCount = backupCount;
            return this;
        }
        @CustomType.Setter
        public Builder dataSource(String dataSource) {
            if (dataSource == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesDataSourceReference", "dataSource");
            }
            this.dataSource = dataSource;
            return this;
        }
        @CustomType.Setter
        public Builder gcpResourceName(String gcpResourceName) {
            if (gcpResourceName == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesDataSourceReference", "gcpResourceName");
            }
            this.gcpResourceName = gcpResourceName;
            return this;
        }
        @CustomType.Setter
        public Builder lastBackupState(String lastBackupState) {
            if (lastBackupState == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesDataSourceReference", "lastBackupState");
            }
            this.lastBackupState = lastBackupState;
            return this;
        }
        @CustomType.Setter
        public Builder lastSuccessfulBackupTime(String lastSuccessfulBackupTime) {
            if (lastSuccessfulBackupTime == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesDataSourceReference", "lastSuccessfulBackupTime");
            }
            this.lastSuccessfulBackupTime = lastSuccessfulBackupTime;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesDataSourceReference", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesDataSourceReference", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        public GetDataSourceReferencesDataSourceReference build() {
            final var _resultValue = new GetDataSourceReferencesDataSourceReference();
            _resultValue.backupConfigState = backupConfigState;
            _resultValue.backupCount = backupCount;
            _resultValue.dataSource = dataSource;
            _resultValue.gcpResourceName = gcpResourceName;
            _resultValue.lastBackupState = lastBackupState;
            _resultValue.lastSuccessfulBackupTime = lastSuccessfulBackupTime;
            _resultValue.name = name;
            _resultValue.resourceType = resourceType;
            return _resultValue;
        }
    }
}
