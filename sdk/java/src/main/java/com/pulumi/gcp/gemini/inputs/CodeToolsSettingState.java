// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gemini.inputs.CodeToolsSettingEnabledToolArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CodeToolsSettingState extends com.pulumi.resources.ResourceArgs {

    public static final CodeToolsSettingState Empty = new CodeToolsSettingState();

    /**
     * Id of the Code Tools Setting.
     * 
     */
    @Import(name="codeToolsSettingId")
    private @Nullable Output<String> codeToolsSettingId;

    /**
     * @return Id of the Code Tools Setting.
     * 
     */
    public Optional<Output<String>> codeToolsSettingId() {
        return Optional.ofNullable(this.codeToolsSettingId);
    }

    /**
     * Create time stamp.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Create time stamp.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * Represents the full set of enabled tools.
     * Structure is documented below.
     * 
     */
    @Import(name="enabledTools")
    private @Nullable Output<List<CodeToolsSettingEnabledToolArgs>> enabledTools;

    /**
     * @return Represents the full set of enabled tools.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<CodeToolsSettingEnabledToolArgs>>> enabledTools() {
        return Optional.ofNullable(this.enabledTools);
    }

    /**
     * Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource &#39;name&#39;. It identifies the resource within its parent collection as described in
     * https://google.aip.dev/122.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource ID segment making up resource &#39;name&#39;. It identifies the resource within its parent collection as described in
     * https://google.aip.dev/122.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Identifier. Name of the resource.
     * Format:projects/{project}/locations/{location}/codeToolsSettings/{codeToolsSetting}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. Name of the resource.
     * Format:projects/{project}/locations/{location}/codeToolsSettings/{codeToolsSetting}
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Update time stamp.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Update time stamp.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private CodeToolsSettingState() {}

    private CodeToolsSettingState(CodeToolsSettingState $) {
        this.codeToolsSettingId = $.codeToolsSettingId;
        this.createTime = $.createTime;
        this.effectiveLabels = $.effectiveLabels;
        this.enabledTools = $.enabledTools;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CodeToolsSettingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CodeToolsSettingState $;

        public Builder() {
            $ = new CodeToolsSettingState();
        }

        public Builder(CodeToolsSettingState defaults) {
            $ = new CodeToolsSettingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param codeToolsSettingId Id of the Code Tools Setting.
         * 
         * @return builder
         * 
         */
        public Builder codeToolsSettingId(@Nullable Output<String> codeToolsSettingId) {
            $.codeToolsSettingId = codeToolsSettingId;
            return this;
        }

        /**
         * @param codeToolsSettingId Id of the Code Tools Setting.
         * 
         * @return builder
         * 
         */
        public Builder codeToolsSettingId(String codeToolsSettingId) {
            return codeToolsSettingId(Output.of(codeToolsSettingId));
        }

        /**
         * @param createTime Create time stamp.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Create time stamp.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param enabledTools Represents the full set of enabled tools.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enabledTools(@Nullable Output<List<CodeToolsSettingEnabledToolArgs>> enabledTools) {
            $.enabledTools = enabledTools;
            return this;
        }

        /**
         * @param enabledTools Represents the full set of enabled tools.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enabledTools(List<CodeToolsSettingEnabledToolArgs> enabledTools) {
            return enabledTools(Output.of(enabledTools));
        }

        /**
         * @param enabledTools Represents the full set of enabled tools.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enabledTools(CodeToolsSettingEnabledToolArgs... enabledTools) {
            return enabledTools(List.of(enabledTools));
        }

        /**
         * @param labels Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present in your
         * configuration. Please refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present in your
         * configuration. Please refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource &#39;name&#39;. It identifies the resource within its parent collection as described in
         * https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource &#39;name&#39;. It identifies the resource within its parent collection as described in
         * https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Identifier. Name of the resource.
         * Format:projects/{project}/locations/{location}/codeToolsSettings/{codeToolsSetting}
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. Name of the resource.
         * Format:projects/{project}/locations/{location}/codeToolsSettings/{codeToolsSetting}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param updateTime Update time stamp.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Update time stamp.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public CodeToolsSettingState build() {
            return $;
        }
    }

}
