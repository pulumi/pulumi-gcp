// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolNodeConfigKubeletConfigEvictionSoftArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolNodeConfigKubeletConfigEvictionSoftArgs Empty = new NodePoolNodeConfigKubeletConfigEvictionSoftArgs();

    /**
     * Defines percentage of soft eviction threshold for imagefs.available.
     * 
     */
    @Import(name="imagefsAvailable")
    private @Nullable Output<String> imagefsAvailable;

    /**
     * @return Defines percentage of soft eviction threshold for imagefs.available.
     * 
     */
    public Optional<Output<String>> imagefsAvailable() {
        return Optional.ofNullable(this.imagefsAvailable);
    }

    /**
     * Defines percentage of soft eviction threshold for imagefs.inodesFree.
     * 
     */
    @Import(name="imagefsInodesFree")
    private @Nullable Output<String> imagefsInodesFree;

    /**
     * @return Defines percentage of soft eviction threshold for imagefs.inodesFree.
     * 
     */
    public Optional<Output<String>> imagefsInodesFree() {
        return Optional.ofNullable(this.imagefsInodesFree);
    }

    /**
     * Defines quantity of soft eviction threshold for memory.available.
     * 
     */
    @Import(name="memoryAvailable")
    private @Nullable Output<String> memoryAvailable;

    /**
     * @return Defines quantity of soft eviction threshold for memory.available.
     * 
     */
    public Optional<Output<String>> memoryAvailable() {
        return Optional.ofNullable(this.memoryAvailable);
    }

    /**
     * Defines percentage of soft eviction threshold for nodefs.available.
     * 
     */
    @Import(name="nodefsAvailable")
    private @Nullable Output<String> nodefsAvailable;

    /**
     * @return Defines percentage of soft eviction threshold for nodefs.available.
     * 
     */
    public Optional<Output<String>> nodefsAvailable() {
        return Optional.ofNullable(this.nodefsAvailable);
    }

    /**
     * Defines percentage of soft eviction threshold for nodefs.inodesFree.
     * 
     */
    @Import(name="nodefsInodesFree")
    private @Nullable Output<String> nodefsInodesFree;

    /**
     * @return Defines percentage of soft eviction threshold for nodefs.inodesFree.
     * 
     */
    public Optional<Output<String>> nodefsInodesFree() {
        return Optional.ofNullable(this.nodefsInodesFree);
    }

    /**
     * Defines percentage of soft eviction threshold for pid.available.
     * 
     */
    @Import(name="pidAvailable")
    private @Nullable Output<String> pidAvailable;

    /**
     * @return Defines percentage of soft eviction threshold for pid.available.
     * 
     */
    public Optional<Output<String>> pidAvailable() {
        return Optional.ofNullable(this.pidAvailable);
    }

    private NodePoolNodeConfigKubeletConfigEvictionSoftArgs() {}

    private NodePoolNodeConfigKubeletConfigEvictionSoftArgs(NodePoolNodeConfigKubeletConfigEvictionSoftArgs $) {
        this.imagefsAvailable = $.imagefsAvailable;
        this.imagefsInodesFree = $.imagefsInodesFree;
        this.memoryAvailable = $.memoryAvailable;
        this.nodefsAvailable = $.nodefsAvailable;
        this.nodefsInodesFree = $.nodefsInodesFree;
        this.pidAvailable = $.pidAvailable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolNodeConfigKubeletConfigEvictionSoftArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolNodeConfigKubeletConfigEvictionSoftArgs $;

        public Builder() {
            $ = new NodePoolNodeConfigKubeletConfigEvictionSoftArgs();
        }

        public Builder(NodePoolNodeConfigKubeletConfigEvictionSoftArgs defaults) {
            $ = new NodePoolNodeConfigKubeletConfigEvictionSoftArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param imagefsAvailable Defines percentage of soft eviction threshold for imagefs.available.
         * 
         * @return builder
         * 
         */
        public Builder imagefsAvailable(@Nullable Output<String> imagefsAvailable) {
            $.imagefsAvailable = imagefsAvailable;
            return this;
        }

        /**
         * @param imagefsAvailable Defines percentage of soft eviction threshold for imagefs.available.
         * 
         * @return builder
         * 
         */
        public Builder imagefsAvailable(String imagefsAvailable) {
            return imagefsAvailable(Output.of(imagefsAvailable));
        }

        /**
         * @param imagefsInodesFree Defines percentage of soft eviction threshold for imagefs.inodesFree.
         * 
         * @return builder
         * 
         */
        public Builder imagefsInodesFree(@Nullable Output<String> imagefsInodesFree) {
            $.imagefsInodesFree = imagefsInodesFree;
            return this;
        }

        /**
         * @param imagefsInodesFree Defines percentage of soft eviction threshold for imagefs.inodesFree.
         * 
         * @return builder
         * 
         */
        public Builder imagefsInodesFree(String imagefsInodesFree) {
            return imagefsInodesFree(Output.of(imagefsInodesFree));
        }

        /**
         * @param memoryAvailable Defines quantity of soft eviction threshold for memory.available.
         * 
         * @return builder
         * 
         */
        public Builder memoryAvailable(@Nullable Output<String> memoryAvailable) {
            $.memoryAvailable = memoryAvailable;
            return this;
        }

        /**
         * @param memoryAvailable Defines quantity of soft eviction threshold for memory.available.
         * 
         * @return builder
         * 
         */
        public Builder memoryAvailable(String memoryAvailable) {
            return memoryAvailable(Output.of(memoryAvailable));
        }

        /**
         * @param nodefsAvailable Defines percentage of soft eviction threshold for nodefs.available.
         * 
         * @return builder
         * 
         */
        public Builder nodefsAvailable(@Nullable Output<String> nodefsAvailable) {
            $.nodefsAvailable = nodefsAvailable;
            return this;
        }

        /**
         * @param nodefsAvailable Defines percentage of soft eviction threshold for nodefs.available.
         * 
         * @return builder
         * 
         */
        public Builder nodefsAvailable(String nodefsAvailable) {
            return nodefsAvailable(Output.of(nodefsAvailable));
        }

        /**
         * @param nodefsInodesFree Defines percentage of soft eviction threshold for nodefs.inodesFree.
         * 
         * @return builder
         * 
         */
        public Builder nodefsInodesFree(@Nullable Output<String> nodefsInodesFree) {
            $.nodefsInodesFree = nodefsInodesFree;
            return this;
        }

        /**
         * @param nodefsInodesFree Defines percentage of soft eviction threshold for nodefs.inodesFree.
         * 
         * @return builder
         * 
         */
        public Builder nodefsInodesFree(String nodefsInodesFree) {
            return nodefsInodesFree(Output.of(nodefsInodesFree));
        }

        /**
         * @param pidAvailable Defines percentage of soft eviction threshold for pid.available.
         * 
         * @return builder
         * 
         */
        public Builder pidAvailable(@Nullable Output<String> pidAvailable) {
            $.pidAvailable = pidAvailable;
            return this;
        }

        /**
         * @param pidAvailable Defines percentage of soft eviction threshold for pid.available.
         * 
         * @return builder
         * 
         */
        public Builder pidAvailable(String pidAvailable) {
            return pidAvailable(Output.of(pidAvailable));
        }

        public NodePoolNodeConfigKubeletConfigEvictionSoftArgs build() {
            return $;
        }
    }

}
