// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.kms.inputs.CryptoKeyVersionExternalProtectionLevelOptionsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CryptoKeyVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final CryptoKeyVersionArgs Empty = new CryptoKeyVersionArgs();

    /**
     * The name of the cryptoKey associated with the CryptoKeyVersions.
     * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}&#39;`
     * 
     * ***
     * 
     */
    @Import(name="cryptoKey", required=true)
    private Output<String> cryptoKey;

    /**
     * @return The name of the cryptoKey associated with the CryptoKeyVersions.
     * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}&#39;`
     * 
     * ***
     * 
     */
    public Output<String> cryptoKey() {
        return this.cryptoKey;
    }

    /**
     * ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
     * Structure is documented below.
     * 
     */
    @Import(name="externalProtectionLevelOptions")
    private @Nullable Output<CryptoKeyVersionExternalProtectionLevelOptionsArgs> externalProtectionLevelOptions;

    /**
     * @return ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CryptoKeyVersionExternalProtectionLevelOptionsArgs>> externalProtectionLevelOptions() {
        return Optional.ofNullable(this.externalProtectionLevelOptions);
    }

    /**
     * The current state of the CryptoKeyVersion.
     * Possible values are: `PENDING_GENERATION`, `ENABLED`, `DISABLED`, `DESTROYED`, `DESTROY_SCHEDULED`, `PENDING_IMPORT`, `IMPORT_FAILED`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the CryptoKeyVersion.
     * Possible values are: `PENDING_GENERATION`, `ENABLED`, `DISABLED`, `DESTROYED`, `DESTROY_SCHEDULED`, `PENDING_IMPORT`, `IMPORT_FAILED`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private CryptoKeyVersionArgs() {}

    private CryptoKeyVersionArgs(CryptoKeyVersionArgs $) {
        this.cryptoKey = $.cryptoKey;
        this.externalProtectionLevelOptions = $.externalProtectionLevelOptions;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CryptoKeyVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CryptoKeyVersionArgs $;

        public Builder() {
            $ = new CryptoKeyVersionArgs();
        }

        public Builder(CryptoKeyVersionArgs defaults) {
            $ = new CryptoKeyVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cryptoKey The name of the cryptoKey associated with the CryptoKeyVersions.
         * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}&#39;`
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(Output<String> cryptoKey) {
            $.cryptoKey = cryptoKey;
            return this;
        }

        /**
         * @param cryptoKey The name of the cryptoKey associated with the CryptoKeyVersions.
         * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}&#39;`
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(String cryptoKey) {
            return cryptoKey(Output.of(cryptoKey));
        }

        /**
         * @param externalProtectionLevelOptions ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder externalProtectionLevelOptions(@Nullable Output<CryptoKeyVersionExternalProtectionLevelOptionsArgs> externalProtectionLevelOptions) {
            $.externalProtectionLevelOptions = externalProtectionLevelOptions;
            return this;
        }

        /**
         * @param externalProtectionLevelOptions ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder externalProtectionLevelOptions(CryptoKeyVersionExternalProtectionLevelOptionsArgs externalProtectionLevelOptions) {
            return externalProtectionLevelOptions(Output.of(externalProtectionLevelOptions));
        }

        /**
         * @param state The current state of the CryptoKeyVersion.
         * Possible values are: `PENDING_GENERATION`, `ENABLED`, `DISABLED`, `DESTROYED`, `DESTROY_SCHEDULED`, `PENDING_IMPORT`, `IMPORT_FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the CryptoKeyVersion.
         * Possible values are: `PENDING_GENERATION`, `ENABLED`, `DISABLED`, `DESTROYED`, `DESTROY_SCHEDULED`, `PENDING_IMPORT`, `IMPORT_FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public CryptoKeyVersionArgs build() {
            if ($.cryptoKey == null) {
                throw new MissingRequiredPropertyException("CryptoKeyVersionArgs", "cryptoKey");
            }
            return $;
        }
    }

}
