// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.discoveryengine.inputs.RecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigArgs;
import com.pulumi.gcp.discoveryengine.inputs.RecommendationEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecommendationEngineMediaRecommendationEngineConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecommendationEngineMediaRecommendationEngineConfigArgs Empty = new RecommendationEngineMediaRecommendationEngineConfigArgs();

    /**
     * More feature configs of the selected engine type.
     * Structure is documented below.
     * 
     */
    @Import(name="engineFeaturesConfig")
    private @Nullable Output<RecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigArgs> engineFeaturesConfig;

    /**
     * @return More feature configs of the selected engine type.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigArgs>> engineFeaturesConfig() {
        return Optional.ofNullable(this.engineFeaturesConfig);
    }

    /**
     * The optimization objective. e.g., `cvr`.
     * This field together with MediaRecommendationEngineConfig.type describes
     * engine metadata to use to control engine training and serving.
     * Currently supported values: `ctr`, `cvr`.
     * If not specified, we choose default based on engine type. Default depends on type of recommendation:
     * `recommended-for-you` =&gt; `ctr`
     * `others-you-may-like` =&gt; `ctr`
     * 
     */
    @Import(name="optimizationObjective")
    private @Nullable Output<String> optimizationObjective;

    /**
     * @return The optimization objective. e.g., `cvr`.
     * This field together with MediaRecommendationEngineConfig.type describes
     * engine metadata to use to control engine training and serving.
     * Currently supported values: `ctr`, `cvr`.
     * If not specified, we choose default based on engine type. Default depends on type of recommendation:
     * `recommended-for-you` =&gt; `ctr`
     * `others-you-may-like` =&gt; `ctr`
     * 
     */
    public Optional<Output<String>> optimizationObjective() {
        return Optional.ofNullable(this.optimizationObjective);
    }

    /**
     * Name and value of the custom threshold for cvr optimization_objective.
     * For target_field `watch-time`, target_field_value must be an integer
     * value indicating the media progress time in seconds between (0, 86400]
     * (excludes 0, includes 86400) (e.g., 90).
     * For target_field `watch-percentage`, the target_field_value must be a
     * valid float value between (0, 1.0] (excludes 0, includes 1.0) (e.g., 0.5).
     * Structure is documented below.
     * 
     */
    @Import(name="optimizationObjectiveConfig")
    private @Nullable Output<RecommendationEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigArgs> optimizationObjectiveConfig;

    /**
     * @return Name and value of the custom threshold for cvr optimization_objective.
     * For target_field `watch-time`, target_field_value must be an integer
     * value indicating the media progress time in seconds between (0, 86400]
     * (excludes 0, includes 86400) (e.g., 90).
     * For target_field `watch-percentage`, the target_field_value must be a
     * valid float value between (0, 1.0] (excludes 0, includes 1.0) (e.g., 0.5).
     * Structure is documented below.
     * 
     */
    public Optional<Output<RecommendationEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigArgs>> optimizationObjectiveConfig() {
        return Optional.ofNullable(this.optimizationObjectiveConfig);
    }

    /**
     * The training state that the engine is in (e.g. `TRAINING` or `PAUSED`).
     * Since part of the cost of running the service
     * is frequency of training - this can be used to determine when to train
     * engine in order to control cost. If not specified: the default value for
     * `CreateEngine` method is `TRAINING`. The default value for
     * `UpdateEngine` method is to keep the state the same as before.
     * Possible values are: `PAUSED`, `TRAINING`.
     * 
     */
    @Import(name="trainingState")
    private @Nullable Output<String> trainingState;

    /**
     * @return The training state that the engine is in (e.g. `TRAINING` or `PAUSED`).
     * Since part of the cost of running the service
     * is frequency of training - this can be used to determine when to train
     * engine in order to control cost. If not specified: the default value for
     * `CreateEngine` method is `TRAINING`. The default value for
     * `UpdateEngine` method is to keep the state the same as before.
     * Possible values are: `PAUSED`, `TRAINING`.
     * 
     */
    public Optional<Output<String>> trainingState() {
        return Optional.ofNullable(this.trainingState);
    }

    /**
     * The type of engine. e.g., `recommended-for-you`.
     * This field together with MediaRecommendationEngineConfig.optimizationObjective describes
     * engine metadata to use to control engine training and serving.
     * Currently supported values: `recommended-for-you`, `others-you-may-like`,
     * `more-like-this`, `most-popular-items`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of engine. e.g., `recommended-for-you`.
     * This field together with MediaRecommendationEngineConfig.optimizationObjective describes
     * engine metadata to use to control engine training and serving.
     * Currently supported values: `recommended-for-you`, `others-you-may-like`,
     * `more-like-this`, `most-popular-items`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RecommendationEngineMediaRecommendationEngineConfigArgs() {}

    private RecommendationEngineMediaRecommendationEngineConfigArgs(RecommendationEngineMediaRecommendationEngineConfigArgs $) {
        this.engineFeaturesConfig = $.engineFeaturesConfig;
        this.optimizationObjective = $.optimizationObjective;
        this.optimizationObjectiveConfig = $.optimizationObjectiveConfig;
        this.trainingState = $.trainingState;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecommendationEngineMediaRecommendationEngineConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecommendationEngineMediaRecommendationEngineConfigArgs $;

        public Builder() {
            $ = new RecommendationEngineMediaRecommendationEngineConfigArgs();
        }

        public Builder(RecommendationEngineMediaRecommendationEngineConfigArgs defaults) {
            $ = new RecommendationEngineMediaRecommendationEngineConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param engineFeaturesConfig More feature configs of the selected engine type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder engineFeaturesConfig(@Nullable Output<RecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigArgs> engineFeaturesConfig) {
            $.engineFeaturesConfig = engineFeaturesConfig;
            return this;
        }

        /**
         * @param engineFeaturesConfig More feature configs of the selected engine type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder engineFeaturesConfig(RecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigArgs engineFeaturesConfig) {
            return engineFeaturesConfig(Output.of(engineFeaturesConfig));
        }

        /**
         * @param optimizationObjective The optimization objective. e.g., `cvr`.
         * This field together with MediaRecommendationEngineConfig.type describes
         * engine metadata to use to control engine training and serving.
         * Currently supported values: `ctr`, `cvr`.
         * If not specified, we choose default based on engine type. Default depends on type of recommendation:
         * `recommended-for-you` =&gt; `ctr`
         * `others-you-may-like` =&gt; `ctr`
         * 
         * @return builder
         * 
         */
        public Builder optimizationObjective(@Nullable Output<String> optimizationObjective) {
            $.optimizationObjective = optimizationObjective;
            return this;
        }

        /**
         * @param optimizationObjective The optimization objective. e.g., `cvr`.
         * This field together with MediaRecommendationEngineConfig.type describes
         * engine metadata to use to control engine training and serving.
         * Currently supported values: `ctr`, `cvr`.
         * If not specified, we choose default based on engine type. Default depends on type of recommendation:
         * `recommended-for-you` =&gt; `ctr`
         * `others-you-may-like` =&gt; `ctr`
         * 
         * @return builder
         * 
         */
        public Builder optimizationObjective(String optimizationObjective) {
            return optimizationObjective(Output.of(optimizationObjective));
        }

        /**
         * @param optimizationObjectiveConfig Name and value of the custom threshold for cvr optimization_objective.
         * For target_field `watch-time`, target_field_value must be an integer
         * value indicating the media progress time in seconds between (0, 86400]
         * (excludes 0, includes 86400) (e.g., 90).
         * For target_field `watch-percentage`, the target_field_value must be a
         * valid float value between (0, 1.0] (excludes 0, includes 1.0) (e.g., 0.5).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder optimizationObjectiveConfig(@Nullable Output<RecommendationEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigArgs> optimizationObjectiveConfig) {
            $.optimizationObjectiveConfig = optimizationObjectiveConfig;
            return this;
        }

        /**
         * @param optimizationObjectiveConfig Name and value of the custom threshold for cvr optimization_objective.
         * For target_field `watch-time`, target_field_value must be an integer
         * value indicating the media progress time in seconds between (0, 86400]
         * (excludes 0, includes 86400) (e.g., 90).
         * For target_field `watch-percentage`, the target_field_value must be a
         * valid float value between (0, 1.0] (excludes 0, includes 1.0) (e.g., 0.5).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder optimizationObjectiveConfig(RecommendationEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigArgs optimizationObjectiveConfig) {
            return optimizationObjectiveConfig(Output.of(optimizationObjectiveConfig));
        }

        /**
         * @param trainingState The training state that the engine is in (e.g. `TRAINING` or `PAUSED`).
         * Since part of the cost of running the service
         * is frequency of training - this can be used to determine when to train
         * engine in order to control cost. If not specified: the default value for
         * `CreateEngine` method is `TRAINING`. The default value for
         * `UpdateEngine` method is to keep the state the same as before.
         * Possible values are: `PAUSED`, `TRAINING`.
         * 
         * @return builder
         * 
         */
        public Builder trainingState(@Nullable Output<String> trainingState) {
            $.trainingState = trainingState;
            return this;
        }

        /**
         * @param trainingState The training state that the engine is in (e.g. `TRAINING` or `PAUSED`).
         * Since part of the cost of running the service
         * is frequency of training - this can be used to determine when to train
         * engine in order to control cost. If not specified: the default value for
         * `CreateEngine` method is `TRAINING`. The default value for
         * `UpdateEngine` method is to keep the state the same as before.
         * Possible values are: `PAUSED`, `TRAINING`.
         * 
         * @return builder
         * 
         */
        public Builder trainingState(String trainingState) {
            return trainingState(Output.of(trainingState));
        }

        /**
         * @param type The type of engine. e.g., `recommended-for-you`.
         * This field together with MediaRecommendationEngineConfig.optimizationObjective describes
         * engine metadata to use to control engine training and serving.
         * Currently supported values: `recommended-for-you`, `others-you-may-like`,
         * `more-like-this`, `most-popular-items`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of engine. e.g., `recommended-for-you`.
         * This field together with MediaRecommendationEngineConfig.optimizationObjective describes
         * engine metadata to use to control engine training and serving.
         * Currently supported values: `recommended-for-you`, `others-you-may-like`,
         * `more-like-this`, `most-popular-items`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RecommendationEngineMediaRecommendationEngineConfigArgs build() {
            return $;
        }
    }

}
