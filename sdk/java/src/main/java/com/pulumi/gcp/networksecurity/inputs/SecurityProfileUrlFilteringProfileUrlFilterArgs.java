// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityProfileUrlFilteringProfileUrlFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityProfileUrlFilteringProfileUrlFilterArgs Empty = new SecurityProfileUrlFilteringProfileUrlFilterArgs();

    /**
     * The action to take when the filter is applied.
     * Possible values are: `ALLOW`, `DENY`.
     * 
     */
    @Import(name="filteringAction", required=true)
    private Output<String> filteringAction;

    /**
     * @return The action to take when the filter is applied.
     * Possible values are: `ALLOW`, `DENY`.
     * 
     */
    public Output<String> filteringAction() {
        return this.filteringAction;
    }

    /**
     * The priority of the filter within the URL filtering profile.
     * Must be an integer from 0 and 2147483647, inclusive. Lower integers indicate higher priorities.
     * The priority of a filter must be unique within a URL filtering profile.
     * 
     */
    @Import(name="priority", required=true)
    private Output<Integer> priority;

    /**
     * @return The priority of the filter within the URL filtering profile.
     * Must be an integer from 0 and 2147483647, inclusive. Lower integers indicate higher priorities.
     * The priority of a filter must be unique within a URL filtering profile.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * A list of domain matcher strings that a domain name gets compared with to determine if the filter is applicable.
     * A domain name must match with at least one of the strings in the list for a filter to be applicable.
     * 
     */
    @Import(name="urls")
    private @Nullable Output<List<String>> urls;

    /**
     * @return A list of domain matcher strings that a domain name gets compared with to determine if the filter is applicable.
     * A domain name must match with at least one of the strings in the list for a filter to be applicable.
     * 
     */
    public Optional<Output<List<String>>> urls() {
        return Optional.ofNullable(this.urls);
    }

    private SecurityProfileUrlFilteringProfileUrlFilterArgs() {}

    private SecurityProfileUrlFilteringProfileUrlFilterArgs(SecurityProfileUrlFilteringProfileUrlFilterArgs $) {
        this.filteringAction = $.filteringAction;
        this.priority = $.priority;
        this.urls = $.urls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityProfileUrlFilteringProfileUrlFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityProfileUrlFilteringProfileUrlFilterArgs $;

        public Builder() {
            $ = new SecurityProfileUrlFilteringProfileUrlFilterArgs();
        }

        public Builder(SecurityProfileUrlFilteringProfileUrlFilterArgs defaults) {
            $ = new SecurityProfileUrlFilteringProfileUrlFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filteringAction The action to take when the filter is applied.
         * Possible values are: `ALLOW`, `DENY`.
         * 
         * @return builder
         * 
         */
        public Builder filteringAction(Output<String> filteringAction) {
            $.filteringAction = filteringAction;
            return this;
        }

        /**
         * @param filteringAction The action to take when the filter is applied.
         * Possible values are: `ALLOW`, `DENY`.
         * 
         * @return builder
         * 
         */
        public Builder filteringAction(String filteringAction) {
            return filteringAction(Output.of(filteringAction));
        }

        /**
         * @param priority The priority of the filter within the URL filtering profile.
         * Must be an integer from 0 and 2147483647, inclusive. Lower integers indicate higher priorities.
         * The priority of a filter must be unique within a URL filtering profile.
         * 
         * @return builder
         * 
         */
        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the filter within the URL filtering profile.
         * Must be an integer from 0 and 2147483647, inclusive. Lower integers indicate higher priorities.
         * The priority of a filter must be unique within a URL filtering profile.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param urls A list of domain matcher strings that a domain name gets compared with to determine if the filter is applicable.
         * A domain name must match with at least one of the strings in the list for a filter to be applicable.
         * 
         * @return builder
         * 
         */
        public Builder urls(@Nullable Output<List<String>> urls) {
            $.urls = urls;
            return this;
        }

        /**
         * @param urls A list of domain matcher strings that a domain name gets compared with to determine if the filter is applicable.
         * A domain name must match with at least one of the strings in the list for a filter to be applicable.
         * 
         * @return builder
         * 
         */
        public Builder urls(List<String> urls) {
            return urls(Output.of(urls));
        }

        /**
         * @param urls A list of domain matcher strings that a domain name gets compared with to determine if the filter is applicable.
         * A domain name must match with at least one of the strings in the list for a filter to be applicable.
         * 
         * @return builder
         * 
         */
        public Builder urls(String... urls) {
            return urls(List.of(urls));
        }

        public SecurityProfileUrlFilteringProfileUrlFilterArgs build() {
            if ($.filteringAction == null) {
                throw new MissingRequiredPropertyException("SecurityProfileUrlFilteringProfileUrlFilterArgs", "filteringAction");
            }
            if ($.priority == null) {
                throw new MissingRequiredPropertyException("SecurityProfileUrlFilteringProfileUrlFilterArgs", "priority");
            }
            return $;
        }
    }

}
