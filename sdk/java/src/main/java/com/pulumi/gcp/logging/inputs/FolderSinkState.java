// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.logging.inputs.FolderSinkBigqueryOptionsArgs;
import com.pulumi.gcp.logging.inputs.FolderSinkExclusionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FolderSinkState extends com.pulumi.resources.ResourceArgs {

    public static final FolderSinkState Empty = new FolderSinkState();

    /**
     * Options that affect sinks exporting data to BigQuery. Structure documented below.
     * 
     */
    @Import(name="bigqueryOptions")
    private @Nullable Output<FolderSinkBigqueryOptionsArgs> bigqueryOptions;

    /**
     * @return Options that affect sinks exporting data to BigQuery. Structure documented below.
     * 
     */
    public Optional<Output<FolderSinkBigqueryOptionsArgs>> bigqueryOptions() {
        return Optional.ofNullable(this.bigqueryOptions);
    }

    /**
     * A description of this sink. The maximum length of the description is 8000 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of this sink. The maximum length of the description is 8000 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The destination of the sink (or, in other words, where logs are written to). Can be a
     * Cloud Storage bucket, a PubSub topic, a BigQuery dataset or a Cloud Logging bucket. Examples:
     * 
     */
    @Import(name="destination")
    private @Nullable Output<String> destination;

    /**
     * @return The destination of the sink (or, in other words, where logs are written to). Can be a
     * Cloud Storage bucket, a PubSub topic, a BigQuery dataset or a Cloud Logging bucket. Examples:
     * 
     */
    public Optional<Output<String>> destination() {
        return Optional.ofNullable(this.destination);
    }

    /**
     * If set to True, then this sink is disabled and it does not export any log entries.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return If set to True, then this sink is disabled and it does not export any log entries.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both `filter` and one of `exclusions.filter`, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
     * 
     */
    @Import(name="exclusions")
    private @Nullable Output<List<FolderSinkExclusionArgs>> exclusions;

    /**
     * @return Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both `filter` and one of `exclusions.filter`, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
     * 
     */
    public Optional<Output<List<FolderSinkExclusionArgs>>> exclusions() {
        return Optional.ofNullable(this.exclusions);
    }

    /**
     * The filter to apply when exporting logs. Only log entries that match the filter are exported.
     * See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
     * write a filter.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    /**
     * @return The filter to apply when exporting logs. Only log entries that match the filter are exported.
     * See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
     * write a filter.
     * 
     */
    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The folder to be exported to the sink. Note that either `[FOLDER_ID]` or `folders/[FOLDER_ID]` is
     * accepted.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The folder to be exported to the sink. Note that either `[FOLDER_ID]` or `folders/[FOLDER_ID]` is
     * accepted.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * Whether or not to include children folders in the sink export. If true, logs
     * associated with child projects are also exported; otherwise only logs relating to the provided folder are included.
     * 
     */
    @Import(name="includeChildren")
    private @Nullable Output<Boolean> includeChildren;

    /**
     * @return Whether or not to include children folders in the sink export. If true, logs
     * associated with child projects are also exported; otherwise only logs relating to the provided folder are included.
     * 
     */
    public Optional<Output<Boolean>> includeChildren() {
        return Optional.ofNullable(this.includeChildren);
    }

    /**
     * The name of the logging sink.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the logging sink.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The identity associated with this sink. This identity must be granted write access to the
     * configured `destination`.
     * 
     */
    @Import(name="writerIdentity")
    private @Nullable Output<String> writerIdentity;

    /**
     * @return The identity associated with this sink. This identity must be granted write access to the
     * configured `destination`.
     * 
     */
    public Optional<Output<String>> writerIdentity() {
        return Optional.ofNullable(this.writerIdentity);
    }

    private FolderSinkState() {}

    private FolderSinkState(FolderSinkState $) {
        this.bigqueryOptions = $.bigqueryOptions;
        this.description = $.description;
        this.destination = $.destination;
        this.disabled = $.disabled;
        this.exclusions = $.exclusions;
        this.filter = $.filter;
        this.folder = $.folder;
        this.includeChildren = $.includeChildren;
        this.name = $.name;
        this.writerIdentity = $.writerIdentity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FolderSinkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FolderSinkState $;

        public Builder() {
            $ = new FolderSinkState();
        }

        public Builder(FolderSinkState defaults) {
            $ = new FolderSinkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bigqueryOptions Options that affect sinks exporting data to BigQuery. Structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder bigqueryOptions(@Nullable Output<FolderSinkBigqueryOptionsArgs> bigqueryOptions) {
            $.bigqueryOptions = bigqueryOptions;
            return this;
        }

        /**
         * @param bigqueryOptions Options that affect sinks exporting data to BigQuery. Structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder bigqueryOptions(FolderSinkBigqueryOptionsArgs bigqueryOptions) {
            return bigqueryOptions(Output.of(bigqueryOptions));
        }

        /**
         * @param description A description of this sink. The maximum length of the description is 8000 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of this sink. The maximum length of the description is 8000 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destination The destination of the sink (or, in other words, where logs are written to). Can be a
         * Cloud Storage bucket, a PubSub topic, a BigQuery dataset or a Cloud Logging bucket. Examples:
         * 
         * @return builder
         * 
         */
        public Builder destination(@Nullable Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination The destination of the sink (or, in other words, where logs are written to). Can be a
         * Cloud Storage bucket, a PubSub topic, a BigQuery dataset or a Cloud Logging bucket. Examples:
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param disabled If set to True, then this sink is disabled and it does not export any log entries.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled If set to True, then this sink is disabled and it does not export any log entries.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param exclusions Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both `filter` and one of `exclusions.filter`, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(@Nullable Output<List<FolderSinkExclusionArgs>> exclusions) {
            $.exclusions = exclusions;
            return this;
        }

        /**
         * @param exclusions Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both `filter` and one of `exclusions.filter`, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(List<FolderSinkExclusionArgs> exclusions) {
            return exclusions(Output.of(exclusions));
        }

        /**
         * @param exclusions Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both `filter` and one of `exclusions.filter`, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(FolderSinkExclusionArgs... exclusions) {
            return exclusions(List.of(exclusions));
        }

        /**
         * @param filter The filter to apply when exporting logs. Only log entries that match the filter are exported.
         * See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
         * write a filter.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter The filter to apply when exporting logs. Only log entries that match the filter are exported.
         * See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
         * write a filter.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param folder The folder to be exported to the sink. Note that either `[FOLDER_ID]` or `folders/[FOLDER_ID]` is
         * accepted.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The folder to be exported to the sink. Note that either `[FOLDER_ID]` or `folders/[FOLDER_ID]` is
         * accepted.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param includeChildren Whether or not to include children folders in the sink export. If true, logs
         * associated with child projects are also exported; otherwise only logs relating to the provided folder are included.
         * 
         * @return builder
         * 
         */
        public Builder includeChildren(@Nullable Output<Boolean> includeChildren) {
            $.includeChildren = includeChildren;
            return this;
        }

        /**
         * @param includeChildren Whether or not to include children folders in the sink export. If true, logs
         * associated with child projects are also exported; otherwise only logs relating to the provided folder are included.
         * 
         * @return builder
         * 
         */
        public Builder includeChildren(Boolean includeChildren) {
            return includeChildren(Output.of(includeChildren));
        }

        /**
         * @param name The name of the logging sink.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the logging sink.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param writerIdentity The identity associated with this sink. This identity must be granted write access to the
         * configured `destination`.
         * 
         * @return builder
         * 
         */
        public Builder writerIdentity(@Nullable Output<String> writerIdentity) {
            $.writerIdentity = writerIdentity;
            return this;
        }

        /**
         * @param writerIdentity The identity associated with this sink. This identity must be granted write access to the
         * configured `destination`.
         * 
         * @return builder
         * 
         */
        public Builder writerIdentity(String writerIdentity) {
            return writerIdentity(Output.of(writerIdentity));
        }

        public FolderSinkState build() {
            return $;
        }
    }

}
