// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.cloudrunv2.outputs.GetServiceTemplateContainerEnv;
import com.pulumi.gcp.cloudrunv2.outputs.GetServiceTemplateContainerLivenessProbe;
import com.pulumi.gcp.cloudrunv2.outputs.GetServiceTemplateContainerPort;
import com.pulumi.gcp.cloudrunv2.outputs.GetServiceTemplateContainerResource;
import com.pulumi.gcp.cloudrunv2.outputs.GetServiceTemplateContainerStartupProbe;
import com.pulumi.gcp.cloudrunv2.outputs.GetServiceTemplateContainerVolumeMount;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceTemplateContainer {
    private List<String> args;
    private List<String> commands;
    private List<String> dependsOns;
    private List<GetServiceTemplateContainerEnv> envs;
    private String image;
    private List<GetServiceTemplateContainerLivenessProbe> livenessProbes;
    /**
     * @return The name of the Cloud Run v2 Service.
     * 
     */
    private String name;
    private List<GetServiceTemplateContainerPort> ports;
    private List<GetServiceTemplateContainerResource> resources;
    private List<GetServiceTemplateContainerStartupProbe> startupProbes;
    private List<GetServiceTemplateContainerVolumeMount> volumeMounts;
    private String workingDir;

    private GetServiceTemplateContainer() {}
    public List<String> args() {
        return this.args;
    }
    public List<String> commands() {
        return this.commands;
    }
    public List<String> dependsOns() {
        return this.dependsOns;
    }
    public List<GetServiceTemplateContainerEnv> envs() {
        return this.envs;
    }
    public String image() {
        return this.image;
    }
    public List<GetServiceTemplateContainerLivenessProbe> livenessProbes() {
        return this.livenessProbes;
    }
    /**
     * @return The name of the Cloud Run v2 Service.
     * 
     */
    public String name() {
        return this.name;
    }
    public List<GetServiceTemplateContainerPort> ports() {
        return this.ports;
    }
    public List<GetServiceTemplateContainerResource> resources() {
        return this.resources;
    }
    public List<GetServiceTemplateContainerStartupProbe> startupProbes() {
        return this.startupProbes;
    }
    public List<GetServiceTemplateContainerVolumeMount> volumeMounts() {
        return this.volumeMounts;
    }
    public String workingDir() {
        return this.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceTemplateContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> args;
        private List<String> commands;
        private List<String> dependsOns;
        private List<GetServiceTemplateContainerEnv> envs;
        private String image;
        private List<GetServiceTemplateContainerLivenessProbe> livenessProbes;
        private String name;
        private List<GetServiceTemplateContainerPort> ports;
        private List<GetServiceTemplateContainerResource> resources;
        private List<GetServiceTemplateContainerStartupProbe> startupProbes;
        private List<GetServiceTemplateContainerVolumeMount> volumeMounts;
        private String workingDir;
        public Builder() {}
        public Builder(GetServiceTemplateContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.commands = defaults.commands;
    	      this.dependsOns = defaults.dependsOns;
    	      this.envs = defaults.envs;
    	      this.image = defaults.image;
    	      this.livenessProbes = defaults.livenessProbes;
    	      this.name = defaults.name;
    	      this.ports = defaults.ports;
    	      this.resources = defaults.resources;
    	      this.startupProbes = defaults.startupProbes;
    	      this.volumeMounts = defaults.volumeMounts;
    	      this.workingDir = defaults.workingDir;
        }

        @CustomType.Setter
        public Builder args(List<String> args) {
            this.args = Objects.requireNonNull(args);
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        @CustomType.Setter
        public Builder commands(List<String> commands) {
            this.commands = Objects.requireNonNull(commands);
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder dependsOns(List<String> dependsOns) {
            this.dependsOns = Objects.requireNonNull(dependsOns);
            return this;
        }
        public Builder dependsOns(String... dependsOns) {
            return dependsOns(List.of(dependsOns));
        }
        @CustomType.Setter
        public Builder envs(List<GetServiceTemplateContainerEnv> envs) {
            this.envs = Objects.requireNonNull(envs);
            return this;
        }
        public Builder envs(GetServiceTemplateContainerEnv... envs) {
            return envs(List.of(envs));
        }
        @CustomType.Setter
        public Builder image(String image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        @CustomType.Setter
        public Builder livenessProbes(List<GetServiceTemplateContainerLivenessProbe> livenessProbes) {
            this.livenessProbes = Objects.requireNonNull(livenessProbes);
            return this;
        }
        public Builder livenessProbes(GetServiceTemplateContainerLivenessProbe... livenessProbes) {
            return livenessProbes(List.of(livenessProbes));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder ports(List<GetServiceTemplateContainerPort> ports) {
            this.ports = Objects.requireNonNull(ports);
            return this;
        }
        public Builder ports(GetServiceTemplateContainerPort... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder resources(List<GetServiceTemplateContainerResource> resources) {
            this.resources = Objects.requireNonNull(resources);
            return this;
        }
        public Builder resources(GetServiceTemplateContainerResource... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder startupProbes(List<GetServiceTemplateContainerStartupProbe> startupProbes) {
            this.startupProbes = Objects.requireNonNull(startupProbes);
            return this;
        }
        public Builder startupProbes(GetServiceTemplateContainerStartupProbe... startupProbes) {
            return startupProbes(List.of(startupProbes));
        }
        @CustomType.Setter
        public Builder volumeMounts(List<GetServiceTemplateContainerVolumeMount> volumeMounts) {
            this.volumeMounts = Objects.requireNonNull(volumeMounts);
            return this;
        }
        public Builder volumeMounts(GetServiceTemplateContainerVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        @CustomType.Setter
        public Builder workingDir(String workingDir) {
            this.workingDir = Objects.requireNonNull(workingDir);
            return this;
        }
        public GetServiceTemplateContainer build() {
            final var _resultValue = new GetServiceTemplateContainer();
            _resultValue.args = args;
            _resultValue.commands = commands;
            _resultValue.dependsOns = dependsOns;
            _resultValue.envs = envs;
            _resultValue.image = image;
            _resultValue.livenessProbes = livenessProbes;
            _resultValue.name = name;
            _resultValue.ports = ports;
            _resultValue.resources = resources;
            _resultValue.startupProbes = startupProbes;
            _resultValue.volumeMounts = volumeMounts;
            _resultValue.workingDir = workingDir;
            return _resultValue;
        }
    }
}
