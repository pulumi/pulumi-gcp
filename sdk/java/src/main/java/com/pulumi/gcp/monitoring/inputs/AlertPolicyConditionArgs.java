// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionAbsentArgs;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionMatchedLogArgs;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionMonitoringQueryLanguageArgs;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionThresholdArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertPolicyConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertPolicyConditionArgs Empty = new AlertPolicyConditionArgs();

    /**
     * A condition that checks that a time series
     * continues to receive new data points.
     * Structure is documented below.
     * 
     */
    @Import(name="conditionAbsent")
    private @Nullable Output<AlertPolicyConditionConditionAbsentArgs> conditionAbsent;

    /**
     * @return A condition that checks that a time series
     * continues to receive new data points.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AlertPolicyConditionConditionAbsentArgs>> conditionAbsent() {
        return Optional.ofNullable(this.conditionAbsent);
    }

    /**
     * A condition that checks for log messages matching given constraints.
     * If set, no other conditions can be present.
     * Structure is documented below.
     * 
     */
    @Import(name="conditionMatchedLog")
    private @Nullable Output<AlertPolicyConditionConditionMatchedLogArgs> conditionMatchedLog;

    /**
     * @return A condition that checks for log messages matching given constraints.
     * If set, no other conditions can be present.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AlertPolicyConditionConditionMatchedLogArgs>> conditionMatchedLog() {
        return Optional.ofNullable(this.conditionMatchedLog);
    }

    /**
     * A Monitoring Query Language query that outputs a boolean stream
     * Structure is documented below.
     * 
     */
    @Import(name="conditionMonitoringQueryLanguage")
    private @Nullable Output<AlertPolicyConditionConditionMonitoringQueryLanguageArgs> conditionMonitoringQueryLanguage;

    /**
     * @return A Monitoring Query Language query that outputs a boolean stream
     * Structure is documented below.
     * 
     */
    public Optional<Output<AlertPolicyConditionConditionMonitoringQueryLanguageArgs>> conditionMonitoringQueryLanguage() {
        return Optional.ofNullable(this.conditionMonitoringQueryLanguage);
    }

    /**
     * A condition that compares a time series against a
     * threshold.
     * Structure is documented below.
     * 
     */
    @Import(name="conditionThreshold")
    private @Nullable Output<AlertPolicyConditionConditionThresholdArgs> conditionThreshold;

    /**
     * @return A condition that compares a time series against a
     * threshold.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AlertPolicyConditionConditionThresholdArgs>> conditionThreshold() {
        return Optional.ofNullable(this.conditionThreshold);
    }

    /**
     * A short name or phrase used to identify the
     * condition in dashboards, notifications, and
     * incidents. To avoid confusion, don&#39;t use the same
     * display name for multiple conditions in the same
     * policy.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return A short name or phrase used to identify the
     * condition in dashboards, notifications, and
     * incidents. To avoid confusion, don&#39;t use the same
     * display name for multiple conditions in the same
     * policy.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * - 
     * The unique resource name for this condition.
     * Its syntax is:
     * projects/[PROJECT_ID]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID]
     * [CONDITION_ID] is assigned by Stackdriver Monitoring when
     * the condition is created as part of a new or updated alerting
     * policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return -
     * The unique resource name for this condition.
     * Its syntax is:
     * projects/[PROJECT_ID]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID]
     * [CONDITION_ID] is assigned by Stackdriver Monitoring when
     * the condition is created as part of a new or updated alerting
     * policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private AlertPolicyConditionArgs() {}

    private AlertPolicyConditionArgs(AlertPolicyConditionArgs $) {
        this.conditionAbsent = $.conditionAbsent;
        this.conditionMatchedLog = $.conditionMatchedLog;
        this.conditionMonitoringQueryLanguage = $.conditionMonitoringQueryLanguage;
        this.conditionThreshold = $.conditionThreshold;
        this.displayName = $.displayName;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertPolicyConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertPolicyConditionArgs $;

        public Builder() {
            $ = new AlertPolicyConditionArgs();
        }

        public Builder(AlertPolicyConditionArgs defaults) {
            $ = new AlertPolicyConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditionAbsent A condition that checks that a time series
         * continues to receive new data points.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditionAbsent(@Nullable Output<AlertPolicyConditionConditionAbsentArgs> conditionAbsent) {
            $.conditionAbsent = conditionAbsent;
            return this;
        }

        /**
         * @param conditionAbsent A condition that checks that a time series
         * continues to receive new data points.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditionAbsent(AlertPolicyConditionConditionAbsentArgs conditionAbsent) {
            return conditionAbsent(Output.of(conditionAbsent));
        }

        /**
         * @param conditionMatchedLog A condition that checks for log messages matching given constraints.
         * If set, no other conditions can be present.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditionMatchedLog(@Nullable Output<AlertPolicyConditionConditionMatchedLogArgs> conditionMatchedLog) {
            $.conditionMatchedLog = conditionMatchedLog;
            return this;
        }

        /**
         * @param conditionMatchedLog A condition that checks for log messages matching given constraints.
         * If set, no other conditions can be present.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditionMatchedLog(AlertPolicyConditionConditionMatchedLogArgs conditionMatchedLog) {
            return conditionMatchedLog(Output.of(conditionMatchedLog));
        }

        /**
         * @param conditionMonitoringQueryLanguage A Monitoring Query Language query that outputs a boolean stream
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditionMonitoringQueryLanguage(@Nullable Output<AlertPolicyConditionConditionMonitoringQueryLanguageArgs> conditionMonitoringQueryLanguage) {
            $.conditionMonitoringQueryLanguage = conditionMonitoringQueryLanguage;
            return this;
        }

        /**
         * @param conditionMonitoringQueryLanguage A Monitoring Query Language query that outputs a boolean stream
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditionMonitoringQueryLanguage(AlertPolicyConditionConditionMonitoringQueryLanguageArgs conditionMonitoringQueryLanguage) {
            return conditionMonitoringQueryLanguage(Output.of(conditionMonitoringQueryLanguage));
        }

        /**
         * @param conditionThreshold A condition that compares a time series against a
         * threshold.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditionThreshold(@Nullable Output<AlertPolicyConditionConditionThresholdArgs> conditionThreshold) {
            $.conditionThreshold = conditionThreshold;
            return this;
        }

        /**
         * @param conditionThreshold A condition that compares a time series against a
         * threshold.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditionThreshold(AlertPolicyConditionConditionThresholdArgs conditionThreshold) {
            return conditionThreshold(Output.of(conditionThreshold));
        }

        /**
         * @param displayName A short name or phrase used to identify the
         * condition in dashboards, notifications, and
         * incidents. To avoid confusion, don&#39;t use the same
         * display name for multiple conditions in the same
         * policy.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A short name or phrase used to identify the
         * condition in dashboards, notifications, and
         * incidents. To avoid confusion, don&#39;t use the same
         * display name for multiple conditions in the same
         * policy.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param name -
         * The unique resource name for this condition.
         * Its syntax is:
         * projects/[PROJECT_ID]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID]
         * [CONDITION_ID] is assigned by Stackdriver Monitoring when
         * the condition is created as part of a new or updated alerting
         * policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name -
         * The unique resource name for this condition.
         * Its syntax is:
         * projects/[PROJECT_ID]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID]
         * [CONDITION_ID] is assigned by Stackdriver Monitoring when
         * the condition is created as part of a new or updated alerting
         * policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public AlertPolicyConditionArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
