// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.SecurityPolicyRuleRateLimitOptionsBanThreshold;
import com.pulumi.gcp.compute.outputs.SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig;
import com.pulumi.gcp.compute.outputs.SecurityPolicyRuleRateLimitOptionsExceedRedirectOptions;
import com.pulumi.gcp.compute.outputs.SecurityPolicyRuleRateLimitOptionsRateLimitThreshold;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecurityPolicyRuleRateLimitOptions {
    /**
     * @return Can only be specified if the `action` for the rule is `rate_based_ban`.
     * If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     * 
     */
    private @Nullable Integer banDurationSec;
    /**
     * @return Can only be specified if the `action` for the rule is `rate_based_ban`.
     * If specified, the key will be banned for the configured `ban_duration_sec` when the number of requests that exceed the `rate_limit_threshold` also
     * exceed this `ban_threshold`. Structure is documented below.
     * 
     */
    private @Nullable SecurityPolicyRuleRateLimitOptionsBanThreshold banThreshold;
    /**
     * @return Action to take for requests that are under the configured rate limit threshold. Valid option is `allow` only.
     * 
     */
    private String conformAction;
    /**
     * @return Determines the key to enforce the rate_limit_threshold on. If not specified, defaults to `ALL`.
     * 
     */
    private @Nullable String enforceOnKey;
    /**
     * @return ) If specified, any combination of values of enforce_on_key_type/enforce_on_key_name is treated as the key on which rate limit threshold/action is enforced. You can specify up to 3 enforce_on_key_configs. If `enforce_on_key_configs` is specified, `enforce_on_key` must be set to an empty string. Structure is documented below.
     * 
     * **Note:** To avoid the conflict between `enforce_on_key` and `enforce_on_key_configs`, the field `enforce_on_key` needs to be set to an empty string.
     * 
     */
    private @Nullable List<SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig> enforceOnKeyConfigs;
    /**
     * @return Rate limit key name applicable only for the following key types:
     * 
     */
    private @Nullable String enforceOnKeyName;
    /**
     * @return When a request is denied, returns the HTTP response code specified.
     * Valid options are `deny()` where valid values for status are 403, 404, 429, and 502.
     * 
     */
    private String exceedAction;
    /**
     * @return Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_threshold&#34;&gt;&lt;/a&gt;The `{ban/rate_limit}_threshold` block supports:
     * 
     */
    private @Nullable SecurityPolicyRuleRateLimitOptionsExceedRedirectOptions exceedRedirectOptions;
    /**
     * @return Threshold at which to begin ratelimiting. Structure is documented below.
     * 
     */
    private SecurityPolicyRuleRateLimitOptionsRateLimitThreshold rateLimitThreshold;

    private SecurityPolicyRuleRateLimitOptions() {}
    /**
     * @return Can only be specified if the `action` for the rule is `rate_based_ban`.
     * If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     * 
     */
    public Optional<Integer> banDurationSec() {
        return Optional.ofNullable(this.banDurationSec);
    }
    /**
     * @return Can only be specified if the `action` for the rule is `rate_based_ban`.
     * If specified, the key will be banned for the configured `ban_duration_sec` when the number of requests that exceed the `rate_limit_threshold` also
     * exceed this `ban_threshold`. Structure is documented below.
     * 
     */
    public Optional<SecurityPolicyRuleRateLimitOptionsBanThreshold> banThreshold() {
        return Optional.ofNullable(this.banThreshold);
    }
    /**
     * @return Action to take for requests that are under the configured rate limit threshold. Valid option is `allow` only.
     * 
     */
    public String conformAction() {
        return this.conformAction;
    }
    /**
     * @return Determines the key to enforce the rate_limit_threshold on. If not specified, defaults to `ALL`.
     * 
     */
    public Optional<String> enforceOnKey() {
        return Optional.ofNullable(this.enforceOnKey);
    }
    /**
     * @return ) If specified, any combination of values of enforce_on_key_type/enforce_on_key_name is treated as the key on which rate limit threshold/action is enforced. You can specify up to 3 enforce_on_key_configs. If `enforce_on_key_configs` is specified, `enforce_on_key` must be set to an empty string. Structure is documented below.
     * 
     * **Note:** To avoid the conflict between `enforce_on_key` and `enforce_on_key_configs`, the field `enforce_on_key` needs to be set to an empty string.
     * 
     */
    public List<SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig> enforceOnKeyConfigs() {
        return this.enforceOnKeyConfigs == null ? List.of() : this.enforceOnKeyConfigs;
    }
    /**
     * @return Rate limit key name applicable only for the following key types:
     * 
     */
    public Optional<String> enforceOnKeyName() {
        return Optional.ofNullable(this.enforceOnKeyName);
    }
    /**
     * @return When a request is denied, returns the HTTP response code specified.
     * Valid options are `deny()` where valid values for status are 403, 404, 429, and 502.
     * 
     */
    public String exceedAction() {
        return this.exceedAction;
    }
    /**
     * @return Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_threshold&#34;&gt;&lt;/a&gt;The `{ban/rate_limit}_threshold` block supports:
     * 
     */
    public Optional<SecurityPolicyRuleRateLimitOptionsExceedRedirectOptions> exceedRedirectOptions() {
        return Optional.ofNullable(this.exceedRedirectOptions);
    }
    /**
     * @return Threshold at which to begin ratelimiting. Structure is documented below.
     * 
     */
    public SecurityPolicyRuleRateLimitOptionsRateLimitThreshold rateLimitThreshold() {
        return this.rateLimitThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityPolicyRuleRateLimitOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer banDurationSec;
        private @Nullable SecurityPolicyRuleRateLimitOptionsBanThreshold banThreshold;
        private String conformAction;
        private @Nullable String enforceOnKey;
        private @Nullable List<SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig> enforceOnKeyConfigs;
        private @Nullable String enforceOnKeyName;
        private String exceedAction;
        private @Nullable SecurityPolicyRuleRateLimitOptionsExceedRedirectOptions exceedRedirectOptions;
        private SecurityPolicyRuleRateLimitOptionsRateLimitThreshold rateLimitThreshold;
        public Builder() {}
        public Builder(SecurityPolicyRuleRateLimitOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.banDurationSec = defaults.banDurationSec;
    	      this.banThreshold = defaults.banThreshold;
    	      this.conformAction = defaults.conformAction;
    	      this.enforceOnKey = defaults.enforceOnKey;
    	      this.enforceOnKeyConfigs = defaults.enforceOnKeyConfigs;
    	      this.enforceOnKeyName = defaults.enforceOnKeyName;
    	      this.exceedAction = defaults.exceedAction;
    	      this.exceedRedirectOptions = defaults.exceedRedirectOptions;
    	      this.rateLimitThreshold = defaults.rateLimitThreshold;
        }

        @CustomType.Setter
        public Builder banDurationSec(@Nullable Integer banDurationSec) {
            this.banDurationSec = banDurationSec;
            return this;
        }
        @CustomType.Setter
        public Builder banThreshold(@Nullable SecurityPolicyRuleRateLimitOptionsBanThreshold banThreshold) {
            this.banThreshold = banThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder conformAction(String conformAction) {
            this.conformAction = Objects.requireNonNull(conformAction);
            return this;
        }
        @CustomType.Setter
        public Builder enforceOnKey(@Nullable String enforceOnKey) {
            this.enforceOnKey = enforceOnKey;
            return this;
        }
        @CustomType.Setter
        public Builder enforceOnKeyConfigs(@Nullable List<SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig> enforceOnKeyConfigs) {
            this.enforceOnKeyConfigs = enforceOnKeyConfigs;
            return this;
        }
        public Builder enforceOnKeyConfigs(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig... enforceOnKeyConfigs) {
            return enforceOnKeyConfigs(List.of(enforceOnKeyConfigs));
        }
        @CustomType.Setter
        public Builder enforceOnKeyName(@Nullable String enforceOnKeyName) {
            this.enforceOnKeyName = enforceOnKeyName;
            return this;
        }
        @CustomType.Setter
        public Builder exceedAction(String exceedAction) {
            this.exceedAction = Objects.requireNonNull(exceedAction);
            return this;
        }
        @CustomType.Setter
        public Builder exceedRedirectOptions(@Nullable SecurityPolicyRuleRateLimitOptionsExceedRedirectOptions exceedRedirectOptions) {
            this.exceedRedirectOptions = exceedRedirectOptions;
            return this;
        }
        @CustomType.Setter
        public Builder rateLimitThreshold(SecurityPolicyRuleRateLimitOptionsRateLimitThreshold rateLimitThreshold) {
            this.rateLimitThreshold = Objects.requireNonNull(rateLimitThreshold);
            return this;
        }
        public SecurityPolicyRuleRateLimitOptions build() {
            final var _resultValue = new SecurityPolicyRuleRateLimitOptions();
            _resultValue.banDurationSec = banDurationSec;
            _resultValue.banThreshold = banThreshold;
            _resultValue.conformAction = conformAction;
            _resultValue.enforceOnKey = enforceOnKey;
            _resultValue.enforceOnKeyConfigs = enforceOnKeyConfigs;
            _resultValue.enforceOnKeyName = enforceOnKeyName;
            _resultValue.exceedAction = exceedAction;
            _resultValue.exceedRedirectOptions = exceedRedirectOptions;
            _resultValue.rateLimitThreshold = rateLimitThreshold;
            return _resultValue;
        }
    }
}
