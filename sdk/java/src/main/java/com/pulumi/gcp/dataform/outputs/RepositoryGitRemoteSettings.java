// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataform.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RepositoryGitRemoteSettings {
    /**
     * @return The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format projects/*{@literal /}secrets/*{@literal /}versions/*.
     * 
     */
    private String authenticationTokenSecretVersion;
    /**
     * @return The Git remote&#39;s default branch name.
     * 
     */
    private String defaultBranch;
    /**
     * @return Indicates the status of the Git access token. https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories#TokenStatus
     * 
     */
    private @Nullable String tokenStatus;
    /**
     * @return The Git remote&#39;s URL.
     * 
     */
    private String url;

    private RepositoryGitRemoteSettings() {}
    /**
     * @return The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format projects/*{@literal /}secrets/*{@literal /}versions/*.
     * 
     */
    public String authenticationTokenSecretVersion() {
        return this.authenticationTokenSecretVersion;
    }
    /**
     * @return The Git remote&#39;s default branch name.
     * 
     */
    public String defaultBranch() {
        return this.defaultBranch;
    }
    /**
     * @return Indicates the status of the Git access token. https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories#TokenStatus
     * 
     */
    public Optional<String> tokenStatus() {
        return Optional.ofNullable(this.tokenStatus);
    }
    /**
     * @return The Git remote&#39;s URL.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryGitRemoteSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authenticationTokenSecretVersion;
        private String defaultBranch;
        private @Nullable String tokenStatus;
        private String url;
        public Builder() {}
        public Builder(RepositoryGitRemoteSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationTokenSecretVersion = defaults.authenticationTokenSecretVersion;
    	      this.defaultBranch = defaults.defaultBranch;
    	      this.tokenStatus = defaults.tokenStatus;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder authenticationTokenSecretVersion(String authenticationTokenSecretVersion) {
            this.authenticationTokenSecretVersion = Objects.requireNonNull(authenticationTokenSecretVersion);
            return this;
        }
        @CustomType.Setter
        public Builder defaultBranch(String defaultBranch) {
            this.defaultBranch = Objects.requireNonNull(defaultBranch);
            return this;
        }
        @CustomType.Setter
        public Builder tokenStatus(@Nullable String tokenStatus) {
            this.tokenStatus = tokenStatus;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        public RepositoryGitRemoteSettings build() {
            final var o = new RepositoryGitRemoteSettings();
            o.authenticationTokenSecretVersion = authenticationTokenSecretVersion;
            o.defaultBranch = defaultBranch;
            o.tokenStatus = tokenStatus;
            o.url = url;
            return o;
        }
    }
}
