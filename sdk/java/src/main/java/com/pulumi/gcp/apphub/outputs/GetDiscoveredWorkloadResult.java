// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apphub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.apphub.outputs.GetDiscoveredWorkloadWorkloadProperty;
import com.pulumi.gcp.apphub.outputs.GetDiscoveredWorkloadWorkloadReference;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDiscoveredWorkloadResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The location that the underlying resource resides in.
     * 
     */
    private String location;
    /**
     * @return Resource name of a Workload. Format: &#34;projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}&#34;.
     * 
     */
    private String name;
    private @Nullable String project;
    /**
     * @return Properties of an underlying compute resource that can comprise a Workload. Structure is documented below
     * 
     */
    private List<GetDiscoveredWorkloadWorkloadProperty> workloadProperties;
    /**
     * @return Reference to an underlying networking resource that can comprise a Workload. Structure is documented below
     * 
     */
    private List<GetDiscoveredWorkloadWorkloadReference> workloadReferences;
    private String workloadUri;

    private GetDiscoveredWorkloadResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The location that the underlying resource resides in.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource name of a Workload. Format: &#34;projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}&#34;.
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    /**
     * @return Properties of an underlying compute resource that can comprise a Workload. Structure is documented below
     * 
     */
    public List<GetDiscoveredWorkloadWorkloadProperty> workloadProperties() {
        return this.workloadProperties;
    }
    /**
     * @return Reference to an underlying networking resource that can comprise a Workload. Structure is documented below
     * 
     */
    public List<GetDiscoveredWorkloadWorkloadReference> workloadReferences() {
        return this.workloadReferences;
    }
    public String workloadUri() {
        return this.workloadUri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiscoveredWorkloadResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String location;
        private String name;
        private @Nullable String project;
        private List<GetDiscoveredWorkloadWorkloadProperty> workloadProperties;
        private List<GetDiscoveredWorkloadWorkloadReference> workloadReferences;
        private String workloadUri;
        public Builder() {}
        public Builder(GetDiscoveredWorkloadResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.workloadProperties = defaults.workloadProperties;
    	      this.workloadReferences = defaults.workloadReferences;
    	      this.workloadUri = defaults.workloadUri;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDiscoveredWorkloadResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetDiscoveredWorkloadResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDiscoveredWorkloadResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder workloadProperties(List<GetDiscoveredWorkloadWorkloadProperty> workloadProperties) {
            if (workloadProperties == null) {
              throw new MissingRequiredPropertyException("GetDiscoveredWorkloadResult", "workloadProperties");
            }
            this.workloadProperties = workloadProperties;
            return this;
        }
        public Builder workloadProperties(GetDiscoveredWorkloadWorkloadProperty... workloadProperties) {
            return workloadProperties(List.of(workloadProperties));
        }
        @CustomType.Setter
        public Builder workloadReferences(List<GetDiscoveredWorkloadWorkloadReference> workloadReferences) {
            if (workloadReferences == null) {
              throw new MissingRequiredPropertyException("GetDiscoveredWorkloadResult", "workloadReferences");
            }
            this.workloadReferences = workloadReferences;
            return this;
        }
        public Builder workloadReferences(GetDiscoveredWorkloadWorkloadReference... workloadReferences) {
            return workloadReferences(List.of(workloadReferences));
        }
        @CustomType.Setter
        public Builder workloadUri(String workloadUri) {
            if (workloadUri == null) {
              throw new MissingRequiredPropertyException("GetDiscoveredWorkloadResult", "workloadUri");
            }
            this.workloadUri = workloadUri;
            return this;
        }
        public GetDiscoveredWorkloadResult build() {
            final var _resultValue = new GetDiscoveredWorkloadResult();
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.workloadProperties = workloadProperties;
            _resultValue.workloadReferences = workloadReferences;
            _resultValue.workloadUri = workloadUri;
            return _resultValue;
        }
    }
}
