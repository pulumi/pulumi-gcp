// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workstations.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkstationConfigContainer {
    /**
     * @return Arguments passed to the entrypoint.
     * 
     */
    private @Nullable List<String> args;
    /**
     * @return If set, overrides the default ENTRYPOINT specified by the image.
     * 
     */
    private @Nullable List<String> commands;
    /**
     * @return Environment variables passed to the container.
     * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
     * 
     */
    private @Nullable Map<String,String> env;
    /**
     * @return Docker image defining the container. This image must be accessible by the config&#34;s service account.
     * 
     */
    private @Nullable String image;
    /**
     * @return If set, overrides the USER specified in the image with the given uid.
     * 
     */
    private @Nullable Integer runAsUser;
    /**
     * @return If set, overrides the default DIR specified by the image.
     * 
     */
    private @Nullable String workingDir;

    private WorkstationConfigContainer() {}
    /**
     * @return Arguments passed to the entrypoint.
     * 
     */
    public List<String> args() {
        return this.args == null ? List.of() : this.args;
    }
    /**
     * @return If set, overrides the default ENTRYPOINT specified by the image.
     * 
     */
    public List<String> commands() {
        return this.commands == null ? List.of() : this.commands;
    }
    /**
     * @return Environment variables passed to the container.
     * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
     * 
     */
    public Map<String,String> env() {
        return this.env == null ? Map.of() : this.env;
    }
    /**
     * @return Docker image defining the container. This image must be accessible by the config&#34;s service account.
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return If set, overrides the USER specified in the image with the given uid.
     * 
     */
    public Optional<Integer> runAsUser() {
        return Optional.ofNullable(this.runAsUser);
    }
    /**
     * @return If set, overrides the default DIR specified by the image.
     * 
     */
    public Optional<String> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkstationConfigContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> args;
        private @Nullable List<String> commands;
        private @Nullable Map<String,String> env;
        private @Nullable String image;
        private @Nullable Integer runAsUser;
        private @Nullable String workingDir;
        public Builder() {}
        public Builder(WorkstationConfigContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.commands = defaults.commands;
    	      this.env = defaults.env;
    	      this.image = defaults.image;
    	      this.runAsUser = defaults.runAsUser;
    	      this.workingDir = defaults.workingDir;
        }

        @CustomType.Setter
        public Builder args(@Nullable List<String> args) {
            this.args = args;
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        @CustomType.Setter
        public Builder commands(@Nullable List<String> commands) {
            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder env(@Nullable Map<String,String> env) {
            this.env = env;
            return this;
        }
        @CustomType.Setter
        public Builder image(@Nullable String image) {
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder runAsUser(@Nullable Integer runAsUser) {
            this.runAsUser = runAsUser;
            return this;
        }
        @CustomType.Setter
        public Builder workingDir(@Nullable String workingDir) {
            this.workingDir = workingDir;
            return this;
        }
        public WorkstationConfigContainer build() {
            final var o = new WorkstationConfigContainer();
            o.args = args;
            o.commands = commands;
            o.env = env;
            o.image = image;
            o.runAsUser = runAsUser;
            o.workingDir = workingDir;
            return o;
        }
    }
}
