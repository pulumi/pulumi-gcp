// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudtasks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class QueueRetryConfig {
    /**
     * @return Number of attempts per task.
     * Cloud Tasks will attempt the task maxAttempts times (that is, if
     * the first attempt fails, then there will be maxAttempts - 1
     * retries). Must be &gt;= -1.
     * If unspecified when the queue is created, Cloud Tasks will pick
     * the default.
     * -1 indicates unlimited attempts.
     * 
     */
    private final @Nullable Integer maxAttempts;
    /**
     * @return A task will be scheduled for retry between minBackoff and
     * maxBackoff duration after it fails, if the queue&#39;s RetryConfig
     * specifies that the task should be retried.
     * 
     */
    private final @Nullable String maxBackoff;
    /**
     * @return The time between retries will double maxDoublings times.
     * A task&#39;s retry interval starts at minBackoff, then doubles maxDoublings times,
     * then increases linearly, and finally retries retries at intervals of maxBackoff
     * up to maxAttempts times.
     * 
     */
    private final @Nullable Integer maxDoublings;
    /**
     * @return If positive, maxRetryDuration specifies the time limit for
     * retrying a failed task, measured from when the task was first
     * attempted. Once maxRetryDuration time has passed and the task has
     * been attempted maxAttempts times, no further attempts will be
     * made and the task will be deleted.
     * If zero, then the task age is unlimited.
     * 
     */
    private final @Nullable String maxRetryDuration;
    /**
     * @return A task will be scheduled for retry between minBackoff and
     * maxBackoff duration after it fails, if the queue&#39;s RetryConfig
     * specifies that the task should be retried.
     * 
     */
    private final @Nullable String minBackoff;

    @CustomType.Constructor
    private QueueRetryConfig(
        @CustomType.Parameter("maxAttempts") @Nullable Integer maxAttempts,
        @CustomType.Parameter("maxBackoff") @Nullable String maxBackoff,
        @CustomType.Parameter("maxDoublings") @Nullable Integer maxDoublings,
        @CustomType.Parameter("maxRetryDuration") @Nullable String maxRetryDuration,
        @CustomType.Parameter("minBackoff") @Nullable String minBackoff) {
        this.maxAttempts = maxAttempts;
        this.maxBackoff = maxBackoff;
        this.maxDoublings = maxDoublings;
        this.maxRetryDuration = maxRetryDuration;
        this.minBackoff = minBackoff;
    }

    /**
     * @return Number of attempts per task.
     * Cloud Tasks will attempt the task maxAttempts times (that is, if
     * the first attempt fails, then there will be maxAttempts - 1
     * retries). Must be &gt;= -1.
     * If unspecified when the queue is created, Cloud Tasks will pick
     * the default.
     * -1 indicates unlimited attempts.
     * 
     */
    public Optional<Integer> maxAttempts() {
        return Optional.ofNullable(this.maxAttempts);
    }
    /**
     * @return A task will be scheduled for retry between minBackoff and
     * maxBackoff duration after it fails, if the queue&#39;s RetryConfig
     * specifies that the task should be retried.
     * 
     */
    public Optional<String> maxBackoff() {
        return Optional.ofNullable(this.maxBackoff);
    }
    /**
     * @return The time between retries will double maxDoublings times.
     * A task&#39;s retry interval starts at minBackoff, then doubles maxDoublings times,
     * then increases linearly, and finally retries retries at intervals of maxBackoff
     * up to maxAttempts times.
     * 
     */
    public Optional<Integer> maxDoublings() {
        return Optional.ofNullable(this.maxDoublings);
    }
    /**
     * @return If positive, maxRetryDuration specifies the time limit for
     * retrying a failed task, measured from when the task was first
     * attempted. Once maxRetryDuration time has passed and the task has
     * been attempted maxAttempts times, no further attempts will be
     * made and the task will be deleted.
     * If zero, then the task age is unlimited.
     * 
     */
    public Optional<String> maxRetryDuration() {
        return Optional.ofNullable(this.maxRetryDuration);
    }
    /**
     * @return A task will be scheduled for retry between minBackoff and
     * maxBackoff duration after it fails, if the queue&#39;s RetryConfig
     * specifies that the task should be retried.
     * 
     */
    public Optional<String> minBackoff() {
        return Optional.ofNullable(this.minBackoff);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueueRetryConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer maxAttempts;
        private @Nullable String maxBackoff;
        private @Nullable Integer maxDoublings;
        private @Nullable String maxRetryDuration;
        private @Nullable String minBackoff;

        public Builder() {
    	      // Empty
        }

        public Builder(QueueRetryConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxAttempts = defaults.maxAttempts;
    	      this.maxBackoff = defaults.maxBackoff;
    	      this.maxDoublings = defaults.maxDoublings;
    	      this.maxRetryDuration = defaults.maxRetryDuration;
    	      this.minBackoff = defaults.minBackoff;
        }

        public Builder maxAttempts(@Nullable Integer maxAttempts) {
            this.maxAttempts = maxAttempts;
            return this;
        }
        public Builder maxBackoff(@Nullable String maxBackoff) {
            this.maxBackoff = maxBackoff;
            return this;
        }
        public Builder maxDoublings(@Nullable Integer maxDoublings) {
            this.maxDoublings = maxDoublings;
            return this;
        }
        public Builder maxRetryDuration(@Nullable String maxRetryDuration) {
            this.maxRetryDuration = maxRetryDuration;
            return this;
        }
        public Builder minBackoff(@Nullable String minBackoff) {
            this.minBackoff = minBackoff;
            return this;
        }        public QueueRetryConfig build() {
            return new QueueRetryConfig(maxAttempts, maxBackoff, maxDoublings, maxRetryDuration, minBackoff);
        }
    }
}
