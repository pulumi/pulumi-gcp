// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolNodeConfigLinuxNodeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolNodeConfigLinuxNodeConfigArgs Empty = new NodePoolNodeConfigLinuxNodeConfigArgs();

    /**
     * cgroupMode specifies the cgroup mode to be used on the node.
     * 
     */
    @Import(name="cgroupMode")
    private @Nullable Output<String> cgroupMode;

    /**
     * @return cgroupMode specifies the cgroup mode to be used on the node.
     * 
     */
    public Optional<Output<String>> cgroupMode() {
        return Optional.ofNullable(this.cgroupMode);
    }

    /**
     * The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.
     * 
     */
    @Import(name="sysctls")
    private @Nullable Output<Map<String,String>> sysctls;

    /**
     * @return The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.
     * 
     */
    public Optional<Output<Map<String,String>>> sysctls() {
        return Optional.ofNullable(this.sysctls);
    }

    private NodePoolNodeConfigLinuxNodeConfigArgs() {}

    private NodePoolNodeConfigLinuxNodeConfigArgs(NodePoolNodeConfigLinuxNodeConfigArgs $) {
        this.cgroupMode = $.cgroupMode;
        this.sysctls = $.sysctls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolNodeConfigLinuxNodeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolNodeConfigLinuxNodeConfigArgs $;

        public Builder() {
            $ = new NodePoolNodeConfigLinuxNodeConfigArgs();
        }

        public Builder(NodePoolNodeConfigLinuxNodeConfigArgs defaults) {
            $ = new NodePoolNodeConfigLinuxNodeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cgroupMode cgroupMode specifies the cgroup mode to be used on the node.
         * 
         * @return builder
         * 
         */
        public Builder cgroupMode(@Nullable Output<String> cgroupMode) {
            $.cgroupMode = cgroupMode;
            return this;
        }

        /**
         * @param cgroupMode cgroupMode specifies the cgroup mode to be used on the node.
         * 
         * @return builder
         * 
         */
        public Builder cgroupMode(String cgroupMode) {
            return cgroupMode(Output.of(cgroupMode));
        }

        /**
         * @param sysctls The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.
         * 
         * @return builder
         * 
         */
        public Builder sysctls(@Nullable Output<Map<String,String>> sysctls) {
            $.sysctls = sysctls;
            return this;
        }

        /**
         * @param sysctls The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.
         * 
         * @return builder
         * 
         */
        public Builder sysctls(Map<String,String> sysctls) {
            return sysctls(Output.of(sysctls));
        }

        public NodePoolNodeConfigLinuxNodeConfigArgs build() {
            return $;
        }
    }

}
