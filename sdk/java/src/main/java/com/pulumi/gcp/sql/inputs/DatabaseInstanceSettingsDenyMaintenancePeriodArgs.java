// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class DatabaseInstanceSettingsDenyMaintenancePeriodArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceSettingsDenyMaintenancePeriodArgs Empty = new DatabaseInstanceSettingsDenyMaintenancePeriodArgs();

    /**
     * &#34;deny maintenance period&#34; end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the no maintenance interval recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
     * 
     */
    @Import(name="endDate", required=true)
    private Output<String> endDate;

    /**
     * @return &#34;deny maintenance period&#34; end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the no maintenance interval recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
     * 
     */
    public Output<String> endDate() {
        return this.endDate;
    }

    /**
     * &#34;deny maintenance period&#34; start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
     * 
     */
    @Import(name="startDate", required=true)
    private Output<String> startDate;

    /**
     * @return &#34;deny maintenance period&#34; start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
     * 
     */
    public Output<String> startDate() {
        return this.startDate;
    }

    /**
     * Time in UTC when the &#34;deny maintenance period&#34; starts on startDate and ends on endDate. The time is in format: HH:mm:SS, i.e., 00:00:00
     * 
     */
    @Import(name="time", required=true)
    private Output<String> time;

    /**
     * @return Time in UTC when the &#34;deny maintenance period&#34; starts on startDate and ends on endDate. The time is in format: HH:mm:SS, i.e., 00:00:00
     * 
     */
    public Output<String> time() {
        return this.time;
    }

    private DatabaseInstanceSettingsDenyMaintenancePeriodArgs() {}

    private DatabaseInstanceSettingsDenyMaintenancePeriodArgs(DatabaseInstanceSettingsDenyMaintenancePeriodArgs $) {
        this.endDate = $.endDate;
        this.startDate = $.startDate;
        this.time = $.time;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseInstanceSettingsDenyMaintenancePeriodArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseInstanceSettingsDenyMaintenancePeriodArgs $;

        public Builder() {
            $ = new DatabaseInstanceSettingsDenyMaintenancePeriodArgs();
        }

        public Builder(DatabaseInstanceSettingsDenyMaintenancePeriodArgs defaults) {
            $ = new DatabaseInstanceSettingsDenyMaintenancePeriodArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endDate &#34;deny maintenance period&#34; end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the no maintenance interval recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
         * 
         * @return builder
         * 
         */
        public Builder endDate(Output<String> endDate) {
            $.endDate = endDate;
            return this;
        }

        /**
         * @param endDate &#34;deny maintenance period&#34; end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the no maintenance interval recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
         * 
         * @return builder
         * 
         */
        public Builder endDate(String endDate) {
            return endDate(Output.of(endDate));
        }

        /**
         * @param startDate &#34;deny maintenance period&#34; start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
         * 
         * @return builder
         * 
         */
        public Builder startDate(Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate &#34;deny maintenance period&#34; start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
         * 
         * @return builder
         * 
         */
        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param time Time in UTC when the &#34;deny maintenance period&#34; starts on startDate and ends on endDate. The time is in format: HH:mm:SS, i.e., 00:00:00
         * 
         * @return builder
         * 
         */
        public Builder time(Output<String> time) {
            $.time = time;
            return this;
        }

        /**
         * @param time Time in UTC when the &#34;deny maintenance period&#34; starts on startDate and ends on endDate. The time is in format: HH:mm:SS, i.e., 00:00:00
         * 
         * @return builder
         * 
         */
        public Builder time(String time) {
            return time(Output.of(time));
        }

        public DatabaseInstanceSettingsDenyMaintenancePeriodArgs build() {
            $.endDate = Objects.requireNonNull($.endDate, "expected parameter 'endDate' to be non-null");
            $.startDate = Objects.requireNonNull($.startDate, "expected parameter 'startDate' to be non-null");
            $.time = Objects.requireNonNull($.time, "expected parameter 'time' to be non-null");
            return $;
        }
    }

}
