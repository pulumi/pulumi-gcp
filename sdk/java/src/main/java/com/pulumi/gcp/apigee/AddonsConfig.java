// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.apigee.AddonsConfigArgs;
import com.pulumi.gcp.apigee.inputs.AddonsConfigState;
import com.pulumi.gcp.apigee.outputs.AddonsConfigAddonsConfig;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Configures the add-ons for the Apigee organization. The existing add-on configuration will be fully replaced.
 * 
 * To get more information about AddonsConfig, see:
 * 
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations#setaddons)
 * * How-to Guides
 *     * [Creating an API organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org)
 * 
 * ## Example Usage
 * 
 * ### Apigee Addons Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.apigee.AddonsConfig;
 * import com.pulumi.gcp.apigee.AddonsConfigArgs;
 * import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigArgs;
 * import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigApiSecurityConfigArgs;
 * import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigMonetizationConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testOrganization = new AddonsConfig("testOrganization", AddonsConfigArgs.builder()
 *             .org("test_organization")
 *             .addonsConfig(AddonsConfigAddonsConfigArgs.builder()
 *                 .apiSecurityConfig(AddonsConfigAddonsConfigApiSecurityConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .monetizationConfig(AddonsConfigAddonsConfigMonetizationConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Apigee Addons Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.apigee.Organization;
 * import com.pulumi.gcp.apigee.OrganizationArgs;
 * import com.pulumi.gcp.apigee.AddonsConfig;
 * import com.pulumi.gcp.apigee.AddonsConfigArgs;
 * import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigArgs;
 * import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigIntegrationConfigArgs;
 * import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigApiSecurityConfigArgs;
 * import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigConnectorsPlatformConfigArgs;
 * import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigMonetizationConfigArgs;
 * import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigAdvancedApiOpsConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = OrganizationsFunctions.getClientConfig();
 * 
 *         var apigee = new Service("apigee", ServiceArgs.builder()
 *             .project(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
 *             .service("apigee.googleapis.com")
 *             .build());
 * 
 *         var compute = new Service("compute", ServiceArgs.builder()
 *             .project(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
 *             .service("compute.googleapis.com")
 *             .build());
 * 
 *         var servicenetworking = new Service("servicenetworking", ServiceArgs.builder()
 *             .project(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
 *             .service("servicenetworking.googleapis.com")
 *             .build());
 * 
 *         var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
 *             .name("apigee-network")
 *             .project(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(compute)
 *                 .build());
 * 
 *         var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
 *             .name("apigee-range")
 *             .purpose("VPC_PEERING")
 *             .addressType("INTERNAL")
 *             .prefixLength(16)
 *             .network(apigeeNetwork.id())
 *             .project(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
 *             .build());
 * 
 *         var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
 *             .network(apigeeNetwork.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(apigeeRange.name())
 *             .build());
 * 
 *         var org = new Organization("org", OrganizationArgs.builder()
 *             .analyticsRegion("us-central1")
 *             .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
 *             .authorizedNetwork(apigeeNetwork.id())
 *             .billingType("EVALUATION")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     apigeeVpcConnection,
 *                     apigee)
 *                 .build());
 * 
 *         var testOrganization = new AddonsConfig("testOrganization", AddonsConfigArgs.builder()
 *             .org(org.name())
 *             .addonsConfig(AddonsConfigAddonsConfigArgs.builder()
 *                 .integrationConfig(AddonsConfigAddonsConfigIntegrationConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .apiSecurityConfig(AddonsConfigAddonsConfigApiSecurityConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .connectorsPlatformConfig(AddonsConfigAddonsConfigConnectorsPlatformConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .monetizationConfig(AddonsConfigAddonsConfigMonetizationConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .advancedApiOpsConfig(AddonsConfigAddonsConfigAdvancedApiOpsConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * AddonsConfig can be imported using any of these accepted formats:
 * 
 * * `organizations/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, AddonsConfig can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:apigee/addonsConfig:AddonsConfig default organizations/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:apigee/addonsConfig:AddonsConfig default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:apigee/addonsConfig:AddonsConfig")
public class AddonsConfig extends com.pulumi.resources.CustomResource {
    /**
     * Addon configurations of the Apigee organization.
     * Structure is documented below.
     * 
     */
    @Export(name="addonsConfig", refs={AddonsConfigAddonsConfig.class}, tree="[0]")
    private Output</* @Nullable */ AddonsConfigAddonsConfig> addonsConfig;

    /**
     * @return Addon configurations of the Apigee organization.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AddonsConfigAddonsConfig>> addonsConfig() {
        return Codegen.optional(this.addonsConfig);
    }
    /**
     * Name of the Apigee organization.
     * 
     * ***
     * 
     */
    @Export(name="org", refs={String.class}, tree="[0]")
    private Output<String> org;

    /**
     * @return Name of the Apigee organization.
     * 
     * ***
     * 
     */
    public Output<String> org() {
        return this.org;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AddonsConfig(String name) {
        this(name, AddonsConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AddonsConfig(String name, AddonsConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AddonsConfig(String name, AddonsConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/addonsConfig:AddonsConfig", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private AddonsConfig(String name, Output<String> id, @Nullable AddonsConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/addonsConfig:AddonsConfig", name, state, makeResourceOptions(options, id));
    }

    private static AddonsConfigArgs makeArgs(AddonsConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AddonsConfigArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AddonsConfig get(String name, Output<String> id, @Nullable AddonsConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AddonsConfig(name, id, state, options);
    }
}
