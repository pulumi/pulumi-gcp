// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.FirewallPolicyAssociationArgs;
import com.pulumi.gcp.compute.inputs.FirewallPolicyAssociationState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Allows associating hierarchical firewall policies with the target where they are applied. This allows creating policies and rules in a different location than they are applied.
 * For more information on applying hierarchical firewall policies see the [official documentation](https://cloud.google.com/firewall/docs/firewall-policies#managing_hierarchical_firewall_policy_resources)
 * 
 * To get more information about FirewallPolicyAssociation, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/firewallPolicies/addAssociation)
 * 
 * ## Example Usage
 * 
 * ### Firewall Policy Association
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.Folder;
 * import com.pulumi.gcp.organizations.FolderArgs;
 * import com.pulumi.gcp.compute.FirewallPolicy;
 * import com.pulumi.gcp.compute.FirewallPolicyArgs;
 * import com.pulumi.gcp.compute.FirewallPolicyAssociation;
 * import com.pulumi.gcp.compute.FirewallPolicyAssociationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var folder = new Folder("folder", FolderArgs.builder()
 *             .displayName("my-folder")
 *             .parent("organizations/123456789")
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var policy = new FirewallPolicy("policy", FirewallPolicyArgs.builder()
 *             .parent("organizations/123456789")
 *             .shortName("my-policy")
 *             .description("Example Resource")
 *             .build());
 * 
 *         var default_ = new FirewallPolicyAssociation("default", FirewallPolicyAssociationArgs.builder()
 *             .firewallPolicy(policy.id())
 *             .attachmentTarget(folder.name())
 *             .name("my-association")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * FirewallPolicyAssociation can be imported using any of these accepted formats:
 * 
 * * `locations/global/firewallPolicies/{{firewall_policy}}/associations/{{name}}`
 * 
 * * `{{firewall_policy}}/{{name}}`
 * 
 * When using the `pulumi import` command, FirewallPolicyAssociation can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:compute/firewallPolicyAssociation:FirewallPolicyAssociation default locations/global/firewallPolicies/{{firewall_policy}}/associations/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/firewallPolicyAssociation:FirewallPolicyAssociation default {{firewall_policy}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/firewallPolicyAssociation:FirewallPolicyAssociation")
public class FirewallPolicyAssociation extends com.pulumi.resources.CustomResource {
    /**
     * The target that the firewall policy is attached to.
     * 
     */
    @Export(name="attachmentTarget", refs={String.class}, tree="[0]")
    private Output<String> attachmentTarget;

    /**
     * @return The target that the firewall policy is attached to.
     * 
     */
    public Output<String> attachmentTarget() {
        return this.attachmentTarget;
    }
    /**
     * The firewall policy of the resource.
     * 
     * ***
     * 
     */
    @Export(name="firewallPolicy", refs={String.class}, tree="[0]")
    private Output<String> firewallPolicy;

    /**
     * @return The firewall policy of the resource.
     * 
     * ***
     * 
     */
    public Output<String> firewallPolicy() {
        return this.firewallPolicy;
    }
    /**
     * The name for an association.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name for an association.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The short name of the firewall policy of the association.
     * 
     */
    @Export(name="shortName", refs={String.class}, tree="[0]")
    private Output<String> shortName;

    /**
     * @return The short name of the firewall policy of the association.
     * 
     */
    public Output<String> shortName() {
        return this.shortName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FirewallPolicyAssociation(java.lang.String name) {
        this(name, FirewallPolicyAssociationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FirewallPolicyAssociation(java.lang.String name, FirewallPolicyAssociationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FirewallPolicyAssociation(java.lang.String name, FirewallPolicyAssociationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/firewallPolicyAssociation:FirewallPolicyAssociation", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private FirewallPolicyAssociation(java.lang.String name, Output<java.lang.String> id, @Nullable FirewallPolicyAssociationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/firewallPolicyAssociation:FirewallPolicyAssociation", name, state, makeResourceOptions(options, id), false);
    }

    private static FirewallPolicyAssociationArgs makeArgs(FirewallPolicyAssociationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? FirewallPolicyAssociationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FirewallPolicyAssociation get(java.lang.String name, Output<java.lang.String> id, @Nullable FirewallPolicyAssociationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FirewallPolicyAssociation(name, id, state, options);
    }
}
