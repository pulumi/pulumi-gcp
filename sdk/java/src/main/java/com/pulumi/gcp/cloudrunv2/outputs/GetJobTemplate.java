// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudrunv2.outputs.GetJobTemplateTemplate;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetJobTemplate {
    private Map<String,String> annotations;
    private Map<String,String> labels;
    private Integer parallelism;
    private Integer taskCount;
    private List<GetJobTemplateTemplate> templates;

    private GetJobTemplate() {}
    public Map<String,String> annotations() {
        return this.annotations;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public Integer parallelism() {
        return this.parallelism;
    }
    public Integer taskCount() {
        return this.taskCount;
    }
    public List<GetJobTemplateTemplate> templates() {
        return this.templates;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private Map<String,String> labels;
        private Integer parallelism;
        private Integer taskCount;
        private List<GetJobTemplateTemplate> templates;
        public Builder() {}
        public Builder(GetJobTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.labels = defaults.labels;
    	      this.parallelism = defaults.parallelism;
    	      this.taskCount = defaults.taskCount;
    	      this.templates = defaults.templates;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetJobTemplate", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetJobTemplate", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder parallelism(Integer parallelism) {
            if (parallelism == null) {
              throw new MissingRequiredPropertyException("GetJobTemplate", "parallelism");
            }
            this.parallelism = parallelism;
            return this;
        }
        @CustomType.Setter
        public Builder taskCount(Integer taskCount) {
            if (taskCount == null) {
              throw new MissingRequiredPropertyException("GetJobTemplate", "taskCount");
            }
            this.taskCount = taskCount;
            return this;
        }
        @CustomType.Setter
        public Builder templates(List<GetJobTemplateTemplate> templates) {
            if (templates == null) {
              throw new MissingRequiredPropertyException("GetJobTemplate", "templates");
            }
            this.templates = templates;
            return this;
        }
        public Builder templates(GetJobTemplateTemplate... templates) {
            return templates(List.of(templates));
        }
        public GetJobTemplate build() {
            final var _resultValue = new GetJobTemplate();
            _resultValue.annotations = annotations;
            _resultValue.labels = labels;
            _resultValue.parallelism = parallelism;
            _resultValue.taskCount = taskCount;
            _resultValue.templates = templates;
            return _resultValue;
        }
    }
}
