// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securesourcemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BranchRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BranchRuleArgs Empty = new BranchRuleArgs();

    /**
     * Determines if allow stale reviews or approvals before merging to the branch.
     * 
     */
    @Import(name="allowStaleReviews")
    private @Nullable Output<Boolean> allowStaleReviews;

    /**
     * @return Determines if allow stale reviews or approvals before merging to the branch.
     * 
     */
    public Optional<Output<Boolean>> allowStaleReviews() {
        return Optional.ofNullable(this.allowStaleReviews);
    }

    /**
     * The ID for the BranchRule.
     * 
     */
    @Import(name="branchRuleId", required=true)
    private Output<String> branchRuleId;

    /**
     * @return The ID for the BranchRule.
     * 
     */
    public Output<String> branchRuleId() {
        return this.branchRuleId;
    }

    /**
     * Determines if the branch rule is disabled or not.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Determines if the branch rule is disabled or not.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
     * 
     */
    @Import(name="includePattern", required=true)
    private Output<String> includePattern;

    /**
     * @return The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
     * 
     */
    public Output<String> includePattern() {
        return this.includePattern;
    }

    /**
     * The location for the Repository.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location for the Repository.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The minimum number of approvals required for the branch rule to be matched.
     * 
     */
    @Import(name="minimumApprovalsCount")
    private @Nullable Output<Integer> minimumApprovalsCount;

    /**
     * @return The minimum number of approvals required for the branch rule to be matched.
     * 
     */
    public Optional<Output<Integer>> minimumApprovalsCount() {
        return Optional.ofNullable(this.minimumApprovalsCount);
    }

    /**
     * The minimum number of reviews required for the branch rule to be matched.
     * 
     */
    @Import(name="minimumReviewsCount")
    private @Nullable Output<Integer> minimumReviewsCount;

    /**
     * @return The minimum number of reviews required for the branch rule to be matched.
     * 
     */
    public Optional<Output<Integer>> minimumReviewsCount() {
        return Optional.ofNullable(this.minimumReviewsCount);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The ID for the Repository.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return The ID for the Repository.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    /**
     * Determines if require comments resolved before merging to the branch.
     * 
     */
    @Import(name="requireCommentsResolved")
    private @Nullable Output<Boolean> requireCommentsResolved;

    /**
     * @return Determines if require comments resolved before merging to the branch.
     * 
     */
    public Optional<Output<Boolean>> requireCommentsResolved() {
        return Optional.ofNullable(this.requireCommentsResolved);
    }

    /**
     * Determines if require linear history before merging to the branch.
     * 
     */
    @Import(name="requireLinearHistory")
    private @Nullable Output<Boolean> requireLinearHistory;

    /**
     * @return Determines if require linear history before merging to the branch.
     * 
     */
    public Optional<Output<Boolean>> requireLinearHistory() {
        return Optional.ofNullable(this.requireLinearHistory);
    }

    /**
     * Determines if the branch rule requires a pull request or not.
     * 
     */
    @Import(name="requirePullRequest")
    private @Nullable Output<Boolean> requirePullRequest;

    /**
     * @return Determines if the branch rule requires a pull request or not.
     * 
     */
    public Optional<Output<Boolean>> requirePullRequest() {
        return Optional.ofNullable(this.requirePullRequest);
    }

    private BranchRuleArgs() {}

    private BranchRuleArgs(BranchRuleArgs $) {
        this.allowStaleReviews = $.allowStaleReviews;
        this.branchRuleId = $.branchRuleId;
        this.disabled = $.disabled;
        this.includePattern = $.includePattern;
        this.location = $.location;
        this.minimumApprovalsCount = $.minimumApprovalsCount;
        this.minimumReviewsCount = $.minimumReviewsCount;
        this.project = $.project;
        this.repositoryId = $.repositoryId;
        this.requireCommentsResolved = $.requireCommentsResolved;
        this.requireLinearHistory = $.requireLinearHistory;
        this.requirePullRequest = $.requirePullRequest;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BranchRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BranchRuleArgs $;

        public Builder() {
            $ = new BranchRuleArgs();
        }

        public Builder(BranchRuleArgs defaults) {
            $ = new BranchRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowStaleReviews Determines if allow stale reviews or approvals before merging to the branch.
         * 
         * @return builder
         * 
         */
        public Builder allowStaleReviews(@Nullable Output<Boolean> allowStaleReviews) {
            $.allowStaleReviews = allowStaleReviews;
            return this;
        }

        /**
         * @param allowStaleReviews Determines if allow stale reviews or approvals before merging to the branch.
         * 
         * @return builder
         * 
         */
        public Builder allowStaleReviews(Boolean allowStaleReviews) {
            return allowStaleReviews(Output.of(allowStaleReviews));
        }

        /**
         * @param branchRuleId The ID for the BranchRule.
         * 
         * @return builder
         * 
         */
        public Builder branchRuleId(Output<String> branchRuleId) {
            $.branchRuleId = branchRuleId;
            return this;
        }

        /**
         * @param branchRuleId The ID for the BranchRule.
         * 
         * @return builder
         * 
         */
        public Builder branchRuleId(String branchRuleId) {
            return branchRuleId(Output.of(branchRuleId));
        }

        /**
         * @param disabled Determines if the branch rule is disabled or not.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Determines if the branch rule is disabled or not.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param includePattern The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
         * 
         * @return builder
         * 
         */
        public Builder includePattern(Output<String> includePattern) {
            $.includePattern = includePattern;
            return this;
        }

        /**
         * @param includePattern The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
         * 
         * @return builder
         * 
         */
        public Builder includePattern(String includePattern) {
            return includePattern(Output.of(includePattern));
        }

        /**
         * @param location The location for the Repository.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the Repository.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param minimumApprovalsCount The minimum number of approvals required for the branch rule to be matched.
         * 
         * @return builder
         * 
         */
        public Builder minimumApprovalsCount(@Nullable Output<Integer> minimumApprovalsCount) {
            $.minimumApprovalsCount = minimumApprovalsCount;
            return this;
        }

        /**
         * @param minimumApprovalsCount The minimum number of approvals required for the branch rule to be matched.
         * 
         * @return builder
         * 
         */
        public Builder minimumApprovalsCount(Integer minimumApprovalsCount) {
            return minimumApprovalsCount(Output.of(minimumApprovalsCount));
        }

        /**
         * @param minimumReviewsCount The minimum number of reviews required for the branch rule to be matched.
         * 
         * @return builder
         * 
         */
        public Builder minimumReviewsCount(@Nullable Output<Integer> minimumReviewsCount) {
            $.minimumReviewsCount = minimumReviewsCount;
            return this;
        }

        /**
         * @param minimumReviewsCount The minimum number of reviews required for the branch rule to be matched.
         * 
         * @return builder
         * 
         */
        public Builder minimumReviewsCount(Integer minimumReviewsCount) {
            return minimumReviewsCount(Output.of(minimumReviewsCount));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param repositoryId The ID for the Repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId The ID for the Repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        /**
         * @param requireCommentsResolved Determines if require comments resolved before merging to the branch.
         * 
         * @return builder
         * 
         */
        public Builder requireCommentsResolved(@Nullable Output<Boolean> requireCommentsResolved) {
            $.requireCommentsResolved = requireCommentsResolved;
            return this;
        }

        /**
         * @param requireCommentsResolved Determines if require comments resolved before merging to the branch.
         * 
         * @return builder
         * 
         */
        public Builder requireCommentsResolved(Boolean requireCommentsResolved) {
            return requireCommentsResolved(Output.of(requireCommentsResolved));
        }

        /**
         * @param requireLinearHistory Determines if require linear history before merging to the branch.
         * 
         * @return builder
         * 
         */
        public Builder requireLinearHistory(@Nullable Output<Boolean> requireLinearHistory) {
            $.requireLinearHistory = requireLinearHistory;
            return this;
        }

        /**
         * @param requireLinearHistory Determines if require linear history before merging to the branch.
         * 
         * @return builder
         * 
         */
        public Builder requireLinearHistory(Boolean requireLinearHistory) {
            return requireLinearHistory(Output.of(requireLinearHistory));
        }

        /**
         * @param requirePullRequest Determines if the branch rule requires a pull request or not.
         * 
         * @return builder
         * 
         */
        public Builder requirePullRequest(@Nullable Output<Boolean> requirePullRequest) {
            $.requirePullRequest = requirePullRequest;
            return this;
        }

        /**
         * @param requirePullRequest Determines if the branch rule requires a pull request or not.
         * 
         * @return builder
         * 
         */
        public Builder requirePullRequest(Boolean requirePullRequest) {
            return requirePullRequest(Output.of(requirePullRequest));
        }

        public BranchRuleArgs build() {
            if ($.branchRuleId == null) {
                throw new MissingRequiredPropertyException("BranchRuleArgs", "branchRuleId");
            }
            if ($.includePattern == null) {
                throw new MissingRequiredPropertyException("BranchRuleArgs", "includePattern");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("BranchRuleArgs", "location");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("BranchRuleArgs", "repositoryId");
            }
            return $;
        }
    }

}
