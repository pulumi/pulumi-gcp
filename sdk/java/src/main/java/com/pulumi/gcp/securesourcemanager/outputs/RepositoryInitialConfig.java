// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securesourcemanager.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RepositoryInitialConfig {
    /**
     * @return Default branch name of the repository.
     * 
     */
    private @Nullable String defaultBranch;
    /**
     * @return List of gitignore template names user can choose from.
     * Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
     * 
     */
    private @Nullable List<String> gitignores;
    /**
     * @return License template name user can choose from.
     * Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
     * 
     */
    private @Nullable String license;
    /**
     * @return README template name.
     * Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
     * 
     */
    private @Nullable String readme;

    private RepositoryInitialConfig() {}
    /**
     * @return Default branch name of the repository.
     * 
     */
    public Optional<String> defaultBranch() {
        return Optional.ofNullable(this.defaultBranch);
    }
    /**
     * @return List of gitignore template names user can choose from.
     * Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
     * 
     */
    public List<String> gitignores() {
        return this.gitignores == null ? List.of() : this.gitignores;
    }
    /**
     * @return License template name user can choose from.
     * Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
     * 
     */
    public Optional<String> license() {
        return Optional.ofNullable(this.license);
    }
    /**
     * @return README template name.
     * Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
     * 
     */
    public Optional<String> readme() {
        return Optional.ofNullable(this.readme);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryInitialConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String defaultBranch;
        private @Nullable List<String> gitignores;
        private @Nullable String license;
        private @Nullable String readme;
        public Builder() {}
        public Builder(RepositoryInitialConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultBranch = defaults.defaultBranch;
    	      this.gitignores = defaults.gitignores;
    	      this.license = defaults.license;
    	      this.readme = defaults.readme;
        }

        @CustomType.Setter
        public Builder defaultBranch(@Nullable String defaultBranch) {

            this.defaultBranch = defaultBranch;
            return this;
        }
        @CustomType.Setter
        public Builder gitignores(@Nullable List<String> gitignores) {

            this.gitignores = gitignores;
            return this;
        }
        public Builder gitignores(String... gitignores) {
            return gitignores(List.of(gitignores));
        }
        @CustomType.Setter
        public Builder license(@Nullable String license) {

            this.license = license;
            return this;
        }
        @CustomType.Setter
        public Builder readme(@Nullable String readme) {

            this.readme = readme;
            return this;
        }
        public RepositoryInitialConfig build() {
            final var _resultValue = new RepositoryInitialConfig();
            _resultValue.defaultBranch = defaultBranch;
            _resultValue.gitignores = gitignores;
            _resultValue.license = license;
            _resultValue.readme = readme;
            return _resultValue;
        }
    }
}
