// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.transcoder;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.transcoder.JobArgs;
import com.pulumi.gcp.transcoder.inputs.JobState;
import com.pulumi.gcp.transcoder.outputs.JobConfig;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Transcoding Job Resource
 * 
 * To get more information about Job, see:
 * 
 * * [API documentation](https://cloud.google.com/transcoder/docs/reference/rest/v1/projects.locations.jobs)
 * * How-to Guides
 *     * [Transcoder](https://cloud.google.com/transcoder/docs/)
 * 
 * ## Example Usage
 * 
 * ### Transcoder Job Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.transcoder.JobTemplate;
 * import com.pulumi.gcp.transcoder.JobTemplateArgs;
 * import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigArgs;
 * import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigOutputArgs;
 * import com.pulumi.gcp.transcoder.Job;
 * import com.pulumi.gcp.transcoder.JobArgs;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Bucket("default", BucketArgs.builder()
 *             .name("transcoder-job")
 *             .location("US")
 *             .forceDestroy(true)
 *             .uniformBucketLevelAccess(true)
 *             .publicAccessPrevention("enforced")
 *             .build());
 * 
 *         var exampleMp4 = new BucketObject("exampleMp4", BucketObjectArgs.builder()
 *             .name("example.mp4")
 *             .source(new FileAsset("./test-fixtures/example.mp4"))
 *             .bucket(default_.name())
 *             .build());
 * 
 *         var defaultJobTemplate = new JobTemplate("defaultJobTemplate", JobTemplateArgs.builder()
 *             .jobTemplateId("example-job-template")
 *             .location("us-central1")
 *             .config(JobTemplateConfigArgs.builder()
 *                 .inputs(JobTemplateConfigInputArgs.builder()
 *                     .key("input0")
 *                     .uri(Output.tuple(default_.name(), exampleMp4.name()).applyValue(values -> {
 *                         var defaultName = values.t1;
 *                         var exampleMp4Name = values.t2;
 *                         return String.format("gs://%s/%s", defaultName,exampleMp4Name);
 *                     }))
 *                     .build())
 *                 .output(JobTemplateConfigOutputArgs.builder()
 *                     .uri(default_.name().applyValue(name -> String.format("gs://%s/outputs/", name)))
 *                     .build())
 *                 .editLists(JobTemplateConfigEditListArgs.builder()
 *                     .key("atom0")
 *                     .inputs("input0")
 *                     .startTimeOffset("0s")
 *                     .build())
 *                 .elementaryStreams(                
 *                     JobTemplateConfigElementaryStreamArgs.builder()
 *                         .key("video-stream0")
 *                         .videoStream(JobTemplateConfigElementaryStreamVideoStreamArgs.builder()
 *                             .h264(JobTemplateConfigElementaryStreamVideoStreamH264Args.builder()
 *                                 .widthPixels(640)
 *                                 .heightPixels(360)
 *                                 .bitrateBps(550000)
 *                                 .frameRate(60)
 *                                 .pixelFormat("yuv420p")
 *                                 .rateControlMode("vbr")
 *                                 .crfLevel(21)
 *                                 .gopDuration("3s")
 *                                 .vbvSizeBits(550000)
 *                                 .vbvFullnessBits(495000)
 *                                 .entropyCoder("cabac")
 *                                 .profile("high")
 *                                 .preset("veryfast")
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     JobTemplateConfigElementaryStreamArgs.builder()
 *                         .key("video-stream1")
 *                         .videoStream(JobTemplateConfigElementaryStreamVideoStreamArgs.builder()
 *                             .h264(JobTemplateConfigElementaryStreamVideoStreamH264Args.builder()
 *                                 .widthPixels(1280)
 *                                 .heightPixels(720)
 *                                 .bitrateBps(550000)
 *                                 .frameRate(60)
 *                                 .pixelFormat("yuv420p")
 *                                 .rateControlMode("vbr")
 *                                 .crfLevel(21)
 *                                 .gopDuration("3s")
 *                                 .vbvSizeBits(2500000)
 *                                 .vbvFullnessBits(2250000)
 *                                 .entropyCoder("cabac")
 *                                 .profile("high")
 *                                 .preset("veryfast")
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     JobTemplateConfigElementaryStreamArgs.builder()
 *                         .key("audio-stream0")
 *                         .audioStream(JobTemplateConfigElementaryStreamAudioStreamArgs.builder()
 *                             .codec("aac")
 *                             .bitrateBps(64000)
 *                             .channelCount(2)
 *                             .channelLayouts(                            
 *                                 "fl",
 *                                 "fr")
 *                             .sampleRateHertz(48000)
 *                             .build())
 *                         .build())
 *                 .muxStreams(                
 *                     JobTemplateConfigMuxStreamArgs.builder()
 *                         .key("sd")
 *                         .fileName("sd.mp4")
 *                         .container("mp4")
 *                         .elementaryStreams(                        
 *                             "video-stream0",
 *                             "audio-stream0")
 *                         .build(),
 *                     JobTemplateConfigMuxStreamArgs.builder()
 *                         .key("hd")
 *                         .fileName("hd.mp4")
 *                         .container("mp4")
 *                         .elementaryStreams(                        
 *                             "video-stream1",
 *                             "audio-stream0")
 *                         .build())
 *                 .build())
 *             .labels(Map.of("label", "key"))
 *             .build());
 * 
 *         var defaultJob = new Job("defaultJob", JobArgs.builder()
 *             .templateId(defaultJobTemplate.name())
 *             .location("us-central1")
 *             .labels(Map.of("label", "key"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Transcoder Job Pubsub
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.transcoder.Job;
 * import com.pulumi.gcp.transcoder.JobArgs;
 * import com.pulumi.gcp.transcoder.inputs.JobConfigArgs;
 * import com.pulumi.gcp.transcoder.inputs.JobConfigPubsubDestinationArgs;
 * import com.pulumi.gcp.transcoder.inputs.JobConfigOutputArgs;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Bucket("default", BucketArgs.builder()
 *             .name("transcoder-job")
 *             .location("US")
 *             .forceDestroy(true)
 *             .uniformBucketLevelAccess(true)
 *             .publicAccessPrevention("enforced")
 *             .build());
 * 
 *         var exampleMp4 = new BucketObject("exampleMp4", BucketObjectArgs.builder()
 *             .name("example.mp4")
 *             .source(new FileAsset("./test-fixtures/example.mp4"))
 *             .bucket(default_.name())
 *             .build());
 * 
 *         var transcoderNotifications = new Topic("transcoderNotifications", TopicArgs.builder()
 *             .name("transcoder-notifications")
 *             .build());
 * 
 *         var defaultJob = new Job("defaultJob", JobArgs.builder()
 *             .location("us-central1")
 *             .config(JobConfigArgs.builder()
 *                 .inputs(JobConfigInputArgs.builder()
 *                     .key("input0")
 *                     .uri(Output.tuple(default_.name(), exampleMp4.name()).applyValue(values -> {
 *                         var defaultName = values.t1;
 *                         var exampleMp4Name = values.t2;
 *                         return String.format("gs://%s/%s", defaultName,exampleMp4Name);
 *                     }))
 *                     .build())
 *                 .editLists(JobConfigEditListArgs.builder()
 *                     .key("atom0")
 *                     .inputs("input0")
 *                     .startTimeOffset("0s")
 *                     .build())
 *                 .adBreaks(JobConfigAdBreakArgs.builder()
 *                     .startTimeOffset("3.500s")
 *                     .build())
 *                 .elementaryStreams(                
 *                     JobConfigElementaryStreamArgs.builder()
 *                         .key("video-stream0")
 *                         .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
 *                             .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
 *                                 .widthPixels(640)
 *                                 .heightPixels(360)
 *                                 .bitrateBps(550000)
 *                                 .frameRate(60)
 *                                 .pixelFormat("yuv420p")
 *                                 .rateControlMode("vbr")
 *                                 .crfLevel(21)
 *                                 .gopDuration("3s")
 *                                 .vbvSizeBits(550000)
 *                                 .vbvFullnessBits(495000)
 *                                 .entropyCoder("cabac")
 *                                 .profile("high")
 *                                 .preset("veryfast")
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     JobConfigElementaryStreamArgs.builder()
 *                         .key("video-stream1")
 *                         .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
 *                             .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
 *                                 .widthPixels(1280)
 *                                 .heightPixels(720)
 *                                 .bitrateBps(550000)
 *                                 .frameRate(60)
 *                                 .pixelFormat("yuv420p")
 *                                 .rateControlMode("vbr")
 *                                 .crfLevel(21)
 *                                 .gopDuration("3s")
 *                                 .vbvSizeBits(2500000)
 *                                 .vbvFullnessBits(2250000)
 *                                 .entropyCoder("cabac")
 *                                 .profile("high")
 *                                 .preset("veryfast")
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     JobConfigElementaryStreamArgs.builder()
 *                         .key("audio-stream0")
 *                         .audioStream(JobConfigElementaryStreamAudioStreamArgs.builder()
 *                             .codec("aac")
 *                             .bitrateBps(64000)
 *                             .channelCount(2)
 *                             .channelLayouts(                            
 *                                 "fl",
 *                                 "fr")
 *                             .sampleRateHertz(48000)
 *                             .build())
 *                         .build())
 *                 .muxStreams(                
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("sd")
 *                         .fileName("sd.mp4")
 *                         .container("mp4")
 *                         .elementaryStreams(                        
 *                             "video-stream0",
 *                             "audio-stream0")
 *                         .build(),
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("hd")
 *                         .fileName("hd.mp4")
 *                         .container("mp4")
 *                         .elementaryStreams(                        
 *                             "video-stream1",
 *                             "audio-stream0")
 *                         .build())
 *                 .pubsubDestination(JobConfigPubsubDestinationArgs.builder()
 *                     .topic(transcoderNotifications.id())
 *                     .build())
 *                 .output(JobConfigOutputArgs.builder()
 *                     .uri(default_.name().applyValue(name -> String.format("gs://%s/outputs/", name)))
 *                     .build())
 *                 .build())
 *             .labels(Map.of("label", "key"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Transcoder Job Encryptions
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.projects.ServiceIdentity;
 * import com.pulumi.gcp.projects.ServiceIdentityArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamMember;
 * import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
 * import com.pulumi.gcp.transcoder.Job;
 * import com.pulumi.gcp.transcoder.JobArgs;
 * import com.pulumi.gcp.transcoder.inputs.JobConfigArgs;
 * import com.pulumi.gcp.transcoder.inputs.JobConfigOutputArgs;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Bucket("default", BucketArgs.builder()
 *             .name("transcoder-job")
 *             .location("US")
 *             .forceDestroy(true)
 *             .uniformBucketLevelAccess(true)
 *             .publicAccessPrevention("enforced")
 *             .build());
 * 
 *         var exampleMp4 = new BucketObject("exampleMp4", BucketObjectArgs.builder()
 *             .name("example.mp4")
 *             .source(new FileAsset("./test-fixtures/example.mp4"))
 *             .bucket(default_.name())
 *             .build());
 * 
 *         var encryptionKey = new Secret("encryptionKey", SecretArgs.builder()
 *             .secretId("transcoder-encryption-key")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto()
 *                 .build())
 *             .build());
 * 
 *         var encryptionKeySecretVersion = new SecretVersion("encryptionKeySecretVersion", SecretVersionArgs.builder()
 *             .secret(encryptionKey.name())
 *             .secretData("4A67F2C1B8E93A4F6D3E7890A1BC23DF")
 *             .build());
 * 
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         // this is required to allow the transcoder service identity to access the secret
 *         var transcoder = new ServiceIdentity("transcoder", ServiceIdentityArgs.builder()
 *             .project(project.applyValue(getProjectResult -> getProjectResult.projectId()))
 *             .service("transcoder.googleapis.com")
 *             .build());
 * 
 *         var transcoderEncryptionKeyAccessor = new SecretIamMember("transcoderEncryptionKeyAccessor", SecretIamMemberArgs.builder()
 *             .secretId(encryptionKey.secretId())
 *             .project(encryptionKey.project())
 *             .role("roles/secretmanager.secretAccessor")
 *             .member(transcoder.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build());
 * 
 *         var defaultJob = new Job("defaultJob", JobArgs.builder()
 *             .location("us-central1")
 *             .config(JobConfigArgs.builder()
 *                 .inputs(JobConfigInputArgs.builder()
 *                     .key("input0")
 *                     .uri(Output.tuple(default_.name(), exampleMp4.name()).applyValue(values -> {
 *                         var defaultName = values.t1;
 *                         var exampleMp4Name = values.t2;
 *                         return String.format("gs://%s/%s", defaultName,exampleMp4Name);
 *                     }))
 *                     .build())
 *                 .elementaryStreams(                
 *                     JobConfigElementaryStreamArgs.builder()
 *                         .key("es_video")
 *                         .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
 *                             .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
 *                                 .profile("main")
 *                                 .heightPixels(600)
 *                                 .widthPixels(800)
 *                                 .bitrateBps(1000000)
 *                                 .frameRate(60)
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     JobConfigElementaryStreamArgs.builder()
 *                         .key("es_audio")
 *                         .audioStream(JobConfigElementaryStreamAudioStreamArgs.builder()
 *                             .codec("aac")
 *                             .channelCount(2)
 *                             .bitrateBps(160000)
 *                             .build())
 *                         .build())
 *                 .encryptions(                
 *                     JobConfigEncryptionArgs.builder()
 *                         .id("aes-128")
 *                         .secretManagerKeySource(JobConfigEncryptionSecretManagerKeySourceArgs.builder()
 *                             .secretVersion(encryptionKeySecretVersion.name())
 *                             .build())
 *                         .drmSystems(JobConfigEncryptionDrmSystemsArgs.builder()
 *                             .clearkey()
 *                             .build())
 *                         .aes128()
 *                         .build(),
 *                     JobConfigEncryptionArgs.builder()
 *                         .id("cenc")
 *                         .secretManagerKeySource(JobConfigEncryptionSecretManagerKeySourceArgs.builder()
 *                             .secretVersion(encryptionKeySecretVersion.name())
 *                             .build())
 *                         .drmSystems(JobConfigEncryptionDrmSystemsArgs.builder()
 *                             .widevine()
 *                             .build())
 *                         .mpegCenc(JobConfigEncryptionMpegCencArgs.builder()
 *                             .scheme("cenc")
 *                             .build())
 *                         .build(),
 *                     JobConfigEncryptionArgs.builder()
 *                         .id("cbcs")
 *                         .secretManagerKeySource(JobConfigEncryptionSecretManagerKeySourceArgs.builder()
 *                             .secretVersion(encryptionKeySecretVersion.name())
 *                             .build())
 *                         .drmSystems(JobConfigEncryptionDrmSystemsArgs.builder()
 *                             .widevine()
 *                             .build())
 *                         .mpegCenc(JobConfigEncryptionMpegCencArgs.builder()
 *                             .scheme("cbcs")
 *                             .build())
 *                         .build())
 *                 .muxStreams(                
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("ts_aes128")
 *                         .container("ts")
 *                         .elementaryStreams(                        
 *                             "es_video",
 *                             "es_audio")
 *                         .segmentSettings(JobConfigMuxStreamSegmentSettingsArgs.builder()
 *                             .segmentDuration("6s")
 *                             .build())
 *                         .encryptionId("aes-128")
 *                         .build(),
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("fmp4_cenc_video")
 *                         .container("fmp4")
 *                         .elementaryStreams("es_video")
 *                         .segmentSettings(JobConfigMuxStreamSegmentSettingsArgs.builder()
 *                             .segmentDuration("6s")
 *                             .build())
 *                         .encryptionId("cenc")
 *                         .build(),
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("fmp4_cenc_audio")
 *                         .container("fmp4")
 *                         .elementaryStreams("es_audio")
 *                         .segmentSettings(JobConfigMuxStreamSegmentSettingsArgs.builder()
 *                             .segmentDuration("6s")
 *                             .build())
 *                         .encryptionId("cenc")
 *                         .build(),
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("fmp4_cbcs_video")
 *                         .container("fmp4")
 *                         .elementaryStreams("es_video")
 *                         .segmentSettings(JobConfigMuxStreamSegmentSettingsArgs.builder()
 *                             .segmentDuration("6s")
 *                             .build())
 *                         .encryptionId("cbcs")
 *                         .build(),
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("fmp4_cbcs_audio")
 *                         .container("fmp4")
 *                         .elementaryStreams("es_audio")
 *                         .segmentSettings(JobConfigMuxStreamSegmentSettingsArgs.builder()
 *                             .segmentDuration("6s")
 *                             .build())
 *                         .encryptionId("cbcs")
 *                         .build())
 *                 .manifests(                
 *                     JobConfigManifestArgs.builder()
 *                         .fileName("manifest_aes128.m3u8")
 *                         .type("HLS")
 *                         .muxStreams("ts_aes128")
 *                         .build(),
 *                     JobConfigManifestArgs.builder()
 *                         .fileName("manifest_cenc.mpd")
 *                         .type("DASH")
 *                         .muxStreams(                        
 *                             "fmp4_cenc_video",
 *                             "fmp4_cenc_audio")
 *                         .build(),
 *                     JobConfigManifestArgs.builder()
 *                         .fileName("manifest_cbcs.mpd")
 *                         .type("DASH")
 *                         .muxStreams(                        
 *                             "fmp4_cbcs_video",
 *                             "fmp4_cbcs_audio")
 *                         .build())
 *                 .output(JobConfigOutputArgs.builder()
 *                     .uri(default_.name().applyValue(name -> String.format("gs://%s/outputs/", name)))
 *                     .build())
 *                 .build())
 *             .labels(Map.of("label", "key"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Transcoder Job Overlays
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.transcoder.Job;
 * import com.pulumi.gcp.transcoder.JobArgs;
 * import com.pulumi.gcp.transcoder.inputs.JobConfigArgs;
 * import com.pulumi.gcp.transcoder.inputs.JobConfigOutputArgs;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Bucket("default", BucketArgs.builder()
 *             .name("transcoder-job")
 *             .location("US")
 *             .forceDestroy(true)
 *             .uniformBucketLevelAccess(true)
 *             .publicAccessPrevention("enforced")
 *             .build());
 * 
 *         var exampleMp4 = new BucketObject("exampleMp4", BucketObjectArgs.builder()
 *             .name("example.mp4")
 *             .source(new FileAsset("./test-fixtures/example.mp4"))
 *             .bucket(default_.name())
 *             .build());
 * 
 *         var overlayPng = new BucketObject("overlayPng", BucketObjectArgs.builder()
 *             .name("overlay.png")
 *             .source(new FileAsset("./test-fixtures/overlay.png"))
 *             .bucket(default_.name())
 *             .build());
 * 
 *         var defaultJob = new Job("defaultJob", JobArgs.builder()
 *             .location("us-central1")
 *             .config(JobConfigArgs.builder()
 *                 .inputs(JobConfigInputArgs.builder()
 *                     .key("input0")
 *                     .uri(Output.tuple(default_.name(), exampleMp4.name()).applyValue(values -> {
 *                         var defaultName = values.t1;
 *                         var exampleMp4Name = values.t2;
 *                         return String.format("gs://%s/%s", defaultName,exampleMp4Name);
 *                     }))
 *                     .build())
 *                 .editLists(JobConfigEditListArgs.builder()
 *                     .key("atom0")
 *                     .inputs("input0")
 *                     .startTimeOffset("0s")
 *                     .build())
 *                 .adBreaks(JobConfigAdBreakArgs.builder()
 *                     .startTimeOffset("3.500s")
 *                     .build())
 *                 .overlays(JobConfigOverlayArgs.builder()
 *                     .animations(JobConfigOverlayAnimationArgs.builder()
 *                         .animationFade(JobConfigOverlayAnimationAnimationFadeArgs.builder()
 *                             .fadeType("FADE_IN")
 *                             .startTimeOffset("1.500s")
 *                             .endTimeOffset("3.500s")
 *                             .xy(JobConfigOverlayAnimationAnimationFadeXyArgs.builder()
 *                                 .x(1)
 *                                 .y(0.5)
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .image(JobConfigOverlayImageArgs.builder()
 *                         .uri(Output.tuple(default_.name(), overlayPng.name()).applyValue(values -> {
 *                             var defaultName = values.t1;
 *                             var overlayPngName = values.t2;
 *                             return String.format("gs://%s/%s", defaultName,overlayPngName);
 *                         }))
 *                         .build())
 *                     .build())
 *                 .elementaryStreams(                
 *                     JobConfigElementaryStreamArgs.builder()
 *                         .key("video-stream0")
 *                         .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
 *                             .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
 *                                 .widthPixels(640)
 *                                 .heightPixels(360)
 *                                 .bitrateBps(550000)
 *                                 .frameRate(60)
 *                                 .pixelFormat("yuv420p")
 *                                 .rateControlMode("vbr")
 *                                 .crfLevel(21)
 *                                 .gopDuration("3s")
 *                                 .vbvSizeBits(550000)
 *                                 .vbvFullnessBits(495000)
 *                                 .entropyCoder("cabac")
 *                                 .profile("high")
 *                                 .preset("veryfast")
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     JobConfigElementaryStreamArgs.builder()
 *                         .key("video-stream1")
 *                         .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
 *                             .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
 *                                 .widthPixels(1280)
 *                                 .heightPixels(720)
 *                                 .bitrateBps(550000)
 *                                 .frameRate(60)
 *                                 .pixelFormat("yuv420p")
 *                                 .rateControlMode("vbr")
 *                                 .crfLevel(21)
 *                                 .gopDuration("3s")
 *                                 .vbvSizeBits(2500000)
 *                                 .vbvFullnessBits(2250000)
 *                                 .entropyCoder("cabac")
 *                                 .profile("high")
 *                                 .preset("veryfast")
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     JobConfigElementaryStreamArgs.builder()
 *                         .key("audio-stream0")
 *                         .audioStream(JobConfigElementaryStreamAudioStreamArgs.builder()
 *                             .codec("aac")
 *                             .bitrateBps(64000)
 *                             .channelCount(2)
 *                             .channelLayouts(                            
 *                                 "fl",
 *                                 "fr")
 *                             .sampleRateHertz(48000)
 *                             .build())
 *                         .build())
 *                 .muxStreams(                
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("sd")
 *                         .fileName("sd.mp4")
 *                         .container("mp4")
 *                         .elementaryStreams(                        
 *                             "video-stream0",
 *                             "audio-stream0")
 *                         .build(),
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("hd")
 *                         .fileName("hd.mp4")
 *                         .container("mp4")
 *                         .elementaryStreams(                        
 *                             "video-stream1",
 *                             "audio-stream0")
 *                         .build())
 *                 .output(JobConfigOutputArgs.builder()
 *                     .uri(default_.name().applyValue(name -> String.format("gs://%s/outputs/", name)))
 *                     .build())
 *                 .build())
 *             .labels(Map.of("label", "key"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Transcoder Job Manifests
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.transcoder.Job;
 * import com.pulumi.gcp.transcoder.JobArgs;
 * import com.pulumi.gcp.transcoder.inputs.JobConfigArgs;
 * import com.pulumi.gcp.transcoder.inputs.JobConfigOutputArgs;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Bucket("default", BucketArgs.builder()
 *             .name("transcoder-job")
 *             .location("US")
 *             .forceDestroy(true)
 *             .uniformBucketLevelAccess(true)
 *             .publicAccessPrevention("enforced")
 *             .build());
 * 
 *         var exampleMp4 = new BucketObject("exampleMp4", BucketObjectArgs.builder()
 *             .name("example.mp4")
 *             .source(new FileAsset("./test-fixtures/example.mp4"))
 *             .bucket(default_.name())
 *             .build());
 * 
 *         var defaultJob = new Job("defaultJob", JobArgs.builder()
 *             .location("us-central1")
 *             .config(JobConfigArgs.builder()
 *                 .inputs(JobConfigInputArgs.builder()
 *                     .key("input0")
 *                     .uri(Output.tuple(default_.name(), exampleMp4.name()).applyValue(values -> {
 *                         var defaultName = values.t1;
 *                         var exampleMp4Name = values.t2;
 *                         return String.format("gs://%s/%s", defaultName,exampleMp4Name);
 *                     }))
 *                     .build())
 *                 .editLists(JobConfigEditListArgs.builder()
 *                     .key("atom0")
 *                     .startTimeOffset("0s")
 *                     .inputs("input0")
 *                     .build())
 *                 .adBreaks(JobConfigAdBreakArgs.builder()
 *                     .startTimeOffset("3.500s")
 *                     .build())
 *                 .elementaryStreams(                
 *                     JobConfigElementaryStreamArgs.builder()
 *                         .key("video-stream0")
 *                         .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
 *                             .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
 *                                 .widthPixels(640)
 *                                 .heightPixels(360)
 *                                 .bitrateBps(550000)
 *                                 .frameRate(60)
 *                                 .pixelFormat("yuv420p")
 *                                 .rateControlMode("vbr")
 *                                 .crfLevel(21)
 *                                 .gopDuration("3s")
 *                                 .vbvSizeBits(550000)
 *                                 .vbvFullnessBits(495000)
 *                                 .entropyCoder("cabac")
 *                                 .profile("high")
 *                                 .preset("veryfast")
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     JobConfigElementaryStreamArgs.builder()
 *                         .key("video-stream1")
 *                         .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
 *                             .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
 *                                 .widthPixels(1280)
 *                                 .heightPixels(720)
 *                                 .bitrateBps(550000)
 *                                 .frameRate(60)
 *                                 .pixelFormat("yuv420p")
 *                                 .rateControlMode("vbr")
 *                                 .crfLevel(21)
 *                                 .gopDuration("3s")
 *                                 .vbvSizeBits(2500000)
 *                                 .vbvFullnessBits(2250000)
 *                                 .entropyCoder("cabac")
 *                                 .profile("high")
 *                                 .preset("veryfast")
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     JobConfigElementaryStreamArgs.builder()
 *                         .key("audio-stream0")
 *                         .audioStream(JobConfigElementaryStreamAudioStreamArgs.builder()
 *                             .codec("aac")
 *                             .bitrateBps(64000)
 *                             .channelCount(2)
 *                             .channelLayouts(                            
 *                                 "fl",
 *                                 "fr")
 *                             .sampleRateHertz(48000)
 *                             .build())
 *                         .build())
 *                 .muxStreams(                
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("sd")
 *                         .fileName("sd.mp4")
 *                         .container("mp4")
 *                         .elementaryStreams(                        
 *                             "video-stream0",
 *                             "audio-stream0")
 *                         .build(),
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("hd")
 *                         .fileName("hd.mp4")
 *                         .container("mp4")
 *                         .elementaryStreams(                        
 *                             "video-stream1",
 *                             "audio-stream0")
 *                         .build(),
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("media-sd")
 *                         .fileName("media-sd.ts")
 *                         .container("ts")
 *                         .elementaryStreams(                        
 *                             "video-stream0",
 *                             "audio-stream0")
 *                         .build(),
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("media-hd")
 *                         .fileName("media-hd.ts")
 *                         .container("ts")
 *                         .elementaryStreams(                        
 *                             "video-stream1",
 *                             "audio-stream0")
 *                         .build(),
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("video-only-sd")
 *                         .fileName("video-only-sd.m4s")
 *                         .container("fmp4")
 *                         .elementaryStreams("video-stream0")
 *                         .build(),
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("video-only-hd")
 *                         .fileName("video-only-hd.m4s")
 *                         .container("fmp4")
 *                         .elementaryStreams("video-stream1")
 *                         .build(),
 *                     JobConfigMuxStreamArgs.builder()
 *                         .key("audio-only")
 *                         .fileName("audio-only.m4s")
 *                         .container("fmp4")
 *                         .elementaryStreams("audio-stream0")
 *                         .build())
 *                 .manifests(                
 *                     JobConfigManifestArgs.builder()
 *                         .fileName("manifest.m3u8")
 *                         .type("HLS")
 *                         .muxStreams(                        
 *                             "media-sd",
 *                             "media-hd")
 *                         .build(),
 *                     JobConfigManifestArgs.builder()
 *                         .fileName("manifest.mpd")
 *                         .type("DASH")
 *                         .muxStreams(                        
 *                             "video-only-sd",
 *                             "video-only-hd",
 *                             "audio-only")
 *                         .build())
 *                 .output(JobConfigOutputArgs.builder()
 *                     .uri(default_.name().applyValue(name -> String.format("gs://%s/outputs/", name)))
 *                     .build())
 *                 .build())
 *             .labels(Map.of("label", "key"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Job can be imported using any of these accepted formats:
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, Job can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:transcoder/job:Job default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:transcoder/job:Job")
public class Job extends com.pulumi.resources.CustomResource {
    /**
     * The configuration for this template.
     * Structure is documented below.
     * 
     */
    @Export(name="config", refs={JobConfig.class}, tree="[0]")
    private Output<JobConfig> config;

    /**
     * @return The configuration for this template.
     * Structure is documented below.
     * 
     */
    public Output<JobConfig> config() {
        return this.config;
    }
    /**
     * The time the job was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The time the job was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * The time the transcoding finished.
     * 
     */
    @Export(name="endTime", refs={String.class}, tree="[0]")
    private Output<String> endTime;

    /**
     * @return The time the transcoding finished.
     * 
     */
    public Output<String> endTime() {
        return this.endTime;
    }
    /**
     * The labels associated with this job. You can use these to organize and group your jobs.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return The labels associated with this job. You can use these to organize and group your jobs.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location of the transcoding job resource.
     * 
     * ***
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the transcoding job resource.
     * 
     * ***
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The resource name of the job.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name of the job.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The time the transcoding started.
     * 
     */
    @Export(name="startTime", refs={String.class}, tree="[0]")
    private Output<String> startTime;

    /**
     * @return The time the transcoding started.
     * 
     */
    public Output<String> startTime() {
        return this.startTime;
    }
    /**
     * The current state of the job.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current state of the job.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Specify the templateId to use for populating Job.config.
     * The default is preset/web-hd, which is the only supported preset.
     * 
     */
    @Export(name="templateId", refs={String.class}, tree="[0]")
    private Output<String> templateId;

    /**
     * @return Specify the templateId to use for populating Job.config.
     * The default is preset/web-hd, which is the only supported preset.
     * 
     */
    public Output<String> templateId() {
        return this.templateId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Job(java.lang.String name) {
        this(name, JobArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Job(java.lang.String name, JobArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Job(java.lang.String name, JobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:transcoder/job:Job", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Job(java.lang.String name, Output<java.lang.String> id, @Nullable JobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:transcoder/job:Job", name, state, makeResourceOptions(options, id), false);
    }

    private static JobArgs makeArgs(JobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? JobArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Job get(java.lang.String name, Output<java.lang.String> id, @Nullable JobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Job(name, id, state, options);
    }
}
