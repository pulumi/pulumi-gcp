// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigquery.inputs.JobQueryDefaultDatasetArgs;
import com.pulumi.gcp.bigquery.inputs.JobQueryDestinationEncryptionConfigurationArgs;
import com.pulumi.gcp.bigquery.inputs.JobQueryDestinationTableArgs;
import com.pulumi.gcp.bigquery.inputs.JobQueryScriptOptionsArgs;
import com.pulumi.gcp.bigquery.inputs.JobQueryUserDefinedFunctionResourceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobQueryArgs Empty = new JobQueryArgs();

    /**
     * If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance.
     * Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed.
     * However, you must still set destinationTable when result size exceeds the allowed maximum response size.
     * 
     */
    @Import(name="allowLargeResults")
    private @Nullable Output<Boolean> allowLargeResults;

    /**
     * @return If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance.
     * Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed.
     * However, you must still set destinationTable when result size exceeds the allowed maximum response size.
     * 
     */
    public Optional<Output<Boolean>> allowLargeResults() {
        return Optional.ofNullable(this.allowLargeResults);
    }

    /**
     * Specifies whether the job is allowed to create new tables. The following values are supported:
     * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
     * CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result.
     * Creation, truncation and append actions occur as one atomic update upon job completion
     * Default value is `CREATE_IF_NEEDED`.
     * Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
     * 
     */
    @Import(name="createDisposition")
    private @Nullable Output<String> createDisposition;

    /**
     * @return Specifies whether the job is allowed to create new tables. The following values are supported:
     * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
     * CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result.
     * Creation, truncation and append actions occur as one atomic update upon job completion
     * Default value is `CREATE_IF_NEEDED`.
     * Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
     * 
     */
    public Optional<Output<String>> createDisposition() {
        return Optional.ofNullable(this.createDisposition);
    }

    /**
     * Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
     * Structure is documented below.
     * 
     */
    @Import(name="defaultDataset")
    private @Nullable Output<JobQueryDefaultDatasetArgs> defaultDataset;

    /**
     * @return Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
     * Structure is documented below.
     * 
     */
    public Optional<Output<JobQueryDefaultDatasetArgs>> defaultDataset() {
        return Optional.ofNullable(this.defaultDataset);
    }

    /**
     * Custom encryption configuration (e.g., Cloud KMS keys)
     * Structure is documented below.
     * 
     */
    @Import(name="destinationEncryptionConfiguration")
    private @Nullable Output<JobQueryDestinationEncryptionConfigurationArgs> destinationEncryptionConfiguration;

    /**
     * @return Custom encryption configuration (e.g., Cloud KMS keys)
     * Structure is documented below.
     * 
     */
    public Optional<Output<JobQueryDestinationEncryptionConfigurationArgs>> destinationEncryptionConfiguration() {
        return Optional.ofNullable(this.destinationEncryptionConfiguration);
    }

    /**
     * Describes the table where the query results should be stored.
     * This property must be set for large results that exceed the maximum response size.
     * For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
     * Structure is documented below.
     * 
     */
    @Import(name="destinationTable")
    private @Nullable Output<JobQueryDestinationTableArgs> destinationTable;

    /**
     * @return Describes the table where the query results should be stored.
     * This property must be set for large results that exceed the maximum response size.
     * For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
     * Structure is documented below.
     * 
     */
    public Optional<Output<JobQueryDestinationTableArgs>> destinationTable() {
        return Optional.ofNullable(this.destinationTable);
    }

    /**
     * If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results.
     * allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
     * 
     */
    @Import(name="flattenResults")
    private @Nullable Output<Boolean> flattenResults;

    /**
     * @return If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results.
     * allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
     * 
     */
    public Optional<Output<Boolean>> flattenResults() {
        return Optional.ofNullable(this.flattenResults);
    }

    /**
     * Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge).
     * If unspecified, this will be set to your project default.
     * 
     */
    @Import(name="maximumBillingTier")
    private @Nullable Output<Integer> maximumBillingTier;

    /**
     * @return Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge).
     * If unspecified, this will be set to your project default.
     * 
     */
    public Optional<Output<Integer>> maximumBillingTier() {
        return Optional.ofNullable(this.maximumBillingTier);
    }

    /**
     * Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge).
     * If unspecified, this will be set to your project default.
     * 
     */
    @Import(name="maximumBytesBilled")
    private @Nullable Output<String> maximumBytesBilled;

    /**
     * @return Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge).
     * If unspecified, this will be set to your project default.
     * 
     */
    public Optional<Output<String>> maximumBytesBilled() {
        return Optional.ofNullable(this.maximumBytesBilled);
    }

    /**
     * Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
     * 
     */
    @Import(name="parameterMode")
    private @Nullable Output<String> parameterMode;

    /**
     * @return Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
     * 
     */
    public Optional<Output<String>> parameterMode() {
        return Optional.ofNullable(this.parameterMode);
    }

    /**
     * Specifies a priority for the query.
     * Default value is `INTERACTIVE`.
     * Possible values are `INTERACTIVE` and `BATCH`.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<String> priority;

    /**
     * @return Specifies a priority for the query.
     * Default value is `INTERACTIVE`.
     * Possible values are `INTERACTIVE` and `BATCH`.
     * 
     */
    public Optional<Output<String>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
     * *NOTE*: queries containing [DML language](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
     * (`DELETE`, `UPDATE`, `MERGE`, `INSERT`) must specify `create_disposition = &#34;&#34;` and `write_disposition = &#34;&#34;`.
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
     * *NOTE*: queries containing [DML language](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
     * (`DELETE`, `UPDATE`, `MERGE`, `INSERT`) must specify `create_disposition = &#34;&#34;` and `write_disposition = &#34;&#34;`.
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    /**
     * Allows the schema of the destination table to be updated as a side effect of the query job.
     * Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
     * when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table,
     * specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.
     * One or more of the following values are specified:
     * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
     * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
     * 
     */
    @Import(name="schemaUpdateOptions")
    private @Nullable Output<List<String>> schemaUpdateOptions;

    /**
     * @return Allows the schema of the destination table to be updated as a side effect of the query job.
     * Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
     * when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table,
     * specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.
     * One or more of the following values are specified:
     * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
     * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
     * 
     */
    public Optional<Output<List<String>>> schemaUpdateOptions() {
        return Optional.ofNullable(this.schemaUpdateOptions);
    }

    /**
     * Options controlling the execution of scripts.
     * Structure is documented below.
     * 
     */
    @Import(name="scriptOptions")
    private @Nullable Output<JobQueryScriptOptionsArgs> scriptOptions;

    /**
     * @return Options controlling the execution of scripts.
     * Structure is documented below.
     * 
     */
    public Optional<Output<JobQueryScriptOptionsArgs>> scriptOptions() {
        return Optional.ofNullable(this.scriptOptions);
    }

    /**
     * Specifies whether to use BigQuery&#39;s legacy SQL dialect for this query. The default value is true.
     * If set to false, the query will use BigQuery&#39;s standard SQL.
     * 
     */
    @Import(name="useLegacySql")
    private @Nullable Output<Boolean> useLegacySql;

    /**
     * @return Specifies whether to use BigQuery&#39;s legacy SQL dialect for this query. The default value is true.
     * If set to false, the query will use BigQuery&#39;s standard SQL.
     * 
     */
    public Optional<Output<Boolean>> useLegacySql() {
        return Optional.ofNullable(this.useLegacySql);
    }

    /**
     * Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever
     * tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified.
     * The default value is true.
     * 
     */
    @Import(name="useQueryCache")
    private @Nullable Output<Boolean> useQueryCache;

    /**
     * @return Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever
     * tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified.
     * The default value is true.
     * 
     */
    public Optional<Output<Boolean>> useQueryCache() {
        return Optional.ofNullable(this.useQueryCache);
    }

    /**
     * Describes user-defined function resources used in the query.
     * Structure is documented below.
     * 
     */
    @Import(name="userDefinedFunctionResources")
    private @Nullable Output<List<JobQueryUserDefinedFunctionResourceArgs>> userDefinedFunctionResources;

    /**
     * @return Describes user-defined function resources used in the query.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<JobQueryUserDefinedFunctionResourceArgs>>> userDefinedFunctionResources() {
        return Optional.ofNullable(this.userDefinedFunctionResources);
    }

    /**
     * Specifies the action that occurs if the destination table already exists. The following values are supported:
     * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
     * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
     * WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result.
     * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
     * Creation, truncation and append actions occur as one atomic update upon job completion.
     * Default value is `WRITE_EMPTY`.
     * Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
     * 
     */
    @Import(name="writeDisposition")
    private @Nullable Output<String> writeDisposition;

    /**
     * @return Specifies the action that occurs if the destination table already exists. The following values are supported:
     * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
     * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
     * WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result.
     * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
     * Creation, truncation and append actions occur as one atomic update upon job completion.
     * Default value is `WRITE_EMPTY`.
     * Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
     * 
     */
    public Optional<Output<String>> writeDisposition() {
        return Optional.ofNullable(this.writeDisposition);
    }

    private JobQueryArgs() {}

    private JobQueryArgs(JobQueryArgs $) {
        this.allowLargeResults = $.allowLargeResults;
        this.createDisposition = $.createDisposition;
        this.defaultDataset = $.defaultDataset;
        this.destinationEncryptionConfiguration = $.destinationEncryptionConfiguration;
        this.destinationTable = $.destinationTable;
        this.flattenResults = $.flattenResults;
        this.maximumBillingTier = $.maximumBillingTier;
        this.maximumBytesBilled = $.maximumBytesBilled;
        this.parameterMode = $.parameterMode;
        this.priority = $.priority;
        this.query = $.query;
        this.schemaUpdateOptions = $.schemaUpdateOptions;
        this.scriptOptions = $.scriptOptions;
        this.useLegacySql = $.useLegacySql;
        this.useQueryCache = $.useQueryCache;
        this.userDefinedFunctionResources = $.userDefinedFunctionResources;
        this.writeDisposition = $.writeDisposition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobQueryArgs $;

        public Builder() {
            $ = new JobQueryArgs();
        }

        public Builder(JobQueryArgs defaults) {
            $ = new JobQueryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowLargeResults If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance.
         * Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed.
         * However, you must still set destinationTable when result size exceeds the allowed maximum response size.
         * 
         * @return builder
         * 
         */
        public Builder allowLargeResults(@Nullable Output<Boolean> allowLargeResults) {
            $.allowLargeResults = allowLargeResults;
            return this;
        }

        /**
         * @param allowLargeResults If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance.
         * Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed.
         * However, you must still set destinationTable when result size exceeds the allowed maximum response size.
         * 
         * @return builder
         * 
         */
        public Builder allowLargeResults(Boolean allowLargeResults) {
            return allowLargeResults(Output.of(allowLargeResults));
        }

        /**
         * @param createDisposition Specifies whether the job is allowed to create new tables. The following values are supported:
         * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
         * CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result.
         * Creation, truncation and append actions occur as one atomic update upon job completion
         * Default value is `CREATE_IF_NEEDED`.
         * Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
         * 
         * @return builder
         * 
         */
        public Builder createDisposition(@Nullable Output<String> createDisposition) {
            $.createDisposition = createDisposition;
            return this;
        }

        /**
         * @param createDisposition Specifies whether the job is allowed to create new tables. The following values are supported:
         * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
         * CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result.
         * Creation, truncation and append actions occur as one atomic update upon job completion
         * Default value is `CREATE_IF_NEEDED`.
         * Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
         * 
         * @return builder
         * 
         */
        public Builder createDisposition(String createDisposition) {
            return createDisposition(Output.of(createDisposition));
        }

        /**
         * @param defaultDataset Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder defaultDataset(@Nullable Output<JobQueryDefaultDatasetArgs> defaultDataset) {
            $.defaultDataset = defaultDataset;
            return this;
        }

        /**
         * @param defaultDataset Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder defaultDataset(JobQueryDefaultDatasetArgs defaultDataset) {
            return defaultDataset(Output.of(defaultDataset));
        }

        /**
         * @param destinationEncryptionConfiguration Custom encryption configuration (e.g., Cloud KMS keys)
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationEncryptionConfiguration(@Nullable Output<JobQueryDestinationEncryptionConfigurationArgs> destinationEncryptionConfiguration) {
            $.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
            return this;
        }

        /**
         * @param destinationEncryptionConfiguration Custom encryption configuration (e.g., Cloud KMS keys)
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationEncryptionConfiguration(JobQueryDestinationEncryptionConfigurationArgs destinationEncryptionConfiguration) {
            return destinationEncryptionConfiguration(Output.of(destinationEncryptionConfiguration));
        }

        /**
         * @param destinationTable Describes the table where the query results should be stored.
         * This property must be set for large results that exceed the maximum response size.
         * For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationTable(@Nullable Output<JobQueryDestinationTableArgs> destinationTable) {
            $.destinationTable = destinationTable;
            return this;
        }

        /**
         * @param destinationTable Describes the table where the query results should be stored.
         * This property must be set for large results that exceed the maximum response size.
         * For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationTable(JobQueryDestinationTableArgs destinationTable) {
            return destinationTable(Output.of(destinationTable));
        }

        /**
         * @param flattenResults If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results.
         * allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
         * 
         * @return builder
         * 
         */
        public Builder flattenResults(@Nullable Output<Boolean> flattenResults) {
            $.flattenResults = flattenResults;
            return this;
        }

        /**
         * @param flattenResults If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results.
         * allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
         * 
         * @return builder
         * 
         */
        public Builder flattenResults(Boolean flattenResults) {
            return flattenResults(Output.of(flattenResults));
        }

        /**
         * @param maximumBillingTier Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge).
         * If unspecified, this will be set to your project default.
         * 
         * @return builder
         * 
         */
        public Builder maximumBillingTier(@Nullable Output<Integer> maximumBillingTier) {
            $.maximumBillingTier = maximumBillingTier;
            return this;
        }

        /**
         * @param maximumBillingTier Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge).
         * If unspecified, this will be set to your project default.
         * 
         * @return builder
         * 
         */
        public Builder maximumBillingTier(Integer maximumBillingTier) {
            return maximumBillingTier(Output.of(maximumBillingTier));
        }

        /**
         * @param maximumBytesBilled Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge).
         * If unspecified, this will be set to your project default.
         * 
         * @return builder
         * 
         */
        public Builder maximumBytesBilled(@Nullable Output<String> maximumBytesBilled) {
            $.maximumBytesBilled = maximumBytesBilled;
            return this;
        }

        /**
         * @param maximumBytesBilled Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge).
         * If unspecified, this will be set to your project default.
         * 
         * @return builder
         * 
         */
        public Builder maximumBytesBilled(String maximumBytesBilled) {
            return maximumBytesBilled(Output.of(maximumBytesBilled));
        }

        /**
         * @param parameterMode Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
         * 
         * @return builder
         * 
         */
        public Builder parameterMode(@Nullable Output<String> parameterMode) {
            $.parameterMode = parameterMode;
            return this;
        }

        /**
         * @param parameterMode Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
         * 
         * @return builder
         * 
         */
        public Builder parameterMode(String parameterMode) {
            return parameterMode(Output.of(parameterMode));
        }

        /**
         * @param priority Specifies a priority for the query.
         * Default value is `INTERACTIVE`.
         * Possible values are `INTERACTIVE` and `BATCH`.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<String> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Specifies a priority for the query.
         * Default value is `INTERACTIVE`.
         * Possible values are `INTERACTIVE` and `BATCH`.
         * 
         * @return builder
         * 
         */
        public Builder priority(String priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param query SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
         * *NOTE*: queries containing [DML language](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
         * (`DELETE`, `UPDATE`, `MERGE`, `INSERT`) must specify `create_disposition = &#34;&#34;` and `write_disposition = &#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
         * *NOTE*: queries containing [DML language](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
         * (`DELETE`, `UPDATE`, `MERGE`, `INSERT`) must specify `create_disposition = &#34;&#34;` and `write_disposition = &#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param schemaUpdateOptions Allows the schema of the destination table to be updated as a side effect of the query job.
         * Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
         * when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table,
         * specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.
         * One or more of the following values are specified:
         * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
         * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
         * 
         * @return builder
         * 
         */
        public Builder schemaUpdateOptions(@Nullable Output<List<String>> schemaUpdateOptions) {
            $.schemaUpdateOptions = schemaUpdateOptions;
            return this;
        }

        /**
         * @param schemaUpdateOptions Allows the schema of the destination table to be updated as a side effect of the query job.
         * Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
         * when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table,
         * specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.
         * One or more of the following values are specified:
         * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
         * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
         * 
         * @return builder
         * 
         */
        public Builder schemaUpdateOptions(List<String> schemaUpdateOptions) {
            return schemaUpdateOptions(Output.of(schemaUpdateOptions));
        }

        /**
         * @param schemaUpdateOptions Allows the schema of the destination table to be updated as a side effect of the query job.
         * Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
         * when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table,
         * specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.
         * One or more of the following values are specified:
         * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
         * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
         * 
         * @return builder
         * 
         */
        public Builder schemaUpdateOptions(String... schemaUpdateOptions) {
            return schemaUpdateOptions(List.of(schemaUpdateOptions));
        }

        /**
         * @param scriptOptions Options controlling the execution of scripts.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder scriptOptions(@Nullable Output<JobQueryScriptOptionsArgs> scriptOptions) {
            $.scriptOptions = scriptOptions;
            return this;
        }

        /**
         * @param scriptOptions Options controlling the execution of scripts.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder scriptOptions(JobQueryScriptOptionsArgs scriptOptions) {
            return scriptOptions(Output.of(scriptOptions));
        }

        /**
         * @param useLegacySql Specifies whether to use BigQuery&#39;s legacy SQL dialect for this query. The default value is true.
         * If set to false, the query will use BigQuery&#39;s standard SQL.
         * 
         * @return builder
         * 
         */
        public Builder useLegacySql(@Nullable Output<Boolean> useLegacySql) {
            $.useLegacySql = useLegacySql;
            return this;
        }

        /**
         * @param useLegacySql Specifies whether to use BigQuery&#39;s legacy SQL dialect for this query. The default value is true.
         * If set to false, the query will use BigQuery&#39;s standard SQL.
         * 
         * @return builder
         * 
         */
        public Builder useLegacySql(Boolean useLegacySql) {
            return useLegacySql(Output.of(useLegacySql));
        }

        /**
         * @param useQueryCache Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever
         * tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified.
         * The default value is true.
         * 
         * @return builder
         * 
         */
        public Builder useQueryCache(@Nullable Output<Boolean> useQueryCache) {
            $.useQueryCache = useQueryCache;
            return this;
        }

        /**
         * @param useQueryCache Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever
         * tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified.
         * The default value is true.
         * 
         * @return builder
         * 
         */
        public Builder useQueryCache(Boolean useQueryCache) {
            return useQueryCache(Output.of(useQueryCache));
        }

        /**
         * @param userDefinedFunctionResources Describes user-defined function resources used in the query.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder userDefinedFunctionResources(@Nullable Output<List<JobQueryUserDefinedFunctionResourceArgs>> userDefinedFunctionResources) {
            $.userDefinedFunctionResources = userDefinedFunctionResources;
            return this;
        }

        /**
         * @param userDefinedFunctionResources Describes user-defined function resources used in the query.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder userDefinedFunctionResources(List<JobQueryUserDefinedFunctionResourceArgs> userDefinedFunctionResources) {
            return userDefinedFunctionResources(Output.of(userDefinedFunctionResources));
        }

        /**
         * @param userDefinedFunctionResources Describes user-defined function resources used in the query.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder userDefinedFunctionResources(JobQueryUserDefinedFunctionResourceArgs... userDefinedFunctionResources) {
            return userDefinedFunctionResources(List.of(userDefinedFunctionResources));
        }

        /**
         * @param writeDisposition Specifies the action that occurs if the destination table already exists. The following values are supported:
         * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
         * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
         * WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result.
         * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
         * Creation, truncation and append actions occur as one atomic update upon job completion.
         * Default value is `WRITE_EMPTY`.
         * Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
         * 
         * @return builder
         * 
         */
        public Builder writeDisposition(@Nullable Output<String> writeDisposition) {
            $.writeDisposition = writeDisposition;
            return this;
        }

        /**
         * @param writeDisposition Specifies the action that occurs if the destination table already exists. The following values are supported:
         * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
         * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
         * WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result.
         * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
         * Creation, truncation and append actions occur as one atomic update upon job completion.
         * Default value is `WRITE_EMPTY`.
         * Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
         * 
         * @return builder
         * 
         */
        public Builder writeDisposition(String writeDisposition) {
            return writeDisposition(Output.of(writeDisposition));
        }

        public JobQueryArgs build() {
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            return $;
        }
    }

}
