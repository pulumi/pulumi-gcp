// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLakeIamPolicyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLakeIamPolicyArgs Empty = new GetLakeIamPolicyArgs();

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="lake", required=true)
    private Output<String> lake;

    /**
     * @return Used to find the parent resource to bind the IAM policy to
     * 
     */
    public Output<String> lake() {
        return this.lake;
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetLakeIamPolicyArgs() {}

    private GetLakeIamPolicyArgs(GetLakeIamPolicyArgs $) {
        this.lake = $.lake;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLakeIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLakeIamPolicyArgs $;

        public Builder() {
            $ = new GetLakeIamPolicyArgs();
        }

        public Builder(GetLakeIamPolicyArgs defaults) {
            $ = new GetLakeIamPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lake Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder lake(Output<String> lake) {
            $.lake = lake;
            return this;
        }

        /**
         * @param lake Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder lake(String lake) {
            return lake(Output.of(lake));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetLakeIamPolicyArgs build() {
            if ($.lake == null) {
                throw new MissingRequiredPropertyException("GetLakeIamPolicyArgs", "lake");
            }
            return $;
        }
    }

}
