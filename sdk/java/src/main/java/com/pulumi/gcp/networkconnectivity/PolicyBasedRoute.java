// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkconnectivity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.networkconnectivity.PolicyBasedRouteArgs;
import com.pulumi.gcp.networkconnectivity.inputs.PolicyBasedRouteState;
import com.pulumi.gcp.networkconnectivity.outputs.PolicyBasedRouteFilter;
import com.pulumi.gcp.networkconnectivity.outputs.PolicyBasedRouteInterconnectAttachment;
import com.pulumi.gcp.networkconnectivity.outputs.PolicyBasedRouteVirtualMachine;
import com.pulumi.gcp.networkconnectivity.outputs.PolicyBasedRouteWarning;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Policy-based Routes are more powerful routes that route L4 network traffic based on not just destination IP, but also source IP, protocol and more. A Policy-based Route always take precedence when it conflicts with other types of routes.
 * 
 * To get more information about PolicyBasedRoute, see:
 * 
 * * [API documentation](https://cloud.google.com/network-connectivity/docs/reference/networkconnectivity/rest/v1/projects.locations.global.policyBasedRoutes)
 * * How-to Guides
 *     * [Use policy-based routes](https://cloud.google.com/vpc/docs/use-policy-based-routes#api)
 * 
 * ## Example Usage
 * 
 * ### Network Connectivity Policy Based Route Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.networkconnectivity.PolicyBasedRoute;
 * import com.pulumi.gcp.networkconnectivity.PolicyBasedRouteArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.PolicyBasedRouteFilterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myNetwork = new Network("myNetwork", NetworkArgs.builder()
 *             .name("my-network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var default_ = new PolicyBasedRoute("default", PolicyBasedRouteArgs.builder()
 *             .name("my-pbr")
 *             .network(myNetwork.id())
 *             .filter(PolicyBasedRouteFilterArgs.builder()
 *                 .protocolVersion("IPV4")
 *                 .build())
 *             .nextHopOtherRoutes("DEFAULT_ROUTING")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Connectivity Policy Based Route Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.networkconnectivity.PolicyBasedRoute;
 * import com.pulumi.gcp.networkconnectivity.PolicyBasedRouteArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.PolicyBasedRouteFilterArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.PolicyBasedRouteVirtualMachineArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myNetwork = new Network("myNetwork", NetworkArgs.builder()
 *             .name("my-network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         // This example substitutes an arbitrary internal IP for an internal network
 *         // load balancer for brevity. Consult https://cloud.google.com/load-balancing/docs/internal
 *         // to set one up.
 *         var ilb = new GlobalAddress("ilb", GlobalAddressArgs.builder()
 *             .name("my-ilb")
 *             .build());
 * 
 *         var default_ = new PolicyBasedRoute("default", PolicyBasedRouteArgs.builder()
 *             .name("my-pbr")
 *             .description("My routing policy")
 *             .network(myNetwork.id())
 *             .priority(2302)
 *             .filter(PolicyBasedRouteFilterArgs.builder()
 *                 .protocolVersion("IPV4")
 *                 .ipProtocol("UDP")
 *                 .srcRange("10.0.0.0/24")
 *                 .destRange("0.0.0.0/0")
 *                 .build())
 *             .nextHopIlbIp(ilb.address())
 *             .virtualMachine(PolicyBasedRouteVirtualMachineArgs.builder()
 *                 .tags("restricted")
 *                 .build())
 *             .labels(Map.of("env", "default"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * PolicyBasedRoute can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/global/policyBasedRoutes/{{name}}`
 * 
 * * `{{project}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, PolicyBasedRoute can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute default projects/{{project}}/locations/global/policyBasedRoutes/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute")
public class PolicyBasedRoute extends com.pulumi.resources.CustomResource {
    /**
     * Time when the policy-based route was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Time when the policy-based route was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * An optional description of this resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * The filter to match L4 traffic.
     * Structure is documented below.
     * 
     */
    @Export(name="filter", refs={PolicyBasedRouteFilter.class}, tree="[0]")
    private Output<PolicyBasedRouteFilter> filter;

    /**
     * @return The filter to match L4 traffic.
     * Structure is documented below.
     * 
     */
    public Output<PolicyBasedRouteFilter> filter() {
        return this.filter;
    }
    /**
     * The interconnect attachments that this policy-based route applies to.
     * 
     */
    @Export(name="interconnectAttachment", refs={PolicyBasedRouteInterconnectAttachment.class}, tree="[0]")
    private Output</* @Nullable */ PolicyBasedRouteInterconnectAttachment> interconnectAttachment;

    /**
     * @return The interconnect attachments that this policy-based route applies to.
     * 
     */
    public Output<Optional<PolicyBasedRouteInterconnectAttachment>> interconnectAttachment() {
        return Codegen.optional(this.interconnectAttachment);
    }
    /**
     * Type of this resource.
     * 
     */
    @Export(name="kind", refs={String.class}, tree="[0]")
    private Output<String> kind;

    /**
     * @return Type of this resource.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The name of the policy based route.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the policy based route.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
     * 
     */
    @Export(name="network", refs={String.class}, tree="[0]")
    private Output<String> network;

    /**
     * @return Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
     * 
     */
    public Output<String> network() {
        return this.network;
    }
    /**
     * The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
     * 
     */
    @Export(name="nextHopIlbIp", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nextHopIlbIp;

    /**
     * @return The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
     * 
     */
    public Output<Optional<String>> nextHopIlbIp() {
        return Codegen.optional(this.nextHopIlbIp);
    }
    /**
     * Other routes that will be referenced to determine the next hop of the packet. Possible values: [&#34;DEFAULT_ROUTING&#34;]
     * 
     */
    @Export(name="nextHopOtherRoutes", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nextHopOtherRoutes;

    /**
     * @return Other routes that will be referenced to determine the next hop of the packet. Possible values: [&#34;DEFAULT_ROUTING&#34;]
     * 
     */
    public Output<Optional<String>> nextHopOtherRoutes() {
        return Codegen.optional(this.nextHopOtherRoutes);
    }
    /**
     * The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching
     * policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered
     * priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
     * 
     */
    @Export(name="priority", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> priority;

    /**
     * @return The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching
     * policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered
     * priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
     * 
     */
    public Output<Optional<Integer>> priority() {
        return Codegen.optional(this.priority);
    }
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Time when the policy-based route was created.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Time when the policy-based route was created.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * VM instances to which this policy-based route applies to.
     * 
     */
    @Export(name="virtualMachine", refs={PolicyBasedRouteVirtualMachine.class}, tree="[0]")
    private Output</* @Nullable */ PolicyBasedRouteVirtualMachine> virtualMachine;

    /**
     * @return VM instances to which this policy-based route applies to.
     * 
     */
    public Output<Optional<PolicyBasedRouteVirtualMachine>> virtualMachine() {
        return Codegen.optional(this.virtualMachine);
    }
    /**
     * If potential misconfigurations are detected for this route, this field will be populated with warning messages.
     * Structure is documented below.
     * 
     */
    @Export(name="warnings", refs={List.class,PolicyBasedRouteWarning.class}, tree="[0,1]")
    private Output<List<PolicyBasedRouteWarning>> warnings;

    /**
     * @return If potential misconfigurations are detected for this route, this field will be populated with warning messages.
     * Structure is documented below.
     * 
     */
    public Output<List<PolicyBasedRouteWarning>> warnings() {
        return this.warnings;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PolicyBasedRoute(String name) {
        this(name, PolicyBasedRouteArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PolicyBasedRoute(String name, PolicyBasedRouteArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PolicyBasedRoute(String name, PolicyBasedRouteArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute", name, args == null ? PolicyBasedRouteArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PolicyBasedRoute(String name, Output<String> id, @Nullable PolicyBasedRouteState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkconnectivity/policyBasedRoute:PolicyBasedRoute", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PolicyBasedRoute get(String name, Output<String> id, @Nullable PolicyBasedRouteState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PolicyBasedRoute(name, id, state, options);
    }
}
