// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.AssetDiscoverySpecArgs;
import com.pulumi.gcp.dataplex.inputs.AssetDiscoveryStatusArgs;
import com.pulumi.gcp.dataplex.inputs.AssetResourceSpecArgs;
import com.pulumi.gcp.dataplex.inputs.AssetResourceStatusArgs;
import com.pulumi.gcp.dataplex.inputs.AssetSecurityStatusArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssetState extends com.pulumi.resources.ResourceArgs {

    public static final AssetState Empty = new AssetState();

    /**
     * Output only. The time when the asset was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. The time when the asset was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The zone for the resource
     * 
     */
    @Import(name="dataplexZone")
    private @Nullable Output<String> dataplexZone;

    /**
     * @return The zone for the resource
     * 
     */
    public Optional<Output<String>> dataplexZone() {
        return Optional.ofNullable(this.dataplexZone);
    }

    /**
     * Optional. Description of the asset.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. Description of the asset.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Required. Specification of the discovery feature applied to data referenced by this asset. When this spec is left unset, the asset will use the spec set on the parent zone.
     * 
     */
    @Import(name="discoverySpec")
    private @Nullable Output<AssetDiscoverySpecArgs> discoverySpec;

    /**
     * @return Required. Specification of the discovery feature applied to data referenced by this asset. When this spec is left unset, the asset will use the spec set on the parent zone.
     * 
     */
    public Optional<Output<AssetDiscoverySpecArgs>> discoverySpec() {
        return Optional.ofNullable(this.discoverySpec);
    }

    /**
     * Output only. Status of the discovery feature applied to data referenced by this asset.
     * 
     */
    @Import(name="discoveryStatuses")
    private @Nullable Output<List<AssetDiscoveryStatusArgs>> discoveryStatuses;

    /**
     * @return Output only. Status of the discovery feature applied to data referenced by this asset.
     * 
     */
    public Optional<Output<List<AssetDiscoveryStatusArgs>>> discoveryStatuses() {
        return Optional.ofNullable(this.discoveryStatuses);
    }

    /**
     * Optional. User friendly display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Optional. User friendly display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Optional. User defined labels for the asset.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. User defined labels for the asset.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The lake for the resource
     * 
     */
    @Import(name="lake")
    private @Nullable Output<String> lake;

    /**
     * @return The lake for the resource
     * 
     */
    public Optional<Output<String>> lake() {
        return Optional.ofNullable(this.lake);
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the asset.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the asset.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project for the resource
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. Immutable. Specification of the resource that is referenced by this asset.
     * 
     */
    @Import(name="resourceSpec")
    private @Nullable Output<AssetResourceSpecArgs> resourceSpec;

    /**
     * @return Required. Immutable. Specification of the resource that is referenced by this asset.
     * 
     */
    public Optional<Output<AssetResourceSpecArgs>> resourceSpec() {
        return Optional.ofNullable(this.resourceSpec);
    }

    /**
     * Output only. Status of the resource referenced by this asset.
     * 
     */
    @Import(name="resourceStatuses")
    private @Nullable Output<List<AssetResourceStatusArgs>> resourceStatuses;

    /**
     * @return Output only. Status of the resource referenced by this asset.
     * 
     */
    public Optional<Output<List<AssetResourceStatusArgs>>> resourceStatuses() {
        return Optional.ofNullable(this.resourceStatuses);
    }

    /**
     * Output only. Status of the security policy applied to resource referenced by this asset.
     * 
     */
    @Import(name="securityStatuses")
    private @Nullable Output<List<AssetSecurityStatusArgs>> securityStatuses;

    /**
     * @return Output only. Status of the security policy applied to resource referenced by this asset.
     * 
     */
    public Optional<Output<List<AssetSecurityStatusArgs>>> securityStatuses() {
        return Optional.ofNullable(this.securityStatuses);
    }

    /**
     * Output only. Current state of the asset. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Output only. Current state of the asset. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Output only. System generated globally unique ID for the asset. This ID will be different if the asset is deleted and re-created with the same name.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Output only. System generated globally unique ID for the asset. This ID will be different if the asset is deleted and re-created with the same name.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Output only. The time when the asset was last updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. The time when the asset was last updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private AssetState() {}

    private AssetState(AssetState $) {
        this.createTime = $.createTime;
        this.dataplexZone = $.dataplexZone;
        this.description = $.description;
        this.discoverySpec = $.discoverySpec;
        this.discoveryStatuses = $.discoveryStatuses;
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.lake = $.lake;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.resourceSpec = $.resourceSpec;
        this.resourceStatuses = $.resourceStatuses;
        this.securityStatuses = $.securityStatuses;
        this.state = $.state;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssetState $;

        public Builder() {
            $ = new AssetState();
        }

        public Builder(AssetState defaults) {
            $ = new AssetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Output only. The time when the asset was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. The time when the asset was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dataplexZone The zone for the resource
         * 
         * @return builder
         * 
         */
        public Builder dataplexZone(@Nullable Output<String> dataplexZone) {
            $.dataplexZone = dataplexZone;
            return this;
        }

        /**
         * @param dataplexZone The zone for the resource
         * 
         * @return builder
         * 
         */
        public Builder dataplexZone(String dataplexZone) {
            return dataplexZone(Output.of(dataplexZone));
        }

        /**
         * @param description Optional. Description of the asset.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. Description of the asset.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param discoverySpec Required. Specification of the discovery feature applied to data referenced by this asset. When this spec is left unset, the asset will use the spec set on the parent zone.
         * 
         * @return builder
         * 
         */
        public Builder discoverySpec(@Nullable Output<AssetDiscoverySpecArgs> discoverySpec) {
            $.discoverySpec = discoverySpec;
            return this;
        }

        /**
         * @param discoverySpec Required. Specification of the discovery feature applied to data referenced by this asset. When this spec is left unset, the asset will use the spec set on the parent zone.
         * 
         * @return builder
         * 
         */
        public Builder discoverySpec(AssetDiscoverySpecArgs discoverySpec) {
            return discoverySpec(Output.of(discoverySpec));
        }

        /**
         * @param discoveryStatuses Output only. Status of the discovery feature applied to data referenced by this asset.
         * 
         * @return builder
         * 
         */
        public Builder discoveryStatuses(@Nullable Output<List<AssetDiscoveryStatusArgs>> discoveryStatuses) {
            $.discoveryStatuses = discoveryStatuses;
            return this;
        }

        /**
         * @param discoveryStatuses Output only. Status of the discovery feature applied to data referenced by this asset.
         * 
         * @return builder
         * 
         */
        public Builder discoveryStatuses(List<AssetDiscoveryStatusArgs> discoveryStatuses) {
            return discoveryStatuses(Output.of(discoveryStatuses));
        }

        /**
         * @param discoveryStatuses Output only. Status of the discovery feature applied to data referenced by this asset.
         * 
         * @return builder
         * 
         */
        public Builder discoveryStatuses(AssetDiscoveryStatusArgs... discoveryStatuses) {
            return discoveryStatuses(List.of(discoveryStatuses));
        }

        /**
         * @param displayName Optional. User friendly display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Optional. User friendly display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param labels Optional. User defined labels for the asset.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. User defined labels for the asset.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param lake The lake for the resource
         * 
         * @return builder
         * 
         */
        public Builder lake(@Nullable Output<String> lake) {
            $.lake = lake;
            return this;
        }

        /**
         * @param lake The lake for the resource
         * 
         * @return builder
         * 
         */
        public Builder lake(String lake) {
            return lake(Output.of(lake));
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the asset.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the asset.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The project for the resource
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project for the resource
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param resourceSpec Required. Immutable. Specification of the resource that is referenced by this asset.
         * 
         * @return builder
         * 
         */
        public Builder resourceSpec(@Nullable Output<AssetResourceSpecArgs> resourceSpec) {
            $.resourceSpec = resourceSpec;
            return this;
        }

        /**
         * @param resourceSpec Required. Immutable. Specification of the resource that is referenced by this asset.
         * 
         * @return builder
         * 
         */
        public Builder resourceSpec(AssetResourceSpecArgs resourceSpec) {
            return resourceSpec(Output.of(resourceSpec));
        }

        /**
         * @param resourceStatuses Output only. Status of the resource referenced by this asset.
         * 
         * @return builder
         * 
         */
        public Builder resourceStatuses(@Nullable Output<List<AssetResourceStatusArgs>> resourceStatuses) {
            $.resourceStatuses = resourceStatuses;
            return this;
        }

        /**
         * @param resourceStatuses Output only. Status of the resource referenced by this asset.
         * 
         * @return builder
         * 
         */
        public Builder resourceStatuses(List<AssetResourceStatusArgs> resourceStatuses) {
            return resourceStatuses(Output.of(resourceStatuses));
        }

        /**
         * @param resourceStatuses Output only. Status of the resource referenced by this asset.
         * 
         * @return builder
         * 
         */
        public Builder resourceStatuses(AssetResourceStatusArgs... resourceStatuses) {
            return resourceStatuses(List.of(resourceStatuses));
        }

        /**
         * @param securityStatuses Output only. Status of the security policy applied to resource referenced by this asset.
         * 
         * @return builder
         * 
         */
        public Builder securityStatuses(@Nullable Output<List<AssetSecurityStatusArgs>> securityStatuses) {
            $.securityStatuses = securityStatuses;
            return this;
        }

        /**
         * @param securityStatuses Output only. Status of the security policy applied to resource referenced by this asset.
         * 
         * @return builder
         * 
         */
        public Builder securityStatuses(List<AssetSecurityStatusArgs> securityStatuses) {
            return securityStatuses(Output.of(securityStatuses));
        }

        /**
         * @param securityStatuses Output only. Status of the security policy applied to resource referenced by this asset.
         * 
         * @return builder
         * 
         */
        public Builder securityStatuses(AssetSecurityStatusArgs... securityStatuses) {
            return securityStatuses(List.of(securityStatuses));
        }

        /**
         * @param state Output only. Current state of the asset. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Output only. Current state of the asset. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param uid Output only. System generated globally unique ID for the asset. This ID will be different if the asset is deleted and re-created with the same name.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Output only. System generated globally unique ID for the asset. This ID will be different if the asset is deleted and re-created with the same name.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Output only. The time when the asset was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. The time when the asset was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public AssetState build() {
            return $;
        }
    }

}
