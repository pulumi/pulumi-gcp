// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionAbsent;
import com.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionMatchedLog;
import com.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionMonitoringQueryLanguage;
import com.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionPrometheusQueryLanguage;
import com.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionThreshold;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AlertPolicyCondition {
    /**
     * @return A condition that checks that a time series
     * continues to receive new data points.
     * Structure is documented below.
     * 
     */
    private @Nullable AlertPolicyConditionConditionAbsent conditionAbsent;
    /**
     * @return A condition that checks for log messages matching given constraints.
     * If set, no other conditions can be present.
     * Structure is documented below.
     * 
     */
    private @Nullable AlertPolicyConditionConditionMatchedLog conditionMatchedLog;
    /**
     * @return A Monitoring Query Language query that outputs a boolean stream
     * Structure is documented below.
     * 
     */
    private @Nullable AlertPolicyConditionConditionMonitoringQueryLanguage conditionMonitoringQueryLanguage;
    /**
     * @return A Monitoring Query Language query that outputs a boolean stream
     * A condition type that allows alert policies to be defined using
     * Prometheus Query Language (PromQL).
     * The PrometheusQueryLanguageCondition message contains information
     * from a Prometheus alerting rule and its associated rule group.
     * Structure is documented below.
     * 
     */
    private @Nullable AlertPolicyConditionConditionPrometheusQueryLanguage conditionPrometheusQueryLanguage;
    /**
     * @return A condition that compares a time series against a
     * threshold.
     * Structure is documented below.
     * 
     */
    private @Nullable AlertPolicyConditionConditionThreshold conditionThreshold;
    /**
     * @return A short name or phrase used to identify the
     * condition in dashboards, notifications, and
     * incidents. To avoid confusion, don&#39;t use the same
     * display name for multiple conditions in the same
     * policy.
     * 
     */
    private String displayName;
    /**
     * @return (Output)
     * The unique resource name for this condition.
     * Its syntax is:
     * projects/[PROJECT_ID]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID]
     * [CONDITION_ID] is assigned by Stackdriver Monitoring when
     * the condition is created as part of a new or updated alerting
     * policy.
     * 
     */
    private @Nullable String name;

    private AlertPolicyCondition() {}
    /**
     * @return A condition that checks that a time series
     * continues to receive new data points.
     * Structure is documented below.
     * 
     */
    public Optional<AlertPolicyConditionConditionAbsent> conditionAbsent() {
        return Optional.ofNullable(this.conditionAbsent);
    }
    /**
     * @return A condition that checks for log messages matching given constraints.
     * If set, no other conditions can be present.
     * Structure is documented below.
     * 
     */
    public Optional<AlertPolicyConditionConditionMatchedLog> conditionMatchedLog() {
        return Optional.ofNullable(this.conditionMatchedLog);
    }
    /**
     * @return A Monitoring Query Language query that outputs a boolean stream
     * Structure is documented below.
     * 
     */
    public Optional<AlertPolicyConditionConditionMonitoringQueryLanguage> conditionMonitoringQueryLanguage() {
        return Optional.ofNullable(this.conditionMonitoringQueryLanguage);
    }
    /**
     * @return A Monitoring Query Language query that outputs a boolean stream
     * A condition type that allows alert policies to be defined using
     * Prometheus Query Language (PromQL).
     * The PrometheusQueryLanguageCondition message contains information
     * from a Prometheus alerting rule and its associated rule group.
     * Structure is documented below.
     * 
     */
    public Optional<AlertPolicyConditionConditionPrometheusQueryLanguage> conditionPrometheusQueryLanguage() {
        return Optional.ofNullable(this.conditionPrometheusQueryLanguage);
    }
    /**
     * @return A condition that compares a time series against a
     * threshold.
     * Structure is documented below.
     * 
     */
    public Optional<AlertPolicyConditionConditionThreshold> conditionThreshold() {
        return Optional.ofNullable(this.conditionThreshold);
    }
    /**
     * @return A short name or phrase used to identify the
     * condition in dashboards, notifications, and
     * incidents. To avoid confusion, don&#39;t use the same
     * display name for multiple conditions in the same
     * policy.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return (Output)
     * The unique resource name for this condition.
     * Its syntax is:
     * projects/[PROJECT_ID]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID]
     * [CONDITION_ID] is assigned by Stackdriver Monitoring when
     * the condition is created as part of a new or updated alerting
     * policy.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertPolicyCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AlertPolicyConditionConditionAbsent conditionAbsent;
        private @Nullable AlertPolicyConditionConditionMatchedLog conditionMatchedLog;
        private @Nullable AlertPolicyConditionConditionMonitoringQueryLanguage conditionMonitoringQueryLanguage;
        private @Nullable AlertPolicyConditionConditionPrometheusQueryLanguage conditionPrometheusQueryLanguage;
        private @Nullable AlertPolicyConditionConditionThreshold conditionThreshold;
        private String displayName;
        private @Nullable String name;
        public Builder() {}
        public Builder(AlertPolicyCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionAbsent = defaults.conditionAbsent;
    	      this.conditionMatchedLog = defaults.conditionMatchedLog;
    	      this.conditionMonitoringQueryLanguage = defaults.conditionMonitoringQueryLanguage;
    	      this.conditionPrometheusQueryLanguage = defaults.conditionPrometheusQueryLanguage;
    	      this.conditionThreshold = defaults.conditionThreshold;
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder conditionAbsent(@Nullable AlertPolicyConditionConditionAbsent conditionAbsent) {
            this.conditionAbsent = conditionAbsent;
            return this;
        }
        @CustomType.Setter
        public Builder conditionMatchedLog(@Nullable AlertPolicyConditionConditionMatchedLog conditionMatchedLog) {
            this.conditionMatchedLog = conditionMatchedLog;
            return this;
        }
        @CustomType.Setter
        public Builder conditionMonitoringQueryLanguage(@Nullable AlertPolicyConditionConditionMonitoringQueryLanguage conditionMonitoringQueryLanguage) {
            this.conditionMonitoringQueryLanguage = conditionMonitoringQueryLanguage;
            return this;
        }
        @CustomType.Setter
        public Builder conditionPrometheusQueryLanguage(@Nullable AlertPolicyConditionConditionPrometheusQueryLanguage conditionPrometheusQueryLanguage) {
            this.conditionPrometheusQueryLanguage = conditionPrometheusQueryLanguage;
            return this;
        }
        @CustomType.Setter
        public Builder conditionThreshold(@Nullable AlertPolicyConditionConditionThreshold conditionThreshold) {
            this.conditionThreshold = conditionThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public AlertPolicyCondition build() {
            final var o = new AlertPolicyCondition();
            o.conditionAbsent = conditionAbsent;
            o.conditionMatchedLog = conditionMatchedLog;
            o.conditionMonitoringQueryLanguage = conditionMonitoringQueryLanguage;
            o.conditionPrometheusQueryLanguage = conditionPrometheusQueryLanguage;
            o.conditionThreshold = conditionThreshold;
            o.displayName = displayName;
            o.name = name;
            return o;
        }
    }
}
