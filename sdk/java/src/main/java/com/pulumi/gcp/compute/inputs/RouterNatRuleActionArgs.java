// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouterNatRuleActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouterNatRuleActionArgs Empty = new RouterNatRuleActionArgs();

    /**
     * A list of URLs of the IP resources used for this NAT rule.
     * These IP addresses must be valid static external IP addresses assigned to the project.
     * This field is used for public NAT.
     * 
     */
    @Import(name="sourceNatActiveIps")
    private @Nullable Output<List<String>> sourceNatActiveIps;

    /**
     * @return A list of URLs of the IP resources used for this NAT rule.
     * These IP addresses must be valid static external IP addresses assigned to the project.
     * This field is used for public NAT.
     * 
     */
    public Optional<Output<List<String>>> sourceNatActiveIps() {
        return Optional.ofNullable(this.sourceNatActiveIps);
    }

    /**
     * A list of URLs of the IP resources to be drained.
     * These IPs must be valid static external IPs that have been assigned to the NAT.
     * These IPs should be used for updating/patching a NAT rule only.
     * This field is used for public NAT.
     * 
     */
    @Import(name="sourceNatDrainIps")
    private @Nullable Output<List<String>> sourceNatDrainIps;

    /**
     * @return A list of URLs of the IP resources to be drained.
     * These IPs must be valid static external IPs that have been assigned to the NAT.
     * These IPs should be used for updating/patching a NAT rule only.
     * This field is used for public NAT.
     * 
     */
    public Optional<Output<List<String>>> sourceNatDrainIps() {
        return Optional.ofNullable(this.sourceNatDrainIps);
    }

    private RouterNatRuleActionArgs() {}

    private RouterNatRuleActionArgs(RouterNatRuleActionArgs $) {
        this.sourceNatActiveIps = $.sourceNatActiveIps;
        this.sourceNatDrainIps = $.sourceNatDrainIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterNatRuleActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterNatRuleActionArgs $;

        public Builder() {
            $ = new RouterNatRuleActionArgs();
        }

        public Builder(RouterNatRuleActionArgs defaults) {
            $ = new RouterNatRuleActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param sourceNatActiveIps A list of URLs of the IP resources used for this NAT rule.
         * These IP addresses must be valid static external IP addresses assigned to the project.
         * This field is used for public NAT.
         * 
         * @return builder
         * 
         */
        public Builder sourceNatActiveIps(@Nullable Output<List<String>> sourceNatActiveIps) {
            $.sourceNatActiveIps = sourceNatActiveIps;
            return this;
        }

        /**
         * @param sourceNatActiveIps A list of URLs of the IP resources used for this NAT rule.
         * These IP addresses must be valid static external IP addresses assigned to the project.
         * This field is used for public NAT.
         * 
         * @return builder
         * 
         */
        public Builder sourceNatActiveIps(List<String> sourceNatActiveIps) {
            return sourceNatActiveIps(Output.of(sourceNatActiveIps));
        }

        /**
         * @param sourceNatActiveIps A list of URLs of the IP resources used for this NAT rule.
         * These IP addresses must be valid static external IP addresses assigned to the project.
         * This field is used for public NAT.
         * 
         * @return builder
         * 
         */
        public Builder sourceNatActiveIps(String... sourceNatActiveIps) {
            return sourceNatActiveIps(List.of(sourceNatActiveIps));
        }

        /**
         * @param sourceNatDrainIps A list of URLs of the IP resources to be drained.
         * These IPs must be valid static external IPs that have been assigned to the NAT.
         * These IPs should be used for updating/patching a NAT rule only.
         * This field is used for public NAT.
         * 
         * @return builder
         * 
         */
        public Builder sourceNatDrainIps(@Nullable Output<List<String>> sourceNatDrainIps) {
            $.sourceNatDrainIps = sourceNatDrainIps;
            return this;
        }

        /**
         * @param sourceNatDrainIps A list of URLs of the IP resources to be drained.
         * These IPs must be valid static external IPs that have been assigned to the NAT.
         * These IPs should be used for updating/patching a NAT rule only.
         * This field is used for public NAT.
         * 
         * @return builder
         * 
         */
        public Builder sourceNatDrainIps(List<String> sourceNatDrainIps) {
            return sourceNatDrainIps(Output.of(sourceNatDrainIps));
        }

        /**
         * @param sourceNatDrainIps A list of URLs of the IP resources to be drained.
         * These IPs must be valid static external IPs that have been assigned to the NAT.
         * These IPs should be used for updating/patching a NAT rule only.
         * This field is used for public NAT.
         * 
         * @return builder
         * 
         */
        public Builder sourceNatDrainIps(String... sourceNatDrainIps) {
            return sourceNatDrainIps(List.of(sourceNatDrainIps));
        }

        public RouterNatRuleActionArgs build() {
            return $;
        }
    }

}
