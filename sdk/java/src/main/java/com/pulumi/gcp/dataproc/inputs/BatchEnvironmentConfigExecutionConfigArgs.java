// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataproc.inputs.BatchEnvironmentConfigExecutionConfigAuthenticationConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BatchEnvironmentConfigExecutionConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final BatchEnvironmentConfigExecutionConfigArgs Empty = new BatchEnvironmentConfigExecutionConfigArgs();

    /**
     * Authentication configuration for a workload is used to set the default identity for the workload execution.
     * Structure is documented below.
     * 
     */
    @Import(name="authenticationConfig")
    private @Nullable Output<BatchEnvironmentConfigExecutionConfigAuthenticationConfigArgs> authenticationConfig;

    /**
     * @return Authentication configuration for a workload is used to set the default identity for the workload execution.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BatchEnvironmentConfigExecutionConfigAuthenticationConfigArgs>> authenticationConfig() {
        return Optional.ofNullable(this.authenticationConfig);
    }

    /**
     * The Cloud KMS key to use for encryption.
     * 
     */
    @Import(name="kmsKey")
    private @Nullable Output<String> kmsKey;

    /**
     * @return The Cloud KMS key to use for encryption.
     * 
     */
    public Optional<Output<String>> kmsKey() {
        return Optional.ofNullable(this.kmsKey);
    }

    /**
     * Tags used for network traffic control.
     * 
     */
    @Import(name="networkTags")
    private @Nullable Output<List<String>> networkTags;

    /**
     * @return Tags used for network traffic control.
     * 
     */
    public Optional<Output<List<String>>> networkTags() {
        return Optional.ofNullable(this.networkTags);
    }

    /**
     * Network configuration for workload execution.
     * 
     */
    @Import(name="networkUri")
    private @Nullable Output<String> networkUri;

    /**
     * @return Network configuration for workload execution.
     * 
     */
    public Optional<Output<String>> networkUri() {
        return Optional.ofNullable(this.networkUri);
    }

    /**
     * Service account that used to execute workload.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return Service account that used to execute workload.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * A Cloud Storage bucket used to stage workload dependencies, config files, and store
     * workload output and other ephemeral data, such as Spark history files. If you do not specify a staging bucket,
     * Cloud Dataproc will determine a Cloud Storage location according to the region where your workload is running,
     * and then create and manage project-level, per-location staging and temporary buckets.
     * This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
     * 
     */
    @Import(name="stagingBucket")
    private @Nullable Output<String> stagingBucket;

    /**
     * @return A Cloud Storage bucket used to stage workload dependencies, config files, and store
     * workload output and other ephemeral data, such as Spark history files. If you do not specify a staging bucket,
     * Cloud Dataproc will determine a Cloud Storage location according to the region where your workload is running,
     * and then create and manage project-level, per-location staging and temporary buckets.
     * This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
     * 
     */
    public Optional<Output<String>> stagingBucket() {
        return Optional.ofNullable(this.stagingBucket);
    }

    /**
     * Subnetwork configuration for workload execution.
     * 
     */
    @Import(name="subnetworkUri")
    private @Nullable Output<String> subnetworkUri;

    /**
     * @return Subnetwork configuration for workload execution.
     * 
     */
    public Optional<Output<String>> subnetworkUri() {
        return Optional.ofNullable(this.subnetworkUri);
    }

    /**
     * The duration after which the workload will be terminated.
     * When the workload exceeds this duration, it will be unconditionally terminated without waiting for ongoing
     * work to finish. If ttl is not specified for a batch workload, the workload will be allowed to run until it
     * exits naturally (or run forever without exiting). If ttl is not specified for an interactive session,
     * it defaults to 24 hours. If ttl is not specified for a batch that uses 2.1+ runtime version, it defaults to 4 hours.
     * Minimum value is 10 minutes; maximum value is 14 days. If both ttl and idleTtl are specified (for an interactive session),
     * the conditions are treated as OR conditions: the workload will be terminated when it has been idle for idleTtl or
     * when ttl has been exceeded, whichever occurs first.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<String> ttl;

    /**
     * @return The duration after which the workload will be terminated.
     * When the workload exceeds this duration, it will be unconditionally terminated without waiting for ongoing
     * work to finish. If ttl is not specified for a batch workload, the workload will be allowed to run until it
     * exits naturally (or run forever without exiting). If ttl is not specified for an interactive session,
     * it defaults to 24 hours. If ttl is not specified for a batch that uses 2.1+ runtime version, it defaults to 4 hours.
     * Minimum value is 10 minutes; maximum value is 14 days. If both ttl and idleTtl are specified (for an interactive session),
     * the conditions are treated as OR conditions: the workload will be terminated when it has been idle for idleTtl or
     * when ttl has been exceeded, whichever occurs first.
     * 
     */
    public Optional<Output<String>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private BatchEnvironmentConfigExecutionConfigArgs() {}

    private BatchEnvironmentConfigExecutionConfigArgs(BatchEnvironmentConfigExecutionConfigArgs $) {
        this.authenticationConfig = $.authenticationConfig;
        this.kmsKey = $.kmsKey;
        this.networkTags = $.networkTags;
        this.networkUri = $.networkUri;
        this.serviceAccount = $.serviceAccount;
        this.stagingBucket = $.stagingBucket;
        this.subnetworkUri = $.subnetworkUri;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BatchEnvironmentConfigExecutionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BatchEnvironmentConfigExecutionConfigArgs $;

        public Builder() {
            $ = new BatchEnvironmentConfigExecutionConfigArgs();
        }

        public Builder(BatchEnvironmentConfigExecutionConfigArgs defaults) {
            $ = new BatchEnvironmentConfigExecutionConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationConfig Authentication configuration for a workload is used to set the default identity for the workload execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authenticationConfig(@Nullable Output<BatchEnvironmentConfigExecutionConfigAuthenticationConfigArgs> authenticationConfig) {
            $.authenticationConfig = authenticationConfig;
            return this;
        }

        /**
         * @param authenticationConfig Authentication configuration for a workload is used to set the default identity for the workload execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authenticationConfig(BatchEnvironmentConfigExecutionConfigAuthenticationConfigArgs authenticationConfig) {
            return authenticationConfig(Output.of(authenticationConfig));
        }

        /**
         * @param kmsKey The Cloud KMS key to use for encryption.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        /**
         * @param kmsKey The Cloud KMS key to use for encryption.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(String kmsKey) {
            return kmsKey(Output.of(kmsKey));
        }

        /**
         * @param networkTags Tags used for network traffic control.
         * 
         * @return builder
         * 
         */
        public Builder networkTags(@Nullable Output<List<String>> networkTags) {
            $.networkTags = networkTags;
            return this;
        }

        /**
         * @param networkTags Tags used for network traffic control.
         * 
         * @return builder
         * 
         */
        public Builder networkTags(List<String> networkTags) {
            return networkTags(Output.of(networkTags));
        }

        /**
         * @param networkTags Tags used for network traffic control.
         * 
         * @return builder
         * 
         */
        public Builder networkTags(String... networkTags) {
            return networkTags(List.of(networkTags));
        }

        /**
         * @param networkUri Network configuration for workload execution.
         * 
         * @return builder
         * 
         */
        public Builder networkUri(@Nullable Output<String> networkUri) {
            $.networkUri = networkUri;
            return this;
        }

        /**
         * @param networkUri Network configuration for workload execution.
         * 
         * @return builder
         * 
         */
        public Builder networkUri(String networkUri) {
            return networkUri(Output.of(networkUri));
        }

        /**
         * @param serviceAccount Service account that used to execute workload.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Service account that used to execute workload.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param stagingBucket A Cloud Storage bucket used to stage workload dependencies, config files, and store
         * workload output and other ephemeral data, such as Spark history files. If you do not specify a staging bucket,
         * Cloud Dataproc will determine a Cloud Storage location according to the region where your workload is running,
         * and then create and manage project-level, per-location staging and temporary buckets.
         * This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
         * 
         * @return builder
         * 
         */
        public Builder stagingBucket(@Nullable Output<String> stagingBucket) {
            $.stagingBucket = stagingBucket;
            return this;
        }

        /**
         * @param stagingBucket A Cloud Storage bucket used to stage workload dependencies, config files, and store
         * workload output and other ephemeral data, such as Spark history files. If you do not specify a staging bucket,
         * Cloud Dataproc will determine a Cloud Storage location according to the region where your workload is running,
         * and then create and manage project-level, per-location staging and temporary buckets.
         * This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
         * 
         * @return builder
         * 
         */
        public Builder stagingBucket(String stagingBucket) {
            return stagingBucket(Output.of(stagingBucket));
        }

        /**
         * @param subnetworkUri Subnetwork configuration for workload execution.
         * 
         * @return builder
         * 
         */
        public Builder subnetworkUri(@Nullable Output<String> subnetworkUri) {
            $.subnetworkUri = subnetworkUri;
            return this;
        }

        /**
         * @param subnetworkUri Subnetwork configuration for workload execution.
         * 
         * @return builder
         * 
         */
        public Builder subnetworkUri(String subnetworkUri) {
            return subnetworkUri(Output.of(subnetworkUri));
        }

        /**
         * @param ttl The duration after which the workload will be terminated.
         * When the workload exceeds this duration, it will be unconditionally terminated without waiting for ongoing
         * work to finish. If ttl is not specified for a batch workload, the workload will be allowed to run until it
         * exits naturally (or run forever without exiting). If ttl is not specified for an interactive session,
         * it defaults to 24 hours. If ttl is not specified for a batch that uses 2.1+ runtime version, it defaults to 4 hours.
         * Minimum value is 10 minutes; maximum value is 14 days. If both ttl and idleTtl are specified (for an interactive session),
         * the conditions are treated as OR conditions: the workload will be terminated when it has been idle for idleTtl or
         * when ttl has been exceeded, whichever occurs first.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<String> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The duration after which the workload will be terminated.
         * When the workload exceeds this duration, it will be unconditionally terminated without waiting for ongoing
         * work to finish. If ttl is not specified for a batch workload, the workload will be allowed to run until it
         * exits naturally (or run forever without exiting). If ttl is not specified for an interactive session,
         * it defaults to 24 hours. If ttl is not specified for a batch that uses 2.1+ runtime version, it defaults to 4 hours.
         * Minimum value is 10 minutes; maximum value is 14 days. If both ttl and idleTtl are specified (for an interactive session),
         * the conditions are treated as OR conditions: the workload will be terminated when it has been idle for idleTtl or
         * when ttl has been exceeded, whichever occurs first.
         * 
         * @return builder
         * 
         */
        public Builder ttl(String ttl) {
            return ttl(Output.of(ttl));
        }

        public BatchEnvironmentConfigExecutionConfigArgs build() {
            return $;
        }
    }

}
