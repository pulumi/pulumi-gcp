// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.parametermanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.parametermanager.outputs.GetParameterPolicyMember;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetParameterResult {
    private String createTime;
    private Map<String,String> effectiveLabels;
    private String format;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String kmsKey;
    private Map<String,String> labels;
    private String name;
    private String parameterId;
    private List<GetParameterPolicyMember> policyMembers;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private String updateTime;

    private GetParameterResult() {}
    public String createTime() {
        return this.createTime;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String format() {
        return this.format;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String kmsKey() {
        return this.kmsKey;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    public String parameterId() {
        return this.parameterId;
    }
    public List<GetParameterPolicyMember> policyMembers() {
        return this.policyMembers;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetParameterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private Map<String,String> effectiveLabels;
        private String format;
        private String id;
        private String kmsKey;
        private Map<String,String> labels;
        private String name;
        private String parameterId;
        private List<GetParameterPolicyMember> policyMembers;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private String updateTime;
        public Builder() {}
        public Builder(GetParameterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.format = defaults.format;
    	      this.id = defaults.id;
    	      this.kmsKey = defaults.kmsKey;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.parameterId = defaults.parameterId;
    	      this.policyMembers = defaults.policyMembers;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetParameterResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetParameterResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder format(String format) {
            if (format == null) {
              throw new MissingRequiredPropertyException("GetParameterResult", "format");
            }
            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetParameterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKey(String kmsKey) {
            if (kmsKey == null) {
              throw new MissingRequiredPropertyException("GetParameterResult", "kmsKey");
            }
            this.kmsKey = kmsKey;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetParameterResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetParameterResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parameterId(String parameterId) {
            if (parameterId == null) {
              throw new MissingRequiredPropertyException("GetParameterResult", "parameterId");
            }
            this.parameterId = parameterId;
            return this;
        }
        @CustomType.Setter
        public Builder policyMembers(List<GetParameterPolicyMember> policyMembers) {
            if (policyMembers == null) {
              throw new MissingRequiredPropertyException("GetParameterResult", "policyMembers");
            }
            this.policyMembers = policyMembers;
            return this;
        }
        public Builder policyMembers(GetParameterPolicyMember... policyMembers) {
            return policyMembers(List.of(policyMembers));
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetParameterResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetParameterResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetParameterResult build() {
            final var _resultValue = new GetParameterResult();
            _resultValue.createTime = createTime;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.format = format;
            _resultValue.id = id;
            _resultValue.kmsKey = kmsKey;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.parameterId = parameterId;
            _resultValue.policyMembers = policyMembers;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
