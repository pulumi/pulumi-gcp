// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudidentity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudidentity.outputs.GetGroupMembershipsMembershipMemberKey;
import com.pulumi.gcp.cloudidentity.outputs.GetGroupMembershipsMembershipPreferredMemberKey;
import com.pulumi.gcp.cloudidentity.outputs.GetGroupMembershipsMembershipRole;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupMembershipsMembership {
    /**
     * @return If set to true, skip group member creation if a membership with the same name already exists. Defaults to false.
     * 
     */
    private Boolean createIgnoreAlreadyExists;
    /**
     * @return The time when the Membership was created.
     * 
     */
    private String createTime;
    /**
     * @return The parent Group resource under which to lookup the Membership names. Must be of the form groups/{group_id}.
     * 
     */
    private String group;
    /**
     * @return EntityKey of the member.  Structure is documented below.
     * 
     */
    private List<GetGroupMembershipsMembershipMemberKey> memberKeys;
    /**
     * @return The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
     * 
     */
    private String name;
    /**
     * @return EntityKey of the member.  Structure is documented below.
     * 
     */
    private List<GetGroupMembershipsMembershipPreferredMemberKey> preferredMemberKeys;
    /**
     * @return The MembershipRoles that apply to the Membership. Structure is documented below.
     * 
     */
    private List<GetGroupMembershipsMembershipRole> roles;
    /**
     * @return The type of the membership.
     * 
     */
    private String type;
    /**
     * @return The time when the Membership was last updated.
     * 
     */
    private String updateTime;

    private GetGroupMembershipsMembership() {}
    /**
     * @return If set to true, skip group member creation if a membership with the same name already exists. Defaults to false.
     * 
     */
    public Boolean createIgnoreAlreadyExists() {
        return this.createIgnoreAlreadyExists;
    }
    /**
     * @return The time when the Membership was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The parent Group resource under which to lookup the Membership names. Must be of the form groups/{group_id}.
     * 
     */
    public String group() {
        return this.group;
    }
    /**
     * @return EntityKey of the member.  Structure is documented below.
     * 
     */
    public List<GetGroupMembershipsMembershipMemberKey> memberKeys() {
        return this.memberKeys;
    }
    /**
     * @return The name of the MembershipRole. One of OWNER, MANAGER, MEMBER.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return EntityKey of the member.  Structure is documented below.
     * 
     */
    public List<GetGroupMembershipsMembershipPreferredMemberKey> preferredMemberKeys() {
        return this.preferredMemberKeys;
    }
    /**
     * @return The MembershipRoles that apply to the Membership. Structure is documented below.
     * 
     */
    public List<GetGroupMembershipsMembershipRole> roles() {
        return this.roles;
    }
    /**
     * @return The type of the membership.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The time when the Membership was last updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupMembershipsMembership defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean createIgnoreAlreadyExists;
        private String createTime;
        private String group;
        private List<GetGroupMembershipsMembershipMemberKey> memberKeys;
        private String name;
        private List<GetGroupMembershipsMembershipPreferredMemberKey> preferredMemberKeys;
        private List<GetGroupMembershipsMembershipRole> roles;
        private String type;
        private String updateTime;
        public Builder() {}
        public Builder(GetGroupMembershipsMembership defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createIgnoreAlreadyExists = defaults.createIgnoreAlreadyExists;
    	      this.createTime = defaults.createTime;
    	      this.group = defaults.group;
    	      this.memberKeys = defaults.memberKeys;
    	      this.name = defaults.name;
    	      this.preferredMemberKeys = defaults.preferredMemberKeys;
    	      this.roles = defaults.roles;
    	      this.type = defaults.type;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder createIgnoreAlreadyExists(Boolean createIgnoreAlreadyExists) {
            if (createIgnoreAlreadyExists == null) {
              throw new MissingRequiredPropertyException("GetGroupMembershipsMembership", "createIgnoreAlreadyExists");
            }
            this.createIgnoreAlreadyExists = createIgnoreAlreadyExists;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetGroupMembershipsMembership", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder group(String group) {
            if (group == null) {
              throw new MissingRequiredPropertyException("GetGroupMembershipsMembership", "group");
            }
            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder memberKeys(List<GetGroupMembershipsMembershipMemberKey> memberKeys) {
            if (memberKeys == null) {
              throw new MissingRequiredPropertyException("GetGroupMembershipsMembership", "memberKeys");
            }
            this.memberKeys = memberKeys;
            return this;
        }
        public Builder memberKeys(GetGroupMembershipsMembershipMemberKey... memberKeys) {
            return memberKeys(List.of(memberKeys));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGroupMembershipsMembership", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder preferredMemberKeys(List<GetGroupMembershipsMembershipPreferredMemberKey> preferredMemberKeys) {
            if (preferredMemberKeys == null) {
              throw new MissingRequiredPropertyException("GetGroupMembershipsMembership", "preferredMemberKeys");
            }
            this.preferredMemberKeys = preferredMemberKeys;
            return this;
        }
        public Builder preferredMemberKeys(GetGroupMembershipsMembershipPreferredMemberKey... preferredMemberKeys) {
            return preferredMemberKeys(List.of(preferredMemberKeys));
        }
        @CustomType.Setter
        public Builder roles(List<GetGroupMembershipsMembershipRole> roles) {
            if (roles == null) {
              throw new MissingRequiredPropertyException("GetGroupMembershipsMembership", "roles");
            }
            this.roles = roles;
            return this;
        }
        public Builder roles(GetGroupMembershipsMembershipRole... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetGroupMembershipsMembership", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetGroupMembershipsMembership", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetGroupMembershipsMembership build() {
            final var _resultValue = new GetGroupMembershipsMembership();
            _resultValue.createIgnoreAlreadyExists = createIgnoreAlreadyExists;
            _resultValue.createTime = createTime;
            _resultValue.group = group;
            _resultValue.memberKeys = memberKeys;
            _resultValue.name = name;
            _resultValue.preferredMemberKeys = preferredMemberKeys;
            _resultValue.roles = roles;
            _resultValue.type = type;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
