// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apihub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.apihub.inputs.PluginConfigTemplateAdditionalConfigTemplateEnumOptionArgs;
import com.pulumi.gcp.apihub.inputs.PluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluginConfigTemplateAdditionalConfigTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final PluginConfigTemplateAdditionalConfigTemplateArgs Empty = new PluginConfigTemplateAdditionalConfigTemplateArgs();

    /**
     * Description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enum options. To be populated if `ValueType` is `ENUM`.
     * Structure is documented below.
     * 
     */
    @Import(name="enumOptions")
    private @Nullable Output<List<PluginConfigTemplateAdditionalConfigTemplateEnumOptionArgs>> enumOptions;

    /**
     * @return Enum options. To be populated if `ValueType` is `ENUM`.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<PluginConfigTemplateAdditionalConfigTemplateEnumOptionArgs>>> enumOptions() {
        return Optional.ofNullable(this.enumOptions);
    }

    /**
     * ID of the config variable. Must be unique within the configuration.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return ID of the config variable. Must be unique within the configuration.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Multi select options. To be populated if `ValueType` is `MULTI_SELECT`.
     * Structure is documented below.
     * 
     */
    @Import(name="multiSelectOptions")
    private @Nullable Output<List<PluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionArgs>> multiSelectOptions;

    /**
     * @return Multi select options. To be populated if `ValueType` is `MULTI_SELECT`.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<PluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionArgs>>> multiSelectOptions() {
        return Optional.ofNullable(this.multiSelectOptions);
    }

    /**
     * Flag represents that this `ConfigVariable` must be provided for a
     * PluginInstance.
     * 
     */
    @Import(name="required")
    private @Nullable Output<Boolean> required;

    /**
     * @return Flag represents that this `ConfigVariable` must be provided for a
     * PluginInstance.
     * 
     */
    public Optional<Output<Boolean>> required() {
        return Optional.ofNullable(this.required);
    }

    /**
     * Regular expression in RE2 syntax used for validating the `value` of a
     * `ConfigVariable`.
     * 
     */
    @Import(name="validationRegex")
    private @Nullable Output<String> validationRegex;

    /**
     * @return Regular expression in RE2 syntax used for validating the `value` of a
     * `ConfigVariable`.
     * 
     */
    public Optional<Output<String>> validationRegex() {
        return Optional.ofNullable(this.validationRegex);
    }

    /**
     * Type of the parameter: string, int, bool etc.
     * Possible values:
     * VALUE_TYPE_UNSPECIFIED
     * STRING
     * INT
     * BOOL
     * SECRET
     * ENUM
     * MULTI_SELECT
     * MULTI_STRING
     * MULTI_INT
     * 
     */
    @Import(name="valueType", required=true)
    private Output<String> valueType;

    /**
     * @return Type of the parameter: string, int, bool etc.
     * Possible values:
     * VALUE_TYPE_UNSPECIFIED
     * STRING
     * INT
     * BOOL
     * SECRET
     * ENUM
     * MULTI_SELECT
     * MULTI_STRING
     * MULTI_INT
     * 
     */
    public Output<String> valueType() {
        return this.valueType;
    }

    private PluginConfigTemplateAdditionalConfigTemplateArgs() {}

    private PluginConfigTemplateAdditionalConfigTemplateArgs(PluginConfigTemplateAdditionalConfigTemplateArgs $) {
        this.description = $.description;
        this.enumOptions = $.enumOptions;
        this.id = $.id;
        this.multiSelectOptions = $.multiSelectOptions;
        this.required = $.required;
        this.validationRegex = $.validationRegex;
        this.valueType = $.valueType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluginConfigTemplateAdditionalConfigTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluginConfigTemplateAdditionalConfigTemplateArgs $;

        public Builder() {
            $ = new PluginConfigTemplateAdditionalConfigTemplateArgs();
        }

        public Builder(PluginConfigTemplateAdditionalConfigTemplateArgs defaults) {
            $ = new PluginConfigTemplateAdditionalConfigTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enumOptions Enum options. To be populated if `ValueType` is `ENUM`.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enumOptions(@Nullable Output<List<PluginConfigTemplateAdditionalConfigTemplateEnumOptionArgs>> enumOptions) {
            $.enumOptions = enumOptions;
            return this;
        }

        /**
         * @param enumOptions Enum options. To be populated if `ValueType` is `ENUM`.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enumOptions(List<PluginConfigTemplateAdditionalConfigTemplateEnumOptionArgs> enumOptions) {
            return enumOptions(Output.of(enumOptions));
        }

        /**
         * @param enumOptions Enum options. To be populated if `ValueType` is `ENUM`.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enumOptions(PluginConfigTemplateAdditionalConfigTemplateEnumOptionArgs... enumOptions) {
            return enumOptions(List.of(enumOptions));
        }

        /**
         * @param id ID of the config variable. Must be unique within the configuration.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the config variable. Must be unique within the configuration.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param multiSelectOptions Multi select options. To be populated if `ValueType` is `MULTI_SELECT`.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder multiSelectOptions(@Nullable Output<List<PluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionArgs>> multiSelectOptions) {
            $.multiSelectOptions = multiSelectOptions;
            return this;
        }

        /**
         * @param multiSelectOptions Multi select options. To be populated if `ValueType` is `MULTI_SELECT`.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder multiSelectOptions(List<PluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionArgs> multiSelectOptions) {
            return multiSelectOptions(Output.of(multiSelectOptions));
        }

        /**
         * @param multiSelectOptions Multi select options. To be populated if `ValueType` is `MULTI_SELECT`.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder multiSelectOptions(PluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionArgs... multiSelectOptions) {
            return multiSelectOptions(List.of(multiSelectOptions));
        }

        /**
         * @param required Flag represents that this `ConfigVariable` must be provided for a
         * PluginInstance.
         * 
         * @return builder
         * 
         */
        public Builder required(@Nullable Output<Boolean> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required Flag represents that this `ConfigVariable` must be provided for a
         * PluginInstance.
         * 
         * @return builder
         * 
         */
        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        /**
         * @param validationRegex Regular expression in RE2 syntax used for validating the `value` of a
         * `ConfigVariable`.
         * 
         * @return builder
         * 
         */
        public Builder validationRegex(@Nullable Output<String> validationRegex) {
            $.validationRegex = validationRegex;
            return this;
        }

        /**
         * @param validationRegex Regular expression in RE2 syntax used for validating the `value` of a
         * `ConfigVariable`.
         * 
         * @return builder
         * 
         */
        public Builder validationRegex(String validationRegex) {
            return validationRegex(Output.of(validationRegex));
        }

        /**
         * @param valueType Type of the parameter: string, int, bool etc.
         * Possible values:
         * VALUE_TYPE_UNSPECIFIED
         * STRING
         * INT
         * BOOL
         * SECRET
         * ENUM
         * MULTI_SELECT
         * MULTI_STRING
         * MULTI_INT
         * 
         * @return builder
         * 
         */
        public Builder valueType(Output<String> valueType) {
            $.valueType = valueType;
            return this;
        }

        /**
         * @param valueType Type of the parameter: string, int, bool etc.
         * Possible values:
         * VALUE_TYPE_UNSPECIFIED
         * STRING
         * INT
         * BOOL
         * SECRET
         * ENUM
         * MULTI_SELECT
         * MULTI_STRING
         * MULTI_INT
         * 
         * @return builder
         * 
         */
        public Builder valueType(String valueType) {
            return valueType(Output.of(valueType));
        }

        public PluginConfigTemplateAdditionalConfigTemplateArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("PluginConfigTemplateAdditionalConfigTemplateArgs", "id");
            }
            if ($.valueType == null) {
                throw new MissingRequiredPropertyException("PluginConfigTemplateAdditionalConfigTemplateArgs", "valueType");
            }
            return $;
        }
    }

}
