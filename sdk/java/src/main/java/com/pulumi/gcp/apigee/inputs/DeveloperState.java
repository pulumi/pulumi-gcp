// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.apigee.inputs.DeveloperAttributeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeveloperState extends com.pulumi.resources.ResourceArgs {

    public static final DeveloperState Empty = new DeveloperState();

    /**
     * Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<List<DeveloperAttributeArgs>> attributes;

    /**
     * @return Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DeveloperAttributeArgs>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Time at which the developer was created in milliseconds since epoch.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Time at which the developer was created in milliseconds since epoch.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * First name of the developer.
     * 
     */
    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    /**
     * @return First name of the developer.
     * 
     */
    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * Time at which the developer was last modified in milliseconds since epoch.
     * 
     */
    @Import(name="lastModifiedAt")
    private @Nullable Output<String> lastModifiedAt;

    /**
     * @return Time at which the developer was last modified in milliseconds since epoch.
     * 
     */
    public Optional<Output<String>> lastModifiedAt() {
        return Optional.ofNullable(this.lastModifiedAt);
    }

    /**
     * Last name of the developer.
     * 
     */
    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    /**
     * @return Last name of the developer.
     * 
     */
    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     * 
     * ***
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Name of the Apigee organization in which the developer resides.
     * 
     */
    @Import(name="organizatioName")
    private @Nullable Output<String> organizatioName;

    /**
     * @return Name of the Apigee organization in which the developer resides.
     * 
     */
    public Optional<Output<String>> organizatioName() {
        return Optional.ofNullable(this.organizatioName);
    }

    /**
     * Status of the developer. Valid values are active and inactive.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the developer. Valid values are active and inactive.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * User name of the developer. Not used by Apigee hybrid.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return User name of the developer. Not used by Apigee hybrid.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private DeveloperState() {}

    private DeveloperState(DeveloperState $) {
        this.attributes = $.attributes;
        this.createdAt = $.createdAt;
        this.email = $.email;
        this.firstName = $.firstName;
        this.lastModifiedAt = $.lastModifiedAt;
        this.lastName = $.lastName;
        this.orgId = $.orgId;
        this.organizatioName = $.organizatioName;
        this.status = $.status;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeveloperState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeveloperState $;

        public Builder() {
            $ = new DeveloperState();
        }

        public Builder(DeveloperState defaults) {
            $ = new DeveloperState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributes Developer attributes (name/value pairs). The custom attribute limit is 18.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<List<DeveloperAttributeArgs>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Developer attributes (name/value pairs). The custom attribute limit is 18.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(List<DeveloperAttributeArgs> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param attributes Developer attributes (name/value pairs). The custom attribute limit is 18.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(DeveloperAttributeArgs... attributes) {
            return attributes(List.of(attributes));
        }

        /**
         * @param createdAt Time at which the developer was created in milliseconds since epoch.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Time at which the developer was created in milliseconds since epoch.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param email Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param firstName First name of the developer.
         * 
         * @return builder
         * 
         */
        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName First name of the developer.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param lastModifiedAt Time at which the developer was last modified in milliseconds since epoch.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedAt(@Nullable Output<String> lastModifiedAt) {
            $.lastModifiedAt = lastModifiedAt;
            return this;
        }

        /**
         * @param lastModifiedAt Time at which the developer was last modified in milliseconds since epoch.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedAt(String lastModifiedAt) {
            return lastModifiedAt(Output.of(lastModifiedAt));
        }

        /**
         * @param lastName Last name of the developer.
         * 
         * @return builder
         * 
         */
        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName Last name of the developer.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param orgId The Apigee Organization associated with the Apigee instance,
         * in the format `organizations/{{org_name}}`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The Apigee Organization associated with the Apigee instance,
         * in the format `organizations/{{org_name}}`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param organizatioName Name of the Apigee organization in which the developer resides.
         * 
         * @return builder
         * 
         */
        public Builder organizatioName(@Nullable Output<String> organizatioName) {
            $.organizatioName = organizatioName;
            return this;
        }

        /**
         * @param organizatioName Name of the Apigee organization in which the developer resides.
         * 
         * @return builder
         * 
         */
        public Builder organizatioName(String organizatioName) {
            return organizatioName(Output.of(organizatioName));
        }

        /**
         * @param status Status of the developer. Valid values are active and inactive.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the developer. Valid values are active and inactive.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param userName User name of the developer. Not used by Apigee hybrid.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName User name of the developer. Not used by Apigee hybrid.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public DeveloperState build() {
            return $;
        }
    }

}
