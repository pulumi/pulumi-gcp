// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigqueryanalyticshub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataExchangeState extends com.pulumi.resources.ResourceArgs {

    public static final DataExchangeState Empty = new DataExchangeState();

    /**
     * The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    @Import(name="dataExchangeId")
    private @Nullable Output<String> dataExchangeId;

    /**
     * @return The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    public Optional<Output<String>> dataExchangeId() {
        return Optional.ofNullable(this.dataExchangeId);
    }

    /**
     * Description of the data exchange.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the data exchange.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Documentation describing the data exchange.
     * 
     */
    @Import(name="documentation")
    private @Nullable Output<String> documentation;

    /**
     * @return Documentation describing the data exchange.
     * 
     */
    public Optional<Output<String>> documentation() {
        return Optional.ofNullable(this.documentation);
    }

    /**
     * Base64 encoded image representing the data exchange.
     * 
     */
    @Import(name="icon")
    private @Nullable Output<String> icon;

    /**
     * @return Base64 encoded image representing the data exchange.
     * 
     */
    public Optional<Output<String>> icon() {
        return Optional.ofNullable(this.icon);
    }

    /**
     * Number of listings contained in the data exchange.
     * 
     */
    @Import(name="listingCount")
    private @Nullable Output<Integer> listingCount;

    /**
     * @return Number of listings contained in the data exchange.
     * 
     */
    public Optional<Output<Integer>> listingCount() {
        return Optional.ofNullable(this.listingCount);
    }

    /**
     * The name of the location this data exchange.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The name of the location this data exchange.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the data exchange, for example:
     * &#34;projects/myproject/locations/US/dataExchanges/123&#34;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the data exchange, for example:
     * &#34;projects/myproject/locations/US/dataExchanges/123&#34;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Email or URL of the primary point of contact of the data exchange.
     * 
     */
    @Import(name="primaryContact")
    private @Nullable Output<String> primaryContact;

    /**
     * @return Email or URL of the primary point of contact of the data exchange.
     * 
     */
    public Optional<Output<String>> primaryContact() {
        return Optional.ofNullable(this.primaryContact);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private DataExchangeState() {}

    private DataExchangeState(DataExchangeState $) {
        this.dataExchangeId = $.dataExchangeId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.documentation = $.documentation;
        this.icon = $.icon;
        this.listingCount = $.listingCount;
        this.location = $.location;
        this.name = $.name;
        this.primaryContact = $.primaryContact;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataExchangeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataExchangeState $;

        public Builder() {
            $ = new DataExchangeState();
        }

        public Builder(DataExchangeState defaults) {
            $ = new DataExchangeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataExchangeId The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeId(@Nullable Output<String> dataExchangeId) {
            $.dataExchangeId = dataExchangeId;
            return this;
        }

        /**
         * @param dataExchangeId The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeId(String dataExchangeId) {
            return dataExchangeId(Output.of(dataExchangeId));
        }

        /**
         * @param description Description of the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param documentation Documentation describing the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder documentation(@Nullable Output<String> documentation) {
            $.documentation = documentation;
            return this;
        }

        /**
         * @param documentation Documentation describing the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder documentation(String documentation) {
            return documentation(Output.of(documentation));
        }

        /**
         * @param icon Base64 encoded image representing the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder icon(@Nullable Output<String> icon) {
            $.icon = icon;
            return this;
        }

        /**
         * @param icon Base64 encoded image representing the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder icon(String icon) {
            return icon(Output.of(icon));
        }

        /**
         * @param listingCount Number of listings contained in the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder listingCount(@Nullable Output<Integer> listingCount) {
            $.listingCount = listingCount;
            return this;
        }

        /**
         * @param listingCount Number of listings contained in the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder listingCount(Integer listingCount) {
            return listingCount(Output.of(listingCount));
        }

        /**
         * @param location The name of the location this data exchange.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of the location this data exchange.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the data exchange, for example:
         * &#34;projects/myproject/locations/US/dataExchanges/123&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the data exchange, for example:
         * &#34;projects/myproject/locations/US/dataExchanges/123&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param primaryContact Email or URL of the primary point of contact of the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder primaryContact(@Nullable Output<String> primaryContact) {
            $.primaryContact = primaryContact;
            return this;
        }

        /**
         * @param primaryContact Email or URL of the primary point of contact of the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder primaryContact(String primaryContact) {
            return primaryContact(Output.of(primaryContact));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public DataExchangeState build() {
            return $;
        }
    }

}
