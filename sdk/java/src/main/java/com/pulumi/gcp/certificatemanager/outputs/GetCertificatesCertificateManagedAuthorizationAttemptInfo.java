// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificatemanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCertificatesCertificateManagedAuthorizationAttemptInfo {
    /**
     * @return Human readable explanation for reaching the state. Provided to help
     * address the configuration issues.
     * Not guaranteed to be stable. For programmatic access use &#39;failure_reason&#39; field.
     * 
     */
    private String details;
    /**
     * @return Domain name of the authorization attempt.
     * 
     */
    private String domain;
    /**
     * @return Reason for failure of the authorization attempt for the domain.
     * 
     */
    private String failureReason;
    /**
     * @return State of the domain for managed certificate issuance.
     * 
     */
    private String state;

    private GetCertificatesCertificateManagedAuthorizationAttemptInfo() {}
    /**
     * @return Human readable explanation for reaching the state. Provided to help
     * address the configuration issues.
     * Not guaranteed to be stable. For programmatic access use &#39;failure_reason&#39; field.
     * 
     */
    public String details() {
        return this.details;
    }
    /**
     * @return Domain name of the authorization attempt.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Reason for failure of the authorization attempt for the domain.
     * 
     */
    public String failureReason() {
        return this.failureReason;
    }
    /**
     * @return State of the domain for managed certificate issuance.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificatesCertificateManagedAuthorizationAttemptInfo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String details;
        private String domain;
        private String failureReason;
        private String state;
        public Builder() {}
        public Builder(GetCertificatesCertificateManagedAuthorizationAttemptInfo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.details = defaults.details;
    	      this.domain = defaults.domain;
    	      this.failureReason = defaults.failureReason;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder details(String details) {
            if (details == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateManagedAuthorizationAttemptInfo", "details");
            }
            this.details = details;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateManagedAuthorizationAttemptInfo", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder failureReason(String failureReason) {
            if (failureReason == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateManagedAuthorizationAttemptInfo", "failureReason");
            }
            this.failureReason = failureReason;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateManagedAuthorizationAttemptInfo", "state");
            }
            this.state = state;
            return this;
        }
        public GetCertificatesCertificateManagedAuthorizationAttemptInfo build() {
            final var _resultValue = new GetCertificatesCertificateManagedAuthorizationAttemptInfo();
            _resultValue.details = details;
            _resultValue.domain = domain;
            _resultValue.failureReason = failureReason;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
