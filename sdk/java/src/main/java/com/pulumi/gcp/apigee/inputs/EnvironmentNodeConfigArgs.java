// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentNodeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentNodeConfigArgs Empty = new EnvironmentNodeConfigArgs();

    /**
     * The current total number of gateway nodes that each environment currently has across
     * all instances.
     * 
     */
    @Import(name="currentAggregateNodeCount")
    private @Nullable Output<String> currentAggregateNodeCount;

    /**
     * @return The current total number of gateway nodes that each environment currently has across
     * all instances.
     * 
     */
    public Optional<Output<String>> currentAggregateNodeCount() {
        return Optional.ofNullable(this.currentAggregateNodeCount);
    }

    /**
     * The maximum total number of gateway nodes that the is reserved for all instances that
     * has the specified environment. If not specified, the default is determined by the
     * recommended maximum number of nodes for that gateway.
     * 
     */
    @Import(name="maxNodeCount")
    private @Nullable Output<String> maxNodeCount;

    /**
     * @return The maximum total number of gateway nodes that the is reserved for all instances that
     * has the specified environment. If not specified, the default is determined by the
     * recommended maximum number of nodes for that gateway.
     * 
     */
    public Optional<Output<String>> maxNodeCount() {
        return Optional.ofNullable(this.maxNodeCount);
    }

    /**
     * The minimum total number of gateway nodes that the is reserved for all instances that
     * has the specified environment. If not specified, the default is determined by the
     * recommended minimum number of nodes for that gateway.
     * 
     */
    @Import(name="minNodeCount")
    private @Nullable Output<String> minNodeCount;

    /**
     * @return The minimum total number of gateway nodes that the is reserved for all instances that
     * has the specified environment. If not specified, the default is determined by the
     * recommended minimum number of nodes for that gateway.
     * 
     */
    public Optional<Output<String>> minNodeCount() {
        return Optional.ofNullable(this.minNodeCount);
    }

    private EnvironmentNodeConfigArgs() {}

    private EnvironmentNodeConfigArgs(EnvironmentNodeConfigArgs $) {
        this.currentAggregateNodeCount = $.currentAggregateNodeCount;
        this.maxNodeCount = $.maxNodeCount;
        this.minNodeCount = $.minNodeCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentNodeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentNodeConfigArgs $;

        public Builder() {
            $ = new EnvironmentNodeConfigArgs();
        }

        public Builder(EnvironmentNodeConfigArgs defaults) {
            $ = new EnvironmentNodeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentAggregateNodeCount The current total number of gateway nodes that each environment currently has across
         * all instances.
         * 
         * @return builder
         * 
         */
        public Builder currentAggregateNodeCount(@Nullable Output<String> currentAggregateNodeCount) {
            $.currentAggregateNodeCount = currentAggregateNodeCount;
            return this;
        }

        /**
         * @param currentAggregateNodeCount The current total number of gateway nodes that each environment currently has across
         * all instances.
         * 
         * @return builder
         * 
         */
        public Builder currentAggregateNodeCount(String currentAggregateNodeCount) {
            return currentAggregateNodeCount(Output.of(currentAggregateNodeCount));
        }

        /**
         * @param maxNodeCount The maximum total number of gateway nodes that the is reserved for all instances that
         * has the specified environment. If not specified, the default is determined by the
         * recommended maximum number of nodes for that gateway.
         * 
         * @return builder
         * 
         */
        public Builder maxNodeCount(@Nullable Output<String> maxNodeCount) {
            $.maxNodeCount = maxNodeCount;
            return this;
        }

        /**
         * @param maxNodeCount The maximum total number of gateway nodes that the is reserved for all instances that
         * has the specified environment. If not specified, the default is determined by the
         * recommended maximum number of nodes for that gateway.
         * 
         * @return builder
         * 
         */
        public Builder maxNodeCount(String maxNodeCount) {
            return maxNodeCount(Output.of(maxNodeCount));
        }

        /**
         * @param minNodeCount The minimum total number of gateway nodes that the is reserved for all instances that
         * has the specified environment. If not specified, the default is determined by the
         * recommended minimum number of nodes for that gateway.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCount(@Nullable Output<String> minNodeCount) {
            $.minNodeCount = minNodeCount;
            return this;
        }

        /**
         * @param minNodeCount The minimum total number of gateway nodes that the is reserved for all instances that
         * has the specified environment. If not specified, the default is determined by the
         * recommended minimum number of nodes for that gateway.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCount(String minNodeCount) {
            return minNodeCount(Output.of(minNodeCount));
        }

        public EnvironmentNodeConfigArgs build() {
            return $;
        }
    }

}
