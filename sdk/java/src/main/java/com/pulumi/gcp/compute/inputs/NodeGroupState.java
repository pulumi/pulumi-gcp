// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.NodeGroupAutoscalingPolicyArgs;
import com.pulumi.gcp.compute.inputs.NodeGroupMaintenanceWindowArgs;
import com.pulumi.gcp.compute.inputs.NodeGroupShareSettingsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodeGroupState extends com.pulumi.resources.ResourceArgs {

    public static final NodeGroupState Empty = new NodeGroupState();

    /**
     * If you use sole-tenant nodes for your workloads, you can use the node
     * group autoscaler to automatically manage the sizes of your node groups.
     * Structure is documented below.
     * 
     */
    @Import(name="autoscalingPolicy")
    private @Nullable Output<NodeGroupAutoscalingPolicyArgs> autoscalingPolicy;

    /**
     * @return If you use sole-tenant nodes for your workloads, you can use the node
     * group autoscaler to automatically manage the sizes of your node groups.
     * Structure is documented below.
     * 
     */
    public Optional<Output<NodeGroupAutoscalingPolicyArgs>> autoscalingPolicy() {
        return Optional.ofNullable(this.autoscalingPolicy);
    }

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTimestamp")
    private @Nullable Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> creationTimestamp() {
        return Optional.ofNullable(this.creationTimestamp);
    }

    /**
     * An optional textual description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional textual description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The initial number of nodes in the node group. One of `initial_size` or `size` must be specified.
     * 
     */
    @Import(name="initialSize")
    private @Nullable Output<Integer> initialSize;

    /**
     * @return The initial number of nodes in the node group. One of `initial_size` or `size` must be specified.
     * 
     */
    public Optional<Output<Integer>> initialSize() {
        return Optional.ofNullable(this.initialSize);
    }

    /**
     * Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
     * 
     */
    @Import(name="maintenancePolicy")
    private @Nullable Output<String> maintenancePolicy;

    /**
     * @return Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
     * 
     */
    public Optional<Output<String>> maintenancePolicy() {
        return Optional.ofNullable(this.maintenancePolicy);
    }

    /**
     * contains properties for the timeframe of maintenance
     * Structure is documented below.
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<NodeGroupMaintenanceWindowArgs> maintenanceWindow;

    /**
     * @return contains properties for the timeframe of maintenance
     * Structure is documented below.
     * 
     */
    public Optional<Output<NodeGroupMaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The URL of the node template to which this node group belongs.
     * 
     */
    @Import(name="nodeTemplate")
    private @Nullable Output<String> nodeTemplate;

    /**
     * @return The URL of the node template to which this node group belongs.
     * 
     */
    public Optional<Output<String>> nodeTemplate() {
        return Optional.ofNullable(this.nodeTemplate);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Share settings for the node group.
     * Structure is documented below.
     * 
     */
    @Import(name="shareSettings")
    private @Nullable Output<NodeGroupShareSettingsArgs> shareSettings;

    /**
     * @return Share settings for the node group.
     * Structure is documented below.
     * 
     */
    public Optional<Output<NodeGroupShareSettingsArgs>> shareSettings() {
        return Optional.ofNullable(this.shareSettings);
    }

    /**
     * The total number of nodes in the node group. One of `initial_size` or `size` must be specified.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The total number of nodes in the node group. One of `initial_size` or `size` must be specified.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * Zone where this node group is located
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return Zone where this node group is located
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private NodeGroupState() {}

    private NodeGroupState(NodeGroupState $) {
        this.autoscalingPolicy = $.autoscalingPolicy;
        this.creationTimestamp = $.creationTimestamp;
        this.description = $.description;
        this.initialSize = $.initialSize;
        this.maintenancePolicy = $.maintenancePolicy;
        this.maintenanceWindow = $.maintenanceWindow;
        this.name = $.name;
        this.nodeTemplate = $.nodeTemplate;
        this.project = $.project;
        this.selfLink = $.selfLink;
        this.shareSettings = $.shareSettings;
        this.size = $.size;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeGroupState $;

        public Builder() {
            $ = new NodeGroupState();
        }

        public Builder(NodeGroupState defaults) {
            $ = new NodeGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoscalingPolicy If you use sole-tenant nodes for your workloads, you can use the node
         * group autoscaler to automatically manage the sizes of your node groups.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingPolicy(@Nullable Output<NodeGroupAutoscalingPolicyArgs> autoscalingPolicy) {
            $.autoscalingPolicy = autoscalingPolicy;
            return this;
        }

        /**
         * @param autoscalingPolicy If you use sole-tenant nodes for your workloads, you can use the node
         * group autoscaler to automatically manage the sizes of your node groups.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingPolicy(NodeGroupAutoscalingPolicyArgs autoscalingPolicy) {
            return autoscalingPolicy(Output.of(autoscalingPolicy));
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            $.creationTimestamp = creationTimestamp;
            return this;
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(String creationTimestamp) {
            return creationTimestamp(Output.of(creationTimestamp));
        }

        /**
         * @param description An optional textual description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional textual description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param initialSize The initial number of nodes in the node group. One of `initial_size` or `size` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder initialSize(@Nullable Output<Integer> initialSize) {
            $.initialSize = initialSize;
            return this;
        }

        /**
         * @param initialSize The initial number of nodes in the node group. One of `initial_size` or `size` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder initialSize(Integer initialSize) {
            return initialSize(Output.of(initialSize));
        }

        /**
         * @param maintenancePolicy Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
         * 
         * @return builder
         * 
         */
        public Builder maintenancePolicy(@Nullable Output<String> maintenancePolicy) {
            $.maintenancePolicy = maintenancePolicy;
            return this;
        }

        /**
         * @param maintenancePolicy Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
         * 
         * @return builder
         * 
         */
        public Builder maintenancePolicy(String maintenancePolicy) {
            return maintenancePolicy(Output.of(maintenancePolicy));
        }

        /**
         * @param maintenanceWindow contains properties for the timeframe of maintenance
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(@Nullable Output<NodeGroupMaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceWindow contains properties for the timeframe of maintenance
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(NodeGroupMaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeTemplate The URL of the node template to which this node group belongs.
         * 
         * @return builder
         * 
         */
        public Builder nodeTemplate(@Nullable Output<String> nodeTemplate) {
            $.nodeTemplate = nodeTemplate;
            return this;
        }

        /**
         * @param nodeTemplate The URL of the node template to which this node group belongs.
         * 
         * @return builder
         * 
         */
        public Builder nodeTemplate(String nodeTemplate) {
            return nodeTemplate(Output.of(nodeTemplate));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        /**
         * @param shareSettings Share settings for the node group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder shareSettings(@Nullable Output<NodeGroupShareSettingsArgs> shareSettings) {
            $.shareSettings = shareSettings;
            return this;
        }

        /**
         * @param shareSettings Share settings for the node group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder shareSettings(NodeGroupShareSettingsArgs shareSettings) {
            return shareSettings(Output.of(shareSettings));
        }

        /**
         * @param size The total number of nodes in the node group. One of `initial_size` or `size` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The total number of nodes in the node group. One of `initial_size` or `size` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param zone Zone where this node group is located
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Zone where this node group is located
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public NodeGroupState build() {
            return $;
        }
    }

}
