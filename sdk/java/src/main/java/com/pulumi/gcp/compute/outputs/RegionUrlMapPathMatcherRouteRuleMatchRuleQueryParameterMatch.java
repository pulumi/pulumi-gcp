// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch {
    /**
     * @return The queryParameterMatch matches if the value of the parameter exactly matches
     * the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
     * must be set.
     * 
     */
    private final @Nullable String exactMatch;
    /**
     * @return The name of the query parameter to match. The query parameter must exist in the
     * request, in the absence of which the request match fails.
     * 
     */
    private final String name;
    /**
     * @return Specifies that the queryParameterMatch matches if the request contains the query
     * parameter, irrespective of whether the parameter has a value or not. Only one of
     * presentMatch, exactMatch and regexMatch must be set.
     * 
     */
    private final @Nullable Boolean presentMatch;
    /**
     * @return The queryParameterMatch matches if the value of the parameter matches the
     * regular expression specified by regexMatch. For the regular expression grammar,
     * please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
     * exactMatch and regexMatch must be set.
     * 
     */
    private final @Nullable String regexMatch;

    @CustomType.Constructor
    private RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch(
        @CustomType.Parameter("exactMatch") @Nullable String exactMatch,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("presentMatch") @Nullable Boolean presentMatch,
        @CustomType.Parameter("regexMatch") @Nullable String regexMatch) {
        this.exactMatch = exactMatch;
        this.name = name;
        this.presentMatch = presentMatch;
        this.regexMatch = regexMatch;
    }

    /**
     * @return The queryParameterMatch matches if the value of the parameter exactly matches
     * the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
     * must be set.
     * 
     */
    public Optional<String> exactMatch() {
        return Optional.ofNullable(this.exactMatch);
    }
    /**
     * @return The name of the query parameter to match. The query parameter must exist in the
     * request, in the absence of which the request match fails.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies that the queryParameterMatch matches if the request contains the query
     * parameter, irrespective of whether the parameter has a value or not. Only one of
     * presentMatch, exactMatch and regexMatch must be set.
     * 
     */
    public Optional<Boolean> presentMatch() {
        return Optional.ofNullable(this.presentMatch);
    }
    /**
     * @return The queryParameterMatch matches if the value of the parameter matches the
     * regular expression specified by regexMatch. For the regular expression grammar,
     * please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
     * exactMatch and regexMatch must be set.
     * 
     */
    public Optional<String> regexMatch() {
        return Optional.ofNullable(this.regexMatch);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String exactMatch;
        private String name;
        private @Nullable Boolean presentMatch;
        private @Nullable String regexMatch;

        public Builder() {
    	      // Empty
        }

        public Builder(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exactMatch = defaults.exactMatch;
    	      this.name = defaults.name;
    	      this.presentMatch = defaults.presentMatch;
    	      this.regexMatch = defaults.regexMatch;
        }

        public Builder exactMatch(@Nullable String exactMatch) {
            this.exactMatch = exactMatch;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder presentMatch(@Nullable Boolean presentMatch) {
            this.presentMatch = presentMatch;
            return this;
        }
        public Builder regexMatch(@Nullable String regexMatch) {
            this.regexMatch = regexMatch;
            return this;
        }        public RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch build() {
            return new RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch(exactMatch, name, presentMatch, regexMatch);
        }
    }
}
