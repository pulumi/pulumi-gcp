// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig {
    /**
     * @return Rate limit key name applicable only for the following key types: HTTP_HEADER: Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE: Name of the HTTP cookie whose value is taken as the key value.
     * 
     */
    private @Nullable String enforceOnKeyName;
    /**
     * @return Determines the key to enforce the rate_limit_threshold on. If not specified, defaults to &#34;ALL&#34;.
     * 
     * * ALL: A single rate limit threshold is applied to all the requests matching this rule.
     * * IP: The source IP address of the request is the key. Each IP has this limit enforced separately.
     * * HTTP_HEADER: The value of the HTTP header whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL.
     * * XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key type defaults to ALL.
     * * HTTP_COOKIE: The value of the HTTP cookie whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL.
     * * HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes
     * * SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session.
     * * REGION_CODE: The country/region from which the request originates.
     * 
     */
    private @Nullable String enforceOnKeyType;

    private SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig() {}
    /**
     * @return Rate limit key name applicable only for the following key types: HTTP_HEADER: Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE: Name of the HTTP cookie whose value is taken as the key value.
     * 
     */
    public Optional<String> enforceOnKeyName() {
        return Optional.ofNullable(this.enforceOnKeyName);
    }
    /**
     * @return Determines the key to enforce the rate_limit_threshold on. If not specified, defaults to &#34;ALL&#34;.
     * 
     * * ALL: A single rate limit threshold is applied to all the requests matching this rule.
     * * IP: The source IP address of the request is the key. Each IP has this limit enforced separately.
     * * HTTP_HEADER: The value of the HTTP header whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL.
     * * XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key type defaults to ALL.
     * * HTTP_COOKIE: The value of the HTTP cookie whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL.
     * * HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes
     * * SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session.
     * * REGION_CODE: The country/region from which the request originates.
     * 
     */
    public Optional<String> enforceOnKeyType() {
        return Optional.ofNullable(this.enforceOnKeyType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String enforceOnKeyName;
        private @Nullable String enforceOnKeyType;
        public Builder() {}
        public Builder(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enforceOnKeyName = defaults.enforceOnKeyName;
    	      this.enforceOnKeyType = defaults.enforceOnKeyType;
        }

        @CustomType.Setter
        public Builder enforceOnKeyName(@Nullable String enforceOnKeyName) {
            this.enforceOnKeyName = enforceOnKeyName;
            return this;
        }
        @CustomType.Setter
        public Builder enforceOnKeyType(@Nullable String enforceOnKeyType) {
            this.enforceOnKeyType = enforceOnKeyType;
            return this;
        }
        public SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig build() {
            final var o = new SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig();
            o.enforceOnKeyName = enforceOnKeyName;
            o.enforceOnKeyType = enforceOnKeyType;
            return o;
        }
    }
}
