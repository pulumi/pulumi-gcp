// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.recaptcha;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.recaptcha.EnterpriseKeyArgs;
import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyState;
import com.pulumi.gcp.recaptcha.outputs.EnterpriseKeyAndroidSettings;
import com.pulumi.gcp.recaptcha.outputs.EnterpriseKeyIosSettings;
import com.pulumi.gcp.recaptcha.outputs.EnterpriseKeyTestingOptions;
import com.pulumi.gcp.recaptcha.outputs.EnterpriseKeyWafSettings;
import com.pulumi.gcp.recaptcha.outputs.EnterpriseKeyWebSettings;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The RecaptchaEnterprise Key resource
 * 
 * ## Example Usage
 * 
 * ### Android_key
 * A basic test of recaptcha enterprise key that can be used by Android apps
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.recaptcha.EnterpriseKey;
 * import com.pulumi.gcp.recaptcha.EnterpriseKeyArgs;
 * import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyAndroidSettingsArgs;
 * import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyTestingOptionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new EnterpriseKey("primary", EnterpriseKeyArgs.builder()
 *             .displayName("display-name-one")
 *             .androidSettings(EnterpriseKeyAndroidSettingsArgs.builder()
 *                 .allowAllPackageNames(true)
 *                 .allowedPackageNames()
 *                 .build())
 *             .project("my-project-name")
 *             .testingOptions(EnterpriseKeyTestingOptionsArgs.builder()
 *                 .testingScore(0.8)
 *                 .build())
 *             .labels(Map.of("label-one", "value-one"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Ios_key
 * A basic test of recaptcha enterprise key that can be used by iOS apps
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.recaptcha.EnterpriseKey;
 * import com.pulumi.gcp.recaptcha.EnterpriseKeyArgs;
 * import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyIosSettingsArgs;
 * import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyTestingOptionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new EnterpriseKey("primary", EnterpriseKeyArgs.builder()
 *             .displayName("display-name-one")
 *             .iosSettings(EnterpriseKeyIosSettingsArgs.builder()
 *                 .allowAllBundleIds(true)
 *                 .allowedBundleIds()
 *                 .build())
 *             .project("my-project-name")
 *             .testingOptions(EnterpriseKeyTestingOptionsArgs.builder()
 *                 .testingScore(1.0)
 *                 .build())
 *             .labels(Map.of("label-one", "value-one"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Minimal_key
 * A minimal test of recaptcha enterprise key
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.recaptcha.EnterpriseKey;
 * import com.pulumi.gcp.recaptcha.EnterpriseKeyArgs;
 * import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyWebSettingsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new EnterpriseKey("primary", EnterpriseKeyArgs.builder()
 *             .displayName("display-name-one")
 *             .project("my-project-name")
 *             .webSettings(EnterpriseKeyWebSettingsArgs.builder()
 *                 .integrationType("SCORE")
 *                 .allowAllDomains(true)
 *                 .build())
 *             .labels(Map.ofEntries(
 *             ))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Waf_key
 * A basic test of recaptcha enterprise key that includes WAF settings
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.recaptcha.EnterpriseKey;
 * import com.pulumi.gcp.recaptcha.EnterpriseKeyArgs;
 * import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyTestingOptionsArgs;
 * import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyWafSettingsArgs;
 * import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyWebSettingsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new EnterpriseKey("primary", EnterpriseKeyArgs.builder()
 *             .displayName("display-name-one")
 *             .project("my-project-name")
 *             .testingOptions(EnterpriseKeyTestingOptionsArgs.builder()
 *                 .testingChallenge("NOCAPTCHA")
 *                 .testingScore(0.5)
 *                 .build())
 *             .wafSettings(EnterpriseKeyWafSettingsArgs.builder()
 *                 .wafFeature("CHALLENGE_PAGE")
 *                 .wafService("CA")
 *                 .build())
 *             .webSettings(EnterpriseKeyWebSettingsArgs.builder()
 *                 .integrationType("INVISIBLE")
 *                 .allowAllDomains(true)
 *                 .allowedDomains()
 *                 .challengeSecurityPreference("USABILITY")
 *                 .build())
 *             .labels(Map.of("label-one", "value-one"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Web_key
 * A basic test of recaptcha enterprise key that can be used by websites
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.recaptcha.EnterpriseKey;
 * import com.pulumi.gcp.recaptcha.EnterpriseKeyArgs;
 * import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyTestingOptionsArgs;
 * import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyWebSettingsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new EnterpriseKey("primary", EnterpriseKeyArgs.builder()
 *             .displayName("display-name-one")
 *             .project("my-project-name")
 *             .testingOptions(EnterpriseKeyTestingOptionsArgs.builder()
 *                 .testingChallenge("NOCAPTCHA")
 *                 .testingScore(0.5)
 *                 .build())
 *             .webSettings(EnterpriseKeyWebSettingsArgs.builder()
 *                 .integrationType("CHECKBOX")
 *                 .allowAllDomains(true)
 *                 .allowedDomains()
 *                 .challengeSecurityPreference("USABILITY")
 *                 .build())
 *             .labels(Map.of("label-one", "value-one"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Web_score_key
 * A basic test of recaptcha enterprise key with score integration type that can be used by websites
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.recaptcha.EnterpriseKey;
 * import com.pulumi.gcp.recaptcha.EnterpriseKeyArgs;
 * import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyTestingOptionsArgs;
 * import com.pulumi.gcp.recaptcha.inputs.EnterpriseKeyWebSettingsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new EnterpriseKey("primary", EnterpriseKeyArgs.builder()
 *             .displayName("display-name-one")
 *             .project("my-project-name")
 *             .testingOptions(EnterpriseKeyTestingOptionsArgs.builder()
 *                 .testingScore(0.5)
 *                 .build())
 *             .webSettings(EnterpriseKeyWebSettingsArgs.builder()
 *                 .integrationType("SCORE")
 *                 .allowAllDomains(true)
 *                 .allowAmpTraffic(false)
 *                 .allowedDomains()
 *                 .build())
 *             .labels(Map.of("label-one", "value-one"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Key can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/keys/{{name}}`
 * 
 * * `{{project}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, Key can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:recaptcha/enterpriseKey:EnterpriseKey default projects/{{project}}/keys/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:recaptcha/enterpriseKey:EnterpriseKey default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:recaptcha/enterpriseKey:EnterpriseKey default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:recaptcha/enterpriseKey:EnterpriseKey")
public class EnterpriseKey extends com.pulumi.resources.CustomResource {
    /**
     * Settings for keys that can be used by Android apps.
     * 
     */
    @Export(name="androidSettings", refs={EnterpriseKeyAndroidSettings.class}, tree="[0]")
    private Output</* @Nullable */ EnterpriseKeyAndroidSettings> androidSettings;

    /**
     * @return Settings for keys that can be used by Android apps.
     * 
     */
    public Output<Optional<EnterpriseKeyAndroidSettings>> androidSettings() {
        return Codegen.optional(this.androidSettings);
    }
    /**
     * The timestamp corresponding to the creation of this Key.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The timestamp corresponding to the creation of this Key.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Human-readable display name of this key. Modifiable by user.
     * 
     * ***
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return Human-readable display name of this key. Modifiable by user.
     * 
     * ***
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Settings for keys that can be used by iOS apps.
     * 
     */
    @Export(name="iosSettings", refs={EnterpriseKeyIosSettings.class}, tree="[0]")
    private Output</* @Nullable */ EnterpriseKeyIosSettings> iosSettings;

    /**
     * @return Settings for keys that can be used by iOS apps.
     * 
     */
    public Output<Optional<EnterpriseKeyIosSettings>> iosSettings() {
        return Codegen.optional(this.iosSettings);
    }
    /**
     * See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels).
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels).
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The resource id for the Key, which is the same as the Site Key itself.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource id for the Key, which is the same as the Site Key itself.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The project for the resource
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The project for the resource
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Options for user acceptance testing.
     * 
     */
    @Export(name="testingOptions", refs={EnterpriseKeyTestingOptions.class}, tree="[0]")
    private Output</* @Nullable */ EnterpriseKeyTestingOptions> testingOptions;

    /**
     * @return Options for user acceptance testing.
     * 
     */
    public Output<Optional<EnterpriseKeyTestingOptions>> testingOptions() {
        return Codegen.optional(this.testingOptions);
    }
    /**
     * Settings specific to keys that can be used for WAF (Web Application Firewall).
     * 
     */
    @Export(name="wafSettings", refs={EnterpriseKeyWafSettings.class}, tree="[0]")
    private Output</* @Nullable */ EnterpriseKeyWafSettings> wafSettings;

    /**
     * @return Settings specific to keys that can be used for WAF (Web Application Firewall).
     * 
     */
    public Output<Optional<EnterpriseKeyWafSettings>> wafSettings() {
        return Codegen.optional(this.wafSettings);
    }
    /**
     * Settings for keys that can be used by websites.
     * 
     */
    @Export(name="webSettings", refs={EnterpriseKeyWebSettings.class}, tree="[0]")
    private Output</* @Nullable */ EnterpriseKeyWebSettings> webSettings;

    /**
     * @return Settings for keys that can be used by websites.
     * 
     */
    public Output<Optional<EnterpriseKeyWebSettings>> webSettings() {
        return Codegen.optional(this.webSettings);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EnterpriseKey(java.lang.String name) {
        this(name, EnterpriseKeyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EnterpriseKey(java.lang.String name, EnterpriseKeyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EnterpriseKey(java.lang.String name, EnterpriseKeyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:recaptcha/enterpriseKey:EnterpriseKey", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private EnterpriseKey(java.lang.String name, Output<java.lang.String> id, @Nullable EnterpriseKeyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:recaptcha/enterpriseKey:EnterpriseKey", name, state, makeResourceOptions(options, id), false);
    }

    private static EnterpriseKeyArgs makeArgs(EnterpriseKeyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? EnterpriseKeyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EnterpriseKey get(java.lang.String name, Output<java.lang.String> id, @Nullable EnterpriseKeyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EnterpriseKey(name, id, state, options);
    }
}
