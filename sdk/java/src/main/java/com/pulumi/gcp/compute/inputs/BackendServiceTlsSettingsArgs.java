// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.BackendServiceTlsSettingsSubjectAltNameArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendServiceTlsSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendServiceTlsSettingsArgs Empty = new BackendServiceTlsSettingsArgs();

    /**
     * Reference to the BackendAuthenticationConfig resource from the networksecurity.googleapis.com namespace.
     * Can be used in authenticating TLS connections to the backend, as specified by the authenticationMode field.
     * Can only be specified if authenticationMode is not NONE.
     * 
     */
    @Import(name="authenticationConfig")
    private @Nullable Output<String> authenticationConfig;

    /**
     * @return Reference to the BackendAuthenticationConfig resource from the networksecurity.googleapis.com namespace.
     * Can be used in authenticating TLS connections to the backend, as specified by the authenticationMode field.
     * Can only be specified if authenticationMode is not NONE.
     * 
     */
    public Optional<Output<String>> authenticationConfig() {
        return Optional.ofNullable(this.authenticationConfig);
    }

    /**
     * Server Name Indication - see RFC3546 section 3.1. If set, the load balancer sends this string as the SNI hostname in the
     * TLS connection to the backend, and requires that this string match a Subject Alternative Name (SAN) in the backend&#39;s
     * server certificate. With a Regional Internet NEG backend, if the SNI is specified here, the load balancer uses it
     * regardless of whether the Regional Internet NEG is specified with FQDN or IP address and port.
     * 
     */
    @Import(name="sni")
    private @Nullable Output<String> sni;

    /**
     * @return Server Name Indication - see RFC3546 section 3.1. If set, the load balancer sends this string as the SNI hostname in the
     * TLS connection to the backend, and requires that this string match a Subject Alternative Name (SAN) in the backend&#39;s
     * server certificate. With a Regional Internet NEG backend, if the SNI is specified here, the load balancer uses it
     * regardless of whether the Regional Internet NEG is specified with FQDN or IP address and port.
     * 
     */
    public Optional<Output<String>> sni() {
        return Optional.ofNullable(this.sni);
    }

    /**
     * A list of Subject Alternative Names (SANs) that the Load Balancer verifies during a TLS handshake with the backend.
     * When the server presents its X.509 certificate to the Load Balancer, the Load Balancer inspects the certificate&#39;s SAN field,
     * and requires that at least one SAN match one of the subjectAltNames in the list. This field is limited to 5 entries.
     * When both sni and subjectAltNames are specified, the load balancer matches the backend certificate&#39;s SAN only to
     * subjectAltNames.
     * Structure is documented below.
     * 
     */
    @Import(name="subjectAltNames")
    private @Nullable Output<List<BackendServiceTlsSettingsSubjectAltNameArgs>> subjectAltNames;

    /**
     * @return A list of Subject Alternative Names (SANs) that the Load Balancer verifies during a TLS handshake with the backend.
     * When the server presents its X.509 certificate to the Load Balancer, the Load Balancer inspects the certificate&#39;s SAN field,
     * and requires that at least one SAN match one of the subjectAltNames in the list. This field is limited to 5 entries.
     * When both sni and subjectAltNames are specified, the load balancer matches the backend certificate&#39;s SAN only to
     * subjectAltNames.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<BackendServiceTlsSettingsSubjectAltNameArgs>>> subjectAltNames() {
        return Optional.ofNullable(this.subjectAltNames);
    }

    private BackendServiceTlsSettingsArgs() {}

    private BackendServiceTlsSettingsArgs(BackendServiceTlsSettingsArgs $) {
        this.authenticationConfig = $.authenticationConfig;
        this.sni = $.sni;
        this.subjectAltNames = $.subjectAltNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendServiceTlsSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendServiceTlsSettingsArgs $;

        public Builder() {
            $ = new BackendServiceTlsSettingsArgs();
        }

        public Builder(BackendServiceTlsSettingsArgs defaults) {
            $ = new BackendServiceTlsSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationConfig Reference to the BackendAuthenticationConfig resource from the networksecurity.googleapis.com namespace.
         * Can be used in authenticating TLS connections to the backend, as specified by the authenticationMode field.
         * Can only be specified if authenticationMode is not NONE.
         * 
         * @return builder
         * 
         */
        public Builder authenticationConfig(@Nullable Output<String> authenticationConfig) {
            $.authenticationConfig = authenticationConfig;
            return this;
        }

        /**
         * @param authenticationConfig Reference to the BackendAuthenticationConfig resource from the networksecurity.googleapis.com namespace.
         * Can be used in authenticating TLS connections to the backend, as specified by the authenticationMode field.
         * Can only be specified if authenticationMode is not NONE.
         * 
         * @return builder
         * 
         */
        public Builder authenticationConfig(String authenticationConfig) {
            return authenticationConfig(Output.of(authenticationConfig));
        }

        /**
         * @param sni Server Name Indication - see RFC3546 section 3.1. If set, the load balancer sends this string as the SNI hostname in the
         * TLS connection to the backend, and requires that this string match a Subject Alternative Name (SAN) in the backend&#39;s
         * server certificate. With a Regional Internet NEG backend, if the SNI is specified here, the load balancer uses it
         * regardless of whether the Regional Internet NEG is specified with FQDN or IP address and port.
         * 
         * @return builder
         * 
         */
        public Builder sni(@Nullable Output<String> sni) {
            $.sni = sni;
            return this;
        }

        /**
         * @param sni Server Name Indication - see RFC3546 section 3.1. If set, the load balancer sends this string as the SNI hostname in the
         * TLS connection to the backend, and requires that this string match a Subject Alternative Name (SAN) in the backend&#39;s
         * server certificate. With a Regional Internet NEG backend, if the SNI is specified here, the load balancer uses it
         * regardless of whether the Regional Internet NEG is specified with FQDN or IP address and port.
         * 
         * @return builder
         * 
         */
        public Builder sni(String sni) {
            return sni(Output.of(sni));
        }

        /**
         * @param subjectAltNames A list of Subject Alternative Names (SANs) that the Load Balancer verifies during a TLS handshake with the backend.
         * When the server presents its X.509 certificate to the Load Balancer, the Load Balancer inspects the certificate&#39;s SAN field,
         * and requires that at least one SAN match one of the subjectAltNames in the list. This field is limited to 5 entries.
         * When both sni and subjectAltNames are specified, the load balancer matches the backend certificate&#39;s SAN only to
         * subjectAltNames.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder subjectAltNames(@Nullable Output<List<BackendServiceTlsSettingsSubjectAltNameArgs>> subjectAltNames) {
            $.subjectAltNames = subjectAltNames;
            return this;
        }

        /**
         * @param subjectAltNames A list of Subject Alternative Names (SANs) that the Load Balancer verifies during a TLS handshake with the backend.
         * When the server presents its X.509 certificate to the Load Balancer, the Load Balancer inspects the certificate&#39;s SAN field,
         * and requires that at least one SAN match one of the subjectAltNames in the list. This field is limited to 5 entries.
         * When both sni and subjectAltNames are specified, the load balancer matches the backend certificate&#39;s SAN only to
         * subjectAltNames.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder subjectAltNames(List<BackendServiceTlsSettingsSubjectAltNameArgs> subjectAltNames) {
            return subjectAltNames(Output.of(subjectAltNames));
        }

        /**
         * @param subjectAltNames A list of Subject Alternative Names (SANs) that the Load Balancer verifies during a TLS handshake with the backend.
         * When the server presents its X.509 certificate to the Load Balancer, the Load Balancer inspects the certificate&#39;s SAN field,
         * and requires that at least one SAN match one of the subjectAltNames in the list. This field is limited to 5 entries.
         * When both sni and subjectAltNames are specified, the load balancer matches the backend certificate&#39;s SAN only to
         * subjectAltNames.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder subjectAltNames(BackendServiceTlsSettingsSubjectAltNameArgs... subjectAltNames) {
            return subjectAltNames(List.of(subjectAltNames));
        }

        public BackendServiceTlsSettingsArgs build() {
            return $;
        }
    }

}
