// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.backupdisasterrecovery.outputs.GetDataSourceReferencesDataSourceReference;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDataSourceReferencesResult {
    private List<GetDataSourceReferencesDataSourceReference> dataSourceReferences;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String location;
    private String project;
    private String resourceType;

    private GetDataSourceReferencesResult() {}
    public List<GetDataSourceReferencesDataSourceReference> dataSourceReferences() {
        return this.dataSourceReferences;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String location() {
        return this.location;
    }
    public String project() {
        return this.project;
    }
    public String resourceType() {
        return this.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSourceReferencesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDataSourceReferencesDataSourceReference> dataSourceReferences;
        private String id;
        private String location;
        private String project;
        private String resourceType;
        public Builder() {}
        public Builder(GetDataSourceReferencesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSourceReferences = defaults.dataSourceReferences;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.resourceType = defaults.resourceType;
        }

        @CustomType.Setter
        public Builder dataSourceReferences(List<GetDataSourceReferencesDataSourceReference> dataSourceReferences) {
            if (dataSourceReferences == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesResult", "dataSourceReferences");
            }
            this.dataSourceReferences = dataSourceReferences;
            return this;
        }
        public Builder dataSourceReferences(GetDataSourceReferencesDataSourceReference... dataSourceReferences) {
            return dataSourceReferences(List.of(dataSourceReferences));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetDataSourceReferencesResult", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        public GetDataSourceReferencesResult build() {
            final var _resultValue = new GetDataSourceReferencesResult();
            _resultValue.dataSourceReferences = dataSourceReferences;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.project = project;
            _resultValue.resourceType = resourceType;
            return _resultValue;
        }
    }
}
