// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork;
import com.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsIpConfigurationPscConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseInstanceSettingsIpConfiguration {
    /**
     * @return The name of the allocated ip range for the private ip CloudSQL instance. For example: &#34;google-managed-services-default&#34;. If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
     * 
     */
    private @Nullable String allocatedIpRange;
    private @Nullable List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork> authorizedNetworks;
    /**
     * @return Whether Google Cloud services such as BigQuery are allowed to access data in this Cloud SQL instance over a private IP connection. SQLSERVER database type is not supported.
     * 
     */
    private @Nullable Boolean enablePrivatePathForGoogleCloudServices;
    /**
     * @return Whether this Cloud SQL instance should be assigned
     * a public IPV4 address. At least `ipv4_enabled` must be enabled or a
     * `private_network` must be configured.
     * 
     */
    private @Nullable Boolean ipv4Enabled;
    /**
     * @return The VPC network from which the Cloud SQL
     * instance is accessible for private IP. For example, projects/myProject/global/networks/default.
     * Specifying a network enables private IP.
     * At least `ipv4_enabled` must be enabled or a `private_network` must be configured.
     * This setting can be updated, but it cannot be removed after it is set.
     * 
     */
    private @Nullable String privateNetwork;
    /**
     * @return PSC settings for a Cloud SQL instance.
     * 
     */
    private @Nullable List<DatabaseInstanceSettingsIpConfigurationPscConfig> pscConfigs;
    /**
     * @return Whether SSL connections over IP are enforced or not. To change this field, also set the corresponding value in `ssl_mode`. It will be fully deprecated in a future major release. For now, please use `ssl_mode` with a compatible `require_ssl` value instead.
     * 
     * @deprecated
     * `require_ssl` will be fully deprecated in a future major release. For now, please use `ssl_mode` with a compatible `require_ssl` value instead.
     * 
     */
    @Deprecated /* `require_ssl` will be fully deprecated in a future major release. For now, please use `ssl_mode` with a compatible `require_ssl` value instead. */
    private @Nullable Boolean requireSsl;
    /**
     * @return Specify how the server certificate&#39;s Certificate Authority is hosted. Supported value is `GOOGLE_MANAGED_INTERNAL_CA`.
     * 
     */
    private @Nullable String serverCaMode;
    /**
     * @return Specify how SSL connection should be enforced in DB connections. This field provides more SSL enforcement options compared to `require_ssl`. To change this field, also set the correspoding value in `require_ssl`.
     * * For PostgreSQL instances, the value pairs are listed in the [API reference doc](https://cloud.google.com/sql/docs/postgres/admin-api/rest/v1beta4/instances#ipconfiguration) for `ssl_mode` field.
     * * For MySQL instances, use the same value pairs as the PostgreSQL instances.
     * * For SQL Server instances, set it to `ALLOW_UNENCRYPTED_AND_ENCRYPTED` when `require_ssl=false` and `ENCRYPTED_ONLY` otherwise.
     * 
     */
    private @Nullable String sslMode;

    private DatabaseInstanceSettingsIpConfiguration() {}
    /**
     * @return The name of the allocated ip range for the private ip CloudSQL instance. For example: &#34;google-managed-services-default&#34;. If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
     * 
     */
    public Optional<String> allocatedIpRange() {
        return Optional.ofNullable(this.allocatedIpRange);
    }
    public List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork> authorizedNetworks() {
        return this.authorizedNetworks == null ? List.of() : this.authorizedNetworks;
    }
    /**
     * @return Whether Google Cloud services such as BigQuery are allowed to access data in this Cloud SQL instance over a private IP connection. SQLSERVER database type is not supported.
     * 
     */
    public Optional<Boolean> enablePrivatePathForGoogleCloudServices() {
        return Optional.ofNullable(this.enablePrivatePathForGoogleCloudServices);
    }
    /**
     * @return Whether this Cloud SQL instance should be assigned
     * a public IPV4 address. At least `ipv4_enabled` must be enabled or a
     * `private_network` must be configured.
     * 
     */
    public Optional<Boolean> ipv4Enabled() {
        return Optional.ofNullable(this.ipv4Enabled);
    }
    /**
     * @return The VPC network from which the Cloud SQL
     * instance is accessible for private IP. For example, projects/myProject/global/networks/default.
     * Specifying a network enables private IP.
     * At least `ipv4_enabled` must be enabled or a `private_network` must be configured.
     * This setting can be updated, but it cannot be removed after it is set.
     * 
     */
    public Optional<String> privateNetwork() {
        return Optional.ofNullable(this.privateNetwork);
    }
    /**
     * @return PSC settings for a Cloud SQL instance.
     * 
     */
    public List<DatabaseInstanceSettingsIpConfigurationPscConfig> pscConfigs() {
        return this.pscConfigs == null ? List.of() : this.pscConfigs;
    }
    /**
     * @return Whether SSL connections over IP are enforced or not. To change this field, also set the corresponding value in `ssl_mode`. It will be fully deprecated in a future major release. For now, please use `ssl_mode` with a compatible `require_ssl` value instead.
     * 
     * @deprecated
     * `require_ssl` will be fully deprecated in a future major release. For now, please use `ssl_mode` with a compatible `require_ssl` value instead.
     * 
     */
    @Deprecated /* `require_ssl` will be fully deprecated in a future major release. For now, please use `ssl_mode` with a compatible `require_ssl` value instead. */
    public Optional<Boolean> requireSsl() {
        return Optional.ofNullable(this.requireSsl);
    }
    /**
     * @return Specify how the server certificate&#39;s Certificate Authority is hosted. Supported value is `GOOGLE_MANAGED_INTERNAL_CA`.
     * 
     */
    public Optional<String> serverCaMode() {
        return Optional.ofNullable(this.serverCaMode);
    }
    /**
     * @return Specify how SSL connection should be enforced in DB connections. This field provides more SSL enforcement options compared to `require_ssl`. To change this field, also set the correspoding value in `require_ssl`.
     * * For PostgreSQL instances, the value pairs are listed in the [API reference doc](https://cloud.google.com/sql/docs/postgres/admin-api/rest/v1beta4/instances#ipconfiguration) for `ssl_mode` field.
     * * For MySQL instances, use the same value pairs as the PostgreSQL instances.
     * * For SQL Server instances, set it to `ALLOW_UNENCRYPTED_AND_ENCRYPTED` when `require_ssl=false` and `ENCRYPTED_ONLY` otherwise.
     * 
     */
    public Optional<String> sslMode() {
        return Optional.ofNullable(this.sslMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInstanceSettingsIpConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String allocatedIpRange;
        private @Nullable List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork> authorizedNetworks;
        private @Nullable Boolean enablePrivatePathForGoogleCloudServices;
        private @Nullable Boolean ipv4Enabled;
        private @Nullable String privateNetwork;
        private @Nullable List<DatabaseInstanceSettingsIpConfigurationPscConfig> pscConfigs;
        private @Nullable Boolean requireSsl;
        private @Nullable String serverCaMode;
        private @Nullable String sslMode;
        public Builder() {}
        public Builder(DatabaseInstanceSettingsIpConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedIpRange = defaults.allocatedIpRange;
    	      this.authorizedNetworks = defaults.authorizedNetworks;
    	      this.enablePrivatePathForGoogleCloudServices = defaults.enablePrivatePathForGoogleCloudServices;
    	      this.ipv4Enabled = defaults.ipv4Enabled;
    	      this.privateNetwork = defaults.privateNetwork;
    	      this.pscConfigs = defaults.pscConfigs;
    	      this.requireSsl = defaults.requireSsl;
    	      this.serverCaMode = defaults.serverCaMode;
    	      this.sslMode = defaults.sslMode;
        }

        @CustomType.Setter
        public Builder allocatedIpRange(@Nullable String allocatedIpRange) {

            this.allocatedIpRange = allocatedIpRange;
            return this;
        }
        @CustomType.Setter
        public Builder authorizedNetworks(@Nullable List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork> authorizedNetworks) {

            this.authorizedNetworks = authorizedNetworks;
            return this;
        }
        public Builder authorizedNetworks(DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork... authorizedNetworks) {
            return authorizedNetworks(List.of(authorizedNetworks));
        }
        @CustomType.Setter
        public Builder enablePrivatePathForGoogleCloudServices(@Nullable Boolean enablePrivatePathForGoogleCloudServices) {

            this.enablePrivatePathForGoogleCloudServices = enablePrivatePathForGoogleCloudServices;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Enabled(@Nullable Boolean ipv4Enabled) {

            this.ipv4Enabled = ipv4Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder privateNetwork(@Nullable String privateNetwork) {

            this.privateNetwork = privateNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder pscConfigs(@Nullable List<DatabaseInstanceSettingsIpConfigurationPscConfig> pscConfigs) {

            this.pscConfigs = pscConfigs;
            return this;
        }
        public Builder pscConfigs(DatabaseInstanceSettingsIpConfigurationPscConfig... pscConfigs) {
            return pscConfigs(List.of(pscConfigs));
        }
        @CustomType.Setter
        public Builder requireSsl(@Nullable Boolean requireSsl) {

            this.requireSsl = requireSsl;
            return this;
        }
        @CustomType.Setter
        public Builder serverCaMode(@Nullable String serverCaMode) {

            this.serverCaMode = serverCaMode;
            return this;
        }
        @CustomType.Setter
        public Builder sslMode(@Nullable String sslMode) {

            this.sslMode = sslMode;
            return this;
        }
        public DatabaseInstanceSettingsIpConfiguration build() {
            final var _resultValue = new DatabaseInstanceSettingsIpConfiguration();
            _resultValue.allocatedIpRange = allocatedIpRange;
            _resultValue.authorizedNetworks = authorizedNetworks;
            _resultValue.enablePrivatePathForGoogleCloudServices = enablePrivatePathForGoogleCloudServices;
            _resultValue.ipv4Enabled = ipv4Enabled;
            _resultValue.privateNetwork = privateNetwork;
            _resultValue.pscConfigs = pscConfigs;
            _resultValue.requireSsl = requireSsl;
            _resultValue.serverCaMode = serverCaMode;
            _resultValue.sslMode = sslMode;
            return _resultValue;
        }
    }
}
