// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.firebase.inputs.ExtensionsInstanceConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExtensionsInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExtensionsInstanceArgs Empty = new ExtensionsInstanceArgs();

    /**
     * The current Config of the Extension Instance.
     * Structure is documented below.
     * 
     */
    @Import(name="config", required=true)
    private Output<ExtensionsInstanceConfigArgs> config;

    /**
     * @return The current Config of the Extension Instance.
     * Structure is documented below.
     * 
     */
    public Output<ExtensionsInstanceConfigArgs> config() {
        return this.config;
    }

    /**
     * The ID to use for the Extension Instance, which will become the final
     * component of the instance&#39;s name.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The ID to use for the Extension Instance, which will become the final
     * component of the instance&#39;s name.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private ExtensionsInstanceArgs() {}

    private ExtensionsInstanceArgs(ExtensionsInstanceArgs $) {
        this.config = $.config;
        this.instanceId = $.instanceId;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExtensionsInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExtensionsInstanceArgs $;

        public Builder() {
            $ = new ExtensionsInstanceArgs();
        }

        public Builder(ExtensionsInstanceArgs defaults) {
            $ = new ExtensionsInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param config The current Config of the Extension Instance.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder config(Output<ExtensionsInstanceConfigArgs> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config The current Config of the Extension Instance.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder config(ExtensionsInstanceConfigArgs config) {
            return config(Output.of(config));
        }

        /**
         * @param instanceId The ID to use for the Extension Instance, which will become the final
         * component of the instance&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID to use for the Extension Instance, which will become the final
         * component of the instance&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public ExtensionsInstanceArgs build() {
            $.config = Objects.requireNonNull($.config, "expected parameter 'config' to be non-null");
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            return $;
        }
    }

}
