// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.diagflow.inputs.CxPlaybookInstructionArgs;
import com.pulumi.gcp.diagflow.inputs.CxPlaybookLlmModelSettingsArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxPlaybookArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxPlaybookArgs Empty = new CxPlaybookArgs();

    /**
     * The human-readable name of the playbook, unique within an agent.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The human-readable name of the playbook, unique within an agent.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * High level description of the goal the playbook intend to accomplish. A goal should be concise since it&#39;s visible to other playbooks that may reference this playbook.
     * 
     */
    @Import(name="goal", required=true)
    private Output<String> goal;

    /**
     * @return High level description of the goal the playbook intend to accomplish. A goal should be concise since it&#39;s visible to other playbooks that may reference this playbook.
     * 
     */
    public Output<String> goal() {
        return this.goal;
    }

    /**
     * Instruction to accomplish target goal.
     * Structure is documented below.
     * 
     */
    @Import(name="instruction")
    private @Nullable Output<CxPlaybookInstructionArgs> instruction;

    /**
     * @return Instruction to accomplish target goal.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxPlaybookInstructionArgs>> instruction() {
        return Optional.ofNullable(this.instruction);
    }

    /**
     * Llm model settings for the playbook.
     * Structure is documented below.
     * 
     */
    @Import(name="llmModelSettings")
    private @Nullable Output<CxPlaybookLlmModelSettingsArgs> llmModelSettings;

    /**
     * @return Llm model settings for the playbook.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxPlaybookLlmModelSettingsArgs>> llmModelSettings() {
        return Optional.ofNullable(this.llmModelSettings);
    }

    /**
     * The agent to create a Playbook for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return The agent to create a Playbook for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * Type of the playbook.
     * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
     * 
     */
    @Import(name="playbookType")
    private @Nullable Output<String> playbookType;

    /**
     * @return Type of the playbook.
     * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
     * 
     */
    public Optional<Output<String>> playbookType() {
        return Optional.ofNullable(this.playbookType);
    }

    /**
     * The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
     * 
     */
    @Import(name="referencedTools")
    private @Nullable Output<List<String>> referencedTools;

    /**
     * @return The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
     * 
     */
    public Optional<Output<List<String>>> referencedTools() {
        return Optional.ofNullable(this.referencedTools);
    }

    private CxPlaybookArgs() {}

    private CxPlaybookArgs(CxPlaybookArgs $) {
        this.displayName = $.displayName;
        this.goal = $.goal;
        this.instruction = $.instruction;
        this.llmModelSettings = $.llmModelSettings;
        this.parent = $.parent;
        this.playbookType = $.playbookType;
        this.referencedTools = $.referencedTools;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxPlaybookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxPlaybookArgs $;

        public Builder() {
            $ = new CxPlaybookArgs();
        }

        public Builder(CxPlaybookArgs defaults) {
            $ = new CxPlaybookArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The human-readable name of the playbook, unique within an agent.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human-readable name of the playbook, unique within an agent.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param goal High level description of the goal the playbook intend to accomplish. A goal should be concise since it&#39;s visible to other playbooks that may reference this playbook.
         * 
         * @return builder
         * 
         */
        public Builder goal(Output<String> goal) {
            $.goal = goal;
            return this;
        }

        /**
         * @param goal High level description of the goal the playbook intend to accomplish. A goal should be concise since it&#39;s visible to other playbooks that may reference this playbook.
         * 
         * @return builder
         * 
         */
        public Builder goal(String goal) {
            return goal(Output.of(goal));
        }

        /**
         * @param instruction Instruction to accomplish target goal.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder instruction(@Nullable Output<CxPlaybookInstructionArgs> instruction) {
            $.instruction = instruction;
            return this;
        }

        /**
         * @param instruction Instruction to accomplish target goal.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder instruction(CxPlaybookInstructionArgs instruction) {
            return instruction(Output.of(instruction));
        }

        /**
         * @param llmModelSettings Llm model settings for the playbook.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder llmModelSettings(@Nullable Output<CxPlaybookLlmModelSettingsArgs> llmModelSettings) {
            $.llmModelSettings = llmModelSettings;
            return this;
        }

        /**
         * @param llmModelSettings Llm model settings for the playbook.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder llmModelSettings(CxPlaybookLlmModelSettingsArgs llmModelSettings) {
            return llmModelSettings(Output.of(llmModelSettings));
        }

        /**
         * @param parent The agent to create a Playbook for.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The agent to create a Playbook for.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param playbookType Type of the playbook.
         * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
         * 
         * @return builder
         * 
         */
        public Builder playbookType(@Nullable Output<String> playbookType) {
            $.playbookType = playbookType;
            return this;
        }

        /**
         * @param playbookType Type of the playbook.
         * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
         * 
         * @return builder
         * 
         */
        public Builder playbookType(String playbookType) {
            return playbookType(Output.of(playbookType));
        }

        /**
         * @param referencedTools The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
         * 
         * @return builder
         * 
         */
        public Builder referencedTools(@Nullable Output<List<String>> referencedTools) {
            $.referencedTools = referencedTools;
            return this;
        }

        /**
         * @param referencedTools The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
         * 
         * @return builder
         * 
         */
        public Builder referencedTools(List<String> referencedTools) {
            return referencedTools(Output.of(referencedTools));
        }

        /**
         * @param referencedTools The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
         * 
         * @return builder
         * 
         */
        public Builder referencedTools(String... referencedTools) {
            return referencedTools(List.of(referencedTools));
        }

        public CxPlaybookArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("CxPlaybookArgs", "displayName");
            }
            if ($.goal == null) {
                throw new MissingRequiredPropertyException("CxPlaybookArgs", "goal");
            }
            return $;
        }
    }

}
