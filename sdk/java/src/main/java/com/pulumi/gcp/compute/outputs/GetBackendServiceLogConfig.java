// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackendServiceLogConfig {
    /**
     * @return Whether to enable logging for the load balancer traffic served by this backend service.
     * 
     */
    private Boolean enable;
    /**
     * @return This field can only be specified if logging is enabled for this backend service and &#34;logConfig.optionalMode&#34;
     * was set to CUSTOM. Contains a list of optional fields you want to include in the logs.
     * For example: serverInstance, serverGkeDetails.cluster, serverGkeDetails.pod.podNamespace
     * For example: orca_load_report, tls.protocol
     * 
     */
    private List<String> optionalFields;
    /**
     * @return Specifies the optional logging mode for the load balancer traffic.
     * Supported values: INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM. Possible values: [&#34;INCLUDE_ALL_OPTIONAL&#34;, &#34;EXCLUDE_ALL_OPTIONAL&#34;, &#34;CUSTOM&#34;]
     * 
     */
    private String optionalMode;
    /**
     * @return This field can only be specified if logging is enabled for this backend service. The value of
     * the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
     * where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
     * The default value is 1.0.
     * 
     */
    private Double sampleRate;

    private GetBackendServiceLogConfig() {}
    /**
     * @return Whether to enable logging for the load balancer traffic served by this backend service.
     * 
     */
    public Boolean enable() {
        return this.enable;
    }
    /**
     * @return This field can only be specified if logging is enabled for this backend service and &#34;logConfig.optionalMode&#34;
     * was set to CUSTOM. Contains a list of optional fields you want to include in the logs.
     * For example: serverInstance, serverGkeDetails.cluster, serverGkeDetails.pod.podNamespace
     * For example: orca_load_report, tls.protocol
     * 
     */
    public List<String> optionalFields() {
        return this.optionalFields;
    }
    /**
     * @return Specifies the optional logging mode for the load balancer traffic.
     * Supported values: INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM. Possible values: [&#34;INCLUDE_ALL_OPTIONAL&#34;, &#34;EXCLUDE_ALL_OPTIONAL&#34;, &#34;CUSTOM&#34;]
     * 
     */
    public String optionalMode() {
        return this.optionalMode;
    }
    /**
     * @return This field can only be specified if logging is enabled for this backend service. The value of
     * the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
     * where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
     * The default value is 1.0.
     * 
     */
    public Double sampleRate() {
        return this.sampleRate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendServiceLogConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enable;
        private List<String> optionalFields;
        private String optionalMode;
        private Double sampleRate;
        public Builder() {}
        public Builder(GetBackendServiceLogConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enable = defaults.enable;
    	      this.optionalFields = defaults.optionalFields;
    	      this.optionalMode = defaults.optionalMode;
    	      this.sampleRate = defaults.sampleRate;
        }

        @CustomType.Setter
        public Builder enable(Boolean enable) {
            if (enable == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceLogConfig", "enable");
            }
            this.enable = enable;
            return this;
        }
        @CustomType.Setter
        public Builder optionalFields(List<String> optionalFields) {
            if (optionalFields == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceLogConfig", "optionalFields");
            }
            this.optionalFields = optionalFields;
            return this;
        }
        public Builder optionalFields(String... optionalFields) {
            return optionalFields(List.of(optionalFields));
        }
        @CustomType.Setter
        public Builder optionalMode(String optionalMode) {
            if (optionalMode == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceLogConfig", "optionalMode");
            }
            this.optionalMode = optionalMode;
            return this;
        }
        @CustomType.Setter
        public Builder sampleRate(Double sampleRate) {
            if (sampleRate == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceLogConfig", "sampleRate");
            }
            this.sampleRate = sampleRate;
            return this;
        }
        public GetBackendServiceLogConfig build() {
            final var _resultValue = new GetBackendServiceLogConfig();
            _resultValue.enable = enable;
            _resultValue.optionalFields = optionalFields;
            _resultValue.optionalMode = optionalMode;
            _resultValue.sampleRate = sampleRate;
            return _resultValue;
        }
    }
}
