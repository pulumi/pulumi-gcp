// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransferJobTransferSpecAwsS3DataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransferJobTransferSpecAwsS3DataSourceArgs Empty = new TransferJobTransferSpecAwsS3DataSourceArgs();

    /**
     * AWS credentials block.
     * 
     */
    @Import(name="awsAccessKey")
    private @Nullable Output<TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyArgs> awsAccessKey;

    /**
     * @return AWS credentials block.
     * 
     */
    public Optional<Output<TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyArgs>> awsAccessKey() {
        return Optional.ofNullable(this.awsAccessKey);
    }

    /**
     * Google Cloud Storage bucket name.
     * 
     */
    @Import(name="bucketName", required=true)
    private Output<String> bucketName;

    /**
     * @return Google Cloud Storage bucket name.
     * 
     */
    public Output<String> bucketName() {
        return this.bucketName;
    }

    /**
     * The Amazon Resource Name (ARN) of the role to support temporary credentials via &#39;AssumeRoleWithWebIdentity&#39;. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a &#39;AssumeRoleWithWebIdentity&#39; call for the provided role using the [GoogleServiceAccount][] for this project.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return The Amazon Resource Name (ARN) of the role to support temporary credentials via &#39;AssumeRoleWithWebIdentity&#39;. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a &#39;AssumeRoleWithWebIdentity&#39; call for the provided role using the [GoogleServiceAccount][] for this project.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    private TransferJobTransferSpecAwsS3DataSourceArgs() {}

    private TransferJobTransferSpecAwsS3DataSourceArgs(TransferJobTransferSpecAwsS3DataSourceArgs $) {
        this.awsAccessKey = $.awsAccessKey;
        this.bucketName = $.bucketName;
        this.roleArn = $.roleArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferJobTransferSpecAwsS3DataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferJobTransferSpecAwsS3DataSourceArgs $;

        public Builder() {
            $ = new TransferJobTransferSpecAwsS3DataSourceArgs();
        }

        public Builder(TransferJobTransferSpecAwsS3DataSourceArgs defaults) {
            $ = new TransferJobTransferSpecAwsS3DataSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsAccessKey AWS credentials block.
         * 
         * @return builder
         * 
         */
        public Builder awsAccessKey(@Nullable Output<TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyArgs> awsAccessKey) {
            $.awsAccessKey = awsAccessKey;
            return this;
        }

        /**
         * @param awsAccessKey AWS credentials block.
         * 
         * @return builder
         * 
         */
        public Builder awsAccessKey(TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyArgs awsAccessKey) {
            return awsAccessKey(Output.of(awsAccessKey));
        }

        /**
         * @param bucketName Google Cloud Storage bucket name.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName Google Cloud Storage bucket name.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param roleArn The Amazon Resource Name (ARN) of the role to support temporary credentials via &#39;AssumeRoleWithWebIdentity&#39;. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a &#39;AssumeRoleWithWebIdentity&#39; call for the provided role using the [GoogleServiceAccount][] for this project.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The Amazon Resource Name (ARN) of the role to support temporary credentials via &#39;AssumeRoleWithWebIdentity&#39;. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a &#39;AssumeRoleWithWebIdentity&#39; call for the provided role using the [GoogleServiceAccount][] for this project.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public TransferJobTransferSpecAwsS3DataSourceArgs build() {
            $.bucketName = Objects.requireNonNull($.bucketName, "expected parameter 'bucketName' to be non-null");
            return $;
        }
    }

}
