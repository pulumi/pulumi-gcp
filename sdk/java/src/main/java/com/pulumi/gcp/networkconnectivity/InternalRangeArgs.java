// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkconnectivity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.networkconnectivity.inputs.InternalRangeAllocationOptionsArgs;
import com.pulumi.gcp.networkconnectivity.inputs.InternalRangeMigrationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InternalRangeArgs extends com.pulumi.resources.ResourceArgs {

    public static final InternalRangeArgs Empty = new InternalRangeArgs();

    /**
     * Options for automatically allocating a free range with a size given by prefixLength.
     * Structure is documented below.
     * 
     */
    @Import(name="allocationOptions")
    private @Nullable Output<InternalRangeAllocationOptionsArgs> allocationOptions;

    /**
     * @return Options for automatically allocating a free range with a size given by prefixLength.
     * Structure is documented below.
     * 
     */
    public Optional<Output<InternalRangeAllocationOptionsArgs>> allocationOptions() {
        return Optional.ofNullable(this.allocationOptions);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. List of IP CIDR ranges to be excluded. Resulting reserved Internal Range will not overlap with any CIDR blocks mentioned in this list.
     * Only IPv4 CIDR ranges are supported.
     * 
     */
    @Import(name="excludeCidrRanges")
    private @Nullable Output<List<String>> excludeCidrRanges;

    /**
     * @return Optional. List of IP CIDR ranges to be excluded. Resulting reserved Internal Range will not overlap with any CIDR blocks mentioned in this list.
     * Only IPv4 CIDR ranges are supported.
     * 
     */
    public Optional<Output<List<String>>> excludeCidrRanges() {
        return Optional.ofNullable(this.excludeCidrRanges);
    }

    /**
     * Immutable ranges cannot have their fields modified, except for labels and description.
     * 
     */
    @Import(name="immutable")
    private @Nullable Output<Boolean> immutable;

    /**
     * @return Immutable ranges cannot have their fields modified, except for labels and description.
     * 
     */
    public Optional<Output<Boolean>> immutable() {
        return Optional.ofNullable(this.immutable);
    }

    /**
     * The IP range that this internal range defines.
     * NOTE: IPv6 ranges are limited to usage=EXTERNAL_TO_VPC and peering=FOR_SELF
     * NOTE: For IPv6 Ranges this field is compulsory, i.e. the address range must be specified explicitly.
     * 
     */
    @Import(name="ipCidrRange")
    private @Nullable Output<String> ipCidrRange;

    /**
     * @return The IP range that this internal range defines.
     * NOTE: IPv6 ranges are limited to usage=EXTERNAL_TO_VPC and peering=FOR_SELF
     * NOTE: For IPv6 Ranges this field is compulsory, i.e. the address range must be specified explicitly.
     * 
     */
    public Optional<Output<String>> ipCidrRange() {
        return Optional.ofNullable(this.ipCidrRange);
    }

    /**
     * User-defined labels.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User-defined labels.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Specification for migration with source and target resource names.
     * Structure is documented below.
     * 
     */
    @Import(name="migration")
    private @Nullable Output<InternalRangeMigrationArgs> migration;

    /**
     * @return Specification for migration with source and target resource names.
     * Structure is documented below.
     * 
     */
    public Optional<Output<InternalRangeMigrationArgs>> migration() {
        return Optional.ofNullable(this.migration);
    }

    /**
     * The name of the policy based route.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy based route.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    /**
     * @return Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
     * 
     */
    public Output<String> network() {
        return this.network;
    }

    /**
     * Optional. Types of resources that are allowed to overlap with the current internal range.
     * Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
     * 
     */
    @Import(name="overlaps")
    private @Nullable Output<List<String>> overlaps;

    /**
     * @return Optional. Types of resources that are allowed to overlap with the current internal range.
     * Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
     * 
     */
    public Optional<Output<List<String>>> overlaps() {
        return Optional.ofNullable(this.overlaps);
    }

    /**
     * The type of peering set for this internal range.
     * Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
     * 
     */
    @Import(name="peering", required=true)
    private Output<String> peering;

    /**
     * @return The type of peering set for this internal range.
     * Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
     * 
     */
    public Output<String> peering() {
        return this.peering;
    }

    /**
     * An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
     * If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
     * NOTE: For IPv6 this field only works if ip_cidr_range is set as well, and both fields must match. In other words, with IPv6 this field only works as
     * a redundant parameter.
     * 
     */
    @Import(name="prefixLength")
    private @Nullable Output<Integer> prefixLength;

    /**
     * @return An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
     * If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
     * NOTE: For IPv6 this field only works if ip_cidr_range is set as well, and both fields must match. In other words, with IPv6 this field only works as
     * a redundant parameter.
     * 
     */
    public Optional<Output<Integer>> prefixLength() {
        return Optional.ofNullable(this.prefixLength);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Optional. Can be set to narrow down or pick a different address space while searching for a free range.
     * If not set, defaults to the &#34;10.0.0.0/8&#34; address space. This can be used to search in other rfc-1918 address spaces like &#34;172.16.0.0/12&#34; and &#34;192.168.0.0/16&#34; or non-rfc-1918 address spaces used in the VPC.
     * 
     */
    @Import(name="targetCidrRanges")
    private @Nullable Output<List<String>> targetCidrRanges;

    /**
     * @return Optional. Can be set to narrow down or pick a different address space while searching for a free range.
     * If not set, defaults to the &#34;10.0.0.0/8&#34; address space. This can be used to search in other rfc-1918 address spaces like &#34;172.16.0.0/12&#34; and &#34;192.168.0.0/16&#34; or non-rfc-1918 address spaces used in the VPC.
     * 
     */
    public Optional<Output<List<String>>> targetCidrRanges() {
        return Optional.ofNullable(this.targetCidrRanges);
    }

    /**
     * The type of usage set for this InternalRange.
     * Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`, `FOR_MIGRATION`.
     * 
     */
    @Import(name="usage", required=true)
    private Output<String> usage;

    /**
     * @return The type of usage set for this InternalRange.
     * Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`, `FOR_MIGRATION`.
     * 
     */
    public Output<String> usage() {
        return this.usage;
    }

    private InternalRangeArgs() {}

    private InternalRangeArgs(InternalRangeArgs $) {
        this.allocationOptions = $.allocationOptions;
        this.description = $.description;
        this.excludeCidrRanges = $.excludeCidrRanges;
        this.immutable = $.immutable;
        this.ipCidrRange = $.ipCidrRange;
        this.labels = $.labels;
        this.migration = $.migration;
        this.name = $.name;
        this.network = $.network;
        this.overlaps = $.overlaps;
        this.peering = $.peering;
        this.prefixLength = $.prefixLength;
        this.project = $.project;
        this.targetCidrRanges = $.targetCidrRanges;
        this.usage = $.usage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InternalRangeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InternalRangeArgs $;

        public Builder() {
            $ = new InternalRangeArgs();
        }

        public Builder(InternalRangeArgs defaults) {
            $ = new InternalRangeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationOptions Options for automatically allocating a free range with a size given by prefixLength.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allocationOptions(@Nullable Output<InternalRangeAllocationOptionsArgs> allocationOptions) {
            $.allocationOptions = allocationOptions;
            return this;
        }

        /**
         * @param allocationOptions Options for automatically allocating a free range with a size given by prefixLength.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allocationOptions(InternalRangeAllocationOptionsArgs allocationOptions) {
            return allocationOptions(Output.of(allocationOptions));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param excludeCidrRanges Optional. List of IP CIDR ranges to be excluded. Resulting reserved Internal Range will not overlap with any CIDR blocks mentioned in this list.
         * Only IPv4 CIDR ranges are supported.
         * 
         * @return builder
         * 
         */
        public Builder excludeCidrRanges(@Nullable Output<List<String>> excludeCidrRanges) {
            $.excludeCidrRanges = excludeCidrRanges;
            return this;
        }

        /**
         * @param excludeCidrRanges Optional. List of IP CIDR ranges to be excluded. Resulting reserved Internal Range will not overlap with any CIDR blocks mentioned in this list.
         * Only IPv4 CIDR ranges are supported.
         * 
         * @return builder
         * 
         */
        public Builder excludeCidrRanges(List<String> excludeCidrRanges) {
            return excludeCidrRanges(Output.of(excludeCidrRanges));
        }

        /**
         * @param excludeCidrRanges Optional. List of IP CIDR ranges to be excluded. Resulting reserved Internal Range will not overlap with any CIDR blocks mentioned in this list.
         * Only IPv4 CIDR ranges are supported.
         * 
         * @return builder
         * 
         */
        public Builder excludeCidrRanges(String... excludeCidrRanges) {
            return excludeCidrRanges(List.of(excludeCidrRanges));
        }

        /**
         * @param immutable Immutable ranges cannot have their fields modified, except for labels and description.
         * 
         * @return builder
         * 
         */
        public Builder immutable(@Nullable Output<Boolean> immutable) {
            $.immutable = immutable;
            return this;
        }

        /**
         * @param immutable Immutable ranges cannot have their fields modified, except for labels and description.
         * 
         * @return builder
         * 
         */
        public Builder immutable(Boolean immutable) {
            return immutable(Output.of(immutable));
        }

        /**
         * @param ipCidrRange The IP range that this internal range defines.
         * NOTE: IPv6 ranges are limited to usage=EXTERNAL_TO_VPC and peering=FOR_SELF
         * NOTE: For IPv6 Ranges this field is compulsory, i.e. the address range must be specified explicitly.
         * 
         * @return builder
         * 
         */
        public Builder ipCidrRange(@Nullable Output<String> ipCidrRange) {
            $.ipCidrRange = ipCidrRange;
            return this;
        }

        /**
         * @param ipCidrRange The IP range that this internal range defines.
         * NOTE: IPv6 ranges are limited to usage=EXTERNAL_TO_VPC and peering=FOR_SELF
         * NOTE: For IPv6 Ranges this field is compulsory, i.e. the address range must be specified explicitly.
         * 
         * @return builder
         * 
         */
        public Builder ipCidrRange(String ipCidrRange) {
            return ipCidrRange(Output.of(ipCidrRange));
        }

        /**
         * @param labels User-defined labels.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-defined labels.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param migration Specification for migration with source and target resource names.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder migration(@Nullable Output<InternalRangeMigrationArgs> migration) {
            $.migration = migration;
            return this;
        }

        /**
         * @param migration Specification for migration with source and target resource names.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder migration(InternalRangeMigrationArgs migration) {
            return migration(Output.of(migration));
        }

        /**
         * @param name The name of the policy based route.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy based route.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
         * 
         * @return builder
         * 
         */
        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param overlaps Optional. Types of resources that are allowed to overlap with the current internal range.
         * Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
         * 
         * @return builder
         * 
         */
        public Builder overlaps(@Nullable Output<List<String>> overlaps) {
            $.overlaps = overlaps;
            return this;
        }

        /**
         * @param overlaps Optional. Types of resources that are allowed to overlap with the current internal range.
         * Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
         * 
         * @return builder
         * 
         */
        public Builder overlaps(List<String> overlaps) {
            return overlaps(Output.of(overlaps));
        }

        /**
         * @param overlaps Optional. Types of resources that are allowed to overlap with the current internal range.
         * Each value may be one of: `OVERLAP_ROUTE_RANGE`, `OVERLAP_EXISTING_SUBNET_RANGE`.
         * 
         * @return builder
         * 
         */
        public Builder overlaps(String... overlaps) {
            return overlaps(List.of(overlaps));
        }

        /**
         * @param peering The type of peering set for this internal range.
         * Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
         * 
         * @return builder
         * 
         */
        public Builder peering(Output<String> peering) {
            $.peering = peering;
            return this;
        }

        /**
         * @param peering The type of peering set for this internal range.
         * Possible values are: `FOR_SELF`, `FOR_PEER`, `NOT_SHARED`.
         * 
         * @return builder
         * 
         */
        public Builder peering(String peering) {
            return peering(Output.of(peering));
        }

        /**
         * @param prefixLength An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
         * If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
         * NOTE: For IPv6 this field only works if ip_cidr_range is set as well, and both fields must match. In other words, with IPv6 this field only works as
         * a redundant parameter.
         * 
         * @return builder
         * 
         */
        public Builder prefixLength(@Nullable Output<Integer> prefixLength) {
            $.prefixLength = prefixLength;
            return this;
        }

        /**
         * @param prefixLength An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
         * If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
         * NOTE: For IPv6 this field only works if ip_cidr_range is set as well, and both fields must match. In other words, with IPv6 this field only works as
         * a redundant parameter.
         * 
         * @return builder
         * 
         */
        public Builder prefixLength(Integer prefixLength) {
            return prefixLength(Output.of(prefixLength));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param targetCidrRanges Optional. Can be set to narrow down or pick a different address space while searching for a free range.
         * If not set, defaults to the &#34;10.0.0.0/8&#34; address space. This can be used to search in other rfc-1918 address spaces like &#34;172.16.0.0/12&#34; and &#34;192.168.0.0/16&#34; or non-rfc-1918 address spaces used in the VPC.
         * 
         * @return builder
         * 
         */
        public Builder targetCidrRanges(@Nullable Output<List<String>> targetCidrRanges) {
            $.targetCidrRanges = targetCidrRanges;
            return this;
        }

        /**
         * @param targetCidrRanges Optional. Can be set to narrow down or pick a different address space while searching for a free range.
         * If not set, defaults to the &#34;10.0.0.0/8&#34; address space. This can be used to search in other rfc-1918 address spaces like &#34;172.16.0.0/12&#34; and &#34;192.168.0.0/16&#34; or non-rfc-1918 address spaces used in the VPC.
         * 
         * @return builder
         * 
         */
        public Builder targetCidrRanges(List<String> targetCidrRanges) {
            return targetCidrRanges(Output.of(targetCidrRanges));
        }

        /**
         * @param targetCidrRanges Optional. Can be set to narrow down or pick a different address space while searching for a free range.
         * If not set, defaults to the &#34;10.0.0.0/8&#34; address space. This can be used to search in other rfc-1918 address spaces like &#34;172.16.0.0/12&#34; and &#34;192.168.0.0/16&#34; or non-rfc-1918 address spaces used in the VPC.
         * 
         * @return builder
         * 
         */
        public Builder targetCidrRanges(String... targetCidrRanges) {
            return targetCidrRanges(List.of(targetCidrRanges));
        }

        /**
         * @param usage The type of usage set for this InternalRange.
         * Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`, `FOR_MIGRATION`.
         * 
         * @return builder
         * 
         */
        public Builder usage(Output<String> usage) {
            $.usage = usage;
            return this;
        }

        /**
         * @param usage The type of usage set for this InternalRange.
         * Possible values are: `FOR_VPC`, `EXTERNAL_TO_VPC`, `FOR_MIGRATION`.
         * 
         * @return builder
         * 
         */
        public Builder usage(String usage) {
            return usage(Output.of(usage));
        }

        public InternalRangeArgs build() {
            if ($.network == null) {
                throw new MissingRequiredPropertyException("InternalRangeArgs", "network");
            }
            if ($.peering == null) {
                throw new MissingRequiredPropertyException("InternalRangeArgs", "peering");
            }
            if ($.usage == null) {
                throw new MissingRequiredPropertyException("InternalRangeArgs", "usage");
            }
            return $;
        }
    }

}
