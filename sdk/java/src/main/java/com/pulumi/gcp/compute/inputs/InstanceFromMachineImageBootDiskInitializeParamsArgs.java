// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceFromMachineImageBootDiskInitializeParamsArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceFromMachineImageBootDiskInitializeParamsArgs Empty = new InstanceFromMachineImageBootDiskInitializeParamsArgs();

    /**
     * A flag to enable confidential compute mode on boot disk
     * 
     */
    @Import(name="enableConfidentialCompute")
    private @Nullable Output<Boolean> enableConfidentialCompute;

    /**
     * @return A flag to enable confidential compute mode on boot disk
     * 
     */
    public Optional<Output<Boolean>> enableConfidentialCompute() {
        return Optional.ofNullable(this.enableConfidentialCompute);
    }

    /**
     * The image from which this disk was initialised.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return The image from which this disk was initialised.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * A set of key/value label pairs assigned to the disk.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return A set of key/value label pairs assigned to the disk.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle.
     * 
     */
    @Import(name="provisionedIops")
    private @Nullable Output<Integer> provisionedIops;

    /**
     * @return Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle.
     * 
     */
    public Optional<Output<Integer>> provisionedIops() {
        return Optional.ofNullable(this.provisionedIops);
    }

    /**
     * Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle.
     * 
     */
    @Import(name="provisionedThroughput")
    private @Nullable Output<Integer> provisionedThroughput;

    /**
     * @return Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle.
     * 
     */
    public Optional<Output<Integer>> provisionedThroughput() {
        return Optional.ofNullable(this.provisionedThroughput);
    }

    /**
     * A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
     * 
     */
    @Import(name="resourceManagerTags")
    private @Nullable Output<Map<String,String>> resourceManagerTags;

    /**
     * @return A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
     * 
     */
    public Optional<Output<Map<String,String>>> resourceManagerTags() {
        return Optional.ofNullable(this.resourceManagerTags);
    }

    /**
     * The size of the image in gigabytes.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The size of the image in gigabytes.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The URL of the storage pool in which the new disk is created
     * 
     */
    @Import(name="storagePool")
    private @Nullable Output<String> storagePool;

    /**
     * @return The URL of the storage pool in which the new disk is created
     * 
     */
    public Optional<Output<String>> storagePool() {
        return Optional.ofNullable(this.storagePool);
    }

    /**
     * The Google Compute Engine disk type. Such as pd-standard, pd-ssd or pd-balanced.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The Google Compute Engine disk type. Such as pd-standard, pd-ssd or pd-balanced.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private InstanceFromMachineImageBootDiskInitializeParamsArgs() {}

    private InstanceFromMachineImageBootDiskInitializeParamsArgs(InstanceFromMachineImageBootDiskInitializeParamsArgs $) {
        this.enableConfidentialCompute = $.enableConfidentialCompute;
        this.image = $.image;
        this.labels = $.labels;
        this.provisionedIops = $.provisionedIops;
        this.provisionedThroughput = $.provisionedThroughput;
        this.resourceManagerTags = $.resourceManagerTags;
        this.size = $.size;
        this.storagePool = $.storagePool;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceFromMachineImageBootDiskInitializeParamsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceFromMachineImageBootDiskInitializeParamsArgs $;

        public Builder() {
            $ = new InstanceFromMachineImageBootDiskInitializeParamsArgs();
        }

        public Builder(InstanceFromMachineImageBootDiskInitializeParamsArgs defaults) {
            $ = new InstanceFromMachineImageBootDiskInitializeParamsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableConfidentialCompute A flag to enable confidential compute mode on boot disk
         * 
         * @return builder
         * 
         */
        public Builder enableConfidentialCompute(@Nullable Output<Boolean> enableConfidentialCompute) {
            $.enableConfidentialCompute = enableConfidentialCompute;
            return this;
        }

        /**
         * @param enableConfidentialCompute A flag to enable confidential compute mode on boot disk
         * 
         * @return builder
         * 
         */
        public Builder enableConfidentialCompute(Boolean enableConfidentialCompute) {
            return enableConfidentialCompute(Output.of(enableConfidentialCompute));
        }

        /**
         * @param image The image from which this disk was initialised.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The image from which this disk was initialised.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param labels A set of key/value label pairs assigned to the disk.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels A set of key/value label pairs assigned to the disk.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param provisionedIops Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle.
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(@Nullable Output<Integer> provisionedIops) {
            $.provisionedIops = provisionedIops;
            return this;
        }

        /**
         * @param provisionedIops Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle.
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(Integer provisionedIops) {
            return provisionedIops(Output.of(provisionedIops));
        }

        /**
         * @param provisionedThroughput Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle.
         * 
         * @return builder
         * 
         */
        public Builder provisionedThroughput(@Nullable Output<Integer> provisionedThroughput) {
            $.provisionedThroughput = provisionedThroughput;
            return this;
        }

        /**
         * @param provisionedThroughput Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle.
         * 
         * @return builder
         * 
         */
        public Builder provisionedThroughput(Integer provisionedThroughput) {
            return provisionedThroughput(Output.of(provisionedThroughput));
        }

        /**
         * @param resourceManagerTags A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
         * 
         * @return builder
         * 
         */
        public Builder resourceManagerTags(@Nullable Output<Map<String,String>> resourceManagerTags) {
            $.resourceManagerTags = resourceManagerTags;
            return this;
        }

        /**
         * @param resourceManagerTags A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
         * 
         * @return builder
         * 
         */
        public Builder resourceManagerTags(Map<String,String> resourceManagerTags) {
            return resourceManagerTags(Output.of(resourceManagerTags));
        }

        /**
         * @param size The size of the image in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the image in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param storagePool The URL of the storage pool in which the new disk is created
         * 
         * @return builder
         * 
         */
        public Builder storagePool(@Nullable Output<String> storagePool) {
            $.storagePool = storagePool;
            return this;
        }

        /**
         * @param storagePool The URL of the storage pool in which the new disk is created
         * 
         * @return builder
         * 
         */
        public Builder storagePool(String storagePool) {
            return storagePool(Output.of(storagePool));
        }

        /**
         * @param type The Google Compute Engine disk type. Such as pd-standard, pd-ssd or pd-balanced.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The Google Compute Engine disk type. Such as pd-standard, pd-ssd or pd-balanced.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public InstanceFromMachineImageBootDiskInitializeParamsArgs build() {
            return $;
        }
    }

}
