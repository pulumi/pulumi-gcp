// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseChannelSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseChannelSettingArgs Empty = new ReleaseChannelSettingArgs();

    /**
     * Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Release channel to be used.
     * Possible values:
     * STABLE
     * EXPERIMENTAL
     * 
     */
    @Import(name="releaseChannel")
    private @Nullable Output<String> releaseChannel;

    /**
     * @return Release channel to be used.
     * Possible values:
     * STABLE
     * EXPERIMENTAL
     * 
     */
    public Optional<Output<String>> releaseChannel() {
        return Optional.ofNullable(this.releaseChannel);
    }

    /**
     * Id of the Release Channel Setting.
     * 
     */
    @Import(name="releaseChannelSettingId", required=true)
    private Output<String> releaseChannelSettingId;

    /**
     * @return Id of the Release Channel Setting.
     * 
     */
    public Output<String> releaseChannelSettingId() {
        return this.releaseChannelSettingId;
    }

    private ReleaseChannelSettingArgs() {}

    private ReleaseChannelSettingArgs(ReleaseChannelSettingArgs $) {
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.releaseChannel = $.releaseChannel;
        this.releaseChannelSettingId = $.releaseChannelSettingId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseChannelSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseChannelSettingArgs $;

        public Builder() {
            $ = new ReleaseChannelSettingArgs();
        }

        public Builder(ReleaseChannelSettingArgs defaults) {
            $ = new ReleaseChannelSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param labels Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param releaseChannel Release channel to be used.
         * Possible values:
         * STABLE
         * EXPERIMENTAL
         * 
         * @return builder
         * 
         */
        public Builder releaseChannel(@Nullable Output<String> releaseChannel) {
            $.releaseChannel = releaseChannel;
            return this;
        }

        /**
         * @param releaseChannel Release channel to be used.
         * Possible values:
         * STABLE
         * EXPERIMENTAL
         * 
         * @return builder
         * 
         */
        public Builder releaseChannel(String releaseChannel) {
            return releaseChannel(Output.of(releaseChannel));
        }

        /**
         * @param releaseChannelSettingId Id of the Release Channel Setting.
         * 
         * @return builder
         * 
         */
        public Builder releaseChannelSettingId(Output<String> releaseChannelSettingId) {
            $.releaseChannelSettingId = releaseChannelSettingId;
            return this;
        }

        /**
         * @param releaseChannelSettingId Id of the Release Channel Setting.
         * 
         * @return builder
         * 
         */
        public Builder releaseChannelSettingId(String releaseChannelSettingId) {
            return releaseChannelSettingId(Output.of(releaseChannelSettingId));
        }

        public ReleaseChannelSettingArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("ReleaseChannelSettingArgs", "location");
            }
            if ($.releaseChannelSettingId == null) {
                throw new MissingRequiredPropertyException("ReleaseChannelSettingArgs", "releaseChannelSettingId");
            }
            return $;
        }
    }

}
