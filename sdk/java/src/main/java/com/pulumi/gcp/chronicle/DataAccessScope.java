// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.chronicle;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.chronicle.DataAccessScopeArgs;
import com.pulumi.gcp.chronicle.inputs.DataAccessScopeState;
import com.pulumi.gcp.chronicle.outputs.DataAccessScopeAllowedDataAccessLabel;
import com.pulumi.gcp.chronicle.outputs.DataAccessScopeDeniedDataAccessLabel;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A DataAccessScope is a boolean expression of data access labels used to restrict access to data for users.
 * 
 * To get more information about DataAccessScope, see:
 * 
 * * [API documentation](https://cloud.google.com/chronicle/docs/reference/rest/v1/projects.locations.instances.dataAccessScopes)
 * * How-to Guides
 *     * [Introduction to data RBAC](https://cloud.google.com/chronicle/docs/onboard/onboard-datarbac)
 * 
 * ## Example Usage
 * 
 * ### Chronicle Dataaccessscope With Logtype
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.chronicle.DataAccessScope;
 * import com.pulumi.gcp.chronicle.DataAccessScopeArgs;
 * import com.pulumi.gcp.chronicle.inputs.DataAccessScopeAllowedDataAccessLabelArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new DataAccessScope("example", DataAccessScopeArgs.builder()
 *             .location("us")
 *             .instance("00000000-0000-0000-0000-000000000000")
 *             .dataAccessScopeId("scope-id")
 *             .description("scope-description")
 *             .allowedDataAccessLabels(            
 *                 DataAccessScopeAllowedDataAccessLabelArgs.builder()
 *                     .logType("GCP_CLOUDAUDIT")
 *                     .build(),
 *                 DataAccessScopeAllowedDataAccessLabelArgs.builder()
 *                     .logType("GITHUB")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Chronicle Dataaccessscope With Dataaccesslabel
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.chronicle.DataAccessLabel;
 * import com.pulumi.gcp.chronicle.DataAccessLabelArgs;
 * import com.pulumi.gcp.chronicle.DataAccessScope;
 * import com.pulumi.gcp.chronicle.DataAccessScopeArgs;
 * import com.pulumi.gcp.chronicle.inputs.DataAccessScopeAllowedDataAccessLabelArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var customDataAccessLabel = new DataAccessLabel("customDataAccessLabel", DataAccessLabelArgs.builder()
 *             .location("us")
 *             .instance("00000000-0000-0000-0000-000000000000")
 *             .dataAccessLabelId("label-id")
 *             .udmQuery("principal.hostname=\"google.com\"")
 *             .build());
 * 
 *         var example = new DataAccessScope("example", DataAccessScopeArgs.builder()
 *             .location("us")
 *             .instance("00000000-0000-0000-0000-000000000000")
 *             .dataAccessScopeId("scope-id")
 *             .description("scope-description")
 *             .allowedDataAccessLabels(DataAccessScopeAllowedDataAccessLabelArgs.builder()
 *                 .dataAccessLabel(googleChronicleDataAccessLabel.customDataAccessLabel().dataAccessLabelId())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Chronicle Dataaccessscope With Asset Namespace
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.chronicle.DataAccessScope;
 * import com.pulumi.gcp.chronicle.DataAccessScopeArgs;
 * import com.pulumi.gcp.chronicle.inputs.DataAccessScopeAllowedDataAccessLabelArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new DataAccessScope("example", DataAccessScopeArgs.builder()
 *             .location("us")
 *             .instance("00000000-0000-0000-0000-000000000000")
 *             .dataAccessScopeId("scope-id")
 *             .description("scope-description")
 *             .allowedDataAccessLabels(DataAccessScopeAllowedDataAccessLabelArgs.builder()
 *                 .assetNamespace("my-namespace")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Chronicle Dataaccessscope With Ingestion Label
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.chronicle.DataAccessScope;
 * import com.pulumi.gcp.chronicle.DataAccessScopeArgs;
 * import com.pulumi.gcp.chronicle.inputs.DataAccessScopeAllowedDataAccessLabelArgs;
 * import com.pulumi.gcp.chronicle.inputs.DataAccessScopeAllowedDataAccessLabelIngestionLabelArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new DataAccessScope("example", DataAccessScopeArgs.builder()
 *             .location("us")
 *             .instance("00000000-0000-0000-0000-000000000000")
 *             .dataAccessScopeId("scope-id")
 *             .description("scope-description")
 *             .allowedDataAccessLabels(DataAccessScopeAllowedDataAccessLabelArgs.builder()
 *                 .ingestionLabel(DataAccessScopeAllowedDataAccessLabelIngestionLabelArgs.builder()
 *                     .ingestionLabelKey("ingestion_key")
 *                     .ingestionLabelValue("ingestion_value")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Chronicle Dataaccessscope With Denied Labels
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.chronicle.DataAccessLabel;
 * import com.pulumi.gcp.chronicle.DataAccessLabelArgs;
 * import com.pulumi.gcp.chronicle.DataAccessScope;
 * import com.pulumi.gcp.chronicle.DataAccessScopeArgs;
 * import com.pulumi.gcp.chronicle.inputs.DataAccessScopeDeniedDataAccessLabelArgs;
 * import com.pulumi.gcp.chronicle.inputs.DataAccessScopeDeniedDataAccessLabelIngestionLabelArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var customDataAccessLabel = new DataAccessLabel("customDataAccessLabel", DataAccessLabelArgs.builder()
 *             .location("us")
 *             .instance("00000000-0000-0000-0000-000000000000")
 *             .dataAccessLabelId("label-id")
 *             .udmQuery("principal.hostname=\"google.com\"")
 *             .build());
 * 
 *         var example = new DataAccessScope("example", DataAccessScopeArgs.builder()
 *             .location("us")
 *             .instance("00000000-0000-0000-0000-000000000000")
 *             .dataAccessScopeId("scope-id")
 *             .description("scope-description")
 *             .allowAll(true)
 *             .deniedDataAccessLabels(            
 *                 DataAccessScopeDeniedDataAccessLabelArgs.builder()
 *                     .logType("GCP_CLOUDAUDIT")
 *                     .build(),
 *                 DataAccessScopeDeniedDataAccessLabelArgs.builder()
 *                     .dataAccessLabel(googleChronicleDataAccessLabel.customDataAccessLabel().dataAccessLabelId())
 *                     .build(),
 *                 DataAccessScopeDeniedDataAccessLabelArgs.builder()
 *                     .ingestionLabel(DataAccessScopeDeniedDataAccessLabelIngestionLabelArgs.builder()
 *                         .ingestionLabelKey("ingestion_key")
 *                         .ingestionLabelValue("ingestion_value")
 *                         .build())
 *                     .build(),
 *                 DataAccessScopeDeniedDataAccessLabelArgs.builder()
 *                     .assetNamespace("my-namespace")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * DataAccessScope can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/instances/{{instance}}/dataAccessScopes/{{data_access_scope_id}}`
 * 
 * * `{{project}}/{{location}}/{{instance}}/{{data_access_scope_id}}`
 * 
 * * `{{location}}/{{instance}}/{{data_access_scope_id}}`
 * 
 * When using the `pulumi import` command, DataAccessScope can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:chronicle/dataAccessScope:DataAccessScope default projects/{{project}}/locations/{{location}}/instances/{{instance}}/dataAccessScopes/{{data_access_scope_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:chronicle/dataAccessScope:DataAccessScope default {{project}}/{{location}}/{{instance}}/{{data_access_scope_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:chronicle/dataAccessScope:DataAccessScope default {{location}}/{{instance}}/{{data_access_scope_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:chronicle/dataAccessScope:DataAccessScope")
public class DataAccessScope extends com.pulumi.resources.CustomResource {
    /**
     * Optional. Whether or not the scope allows all labels, allow_all and
     * allowed_data_access_labels are mutually exclusive and one of them must be
     * present. denied_data_access_labels can still be used along with allow_all.
     * When combined with denied_data_access_labels, access will be granted to all
     * data that doesn&#39;t have labels mentioned in denied_data_access_labels. E.g.:
     * A customer with scope with denied labels A and B and allow_all will be able
     * to see all data except data labeled with A and data labeled with B and data
     * with labels A and B.
     * 
     */
    @Export(name="allowAll", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowAll;

    /**
     * @return Optional. Whether or not the scope allows all labels, allow_all and
     * allowed_data_access_labels are mutually exclusive and one of them must be
     * present. denied_data_access_labels can still be used along with allow_all.
     * When combined with denied_data_access_labels, access will be granted to all
     * data that doesn&#39;t have labels mentioned in denied_data_access_labels. E.g.:
     * A customer with scope with denied labels A and B and allow_all will be able
     * to see all data except data labeled with A and data labeled with B and data
     * with labels A and B.
     * 
     */
    public Output<Optional<Boolean>> allowAll() {
        return Codegen.optional(this.allowAll);
    }
    /**
     * The allowed labels for the scope. There has to be at
     * least one label allowed for the scope to be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * Structure is documented below.
     * 
     */
    @Export(name="allowedDataAccessLabels", refs={List.class,DataAccessScopeAllowedDataAccessLabel.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DataAccessScopeAllowedDataAccessLabel>> allowedDataAccessLabels;

    /**
     * @return The allowed labels for the scope. There has to be at
     * least one label allowed for the scope to be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<DataAccessScopeAllowedDataAccessLabel>>> allowedDataAccessLabels() {
        return Codegen.optional(this.allowedDataAccessLabels);
    }
    /**
     * Output only. The user who created the data access scope.
     * 
     */
    @Export(name="author", refs={String.class}, tree="[0]")
    private Output<String> author;

    /**
     * @return Output only. The user who created the data access scope.
     * 
     */
    public Output<String> author() {
        return this.author;
    }
    /**
     * Output only. The time at which the data access scope was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The time at which the data access scope was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Required. The user provided scope id which will become the last part of the name
     * of the scope resource.
     * Needs to be compliant with https://google.aip.dev/122
     * 
     */
    @Export(name="dataAccessScopeId", refs={String.class}, tree="[0]")
    private Output<String> dataAccessScopeId;

    /**
     * @return Required. The user provided scope id which will become the last part of the name
     * of the scope resource.
     * Needs to be compliant with https://google.aip.dev/122
     * 
     */
    public Output<String> dataAccessScopeId() {
        return this.dataAccessScopeId;
    }
    /**
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won&#39;t be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * Structure is documented below.
     * 
     */
    @Export(name="deniedDataAccessLabels", refs={List.class,DataAccessScopeDeniedDataAccessLabel.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DataAccessScopeDeniedDataAccessLabel>> deniedDataAccessLabels;

    /**
     * @return Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won&#39;t be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<DataAccessScopeDeniedDataAccessLabel>>> deniedDataAccessLabels() {
        return Codegen.optional(this.deniedDataAccessLabels);
    }
    /**
     * Optional. A description of the data access scope for a human reader.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Optional. A description of the data access scope for a human reader.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Output only. The name to be used for display to customers of the data access scope.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return Output only. The name to be used for display to customers of the data access scope.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    @Export(name="instance", refs={String.class}, tree="[0]")
    private Output<String> instance;

    /**
     * @return The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }
    /**
     * Output only. The user who last updated the data access scope.
     * 
     */
    @Export(name="lastEditor", refs={String.class}, tree="[0]")
    private Output<String> lastEditor;

    /**
     * @return Output only. The user who last updated the data access scope.
     * 
     */
    public Output<String> lastEditor() {
        return this.lastEditor;
    }
    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The unique full name of the data access scope. This unique identifier is generated using values provided for the URL parameters.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The unique full name of the data access scope. This unique identifier is generated using values provided for the URL parameters.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Output only. The time at which the data access scope was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. The time at which the data access scope was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DataAccessScope(java.lang.String name) {
        this(name, DataAccessScopeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DataAccessScope(java.lang.String name, DataAccessScopeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DataAccessScope(java.lang.String name, DataAccessScopeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:chronicle/dataAccessScope:DataAccessScope", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DataAccessScope(java.lang.String name, Output<java.lang.String> id, @Nullable DataAccessScopeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:chronicle/dataAccessScope:DataAccessScope", name, state, makeResourceOptions(options, id), false);
    }

    private static DataAccessScopeArgs makeArgs(DataAccessScopeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DataAccessScopeArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DataAccessScope get(java.lang.String name, Output<java.lang.String> id, @Nullable DataAccessScopeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DataAccessScope(name, id, state, options);
    }
}
