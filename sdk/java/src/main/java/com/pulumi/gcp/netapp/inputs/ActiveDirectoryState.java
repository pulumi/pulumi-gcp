// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActiveDirectoryState extends com.pulumi.resources.ResourceArgs {

    public static final ActiveDirectoryState Empty = new ActiveDirectoryState();

    /**
     * Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
     * 
     */
    @Import(name="administrators")
    private @Nullable Output<List<String>> administrators;

    /**
     * @return Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
     * 
     */
    public Optional<Output<List<String>>> administrators() {
        return Optional.ofNullable(this.administrators);
    }

    /**
     * Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
     * 
     */
    @Import(name="aesEncryption")
    private @Nullable Output<Boolean> aesEncryption;

    /**
     * @return Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
     * 
     */
    public Optional<Output<Boolean>> aesEncryption() {
        return Optional.ofNullable(this.aesEncryption);
    }

    /**
     * Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
     * 
     */
    @Import(name="backupOperators")
    private @Nullable Output<List<String>> backupOperators;

    /**
     * @return Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
     * 
     */
    public Optional<Output<List<String>>> backupOperators() {
        return Optional.ofNullable(this.backupOperators);
    }

    /**
     * Create time of the active directory. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Create time of the active directory. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Comma separated list of DNS server IP addresses for the Active Directory domain.
     * 
     */
    @Import(name="dns")
    private @Nullable Output<String> dns;

    /**
     * @return Comma separated list of DNS server IP addresses for the Active Directory domain.
     * 
     */
    public Optional<Output<String>> dns() {
        return Optional.ofNullable(this.dns);
    }

    /**
     * Fully qualified domain name for the Active Directory domain.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Fully qualified domain name for the Active Directory domain.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
     * 
     */
    @Import(name="encryptDcConnections")
    private @Nullable Output<Boolean> encryptDcConnections;

    /**
     * @return If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
     * 
     */
    public Optional<Output<Boolean>> encryptDcConnections() {
        return Optional.ofNullable(this.encryptDcConnections);
    }

    /**
     * Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
     * 
     */
    @Import(name="kdcHostname")
    private @Nullable Output<String> kdcHostname;

    /**
     * @return Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
     * 
     */
    public Optional<Output<String>> kdcHostname() {
        return Optional.ofNullable(this.kdcHostname);
    }

    /**
     * IP address of the Active Directory server used as Kerberos Key Distribution Center.
     * 
     */
    @Import(name="kdcIp")
    private @Nullable Output<String> kdcIp;

    /**
     * @return IP address of the Active Directory server used as Kerberos Key Distribution Center.
     * 
     */
    public Optional<Output<String>> kdcIp() {
        return Optional.ofNullable(this.kdcIp);
    }

    /**
     * Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Specifies whether or not the LDAP traffic needs to be signed.
     * 
     */
    @Import(name="ldapSigning")
    private @Nullable Output<Boolean> ldapSigning;

    /**
     * @return Specifies whether or not the LDAP traffic needs to be signed.
     * 
     */
    public Optional<Output<Boolean>> ldapSigning() {
        return Optional.ofNullable(this.ldapSigning);
    }

    /**
     * Name of the region for the policy to apply to.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Name of the region for the policy to apply to.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the Active Directory pool. Needs to be unique per location.
     * 
     * ***
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the Active Directory pool. Needs to be unique per location.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * NetBIOS name prefix of the server to be created.
     * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
     * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
     * 
     */
    @Import(name="netBiosPrefix")
    private @Nullable Output<String> netBiosPrefix;

    /**
     * @return NetBIOS name prefix of the server to be created.
     * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
     * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
     * 
     */
    public Optional<Output<String>> netBiosPrefix() {
        return Optional.ofNullable(this.netBiosPrefix);
    }

    /**
     * Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
     * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
     * 
     */
    @Import(name="nfsUsersWithLdap")
    private @Nullable Output<Boolean> nfsUsersWithLdap;

    /**
     * @return Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
     * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
     * 
     */
    public Optional<Output<Boolean>> nfsUsersWithLdap() {
        return Optional.ofNullable(this.nfsUsersWithLdap);
    }

    /**
     * Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
     * Defaults to `CN=Computers` if left empty.
     * 
     */
    @Import(name="organizationalUnit")
    private @Nullable Output<String> organizationalUnit;

    /**
     * @return Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
     * Defaults to `CN=Computers` if left empty.
     * 
     */
    public Optional<Output<String>> organizationalUnit() {
        return Optional.ofNullable(this.organizationalUnit);
    }

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
     * 
     */
    @Import(name="securityOperators")
    private @Nullable Output<List<String>> securityOperators;

    /**
     * @return Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
     * 
     */
    public Optional<Output<List<String>>> securityOperators() {
        return Optional.ofNullable(this.securityOperators);
    }

    /**
     * Specifies an Active Directory site to manage domain controller selection.
     * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
     * 
     */
    @Import(name="site")
    private @Nullable Output<String> site;

    /**
     * @return Specifies an Active Directory site to manage domain controller selection.
     * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
     * 
     */
    public Optional<Output<String>> site() {
        return Optional.ofNullable(this.site);
    }

    /**
     * The state of the Active Directory policy (not the Active Directory itself).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the Active Directory policy (not the Active Directory itself).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The state details of the Active Directory.
     * 
     */
    @Import(name="stateDetails")
    private @Nullable Output<String> stateDetails;

    /**
     * @return The state details of the Active Directory.
     * 
     */
    public Optional<Output<String>> stateDetails() {
        return Optional.ofNullable(this.stateDetails);
    }

    /**
     * Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ActiveDirectoryState() {}

    private ActiveDirectoryState(ActiveDirectoryState $) {
        this.administrators = $.administrators;
        this.aesEncryption = $.aesEncryption;
        this.backupOperators = $.backupOperators;
        this.createTime = $.createTime;
        this.description = $.description;
        this.dns = $.dns;
        this.domain = $.domain;
        this.effectiveLabels = $.effectiveLabels;
        this.encryptDcConnections = $.encryptDcConnections;
        this.kdcHostname = $.kdcHostname;
        this.kdcIp = $.kdcIp;
        this.labels = $.labels;
        this.ldapSigning = $.ldapSigning;
        this.location = $.location;
        this.name = $.name;
        this.netBiosPrefix = $.netBiosPrefix;
        this.nfsUsersWithLdap = $.nfsUsersWithLdap;
        this.organizationalUnit = $.organizationalUnit;
        this.password = $.password;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.securityOperators = $.securityOperators;
        this.site = $.site;
        this.state = $.state;
        this.stateDetails = $.stateDetails;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActiveDirectoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActiveDirectoryState $;

        public Builder() {
            $ = new ActiveDirectoryState();
        }

        public Builder(ActiveDirectoryState defaults) {
            $ = new ActiveDirectoryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param administrators Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
         * 
         * @return builder
         * 
         */
        public Builder administrators(@Nullable Output<List<String>> administrators) {
            $.administrators = administrators;
            return this;
        }

        /**
         * @param administrators Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
         * 
         * @return builder
         * 
         */
        public Builder administrators(List<String> administrators) {
            return administrators(Output.of(administrators));
        }

        /**
         * @param administrators Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
         * 
         * @return builder
         * 
         */
        public Builder administrators(String... administrators) {
            return administrators(List.of(administrators));
        }

        /**
         * @param aesEncryption Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
         * 
         * @return builder
         * 
         */
        public Builder aesEncryption(@Nullable Output<Boolean> aesEncryption) {
            $.aesEncryption = aesEncryption;
            return this;
        }

        /**
         * @param aesEncryption Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
         * 
         * @return builder
         * 
         */
        public Builder aesEncryption(Boolean aesEncryption) {
            return aesEncryption(Output.of(aesEncryption));
        }

        /**
         * @param backupOperators Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
         * 
         * @return builder
         * 
         */
        public Builder backupOperators(@Nullable Output<List<String>> backupOperators) {
            $.backupOperators = backupOperators;
            return this;
        }

        /**
         * @param backupOperators Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
         * 
         * @return builder
         * 
         */
        public Builder backupOperators(List<String> backupOperators) {
            return backupOperators(Output.of(backupOperators));
        }

        /**
         * @param backupOperators Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
         * 
         * @return builder
         * 
         */
        public Builder backupOperators(String... backupOperators) {
            return backupOperators(List.of(backupOperators));
        }

        /**
         * @param createTime Create time of the active directory. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Create time of the active directory. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dns Comma separated list of DNS server IP addresses for the Active Directory domain.
         * 
         * @return builder
         * 
         */
        public Builder dns(@Nullable Output<String> dns) {
            $.dns = dns;
            return this;
        }

        /**
         * @param dns Comma separated list of DNS server IP addresses for the Active Directory domain.
         * 
         * @return builder
         * 
         */
        public Builder dns(String dns) {
            return dns(Output.of(dns));
        }

        /**
         * @param domain Fully qualified domain name for the Active Directory domain.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Fully qualified domain name for the Active Directory domain.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param encryptDcConnections If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder encryptDcConnections(@Nullable Output<Boolean> encryptDcConnections) {
            $.encryptDcConnections = encryptDcConnections;
            return this;
        }

        /**
         * @param encryptDcConnections If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder encryptDcConnections(Boolean encryptDcConnections) {
            return encryptDcConnections(Output.of(encryptDcConnections));
        }

        /**
         * @param kdcHostname Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
         * 
         * @return builder
         * 
         */
        public Builder kdcHostname(@Nullable Output<String> kdcHostname) {
            $.kdcHostname = kdcHostname;
            return this;
        }

        /**
         * @param kdcHostname Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
         * 
         * @return builder
         * 
         */
        public Builder kdcHostname(String kdcHostname) {
            return kdcHostname(Output.of(kdcHostname));
        }

        /**
         * @param kdcIp IP address of the Active Directory server used as Kerberos Key Distribution Center.
         * 
         * @return builder
         * 
         */
        public Builder kdcIp(@Nullable Output<String> kdcIp) {
            $.kdcIp = kdcIp;
            return this;
        }

        /**
         * @param kdcIp IP address of the Active Directory server used as Kerberos Key Distribution Center.
         * 
         * @return builder
         * 
         */
        public Builder kdcIp(String kdcIp) {
            return kdcIp(Output.of(kdcIp));
        }

        /**
         * @param labels Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param ldapSigning Specifies whether or not the LDAP traffic needs to be signed.
         * 
         * @return builder
         * 
         */
        public Builder ldapSigning(@Nullable Output<Boolean> ldapSigning) {
            $.ldapSigning = ldapSigning;
            return this;
        }

        /**
         * @param ldapSigning Specifies whether or not the LDAP traffic needs to be signed.
         * 
         * @return builder
         * 
         */
        public Builder ldapSigning(Boolean ldapSigning) {
            return ldapSigning(Output.of(ldapSigning));
        }

        /**
         * @param location Name of the region for the policy to apply to.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Name of the region for the policy to apply to.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the Active Directory pool. Needs to be unique per location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the Active Directory pool. Needs to be unique per location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param netBiosPrefix NetBIOS name prefix of the server to be created.
         * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
         * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
         * 
         * @return builder
         * 
         */
        public Builder netBiosPrefix(@Nullable Output<String> netBiosPrefix) {
            $.netBiosPrefix = netBiosPrefix;
            return this;
        }

        /**
         * @param netBiosPrefix NetBIOS name prefix of the server to be created.
         * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
         * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
         * 
         * @return builder
         * 
         */
        public Builder netBiosPrefix(String netBiosPrefix) {
            return netBiosPrefix(Output.of(netBiosPrefix));
        }

        /**
         * @param nfsUsersWithLdap Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
         * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
         * 
         * @return builder
         * 
         */
        public Builder nfsUsersWithLdap(@Nullable Output<Boolean> nfsUsersWithLdap) {
            $.nfsUsersWithLdap = nfsUsersWithLdap;
            return this;
        }

        /**
         * @param nfsUsersWithLdap Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
         * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
         * 
         * @return builder
         * 
         */
        public Builder nfsUsersWithLdap(Boolean nfsUsersWithLdap) {
            return nfsUsersWithLdap(Output.of(nfsUsersWithLdap));
        }

        /**
         * @param organizationalUnit Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
         * Defaults to `CN=Computers` if left empty.
         * 
         * @return builder
         * 
         */
        public Builder organizationalUnit(@Nullable Output<String> organizationalUnit) {
            $.organizationalUnit = organizationalUnit;
            return this;
        }

        /**
         * @param organizationalUnit Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
         * Defaults to `CN=Computers` if left empty.
         * 
         * @return builder
         * 
         */
        public Builder organizationalUnit(String organizationalUnit) {
            return organizationalUnit(Output.of(organizationalUnit));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param securityOperators Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
         * 
         * @return builder
         * 
         */
        public Builder securityOperators(@Nullable Output<List<String>> securityOperators) {
            $.securityOperators = securityOperators;
            return this;
        }

        /**
         * @param securityOperators Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
         * 
         * @return builder
         * 
         */
        public Builder securityOperators(List<String> securityOperators) {
            return securityOperators(Output.of(securityOperators));
        }

        /**
         * @param securityOperators Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
         * 
         * @return builder
         * 
         */
        public Builder securityOperators(String... securityOperators) {
            return securityOperators(List.of(securityOperators));
        }

        /**
         * @param site Specifies an Active Directory site to manage domain controller selection.
         * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site Specifies an Active Directory site to manage domain controller selection.
         * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        /**
         * @param state The state of the Active Directory policy (not the Active Directory itself).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the Active Directory policy (not the Active Directory itself).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stateDetails The state details of the Active Directory.
         * 
         * @return builder
         * 
         */
        public Builder stateDetails(@Nullable Output<String> stateDetails) {
            $.stateDetails = stateDetails;
            return this;
        }

        /**
         * @param stateDetails The state details of the Active Directory.
         * 
         * @return builder
         * 
         */
        public Builder stateDetails(String stateDetails) {
            return stateDetails(Output.of(stateDetails));
        }

        /**
         * @param username Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ActiveDirectoryState build() {
            return $;
        }
    }

}
