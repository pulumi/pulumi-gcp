// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.firebase.inputs.AppHostingTrafficRolloutPolicyArgs;
import com.pulumi.gcp.firebase.inputs.AppHostingTrafficTargetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppHostingTrafficArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppHostingTrafficArgs Empty = new AppHostingTrafficArgs();

    /**
     * Id of the backend that this Traffic config applies to
     * 
     * ***
     * 
     */
    @Import(name="backend", required=true)
    private Output<String> backend;

    /**
     * @return Id of the backend that this Traffic config applies to
     * 
     * ***
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }

    /**
     * The location the Backend that this Traffic config applies to
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location the Backend that this Traffic config applies to
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The policy for how builds and rollouts are triggered and rolled out.
     * Structure is documented below.
     * 
     */
    @Import(name="rolloutPolicy")
    private @Nullable Output<AppHostingTrafficRolloutPolicyArgs> rolloutPolicy;

    /**
     * @return The policy for how builds and rollouts are triggered and rolled out.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AppHostingTrafficRolloutPolicyArgs>> rolloutPolicy() {
        return Optional.ofNullable(this.rolloutPolicy);
    }

    /**
     * Set to manually control the desired traffic for the backend. This will
     * cause current to eventually match this value. The percentages must add
     * up to 100.
     * Structure is documented below.
     * 
     */
    @Import(name="target")
    private @Nullable Output<AppHostingTrafficTargetArgs> target;

    /**
     * @return Set to manually control the desired traffic for the backend. This will
     * cause current to eventually match this value. The percentages must add
     * up to 100.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AppHostingTrafficTargetArgs>> target() {
        return Optional.ofNullable(this.target);
    }

    private AppHostingTrafficArgs() {}

    private AppHostingTrafficArgs(AppHostingTrafficArgs $) {
        this.backend = $.backend;
        this.location = $.location;
        this.project = $.project;
        this.rolloutPolicy = $.rolloutPolicy;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppHostingTrafficArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppHostingTrafficArgs $;

        public Builder() {
            $ = new AppHostingTrafficArgs();
        }

        public Builder(AppHostingTrafficArgs defaults) {
            $ = new AppHostingTrafficArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend Id of the backend that this Traffic config applies to
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder backend(Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend Id of the backend that this Traffic config applies to
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param location The location the Backend that this Traffic config applies to
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location the Backend that this Traffic config applies to
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rolloutPolicy The policy for how builds and rollouts are triggered and rolled out.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rolloutPolicy(@Nullable Output<AppHostingTrafficRolloutPolicyArgs> rolloutPolicy) {
            $.rolloutPolicy = rolloutPolicy;
            return this;
        }

        /**
         * @param rolloutPolicy The policy for how builds and rollouts are triggered and rolled out.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rolloutPolicy(AppHostingTrafficRolloutPolicyArgs rolloutPolicy) {
            return rolloutPolicy(Output.of(rolloutPolicy));
        }

        /**
         * @param target Set to manually control the desired traffic for the backend. This will
         * cause current to eventually match this value. The percentages must add
         * up to 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<AppHostingTrafficTargetArgs> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target Set to manually control the desired traffic for the backend. This will
         * cause current to eventually match this value. The percentages must add
         * up to 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder target(AppHostingTrafficTargetArgs target) {
            return target(Output.of(target));
        }

        public AppHostingTrafficArgs build() {
            if ($.backend == null) {
                throw new MissingRequiredPropertyException("AppHostingTrafficArgs", "backend");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("AppHostingTrafficArgs", "location");
            }
            return $;
        }
    }

}
