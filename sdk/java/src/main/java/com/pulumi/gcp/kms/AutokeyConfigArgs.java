// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutokeyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutokeyConfigArgs Empty = new AutokeyConfigArgs();

    /**
     * The folder for which to retrieve config.
     * 
     */
    @Import(name="folder", required=true)
    private Output<String> folder;

    /**
     * @return The folder for which to retrieve config.
     * 
     */
    public Output<String> folder() {
        return this.folder;
    }

    /**
     * The target key project for a given folder where KMS Autokey will provision a
     * CryptoKey for any new KeyHandle the Developer creates. Should have the form
     * `projects/&lt;project_id_or_number&gt;`.
     * 
     */
    @Import(name="keyProject")
    private @Nullable Output<String> keyProject;

    /**
     * @return The target key project for a given folder where KMS Autokey will provision a
     * CryptoKey for any new KeyHandle the Developer creates. Should have the form
     * `projects/&lt;project_id_or_number&gt;`.
     * 
     */
    public Optional<Output<String>> keyProject() {
        return Optional.ofNullable(this.keyProject);
    }

    private AutokeyConfigArgs() {}

    private AutokeyConfigArgs(AutokeyConfigArgs $) {
        this.folder = $.folder;
        this.keyProject = $.keyProject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutokeyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutokeyConfigArgs $;

        public Builder() {
            $ = new AutokeyConfigArgs();
        }

        public Builder(AutokeyConfigArgs defaults) {
            $ = new AutokeyConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param folder The folder for which to retrieve config.
         * 
         * @return builder
         * 
         */
        public Builder folder(Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The folder for which to retrieve config.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param keyProject The target key project for a given folder where KMS Autokey will provision a
         * CryptoKey for any new KeyHandle the Developer creates. Should have the form
         * `projects/&lt;project_id_or_number&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder keyProject(@Nullable Output<String> keyProject) {
            $.keyProject = keyProject;
            return this;
        }

        /**
         * @param keyProject The target key project for a given folder where KMS Autokey will provision a
         * CryptoKey for any new KeyHandle the Developer creates. Should have the form
         * `projects/&lt;project_id_or_number&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder keyProject(String keyProject) {
            return keyProject(Output.of(keyProject));
        }

        public AutokeyConfigArgs build() {
            if ($.folder == null) {
                throw new MissingRequiredPropertyException("AutokeyConfigArgs", "folder");
            }
            return $;
        }
    }

}
