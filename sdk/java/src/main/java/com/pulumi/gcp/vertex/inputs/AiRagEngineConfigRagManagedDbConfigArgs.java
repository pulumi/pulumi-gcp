// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.vertex.inputs.AiRagEngineConfigRagManagedDbConfigBasicArgs;
import com.pulumi.gcp.vertex.inputs.AiRagEngineConfigRagManagedDbConfigScaledArgs;
import com.pulumi.gcp.vertex.inputs.AiRagEngineConfigRagManagedDbConfigUnprovisionedArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiRagEngineConfigRagManagedDbConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiRagEngineConfigRagManagedDbConfigArgs Empty = new AiRagEngineConfigRagManagedDbConfigArgs();

    /**
     * Basic tier is a cost-effective and low compute tier suitable for the following cases: Experimenting with RagManagedDb, Small data size, Latency insensitive workload, Only using RAG Engine with external vector DBs.
     * NOTE: This is the default tier if not explicitly chosen.
     * 
     */
    @Import(name="basic")
    private @Nullable Output<AiRagEngineConfigRagManagedDbConfigBasicArgs> basic;

    /**
     * @return Basic tier is a cost-effective and low compute tier suitable for the following cases: Experimenting with RagManagedDb, Small data size, Latency insensitive workload, Only using RAG Engine with external vector DBs.
     * NOTE: This is the default tier if not explicitly chosen.
     * 
     */
    public Optional<Output<AiRagEngineConfigRagManagedDbConfigBasicArgs>> basic() {
        return Optional.ofNullable(this.basic);
    }

    /**
     * Scaled tier offers production grade performance along with autoscaling functionality. It is suitable for customers with large amounts of data or performance sensitive workloads.
     * 
     */
    @Import(name="scaled")
    private @Nullable Output<AiRagEngineConfigRagManagedDbConfigScaledArgs> scaled;

    /**
     * @return Scaled tier offers production grade performance along with autoscaling functionality. It is suitable for customers with large amounts of data or performance sensitive workloads.
     * 
     */
    public Optional<Output<AiRagEngineConfigRagManagedDbConfigScaledArgs>> scaled() {
        return Optional.ofNullable(this.scaled);
    }

    /**
     * Disables the RAG Engine service and deletes all your data held within this service. This will halt the billing of the service.
     * NOTE: Once deleted the data cannot be recovered. To start using RAG Engine again, you will need to update the tier by calling the UpdateRagEngineConfig API.
     * 
     */
    @Import(name="unprovisioned")
    private @Nullable Output<AiRagEngineConfigRagManagedDbConfigUnprovisionedArgs> unprovisioned;

    /**
     * @return Disables the RAG Engine service and deletes all your data held within this service. This will halt the billing of the service.
     * NOTE: Once deleted the data cannot be recovered. To start using RAG Engine again, you will need to update the tier by calling the UpdateRagEngineConfig API.
     * 
     */
    public Optional<Output<AiRagEngineConfigRagManagedDbConfigUnprovisionedArgs>> unprovisioned() {
        return Optional.ofNullable(this.unprovisioned);
    }

    private AiRagEngineConfigRagManagedDbConfigArgs() {}

    private AiRagEngineConfigRagManagedDbConfigArgs(AiRagEngineConfigRagManagedDbConfigArgs $) {
        this.basic = $.basic;
        this.scaled = $.scaled;
        this.unprovisioned = $.unprovisioned;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiRagEngineConfigRagManagedDbConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiRagEngineConfigRagManagedDbConfigArgs $;

        public Builder() {
            $ = new AiRagEngineConfigRagManagedDbConfigArgs();
        }

        public Builder(AiRagEngineConfigRagManagedDbConfigArgs defaults) {
            $ = new AiRagEngineConfigRagManagedDbConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param basic Basic tier is a cost-effective and low compute tier suitable for the following cases: Experimenting with RagManagedDb, Small data size, Latency insensitive workload, Only using RAG Engine with external vector DBs.
         * NOTE: This is the default tier if not explicitly chosen.
         * 
         * @return builder
         * 
         */
        public Builder basic(@Nullable Output<AiRagEngineConfigRagManagedDbConfigBasicArgs> basic) {
            $.basic = basic;
            return this;
        }

        /**
         * @param basic Basic tier is a cost-effective and low compute tier suitable for the following cases: Experimenting with RagManagedDb, Small data size, Latency insensitive workload, Only using RAG Engine with external vector DBs.
         * NOTE: This is the default tier if not explicitly chosen.
         * 
         * @return builder
         * 
         */
        public Builder basic(AiRagEngineConfigRagManagedDbConfigBasicArgs basic) {
            return basic(Output.of(basic));
        }

        /**
         * @param scaled Scaled tier offers production grade performance along with autoscaling functionality. It is suitable for customers with large amounts of data or performance sensitive workloads.
         * 
         * @return builder
         * 
         */
        public Builder scaled(@Nullable Output<AiRagEngineConfigRagManagedDbConfigScaledArgs> scaled) {
            $.scaled = scaled;
            return this;
        }

        /**
         * @param scaled Scaled tier offers production grade performance along with autoscaling functionality. It is suitable for customers with large amounts of data or performance sensitive workloads.
         * 
         * @return builder
         * 
         */
        public Builder scaled(AiRagEngineConfigRagManagedDbConfigScaledArgs scaled) {
            return scaled(Output.of(scaled));
        }

        /**
         * @param unprovisioned Disables the RAG Engine service and deletes all your data held within this service. This will halt the billing of the service.
         * NOTE: Once deleted the data cannot be recovered. To start using RAG Engine again, you will need to update the tier by calling the UpdateRagEngineConfig API.
         * 
         * @return builder
         * 
         */
        public Builder unprovisioned(@Nullable Output<AiRagEngineConfigRagManagedDbConfigUnprovisionedArgs> unprovisioned) {
            $.unprovisioned = unprovisioned;
            return this;
        }

        /**
         * @param unprovisioned Disables the RAG Engine service and deletes all your data held within this service. This will halt the billing of the service.
         * NOTE: Once deleted the data cannot be recovered. To start using RAG Engine again, you will need to update the tier by calling the UpdateRagEngineConfig API.
         * 
         * @return builder
         * 
         */
        public Builder unprovisioned(AiRagEngineConfigRagManagedDbConfigUnprovisionedArgs unprovisioned) {
            return unprovisioned(Output.of(unprovisioned));
        }

        public AiRagEngineConfigRagManagedDbConfigArgs build() {
            return $;
        }
    }

}
