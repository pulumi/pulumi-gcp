// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.transcoder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigOverlayAnimationArgs;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigOverlayImageArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobTemplateConfigOverlayArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobTemplateConfigOverlayArgs Empty = new JobTemplateConfigOverlayArgs();

    /**
     * List of animations. The list should be chronological, without any time overlap.
     * Structure is documented below.
     * 
     */
    @Import(name="animations")
    private @Nullable Output<List<JobTemplateConfigOverlayAnimationArgs>> animations;

    /**
     * @return List of animations. The list should be chronological, without any time overlap.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<JobTemplateConfigOverlayAnimationArgs>>> animations() {
        return Optional.ofNullable(this.animations);
    }

    /**
     * Image overlay.
     * Structure is documented below.
     * 
     */
    @Import(name="image")
    private @Nullable Output<JobTemplateConfigOverlayImageArgs> image;

    /**
     * @return Image overlay.
     * Structure is documented below.
     * 
     */
    public Optional<Output<JobTemplateConfigOverlayImageArgs>> image() {
        return Optional.ofNullable(this.image);
    }

    private JobTemplateConfigOverlayArgs() {}

    private JobTemplateConfigOverlayArgs(JobTemplateConfigOverlayArgs $) {
        this.animations = $.animations;
        this.image = $.image;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobTemplateConfigOverlayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobTemplateConfigOverlayArgs $;

        public Builder() {
            $ = new JobTemplateConfigOverlayArgs();
        }

        public Builder(JobTemplateConfigOverlayArgs defaults) {
            $ = new JobTemplateConfigOverlayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param animations List of animations. The list should be chronological, without any time overlap.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder animations(@Nullable Output<List<JobTemplateConfigOverlayAnimationArgs>> animations) {
            $.animations = animations;
            return this;
        }

        /**
         * @param animations List of animations. The list should be chronological, without any time overlap.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder animations(List<JobTemplateConfigOverlayAnimationArgs> animations) {
            return animations(Output.of(animations));
        }

        /**
         * @param animations List of animations. The list should be chronological, without any time overlap.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder animations(JobTemplateConfigOverlayAnimationArgs... animations) {
            return animations(List.of(animations));
        }

        /**
         * @param image Image overlay.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<JobTemplateConfigOverlayImageArgs> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image Image overlay.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder image(JobTemplateConfigOverlayImageArgs image) {
            return image(Output.of(image));
        }

        public JobTemplateConfigOverlayArgs build() {
            return $;
        }
    }

}
