// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuildv2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryArgs Empty = new RepositoryArgs();

    /**
     * Allows clients to store small amounts of arbitrary data.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Allows clients to store small amounts of arbitrary data.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of the repository.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the repository.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The connection for the resource
     * 
     */
    @Import(name="parentConnection", required=true)
    private Output<String> parentConnection;

    /**
     * @return The connection for the resource
     * 
     */
    public Output<String> parentConnection() {
        return this.parentConnection;
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project for the resource
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. Git Clone HTTPS URI.
     * 
     */
    @Import(name="remoteUri", required=true)
    private Output<String> remoteUri;

    /**
     * @return Required. Git Clone HTTPS URI.
     * 
     */
    public Output<String> remoteUri() {
        return this.remoteUri;
    }

    private RepositoryArgs() {}

    private RepositoryArgs(RepositoryArgs $) {
        this.annotations = $.annotations;
        this.location = $.location;
        this.name = $.name;
        this.parentConnection = $.parentConnection;
        this.project = $.project;
        this.remoteUri = $.remoteUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryArgs $;

        public Builder() {
            $ = new RepositoryArgs();
        }

        public Builder(RepositoryArgs defaults) {
            $ = new RepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Allows clients to store small amounts of arbitrary data.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Allows clients to store small amounts of arbitrary data.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentConnection The connection for the resource
         * 
         * @return builder
         * 
         */
        public Builder parentConnection(Output<String> parentConnection) {
            $.parentConnection = parentConnection;
            return this;
        }

        /**
         * @param parentConnection The connection for the resource
         * 
         * @return builder
         * 
         */
        public Builder parentConnection(String parentConnection) {
            return parentConnection(Output.of(parentConnection));
        }

        /**
         * @param project The project for the resource
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project for the resource
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param remoteUri Required. Git Clone HTTPS URI.
         * 
         * @return builder
         * 
         */
        public Builder remoteUri(Output<String> remoteUri) {
            $.remoteUri = remoteUri;
            return this;
        }

        /**
         * @param remoteUri Required. Git Clone HTTPS URI.
         * 
         * @return builder
         * 
         */
        public Builder remoteUri(String remoteUri) {
            return remoteUri(Output.of(remoteUri));
        }

        public RepositoryArgs build() {
            $.parentConnection = Objects.requireNonNull($.parentConnection, "expected parameter 'parentConnection' to be non-null");
            $.remoteUri = Objects.requireNonNull($.remoteUri, "expected parameter 'remoteUri' to be non-null");
            return $;
        }
    }

}
