// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerDeveloperConnectEventConfigPullRequest;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerDeveloperConnectEventConfigPush;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTriggerDeveloperConnectEventConfig {
    /**
     * @return The Developer Connect Git repository link, formatted as &#39;projects/*&#47;locations/*&#47;connections/*&#47;gitRepositoryLink/*&#39;.
     * 
     */
    private String gitRepositoryLink;
    /**
     * @return The type of DeveloperConnect GitRepositoryLink.
     * 
     */
    private String gitRepositoryLinkType;
    /**
     * @return Filter to match changes in pull requests.
     * 
     */
    private List<GetTriggerDeveloperConnectEventConfigPullRequest> pullRequests;
    /**
     * @return Filter to match changes in refs like branches and tags.
     * 
     */
    private List<GetTriggerDeveloperConnectEventConfigPush> pushes;

    private GetTriggerDeveloperConnectEventConfig() {}
    /**
     * @return The Developer Connect Git repository link, formatted as &#39;projects/*&#47;locations/*&#47;connections/*&#47;gitRepositoryLink/*&#39;.
     * 
     */
    public String gitRepositoryLink() {
        return this.gitRepositoryLink;
    }
    /**
     * @return The type of DeveloperConnect GitRepositoryLink.
     * 
     */
    public String gitRepositoryLinkType() {
        return this.gitRepositoryLinkType;
    }
    /**
     * @return Filter to match changes in pull requests.
     * 
     */
    public List<GetTriggerDeveloperConnectEventConfigPullRequest> pullRequests() {
        return this.pullRequests;
    }
    /**
     * @return Filter to match changes in refs like branches and tags.
     * 
     */
    public List<GetTriggerDeveloperConnectEventConfigPush> pushes() {
        return this.pushes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTriggerDeveloperConnectEventConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String gitRepositoryLink;
        private String gitRepositoryLinkType;
        private List<GetTriggerDeveloperConnectEventConfigPullRequest> pullRequests;
        private List<GetTriggerDeveloperConnectEventConfigPush> pushes;
        public Builder() {}
        public Builder(GetTriggerDeveloperConnectEventConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gitRepositoryLink = defaults.gitRepositoryLink;
    	      this.gitRepositoryLinkType = defaults.gitRepositoryLinkType;
    	      this.pullRequests = defaults.pullRequests;
    	      this.pushes = defaults.pushes;
        }

        @CustomType.Setter
        public Builder gitRepositoryLink(String gitRepositoryLink) {
            if (gitRepositoryLink == null) {
              throw new MissingRequiredPropertyException("GetTriggerDeveloperConnectEventConfig", "gitRepositoryLink");
            }
            this.gitRepositoryLink = gitRepositoryLink;
            return this;
        }
        @CustomType.Setter
        public Builder gitRepositoryLinkType(String gitRepositoryLinkType) {
            if (gitRepositoryLinkType == null) {
              throw new MissingRequiredPropertyException("GetTriggerDeveloperConnectEventConfig", "gitRepositoryLinkType");
            }
            this.gitRepositoryLinkType = gitRepositoryLinkType;
            return this;
        }
        @CustomType.Setter
        public Builder pullRequests(List<GetTriggerDeveloperConnectEventConfigPullRequest> pullRequests) {
            if (pullRequests == null) {
              throw new MissingRequiredPropertyException("GetTriggerDeveloperConnectEventConfig", "pullRequests");
            }
            this.pullRequests = pullRequests;
            return this;
        }
        public Builder pullRequests(GetTriggerDeveloperConnectEventConfigPullRequest... pullRequests) {
            return pullRequests(List.of(pullRequests));
        }
        @CustomType.Setter
        public Builder pushes(List<GetTriggerDeveloperConnectEventConfigPush> pushes) {
            if (pushes == null) {
              throw new MissingRequiredPropertyException("GetTriggerDeveloperConnectEventConfig", "pushes");
            }
            this.pushes = pushes;
            return this;
        }
        public Builder pushes(GetTriggerDeveloperConnectEventConfigPush... pushes) {
            return pushes(List.of(pushes));
        }
        public GetTriggerDeveloperConnectEventConfig build() {
            final var _resultValue = new GetTriggerDeveloperConnectEventConfig();
            _resultValue.gitRepositoryLink = gitRepositoryLink;
            _resultValue.gitRepositoryLinkType = gitRepositoryLinkType;
            _resultValue.pullRequests = pullRequests;
            _resultValue.pushes = pushes;
            return _resultValue;
        }
    }
}
