// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterAntiAffinityGroupsArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterAuthorizationArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterAutoRepairConfigArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterControlPlaneNodeArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterDataplaneV2Args;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterFleetArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterLoadBalancerArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterNetworkConfigArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterStatusArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterStorageArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterValidationCheckArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterVcenterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VMwareClusterState extends com.pulumi.resources.ResourceArgs {

    public static final VMwareClusterState Empty = new VMwareClusterState();

    /**
     * The admin cluster this VMware User Cluster belongs to.
     * This is the full resource name of the admin cluster&#39;s hub membership.
     * In the future, references to other resource types might be allowed if
     * admin clusters are modeled as their own resources.
     * 
     */
    @Import(name="adminClusterMembership")
    private @Nullable Output<String> adminClusterMembership;

    /**
     * @return The admin cluster this VMware User Cluster belongs to.
     * This is the full resource name of the admin cluster&#39;s hub membership.
     * In the future, references to other resource types might be allowed if
     * admin clusters are modeled as their own resources.
     * 
     */
    public Optional<Output<String>> adminClusterMembership() {
        return Optional.ofNullable(this.adminClusterMembership);
    }

    /**
     * Annotations on the VMware User Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations on the VMware User Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * AAGConfig specifies whether to spread VMware User Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     * 
     */
    @Import(name="antiAffinityGroups")
    private @Nullable Output<VMwareClusterAntiAffinityGroupsArgs> antiAffinityGroups;

    /**
     * @return AAGConfig specifies whether to spread VMware User Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VMwareClusterAntiAffinityGroupsArgs>> antiAffinityGroups() {
        return Optional.ofNullable(this.antiAffinityGroups);
    }

    /**
     * RBAC policy that will be applied and managed by GKE On-Prem.
     * Structure is documented below.
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<VMwareClusterAuthorizationArgs> authorization;

    /**
     * @return RBAC policy that will be applied and managed by GKE On-Prem.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VMwareClusterAuthorizationArgs>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     * 
     */
    @Import(name="autoRepairConfig")
    private @Nullable Output<VMwareClusterAutoRepairConfigArgs> autoRepairConfig;

    /**
     * @return Configuration for auto repairing.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VMwareClusterAutoRepairConfigArgs>> autoRepairConfig() {
        return Optional.ofNullable(this.autoRepairConfig);
    }

    /**
     * VMware User Cluster control plane nodes must have either 1 or 3 replicas.
     * Structure is documented below.
     * 
     */
    @Import(name="controlPlaneNode")
    private @Nullable Output<VMwareClusterControlPlaneNodeArgs> controlPlaneNode;

    /**
     * @return VMware User Cluster control plane nodes must have either 1 or 3 replicas.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VMwareClusterControlPlaneNodeArgs>> controlPlaneNode() {
        return Optional.ofNullable(this.controlPlaneNode);
    }

    /**
     * The time at which VMware User Cluster was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The time at which VMware User Cluster was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     * Structure is documented below.
     * 
     */
    @Import(name="dataplaneV2")
    private @Nullable Output<VMwareClusterDataplaneV2Args> dataplaneV2;

    /**
     * @return VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VMwareClusterDataplaneV2Args>> dataplaneV2() {
        return Optional.ofNullable(this.dataplaneV2);
    }

    /**
     * The time at which VMware User Cluster was deleted.
     * 
     */
    @Import(name="deleteTime")
    private @Nullable Output<String> deleteTime;

    /**
     * @return The time at which VMware User Cluster was deleted.
     * 
     */
    public Optional<Output<String>> deleteTime() {
        return Optional.ofNullable(this.deleteTime);
    }

    /**
     * A human readable description of this VMware User Cluster.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human readable description of this VMware User Cluster.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enable control plane V2. Default to false.
     * 
     */
    @Import(name="enableControlPlaneV2")
    private @Nullable Output<Boolean> enableControlPlaneV2;

    /**
     * @return Enable control plane V2. Default to false.
     * 
     */
    public Optional<Output<Boolean>> enableControlPlaneV2() {
        return Optional.ofNullable(this.enableControlPlaneV2);
    }

    /**
     * The DNS name of VMware User Cluster&#39;s API server.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return The DNS name of VMware User Cluster&#39;s API server.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Fleet configuration for the cluster.
     * Structure is documented below.
     * 
     */
    @Import(name="fleets")
    private @Nullable Output<List<VMwareClusterFleetArgs>> fleets;

    /**
     * @return Fleet configuration for the cluster.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<VMwareClusterFleetArgs>>> fleets() {
        return Optional.ofNullable(this.fleets);
    }

    /**
     * Load Balancer configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="loadBalancer")
    private @Nullable Output<VMwareClusterLoadBalancerArgs> loadBalancer;

    /**
     * @return Load Balancer configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VMwareClusterLoadBalancerArgs>> loadBalancer() {
        return Optional.ofNullable(this.loadBalancer);
    }

    /**
     * The object name of the VMware OnPremUserCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     * 
     */
    @Import(name="localName")
    private @Nullable Output<String> localName;

    /**
     * @return The object name of the VMware OnPremUserCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     * 
     */
    public Optional<Output<String>> localName() {
        return Optional.ofNullable(this.localName);
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the resource.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The VMware cluster name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The VMware cluster name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The VMware User Cluster network configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="networkConfig")
    private @Nullable Output<VMwareClusterNetworkConfigArgs> networkConfig;

    /**
     * @return The VMware User Cluster network configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VMwareClusterNetworkConfigArgs>> networkConfig() {
        return Optional.ofNullable(this.networkConfig);
    }

    /**
     * The Anthos clusters on the VMware version for your user cluster.
     * 
     */
    @Import(name="onPremVersion")
    private @Nullable Output<String> onPremVersion;

    /**
     * @return The Anthos clusters on the VMware version for your user cluster.
     * 
     */
    public Optional<Output<String>> onPremVersion() {
        return Optional.ofNullable(this.onPremVersion);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * If set, there are currently changes in flight to the VMware User Cluster.
     * 
     */
    @Import(name="reconciling")
    private @Nullable Output<Boolean> reconciling;

    /**
     * @return If set, there are currently changes in flight to the VMware User Cluster.
     * 
     */
    public Optional<Output<Boolean>> reconciling() {
        return Optional.ofNullable(this.reconciling);
    }

    /**
     * (Output)
     * The lifecycle state of the condition.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Output)
     * The lifecycle state of the condition.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Output)
     * Specifies the detailed validation check status
     * Structure is documented below.
     * 
     */
    @Import(name="statuses")
    private @Nullable Output<List<VMwareClusterStatusArgs>> statuses;

    /**
     * @return (Output)
     * Specifies the detailed validation check status
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<VMwareClusterStatusArgs>>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    /**
     * Storage configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="storage")
    private @Nullable Output<VMwareClusterStorageArgs> storage;

    /**
     * @return Storage configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VMwareClusterStorageArgs>> storage() {
        return Optional.ofNullable(this.storage);
    }

    /**
     * The unique identifier of the VMware User Cluster.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return The unique identifier of the VMware User Cluster.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The time at which VMware User Cluster was last updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return The time at which VMware User Cluster was last updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * ValidationCheck represents the result of the preflight check job.
     * Structure is documented below.
     * 
     */
    @Import(name="validationChecks")
    private @Nullable Output<List<VMwareClusterValidationCheckArgs>> validationChecks;

    /**
     * @return ValidationCheck represents the result of the preflight check job.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<VMwareClusterValidationCheckArgs>>> validationChecks() {
        return Optional.ofNullable(this.validationChecks);
    }

    /**
     * VmwareVCenterConfig specifies vCenter config for the user cluster.
     * Inherited from the admin cluster.
     * Structure is documented below.
     * 
     */
    @Import(name="vcenters")
    private @Nullable Output<List<VMwareClusterVcenterArgs>> vcenters;

    /**
     * @return VmwareVCenterConfig specifies vCenter config for the user cluster.
     * Inherited from the admin cluster.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<VMwareClusterVcenterArgs>>> vcenters() {
        return Optional.ofNullable(this.vcenters);
    }

    /**
     * Enable VM tracking.
     * 
     */
    @Import(name="vmTrackingEnabled")
    private @Nullable Output<Boolean> vmTrackingEnabled;

    /**
     * @return Enable VM tracking.
     * 
     */
    public Optional<Output<Boolean>> vmTrackingEnabled() {
        return Optional.ofNullable(this.vmTrackingEnabled);
    }

    private VMwareClusterState() {}

    private VMwareClusterState(VMwareClusterState $) {
        this.adminClusterMembership = $.adminClusterMembership;
        this.annotations = $.annotations;
        this.antiAffinityGroups = $.antiAffinityGroups;
        this.authorization = $.authorization;
        this.autoRepairConfig = $.autoRepairConfig;
        this.controlPlaneNode = $.controlPlaneNode;
        this.createTime = $.createTime;
        this.dataplaneV2 = $.dataplaneV2;
        this.deleteTime = $.deleteTime;
        this.description = $.description;
        this.enableControlPlaneV2 = $.enableControlPlaneV2;
        this.endpoint = $.endpoint;
        this.etag = $.etag;
        this.fleets = $.fleets;
        this.loadBalancer = $.loadBalancer;
        this.localName = $.localName;
        this.location = $.location;
        this.name = $.name;
        this.networkConfig = $.networkConfig;
        this.onPremVersion = $.onPremVersion;
        this.project = $.project;
        this.reconciling = $.reconciling;
        this.state = $.state;
        this.statuses = $.statuses;
        this.storage = $.storage;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
        this.validationChecks = $.validationChecks;
        this.vcenters = $.vcenters;
        this.vmTrackingEnabled = $.vmTrackingEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VMwareClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VMwareClusterState $;

        public Builder() {
            $ = new VMwareClusterState();
        }

        public Builder(VMwareClusterState defaults) {
            $ = new VMwareClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminClusterMembership The admin cluster this VMware User Cluster belongs to.
         * This is the full resource name of the admin cluster&#39;s hub membership.
         * In the future, references to other resource types might be allowed if
         * admin clusters are modeled as their own resources.
         * 
         * @return builder
         * 
         */
        public Builder adminClusterMembership(@Nullable Output<String> adminClusterMembership) {
            $.adminClusterMembership = adminClusterMembership;
            return this;
        }

        /**
         * @param adminClusterMembership The admin cluster this VMware User Cluster belongs to.
         * This is the full resource name of the admin cluster&#39;s hub membership.
         * In the future, references to other resource types might be allowed if
         * admin clusters are modeled as their own resources.
         * 
         * @return builder
         * 
         */
        public Builder adminClusterMembership(String adminClusterMembership) {
            return adminClusterMembership(Output.of(adminClusterMembership));
        }

        /**
         * @param annotations Annotations on the VMware User Cluster.
         * This field has the same restrictions as Kubernetes annotations.
         * The total size of all keys and values combined is limited to 256k.
         * Key can have 2 segments: prefix (optional) and name (required),
         * separated by a slash (/).
         * Prefix must be a DNS subdomain.
         * Name must be 63 characters or less, begin and end with alphanumerics,
         * with dashes (-), underscores (_), dots (.), and alphanumerics between.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations on the VMware User Cluster.
         * This field has the same restrictions as Kubernetes annotations.
         * The total size of all keys and values combined is limited to 256k.
         * Key can have 2 segments: prefix (optional) and name (required),
         * separated by a slash (/).
         * Prefix must be a DNS subdomain.
         * Name must be 63 characters or less, begin and end with alphanumerics,
         * with dashes (-), underscores (_), dots (.), and alphanumerics between.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param antiAffinityGroups AAGConfig specifies whether to spread VMware User Cluster nodes across at
         * least three physical hosts in the datacenter.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder antiAffinityGroups(@Nullable Output<VMwareClusterAntiAffinityGroupsArgs> antiAffinityGroups) {
            $.antiAffinityGroups = antiAffinityGroups;
            return this;
        }

        /**
         * @param antiAffinityGroups AAGConfig specifies whether to spread VMware User Cluster nodes across at
         * least three physical hosts in the datacenter.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder antiAffinityGroups(VMwareClusterAntiAffinityGroupsArgs antiAffinityGroups) {
            return antiAffinityGroups(Output.of(antiAffinityGroups));
        }

        /**
         * @param authorization RBAC policy that will be applied and managed by GKE On-Prem.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable Output<VMwareClusterAuthorizationArgs> authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param authorization RBAC policy that will be applied and managed by GKE On-Prem.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authorization(VMwareClusterAuthorizationArgs authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param autoRepairConfig Configuration for auto repairing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoRepairConfig(@Nullable Output<VMwareClusterAutoRepairConfigArgs> autoRepairConfig) {
            $.autoRepairConfig = autoRepairConfig;
            return this;
        }

        /**
         * @param autoRepairConfig Configuration for auto repairing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoRepairConfig(VMwareClusterAutoRepairConfigArgs autoRepairConfig) {
            return autoRepairConfig(Output.of(autoRepairConfig));
        }

        /**
         * @param controlPlaneNode VMware User Cluster control plane nodes must have either 1 or 3 replicas.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneNode(@Nullable Output<VMwareClusterControlPlaneNodeArgs> controlPlaneNode) {
            $.controlPlaneNode = controlPlaneNode;
            return this;
        }

        /**
         * @param controlPlaneNode VMware User Cluster control plane nodes must have either 1 or 3 replicas.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneNode(VMwareClusterControlPlaneNodeArgs controlPlaneNode) {
            return controlPlaneNode(Output.of(controlPlaneNode));
        }

        /**
         * @param createTime The time at which VMware User Cluster was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The time at which VMware User Cluster was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dataplaneV2 VmwareDataplaneV2Config specifies configuration for Dataplane V2.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataplaneV2(@Nullable Output<VMwareClusterDataplaneV2Args> dataplaneV2) {
            $.dataplaneV2 = dataplaneV2;
            return this;
        }

        /**
         * @param dataplaneV2 VmwareDataplaneV2Config specifies configuration for Dataplane V2.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataplaneV2(VMwareClusterDataplaneV2Args dataplaneV2) {
            return dataplaneV2(Output.of(dataplaneV2));
        }

        /**
         * @param deleteTime The time at which VMware User Cluster was deleted.
         * 
         * @return builder
         * 
         */
        public Builder deleteTime(@Nullable Output<String> deleteTime) {
            $.deleteTime = deleteTime;
            return this;
        }

        /**
         * @param deleteTime The time at which VMware User Cluster was deleted.
         * 
         * @return builder
         * 
         */
        public Builder deleteTime(String deleteTime) {
            return deleteTime(Output.of(deleteTime));
        }

        /**
         * @param description A human readable description of this VMware User Cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human readable description of this VMware User Cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableControlPlaneV2 Enable control plane V2. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder enableControlPlaneV2(@Nullable Output<Boolean> enableControlPlaneV2) {
            $.enableControlPlaneV2 = enableControlPlaneV2;
            return this;
        }

        /**
         * @param enableControlPlaneV2 Enable control plane V2. Default to false.
         * 
         * @return builder
         * 
         */
        public Builder enableControlPlaneV2(Boolean enableControlPlaneV2) {
            return enableControlPlaneV2(Output.of(enableControlPlaneV2));
        }

        /**
         * @param endpoint The DNS name of VMware User Cluster&#39;s API server.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The DNS name of VMware User Cluster&#39;s API server.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param etag This checksum is computed by the server based on the value of other
         * fields, and may be sent on update and delete requests to ensure the
         * client has an up-to-date value before proceeding.
         * Allows clients to perform consistent read-modify-writes
         * through optimistic concurrency control.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag This checksum is computed by the server based on the value of other
         * fields, and may be sent on update and delete requests to ensure the
         * client has an up-to-date value before proceeding.
         * Allows clients to perform consistent read-modify-writes
         * through optimistic concurrency control.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param fleets Fleet configuration for the cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fleets(@Nullable Output<List<VMwareClusterFleetArgs>> fleets) {
            $.fleets = fleets;
            return this;
        }

        /**
         * @param fleets Fleet configuration for the cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fleets(List<VMwareClusterFleetArgs> fleets) {
            return fleets(Output.of(fleets));
        }

        /**
         * @param fleets Fleet configuration for the cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fleets(VMwareClusterFleetArgs... fleets) {
            return fleets(List.of(fleets));
        }

        /**
         * @param loadBalancer Load Balancer configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancer(@Nullable Output<VMwareClusterLoadBalancerArgs> loadBalancer) {
            $.loadBalancer = loadBalancer;
            return this;
        }

        /**
         * @param loadBalancer Load Balancer configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancer(VMwareClusterLoadBalancerArgs loadBalancer) {
            return loadBalancer(Output.of(loadBalancer));
        }

        /**
         * @param localName The object name of the VMware OnPremUserCluster custom resource on the
         * associated admin cluster. This field is used to support conflicting
         * names when enrolling existing clusters to the API. When used as a part of
         * cluster enrollment, this field will differ from the ID in the resource
         * name. For new clusters, this field will match the user provided cluster ID
         * and be visible in the last component of the resource name. It is not
         * modifiable.
         * All users should use this name to access their cluster using gkectl or
         * kubectl and should expect to see the local name when viewing admin
         * cluster controller logs.
         * 
         * @return builder
         * 
         */
        public Builder localName(@Nullable Output<String> localName) {
            $.localName = localName;
            return this;
        }

        /**
         * @param localName The object name of the VMware OnPremUserCluster custom resource on the
         * associated admin cluster. This field is used to support conflicting
         * names when enrolling existing clusters to the API. When used as a part of
         * cluster enrollment, this field will differ from the ID in the resource
         * name. For new clusters, this field will match the user provided cluster ID
         * and be visible in the last component of the resource name. It is not
         * modifiable.
         * All users should use this name to access their cluster using gkectl or
         * kubectl and should expect to see the local name when viewing admin
         * cluster controller logs.
         * 
         * @return builder
         * 
         */
        public Builder localName(String localName) {
            return localName(Output.of(localName));
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The VMware cluster name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The VMware cluster name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkConfig The VMware User Cluster network configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(@Nullable Output<VMwareClusterNetworkConfigArgs> networkConfig) {
            $.networkConfig = networkConfig;
            return this;
        }

        /**
         * @param networkConfig The VMware User Cluster network configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(VMwareClusterNetworkConfigArgs networkConfig) {
            return networkConfig(Output.of(networkConfig));
        }

        /**
         * @param onPremVersion The Anthos clusters on the VMware version for your user cluster.
         * 
         * @return builder
         * 
         */
        public Builder onPremVersion(@Nullable Output<String> onPremVersion) {
            $.onPremVersion = onPremVersion;
            return this;
        }

        /**
         * @param onPremVersion The Anthos clusters on the VMware version for your user cluster.
         * 
         * @return builder
         * 
         */
        public Builder onPremVersion(String onPremVersion) {
            return onPremVersion(Output.of(onPremVersion));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param reconciling If set, there are currently changes in flight to the VMware User Cluster.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(@Nullable Output<Boolean> reconciling) {
            $.reconciling = reconciling;
            return this;
        }

        /**
         * @param reconciling If set, there are currently changes in flight to the VMware User Cluster.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(Boolean reconciling) {
            return reconciling(Output.of(reconciling));
        }

        /**
         * @param state (Output)
         * The lifecycle state of the condition.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Output)
         * The lifecycle state of the condition.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param statuses (Output)
         * Specifies the detailed validation check status
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statuses(@Nullable Output<List<VMwareClusterStatusArgs>> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses (Output)
         * Specifies the detailed validation check status
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statuses(List<VMwareClusterStatusArgs> statuses) {
            return statuses(Output.of(statuses));
        }

        /**
         * @param statuses (Output)
         * Specifies the detailed validation check status
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statuses(VMwareClusterStatusArgs... statuses) {
            return statuses(List.of(statuses));
        }

        /**
         * @param storage Storage configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder storage(@Nullable Output<VMwareClusterStorageArgs> storage) {
            $.storage = storage;
            return this;
        }

        /**
         * @param storage Storage configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder storage(VMwareClusterStorageArgs storage) {
            return storage(Output.of(storage));
        }

        /**
         * @param uid The unique identifier of the VMware User Cluster.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The unique identifier of the VMware User Cluster.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime The time at which VMware User Cluster was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime The time at which VMware User Cluster was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param validationChecks ValidationCheck represents the result of the preflight check job.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder validationChecks(@Nullable Output<List<VMwareClusterValidationCheckArgs>> validationChecks) {
            $.validationChecks = validationChecks;
            return this;
        }

        /**
         * @param validationChecks ValidationCheck represents the result of the preflight check job.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder validationChecks(List<VMwareClusterValidationCheckArgs> validationChecks) {
            return validationChecks(Output.of(validationChecks));
        }

        /**
         * @param validationChecks ValidationCheck represents the result of the preflight check job.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder validationChecks(VMwareClusterValidationCheckArgs... validationChecks) {
            return validationChecks(List.of(validationChecks));
        }

        /**
         * @param vcenters VmwareVCenterConfig specifies vCenter config for the user cluster.
         * Inherited from the admin cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vcenters(@Nullable Output<List<VMwareClusterVcenterArgs>> vcenters) {
            $.vcenters = vcenters;
            return this;
        }

        /**
         * @param vcenters VmwareVCenterConfig specifies vCenter config for the user cluster.
         * Inherited from the admin cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vcenters(List<VMwareClusterVcenterArgs> vcenters) {
            return vcenters(Output.of(vcenters));
        }

        /**
         * @param vcenters VmwareVCenterConfig specifies vCenter config for the user cluster.
         * Inherited from the admin cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vcenters(VMwareClusterVcenterArgs... vcenters) {
            return vcenters(List.of(vcenters));
        }

        /**
         * @param vmTrackingEnabled Enable VM tracking.
         * 
         * @return builder
         * 
         */
        public Builder vmTrackingEnabled(@Nullable Output<Boolean> vmTrackingEnabled) {
            $.vmTrackingEnabled = vmTrackingEnabled;
            return this;
        }

        /**
         * @param vmTrackingEnabled Enable VM tracking.
         * 
         * @return builder
         * 
         */
        public Builder vmTrackingEnabled(Boolean vmTrackingEnabled) {
            return vmTrackingEnabled(Output.of(vmTrackingEnabled));
        }

        public VMwareClusterState build() {
            return $;
        }
    }

}
