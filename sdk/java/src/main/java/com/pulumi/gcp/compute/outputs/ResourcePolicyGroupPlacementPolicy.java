// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ResourcePolicyGroupPlacementPolicy {
    /**
     * @return The number of availability domains instances will be spread across. If two instances are in different
     * availability domain, they will not be put in the same low latency network
     * 
     */
    private @Nullable Integer availabilityDomainCount;
    /**
     * @return Collocation specifies whether to place VMs inside the same availability domain on the same low-latency network.
     * Specify `COLLOCATED` to enable collocation. Can only be specified with `vm_count`. If compute instances are created
     * with a COLLOCATED policy, then exactly `vm_count` instances must be created at the same time with the resource policy
     * attached.
     * Possible values are `COLLOCATED`.
     * 
     */
    private @Nullable String collocation;
    /**
     * @return Number of VMs in this placement group. Google does not recommend that you use this field
     * unless you use a compact policy and you want your policy to work only if it contains this
     * exact number of VMs.
     * 
     */
    private @Nullable Integer vmCount;

    private ResourcePolicyGroupPlacementPolicy() {}
    /**
     * @return The number of availability domains instances will be spread across. If two instances are in different
     * availability domain, they will not be put in the same low latency network
     * 
     */
    public Optional<Integer> availabilityDomainCount() {
        return Optional.ofNullable(this.availabilityDomainCount);
    }
    /**
     * @return Collocation specifies whether to place VMs inside the same availability domain on the same low-latency network.
     * Specify `COLLOCATED` to enable collocation. Can only be specified with `vm_count`. If compute instances are created
     * with a COLLOCATED policy, then exactly `vm_count` instances must be created at the same time with the resource policy
     * attached.
     * Possible values are `COLLOCATED`.
     * 
     */
    public Optional<String> collocation() {
        return Optional.ofNullable(this.collocation);
    }
    /**
     * @return Number of VMs in this placement group. Google does not recommend that you use this field
     * unless you use a compact policy and you want your policy to work only if it contains this
     * exact number of VMs.
     * 
     */
    public Optional<Integer> vmCount() {
        return Optional.ofNullable(this.vmCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResourcePolicyGroupPlacementPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer availabilityDomainCount;
        private @Nullable String collocation;
        private @Nullable Integer vmCount;
        public Builder() {}
        public Builder(ResourcePolicyGroupPlacementPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomainCount = defaults.availabilityDomainCount;
    	      this.collocation = defaults.collocation;
    	      this.vmCount = defaults.vmCount;
        }

        @CustomType.Setter
        public Builder availabilityDomainCount(@Nullable Integer availabilityDomainCount) {
            this.availabilityDomainCount = availabilityDomainCount;
            return this;
        }
        @CustomType.Setter
        public Builder collocation(@Nullable String collocation) {
            this.collocation = collocation;
            return this;
        }
        @CustomType.Setter
        public Builder vmCount(@Nullable Integer vmCount) {
            this.vmCount = vmCount;
            return this;
        }
        public ResourcePolicyGroupPlacementPolicy build() {
            final var o = new ResourcePolicyGroupPlacementPolicy();
            o.availabilityDomainCount = availabilityDomainCount;
            o.collocation = collocation;
            o.vmCount = vmCount;
            return o;
        }
    }
}
