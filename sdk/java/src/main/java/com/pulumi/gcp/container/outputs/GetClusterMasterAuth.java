// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.GetClusterMasterAuthClientCertificateConfig;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterMasterAuth {
    /**
     * @return Base64 encoded public certificate used by clients to authenticate to the cluster endpoint.
     * 
     */
    private String clientCertificate;
    /**
     * @return Whether client certificate authorization is enabled for this cluster.
     * 
     */
    private List<GetClusterMasterAuthClientCertificateConfig> clientCertificateConfigs;
    /**
     * @return Base64 encoded private key used by clients to authenticate to the cluster endpoint.
     * 
     */
    private String clientKey;
    /**
     * @return Base64 encoded public certificate that is the root of trust for the cluster.
     * 
     */
    private String clusterCaCertificate;

    private GetClusterMasterAuth() {}
    /**
     * @return Base64 encoded public certificate used by clients to authenticate to the cluster endpoint.
     * 
     */
    public String clientCertificate() {
        return this.clientCertificate;
    }
    /**
     * @return Whether client certificate authorization is enabled for this cluster.
     * 
     */
    public List<GetClusterMasterAuthClientCertificateConfig> clientCertificateConfigs() {
        return this.clientCertificateConfigs;
    }
    /**
     * @return Base64 encoded private key used by clients to authenticate to the cluster endpoint.
     * 
     */
    public String clientKey() {
        return this.clientKey;
    }
    /**
     * @return Base64 encoded public certificate that is the root of trust for the cluster.
     * 
     */
    public String clusterCaCertificate() {
        return this.clusterCaCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterMasterAuth defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientCertificate;
        private List<GetClusterMasterAuthClientCertificateConfig> clientCertificateConfigs;
        private String clientKey;
        private String clusterCaCertificate;
        public Builder() {}
        public Builder(GetClusterMasterAuth defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientCertificateConfigs = defaults.clientCertificateConfigs;
    	      this.clientKey = defaults.clientKey;
    	      this.clusterCaCertificate = defaults.clusterCaCertificate;
        }

        @CustomType.Setter
        public Builder clientCertificate(String clientCertificate) {
            if (clientCertificate == null) {
              throw new MissingRequiredPropertyException("GetClusterMasterAuth", "clientCertificate");
            }
            this.clientCertificate = clientCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificateConfigs(List<GetClusterMasterAuthClientCertificateConfig> clientCertificateConfigs) {
            if (clientCertificateConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterMasterAuth", "clientCertificateConfigs");
            }
            this.clientCertificateConfigs = clientCertificateConfigs;
            return this;
        }
        public Builder clientCertificateConfigs(GetClusterMasterAuthClientCertificateConfig... clientCertificateConfigs) {
            return clientCertificateConfigs(List.of(clientCertificateConfigs));
        }
        @CustomType.Setter
        public Builder clientKey(String clientKey) {
            if (clientKey == null) {
              throw new MissingRequiredPropertyException("GetClusterMasterAuth", "clientKey");
            }
            this.clientKey = clientKey;
            return this;
        }
        @CustomType.Setter
        public Builder clusterCaCertificate(String clusterCaCertificate) {
            if (clusterCaCertificate == null) {
              throw new MissingRequiredPropertyException("GetClusterMasterAuth", "clusterCaCertificate");
            }
            this.clusterCaCertificate = clusterCaCertificate;
            return this;
        }
        public GetClusterMasterAuth build() {
            final var _resultValue = new GetClusterMasterAuth();
            _resultValue.clientCertificate = clientCertificate;
            _resultValue.clientCertificateConfigs = clientCertificateConfigs;
            _resultValue.clientKey = clientKey;
            _resultValue.clusterCaCertificate = clusterCaCertificate;
            return _resultValue;
        }
    }
}
