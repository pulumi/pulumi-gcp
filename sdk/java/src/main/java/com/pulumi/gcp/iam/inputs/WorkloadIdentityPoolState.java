// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.iam.inputs.WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs;
import com.pulumi.gcp.iam.inputs.WorkloadIdentityPoolInlineTrustConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkloadIdentityPoolState extends com.pulumi.resources.ResourceArgs {

    public static final WorkloadIdentityPoolState Empty = new WorkloadIdentityPoolState();

    /**
     * A description of the pool. Cannot exceed 256 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the pool. Cannot exceed 256 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
     * existing tokens to access resources. If the pool is re-enabled, existing tokens grant
     * access again.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
     * existing tokens to access resources. If the pool is re-enabled, existing tokens grant
     * access again.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * A display name for the pool. Cannot exceed 32 characters.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A display name for the pool. Cannot exceed 32 characters.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Represents configuration for generating mutual TLS (mTLS) certificates for the identities
     * within this pool. Defines the Certificate Authority (CA) pool resources and configurations
     * required for issuance and rotation of mTLS workload certificates.
     * Structure is documented below.
     * 
     */
    @Import(name="inlineCertificateIssuanceConfig")
    private @Nullable Output<WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs> inlineCertificateIssuanceConfig;

    /**
     * @return Represents configuration for generating mutual TLS (mTLS) certificates for the identities
     * within this pool. Defines the Certificate Authority (CA) pool resources and configurations
     * required for issuance and rotation of mTLS workload certificates.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs>> inlineCertificateIssuanceConfig() {
        return Optional.ofNullable(this.inlineCertificateIssuanceConfig);
    }

    /**
     * Represents config to add additional trusted trust domains. Defines configuration for extending
     * trust to additional trust domains. By establishing trust with another domain, the current
     * domain will recognize and accept certificates issued by entities within the trusted domains.
     * Note that a trust domain automatically trusts itself, eliminating the need for explicit
     * configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="inlineTrustConfig")
    private @Nullable Output<WorkloadIdentityPoolInlineTrustConfigArgs> inlineTrustConfig;

    /**
     * @return Represents config to add additional trusted trust domains. Defines configuration for extending
     * trust to additional trust domains. By establishing trust with another domain, the current
     * domain will recognize and accept certificates issued by entities within the trusted domains.
     * Note that a trust domain automatically trusts itself, eliminating the need for explicit
     * configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WorkloadIdentityPoolInlineTrustConfigArgs>> inlineTrustConfig() {
        return Optional.ofNullable(this.inlineTrustConfig);
    }

    /**
     * The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
     * are in `FEDERATION_ONLY` mode.
     * 
     * &gt; **Note** This field cannot be changed after the Workload Identity Pool is created. While
     * `pulumi preview` may show an update if you change this field&#39;s value, `pulumi up`
     * **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
     * To specify a different `mode`, please create a new Workload Identity Pool resource.
     * * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
     *   Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
     *   workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
     *   within the pool besides providers.
     * * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
     *   identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
     *   workload identifier. The subject identifier for all identities must conform to the following
     *   format: `ns/&lt;namespace&gt;/sa/&lt;workload_identifier&gt;`.
     *   `gcp.iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
     *   mode pools.
     *   Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
     * are in `FEDERATION_ONLY` mode.
     * 
     * &gt; **Note** This field cannot be changed after the Workload Identity Pool is created. While
     * `pulumi preview` may show an update if you change this field&#39;s value, `pulumi up`
     * **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
     * To specify a different `mode`, please create a new Workload Identity Pool resource.
     * * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
     *   Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
     *   workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
     *   within the pool besides providers.
     * * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
     *   identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
     *   workload identifier. The subject identifier for all identities must conform to the following
     *   format: `ns/&lt;namespace&gt;/sa/&lt;workload_identifier&gt;`.
     *   `gcp.iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
     *   mode pools.
     *   Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The resource name of the pool as
     * `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the pool as
     * `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The state of the pool.
     * * `STATE_UNSPECIFIED`: State unspecified.
     * * `ACTIVE`: The pool is active, and may be used in Google Cloud policies.
     * * `DELETED`: The pool is soft-deleted. Soft-deleted pools are permanently deleted after
     *   approximately 30 days. You can restore a soft-deleted pool using
     *   `UndeleteWorkloadIdentityPool`. You cannot reuse the ID of a soft-deleted pool until it is
     *   permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or
     *   use existing tokens to access resources. If the pool is undeleted, existing tokens grant
     *   access again.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the pool.
     * * `STATE_UNSPECIFIED`: State unspecified.
     * * `ACTIVE`: The pool is active, and may be used in Google Cloud policies.
     * * `DELETED`: The pool is soft-deleted. Soft-deleted pools are permanently deleted after
     *   approximately 30 days. You can restore a soft-deleted pool using
     *   `UndeleteWorkloadIdentityPool`. You cannot reuse the ID of a soft-deleted pool until it is
     *   permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or
     *   use existing tokens to access resources. If the pool is undeleted, existing tokens grant
     *   access again.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The ID to use for the pool, which becomes the final component of the resource name. This
     * value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
     * `gcp-` is reserved for use by Google, and may not be specified.
     * 
     */
    @Import(name="workloadIdentityPoolId")
    private @Nullable Output<String> workloadIdentityPoolId;

    /**
     * @return The ID to use for the pool, which becomes the final component of the resource name. This
     * value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
     * `gcp-` is reserved for use by Google, and may not be specified.
     * 
     */
    public Optional<Output<String>> workloadIdentityPoolId() {
        return Optional.ofNullable(this.workloadIdentityPoolId);
    }

    private WorkloadIdentityPoolState() {}

    private WorkloadIdentityPoolState(WorkloadIdentityPoolState $) {
        this.description = $.description;
        this.disabled = $.disabled;
        this.displayName = $.displayName;
        this.inlineCertificateIssuanceConfig = $.inlineCertificateIssuanceConfig;
        this.inlineTrustConfig = $.inlineTrustConfig;
        this.mode = $.mode;
        this.name = $.name;
        this.project = $.project;
        this.state = $.state;
        this.workloadIdentityPoolId = $.workloadIdentityPoolId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkloadIdentityPoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkloadIdentityPoolState $;

        public Builder() {
            $ = new WorkloadIdentityPoolState();
        }

        public Builder(WorkloadIdentityPoolState defaults) {
            $ = new WorkloadIdentityPoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description of the pool. Cannot exceed 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the pool. Cannot exceed 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disabled Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
         * existing tokens to access resources. If the pool is re-enabled, existing tokens grant
         * access again.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
         * existing tokens to access resources. If the pool is re-enabled, existing tokens grant
         * access again.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param displayName A display name for the pool. Cannot exceed 32 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A display name for the pool. Cannot exceed 32 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param inlineCertificateIssuanceConfig Represents configuration for generating mutual TLS (mTLS) certificates for the identities
         * within this pool. Defines the Certificate Authority (CA) pool resources and configurations
         * required for issuance and rotation of mTLS workload certificates.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inlineCertificateIssuanceConfig(@Nullable Output<WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs> inlineCertificateIssuanceConfig) {
            $.inlineCertificateIssuanceConfig = inlineCertificateIssuanceConfig;
            return this;
        }

        /**
         * @param inlineCertificateIssuanceConfig Represents configuration for generating mutual TLS (mTLS) certificates for the identities
         * within this pool. Defines the Certificate Authority (CA) pool resources and configurations
         * required for issuance and rotation of mTLS workload certificates.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inlineCertificateIssuanceConfig(WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs inlineCertificateIssuanceConfig) {
            return inlineCertificateIssuanceConfig(Output.of(inlineCertificateIssuanceConfig));
        }

        /**
         * @param inlineTrustConfig Represents config to add additional trusted trust domains. Defines configuration for extending
         * trust to additional trust domains. By establishing trust with another domain, the current
         * domain will recognize and accept certificates issued by entities within the trusted domains.
         * Note that a trust domain automatically trusts itself, eliminating the need for explicit
         * configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inlineTrustConfig(@Nullable Output<WorkloadIdentityPoolInlineTrustConfigArgs> inlineTrustConfig) {
            $.inlineTrustConfig = inlineTrustConfig;
            return this;
        }

        /**
         * @param inlineTrustConfig Represents config to add additional trusted trust domains. Defines configuration for extending
         * trust to additional trust domains. By establishing trust with another domain, the current
         * domain will recognize and accept certificates issued by entities within the trusted domains.
         * Note that a trust domain automatically trusts itself, eliminating the need for explicit
         * configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inlineTrustConfig(WorkloadIdentityPoolInlineTrustConfigArgs inlineTrustConfig) {
            return inlineTrustConfig(Output.of(inlineTrustConfig));
        }

        /**
         * @param mode The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
         * are in `FEDERATION_ONLY` mode.
         * 
         * &gt; **Note** This field cannot be changed after the Workload Identity Pool is created. While
         * `pulumi preview` may show an update if you change this field&#39;s value, `pulumi up`
         * **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
         * To specify a different `mode`, please create a new Workload Identity Pool resource.
         * * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
         *   Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
         *   workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
         *   within the pool besides providers.
         * * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
         *   identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
         *   workload identifier. The subject identifier for all identities must conform to the following
         *   format: `ns/&lt;namespace&gt;/sa/&lt;workload_identifier&gt;`.
         *   `gcp.iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
         *   mode pools.
         *   Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
         * are in `FEDERATION_ONLY` mode.
         * 
         * &gt; **Note** This field cannot be changed after the Workload Identity Pool is created. While
         * `pulumi preview` may show an update if you change this field&#39;s value, `pulumi up`
         * **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
         * To specify a different `mode`, please create a new Workload Identity Pool resource.
         * * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
         *   Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
         *   workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
         *   within the pool besides providers.
         * * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
         *   identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
         *   workload identifier. The subject identifier for all identities must conform to the following
         *   format: `ns/&lt;namespace&gt;/sa/&lt;workload_identifier&gt;`.
         *   `gcp.iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
         *   mode pools.
         *   Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The resource name of the pool as
         * `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the pool as
         * `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param state The state of the pool.
         * * `STATE_UNSPECIFIED`: State unspecified.
         * * `ACTIVE`: The pool is active, and may be used in Google Cloud policies.
         * * `DELETED`: The pool is soft-deleted. Soft-deleted pools are permanently deleted after
         *   approximately 30 days. You can restore a soft-deleted pool using
         *   `UndeleteWorkloadIdentityPool`. You cannot reuse the ID of a soft-deleted pool until it is
         *   permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or
         *   use existing tokens to access resources. If the pool is undeleted, existing tokens grant
         *   access again.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the pool.
         * * `STATE_UNSPECIFIED`: State unspecified.
         * * `ACTIVE`: The pool is active, and may be used in Google Cloud policies.
         * * `DELETED`: The pool is soft-deleted. Soft-deleted pools are permanently deleted after
         *   approximately 30 days. You can restore a soft-deleted pool using
         *   `UndeleteWorkloadIdentityPool`. You cannot reuse the ID of a soft-deleted pool until it is
         *   permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or
         *   use existing tokens to access resources. If the pool is undeleted, existing tokens grant
         *   access again.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param workloadIdentityPoolId The ID to use for the pool, which becomes the final component of the resource name. This
         * value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
         * `gcp-` is reserved for use by Google, and may not be specified.
         * 
         * @return builder
         * 
         */
        public Builder workloadIdentityPoolId(@Nullable Output<String> workloadIdentityPoolId) {
            $.workloadIdentityPoolId = workloadIdentityPoolId;
            return this;
        }

        /**
         * @param workloadIdentityPoolId The ID to use for the pool, which becomes the final component of the resource name. This
         * value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
         * `gcp-` is reserved for use by Google, and may not be specified.
         * 
         * @return builder
         * 
         */
        public Builder workloadIdentityPoolId(String workloadIdentityPoolId) {
            return workloadIdentityPoolId(Output.of(workloadIdentityPoolId));
        }

        public WorkloadIdentityPoolState build() {
            return $;
        }
    }

}
