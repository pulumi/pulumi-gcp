// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class EnvironmentClientIpResolutionConfigHeaderIndexAlgorithm {
    /**
     * @return The index of the ip in the header. Positive indices 0, 1, 2, 3 chooses indices from the left (first ips). Negative indices -1, -2, -3 chooses indices from the right (last ips).
     * 
     */
    private Integer ipHeaderIndex;
    /**
     * @return The name of the header to extract the client ip from. We are currently only supporting the X-Forwarded-For header.
     * 
     */
    private String ipHeaderName;

    private EnvironmentClientIpResolutionConfigHeaderIndexAlgorithm() {}
    /**
     * @return The index of the ip in the header. Positive indices 0, 1, 2, 3 chooses indices from the left (first ips). Negative indices -1, -2, -3 chooses indices from the right (last ips).
     * 
     */
    public Integer ipHeaderIndex() {
        return this.ipHeaderIndex;
    }
    /**
     * @return The name of the header to extract the client ip from. We are currently only supporting the X-Forwarded-For header.
     * 
     */
    public String ipHeaderName() {
        return this.ipHeaderName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentClientIpResolutionConfigHeaderIndexAlgorithm defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer ipHeaderIndex;
        private String ipHeaderName;
        public Builder() {}
        public Builder(EnvironmentClientIpResolutionConfigHeaderIndexAlgorithm defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipHeaderIndex = defaults.ipHeaderIndex;
    	      this.ipHeaderName = defaults.ipHeaderName;
        }

        @CustomType.Setter
        public Builder ipHeaderIndex(Integer ipHeaderIndex) {
            if (ipHeaderIndex == null) {
              throw new MissingRequiredPropertyException("EnvironmentClientIpResolutionConfigHeaderIndexAlgorithm", "ipHeaderIndex");
            }
            this.ipHeaderIndex = ipHeaderIndex;
            return this;
        }
        @CustomType.Setter
        public Builder ipHeaderName(String ipHeaderName) {
            if (ipHeaderName == null) {
              throw new MissingRequiredPropertyException("EnvironmentClientIpResolutionConfigHeaderIndexAlgorithm", "ipHeaderName");
            }
            this.ipHeaderName = ipHeaderName;
            return this;
        }
        public EnvironmentClientIpResolutionConfigHeaderIndexAlgorithm build() {
            final var _resultValue = new EnvironmentClientIpResolutionConfigHeaderIndexAlgorithm();
            _resultValue.ipHeaderIndex = ipHeaderIndex;
            _resultValue.ipHeaderName = ipHeaderName;
            return _resultValue;
        }
    }
}
