// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInstanceGuestAttributesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetInstanceGuestAttributesArgs Empty = new GetInstanceGuestAttributesArgs();

    /**
     * The name or selfLink of the instance.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name or selfLink of the instance.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If `selfLink` is provided, this value is ignored.  If neither `selfLink`
     * nor `project` are provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If `selfLink` is provided, this value is ignored.  If neither `selfLink`
     * nor `project` are provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Path to query for the guest attributes. Consists of
     * `namespace` name for the attributes followed with a `/`.
     * 
     */
    @Import(name="queryPath")
    private @Nullable Output<String> queryPath;

    /**
     * @return Path to query for the guest attributes. Consists of
     * `namespace` name for the attributes followed with a `/`.
     * 
     */
    public Optional<Output<String>> queryPath() {
        return Optional.ofNullable(this.queryPath);
    }

    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Key of a variable to get the value of. Consists of
     * `namespace` name and `key` name for the variable separated by a `/`.
     * 
     */
    @Import(name="variableKey")
    private @Nullable Output<String> variableKey;

    /**
     * @return Key of a variable to get the value of. Consists of
     * `namespace` name and `key` name for the variable separated by a `/`.
     * 
     */
    public Optional<Output<String>> variableKey() {
        return Optional.ofNullable(this.variableKey);
    }

    /**
     * The zone of the instance. If `selfLink` is provided, this
     * value is ignored.  If neither `selfLink` nor `zone` are provided, the
     * provider zone is used.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The zone of the instance. If `selfLink` is provided, this
     * value is ignored.  If neither `selfLink` nor `zone` are provided, the
     * provider zone is used.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private GetInstanceGuestAttributesArgs() {}

    private GetInstanceGuestAttributesArgs(GetInstanceGuestAttributesArgs $) {
        this.name = $.name;
        this.project = $.project;
        this.queryPath = $.queryPath;
        this.region = $.region;
        this.variableKey = $.variableKey;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstanceGuestAttributesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstanceGuestAttributesArgs $;

        public Builder() {
            $ = new GetInstanceGuestAttributesArgs();
        }

        public Builder(GetInstanceGuestAttributesArgs defaults) {
            $ = new GetInstanceGuestAttributesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name or selfLink of the instance.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name or selfLink of the instance.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If `selfLink` is provided, this value is ignored.  If neither `selfLink`
         * nor `project` are provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If `selfLink` is provided, this value is ignored.  If neither `selfLink`
         * nor `project` are provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param queryPath Path to query for the guest attributes. Consists of
         * `namespace` name for the attributes followed with a `/`.
         * 
         * @return builder
         * 
         */
        public Builder queryPath(@Nullable Output<String> queryPath) {
            $.queryPath = queryPath;
            return this;
        }

        /**
         * @param queryPath Path to query for the guest attributes. Consists of
         * `namespace` name for the attributes followed with a `/`.
         * 
         * @return builder
         * 
         */
        public Builder queryPath(String queryPath) {
            return queryPath(Output.of(queryPath));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param variableKey Key of a variable to get the value of. Consists of
         * `namespace` name and `key` name for the variable separated by a `/`.
         * 
         * @return builder
         * 
         */
        public Builder variableKey(@Nullable Output<String> variableKey) {
            $.variableKey = variableKey;
            return this;
        }

        /**
         * @param variableKey Key of a variable to get the value of. Consists of
         * `namespace` name and `key` name for the variable separated by a `/`.
         * 
         * @return builder
         * 
         */
        public Builder variableKey(String variableKey) {
            return variableKey(Output.of(variableKey));
        }

        /**
         * @param zone The zone of the instance. If `selfLink` is provided, this
         * value is ignored.  If neither `selfLink` nor `zone` are provided, the
         * provider zone is used.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The zone of the instance. If `selfLink` is provided, this
         * value is ignored.  If neither `selfLink` nor `zone` are provided, the
         * provider zone is used.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public GetInstanceGuestAttributesArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetInstanceGuestAttributesArgs", "name");
            }
            return $;
        }
    }

}
