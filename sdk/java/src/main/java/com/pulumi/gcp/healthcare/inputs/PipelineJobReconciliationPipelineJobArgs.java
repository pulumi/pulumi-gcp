// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.healthcare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.healthcare.inputs.PipelineJobReconciliationPipelineJobMergeConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineJobReconciliationPipelineJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineJobReconciliationPipelineJobArgs Empty = new PipelineJobReconciliationPipelineJobArgs();

    /**
     * The harmonized FHIR store to write harmonized FHIR resources to,
     * in the format of: project/{projectID}/locations/{locationID}/datasets/{datasetName}/fhirStores/{id}
     * 
     */
    @Import(name="fhirStoreDestination")
    private @Nullable Output<String> fhirStoreDestination;

    /**
     * @return The harmonized FHIR store to write harmonized FHIR resources to,
     * in the format of: project/{projectID}/locations/{locationID}/datasets/{datasetName}/fhirStores/{id}
     * 
     */
    public Optional<Output<String>> fhirStoreDestination() {
        return Optional.ofNullable(this.fhirStoreDestination);
    }

    /**
     * Specifies the top level directory of the matching configs used
     * in all mapping pipelines, which extract properties for resources
     * to be matched on.
     * Example: gs://{bucket-id}/{path/to/matching/configs}
     * 
     */
    @Import(name="matchingUriPrefix", required=true)
    private Output<String> matchingUriPrefix;

    /**
     * @return Specifies the top level directory of the matching configs used
     * in all mapping pipelines, which extract properties for resources
     * to be matched on.
     * Example: gs://{bucket-id}/{path/to/matching/configs}
     * 
     */
    public Output<String> matchingUriPrefix() {
        return this.matchingUriPrefix;
    }

    /**
     * Specifies the location of the reconciliation configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="mergeConfig", required=true)
    private Output<PipelineJobReconciliationPipelineJobMergeConfigArgs> mergeConfig;

    /**
     * @return Specifies the location of the reconciliation configuration.
     * Structure is documented below.
     * 
     */
    public Output<PipelineJobReconciliationPipelineJobMergeConfigArgs> mergeConfig() {
        return this.mergeConfig;
    }

    private PipelineJobReconciliationPipelineJobArgs() {}

    private PipelineJobReconciliationPipelineJobArgs(PipelineJobReconciliationPipelineJobArgs $) {
        this.fhirStoreDestination = $.fhirStoreDestination;
        this.matchingUriPrefix = $.matchingUriPrefix;
        this.mergeConfig = $.mergeConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineJobReconciliationPipelineJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineJobReconciliationPipelineJobArgs $;

        public Builder() {
            $ = new PipelineJobReconciliationPipelineJobArgs();
        }

        public Builder(PipelineJobReconciliationPipelineJobArgs defaults) {
            $ = new PipelineJobReconciliationPipelineJobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fhirStoreDestination The harmonized FHIR store to write harmonized FHIR resources to,
         * in the format of: project/{projectID}/locations/{locationID}/datasets/{datasetName}/fhirStores/{id}
         * 
         * @return builder
         * 
         */
        public Builder fhirStoreDestination(@Nullable Output<String> fhirStoreDestination) {
            $.fhirStoreDestination = fhirStoreDestination;
            return this;
        }

        /**
         * @param fhirStoreDestination The harmonized FHIR store to write harmonized FHIR resources to,
         * in the format of: project/{projectID}/locations/{locationID}/datasets/{datasetName}/fhirStores/{id}
         * 
         * @return builder
         * 
         */
        public Builder fhirStoreDestination(String fhirStoreDestination) {
            return fhirStoreDestination(Output.of(fhirStoreDestination));
        }

        /**
         * @param matchingUriPrefix Specifies the top level directory of the matching configs used
         * in all mapping pipelines, which extract properties for resources
         * to be matched on.
         * Example: gs://{bucket-id}/{path/to/matching/configs}
         * 
         * @return builder
         * 
         */
        public Builder matchingUriPrefix(Output<String> matchingUriPrefix) {
            $.matchingUriPrefix = matchingUriPrefix;
            return this;
        }

        /**
         * @param matchingUriPrefix Specifies the top level directory of the matching configs used
         * in all mapping pipelines, which extract properties for resources
         * to be matched on.
         * Example: gs://{bucket-id}/{path/to/matching/configs}
         * 
         * @return builder
         * 
         */
        public Builder matchingUriPrefix(String matchingUriPrefix) {
            return matchingUriPrefix(Output.of(matchingUriPrefix));
        }

        /**
         * @param mergeConfig Specifies the location of the reconciliation configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mergeConfig(Output<PipelineJobReconciliationPipelineJobMergeConfigArgs> mergeConfig) {
            $.mergeConfig = mergeConfig;
            return this;
        }

        /**
         * @param mergeConfig Specifies the location of the reconciliation configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mergeConfig(PipelineJobReconciliationPipelineJobMergeConfigArgs mergeConfig) {
            return mergeConfig(Output.of(mergeConfig));
        }

        public PipelineJobReconciliationPipelineJobArgs build() {
            if ($.matchingUriPrefix == null) {
                throw new MissingRequiredPropertyException("PipelineJobReconciliationPipelineJobArgs", "matchingUriPrefix");
            }
            if ($.mergeConfig == null) {
                throw new MissingRequiredPropertyException("PipelineJobReconciliationPipelineJobArgs", "mergeConfig");
            }
            return $;
        }
    }

}
