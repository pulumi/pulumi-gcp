// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRule;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class URLMapPathMatcherPathRuleCustomErrorResponsePolicy {
    /**
     * @return Specifies rules for returning error responses.
     * In a given policy, if you specify rules for both a range of error codes as well as rules for specific error codes then rules with specific error codes have a higher priority.
     * For example, assume that you configure a rule for 401 (Un-authorized) code, and another for all 4 series error codes (4XX).
     * If the backend service returns a 401, then the rule for 401 will be applied. However if the backend service returns a 403, the rule for 4xx takes effect.
     * Structure is documented below.
     * 
     */
    private @Nullable List<URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRule> errorResponseRules;
    /**
     * @return The full or partial URL to the BackendBucket resource that contains the custom error content. Examples are:
     * https://www.googleapis.com/compute/v1/projects/project/global/backendBuckets/myBackendBucket
     * compute/v1/projects/project/global/backendBuckets/myBackendBucket
     * global/backendBuckets/myBackendBucket
     * If errorService is not specified at lower levels like pathMatcher, pathRule and routeRule, an errorService specified at a higher level in the UrlMap will be used. If UrlMap.defaultCustomErrorResponsePolicy contains one or more errorResponseRules[], it must specify errorService.
     * If load balancer cannot reach the backendBucket, a simple Not Found Error will be returned, with the original response code (or overrideResponseCode if configured).
     * 
     */
    private @Nullable String errorService;

    private URLMapPathMatcherPathRuleCustomErrorResponsePolicy() {}
    /**
     * @return Specifies rules for returning error responses.
     * In a given policy, if you specify rules for both a range of error codes as well as rules for specific error codes then rules with specific error codes have a higher priority.
     * For example, assume that you configure a rule for 401 (Un-authorized) code, and another for all 4 series error codes (4XX).
     * If the backend service returns a 401, then the rule for 401 will be applied. However if the backend service returns a 403, the rule for 4xx takes effect.
     * Structure is documented below.
     * 
     */
    public List<URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRule> errorResponseRules() {
        return this.errorResponseRules == null ? List.of() : this.errorResponseRules;
    }
    /**
     * @return The full or partial URL to the BackendBucket resource that contains the custom error content. Examples are:
     * https://www.googleapis.com/compute/v1/projects/project/global/backendBuckets/myBackendBucket
     * compute/v1/projects/project/global/backendBuckets/myBackendBucket
     * global/backendBuckets/myBackendBucket
     * If errorService is not specified at lower levels like pathMatcher, pathRule and routeRule, an errorService specified at a higher level in the UrlMap will be used. If UrlMap.defaultCustomErrorResponsePolicy contains one or more errorResponseRules[], it must specify errorService.
     * If load balancer cannot reach the backendBucket, a simple Not Found Error will be returned, with the original response code (or overrideResponseCode if configured).
     * 
     */
    public Optional<String> errorService() {
        return Optional.ofNullable(this.errorService);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(URLMapPathMatcherPathRuleCustomErrorResponsePolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRule> errorResponseRules;
        private @Nullable String errorService;
        public Builder() {}
        public Builder(URLMapPathMatcherPathRuleCustomErrorResponsePolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.errorResponseRules = defaults.errorResponseRules;
    	      this.errorService = defaults.errorService;
        }

        @CustomType.Setter
        public Builder errorResponseRules(@Nullable List<URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRule> errorResponseRules) {

            this.errorResponseRules = errorResponseRules;
            return this;
        }
        public Builder errorResponseRules(URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRule... errorResponseRules) {
            return errorResponseRules(List.of(errorResponseRules));
        }
        @CustomType.Setter
        public Builder errorService(@Nullable String errorService) {

            this.errorService = errorService;
            return this;
        }
        public URLMapPathMatcherPathRuleCustomErrorResponsePolicy build() {
            final var _resultValue = new URLMapPathMatcherPathRuleCustomErrorResponsePolicy();
            _resultValue.errorResponseRules = errorResponseRules;
            _resultValue.errorService = errorService;
            return _resultValue;
        }
    }
}
