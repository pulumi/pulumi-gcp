// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.applicationintegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthConfigClientCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthConfigClientCertificateArgs Empty = new AuthConfigClientCertificateArgs();

    /**
     * The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
     * 
     */
    @Import(name="encryptedPrivateKey", required=true)
    private Output<String> encryptedPrivateKey;

    /**
     * @return The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
     * 
     */
    public Output<String> encryptedPrivateKey() {
        return this.encryptedPrivateKey;
    }

    /**
     * &#39;passphrase&#39; should be left unset if private key is not encrypted.
     * Note that &#39;passphrase&#39; is not the password for web server, but an extra layer of security to protected private key.
     * 
     */
    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    /**
     * @return &#39;passphrase&#39; should be left unset if private key is not encrypted.
     * Note that &#39;passphrase&#39; is not the password for web server, but an extra layer of security to protected private key.
     * 
     */
    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    /**
     * The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
     * 
     */
    @Import(name="sslCertificate", required=true)
    private Output<String> sslCertificate;

    /**
     * @return The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
     * 
     */
    public Output<String> sslCertificate() {
        return this.sslCertificate;
    }

    private AuthConfigClientCertificateArgs() {}

    private AuthConfigClientCertificateArgs(AuthConfigClientCertificateArgs $) {
        this.encryptedPrivateKey = $.encryptedPrivateKey;
        this.passphrase = $.passphrase;
        this.sslCertificate = $.sslCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthConfigClientCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthConfigClientCertificateArgs $;

        public Builder() {
            $ = new AuthConfigClientCertificateArgs();
        }

        public Builder(AuthConfigClientCertificateArgs defaults) {
            $ = new AuthConfigClientCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param encryptedPrivateKey The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
         * 
         * @return builder
         * 
         */
        public Builder encryptedPrivateKey(Output<String> encryptedPrivateKey) {
            $.encryptedPrivateKey = encryptedPrivateKey;
            return this;
        }

        /**
         * @param encryptedPrivateKey The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
         * 
         * @return builder
         * 
         */
        public Builder encryptedPrivateKey(String encryptedPrivateKey) {
            return encryptedPrivateKey(Output.of(encryptedPrivateKey));
        }

        /**
         * @param passphrase &#39;passphrase&#39; should be left unset if private key is not encrypted.
         * Note that &#39;passphrase&#39; is not the password for web server, but an extra layer of security to protected private key.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        /**
         * @param passphrase &#39;passphrase&#39; should be left unset if private key is not encrypted.
         * Note that &#39;passphrase&#39; is not the password for web server, but an extra layer of security to protected private key.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        /**
         * @param sslCertificate The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
         * 
         * @return builder
         * 
         */
        public Builder sslCertificate(Output<String> sslCertificate) {
            $.sslCertificate = sslCertificate;
            return this;
        }

        /**
         * @param sslCertificate The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
         * 
         * @return builder
         * 
         */
        public Builder sslCertificate(String sslCertificate) {
            return sslCertificate(Output.of(sslCertificate));
        }

        public AuthConfigClientCertificateArgs build() {
            if ($.encryptedPrivateKey == null) {
                throw new MissingRequiredPropertyException("AuthConfigClientCertificateArgs", "encryptedPrivateKey");
            }
            if ($.sslCertificate == null) {
                throw new MissingRequiredPropertyException("AuthConfigClientCertificateArgs", "sslCertificate");
            }
            return $;
        }
    }

}
