// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AlertPolicyConditionConditionAbsentTrigger {
    /**
     * @return The absolute number of time series
     * that must fail the predicate for the
     * condition to be triggered.
     * 
     */
    private final @Nullable Integer count;
    /**
     * @return The percentage of time series that
     * must fail the predicate for the
     * condition to be triggered.
     * 
     */
    private final @Nullable Double percent;

    @CustomType.Constructor
    private AlertPolicyConditionConditionAbsentTrigger(
        @CustomType.Parameter("count") @Nullable Integer count,
        @CustomType.Parameter("percent") @Nullable Double percent) {
        this.count = count;
        this.percent = percent;
    }

    /**
     * @return The absolute number of time series
     * that must fail the predicate for the
     * condition to be triggered.
     * 
     */
    public Optional<Integer> count() {
        return Optional.ofNullable(this.count);
    }
    /**
     * @return The percentage of time series that
     * must fail the predicate for the
     * condition to be triggered.
     * 
     */
    public Optional<Double> percent() {
        return Optional.ofNullable(this.percent);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertPolicyConditionConditionAbsentTrigger defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer count;
        private @Nullable Double percent;

        public Builder() {
    	      // Empty
        }

        public Builder(AlertPolicyConditionConditionAbsentTrigger defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.percent = defaults.percent;
        }

        public Builder count(@Nullable Integer count) {
            this.count = count;
            return this;
        }
        public Builder percent(@Nullable Double percent) {
            this.percent = percent;
            return this;
        }        public AlertPolicyConditionConditionAbsentTrigger build() {
            return new AlertPolicyConditionConditionAbsentTrigger(count, percent);
        }
    }
}
