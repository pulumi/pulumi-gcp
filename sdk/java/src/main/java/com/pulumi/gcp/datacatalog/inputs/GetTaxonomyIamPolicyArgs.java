// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datacatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTaxonomyIamPolicyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTaxonomyIamPolicyArgs Empty = new GetTaxonomyIamPolicyArgs();

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Taxonomy location region.
     * Used to find the parent resource to bind the IAM policy to. If not specified,
     * the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
     * region is specified, it is taken from the provider configuration.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Taxonomy location region.
     * Used to find the parent resource to bind the IAM policy to. If not specified,
     * the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
     * region is specified, it is taken from the provider configuration.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="taxonomy", required=true)
    private Output<String> taxonomy;

    /**
     * @return Used to find the parent resource to bind the IAM policy to
     * 
     */
    public Output<String> taxonomy() {
        return this.taxonomy;
    }

    private GetTaxonomyIamPolicyArgs() {}

    private GetTaxonomyIamPolicyArgs(GetTaxonomyIamPolicyArgs $) {
        this.project = $.project;
        this.region = $.region;
        this.taxonomy = $.taxonomy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTaxonomyIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTaxonomyIamPolicyArgs $;

        public Builder() {
            $ = new GetTaxonomyIamPolicyArgs();
        }

        public Builder(GetTaxonomyIamPolicyArgs defaults) {
            $ = new GetTaxonomyIamPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region Taxonomy location region.
         * Used to find the parent resource to bind the IAM policy to. If not specified,
         * the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
         * region is specified, it is taken from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Taxonomy location region.
         * Used to find the parent resource to bind the IAM policy to. If not specified,
         * the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
         * region is specified, it is taken from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param taxonomy Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder taxonomy(Output<String> taxonomy) {
            $.taxonomy = taxonomy;
            return this;
        }

        /**
         * @param taxonomy Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder taxonomy(String taxonomy) {
            return taxonomy(Output.of(taxonomy));
        }

        public GetTaxonomyIamPolicyArgs build() {
            if ($.taxonomy == null) {
                throw new MissingRequiredPropertyException("GetTaxonomyIamPolicyArgs", "taxonomy");
            }
            return $;
        }
    }

}
