// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuildv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudbuildv2.inputs.ConnectionGitlabConfigAuthorizerCredentialArgs;
import com.pulumi.gcp.cloudbuildv2.inputs.ConnectionGitlabConfigReadAuthorizerCredentialArgs;
import com.pulumi.gcp.cloudbuildv2.inputs.ConnectionGitlabConfigServiceDirectoryConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionGitlabConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionGitlabConfigArgs Empty = new ConnectionGitlabConfigArgs();

    /**
     * Required. A GitLab personal access token with the `api` scope access.
     * 
     */
    @Import(name="authorizerCredential", required=true)
    private Output<ConnectionGitlabConfigAuthorizerCredentialArgs> authorizerCredential;

    /**
     * @return Required. A GitLab personal access token with the `api` scope access.
     * 
     */
    public Output<ConnectionGitlabConfigAuthorizerCredentialArgs> authorizerCredential() {
        return this.authorizerCredential;
    }

    /**
     * The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
     * 
     */
    @Import(name="hostUri")
    private @Nullable Output<String> hostUri;

    /**
     * @return The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
     * 
     */
    public Optional<Output<String>> hostUri() {
        return Optional.ofNullable(this.hostUri);
    }

    /**
     * Required. A GitLab personal access token with the minimum `read_api` scope access.
     * 
     */
    @Import(name="readAuthorizerCredential", required=true)
    private Output<ConnectionGitlabConfigReadAuthorizerCredentialArgs> readAuthorizerCredential;

    /**
     * @return Required. A GitLab personal access token with the minimum `read_api` scope access.
     * 
     */
    public Output<ConnectionGitlabConfigReadAuthorizerCredentialArgs> readAuthorizerCredential() {
        return this.readAuthorizerCredential;
    }

    /**
     * Output only. Version of the GitLab Enterprise server running on the `host_uri`.
     * 
     */
    @Import(name="serverVersion")
    private @Nullable Output<String> serverVersion;

    /**
     * @return Output only. Version of the GitLab Enterprise server running on the `host_uri`.
     * 
     */
    public Optional<Output<String>> serverVersion() {
        return Optional.ofNullable(this.serverVersion);
    }

    /**
     * Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
     * 
     */
    @Import(name="serviceDirectoryConfig")
    private @Nullable Output<ConnectionGitlabConfigServiceDirectoryConfigArgs> serviceDirectoryConfig;

    /**
     * @return Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
     * 
     */
    public Optional<Output<ConnectionGitlabConfigServiceDirectoryConfigArgs>> serviceDirectoryConfig() {
        return Optional.ofNullable(this.serviceDirectoryConfig);
    }

    /**
     * SSL certificate to use for requests to GitLab Enterprise.
     * 
     */
    @Import(name="sslCa")
    private @Nullable Output<String> sslCa;

    /**
     * @return SSL certificate to use for requests to GitLab Enterprise.
     * 
     */
    public Optional<Output<String>> sslCa() {
        return Optional.ofNullable(this.sslCa);
    }

    /**
     * Required. Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    @Import(name="webhookSecretSecretVersion", required=true)
    private Output<String> webhookSecretSecretVersion;

    /**
     * @return Required. Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    public Output<String> webhookSecretSecretVersion() {
        return this.webhookSecretSecretVersion;
    }

    private ConnectionGitlabConfigArgs() {}

    private ConnectionGitlabConfigArgs(ConnectionGitlabConfigArgs $) {
        this.authorizerCredential = $.authorizerCredential;
        this.hostUri = $.hostUri;
        this.readAuthorizerCredential = $.readAuthorizerCredential;
        this.serverVersion = $.serverVersion;
        this.serviceDirectoryConfig = $.serviceDirectoryConfig;
        this.sslCa = $.sslCa;
        this.webhookSecretSecretVersion = $.webhookSecretSecretVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionGitlabConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionGitlabConfigArgs $;

        public Builder() {
            $ = new ConnectionGitlabConfigArgs();
        }

        public Builder(ConnectionGitlabConfigArgs defaults) {
            $ = new ConnectionGitlabConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizerCredential Required. A GitLab personal access token with the `api` scope access.
         * 
         * @return builder
         * 
         */
        public Builder authorizerCredential(Output<ConnectionGitlabConfigAuthorizerCredentialArgs> authorizerCredential) {
            $.authorizerCredential = authorizerCredential;
            return this;
        }

        /**
         * @param authorizerCredential Required. A GitLab personal access token with the `api` scope access.
         * 
         * @return builder
         * 
         */
        public Builder authorizerCredential(ConnectionGitlabConfigAuthorizerCredentialArgs authorizerCredential) {
            return authorizerCredential(Output.of(authorizerCredential));
        }

        /**
         * @param hostUri The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
         * 
         * @return builder
         * 
         */
        public Builder hostUri(@Nullable Output<String> hostUri) {
            $.hostUri = hostUri;
            return this;
        }

        /**
         * @param hostUri The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
         * 
         * @return builder
         * 
         */
        public Builder hostUri(String hostUri) {
            return hostUri(Output.of(hostUri));
        }

        /**
         * @param readAuthorizerCredential Required. A GitLab personal access token with the minimum `read_api` scope access.
         * 
         * @return builder
         * 
         */
        public Builder readAuthorizerCredential(Output<ConnectionGitlabConfigReadAuthorizerCredentialArgs> readAuthorizerCredential) {
            $.readAuthorizerCredential = readAuthorizerCredential;
            return this;
        }

        /**
         * @param readAuthorizerCredential Required. A GitLab personal access token with the minimum `read_api` scope access.
         * 
         * @return builder
         * 
         */
        public Builder readAuthorizerCredential(ConnectionGitlabConfigReadAuthorizerCredentialArgs readAuthorizerCredential) {
            return readAuthorizerCredential(Output.of(readAuthorizerCredential));
        }

        /**
         * @param serverVersion Output only. Version of the GitLab Enterprise server running on the `host_uri`.
         * 
         * @return builder
         * 
         */
        public Builder serverVersion(@Nullable Output<String> serverVersion) {
            $.serverVersion = serverVersion;
            return this;
        }

        /**
         * @param serverVersion Output only. Version of the GitLab Enterprise server running on the `host_uri`.
         * 
         * @return builder
         * 
         */
        public Builder serverVersion(String serverVersion) {
            return serverVersion(Output.of(serverVersion));
        }

        /**
         * @param serviceDirectoryConfig Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryConfig(@Nullable Output<ConnectionGitlabConfigServiceDirectoryConfigArgs> serviceDirectoryConfig) {
            $.serviceDirectoryConfig = serviceDirectoryConfig;
            return this;
        }

        /**
         * @param serviceDirectoryConfig Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryConfig(ConnectionGitlabConfigServiceDirectoryConfigArgs serviceDirectoryConfig) {
            return serviceDirectoryConfig(Output.of(serviceDirectoryConfig));
        }

        /**
         * @param sslCa SSL certificate to use for requests to GitLab Enterprise.
         * 
         * @return builder
         * 
         */
        public Builder sslCa(@Nullable Output<String> sslCa) {
            $.sslCa = sslCa;
            return this;
        }

        /**
         * @param sslCa SSL certificate to use for requests to GitLab Enterprise.
         * 
         * @return builder
         * 
         */
        public Builder sslCa(String sslCa) {
            return sslCa(Output.of(sslCa));
        }

        /**
         * @param webhookSecretSecretVersion Required. Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecretSecretVersion(Output<String> webhookSecretSecretVersion) {
            $.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return this;
        }

        /**
         * @param webhookSecretSecretVersion Required. Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecretSecretVersion(String webhookSecretSecretVersion) {
            return webhookSecretSecretVersion(Output.of(webhookSecretSecretVersion));
        }

        public ConnectionGitlabConfigArgs build() {
            $.authorizerCredential = Objects.requireNonNull($.authorizerCredential, "expected parameter 'authorizerCredential' to be non-null");
            $.readAuthorizerCredential = Objects.requireNonNull($.readAuthorizerCredential, "expected parameter 'readAuthorizerCredential' to be non-null");
            $.webhookSecretSecretVersion = Objects.requireNonNull($.webhookSecretSecretVersion, "expected parameter 'webhookSecretSecretVersion' to be non-null");
            return $;
        }
    }

}
