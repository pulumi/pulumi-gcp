// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs Empty = new AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs();

    /**
     * Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
     * * LATEST_STATS: Choose the later one statistics generated by either most recent snapshot analysis or previous import features analysis. If non of them exists, skip anomaly detection and only generate a statistics.
     * * MOST_RECENT_SNAPSHOT_STATS: Use the statistics generated by the most recent snapshot analysis if exists.
     * * PREVIOUS_IMPORT_FEATURES_STATS: Use the statistics generated by the previous import features analysis if exists.
     * 
     */
    @Import(name="anomalyDetectionBaseline")
    private @Nullable Output<String> anomalyDetectionBaseline;

    /**
     * @return Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
     * * LATEST_STATS: Choose the later one statistics generated by either most recent snapshot analysis or previous import features analysis. If non of them exists, skip anomaly detection and only generate a statistics.
     * * MOST_RECENT_SNAPSHOT_STATS: Use the statistics generated by the most recent snapshot analysis if exists.
     * * PREVIOUS_IMPORT_FEATURES_STATS: Use the statistics generated by the previous import features analysis if exists.
     * 
     */
    public Optional<Output<String>> anomalyDetectionBaseline() {
        return Optional.ofNullable(this.anomalyDetectionBaseline);
    }

    /**
     * Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
     * * DEFAULT: The default behavior of whether to enable the monitoring. EntityType-level config: disabled.
     * * ENABLED: Explicitly enables import features analysis. EntityType-level config: by default enables import features analysis for all Features under it.
     * * DISABLED: Explicitly disables import features analysis. EntityType-level config: by default disables import features analysis for all Features under it.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
     * * DEFAULT: The default behavior of whether to enable the monitoring. EntityType-level config: disabled.
     * * ENABLED: Explicitly enables import features analysis. EntityType-level config: by default enables import features analysis for all Features under it.
     * * DISABLED: Explicitly disables import features analysis. EntityType-level config: by default disables import features analysis for all Features under it.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs() {}

    private AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs(AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs $) {
        this.anomalyDetectionBaseline = $.anomalyDetectionBaseline;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs $;

        public Builder() {
            $ = new AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs();
        }

        public Builder(AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs defaults) {
            $ = new AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param anomalyDetectionBaseline Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
         * * LATEST_STATS: Choose the later one statistics generated by either most recent snapshot analysis or previous import features analysis. If non of them exists, skip anomaly detection and only generate a statistics.
         * * MOST_RECENT_SNAPSHOT_STATS: Use the statistics generated by the most recent snapshot analysis if exists.
         * * PREVIOUS_IMPORT_FEATURES_STATS: Use the statistics generated by the previous import features analysis if exists.
         * 
         * @return builder
         * 
         */
        public Builder anomalyDetectionBaseline(@Nullable Output<String> anomalyDetectionBaseline) {
            $.anomalyDetectionBaseline = anomalyDetectionBaseline;
            return this;
        }

        /**
         * @param anomalyDetectionBaseline Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
         * * LATEST_STATS: Choose the later one statistics generated by either most recent snapshot analysis or previous import features analysis. If non of them exists, skip anomaly detection and only generate a statistics.
         * * MOST_RECENT_SNAPSHOT_STATS: Use the statistics generated by the most recent snapshot analysis if exists.
         * * PREVIOUS_IMPORT_FEATURES_STATS: Use the statistics generated by the previous import features analysis if exists.
         * 
         * @return builder
         * 
         */
        public Builder anomalyDetectionBaseline(String anomalyDetectionBaseline) {
            return anomalyDetectionBaseline(Output.of(anomalyDetectionBaseline));
        }

        /**
         * @param state Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
         * * DEFAULT: The default behavior of whether to enable the monitoring. EntityType-level config: disabled.
         * * ENABLED: Explicitly enables import features analysis. EntityType-level config: by default enables import features analysis for all Features under it.
         * * DISABLED: Explicitly disables import features analysis. EntityType-level config: by default disables import features analysis for all Features under it.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
         * * DEFAULT: The default behavior of whether to enable the monitoring. EntityType-level config: disabled.
         * * ENABLED: Explicitly enables import features analysis. EntityType-level config: by default enables import features analysis for all Features under it.
         * * DISABLED: Explicitly disables import features analysis. EntityType-level config: by default disables import features analysis for all Features under it.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs build() {
            return $;
        }
    }

}
