// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PublicDelegatedPrefixPublicDelegatedSubPrefixArgs extends com.pulumi.resources.ResourceArgs {

    public static final PublicDelegatedPrefixPublicDelegatedSubPrefixArgs Empty = new PublicDelegatedPrefixPublicDelegatedSubPrefixArgs();

    /**
     * The allocatable prefix length supported by this public delegated prefix. This field is optional and cannot be set for prefixes in DELEGATION mode. It cannot be set for IPv4 prefixes either, and it always defaults to 32.
     * 
     */
    @Import(name="allocatablePrefixLength")
    private @Nullable Output<Integer> allocatablePrefixLength;

    /**
     * @return The allocatable prefix length supported by this public delegated prefix. This field is optional and cannot be set for prefixes in DELEGATION mode. It cannot be set for IPv4 prefixes either, and it always defaults to 32.
     * 
     */
    public Optional<Output<Integer>> allocatablePrefixLength() {
        return Optional.ofNullable(this.allocatablePrefixLength);
    }

    /**
     * Name of the project scoping this PublicDelegatedSubPrefix.
     * 
     */
    @Import(name="delegateeProject")
    private @Nullable Output<String> delegateeProject;

    /**
     * @return Name of the project scoping this PublicDelegatedSubPrefix.
     * 
     */
    public Optional<Output<String>> delegateeProject() {
        return Optional.ofNullable(this.delegateeProject);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The IP address range, in CIDR format, represented by this public delegated prefix.
     * 
     */
    @Import(name="ipCidrRange")
    private @Nullable Output<String> ipCidrRange;

    /**
     * @return The IP address range, in CIDR format, represented by this public delegated prefix.
     * 
     */
    public Optional<Output<String>> ipCidrRange() {
        return Optional.ofNullable(this.ipCidrRange);
    }

    /**
     * Whether the sub prefix is delegated for address creation.
     * 
     */
    @Import(name="isAddress")
    private @Nullable Output<Boolean> isAddress;

    /**
     * @return Whether the sub prefix is delegated for address creation.
     * 
     */
    public Optional<Output<Boolean>> isAddress() {
        return Optional.ofNullable(this.isAddress);
    }

    /**
     * Specifies the mode of this IPv6 PDP. MODE must be one of: DELEGATION,
     * EXTERNAL_IPV6_FORWARDING_RULE_CREATION and EXTERNAL_IPV6_SUBNETWORK_CREATION.
     * Possible values are: `DELEGATION`, `EXTERNAL_IPV6_FORWARDING_RULE_CREATION`, `EXTERNAL_IPV6_SUBNETWORK_CREATION`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Specifies the mode of this IPv6 PDP. MODE must be one of: DELEGATION,
     * EXTERNAL_IPV6_FORWARDING_RULE_CREATION and EXTERNAL_IPV6_SUBNETWORK_CREATION.
     * Possible values are: `DELEGATION`, `EXTERNAL_IPV6_FORWARDING_RULE_CREATION`, `EXTERNAL_IPV6_SUBNETWORK_CREATION`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Name of the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?`
     * which means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?`
     * which means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A region where the prefix will reside.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return A region where the prefix will reside.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The status of the sub public delegated prefix.
     * Possible values are: `INITIALIZING`, `READY_TO_ANNOUNCE`, `ANNOUNCED`, `DELETING`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the sub public delegated prefix.
     * Possible values are: `INITIALIZING`, `READY_TO_ANNOUNCE`, `ANNOUNCED`, `DELETING`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private PublicDelegatedPrefixPublicDelegatedSubPrefixArgs() {}

    private PublicDelegatedPrefixPublicDelegatedSubPrefixArgs(PublicDelegatedPrefixPublicDelegatedSubPrefixArgs $) {
        this.allocatablePrefixLength = $.allocatablePrefixLength;
        this.delegateeProject = $.delegateeProject;
        this.description = $.description;
        this.ipCidrRange = $.ipCidrRange;
        this.isAddress = $.isAddress;
        this.mode = $.mode;
        this.name = $.name;
        this.region = $.region;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PublicDelegatedPrefixPublicDelegatedSubPrefixArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PublicDelegatedPrefixPublicDelegatedSubPrefixArgs $;

        public Builder() {
            $ = new PublicDelegatedPrefixPublicDelegatedSubPrefixArgs();
        }

        public Builder(PublicDelegatedPrefixPublicDelegatedSubPrefixArgs defaults) {
            $ = new PublicDelegatedPrefixPublicDelegatedSubPrefixArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocatablePrefixLength The allocatable prefix length supported by this public delegated prefix. This field is optional and cannot be set for prefixes in DELEGATION mode. It cannot be set for IPv4 prefixes either, and it always defaults to 32.
         * 
         * @return builder
         * 
         */
        public Builder allocatablePrefixLength(@Nullable Output<Integer> allocatablePrefixLength) {
            $.allocatablePrefixLength = allocatablePrefixLength;
            return this;
        }

        /**
         * @param allocatablePrefixLength The allocatable prefix length supported by this public delegated prefix. This field is optional and cannot be set for prefixes in DELEGATION mode. It cannot be set for IPv4 prefixes either, and it always defaults to 32.
         * 
         * @return builder
         * 
         */
        public Builder allocatablePrefixLength(Integer allocatablePrefixLength) {
            return allocatablePrefixLength(Output.of(allocatablePrefixLength));
        }

        /**
         * @param delegateeProject Name of the project scoping this PublicDelegatedSubPrefix.
         * 
         * @return builder
         * 
         */
        public Builder delegateeProject(@Nullable Output<String> delegateeProject) {
            $.delegateeProject = delegateeProject;
            return this;
        }

        /**
         * @param delegateeProject Name of the project scoping this PublicDelegatedSubPrefix.
         * 
         * @return builder
         * 
         */
        public Builder delegateeProject(String delegateeProject) {
            return delegateeProject(Output.of(delegateeProject));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipCidrRange The IP address range, in CIDR format, represented by this public delegated prefix.
         * 
         * @return builder
         * 
         */
        public Builder ipCidrRange(@Nullable Output<String> ipCidrRange) {
            $.ipCidrRange = ipCidrRange;
            return this;
        }

        /**
         * @param ipCidrRange The IP address range, in CIDR format, represented by this public delegated prefix.
         * 
         * @return builder
         * 
         */
        public Builder ipCidrRange(String ipCidrRange) {
            return ipCidrRange(Output.of(ipCidrRange));
        }

        /**
         * @param isAddress Whether the sub prefix is delegated for address creation.
         * 
         * @return builder
         * 
         */
        public Builder isAddress(@Nullable Output<Boolean> isAddress) {
            $.isAddress = isAddress;
            return this;
        }

        /**
         * @param isAddress Whether the sub prefix is delegated for address creation.
         * 
         * @return builder
         * 
         */
        public Builder isAddress(Boolean isAddress) {
            return isAddress(Output.of(isAddress));
        }

        /**
         * @param mode Specifies the mode of this IPv6 PDP. MODE must be one of: DELEGATION,
         * EXTERNAL_IPV6_FORWARDING_RULE_CREATION and EXTERNAL_IPV6_SUBNETWORK_CREATION.
         * Possible values are: `DELEGATION`, `EXTERNAL_IPV6_FORWARDING_RULE_CREATION`, `EXTERNAL_IPV6_SUBNETWORK_CREATION`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Specifies the mode of this IPv6 PDP. MODE must be one of: DELEGATION,
         * EXTERNAL_IPV6_FORWARDING_RULE_CREATION and EXTERNAL_IPV6_SUBNETWORK_CREATION.
         * Possible values are: `DELEGATION`, `EXTERNAL_IPV6_FORWARDING_RULE_CREATION`, `EXTERNAL_IPV6_SUBNETWORK_CREATION`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name Name of the resource. The name must be 1-63 characters long, and
         * comply with RFC1035. Specifically, the name must be 1-63 characters
         * long and match the regular expression `a-z?`
         * which means the first character must be a lowercase letter, and all
         * following characters must be a dash, lowercase letter, or digit,
         * except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. The name must be 1-63 characters long, and
         * comply with RFC1035. Specifically, the name must be 1-63 characters
         * long and match the regular expression `a-z?`
         * which means the first character must be a lowercase letter, and all
         * following characters must be a dash, lowercase letter, or digit,
         * except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region A region where the prefix will reside.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region A region where the prefix will reside.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param status The status of the sub public delegated prefix.
         * Possible values are: `INITIALIZING`, `READY_TO_ANNOUNCE`, `ANNOUNCED`, `DELETING`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the sub public delegated prefix.
         * Possible values are: `INITIALIZING`, `READY_TO_ANNOUNCE`, `ANNOUNCED`, `DELETING`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public PublicDelegatedPrefixPublicDelegatedSubPrefixArgs build() {
            return $;
        }
    }

}
