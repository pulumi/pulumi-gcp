// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workstations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.workstations.outputs.WorkstationConfigHostGceInstanceAccelerator;
import com.pulumi.gcp.workstations.outputs.WorkstationConfigHostGceInstanceBoostConfig;
import com.pulumi.gcp.workstations.outputs.WorkstationConfigHostGceInstanceConfidentialInstanceConfig;
import com.pulumi.gcp.workstations.outputs.WorkstationConfigHostGceInstanceShieldedInstanceConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkstationConfigHostGceInstance {
    /**
     * @return An accelerator card attached to the instance.
     * Structure is documented below.
     * 
     */
    private @Nullable List<WorkstationConfigHostGceInstanceAccelerator> accelerators;
    /**
     * @return A list of the boost configurations that workstations created using this workstation configuration are allowed to use.
     * Structure is documented below.
     * 
     */
    private @Nullable List<WorkstationConfigHostGceInstanceBoostConfig> boostConfigs;
    /**
     * @return Size of the boot disk in GB.
     * 
     */
    private @Nullable Integer bootDiskSizeGb;
    /**
     * @return A set of Compute Engine Confidential VM instance options.
     * Structure is documented below.
     * 
     */
    private @Nullable WorkstationConfigHostGceInstanceConfidentialInstanceConfig confidentialInstanceConfig;
    /**
     * @return Whether instances have no public IP address.
     * 
     */
    private @Nullable Boolean disablePublicIpAddresses;
    /**
     * @return Whether to disable SSH access to the VM.
     * 
     */
    private @Nullable Boolean disableSsh;
    /**
     * @return Whether to enable nested virtualization on the Compute Engine VMs backing the Workstations.
     * See https://cloud.google.com/workstations/docs/reference/rest/v1beta/projects.locations.workstationClusters.workstationConfigs#GceInstance.FIELDS.enable_nested_virtualization
     * 
     */
    private @Nullable Boolean enableNestedVirtualization;
    /**
     * @return The name of a Compute Engine machine type.
     * 
     */
    private @Nullable String machineType;
    /**
     * @return Number of instances to pool for faster workstation startup.
     * 
     */
    private @Nullable Integer poolSize;
    /**
     * @return Email address of the service account that will be used on VM instances used to support this config. This service account must have permission to pull the specified container image. If not set, VMs will run without a service account, in which case the image must be publicly accessible.
     * 
     */
    private @Nullable String serviceAccount;
    /**
     * @return Scopes to grant to the service_account. Various scopes are automatically added based on feature usage. When specified, users of workstations under this configuration must have `iam.serviceAccounts.actAs` on the service account.
     * 
     */
    private @Nullable List<String> serviceAccountScopes;
    /**
     * @return A set of Compute Engine Shielded instance options.
     * Structure is documented below.
     * 
     */
    private @Nullable WorkstationConfigHostGceInstanceShieldedInstanceConfig shieldedInstanceConfig;
    /**
     * @return Network tags to add to the Compute Engine machines backing the Workstations.
     * 
     */
    private @Nullable List<String> tags;
    /**
     * @return Resource manager tags to be bound to the VM instances backing the Workstations.
     * Tag keys and values have the same definition as
     * https://cloud.google.com/resource-manager/docs/tags/tags-overview
     * Keys must be in the format `tagKeys/{tag_key_id}`, and
     * values are in the format `tagValues/456`.
     * 
     */
    private @Nullable Map<String,String> vmTags;

    private WorkstationConfigHostGceInstance() {}
    /**
     * @return An accelerator card attached to the instance.
     * Structure is documented below.
     * 
     */
    public List<WorkstationConfigHostGceInstanceAccelerator> accelerators() {
        return this.accelerators == null ? List.of() : this.accelerators;
    }
    /**
     * @return A list of the boost configurations that workstations created using this workstation configuration are allowed to use.
     * Structure is documented below.
     * 
     */
    public List<WorkstationConfigHostGceInstanceBoostConfig> boostConfigs() {
        return this.boostConfigs == null ? List.of() : this.boostConfigs;
    }
    /**
     * @return Size of the boot disk in GB.
     * 
     */
    public Optional<Integer> bootDiskSizeGb() {
        return Optional.ofNullable(this.bootDiskSizeGb);
    }
    /**
     * @return A set of Compute Engine Confidential VM instance options.
     * Structure is documented below.
     * 
     */
    public Optional<WorkstationConfigHostGceInstanceConfidentialInstanceConfig> confidentialInstanceConfig() {
        return Optional.ofNullable(this.confidentialInstanceConfig);
    }
    /**
     * @return Whether instances have no public IP address.
     * 
     */
    public Optional<Boolean> disablePublicIpAddresses() {
        return Optional.ofNullable(this.disablePublicIpAddresses);
    }
    /**
     * @return Whether to disable SSH access to the VM.
     * 
     */
    public Optional<Boolean> disableSsh() {
        return Optional.ofNullable(this.disableSsh);
    }
    /**
     * @return Whether to enable nested virtualization on the Compute Engine VMs backing the Workstations.
     * See https://cloud.google.com/workstations/docs/reference/rest/v1beta/projects.locations.workstationClusters.workstationConfigs#GceInstance.FIELDS.enable_nested_virtualization
     * 
     */
    public Optional<Boolean> enableNestedVirtualization() {
        return Optional.ofNullable(this.enableNestedVirtualization);
    }
    /**
     * @return The name of a Compute Engine machine type.
     * 
     */
    public Optional<String> machineType() {
        return Optional.ofNullable(this.machineType);
    }
    /**
     * @return Number of instances to pool for faster workstation startup.
     * 
     */
    public Optional<Integer> poolSize() {
        return Optional.ofNullable(this.poolSize);
    }
    /**
     * @return Email address of the service account that will be used on VM instances used to support this config. This service account must have permission to pull the specified container image. If not set, VMs will run without a service account, in which case the image must be publicly accessible.
     * 
     */
    public Optional<String> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }
    /**
     * @return Scopes to grant to the service_account. Various scopes are automatically added based on feature usage. When specified, users of workstations under this configuration must have `iam.serviceAccounts.actAs` on the service account.
     * 
     */
    public List<String> serviceAccountScopes() {
        return this.serviceAccountScopes == null ? List.of() : this.serviceAccountScopes;
    }
    /**
     * @return A set of Compute Engine Shielded instance options.
     * Structure is documented below.
     * 
     */
    public Optional<WorkstationConfigHostGceInstanceShieldedInstanceConfig> shieldedInstanceConfig() {
        return Optional.ofNullable(this.shieldedInstanceConfig);
    }
    /**
     * @return Network tags to add to the Compute Engine machines backing the Workstations.
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return Resource manager tags to be bound to the VM instances backing the Workstations.
     * Tag keys and values have the same definition as
     * https://cloud.google.com/resource-manager/docs/tags/tags-overview
     * Keys must be in the format `tagKeys/{tag_key_id}`, and
     * values are in the format `tagValues/456`.
     * 
     */
    public Map<String,String> vmTags() {
        return this.vmTags == null ? Map.of() : this.vmTags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkstationConfigHostGceInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<WorkstationConfigHostGceInstanceAccelerator> accelerators;
        private @Nullable List<WorkstationConfigHostGceInstanceBoostConfig> boostConfigs;
        private @Nullable Integer bootDiskSizeGb;
        private @Nullable WorkstationConfigHostGceInstanceConfidentialInstanceConfig confidentialInstanceConfig;
        private @Nullable Boolean disablePublicIpAddresses;
        private @Nullable Boolean disableSsh;
        private @Nullable Boolean enableNestedVirtualization;
        private @Nullable String machineType;
        private @Nullable Integer poolSize;
        private @Nullable String serviceAccount;
        private @Nullable List<String> serviceAccountScopes;
        private @Nullable WorkstationConfigHostGceInstanceShieldedInstanceConfig shieldedInstanceConfig;
        private @Nullable List<String> tags;
        private @Nullable Map<String,String> vmTags;
        public Builder() {}
        public Builder(WorkstationConfigHostGceInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accelerators = defaults.accelerators;
    	      this.boostConfigs = defaults.boostConfigs;
    	      this.bootDiskSizeGb = defaults.bootDiskSizeGb;
    	      this.confidentialInstanceConfig = defaults.confidentialInstanceConfig;
    	      this.disablePublicIpAddresses = defaults.disablePublicIpAddresses;
    	      this.disableSsh = defaults.disableSsh;
    	      this.enableNestedVirtualization = defaults.enableNestedVirtualization;
    	      this.machineType = defaults.machineType;
    	      this.poolSize = defaults.poolSize;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.serviceAccountScopes = defaults.serviceAccountScopes;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.tags = defaults.tags;
    	      this.vmTags = defaults.vmTags;
        }

        @CustomType.Setter
        public Builder accelerators(@Nullable List<WorkstationConfigHostGceInstanceAccelerator> accelerators) {

            this.accelerators = accelerators;
            return this;
        }
        public Builder accelerators(WorkstationConfigHostGceInstanceAccelerator... accelerators) {
            return accelerators(List.of(accelerators));
        }
        @CustomType.Setter
        public Builder boostConfigs(@Nullable List<WorkstationConfigHostGceInstanceBoostConfig> boostConfigs) {

            this.boostConfigs = boostConfigs;
            return this;
        }
        public Builder boostConfigs(WorkstationConfigHostGceInstanceBoostConfig... boostConfigs) {
            return boostConfigs(List.of(boostConfigs));
        }
        @CustomType.Setter
        public Builder bootDiskSizeGb(@Nullable Integer bootDiskSizeGb) {

            this.bootDiskSizeGb = bootDiskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder confidentialInstanceConfig(@Nullable WorkstationConfigHostGceInstanceConfidentialInstanceConfig confidentialInstanceConfig) {

            this.confidentialInstanceConfig = confidentialInstanceConfig;
            return this;
        }
        @CustomType.Setter
        public Builder disablePublicIpAddresses(@Nullable Boolean disablePublicIpAddresses) {

            this.disablePublicIpAddresses = disablePublicIpAddresses;
            return this;
        }
        @CustomType.Setter
        public Builder disableSsh(@Nullable Boolean disableSsh) {

            this.disableSsh = disableSsh;
            return this;
        }
        @CustomType.Setter
        public Builder enableNestedVirtualization(@Nullable Boolean enableNestedVirtualization) {

            this.enableNestedVirtualization = enableNestedVirtualization;
            return this;
        }
        @CustomType.Setter
        public Builder machineType(@Nullable String machineType) {

            this.machineType = machineType;
            return this;
        }
        @CustomType.Setter
        public Builder poolSize(@Nullable Integer poolSize) {

            this.poolSize = poolSize;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(@Nullable String serviceAccount) {

            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountScopes(@Nullable List<String> serviceAccountScopes) {

            this.serviceAccountScopes = serviceAccountScopes;
            return this;
        }
        public Builder serviceAccountScopes(String... serviceAccountScopes) {
            return serviceAccountScopes(List.of(serviceAccountScopes));
        }
        @CustomType.Setter
        public Builder shieldedInstanceConfig(@Nullable WorkstationConfigHostGceInstanceShieldedInstanceConfig shieldedInstanceConfig) {

            this.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder vmTags(@Nullable Map<String,String> vmTags) {

            this.vmTags = vmTags;
            return this;
        }
        public WorkstationConfigHostGceInstance build() {
            final var _resultValue = new WorkstationConfigHostGceInstance();
            _resultValue.accelerators = accelerators;
            _resultValue.boostConfigs = boostConfigs;
            _resultValue.bootDiskSizeGb = bootDiskSizeGb;
            _resultValue.confidentialInstanceConfig = confidentialInstanceConfig;
            _resultValue.disablePublicIpAddresses = disablePublicIpAddresses;
            _resultValue.disableSsh = disableSsh;
            _resultValue.enableNestedVirtualization = enableNestedVirtualization;
            _resultValue.machineType = machineType;
            _resultValue.poolSize = poolSize;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.serviceAccountScopes = serviceAccountScopes;
            _resultValue.shieldedInstanceConfig = shieldedInstanceConfig;
            _resultValue.tags = tags;
            _resultValue.vmTags = vmTags;
            return _resultValue;
        }
    }
}
