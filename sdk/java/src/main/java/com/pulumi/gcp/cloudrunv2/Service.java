// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.cloudrunv2.ServiceArgs;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceState;
import com.pulumi.gcp.cloudrunv2.outputs.ServiceBinaryAuthorization;
import com.pulumi.gcp.cloudrunv2.outputs.ServiceCondition;
import com.pulumi.gcp.cloudrunv2.outputs.ServiceTemplate;
import com.pulumi.gcp.cloudrunv2.outputs.ServiceTerminalCondition;
import com.pulumi.gcp.cloudrunv2.outputs.ServiceTraffic;
import com.pulumi.gcp.cloudrunv2.outputs.ServiceTrafficStatus;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Service acts as a top-level container that manages a set of configurations and revision templates which implement a network service. Service exists to provide a singular abstraction which can be access controlled, reasoned about, and which encapsulates software lifecycle decisions such as rollout policy and team resource ownership.
 * 
 * To get more information about Service, see:
 * 
 * * [API documentation](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/run/docs/)
 * 
 * ## Example Usage
 * ### Cloudrunv2 Service Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.cloudrunv2.Service;
 * import com.pulumi.gcp.cloudrunv2.ServiceArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .ingress(&#34;INGRESS_TRAFFIC_ALL&#34;)
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .containers(ServiceTemplateContainerArgs.builder()
 *                     .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloudrunv2 Service Sql
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.cloudrunv2.Service;
 * import com.pulumi.gcp.cloudrunv2.ServiceArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateScalingArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTrafficArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamMember;
 * import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var secret = new Secret(&#34;secret&#34;, SecretArgs.builder()        
 *             .secretId(&#34;secret-1&#34;)
 *             .replication(SecretReplicationArgs.builder()
 *                 .automatic(true)
 *                 .build())
 *             .build());
 * 
 *         var secret_version_data = new SecretVersion(&#34;secret-version-data&#34;, SecretVersionArgs.builder()        
 *             .secret(secret.name())
 *             .secretData(&#34;secret-data&#34;)
 *             .build());
 * 
 *         var instance = new DatabaseInstance(&#34;instance&#34;, DatabaseInstanceArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .databaseVersion(&#34;MYSQL_5_7&#34;)
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier(&#34;db-f1-micro&#34;)
 *                 .build())
 *             .deletionProtection(&#34;true&#34;)
 *             .build());
 * 
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .ingress(&#34;INGRESS_TRAFFIC_ALL&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .scaling(ServiceTemplateScalingArgs.builder()
 *                     .maxInstanceCount(2)
 *                     .build())
 *                 .volumes(ServiceTemplateVolumeArgs.builder()
 *                     .name(&#34;cloudsql&#34;)
 *                     .cloudSqlInstance(ServiceTemplateVolumeCloudSqlInstanceArgs.builder()
 *                         .instances(instance.connectionName())
 *                         .build())
 *                     .build())
 *                 .containers(ServiceTemplateContainerArgs.builder()
 *                     .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                     .envs(                    
 *                         ServiceTemplateContainerEnvArgs.builder()
 *                             .name(&#34;FOO&#34;)
 *                             .value(&#34;bar&#34;)
 *                             .build(),
 *                         ServiceTemplateContainerEnvArgs.builder()
 *                             .name(&#34;SECRET_ENV_VAR&#34;)
 *                             .valueSource(ServiceTemplateContainerEnvValueSourceArgs.builder()
 *                                 .secretKeyRef(ServiceTemplateContainerEnvValueSourceSecretKeyRefArgs.builder()
 *                                     .secret(secret.secretId())
 *                                     .version(&#34;1&#34;)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                     .volumeMounts(ServiceTemplateContainerVolumeMountArgs.builder()
 *                         .name(&#34;cloudsql&#34;)
 *                         .mountPath(&#34;/cloudsql&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .traffics(ServiceTrafficArgs.builder()
 *                 .type(&#34;TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST&#34;)
 *                 .percent(100)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secret_version_data)
 *                 .build());
 * 
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         var secret_access = new SecretIamMember(&#34;secret-access&#34;, SecretIamMemberArgs.builder()        
 *             .secretId(secret.id())
 *             .role(&#34;roles/secretmanager.secretAccessor&#34;)
 *             .member(String.format(&#34;serviceAccount:%s-compute@developer.gserviceaccount.com&#34;, project.applyValue(getProjectResult -&gt; getProjectResult.number())))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secret)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Cloudrunv2 Service Vpcaccess
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.vpcaccess.Connector;
 * import com.pulumi.gcp.vpcaccess.ConnectorArgs;
 * import com.pulumi.gcp.vpcaccess.inputs.ConnectorSubnetArgs;
 * import com.pulumi.gcp.cloudrunv2.Service;
 * import com.pulumi.gcp.cloudrunv2.ServiceArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateVpcAccessArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var customTestNetwork = new Network(&#34;customTestNetwork&#34;, NetworkArgs.builder()        
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var customTestSubnetwork = new Subnetwork(&#34;customTestSubnetwork&#34;, SubnetworkArgs.builder()        
 *             .ipCidrRange(&#34;10.2.0.0/28&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .network(customTestNetwork.id())
 *             .build());
 * 
 *         var connector = new Connector(&#34;connector&#34;, ConnectorArgs.builder()        
 *             .subnet(ConnectorSubnetArgs.builder()
 *                 .name(customTestSubnetwork.name())
 *                 .build())
 *             .machineType(&#34;e2-standard-4&#34;)
 *             .minInstances(2)
 *             .maxInstances(3)
 *             .region(&#34;us-central1&#34;)
 *             .build());
 * 
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .containers(ServiceTemplateContainerArgs.builder()
 *                     .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                     .build())
 *                 .vpcAccess(ServiceTemplateVpcAccessArgs.builder()
 *                     .connector(connector.id())
 *                     .egress(&#34;ALL_TRAFFIC&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloudrunv2 Service Probes
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.cloudrunv2.Service;
 * import com.pulumi.gcp.cloudrunv2.ServiceArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .containers(ServiceTemplateContainerArgs.builder()
 *                     .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                     .livenessProbe(ServiceTemplateContainerLivenessProbeArgs.builder()
 *                         .httpGet(ServiceTemplateContainerLivenessProbeHttpGetArgs.builder()
 *                             .path(&#34;/&#34;)
 *                             .build())
 *                         .build())
 *                     .startupProbe(ServiceTemplateContainerStartupProbeArgs.builder()
 *                         .failureThreshold(1)
 *                         .initialDelaySeconds(0)
 *                         .periodSeconds(3)
 *                         .tcpSocket(ServiceTemplateContainerStartupProbeTcpSocketArgs.builder()
 *                             .port(8080)
 *                             .build())
 *                         .timeoutSeconds(1)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloudrunv2 Service Secret
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.cloudrunv2.Service;
 * import com.pulumi.gcp.cloudrunv2.ServiceArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamMember;
 * import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var secret = new Secret(&#34;secret&#34;, SecretArgs.builder()        
 *             .secretId(&#34;secret-1&#34;)
 *             .replication(SecretReplicationArgs.builder()
 *                 .automatic(true)
 *                 .build())
 *             .build());
 * 
 *         var secret_version_data = new SecretVersion(&#34;secret-version-data&#34;, SecretVersionArgs.builder()        
 *             .secret(secret.name())
 *             .secretData(&#34;secret-data&#34;)
 *             .build());
 * 
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .ingress(&#34;INGRESS_TRAFFIC_ALL&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .volumes(ServiceTemplateVolumeArgs.builder()
 *                     .name(&#34;a-volume&#34;)
 *                     .secret(ServiceTemplateVolumeSecretArgs.builder()
 *                         .secret(secret.secretId())
 *                         .defaultMode(292)
 *                         .items(ServiceTemplateVolumeSecretItemArgs.builder()
 *                             .version(&#34;1&#34;)
 *                             .path(&#34;my-secret&#34;)
 *                             .mode(256)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .containers(ServiceTemplateContainerArgs.builder()
 *                     .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                     .volumeMounts(ServiceTemplateContainerVolumeMountArgs.builder()
 *                         .name(&#34;a-volume&#34;)
 *                         .mountPath(&#34;/secrets&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secret_version_data)
 *                 .build());
 * 
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         var secret_access = new SecretIamMember(&#34;secret-access&#34;, SecretIamMemberArgs.builder()        
 *             .secretId(secret.id())
 *             .role(&#34;roles/secretmanager.secretAccessor&#34;)
 *             .member(String.format(&#34;serviceAccount:%s-compute@developer.gserviceaccount.com&#34;, project.applyValue(getProjectResult -&gt; getProjectResult.number())))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secret)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Service can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:cloudrunv2/service:Service default projects/{{project}}/locations/{{location}}/services/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:cloudrunv2/service:Service default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:cloudrunv2/service:Service default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:cloudrunv2/service:Service")
public class Service extends com.pulumi.resources.CustomResource {
    /**
     * Settings for the Binary Authorization feature.
     * Structure is documented below.
     * 
     */
    @Export(name="binaryAuthorization", type=ServiceBinaryAuthorization.class, parameters={})
    private Output</* @Nullable */ ServiceBinaryAuthorization> binaryAuthorization;

    /**
     * @return Settings for the Binary Authorization feature.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ServiceBinaryAuthorization>> binaryAuthorization() {
        return Codegen.optional(this.binaryAuthorization);
    }
    /**
     * Arbitrary identifier for the API client.
     * 
     */
    @Export(name="client", type=String.class, parameters={})
    private Output</* @Nullable */ String> client;

    /**
     * @return Arbitrary identifier for the API client.
     * 
     */
    public Output<Optional<String>> client() {
        return Codegen.optional(this.client);
    }
    /**
     * Arbitrary version identifier for the API client.
     * 
     */
    @Export(name="clientVersion", type=String.class, parameters={})
    private Output</* @Nullable */ String> clientVersion;

    /**
     * @return Arbitrary version identifier for the API client.
     * 
     */
    public Output<Optional<String>> clientVersion() {
        return Codegen.optional(this.clientVersion);
    }
    /**
     * The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     * 
     */
    @Export(name="conditions", type=List.class, parameters={ServiceCondition.class})
    private Output<List<ServiceCondition>> conditions;

    /**
     * @return The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     * 
     */
    public Output<List<ServiceCondition>> conditions() {
        return this.conditions;
    }
    /**
     * User-provided description of the Service. This field currently has a 512-character limit.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return User-provided description of the Service. This field currently has a 512-character limit.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     * 
     */
    @Export(name="generation", type=String.class, parameters={})
    private Output<String> generation;

    /**
     * @return A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     * 
     */
    public Output<String> generation() {
        return this.generation;
    }
    /**
     * Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
     * 
     */
    @Export(name="ingress", type=String.class, parameters={})
    private Output<String> ingress;

    /**
     * @return Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
     * 
     */
    public Output<String> ingress() {
        return this.ingress;
    }
    /**
     * KRM-style labels for the resource.
     * (Optional)
     * Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with &#39;run.googleapis.com&#39; or &#39;serving.knative.dev&#39; namespaces. Those labels are read-only, and user changes will not be preserved.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return KRM-style labels for the resource.
     * (Optional)
     * Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with &#39;run.googleapis.com&#39; or &#39;serving.knative.dev&#39; namespaces. Those labels are read-only, and user changes will not be preserved.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * 
     */
    @Export(name="latestCreatedRevision", type=String.class, parameters={})
    private Output<String> latestCreatedRevision;

    /**
     * @return Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * 
     */
    public Output<String> latestCreatedRevision() {
        return this.latestCreatedRevision;
    }
    /**
     * Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * 
     */
    @Export(name="latestReadyRevision", type=String.class, parameters={})
    private Output<String> latestReadyRevision;

    /**
     * @return Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * 
     */
    public Output<String> latestReadyRevision() {
        return this.latestReadyRevision;
    }
    /**
     * The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
     * Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
     * 
     */
    @Export(name="launchStage", type=String.class, parameters={})
    private Output<String> launchStage;

    /**
     * @return The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
     * Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
     * 
     */
    public Output<String> launchStage() {
        return this.launchStage;
    }
    /**
     * The location of the cloud run service
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return The location of the cloud run service
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * Name of the Service.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the Service.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The generation of this Service currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     * 
     */
    @Export(name="observedGeneration", type=String.class, parameters={})
    private Output<String> observedGeneration;

    /**
     * @return The generation of this Service currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     * 
     */
    public Output<String> observedGeneration() {
        return this.observedGeneration;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Returns true if the Service is currently being acted upon by the system to bring it into the desired state.
     * When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
     * If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
     * If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in terminalCondition and conditions.
     * 
     */
    @Export(name="reconciling", type=Boolean.class, parameters={})
    private Output<Boolean> reconciling;

    /**
     * @return Returns true if the Service is currently being acted upon by the system to bring it into the desired state.
     * When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
     * If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
     * If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in terminalCondition and conditions.
     * 
     */
    public Output<Boolean> reconciling() {
        return this.reconciling;
    }
    /**
     * The template used to create revisions for this Service.
     * Structure is documented below.
     * 
     */
    @Export(name="template", type=ServiceTemplate.class, parameters={})
    private Output<ServiceTemplate> template;

    /**
     * @return The template used to create revisions for this Service.
     * Structure is documented below.
     * 
     */
    public Output<ServiceTemplate> template() {
        return this.template;
    }
    /**
     * The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     * 
     */
    @Export(name="terminalConditions", type=List.class, parameters={ServiceTerminalCondition.class})
    private Output<List<ServiceTerminalCondition>> terminalConditions;

    /**
     * @return The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     * 
     */
    public Output<List<ServiceTerminalCondition>> terminalConditions() {
        return this.terminalConditions;
    }
    /**
     * Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     * 
     */
    @Export(name="trafficStatuses", type=List.class, parameters={ServiceTrafficStatus.class})
    private Output<List<ServiceTrafficStatus>> trafficStatuses;

    /**
     * @return Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     * 
     */
    public Output<List<ServiceTrafficStatus>> trafficStatuses() {
        return this.trafficStatuses;
    }
    /**
     * Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
     * Structure is documented below.
     * 
     */
    @Export(name="traffics", type=List.class, parameters={ServiceTraffic.class})
    private Output<List<ServiceTraffic>> traffics;

    /**
     * @return Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
     * Structure is documented below.
     * 
     */
    public Output<List<ServiceTraffic>> traffics() {
        return this.traffics;
    }
    /**
     * Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    @Export(name="uid", type=String.class, parameters={})
    private Output<String> uid;

    /**
     * @return Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Displays the target URI.
     * 
     */
    @Export(name="uri", type=String.class, parameters={})
    private Output<String> uri;

    /**
     * @return Displays the target URI.
     * 
     */
    public Output<String> uri() {
        return this.uri;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Service(String name) {
        this(name, ServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Service(String name, ServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Service(String name, ServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudrunv2/service:Service", name, args == null ? ServiceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Service(String name, Output<String> id, @Nullable ServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudrunv2/service:Service", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Service get(String name, Output<String> id, @Nullable ServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Service(name, id, state, options);
    }
}
