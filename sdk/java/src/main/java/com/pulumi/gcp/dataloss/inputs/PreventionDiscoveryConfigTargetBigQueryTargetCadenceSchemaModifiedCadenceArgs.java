// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionDiscoveryConfigTargetBigQueryTargetCadenceSchemaModifiedCadenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDiscoveryConfigTargetBigQueryTargetCadenceSchemaModifiedCadenceArgs Empty = new PreventionDiscoveryConfigTargetBigQueryTargetCadenceSchemaModifiedCadenceArgs();

    /**
     * How frequently profiles may be updated when schemas are modified. Default to monthly
     * Possible values are: `UPDATE_FREQUENCY_NEVER`, `UPDATE_FREQUENCY_DAILY`, `UPDATE_FREQUENCY_MONTHLY`.
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<String> frequency;

    /**
     * @return How frequently profiles may be updated when schemas are modified. Default to monthly
     * Possible values are: `UPDATE_FREQUENCY_NEVER`, `UPDATE_FREQUENCY_DAILY`, `UPDATE_FREQUENCY_MONTHLY`.
     * 
     */
    public Optional<Output<String>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * The type of events to consider when deciding if the table&#39;s schema has been modified and should have the profile updated. Defaults to NEW_COLUMN.
     * Each value may be one of: `SCHEMA_NEW_COLUMNS`, `SCHEMA_REMOVED_COLUMNS`.
     * 
     */
    @Import(name="types")
    private @Nullable Output<List<String>> types;

    /**
     * @return The type of events to consider when deciding if the table&#39;s schema has been modified and should have the profile updated. Defaults to NEW_COLUMN.
     * Each value may be one of: `SCHEMA_NEW_COLUMNS`, `SCHEMA_REMOVED_COLUMNS`.
     * 
     */
    public Optional<Output<List<String>>> types() {
        return Optional.ofNullable(this.types);
    }

    private PreventionDiscoveryConfigTargetBigQueryTargetCadenceSchemaModifiedCadenceArgs() {}

    private PreventionDiscoveryConfigTargetBigQueryTargetCadenceSchemaModifiedCadenceArgs(PreventionDiscoveryConfigTargetBigQueryTargetCadenceSchemaModifiedCadenceArgs $) {
        this.frequency = $.frequency;
        this.types = $.types;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDiscoveryConfigTargetBigQueryTargetCadenceSchemaModifiedCadenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDiscoveryConfigTargetBigQueryTargetCadenceSchemaModifiedCadenceArgs $;

        public Builder() {
            $ = new PreventionDiscoveryConfigTargetBigQueryTargetCadenceSchemaModifiedCadenceArgs();
        }

        public Builder(PreventionDiscoveryConfigTargetBigQueryTargetCadenceSchemaModifiedCadenceArgs defaults) {
            $ = new PreventionDiscoveryConfigTargetBigQueryTargetCadenceSchemaModifiedCadenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param frequency How frequently profiles may be updated when schemas are modified. Default to monthly
         * Possible values are: `UPDATE_FREQUENCY_NEVER`, `UPDATE_FREQUENCY_DAILY`, `UPDATE_FREQUENCY_MONTHLY`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency How frequently profiles may be updated when schemas are modified. Default to monthly
         * Possible values are: `UPDATE_FREQUENCY_NEVER`, `UPDATE_FREQUENCY_DAILY`, `UPDATE_FREQUENCY_MONTHLY`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param types The type of events to consider when deciding if the table&#39;s schema has been modified and should have the profile updated. Defaults to NEW_COLUMN.
         * Each value may be one of: `SCHEMA_NEW_COLUMNS`, `SCHEMA_REMOVED_COLUMNS`.
         * 
         * @return builder
         * 
         */
        public Builder types(@Nullable Output<List<String>> types) {
            $.types = types;
            return this;
        }

        /**
         * @param types The type of events to consider when deciding if the table&#39;s schema has been modified and should have the profile updated. Defaults to NEW_COLUMN.
         * Each value may be one of: `SCHEMA_NEW_COLUMNS`, `SCHEMA_REMOVED_COLUMNS`.
         * 
         * @return builder
         * 
         */
        public Builder types(List<String> types) {
            return types(Output.of(types));
        }

        /**
         * @param types The type of events to consider when deciding if the table&#39;s schema has been modified and should have the profile updated. Defaults to NEW_COLUMN.
         * Each value may be one of: `SCHEMA_NEW_COLUMNS`, `SCHEMA_REMOVED_COLUMNS`.
         * 
         * @return builder
         * 
         */
        public Builder types(String... types) {
            return types(List.of(types));
        }

        public PreventionDiscoveryConfigTargetBigQueryTargetCadenceSchemaModifiedCadenceArgs build() {
            return $;
        }
    }

}
