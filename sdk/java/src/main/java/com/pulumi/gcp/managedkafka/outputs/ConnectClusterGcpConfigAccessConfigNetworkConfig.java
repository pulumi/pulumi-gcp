// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.managedkafka.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ConnectClusterGcpConfigAccessConfigNetworkConfig {
    /**
     * @return Additional subnets may be specified. They may be in another region, but must be in the same VPC network. The Connect workers can communicate with network endpoints in either the primary or additional subnets.
     * 
     */
    private @Nullable List<String> additionalSubnets;
    /**
     * @return Additional DNS domain names from the subnet&#39;s network to be made visible to the Connect Cluster. When using MirrorMaker2, it&#39;s necessary to add the bootstrap address&#39;s dns domain name of the target cluster to make it visible to the connector. For example: my-kafka-cluster.us-central1.managedkafka.my-project.cloud.goog
     * 
     */
    private @Nullable List<String> dnsDomainNames;
    /**
     * @return VPC subnet to make available to the Kafka Connect cluster. Structured like: projects/{project}/regions/{region}/subnetworks/{subnet_id}. It is used to create a Private Service Connect (PSC) interface for the Kafka Connect workers. It must be located in the same region as the Kafka Connect cluster. The CIDR range of the subnet must be within the IPv4 address ranges for private networks, as specified in RFC 1918. The primary subnet CIDR range must have a minimum size of /22 (1024 addresses).
     * 
     */
    private String primarySubnet;

    private ConnectClusterGcpConfigAccessConfigNetworkConfig() {}
    /**
     * @return Additional subnets may be specified. They may be in another region, but must be in the same VPC network. The Connect workers can communicate with network endpoints in either the primary or additional subnets.
     * 
     */
    public List<String> additionalSubnets() {
        return this.additionalSubnets == null ? List.of() : this.additionalSubnets;
    }
    /**
     * @return Additional DNS domain names from the subnet&#39;s network to be made visible to the Connect Cluster. When using MirrorMaker2, it&#39;s necessary to add the bootstrap address&#39;s dns domain name of the target cluster to make it visible to the connector. For example: my-kafka-cluster.us-central1.managedkafka.my-project.cloud.goog
     * 
     */
    public List<String> dnsDomainNames() {
        return this.dnsDomainNames == null ? List.of() : this.dnsDomainNames;
    }
    /**
     * @return VPC subnet to make available to the Kafka Connect cluster. Structured like: projects/{project}/regions/{region}/subnetworks/{subnet_id}. It is used to create a Private Service Connect (PSC) interface for the Kafka Connect workers. It must be located in the same region as the Kafka Connect cluster. The CIDR range of the subnet must be within the IPv4 address ranges for private networks, as specified in RFC 1918. The primary subnet CIDR range must have a minimum size of /22 (1024 addresses).
     * 
     */
    public String primarySubnet() {
        return this.primarySubnet;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectClusterGcpConfigAccessConfigNetworkConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> additionalSubnets;
        private @Nullable List<String> dnsDomainNames;
        private String primarySubnet;
        public Builder() {}
        public Builder(ConnectClusterGcpConfigAccessConfigNetworkConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalSubnets = defaults.additionalSubnets;
    	      this.dnsDomainNames = defaults.dnsDomainNames;
    	      this.primarySubnet = defaults.primarySubnet;
        }

        @CustomType.Setter
        public Builder additionalSubnets(@Nullable List<String> additionalSubnets) {

            this.additionalSubnets = additionalSubnets;
            return this;
        }
        public Builder additionalSubnets(String... additionalSubnets) {
            return additionalSubnets(List.of(additionalSubnets));
        }
        @CustomType.Setter
        public Builder dnsDomainNames(@Nullable List<String> dnsDomainNames) {

            this.dnsDomainNames = dnsDomainNames;
            return this;
        }
        public Builder dnsDomainNames(String... dnsDomainNames) {
            return dnsDomainNames(List.of(dnsDomainNames));
        }
        @CustomType.Setter
        public Builder primarySubnet(String primarySubnet) {
            if (primarySubnet == null) {
              throw new MissingRequiredPropertyException("ConnectClusterGcpConfigAccessConfigNetworkConfig", "primarySubnet");
            }
            this.primarySubnet = primarySubnet;
            return this;
        }
        public ConnectClusterGcpConfigAccessConfigNetworkConfig build() {
            final var _resultValue = new ConnectClusterGcpConfigAccessConfigNetworkConfig();
            _resultValue.additionalSubnets = additionalSubnets;
            _resultValue.dnsDomainNames = dnsDomainNames;
            _resultValue.primarySubnet = primarySubnet;
            return _resultValue;
        }
    }
}
