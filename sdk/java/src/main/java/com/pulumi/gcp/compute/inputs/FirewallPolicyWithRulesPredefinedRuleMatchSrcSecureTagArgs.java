// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs extends com.pulumi.resources.ResourceArgs {

    public static final FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs Empty = new FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs();

    /**
     * Name of the secure tag, created with TagManager&#39;s TagValue API.
     * {@literal @}pattern tagValues/[0-9]+
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the secure tag, created with TagManager&#39;s TagValue API.
     * {@literal @}pattern tagValues/[0-9]+
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Output)
     * [Output Only] State of the secure tag, either `EFFECTIVE` or
     * `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted
     * or its network is deleted.
     * 
     * &lt;a name=&#34;nested_rule_rule_match_layer4_config&#34;&gt;&lt;/a&gt;The `layer4_config` block supports:
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Output)
     * [Output Only] State of the secure tag, either `EFFECTIVE` or
     * `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted
     * or its network is deleted.
     * 
     * &lt;a name=&#34;nested_rule_rule_match_layer4_config&#34;&gt;&lt;/a&gt;The `layer4_config` block supports:
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs() {}

    private FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs(FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs $) {
        this.name = $.name;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs $;

        public Builder() {
            $ = new FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs();
        }

        public Builder(FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs defaults) {
            $ = new FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the secure tag, created with TagManager&#39;s TagValue API.
         * {@literal @}pattern tagValues/[0-9]+
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the secure tag, created with TagManager&#39;s TagValue API.
         * {@literal @}pattern tagValues/[0-9]+
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param state (Output)
         * [Output Only] State of the secure tag, either `EFFECTIVE` or
         * `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted
         * or its network is deleted.
         * 
         * &lt;a name=&#34;nested_rule_rule_match_layer4_config&#34;&gt;&lt;/a&gt;The `layer4_config` block supports:
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Output)
         * [Output Only] State of the secure tag, either `EFFECTIVE` or
         * `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted
         * or its network is deleted.
         * 
         * &lt;a name=&#34;nested_rule_rule_match_layer4_config&#34;&gt;&lt;/a&gt;The `layer4_config` block supports:
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public FirewallPolicyWithRulesPredefinedRuleMatchSrcSecureTagArgs build() {
            return $;
        }
    }

}
