// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.DatascanDataArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataProfileSpecArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualitySpecArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanExecutionSpecArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatascanArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatascanArgs Empty = new DatascanArgs();

    /**
     * The data source for DataScan.
     * Structure is documented below.
     * 
     */
    @Import(name="data", required=true)
    private Output<DatascanDataArgs> data;

    /**
     * @return The data source for DataScan.
     * Structure is documented below.
     * 
     */
    public Output<DatascanDataArgs> data() {
        return this.data;
    }

    /**
     * DataProfileScan related setting.
     * Structure is documented below.
     * 
     */
    @Import(name="dataProfileSpec")
    private @Nullable Output<DatascanDataProfileSpecArgs> dataProfileSpec;

    /**
     * @return DataProfileScan related setting.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DatascanDataProfileSpecArgs>> dataProfileSpec() {
        return Optional.ofNullable(this.dataProfileSpec);
    }

    /**
     * DataQualityScan related setting.
     * Structure is documented below.
     * 
     */
    @Import(name="dataQualitySpec")
    private @Nullable Output<DatascanDataQualitySpecArgs> dataQualitySpec;

    /**
     * @return DataQualityScan related setting.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DatascanDataQualitySpecArgs>> dataQualitySpec() {
        return Optional.ofNullable(this.dataQualitySpec);
    }

    /**
     * DataScan identifier. Must contain only lowercase letters, numbers and hyphens. Must start with a letter. Must end with a number or a letter.
     * 
     */
    @Import(name="dataScanId", required=true)
    private Output<String> dataScanId;

    /**
     * @return DataScan identifier. Must contain only lowercase letters, numbers and hyphens. Must start with a letter. Must end with a number or a letter.
     * 
     */
    public Output<String> dataScanId() {
        return this.dataScanId;
    }

    /**
     * Description of the rule.
     * The maximum length is 1,024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the rule.
     * The maximum length is 1,024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User friendly display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User friendly display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * DataScan execution settings.
     * Structure is documented below.
     * 
     */
    @Import(name="executionSpec", required=true)
    private Output<DatascanExecutionSpecArgs> executionSpec;

    /**
     * @return DataScan execution settings.
     * Structure is documented below.
     * 
     */
    public Output<DatascanExecutionSpecArgs> executionSpec() {
        return this.executionSpec;
    }

    /**
     * User-defined labels for the scan. A list of key-&gt;value pairs.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User-defined labels for the scan. A list of key-&gt;value pairs.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location where the data scan should reside.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location where the data scan should reside.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private DatascanArgs() {}

    private DatascanArgs(DatascanArgs $) {
        this.data = $.data;
        this.dataProfileSpec = $.dataProfileSpec;
        this.dataQualitySpec = $.dataQualitySpec;
        this.dataScanId = $.dataScanId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.executionSpec = $.executionSpec;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatascanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatascanArgs $;

        public Builder() {
            $ = new DatascanArgs();
        }

        public Builder(DatascanArgs defaults) {
            $ = new DatascanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param data The data source for DataScan.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder data(Output<DatascanDataArgs> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data The data source for DataScan.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder data(DatascanDataArgs data) {
            return data(Output.of(data));
        }

        /**
         * @param dataProfileSpec DataProfileScan related setting.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataProfileSpec(@Nullable Output<DatascanDataProfileSpecArgs> dataProfileSpec) {
            $.dataProfileSpec = dataProfileSpec;
            return this;
        }

        /**
         * @param dataProfileSpec DataProfileScan related setting.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataProfileSpec(DatascanDataProfileSpecArgs dataProfileSpec) {
            return dataProfileSpec(Output.of(dataProfileSpec));
        }

        /**
         * @param dataQualitySpec DataQualityScan related setting.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataQualitySpec(@Nullable Output<DatascanDataQualitySpecArgs> dataQualitySpec) {
            $.dataQualitySpec = dataQualitySpec;
            return this;
        }

        /**
         * @param dataQualitySpec DataQualityScan related setting.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataQualitySpec(DatascanDataQualitySpecArgs dataQualitySpec) {
            return dataQualitySpec(Output.of(dataQualitySpec));
        }

        /**
         * @param dataScanId DataScan identifier. Must contain only lowercase letters, numbers and hyphens. Must start with a letter. Must end with a number or a letter.
         * 
         * @return builder
         * 
         */
        public Builder dataScanId(Output<String> dataScanId) {
            $.dataScanId = dataScanId;
            return this;
        }

        /**
         * @param dataScanId DataScan identifier. Must contain only lowercase letters, numbers and hyphens. Must start with a letter. Must end with a number or a letter.
         * 
         * @return builder
         * 
         */
        public Builder dataScanId(String dataScanId) {
            return dataScanId(Output.of(dataScanId));
        }

        /**
         * @param description Description of the rule.
         * The maximum length is 1,024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the rule.
         * The maximum length is 1,024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName User friendly display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User friendly display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param executionSpec DataScan execution settings.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder executionSpec(Output<DatascanExecutionSpecArgs> executionSpec) {
            $.executionSpec = executionSpec;
            return this;
        }

        /**
         * @param executionSpec DataScan execution settings.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder executionSpec(DatascanExecutionSpecArgs executionSpec) {
            return executionSpec(Output.of(executionSpec));
        }

        /**
         * @param labels User-defined labels for the scan. A list of key-&gt;value pairs.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-defined labels for the scan. A list of key-&gt;value pairs.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location where the data scan should reside.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location where the data scan should reside.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public DatascanArgs build() {
            $.data = Objects.requireNonNull($.data, "expected parameter 'data' to be non-null");
            $.dataScanId = Objects.requireNonNull($.dataScanId, "expected parameter 'dataScanId' to be non-null");
            $.executionSpec = Objects.requireNonNull($.executionSpec, "expected parameter 'executionSpec' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            return $;
        }
    }

}
