// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.organizations;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IAMCustomRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final IAMCustomRoleArgs Empty = new IAMCustomRoleArgs();

    /**
     * A human-readable description for the role.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human-readable description for the role.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The numeric ID of the organization in which you want to create a custom role.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return The numeric ID of the organization in which you want to create a custom role.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * The names of the permissions this role grants when bound in an IAM policy. At least one permission must be specified.
     * 
     */
    @Import(name="permissions", required=true)
    private Output<List<String>> permissions;

    /**
     * @return The names of the permissions this role grants when bound in an IAM policy. At least one permission must be specified.
     * 
     */
    public Output<List<String>> permissions() {
        return this.permissions;
    }

    /**
     * The role id to use for this role.
     * 
     */
    @Import(name="roleId", required=true)
    private Output<String> roleId;

    /**
     * @return The role id to use for this role.
     * 
     */
    public Output<String> roleId() {
        return this.roleId;
    }

    /**
     * The current launch stage of the role.
     * Defaults to `GA`.
     * List of possible stages is [here](https://cloud.google.com/iam/reference/rest/v1/organizations.roles#Role.RoleLaunchStage).
     * 
     */
    @Import(name="stage")
    private @Nullable Output<String> stage;

    /**
     * @return The current launch stage of the role.
     * Defaults to `GA`.
     * List of possible stages is [here](https://cloud.google.com/iam/reference/rest/v1/organizations.roles#Role.RoleLaunchStage).
     * 
     */
    public Optional<Output<String>> stage() {
        return Optional.ofNullable(this.stage);
    }

    /**
     * A human-readable title for the role.
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return A human-readable title for the role.
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    private IAMCustomRoleArgs() {}

    private IAMCustomRoleArgs(IAMCustomRoleArgs $) {
        this.description = $.description;
        this.orgId = $.orgId;
        this.permissions = $.permissions;
        this.roleId = $.roleId;
        this.stage = $.stage;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IAMCustomRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IAMCustomRoleArgs $;

        public Builder() {
            $ = new IAMCustomRoleArgs();
        }

        public Builder(IAMCustomRoleArgs defaults) {
            $ = new IAMCustomRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A human-readable description for the role.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human-readable description for the role.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param orgId The numeric ID of the organization in which you want to create a custom role.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The numeric ID of the organization in which you want to create a custom role.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param permissions The names of the permissions this role grants when bound in an IAM policy. At least one permission must be specified.
         * 
         * @return builder
         * 
         */
        public Builder permissions(Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions The names of the permissions this role grants when bound in an IAM policy. At least one permission must be specified.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions The names of the permissions this role grants when bound in an IAM policy. At least one permission must be specified.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param roleId The role id to use for this role.
         * 
         * @return builder
         * 
         */
        public Builder roleId(Output<String> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId The role id to use for this role.
         * 
         * @return builder
         * 
         */
        public Builder roleId(String roleId) {
            return roleId(Output.of(roleId));
        }

        /**
         * @param stage The current launch stage of the role.
         * Defaults to `GA`.
         * List of possible stages is [here](https://cloud.google.com/iam/reference/rest/v1/organizations.roles#Role.RoleLaunchStage).
         * 
         * @return builder
         * 
         */
        public Builder stage(@Nullable Output<String> stage) {
            $.stage = stage;
            return this;
        }

        /**
         * @param stage The current launch stage of the role.
         * Defaults to `GA`.
         * List of possible stages is [here](https://cloud.google.com/iam/reference/rest/v1/organizations.roles#Role.RoleLaunchStage).
         * 
         * @return builder
         * 
         */
        public Builder stage(String stage) {
            return stage(Output.of(stage));
        }

        /**
         * @param title A human-readable title for the role.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title A human-readable title for the role.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public IAMCustomRoleArgs build() {
            $.orgId = Objects.requireNonNull($.orgId, "expected parameter 'orgId' to be non-null");
            $.permissions = Objects.requireNonNull($.permissions, "expected parameter 'permissions' to be non-null");
            $.roleId = Objects.requireNonNull($.roleId, "expected parameter 'roleId' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            return $;
        }
    }

}
