// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.modelarmor;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.modelarmor.FloorsettingArgs;
import com.pulumi.gcp.modelarmor.inputs.FloorsettingState;
import com.pulumi.gcp.modelarmor.outputs.FloorsettingAiPlatformFloorSetting;
import com.pulumi.gcp.modelarmor.outputs.FloorsettingFilterConfig;
import com.pulumi.gcp.modelarmor.outputs.FloorsettingFloorSettingMetadata;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Model Armor floor settings define rules that dictate minimum requirements for all Model Armor templates created at a specific point in the Google Cloud resource hierarchy (that is, at an organization, folder, or project level). If there are
 * multiple floor settings that conflict with each other, the settings lower in the resource hierarchy take precedence
 * For more information, checkout https://cloud.google.com/security-command-center/docs/model_armor_floor_settings
 * 
 * ## Example Usage
 * 
 * ### Modelarmor Floorsetting Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.modelarmor.Floorsetting;
 * import com.pulumi.gcp.modelarmor.FloorsettingArgs;
 * import com.pulumi.gcp.modelarmor.inputs.FloorsettingFilterConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var floorsetting_basic = new Floorsetting("floorsetting-basic", FloorsettingArgs.builder()
 *             .parent("projects/my-project-name")
 *             .location("global")
 *             .filterConfig(FloorsettingFilterConfigArgs.builder()
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Modelarmor Floorsetting Filter Config
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.modelarmor.Floorsetting;
 * import com.pulumi.gcp.modelarmor.FloorsettingArgs;
 * import com.pulumi.gcp.modelarmor.inputs.FloorsettingFilterConfigArgs;
 * import com.pulumi.gcp.modelarmor.inputs.FloorsettingFilterConfigRaiSettingsArgs;
 * import com.pulumi.gcp.modelarmor.inputs.FloorsettingFilterConfigSdpSettingsArgs;
 * import com.pulumi.gcp.modelarmor.inputs.FloorsettingFilterConfigSdpSettingsBasicConfigArgs;
 * import com.pulumi.gcp.modelarmor.inputs.FloorsettingFilterConfigPiAndJailbreakFilterSettingsArgs;
 * import com.pulumi.gcp.modelarmor.inputs.FloorsettingFilterConfigMaliciousUriFilterSettingsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var floorsetting_filter_config = new Floorsetting("floorsetting-filter-config", FloorsettingArgs.builder()
 *             .location("global")
 *             .parent("project/my-project-name")
 *             .filterConfig(FloorsettingFilterConfigArgs.builder()
 *                 .raiSettings(FloorsettingFilterConfigRaiSettingsArgs.builder()
 *                     .raiFilters(FloorsettingFilterConfigRaiSettingsRaiFilterArgs.builder()
 *                         .filterType("DANGEROUS")
 *                         .confidenceLevel("MEDIUM_AND_ABOVE")
 *                         .build())
 *                     .build())
 *                 .sdpSettings(FloorsettingFilterConfigSdpSettingsArgs.builder()
 *                     .basicConfig(FloorsettingFilterConfigSdpSettingsBasicConfigArgs.builder()
 *                         .filterEnforcement("ENABLED")
 *                         .build())
 *                     .build())
 *                 .piAndJailbreakFilterSettings(FloorsettingFilterConfigPiAndJailbreakFilterSettingsArgs.builder()
 *                     .filterEnforcement("ENABLED")
 *                     .confidenceLevel("HIGH")
 *                     .build())
 *                 .maliciousUriFilterSettings(FloorsettingFilterConfigMaliciousUriFilterSettingsArgs.builder()
 *                     .filterEnforcement("ENABLED")
 *                     .build())
 *                 .build())
 *             .enableFloorSettingEnforcement(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Modelarmor Floorsetting Ai Platform Metadata
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.modelarmor.Floorsetting;
 * import com.pulumi.gcp.modelarmor.FloorsettingArgs;
 * import com.pulumi.gcp.modelarmor.inputs.FloorsettingFilterConfigArgs;
 * import com.pulumi.gcp.modelarmor.inputs.FloorsettingAiPlatformFloorSettingArgs;
 * import com.pulumi.gcp.modelarmor.inputs.FloorsettingFloorSettingMetadataArgs;
 * import com.pulumi.gcp.modelarmor.inputs.FloorsettingFloorSettingMetadataMultiLanguageDetectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var floorsetting_integrated_metadata = new Floorsetting("floorsetting-integrated-metadata", FloorsettingArgs.builder()
 *             .location("global")
 *             .parent("projects/my-project-name")
 *             .filterConfig(FloorsettingFilterConfigArgs.builder()
 *                 .build())
 *             .enableFloorSettingEnforcement(false)
 *             .aiPlatformFloorSetting(FloorsettingAiPlatformFloorSettingArgs.builder()
 *                 .inspectOnly(true)
 *                 .enableCloudLogging(true)
 *                 .build())
 *             .floorSettingMetadata(FloorsettingFloorSettingMetadataArgs.builder()
 *                 .multiLanguageDetection(FloorsettingFloorSettingMetadataMultiLanguageDetectionArgs.builder()
 *                     .enableMultiLanguageDetection(false)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Floorsetting can be imported using any of these accepted formats:
 * 
 * * `{{parent}}/locations/{{location}}/floorSetting`
 * 
 * * `{{parent}}/{{location}}`
 * 
 * When using the `pulumi import` command, Floorsetting can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:modelarmor/floorsetting:Floorsetting default {{parent}}/locations/{{location}}/floorSetting
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:modelarmor/floorsetting:Floorsetting default {{parent}}/{{location}}
 * ```
 * 
 */
@ResourceType(type="gcp:modelarmor/floorsetting:Floorsetting")
public class Floorsetting extends com.pulumi.resources.CustomResource {
    /**
     * AI Platform floor setting.
     * Structure is documented below.
     * 
     */
    @Export(name="aiPlatformFloorSetting", refs={FloorsettingAiPlatformFloorSetting.class}, tree="[0]")
    private Output</* @Nullable */ FloorsettingAiPlatformFloorSetting> aiPlatformFloorSetting;

    /**
     * @return AI Platform floor setting.
     * Structure is documented below.
     * 
     */
    public Output<Optional<FloorsettingAiPlatformFloorSetting>> aiPlatformFloorSetting() {
        return Codegen.optional(this.aiPlatformFloorSetting);
    }
    /**
     * [Output only] Create timestamp
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return [Output only] Create timestamp
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Floor Settings enforcement status.
     * 
     */
    @Export(name="enableFloorSettingEnforcement", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableFloorSettingEnforcement;

    /**
     * @return Floor Settings enforcement status.
     * 
     */
    public Output<Optional<Boolean>> enableFloorSettingEnforcement() {
        return Codegen.optional(this.enableFloorSettingEnforcement);
    }
    /**
     * Filters configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="filterConfig", refs={FloorsettingFilterConfig.class}, tree="[0]")
    private Output<FloorsettingFilterConfig> filterConfig;

    /**
     * @return Filters configuration.
     * Structure is documented below.
     * 
     */
    public Output<FloorsettingFilterConfig> filterConfig() {
        return this.filterConfig;
    }
    /**
     * Metadata to enable multi language detection via floor setting.
     * Structure is documented below.
     * 
     */
    @Export(name="floorSettingMetadata", refs={FloorsettingFloorSettingMetadata.class}, tree="[0]")
    private Output</* @Nullable */ FloorsettingFloorSettingMetadata> floorSettingMetadata;

    /**
     * @return Metadata to enable multi language detection via floor setting.
     * Structure is documented below.
     * 
     */
    public Output<Optional<FloorsettingFloorSettingMetadata>> floorSettingMetadata() {
        return Codegen.optional(this.floorSettingMetadata);
    }
    /**
     * List of integrated services for which the floor setting is applicable.
     * 
     */
    @Export(name="integratedServices", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> integratedServices;

    /**
     * @return List of integrated services for which the floor setting is applicable.
     * 
     */
    public Output<Optional<List<String>>> integratedServices() {
        return Codegen.optional(this.integratedServices);
    }
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Identifier. The resource name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. The resource name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Will be any one of these:
     * * `projects/{project}`
     * * `folders/{folder}`
     * * `organizations/{organizationId}`
     * 
     */
    @Export(name="parent", refs={String.class}, tree="[0]")
    private Output<String> parent;

    /**
     * @return Will be any one of these:
     * * `projects/{project}`
     * * `folders/{folder}`
     * * `organizations/{organizationId}`
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }
    /**
     * [Output only] Update timestamp
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return [Output only] Update timestamp
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Floorsetting(java.lang.String name) {
        this(name, FloorsettingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Floorsetting(java.lang.String name, FloorsettingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Floorsetting(java.lang.String name, FloorsettingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:modelarmor/floorsetting:Floorsetting", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Floorsetting(java.lang.String name, Output<java.lang.String> id, @Nullable FloorsettingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:modelarmor/floorsetting:Floorsetting", name, state, makeResourceOptions(options, id), false);
    }

    private static FloorsettingArgs makeArgs(FloorsettingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? FloorsettingArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Floorsetting get(java.lang.String name, Output<java.lang.String> id, @Nullable FloorsettingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Floorsetting(name, id, state, options);
    }
}
