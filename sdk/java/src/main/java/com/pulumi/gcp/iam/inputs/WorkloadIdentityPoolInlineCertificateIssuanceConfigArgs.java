// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs Empty = new WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs();

    /**
     * A required mapping of a cloud region to the CA pool resource located in that region used
     * for certificate issuance, adhering to these constraints:
     * * **Key format:** A supported cloud region name equivalent to the location identifier in
     *   the corresponding map entry&#39;s value.
     * * **Value format:** A valid CA pool resource path format like:
     *   `projects/{project}/locations/{location}/caPools/{ca_pool}`
     * * **Region Matching:** Workloads are ONLY issued certificates from CA pools within the
     *   same region. Also the CA pool region (in value) must match the workload&#39;s region (key).
     * 
     */
    @Import(name="caPools", required=true)
    private Output<Map<String,String>> caPools;

    /**
     * @return A required mapping of a cloud region to the CA pool resource located in that region used
     * for certificate issuance, adhering to these constraints:
     * * **Key format:** A supported cloud region name equivalent to the location identifier in
     *   the corresponding map entry&#39;s value.
     * * **Value format:** A valid CA pool resource path format like:
     *   `projects/{project}/locations/{location}/caPools/{ca_pool}`
     * * **Region Matching:** Workloads are ONLY issued certificates from CA pools within the
     *   same region. Also the CA pool region (in value) must match the workload&#39;s region (key).
     * 
     */
    public Output<Map<String,String>> caPools() {
        return this.caPools;
    }

    /**
     * Key algorithm to use when generating the key pair. This key pair will be used to create
     * the certificate. If unspecified, this will default to `ECDSA_P256`.
     * * `RSA_2048`: Specifies RSA with a 2048-bit modulus.
     * * `RSA_3072`: Specifies RSA with a 3072-bit modulus.
     * * `RSA_4096`: Specifies RSA with a 4096-bit modulus.
     * * `ECDSA_P256`: Specifies ECDSA with curve P256.
     * * `ECDSA_P384`: Specifies ECDSA with curve P384.
     *   Possible values are: `RSA_2048`, `RSA_3072`, `RSA_4096`, `ECDSA_P256`, `ECDSA_P384`.
     * 
     */
    @Import(name="keyAlgorithm")
    private @Nullable Output<String> keyAlgorithm;

    /**
     * @return Key algorithm to use when generating the key pair. This key pair will be used to create
     * the certificate. If unspecified, this will default to `ECDSA_P256`.
     * * `RSA_2048`: Specifies RSA with a 2048-bit modulus.
     * * `RSA_3072`: Specifies RSA with a 3072-bit modulus.
     * * `RSA_4096`: Specifies RSA with a 4096-bit modulus.
     * * `ECDSA_P256`: Specifies ECDSA with curve P256.
     * * `ECDSA_P384`: Specifies ECDSA with curve P384.
     *   Possible values are: `RSA_2048`, `RSA_3072`, `RSA_4096`, `ECDSA_P256`, `ECDSA_P384`.
     * 
     */
    public Optional<Output<String>> keyAlgorithm() {
        return Optional.ofNullable(this.keyAlgorithm);
    }

    /**
     * Lifetime of the workload certificates issued by the CA pool in seconds. Must be between
     * `86400s` (24 hours) to `2592000s` (30 days), ends in the suffix &#34;`s`&#34; (indicating seconds)
     * and is preceded by the number of seconds. If unspecified, this will be defaulted to
     * `86400s` (24 hours).
     * 
     */
    @Import(name="lifetime")
    private @Nullable Output<String> lifetime;

    /**
     * @return Lifetime of the workload certificates issued by the CA pool in seconds. Must be between
     * `86400s` (24 hours) to `2592000s` (30 days), ends in the suffix &#34;`s`&#34; (indicating seconds)
     * and is preceded by the number of seconds. If unspecified, this will be defaulted to
     * `86400s` (24 hours).
     * 
     */
    public Optional<Output<String>> lifetime() {
        return Optional.ofNullable(this.lifetime);
    }

    /**
     * Rotation window percentage indicating when certificate rotation should be initiated based
     * on remaining lifetime. Must be between `50` - `80`. If unspecified, this will be defaulted
     * to `50`.
     * 
     */
    @Import(name="rotationWindowPercentage")
    private @Nullable Output<Integer> rotationWindowPercentage;

    /**
     * @return Rotation window percentage indicating when certificate rotation should be initiated based
     * on remaining lifetime. Must be between `50` - `80`. If unspecified, this will be defaulted
     * to `50`.
     * 
     */
    public Optional<Output<Integer>> rotationWindowPercentage() {
        return Optional.ofNullable(this.rotationWindowPercentage);
    }

    private WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs() {}

    private WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs(WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs $) {
        this.caPools = $.caPools;
        this.keyAlgorithm = $.keyAlgorithm;
        this.lifetime = $.lifetime;
        this.rotationWindowPercentage = $.rotationWindowPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs $;

        public Builder() {
            $ = new WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs();
        }

        public Builder(WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs defaults) {
            $ = new WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caPools A required mapping of a cloud region to the CA pool resource located in that region used
         * for certificate issuance, adhering to these constraints:
         * * **Key format:** A supported cloud region name equivalent to the location identifier in
         *   the corresponding map entry&#39;s value.
         * * **Value format:** A valid CA pool resource path format like:
         *   `projects/{project}/locations/{location}/caPools/{ca_pool}`
         * * **Region Matching:** Workloads are ONLY issued certificates from CA pools within the
         *   same region. Also the CA pool region (in value) must match the workload&#39;s region (key).
         * 
         * @return builder
         * 
         */
        public Builder caPools(Output<Map<String,String>> caPools) {
            $.caPools = caPools;
            return this;
        }

        /**
         * @param caPools A required mapping of a cloud region to the CA pool resource located in that region used
         * for certificate issuance, adhering to these constraints:
         * * **Key format:** A supported cloud region name equivalent to the location identifier in
         *   the corresponding map entry&#39;s value.
         * * **Value format:** A valid CA pool resource path format like:
         *   `projects/{project}/locations/{location}/caPools/{ca_pool}`
         * * **Region Matching:** Workloads are ONLY issued certificates from CA pools within the
         *   same region. Also the CA pool region (in value) must match the workload&#39;s region (key).
         * 
         * @return builder
         * 
         */
        public Builder caPools(Map<String,String> caPools) {
            return caPools(Output.of(caPools));
        }

        /**
         * @param keyAlgorithm Key algorithm to use when generating the key pair. This key pair will be used to create
         * the certificate. If unspecified, this will default to `ECDSA_P256`.
         * * `RSA_2048`: Specifies RSA with a 2048-bit modulus.
         * * `RSA_3072`: Specifies RSA with a 3072-bit modulus.
         * * `RSA_4096`: Specifies RSA with a 4096-bit modulus.
         * * `ECDSA_P256`: Specifies ECDSA with curve P256.
         * * `ECDSA_P384`: Specifies ECDSA with curve P384.
         *   Possible values are: `RSA_2048`, `RSA_3072`, `RSA_4096`, `ECDSA_P256`, `ECDSA_P384`.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(@Nullable Output<String> keyAlgorithm) {
            $.keyAlgorithm = keyAlgorithm;
            return this;
        }

        /**
         * @param keyAlgorithm Key algorithm to use when generating the key pair. This key pair will be used to create
         * the certificate. If unspecified, this will default to `ECDSA_P256`.
         * * `RSA_2048`: Specifies RSA with a 2048-bit modulus.
         * * `RSA_3072`: Specifies RSA with a 3072-bit modulus.
         * * `RSA_4096`: Specifies RSA with a 4096-bit modulus.
         * * `ECDSA_P256`: Specifies ECDSA with curve P256.
         * * `ECDSA_P384`: Specifies ECDSA with curve P384.
         *   Possible values are: `RSA_2048`, `RSA_3072`, `RSA_4096`, `ECDSA_P256`, `ECDSA_P384`.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(String keyAlgorithm) {
            return keyAlgorithm(Output.of(keyAlgorithm));
        }

        /**
         * @param lifetime Lifetime of the workload certificates issued by the CA pool in seconds. Must be between
         * `86400s` (24 hours) to `2592000s` (30 days), ends in the suffix &#34;`s`&#34; (indicating seconds)
         * and is preceded by the number of seconds. If unspecified, this will be defaulted to
         * `86400s` (24 hours).
         * 
         * @return builder
         * 
         */
        public Builder lifetime(@Nullable Output<String> lifetime) {
            $.lifetime = lifetime;
            return this;
        }

        /**
         * @param lifetime Lifetime of the workload certificates issued by the CA pool in seconds. Must be between
         * `86400s` (24 hours) to `2592000s` (30 days), ends in the suffix &#34;`s`&#34; (indicating seconds)
         * and is preceded by the number of seconds. If unspecified, this will be defaulted to
         * `86400s` (24 hours).
         * 
         * @return builder
         * 
         */
        public Builder lifetime(String lifetime) {
            return lifetime(Output.of(lifetime));
        }

        /**
         * @param rotationWindowPercentage Rotation window percentage indicating when certificate rotation should be initiated based
         * on remaining lifetime. Must be between `50` - `80`. If unspecified, this will be defaulted
         * to `50`.
         * 
         * @return builder
         * 
         */
        public Builder rotationWindowPercentage(@Nullable Output<Integer> rotationWindowPercentage) {
            $.rotationWindowPercentage = rotationWindowPercentage;
            return this;
        }

        /**
         * @param rotationWindowPercentage Rotation window percentage indicating when certificate rotation should be initiated based
         * on remaining lifetime. Must be between `50` - `80`. If unspecified, this will be defaulted
         * to `50`.
         * 
         * @return builder
         * 
         */
        public Builder rotationWindowPercentage(Integer rotationWindowPercentage) {
            return rotationWindowPercentage(Output.of(rotationWindowPercentage));
        }

        public WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs build() {
            if ($.caPools == null) {
                throw new MissingRequiredPropertyException("WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs", "caPools");
            }
            return $;
        }
    }

}
