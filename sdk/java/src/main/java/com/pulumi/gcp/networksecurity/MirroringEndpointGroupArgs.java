// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MirroringEndpointGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final MirroringEndpointGroupArgs Empty = new MirroringEndpointGroupArgs();

    /**
     * User-provided description of the endpoint group.
     * Used as additional context for the endpoint group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User-provided description of the endpoint group.
     * Used as additional context for the endpoint group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Labels are key/value pairs that help to organize and filter resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels are key/value pairs that help to organize and filter resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The cloud location of the endpoint group, currently restricted to `global`.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The cloud location of the endpoint group, currently restricted to `global`.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The deployment group that this DIRECT endpoint group is connected to, for example:
     * `projects/123456789/locations/global/mirroringDeploymentGroups/my-dg`.
     * See https://google.aip.dev/124.
     * 
     */
    @Import(name="mirroringDeploymentGroup", required=true)
    private Output<String> mirroringDeploymentGroup;

    /**
     * @return The deployment group that this DIRECT endpoint group is connected to, for example:
     * `projects/123456789/locations/global/mirroringDeploymentGroups/my-dg`.
     * See https://google.aip.dev/124.
     * 
     */
    public Output<String> mirroringDeploymentGroup() {
        return this.mirroringDeploymentGroup;
    }

    /**
     * The ID to use for the endpoint group, which will become the final component
     * of the endpoint group&#39;s resource name.
     * 
     */
    @Import(name="mirroringEndpointGroupId", required=true)
    private Output<String> mirroringEndpointGroupId;

    /**
     * @return The ID to use for the endpoint group, which will become the final component
     * of the endpoint group&#39;s resource name.
     * 
     */
    public Output<String> mirroringEndpointGroupId() {
        return this.mirroringEndpointGroupId;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private MirroringEndpointGroupArgs() {}

    private MirroringEndpointGroupArgs(MirroringEndpointGroupArgs $) {
        this.description = $.description;
        this.labels = $.labels;
        this.location = $.location;
        this.mirroringDeploymentGroup = $.mirroringDeploymentGroup;
        this.mirroringEndpointGroupId = $.mirroringEndpointGroupId;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MirroringEndpointGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MirroringEndpointGroupArgs $;

        public Builder() {
            $ = new MirroringEndpointGroupArgs();
        }

        public Builder(MirroringEndpointGroupArgs defaults) {
            $ = new MirroringEndpointGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description User-provided description of the endpoint group.
         * Used as additional context for the endpoint group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User-provided description of the endpoint group.
         * Used as additional context for the endpoint group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param labels Labels are key/value pairs that help to organize and filter resources.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels are key/value pairs that help to organize and filter resources.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The cloud location of the endpoint group, currently restricted to `global`.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The cloud location of the endpoint group, currently restricted to `global`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param mirroringDeploymentGroup The deployment group that this DIRECT endpoint group is connected to, for example:
         * `projects/123456789/locations/global/mirroringDeploymentGroups/my-dg`.
         * See https://google.aip.dev/124.
         * 
         * @return builder
         * 
         */
        public Builder mirroringDeploymentGroup(Output<String> mirroringDeploymentGroup) {
            $.mirroringDeploymentGroup = mirroringDeploymentGroup;
            return this;
        }

        /**
         * @param mirroringDeploymentGroup The deployment group that this DIRECT endpoint group is connected to, for example:
         * `projects/123456789/locations/global/mirroringDeploymentGroups/my-dg`.
         * See https://google.aip.dev/124.
         * 
         * @return builder
         * 
         */
        public Builder mirroringDeploymentGroup(String mirroringDeploymentGroup) {
            return mirroringDeploymentGroup(Output.of(mirroringDeploymentGroup));
        }

        /**
         * @param mirroringEndpointGroupId The ID to use for the endpoint group, which will become the final component
         * of the endpoint group&#39;s resource name.
         * 
         * @return builder
         * 
         */
        public Builder mirroringEndpointGroupId(Output<String> mirroringEndpointGroupId) {
            $.mirroringEndpointGroupId = mirroringEndpointGroupId;
            return this;
        }

        /**
         * @param mirroringEndpointGroupId The ID to use for the endpoint group, which will become the final component
         * of the endpoint group&#39;s resource name.
         * 
         * @return builder
         * 
         */
        public Builder mirroringEndpointGroupId(String mirroringEndpointGroupId) {
            return mirroringEndpointGroupId(Output.of(mirroringEndpointGroupId));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public MirroringEndpointGroupArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("MirroringEndpointGroupArgs", "location");
            }
            if ($.mirroringDeploymentGroup == null) {
                throw new MissingRequiredPropertyException("MirroringEndpointGroupArgs", "mirroringDeploymentGroup");
            }
            if ($.mirroringEndpointGroupId == null) {
                throw new MissingRequiredPropertyException("MirroringEndpointGroupArgs", "mirroringEndpointGroupId");
            }
            return $;
        }
    }

}
