// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.developerconnect.inputs.AccountConnectorProviderOauthConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountConnectorArgs Empty = new AccountConnectorArgs();

    /**
     * Required. The ID to use for the AccountConnector, which will become the final
     * component of the AccountConnector&#39;s resource name. Its format should adhere
     * to https://google.aip.dev/122#resource-id-segments Names must be unique
     * per-project per-location.
     * 
     */
    @Import(name="accountConnectorId", required=true)
    private Output<String> accountConnectorId;

    /**
     * @return Required. The ID to use for the AccountConnector, which will become the final
     * component of the AccountConnector&#39;s resource name. Its format should adhere
     * to https://google.aip.dev/122#resource-id-segments Names must be unique
     * per-project per-location.
     * 
     */
    public Output<String> accountConnectorId() {
        return this.accountConnectorId;
    }

    /**
     * Optional. Allows users to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Optional. Allows users to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * ProviderOAuthConfig is the OAuth config for a provider.
     * Structure is documented below.
     * 
     */
    @Import(name="providerOauthConfig")
    private @Nullable Output<AccountConnectorProviderOauthConfigArgs> providerOauthConfig;

    /**
     * @return ProviderOAuthConfig is the OAuth config for a provider.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AccountConnectorProviderOauthConfigArgs>> providerOauthConfig() {
        return Optional.ofNullable(this.providerOauthConfig);
    }

    private AccountConnectorArgs() {}

    private AccountConnectorArgs(AccountConnectorArgs $) {
        this.accountConnectorId = $.accountConnectorId;
        this.annotations = $.annotations;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.providerOauthConfig = $.providerOauthConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountConnectorArgs $;

        public Builder() {
            $ = new AccountConnectorArgs();
        }

        public Builder(AccountConnectorArgs defaults) {
            $ = new AccountConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountConnectorId Required. The ID to use for the AccountConnector, which will become the final
         * component of the AccountConnector&#39;s resource name. Its format should adhere
         * to https://google.aip.dev/122#resource-id-segments Names must be unique
         * per-project per-location.
         * 
         * @return builder
         * 
         */
        public Builder accountConnectorId(Output<String> accountConnectorId) {
            $.accountConnectorId = accountConnectorId;
            return this;
        }

        /**
         * @param accountConnectorId Required. The ID to use for the AccountConnector, which will become the final
         * component of the AccountConnector&#39;s resource name. Its format should adhere
         * to https://google.aip.dev/122#resource-id-segments Names must be unique
         * per-project per-location.
         * 
         * @return builder
         * 
         */
        public Builder accountConnectorId(String accountConnectorId) {
            return accountConnectorId(Output.of(accountConnectorId));
        }

        /**
         * @param annotations Optional. Allows users to store small amounts of arbitrary data.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Optional. Allows users to store small amounts of arbitrary data.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param labels Optional. Labels as key value pairs
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels as key value pairs
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param providerOauthConfig ProviderOAuthConfig is the OAuth config for a provider.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder providerOauthConfig(@Nullable Output<AccountConnectorProviderOauthConfigArgs> providerOauthConfig) {
            $.providerOauthConfig = providerOauthConfig;
            return this;
        }

        /**
         * @param providerOauthConfig ProviderOAuthConfig is the OAuth config for a provider.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder providerOauthConfig(AccountConnectorProviderOauthConfigArgs providerOauthConfig) {
            return providerOauthConfig(Output.of(providerOauthConfig));
        }

        public AccountConnectorArgs build() {
            if ($.accountConnectorId == null) {
                throw new MissingRequiredPropertyException("AccountConnectorArgs", "accountConnectorId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("AccountConnectorArgs", "location");
            }
            return $;
        }
    }

}
