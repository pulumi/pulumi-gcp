// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.beyondcorp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.beyondcorp.inputs.AppConnectorPrincipalInfoArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppConnectorArgs Empty = new AppConnectorArgs();

    /**
     * An arbitrary user-provided name for the AppConnector.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return An arbitrary user-provided name for the AppConnector.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Resource labels to represent user provided metadata.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Resource labels to represent user provided metadata.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * ID of the AppConnector.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return ID of the AppConnector.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Principal information about the Identity of the AppConnector.
     * Structure is documented below.
     * 
     */
    @Import(name="principalInfo", required=true)
    private Output<AppConnectorPrincipalInfoArgs> principalInfo;

    /**
     * @return Principal information about the Identity of the AppConnector.
     * Structure is documented below.
     * 
     */
    public Output<AppConnectorPrincipalInfoArgs> principalInfo() {
        return this.principalInfo;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The region of the AppConnector.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region of the AppConnector.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private AppConnectorArgs() {}

    private AppConnectorArgs(AppConnectorArgs $) {
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.name = $.name;
        this.principalInfo = $.principalInfo;
        this.project = $.project;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppConnectorArgs $;

        public Builder() {
            $ = new AppConnectorArgs();
        }

        public Builder(AppConnectorArgs defaults) {
            $ = new AppConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName An arbitrary user-provided name for the AppConnector.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName An arbitrary user-provided name for the AppConnector.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param labels Resource labels to represent user provided metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Resource labels to represent user provided metadata.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name ID of the AppConnector.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name ID of the AppConnector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param principalInfo Principal information about the Identity of the AppConnector.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder principalInfo(Output<AppConnectorPrincipalInfoArgs> principalInfo) {
            $.principalInfo = principalInfo;
            return this;
        }

        /**
         * @param principalInfo Principal information about the Identity of the AppConnector.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder principalInfo(AppConnectorPrincipalInfoArgs principalInfo) {
            return principalInfo(Output.of(principalInfo));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region The region of the AppConnector.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region of the AppConnector.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public AppConnectorArgs build() {
            $.principalInfo = Objects.requireNonNull($.principalInfo, "expected parameter 'principalInfo' to be non-null");
            return $;
        }
    }

}
