// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionUrlMapPathMatcherDefaultRouteActionUrlRewrite {
    /**
     * @return Before forwarding the request to the selected service, the request&#39;s host header is replaced with contents of hostRewrite.
     * The value must be from 1 to 255 characters.
     * 
     */
    private @Nullable String hostRewrite;
    /**
     * @return Before forwarding the request to the selected backend service, the matching portion of the request&#39;s path is replaced by pathPrefixRewrite.
     * The value must be from 1 to 1024 characters.
     * 
     */
    private @Nullable String pathPrefixRewrite;
    /**
     * @return If specified, the pattern rewrites the URL path (based on the :path header) using the HTTP template syntax.
     * A corresponding pathTemplateMatch must be specified. Any template variables must exist in the pathTemplateMatch field.
     * * At least one variable must be specified in the pathTemplateMatch field
     * * You can omit variables from the rewritten URL
     * * The * and ** operators cannot be matched unless they have a corresponding variable name - e.g. {format=*} or {var=**}.
     *   For example, a pathTemplateMatch of /static/{format=**} could be rewritten as /static/content/{format} to prefix
     *   /content to the URL. Variables can also be re-ordered in a rewrite, so that /{country}/{format}/{suffix=**} can be
     *   rewritten as /content/{format}/{country}/{suffix}.
     *   At least one non-empty routeRules[].matchRules[].path_template_match is required.
     *   Only one of pathPrefixRewrite or pathTemplateRewrite may be specified.
     * 
     */
    private @Nullable String pathTemplateRewrite;

    private RegionUrlMapPathMatcherDefaultRouteActionUrlRewrite() {}
    /**
     * @return Before forwarding the request to the selected service, the request&#39;s host header is replaced with contents of hostRewrite.
     * The value must be from 1 to 255 characters.
     * 
     */
    public Optional<String> hostRewrite() {
        return Optional.ofNullable(this.hostRewrite);
    }
    /**
     * @return Before forwarding the request to the selected backend service, the matching portion of the request&#39;s path is replaced by pathPrefixRewrite.
     * The value must be from 1 to 1024 characters.
     * 
     */
    public Optional<String> pathPrefixRewrite() {
        return Optional.ofNullable(this.pathPrefixRewrite);
    }
    /**
     * @return If specified, the pattern rewrites the URL path (based on the :path header) using the HTTP template syntax.
     * A corresponding pathTemplateMatch must be specified. Any template variables must exist in the pathTemplateMatch field.
     * * At least one variable must be specified in the pathTemplateMatch field
     * * You can omit variables from the rewritten URL
     * * The * and ** operators cannot be matched unless they have a corresponding variable name - e.g. {format=*} or {var=**}.
     *   For example, a pathTemplateMatch of /static/{format=**} could be rewritten as /static/content/{format} to prefix
     *   /content to the URL. Variables can also be re-ordered in a rewrite, so that /{country}/{format}/{suffix=**} can be
     *   rewritten as /content/{format}/{country}/{suffix}.
     *   At least one non-empty routeRules[].matchRules[].path_template_match is required.
     *   Only one of pathPrefixRewrite or pathTemplateRewrite may be specified.
     * 
     */
    public Optional<String> pathTemplateRewrite() {
        return Optional.ofNullable(this.pathTemplateRewrite);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionUrlMapPathMatcherDefaultRouteActionUrlRewrite defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String hostRewrite;
        private @Nullable String pathPrefixRewrite;
        private @Nullable String pathTemplateRewrite;
        public Builder() {}
        public Builder(RegionUrlMapPathMatcherDefaultRouteActionUrlRewrite defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostRewrite = defaults.hostRewrite;
    	      this.pathPrefixRewrite = defaults.pathPrefixRewrite;
    	      this.pathTemplateRewrite = defaults.pathTemplateRewrite;
        }

        @CustomType.Setter
        public Builder hostRewrite(@Nullable String hostRewrite) {

            this.hostRewrite = hostRewrite;
            return this;
        }
        @CustomType.Setter
        public Builder pathPrefixRewrite(@Nullable String pathPrefixRewrite) {

            this.pathPrefixRewrite = pathPrefixRewrite;
            return this;
        }
        @CustomType.Setter
        public Builder pathTemplateRewrite(@Nullable String pathTemplateRewrite) {

            this.pathTemplateRewrite = pathTemplateRewrite;
            return this;
        }
        public RegionUrlMapPathMatcherDefaultRouteActionUrlRewrite build() {
            final var _resultValue = new RegionUrlMapPathMatcherDefaultRouteActionUrlRewrite();
            _resultValue.hostRewrite = hostRewrite;
            _resultValue.pathPrefixRewrite = pathPrefixRewrite;
            _resultValue.pathTemplateRewrite = pathTemplateRewrite;
            return _resultValue;
        }
    }
}
