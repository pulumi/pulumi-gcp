// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.gkeonprem.outputs.VMwareNodePoolConfigTaint;
import com.pulumi.gcp.gkeonprem.outputs.VMwareNodePoolConfigVsphereConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VMwareNodePoolConfig {
    /**
     * @return VMware disk size to be used during creation.
     * 
     */
    private @Nullable Integer bootDiskSizeGb;
    /**
     * @return The number of CPUs for each node in the node pool.
     * 
     */
    private @Nullable Integer cpus;
    /**
     * @return Allow node pool traffic to be load balanced. Only works for clusters with
     * MetalLB load balancers.
     * 
     */
    private @Nullable Boolean enableLoadBalancer;
    /**
     * @return The OS image name in vCenter, only valid when using Windows.
     * 
     */
    private @Nullable String image;
    /**
     * @return The OS image to be used for each node in a node pool.
     * Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
     * 
     */
    private String imageType;
    /**
     * @return The map of Kubernetes labels (key/value pairs) to be applied to each node.
     * These will added in addition to any default label(s) that
     * Kubernetes may apply to the node.
     * In case of conflict in label keys, the applied set may differ depending on
     * the Kubernetes version -- it&#39;s best to assume the behavior is undefined
     * and conflicts should be avoided.
     * 
     */
    private @Nullable Map<String,String> labels;
    /**
     * @return The megabytes of memory for each node in the node pool.
     * 
     */
    private @Nullable Integer memoryMb;
    /**
     * @return The number of nodes in the node pool.
     * 
     */
    private @Nullable Integer replicas;
    /**
     * @return The initial taints assigned to nodes of this node pool.
     * Structure is documented below.
     * 
     */
    private @Nullable List<VMwareNodePoolConfigTaint> taints;
    /**
     * @return (Output)
     * Specifies the vSphere config for node pool.
     * Structure is documented below.
     * 
     */
    private @Nullable List<VMwareNodePoolConfigVsphereConfig> vsphereConfigs;

    private VMwareNodePoolConfig() {}
    /**
     * @return VMware disk size to be used during creation.
     * 
     */
    public Optional<Integer> bootDiskSizeGb() {
        return Optional.ofNullable(this.bootDiskSizeGb);
    }
    /**
     * @return The number of CPUs for each node in the node pool.
     * 
     */
    public Optional<Integer> cpus() {
        return Optional.ofNullable(this.cpus);
    }
    /**
     * @return Allow node pool traffic to be load balanced. Only works for clusters with
     * MetalLB load balancers.
     * 
     */
    public Optional<Boolean> enableLoadBalancer() {
        return Optional.ofNullable(this.enableLoadBalancer);
    }
    /**
     * @return The OS image name in vCenter, only valid when using Windows.
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return The OS image to be used for each node in a node pool.
     * Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
     * 
     */
    public String imageType() {
        return this.imageType;
    }
    /**
     * @return The map of Kubernetes labels (key/value pairs) to be applied to each node.
     * These will added in addition to any default label(s) that
     * Kubernetes may apply to the node.
     * In case of conflict in label keys, the applied set may differ depending on
     * the Kubernetes version -- it&#39;s best to assume the behavior is undefined
     * and conflicts should be avoided.
     * 
     */
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return The megabytes of memory for each node in the node pool.
     * 
     */
    public Optional<Integer> memoryMb() {
        return Optional.ofNullable(this.memoryMb);
    }
    /**
     * @return The number of nodes in the node pool.
     * 
     */
    public Optional<Integer> replicas() {
        return Optional.ofNullable(this.replicas);
    }
    /**
     * @return The initial taints assigned to nodes of this node pool.
     * Structure is documented below.
     * 
     */
    public List<VMwareNodePoolConfigTaint> taints() {
        return this.taints == null ? List.of() : this.taints;
    }
    /**
     * @return (Output)
     * Specifies the vSphere config for node pool.
     * Structure is documented below.
     * 
     */
    public List<VMwareNodePoolConfigVsphereConfig> vsphereConfigs() {
        return this.vsphereConfigs == null ? List.of() : this.vsphereConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VMwareNodePoolConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer bootDiskSizeGb;
        private @Nullable Integer cpus;
        private @Nullable Boolean enableLoadBalancer;
        private @Nullable String image;
        private String imageType;
        private @Nullable Map<String,String> labels;
        private @Nullable Integer memoryMb;
        private @Nullable Integer replicas;
        private @Nullable List<VMwareNodePoolConfigTaint> taints;
        private @Nullable List<VMwareNodePoolConfigVsphereConfig> vsphereConfigs;
        public Builder() {}
        public Builder(VMwareNodePoolConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootDiskSizeGb = defaults.bootDiskSizeGb;
    	      this.cpus = defaults.cpus;
    	      this.enableLoadBalancer = defaults.enableLoadBalancer;
    	      this.image = defaults.image;
    	      this.imageType = defaults.imageType;
    	      this.labels = defaults.labels;
    	      this.memoryMb = defaults.memoryMb;
    	      this.replicas = defaults.replicas;
    	      this.taints = defaults.taints;
    	      this.vsphereConfigs = defaults.vsphereConfigs;
        }

        @CustomType.Setter
        public Builder bootDiskSizeGb(@Nullable Integer bootDiskSizeGb) {
            this.bootDiskSizeGb = bootDiskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder cpus(@Nullable Integer cpus) {
            this.cpus = cpus;
            return this;
        }
        @CustomType.Setter
        public Builder enableLoadBalancer(@Nullable Boolean enableLoadBalancer) {
            this.enableLoadBalancer = enableLoadBalancer;
            return this;
        }
        @CustomType.Setter
        public Builder image(@Nullable String image) {
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder imageType(String imageType) {
            this.imageType = Objects.requireNonNull(imageType);
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder memoryMb(@Nullable Integer memoryMb) {
            this.memoryMb = memoryMb;
            return this;
        }
        @CustomType.Setter
        public Builder replicas(@Nullable Integer replicas) {
            this.replicas = replicas;
            return this;
        }
        @CustomType.Setter
        public Builder taints(@Nullable List<VMwareNodePoolConfigTaint> taints) {
            this.taints = taints;
            return this;
        }
        public Builder taints(VMwareNodePoolConfigTaint... taints) {
            return taints(List.of(taints));
        }
        @CustomType.Setter
        public Builder vsphereConfigs(@Nullable List<VMwareNodePoolConfigVsphereConfig> vsphereConfigs) {
            this.vsphereConfigs = vsphereConfigs;
            return this;
        }
        public Builder vsphereConfigs(VMwareNodePoolConfigVsphereConfig... vsphereConfigs) {
            return vsphereConfigs(List.of(vsphereConfigs));
        }
        public VMwareNodePoolConfig build() {
            final var o = new VMwareNodePoolConfig();
            o.bootDiskSizeGb = bootDiskSizeGb;
            o.cpus = cpus;
            o.enableLoadBalancer = enableLoadBalancer;
            o.image = image;
            o.imageType = imageType;
            o.labels = labels;
            o.memoryMb = memoryMb;
            o.replicas = replicas;
            o.taints = taints;
            o.vsphereConfigs = vsphereConfigs;
            return o;
        }
    }
}
