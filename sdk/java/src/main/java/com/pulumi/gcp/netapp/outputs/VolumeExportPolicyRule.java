// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VolumeExportPolicyRule {
    /**
     * @return Defines the access type for clients matching the `allowedClients` specification.
     * Possible values are: `READ_ONLY`, `READ_WRITE`, `READ_NONE`.
     * 
     */
    private @Nullable String accessType;
    /**
     * @return Defines the client ingress specification (allowed clients) as a comma separated list with IPv4 CIDRs or IPv4 host addresses.
     * 
     */
    private @Nullable String allowedClients;
    /**
     * @return If enabled, the root user (UID = 0) of the specified clients doesn&#39;t get mapped to nobody (UID = 65534). This is also known as no_root_squash.
     * 
     */
    private @Nullable String hasRootAccess;
    /**
     * @return If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;authentication&#39; kerberos security mode.
     * 
     */
    private @Nullable Boolean kerberos5ReadOnly;
    /**
     * @return If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;authentication&#39; kerberos security mode. The &#39;kerberos5ReadOnly&#39; value is ignored if this is enabled.
     * 
     */
    private @Nullable Boolean kerberos5ReadWrite;
    /**
     * @return If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;integrity&#39; kerberos security mode.
     * 
     */
    private @Nullable Boolean kerberos5iReadOnly;
    /**
     * @return If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;integrity&#39; kerberos security mode. The &#39;kerberos5iReadOnly&#39; value is ignored if this is enabled.
     * 
     */
    private @Nullable Boolean kerberos5iReadWrite;
    /**
     * @return If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;privacy&#39; kerberos security mode.
     * 
     */
    private @Nullable Boolean kerberos5pReadOnly;
    /**
     * @return If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;privacy&#39; kerberos security mode. The &#39;kerberos5pReadOnly&#39; value is ignored if this is enabled.
     * 
     */
    private @Nullable Boolean kerberos5pReadWrite;
    /**
     * @return Enable to apply the export rule to NFSV3 clients.
     * 
     */
    private @Nullable Boolean nfsv3;
    /**
     * @return Enable to apply the export rule to NFSV4.1 clients.
     * 
     */
    private @Nullable Boolean nfsv4;

    private VolumeExportPolicyRule() {}
    /**
     * @return Defines the access type for clients matching the `allowedClients` specification.
     * Possible values are: `READ_ONLY`, `READ_WRITE`, `READ_NONE`.
     * 
     */
    public Optional<String> accessType() {
        return Optional.ofNullable(this.accessType);
    }
    /**
     * @return Defines the client ingress specification (allowed clients) as a comma separated list with IPv4 CIDRs or IPv4 host addresses.
     * 
     */
    public Optional<String> allowedClients() {
        return Optional.ofNullable(this.allowedClients);
    }
    /**
     * @return If enabled, the root user (UID = 0) of the specified clients doesn&#39;t get mapped to nobody (UID = 65534). This is also known as no_root_squash.
     * 
     */
    public Optional<String> hasRootAccess() {
        return Optional.ofNullable(this.hasRootAccess);
    }
    /**
     * @return If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;authentication&#39; kerberos security mode.
     * 
     */
    public Optional<Boolean> kerberos5ReadOnly() {
        return Optional.ofNullable(this.kerberos5ReadOnly);
    }
    /**
     * @return If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;authentication&#39; kerberos security mode. The &#39;kerberos5ReadOnly&#39; value is ignored if this is enabled.
     * 
     */
    public Optional<Boolean> kerberos5ReadWrite() {
        return Optional.ofNullable(this.kerberos5ReadWrite);
    }
    /**
     * @return If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;integrity&#39; kerberos security mode.
     * 
     */
    public Optional<Boolean> kerberos5iReadOnly() {
        return Optional.ofNullable(this.kerberos5iReadOnly);
    }
    /**
     * @return If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;integrity&#39; kerberos security mode. The &#39;kerberos5iReadOnly&#39; value is ignored if this is enabled.
     * 
     */
    public Optional<Boolean> kerberos5iReadWrite() {
        return Optional.ofNullable(this.kerberos5iReadWrite);
    }
    /**
     * @return If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;privacy&#39; kerberos security mode.
     * 
     */
    public Optional<Boolean> kerberos5pReadOnly() {
        return Optional.ofNullable(this.kerberos5pReadOnly);
    }
    /**
     * @return If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;privacy&#39; kerberos security mode. The &#39;kerberos5pReadOnly&#39; value is ignored if this is enabled.
     * 
     */
    public Optional<Boolean> kerberos5pReadWrite() {
        return Optional.ofNullable(this.kerberos5pReadWrite);
    }
    /**
     * @return Enable to apply the export rule to NFSV3 clients.
     * 
     */
    public Optional<Boolean> nfsv3() {
        return Optional.ofNullable(this.nfsv3);
    }
    /**
     * @return Enable to apply the export rule to NFSV4.1 clients.
     * 
     */
    public Optional<Boolean> nfsv4() {
        return Optional.ofNullable(this.nfsv4);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeExportPolicyRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessType;
        private @Nullable String allowedClients;
        private @Nullable String hasRootAccess;
        private @Nullable Boolean kerberos5ReadOnly;
        private @Nullable Boolean kerberos5ReadWrite;
        private @Nullable Boolean kerberos5iReadOnly;
        private @Nullable Boolean kerberos5iReadWrite;
        private @Nullable Boolean kerberos5pReadOnly;
        private @Nullable Boolean kerberos5pReadWrite;
        private @Nullable Boolean nfsv3;
        private @Nullable Boolean nfsv4;
        public Builder() {}
        public Builder(VolumeExportPolicyRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessType = defaults.accessType;
    	      this.allowedClients = defaults.allowedClients;
    	      this.hasRootAccess = defaults.hasRootAccess;
    	      this.kerberos5ReadOnly = defaults.kerberos5ReadOnly;
    	      this.kerberos5ReadWrite = defaults.kerberos5ReadWrite;
    	      this.kerberos5iReadOnly = defaults.kerberos5iReadOnly;
    	      this.kerberos5iReadWrite = defaults.kerberos5iReadWrite;
    	      this.kerberos5pReadOnly = defaults.kerberos5pReadOnly;
    	      this.kerberos5pReadWrite = defaults.kerberos5pReadWrite;
    	      this.nfsv3 = defaults.nfsv3;
    	      this.nfsv4 = defaults.nfsv4;
        }

        @CustomType.Setter
        public Builder accessType(@Nullable String accessType) {

            this.accessType = accessType;
            return this;
        }
        @CustomType.Setter
        public Builder allowedClients(@Nullable String allowedClients) {

            this.allowedClients = allowedClients;
            return this;
        }
        @CustomType.Setter
        public Builder hasRootAccess(@Nullable String hasRootAccess) {

            this.hasRootAccess = hasRootAccess;
            return this;
        }
        @CustomType.Setter
        public Builder kerberos5ReadOnly(@Nullable Boolean kerberos5ReadOnly) {

            this.kerberos5ReadOnly = kerberos5ReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder kerberos5ReadWrite(@Nullable Boolean kerberos5ReadWrite) {

            this.kerberos5ReadWrite = kerberos5ReadWrite;
            return this;
        }
        @CustomType.Setter
        public Builder kerberos5iReadOnly(@Nullable Boolean kerberos5iReadOnly) {

            this.kerberos5iReadOnly = kerberos5iReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder kerberos5iReadWrite(@Nullable Boolean kerberos5iReadWrite) {

            this.kerberos5iReadWrite = kerberos5iReadWrite;
            return this;
        }
        @CustomType.Setter
        public Builder kerberos5pReadOnly(@Nullable Boolean kerberos5pReadOnly) {

            this.kerberos5pReadOnly = kerberos5pReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder kerberos5pReadWrite(@Nullable Boolean kerberos5pReadWrite) {

            this.kerberos5pReadWrite = kerberos5pReadWrite;
            return this;
        }
        @CustomType.Setter
        public Builder nfsv3(@Nullable Boolean nfsv3) {

            this.nfsv3 = nfsv3;
            return this;
        }
        @CustomType.Setter
        public Builder nfsv4(@Nullable Boolean nfsv4) {

            this.nfsv4 = nfsv4;
            return this;
        }
        public VolumeExportPolicyRule build() {
            final var _resultValue = new VolumeExportPolicyRule();
            _resultValue.accessType = accessType;
            _resultValue.allowedClients = allowedClients;
            _resultValue.hasRootAccess = hasRootAccess;
            _resultValue.kerberos5ReadOnly = kerberos5ReadOnly;
            _resultValue.kerberos5ReadWrite = kerberos5ReadWrite;
            _resultValue.kerberos5iReadOnly = kerberos5iReadOnly;
            _resultValue.kerberos5iReadWrite = kerberos5iReadWrite;
            _resultValue.kerberos5pReadOnly = kerberos5pReadOnly;
            _resultValue.kerberos5pReadWrite = kerberos5pReadWrite;
            _resultValue.nfsv3 = nfsv3;
            _resultValue.nfsv4 = nfsv4;
            return _resultValue;
        }
    }
}
