// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.organizations.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyAuditConfig;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyBinding;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetIAMPolicyPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetIAMPolicyPlainArgs Empty = new GetIAMPolicyPlainArgs();

    /**
     * A nested configuration block that defines logging additional configuration for your project. This field is only supported on `gcp.projects.IAMPolicy`, `gcp.folder.IAMPolicy` and `gcp.organizations.IAMPolicy`.
     * 
     */
    @Import(name="auditConfigs")
    private @Nullable List<GetIAMPolicyAuditConfig> auditConfigs;

    /**
     * @return A nested configuration block that defines logging additional configuration for your project. This field is only supported on `gcp.projects.IAMPolicy`, `gcp.folder.IAMPolicy` and `gcp.organizations.IAMPolicy`.
     * 
     */
    public Optional<List<GetIAMPolicyAuditConfig>> auditConfigs() {
        return Optional.ofNullable(this.auditConfigs);
    }

    /**
     * A nested configuration block (described below)
     * defining a binding to be included in the policy document. Multiple
     * `binding` arguments are supported.
     * 
     */
    @Import(name="bindings")
    private @Nullable List<GetIAMPolicyBinding> bindings;

    /**
     * @return A nested configuration block (described below)
     * defining a binding to be included in the policy document. Multiple
     * `binding` arguments are supported.
     * 
     */
    public Optional<List<GetIAMPolicyBinding>> bindings() {
        return Optional.ofNullable(this.bindings);
    }

    private GetIAMPolicyPlainArgs() {}

    private GetIAMPolicyPlainArgs(GetIAMPolicyPlainArgs $) {
        this.auditConfigs = $.auditConfigs;
        this.bindings = $.bindings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetIAMPolicyPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetIAMPolicyPlainArgs $;

        public Builder() {
            $ = new GetIAMPolicyPlainArgs();
        }

        public Builder(GetIAMPolicyPlainArgs defaults) {
            $ = new GetIAMPolicyPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auditConfigs A nested configuration block that defines logging additional configuration for your project. This field is only supported on `gcp.projects.IAMPolicy`, `gcp.folder.IAMPolicy` and `gcp.organizations.IAMPolicy`.
         * 
         * @return builder
         * 
         */
        public Builder auditConfigs(@Nullable List<GetIAMPolicyAuditConfig> auditConfigs) {
            $.auditConfigs = auditConfigs;
            return this;
        }

        /**
         * @param auditConfigs A nested configuration block that defines logging additional configuration for your project. This field is only supported on `gcp.projects.IAMPolicy`, `gcp.folder.IAMPolicy` and `gcp.organizations.IAMPolicy`.
         * 
         * @return builder
         * 
         */
        public Builder auditConfigs(GetIAMPolicyAuditConfig... auditConfigs) {
            return auditConfigs(List.of(auditConfigs));
        }

        /**
         * @param bindings A nested configuration block (described below)
         * defining a binding to be included in the policy document. Multiple
         * `binding` arguments are supported.
         * 
         * @return builder
         * 
         */
        public Builder bindings(@Nullable List<GetIAMPolicyBinding> bindings) {
            $.bindings = bindings;
            return this;
        }

        /**
         * @param bindings A nested configuration block (described below)
         * defining a binding to be included in the policy document. Multiple
         * `binding` arguments are supported.
         * 
         * @return builder
         * 
         */
        public Builder bindings(GetIAMPolicyBinding... bindings) {
            return bindings(List.of(bindings));
        }

        public GetIAMPolicyPlainArgs build() {
            return $;
        }
    }

}
