// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigquery.outputs.GetDatasetAccess;
import com.pulumi.gcp.bigquery.outputs.GetDatasetDefaultEncryptionConfiguration;
import com.pulumi.gcp.bigquery.outputs.GetDatasetExternalCatalogDatasetOption;
import com.pulumi.gcp.bigquery.outputs.GetDatasetExternalDatasetReference;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatasetResult {
    private List<GetDatasetAccess> accesses;
    private Integer creationTime;
    private String datasetId;
    private String defaultCollation;
    private List<GetDatasetDefaultEncryptionConfiguration> defaultEncryptionConfigurations;
    private Integer defaultPartitionExpirationMs;
    private Integer defaultTableExpirationMs;
    private Boolean deleteContentsOnDestroy;
    private String description;
    private Map<String,String> effectiveLabels;
    private String etag;
    private List<GetDatasetExternalCatalogDatasetOption> externalCatalogDatasetOptions;
    private List<GetDatasetExternalDatasetReference> externalDatasetReferences;
    private String friendlyName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean isCaseInsensitive;
    private Map<String,String> labels;
    private Integer lastModifiedTime;
    private String location;
    private String maxTimeTravelHours;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private Map<String,String> resourceTags;
    private String selfLink;
    private String storageBillingModel;

    private GetDatasetResult() {}
    public List<GetDatasetAccess> accesses() {
        return this.accesses;
    }
    public Integer creationTime() {
        return this.creationTime;
    }
    public String datasetId() {
        return this.datasetId;
    }
    public String defaultCollation() {
        return this.defaultCollation;
    }
    public List<GetDatasetDefaultEncryptionConfiguration> defaultEncryptionConfigurations() {
        return this.defaultEncryptionConfigurations;
    }
    public Integer defaultPartitionExpirationMs() {
        return this.defaultPartitionExpirationMs;
    }
    public Integer defaultTableExpirationMs() {
        return this.defaultTableExpirationMs;
    }
    public Boolean deleteContentsOnDestroy() {
        return this.deleteContentsOnDestroy;
    }
    public String description() {
        return this.description;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String etag() {
        return this.etag;
    }
    public List<GetDatasetExternalCatalogDatasetOption> externalCatalogDatasetOptions() {
        return this.externalCatalogDatasetOptions;
    }
    public List<GetDatasetExternalDatasetReference> externalDatasetReferences() {
        return this.externalDatasetReferences;
    }
    public String friendlyName() {
        return this.friendlyName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean isCaseInsensitive() {
        return this.isCaseInsensitive;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public Integer lastModifiedTime() {
        return this.lastModifiedTime;
    }
    public String location() {
        return this.location;
    }
    public String maxTimeTravelHours() {
        return this.maxTimeTravelHours;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public Map<String,String> resourceTags() {
        return this.resourceTags;
    }
    public String selfLink() {
        return this.selfLink;
    }
    public String storageBillingModel() {
        return this.storageBillingModel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatasetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDatasetAccess> accesses;
        private Integer creationTime;
        private String datasetId;
        private String defaultCollation;
        private List<GetDatasetDefaultEncryptionConfiguration> defaultEncryptionConfigurations;
        private Integer defaultPartitionExpirationMs;
        private Integer defaultTableExpirationMs;
        private Boolean deleteContentsOnDestroy;
        private String description;
        private Map<String,String> effectiveLabels;
        private String etag;
        private List<GetDatasetExternalCatalogDatasetOption> externalCatalogDatasetOptions;
        private List<GetDatasetExternalDatasetReference> externalDatasetReferences;
        private String friendlyName;
        private String id;
        private Boolean isCaseInsensitive;
        private Map<String,String> labels;
        private Integer lastModifiedTime;
        private String location;
        private String maxTimeTravelHours;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private Map<String,String> resourceTags;
        private String selfLink;
        private String storageBillingModel;
        public Builder() {}
        public Builder(GetDatasetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accesses = defaults.accesses;
    	      this.creationTime = defaults.creationTime;
    	      this.datasetId = defaults.datasetId;
    	      this.defaultCollation = defaults.defaultCollation;
    	      this.defaultEncryptionConfigurations = defaults.defaultEncryptionConfigurations;
    	      this.defaultPartitionExpirationMs = defaults.defaultPartitionExpirationMs;
    	      this.defaultTableExpirationMs = defaults.defaultTableExpirationMs;
    	      this.deleteContentsOnDestroy = defaults.deleteContentsOnDestroy;
    	      this.description = defaults.description;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.etag = defaults.etag;
    	      this.externalCatalogDatasetOptions = defaults.externalCatalogDatasetOptions;
    	      this.externalDatasetReferences = defaults.externalDatasetReferences;
    	      this.friendlyName = defaults.friendlyName;
    	      this.id = defaults.id;
    	      this.isCaseInsensitive = defaults.isCaseInsensitive;
    	      this.labels = defaults.labels;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.location = defaults.location;
    	      this.maxTimeTravelHours = defaults.maxTimeTravelHours;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.resourceTags = defaults.resourceTags;
    	      this.selfLink = defaults.selfLink;
    	      this.storageBillingModel = defaults.storageBillingModel;
        }

        @CustomType.Setter
        public Builder accesses(List<GetDatasetAccess> accesses) {
            if (accesses == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "accesses");
            }
            this.accesses = accesses;
            return this;
        }
        public Builder accesses(GetDatasetAccess... accesses) {
            return accesses(List.of(accesses));
        }
        @CustomType.Setter
        public Builder creationTime(Integer creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder datasetId(String datasetId) {
            if (datasetId == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "datasetId");
            }
            this.datasetId = datasetId;
            return this;
        }
        @CustomType.Setter
        public Builder defaultCollation(String defaultCollation) {
            if (defaultCollation == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "defaultCollation");
            }
            this.defaultCollation = defaultCollation;
            return this;
        }
        @CustomType.Setter
        public Builder defaultEncryptionConfigurations(List<GetDatasetDefaultEncryptionConfiguration> defaultEncryptionConfigurations) {
            if (defaultEncryptionConfigurations == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "defaultEncryptionConfigurations");
            }
            this.defaultEncryptionConfigurations = defaultEncryptionConfigurations;
            return this;
        }
        public Builder defaultEncryptionConfigurations(GetDatasetDefaultEncryptionConfiguration... defaultEncryptionConfigurations) {
            return defaultEncryptionConfigurations(List.of(defaultEncryptionConfigurations));
        }
        @CustomType.Setter
        public Builder defaultPartitionExpirationMs(Integer defaultPartitionExpirationMs) {
            if (defaultPartitionExpirationMs == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "defaultPartitionExpirationMs");
            }
            this.defaultPartitionExpirationMs = defaultPartitionExpirationMs;
            return this;
        }
        @CustomType.Setter
        public Builder defaultTableExpirationMs(Integer defaultTableExpirationMs) {
            if (defaultTableExpirationMs == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "defaultTableExpirationMs");
            }
            this.defaultTableExpirationMs = defaultTableExpirationMs;
            return this;
        }
        @CustomType.Setter
        public Builder deleteContentsOnDestroy(Boolean deleteContentsOnDestroy) {
            if (deleteContentsOnDestroy == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "deleteContentsOnDestroy");
            }
            this.deleteContentsOnDestroy = deleteContentsOnDestroy;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            if (etag == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "etag");
            }
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder externalCatalogDatasetOptions(List<GetDatasetExternalCatalogDatasetOption> externalCatalogDatasetOptions) {
            if (externalCatalogDatasetOptions == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "externalCatalogDatasetOptions");
            }
            this.externalCatalogDatasetOptions = externalCatalogDatasetOptions;
            return this;
        }
        public Builder externalCatalogDatasetOptions(GetDatasetExternalCatalogDatasetOption... externalCatalogDatasetOptions) {
            return externalCatalogDatasetOptions(List.of(externalCatalogDatasetOptions));
        }
        @CustomType.Setter
        public Builder externalDatasetReferences(List<GetDatasetExternalDatasetReference> externalDatasetReferences) {
            if (externalDatasetReferences == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "externalDatasetReferences");
            }
            this.externalDatasetReferences = externalDatasetReferences;
            return this;
        }
        public Builder externalDatasetReferences(GetDatasetExternalDatasetReference... externalDatasetReferences) {
            return externalDatasetReferences(List.of(externalDatasetReferences));
        }
        @CustomType.Setter
        public Builder friendlyName(String friendlyName) {
            if (friendlyName == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "friendlyName");
            }
            this.friendlyName = friendlyName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isCaseInsensitive(Boolean isCaseInsensitive) {
            if (isCaseInsensitive == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "isCaseInsensitive");
            }
            this.isCaseInsensitive = isCaseInsensitive;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedTime(Integer lastModifiedTime) {
            if (lastModifiedTime == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "lastModifiedTime");
            }
            this.lastModifiedTime = lastModifiedTime;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maxTimeTravelHours(String maxTimeTravelHours) {
            if (maxTimeTravelHours == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "maxTimeTravelHours");
            }
            this.maxTimeTravelHours = maxTimeTravelHours;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTags(Map<String,String> resourceTags) {
            if (resourceTags == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "resourceTags");
            }
            this.resourceTags = resourceTags;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder storageBillingModel(String storageBillingModel) {
            if (storageBillingModel == null) {
              throw new MissingRequiredPropertyException("GetDatasetResult", "storageBillingModel");
            }
            this.storageBillingModel = storageBillingModel;
            return this;
        }
        public GetDatasetResult build() {
            final var _resultValue = new GetDatasetResult();
            _resultValue.accesses = accesses;
            _resultValue.creationTime = creationTime;
            _resultValue.datasetId = datasetId;
            _resultValue.defaultCollation = defaultCollation;
            _resultValue.defaultEncryptionConfigurations = defaultEncryptionConfigurations;
            _resultValue.defaultPartitionExpirationMs = defaultPartitionExpirationMs;
            _resultValue.defaultTableExpirationMs = defaultTableExpirationMs;
            _resultValue.deleteContentsOnDestroy = deleteContentsOnDestroy;
            _resultValue.description = description;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.etag = etag;
            _resultValue.externalCatalogDatasetOptions = externalCatalogDatasetOptions;
            _resultValue.externalDatasetReferences = externalDatasetReferences;
            _resultValue.friendlyName = friendlyName;
            _resultValue.id = id;
            _resultValue.isCaseInsensitive = isCaseInsensitive;
            _resultValue.labels = labels;
            _resultValue.lastModifiedTime = lastModifiedTime;
            _resultValue.location = location;
            _resultValue.maxTimeTravelHours = maxTimeTravelHours;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.resourceTags = resourceTags;
            _resultValue.selfLink = selfLink;
            _resultValue.storageBillingModel = storageBillingModel;
            return _resultValue;
        }
    }
}
