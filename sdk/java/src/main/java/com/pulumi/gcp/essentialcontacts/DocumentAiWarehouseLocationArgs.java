// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.essentialcontacts;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DocumentAiWarehouseLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DocumentAiWarehouseLocationArgs Empty = new DocumentAiWarehouseLocationArgs();

    /**
     * The access control mode for accessing the customer data.
     * Possible values are: `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_GCI`, `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_BYOID`, `ACL_MODE_UNIVERSAL_ACCESS`.
     * 
     */
    @Import(name="accessControlMode", required=true)
    private Output<String> accessControlMode;

    /**
     * @return The access control mode for accessing the customer data.
     * Possible values are: `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_GCI`, `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_BYOID`, `ACL_MODE_UNIVERSAL_ACCESS`.
     * 
     */
    public Output<String> accessControlMode() {
        return this.accessControlMode;
    }

    /**
     * The type of database used to store customer data.
     * Possible values are: `DB_INFRA_SPANNER`, `DB_CLOUD_SQL_POSTGRES`.
     * 
     */
    @Import(name="databaseType", required=true)
    private Output<String> databaseType;

    /**
     * @return The type of database used to store customer data.
     * Possible values are: `DB_INFRA_SPANNER`, `DB_CLOUD_SQL_POSTGRES`.
     * 
     */
    public Output<String> databaseType() {
        return this.databaseType;
    }

    /**
     * The default role for the person who create a document.
     * Possible values are: `DOCUMENT_ADMIN`, `DOCUMENT_EDITOR`, `DOCUMENT_VIEWER`.
     * 
     */
    @Import(name="documentCreatorDefaultRole")
    private @Nullable Output<String> documentCreatorDefaultRole;

    /**
     * @return The default role for the person who create a document.
     * Possible values are: `DOCUMENT_ADMIN`, `DOCUMENT_EDITOR`, `DOCUMENT_VIEWER`.
     * 
     */
    public Optional<Output<String>> documentCreatorDefaultRole() {
        return Optional.ofNullable(this.documentCreatorDefaultRole);
    }

    /**
     * The KMS key used for CMEK encryption. It is required that
     * the kms key is in the same region as the endpoint. The
     * same key will be used for all provisioned resources, if
     * encryption is available. If the kmsKey is left empty, no
     * encryption will be enforced.
     * 
     */
    @Import(name="kmsKey")
    private @Nullable Output<String> kmsKey;

    /**
     * @return The KMS key used for CMEK encryption. It is required that
     * the kms key is in the same region as the endpoint. The
     * same key will be used for all provisioned resources, if
     * encryption is available. If the kmsKey is left empty, no
     * encryption will be enforced.
     * 
     */
    public Optional<Output<String>> kmsKey() {
        return Optional.ofNullable(this.kmsKey);
    }

    /**
     * The location in which the instance is to be provisioned. It takes the form projects/{projectNumber}/locations/{location}.
     * 
     * ***
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location in which the instance is to be provisioned. It takes the form projects/{projectNumber}/locations/{location}.
     * 
     * ***
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The unique identifier of the project.
     * 
     */
    @Import(name="projectNumber", required=true)
    private Output<String> projectNumber;

    /**
     * @return The unique identifier of the project.
     * 
     */
    public Output<String> projectNumber() {
        return this.projectNumber;
    }

    private DocumentAiWarehouseLocationArgs() {}

    private DocumentAiWarehouseLocationArgs(DocumentAiWarehouseLocationArgs $) {
        this.accessControlMode = $.accessControlMode;
        this.databaseType = $.databaseType;
        this.documentCreatorDefaultRole = $.documentCreatorDefaultRole;
        this.kmsKey = $.kmsKey;
        this.location = $.location;
        this.projectNumber = $.projectNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DocumentAiWarehouseLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DocumentAiWarehouseLocationArgs $;

        public Builder() {
            $ = new DocumentAiWarehouseLocationArgs();
        }

        public Builder(DocumentAiWarehouseLocationArgs defaults) {
            $ = new DocumentAiWarehouseLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessControlMode The access control mode for accessing the customer data.
         * Possible values are: `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_GCI`, `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_BYOID`, `ACL_MODE_UNIVERSAL_ACCESS`.
         * 
         * @return builder
         * 
         */
        public Builder accessControlMode(Output<String> accessControlMode) {
            $.accessControlMode = accessControlMode;
            return this;
        }

        /**
         * @param accessControlMode The access control mode for accessing the customer data.
         * Possible values are: `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_GCI`, `ACL_MODE_DOCUMENT_LEVEL_ACCESS_CONTROL_BYOID`, `ACL_MODE_UNIVERSAL_ACCESS`.
         * 
         * @return builder
         * 
         */
        public Builder accessControlMode(String accessControlMode) {
            return accessControlMode(Output.of(accessControlMode));
        }

        /**
         * @param databaseType The type of database used to store customer data.
         * Possible values are: `DB_INFRA_SPANNER`, `DB_CLOUD_SQL_POSTGRES`.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(Output<String> databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        /**
         * @param databaseType The type of database used to store customer data.
         * Possible values are: `DB_INFRA_SPANNER`, `DB_CLOUD_SQL_POSTGRES`.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(String databaseType) {
            return databaseType(Output.of(databaseType));
        }

        /**
         * @param documentCreatorDefaultRole The default role for the person who create a document.
         * Possible values are: `DOCUMENT_ADMIN`, `DOCUMENT_EDITOR`, `DOCUMENT_VIEWER`.
         * 
         * @return builder
         * 
         */
        public Builder documentCreatorDefaultRole(@Nullable Output<String> documentCreatorDefaultRole) {
            $.documentCreatorDefaultRole = documentCreatorDefaultRole;
            return this;
        }

        /**
         * @param documentCreatorDefaultRole The default role for the person who create a document.
         * Possible values are: `DOCUMENT_ADMIN`, `DOCUMENT_EDITOR`, `DOCUMENT_VIEWER`.
         * 
         * @return builder
         * 
         */
        public Builder documentCreatorDefaultRole(String documentCreatorDefaultRole) {
            return documentCreatorDefaultRole(Output.of(documentCreatorDefaultRole));
        }

        /**
         * @param kmsKey The KMS key used for CMEK encryption. It is required that
         * the kms key is in the same region as the endpoint. The
         * same key will be used for all provisioned resources, if
         * encryption is available. If the kmsKey is left empty, no
         * encryption will be enforced.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        /**
         * @param kmsKey The KMS key used for CMEK encryption. It is required that
         * the kms key is in the same region as the endpoint. The
         * same key will be used for all provisioned resources, if
         * encryption is available. If the kmsKey is left empty, no
         * encryption will be enforced.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(String kmsKey) {
            return kmsKey(Output.of(kmsKey));
        }

        /**
         * @param location The location in which the instance is to be provisioned. It takes the form projects/{projectNumber}/locations/{location}.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location in which the instance is to be provisioned. It takes the form projects/{projectNumber}/locations/{location}.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param projectNumber The unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectNumber(Output<String> projectNumber) {
            $.projectNumber = projectNumber;
            return this;
        }

        /**
         * @param projectNumber The unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectNumber(String projectNumber) {
            return projectNumber(Output.of(projectNumber));
        }

        public DocumentAiWarehouseLocationArgs build() {
            $.accessControlMode = Objects.requireNonNull($.accessControlMode, "expected parameter 'accessControlMode' to be non-null");
            $.databaseType = Objects.requireNonNull($.databaseType, "expected parameter 'databaseType' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.projectNumber = Objects.requireNonNull($.projectNumber, "expected parameter 'projectNumber' to be non-null");
            return $;
        }
    }

}
