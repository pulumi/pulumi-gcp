// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionBackendServiceSubsettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionBackendServiceSubsettingArgs Empty = new RegionBackendServiceSubsettingArgs();

    /**
     * The algorithm used for subsetting.
     * Possible values are: `CONSISTENT_HASH_SUBSETTING`.
     * 
     */
    @Import(name="policy", required=true)
    private Output<String> policy;

    /**
     * @return The algorithm used for subsetting.
     * Possible values are: `CONSISTENT_HASH_SUBSETTING`.
     * 
     */
    public Output<String> policy() {
        return this.policy;
    }

    /**
     * The number of backends per backend group assigned to each proxy instance or each service mesh client.
     * An input parameter to the CONSISTENT_HASH_SUBSETTING algorithm. Can only be set if policy is set to
     * CONSISTENT_HASH_SUBSETTING. Can only be set if load balancing scheme is INTERNAL_MANAGED or INTERNAL_SELF_MANAGED.
     * subsetSize is optional for Internal HTTP(S) load balancing and required for Traffic Director.
     * If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number
     * of proxies/clients visible to each backend and vice versa.
     * Must be greater than 0. If subsetSize is larger than the number of backends/endpoints, then subsetting is disabled.
     * 
     */
    @Import(name="subsetSize")
    private @Nullable Output<Integer> subsetSize;

    /**
     * @return The number of backends per backend group assigned to each proxy instance or each service mesh client.
     * An input parameter to the CONSISTENT_HASH_SUBSETTING algorithm. Can only be set if policy is set to
     * CONSISTENT_HASH_SUBSETTING. Can only be set if load balancing scheme is INTERNAL_MANAGED or INTERNAL_SELF_MANAGED.
     * subsetSize is optional for Internal HTTP(S) load balancing and required for Traffic Director.
     * If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number
     * of proxies/clients visible to each backend and vice versa.
     * Must be greater than 0. If subsetSize is larger than the number of backends/endpoints, then subsetting is disabled.
     * 
     */
    public Optional<Output<Integer>> subsetSize() {
        return Optional.ofNullable(this.subsetSize);
    }

    private RegionBackendServiceSubsettingArgs() {}

    private RegionBackendServiceSubsettingArgs(RegionBackendServiceSubsettingArgs $) {
        this.policy = $.policy;
        this.subsetSize = $.subsetSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionBackendServiceSubsettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionBackendServiceSubsettingArgs $;

        public Builder() {
            $ = new RegionBackendServiceSubsettingArgs();
        }

        public Builder(RegionBackendServiceSubsettingArgs defaults) {
            $ = new RegionBackendServiceSubsettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param policy The algorithm used for subsetting.
         * Possible values are: `CONSISTENT_HASH_SUBSETTING`.
         * 
         * @return builder
         * 
         */
        public Builder policy(Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy The algorithm used for subsetting.
         * Possible values are: `CONSISTENT_HASH_SUBSETTING`.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param subsetSize The number of backends per backend group assigned to each proxy instance or each service mesh client.
         * An input parameter to the CONSISTENT_HASH_SUBSETTING algorithm. Can only be set if policy is set to
         * CONSISTENT_HASH_SUBSETTING. Can only be set if load balancing scheme is INTERNAL_MANAGED or INTERNAL_SELF_MANAGED.
         * subsetSize is optional for Internal HTTP(S) load balancing and required for Traffic Director.
         * If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number
         * of proxies/clients visible to each backend and vice versa.
         * Must be greater than 0. If subsetSize is larger than the number of backends/endpoints, then subsetting is disabled.
         * 
         * @return builder
         * 
         */
        public Builder subsetSize(@Nullable Output<Integer> subsetSize) {
            $.subsetSize = subsetSize;
            return this;
        }

        /**
         * @param subsetSize The number of backends per backend group assigned to each proxy instance or each service mesh client.
         * An input parameter to the CONSISTENT_HASH_SUBSETTING algorithm. Can only be set if policy is set to
         * CONSISTENT_HASH_SUBSETTING. Can only be set if load balancing scheme is INTERNAL_MANAGED or INTERNAL_SELF_MANAGED.
         * subsetSize is optional for Internal HTTP(S) load balancing and required for Traffic Director.
         * If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number
         * of proxies/clients visible to each backend and vice versa.
         * Must be greater than 0. If subsetSize is larger than the number of backends/endpoints, then subsetting is disabled.
         * 
         * @return builder
         * 
         */
        public Builder subsetSize(Integer subsetSize) {
            return subsetSize(Output.of(subsetSize));
        }

        public RegionBackendServiceSubsettingArgs build() {
            if ($.policy == null) {
                throw new MissingRequiredPropertyException("RegionBackendServiceSubsettingArgs", "policy");
            }
            return $;
        }
    }

}
