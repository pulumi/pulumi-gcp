// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class RegionBackendServiceSubsettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionBackendServiceSubsettingArgs Empty = new RegionBackendServiceSubsettingArgs();

    /**
     * The algorithm used for subsetting.
     * Possible values are `CONSISTENT_HASH_SUBSETTING`.
     * 
     */
    @Import(name="policy", required=true)
    private Output<String> policy;

    /**
     * @return The algorithm used for subsetting.
     * Possible values are `CONSISTENT_HASH_SUBSETTING`.
     * 
     */
    public Output<String> policy() {
        return this.policy;
    }

    private RegionBackendServiceSubsettingArgs() {}

    private RegionBackendServiceSubsettingArgs(RegionBackendServiceSubsettingArgs $) {
        this.policy = $.policy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionBackendServiceSubsettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionBackendServiceSubsettingArgs $;

        public Builder() {
            $ = new RegionBackendServiceSubsettingArgs();
        }

        public Builder(RegionBackendServiceSubsettingArgs defaults) {
            $ = new RegionBackendServiceSubsettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param policy The algorithm used for subsetting.
         * Possible values are `CONSISTENT_HASH_SUBSETTING`.
         * 
         * @return builder
         * 
         */
        public Builder policy(Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy The algorithm used for subsetting.
         * Possible values are `CONSISTENT_HASH_SUBSETTING`.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        public RegionBackendServiceSubsettingArgs build() {
            $.policy = Objects.requireNonNull($.policy, "expected parameter 'policy' to be non-null");
            return $;
        }
    }

}
