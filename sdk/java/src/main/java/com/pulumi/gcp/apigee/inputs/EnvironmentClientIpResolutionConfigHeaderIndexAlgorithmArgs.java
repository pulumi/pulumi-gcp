// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs Empty = new EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs();

    /**
     * The index of the ip in the header. Positive indices 0, 1, 2, 3 chooses indices from the left (first ips). Negative indices -1, -2, -3 chooses indices from the right (last ips).
     * 
     */
    @Import(name="ipHeaderIndex", required=true)
    private Output<Integer> ipHeaderIndex;

    /**
     * @return The index of the ip in the header. Positive indices 0, 1, 2, 3 chooses indices from the left (first ips). Negative indices -1, -2, -3 chooses indices from the right (last ips).
     * 
     */
    public Output<Integer> ipHeaderIndex() {
        return this.ipHeaderIndex;
    }

    /**
     * The name of the header to extract the client ip from. We are currently only supporting the X-Forwarded-For header.
     * 
     */
    @Import(name="ipHeaderName", required=true)
    private Output<String> ipHeaderName;

    /**
     * @return The name of the header to extract the client ip from. We are currently only supporting the X-Forwarded-For header.
     * 
     */
    public Output<String> ipHeaderName() {
        return this.ipHeaderName;
    }

    private EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs() {}

    private EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs(EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs $) {
        this.ipHeaderIndex = $.ipHeaderIndex;
        this.ipHeaderName = $.ipHeaderName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs $;

        public Builder() {
            $ = new EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs();
        }

        public Builder(EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs defaults) {
            $ = new EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipHeaderIndex The index of the ip in the header. Positive indices 0, 1, 2, 3 chooses indices from the left (first ips). Negative indices -1, -2, -3 chooses indices from the right (last ips).
         * 
         * @return builder
         * 
         */
        public Builder ipHeaderIndex(Output<Integer> ipHeaderIndex) {
            $.ipHeaderIndex = ipHeaderIndex;
            return this;
        }

        /**
         * @param ipHeaderIndex The index of the ip in the header. Positive indices 0, 1, 2, 3 chooses indices from the left (first ips). Negative indices -1, -2, -3 chooses indices from the right (last ips).
         * 
         * @return builder
         * 
         */
        public Builder ipHeaderIndex(Integer ipHeaderIndex) {
            return ipHeaderIndex(Output.of(ipHeaderIndex));
        }

        /**
         * @param ipHeaderName The name of the header to extract the client ip from. We are currently only supporting the X-Forwarded-For header.
         * 
         * @return builder
         * 
         */
        public Builder ipHeaderName(Output<String> ipHeaderName) {
            $.ipHeaderName = ipHeaderName;
            return this;
        }

        /**
         * @param ipHeaderName The name of the header to extract the client ip from. We are currently only supporting the X-Forwarded-For header.
         * 
         * @return builder
         * 
         */
        public Builder ipHeaderName(String ipHeaderName) {
            return ipHeaderName(Output.of(ipHeaderName));
        }

        public EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs build() {
            if ($.ipHeaderIndex == null) {
                throw new MissingRequiredPropertyException("EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs", "ipHeaderIndex");
            }
            if ($.ipHeaderName == null) {
                throw new MissingRequiredPropertyException("EnvironmentClientIpResolutionConfigHeaderIndexAlgorithmArgs", "ipHeaderName");
            }
            return $;
        }
    }

}
