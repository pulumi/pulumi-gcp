// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StoragePoolStatus {
    /**
     * @return (Output)
     * Number of disks used.
     * 
     */
    private @Nullable String diskCount;
    /**
     * @return (Output)
     * Timestamp of the last successful resize in RFC3339 text format.
     * 
     */
    private @Nullable String lastResizeTimestamp;
    /**
     * @return (Output)
     * Maximum allowed aggregate disk size in gigabytes.
     * 
     */
    private @Nullable String maxTotalProvisionedDiskCapacityGb;
    /**
     * @return (Output)
     * Space used by data stored in disks within the storage pool (in bytes).
     * This will reflect the total number of bytes written to the disks in the pool, in contrast to the capacity of those disks.
     * 
     */
    private @Nullable String poolUsedCapacityBytes;
    /**
     * @return (Output)
     * Sum of all the disks&#39; provisioned IOPS, minus some amount that is allowed per disk that is not counted towards pool&#39;s IOPS capacity. For more information, see https://cloud.google.com/compute/docs/disks/storage-pools.
     * 
     */
    private @Nullable String poolUsedIops;
    /**
     * @return (Output)
     * Sum of all the disks&#39; provisioned throughput in MB/s.
     * 
     */
    private @Nullable String poolUsedThroughput;
    /**
     * @return (Output)
     * Amount of data written into the pool, before it is compacted.
     * 
     */
    private @Nullable String poolUserWrittenBytes;
    /**
     * @return (Output)
     * Sum of all the capacity provisioned in disks in this storage pool.
     * A disk&#39;s provisioned capacity is the same as its total capacity.
     * 
     */
    private @Nullable String totalProvisionedDiskCapacityGb;
    /**
     * @return (Output)
     * Sum of all the disks&#39; provisioned IOPS.
     * 
     */
    private @Nullable String totalProvisionedDiskIops;
    /**
     * @return (Output)
     * Sum of all the disks&#39; provisioned throughput in MB/s,
     * minus some amount that is allowed per disk that is not counted towards pool&#39;s throughput capacity.
     * 
     */
    private @Nullable String totalProvisionedDiskThroughput;

    private StoragePoolStatus() {}
    /**
     * @return (Output)
     * Number of disks used.
     * 
     */
    public Optional<String> diskCount() {
        return Optional.ofNullable(this.diskCount);
    }
    /**
     * @return (Output)
     * Timestamp of the last successful resize in RFC3339 text format.
     * 
     */
    public Optional<String> lastResizeTimestamp() {
        return Optional.ofNullable(this.lastResizeTimestamp);
    }
    /**
     * @return (Output)
     * Maximum allowed aggregate disk size in gigabytes.
     * 
     */
    public Optional<String> maxTotalProvisionedDiskCapacityGb() {
        return Optional.ofNullable(this.maxTotalProvisionedDiskCapacityGb);
    }
    /**
     * @return (Output)
     * Space used by data stored in disks within the storage pool (in bytes).
     * This will reflect the total number of bytes written to the disks in the pool, in contrast to the capacity of those disks.
     * 
     */
    public Optional<String> poolUsedCapacityBytes() {
        return Optional.ofNullable(this.poolUsedCapacityBytes);
    }
    /**
     * @return (Output)
     * Sum of all the disks&#39; provisioned IOPS, minus some amount that is allowed per disk that is not counted towards pool&#39;s IOPS capacity. For more information, see https://cloud.google.com/compute/docs/disks/storage-pools.
     * 
     */
    public Optional<String> poolUsedIops() {
        return Optional.ofNullable(this.poolUsedIops);
    }
    /**
     * @return (Output)
     * Sum of all the disks&#39; provisioned throughput in MB/s.
     * 
     */
    public Optional<String> poolUsedThroughput() {
        return Optional.ofNullable(this.poolUsedThroughput);
    }
    /**
     * @return (Output)
     * Amount of data written into the pool, before it is compacted.
     * 
     */
    public Optional<String> poolUserWrittenBytes() {
        return Optional.ofNullable(this.poolUserWrittenBytes);
    }
    /**
     * @return (Output)
     * Sum of all the capacity provisioned in disks in this storage pool.
     * A disk&#39;s provisioned capacity is the same as its total capacity.
     * 
     */
    public Optional<String> totalProvisionedDiskCapacityGb() {
        return Optional.ofNullable(this.totalProvisionedDiskCapacityGb);
    }
    /**
     * @return (Output)
     * Sum of all the disks&#39; provisioned IOPS.
     * 
     */
    public Optional<String> totalProvisionedDiskIops() {
        return Optional.ofNullable(this.totalProvisionedDiskIops);
    }
    /**
     * @return (Output)
     * Sum of all the disks&#39; provisioned throughput in MB/s,
     * minus some amount that is allowed per disk that is not counted towards pool&#39;s throughput capacity.
     * 
     */
    public Optional<String> totalProvisionedDiskThroughput() {
        return Optional.ofNullable(this.totalProvisionedDiskThroughput);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StoragePoolStatus defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String diskCount;
        private @Nullable String lastResizeTimestamp;
        private @Nullable String maxTotalProvisionedDiskCapacityGb;
        private @Nullable String poolUsedCapacityBytes;
        private @Nullable String poolUsedIops;
        private @Nullable String poolUsedThroughput;
        private @Nullable String poolUserWrittenBytes;
        private @Nullable String totalProvisionedDiskCapacityGb;
        private @Nullable String totalProvisionedDiskIops;
        private @Nullable String totalProvisionedDiskThroughput;
        public Builder() {}
        public Builder(StoragePoolStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskCount = defaults.diskCount;
    	      this.lastResizeTimestamp = defaults.lastResizeTimestamp;
    	      this.maxTotalProvisionedDiskCapacityGb = defaults.maxTotalProvisionedDiskCapacityGb;
    	      this.poolUsedCapacityBytes = defaults.poolUsedCapacityBytes;
    	      this.poolUsedIops = defaults.poolUsedIops;
    	      this.poolUsedThroughput = defaults.poolUsedThroughput;
    	      this.poolUserWrittenBytes = defaults.poolUserWrittenBytes;
    	      this.totalProvisionedDiskCapacityGb = defaults.totalProvisionedDiskCapacityGb;
    	      this.totalProvisionedDiskIops = defaults.totalProvisionedDiskIops;
    	      this.totalProvisionedDiskThroughput = defaults.totalProvisionedDiskThroughput;
        }

        @CustomType.Setter
        public Builder diskCount(@Nullable String diskCount) {

            this.diskCount = diskCount;
            return this;
        }
        @CustomType.Setter
        public Builder lastResizeTimestamp(@Nullable String lastResizeTimestamp) {

            this.lastResizeTimestamp = lastResizeTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder maxTotalProvisionedDiskCapacityGb(@Nullable String maxTotalProvisionedDiskCapacityGb) {

            this.maxTotalProvisionedDiskCapacityGb = maxTotalProvisionedDiskCapacityGb;
            return this;
        }
        @CustomType.Setter
        public Builder poolUsedCapacityBytes(@Nullable String poolUsedCapacityBytes) {

            this.poolUsedCapacityBytes = poolUsedCapacityBytes;
            return this;
        }
        @CustomType.Setter
        public Builder poolUsedIops(@Nullable String poolUsedIops) {

            this.poolUsedIops = poolUsedIops;
            return this;
        }
        @CustomType.Setter
        public Builder poolUsedThroughput(@Nullable String poolUsedThroughput) {

            this.poolUsedThroughput = poolUsedThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder poolUserWrittenBytes(@Nullable String poolUserWrittenBytes) {

            this.poolUserWrittenBytes = poolUserWrittenBytes;
            return this;
        }
        @CustomType.Setter
        public Builder totalProvisionedDiskCapacityGb(@Nullable String totalProvisionedDiskCapacityGb) {

            this.totalProvisionedDiskCapacityGb = totalProvisionedDiskCapacityGb;
            return this;
        }
        @CustomType.Setter
        public Builder totalProvisionedDiskIops(@Nullable String totalProvisionedDiskIops) {

            this.totalProvisionedDiskIops = totalProvisionedDiskIops;
            return this;
        }
        @CustomType.Setter
        public Builder totalProvisionedDiskThroughput(@Nullable String totalProvisionedDiskThroughput) {

            this.totalProvisionedDiskThroughput = totalProvisionedDiskThroughput;
            return this;
        }
        public StoragePoolStatus build() {
            final var _resultValue = new StoragePoolStatus();
            _resultValue.diskCount = diskCount;
            _resultValue.lastResizeTimestamp = lastResizeTimestamp;
            _resultValue.maxTotalProvisionedDiskCapacityGb = maxTotalProvisionedDiskCapacityGb;
            _resultValue.poolUsedCapacityBytes = poolUsedCapacityBytes;
            _resultValue.poolUsedIops = poolUsedIops;
            _resultValue.poolUsedThroughput = poolUsedThroughput;
            _resultValue.poolUserWrittenBytes = poolUserWrittenBytes;
            _resultValue.totalProvisionedDiskCapacityGb = totalProvisionedDiskCapacityGb;
            _resultValue.totalProvisionedDiskIops = totalProvisionedDiskIops;
            _resultValue.totalProvisionedDiskThroughput = totalProvisionedDiskThroughput;
            return _resultValue;
        }
    }
}
