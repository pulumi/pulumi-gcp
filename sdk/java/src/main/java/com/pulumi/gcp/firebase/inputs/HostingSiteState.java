// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostingSiteState extends com.pulumi.resources.ResourceArgs {

    public static final HostingSiteState Empty = new HostingSiteState();

    /**
     * Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
     * associated with the Hosting site.
     * 
     */
    @Import(name="appId")
    private @Nullable Output<String> appId;

    /**
     * @return Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
     * associated with the Hosting site.
     * 
     */
    public Optional<Output<String>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * The default URL for the site in the form of https://{name}.web.app
     * 
     */
    @Import(name="defaultUrl")
    private @Nullable Output<String> defaultUrl;

    /**
     * @return The default URL for the site in the form of https://{name}.web.app
     * 
     */
    public Optional<Output<String>> defaultUrl() {
        return Optional.ofNullable(this.defaultUrl);
    }

    /**
     * Output only. The fully-qualified resource name of the Hosting site, in the format:
     * projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project&#39;s
     * [&#39;ProjectNumber&#39;](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
     * ***(recommended)*** or its
     * [&#39;ProjectId&#39;](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id).
     * Learn more about using project identifiers in Google&#39;s [AIP 2510 standard](https://google.aip.dev/cloud/2510).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Output only. The fully-qualified resource name of the Hosting site, in the format:
     * projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project&#39;s
     * [&#39;ProjectNumber&#39;](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
     * ***(recommended)*** or its
     * [&#39;ProjectId&#39;](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id).
     * Learn more about using project identifiers in Google&#39;s [AIP 2510 standard](https://google.aip.dev/cloud/2510).
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. Immutable. A globally unique identifier for the Hosting site. This identifier is
     * used to construct the Firebase-provisioned subdomains for the site, so it must also be a valid
     * domain name label.
     * 
     */
    @Import(name="siteId")
    private @Nullable Output<String> siteId;

    /**
     * @return Required. Immutable. A globally unique identifier for the Hosting site. This identifier is
     * used to construct the Firebase-provisioned subdomains for the site, so it must also be a valid
     * domain name label.
     * 
     */
    public Optional<Output<String>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    private HostingSiteState() {}

    private HostingSiteState(HostingSiteState $) {
        this.appId = $.appId;
        this.defaultUrl = $.defaultUrl;
        this.name = $.name;
        this.project = $.project;
        this.siteId = $.siteId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostingSiteState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostingSiteState $;

        public Builder() {
            $ = new HostingSiteState();
        }

        public Builder(HostingSiteState defaults) {
            $ = new HostingSiteState(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
         * associated with the Hosting site.
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
         * associated with the Hosting site.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param defaultUrl The default URL for the site in the form of https://{name}.web.app
         * 
         * @return builder
         * 
         */
        public Builder defaultUrl(@Nullable Output<String> defaultUrl) {
            $.defaultUrl = defaultUrl;
            return this;
        }

        /**
         * @param defaultUrl The default URL for the site in the form of https://{name}.web.app
         * 
         * @return builder
         * 
         */
        public Builder defaultUrl(String defaultUrl) {
            return defaultUrl(Output.of(defaultUrl));
        }

        /**
         * @param name Output only. The fully-qualified resource name of the Hosting site, in the format:
         * projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project&#39;s
         * [&#39;ProjectNumber&#39;](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
         * ***(recommended)*** or its
         * [&#39;ProjectId&#39;](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id).
         * Learn more about using project identifiers in Google&#39;s [AIP 2510 standard](https://google.aip.dev/cloud/2510).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Output only. The fully-qualified resource name of the Hosting site, in the format:
         * projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project&#39;s
         * [&#39;ProjectNumber&#39;](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
         * ***(recommended)*** or its
         * [&#39;ProjectId&#39;](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id).
         * Learn more about using project identifiers in Google&#39;s [AIP 2510 standard](https://google.aip.dev/cloud/2510).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param siteId Required. Immutable. A globally unique identifier for the Hosting site. This identifier is
         * used to construct the Firebase-provisioned subdomains for the site, so it must also be a valid
         * domain name label.
         * 
         * @return builder
         * 
         */
        public Builder siteId(@Nullable Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId Required. Immutable. A globally unique identifier for the Hosting site. This identifier is
         * used to construct the Firebase-provisioned subdomains for the site, so it must also be a valid
         * domain name label.
         * 
         * @return builder
         * 
         */
        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        public HostingSiteState build() {
            return $;
        }
    }

}
