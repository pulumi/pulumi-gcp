// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedZonesManagedZone {
    /**
     * @return A textual description field.
     * 
     */
    private String description;
    /**
     * @return The fully qualified DNS name of this zone.
     * 
     */
    private String dnsName;
    /**
     * @return DNS managed zone identifier
     * 
     */
    private String id;
    /**
     * @return Unique identifier for the resource; defined by the server.
     * 
     */
    private Integer managedZoneId;
    /**
     * @return A unique name for the resource.
     * 
     */
    private String name;
    /**
     * @return The list of nameservers that will be authoritative for this domain. Use NS records to redirect from your DNS provider to these names, thus making Google Cloud DNS authoritative for this zone.
     * 
     */
    private List<String> nameServers;
    /**
     * @return The ID of the project for the Google Cloud.
     * 
     */
    private String project;
    /**
     * @return The zone&#39;s visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
     * 
     */
    private String visibility;

    private GetManagedZonesManagedZone() {}
    /**
     * @return A textual description field.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The fully qualified DNS name of this zone.
     * 
     */
    public String dnsName() {
        return this.dnsName;
    }
    /**
     * @return DNS managed zone identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier for the resource; defined by the server.
     * 
     */
    public Integer managedZoneId() {
        return this.managedZoneId;
    }
    /**
     * @return A unique name for the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The list of nameservers that will be authoritative for this domain. Use NS records to redirect from your DNS provider to these names, thus making Google Cloud DNS authoritative for this zone.
     * 
     */
    public List<String> nameServers() {
        return this.nameServers;
    }
    /**
     * @return The ID of the project for the Google Cloud.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The zone&#39;s visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
     * 
     */
    public String visibility() {
        return this.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedZonesManagedZone defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String dnsName;
        private String id;
        private Integer managedZoneId;
        private String name;
        private List<String> nameServers;
        private String project;
        private String visibility;
        public Builder() {}
        public Builder(GetManagedZonesManagedZone defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.dnsName = defaults.dnsName;
    	      this.id = defaults.id;
    	      this.managedZoneId = defaults.managedZoneId;
    	      this.name = defaults.name;
    	      this.nameServers = defaults.nameServers;
    	      this.project = defaults.project;
    	      this.visibility = defaults.visibility;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetManagedZonesManagedZone", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dnsName(String dnsName) {
            if (dnsName == null) {
              throw new MissingRequiredPropertyException("GetManagedZonesManagedZone", "dnsName");
            }
            this.dnsName = dnsName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedZonesManagedZone", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedZoneId(Integer managedZoneId) {
            if (managedZoneId == null) {
              throw new MissingRequiredPropertyException("GetManagedZonesManagedZone", "managedZoneId");
            }
            this.managedZoneId = managedZoneId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedZonesManagedZone", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameServers(List<String> nameServers) {
            if (nameServers == null) {
              throw new MissingRequiredPropertyException("GetManagedZonesManagedZone", "nameServers");
            }
            this.nameServers = nameServers;
            return this;
        }
        public Builder nameServers(String... nameServers) {
            return nameServers(List.of(nameServers));
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetManagedZonesManagedZone", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder visibility(String visibility) {
            if (visibility == null) {
              throw new MissingRequiredPropertyException("GetManagedZonesManagedZone", "visibility");
            }
            this.visibility = visibility;
            return this;
        }
        public GetManagedZonesManagedZone build() {
            final var _resultValue = new GetManagedZonesManagedZone();
            _resultValue.description = description;
            _resultValue.dnsName = dnsName;
            _resultValue.id = id;
            _resultValue.managedZoneId = managedZoneId;
            _resultValue.name = name;
            _resultValue.nameServers = nameServers;
            _resultValue.project = project;
            _resultValue.visibility = visibility;
            return _resultValue;
        }
    }
}
