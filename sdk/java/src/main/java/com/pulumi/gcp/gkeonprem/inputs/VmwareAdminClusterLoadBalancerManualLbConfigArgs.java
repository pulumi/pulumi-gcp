// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VmwareAdminClusterLoadBalancerManualLbConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final VmwareAdminClusterLoadBalancerManualLbConfigArgs Empty = new VmwareAdminClusterLoadBalancerManualLbConfigArgs();

    /**
     * NodePort for add-ons server in the admin cluster.
     * 
     */
    @Import(name="addonsNodePort")
    private @Nullable Output<Integer> addonsNodePort;

    /**
     * @return NodePort for add-ons server in the admin cluster.
     * 
     */
    public Optional<Output<Integer>> addonsNodePort() {
        return Optional.ofNullable(this.addonsNodePort);
    }

    /**
     * NodePort for control plane service. The Kubernetes API server in the admin
     * cluster is implemented as a Service of type NodePort (ex. 30968).
     * 
     */
    @Import(name="controlPlaneNodePort")
    private @Nullable Output<Integer> controlPlaneNodePort;

    /**
     * @return NodePort for control plane service. The Kubernetes API server in the admin
     * cluster is implemented as a Service of type NodePort (ex. 30968).
     * 
     */
    public Optional<Output<Integer>> controlPlaneNodePort() {
        return Optional.ofNullable(this.controlPlaneNodePort);
    }

    /**
     * NodePort for ingress service&#39;s http. The ingress service in the admin
     * cluster is implemented as a Service of type NodePort (ex. 32527).
     * 
     */
    @Import(name="ingressHttpNodePort")
    private @Nullable Output<Integer> ingressHttpNodePort;

    /**
     * @return NodePort for ingress service&#39;s http. The ingress service in the admin
     * cluster is implemented as a Service of type NodePort (ex. 32527).
     * 
     */
    public Optional<Output<Integer>> ingressHttpNodePort() {
        return Optional.ofNullable(this.ingressHttpNodePort);
    }

    /**
     * NodePort for ingress service&#39;s https. The ingress service in the admin
     * cluster is implemented as a Service of type NodePort (ex. 30139).
     * 
     */
    @Import(name="ingressHttpsNodePort")
    private @Nullable Output<Integer> ingressHttpsNodePort;

    /**
     * @return NodePort for ingress service&#39;s https. The ingress service in the admin
     * cluster is implemented as a Service of type NodePort (ex. 30139).
     * 
     */
    public Optional<Output<Integer>> ingressHttpsNodePort() {
        return Optional.ofNullable(this.ingressHttpsNodePort);
    }

    /**
     * NodePort for konnectivity server service running as a sidecar in each
     * kube-apiserver pod (ex. 30564).
     * 
     */
    @Import(name="konnectivityServerNodePort")
    private @Nullable Output<Integer> konnectivityServerNodePort;

    /**
     * @return NodePort for konnectivity server service running as a sidecar in each
     * kube-apiserver pod (ex. 30564).
     * 
     */
    public Optional<Output<Integer>> konnectivityServerNodePort() {
        return Optional.ofNullable(this.konnectivityServerNodePort);
    }

    private VmwareAdminClusterLoadBalancerManualLbConfigArgs() {}

    private VmwareAdminClusterLoadBalancerManualLbConfigArgs(VmwareAdminClusterLoadBalancerManualLbConfigArgs $) {
        this.addonsNodePort = $.addonsNodePort;
        this.controlPlaneNodePort = $.controlPlaneNodePort;
        this.ingressHttpNodePort = $.ingressHttpNodePort;
        this.ingressHttpsNodePort = $.ingressHttpsNodePort;
        this.konnectivityServerNodePort = $.konnectivityServerNodePort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmwareAdminClusterLoadBalancerManualLbConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmwareAdminClusterLoadBalancerManualLbConfigArgs $;

        public Builder() {
            $ = new VmwareAdminClusterLoadBalancerManualLbConfigArgs();
        }

        public Builder(VmwareAdminClusterLoadBalancerManualLbConfigArgs defaults) {
            $ = new VmwareAdminClusterLoadBalancerManualLbConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addonsNodePort NodePort for add-ons server in the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder addonsNodePort(@Nullable Output<Integer> addonsNodePort) {
            $.addonsNodePort = addonsNodePort;
            return this;
        }

        /**
         * @param addonsNodePort NodePort for add-ons server in the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder addonsNodePort(Integer addonsNodePort) {
            return addonsNodePort(Output.of(addonsNodePort));
        }

        /**
         * @param controlPlaneNodePort NodePort for control plane service. The Kubernetes API server in the admin
         * cluster is implemented as a Service of type NodePort (ex. 30968).
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneNodePort(@Nullable Output<Integer> controlPlaneNodePort) {
            $.controlPlaneNodePort = controlPlaneNodePort;
            return this;
        }

        /**
         * @param controlPlaneNodePort NodePort for control plane service. The Kubernetes API server in the admin
         * cluster is implemented as a Service of type NodePort (ex. 30968).
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneNodePort(Integer controlPlaneNodePort) {
            return controlPlaneNodePort(Output.of(controlPlaneNodePort));
        }

        /**
         * @param ingressHttpNodePort NodePort for ingress service&#39;s http. The ingress service in the admin
         * cluster is implemented as a Service of type NodePort (ex. 32527).
         * 
         * @return builder
         * 
         */
        public Builder ingressHttpNodePort(@Nullable Output<Integer> ingressHttpNodePort) {
            $.ingressHttpNodePort = ingressHttpNodePort;
            return this;
        }

        /**
         * @param ingressHttpNodePort NodePort for ingress service&#39;s http. The ingress service in the admin
         * cluster is implemented as a Service of type NodePort (ex. 32527).
         * 
         * @return builder
         * 
         */
        public Builder ingressHttpNodePort(Integer ingressHttpNodePort) {
            return ingressHttpNodePort(Output.of(ingressHttpNodePort));
        }

        /**
         * @param ingressHttpsNodePort NodePort for ingress service&#39;s https. The ingress service in the admin
         * cluster is implemented as a Service of type NodePort (ex. 30139).
         * 
         * @return builder
         * 
         */
        public Builder ingressHttpsNodePort(@Nullable Output<Integer> ingressHttpsNodePort) {
            $.ingressHttpsNodePort = ingressHttpsNodePort;
            return this;
        }

        /**
         * @param ingressHttpsNodePort NodePort for ingress service&#39;s https. The ingress service in the admin
         * cluster is implemented as a Service of type NodePort (ex. 30139).
         * 
         * @return builder
         * 
         */
        public Builder ingressHttpsNodePort(Integer ingressHttpsNodePort) {
            return ingressHttpsNodePort(Output.of(ingressHttpsNodePort));
        }

        /**
         * @param konnectivityServerNodePort NodePort for konnectivity server service running as a sidecar in each
         * kube-apiserver pod (ex. 30564).
         * 
         * @return builder
         * 
         */
        public Builder konnectivityServerNodePort(@Nullable Output<Integer> konnectivityServerNodePort) {
            $.konnectivityServerNodePort = konnectivityServerNodePort;
            return this;
        }

        /**
         * @param konnectivityServerNodePort NodePort for konnectivity server service running as a sidecar in each
         * kube-apiserver pod (ex. 30564).
         * 
         * @return builder
         * 
         */
        public Builder konnectivityServerNodePort(Integer konnectivityServerNodePort) {
            return konnectivityServerNodePort(Output.of(konnectivityServerNodePort));
        }

        public VmwareAdminClusterLoadBalancerManualLbConfigArgs build() {
            return $;
        }
    }

}
