// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudrunv2.outputs.GetWorkerPoolTemplateVolumeCloudSqlInstance;
import com.pulumi.gcp.cloudrunv2.outputs.GetWorkerPoolTemplateVolumeEmptyDir;
import com.pulumi.gcp.cloudrunv2.outputs.GetWorkerPoolTemplateVolumeGc;
import com.pulumi.gcp.cloudrunv2.outputs.GetWorkerPoolTemplateVolumeNf;
import com.pulumi.gcp.cloudrunv2.outputs.GetWorkerPoolTemplateVolumeSecret;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWorkerPoolTemplateVolume {
    /**
     * @return For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
     * 
     */
    private List<GetWorkerPoolTemplateVolumeCloudSqlInstance> cloudSqlInstances;
    /**
     * @return Ephemeral storage used as a shared volume.
     * 
     */
    private List<GetWorkerPoolTemplateVolumeEmptyDir> emptyDirs;
    /**
     * @return Cloud Storage bucket mounted as a volume using GCSFuse. This feature is only supported in the gen2 execution environment.
     * 
     */
    private List<GetWorkerPoolTemplateVolumeGc> gcs;
    /**
     * @return The name of the Cloud Run v2 Worker Pool.
     * 
     */
    private String name;
    /**
     * @return Represents an NFS mount.
     * 
     */
    private List<GetWorkerPoolTemplateVolumeNf> nfs;
    /**
     * @return Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
     * 
     */
    private List<GetWorkerPoolTemplateVolumeSecret> secrets;

    private GetWorkerPoolTemplateVolume() {}
    /**
     * @return For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
     * 
     */
    public List<GetWorkerPoolTemplateVolumeCloudSqlInstance> cloudSqlInstances() {
        return this.cloudSqlInstances;
    }
    /**
     * @return Ephemeral storage used as a shared volume.
     * 
     */
    public List<GetWorkerPoolTemplateVolumeEmptyDir> emptyDirs() {
        return this.emptyDirs;
    }
    /**
     * @return Cloud Storage bucket mounted as a volume using GCSFuse. This feature is only supported in the gen2 execution environment.
     * 
     */
    public List<GetWorkerPoolTemplateVolumeGc> gcs() {
        return this.gcs;
    }
    /**
     * @return The name of the Cloud Run v2 Worker Pool.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Represents an NFS mount.
     * 
     */
    public List<GetWorkerPoolTemplateVolumeNf> nfs() {
        return this.nfs;
    }
    /**
     * @return Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
     * 
     */
    public List<GetWorkerPoolTemplateVolumeSecret> secrets() {
        return this.secrets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkerPoolTemplateVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetWorkerPoolTemplateVolumeCloudSqlInstance> cloudSqlInstances;
        private List<GetWorkerPoolTemplateVolumeEmptyDir> emptyDirs;
        private List<GetWorkerPoolTemplateVolumeGc> gcs;
        private String name;
        private List<GetWorkerPoolTemplateVolumeNf> nfs;
        private List<GetWorkerPoolTemplateVolumeSecret> secrets;
        public Builder() {}
        public Builder(GetWorkerPoolTemplateVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudSqlInstances = defaults.cloudSqlInstances;
    	      this.emptyDirs = defaults.emptyDirs;
    	      this.gcs = defaults.gcs;
    	      this.name = defaults.name;
    	      this.nfs = defaults.nfs;
    	      this.secrets = defaults.secrets;
        }

        @CustomType.Setter
        public Builder cloudSqlInstances(List<GetWorkerPoolTemplateVolumeCloudSqlInstance> cloudSqlInstances) {
            if (cloudSqlInstances == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolTemplateVolume", "cloudSqlInstances");
            }
            this.cloudSqlInstances = cloudSqlInstances;
            return this;
        }
        public Builder cloudSqlInstances(GetWorkerPoolTemplateVolumeCloudSqlInstance... cloudSqlInstances) {
            return cloudSqlInstances(List.of(cloudSqlInstances));
        }
        @CustomType.Setter
        public Builder emptyDirs(List<GetWorkerPoolTemplateVolumeEmptyDir> emptyDirs) {
            if (emptyDirs == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolTemplateVolume", "emptyDirs");
            }
            this.emptyDirs = emptyDirs;
            return this;
        }
        public Builder emptyDirs(GetWorkerPoolTemplateVolumeEmptyDir... emptyDirs) {
            return emptyDirs(List.of(emptyDirs));
        }
        @CustomType.Setter
        public Builder gcs(List<GetWorkerPoolTemplateVolumeGc> gcs) {
            if (gcs == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolTemplateVolume", "gcs");
            }
            this.gcs = gcs;
            return this;
        }
        public Builder gcs(GetWorkerPoolTemplateVolumeGc... gcs) {
            return gcs(List.of(gcs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolTemplateVolume", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nfs(List<GetWorkerPoolTemplateVolumeNf> nfs) {
            if (nfs == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolTemplateVolume", "nfs");
            }
            this.nfs = nfs;
            return this;
        }
        public Builder nfs(GetWorkerPoolTemplateVolumeNf... nfs) {
            return nfs(List.of(nfs));
        }
        @CustomType.Setter
        public Builder secrets(List<GetWorkerPoolTemplateVolumeSecret> secrets) {
            if (secrets == null) {
              throw new MissingRequiredPropertyException("GetWorkerPoolTemplateVolume", "secrets");
            }
            this.secrets = secrets;
            return this;
        }
        public Builder secrets(GetWorkerPoolTemplateVolumeSecret... secrets) {
            return secrets(List.of(secrets));
        }
        public GetWorkerPoolTemplateVolume build() {
            final var _resultValue = new GetWorkerPoolTemplateVolume();
            _resultValue.cloudSqlInstances = cloudSqlInstances;
            _resultValue.emptyDirs = emptyDirs;
            _resultValue.gcs = gcs;
            _resultValue.name = name;
            _resultValue.nfs = nfs;
            _resultValue.secrets = secrets;
            return _resultValue;
        }
    }
}
