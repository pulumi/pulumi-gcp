// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs extends com.pulumi.resources.ResourceArgs {

    public static final URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs Empty = new URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs();

    /**
     * The HTTP status code used to abort the request.
     * The value must be between 200 and 599 inclusive.
     * 
     */
    @Import(name="httpStatus")
    private @Nullable Output<Integer> httpStatus;

    /**
     * @return The HTTP status code used to abort the request.
     * The value must be between 200 and 599 inclusive.
     * 
     */
    public Optional<Output<Integer>> httpStatus() {
        return Optional.ofNullable(this.httpStatus);
    }

    /**
     * The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
     * The value must be between 0.0 and 100.0 inclusive.
     * 
     */
    @Import(name="percentage")
    private @Nullable Output<Double> percentage;

    /**
     * @return The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
     * The value must be between 0.0 and 100.0 inclusive.
     * 
     */
    public Optional<Output<Double>> percentage() {
        return Optional.ofNullable(this.percentage);
    }

    private URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs() {}

    private URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs(URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs $) {
        this.httpStatus = $.httpStatus;
        this.percentage = $.percentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs $;

        public Builder() {
            $ = new URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs();
        }

        public Builder(URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs defaults) {
            $ = new URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param httpStatus The HTTP status code used to abort the request.
         * The value must be between 200 and 599 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder httpStatus(@Nullable Output<Integer> httpStatus) {
            $.httpStatus = httpStatus;
            return this;
        }

        /**
         * @param httpStatus The HTTP status code used to abort the request.
         * The value must be between 200 and 599 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder httpStatus(Integer httpStatus) {
            return httpStatus(Output.of(httpStatus));
        }

        /**
         * @param percentage The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
         * The value must be between 0.0 and 100.0 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder percentage(@Nullable Output<Double> percentage) {
            $.percentage = percentage;
            return this;
        }

        /**
         * @param percentage The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection.
         * The value must be between 0.0 and 100.0 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder percentage(Double percentage) {
            return percentage(Output.of(percentage));
        }

        public URLMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortArgs build() {
            return $;
        }
    }

}
