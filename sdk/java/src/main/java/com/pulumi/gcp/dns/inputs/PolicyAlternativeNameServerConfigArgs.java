// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dns.inputs.PolicyAlternativeNameServerConfigTargetNameServerArgs;
import java.util.List;
import java.util.Objects;


public final class PolicyAlternativeNameServerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyAlternativeNameServerConfigArgs Empty = new PolicyAlternativeNameServerConfigArgs();

    /**
     * Sets an alternative name server for the associated networks. When specified,
     * all DNS queries are forwarded to a name server that you choose. Names such as .internal
     * are not available when an alternative name server is specified.
     * Structure is documented below.
     * 
     */
    @Import(name="targetNameServers", required=true)
    private Output<List<PolicyAlternativeNameServerConfigTargetNameServerArgs>> targetNameServers;

    /**
     * @return Sets an alternative name server for the associated networks. When specified,
     * all DNS queries are forwarded to a name server that you choose. Names such as .internal
     * are not available when an alternative name server is specified.
     * Structure is documented below.
     * 
     */
    public Output<List<PolicyAlternativeNameServerConfigTargetNameServerArgs>> targetNameServers() {
        return this.targetNameServers;
    }

    private PolicyAlternativeNameServerConfigArgs() {}

    private PolicyAlternativeNameServerConfigArgs(PolicyAlternativeNameServerConfigArgs $) {
        this.targetNameServers = $.targetNameServers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyAlternativeNameServerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyAlternativeNameServerConfigArgs $;

        public Builder() {
            $ = new PolicyAlternativeNameServerConfigArgs();
        }

        public Builder(PolicyAlternativeNameServerConfigArgs defaults) {
            $ = new PolicyAlternativeNameServerConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param targetNameServers Sets an alternative name server for the associated networks. When specified,
         * all DNS queries are forwarded to a name server that you choose. Names such as .internal
         * are not available when an alternative name server is specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder targetNameServers(Output<List<PolicyAlternativeNameServerConfigTargetNameServerArgs>> targetNameServers) {
            $.targetNameServers = targetNameServers;
            return this;
        }

        /**
         * @param targetNameServers Sets an alternative name server for the associated networks. When specified,
         * all DNS queries are forwarded to a name server that you choose. Names such as .internal
         * are not available when an alternative name server is specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder targetNameServers(List<PolicyAlternativeNameServerConfigTargetNameServerArgs> targetNameServers) {
            return targetNameServers(Output.of(targetNameServers));
        }

        /**
         * @param targetNameServers Sets an alternative name server for the associated networks. When specified,
         * all DNS queries are forwarded to a name server that you choose. Names such as .internal
         * are not available when an alternative name server is specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder targetNameServers(PolicyAlternativeNameServerConfigTargetNameServerArgs... targetNameServers) {
            return targetNameServers(List.of(targetNameServers));
        }

        public PolicyAlternativeNameServerConfigArgs build() {
            $.targetNameServers = Objects.requireNonNull($.targetNameServers, "expected parameter 'targetNameServers' to be non-null");
            return $;
        }
    }

}
