// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigRayOperatorConfigRayClusterLoggingConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigRayOperatorConfigRayClusterMonitoringConfig;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterAddonsConfigRayOperatorConfig {
    private Boolean enabled;
    /**
     * @return The status of Ray Logging, which scrapes Ray cluster logs to Cloud Logging. Defaults to disabled; set enabled = true to enable.
     * 
     */
    private List<GetClusterAddonsConfigRayOperatorConfigRayClusterLoggingConfig> rayClusterLoggingConfigs;
    /**
     * @return The status of Ray Cluster monitoring, which shows Ray cluster metrics in Cloud Console. Defaults to disabled; set enabled = true to enable.
     * 
     */
    private List<GetClusterAddonsConfigRayOperatorConfigRayClusterMonitoringConfig> rayClusterMonitoringConfigs;

    private GetClusterAddonsConfigRayOperatorConfig() {}
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The status of Ray Logging, which scrapes Ray cluster logs to Cloud Logging. Defaults to disabled; set enabled = true to enable.
     * 
     */
    public List<GetClusterAddonsConfigRayOperatorConfigRayClusterLoggingConfig> rayClusterLoggingConfigs() {
        return this.rayClusterLoggingConfigs;
    }
    /**
     * @return The status of Ray Cluster monitoring, which shows Ray cluster metrics in Cloud Console. Defaults to disabled; set enabled = true to enable.
     * 
     */
    public List<GetClusterAddonsConfigRayOperatorConfigRayClusterMonitoringConfig> rayClusterMonitoringConfigs() {
        return this.rayClusterMonitoringConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterAddonsConfigRayOperatorConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enabled;
        private List<GetClusterAddonsConfigRayOperatorConfigRayClusterLoggingConfig> rayClusterLoggingConfigs;
        private List<GetClusterAddonsConfigRayOperatorConfigRayClusterMonitoringConfig> rayClusterMonitoringConfigs;
        public Builder() {}
        public Builder(GetClusterAddonsConfigRayOperatorConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.rayClusterLoggingConfigs = defaults.rayClusterLoggingConfigs;
    	      this.rayClusterMonitoringConfigs = defaults.rayClusterMonitoringConfigs;
        }

        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfigRayOperatorConfig", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder rayClusterLoggingConfigs(List<GetClusterAddonsConfigRayOperatorConfigRayClusterLoggingConfig> rayClusterLoggingConfigs) {
            if (rayClusterLoggingConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfigRayOperatorConfig", "rayClusterLoggingConfigs");
            }
            this.rayClusterLoggingConfigs = rayClusterLoggingConfigs;
            return this;
        }
        public Builder rayClusterLoggingConfigs(GetClusterAddonsConfigRayOperatorConfigRayClusterLoggingConfig... rayClusterLoggingConfigs) {
            return rayClusterLoggingConfigs(List.of(rayClusterLoggingConfigs));
        }
        @CustomType.Setter
        public Builder rayClusterMonitoringConfigs(List<GetClusterAddonsConfigRayOperatorConfigRayClusterMonitoringConfig> rayClusterMonitoringConfigs) {
            if (rayClusterMonitoringConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfigRayOperatorConfig", "rayClusterMonitoringConfigs");
            }
            this.rayClusterMonitoringConfigs = rayClusterMonitoringConfigs;
            return this;
        }
        public Builder rayClusterMonitoringConfigs(GetClusterAddonsConfigRayOperatorConfigRayClusterMonitoringConfig... rayClusterMonitoringConfigs) {
            return rayClusterMonitoringConfigs(List.of(rayClusterMonitoringConfigs));
        }
        public GetClusterAddonsConfigRayOperatorConfig build() {
            final var _resultValue = new GetClusterAddonsConfigRayOperatorConfig();
            _resultValue.enabled = enabled;
            _resultValue.rayClusterLoggingConfigs = rayClusterLoggingConfigs;
            _resultValue.rayClusterMonitoringConfigs = rayClusterMonitoringConfigs;
            return _resultValue;
        }
    }
}
