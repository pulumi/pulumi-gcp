// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs Empty = new CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs();

    /**
     * The full name of the referenced data store. Formats: projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore} projects/{project}/locations/{location}/dataStores/{dataStore}
     * 
     */
    @Import(name="dataStore")
    private @Nullable Output<String> dataStore;

    /**
     * @return The full name of the referenced data store. Formats: projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore} projects/{project}/locations/{location}/dataStores/{dataStore}
     * 
     */
    public Optional<Output<String>> dataStore() {
        return Optional.ofNullable(this.dataStore);
    }

    /**
     * The type of the connected data store.
     * * PUBLIC_WEB: A data store that contains public web content.
     * * UNSTRUCTURED: A data store that contains unstructured private data.
     * * STRUCTURED: A data store that contains structured data (for example FAQ).
     *   Possible values are: `PUBLIC_WEB`, `UNSTRUCTURED`, `STRUCTURED`.
     * 
     */
    @Import(name="dataStoreType")
    private @Nullable Output<String> dataStoreType;

    /**
     * @return The type of the connected data store.
     * * PUBLIC_WEB: A data store that contains public web content.
     * * UNSTRUCTURED: A data store that contains unstructured private data.
     * * STRUCTURED: A data store that contains structured data (for example FAQ).
     *   Possible values are: `PUBLIC_WEB`, `UNSTRUCTURED`, `STRUCTURED`.
     * 
     */
    public Optional<Output<String>> dataStoreType() {
        return Optional.ofNullable(this.dataStoreType);
    }

    /**
     * The document processing mode for the data store connection. Should only be set for PUBLIC_WEB and UNSTRUCTURED data stores. If not set it is considered as DOCUMENTS, as this is the legacy mode.
     * * DOCUMENTS: Documents are processed as documents.
     * * CHUNKS: Documents are converted to chunks.
     *   Possible values are: `DOCUMENTS`, `CHUNKS`.
     * 
     */
    @Import(name="documentProcessingMode")
    private @Nullable Output<String> documentProcessingMode;

    /**
     * @return The document processing mode for the data store connection. Should only be set for PUBLIC_WEB and UNSTRUCTURED data stores. If not set it is considered as DOCUMENTS, as this is the legacy mode.
     * * DOCUMENTS: Documents are processed as documents.
     * * CHUNKS: Documents are converted to chunks.
     *   Possible values are: `DOCUMENTS`, `CHUNKS`.
     * 
     */
    public Optional<Output<String>> documentProcessingMode() {
        return Optional.ofNullable(this.documentProcessingMode);
    }

    private CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs() {}

    private CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs(CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs $) {
        this.dataStore = $.dataStore;
        this.dataStoreType = $.dataStoreType;
        this.documentProcessingMode = $.documentProcessingMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs $;

        public Builder() {
            $ = new CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs();
        }

        public Builder(CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs defaults) {
            $ = new CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataStore The full name of the referenced data store. Formats: projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore} projects/{project}/locations/{location}/dataStores/{dataStore}
         * 
         * @return builder
         * 
         */
        public Builder dataStore(@Nullable Output<String> dataStore) {
            $.dataStore = dataStore;
            return this;
        }

        /**
         * @param dataStore The full name of the referenced data store. Formats: projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore} projects/{project}/locations/{location}/dataStores/{dataStore}
         * 
         * @return builder
         * 
         */
        public Builder dataStore(String dataStore) {
            return dataStore(Output.of(dataStore));
        }

        /**
         * @param dataStoreType The type of the connected data store.
         * * PUBLIC_WEB: A data store that contains public web content.
         * * UNSTRUCTURED: A data store that contains unstructured private data.
         * * STRUCTURED: A data store that contains structured data (for example FAQ).
         *   Possible values are: `PUBLIC_WEB`, `UNSTRUCTURED`, `STRUCTURED`.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreType(@Nullable Output<String> dataStoreType) {
            $.dataStoreType = dataStoreType;
            return this;
        }

        /**
         * @param dataStoreType The type of the connected data store.
         * * PUBLIC_WEB: A data store that contains public web content.
         * * UNSTRUCTURED: A data store that contains unstructured private data.
         * * STRUCTURED: A data store that contains structured data (for example FAQ).
         *   Possible values are: `PUBLIC_WEB`, `UNSTRUCTURED`, `STRUCTURED`.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreType(String dataStoreType) {
            return dataStoreType(Output.of(dataStoreType));
        }

        /**
         * @param documentProcessingMode The document processing mode for the data store connection. Should only be set for PUBLIC_WEB and UNSTRUCTURED data stores. If not set it is considered as DOCUMENTS, as this is the legacy mode.
         * * DOCUMENTS: Documents are processed as documents.
         * * CHUNKS: Documents are converted to chunks.
         *   Possible values are: `DOCUMENTS`, `CHUNKS`.
         * 
         * @return builder
         * 
         */
        public Builder documentProcessingMode(@Nullable Output<String> documentProcessingMode) {
            $.documentProcessingMode = documentProcessingMode;
            return this;
        }

        /**
         * @param documentProcessingMode The document processing mode for the data store connection. Should only be set for PUBLIC_WEB and UNSTRUCTURED data stores. If not set it is considered as DOCUMENTS, as this is the legacy mode.
         * * DOCUMENTS: Documents are processed as documents.
         * * CHUNKS: Documents are converted to chunks.
         *   Possible values are: `DOCUMENTS`, `CHUNKS`.
         * 
         * @return builder
         * 
         */
        public Builder documentProcessingMode(String documentProcessingMode) {
            return documentProcessingMode(Output.of(documentProcessingMode));
        }

        public CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs build() {
            return $;
        }
    }

}
