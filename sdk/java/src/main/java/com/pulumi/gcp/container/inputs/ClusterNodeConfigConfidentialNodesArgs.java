// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNodeConfigConfidentialNodesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNodeConfigConfidentialNodesArgs Empty = new ClusterNodeConfigConfidentialNodesArgs();

    /**
     * Defines the type of technology used
     * by the confidential node.
     * 
     */
    @Import(name="confidentialInstanceType")
    private @Nullable Output<String> confidentialInstanceType;

    /**
     * @return Defines the type of technology used
     * by the confidential node.
     * 
     */
    public Optional<Output<String>> confidentialInstanceType() {
        return Optional.ofNullable(this.confidentialInstanceType);
    }

    /**
     * Enable Confidential GKE Nodes for this cluster, to
     * enforce encryption of data in-use.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Enable Confidential GKE Nodes for this cluster, to
     * enforce encryption of data in-use.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    private ClusterNodeConfigConfidentialNodesArgs() {}

    private ClusterNodeConfigConfidentialNodesArgs(ClusterNodeConfigConfidentialNodesArgs $) {
        this.confidentialInstanceType = $.confidentialInstanceType;
        this.enabled = $.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNodeConfigConfidentialNodesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNodeConfigConfidentialNodesArgs $;

        public Builder() {
            $ = new ClusterNodeConfigConfidentialNodesArgs();
        }

        public Builder(ClusterNodeConfigConfidentialNodesArgs defaults) {
            $ = new ClusterNodeConfigConfidentialNodesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param confidentialInstanceType Defines the type of technology used
         * by the confidential node.
         * 
         * @return builder
         * 
         */
        public Builder confidentialInstanceType(@Nullable Output<String> confidentialInstanceType) {
            $.confidentialInstanceType = confidentialInstanceType;
            return this;
        }

        /**
         * @param confidentialInstanceType Defines the type of technology used
         * by the confidential node.
         * 
         * @return builder
         * 
         */
        public Builder confidentialInstanceType(String confidentialInstanceType) {
            return confidentialInstanceType(Output.of(confidentialInstanceType));
        }

        /**
         * @param enabled Enable Confidential GKE Nodes for this cluster, to
         * enforce encryption of data in-use.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable Confidential GKE Nodes for this cluster, to
         * enforce encryption of data in-use.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public ClusterNodeConfigConfidentialNodesArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("ClusterNodeConfigConfidentialNodesArgs", "enabled");
            }
            return $;
        }
    }

}
