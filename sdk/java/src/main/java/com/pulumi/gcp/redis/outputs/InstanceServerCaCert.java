// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.redis.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceServerCaCert {
    /**
     * @return The certificate data in PEM format.
     * 
     */
    private @Nullable String cert;
    /**
     * @return Output only. The time when the policy was created.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond
     * resolution and up to nine fractional digits.
     * 
     */
    private @Nullable String createTime;
    /**
     * @return The time when the certificate expires.
     * 
     */
    private @Nullable String expireTime;
    /**
     * @return Serial number, as extracted from the certificate.
     * 
     */
    private @Nullable String serialNumber;
    /**
     * @return Sha1 Fingerprint of the certificate.
     * 
     */
    private @Nullable String sha1Fingerprint;

    private InstanceServerCaCert() {}
    /**
     * @return The certificate data in PEM format.
     * 
     */
    public Optional<String> cert() {
        return Optional.ofNullable(this.cert);
    }
    /**
     * @return Output only. The time when the policy was created.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond
     * resolution and up to nine fractional digits.
     * 
     */
    public Optional<String> createTime() {
        return Optional.ofNullable(this.createTime);
    }
    /**
     * @return The time when the certificate expires.
     * 
     */
    public Optional<String> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }
    /**
     * @return Serial number, as extracted from the certificate.
     * 
     */
    public Optional<String> serialNumber() {
        return Optional.ofNullable(this.serialNumber);
    }
    /**
     * @return Sha1 Fingerprint of the certificate.
     * 
     */
    public Optional<String> sha1Fingerprint() {
        return Optional.ofNullable(this.sha1Fingerprint);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceServerCaCert defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cert;
        private @Nullable String createTime;
        private @Nullable String expireTime;
        private @Nullable String serialNumber;
        private @Nullable String sha1Fingerprint;
        public Builder() {}
        public Builder(InstanceServerCaCert defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cert = defaults.cert;
    	      this.createTime = defaults.createTime;
    	      this.expireTime = defaults.expireTime;
    	      this.serialNumber = defaults.serialNumber;
    	      this.sha1Fingerprint = defaults.sha1Fingerprint;
        }

        @CustomType.Setter
        public Builder cert(@Nullable String cert) {
            this.cert = cert;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(@Nullable String createTime) {
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(@Nullable String expireTime) {
            this.expireTime = expireTime;
            return this;
        }
        @CustomType.Setter
        public Builder serialNumber(@Nullable String serialNumber) {
            this.serialNumber = serialNumber;
            return this;
        }
        @CustomType.Setter
        public Builder sha1Fingerprint(@Nullable String sha1Fingerprint) {
            this.sha1Fingerprint = sha1Fingerprint;
            return this;
        }
        public InstanceServerCaCert build() {
            final var o = new InstanceServerCaCert();
            o.cert = cert;
            o.createTime = createTime;
            o.expireTime = expireTime;
            o.serialNumber = serialNumber;
            o.sha1Fingerprint = sha1Fingerprint;
            return o;
        }
    }
}
