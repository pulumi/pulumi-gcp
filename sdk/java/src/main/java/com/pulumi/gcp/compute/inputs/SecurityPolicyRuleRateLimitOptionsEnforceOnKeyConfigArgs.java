// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs Empty = new SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs();

    /**
     * Rate limit key name applicable only for the following key types:
     * 
     */
    @Import(name="enforceOnKeyName")
    private @Nullable Output<String> enforceOnKeyName;

    /**
     * @return Rate limit key name applicable only for the following key types:
     * 
     */
    public Optional<Output<String>> enforceOnKeyName() {
        return Optional.ofNullable(this.enforceOnKeyName);
    }

    /**
     * Determines the key to enforce the `rate_limit_threshold` on. If not specified, defaults to `ALL`.
     * 
     */
    @Import(name="enforceOnKeyType")
    private @Nullable Output<String> enforceOnKeyType;

    /**
     * @return Determines the key to enforce the `rate_limit_threshold` on. If not specified, defaults to `ALL`.
     * 
     */
    public Optional<Output<String>> enforceOnKeyType() {
        return Optional.ofNullable(this.enforceOnKeyType);
    }

    private SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs() {}

    private SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs $) {
        this.enforceOnKeyName = $.enforceOnKeyName;
        this.enforceOnKeyType = $.enforceOnKeyType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs $;

        public Builder() {
            $ = new SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs();
        }

        public Builder(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs defaults) {
            $ = new SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enforceOnKeyName Rate limit key name applicable only for the following key types:
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKeyName(@Nullable Output<String> enforceOnKeyName) {
            $.enforceOnKeyName = enforceOnKeyName;
            return this;
        }

        /**
         * @param enforceOnKeyName Rate limit key name applicable only for the following key types:
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKeyName(String enforceOnKeyName) {
            return enforceOnKeyName(Output.of(enforceOnKeyName));
        }

        /**
         * @param enforceOnKeyType Determines the key to enforce the `rate_limit_threshold` on. If not specified, defaults to `ALL`.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKeyType(@Nullable Output<String> enforceOnKeyType) {
            $.enforceOnKeyType = enforceOnKeyType;
            return this;
        }

        /**
         * @param enforceOnKeyType Determines the key to enforce the `rate_limit_threshold` on. If not specified, defaults to `ALL`.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKeyType(String enforceOnKeyType) {
            return enforceOnKeyType(Output.of(enforceOnKeyType));
        }

        public SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs build() {
            return $;
        }
    }

}
