// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertPolicyAlertStrategyNotificationChannelStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertPolicyAlertStrategyNotificationChannelStrategyArgs Empty = new AlertPolicyAlertStrategyNotificationChannelStrategyArgs();

    /**
     * The notification channels that these settings apply to. Each of these
     * correspond to the name field in one of the NotificationChannel objects
     * referenced in the notification_channels field of this AlertPolicy. The format is
     * `projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]`
     * 
     */
    @Import(name="notificationChannelNames")
    private @Nullable Output<List<String>> notificationChannelNames;

    /**
     * @return The notification channels that these settings apply to. Each of these
     * correspond to the name field in one of the NotificationChannel objects
     * referenced in the notification_channels field of this AlertPolicy. The format is
     * `projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]`
     * 
     */
    public Optional<Output<List<String>>> notificationChannelNames() {
        return Optional.ofNullable(this.notificationChannelNames);
    }

    /**
     * The frequency at which to send reminder notifications for open incidents.
     * 
     */
    @Import(name="renotifyInterval")
    private @Nullable Output<String> renotifyInterval;

    /**
     * @return The frequency at which to send reminder notifications for open incidents.
     * 
     */
    public Optional<Output<String>> renotifyInterval() {
        return Optional.ofNullable(this.renotifyInterval);
    }

    private AlertPolicyAlertStrategyNotificationChannelStrategyArgs() {}

    private AlertPolicyAlertStrategyNotificationChannelStrategyArgs(AlertPolicyAlertStrategyNotificationChannelStrategyArgs $) {
        this.notificationChannelNames = $.notificationChannelNames;
        this.renotifyInterval = $.renotifyInterval;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertPolicyAlertStrategyNotificationChannelStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertPolicyAlertStrategyNotificationChannelStrategyArgs $;

        public Builder() {
            $ = new AlertPolicyAlertStrategyNotificationChannelStrategyArgs();
        }

        public Builder(AlertPolicyAlertStrategyNotificationChannelStrategyArgs defaults) {
            $ = new AlertPolicyAlertStrategyNotificationChannelStrategyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param notificationChannelNames The notification channels that these settings apply to. Each of these
         * correspond to the name field in one of the NotificationChannel objects
         * referenced in the notification_channels field of this AlertPolicy. The format is
         * `projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]`
         * 
         * @return builder
         * 
         */
        public Builder notificationChannelNames(@Nullable Output<List<String>> notificationChannelNames) {
            $.notificationChannelNames = notificationChannelNames;
            return this;
        }

        /**
         * @param notificationChannelNames The notification channels that these settings apply to. Each of these
         * correspond to the name field in one of the NotificationChannel objects
         * referenced in the notification_channels field of this AlertPolicy. The format is
         * `projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]`
         * 
         * @return builder
         * 
         */
        public Builder notificationChannelNames(List<String> notificationChannelNames) {
            return notificationChannelNames(Output.of(notificationChannelNames));
        }

        /**
         * @param notificationChannelNames The notification channels that these settings apply to. Each of these
         * correspond to the name field in one of the NotificationChannel objects
         * referenced in the notification_channels field of this AlertPolicy. The format is
         * `projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]`
         * 
         * @return builder
         * 
         */
        public Builder notificationChannelNames(String... notificationChannelNames) {
            return notificationChannelNames(List.of(notificationChannelNames));
        }

        /**
         * @param renotifyInterval The frequency at which to send reminder notifications for open incidents.
         * 
         * @return builder
         * 
         */
        public Builder renotifyInterval(@Nullable Output<String> renotifyInterval) {
            $.renotifyInterval = renotifyInterval;
            return this;
        }

        /**
         * @param renotifyInterval The frequency at which to send reminder notifications for open incidents.
         * 
         * @return builder
         * 
         */
        public Builder renotifyInterval(String renotifyInterval) {
            return renotifyInterval(Output.of(renotifyInterval));
        }

        public AlertPolicyAlertStrategyNotificationChannelStrategyArgs build() {
            return $;
        }
    }

}
