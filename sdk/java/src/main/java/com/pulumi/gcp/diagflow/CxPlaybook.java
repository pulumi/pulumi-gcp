// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.diagflow.CxPlaybookArgs;
import com.pulumi.gcp.diagflow.inputs.CxPlaybookState;
import com.pulumi.gcp.diagflow.outputs.CxPlaybookInstruction;
import com.pulumi.gcp.diagflow.outputs.CxPlaybookLlmModelSettings;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Playbook is the basic building block to instruct the LLM how to execute a certain task.
 * 
 * To get more information about Playbook, see:
 * 
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.playbooks)
 * * How-to Guides
 *     * [Official CX Documentation](https://cloud.google.com/dialogflow/cx/docs)
 * 
 * ## Example Usage
 * 
 * ### Dialogflowcx Playbook Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.diagflow.CxAgent;
 * import com.pulumi.gcp.diagflow.CxAgentArgs;
 * import com.pulumi.gcp.diagflow.CxPlaybook;
 * import com.pulumi.gcp.diagflow.CxPlaybookArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPlaybookInstructionArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var agent = new CxAgent("agent", CxAgentArgs.builder()
 *             .displayName("dialogflowcx-agent-basic")
 *             .location("global")
 *             .defaultLanguageCode("en")
 *             .timeZone("America/New_York")
 *             .description("Example description.")
 *             .build());
 * 
 *         var my_playbook = new CxPlaybook("my-playbook", CxPlaybookArgs.builder()
 *             .parent(agent.id())
 *             .displayName("Example Display Name")
 *             .goal("Example Goal")
 *             .playbookType("ROUTINE")
 *             .instruction(CxPlaybookInstructionArgs.builder()
 *                 .steps(                
 *                     CxPlaybookInstructionStepArgs.builder()
 *                         .text("step 1")
 *                         .steps(serializeJson(
 *                             jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("text", "step 1 1")
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("text", "step 1 2"),
 *                                     jsonProperty("steps", jsonArray(
 *                                         jsonObject(
 *                                             jsonProperty("text", "step 1 2 1")
 *                                         ), 
 *                                         jsonObject(
 *                                             jsonProperty("text", "step 1 2 2")
 *                                         )
 *                                     ))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("text", "step 1 3")
 *                                 )
 *                             )))
 *                         .build(),
 *                     CxPlaybookInstructionStepArgs.builder()
 *                         .text("step 2")
 *                         .build(),
 *                     CxPlaybookInstructionStepArgs.builder()
 *                         .text("step 3")
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Dialogflowcx Playbook Fulfillment
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.diagflow.CxAgent;
 * import com.pulumi.gcp.diagflow.CxAgentArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.diagflow.CxWebhook;
 * import com.pulumi.gcp.diagflow.CxWebhookArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxWebhookGenericWebServiceArgs;
 * import com.pulumi.gcp.diagflow.CxTool;
 * import com.pulumi.gcp.diagflow.CxToolArgs;
 * import com.pulumi.gcp.diagflow.CxGenerator;
 * import com.pulumi.gcp.diagflow.CxGeneratorArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxGeneratorLlmModelSettingsArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxGeneratorPromptTextArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxGeneratorModelParameterArgs;
 * import com.pulumi.gcp.diagflow.CxPlaybook;
 * import com.pulumi.gcp.diagflow.CxPlaybookArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPlaybookInstructionArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxPlaybookLlmModelSettingsArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var agent = new CxAgent("agent", CxAgentArgs.builder()
 *             .displayName("dialogflowcx-agent")
 *             .location("global")
 *             .defaultLanguageCode("en")
 *             .timeZone("America/New_York")
 *             .description("Example description.")
 *             .build());
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name("dialogflowcx-bucket")
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var myWebhook = new CxWebhook("myWebhook", CxWebhookArgs.builder()
 *             .parent(agent.id())
 *             .displayName("MyWebhook")
 *             .genericWebService(CxWebhookGenericWebServiceArgs.builder()
 *                 .uri("https://example.com")
 *                 .build())
 *             .build());
 * 
 *         var myTool = new CxTool("myTool", CxToolArgs.builder()
 *             .parent(agent.id())
 *             .displayName("Example Tool")
 *             .description("Example Description")
 *             .build());
 * 
 *         var myGenerator = new CxGenerator("myGenerator", CxGeneratorArgs.builder()
 *             .parent(agent.id())
 *             .displayName("TF Prompt generator")
 *             .llmModelSettings(CxGeneratorLlmModelSettingsArgs.builder()
 *                 .model("gemini-2.0-flash-001")
 *                 .promptText("Return me some great results")
 *                 .build())
 *             .promptText(CxGeneratorPromptTextArgs.builder()
 *                 .text("Send me great results in french")
 *                 .build())
 *             .modelParameter(CxGeneratorModelParameterArgs.builder()
 *                 .temperature(0.55)
 *                 .build())
 *             .build());
 * 
 *         var my_playbook = new CxPlaybook("my-playbook", CxPlaybookArgs.builder()
 *             .parent(agent.id())
 *             .displayName("Playbook Example with Fulfillment")
 *             .goal("Example Goal")
 *             .instruction(CxPlaybookInstructionArgs.builder()
 *                 .guidelines("Example Guidelines")
 *                 .steps(                
 *                     CxPlaybookInstructionStepArgs.builder()
 *                         .text("step 1")
 *                         .steps(serializeJson(
 *                             jsonArray(
 *                                 jsonObject(
 *                                     jsonProperty("text", "step 1 1")
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("text", "step 1 2"),
 *                                     jsonProperty("steps", jsonArray(
 *                                         jsonObject(
 *                                             jsonProperty("text", "step 1 2 1")
 *                                         ), 
 *                                         jsonObject(
 *                                             jsonProperty("text", "step 1 2 2")
 *                                         )
 *                                     ))
 *                                 ), 
 *                                 jsonObject(
 *                                     jsonProperty("text", "step 1 3")
 *                                 )
 *                             )))
 *                         .build(),
 *                     CxPlaybookInstructionStepArgs.builder()
 *                         .text("step 2")
 *                         .build(),
 *                     CxPlaybookInstructionStepArgs.builder()
 *                         .text("step 3")
 *                         .build())
 *                 .build())
 *             .llmModelSettings(CxPlaybookLlmModelSettingsArgs.builder()
 *                 .model("gemini-2.0-flash-001")
 *                 .promptText("Return me some great results")
 *                 .build())
 *             .referencedTools(myTool.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Playbook can be imported using any of these accepted formats:
 * 
 * * `{{parent}}/playbooks/{{name}}`
 * 
 * * `{{parent}}/{{name}}`
 * 
 * When using the `pulumi import` command, Playbook can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:diagflow/cxPlaybook:CxPlaybook default {{parent}}/playbooks/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:diagflow/cxPlaybook:CxPlaybook default {{parent}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:diagflow/cxPlaybook:CxPlaybook")
public class CxPlaybook extends com.pulumi.resources.CustomResource {
    /**
     * The timestamp of initial playbook creation.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted. Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The timestamp of initial playbook creation.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted. Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The human-readable name of the playbook, unique within an agent.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The human-readable name of the playbook, unique within an agent.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * High level description of the goal the playbook intend to accomplish. A goal should be concise since it&#39;s visible to other playbooks that may reference this playbook.
     * 
     */
    @Export(name="goal", refs={String.class}, tree="[0]")
    private Output<String> goal;

    /**
     * @return High level description of the goal the playbook intend to accomplish. A goal should be concise since it&#39;s visible to other playbooks that may reference this playbook.
     * 
     */
    public Output<String> goal() {
        return this.goal;
    }
    /**
     * Instruction to accomplish target goal.
     * Structure is documented below.
     * 
     */
    @Export(name="instruction", refs={CxPlaybookInstruction.class}, tree="[0]")
    private Output</* @Nullable */ CxPlaybookInstruction> instruction;

    /**
     * @return Instruction to accomplish target goal.
     * Structure is documented below.
     * 
     */
    public Output<Optional<CxPlaybookInstruction>> instruction() {
        return Codegen.optional(this.instruction);
    }
    /**
     * Llm model settings for the playbook.
     * Structure is documented below.
     * 
     */
    @Export(name="llmModelSettings", refs={CxPlaybookLlmModelSettings.class}, tree="[0]")
    private Output</* @Nullable */ CxPlaybookLlmModelSettings> llmModelSettings;

    /**
     * @return Llm model settings for the playbook.
     * Structure is documented below.
     * 
     */
    public Output<Optional<CxPlaybookLlmModelSettings>> llmModelSettings() {
        return Codegen.optional(this.llmModelSettings);
    }
    /**
     * The unique identifier of the Playbook.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/playbooks/&lt;Playbook ID&gt;.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The unique identifier of the Playbook.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/playbooks/&lt;Playbook ID&gt;.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The agent to create a Playbook for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    @Export(name="parent", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> parent;

    /**
     * @return The agent to create a Playbook for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    public Output<Optional<String>> parent() {
        return Codegen.optional(this.parent);
    }
    /**
     * Type of the playbook.
     * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
     * 
     */
    @Export(name="playbookType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> playbookType;

    /**
     * @return Type of the playbook.
     * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
     * 
     */
    public Output<Optional<String>> playbookType() {
        return Codegen.optional(this.playbookType);
    }
    /**
     * The resource name of flows referenced by the current playbook in the instructions.
     * 
     */
    @Export(name="referencedFlows", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> referencedFlows;

    /**
     * @return The resource name of flows referenced by the current playbook in the instructions.
     * 
     */
    public Output<List<String>> referencedFlows() {
        return this.referencedFlows;
    }
    /**
     * The resource name of other playbooks referenced by the current playbook in the instructions.
     * 
     */
    @Export(name="referencedPlaybooks", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> referencedPlaybooks;

    /**
     * @return The resource name of other playbooks referenced by the current playbook in the instructions.
     * 
     */
    public Output<List<String>> referencedPlaybooks() {
        return this.referencedPlaybooks;
    }
    /**
     * The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
     * 
     */
    @Export(name="referencedTools", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> referencedTools;

    /**
     * @return The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
     * 
     */
    public Output<Optional<List<String>>> referencedTools() {
        return Codegen.optional(this.referencedTools);
    }
    /**
     * Estimated number of tokes current playbook takes when sent to the LLM.
     * 
     */
    @Export(name="tokenCount", refs={String.class}, tree="[0]")
    private Output<String> tokenCount;

    /**
     * @return Estimated number of tokes current playbook takes when sent to the LLM.
     * 
     */
    public Output<String> tokenCount() {
        return this.tokenCount;
    }
    /**
     * Last time the playbook version was updated.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted. Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Last time the playbook version was updated.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted. Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CxPlaybook(java.lang.String name) {
        this(name, CxPlaybookArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CxPlaybook(java.lang.String name, CxPlaybookArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CxPlaybook(java.lang.String name, CxPlaybookArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/cxPlaybook:CxPlaybook", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CxPlaybook(java.lang.String name, Output<java.lang.String> id, @Nullable CxPlaybookState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/cxPlaybook:CxPlaybook", name, state, makeResourceOptions(options, id), false);
    }

    private static CxPlaybookArgs makeArgs(CxPlaybookArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CxPlaybookArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CxPlaybook get(java.lang.String name, Output<java.lang.String> id, @Nullable CxPlaybookState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CxPlaybook(name, id, state, options);
    }
}
