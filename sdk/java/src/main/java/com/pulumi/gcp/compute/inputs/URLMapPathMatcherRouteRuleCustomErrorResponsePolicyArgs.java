// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.URLMapPathMatcherRouteRuleCustomErrorResponsePolicyErrorResponseRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class URLMapPathMatcherRouteRuleCustomErrorResponsePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final URLMapPathMatcherRouteRuleCustomErrorResponsePolicyArgs Empty = new URLMapPathMatcherRouteRuleCustomErrorResponsePolicyArgs();

    /**
     * Specifies rules for returning error responses.
     * In a given policy, if you specify rules for both a range of error codes as well as rules for specific error codes then rules with specific error codes have a higher priority.
     * For example, assume that you configure a rule for 401 (Un-authorized) code, and another for all 4 series error codes (4XX).
     * If the backend service returns a 401, then the rule for 401 will be applied. However if the backend service returns a 403, the rule for 4xx takes effect.
     * Structure is documented below.
     * 
     */
    @Import(name="errorResponseRules")
    private @Nullable Output<List<URLMapPathMatcherRouteRuleCustomErrorResponsePolicyErrorResponseRuleArgs>> errorResponseRules;

    /**
     * @return Specifies rules for returning error responses.
     * In a given policy, if you specify rules for both a range of error codes as well as rules for specific error codes then rules with specific error codes have a higher priority.
     * For example, assume that you configure a rule for 401 (Un-authorized) code, and another for all 4 series error codes (4XX).
     * If the backend service returns a 401, then the rule for 401 will be applied. However if the backend service returns a 403, the rule for 4xx takes effect.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<URLMapPathMatcherRouteRuleCustomErrorResponsePolicyErrorResponseRuleArgs>>> errorResponseRules() {
        return Optional.ofNullable(this.errorResponseRules);
    }

    /**
     * The full or partial URL to the BackendBucket resource that contains the custom error content. Examples are:
     * https://www.googleapis.com/compute/v1/projects/project/global/backendBuckets/myBackendBucket
     * compute/v1/projects/project/global/backendBuckets/myBackendBucket
     * global/backendBuckets/myBackendBucket
     * If errorService is not specified at lower levels like pathMatcher, pathRule and routeRule, an errorService specified at a higher level in the UrlMap will be used. If UrlMap.defaultCustomErrorResponsePolicy contains one or more errorResponseRules[], it must specify errorService.
     * If load balancer cannot reach the backendBucket, a simple Not Found Error will be returned, with the original response code (or overrideResponseCode if configured).
     * 
     */
    @Import(name="errorService")
    private @Nullable Output<String> errorService;

    /**
     * @return The full or partial URL to the BackendBucket resource that contains the custom error content. Examples are:
     * https://www.googleapis.com/compute/v1/projects/project/global/backendBuckets/myBackendBucket
     * compute/v1/projects/project/global/backendBuckets/myBackendBucket
     * global/backendBuckets/myBackendBucket
     * If errorService is not specified at lower levels like pathMatcher, pathRule and routeRule, an errorService specified at a higher level in the UrlMap will be used. If UrlMap.defaultCustomErrorResponsePolicy contains one or more errorResponseRules[], it must specify errorService.
     * If load balancer cannot reach the backendBucket, a simple Not Found Error will be returned, with the original response code (or overrideResponseCode if configured).
     * 
     */
    public Optional<Output<String>> errorService() {
        return Optional.ofNullable(this.errorService);
    }

    private URLMapPathMatcherRouteRuleCustomErrorResponsePolicyArgs() {}

    private URLMapPathMatcherRouteRuleCustomErrorResponsePolicyArgs(URLMapPathMatcherRouteRuleCustomErrorResponsePolicyArgs $) {
        this.errorResponseRules = $.errorResponseRules;
        this.errorService = $.errorService;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(URLMapPathMatcherRouteRuleCustomErrorResponsePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private URLMapPathMatcherRouteRuleCustomErrorResponsePolicyArgs $;

        public Builder() {
            $ = new URLMapPathMatcherRouteRuleCustomErrorResponsePolicyArgs();
        }

        public Builder(URLMapPathMatcherRouteRuleCustomErrorResponsePolicyArgs defaults) {
            $ = new URLMapPathMatcherRouteRuleCustomErrorResponsePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param errorResponseRules Specifies rules for returning error responses.
         * In a given policy, if you specify rules for both a range of error codes as well as rules for specific error codes then rules with specific error codes have a higher priority.
         * For example, assume that you configure a rule for 401 (Un-authorized) code, and another for all 4 series error codes (4XX).
         * If the backend service returns a 401, then the rule for 401 will be applied. However if the backend service returns a 403, the rule for 4xx takes effect.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder errorResponseRules(@Nullable Output<List<URLMapPathMatcherRouteRuleCustomErrorResponsePolicyErrorResponseRuleArgs>> errorResponseRules) {
            $.errorResponseRules = errorResponseRules;
            return this;
        }

        /**
         * @param errorResponseRules Specifies rules for returning error responses.
         * In a given policy, if you specify rules for both a range of error codes as well as rules for specific error codes then rules with specific error codes have a higher priority.
         * For example, assume that you configure a rule for 401 (Un-authorized) code, and another for all 4 series error codes (4XX).
         * If the backend service returns a 401, then the rule for 401 will be applied. However if the backend service returns a 403, the rule for 4xx takes effect.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder errorResponseRules(List<URLMapPathMatcherRouteRuleCustomErrorResponsePolicyErrorResponseRuleArgs> errorResponseRules) {
            return errorResponseRules(Output.of(errorResponseRules));
        }

        /**
         * @param errorResponseRules Specifies rules for returning error responses.
         * In a given policy, if you specify rules for both a range of error codes as well as rules for specific error codes then rules with specific error codes have a higher priority.
         * For example, assume that you configure a rule for 401 (Un-authorized) code, and another for all 4 series error codes (4XX).
         * If the backend service returns a 401, then the rule for 401 will be applied. However if the backend service returns a 403, the rule for 4xx takes effect.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder errorResponseRules(URLMapPathMatcherRouteRuleCustomErrorResponsePolicyErrorResponseRuleArgs... errorResponseRules) {
            return errorResponseRules(List.of(errorResponseRules));
        }

        /**
         * @param errorService The full or partial URL to the BackendBucket resource that contains the custom error content. Examples are:
         * https://www.googleapis.com/compute/v1/projects/project/global/backendBuckets/myBackendBucket
         * compute/v1/projects/project/global/backendBuckets/myBackendBucket
         * global/backendBuckets/myBackendBucket
         * If errorService is not specified at lower levels like pathMatcher, pathRule and routeRule, an errorService specified at a higher level in the UrlMap will be used. If UrlMap.defaultCustomErrorResponsePolicy contains one or more errorResponseRules[], it must specify errorService.
         * If load balancer cannot reach the backendBucket, a simple Not Found Error will be returned, with the original response code (or overrideResponseCode if configured).
         * 
         * @return builder
         * 
         */
        public Builder errorService(@Nullable Output<String> errorService) {
            $.errorService = errorService;
            return this;
        }

        /**
         * @param errorService The full or partial URL to the BackendBucket resource that contains the custom error content. Examples are:
         * https://www.googleapis.com/compute/v1/projects/project/global/backendBuckets/myBackendBucket
         * compute/v1/projects/project/global/backendBuckets/myBackendBucket
         * global/backendBuckets/myBackendBucket
         * If errorService is not specified at lower levels like pathMatcher, pathRule and routeRule, an errorService specified at a higher level in the UrlMap will be used. If UrlMap.defaultCustomErrorResponsePolicy contains one or more errorResponseRules[], it must specify errorService.
         * If load balancer cannot reach the backendBucket, a simple Not Found Error will be returned, with the original response code (or overrideResponseCode if configured).
         * 
         * @return builder
         * 
         */
        public Builder errorService(String errorService) {
            return errorService(Output.of(errorService));
        }

        public URLMapPathMatcherRouteRuleCustomErrorResponsePolicyArgs build() {
            return $;
        }
    }

}
