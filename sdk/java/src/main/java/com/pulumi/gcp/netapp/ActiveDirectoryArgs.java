// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActiveDirectoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActiveDirectoryArgs Empty = new ActiveDirectoryArgs();

    /**
     * Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
     * 
     */
    @Import(name="aesEncryption")
    private @Nullable Output<Boolean> aesEncryption;

    /**
     * @return Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
     * 
     */
    public Optional<Output<Boolean>> aesEncryption() {
        return Optional.ofNullable(this.aesEncryption);
    }

    /**
     * Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
     * 
     */
    @Import(name="backupOperators")
    private @Nullable Output<List<String>> backupOperators;

    /**
     * @return Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
     * 
     */
    public Optional<Output<List<String>>> backupOperators() {
        return Optional.ofNullable(this.backupOperators);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Comma separated list of DNS server IP addresses for the Active Directory domain.
     * 
     */
    @Import(name="dns", required=true)
    private Output<String> dns;

    /**
     * @return Comma separated list of DNS server IP addresses for the Active Directory domain.
     * 
     */
    public Output<String> dns() {
        return this.dns;
    }

    /**
     * Fully qualified domain name for the Active Directory domain.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return Fully qualified domain name for the Active Directory domain.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
     * 
     */
    @Import(name="encryptDcConnections")
    private @Nullable Output<Boolean> encryptDcConnections;

    /**
     * @return If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
     * 
     */
    public Optional<Output<Boolean>> encryptDcConnections() {
        return Optional.ofNullable(this.encryptDcConnections);
    }

    /**
     * Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only requried for volumes using kerberized NFSv4.1
     * 
     */
    @Import(name="kdcHostname")
    private @Nullable Output<String> kdcHostname;

    /**
     * @return Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only requried for volumes using kerberized NFSv4.1
     * 
     */
    public Optional<Output<String>> kdcHostname() {
        return Optional.ofNullable(this.kdcHostname);
    }

    /**
     * IP address of the Active Directory server used as Kerberos Key Distribution Center.
     * 
     */
    @Import(name="kdcIp")
    private @Nullable Output<String> kdcIp;

    /**
     * @return IP address of the Active Directory server used as Kerberos Key Distribution Center.
     * 
     */
    public Optional<Output<String>> kdcIp() {
        return Optional.ofNullable(this.kdcIp);
    }

    /**
     * Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Specifies whether or not the LDAP traffic needs to be signed.
     * 
     */
    @Import(name="ldapSigning")
    private @Nullable Output<Boolean> ldapSigning;

    /**
     * @return Specifies whether or not the LDAP traffic needs to be signed.
     * 
     */
    public Optional<Output<Boolean>> ldapSigning() {
        return Optional.ofNullable(this.ldapSigning);
    }

    /**
     * Name of the region for the policy to apply to.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Name of the region for the policy to apply to.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The resource name of the Active Directory pool. Needs to be unique per location.
     * 
     * ***
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the Active Directory pool. Needs to be unique per location.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * NetBIOS name prefix of the server to be created.
     * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
     * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
     * 
     */
    @Import(name="netBiosPrefix", required=true)
    private Output<String> netBiosPrefix;

    /**
     * @return NetBIOS name prefix of the server to be created.
     * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
     * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
     * 
     */
    public Output<String> netBiosPrefix() {
        return this.netBiosPrefix;
    }

    /**
     * Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
     * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
     * 
     */
    @Import(name="nfsUsersWithLdap")
    private @Nullable Output<Boolean> nfsUsersWithLdap;

    /**
     * @return Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
     * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
     * 
     */
    public Optional<Output<Boolean>> nfsUsersWithLdap() {
        return Optional.ofNullable(this.nfsUsersWithLdap);
    }

    /**
     * Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
     * Defaults to `CN=Computers` if left empty.
     * 
     */
    @Import(name="organizationalUnit")
    private @Nullable Output<String> organizationalUnit;

    /**
     * @return Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
     * Defaults to `CN=Computers` if left empty.
     * 
     */
    public Optional<Output<String>> organizationalUnit() {
        return Optional.ofNullable(this.organizationalUnit);
    }

    /**
     * Password for specified username. Note - Manual changes done to the password will not be detected. Terraform will not
     * re-apply the password, unless you use a new password in Terraform.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Password for specified username. Note - Manual changes done to the password will not be detected. Terraform will not
     * re-apply the password, unless you use a new password in Terraform.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
     * 
     */
    @Import(name="securityOperators")
    private @Nullable Output<List<String>> securityOperators;

    /**
     * @return Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
     * 
     */
    public Optional<Output<List<String>>> securityOperators() {
        return Optional.ofNullable(this.securityOperators);
    }

    /**
     * Specifies an Active Directory site to manage domain controller selection.
     * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
     * 
     */
    @Import(name="site")
    private @Nullable Output<String> site;

    /**
     * @return Specifies an Active Directory site to manage domain controller selection.
     * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
     * 
     */
    public Optional<Output<String>> site() {
        return Optional.ofNullable(this.site);
    }

    /**
     * Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private ActiveDirectoryArgs() {}

    private ActiveDirectoryArgs(ActiveDirectoryArgs $) {
        this.aesEncryption = $.aesEncryption;
        this.backupOperators = $.backupOperators;
        this.description = $.description;
        this.dns = $.dns;
        this.domain = $.domain;
        this.encryptDcConnections = $.encryptDcConnections;
        this.kdcHostname = $.kdcHostname;
        this.kdcIp = $.kdcIp;
        this.labels = $.labels;
        this.ldapSigning = $.ldapSigning;
        this.location = $.location;
        this.name = $.name;
        this.netBiosPrefix = $.netBiosPrefix;
        this.nfsUsersWithLdap = $.nfsUsersWithLdap;
        this.organizationalUnit = $.organizationalUnit;
        this.password = $.password;
        this.project = $.project;
        this.securityOperators = $.securityOperators;
        this.site = $.site;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActiveDirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActiveDirectoryArgs $;

        public Builder() {
            $ = new ActiveDirectoryArgs();
        }

        public Builder(ActiveDirectoryArgs defaults) {
            $ = new ActiveDirectoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aesEncryption Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
         * 
         * @return builder
         * 
         */
        public Builder aesEncryption(@Nullable Output<Boolean> aesEncryption) {
            $.aesEncryption = aesEncryption;
            return this;
        }

        /**
         * @param aesEncryption Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
         * 
         * @return builder
         * 
         */
        public Builder aesEncryption(Boolean aesEncryption) {
            return aesEncryption(Output.of(aesEncryption));
        }

        /**
         * @param backupOperators Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
         * 
         * @return builder
         * 
         */
        public Builder backupOperators(@Nullable Output<List<String>> backupOperators) {
            $.backupOperators = backupOperators;
            return this;
        }

        /**
         * @param backupOperators Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
         * 
         * @return builder
         * 
         */
        public Builder backupOperators(List<String> backupOperators) {
            return backupOperators(Output.of(backupOperators));
        }

        /**
         * @param backupOperators Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
         * 
         * @return builder
         * 
         */
        public Builder backupOperators(String... backupOperators) {
            return backupOperators(List.of(backupOperators));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dns Comma separated list of DNS server IP addresses for the Active Directory domain.
         * 
         * @return builder
         * 
         */
        public Builder dns(Output<String> dns) {
            $.dns = dns;
            return this;
        }

        /**
         * @param dns Comma separated list of DNS server IP addresses for the Active Directory domain.
         * 
         * @return builder
         * 
         */
        public Builder dns(String dns) {
            return dns(Output.of(dns));
        }

        /**
         * @param domain Fully qualified domain name for the Active Directory domain.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Fully qualified domain name for the Active Directory domain.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param encryptDcConnections If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder encryptDcConnections(@Nullable Output<Boolean> encryptDcConnections) {
            $.encryptDcConnections = encryptDcConnections;
            return this;
        }

        /**
         * @param encryptDcConnections If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder encryptDcConnections(Boolean encryptDcConnections) {
            return encryptDcConnections(Output.of(encryptDcConnections));
        }

        /**
         * @param kdcHostname Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only requried for volumes using kerberized NFSv4.1
         * 
         * @return builder
         * 
         */
        public Builder kdcHostname(@Nullable Output<String> kdcHostname) {
            $.kdcHostname = kdcHostname;
            return this;
        }

        /**
         * @param kdcHostname Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only requried for volumes using kerberized NFSv4.1
         * 
         * @return builder
         * 
         */
        public Builder kdcHostname(String kdcHostname) {
            return kdcHostname(Output.of(kdcHostname));
        }

        /**
         * @param kdcIp IP address of the Active Directory server used as Kerberos Key Distribution Center.
         * 
         * @return builder
         * 
         */
        public Builder kdcIp(@Nullable Output<String> kdcIp) {
            $.kdcIp = kdcIp;
            return this;
        }

        /**
         * @param kdcIp IP address of the Active Directory server used as Kerberos Key Distribution Center.
         * 
         * @return builder
         * 
         */
        public Builder kdcIp(String kdcIp) {
            return kdcIp(Output.of(kdcIp));
        }

        /**
         * @param labels Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param ldapSigning Specifies whether or not the LDAP traffic needs to be signed.
         * 
         * @return builder
         * 
         */
        public Builder ldapSigning(@Nullable Output<Boolean> ldapSigning) {
            $.ldapSigning = ldapSigning;
            return this;
        }

        /**
         * @param ldapSigning Specifies whether or not the LDAP traffic needs to be signed.
         * 
         * @return builder
         * 
         */
        public Builder ldapSigning(Boolean ldapSigning) {
            return ldapSigning(Output.of(ldapSigning));
        }

        /**
         * @param location Name of the region for the policy to apply to.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Name of the region for the policy to apply to.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the Active Directory pool. Needs to be unique per location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the Active Directory pool. Needs to be unique per location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param netBiosPrefix NetBIOS name prefix of the server to be created.
         * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
         * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
         * 
         * @return builder
         * 
         */
        public Builder netBiosPrefix(Output<String> netBiosPrefix) {
            $.netBiosPrefix = netBiosPrefix;
            return this;
        }

        /**
         * @param netBiosPrefix NetBIOS name prefix of the server to be created.
         * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
         * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
         * 
         * @return builder
         * 
         */
        public Builder netBiosPrefix(String netBiosPrefix) {
            return netBiosPrefix(Output.of(netBiosPrefix));
        }

        /**
         * @param nfsUsersWithLdap Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
         * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
         * 
         * @return builder
         * 
         */
        public Builder nfsUsersWithLdap(@Nullable Output<Boolean> nfsUsersWithLdap) {
            $.nfsUsersWithLdap = nfsUsersWithLdap;
            return this;
        }

        /**
         * @param nfsUsersWithLdap Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
         * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
         * 
         * @return builder
         * 
         */
        public Builder nfsUsersWithLdap(Boolean nfsUsersWithLdap) {
            return nfsUsersWithLdap(Output.of(nfsUsersWithLdap));
        }

        /**
         * @param organizationalUnit Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
         * Defaults to `CN=Computers` if left empty.
         * 
         * @return builder
         * 
         */
        public Builder organizationalUnit(@Nullable Output<String> organizationalUnit) {
            $.organizationalUnit = organizationalUnit;
            return this;
        }

        /**
         * @param organizationalUnit Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
         * Defaults to `CN=Computers` if left empty.
         * 
         * @return builder
         * 
         */
        public Builder organizationalUnit(String organizationalUnit) {
            return organizationalUnit(Output.of(organizationalUnit));
        }

        /**
         * @param password Password for specified username. Note - Manual changes done to the password will not be detected. Terraform will not
         * re-apply the password, unless you use a new password in Terraform.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for specified username. Note - Manual changes done to the password will not be detected. Terraform will not
         * re-apply the password, unless you use a new password in Terraform.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param securityOperators Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
         * 
         * @return builder
         * 
         */
        public Builder securityOperators(@Nullable Output<List<String>> securityOperators) {
            $.securityOperators = securityOperators;
            return this;
        }

        /**
         * @param securityOperators Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
         * 
         * @return builder
         * 
         */
        public Builder securityOperators(List<String> securityOperators) {
            return securityOperators(Output.of(securityOperators));
        }

        /**
         * @param securityOperators Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
         * 
         * @return builder
         * 
         */
        public Builder securityOperators(String... securityOperators) {
            return securityOperators(List.of(securityOperators));
        }

        /**
         * @param site Specifies an Active Directory site to manage domain controller selection.
         * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site Specifies an Active Directory site to manage domain controller selection.
         * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        /**
         * @param username Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ActiveDirectoryArgs build() {
            if ($.dns == null) {
                throw new MissingRequiredPropertyException("ActiveDirectoryArgs", "dns");
            }
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("ActiveDirectoryArgs", "domain");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("ActiveDirectoryArgs", "location");
            }
            if ($.netBiosPrefix == null) {
                throw new MissingRequiredPropertyException("ActiveDirectoryArgs", "netBiosPrefix");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("ActiveDirectoryArgs", "password");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("ActiveDirectoryArgs", "username");
            }
            return $;
        }
    }

}
