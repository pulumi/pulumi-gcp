// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionInstanceGroupManagerStandbyPolicy {
    /**
     * @return Specifies the number of seconds that the MIG should wait to suspend or stop a VM after that VM was created. The initial delay gives the initialization script the time to prepare your VM for a quick scale out. The value of initial delay must be between 0 and 3600 seconds. The default value is 0.
     * 
     */
    private @Nullable Integer initialDelaySec;
    /**
     * @return Defines how a MIG resumes or starts VMs from a standby pool when the group scales out. Valid options are: `MANUAL`, `SCALE_OUT_POOL`. If `MANUAL`(default), you have full control over which VMs are stopped and suspended in the MIG. If `SCALE_OUT_POOL`, the MIG uses the VMs from the standby pools to accelerate the scale out by resuming or starting them and then automatically replenishes the standby pool with new VMs to maintain the target sizes.
     * 
     */
    private @Nullable String mode;

    private RegionInstanceGroupManagerStandbyPolicy() {}
    /**
     * @return Specifies the number of seconds that the MIG should wait to suspend or stop a VM after that VM was created. The initial delay gives the initialization script the time to prepare your VM for a quick scale out. The value of initial delay must be between 0 and 3600 seconds. The default value is 0.
     * 
     */
    public Optional<Integer> initialDelaySec() {
        return Optional.ofNullable(this.initialDelaySec);
    }
    /**
     * @return Defines how a MIG resumes or starts VMs from a standby pool when the group scales out. Valid options are: `MANUAL`, `SCALE_OUT_POOL`. If `MANUAL`(default), you have full control over which VMs are stopped and suspended in the MIG. If `SCALE_OUT_POOL`, the MIG uses the VMs from the standby pools to accelerate the scale out by resuming or starting them and then automatically replenishes the standby pool with new VMs to maintain the target sizes.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionInstanceGroupManagerStandbyPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer initialDelaySec;
        private @Nullable String mode;
        public Builder() {}
        public Builder(RegionInstanceGroupManagerStandbyPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.initialDelaySec = defaults.initialDelaySec;
    	      this.mode = defaults.mode;
        }

        @CustomType.Setter
        public Builder initialDelaySec(@Nullable Integer initialDelaySec) {

            this.initialDelaySec = initialDelaySec;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        public RegionInstanceGroupManagerStandbyPolicy build() {
            final var _resultValue = new RegionInstanceGroupManagerStandbyPolicy();
            _resultValue.initialDelaySec = initialDelaySec;
            _resultValue.mode = mode;
            return _resultValue;
        }
    }
}
