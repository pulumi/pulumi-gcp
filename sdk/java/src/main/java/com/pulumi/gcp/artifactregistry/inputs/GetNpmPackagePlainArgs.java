// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNpmPackagePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNpmPackagePlainArgs Empty = new GetNpmPackagePlainArgs();

    /**
     * The location of the Artifact Registry repository.
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return The location of the Artifact Registry repository.
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * The name of the package to fetch. Can optionally include a specific version (e.g., `my_pkg:1.2.3`). If no version is provided, the latest version is used.
     * 
     */
    @Import(name="packageName", required=true)
    private String packageName;

    /**
     * @return The name of the package to fetch. Can optionally include a specific version (e.g., `my_pkg:1.2.3`). If no version is provided, the latest version is used.
     * 
     */
    public String packageName() {
        return this.packageName;
    }

    /**
     * The ID of the project that owns the repository. If not provided, the provider-level project is used.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return The ID of the project that owns the repository. If not provided, the provider-level project is used.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The ID of the repository containing the NPM package.
     * 
     */
    @Import(name="repositoryId", required=true)
    private String repositoryId;

    /**
     * @return The ID of the repository containing the NPM package.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    private GetNpmPackagePlainArgs() {}

    private GetNpmPackagePlainArgs(GetNpmPackagePlainArgs $) {
        this.location = $.location;
        this.packageName = $.packageName;
        this.project = $.project;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNpmPackagePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNpmPackagePlainArgs $;

        public Builder() {
            $ = new GetNpmPackagePlainArgs();
        }

        public Builder(GetNpmPackagePlainArgs defaults) {
            $ = new GetNpmPackagePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location The location of the Artifact Registry repository.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param packageName The name of the package to fetch. Can optionally include a specific version (e.g., `my_pkg:1.2.3`). If no version is provided, the latest version is used.
         * 
         * @return builder
         * 
         */
        public Builder packageName(String packageName) {
            $.packageName = packageName;
            return this;
        }

        /**
         * @param project The ID of the project that owns the repository. If not provided, the provider-level project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        /**
         * @param repositoryId The ID of the repository containing the NPM package.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        public GetNpmPackagePlainArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetNpmPackagePlainArgs", "location");
            }
            if ($.packageName == null) {
                throw new MissingRequiredPropertyException("GetNpmPackagePlainArgs", "packageName");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("GetNpmPackagePlainArgs", "repositoryId");
            }
            return $;
        }
    }

}
