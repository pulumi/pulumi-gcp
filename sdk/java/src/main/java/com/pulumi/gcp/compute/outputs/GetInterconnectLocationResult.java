// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInterconnectLocationResult {
    /**
     * @return The postal address of the Point of Presence.
     * 
     */
    private String address;
    /**
     * @return The availability zone for this InterconnectLocation.
     * 
     */
    private String availabilityZone;
    /**
     * @return The city for this location.
     * 
     */
    private String city;
    /**
     * @return The continent for this location.
     * 
     */
    private String continent;
    /**
     * @return A textual description of the resource.
     * 
     */
    private String description;
    /**
     * @return The name of the provider for this facility.
     * 
     */
    private String facilityProvider;
    /**
     * @return A provider-assigned Identifier for this facility.
     * 
     */
    private String facilityProviderFacilityId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return The PeeringDB facility ID for this facility.
     * 
     */
    private String peeringdbFacilityId;
    private String project;
    /**
     * @return The URI of the created resource.
     * 
     */
    private String selfLink;
    /**
     * @return The status of this InterconnectLocation.
     * 
     */
    private String status;

    private GetInterconnectLocationResult() {}
    /**
     * @return The postal address of the Point of Presence.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return The availability zone for this InterconnectLocation.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return The city for this location.
     * 
     */
    public String city() {
        return this.city;
    }
    /**
     * @return The continent for this location.
     * 
     */
    public String continent() {
        return this.continent;
    }
    /**
     * @return A textual description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The name of the provider for this facility.
     * 
     */
    public String facilityProvider() {
        return this.facilityProvider;
    }
    /**
     * @return A provider-assigned Identifier for this facility.
     * 
     */
    public String facilityProviderFacilityId() {
        return this.facilityProviderFacilityId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The PeeringDB facility ID for this facility.
     * 
     */
    public String peeringdbFacilityId() {
        return this.peeringdbFacilityId;
    }
    public String project() {
        return this.project;
    }
    /**
     * @return The URI of the created resource.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return The status of this InterconnectLocation.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInterconnectLocationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private String availabilityZone;
        private String city;
        private String continent;
        private String description;
        private String facilityProvider;
        private String facilityProviderFacilityId;
        private String id;
        private String name;
        private String peeringdbFacilityId;
        private String project;
        private String selfLink;
        private String status;
        public Builder() {}
        public Builder(GetInterconnectLocationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.city = defaults.city;
    	      this.continent = defaults.continent;
    	      this.description = defaults.description;
    	      this.facilityProvider = defaults.facilityProvider;
    	      this.facilityProviderFacilityId = defaults.facilityProviderFacilityId;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.peeringdbFacilityId = defaults.peeringdbFacilityId;
    	      this.project = defaults.project;
    	      this.selfLink = defaults.selfLink;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            if (availabilityZone == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "availabilityZone");
            }
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder city(String city) {
            if (city == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "city");
            }
            this.city = city;
            return this;
        }
        @CustomType.Setter
        public Builder continent(String continent) {
            if (continent == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "continent");
            }
            this.continent = continent;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder facilityProvider(String facilityProvider) {
            if (facilityProvider == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "facilityProvider");
            }
            this.facilityProvider = facilityProvider;
            return this;
        }
        @CustomType.Setter
        public Builder facilityProviderFacilityId(String facilityProviderFacilityId) {
            if (facilityProviderFacilityId == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "facilityProviderFacilityId");
            }
            this.facilityProviderFacilityId = facilityProviderFacilityId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder peeringdbFacilityId(String peeringdbFacilityId) {
            if (peeringdbFacilityId == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "peeringdbFacilityId");
            }
            this.peeringdbFacilityId = peeringdbFacilityId;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetInterconnectLocationResult", "status");
            }
            this.status = status;
            return this;
        }
        public GetInterconnectLocationResult build() {
            final var _resultValue = new GetInterconnectLocationResult();
            _resultValue.address = address;
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.city = city;
            _resultValue.continent = continent;
            _resultValue.description = description;
            _resultValue.facilityProvider = facilityProvider;
            _resultValue.facilityProviderFacilityId = facilityProviderFacilityId;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.peeringdbFacilityId = peeringdbFacilityId;
            _resultValue.project = project;
            _resultValue.selfLink = selfLink;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
