// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.datastream.inputs.StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs;
import com.pulumi.gcp.datastream.inputs.StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamSourceConfigPostgresqlSourceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamSourceConfigPostgresqlSourceConfigArgs Empty = new StreamSourceConfigPostgresqlSourceConfigArgs();

    /**
     * PostgreSQL objects to exclude from the stream.
     * Structure is documented below.
     * 
     */
    @Import(name="excludeObjects")
    private @Nullable Output<StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs> excludeObjects;

    /**
     * @return PostgreSQL objects to exclude from the stream.
     * Structure is documented below.
     * 
     */
    public Optional<Output<StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs>> excludeObjects() {
        return Optional.ofNullable(this.excludeObjects);
    }

    /**
     * PostgreSQL objects to retrieve from the source.
     * Structure is documented below.
     * 
     */
    @Import(name="includeObjects")
    private @Nullable Output<StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs> includeObjects;

    /**
     * @return PostgreSQL objects to retrieve from the source.
     * Structure is documented below.
     * 
     */
    public Optional<Output<StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs>> includeObjects() {
        return Optional.ofNullable(this.includeObjects);
    }

    /**
     * Maximum number of concurrent backfill tasks. The number should be non
     * negative. If not set (or set to 0), the system&#39;s default value will be used.
     * 
     */
    @Import(name="maxConcurrentBackfillTasks")
    private @Nullable Output<Integer> maxConcurrentBackfillTasks;

    /**
     * @return Maximum number of concurrent backfill tasks. The number should be non
     * negative. If not set (or set to 0), the system&#39;s default value will be used.
     * 
     */
    public Optional<Output<Integer>> maxConcurrentBackfillTasks() {
        return Optional.ofNullable(this.maxConcurrentBackfillTasks);
    }

    /**
     * The name of the publication that includes the set of all tables
     * that are defined in the stream&#39;s include_objects.
     * 
     */
    @Import(name="publication", required=true)
    private Output<String> publication;

    /**
     * @return The name of the publication that includes the set of all tables
     * that are defined in the stream&#39;s include_objects.
     * 
     */
    public Output<String> publication() {
        return this.publication;
    }

    /**
     * The name of the logical replication slot that&#39;s configured with
     * the pgoutput plugin.
     * 
     */
    @Import(name="replicationSlot", required=true)
    private Output<String> replicationSlot;

    /**
     * @return The name of the logical replication slot that&#39;s configured with
     * the pgoutput plugin.
     * 
     */
    public Output<String> replicationSlot() {
        return this.replicationSlot;
    }

    private StreamSourceConfigPostgresqlSourceConfigArgs() {}

    private StreamSourceConfigPostgresqlSourceConfigArgs(StreamSourceConfigPostgresqlSourceConfigArgs $) {
        this.excludeObjects = $.excludeObjects;
        this.includeObjects = $.includeObjects;
        this.maxConcurrentBackfillTasks = $.maxConcurrentBackfillTasks;
        this.publication = $.publication;
        this.replicationSlot = $.replicationSlot;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamSourceConfigPostgresqlSourceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamSourceConfigPostgresqlSourceConfigArgs $;

        public Builder() {
            $ = new StreamSourceConfigPostgresqlSourceConfigArgs();
        }

        public Builder(StreamSourceConfigPostgresqlSourceConfigArgs defaults) {
            $ = new StreamSourceConfigPostgresqlSourceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludeObjects PostgreSQL objects to exclude from the stream.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder excludeObjects(@Nullable Output<StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs> excludeObjects) {
            $.excludeObjects = excludeObjects;
            return this;
        }

        /**
         * @param excludeObjects PostgreSQL objects to exclude from the stream.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder excludeObjects(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs excludeObjects) {
            return excludeObjects(Output.of(excludeObjects));
        }

        /**
         * @param includeObjects PostgreSQL objects to retrieve from the source.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder includeObjects(@Nullable Output<StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs> includeObjects) {
            $.includeObjects = includeObjects;
            return this;
        }

        /**
         * @param includeObjects PostgreSQL objects to retrieve from the source.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder includeObjects(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs includeObjects) {
            return includeObjects(Output.of(includeObjects));
        }

        /**
         * @param maxConcurrentBackfillTasks Maximum number of concurrent backfill tasks. The number should be non
         * negative. If not set (or set to 0), the system&#39;s default value will be used.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentBackfillTasks(@Nullable Output<Integer> maxConcurrentBackfillTasks) {
            $.maxConcurrentBackfillTasks = maxConcurrentBackfillTasks;
            return this;
        }

        /**
         * @param maxConcurrentBackfillTasks Maximum number of concurrent backfill tasks. The number should be non
         * negative. If not set (or set to 0), the system&#39;s default value will be used.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentBackfillTasks(Integer maxConcurrentBackfillTasks) {
            return maxConcurrentBackfillTasks(Output.of(maxConcurrentBackfillTasks));
        }

        /**
         * @param publication The name of the publication that includes the set of all tables
         * that are defined in the stream&#39;s include_objects.
         * 
         * @return builder
         * 
         */
        public Builder publication(Output<String> publication) {
            $.publication = publication;
            return this;
        }

        /**
         * @param publication The name of the publication that includes the set of all tables
         * that are defined in the stream&#39;s include_objects.
         * 
         * @return builder
         * 
         */
        public Builder publication(String publication) {
            return publication(Output.of(publication));
        }

        /**
         * @param replicationSlot The name of the logical replication slot that&#39;s configured with
         * the pgoutput plugin.
         * 
         * @return builder
         * 
         */
        public Builder replicationSlot(Output<String> replicationSlot) {
            $.replicationSlot = replicationSlot;
            return this;
        }

        /**
         * @param replicationSlot The name of the logical replication slot that&#39;s configured with
         * the pgoutput plugin.
         * 
         * @return builder
         * 
         */
        public Builder replicationSlot(String replicationSlot) {
            return replicationSlot(Output.of(replicationSlot));
        }

        public StreamSourceConfigPostgresqlSourceConfigArgs build() {
            if ($.publication == null) {
                throw new MissingRequiredPropertyException("StreamSourceConfigPostgresqlSourceConfigArgs", "publication");
            }
            if ($.replicationSlot == null) {
                throw new MissingRequiredPropertyException("StreamSourceConfigPostgresqlSourceConfigArgs", "replicationSlot");
            }
            return $;
        }
    }

}
