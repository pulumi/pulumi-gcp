// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BatchRuntimeInfoApproximateUsage {
    /**
     * @return (Output)
     * Accelerator type being used, if any.
     * 
     */
    private @Nullable String acceleratorType;
    /**
     * @return (Output)
     * Accelerator usage in (milliAccelerator x seconds)
     * 
     */
    private @Nullable String milliAcceleratorSeconds;
    /**
     * @return (Output)
     * DCU (Dataproc Compute Units) usage in (milliDCU x seconds)
     * 
     */
    private @Nullable String milliDcuSeconds;
    /**
     * @return (Output)
     * Shuffle storage usage in (GB x seconds)
     * 
     */
    private @Nullable String shuffleStorageGbSeconds;

    private BatchRuntimeInfoApproximateUsage() {}
    /**
     * @return (Output)
     * Accelerator type being used, if any.
     * 
     */
    public Optional<String> acceleratorType() {
        return Optional.ofNullable(this.acceleratorType);
    }
    /**
     * @return (Output)
     * Accelerator usage in (milliAccelerator x seconds)
     * 
     */
    public Optional<String> milliAcceleratorSeconds() {
        return Optional.ofNullable(this.milliAcceleratorSeconds);
    }
    /**
     * @return (Output)
     * DCU (Dataproc Compute Units) usage in (milliDCU x seconds)
     * 
     */
    public Optional<String> milliDcuSeconds() {
        return Optional.ofNullable(this.milliDcuSeconds);
    }
    /**
     * @return (Output)
     * Shuffle storage usage in (GB x seconds)
     * 
     */
    public Optional<String> shuffleStorageGbSeconds() {
        return Optional.ofNullable(this.shuffleStorageGbSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BatchRuntimeInfoApproximateUsage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String acceleratorType;
        private @Nullable String milliAcceleratorSeconds;
        private @Nullable String milliDcuSeconds;
        private @Nullable String shuffleStorageGbSeconds;
        public Builder() {}
        public Builder(BatchRuntimeInfoApproximateUsage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorType = defaults.acceleratorType;
    	      this.milliAcceleratorSeconds = defaults.milliAcceleratorSeconds;
    	      this.milliDcuSeconds = defaults.milliDcuSeconds;
    	      this.shuffleStorageGbSeconds = defaults.shuffleStorageGbSeconds;
        }

        @CustomType.Setter
        public Builder acceleratorType(@Nullable String acceleratorType) {

            this.acceleratorType = acceleratorType;
            return this;
        }
        @CustomType.Setter
        public Builder milliAcceleratorSeconds(@Nullable String milliAcceleratorSeconds) {

            this.milliAcceleratorSeconds = milliAcceleratorSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder milliDcuSeconds(@Nullable String milliDcuSeconds) {

            this.milliDcuSeconds = milliDcuSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder shuffleStorageGbSeconds(@Nullable String shuffleStorageGbSeconds) {

            this.shuffleStorageGbSeconds = shuffleStorageGbSeconds;
            return this;
        }
        public BatchRuntimeInfoApproximateUsage build() {
            final var _resultValue = new BatchRuntimeInfoApproximateUsage();
            _resultValue.acceleratorType = acceleratorType;
            _resultValue.milliAcceleratorSeconds = milliAcceleratorSeconds;
            _resultValue.milliDcuSeconds = milliDcuSeconds;
            _resultValue.shuffleStorageGbSeconds = shuffleStorageGbSeconds;
            return _resultValue;
        }
    }
}
