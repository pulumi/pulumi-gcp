// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.chronicle;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.chronicle.inputs.ReferenceListEntryArgs;
import com.pulumi.gcp.chronicle.inputs.ReferenceListScopeInfoArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReferenceListArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReferenceListArgs Empty = new ReferenceListArgs();

    /**
     * Required. A user-provided description of the reference list.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Required. A user-provided description of the reference list.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Required. The entries of the reference list.
     * When listed, they are returned in the order that was specified at creation
     * or update. The combined size of the values of the reference list may not
     * exceed 6MB.
     * This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
     * Structure is documented below.
     * 
     */
    @Import(name="entries", required=true)
    private Output<List<ReferenceListEntryArgs>> entries;

    /**
     * @return Required. The entries of the reference list.
     * When listed, they are returned in the order that was specified at creation
     * or update. The combined size of the values of the reference list may not
     * exceed 6MB.
     * This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
     * Structure is documented below.
     * 
     */
    public Output<List<ReferenceListEntryArgs>> entries() {
        return this.entries;
    }

    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    @Import(name="instance", required=true)
    private Output<String> instance;

    /**
     * @return The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }

    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. The ID to use for the reference list. This is also the display name for
     * the reference list. It must satisfy the following requirements:
     * - Starts with letter.
     * - Contains only letters, numbers and underscore.
     * - Has length &lt; 256.
     * - Must be unique.
     * 
     */
    @Import(name="referenceListId", required=true)
    private Output<String> referenceListId;

    /**
     * @return Required. The ID to use for the reference list. This is also the display name for
     * the reference list. It must satisfy the following requirements:
     * - Starts with letter.
     * - Contains only letters, numbers and underscore.
     * - Has length &lt; 256.
     * - Must be unique.
     * 
     */
    public Output<String> referenceListId() {
        return this.referenceListId;
    }

    /**
     * ScopeInfo specifies the scope info of the reference list.
     * Structure is documented below.
     * 
     */
    @Import(name="scopeInfos")
    private @Nullable Output<List<ReferenceListScopeInfoArgs>> scopeInfos;

    /**
     * @return ScopeInfo specifies the scope info of the reference list.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ReferenceListScopeInfoArgs>>> scopeInfos() {
        return Optional.ofNullable(this.scopeInfos);
    }

    /**
     * Possible values:
     * REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
     * REFERENCE_LIST_SYNTAX_TYPE_REGEX
     * REFERENCE_LIST_SYNTAX_TYPE_CIDR
     * 
     */
    @Import(name="syntaxType", required=true)
    private Output<String> syntaxType;

    /**
     * @return Possible values:
     * REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
     * REFERENCE_LIST_SYNTAX_TYPE_REGEX
     * REFERENCE_LIST_SYNTAX_TYPE_CIDR
     * 
     */
    public Output<String> syntaxType() {
        return this.syntaxType;
    }

    private ReferenceListArgs() {}

    private ReferenceListArgs(ReferenceListArgs $) {
        this.description = $.description;
        this.entries = $.entries;
        this.instance = $.instance;
        this.location = $.location;
        this.project = $.project;
        this.referenceListId = $.referenceListId;
        this.scopeInfos = $.scopeInfos;
        this.syntaxType = $.syntaxType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReferenceListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReferenceListArgs $;

        public Builder() {
            $ = new ReferenceListArgs();
        }

        public Builder(ReferenceListArgs defaults) {
            $ = new ReferenceListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Required. A user-provided description of the reference list.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Required. A user-provided description of the reference list.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param entries Required. The entries of the reference list.
         * When listed, they are returned in the order that was specified at creation
         * or update. The combined size of the values of the reference list may not
         * exceed 6MB.
         * This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder entries(Output<List<ReferenceListEntryArgs>> entries) {
            $.entries = entries;
            return this;
        }

        /**
         * @param entries Required. The entries of the reference list.
         * When listed, they are returned in the order that was specified at creation
         * or update. The combined size of the values of the reference list may not
         * exceed 6MB.
         * This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder entries(List<ReferenceListEntryArgs> entries) {
            return entries(Output.of(entries));
        }

        /**
         * @param entries Required. The entries of the reference list.
         * When listed, they are returned in the order that was specified at creation
         * or update. The combined size of the values of the reference list may not
         * exceed 6MB.
         * This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder entries(ReferenceListEntryArgs... entries) {
            return entries(List.of(entries));
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param referenceListId Required. The ID to use for the reference list. This is also the display name for
         * the reference list. It must satisfy the following requirements:
         * - Starts with letter.
         * - Contains only letters, numbers and underscore.
         * - Has length &lt; 256.
         * - Must be unique.
         * 
         * @return builder
         * 
         */
        public Builder referenceListId(Output<String> referenceListId) {
            $.referenceListId = referenceListId;
            return this;
        }

        /**
         * @param referenceListId Required. The ID to use for the reference list. This is also the display name for
         * the reference list. It must satisfy the following requirements:
         * - Starts with letter.
         * - Contains only letters, numbers and underscore.
         * - Has length &lt; 256.
         * - Must be unique.
         * 
         * @return builder
         * 
         */
        public Builder referenceListId(String referenceListId) {
            return referenceListId(Output.of(referenceListId));
        }

        /**
         * @param scopeInfos ScopeInfo specifies the scope info of the reference list.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder scopeInfos(@Nullable Output<List<ReferenceListScopeInfoArgs>> scopeInfos) {
            $.scopeInfos = scopeInfos;
            return this;
        }

        /**
         * @param scopeInfos ScopeInfo specifies the scope info of the reference list.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder scopeInfos(List<ReferenceListScopeInfoArgs> scopeInfos) {
            return scopeInfos(Output.of(scopeInfos));
        }

        /**
         * @param scopeInfos ScopeInfo specifies the scope info of the reference list.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder scopeInfos(ReferenceListScopeInfoArgs... scopeInfos) {
            return scopeInfos(List.of(scopeInfos));
        }

        /**
         * @param syntaxType Possible values:
         * REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
         * REFERENCE_LIST_SYNTAX_TYPE_REGEX
         * REFERENCE_LIST_SYNTAX_TYPE_CIDR
         * 
         * @return builder
         * 
         */
        public Builder syntaxType(Output<String> syntaxType) {
            $.syntaxType = syntaxType;
            return this;
        }

        /**
         * @param syntaxType Possible values:
         * REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
         * REFERENCE_LIST_SYNTAX_TYPE_REGEX
         * REFERENCE_LIST_SYNTAX_TYPE_CIDR
         * 
         * @return builder
         * 
         */
        public Builder syntaxType(String syntaxType) {
            return syntaxType(Output.of(syntaxType));
        }

        public ReferenceListArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("ReferenceListArgs", "description");
            }
            if ($.entries == null) {
                throw new MissingRequiredPropertyException("ReferenceListArgs", "entries");
            }
            if ($.instance == null) {
                throw new MissingRequiredPropertyException("ReferenceListArgs", "instance");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("ReferenceListArgs", "location");
            }
            if ($.referenceListId == null) {
                throw new MissingRequiredPropertyException("ReferenceListArgs", "referenceListId");
            }
            if ($.syntaxType == null) {
                throw new MissingRequiredPropertyException("ReferenceListArgs", "syntaxType");
            }
            return $;
        }
    }

}
