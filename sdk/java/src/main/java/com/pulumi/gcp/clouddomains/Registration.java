// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddomains;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.clouddomains.RegistrationArgs;
import com.pulumi.gcp.clouddomains.inputs.RegistrationState;
import com.pulumi.gcp.clouddomains.outputs.RegistrationContactSettings;
import com.pulumi.gcp.clouddomains.outputs.RegistrationDnsSettings;
import com.pulumi.gcp.clouddomains.outputs.RegistrationManagementSettings;
import com.pulumi.gcp.clouddomains.outputs.RegistrationYearlyPrice;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### Clouddomains Registration Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.clouddomains.Registration;
 * import com.pulumi.gcp.clouddomains.RegistrationArgs;
 * import com.pulumi.gcp.clouddomains.inputs.RegistrationYearlyPriceArgs;
 * import com.pulumi.gcp.clouddomains.inputs.RegistrationDnsSettingsArgs;
 * import com.pulumi.gcp.clouddomains.inputs.RegistrationDnsSettingsCustomDnsArgs;
 * import com.pulumi.gcp.clouddomains.inputs.RegistrationContactSettingsArgs;
 * import com.pulumi.gcp.clouddomains.inputs.RegistrationContactSettingsRegistrantContactArgs;
 * import com.pulumi.gcp.clouddomains.inputs.RegistrationContactSettingsRegistrantContactPostalAddressArgs;
 * import com.pulumi.gcp.clouddomains.inputs.RegistrationContactSettingsAdminContactArgs;
 * import com.pulumi.gcp.clouddomains.inputs.RegistrationContactSettingsAdminContactPostalAddressArgs;
 * import com.pulumi.gcp.clouddomains.inputs.RegistrationContactSettingsTechnicalContactArgs;
 * import com.pulumi.gcp.clouddomains.inputs.RegistrationContactSettingsTechnicalContactPostalAddressArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myRegistration = new Registration("myRegistration", RegistrationArgs.builder()        
 *             .domainName("example-domain.com")
 *             .location("global")
 *             .labels(Map.of("labelkey", "labelvalue"))
 *             .yearlyPrice(RegistrationYearlyPriceArgs.builder()
 *                 .currencyCode("USD")
 *                 .units(12)
 *                 .build())
 *             .dnsSettings(RegistrationDnsSettingsArgs.builder()
 *                 .customDns(RegistrationDnsSettingsCustomDnsArgs.builder()
 *                     .nameServers(                    
 *                         "ns-cloud-a1.googledomains.com.",
 *                         "ns-cloud-a2.googledomains.com.",
 *                         "ns-cloud-a3.googledomains.com.",
 *                         "ns-cloud-a4.googledomains.com.")
 *                     .build())
 *                 .build())
 *             .contactSettings(RegistrationContactSettingsArgs.builder()
 *                 .privacy("REDACTED_CONTACT_DATA")
 *                 .registrantContact(RegistrationContactSettingsRegistrantContactArgs.builder()
 *                     .phoneNumber("+12345000000")
 *                     .email("user{@literal @}example.com")
 *                     .postalAddress(RegistrationContactSettingsRegistrantContactPostalAddressArgs.builder()
 *                         .regionCode("US")
 *                         .postalCode("95050")
 *                         .administrativeArea("CA")
 *                         .locality("Example City")
 *                         .addressLines("1234 Example street")
 *                         .recipients("example recipient")
 *                         .build())
 *                     .build())
 *                 .adminContact(RegistrationContactSettingsAdminContactArgs.builder()
 *                     .phoneNumber("+12345000000")
 *                     .email("user{@literal @}example.com")
 *                     .postalAddress(RegistrationContactSettingsAdminContactPostalAddressArgs.builder()
 *                         .regionCode("US")
 *                         .postalCode("95050")
 *                         .administrativeArea("CA")
 *                         .locality("Example City")
 *                         .addressLines("1234 Example street")
 *                         .recipients("example recipient")
 *                         .build())
 *                     .build())
 *                 .technicalContact(RegistrationContactSettingsTechnicalContactArgs.builder()
 *                     .phoneNumber("+12345000000")
 *                     .email("user{@literal @}example.com")
 *                     .postalAddress(RegistrationContactSettingsTechnicalContactPostalAddressArgs.builder()
 *                         .regionCode("US")
 *                         .postalCode("95050")
 *                         .administrativeArea("CA")
 *                         .locality("Example City")
 *                         .addressLines("1234 Example street")
 *                         .recipients("example recipient")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Registration can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/registrations/{{domain_name}}`
 * 
 * * `{{project}}/{{location}}/{{domain_name}}`
 * 
 * * `{{location}}/{{domain_name}}`
 * 
 * When using the `pulumi import` command, Registration can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:clouddomains/registration:Registration default projects/{{project}}/locations/{{location}}/registrations/{{domain_name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:clouddomains/registration:Registration default {{project}}/{{location}}/{{domain_name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:clouddomains/registration:Registration default {{location}}/{{domain_name}}
 * ```
 * 
 */
@ResourceType(type="gcp:clouddomains/registration:Registration")
public class Registration extends com.pulumi.resources.CustomResource {
    /**
     * The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
     * 
     */
    @Export(name="contactNotices", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> contactNotices;

    /**
     * @return The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
     * 
     */
    public Output<Optional<List<String>>> contactNotices() {
        return Codegen.optional(this.contactNotices);
    }
    /**
     * Required. Settings for contact information linked to the Registration.
     * Structure is documented below.
     * 
     */
    @Export(name="contactSettings", refs={RegistrationContactSettings.class}, tree="[0]")
    private Output<RegistrationContactSettings> contactSettings;

    /**
     * @return Required. Settings for contact information linked to the Registration.
     * Structure is documented below.
     * 
     */
    public Output<RegistrationContactSettings> contactSettings() {
        return this.contactSettings;
    }
    /**
     * Output only. Time at which the automation was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. Time at which the automation was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Settings controlling the DNS configuration of the Registration.
     * 
     */
    @Export(name="dnsSettings", refs={RegistrationDnsSettings.class}, tree="[0]")
    private Output</* @Nullable */ RegistrationDnsSettings> dnsSettings;

    /**
     * @return Settings controlling the DNS configuration of the Registration.
     * 
     */
    public Output<Optional<RegistrationDnsSettings>> dnsSettings() {
        return Codegen.optional(this.dnsSettings);
    }
    /**
     * Required. The domain name. Unicode domain names must be expressed in Punycode format.
     * 
     */
    @Export(name="domainName", refs={String.class}, tree="[0]")
    private Output<String> domainName;

    /**
     * @return Required. The domain name. Unicode domain names must be expressed in Punycode format.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }
    /**
     * The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
     * 
     */
    @Export(name="domainNotices", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> domainNotices;

    /**
     * @return The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
     * 
     */
    public Output<Optional<List<String>>> domainNotices() {
        return Codegen.optional(this.domainNotices);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Output only. Time at which the automation was updated.
     * 
     */
    @Export(name="expireTime", refs={String.class}, tree="[0]")
    private Output<String> expireTime;

    /**
     * @return Output only. Time at which the automation was updated.
     * 
     */
    public Output<String> expireTime() {
        return this.expireTime;
    }
    /**
     * Output only. The set of issues with the Registration that require attention.
     * 
     */
    @Export(name="issues", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> issues;

    /**
     * @return Output only. The set of issues with the Registration that require attention.
     * 
     */
    public Output<List<String>> issues() {
        return this.issues;
    }
    /**
     * Set of labels associated with the Registration. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field &#39;effective_labels&#39; for all of the labels present on the
     * resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Set of labels associated with the Registration. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field &#39;effective_labels&#39; for all of the labels present on the
     * resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location for the resource
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Settings for management of the Registration, including renewal, billing, and transfer
     * 
     */
    @Export(name="managementSettings", refs={RegistrationManagementSettings.class}, tree="[0]")
    private Output<RegistrationManagementSettings> managementSettings;

    /**
     * @return Settings for management of the Registration, including renewal, billing, and transfer
     * 
     */
    public Output<RegistrationManagementSettings> managementSettings() {
        return this.managementSettings;
    }
    /**
     * Output only. Name of the Registration resource, in the format projects/*{@literal /}locations/*{@literal /}registrations/&lt;domain_name&gt;.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Output only. Name of the Registration resource, in the format projects/*{@literal /}locations/*{@literal /}registrations/&lt;domain_name&gt;.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
     * 
     */
    @Export(name="registerFailureReason", refs={String.class}, tree="[0]")
    private Output<String> registerFailureReason;

    /**
     * @return Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
     * 
     */
    public Output<String> registerFailureReason() {
        return this.registerFailureReason;
    }
    /**
     * Output only. The current state of the Registration.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Output only. The current state of the Registration.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Output only. Set of options for the contactSettings.privacy field that this Registration supports.
     * 
     */
    @Export(name="supportedPrivacies", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> supportedPrivacies;

    /**
     * @return Output only. Set of options for the contactSettings.privacy field that this Registration supports.
     * 
     */
    public Output<List<String>> supportedPrivacies() {
        return this.supportedPrivacies;
    }
    /**
     * Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
     * registrations.retrieveRegisterParameters or registrations.searchDomains calls.
     * Structure is documented below.
     * 
     */
    @Export(name="yearlyPrice", refs={RegistrationYearlyPrice.class}, tree="[0]")
    private Output<RegistrationYearlyPrice> yearlyPrice;

    /**
     * @return Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
     * registrations.retrieveRegisterParameters or registrations.searchDomains calls.
     * Structure is documented below.
     * 
     */
    public Output<RegistrationYearlyPrice> yearlyPrice() {
        return this.yearlyPrice;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Registration(String name) {
        this(name, RegistrationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Registration(String name, RegistrationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Registration(String name, RegistrationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:clouddomains/registration:Registration", name, args == null ? RegistrationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Registration(String name, Output<String> id, @Nullable RegistrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:clouddomains/registration:Registration", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Registration get(String name, Output<String> id, @Nullable RegistrationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Registration(name, id, state, options);
    }
}
