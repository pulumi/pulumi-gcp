// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetInstanceNetworkInterfaceAccessConfig;
import com.pulumi.gcp.compute.outputs.GetInstanceNetworkInterfaceAliasIpRange;
import com.pulumi.gcp.compute.outputs.GetInstanceNetworkInterfaceIpv6AccessConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceNetworkInterface {
    /**
     * @return Access configurations, i.e. IPs via which this
     * instance can be accessed via the Internet. Structure documented below.
     * 
     */
    private List<GetInstanceNetworkInterfaceAccessConfig> accessConfigs;
    /**
     * @return An array of alias IP ranges for this network interface. Structure documented below.
     * 
     */
    private List<GetInstanceNetworkInterfaceAliasIpRange> aliasIpRanges;
    /**
     * @return The prefix length of the primary internal IPv6 range.
     * 
     */
    private Integer internalIpv6PrefixLength;
    /**
     * @return An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
     * 
     */
    private List<GetInstanceNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs;
    /**
     * @return One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.
     * 
     */
    private String ipv6AccessType;
    /**
     * @return An IPv6 internal network address for this network interface. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance&#39;s subnetwork.
     * 
     */
    private String ipv6Address;
    /**
     * @return The name of the instance. One of `name` or `self_link` must be provided.
     * 
     */
    private String name;
    /**
     * @return The name or self_link of the network attached to this interface.
     * 
     */
    private String network;
    /**
     * @return The URL of the network attachment to this interface.
     * 
     */
    private String networkAttachment;
    /**
     * @return The internal ip address of the instance, either manually or dynamically assigned.
     * 
     */
    private String networkIp;
    /**
     * @return The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET, IDPF, MRDMA, and IRDMA
     * 
     */
    private String nicType;
    /**
     * @return The networking queue count that&#39;s specified by users for the network interface. Both Rx and Tx queues will be set to this number. It will be empty if not specified.
     * 
     */
    private Integer queueCount;
    /**
     * @return A full or partial URL to a security policy to add to this instance. If this field is set to an empty string it will remove the associated security policy.
     * 
     */
    private String securityPolicy;
    /**
     * @return The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.
     * 
     */
    private String stackType;
    /**
     * @return The name or self_link of the subnetwork attached to this interface.
     * 
     */
    private String subnetwork;
    /**
     * @return The project in which the subnetwork belongs.
     * 
     */
    private String subnetworkProject;

    private GetInstanceNetworkInterface() {}
    /**
     * @return Access configurations, i.e. IPs via which this
     * instance can be accessed via the Internet. Structure documented below.
     * 
     */
    public List<GetInstanceNetworkInterfaceAccessConfig> accessConfigs() {
        return this.accessConfigs;
    }
    /**
     * @return An array of alias IP ranges for this network interface. Structure documented below.
     * 
     */
    public List<GetInstanceNetworkInterfaceAliasIpRange> aliasIpRanges() {
        return this.aliasIpRanges;
    }
    /**
     * @return The prefix length of the primary internal IPv6 range.
     * 
     */
    public Integer internalIpv6PrefixLength() {
        return this.internalIpv6PrefixLength;
    }
    /**
     * @return An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
     * 
     */
    public List<GetInstanceNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs() {
        return this.ipv6AccessConfigs;
    }
    /**
     * @return One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.
     * 
     */
    public String ipv6AccessType() {
        return this.ipv6AccessType;
    }
    /**
     * @return An IPv6 internal network address for this network interface. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance&#39;s subnetwork.
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return The name of the instance. One of `name` or `self_link` must be provided.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name or self_link of the network attached to this interface.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return The URL of the network attachment to this interface.
     * 
     */
    public String networkAttachment() {
        return this.networkAttachment;
    }
    /**
     * @return The internal ip address of the instance, either manually or dynamically assigned.
     * 
     */
    public String networkIp() {
        return this.networkIp;
    }
    /**
     * @return The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET, IDPF, MRDMA, and IRDMA
     * 
     */
    public String nicType() {
        return this.nicType;
    }
    /**
     * @return The networking queue count that&#39;s specified by users for the network interface. Both Rx and Tx queues will be set to this number. It will be empty if not specified.
     * 
     */
    public Integer queueCount() {
        return this.queueCount;
    }
    /**
     * @return A full or partial URL to a security policy to add to this instance. If this field is set to an empty string it will remove the associated security policy.
     * 
     */
    public String securityPolicy() {
        return this.securityPolicy;
    }
    /**
     * @return The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.
     * 
     */
    public String stackType() {
        return this.stackType;
    }
    /**
     * @return The name or self_link of the subnetwork attached to this interface.
     * 
     */
    public String subnetwork() {
        return this.subnetwork;
    }
    /**
     * @return The project in which the subnetwork belongs.
     * 
     */
    public String subnetworkProject() {
        return this.subnetworkProject;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceNetworkInterface defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetInstanceNetworkInterfaceAccessConfig> accessConfigs;
        private List<GetInstanceNetworkInterfaceAliasIpRange> aliasIpRanges;
        private Integer internalIpv6PrefixLength;
        private List<GetInstanceNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs;
        private String ipv6AccessType;
        private String ipv6Address;
        private String name;
        private String network;
        private String networkAttachment;
        private String networkIp;
        private String nicType;
        private Integer queueCount;
        private String securityPolicy;
        private String stackType;
        private String subnetwork;
        private String subnetworkProject;
        public Builder() {}
        public Builder(GetInstanceNetworkInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessConfigs = defaults.accessConfigs;
    	      this.aliasIpRanges = defaults.aliasIpRanges;
    	      this.internalIpv6PrefixLength = defaults.internalIpv6PrefixLength;
    	      this.ipv6AccessConfigs = defaults.ipv6AccessConfigs;
    	      this.ipv6AccessType = defaults.ipv6AccessType;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkAttachment = defaults.networkAttachment;
    	      this.networkIp = defaults.networkIp;
    	      this.nicType = defaults.nicType;
    	      this.queueCount = defaults.queueCount;
    	      this.securityPolicy = defaults.securityPolicy;
    	      this.stackType = defaults.stackType;
    	      this.subnetwork = defaults.subnetwork;
    	      this.subnetworkProject = defaults.subnetworkProject;
        }

        @CustomType.Setter
        public Builder accessConfigs(List<GetInstanceNetworkInterfaceAccessConfig> accessConfigs) {
            if (accessConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "accessConfigs");
            }
            this.accessConfigs = accessConfigs;
            return this;
        }
        public Builder accessConfigs(GetInstanceNetworkInterfaceAccessConfig... accessConfigs) {
            return accessConfigs(List.of(accessConfigs));
        }
        @CustomType.Setter
        public Builder aliasIpRanges(List<GetInstanceNetworkInterfaceAliasIpRange> aliasIpRanges) {
            if (aliasIpRanges == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "aliasIpRanges");
            }
            this.aliasIpRanges = aliasIpRanges;
            return this;
        }
        public Builder aliasIpRanges(GetInstanceNetworkInterfaceAliasIpRange... aliasIpRanges) {
            return aliasIpRanges(List.of(aliasIpRanges));
        }
        @CustomType.Setter
        public Builder internalIpv6PrefixLength(Integer internalIpv6PrefixLength) {
            if (internalIpv6PrefixLength == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "internalIpv6PrefixLength");
            }
            this.internalIpv6PrefixLength = internalIpv6PrefixLength;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AccessConfigs(List<GetInstanceNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs) {
            if (ipv6AccessConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "ipv6AccessConfigs");
            }
            this.ipv6AccessConfigs = ipv6AccessConfigs;
            return this;
        }
        public Builder ipv6AccessConfigs(GetInstanceNetworkInterfaceIpv6AccessConfig... ipv6AccessConfigs) {
            return ipv6AccessConfigs(List.of(ipv6AccessConfigs));
        }
        @CustomType.Setter
        public Builder ipv6AccessType(String ipv6AccessType) {
            if (ipv6AccessType == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "ipv6AccessType");
            }
            this.ipv6AccessType = ipv6AccessType;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            if (ipv6Address == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "ipv6Address");
            }
            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder networkAttachment(String networkAttachment) {
            if (networkAttachment == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "networkAttachment");
            }
            this.networkAttachment = networkAttachment;
            return this;
        }
        @CustomType.Setter
        public Builder networkIp(String networkIp) {
            if (networkIp == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "networkIp");
            }
            this.networkIp = networkIp;
            return this;
        }
        @CustomType.Setter
        public Builder nicType(String nicType) {
            if (nicType == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "nicType");
            }
            this.nicType = nicType;
            return this;
        }
        @CustomType.Setter
        public Builder queueCount(Integer queueCount) {
            if (queueCount == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "queueCount");
            }
            this.queueCount = queueCount;
            return this;
        }
        @CustomType.Setter
        public Builder securityPolicy(String securityPolicy) {
            if (securityPolicy == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "securityPolicy");
            }
            this.securityPolicy = securityPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder stackType(String stackType) {
            if (stackType == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "stackType");
            }
            this.stackType = stackType;
            return this;
        }
        @CustomType.Setter
        public Builder subnetwork(String subnetwork) {
            if (subnetwork == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "subnetwork");
            }
            this.subnetwork = subnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder subnetworkProject(String subnetworkProject) {
            if (subnetworkProject == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetworkInterface", "subnetworkProject");
            }
            this.subnetworkProject = subnetworkProject;
            return this;
        }
        public GetInstanceNetworkInterface build() {
            final var _resultValue = new GetInstanceNetworkInterface();
            _resultValue.accessConfigs = accessConfigs;
            _resultValue.aliasIpRanges = aliasIpRanges;
            _resultValue.internalIpv6PrefixLength = internalIpv6PrefixLength;
            _resultValue.ipv6AccessConfigs = ipv6AccessConfigs;
            _resultValue.ipv6AccessType = ipv6AccessType;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.networkAttachment = networkAttachment;
            _resultValue.networkIp = networkIp;
            _resultValue.nicType = nicType;
            _resultValue.queueCount = queueCount;
            _resultValue.securityPolicy = securityPolicy;
            _resultValue.stackType = stackType;
            _resultValue.subnetwork = subnetwork;
            _resultValue.subnetworkProject = subnetworkProject;
            return _resultValue;
        }
    }
}
