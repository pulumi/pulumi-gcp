// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDockerImageArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDockerImageArgs Empty = new GetDockerImageArgs();

    /**
     * The image name to fetch. If no digest or tag is provided, then the latest modified image will be used.
     * 
     */
    @Import(name="imageName", required=true)
    private Output<String> imageName;

    /**
     * @return The image name to fetch. If no digest or tag is provided, then the latest modified image will be used.
     * 
     */
    public Output<String> imageName() {
        return this.imageName;
    }

    /**
     * The location of the artifact registry.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the artifact registry.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The project ID in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project ID in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The last part of the repository name. to fetch from.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return The last part of the repository name. to fetch from.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    private GetDockerImageArgs() {}

    private GetDockerImageArgs(GetDockerImageArgs $) {
        this.imageName = $.imageName;
        this.location = $.location;
        this.project = $.project;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDockerImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDockerImageArgs $;

        public Builder() {
            $ = new GetDockerImageArgs();
        }

        public Builder(GetDockerImageArgs defaults) {
            $ = new GetDockerImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param imageName The image name to fetch. If no digest or tag is provided, then the latest modified image will be used.
         * 
         * @return builder
         * 
         */
        public Builder imageName(Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName The image name to fetch. If no digest or tag is provided, then the latest modified image will be used.
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param location The location of the artifact registry.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the artifact registry.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The project ID in which the resource belongs. If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project ID in which the resource belongs. If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param repositoryId The last part of the repository name. to fetch from.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId The last part of the repository name. to fetch from.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public GetDockerImageArgs build() {
            if ($.imageName == null) {
                throw new MissingRequiredPropertyException("GetDockerImageArgs", "imageName");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetDockerImageArgs", "location");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("GetDockerImageArgs", "repositoryId");
            }
            return $;
        }
    }

}
