// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.osconfig.PatchDeploymentArgs;
import com.pulumi.gcp.osconfig.inputs.PatchDeploymentState;
import com.pulumi.gcp.osconfig.outputs.PatchDeploymentInstanceFilter;
import com.pulumi.gcp.osconfig.outputs.PatchDeploymentOneTimeSchedule;
import com.pulumi.gcp.osconfig.outputs.PatchDeploymentPatchConfig;
import com.pulumi.gcp.osconfig.outputs.PatchDeploymentRecurringSchedule;
import com.pulumi.gcp.osconfig.outputs.PatchDeploymentRollout;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Patch deployments are configurations that individual patch jobs use to complete a patch.
 * These configurations include instance filter, package repository settings, and a schedule.
 * 
 * To get more information about PatchDeployment, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/osconfig/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/compute/docs/os-patch-management)
 * 
 * ## Example Usage
 * 
 * ### Os Config Patch Deployment Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.osconfig.PatchDeployment;
 * import com.pulumi.gcp.osconfig.PatchDeploymentArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentInstanceFilterArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentOneTimeScheduleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var patch = new PatchDeployment("patch", PatchDeploymentArgs.builder()
 *             .patchDeploymentId("patch-deploy")
 *             .instanceFilter(PatchDeploymentInstanceFilterArgs.builder()
 *                 .all(true)
 *                 .build())
 *             .oneTimeSchedule(PatchDeploymentOneTimeScheduleArgs.builder()
 *                 .executeTime("2999-10-10T10:10:10.045123456Z")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Os Config Patch Deployment Daily
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.osconfig.PatchDeployment;
 * import com.pulumi.gcp.osconfig.PatchDeploymentArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentInstanceFilterArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleTimeZoneArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleTimeOfDayArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var patch = new PatchDeployment("patch", PatchDeploymentArgs.builder()
 *             .patchDeploymentId("patch-deploy")
 *             .instanceFilter(PatchDeploymentInstanceFilterArgs.builder()
 *                 .all(true)
 *                 .build())
 *             .recurringSchedule(PatchDeploymentRecurringScheduleArgs.builder()
 *                 .timeZone(PatchDeploymentRecurringScheduleTimeZoneArgs.builder()
 *                     .id("America/New_York")
 *                     .build())
 *                 .timeOfDay(PatchDeploymentRecurringScheduleTimeOfDayArgs.builder()
 *                     .hours(0)
 *                     .minutes(30)
 *                     .seconds(30)
 *                     .nanos(20)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Os Config Patch Deployment Daily Midnight
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.osconfig.PatchDeployment;
 * import com.pulumi.gcp.osconfig.PatchDeploymentArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentInstanceFilterArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleTimeZoneArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleTimeOfDayArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var patch = new PatchDeployment("patch", PatchDeploymentArgs.builder()
 *             .patchDeploymentId("patch-deploy")
 *             .instanceFilter(PatchDeploymentInstanceFilterArgs.builder()
 *                 .all(true)
 *                 .build())
 *             .recurringSchedule(PatchDeploymentRecurringScheduleArgs.builder()
 *                 .timeZone(PatchDeploymentRecurringScheduleTimeZoneArgs.builder()
 *                     .id("America/New_York")
 *                     .build())
 *                 .timeOfDay(PatchDeploymentRecurringScheduleTimeOfDayArgs.builder()
 *                     .hours(0)
 *                     .minutes(0)
 *                     .seconds(0)
 *                     .nanos(0)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Os Config Patch Deployment Instance
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.ComputeFunctions;
 * import com.pulumi.gcp.compute.inputs.GetImageArgs;
 * import com.pulumi.gcp.compute.Instance;
 * import com.pulumi.gcp.compute.InstanceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
 * import com.pulumi.gcp.osconfig.PatchDeployment;
 * import com.pulumi.gcp.osconfig.PatchDeploymentArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentInstanceFilterArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigYumArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleTimeZoneArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleTimeOfDayArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleMonthlyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var myImage = ComputeFunctions.getImage(GetImageArgs.builder()
 *             .family("debian-11")
 *             .project("debian-cloud")
 *             .build());
 * 
 *         var foobar = new Instance("foobar", InstanceArgs.builder()
 *             .name("patch-deploy-inst")
 *             .machineType("e2-medium")
 *             .zone("us-central1-a")
 *             .canIpForward(false)
 *             .tags(            
 *                 "foo",
 *                 "bar")
 *             .bootDisk(InstanceBootDiskArgs.builder()
 *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
 *                     .image(myImage.selfLink())
 *                     .build())
 *                 .build())
 *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
 *                 .network("default")
 *                 .build())
 *             .metadata(Map.of("foo", "bar"))
 *             .build());
 * 
 *         var patch = new PatchDeployment("patch", PatchDeploymentArgs.builder()
 *             .patchDeploymentId("patch-deploy")
 *             .instanceFilter(PatchDeploymentInstanceFilterArgs.builder()
 *                 .instances(foobar.id())
 *                 .build())
 *             .patchConfig(PatchDeploymentPatchConfigArgs.builder()
 *                 .yum(PatchDeploymentPatchConfigYumArgs.builder()
 *                     .security(true)
 *                     .minimal(true)
 *                     .excludes("bash")
 *                     .build())
 *                 .build())
 *             .recurringSchedule(PatchDeploymentRecurringScheduleArgs.builder()
 *                 .timeZone(PatchDeploymentRecurringScheduleTimeZoneArgs.builder()
 *                     .id("America/New_York")
 *                     .build())
 *                 .timeOfDay(PatchDeploymentRecurringScheduleTimeOfDayArgs.builder()
 *                     .hours(0)
 *                     .minutes(30)
 *                     .seconds(30)
 *                     .nanos(20)
 *                     .build())
 *                 .monthly(PatchDeploymentRecurringScheduleMonthlyArgs.builder()
 *                     .monthDay(1)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Os Config Patch Deployment Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.osconfig.PatchDeployment;
 * import com.pulumi.gcp.osconfig.PatchDeploymentArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentInstanceFilterArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigAptArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigYumArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigGooArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigZypperArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigWindowsUpdateArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigPreStepArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigPostStepArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleTimeZoneArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleTimeOfDayArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleMonthlyArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRolloutArgs;
 * import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRolloutDisruptionBudgetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var patch = new PatchDeployment("patch", PatchDeploymentArgs.builder()
 *             .patchDeploymentId("patch-deploy")
 *             .instanceFilter(PatchDeploymentInstanceFilterArgs.builder()
 *                 .groupLabels(PatchDeploymentInstanceFilterGroupLabelArgs.builder()
 *                     .labels(Map.ofEntries(
 *                         Map.entry("env", "dev"),
 *                         Map.entry("app", "web")
 *                     ))
 *                     .build())
 *                 .instanceNamePrefixes("test-")
 *                 .zones(                
 *                     "us-central1-a",
 *                     "us-central-1c")
 *                 .build())
 *             .patchConfig(PatchDeploymentPatchConfigArgs.builder()
 *                 .migInstancesAllowed(true)
 *                 .rebootConfig("ALWAYS")
 *                 .apt(PatchDeploymentPatchConfigAptArgs.builder()
 *                     .type("DIST")
 *                     .excludes("python")
 *                     .build())
 *                 .yum(PatchDeploymentPatchConfigYumArgs.builder()
 *                     .security(true)
 *                     .minimal(true)
 *                     .excludes("bash")
 *                     .build())
 *                 .goo(PatchDeploymentPatchConfigGooArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .zypper(PatchDeploymentPatchConfigZypperArgs.builder()
 *                     .categories("security")
 *                     .build())
 *                 .windowsUpdate(PatchDeploymentPatchConfigWindowsUpdateArgs.builder()
 *                     .classifications(                    
 *                         "CRITICAL",
 *                         "SECURITY",
 *                         "UPDATE")
 *                     .excludes("5012170")
 *                     .build())
 *                 .preStep(PatchDeploymentPatchConfigPreStepArgs.builder()
 *                     .linuxExecStepConfig(PatchDeploymentPatchConfigPreStepLinuxExecStepConfigArgs.builder()
 *                         .allowedSuccessCodes(                        
 *                             0,
 *                             3)
 *                         .localPath("/tmp/pre_patch_script.sh")
 *                         .build())
 *                     .windowsExecStepConfig(PatchDeploymentPatchConfigPreStepWindowsExecStepConfigArgs.builder()
 *                         .interpreter("SHELL")
 *                         .allowedSuccessCodes(                        
 *                             0,
 *                             2)
 *                         .localPath("C:\\Users\\user\\pre-patch-script.cmd")
 *                         .build())
 *                     .build())
 *                 .postStep(PatchDeploymentPatchConfigPostStepArgs.builder()
 *                     .linuxExecStepConfig(PatchDeploymentPatchConfigPostStepLinuxExecStepConfigArgs.builder()
 *                         .gcsObject(PatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectArgs.builder()
 *                             .bucket("my-patch-scripts")
 *                             .generationNumber("1523477886880")
 *                             .object("linux/post_patch_script")
 *                             .build())
 *                         .build())
 *                     .windowsExecStepConfig(PatchDeploymentPatchConfigPostStepWindowsExecStepConfigArgs.builder()
 *                         .interpreter("POWERSHELL")
 *                         .gcsObject(PatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectArgs.builder()
 *                             .bucket("my-patch-scripts")
 *                             .generationNumber("135920493447")
 *                             .object("windows/post_patch_script.ps1")
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .duration("10s")
 *             .recurringSchedule(PatchDeploymentRecurringScheduleArgs.builder()
 *                 .timeZone(PatchDeploymentRecurringScheduleTimeZoneArgs.builder()
 *                     .id("America/New_York")
 *                     .build())
 *                 .timeOfDay(PatchDeploymentRecurringScheduleTimeOfDayArgs.builder()
 *                     .hours(0)
 *                     .minutes(30)
 *                     .seconds(30)
 *                     .nanos(20)
 *                     .build())
 *                 .monthly(PatchDeploymentRecurringScheduleMonthlyArgs.builder()
 *                     .weekDayOfMonth(PatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthArgs.builder()
 *                         .weekOrdinal(-1)
 *                         .dayOfWeek("TUESDAY")
 *                         .dayOffset(3)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .rollout(PatchDeploymentRolloutArgs.builder()
 *                 .mode("ZONE_BY_ZONE")
 *                 .disruptionBudget(PatchDeploymentRolloutDisruptionBudgetArgs.builder()
 *                     .fixed(1)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * PatchDeployment can be imported using any of these accepted formats:
 * 
 * * `{{project}}/{{name}}`
 * 
 * * `{{project}} {{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, PatchDeployment can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:osconfig/patchDeployment:PatchDeployment default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:osconfig/patchDeployment:PatchDeployment default &#34;{{project}} {{name}}&#34;
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:osconfig/patchDeployment:PatchDeployment default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:osconfig/patchDeployment:PatchDeployment")
public class PatchDeployment extends com.pulumi.resources.CustomResource {
    /**
     * Time the patch deployment was created. Timestamp is in RFC3339 text format.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Time the patch deployment was created. Timestamp is in RFC3339 text format.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Description of the patch deployment. Length of the description is limited to 1024 characters.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the patch deployment. Length of the description is limited to 1024 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Duration of the patch. After the duration ends, the patch times out. A duration in seconds with up to nine fractional
     * digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;
     * 
     */
    @Export(name="duration", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> duration;

    /**
     * @return Duration of the patch. After the duration ends, the patch times out. A duration in seconds with up to nine fractional
     * digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;
     * 
     */
    public Output<Optional<String>> duration() {
        return Codegen.optional(this.duration);
    }
    /**
     * VM instances to patch.
     * Structure is documented below.
     * 
     */
    @Export(name="instanceFilter", refs={PatchDeploymentInstanceFilter.class}, tree="[0]")
    private Output<PatchDeploymentInstanceFilter> instanceFilter;

    /**
     * @return VM instances to patch.
     * Structure is documented below.
     * 
     */
    public Output<PatchDeploymentInstanceFilter> instanceFilter() {
        return this.instanceFilter;
    }
    /**
     * The last time a patch job was started by this deployment. Timestamp is in RFC3339 text format.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Export(name="lastExecuteTime", refs={String.class}, tree="[0]")
    private Output<String> lastExecuteTime;

    /**
     * @return The last time a patch job was started by this deployment. Timestamp is in RFC3339 text format.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Output<String> lastExecuteTime() {
        return this.lastExecuteTime;
    }
    /**
     * Unique name for the patch deployment resource in a project.
     * The patch deployment name is in the form: projects/{project_id}/patchDeployments/{patchDeploymentId}.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Unique name for the patch deployment resource in a project.
     * The patch deployment name is in the form: projects/{project_id}/patchDeployments/{patchDeploymentId}.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Schedule a one-time execution.
     * 
     */
    @Export(name="oneTimeSchedule", refs={PatchDeploymentOneTimeSchedule.class}, tree="[0]")
    private Output</* @Nullable */ PatchDeploymentOneTimeSchedule> oneTimeSchedule;

    /**
     * @return Schedule a one-time execution.
     * 
     */
    public Output<Optional<PatchDeploymentOneTimeSchedule>> oneTimeSchedule() {
        return Codegen.optional(this.oneTimeSchedule);
    }
    /**
     * Patch configuration that is applied.
     * 
     */
    @Export(name="patchConfig", refs={PatchDeploymentPatchConfig.class}, tree="[0]")
    private Output</* @Nullable */ PatchDeploymentPatchConfig> patchConfig;

    /**
     * @return Patch configuration that is applied.
     * 
     */
    public Output<Optional<PatchDeploymentPatchConfig>> patchConfig() {
        return Codegen.optional(this.patchConfig);
    }
    /**
     * A name for the patch deployment in the project. When creating a name the following rules apply:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the project.
     * 
     */
    @Export(name="patchDeploymentId", refs={String.class}, tree="[0]")
    private Output<String> patchDeploymentId;

    /**
     * @return A name for the patch deployment in the project. When creating a name the following rules apply:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the project.
     * 
     */
    public Output<String> patchDeploymentId() {
        return this.patchDeploymentId;
    }
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * Schedule recurring executions.
     * 
     */
    @Export(name="recurringSchedule", refs={PatchDeploymentRecurringSchedule.class}, tree="[0]")
    private Output</* @Nullable */ PatchDeploymentRecurringSchedule> recurringSchedule;

    /**
     * @return Schedule recurring executions.
     * 
     */
    public Output<Optional<PatchDeploymentRecurringSchedule>> recurringSchedule() {
        return Codegen.optional(this.recurringSchedule);
    }
    /**
     * Rollout strategy of the patch job.
     * 
     */
    @Export(name="rollout", refs={PatchDeploymentRollout.class}, tree="[0]")
    private Output</* @Nullable */ PatchDeploymentRollout> rollout;

    /**
     * @return Rollout strategy of the patch job.
     * 
     */
    public Output<Optional<PatchDeploymentRollout>> rollout() {
        return Codegen.optional(this.rollout);
    }
    /**
     * Time the patch deployment was last updated. Timestamp is in RFC3339 text format.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Time the patch deployment was last updated. Timestamp is in RFC3339 text format.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PatchDeployment(java.lang.String name) {
        this(name, PatchDeploymentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PatchDeployment(java.lang.String name, PatchDeploymentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PatchDeployment(java.lang.String name, PatchDeploymentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:osconfig/patchDeployment:PatchDeployment", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private PatchDeployment(java.lang.String name, Output<java.lang.String> id, @Nullable PatchDeploymentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:osconfig/patchDeployment:PatchDeployment", name, state, makeResourceOptions(options, id), false);
    }

    private static PatchDeploymentArgs makeArgs(PatchDeploymentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PatchDeploymentArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PatchDeployment get(java.lang.String name, Output<java.lang.String> id, @Nullable PatchDeploymentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PatchDeployment(name, id, state, options);
    }
}
