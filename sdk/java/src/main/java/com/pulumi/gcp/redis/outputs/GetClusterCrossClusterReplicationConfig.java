// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.redis.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.redis.outputs.GetClusterCrossClusterReplicationConfigMembership;
import com.pulumi.gcp.redis.outputs.GetClusterCrossClusterReplicationConfigPrimaryCluster;
import com.pulumi.gcp.redis.outputs.GetClusterCrossClusterReplicationConfigSecondaryCluster;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterCrossClusterReplicationConfig {
    /**
     * @return The role of the cluster in cross cluster replication. Supported values are:
     * 
     * 1. &#39;CLUSTER_ROLE_UNSPECIFIED&#39;: This is an independent cluster that has never participated in cross cluster replication. It allows both reads and writes.
     * 
     * 2. &#39;NONE&#39;: This is an independent cluster that previously participated in cross cluster replication(either as a &#39;PRIMARY&#39; or &#39;SECONDARY&#39; cluster). It allows both reads and writes.
     * 
     * 3. &#39;PRIMARY&#39;: This cluster serves as the replication source for secondary clusters that are replicating from it. Any data written to it is automatically replicated to its secondary clusters. It allows both reads and writes.
     * 
     * 4. &#39;SECONDARY&#39;: This cluster replicates data from the primary cluster. It allows only reads. Possible values: [&#34;CLUSTER_ROLE_UNSPECIFIED&#34;, &#34;NONE&#34;, &#34;PRIMARY&#34;, &#34;SECONDARY&#34;]
     * 
     */
    private String clusterRole;
    /**
     * @return An output only view of all the member clusters participating in cross cluster replication. This field is populated for all the member clusters irrespective of their cluster role.
     * 
     */
    private List<GetClusterCrossClusterReplicationConfigMembership> memberships;
    /**
     * @return Details of the primary cluster that is used as the replication source for this secondary cluster. This is allowed to be set only for clusters whose cluster role is of type &#39;SECONDARY&#39;.
     * 
     */
    private List<GetClusterCrossClusterReplicationConfigPrimaryCluster> primaryClusters;
    /**
     * @return List of secondary clusters that are replicating from this primary cluster. This is allowed to be set only for clusters whose cluster role is of type &#39;PRIMARY&#39;.
     * 
     */
    private List<GetClusterCrossClusterReplicationConfigSecondaryCluster> secondaryClusters;
    /**
     * @return The last time cross cluster replication config was updated.
     * 
     */
    private String updateTime;

    private GetClusterCrossClusterReplicationConfig() {}
    /**
     * @return The role of the cluster in cross cluster replication. Supported values are:
     * 
     * 1. &#39;CLUSTER_ROLE_UNSPECIFIED&#39;: This is an independent cluster that has never participated in cross cluster replication. It allows both reads and writes.
     * 
     * 2. &#39;NONE&#39;: This is an independent cluster that previously participated in cross cluster replication(either as a &#39;PRIMARY&#39; or &#39;SECONDARY&#39; cluster). It allows both reads and writes.
     * 
     * 3. &#39;PRIMARY&#39;: This cluster serves as the replication source for secondary clusters that are replicating from it. Any data written to it is automatically replicated to its secondary clusters. It allows both reads and writes.
     * 
     * 4. &#39;SECONDARY&#39;: This cluster replicates data from the primary cluster. It allows only reads. Possible values: [&#34;CLUSTER_ROLE_UNSPECIFIED&#34;, &#34;NONE&#34;, &#34;PRIMARY&#34;, &#34;SECONDARY&#34;]
     * 
     */
    public String clusterRole() {
        return this.clusterRole;
    }
    /**
     * @return An output only view of all the member clusters participating in cross cluster replication. This field is populated for all the member clusters irrespective of their cluster role.
     * 
     */
    public List<GetClusterCrossClusterReplicationConfigMembership> memberships() {
        return this.memberships;
    }
    /**
     * @return Details of the primary cluster that is used as the replication source for this secondary cluster. This is allowed to be set only for clusters whose cluster role is of type &#39;SECONDARY&#39;.
     * 
     */
    public List<GetClusterCrossClusterReplicationConfigPrimaryCluster> primaryClusters() {
        return this.primaryClusters;
    }
    /**
     * @return List of secondary clusters that are replicating from this primary cluster. This is allowed to be set only for clusters whose cluster role is of type &#39;PRIMARY&#39;.
     * 
     */
    public List<GetClusterCrossClusterReplicationConfigSecondaryCluster> secondaryClusters() {
        return this.secondaryClusters;
    }
    /**
     * @return The last time cross cluster replication config was updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterCrossClusterReplicationConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterRole;
        private List<GetClusterCrossClusterReplicationConfigMembership> memberships;
        private List<GetClusterCrossClusterReplicationConfigPrimaryCluster> primaryClusters;
        private List<GetClusterCrossClusterReplicationConfigSecondaryCluster> secondaryClusters;
        private String updateTime;
        public Builder() {}
        public Builder(GetClusterCrossClusterReplicationConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterRole = defaults.clusterRole;
    	      this.memberships = defaults.memberships;
    	      this.primaryClusters = defaults.primaryClusters;
    	      this.secondaryClusters = defaults.secondaryClusters;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder clusterRole(String clusterRole) {
            if (clusterRole == null) {
              throw new MissingRequiredPropertyException("GetClusterCrossClusterReplicationConfig", "clusterRole");
            }
            this.clusterRole = clusterRole;
            return this;
        }
        @CustomType.Setter
        public Builder memberships(List<GetClusterCrossClusterReplicationConfigMembership> memberships) {
            if (memberships == null) {
              throw new MissingRequiredPropertyException("GetClusterCrossClusterReplicationConfig", "memberships");
            }
            this.memberships = memberships;
            return this;
        }
        public Builder memberships(GetClusterCrossClusterReplicationConfigMembership... memberships) {
            return memberships(List.of(memberships));
        }
        @CustomType.Setter
        public Builder primaryClusters(List<GetClusterCrossClusterReplicationConfigPrimaryCluster> primaryClusters) {
            if (primaryClusters == null) {
              throw new MissingRequiredPropertyException("GetClusterCrossClusterReplicationConfig", "primaryClusters");
            }
            this.primaryClusters = primaryClusters;
            return this;
        }
        public Builder primaryClusters(GetClusterCrossClusterReplicationConfigPrimaryCluster... primaryClusters) {
            return primaryClusters(List.of(primaryClusters));
        }
        @CustomType.Setter
        public Builder secondaryClusters(List<GetClusterCrossClusterReplicationConfigSecondaryCluster> secondaryClusters) {
            if (secondaryClusters == null) {
              throw new MissingRequiredPropertyException("GetClusterCrossClusterReplicationConfig", "secondaryClusters");
            }
            this.secondaryClusters = secondaryClusters;
            return this;
        }
        public Builder secondaryClusters(GetClusterCrossClusterReplicationConfigSecondaryCluster... secondaryClusters) {
            return secondaryClusters(List.of(secondaryClusters));
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetClusterCrossClusterReplicationConfig", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetClusterCrossClusterReplicationConfig build() {
            final var _resultValue = new GetClusterCrossClusterReplicationConfig();
            _resultValue.clusterRole = clusterRole;
            _resultValue.memberships = memberships;
            _resultValue.primaryClusters = primaryClusters;
            _resultValue.secondaryClusters = secondaryClusters;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
