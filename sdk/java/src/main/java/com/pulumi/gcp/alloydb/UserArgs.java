// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.alloydb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * Identifies the alloydb cluster. Must be in the format
     * &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
     * 
     */
    @Import(name="cluster", required=true)
    private Output<String> cluster;

    /**
     * @return Identifies the alloydb cluster. Must be in the format
     * &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }

    /**
     * List of database roles this database user has.
     * 
     */
    @Import(name="databaseRoles")
    private @Nullable Output<List<String>> databaseRoles;

    /**
     * @return List of database roles this database user has.
     * 
     */
    public Optional<Output<List<String>>> databaseRoles() {
        return Optional.ofNullable(this.databaseRoles);
    }

    /**
     * Password for this database user.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password for this database user.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The database role name of the user.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return The database role name of the user.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    /**
     * The type of this user.
     * Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
     * 
     * ***
     * 
     */
    @Import(name="userType", required=true)
    private Output<String> userType;

    /**
     * @return The type of this user.
     * Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
     * 
     * ***
     * 
     */
    public Output<String> userType() {
        return this.userType;
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.cluster = $.cluster;
        this.databaseRoles = $.databaseRoles;
        this.password = $.password;
        this.userId = $.userId;
        this.userType = $.userType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cluster Identifies the alloydb cluster. Must be in the format
         * &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
         * 
         * @return builder
         * 
         */
        public Builder cluster(Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster Identifies the alloydb cluster. Must be in the format
         * &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param databaseRoles List of database roles this database user has.
         * 
         * @return builder
         * 
         */
        public Builder databaseRoles(@Nullable Output<List<String>> databaseRoles) {
            $.databaseRoles = databaseRoles;
            return this;
        }

        /**
         * @param databaseRoles List of database roles this database user has.
         * 
         * @return builder
         * 
         */
        public Builder databaseRoles(List<String> databaseRoles) {
            return databaseRoles(Output.of(databaseRoles));
        }

        /**
         * @param databaseRoles List of database roles this database user has.
         * 
         * @return builder
         * 
         */
        public Builder databaseRoles(String... databaseRoles) {
            return databaseRoles(List.of(databaseRoles));
        }

        /**
         * @param password Password for this database user.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for this database user.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param userId The database role name of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The database role name of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        /**
         * @param userType The type of this user.
         * Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder userType(Output<String> userType) {
            $.userType = userType;
            return this;
        }

        /**
         * @param userType The type of this user.
         * Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder userType(String userType) {
            return userType(Output.of(userType));
        }

        public UserArgs build() {
            if ($.cluster == null) {
                throw new MissingRequiredPropertyException("UserArgs", "cluster");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("UserArgs", "userId");
            }
            if ($.userType == null) {
                throw new MissingRequiredPropertyException("UserArgs", "userType");
            }
            return $;
        }
    }

}
