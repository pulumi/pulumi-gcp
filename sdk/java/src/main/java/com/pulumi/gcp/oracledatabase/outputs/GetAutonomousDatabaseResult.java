// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.oracledatabase.outputs.GetAutonomousDatabaseProperty;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAutonomousDatabaseResult {
    private String adminPassword;
    private String autonomousDatabaseId;
    private String cidr;
    private String createTime;
    private String database;
    private Boolean deletionProtection;
    private String displayName;
    private Map<String,String> effectiveLabels;
    private String entitlementId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private String location;
    private String name;
    private String network;
    private String odbNetwork;
    private String odbSubnet;
    private @Nullable String project;
    private List<GetAutonomousDatabaseProperty> properties;
    private Map<String,String> pulumiLabels;

    private GetAutonomousDatabaseResult() {}
    public String adminPassword() {
        return this.adminPassword;
    }
    public String autonomousDatabaseId() {
        return this.autonomousDatabaseId;
    }
    public String cidr() {
        return this.cidr;
    }
    public String createTime() {
        return this.createTime;
    }
    public String database() {
        return this.database;
    }
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    public String displayName() {
        return this.displayName;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String entitlementId() {
        return this.entitlementId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public String network() {
        return this.network;
    }
    public String odbNetwork() {
        return this.odbNetwork;
    }
    public String odbSubnet() {
        return this.odbSubnet;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public List<GetAutonomousDatabaseProperty> properties() {
        return this.properties;
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutonomousDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adminPassword;
        private String autonomousDatabaseId;
        private String cidr;
        private String createTime;
        private String database;
        private Boolean deletionProtection;
        private String displayName;
        private Map<String,String> effectiveLabels;
        private String entitlementId;
        private String id;
        private Map<String,String> labels;
        private String location;
        private String name;
        private String network;
        private String odbNetwork;
        private String odbSubnet;
        private @Nullable String project;
        private List<GetAutonomousDatabaseProperty> properties;
        private Map<String,String> pulumiLabels;
        public Builder() {}
        public Builder(GetAutonomousDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.autonomousDatabaseId = defaults.autonomousDatabaseId;
    	      this.cidr = defaults.cidr;
    	      this.createTime = defaults.createTime;
    	      this.database = defaults.database;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.displayName = defaults.displayName;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.entitlementId = defaults.entitlementId;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.odbNetwork = defaults.odbNetwork;
    	      this.odbSubnet = defaults.odbSubnet;
    	      this.project = defaults.project;
    	      this.properties = defaults.properties;
    	      this.pulumiLabels = defaults.pulumiLabels;
        }

        @CustomType.Setter
        public Builder adminPassword(String adminPassword) {
            if (adminPassword == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "adminPassword");
            }
            this.adminPassword = adminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder autonomousDatabaseId(String autonomousDatabaseId) {
            if (autonomousDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "autonomousDatabaseId");
            }
            this.autonomousDatabaseId = autonomousDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder cidr(String cidr) {
            if (cidr == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "cidr");
            }
            this.cidr = cidr;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder database(String database) {
            if (database == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "database");
            }
            this.database = database;
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder entitlementId(String entitlementId) {
            if (entitlementId == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "entitlementId");
            }
            this.entitlementId = entitlementId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder odbNetwork(String odbNetwork) {
            if (odbNetwork == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "odbNetwork");
            }
            this.odbNetwork = odbNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder odbSubnet(String odbSubnet) {
            if (odbSubnet == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "odbSubnet");
            }
            this.odbSubnet = odbSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder properties(List<GetAutonomousDatabaseProperty> properties) {
            if (properties == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "properties");
            }
            this.properties = properties;
            return this;
        }
        public Builder properties(GetAutonomousDatabaseProperty... properties) {
            return properties(List.of(properties));
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        public GetAutonomousDatabaseResult build() {
            final var _resultValue = new GetAutonomousDatabaseResult();
            _resultValue.adminPassword = adminPassword;
            _resultValue.autonomousDatabaseId = autonomousDatabaseId;
            _resultValue.cidr = cidr;
            _resultValue.createTime = createTime;
            _resultValue.database = database;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.displayName = displayName;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.entitlementId = entitlementId;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.odbNetwork = odbNetwork;
            _resultValue.odbSubnet = odbSubnet;
            _resultValue.project = project;
            _resultValue.properties = properties;
            _resultValue.pulumiLabels = pulumiLabels;
            return _resultValue;
        }
    }
}
