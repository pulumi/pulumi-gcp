// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificatemanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDnsAuthorizationArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDnsAuthorizationArgs Empty = new GetDnsAuthorizationArgs();

    /**
     * The name of the DNS Authorization.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return The name of the DNS Authorization.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * The Certificate Manager location. If not specified, &#34;global&#34; is used.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Certificate Manager location. If not specified, &#34;global&#34; is used.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the DNS Authorization.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the DNS Authorization.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetDnsAuthorizationArgs() {}

    private GetDnsAuthorizationArgs(GetDnsAuthorizationArgs $) {
        this.domain = $.domain;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDnsAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDnsAuthorizationArgs $;

        public Builder() {
            $ = new GetDnsAuthorizationArgs();
        }

        public Builder(GetDnsAuthorizationArgs defaults) {
            $ = new GetDnsAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The name of the DNS Authorization.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The name of the DNS Authorization.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param location The Certificate Manager location. If not specified, &#34;global&#34; is used.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Certificate Manager location. If not specified, &#34;global&#34; is used.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the DNS Authorization.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the DNS Authorization.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetDnsAuthorizationArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("GetDnsAuthorizationArgs", "domain");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetDnsAuthorizationArgs", "name");
            }
            return $;
        }
    }

}
