// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTopicMessageStoragePolicy {
    /**
     * @return A list of IDs of GCP regions where messages that are published to
     * the topic may be persisted in storage. Messages published by
     * publishers running in non-allowed GCP regions (or running outside
     * of GCP altogether) will be routed for storage in one of the
     * allowed regions. An empty list means that no regions are allowed,
     * and is not a valid configuration.
     * 
     */
    private List<String> allowedPersistenceRegions;
    /**
     * @return If true, &#39;allowedPersistenceRegions&#39; is also used to enforce in-transit
     * guarantees for messages. That is, Pub/Sub will fail topics.publish
     * operations on this topic and subscribe operations on any subscription
     * attached to this topic in any region that is not in &#39;allowedPersistenceRegions&#39;.
     * 
     */
    private Boolean enforceInTransit;

    private GetTopicMessageStoragePolicy() {}
    /**
     * @return A list of IDs of GCP regions where messages that are published to
     * the topic may be persisted in storage. Messages published by
     * publishers running in non-allowed GCP regions (or running outside
     * of GCP altogether) will be routed for storage in one of the
     * allowed regions. An empty list means that no regions are allowed,
     * and is not a valid configuration.
     * 
     */
    public List<String> allowedPersistenceRegions() {
        return this.allowedPersistenceRegions;
    }
    /**
     * @return If true, &#39;allowedPersistenceRegions&#39; is also used to enforce in-transit
     * guarantees for messages. That is, Pub/Sub will fail topics.publish
     * operations on this topic and subscribe operations on any subscription
     * attached to this topic in any region that is not in &#39;allowedPersistenceRegions&#39;.
     * 
     */
    public Boolean enforceInTransit() {
        return this.enforceInTransit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTopicMessageStoragePolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedPersistenceRegions;
        private Boolean enforceInTransit;
        public Builder() {}
        public Builder(GetTopicMessageStoragePolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedPersistenceRegions = defaults.allowedPersistenceRegions;
    	      this.enforceInTransit = defaults.enforceInTransit;
        }

        @CustomType.Setter
        public Builder allowedPersistenceRegions(List<String> allowedPersistenceRegions) {
            if (allowedPersistenceRegions == null) {
              throw new MissingRequiredPropertyException("GetTopicMessageStoragePolicy", "allowedPersistenceRegions");
            }
            this.allowedPersistenceRegions = allowedPersistenceRegions;
            return this;
        }
        public Builder allowedPersistenceRegions(String... allowedPersistenceRegions) {
            return allowedPersistenceRegions(List.of(allowedPersistenceRegions));
        }
        @CustomType.Setter
        public Builder enforceInTransit(Boolean enforceInTransit) {
            if (enforceInTransit == null) {
              throw new MissingRequiredPropertyException("GetTopicMessageStoragePolicy", "enforceInTransit");
            }
            this.enforceInTransit = enforceInTransit;
            return this;
        }
        public GetTopicMessageStoragePolicy build() {
            final var _resultValue = new GetTopicMessageStoragePolicy();
            _resultValue.allowedPersistenceRegions = allowedPersistenceRegions;
            _resultValue.enforceInTransit = enforceInTransit;
            return _resultValue;
        }
    }
}
