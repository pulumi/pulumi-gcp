// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetInstanceTemplateAdvancedMachineFeature {
    private Boolean enableNestedVirtualization;
    private Integer threadsPerCore;

    private GetInstanceTemplateAdvancedMachineFeature() {}
    public Boolean enableNestedVirtualization() {
        return this.enableNestedVirtualization;
    }
    public Integer threadsPerCore() {
        return this.threadsPerCore;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceTemplateAdvancedMachineFeature defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enableNestedVirtualization;
        private Integer threadsPerCore;
        public Builder() {}
        public Builder(GetInstanceTemplateAdvancedMachineFeature defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableNestedVirtualization = defaults.enableNestedVirtualization;
    	      this.threadsPerCore = defaults.threadsPerCore;
        }

        @CustomType.Setter
        public Builder enableNestedVirtualization(Boolean enableNestedVirtualization) {
            this.enableNestedVirtualization = Objects.requireNonNull(enableNestedVirtualization);
            return this;
        }
        @CustomType.Setter
        public Builder threadsPerCore(Integer threadsPerCore) {
            this.threadsPerCore = Objects.requireNonNull(threadsPerCore);
            return this;
        }
        public GetInstanceTemplateAdvancedMachineFeature build() {
            final var o = new GetInstanceTemplateAdvancedMachineFeature();
            o.enableNestedVirtualization = enableNestedVirtualization;
            o.threadsPerCore = threadsPerCore;
            return o;
        }
    }
}
