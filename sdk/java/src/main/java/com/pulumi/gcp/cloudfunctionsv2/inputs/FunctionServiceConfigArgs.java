// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudfunctionsv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigSecretEnvironmentVariableArgs;
import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigSecretVolumeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionServiceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionServiceConfigArgs Empty = new FunctionServiceConfigArgs();

    /**
     * Whether 100% of traffic is routed to the latest revision. Defaults to true.
     * 
     */
    @Import(name="allTrafficOnLatestRevision")
    private @Nullable Output<Boolean> allTrafficOnLatestRevision;

    /**
     * @return Whether 100% of traffic is routed to the latest revision. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> allTrafficOnLatestRevision() {
        return Optional.ofNullable(this.allTrafficOnLatestRevision);
    }

    /**
     * The number of CPUs used in a single container instance. Default value is calculated from available memory.
     * 
     */
    @Import(name="availableCpu")
    private @Nullable Output<String> availableCpu;

    /**
     * @return The number of CPUs used in a single container instance. Default value is calculated from available memory.
     * 
     */
    public Optional<Output<String>> availableCpu() {
        return Optional.ofNullable(this.availableCpu);
    }

    /**
     * The amount of memory available for a function.
     * Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is
     * supplied the value is interpreted as bytes.
     * 
     */
    @Import(name="availableMemory")
    private @Nullable Output<String> availableMemory;

    /**
     * @return The amount of memory available for a function.
     * Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is
     * supplied the value is interpreted as bytes.
     * 
     */
    public Optional<Output<String>> availableMemory() {
        return Optional.ofNullable(this.availableMemory);
    }

    /**
     * Environment variables that shall be available during function execution.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<Map<String,String>> environmentVariables;

    /**
     * @return Environment variables that shall be available during function execution.
     * 
     */
    public Optional<Output<Map<String,String>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * URIs of the Service deployed
     * 
     */
    @Import(name="gcfUri")
    private @Nullable Output<String> gcfUri;

    /**
     * @return URIs of the Service deployed
     * 
     */
    public Optional<Output<String>> gcfUri() {
        return Optional.ofNullable(this.gcfUri);
    }

    /**
     * Available ingress settings. Defaults to &#34;ALLOW_ALL&#34; if unspecified.
     * Default value is `ALLOW_ALL`.
     * Possible values are `ALLOW_ALL`, `ALLOW_INTERNAL_ONLY`, and `ALLOW_INTERNAL_AND_GCLB`.
     * 
     */
    @Import(name="ingressSettings")
    private @Nullable Output<String> ingressSettings;

    /**
     * @return Available ingress settings. Defaults to &#34;ALLOW_ALL&#34; if unspecified.
     * Default value is `ALLOW_ALL`.
     * Possible values are `ALLOW_ALL`, `ALLOW_INTERNAL_ONLY`, and `ALLOW_INTERNAL_AND_GCLB`.
     * 
     */
    public Optional<Output<String>> ingressSettings() {
        return Optional.ofNullable(this.ingressSettings);
    }

    /**
     * The limit on the maximum number of function instances that may coexist at a
     * given time.
     * 
     */
    @Import(name="maxInstanceCount")
    private @Nullable Output<Integer> maxInstanceCount;

    /**
     * @return The limit on the maximum number of function instances that may coexist at a
     * given time.
     * 
     */
    public Optional<Output<Integer>> maxInstanceCount() {
        return Optional.ofNullable(this.maxInstanceCount);
    }

    /**
     * Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.
     * 
     */
    @Import(name="maxInstanceRequestConcurrency")
    private @Nullable Output<Integer> maxInstanceRequestConcurrency;

    /**
     * @return Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.
     * 
     */
    public Optional<Output<Integer>> maxInstanceRequestConcurrency() {
        return Optional.ofNullable(this.maxInstanceRequestConcurrency);
    }

    /**
     * The limit on the minimum number of function instances that may coexist at a
     * given time.
     * 
     */
    @Import(name="minInstanceCount")
    private @Nullable Output<Integer> minInstanceCount;

    /**
     * @return The limit on the minimum number of function instances that may coexist at a
     * given time.
     * 
     */
    public Optional<Output<Integer>> minInstanceCount() {
        return Optional.ofNullable(this.minInstanceCount);
    }

    /**
     * Secret environment variables configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="secretEnvironmentVariables")
    private @Nullable Output<List<FunctionServiceConfigSecretEnvironmentVariableArgs>> secretEnvironmentVariables;

    /**
     * @return Secret environment variables configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<FunctionServiceConfigSecretEnvironmentVariableArgs>>> secretEnvironmentVariables() {
        return Optional.ofNullable(this.secretEnvironmentVariables);
    }

    /**
     * Secret volumes configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="secretVolumes")
    private @Nullable Output<List<FunctionServiceConfigSecretVolumeArgs>> secretVolumes;

    /**
     * @return Secret volumes configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<FunctionServiceConfigSecretVolumeArgs>>> secretVolumes() {
        return Optional.ofNullable(this.secretVolumes);
    }

    /**
     * Name of the service associated with a Function.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return Name of the service associated with a Function.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * The email of the service account for this function.
     * 
     */
    @Import(name="serviceAccountEmail")
    private @Nullable Output<String> serviceAccountEmail;

    /**
     * @return The email of the service account for this function.
     * 
     */
    public Optional<Output<String>> serviceAccountEmail() {
        return Optional.ofNullable(this.serviceAccountEmail);
    }

    /**
     * The function execution timeout. Execution is considered failed and
     * can be terminated if the function is not completed at the end of the
     * timeout period. Defaults to 60 seconds.
     * 
     */
    @Import(name="timeoutSeconds")
    private @Nullable Output<Integer> timeoutSeconds;

    /**
     * @return The function execution timeout. Execution is considered failed and
     * can be terminated if the function is not completed at the end of the
     * timeout period. Defaults to 60 seconds.
     * 
     */
    public Optional<Output<Integer>> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    /**
     * URI of the Service deployed.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return URI of the Service deployed.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    /**
     * The Serverless VPC Access connector that this cloud function can connect to.
     * 
     */
    @Import(name="vpcConnector")
    private @Nullable Output<String> vpcConnector;

    /**
     * @return The Serverless VPC Access connector that this cloud function can connect to.
     * 
     */
    public Optional<Output<String>> vpcConnector() {
        return Optional.ofNullable(this.vpcConnector);
    }

    /**
     * Available egress settings.
     * Possible values are `VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED`, `PRIVATE_RANGES_ONLY`, and `ALL_TRAFFIC`.
     * 
     */
    @Import(name="vpcConnectorEgressSettings")
    private @Nullable Output<String> vpcConnectorEgressSettings;

    /**
     * @return Available egress settings.
     * Possible values are `VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED`, `PRIVATE_RANGES_ONLY`, and `ALL_TRAFFIC`.
     * 
     */
    public Optional<Output<String>> vpcConnectorEgressSettings() {
        return Optional.ofNullable(this.vpcConnectorEgressSettings);
    }

    private FunctionServiceConfigArgs() {}

    private FunctionServiceConfigArgs(FunctionServiceConfigArgs $) {
        this.allTrafficOnLatestRevision = $.allTrafficOnLatestRevision;
        this.availableCpu = $.availableCpu;
        this.availableMemory = $.availableMemory;
        this.environmentVariables = $.environmentVariables;
        this.gcfUri = $.gcfUri;
        this.ingressSettings = $.ingressSettings;
        this.maxInstanceCount = $.maxInstanceCount;
        this.maxInstanceRequestConcurrency = $.maxInstanceRequestConcurrency;
        this.minInstanceCount = $.minInstanceCount;
        this.secretEnvironmentVariables = $.secretEnvironmentVariables;
        this.secretVolumes = $.secretVolumes;
        this.service = $.service;
        this.serviceAccountEmail = $.serviceAccountEmail;
        this.timeoutSeconds = $.timeoutSeconds;
        this.uri = $.uri;
        this.vpcConnector = $.vpcConnector;
        this.vpcConnectorEgressSettings = $.vpcConnectorEgressSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionServiceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionServiceConfigArgs $;

        public Builder() {
            $ = new FunctionServiceConfigArgs();
        }

        public Builder(FunctionServiceConfigArgs defaults) {
            $ = new FunctionServiceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allTrafficOnLatestRevision Whether 100% of traffic is routed to the latest revision. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder allTrafficOnLatestRevision(@Nullable Output<Boolean> allTrafficOnLatestRevision) {
            $.allTrafficOnLatestRevision = allTrafficOnLatestRevision;
            return this;
        }

        /**
         * @param allTrafficOnLatestRevision Whether 100% of traffic is routed to the latest revision. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder allTrafficOnLatestRevision(Boolean allTrafficOnLatestRevision) {
            return allTrafficOnLatestRevision(Output.of(allTrafficOnLatestRevision));
        }

        /**
         * @param availableCpu The number of CPUs used in a single container instance. Default value is calculated from available memory.
         * 
         * @return builder
         * 
         */
        public Builder availableCpu(@Nullable Output<String> availableCpu) {
            $.availableCpu = availableCpu;
            return this;
        }

        /**
         * @param availableCpu The number of CPUs used in a single container instance. Default value is calculated from available memory.
         * 
         * @return builder
         * 
         */
        public Builder availableCpu(String availableCpu) {
            return availableCpu(Output.of(availableCpu));
        }

        /**
         * @param availableMemory The amount of memory available for a function.
         * Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is
         * supplied the value is interpreted as bytes.
         * 
         * @return builder
         * 
         */
        public Builder availableMemory(@Nullable Output<String> availableMemory) {
            $.availableMemory = availableMemory;
            return this;
        }

        /**
         * @param availableMemory The amount of memory available for a function.
         * Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is
         * supplied the value is interpreted as bytes.
         * 
         * @return builder
         * 
         */
        public Builder availableMemory(String availableMemory) {
            return availableMemory(Output.of(availableMemory));
        }

        /**
         * @param environmentVariables Environment variables that shall be available during function execution.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<Map<String,String>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables Environment variables that shall be available during function execution.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(Map<String,String> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param gcfUri URIs of the Service deployed
         * 
         * @return builder
         * 
         */
        public Builder gcfUri(@Nullable Output<String> gcfUri) {
            $.gcfUri = gcfUri;
            return this;
        }

        /**
         * @param gcfUri URIs of the Service deployed
         * 
         * @return builder
         * 
         */
        public Builder gcfUri(String gcfUri) {
            return gcfUri(Output.of(gcfUri));
        }

        /**
         * @param ingressSettings Available ingress settings. Defaults to &#34;ALLOW_ALL&#34; if unspecified.
         * Default value is `ALLOW_ALL`.
         * Possible values are `ALLOW_ALL`, `ALLOW_INTERNAL_ONLY`, and `ALLOW_INTERNAL_AND_GCLB`.
         * 
         * @return builder
         * 
         */
        public Builder ingressSettings(@Nullable Output<String> ingressSettings) {
            $.ingressSettings = ingressSettings;
            return this;
        }

        /**
         * @param ingressSettings Available ingress settings. Defaults to &#34;ALLOW_ALL&#34; if unspecified.
         * Default value is `ALLOW_ALL`.
         * Possible values are `ALLOW_ALL`, `ALLOW_INTERNAL_ONLY`, and `ALLOW_INTERNAL_AND_GCLB`.
         * 
         * @return builder
         * 
         */
        public Builder ingressSettings(String ingressSettings) {
            return ingressSettings(Output.of(ingressSettings));
        }

        /**
         * @param maxInstanceCount The limit on the maximum number of function instances that may coexist at a
         * given time.
         * 
         * @return builder
         * 
         */
        public Builder maxInstanceCount(@Nullable Output<Integer> maxInstanceCount) {
            $.maxInstanceCount = maxInstanceCount;
            return this;
        }

        /**
         * @param maxInstanceCount The limit on the maximum number of function instances that may coexist at a
         * given time.
         * 
         * @return builder
         * 
         */
        public Builder maxInstanceCount(Integer maxInstanceCount) {
            return maxInstanceCount(Output.of(maxInstanceCount));
        }

        /**
         * @param maxInstanceRequestConcurrency Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.
         * 
         * @return builder
         * 
         */
        public Builder maxInstanceRequestConcurrency(@Nullable Output<Integer> maxInstanceRequestConcurrency) {
            $.maxInstanceRequestConcurrency = maxInstanceRequestConcurrency;
            return this;
        }

        /**
         * @param maxInstanceRequestConcurrency Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.
         * 
         * @return builder
         * 
         */
        public Builder maxInstanceRequestConcurrency(Integer maxInstanceRequestConcurrency) {
            return maxInstanceRequestConcurrency(Output.of(maxInstanceRequestConcurrency));
        }

        /**
         * @param minInstanceCount The limit on the minimum number of function instances that may coexist at a
         * given time.
         * 
         * @return builder
         * 
         */
        public Builder minInstanceCount(@Nullable Output<Integer> minInstanceCount) {
            $.minInstanceCount = minInstanceCount;
            return this;
        }

        /**
         * @param minInstanceCount The limit on the minimum number of function instances that may coexist at a
         * given time.
         * 
         * @return builder
         * 
         */
        public Builder minInstanceCount(Integer minInstanceCount) {
            return minInstanceCount(Output.of(minInstanceCount));
        }

        /**
         * @param secretEnvironmentVariables Secret environment variables configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secretEnvironmentVariables(@Nullable Output<List<FunctionServiceConfigSecretEnvironmentVariableArgs>> secretEnvironmentVariables) {
            $.secretEnvironmentVariables = secretEnvironmentVariables;
            return this;
        }

        /**
         * @param secretEnvironmentVariables Secret environment variables configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secretEnvironmentVariables(List<FunctionServiceConfigSecretEnvironmentVariableArgs> secretEnvironmentVariables) {
            return secretEnvironmentVariables(Output.of(secretEnvironmentVariables));
        }

        /**
         * @param secretEnvironmentVariables Secret environment variables configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secretEnvironmentVariables(FunctionServiceConfigSecretEnvironmentVariableArgs... secretEnvironmentVariables) {
            return secretEnvironmentVariables(List.of(secretEnvironmentVariables));
        }

        /**
         * @param secretVolumes Secret volumes configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secretVolumes(@Nullable Output<List<FunctionServiceConfigSecretVolumeArgs>> secretVolumes) {
            $.secretVolumes = secretVolumes;
            return this;
        }

        /**
         * @param secretVolumes Secret volumes configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secretVolumes(List<FunctionServiceConfigSecretVolumeArgs> secretVolumes) {
            return secretVolumes(Output.of(secretVolumes));
        }

        /**
         * @param secretVolumes Secret volumes configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secretVolumes(FunctionServiceConfigSecretVolumeArgs... secretVolumes) {
            return secretVolumes(List.of(secretVolumes));
        }

        /**
         * @param service Name of the service associated with a Function.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Name of the service associated with a Function.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param serviceAccountEmail The email of the service account for this function.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountEmail(@Nullable Output<String> serviceAccountEmail) {
            $.serviceAccountEmail = serviceAccountEmail;
            return this;
        }

        /**
         * @param serviceAccountEmail The email of the service account for this function.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountEmail(String serviceAccountEmail) {
            return serviceAccountEmail(Output.of(serviceAccountEmail));
        }

        /**
         * @param timeoutSeconds The function execution timeout. Execution is considered failed and
         * can be terminated if the function is not completed at the end of the
         * timeout period. Defaults to 60 seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * @param timeoutSeconds The function execution timeout. Execution is considered failed and
         * can be terminated if the function is not completed at the end of the
         * timeout period. Defaults to 60 seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            return timeoutSeconds(Output.of(timeoutSeconds));
        }

        /**
         * @param uri URI of the Service deployed.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri URI of the Service deployed.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        /**
         * @param vpcConnector The Serverless VPC Access connector that this cloud function can connect to.
         * 
         * @return builder
         * 
         */
        public Builder vpcConnector(@Nullable Output<String> vpcConnector) {
            $.vpcConnector = vpcConnector;
            return this;
        }

        /**
         * @param vpcConnector The Serverless VPC Access connector that this cloud function can connect to.
         * 
         * @return builder
         * 
         */
        public Builder vpcConnector(String vpcConnector) {
            return vpcConnector(Output.of(vpcConnector));
        }

        /**
         * @param vpcConnectorEgressSettings Available egress settings.
         * Possible values are `VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED`, `PRIVATE_RANGES_ONLY`, and `ALL_TRAFFIC`.
         * 
         * @return builder
         * 
         */
        public Builder vpcConnectorEgressSettings(@Nullable Output<String> vpcConnectorEgressSettings) {
            $.vpcConnectorEgressSettings = vpcConnectorEgressSettings;
            return this;
        }

        /**
         * @param vpcConnectorEgressSettings Available egress settings.
         * Possible values are `VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED`, `PRIVATE_RANGES_ONLY`, and `ALL_TRAFFIC`.
         * 
         * @return builder
         * 
         */
        public Builder vpcConnectorEgressSettings(String vpcConnectorEgressSettings) {
            return vpcConnectorEgressSettings(Output.of(vpcConnectorEgressSettings));
        }

        public FunctionServiceConfigArgs build() {
            return $;
        }
    }

}
