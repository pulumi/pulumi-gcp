// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.ClusterNodeConfigLinuxNodeConfigHugepagesConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNodeConfigLinuxNodeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNodeConfigLinuxNodeConfigArgs Empty = new ClusterNodeConfigLinuxNodeConfigArgs();

    /**
     * Possible cgroup modes that can be used.
     * Accepted values are:
     * * `CGROUP_MODE_UNSPECIFIED`: CGROUP_MODE_UNSPECIFIED is when unspecified cgroup configuration is used. The default for the GKE node OS image will be used.
     * * `CGROUP_MODE_V1`: CGROUP_MODE_V1 specifies to use cgroupv1 for the cgroup configuration on the node image.
     * * `CGROUP_MODE_V2`: CGROUP_MODE_V2 specifies to use cgroupv2 for the cgroup configuration on the node image.
     * 
     */
    @Import(name="cgroupMode")
    private @Nullable Output<String> cgroupMode;

    /**
     * @return Possible cgroup modes that can be used.
     * Accepted values are:
     * * `CGROUP_MODE_UNSPECIFIED`: CGROUP_MODE_UNSPECIFIED is when unspecified cgroup configuration is used. The default for the GKE node OS image will be used.
     * * `CGROUP_MODE_V1`: CGROUP_MODE_V1 specifies to use cgroupv1 for the cgroup configuration on the node image.
     * * `CGROUP_MODE_V2`: CGROUP_MODE_V2 specifies to use cgroupv2 for the cgroup configuration on the node image.
     * 
     */
    public Optional<Output<String>> cgroupMode() {
        return Optional.ofNullable(this.cgroupMode);
    }

    /**
     * Amounts for 2M and 1G hugepages. Structure is documented below.
     * 
     */
    @Import(name="hugepagesConfig")
    private @Nullable Output<ClusterNodeConfigLinuxNodeConfigHugepagesConfigArgs> hugepagesConfig;

    /**
     * @return Amounts for 2M and 1G hugepages. Structure is documented below.
     * 
     */
    public Optional<Output<ClusterNodeConfigLinuxNodeConfigHugepagesConfigArgs>> hugepagesConfig() {
        return Optional.ofNullable(this.hugepagesConfig);
    }

    /**
     * The Linux kernel parameters to be applied to the nodes
     * and all pods running on the nodes. Specified as a map from the key, such as
     * `net.core.wmem_max`, to a string value. Currently supported attributes can be found [here](https://cloud.google.com/sdk/gcloud/reference/beta/container/node-pools/create#--system-config-from-file).
     * Note that validations happen all server side. All attributes are optional.
     * 
     */
    @Import(name="sysctls")
    private @Nullable Output<Map<String,String>> sysctls;

    /**
     * @return The Linux kernel parameters to be applied to the nodes
     * and all pods running on the nodes. Specified as a map from the key, such as
     * `net.core.wmem_max`, to a string value. Currently supported attributes can be found [here](https://cloud.google.com/sdk/gcloud/reference/beta/container/node-pools/create#--system-config-from-file).
     * Note that validations happen all server side. All attributes are optional.
     * 
     */
    public Optional<Output<Map<String,String>>> sysctls() {
        return Optional.ofNullable(this.sysctls);
    }

    private ClusterNodeConfigLinuxNodeConfigArgs() {}

    private ClusterNodeConfigLinuxNodeConfigArgs(ClusterNodeConfigLinuxNodeConfigArgs $) {
        this.cgroupMode = $.cgroupMode;
        this.hugepagesConfig = $.hugepagesConfig;
        this.sysctls = $.sysctls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNodeConfigLinuxNodeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNodeConfigLinuxNodeConfigArgs $;

        public Builder() {
            $ = new ClusterNodeConfigLinuxNodeConfigArgs();
        }

        public Builder(ClusterNodeConfigLinuxNodeConfigArgs defaults) {
            $ = new ClusterNodeConfigLinuxNodeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cgroupMode Possible cgroup modes that can be used.
         * Accepted values are:
         * * `CGROUP_MODE_UNSPECIFIED`: CGROUP_MODE_UNSPECIFIED is when unspecified cgroup configuration is used. The default for the GKE node OS image will be used.
         * * `CGROUP_MODE_V1`: CGROUP_MODE_V1 specifies to use cgroupv1 for the cgroup configuration on the node image.
         * * `CGROUP_MODE_V2`: CGROUP_MODE_V2 specifies to use cgroupv2 for the cgroup configuration on the node image.
         * 
         * @return builder
         * 
         */
        public Builder cgroupMode(@Nullable Output<String> cgroupMode) {
            $.cgroupMode = cgroupMode;
            return this;
        }

        /**
         * @param cgroupMode Possible cgroup modes that can be used.
         * Accepted values are:
         * * `CGROUP_MODE_UNSPECIFIED`: CGROUP_MODE_UNSPECIFIED is when unspecified cgroup configuration is used. The default for the GKE node OS image will be used.
         * * `CGROUP_MODE_V1`: CGROUP_MODE_V1 specifies to use cgroupv1 for the cgroup configuration on the node image.
         * * `CGROUP_MODE_V2`: CGROUP_MODE_V2 specifies to use cgroupv2 for the cgroup configuration on the node image.
         * 
         * @return builder
         * 
         */
        public Builder cgroupMode(String cgroupMode) {
            return cgroupMode(Output.of(cgroupMode));
        }

        /**
         * @param hugepagesConfig Amounts for 2M and 1G hugepages. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hugepagesConfig(@Nullable Output<ClusterNodeConfigLinuxNodeConfigHugepagesConfigArgs> hugepagesConfig) {
            $.hugepagesConfig = hugepagesConfig;
            return this;
        }

        /**
         * @param hugepagesConfig Amounts for 2M and 1G hugepages. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hugepagesConfig(ClusterNodeConfigLinuxNodeConfigHugepagesConfigArgs hugepagesConfig) {
            return hugepagesConfig(Output.of(hugepagesConfig));
        }

        /**
         * @param sysctls The Linux kernel parameters to be applied to the nodes
         * and all pods running on the nodes. Specified as a map from the key, such as
         * `net.core.wmem_max`, to a string value. Currently supported attributes can be found [here](https://cloud.google.com/sdk/gcloud/reference/beta/container/node-pools/create#--system-config-from-file).
         * Note that validations happen all server side. All attributes are optional.
         * 
         * @return builder
         * 
         */
        public Builder sysctls(@Nullable Output<Map<String,String>> sysctls) {
            $.sysctls = sysctls;
            return this;
        }

        /**
         * @param sysctls The Linux kernel parameters to be applied to the nodes
         * and all pods running on the nodes. Specified as a map from the key, such as
         * `net.core.wmem_max`, to a string value. Currently supported attributes can be found [here](https://cloud.google.com/sdk/gcloud/reference/beta/container/node-pools/create#--system-config-from-file).
         * Note that validations happen all server side. All attributes are optional.
         * 
         * @return builder
         * 
         */
        public Builder sysctls(Map<String,String> sysctls) {
            return sysctls(Output.of(sysctls));
        }

        public ClusterNodeConfigLinuxNodeConfigArgs build() {
            return $;
        }
    }

}
