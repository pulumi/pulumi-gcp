// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionProfileMysqlProfileSslConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionProfileMysqlProfileSslConfigArgs Empty = new ConnectionProfileMysqlProfileSslConfigArgs();

    /**
     * PEM-encoded certificate of the CA that signed the source database
     * server&#39;s certificate.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="caCertificate")
    private @Nullable Output<String> caCertificate;

    /**
     * @return PEM-encoded certificate of the CA that signed the source database
     * server&#39;s certificate.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> caCertificate() {
        return Optional.ofNullable(this.caCertificate);
    }

    /**
     * Indicates whether the clientKey field is set.
     * 
     */
    @Import(name="caCertificateSet")
    private @Nullable Output<Boolean> caCertificateSet;

    /**
     * @return Indicates whether the clientKey field is set.
     * 
     */
    public Optional<Output<Boolean>> caCertificateSet() {
        return Optional.ofNullable(this.caCertificateSet);
    }

    /**
     * PEM-encoded certificate that will be used by the replica to
     * authenticate against the source database server. If this field
     * is used then the &#39;clientKey&#39; and the &#39;caCertificate&#39; fields are
     * mandatory.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="clientCertificate")
    private @Nullable Output<String> clientCertificate;

    /**
     * @return PEM-encoded certificate that will be used by the replica to
     * authenticate against the source database server. If this field
     * is used then the &#39;clientKey&#39; and the &#39;caCertificate&#39; fields are
     * mandatory.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }

    /**
     * Indicates whether the clientCertificate field is set.
     * 
     */
    @Import(name="clientCertificateSet")
    private @Nullable Output<Boolean> clientCertificateSet;

    /**
     * @return Indicates whether the clientCertificate field is set.
     * 
     */
    public Optional<Output<Boolean>> clientCertificateSet() {
        return Optional.ofNullable(this.clientCertificateSet);
    }

    /**
     * PEM-encoded private key associated with the Client Certificate.
     * If this field is used then the &#39;client_certificate&#39; and the
     * &#39;ca_certificate&#39; fields are mandatory.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="clientKey")
    private @Nullable Output<String> clientKey;

    /**
     * @return PEM-encoded private key associated with the Client Certificate.
     * If this field is used then the &#39;client_certificate&#39; and the
     * &#39;ca_certificate&#39; fields are mandatory.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }

    /**
     * Indicates whether the clientKey field is set.
     * 
     */
    @Import(name="clientKeySet")
    private @Nullable Output<Boolean> clientKeySet;

    /**
     * @return Indicates whether the clientKey field is set.
     * 
     */
    public Optional<Output<Boolean>> clientKeySet() {
        return Optional.ofNullable(this.clientKeySet);
    }

    private ConnectionProfileMysqlProfileSslConfigArgs() {}

    private ConnectionProfileMysqlProfileSslConfigArgs(ConnectionProfileMysqlProfileSslConfigArgs $) {
        this.caCertificate = $.caCertificate;
        this.caCertificateSet = $.caCertificateSet;
        this.clientCertificate = $.clientCertificate;
        this.clientCertificateSet = $.clientCertificateSet;
        this.clientKey = $.clientKey;
        this.clientKeySet = $.clientKeySet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionProfileMysqlProfileSslConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionProfileMysqlProfileSslConfigArgs $;

        public Builder() {
            $ = new ConnectionProfileMysqlProfileSslConfigArgs();
        }

        public Builder(ConnectionProfileMysqlProfileSslConfigArgs defaults) {
            $ = new ConnectionProfileMysqlProfileSslConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caCertificate PEM-encoded certificate of the CA that signed the source database
         * server&#39;s certificate.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(@Nullable Output<String> caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        /**
         * @param caCertificate PEM-encoded certificate of the CA that signed the source database
         * server&#39;s certificate.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(String caCertificate) {
            return caCertificate(Output.of(caCertificate));
        }

        /**
         * @param caCertificateSet Indicates whether the clientKey field is set.
         * 
         * @return builder
         * 
         */
        public Builder caCertificateSet(@Nullable Output<Boolean> caCertificateSet) {
            $.caCertificateSet = caCertificateSet;
            return this;
        }

        /**
         * @param caCertificateSet Indicates whether the clientKey field is set.
         * 
         * @return builder
         * 
         */
        public Builder caCertificateSet(Boolean caCertificateSet) {
            return caCertificateSet(Output.of(caCertificateSet));
        }

        /**
         * @param clientCertificate PEM-encoded certificate that will be used by the replica to
         * authenticate against the source database server. If this field
         * is used then the &#39;clientKey&#39; and the &#39;caCertificate&#39; fields are
         * mandatory.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(@Nullable Output<String> clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        /**
         * @param clientCertificate PEM-encoded certificate that will be used by the replica to
         * authenticate against the source database server. If this field
         * is used then the &#39;clientKey&#39; and the &#39;caCertificate&#39; fields are
         * mandatory.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(String clientCertificate) {
            return clientCertificate(Output.of(clientCertificate));
        }

        /**
         * @param clientCertificateSet Indicates whether the clientCertificate field is set.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateSet(@Nullable Output<Boolean> clientCertificateSet) {
            $.clientCertificateSet = clientCertificateSet;
            return this;
        }

        /**
         * @param clientCertificateSet Indicates whether the clientCertificate field is set.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateSet(Boolean clientCertificateSet) {
            return clientCertificateSet(Output.of(clientCertificateSet));
        }

        /**
         * @param clientKey PEM-encoded private key associated with the Client Certificate.
         * If this field is used then the &#39;client_certificate&#39; and the
         * &#39;ca_certificate&#39; fields are mandatory.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(@Nullable Output<String> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        /**
         * @param clientKey PEM-encoded private key associated with the Client Certificate.
         * If this field is used then the &#39;client_certificate&#39; and the
         * &#39;ca_certificate&#39; fields are mandatory.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(String clientKey) {
            return clientKey(Output.of(clientKey));
        }

        /**
         * @param clientKeySet Indicates whether the clientKey field is set.
         * 
         * @return builder
         * 
         */
        public Builder clientKeySet(@Nullable Output<Boolean> clientKeySet) {
            $.clientKeySet = clientKeySet;
            return this;
        }

        /**
         * @param clientKeySet Indicates whether the clientKey field is set.
         * 
         * @return builder
         * 
         */
        public Builder clientKeySet(Boolean clientKeySet) {
            return clientKeySet(Output.of(clientKeySet));
        }

        public ConnectionProfileMysqlProfileSslConfigArgs build() {
            return $;
        }
    }

}
