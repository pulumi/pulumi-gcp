// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.BackendServiceOutlierDetectionBaseEjectionTime;
import com.pulumi.gcp.compute.outputs.BackendServiceOutlierDetectionInterval;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BackendServiceOutlierDetection {
    /**
     * @return The base time that a host is ejected for. The real time is equal to the base
     * time multiplied by the number of times the host has been ejected. Defaults to
     * 30000ms or 30s.
     * Structure is documented below.
     * 
     */
    private final @Nullable BackendServiceOutlierDetectionBaseEjectionTime baseEjectionTime;
    /**
     * @return Number of errors before a host is ejected from the connection pool. When the
     * backend host is accessed over HTTP, a 5xx return code qualifies as an error.
     * Defaults to 5.
     * 
     */
    private final @Nullable Integer consecutiveErrors;
    /**
     * @return The number of consecutive gateway failures (502, 503, 504 status or connection
     * errors that are mapped to one of those status codes) before a consecutive
     * gateway failure ejection occurs. Defaults to 5.
     * 
     */
    private final @Nullable Integer consecutiveGatewayFailure;
    /**
     * @return The percentage chance that a host will be actually ejected when an outlier
     * status is detected through consecutive 5xx. This setting can be used to disable
     * ejection or to ramp it up slowly. Defaults to 100.
     * 
     */
    private final @Nullable Integer enforcingConsecutiveErrors;
    /**
     * @return The percentage chance that a host will be actually ejected when an outlier
     * status is detected through consecutive gateway failures. This setting can be
     * used to disable ejection or to ramp it up slowly. Defaults to 0.
     * 
     */
    private final @Nullable Integer enforcingConsecutiveGatewayFailure;
    /**
     * @return The percentage chance that a host will be actually ejected when an outlier
     * status is detected through success rate statistics. This setting can be used to
     * disable ejection or to ramp it up slowly. Defaults to 100.
     * 
     */
    private final @Nullable Integer enforcingSuccessRate;
    /**
     * @return Time interval between ejection sweep analysis. This can result in both new
     * ejections as well as hosts being returned to service. Defaults to 10 seconds.
     * Structure is documented below.
     * 
     */
    private final @Nullable BackendServiceOutlierDetectionInterval interval;
    /**
     * @return Maximum percentage of hosts in the load balancing pool for the backend service
     * that can be ejected. Defaults to 10%.
     * 
     */
    private final @Nullable Integer maxEjectionPercent;
    /**
     * @return The number of hosts in a cluster that must have enough request volume to detect
     * success rate outliers. If the number of hosts is less than this setting, outlier
     * detection via success rate statistics is not performed for any host in the
     * cluster. Defaults to 5.
     * 
     */
    private final @Nullable Integer successRateMinimumHosts;
    /**
     * @return The minimum number of total requests that must be collected in one interval (as
     * defined by the interval duration above) to include this host in success rate
     * based outlier detection. If the volume is lower than this setting, outlier
     * detection via success rate statistics is not performed for that host. Defaults
     * to 100.
     * 
     */
    private final @Nullable Integer successRateRequestVolume;
    /**
     * @return This factor is used to determine the ejection threshold for success rate outlier
     * ejection. The ejection threshold is the difference between the mean success
     * rate, and the product of this factor and the standard deviation of the mean
     * success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
     * by a thousand to get a double. That is, if the desired factor is 1.9, the
     * runtime value should be 1900. Defaults to 1900.
     * 
     */
    private final @Nullable Integer successRateStdevFactor;

    @CustomType.Constructor
    private BackendServiceOutlierDetection(
        @CustomType.Parameter("baseEjectionTime") @Nullable BackendServiceOutlierDetectionBaseEjectionTime baseEjectionTime,
        @CustomType.Parameter("consecutiveErrors") @Nullable Integer consecutiveErrors,
        @CustomType.Parameter("consecutiveGatewayFailure") @Nullable Integer consecutiveGatewayFailure,
        @CustomType.Parameter("enforcingConsecutiveErrors") @Nullable Integer enforcingConsecutiveErrors,
        @CustomType.Parameter("enforcingConsecutiveGatewayFailure") @Nullable Integer enforcingConsecutiveGatewayFailure,
        @CustomType.Parameter("enforcingSuccessRate") @Nullable Integer enforcingSuccessRate,
        @CustomType.Parameter("interval") @Nullable BackendServiceOutlierDetectionInterval interval,
        @CustomType.Parameter("maxEjectionPercent") @Nullable Integer maxEjectionPercent,
        @CustomType.Parameter("successRateMinimumHosts") @Nullable Integer successRateMinimumHosts,
        @CustomType.Parameter("successRateRequestVolume") @Nullable Integer successRateRequestVolume,
        @CustomType.Parameter("successRateStdevFactor") @Nullable Integer successRateStdevFactor) {
        this.baseEjectionTime = baseEjectionTime;
        this.consecutiveErrors = consecutiveErrors;
        this.consecutiveGatewayFailure = consecutiveGatewayFailure;
        this.enforcingConsecutiveErrors = enforcingConsecutiveErrors;
        this.enforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
        this.enforcingSuccessRate = enforcingSuccessRate;
        this.interval = interval;
        this.maxEjectionPercent = maxEjectionPercent;
        this.successRateMinimumHosts = successRateMinimumHosts;
        this.successRateRequestVolume = successRateRequestVolume;
        this.successRateStdevFactor = successRateStdevFactor;
    }

    /**
     * @return The base time that a host is ejected for. The real time is equal to the base
     * time multiplied by the number of times the host has been ejected. Defaults to
     * 30000ms or 30s.
     * Structure is documented below.
     * 
     */
    public Optional<BackendServiceOutlierDetectionBaseEjectionTime> baseEjectionTime() {
        return Optional.ofNullable(this.baseEjectionTime);
    }
    /**
     * @return Number of errors before a host is ejected from the connection pool. When the
     * backend host is accessed over HTTP, a 5xx return code qualifies as an error.
     * Defaults to 5.
     * 
     */
    public Optional<Integer> consecutiveErrors() {
        return Optional.ofNullable(this.consecutiveErrors);
    }
    /**
     * @return The number of consecutive gateway failures (502, 503, 504 status or connection
     * errors that are mapped to one of those status codes) before a consecutive
     * gateway failure ejection occurs. Defaults to 5.
     * 
     */
    public Optional<Integer> consecutiveGatewayFailure() {
        return Optional.ofNullable(this.consecutiveGatewayFailure);
    }
    /**
     * @return The percentage chance that a host will be actually ejected when an outlier
     * status is detected through consecutive 5xx. This setting can be used to disable
     * ejection or to ramp it up slowly. Defaults to 100.
     * 
     */
    public Optional<Integer> enforcingConsecutiveErrors() {
        return Optional.ofNullable(this.enforcingConsecutiveErrors);
    }
    /**
     * @return The percentage chance that a host will be actually ejected when an outlier
     * status is detected through consecutive gateway failures. This setting can be
     * used to disable ejection or to ramp it up slowly. Defaults to 0.
     * 
     */
    public Optional<Integer> enforcingConsecutiveGatewayFailure() {
        return Optional.ofNullable(this.enforcingConsecutiveGatewayFailure);
    }
    /**
     * @return The percentage chance that a host will be actually ejected when an outlier
     * status is detected through success rate statistics. This setting can be used to
     * disable ejection or to ramp it up slowly. Defaults to 100.
     * 
     */
    public Optional<Integer> enforcingSuccessRate() {
        return Optional.ofNullable(this.enforcingSuccessRate);
    }
    /**
     * @return Time interval between ejection sweep analysis. This can result in both new
     * ejections as well as hosts being returned to service. Defaults to 10 seconds.
     * Structure is documented below.
     * 
     */
    public Optional<BackendServiceOutlierDetectionInterval> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return Maximum percentage of hosts in the load balancing pool for the backend service
     * that can be ejected. Defaults to 10%.
     * 
     */
    public Optional<Integer> maxEjectionPercent() {
        return Optional.ofNullable(this.maxEjectionPercent);
    }
    /**
     * @return The number of hosts in a cluster that must have enough request volume to detect
     * success rate outliers. If the number of hosts is less than this setting, outlier
     * detection via success rate statistics is not performed for any host in the
     * cluster. Defaults to 5.
     * 
     */
    public Optional<Integer> successRateMinimumHosts() {
        return Optional.ofNullable(this.successRateMinimumHosts);
    }
    /**
     * @return The minimum number of total requests that must be collected in one interval (as
     * defined by the interval duration above) to include this host in success rate
     * based outlier detection. If the volume is lower than this setting, outlier
     * detection via success rate statistics is not performed for that host. Defaults
     * to 100.
     * 
     */
    public Optional<Integer> successRateRequestVolume() {
        return Optional.ofNullable(this.successRateRequestVolume);
    }
    /**
     * @return This factor is used to determine the ejection threshold for success rate outlier
     * ejection. The ejection threshold is the difference between the mean success
     * rate, and the product of this factor and the standard deviation of the mean
     * success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
     * by a thousand to get a double. That is, if the desired factor is 1.9, the
     * runtime value should be 1900. Defaults to 1900.
     * 
     */
    public Optional<Integer> successRateStdevFactor() {
        return Optional.ofNullable(this.successRateStdevFactor);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendServiceOutlierDetection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable BackendServiceOutlierDetectionBaseEjectionTime baseEjectionTime;
        private @Nullable Integer consecutiveErrors;
        private @Nullable Integer consecutiveGatewayFailure;
        private @Nullable Integer enforcingConsecutiveErrors;
        private @Nullable Integer enforcingConsecutiveGatewayFailure;
        private @Nullable Integer enforcingSuccessRate;
        private @Nullable BackendServiceOutlierDetectionInterval interval;
        private @Nullable Integer maxEjectionPercent;
        private @Nullable Integer successRateMinimumHosts;
        private @Nullable Integer successRateRequestVolume;
        private @Nullable Integer successRateStdevFactor;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendServiceOutlierDetection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseEjectionTime = defaults.baseEjectionTime;
    	      this.consecutiveErrors = defaults.consecutiveErrors;
    	      this.consecutiveGatewayFailure = defaults.consecutiveGatewayFailure;
    	      this.enforcingConsecutiveErrors = defaults.enforcingConsecutiveErrors;
    	      this.enforcingConsecutiveGatewayFailure = defaults.enforcingConsecutiveGatewayFailure;
    	      this.enforcingSuccessRate = defaults.enforcingSuccessRate;
    	      this.interval = defaults.interval;
    	      this.maxEjectionPercent = defaults.maxEjectionPercent;
    	      this.successRateMinimumHosts = defaults.successRateMinimumHosts;
    	      this.successRateRequestVolume = defaults.successRateRequestVolume;
    	      this.successRateStdevFactor = defaults.successRateStdevFactor;
        }

        public Builder baseEjectionTime(@Nullable BackendServiceOutlierDetectionBaseEjectionTime baseEjectionTime) {
            this.baseEjectionTime = baseEjectionTime;
            return this;
        }
        public Builder consecutiveErrors(@Nullable Integer consecutiveErrors) {
            this.consecutiveErrors = consecutiveErrors;
            return this;
        }
        public Builder consecutiveGatewayFailure(@Nullable Integer consecutiveGatewayFailure) {
            this.consecutiveGatewayFailure = consecutiveGatewayFailure;
            return this;
        }
        public Builder enforcingConsecutiveErrors(@Nullable Integer enforcingConsecutiveErrors) {
            this.enforcingConsecutiveErrors = enforcingConsecutiveErrors;
            return this;
        }
        public Builder enforcingConsecutiveGatewayFailure(@Nullable Integer enforcingConsecutiveGatewayFailure) {
            this.enforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
            return this;
        }
        public Builder enforcingSuccessRate(@Nullable Integer enforcingSuccessRate) {
            this.enforcingSuccessRate = enforcingSuccessRate;
            return this;
        }
        public Builder interval(@Nullable BackendServiceOutlierDetectionInterval interval) {
            this.interval = interval;
            return this;
        }
        public Builder maxEjectionPercent(@Nullable Integer maxEjectionPercent) {
            this.maxEjectionPercent = maxEjectionPercent;
            return this;
        }
        public Builder successRateMinimumHosts(@Nullable Integer successRateMinimumHosts) {
            this.successRateMinimumHosts = successRateMinimumHosts;
            return this;
        }
        public Builder successRateRequestVolume(@Nullable Integer successRateRequestVolume) {
            this.successRateRequestVolume = successRateRequestVolume;
            return this;
        }
        public Builder successRateStdevFactor(@Nullable Integer successRateStdevFactor) {
            this.successRateStdevFactor = successRateStdevFactor;
            return this;
        }        public BackendServiceOutlierDetection build() {
            return new BackendServiceOutlierDetection(baseEjectionTime, consecutiveErrors, consecutiveGatewayFailure, enforcingConsecutiveErrors, enforcingConsecutiveGatewayFailure, enforcingSuccessRate, interval, maxEjectionPercent, successRateMinimumHosts, successRateRequestVolume, successRateStdevFactor);
        }
    }
}
