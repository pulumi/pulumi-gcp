// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigqueryanalyticshub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.ListingBigqueryDatasetArgs;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.ListingCommercialInfoArgs;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.ListingDataProviderArgs;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.ListingPublisherArgs;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.ListingPubsubTopicArgs;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.ListingRestrictedExportConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListingState extends com.pulumi.resources.ResourceArgs {

    public static final ListingState Empty = new ListingState();

    /**
     * If true, the listing is only available to get the resource metadata. Listing is non subscribable.
     * 
     */
    @Import(name="allowOnlyMetadataSharing")
    private @Nullable Output<Boolean> allowOnlyMetadataSharing;

    /**
     * @return If true, the listing is only available to get the resource metadata. Listing is non subscribable.
     * 
     */
    public Optional<Output<Boolean>> allowOnlyMetadataSharing() {
        return Optional.ofNullable(this.allowOnlyMetadataSharing);
    }

    /**
     * Shared dataset i.e. BigQuery dataset source.
     * Structure is documented below.
     * 
     */
    @Import(name="bigqueryDataset")
    private @Nullable Output<ListingBigqueryDatasetArgs> bigqueryDataset;

    /**
     * @return Shared dataset i.e. BigQuery dataset source.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ListingBigqueryDatasetArgs>> bigqueryDataset() {
        return Optional.ofNullable(this.bigqueryDataset);
    }

    /**
     * Categories of the listing. Up to two categories are allowed.
     * 
     */
    @Import(name="categories")
    private @Nullable Output<List<String>> categories;

    /**
     * @return Categories of the listing. Up to two categories are allowed.
     * 
     */
    public Optional<Output<List<String>>> categories() {
        return Optional.ofNullable(this.categories);
    }

    /**
     * Commercial info contains the information about the commercial data products associated with the listing.
     * Structure is documented below.
     * 
     */
    @Import(name="commercialInfos")
    private @Nullable Output<List<ListingCommercialInfoArgs>> commercialInfos;

    /**
     * @return Commercial info contains the information about the commercial data products associated with the listing.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ListingCommercialInfoArgs>>> commercialInfos() {
        return Optional.ofNullable(this.commercialInfos);
    }

    /**
     * The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    @Import(name="dataExchangeId")
    private @Nullable Output<String> dataExchangeId;

    /**
     * @return The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    public Optional<Output<String>> dataExchangeId() {
        return Optional.ofNullable(this.dataExchangeId);
    }

    /**
     * Details of the data provider who owns the source data.
     * Structure is documented below.
     * 
     */
    @Import(name="dataProvider")
    private @Nullable Output<ListingDataProviderArgs> dataProvider;

    /**
     * @return Details of the data provider who owns the source data.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ListingDataProviderArgs>> dataProvider() {
        return Optional.ofNullable(this.dataProvider);
    }

    /**
     * If the listing is commercial then this field must be set to true, otherwise a failure is thrown. This acts as a safety guard to avoid deleting commercial listings accidentally.
     * 
     */
    @Import(name="deleteCommercial")
    private @Nullable Output<Boolean> deleteCommercial;

    /**
     * @return If the listing is commercial then this field must be set to true, otherwise a failure is thrown. This acts as a safety guard to avoid deleting commercial listings accidentally.
     * 
     */
    public Optional<Output<Boolean>> deleteCommercial() {
        return Optional.ofNullable(this.deleteCommercial);
    }

    /**
     * Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies the type of discovery on the discovery page. Cannot be set for a restricted listing. Note that this does not control the visibility of the exchange/listing which is defined by IAM permission.
     * Possible values are: `DISCOVERY_TYPE_PRIVATE`, `DISCOVERY_TYPE_PUBLIC`.
     * 
     */
    @Import(name="discoveryType")
    private @Nullable Output<String> discoveryType;

    /**
     * @return Specifies the type of discovery on the discovery page. Cannot be set for a restricted listing. Note that this does not control the visibility of the exchange/listing which is defined by IAM permission.
     * Possible values are: `DISCOVERY_TYPE_PRIVATE`, `DISCOVERY_TYPE_PUBLIC`.
     * 
     */
    public Optional<Output<String>> discoveryType() {
        return Optional.ofNullable(this.discoveryType);
    }

    /**
     * Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&amp;) and can&#39;t start or end with spaces.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&amp;) and can&#39;t start or end with spaces.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Documentation describing the listing.
     * 
     */
    @Import(name="documentation")
    private @Nullable Output<String> documentation;

    /**
     * @return Documentation describing the listing.
     * 
     */
    public Optional<Output<String>> documentation() {
        return Optional.ofNullable(this.documentation);
    }

    /**
     * Base64 encoded image representing the listing.
     * 
     */
    @Import(name="icon")
    private @Nullable Output<String> icon;

    /**
     * @return Base64 encoded image representing the listing.
     * 
     */
    public Optional<Output<String>> icon() {
        return Optional.ofNullable(this.icon);
    }

    /**
     * The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    @Import(name="listingId")
    private @Nullable Output<String> listingId;

    /**
     * @return The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    public Optional<Output<String>> listingId() {
        return Optional.ofNullable(this.listingId);
    }

    /**
     * The name of the location this data exchange listing.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The name of the location this data exchange listing.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
     * 
     */
    @Import(name="logLinkedDatasetQueryUserEmail")
    private @Nullable Output<Boolean> logLinkedDatasetQueryUserEmail;

    /**
     * @return If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
     * 
     */
    public Optional<Output<Boolean>> logLinkedDatasetQueryUserEmail() {
        return Optional.ofNullable(this.logLinkedDatasetQueryUserEmail);
    }

    /**
     * The resource name of the listing. e.g. &#34;projects/myproject/locations/US/dataExchanges/123/listings/456&#34;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the listing. e.g. &#34;projects/myproject/locations/US/dataExchanges/123/listings/456&#34;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Email or URL of the primary point of contact of the listing.
     * 
     */
    @Import(name="primaryContact")
    private @Nullable Output<String> primaryContact;

    /**
     * @return Email or URL of the primary point of contact of the listing.
     * 
     */
    public Optional<Output<String>> primaryContact() {
        return Optional.ofNullable(this.primaryContact);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Details of the publisher who owns the listing and who can share the source data.
     * Structure is documented below.
     * 
     */
    @Import(name="publisher")
    private @Nullable Output<ListingPublisherArgs> publisher;

    /**
     * @return Details of the publisher who owns the listing and who can share the source data.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ListingPublisherArgs>> publisher() {
        return Optional.ofNullable(this.publisher);
    }

    /**
     * Pub/Sub topic source.
     * Structure is documented below.
     * 
     */
    @Import(name="pubsubTopic")
    private @Nullable Output<ListingPubsubTopicArgs> pubsubTopic;

    /**
     * @return Pub/Sub topic source.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ListingPubsubTopicArgs>> pubsubTopic() {
        return Optional.ofNullable(this.pubsubTopic);
    }

    /**
     * Email or URL of the request access of the listing. Subscribers can use this reference to request access.
     * 
     */
    @Import(name="requestAccess")
    private @Nullable Output<String> requestAccess;

    /**
     * @return Email or URL of the request access of the listing. Subscribers can use this reference to request access.
     * 
     */
    public Optional<Output<String>> requestAccess() {
        return Optional.ofNullable(this.requestAccess);
    }

    /**
     * If set, restricted export configuration will be propagated and enforced on the linked dataset.
     * Structure is documented below.
     * 
     */
    @Import(name="restrictedExportConfig")
    private @Nullable Output<ListingRestrictedExportConfigArgs> restrictedExportConfig;

    /**
     * @return If set, restricted export configuration will be propagated and enforced on the linked dataset.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ListingRestrictedExportConfigArgs>> restrictedExportConfig() {
        return Optional.ofNullable(this.restrictedExportConfig);
    }

    /**
     * Current state of the listing.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Current state of the listing.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private ListingState() {}

    private ListingState(ListingState $) {
        this.allowOnlyMetadataSharing = $.allowOnlyMetadataSharing;
        this.bigqueryDataset = $.bigqueryDataset;
        this.categories = $.categories;
        this.commercialInfos = $.commercialInfos;
        this.dataExchangeId = $.dataExchangeId;
        this.dataProvider = $.dataProvider;
        this.deleteCommercial = $.deleteCommercial;
        this.description = $.description;
        this.discoveryType = $.discoveryType;
        this.displayName = $.displayName;
        this.documentation = $.documentation;
        this.icon = $.icon;
        this.listingId = $.listingId;
        this.location = $.location;
        this.logLinkedDatasetQueryUserEmail = $.logLinkedDatasetQueryUserEmail;
        this.name = $.name;
        this.primaryContact = $.primaryContact;
        this.project = $.project;
        this.publisher = $.publisher;
        this.pubsubTopic = $.pubsubTopic;
        this.requestAccess = $.requestAccess;
        this.restrictedExportConfig = $.restrictedExportConfig;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListingState $;

        public Builder() {
            $ = new ListingState();
        }

        public Builder(ListingState defaults) {
            $ = new ListingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowOnlyMetadataSharing If true, the listing is only available to get the resource metadata. Listing is non subscribable.
         * 
         * @return builder
         * 
         */
        public Builder allowOnlyMetadataSharing(@Nullable Output<Boolean> allowOnlyMetadataSharing) {
            $.allowOnlyMetadataSharing = allowOnlyMetadataSharing;
            return this;
        }

        /**
         * @param allowOnlyMetadataSharing If true, the listing is only available to get the resource metadata. Listing is non subscribable.
         * 
         * @return builder
         * 
         */
        public Builder allowOnlyMetadataSharing(Boolean allowOnlyMetadataSharing) {
            return allowOnlyMetadataSharing(Output.of(allowOnlyMetadataSharing));
        }

        /**
         * @param bigqueryDataset Shared dataset i.e. BigQuery dataset source.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bigqueryDataset(@Nullable Output<ListingBigqueryDatasetArgs> bigqueryDataset) {
            $.bigqueryDataset = bigqueryDataset;
            return this;
        }

        /**
         * @param bigqueryDataset Shared dataset i.e. BigQuery dataset source.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bigqueryDataset(ListingBigqueryDatasetArgs bigqueryDataset) {
            return bigqueryDataset(Output.of(bigqueryDataset));
        }

        /**
         * @param categories Categories of the listing. Up to two categories are allowed.
         * 
         * @return builder
         * 
         */
        public Builder categories(@Nullable Output<List<String>> categories) {
            $.categories = categories;
            return this;
        }

        /**
         * @param categories Categories of the listing. Up to two categories are allowed.
         * 
         * @return builder
         * 
         */
        public Builder categories(List<String> categories) {
            return categories(Output.of(categories));
        }

        /**
         * @param categories Categories of the listing. Up to two categories are allowed.
         * 
         * @return builder
         * 
         */
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }

        /**
         * @param commercialInfos Commercial info contains the information about the commercial data products associated with the listing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder commercialInfos(@Nullable Output<List<ListingCommercialInfoArgs>> commercialInfos) {
            $.commercialInfos = commercialInfos;
            return this;
        }

        /**
         * @param commercialInfos Commercial info contains the information about the commercial data products associated with the listing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder commercialInfos(List<ListingCommercialInfoArgs> commercialInfos) {
            return commercialInfos(Output.of(commercialInfos));
        }

        /**
         * @param commercialInfos Commercial info contains the information about the commercial data products associated with the listing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder commercialInfos(ListingCommercialInfoArgs... commercialInfos) {
            return commercialInfos(List.of(commercialInfos));
        }

        /**
         * @param dataExchangeId The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeId(@Nullable Output<String> dataExchangeId) {
            $.dataExchangeId = dataExchangeId;
            return this;
        }

        /**
         * @param dataExchangeId The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeId(String dataExchangeId) {
            return dataExchangeId(Output.of(dataExchangeId));
        }

        /**
         * @param dataProvider Details of the data provider who owns the source data.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataProvider(@Nullable Output<ListingDataProviderArgs> dataProvider) {
            $.dataProvider = dataProvider;
            return this;
        }

        /**
         * @param dataProvider Details of the data provider who owns the source data.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataProvider(ListingDataProviderArgs dataProvider) {
            return dataProvider(Output.of(dataProvider));
        }

        /**
         * @param deleteCommercial If the listing is commercial then this field must be set to true, otherwise a failure is thrown. This acts as a safety guard to avoid deleting commercial listings accidentally.
         * 
         * @return builder
         * 
         */
        public Builder deleteCommercial(@Nullable Output<Boolean> deleteCommercial) {
            $.deleteCommercial = deleteCommercial;
            return this;
        }

        /**
         * @param deleteCommercial If the listing is commercial then this field must be set to true, otherwise a failure is thrown. This acts as a safety guard to avoid deleting commercial listings accidentally.
         * 
         * @return builder
         * 
         */
        public Builder deleteCommercial(Boolean deleteCommercial) {
            return deleteCommercial(Output.of(deleteCommercial));
        }

        /**
         * @param description Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param discoveryType Specifies the type of discovery on the discovery page. Cannot be set for a restricted listing. Note that this does not control the visibility of the exchange/listing which is defined by IAM permission.
         * Possible values are: `DISCOVERY_TYPE_PRIVATE`, `DISCOVERY_TYPE_PUBLIC`.
         * 
         * @return builder
         * 
         */
        public Builder discoveryType(@Nullable Output<String> discoveryType) {
            $.discoveryType = discoveryType;
            return this;
        }

        /**
         * @param discoveryType Specifies the type of discovery on the discovery page. Cannot be set for a restricted listing. Note that this does not control the visibility of the exchange/listing which is defined by IAM permission.
         * Possible values are: `DISCOVERY_TYPE_PRIVATE`, `DISCOVERY_TYPE_PUBLIC`.
         * 
         * @return builder
         * 
         */
        public Builder discoveryType(String discoveryType) {
            return discoveryType(Output.of(discoveryType));
        }

        /**
         * @param displayName Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&amp;) and can&#39;t start or end with spaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&amp;) and can&#39;t start or end with spaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param documentation Documentation describing the listing.
         * 
         * @return builder
         * 
         */
        public Builder documentation(@Nullable Output<String> documentation) {
            $.documentation = documentation;
            return this;
        }

        /**
         * @param documentation Documentation describing the listing.
         * 
         * @return builder
         * 
         */
        public Builder documentation(String documentation) {
            return documentation(Output.of(documentation));
        }

        /**
         * @param icon Base64 encoded image representing the listing.
         * 
         * @return builder
         * 
         */
        public Builder icon(@Nullable Output<String> icon) {
            $.icon = icon;
            return this;
        }

        /**
         * @param icon Base64 encoded image representing the listing.
         * 
         * @return builder
         * 
         */
        public Builder icon(String icon) {
            return icon(Output.of(icon));
        }

        /**
         * @param listingId The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder listingId(@Nullable Output<String> listingId) {
            $.listingId = listingId;
            return this;
        }

        /**
         * @param listingId The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder listingId(String listingId) {
            return listingId(Output.of(listingId));
        }

        /**
         * @param location The name of the location this data exchange listing.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of the location this data exchange listing.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logLinkedDatasetQueryUserEmail If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
         * 
         * @return builder
         * 
         */
        public Builder logLinkedDatasetQueryUserEmail(@Nullable Output<Boolean> logLinkedDatasetQueryUserEmail) {
            $.logLinkedDatasetQueryUserEmail = logLinkedDatasetQueryUserEmail;
            return this;
        }

        /**
         * @param logLinkedDatasetQueryUserEmail If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
         * 
         * @return builder
         * 
         */
        public Builder logLinkedDatasetQueryUserEmail(Boolean logLinkedDatasetQueryUserEmail) {
            return logLinkedDatasetQueryUserEmail(Output.of(logLinkedDatasetQueryUserEmail));
        }

        /**
         * @param name The resource name of the listing. e.g. &#34;projects/myproject/locations/US/dataExchanges/123/listings/456&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the listing. e.g. &#34;projects/myproject/locations/US/dataExchanges/123/listings/456&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param primaryContact Email or URL of the primary point of contact of the listing.
         * 
         * @return builder
         * 
         */
        public Builder primaryContact(@Nullable Output<String> primaryContact) {
            $.primaryContact = primaryContact;
            return this;
        }

        /**
         * @param primaryContact Email or URL of the primary point of contact of the listing.
         * 
         * @return builder
         * 
         */
        public Builder primaryContact(String primaryContact) {
            return primaryContact(Output.of(primaryContact));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param publisher Details of the publisher who owns the listing and who can share the source data.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder publisher(@Nullable Output<ListingPublisherArgs> publisher) {
            $.publisher = publisher;
            return this;
        }

        /**
         * @param publisher Details of the publisher who owns the listing and who can share the source data.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder publisher(ListingPublisherArgs publisher) {
            return publisher(Output.of(publisher));
        }

        /**
         * @param pubsubTopic Pub/Sub topic source.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pubsubTopic(@Nullable Output<ListingPubsubTopicArgs> pubsubTopic) {
            $.pubsubTopic = pubsubTopic;
            return this;
        }

        /**
         * @param pubsubTopic Pub/Sub topic source.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pubsubTopic(ListingPubsubTopicArgs pubsubTopic) {
            return pubsubTopic(Output.of(pubsubTopic));
        }

        /**
         * @param requestAccess Email or URL of the request access of the listing. Subscribers can use this reference to request access.
         * 
         * @return builder
         * 
         */
        public Builder requestAccess(@Nullable Output<String> requestAccess) {
            $.requestAccess = requestAccess;
            return this;
        }

        /**
         * @param requestAccess Email or URL of the request access of the listing. Subscribers can use this reference to request access.
         * 
         * @return builder
         * 
         */
        public Builder requestAccess(String requestAccess) {
            return requestAccess(Output.of(requestAccess));
        }

        /**
         * @param restrictedExportConfig If set, restricted export configuration will be propagated and enforced on the linked dataset.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder restrictedExportConfig(@Nullable Output<ListingRestrictedExportConfigArgs> restrictedExportConfig) {
            $.restrictedExportConfig = restrictedExportConfig;
            return this;
        }

        /**
         * @param restrictedExportConfig If set, restricted export configuration will be propagated and enforced on the linked dataset.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder restrictedExportConfig(ListingRestrictedExportConfigArgs restrictedExportConfig) {
            return restrictedExportConfig(Output.of(restrictedExportConfig));
        }

        /**
         * @param state Current state of the listing.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Current state of the listing.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public ListingState build() {
            return $;
        }
    }

}
