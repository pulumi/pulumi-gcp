// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppHostingBuildSourceCodebaseAuthorArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppHostingBuildSourceCodebaseAuthorArgs Empty = new AppHostingBuildSourceCodebaseAuthorArgs();

    /**
     * Human-readable name. 63 character limit.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Human-readable name. 63 character limit.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The &#39;email&#39; field in a Git user&#39;s git.config, if available.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The &#39;email&#39; field in a Git user&#39;s git.config, if available.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * The URI of an image file associated with the user&#39;s account in an
     * external source control provider, if available.
     * 
     */
    @Import(name="imageUri")
    private @Nullable Output<String> imageUri;

    /**
     * @return The URI of an image file associated with the user&#39;s account in an
     * external source control provider, if available.
     * 
     */
    public Optional<Output<String>> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }

    private AppHostingBuildSourceCodebaseAuthorArgs() {}

    private AppHostingBuildSourceCodebaseAuthorArgs(AppHostingBuildSourceCodebaseAuthorArgs $) {
        this.displayName = $.displayName;
        this.email = $.email;
        this.imageUri = $.imageUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppHostingBuildSourceCodebaseAuthorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppHostingBuildSourceCodebaseAuthorArgs $;

        public Builder() {
            $ = new AppHostingBuildSourceCodebaseAuthorArgs();
        }

        public Builder(AppHostingBuildSourceCodebaseAuthorArgs defaults) {
            $ = new AppHostingBuildSourceCodebaseAuthorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName Human-readable name. 63 character limit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Human-readable name. 63 character limit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param email The &#39;email&#39; field in a Git user&#39;s git.config, if available.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The &#39;email&#39; field in a Git user&#39;s git.config, if available.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param imageUri The URI of an image file associated with the user&#39;s account in an
         * external source control provider, if available.
         * 
         * @return builder
         * 
         */
        public Builder imageUri(@Nullable Output<String> imageUri) {
            $.imageUri = imageUri;
            return this;
        }

        /**
         * @param imageUri The URI of an image file associated with the user&#39;s account in an
         * external source control provider, if available.
         * 
         * @return builder
         * 
         */
        public Builder imageUri(String imageUri) {
            return imageUri(Output.of(imageUri));
        }

        public AppHostingBuildSourceCodebaseAuthorArgs build() {
            return $;
        }
    }

}
