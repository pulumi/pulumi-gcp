// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppHostingDefaultDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppHostingDefaultDomainArgs Empty = new AppHostingDefaultDomainArgs();

    /**
     * The ID of the Backend that this Domain is associated with
     * 
     */
    @Import(name="backend", required=true)
    private Output<String> backend;

    /**
     * @return The ID of the Backend that this Domain is associated with
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }

    /**
     * Whether the domain is disabled. Defaults to false.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Whether the domain is disabled. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
     * 
     */
    @Import(name="domainId", required=true)
    private Output<String> domainId;

    /**
     * @return Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
     * 
     */
    public Output<String> domainId() {
        return this.domainId;
    }

    /**
     * The location of the Backend that this Domain is associated with
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the Backend that this Domain is associated with
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private AppHostingDefaultDomainArgs() {}

    private AppHostingDefaultDomainArgs(AppHostingDefaultDomainArgs $) {
        this.backend = $.backend;
        this.disabled = $.disabled;
        this.domainId = $.domainId;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppHostingDefaultDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppHostingDefaultDomainArgs $;

        public Builder() {
            $ = new AppHostingDefaultDomainArgs();
        }

        public Builder(AppHostingDefaultDomainArgs defaults) {
            $ = new AppHostingDefaultDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend The ID of the Backend that this Domain is associated with
         * 
         * @return builder
         * 
         */
        public Builder backend(Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The ID of the Backend that this Domain is associated with
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param disabled Whether the domain is disabled. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Whether the domain is disabled. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param domainId Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
         * 
         * @return builder
         * 
         */
        public Builder domainId(Output<String> domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param domainId Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
         * 
         * @return builder
         * 
         */
        public Builder domainId(String domainId) {
            return domainId(Output.of(domainId));
        }

        /**
         * @param location The location of the Backend that this Domain is associated with
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the Backend that this Domain is associated with
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public AppHostingDefaultDomainArgs build() {
            if ($.backend == null) {
                throw new MissingRequiredPropertyException("AppHostingDefaultDomainArgs", "backend");
            }
            if ($.domainId == null) {
                throw new MissingRequiredPropertyException("AppHostingDefaultDomainArgs", "domainId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("AppHostingDefaultDomainArgs", "location");
            }
            return $;
        }
    }

}
