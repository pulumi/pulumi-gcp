// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudExadataInfrastructurePropertiesMaintenanceWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudExadataInfrastructurePropertiesMaintenanceWindowArgs Empty = new CloudExadataInfrastructurePropertiesMaintenanceWindowArgs();

    /**
     * Determines the amount of time the system will wait before the start of each
     * database server patching operation. Custom action timeout is in minutes and
     * valid value is between 15 to 120 (inclusive).
     * 
     */
    @Import(name="customActionTimeoutMins")
    private @Nullable Output<Integer> customActionTimeoutMins;

    /**
     * @return Determines the amount of time the system will wait before the start of each
     * database server patching operation. Custom action timeout is in minutes and
     * valid value is between 15 to 120 (inclusive).
     * 
     */
    public Optional<Output<Integer>> customActionTimeoutMins() {
        return Optional.ofNullable(this.customActionTimeoutMins);
    }

    /**
     * Days during the week when maintenance should be performed.
     * 
     */
    @Import(name="daysOfWeeks")
    private @Nullable Output<List<String>> daysOfWeeks;

    /**
     * @return Days during the week when maintenance should be performed.
     * 
     */
    public Optional<Output<List<String>>> daysOfWeeks() {
        return Optional.ofNullable(this.daysOfWeeks);
    }

    /**
     * The window of hours during the day when maintenance should be performed.
     * The window is a 4 hour slot. Valid values are:
     * 0 - represents time slot 0:00 - 3:59 UTC
     * 4 - represents time slot 4:00 - 7:59 UTC
     * 8 - represents time slot 8:00 - 11:59 UTC
     * 12 - represents time slot 12:00 - 15:59 UTC
     * 16 - represents time slot 16:00 - 19:59 UTC
     * 20 - represents time slot 20:00 - 23:59 UTC
     * 
     */
    @Import(name="hoursOfDays")
    private @Nullable Output<List<Integer>> hoursOfDays;

    /**
     * @return The window of hours during the day when maintenance should be performed.
     * The window is a 4 hour slot. Valid values are:
     * 0 - represents time slot 0:00 - 3:59 UTC
     * 4 - represents time slot 4:00 - 7:59 UTC
     * 8 - represents time slot 8:00 - 11:59 UTC
     * 12 - represents time slot 12:00 - 15:59 UTC
     * 16 - represents time slot 16:00 - 19:59 UTC
     * 20 - represents time slot 20:00 - 23:59 UTC
     * 
     */
    public Optional<Output<List<Integer>>> hoursOfDays() {
        return Optional.ofNullable(this.hoursOfDays);
    }

    /**
     * If true, enables the configuration of a custom action timeout (waiting
     * period) between database server patching operations.
     * 
     */
    @Import(name="isCustomActionTimeoutEnabled")
    private @Nullable Output<Boolean> isCustomActionTimeoutEnabled;

    /**
     * @return If true, enables the configuration of a custom action timeout (waiting
     * period) between database server patching operations.
     * 
     */
    public Optional<Output<Boolean>> isCustomActionTimeoutEnabled() {
        return Optional.ofNullable(this.isCustomActionTimeoutEnabled);
    }

    /**
     * Lead time window allows user to set a lead time to prepare for a down time.
     * The lead time is in weeks and valid value is between 1 to 4.
     * 
     */
    @Import(name="leadTimeWeek")
    private @Nullable Output<Integer> leadTimeWeek;

    /**
     * @return Lead time window allows user to set a lead time to prepare for a down time.
     * The lead time is in weeks and valid value is between 1 to 4.
     * 
     */
    public Optional<Output<Integer>> leadTimeWeek() {
        return Optional.ofNullable(this.leadTimeWeek);
    }

    /**
     * Months during the year when maintenance should be performed.
     * 
     */
    @Import(name="months")
    private @Nullable Output<List<String>> months;

    /**
     * @return Months during the year when maintenance should be performed.
     * 
     */
    public Optional<Output<List<String>>> months() {
        return Optional.ofNullable(this.months);
    }

    /**
     * Cloud CloudExadataInfrastructure node patching method, either &#34;ROLLING&#34;
     * or &#34;NONROLLING&#34;. Default value is ROLLING.
     * Possible values:
     * PATCHING_MODE_UNSPECIFIED
     * ROLLING
     * NON_ROLLING
     * 
     */
    @Import(name="patchingMode")
    private @Nullable Output<String> patchingMode;

    /**
     * @return Cloud CloudExadataInfrastructure node patching method, either &#34;ROLLING&#34;
     * or &#34;NONROLLING&#34;. Default value is ROLLING.
     * Possible values:
     * PATCHING_MODE_UNSPECIFIED
     * ROLLING
     * NON_ROLLING
     * 
     */
    public Optional<Output<String>> patchingMode() {
        return Optional.ofNullable(this.patchingMode);
    }

    /**
     * The maintenance window scheduling preference.
     * Possible values:
     * MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
     * CUSTOM_PREFERENCE
     * NO_PREFERENCE
     * 
     */
    @Import(name="preference")
    private @Nullable Output<String> preference;

    /**
     * @return The maintenance window scheduling preference.
     * Possible values:
     * MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
     * CUSTOM_PREFERENCE
     * NO_PREFERENCE
     * 
     */
    public Optional<Output<String>> preference() {
        return Optional.ofNullable(this.preference);
    }

    /**
     * Weeks during the month when maintenance should be performed. Weeks start on
     * the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
     * days. Weeks start and end based on calendar dates, not days of the week.
     * 
     */
    @Import(name="weeksOfMonths")
    private @Nullable Output<List<Integer>> weeksOfMonths;

    /**
     * @return Weeks during the month when maintenance should be performed. Weeks start on
     * the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
     * days. Weeks start and end based on calendar dates, not days of the week.
     * 
     */
    public Optional<Output<List<Integer>>> weeksOfMonths() {
        return Optional.ofNullable(this.weeksOfMonths);
    }

    private CloudExadataInfrastructurePropertiesMaintenanceWindowArgs() {}

    private CloudExadataInfrastructurePropertiesMaintenanceWindowArgs(CloudExadataInfrastructurePropertiesMaintenanceWindowArgs $) {
        this.customActionTimeoutMins = $.customActionTimeoutMins;
        this.daysOfWeeks = $.daysOfWeeks;
        this.hoursOfDays = $.hoursOfDays;
        this.isCustomActionTimeoutEnabled = $.isCustomActionTimeoutEnabled;
        this.leadTimeWeek = $.leadTimeWeek;
        this.months = $.months;
        this.patchingMode = $.patchingMode;
        this.preference = $.preference;
        this.weeksOfMonths = $.weeksOfMonths;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudExadataInfrastructurePropertiesMaintenanceWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudExadataInfrastructurePropertiesMaintenanceWindowArgs $;

        public Builder() {
            $ = new CloudExadataInfrastructurePropertiesMaintenanceWindowArgs();
        }

        public Builder(CloudExadataInfrastructurePropertiesMaintenanceWindowArgs defaults) {
            $ = new CloudExadataInfrastructurePropertiesMaintenanceWindowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customActionTimeoutMins Determines the amount of time the system will wait before the start of each
         * database server patching operation. Custom action timeout is in minutes and
         * valid value is between 15 to 120 (inclusive).
         * 
         * @return builder
         * 
         */
        public Builder customActionTimeoutMins(@Nullable Output<Integer> customActionTimeoutMins) {
            $.customActionTimeoutMins = customActionTimeoutMins;
            return this;
        }

        /**
         * @param customActionTimeoutMins Determines the amount of time the system will wait before the start of each
         * database server patching operation. Custom action timeout is in minutes and
         * valid value is between 15 to 120 (inclusive).
         * 
         * @return builder
         * 
         */
        public Builder customActionTimeoutMins(Integer customActionTimeoutMins) {
            return customActionTimeoutMins(Output.of(customActionTimeoutMins));
        }

        /**
         * @param daysOfWeeks Days during the week when maintenance should be performed.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(@Nullable Output<List<String>> daysOfWeeks) {
            $.daysOfWeeks = daysOfWeeks;
            return this;
        }

        /**
         * @param daysOfWeeks Days during the week when maintenance should be performed.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(List<String> daysOfWeeks) {
            return daysOfWeeks(Output.of(daysOfWeeks));
        }

        /**
         * @param daysOfWeeks Days during the week when maintenance should be performed.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(String... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }

        /**
         * @param hoursOfDays The window of hours during the day when maintenance should be performed.
         * The window is a 4 hour slot. Valid values are:
         * 0 - represents time slot 0:00 - 3:59 UTC
         * 4 - represents time slot 4:00 - 7:59 UTC
         * 8 - represents time slot 8:00 - 11:59 UTC
         * 12 - represents time slot 12:00 - 15:59 UTC
         * 16 - represents time slot 16:00 - 19:59 UTC
         * 20 - represents time slot 20:00 - 23:59 UTC
         * 
         * @return builder
         * 
         */
        public Builder hoursOfDays(@Nullable Output<List<Integer>> hoursOfDays) {
            $.hoursOfDays = hoursOfDays;
            return this;
        }

        /**
         * @param hoursOfDays The window of hours during the day when maintenance should be performed.
         * The window is a 4 hour slot. Valid values are:
         * 0 - represents time slot 0:00 - 3:59 UTC
         * 4 - represents time slot 4:00 - 7:59 UTC
         * 8 - represents time slot 8:00 - 11:59 UTC
         * 12 - represents time slot 12:00 - 15:59 UTC
         * 16 - represents time slot 16:00 - 19:59 UTC
         * 20 - represents time slot 20:00 - 23:59 UTC
         * 
         * @return builder
         * 
         */
        public Builder hoursOfDays(List<Integer> hoursOfDays) {
            return hoursOfDays(Output.of(hoursOfDays));
        }

        /**
         * @param hoursOfDays The window of hours during the day when maintenance should be performed.
         * The window is a 4 hour slot. Valid values are:
         * 0 - represents time slot 0:00 - 3:59 UTC
         * 4 - represents time slot 4:00 - 7:59 UTC
         * 8 - represents time slot 8:00 - 11:59 UTC
         * 12 - represents time slot 12:00 - 15:59 UTC
         * 16 - represents time slot 16:00 - 19:59 UTC
         * 20 - represents time slot 20:00 - 23:59 UTC
         * 
         * @return builder
         * 
         */
        public Builder hoursOfDays(Integer... hoursOfDays) {
            return hoursOfDays(List.of(hoursOfDays));
        }

        /**
         * @param isCustomActionTimeoutEnabled If true, enables the configuration of a custom action timeout (waiting
         * period) between database server patching operations.
         * 
         * @return builder
         * 
         */
        public Builder isCustomActionTimeoutEnabled(@Nullable Output<Boolean> isCustomActionTimeoutEnabled) {
            $.isCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
            return this;
        }

        /**
         * @param isCustomActionTimeoutEnabled If true, enables the configuration of a custom action timeout (waiting
         * period) between database server patching operations.
         * 
         * @return builder
         * 
         */
        public Builder isCustomActionTimeoutEnabled(Boolean isCustomActionTimeoutEnabled) {
            return isCustomActionTimeoutEnabled(Output.of(isCustomActionTimeoutEnabled));
        }

        /**
         * @param leadTimeWeek Lead time window allows user to set a lead time to prepare for a down time.
         * The lead time is in weeks and valid value is between 1 to 4.
         * 
         * @return builder
         * 
         */
        public Builder leadTimeWeek(@Nullable Output<Integer> leadTimeWeek) {
            $.leadTimeWeek = leadTimeWeek;
            return this;
        }

        /**
         * @param leadTimeWeek Lead time window allows user to set a lead time to prepare for a down time.
         * The lead time is in weeks and valid value is between 1 to 4.
         * 
         * @return builder
         * 
         */
        public Builder leadTimeWeek(Integer leadTimeWeek) {
            return leadTimeWeek(Output.of(leadTimeWeek));
        }

        /**
         * @param months Months during the year when maintenance should be performed.
         * 
         * @return builder
         * 
         */
        public Builder months(@Nullable Output<List<String>> months) {
            $.months = months;
            return this;
        }

        /**
         * @param months Months during the year when maintenance should be performed.
         * 
         * @return builder
         * 
         */
        public Builder months(List<String> months) {
            return months(Output.of(months));
        }

        /**
         * @param months Months during the year when maintenance should be performed.
         * 
         * @return builder
         * 
         */
        public Builder months(String... months) {
            return months(List.of(months));
        }

        /**
         * @param patchingMode Cloud CloudExadataInfrastructure node patching method, either &#34;ROLLING&#34;
         * or &#34;NONROLLING&#34;. Default value is ROLLING.
         * Possible values:
         * PATCHING_MODE_UNSPECIFIED
         * ROLLING
         * NON_ROLLING
         * 
         * @return builder
         * 
         */
        public Builder patchingMode(@Nullable Output<String> patchingMode) {
            $.patchingMode = patchingMode;
            return this;
        }

        /**
         * @param patchingMode Cloud CloudExadataInfrastructure node patching method, either &#34;ROLLING&#34;
         * or &#34;NONROLLING&#34;. Default value is ROLLING.
         * Possible values:
         * PATCHING_MODE_UNSPECIFIED
         * ROLLING
         * NON_ROLLING
         * 
         * @return builder
         * 
         */
        public Builder patchingMode(String patchingMode) {
            return patchingMode(Output.of(patchingMode));
        }

        /**
         * @param preference The maintenance window scheduling preference.
         * Possible values:
         * MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
         * CUSTOM_PREFERENCE
         * NO_PREFERENCE
         * 
         * @return builder
         * 
         */
        public Builder preference(@Nullable Output<String> preference) {
            $.preference = preference;
            return this;
        }

        /**
         * @param preference The maintenance window scheduling preference.
         * Possible values:
         * MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
         * CUSTOM_PREFERENCE
         * NO_PREFERENCE
         * 
         * @return builder
         * 
         */
        public Builder preference(String preference) {
            return preference(Output.of(preference));
        }

        /**
         * @param weeksOfMonths Weeks during the month when maintenance should be performed. Weeks start on
         * the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
         * days. Weeks start and end based on calendar dates, not days of the week.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonths(@Nullable Output<List<Integer>> weeksOfMonths) {
            $.weeksOfMonths = weeksOfMonths;
            return this;
        }

        /**
         * @param weeksOfMonths Weeks during the month when maintenance should be performed. Weeks start on
         * the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
         * days. Weeks start and end based on calendar dates, not days of the week.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonths(List<Integer> weeksOfMonths) {
            return weeksOfMonths(Output.of(weeksOfMonths));
        }

        /**
         * @param weeksOfMonths Weeks during the month when maintenance should be performed. Weeks start on
         * the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
         * days. Weeks start and end based on calendar dates, not days of the week.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonths(Integer... weeksOfMonths) {
            return weeksOfMonths(List.of(weeksOfMonths));
        }

        public CloudExadataInfrastructurePropertiesMaintenanceWindowArgs build() {
            return $;
        }
    }

}
