// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BareMetalClusterNodeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final BareMetalClusterNodeConfigArgs Empty = new BareMetalClusterNodeConfigArgs();

    /**
     * The available runtimes that can be used to run containers in a Bare Metal User Cluster.
     * Possible values are: `CONTAINER_RUNTIME_UNSPECIFIED`, `DOCKER`, `CONTAINERD`.
     * 
     */
    @Import(name="containerRuntime")
    private @Nullable Output<String> containerRuntime;

    /**
     * @return The available runtimes that can be used to run containers in a Bare Metal User Cluster.
     * Possible values are: `CONTAINER_RUNTIME_UNSPECIFIED`, `DOCKER`, `CONTAINERD`.
     * 
     */
    public Optional<Output<String>> containerRuntime() {
        return Optional.ofNullable(this.containerRuntime);
    }

    /**
     * The maximum number of pods a node can run. The size of the CIDR range
     * assigned to the node will be derived from this parameter.
     * 
     */
    @Import(name="maxPodsPerNode")
    private @Nullable Output<Integer> maxPodsPerNode;

    /**
     * @return The maximum number of pods a node can run. The size of the CIDR range
     * assigned to the node will be derived from this parameter.
     * 
     */
    public Optional<Output<Integer>> maxPodsPerNode() {
        return Optional.ofNullable(this.maxPodsPerNode);
    }

    private BareMetalClusterNodeConfigArgs() {}

    private BareMetalClusterNodeConfigArgs(BareMetalClusterNodeConfigArgs $) {
        this.containerRuntime = $.containerRuntime;
        this.maxPodsPerNode = $.maxPodsPerNode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BareMetalClusterNodeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BareMetalClusterNodeConfigArgs $;

        public Builder() {
            $ = new BareMetalClusterNodeConfigArgs();
        }

        public Builder(BareMetalClusterNodeConfigArgs defaults) {
            $ = new BareMetalClusterNodeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerRuntime The available runtimes that can be used to run containers in a Bare Metal User Cluster.
         * Possible values are: `CONTAINER_RUNTIME_UNSPECIFIED`, `DOCKER`, `CONTAINERD`.
         * 
         * @return builder
         * 
         */
        public Builder containerRuntime(@Nullable Output<String> containerRuntime) {
            $.containerRuntime = containerRuntime;
            return this;
        }

        /**
         * @param containerRuntime The available runtimes that can be used to run containers in a Bare Metal User Cluster.
         * Possible values are: `CONTAINER_RUNTIME_UNSPECIFIED`, `DOCKER`, `CONTAINERD`.
         * 
         * @return builder
         * 
         */
        public Builder containerRuntime(String containerRuntime) {
            return containerRuntime(Output.of(containerRuntime));
        }

        /**
         * @param maxPodsPerNode The maximum number of pods a node can run. The size of the CIDR range
         * assigned to the node will be derived from this parameter.
         * 
         * @return builder
         * 
         */
        public Builder maxPodsPerNode(@Nullable Output<Integer> maxPodsPerNode) {
            $.maxPodsPerNode = maxPodsPerNode;
            return this;
        }

        /**
         * @param maxPodsPerNode The maximum number of pods a node can run. The size of the CIDR range
         * assigned to the node will be derived from this parameter.
         * 
         * @return builder
         * 
         */
        public Builder maxPodsPerNode(Integer maxPodsPerNode) {
            return maxPodsPerNode(Output.of(maxPodsPerNode));
        }

        public BareMetalClusterNodeConfigArgs build() {
            return $;
        }
    }

}
