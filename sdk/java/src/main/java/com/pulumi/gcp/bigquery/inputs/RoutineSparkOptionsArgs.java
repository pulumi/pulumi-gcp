// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoutineSparkOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoutineSparkOptionsArgs Empty = new RoutineSparkOptionsArgs();

    /**
     * Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see Apache Spark.
     * 
     */
    @Import(name="archiveUris")
    private @Nullable Output<List<String>> archiveUris;

    /**
     * @return Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see Apache Spark.
     * 
     */
    public Optional<Output<List<String>>> archiveUris() {
        return Optional.ofNullable(this.archiveUris);
    }

    /**
     * Fully qualified name of the user-provided Spark connection object.
     * Format: &#34;projects/{projectId}/locations/{locationId}/connections/{connectionId}&#34;
     * 
     */
    @Import(name="connection")
    private @Nullable Output<String> connection;

    /**
     * @return Fully qualified name of the user-provided Spark connection object.
     * Format: &#34;projects/{projectId}/locations/{locationId}/connections/{connectionId}&#34;
     * 
     */
    public Optional<Output<String>> connection() {
        return Optional.ofNullable(this.connection);
    }

    /**
     * Custom container image for the runtime environment.
     * 
     */
    @Import(name="containerImage")
    private @Nullable Output<String> containerImage;

    /**
     * @return Custom container image for the runtime environment.
     * 
     */
    public Optional<Output<String>> containerImage() {
        return Optional.ofNullable(this.containerImage);
    }

    /**
     * Files to be placed in the working directory of each executor. For more information about Apache Spark, see Apache Spark.
     * 
     */
    @Import(name="fileUris")
    private @Nullable Output<List<String>> fileUris;

    /**
     * @return Files to be placed in the working directory of each executor. For more information about Apache Spark, see Apache Spark.
     * 
     */
    public Optional<Output<List<String>>> fileUris() {
        return Optional.ofNullable(this.fileUris);
    }

    /**
     * JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see Apache Spark.
     * 
     */
    @Import(name="jarUris")
    private @Nullable Output<List<String>> jarUris;

    /**
     * @return JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see Apache Spark.
     * 
     */
    public Optional<Output<List<String>>> jarUris() {
        return Optional.ofNullable(this.jarUris);
    }

    /**
     * The fully qualified name of a class in jarUris, for example, com.example.wordcount.
     * Exactly one of mainClass and mainJarUri field should be set for Java/Scala language type.
     * 
     */
    @Import(name="mainClass")
    private @Nullable Output<String> mainClass;

    /**
     * @return The fully qualified name of a class in jarUris, for example, com.example.wordcount.
     * Exactly one of mainClass and mainJarUri field should be set for Java/Scala language type.
     * 
     */
    public Optional<Output<String>> mainClass() {
        return Optional.ofNullable(this.mainClass);
    }

    /**
     * The main file/jar URI of the Spark application.
     * Exactly one of the definitionBody field and the mainFileUri field must be set for Python.
     * Exactly one of mainClass and mainFileUri field should be set for Java/Scala language type.
     * 
     */
    @Import(name="mainFileUri")
    private @Nullable Output<String> mainFileUri;

    /**
     * @return The main file/jar URI of the Spark application.
     * Exactly one of the definitionBody field and the mainFileUri field must be set for Python.
     * Exactly one of mainClass and mainFileUri field should be set for Java/Scala language type.
     * 
     */
    public Optional<Output<String>> mainFileUri() {
        return Optional.ofNullable(this.mainFileUri);
    }

    /**
     * Configuration properties as a set of key/value pairs, which will be passed on to the Spark application.
     * For more information, see Apache Spark and the procedure option list.
     * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    /**
     * @return Configuration properties as a set of key/value pairs, which will be passed on to the Spark application.
     * For more information, see Apache Spark and the procedure option list.
     * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: .py, .egg, and .zip. For more information about Apache Spark, see Apache Spark.
     * 
     */
    @Import(name="pyFileUris")
    private @Nullable Output<List<String>> pyFileUris;

    /**
     * @return Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: .py, .egg, and .zip. For more information about Apache Spark, see Apache Spark.
     * 
     */
    public Optional<Output<List<String>>> pyFileUris() {
        return Optional.ofNullable(this.pyFileUris);
    }

    /**
     * Runtime version. If not specified, the default runtime version is used.
     * 
     */
    @Import(name="runtimeVersion")
    private @Nullable Output<String> runtimeVersion;

    /**
     * @return Runtime version. If not specified, the default runtime version is used.
     * 
     */
    public Optional<Output<String>> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }

    private RoutineSparkOptionsArgs() {}

    private RoutineSparkOptionsArgs(RoutineSparkOptionsArgs $) {
        this.archiveUris = $.archiveUris;
        this.connection = $.connection;
        this.containerImage = $.containerImage;
        this.fileUris = $.fileUris;
        this.jarUris = $.jarUris;
        this.mainClass = $.mainClass;
        this.mainFileUri = $.mainFileUri;
        this.properties = $.properties;
        this.pyFileUris = $.pyFileUris;
        this.runtimeVersion = $.runtimeVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoutineSparkOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoutineSparkOptionsArgs $;

        public Builder() {
            $ = new RoutineSparkOptionsArgs();
        }

        public Builder(RoutineSparkOptionsArgs defaults) {
            $ = new RoutineSparkOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archiveUris Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see Apache Spark.
         * 
         * @return builder
         * 
         */
        public Builder archiveUris(@Nullable Output<List<String>> archiveUris) {
            $.archiveUris = archiveUris;
            return this;
        }

        /**
         * @param archiveUris Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see Apache Spark.
         * 
         * @return builder
         * 
         */
        public Builder archiveUris(List<String> archiveUris) {
            return archiveUris(Output.of(archiveUris));
        }

        /**
         * @param archiveUris Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see Apache Spark.
         * 
         * @return builder
         * 
         */
        public Builder archiveUris(String... archiveUris) {
            return archiveUris(List.of(archiveUris));
        }

        /**
         * @param connection Fully qualified name of the user-provided Spark connection object.
         * Format: &#34;projects/{projectId}/locations/{locationId}/connections/{connectionId}&#34;
         * 
         * @return builder
         * 
         */
        public Builder connection(@Nullable Output<String> connection) {
            $.connection = connection;
            return this;
        }

        /**
         * @param connection Fully qualified name of the user-provided Spark connection object.
         * Format: &#34;projects/{projectId}/locations/{locationId}/connections/{connectionId}&#34;
         * 
         * @return builder
         * 
         */
        public Builder connection(String connection) {
            return connection(Output.of(connection));
        }

        /**
         * @param containerImage Custom container image for the runtime environment.
         * 
         * @return builder
         * 
         */
        public Builder containerImage(@Nullable Output<String> containerImage) {
            $.containerImage = containerImage;
            return this;
        }

        /**
         * @param containerImage Custom container image for the runtime environment.
         * 
         * @return builder
         * 
         */
        public Builder containerImage(String containerImage) {
            return containerImage(Output.of(containerImage));
        }

        /**
         * @param fileUris Files to be placed in the working directory of each executor. For more information about Apache Spark, see Apache Spark.
         * 
         * @return builder
         * 
         */
        public Builder fileUris(@Nullable Output<List<String>> fileUris) {
            $.fileUris = fileUris;
            return this;
        }

        /**
         * @param fileUris Files to be placed in the working directory of each executor. For more information about Apache Spark, see Apache Spark.
         * 
         * @return builder
         * 
         */
        public Builder fileUris(List<String> fileUris) {
            return fileUris(Output.of(fileUris));
        }

        /**
         * @param fileUris Files to be placed in the working directory of each executor. For more information about Apache Spark, see Apache Spark.
         * 
         * @return builder
         * 
         */
        public Builder fileUris(String... fileUris) {
            return fileUris(List.of(fileUris));
        }

        /**
         * @param jarUris JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see Apache Spark.
         * 
         * @return builder
         * 
         */
        public Builder jarUris(@Nullable Output<List<String>> jarUris) {
            $.jarUris = jarUris;
            return this;
        }

        /**
         * @param jarUris JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see Apache Spark.
         * 
         * @return builder
         * 
         */
        public Builder jarUris(List<String> jarUris) {
            return jarUris(Output.of(jarUris));
        }

        /**
         * @param jarUris JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see Apache Spark.
         * 
         * @return builder
         * 
         */
        public Builder jarUris(String... jarUris) {
            return jarUris(List.of(jarUris));
        }

        /**
         * @param mainClass The fully qualified name of a class in jarUris, for example, com.example.wordcount.
         * Exactly one of mainClass and mainJarUri field should be set for Java/Scala language type.
         * 
         * @return builder
         * 
         */
        public Builder mainClass(@Nullable Output<String> mainClass) {
            $.mainClass = mainClass;
            return this;
        }

        /**
         * @param mainClass The fully qualified name of a class in jarUris, for example, com.example.wordcount.
         * Exactly one of mainClass and mainJarUri field should be set for Java/Scala language type.
         * 
         * @return builder
         * 
         */
        public Builder mainClass(String mainClass) {
            return mainClass(Output.of(mainClass));
        }

        /**
         * @param mainFileUri The main file/jar URI of the Spark application.
         * Exactly one of the definitionBody field and the mainFileUri field must be set for Python.
         * Exactly one of mainClass and mainFileUri field should be set for Java/Scala language type.
         * 
         * @return builder
         * 
         */
        public Builder mainFileUri(@Nullable Output<String> mainFileUri) {
            $.mainFileUri = mainFileUri;
            return this;
        }

        /**
         * @param mainFileUri The main file/jar URI of the Spark application.
         * Exactly one of the definitionBody field and the mainFileUri field must be set for Python.
         * Exactly one of mainClass and mainFileUri field should be set for Java/Scala language type.
         * 
         * @return builder
         * 
         */
        public Builder mainFileUri(String mainFileUri) {
            return mainFileUri(Output.of(mainFileUri));
        }

        /**
         * @param properties Configuration properties as a set of key/value pairs, which will be passed on to the Spark application.
         * For more information, see Apache Spark and the procedure option list.
         * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Configuration properties as a set of key/value pairs, which will be passed on to the Spark application.
         * For more information, see Apache Spark and the procedure option list.
         * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param pyFileUris Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: .py, .egg, and .zip. For more information about Apache Spark, see Apache Spark.
         * 
         * @return builder
         * 
         */
        public Builder pyFileUris(@Nullable Output<List<String>> pyFileUris) {
            $.pyFileUris = pyFileUris;
            return this;
        }

        /**
         * @param pyFileUris Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: .py, .egg, and .zip. For more information about Apache Spark, see Apache Spark.
         * 
         * @return builder
         * 
         */
        public Builder pyFileUris(List<String> pyFileUris) {
            return pyFileUris(Output.of(pyFileUris));
        }

        /**
         * @param pyFileUris Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: .py, .egg, and .zip. For more information about Apache Spark, see Apache Spark.
         * 
         * @return builder
         * 
         */
        public Builder pyFileUris(String... pyFileUris) {
            return pyFileUris(List.of(pyFileUris));
        }

        /**
         * @param runtimeVersion Runtime version. If not specified, the default runtime version is used.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(@Nullable Output<String> runtimeVersion) {
            $.runtimeVersion = runtimeVersion;
            return this;
        }

        /**
         * @param runtimeVersion Runtime version. If not specified, the default runtime version is used.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(String runtimeVersion) {
            return runtimeVersion(Output.of(runtimeVersion));
        }

        public RoutineSparkOptionsArgs build() {
            return $;
        }
    }

}
