// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.beyondcorp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAppConnectionGateway {
    /**
     * @return AppGateway name in following format: projects/{project_id}/locations/{locationId}/appgateways/{gateway_id}.
     * 
     */
    private String appGateway;
    /**
     * @return Ingress port reserved on the gateways for this AppConnection, if not specified or zero, the default port is 19443.
     * 
     */
    private Integer ingressPort;
    /**
     * @return The type of hosting used by the gateway. Refer to
     * https://cloud.google.com/beyondcorp/docs/reference/rest/v1/projects.locations.appConnections#Type_1
     * for a list of possible values.
     * 
     */
    private String type;
    /**
     * @return Server-defined URI for this resource.
     * 
     */
    private String uri;

    private GetAppConnectionGateway() {}
    /**
     * @return AppGateway name in following format: projects/{project_id}/locations/{locationId}/appgateways/{gateway_id}.
     * 
     */
    public String appGateway() {
        return this.appGateway;
    }
    /**
     * @return Ingress port reserved on the gateways for this AppConnection, if not specified or zero, the default port is 19443.
     * 
     */
    public Integer ingressPort() {
        return this.ingressPort;
    }
    /**
     * @return The type of hosting used by the gateway. Refer to
     * https://cloud.google.com/beyondcorp/docs/reference/rest/v1/projects.locations.appConnections#Type_1
     * for a list of possible values.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Server-defined URI for this resource.
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppConnectionGateway defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appGateway;
        private Integer ingressPort;
        private String type;
        private String uri;
        public Builder() {}
        public Builder(GetAppConnectionGateway defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appGateway = defaults.appGateway;
    	      this.ingressPort = defaults.ingressPort;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder appGateway(String appGateway) {
            if (appGateway == null) {
              throw new MissingRequiredPropertyException("GetAppConnectionGateway", "appGateway");
            }
            this.appGateway = appGateway;
            return this;
        }
        @CustomType.Setter
        public Builder ingressPort(Integer ingressPort) {
            if (ingressPort == null) {
              throw new MissingRequiredPropertyException("GetAppConnectionGateway", "ingressPort");
            }
            this.ingressPort = ingressPort;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAppConnectionGateway", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetAppConnectionGateway", "uri");
            }
            this.uri = uri;
            return this;
        }
        public GetAppConnectionGateway build() {
            final var _resultValue = new GetAppConnectionGateway();
            _resultValue.appGateway = appGateway;
            _resultValue.ingressPort = ingressPort;
            _resultValue.type = type;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
