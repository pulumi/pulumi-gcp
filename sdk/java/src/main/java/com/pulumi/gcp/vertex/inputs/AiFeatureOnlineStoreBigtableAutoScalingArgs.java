// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiFeatureOnlineStoreBigtableAutoScalingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiFeatureOnlineStoreBigtableAutoScalingArgs Empty = new AiFeatureOnlineStoreBigtableAutoScalingArgs();

    /**
     * A percentage of the cluster&#39;s CPU capacity. Can be from 10% to 80%. When a cluster&#39;s CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.
     * 
     */
    @Import(name="cpuUtilizationTarget")
    private @Nullable Output<Integer> cpuUtilizationTarget;

    /**
     * @return A percentage of the cluster&#39;s CPU capacity. Can be from 10% to 80%. When a cluster&#39;s CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.
     * 
     */
    public Optional<Output<Integer>> cpuUtilizationTarget() {
        return Optional.ofNullable(this.cpuUtilizationTarget);
    }

    /**
     * The maximum number of nodes to scale up to. Must be greater than or equal to minNodeCount, and less than or equal to 10 times of &#39;minNodeCount&#39;.
     * 
     */
    @Import(name="maxNodeCount", required=true)
    private Output<Integer> maxNodeCount;

    /**
     * @return The maximum number of nodes to scale up to. Must be greater than or equal to minNodeCount, and less than or equal to 10 times of &#39;minNodeCount&#39;.
     * 
     */
    public Output<Integer> maxNodeCount() {
        return this.maxNodeCount;
    }

    /**
     * The minimum number of nodes to scale down to. Must be greater than or equal to 1.
     * 
     */
    @Import(name="minNodeCount", required=true)
    private Output<Integer> minNodeCount;

    /**
     * @return The minimum number of nodes to scale down to. Must be greater than or equal to 1.
     * 
     */
    public Output<Integer> minNodeCount() {
        return this.minNodeCount;
    }

    private AiFeatureOnlineStoreBigtableAutoScalingArgs() {}

    private AiFeatureOnlineStoreBigtableAutoScalingArgs(AiFeatureOnlineStoreBigtableAutoScalingArgs $) {
        this.cpuUtilizationTarget = $.cpuUtilizationTarget;
        this.maxNodeCount = $.maxNodeCount;
        this.minNodeCount = $.minNodeCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiFeatureOnlineStoreBigtableAutoScalingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiFeatureOnlineStoreBigtableAutoScalingArgs $;

        public Builder() {
            $ = new AiFeatureOnlineStoreBigtableAutoScalingArgs();
        }

        public Builder(AiFeatureOnlineStoreBigtableAutoScalingArgs defaults) {
            $ = new AiFeatureOnlineStoreBigtableAutoScalingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpuUtilizationTarget A percentage of the cluster&#39;s CPU capacity. Can be from 10% to 80%. When a cluster&#39;s CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.
         * 
         * @return builder
         * 
         */
        public Builder cpuUtilizationTarget(@Nullable Output<Integer> cpuUtilizationTarget) {
            $.cpuUtilizationTarget = cpuUtilizationTarget;
            return this;
        }

        /**
         * @param cpuUtilizationTarget A percentage of the cluster&#39;s CPU capacity. Can be from 10% to 80%. When a cluster&#39;s CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.
         * 
         * @return builder
         * 
         */
        public Builder cpuUtilizationTarget(Integer cpuUtilizationTarget) {
            return cpuUtilizationTarget(Output.of(cpuUtilizationTarget));
        }

        /**
         * @param maxNodeCount The maximum number of nodes to scale up to. Must be greater than or equal to minNodeCount, and less than or equal to 10 times of &#39;minNodeCount&#39;.
         * 
         * @return builder
         * 
         */
        public Builder maxNodeCount(Output<Integer> maxNodeCount) {
            $.maxNodeCount = maxNodeCount;
            return this;
        }

        /**
         * @param maxNodeCount The maximum number of nodes to scale up to. Must be greater than or equal to minNodeCount, and less than or equal to 10 times of &#39;minNodeCount&#39;.
         * 
         * @return builder
         * 
         */
        public Builder maxNodeCount(Integer maxNodeCount) {
            return maxNodeCount(Output.of(maxNodeCount));
        }

        /**
         * @param minNodeCount The minimum number of nodes to scale down to. Must be greater than or equal to 1.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCount(Output<Integer> minNodeCount) {
            $.minNodeCount = minNodeCount;
            return this;
        }

        /**
         * @param minNodeCount The minimum number of nodes to scale down to. Must be greater than or equal to 1.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCount(Integer minNodeCount) {
            return minNodeCount(Output.of(minNodeCount));
        }

        public AiFeatureOnlineStoreBigtableAutoScalingArgs build() {
            if ($.maxNodeCount == null) {
                throw new MissingRequiredPropertyException("AiFeatureOnlineStoreBigtableAutoScalingArgs", "maxNodeCount");
            }
            if ($.minNodeCount == null) {
                throw new MissingRequiredPropertyException("AiFeatureOnlineStoreBigtableAutoScalingArgs", "minNodeCount");
            }
            return $;
        }
    }

}
