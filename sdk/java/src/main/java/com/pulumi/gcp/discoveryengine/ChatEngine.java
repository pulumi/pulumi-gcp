// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.discoveryengine.ChatEngineArgs;
import com.pulumi.gcp.discoveryengine.inputs.ChatEngineState;
import com.pulumi.gcp.discoveryengine.outputs.ChatEngineChatEngineConfig;
import com.pulumi.gcp.discoveryengine.outputs.ChatEngineChatEngineMetadata;
import com.pulumi.gcp.discoveryengine.outputs.ChatEngineCommonConfig;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Vertex chat and Conversation Engine Chat type
 * 
 * To get more information about ChatEngine, see:
 * 
 * * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.engines)
 * * How-to Guides
 *     * [Vertex AI Conversation](https://cloud.google.com/dialogflow/cx/docs/concept/generative)
 * 
 * ## Example Usage
 * 
 * ### Discoveryengine Chat Engine Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.discoveryengine.DataStore;
 * import com.pulumi.gcp.discoveryengine.DataStoreArgs;
 * import com.pulumi.gcp.discoveryengine.ChatEngine;
 * import com.pulumi.gcp.discoveryengine.ChatEngineArgs;
 * import com.pulumi.gcp.discoveryengine.inputs.ChatEngineCommonConfigArgs;
 * import com.pulumi.gcp.discoveryengine.inputs.ChatEngineChatEngineConfigArgs;
 * import com.pulumi.gcp.discoveryengine.inputs.ChatEngineChatEngineConfigAgentCreationConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testDataStore = new DataStore("testDataStore", DataStoreArgs.builder()
 *             .location("global")
 *             .dataStoreId("data-store")
 *             .displayName("Structured datastore")
 *             .industryVertical("GENERIC")
 *             .contentConfig("NO_CONTENT")
 *             .solutionTypes("SOLUTION_TYPE_CHAT")
 *             .build());
 * 
 *         var testDataStore2 = new DataStore("testDataStore2", DataStoreArgs.builder()
 *             .location(testDataStore.location())
 *             .dataStoreId("data-store-2")
 *             .displayName("Structured datastore 2")
 *             .industryVertical("GENERIC")
 *             .contentConfig("NO_CONTENT")
 *             .solutionTypes("SOLUTION_TYPE_CHAT")
 *             .build());
 * 
 *         var primary = new ChatEngine("primary", ChatEngineArgs.builder()
 *             .engineId("chat-engine-id")
 *             .collectionId("default_collection")
 *             .location(testDataStore.location())
 *             .displayName("Chat engine")
 *             .industryVertical("GENERIC")
 *             .dataStoreIds(            
 *                 testDataStore.dataStoreId(),
 *                 testDataStore2.dataStoreId())
 *             .commonConfig(ChatEngineCommonConfigArgs.builder()
 *                 .companyName("test-company")
 *                 .build())
 *             .chatEngineConfig(ChatEngineChatEngineConfigArgs.builder()
 *                 .agentCreationConfig(ChatEngineChatEngineConfigAgentCreationConfigArgs.builder()
 *                     .business("test business name")
 *                     .defaultLanguageCode("en")
 *                     .timeZone("America/Los_Angeles")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Discoveryengine Chat Engine Existing Dialogflow Agent
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.discoveryengine.DataStore;
 * import com.pulumi.gcp.discoveryengine.DataStoreArgs;
 * import com.pulumi.gcp.diagflow.CxAgent;
 * import com.pulumi.gcp.diagflow.CxAgentArgs;
 * import com.pulumi.gcp.discoveryengine.ChatEngine;
 * import com.pulumi.gcp.discoveryengine.ChatEngineArgs;
 * import com.pulumi.gcp.discoveryengine.inputs.ChatEngineCommonConfigArgs;
 * import com.pulumi.gcp.discoveryengine.inputs.ChatEngineChatEngineConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testDataStore = new DataStore("testDataStore", DataStoreArgs.builder()
 *             .location("eu")
 *             .dataStoreId("data-store")
 *             .displayName("Structured datastore")
 *             .industryVertical("GENERIC")
 *             .contentConfig("NO_CONTENT")
 *             .solutionTypes("SOLUTION_TYPE_CHAT")
 *             .build());
 * 
 *         var agent = new CxAgent("agent", CxAgentArgs.builder()
 *             .displayName("dialogflowcx-agent")
 *             .location("europe-west3")
 *             .defaultLanguageCode("en")
 *             .timeZone("America/Los_Angeles")
 *             .build());
 * 
 *         var primary = new ChatEngine("primary", ChatEngineArgs.builder()
 *             .engineId("chat-engine-id")
 *             .collectionId("default_collection")
 *             .location(testDataStore.location())
 *             .displayName("Chat engine")
 *             .industryVertical("GENERIC")
 *             .dataStoreIds(testDataStore.dataStoreId())
 *             .commonConfig(ChatEngineCommonConfigArgs.builder()
 *                 .companyName("test-company")
 *                 .build())
 *             .chatEngineConfig(ChatEngineChatEngineConfigArgs.builder()
 *                 .dialogflowAgentToLink(agent.id())
 *                 .allowCrossRegion(true)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ChatEngine can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}`
 * 
 * * `{{project}}/{{location}}/{{collection_id}}/{{engine_id}}`
 * 
 * * `{{location}}/{{collection_id}}/{{engine_id}}`
 * 
 * When using the `pulumi import` command, ChatEngine can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:discoveryengine/chatEngine:ChatEngine default projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:discoveryengine/chatEngine:ChatEngine default {{project}}/{{location}}/{{collection_id}}/{{engine_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:discoveryengine/chatEngine:ChatEngine default {{location}}/{{collection_id}}/{{engine_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:discoveryengine/chatEngine:ChatEngine")
public class ChatEngine extends com.pulumi.resources.CustomResource {
    /**
     * Configurations for a chat Engine.
     * Structure is documented below.
     * 
     */
    @Export(name="chatEngineConfig", refs={ChatEngineChatEngineConfig.class}, tree="[0]")
    private Output<ChatEngineChatEngineConfig> chatEngineConfig;

    /**
     * @return Configurations for a chat Engine.
     * Structure is documented below.
     * 
     */
    public Output<ChatEngineChatEngineConfig> chatEngineConfig() {
        return this.chatEngineConfig;
    }
    /**
     * Additional information of the Chat Engine.
     * Structure is documented below.
     * 
     */
    @Export(name="chatEngineMetadatas", refs={List.class,ChatEngineChatEngineMetadata.class}, tree="[0,1]")
    private Output<List<ChatEngineChatEngineMetadata>> chatEngineMetadatas;

    /**
     * @return Additional information of the Chat Engine.
     * Structure is documented below.
     * 
     */
    public Output<List<ChatEngineChatEngineMetadata>> chatEngineMetadatas() {
        return this.chatEngineMetadatas;
    }
    /**
     * The collection ID.
     * 
     */
    @Export(name="collectionId", refs={String.class}, tree="[0]")
    private Output<String> collectionId;

    /**
     * @return The collection ID.
     * 
     */
    public Output<String> collectionId() {
        return this.collectionId;
    }
    /**
     * Common config spec that specifies the metadata of the engine.
     * Structure is documented below.
     * 
     */
    @Export(name="commonConfig", refs={ChatEngineCommonConfig.class}, tree="[0]")
    private Output</* @Nullable */ ChatEngineCommonConfig> commonConfig;

    /**
     * @return Common config spec that specifies the metadata of the engine.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ChatEngineCommonConfig>> commonConfig() {
        return Codegen.optional(this.commonConfig);
    }
    /**
     * Timestamp the Engine was created at.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Timestamp the Engine was created at.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
     * 
     */
    @Export(name="dataStoreIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> dataStoreIds;

    /**
     * @return The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
     * 
     */
    public Output<List<String>> dataStoreIds() {
        return this.dataStoreIds;
    }
    /**
     * The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The ID to use for chat engine.
     * 
     */
    @Export(name="engineId", refs={String.class}, tree="[0]")
    private Output<String> engineId;

    /**
     * @return The ID to use for chat engine.
     * 
     */
    public Output<String> engineId() {
        return this.engineId;
    }
    /**
     * The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked to the engine.
     * Default value is `GENERIC`.
     * Possible values are: `GENERIC`.
     * 
     */
    @Export(name="industryVertical", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> industryVertical;

    /**
     * @return The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked to the engine.
     * Default value is `GENERIC`.
     * Possible values are: `GENERIC`.
     * 
     */
    public Output<Optional<String>> industryVertical() {
        return Codegen.optional(this.industryVertical);
    }
    /**
     * Location.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Location.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The unique full resource name of the chat engine. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The unique full resource name of the chat engine. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Timestamp the Engine was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Timestamp the Engine was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ChatEngine(java.lang.String name) {
        this(name, ChatEngineArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ChatEngine(java.lang.String name, ChatEngineArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ChatEngine(java.lang.String name, ChatEngineArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:discoveryengine/chatEngine:ChatEngine", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ChatEngine(java.lang.String name, Output<java.lang.String> id, @Nullable ChatEngineState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:discoveryengine/chatEngine:ChatEngine", name, state, makeResourceOptions(options, id), false);
    }

    private static ChatEngineArgs makeArgs(ChatEngineArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ChatEngineArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ChatEngine get(java.lang.String name, Output<java.lang.String> id, @Nullable ChatEngineState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ChatEngine(name, id, state, options);
    }
}
