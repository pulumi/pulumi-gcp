// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryGitRemoteSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryGitRemoteSettingsArgs Empty = new RepositoryGitRemoteSettingsArgs();

    /**
     * The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format projects/*{@literal /}secrets/*{@literal /}versions/*.
     * 
     */
    @Import(name="authenticationTokenSecretVersion", required=true)
    private Output<String> authenticationTokenSecretVersion;

    /**
     * @return The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format projects/*{@literal /}secrets/*{@literal /}versions/*.
     * 
     */
    public Output<String> authenticationTokenSecretVersion() {
        return this.authenticationTokenSecretVersion;
    }

    /**
     * The Git remote&#39;s default branch name.
     * 
     */
    @Import(name="defaultBranch", required=true)
    private Output<String> defaultBranch;

    /**
     * @return The Git remote&#39;s default branch name.
     * 
     */
    public Output<String> defaultBranch() {
        return this.defaultBranch;
    }

    /**
     * Indicates the status of the Git access token. https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories#TokenStatus
     * 
     */
    @Import(name="tokenStatus")
    private @Nullable Output<String> tokenStatus;

    /**
     * @return Indicates the status of the Git access token. https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories#TokenStatus
     * 
     */
    public Optional<Output<String>> tokenStatus() {
        return Optional.ofNullable(this.tokenStatus);
    }

    /**
     * The Git remote&#39;s URL.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The Git remote&#39;s URL.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private RepositoryGitRemoteSettingsArgs() {}

    private RepositoryGitRemoteSettingsArgs(RepositoryGitRemoteSettingsArgs $) {
        this.authenticationTokenSecretVersion = $.authenticationTokenSecretVersion;
        this.defaultBranch = $.defaultBranch;
        this.tokenStatus = $.tokenStatus;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryGitRemoteSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryGitRemoteSettingsArgs $;

        public Builder() {
            $ = new RepositoryGitRemoteSettingsArgs();
        }

        public Builder(RepositoryGitRemoteSettingsArgs defaults) {
            $ = new RepositoryGitRemoteSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationTokenSecretVersion The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format projects/*{@literal /}secrets/*{@literal /}versions/*.
         * 
         * @return builder
         * 
         */
        public Builder authenticationTokenSecretVersion(Output<String> authenticationTokenSecretVersion) {
            $.authenticationTokenSecretVersion = authenticationTokenSecretVersion;
            return this;
        }

        /**
         * @param authenticationTokenSecretVersion The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format projects/*{@literal /}secrets/*{@literal /}versions/*.
         * 
         * @return builder
         * 
         */
        public Builder authenticationTokenSecretVersion(String authenticationTokenSecretVersion) {
            return authenticationTokenSecretVersion(Output.of(authenticationTokenSecretVersion));
        }

        /**
         * @param defaultBranch The Git remote&#39;s default branch name.
         * 
         * @return builder
         * 
         */
        public Builder defaultBranch(Output<String> defaultBranch) {
            $.defaultBranch = defaultBranch;
            return this;
        }

        /**
         * @param defaultBranch The Git remote&#39;s default branch name.
         * 
         * @return builder
         * 
         */
        public Builder defaultBranch(String defaultBranch) {
            return defaultBranch(Output.of(defaultBranch));
        }

        /**
         * @param tokenStatus Indicates the status of the Git access token. https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories#TokenStatus
         * 
         * @return builder
         * 
         */
        public Builder tokenStatus(@Nullable Output<String> tokenStatus) {
            $.tokenStatus = tokenStatus;
            return this;
        }

        /**
         * @param tokenStatus Indicates the status of the Git access token. https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories#TokenStatus
         * 
         * @return builder
         * 
         */
        public Builder tokenStatus(String tokenStatus) {
            return tokenStatus(Output.of(tokenStatus));
        }

        /**
         * @param url The Git remote&#39;s URL.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The Git remote&#39;s URL.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public RepositoryGitRemoteSettingsArgs build() {
            $.authenticationTokenSecretVersion = Objects.requireNonNull($.authenticationTokenSecretVersion, "expected parameter 'authenticationTokenSecretVersion' to be non-null");
            $.defaultBranch = Objects.requireNonNull($.defaultBranch, "expected parameter 'defaultBranch' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
