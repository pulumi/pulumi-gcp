// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.RouterRoutePolicyTermArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouterRoutePolicyState extends com.pulumi.resources.ResourceArgs {

    public static final RouterRoutePolicyState Empty = new RouterRoutePolicyState();

    /**
     * The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * Name of the route policy. This policy&#39;s name, which must be a resource ID segment and unique within all policies owned by the Router
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the route policy. This policy&#39;s name, which must be a resource ID segment and unique within all policies owned by the Router
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Region where the router and NAT reside.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where the router and NAT reside.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The name of the Cloud Router in which this route policy will be configured.
     * 
     */
    @Import(name="router")
    private @Nullable Output<String> router;

    /**
     * @return The name of the Cloud Router in which this route policy will be configured.
     * 
     */
    public Optional<Output<String>> router() {
        return Optional.ofNullable(this.router);
    }

    /**
     * List of terms (the order in the list is not important, they are evaluated in order of priority).
     * Structure is documented below.
     * 
     */
    @Import(name="terms")
    private @Nullable Output<List<RouterRoutePolicyTermArgs>> terms;

    /**
     * @return List of terms (the order in the list is not important, they are evaluated in order of priority).
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RouterRoutePolicyTermArgs>>> terms() {
        return Optional.ofNullable(this.terms);
    }

    /**
     * This is policy&#39;s type, which is one of IMPORT or EXPORT Possible values: [&#34;ROUTE_POLICY_TYPE_IMPORT&#34;,
     * &#34;ROUTE_POLICY_TYPE_EXPORT&#34;]
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return This is policy&#39;s type, which is one of IMPORT or EXPORT Possible values: [&#34;ROUTE_POLICY_TYPE_IMPORT&#34;,
     * &#34;ROUTE_POLICY_TYPE_EXPORT&#34;]
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RouterRoutePolicyState() {}

    private RouterRoutePolicyState(RouterRoutePolicyState $) {
        this.fingerprint = $.fingerprint;
        this.name = $.name;
        this.project = $.project;
        this.region = $.region;
        this.router = $.router;
        this.terms = $.terms;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterRoutePolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterRoutePolicyState $;

        public Builder() {
            $ = new RouterRoutePolicyState();
        }

        public Builder(RouterRoutePolicyState defaults) {
            $ = new RouterRoutePolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param fingerprint The fingerprint used for optimistic locking of this resource.  Used
         * internally during updates.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint The fingerprint used for optimistic locking of this resource.  Used
         * internally during updates.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param name Name of the route policy. This policy&#39;s name, which must be a resource ID segment and unique within all policies owned by the Router
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the route policy. This policy&#39;s name, which must be a resource ID segment and unique within all policies owned by the Router
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region Region where the router and NAT reside.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where the router and NAT reside.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param router The name of the Cloud Router in which this route policy will be configured.
         * 
         * @return builder
         * 
         */
        public Builder router(@Nullable Output<String> router) {
            $.router = router;
            return this;
        }

        /**
         * @param router The name of the Cloud Router in which this route policy will be configured.
         * 
         * @return builder
         * 
         */
        public Builder router(String router) {
            return router(Output.of(router));
        }

        /**
         * @param terms List of terms (the order in the list is not important, they are evaluated in order of priority).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder terms(@Nullable Output<List<RouterRoutePolicyTermArgs>> terms) {
            $.terms = terms;
            return this;
        }

        /**
         * @param terms List of terms (the order in the list is not important, they are evaluated in order of priority).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder terms(List<RouterRoutePolicyTermArgs> terms) {
            return terms(Output.of(terms));
        }

        /**
         * @param terms List of terms (the order in the list is not important, they are evaluated in order of priority).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder terms(RouterRoutePolicyTermArgs... terms) {
            return terms(List.of(terms));
        }

        /**
         * @param type This is policy&#39;s type, which is one of IMPORT or EXPORT Possible values: [&#34;ROUTE_POLICY_TYPE_IMPORT&#34;,
         * &#34;ROUTE_POLICY_TYPE_EXPORT&#34;]
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type This is policy&#39;s type, which is one of IMPORT or EXPORT Possible values: [&#34;ROUTE_POLICY_TYPE_IMPORT&#34;,
         * &#34;ROUTE_POLICY_TYPE_EXPORT&#34;]
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RouterRoutePolicyState build() {
            return $;
        }
    }

}
