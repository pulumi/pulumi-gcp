// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigCloudrunConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigConfigConnectorConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigDnsCacheConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigGcePersistentDiskCsiDriverConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigGcpFilestoreCsiDriverConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigGcsFuseCsiDriverConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigGkeBackupAgentConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigHorizontalPodAutoscaling;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigHttpLoadBalancing;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigIstioConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigKalmConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigNetworkPolicyConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigParallelstoreCsiDriverConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigRayOperatorConfig;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfigStatefulHaConfig;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterAddonsConfig {
    /**
     * @return The status of the CloudRun addon. It is disabled by default. Set disabled = false to enable.
     * 
     */
    private List<GetClusterAddonsConfigCloudrunConfig> cloudrunConfigs;
    /**
     * @return The of the Config Connector addon.
     * 
     */
    private List<GetClusterAddonsConfigConfigConnectorConfig> configConnectorConfigs;
    /**
     * @return The status of the NodeLocal DNSCache addon. It is disabled by default. Set enabled = true to enable.
     * 
     */
    private List<GetClusterAddonsConfigDnsCacheConfig> dnsCacheConfigs;
    /**
     * @return Whether this cluster should enable the Google Compute Engine Persistent Disk Container Storage Interface (CSI) Driver. Set enabled = true to enable. The Compute Engine persistent disk CSI Driver is enabled by default on newly created clusters for the following versions: Linux clusters: GKE version 1.18.10-gke.2100 or later, or 1.19.3-gke.2100 or later.
     * 
     */
    private List<GetClusterAddonsConfigGcePersistentDiskCsiDriverConfig> gcePersistentDiskCsiDriverConfigs;
    /**
     * @return The status of the Filestore CSI driver addon, which allows the usage of filestore instance as volumes. Defaults to disabled for Standard clusters; set enabled = true to enable. It is enabled by default for Autopilot clusters; set enabled = true to enable it explicitly.
     * 
     */
    private List<GetClusterAddonsConfigGcpFilestoreCsiDriverConfig> gcpFilestoreCsiDriverConfigs;
    /**
     * @return The status of the GCS Fuse CSI driver addon, which allows the usage of gcs bucket as volumes. Defaults to disabled; set enabled = true to enable.
     * 
     */
    private List<GetClusterAddonsConfigGcsFuseCsiDriverConfig> gcsFuseCsiDriverConfigs;
    /**
     * @return The status of the Backup for GKE Agent addon. It is disabled by default. Set enabled = true to enable.
     * 
     */
    private List<GetClusterAddonsConfigGkeBackupAgentConfig> gkeBackupAgentConfigs;
    /**
     * @return The status of the Horizontal Pod Autoscaling addon, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods. It ensures that a Heapster pod is running in the cluster, which is also used by the Cloud Monitoring service. It is enabled by default; set disabled = true to disable.
     * 
     */
    private List<GetClusterAddonsConfigHorizontalPodAutoscaling> horizontalPodAutoscalings;
    /**
     * @return The status of the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster. It is enabled by default; set disabled = true to disable.
     * 
     */
    private List<GetClusterAddonsConfigHttpLoadBalancing> httpLoadBalancings;
    /**
     * @return The status of the Istio addon.
     * 
     */
    private List<GetClusterAddonsConfigIstioConfig> istioConfigs;
    /**
     * @return Configuration for the KALM addon, which manages the lifecycle of k8s. It is disabled by default; Set enabled = true to enable.
     * 
     */
    private List<GetClusterAddonsConfigKalmConfig> kalmConfigs;
    /**
     * @return Whether we should enable the network policy addon for the master. This must be enabled in order to enable network policy for the nodes. To enable this, you must also define a network_policy block, otherwise nothing will happen. It can only be disabled if the nodes already do not have network policies enabled. Defaults to disabled; set disabled = false to enable.
     * 
     */
    private List<GetClusterAddonsConfigNetworkPolicyConfig> networkPolicyConfigs;
    /**
     * @return The status of the Parallelstore CSI driver addon, which allows the usage of Parallelstore instances as volumes. Defaults to disabled; set enabled = true to enable.
     * 
     */
    private List<GetClusterAddonsConfigParallelstoreCsiDriverConfig> parallelstoreCsiDriverConfigs;
    /**
     * @return The status of the Ray Operator addon, which enabled management of Ray AI/ML jobs on GKE. Defaults to disabled; set enabled = true to enable.
     * 
     */
    private List<GetClusterAddonsConfigRayOperatorConfig> rayOperatorConfigs;
    /**
     * @return The status of the Stateful HA addon, which provides automatic configurable failover for stateful applications. Defaults to disabled; set enabled = true to enable.
     * 
     */
    private List<GetClusterAddonsConfigStatefulHaConfig> statefulHaConfigs;

    private GetClusterAddonsConfig() {}
    /**
     * @return The status of the CloudRun addon. It is disabled by default. Set disabled = false to enable.
     * 
     */
    public List<GetClusterAddonsConfigCloudrunConfig> cloudrunConfigs() {
        return this.cloudrunConfigs;
    }
    /**
     * @return The of the Config Connector addon.
     * 
     */
    public List<GetClusterAddonsConfigConfigConnectorConfig> configConnectorConfigs() {
        return this.configConnectorConfigs;
    }
    /**
     * @return The status of the NodeLocal DNSCache addon. It is disabled by default. Set enabled = true to enable.
     * 
     */
    public List<GetClusterAddonsConfigDnsCacheConfig> dnsCacheConfigs() {
        return this.dnsCacheConfigs;
    }
    /**
     * @return Whether this cluster should enable the Google Compute Engine Persistent Disk Container Storage Interface (CSI) Driver. Set enabled = true to enable. The Compute Engine persistent disk CSI Driver is enabled by default on newly created clusters for the following versions: Linux clusters: GKE version 1.18.10-gke.2100 or later, or 1.19.3-gke.2100 or later.
     * 
     */
    public List<GetClusterAddonsConfigGcePersistentDiskCsiDriverConfig> gcePersistentDiskCsiDriverConfigs() {
        return this.gcePersistentDiskCsiDriverConfigs;
    }
    /**
     * @return The status of the Filestore CSI driver addon, which allows the usage of filestore instance as volumes. Defaults to disabled for Standard clusters; set enabled = true to enable. It is enabled by default for Autopilot clusters; set enabled = true to enable it explicitly.
     * 
     */
    public List<GetClusterAddonsConfigGcpFilestoreCsiDriverConfig> gcpFilestoreCsiDriverConfigs() {
        return this.gcpFilestoreCsiDriverConfigs;
    }
    /**
     * @return The status of the GCS Fuse CSI driver addon, which allows the usage of gcs bucket as volumes. Defaults to disabled; set enabled = true to enable.
     * 
     */
    public List<GetClusterAddonsConfigGcsFuseCsiDriverConfig> gcsFuseCsiDriverConfigs() {
        return this.gcsFuseCsiDriverConfigs;
    }
    /**
     * @return The status of the Backup for GKE Agent addon. It is disabled by default. Set enabled = true to enable.
     * 
     */
    public List<GetClusterAddonsConfigGkeBackupAgentConfig> gkeBackupAgentConfigs() {
        return this.gkeBackupAgentConfigs;
    }
    /**
     * @return The status of the Horizontal Pod Autoscaling addon, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods. It ensures that a Heapster pod is running in the cluster, which is also used by the Cloud Monitoring service. It is enabled by default; set disabled = true to disable.
     * 
     */
    public List<GetClusterAddonsConfigHorizontalPodAutoscaling> horizontalPodAutoscalings() {
        return this.horizontalPodAutoscalings;
    }
    /**
     * @return The status of the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster. It is enabled by default; set disabled = true to disable.
     * 
     */
    public List<GetClusterAddonsConfigHttpLoadBalancing> httpLoadBalancings() {
        return this.httpLoadBalancings;
    }
    /**
     * @return The status of the Istio addon.
     * 
     */
    public List<GetClusterAddonsConfigIstioConfig> istioConfigs() {
        return this.istioConfigs;
    }
    /**
     * @return Configuration for the KALM addon, which manages the lifecycle of k8s. It is disabled by default; Set enabled = true to enable.
     * 
     */
    public List<GetClusterAddonsConfigKalmConfig> kalmConfigs() {
        return this.kalmConfigs;
    }
    /**
     * @return Whether we should enable the network policy addon for the master. This must be enabled in order to enable network policy for the nodes. To enable this, you must also define a network_policy block, otherwise nothing will happen. It can only be disabled if the nodes already do not have network policies enabled. Defaults to disabled; set disabled = false to enable.
     * 
     */
    public List<GetClusterAddonsConfigNetworkPolicyConfig> networkPolicyConfigs() {
        return this.networkPolicyConfigs;
    }
    /**
     * @return The status of the Parallelstore CSI driver addon, which allows the usage of Parallelstore instances as volumes. Defaults to disabled; set enabled = true to enable.
     * 
     */
    public List<GetClusterAddonsConfigParallelstoreCsiDriverConfig> parallelstoreCsiDriverConfigs() {
        return this.parallelstoreCsiDriverConfigs;
    }
    /**
     * @return The status of the Ray Operator addon, which enabled management of Ray AI/ML jobs on GKE. Defaults to disabled; set enabled = true to enable.
     * 
     */
    public List<GetClusterAddonsConfigRayOperatorConfig> rayOperatorConfigs() {
        return this.rayOperatorConfigs;
    }
    /**
     * @return The status of the Stateful HA addon, which provides automatic configurable failover for stateful applications. Defaults to disabled; set enabled = true to enable.
     * 
     */
    public List<GetClusterAddonsConfigStatefulHaConfig> statefulHaConfigs() {
        return this.statefulHaConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterAddonsConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetClusterAddonsConfigCloudrunConfig> cloudrunConfigs;
        private List<GetClusterAddonsConfigConfigConnectorConfig> configConnectorConfigs;
        private List<GetClusterAddonsConfigDnsCacheConfig> dnsCacheConfigs;
        private List<GetClusterAddonsConfigGcePersistentDiskCsiDriverConfig> gcePersistentDiskCsiDriverConfigs;
        private List<GetClusterAddonsConfigGcpFilestoreCsiDriverConfig> gcpFilestoreCsiDriverConfigs;
        private List<GetClusterAddonsConfigGcsFuseCsiDriverConfig> gcsFuseCsiDriverConfigs;
        private List<GetClusterAddonsConfigGkeBackupAgentConfig> gkeBackupAgentConfigs;
        private List<GetClusterAddonsConfigHorizontalPodAutoscaling> horizontalPodAutoscalings;
        private List<GetClusterAddonsConfigHttpLoadBalancing> httpLoadBalancings;
        private List<GetClusterAddonsConfigIstioConfig> istioConfigs;
        private List<GetClusterAddonsConfigKalmConfig> kalmConfigs;
        private List<GetClusterAddonsConfigNetworkPolicyConfig> networkPolicyConfigs;
        private List<GetClusterAddonsConfigParallelstoreCsiDriverConfig> parallelstoreCsiDriverConfigs;
        private List<GetClusterAddonsConfigRayOperatorConfig> rayOperatorConfigs;
        private List<GetClusterAddonsConfigStatefulHaConfig> statefulHaConfigs;
        public Builder() {}
        public Builder(GetClusterAddonsConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudrunConfigs = defaults.cloudrunConfigs;
    	      this.configConnectorConfigs = defaults.configConnectorConfigs;
    	      this.dnsCacheConfigs = defaults.dnsCacheConfigs;
    	      this.gcePersistentDiskCsiDriverConfigs = defaults.gcePersistentDiskCsiDriverConfigs;
    	      this.gcpFilestoreCsiDriverConfigs = defaults.gcpFilestoreCsiDriverConfigs;
    	      this.gcsFuseCsiDriverConfigs = defaults.gcsFuseCsiDriverConfigs;
    	      this.gkeBackupAgentConfigs = defaults.gkeBackupAgentConfigs;
    	      this.horizontalPodAutoscalings = defaults.horizontalPodAutoscalings;
    	      this.httpLoadBalancings = defaults.httpLoadBalancings;
    	      this.istioConfigs = defaults.istioConfigs;
    	      this.kalmConfigs = defaults.kalmConfigs;
    	      this.networkPolicyConfigs = defaults.networkPolicyConfigs;
    	      this.parallelstoreCsiDriverConfigs = defaults.parallelstoreCsiDriverConfigs;
    	      this.rayOperatorConfigs = defaults.rayOperatorConfigs;
    	      this.statefulHaConfigs = defaults.statefulHaConfigs;
        }

        @CustomType.Setter
        public Builder cloudrunConfigs(List<GetClusterAddonsConfigCloudrunConfig> cloudrunConfigs) {
            if (cloudrunConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "cloudrunConfigs");
            }
            this.cloudrunConfigs = cloudrunConfigs;
            return this;
        }
        public Builder cloudrunConfigs(GetClusterAddonsConfigCloudrunConfig... cloudrunConfigs) {
            return cloudrunConfigs(List.of(cloudrunConfigs));
        }
        @CustomType.Setter
        public Builder configConnectorConfigs(List<GetClusterAddonsConfigConfigConnectorConfig> configConnectorConfigs) {
            if (configConnectorConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "configConnectorConfigs");
            }
            this.configConnectorConfigs = configConnectorConfigs;
            return this;
        }
        public Builder configConnectorConfigs(GetClusterAddonsConfigConfigConnectorConfig... configConnectorConfigs) {
            return configConnectorConfigs(List.of(configConnectorConfigs));
        }
        @CustomType.Setter
        public Builder dnsCacheConfigs(List<GetClusterAddonsConfigDnsCacheConfig> dnsCacheConfigs) {
            if (dnsCacheConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "dnsCacheConfigs");
            }
            this.dnsCacheConfigs = dnsCacheConfigs;
            return this;
        }
        public Builder dnsCacheConfigs(GetClusterAddonsConfigDnsCacheConfig... dnsCacheConfigs) {
            return dnsCacheConfigs(List.of(dnsCacheConfigs));
        }
        @CustomType.Setter
        public Builder gcePersistentDiskCsiDriverConfigs(List<GetClusterAddonsConfigGcePersistentDiskCsiDriverConfig> gcePersistentDiskCsiDriverConfigs) {
            if (gcePersistentDiskCsiDriverConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "gcePersistentDiskCsiDriverConfigs");
            }
            this.gcePersistentDiskCsiDriverConfigs = gcePersistentDiskCsiDriverConfigs;
            return this;
        }
        public Builder gcePersistentDiskCsiDriverConfigs(GetClusterAddonsConfigGcePersistentDiskCsiDriverConfig... gcePersistentDiskCsiDriverConfigs) {
            return gcePersistentDiskCsiDriverConfigs(List.of(gcePersistentDiskCsiDriverConfigs));
        }
        @CustomType.Setter
        public Builder gcpFilestoreCsiDriverConfigs(List<GetClusterAddonsConfigGcpFilestoreCsiDriverConfig> gcpFilestoreCsiDriverConfigs) {
            if (gcpFilestoreCsiDriverConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "gcpFilestoreCsiDriverConfigs");
            }
            this.gcpFilestoreCsiDriverConfigs = gcpFilestoreCsiDriverConfigs;
            return this;
        }
        public Builder gcpFilestoreCsiDriverConfigs(GetClusterAddonsConfigGcpFilestoreCsiDriverConfig... gcpFilestoreCsiDriverConfigs) {
            return gcpFilestoreCsiDriverConfigs(List.of(gcpFilestoreCsiDriverConfigs));
        }
        @CustomType.Setter
        public Builder gcsFuseCsiDriverConfigs(List<GetClusterAddonsConfigGcsFuseCsiDriverConfig> gcsFuseCsiDriverConfigs) {
            if (gcsFuseCsiDriverConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "gcsFuseCsiDriverConfigs");
            }
            this.gcsFuseCsiDriverConfigs = gcsFuseCsiDriverConfigs;
            return this;
        }
        public Builder gcsFuseCsiDriverConfigs(GetClusterAddonsConfigGcsFuseCsiDriverConfig... gcsFuseCsiDriverConfigs) {
            return gcsFuseCsiDriverConfigs(List.of(gcsFuseCsiDriverConfigs));
        }
        @CustomType.Setter
        public Builder gkeBackupAgentConfigs(List<GetClusterAddonsConfigGkeBackupAgentConfig> gkeBackupAgentConfigs) {
            if (gkeBackupAgentConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "gkeBackupAgentConfigs");
            }
            this.gkeBackupAgentConfigs = gkeBackupAgentConfigs;
            return this;
        }
        public Builder gkeBackupAgentConfigs(GetClusterAddonsConfigGkeBackupAgentConfig... gkeBackupAgentConfigs) {
            return gkeBackupAgentConfigs(List.of(gkeBackupAgentConfigs));
        }
        @CustomType.Setter
        public Builder horizontalPodAutoscalings(List<GetClusterAddonsConfigHorizontalPodAutoscaling> horizontalPodAutoscalings) {
            if (horizontalPodAutoscalings == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "horizontalPodAutoscalings");
            }
            this.horizontalPodAutoscalings = horizontalPodAutoscalings;
            return this;
        }
        public Builder horizontalPodAutoscalings(GetClusterAddonsConfigHorizontalPodAutoscaling... horizontalPodAutoscalings) {
            return horizontalPodAutoscalings(List.of(horizontalPodAutoscalings));
        }
        @CustomType.Setter
        public Builder httpLoadBalancings(List<GetClusterAddonsConfigHttpLoadBalancing> httpLoadBalancings) {
            if (httpLoadBalancings == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "httpLoadBalancings");
            }
            this.httpLoadBalancings = httpLoadBalancings;
            return this;
        }
        public Builder httpLoadBalancings(GetClusterAddonsConfigHttpLoadBalancing... httpLoadBalancings) {
            return httpLoadBalancings(List.of(httpLoadBalancings));
        }
        @CustomType.Setter
        public Builder istioConfigs(List<GetClusterAddonsConfigIstioConfig> istioConfigs) {
            if (istioConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "istioConfigs");
            }
            this.istioConfigs = istioConfigs;
            return this;
        }
        public Builder istioConfigs(GetClusterAddonsConfigIstioConfig... istioConfigs) {
            return istioConfigs(List.of(istioConfigs));
        }
        @CustomType.Setter
        public Builder kalmConfigs(List<GetClusterAddonsConfigKalmConfig> kalmConfigs) {
            if (kalmConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "kalmConfigs");
            }
            this.kalmConfigs = kalmConfigs;
            return this;
        }
        public Builder kalmConfigs(GetClusterAddonsConfigKalmConfig... kalmConfigs) {
            return kalmConfigs(List.of(kalmConfigs));
        }
        @CustomType.Setter
        public Builder networkPolicyConfigs(List<GetClusterAddonsConfigNetworkPolicyConfig> networkPolicyConfigs) {
            if (networkPolicyConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "networkPolicyConfigs");
            }
            this.networkPolicyConfigs = networkPolicyConfigs;
            return this;
        }
        public Builder networkPolicyConfigs(GetClusterAddonsConfigNetworkPolicyConfig... networkPolicyConfigs) {
            return networkPolicyConfigs(List.of(networkPolicyConfigs));
        }
        @CustomType.Setter
        public Builder parallelstoreCsiDriverConfigs(List<GetClusterAddonsConfigParallelstoreCsiDriverConfig> parallelstoreCsiDriverConfigs) {
            if (parallelstoreCsiDriverConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "parallelstoreCsiDriverConfigs");
            }
            this.parallelstoreCsiDriverConfigs = parallelstoreCsiDriverConfigs;
            return this;
        }
        public Builder parallelstoreCsiDriverConfigs(GetClusterAddonsConfigParallelstoreCsiDriverConfig... parallelstoreCsiDriverConfigs) {
            return parallelstoreCsiDriverConfigs(List.of(parallelstoreCsiDriverConfigs));
        }
        @CustomType.Setter
        public Builder rayOperatorConfigs(List<GetClusterAddonsConfigRayOperatorConfig> rayOperatorConfigs) {
            if (rayOperatorConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "rayOperatorConfigs");
            }
            this.rayOperatorConfigs = rayOperatorConfigs;
            return this;
        }
        public Builder rayOperatorConfigs(GetClusterAddonsConfigRayOperatorConfig... rayOperatorConfigs) {
            return rayOperatorConfigs(List.of(rayOperatorConfigs));
        }
        @CustomType.Setter
        public Builder statefulHaConfigs(List<GetClusterAddonsConfigStatefulHaConfig> statefulHaConfigs) {
            if (statefulHaConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfig", "statefulHaConfigs");
            }
            this.statefulHaConfigs = statefulHaConfigs;
            return this;
        }
        public Builder statefulHaConfigs(GetClusterAddonsConfigStatefulHaConfig... statefulHaConfigs) {
            return statefulHaConfigs(List.of(statefulHaConfigs));
        }
        public GetClusterAddonsConfig build() {
            final var _resultValue = new GetClusterAddonsConfig();
            _resultValue.cloudrunConfigs = cloudrunConfigs;
            _resultValue.configConnectorConfigs = configConnectorConfigs;
            _resultValue.dnsCacheConfigs = dnsCacheConfigs;
            _resultValue.gcePersistentDiskCsiDriverConfigs = gcePersistentDiskCsiDriverConfigs;
            _resultValue.gcpFilestoreCsiDriverConfigs = gcpFilestoreCsiDriverConfigs;
            _resultValue.gcsFuseCsiDriverConfigs = gcsFuseCsiDriverConfigs;
            _resultValue.gkeBackupAgentConfigs = gkeBackupAgentConfigs;
            _resultValue.horizontalPodAutoscalings = horizontalPodAutoscalings;
            _resultValue.httpLoadBalancings = httpLoadBalancings;
            _resultValue.istioConfigs = istioConfigs;
            _resultValue.kalmConfigs = kalmConfigs;
            _resultValue.networkPolicyConfigs = networkPolicyConfigs;
            _resultValue.parallelstoreCsiDriverConfigs = parallelstoreCsiDriverConfigs;
            _resultValue.rayOperatorConfigs = rayOperatorConfigs;
            _resultValue.statefulHaConfigs = statefulHaConfigs;
            return _resultValue;
        }
    }
}
