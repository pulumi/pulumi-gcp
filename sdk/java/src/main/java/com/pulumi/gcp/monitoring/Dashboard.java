// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.monitoring.DashboardArgs;
import com.pulumi.gcp.monitoring.inputs.DashboardState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A Google Stackdriver dashboard. Dashboards define the content and layout of pages in the Stackdriver web application.
 * 
 * To get more information about Dashboards, see:
 * 
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v1/projects.dashboards)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/monitoring/dashboards)
 * 
 * ## Example Usage
 * ### Monitoring Dashboard Basic
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var dashboard = new Dashboard(&#34;dashboard&#34;, DashboardArgs.builder()        
 *             .dashboardJson(&#34;&#34;&#34;
 * {
 *   &#34;displayName&#34;: &#34;Demo Dashboard&#34;,
 *   &#34;gridLayout&#34;: {
 *     &#34;widgets&#34;: [
 *       {
 *         &#34;blank&#34;: {}
 *       }
 *     ]
 *   }
 * }
 * 
 * 
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Monitoring Dashboard GridLayout
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var dashboard = new Dashboard(&#34;dashboard&#34;, DashboardArgs.builder()        
 *             .dashboardJson(&#34;&#34;&#34;
 * {
 *   &#34;displayName&#34;: &#34;Grid Layout Example&#34;,
 *   &#34;gridLayout&#34;: {
 *     &#34;columns&#34;: &#34;2&#34;,
 *     &#34;widgets&#34;: [
 *       {
 *         &#34;title&#34;: &#34;Widget 1&#34;,
 *         &#34;xyChart&#34;: {
 *           &#34;dataSets&#34;: [{
 *             &#34;timeSeriesQuery&#34;: {
 *               &#34;timeSeriesFilter&#34;: {
 *                 &#34;filter&#34;: &#34;metric.type=\&#34;agent.googleapis.com/nginx/connections/accepted_count\&#34;&#34;,
 *                 &#34;aggregation&#34;: {
 *                   &#34;perSeriesAligner&#34;: &#34;ALIGN_RATE&#34;
 *                 }
 *               },
 *               &#34;unitOverride&#34;: &#34;1&#34;
 *             },
 *             &#34;plotType&#34;: &#34;LINE&#34;
 *           }],
 *           &#34;timeshiftDuration&#34;: &#34;0s&#34;,
 *           &#34;yAxis&#34;: {
 *             &#34;label&#34;: &#34;y1Axis&#34;,
 *             &#34;scale&#34;: &#34;LINEAR&#34;
 *           }
 *         }
 *       },
 *       {
 *         &#34;text&#34;: {
 *           &#34;content&#34;: &#34;Widget 2&#34;,
 *           &#34;format&#34;: &#34;MARKDOWN&#34;
 *         }
 *       },
 *       {
 *         &#34;title&#34;: &#34;Widget 3&#34;,
 *         &#34;xyChart&#34;: {
 *           &#34;dataSets&#34;: [{
 *             &#34;timeSeriesQuery&#34;: {
 *               &#34;timeSeriesFilter&#34;: {
 *                 &#34;filter&#34;: &#34;metric.type=\&#34;agent.googleapis.com/nginx/connections/accepted_count\&#34;&#34;,
 *                 &#34;aggregation&#34;: {
 *                   &#34;perSeriesAligner&#34;: &#34;ALIGN_RATE&#34;
 *                 }
 *               },
 *               &#34;unitOverride&#34;: &#34;1&#34;
 *             },
 *             &#34;plotType&#34;: &#34;STACKED_BAR&#34;
 *           }],
 *           &#34;timeshiftDuration&#34;: &#34;0s&#34;,
 *           &#34;yAxis&#34;: {
 *             &#34;label&#34;: &#34;y1Axis&#34;,
 *             &#34;scale&#34;: &#34;LINEAR&#34;
 *           }
 *         }
 *       }
 *     ]
 *   }
 * }
 * 
 * 
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Dashboard can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:monitoring/dashboard:Dashboard default projects/{{project}}/dashboards/{{dashboard_id}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:monitoring/dashboard:Dashboard default {{dashboard_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:monitoring/dashboard:Dashboard")
public class Dashboard extends com.pulumi.resources.CustomResource {
    /**
     * The JSON representation of a dashboard, following the format at https://cloud.google.com/monitoring/api/ref_v3/rest/v1/projects.dashboards.
     * The representation of an existing dashboard can be found by using the [API Explorer](https://cloud.google.com/monitoring/api/ref_v3/rest/v1/projects.dashboards/get)
     * 
     */
    @Export(name="dashboardJson", type=String.class, parameters={})
    private Output<String> dashboardJson;

    /**
     * @return The JSON representation of a dashboard, following the format at https://cloud.google.com/monitoring/api/ref_v3/rest/v1/projects.dashboards.
     * The representation of an existing dashboard can be found by using the [API Explorer](https://cloud.google.com/monitoring/api/ref_v3/rest/v1/projects.dashboards/get)
     * 
     */
    public Output<String> dashboardJson() {
        return this.dashboardJson;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dashboard(String name) {
        this(name, DashboardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dashboard(String name, DashboardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dashboard(String name, DashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:monitoring/dashboard:Dashboard", name, args == null ? DashboardArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Dashboard(String name, Output<String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:monitoring/dashboard:Dashboard", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dashboard get(String name, Output<String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Dashboard(name, id, state, options);
    }
}
