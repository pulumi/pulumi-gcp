// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.vertex.inputs.AiEndpointWithModelGardenDeploymentDeployConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiEndpointWithModelGardenDeploymentEndpointConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiEndpointWithModelGardenDeploymentModelConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiEndpointWithModelGardenDeploymentState extends com.pulumi.resources.ResourceArgs {

    public static final AiEndpointWithModelGardenDeploymentState Empty = new AiEndpointWithModelGardenDeploymentState();

    /**
     * The deploy config to use for the deployment.
     * Structure is documented below.
     * 
     */
    @Import(name="deployConfig")
    private @Nullable Output<AiEndpointWithModelGardenDeploymentDeployConfigArgs> deployConfig;

    /**
     * @return The deploy config to use for the deployment.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AiEndpointWithModelGardenDeploymentDeployConfigArgs>> deployConfig() {
        return Optional.ofNullable(this.deployConfig);
    }

    /**
     * Output only. The display name assigned to the model deployed to the endpoint.
     * This is not required to delete the resource but is used for debug logging.
     * 
     */
    @Import(name="deployedModelDisplayName")
    private @Nullable Output<String> deployedModelDisplayName;

    /**
     * @return Output only. The display name assigned to the model deployed to the endpoint.
     * This is not required to delete the resource but is used for debug logging.
     * 
     */
    public Optional<Output<String>> deployedModelDisplayName() {
        return Optional.ofNullable(this.deployedModelDisplayName);
    }

    /**
     * Output only. The unique numeric ID that Vertex AI assigns to the model at the time it is deployed to the endpoint.
     * It is required to undeploy the model from the endpoint during resource deletion as described in
     * https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints/undeployModel.
     * 
     */
    @Import(name="deployedModelId")
    private @Nullable Output<String> deployedModelId;

    /**
     * @return Output only. The unique numeric ID that Vertex AI assigns to the model at the time it is deployed to the endpoint.
     * It is required to undeploy the model from the endpoint during resource deletion as described in
     * https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints/undeployModel.
     * 
     */
    public Optional<Output<String>> deployedModelId() {
        return Optional.ofNullable(this.deployedModelId);
    }

    /**
     * Resource ID segment making up resource `endpoint`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return Resource ID segment making up resource `endpoint`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * The endpoint config to use for the deployment.
     * Structure is documented below.
     * 
     */
    @Import(name="endpointConfig")
    private @Nullable Output<AiEndpointWithModelGardenDeploymentEndpointConfigArgs> endpointConfig;

    /**
     * @return The endpoint config to use for the deployment.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AiEndpointWithModelGardenDeploymentEndpointConfigArgs>> endpointConfig() {
        return Optional.ofNullable(this.endpointConfig);
    }

    /**
     * The Hugging Face model to deploy.
     * Format: Hugging Face model ID like `google/gemma-2-2b-it`.
     * 
     */
    @Import(name="huggingFaceModelId")
    private @Nullable Output<String> huggingFaceModelId;

    /**
     * @return The Hugging Face model to deploy.
     * Format: Hugging Face model ID like `google/gemma-2-2b-it`.
     * 
     */
    public Optional<Output<String>> huggingFaceModelId() {
        return Optional.ofNullable(this.huggingFaceModelId);
    }

    /**
     * Resource ID segment making up resource `location`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource ID segment making up resource `location`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The model config to use for the deployment.
     * Structure is documented below.
     * 
     */
    @Import(name="modelConfig")
    private @Nullable Output<AiEndpointWithModelGardenDeploymentModelConfigArgs> modelConfig;

    /**
     * @return The model config to use for the deployment.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AiEndpointWithModelGardenDeploymentModelConfigArgs>> modelConfig() {
        return Optional.ofNullable(this.modelConfig);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The Model Garden model to deploy.
     * Format:
     * `publishers/{publisher}/models/{publisher_model}{@literal @}{version_id}`, or
     * `publishers/hf-{hugging-face-author}/models/{hugging-face-model-name}{@literal @}001`.
     * 
     */
    @Import(name="publisherModelName")
    private @Nullable Output<String> publisherModelName;

    /**
     * @return The Model Garden model to deploy.
     * Format:
     * `publishers/{publisher}/models/{publisher_model}{@literal @}{version_id}`, or
     * `publishers/hf-{hugging-face-author}/models/{hugging-face-model-name}{@literal @}001`.
     * 
     */
    public Optional<Output<String>> publisherModelName() {
        return Optional.ofNullable(this.publisherModelName);
    }

    private AiEndpointWithModelGardenDeploymentState() {}

    private AiEndpointWithModelGardenDeploymentState(AiEndpointWithModelGardenDeploymentState $) {
        this.deployConfig = $.deployConfig;
        this.deployedModelDisplayName = $.deployedModelDisplayName;
        this.deployedModelId = $.deployedModelId;
        this.endpoint = $.endpoint;
        this.endpointConfig = $.endpointConfig;
        this.huggingFaceModelId = $.huggingFaceModelId;
        this.location = $.location;
        this.modelConfig = $.modelConfig;
        this.project = $.project;
        this.publisherModelName = $.publisherModelName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiEndpointWithModelGardenDeploymentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiEndpointWithModelGardenDeploymentState $;

        public Builder() {
            $ = new AiEndpointWithModelGardenDeploymentState();
        }

        public Builder(AiEndpointWithModelGardenDeploymentState defaults) {
            $ = new AiEndpointWithModelGardenDeploymentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param deployConfig The deploy config to use for the deployment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder deployConfig(@Nullable Output<AiEndpointWithModelGardenDeploymentDeployConfigArgs> deployConfig) {
            $.deployConfig = deployConfig;
            return this;
        }

        /**
         * @param deployConfig The deploy config to use for the deployment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder deployConfig(AiEndpointWithModelGardenDeploymentDeployConfigArgs deployConfig) {
            return deployConfig(Output.of(deployConfig));
        }

        /**
         * @param deployedModelDisplayName Output only. The display name assigned to the model deployed to the endpoint.
         * This is not required to delete the resource but is used for debug logging.
         * 
         * @return builder
         * 
         */
        public Builder deployedModelDisplayName(@Nullable Output<String> deployedModelDisplayName) {
            $.deployedModelDisplayName = deployedModelDisplayName;
            return this;
        }

        /**
         * @param deployedModelDisplayName Output only. The display name assigned to the model deployed to the endpoint.
         * This is not required to delete the resource but is used for debug logging.
         * 
         * @return builder
         * 
         */
        public Builder deployedModelDisplayName(String deployedModelDisplayName) {
            return deployedModelDisplayName(Output.of(deployedModelDisplayName));
        }

        /**
         * @param deployedModelId Output only. The unique numeric ID that Vertex AI assigns to the model at the time it is deployed to the endpoint.
         * It is required to undeploy the model from the endpoint during resource deletion as described in
         * https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints/undeployModel.
         * 
         * @return builder
         * 
         */
        public Builder deployedModelId(@Nullable Output<String> deployedModelId) {
            $.deployedModelId = deployedModelId;
            return this;
        }

        /**
         * @param deployedModelId Output only. The unique numeric ID that Vertex AI assigns to the model at the time it is deployed to the endpoint.
         * It is required to undeploy the model from the endpoint during resource deletion as described in
         * https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints/undeployModel.
         * 
         * @return builder
         * 
         */
        public Builder deployedModelId(String deployedModelId) {
            return deployedModelId(Output.of(deployedModelId));
        }

        /**
         * @param endpoint Resource ID segment making up resource `endpoint`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint Resource ID segment making up resource `endpoint`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param endpointConfig The endpoint config to use for the deployment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder endpointConfig(@Nullable Output<AiEndpointWithModelGardenDeploymentEndpointConfigArgs> endpointConfig) {
            $.endpointConfig = endpointConfig;
            return this;
        }

        /**
         * @param endpointConfig The endpoint config to use for the deployment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder endpointConfig(AiEndpointWithModelGardenDeploymentEndpointConfigArgs endpointConfig) {
            return endpointConfig(Output.of(endpointConfig));
        }

        /**
         * @param huggingFaceModelId The Hugging Face model to deploy.
         * Format: Hugging Face model ID like `google/gemma-2-2b-it`.
         * 
         * @return builder
         * 
         */
        public Builder huggingFaceModelId(@Nullable Output<String> huggingFaceModelId) {
            $.huggingFaceModelId = huggingFaceModelId;
            return this;
        }

        /**
         * @param huggingFaceModelId The Hugging Face model to deploy.
         * Format: Hugging Face model ID like `google/gemma-2-2b-it`.
         * 
         * @return builder
         * 
         */
        public Builder huggingFaceModelId(String huggingFaceModelId) {
            return huggingFaceModelId(Output.of(huggingFaceModelId));
        }

        /**
         * @param location Resource ID segment making up resource `location`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `location`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param modelConfig The model config to use for the deployment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder modelConfig(@Nullable Output<AiEndpointWithModelGardenDeploymentModelConfigArgs> modelConfig) {
            $.modelConfig = modelConfig;
            return this;
        }

        /**
         * @param modelConfig The model config to use for the deployment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder modelConfig(AiEndpointWithModelGardenDeploymentModelConfigArgs modelConfig) {
            return modelConfig(Output.of(modelConfig));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param publisherModelName The Model Garden model to deploy.
         * Format:
         * `publishers/{publisher}/models/{publisher_model}{@literal @}{version_id}`, or
         * `publishers/hf-{hugging-face-author}/models/{hugging-face-model-name}{@literal @}001`.
         * 
         * @return builder
         * 
         */
        public Builder publisherModelName(@Nullable Output<String> publisherModelName) {
            $.publisherModelName = publisherModelName;
            return this;
        }

        /**
         * @param publisherModelName The Model Garden model to deploy.
         * Format:
         * `publishers/{publisher}/models/{publisher_model}{@literal @}{version_id}`, or
         * `publishers/hf-{hugging-face-author}/models/{hugging-face-model-name}{@literal @}001`.
         * 
         * @return builder
         * 
         */
        public Builder publisherModelName(String publisherModelName) {
            return publisherModelName(Output.of(publisherModelName));
        }

        public AiEndpointWithModelGardenDeploymentState build() {
            return $;
        }
    }

}
