// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.bigquery.TableArgs;
import com.pulumi.gcp.bigquery.inputs.TableState;
import com.pulumi.gcp.bigquery.outputs.TableEncryptionConfiguration;
import com.pulumi.gcp.bigquery.outputs.TableExternalDataConfiguration;
import com.pulumi.gcp.bigquery.outputs.TableMaterializedView;
import com.pulumi.gcp.bigquery.outputs.TableRangePartitioning;
import com.pulumi.gcp.bigquery.outputs.TableTimePartitioning;
import com.pulumi.gcp.bigquery.outputs.TableView;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates a table resource in a dataset for Google BigQuery. For more information see
 * [the official documentation](https://cloud.google.com/bigquery/docs/) and
 * [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables).
 * 
 * &gt; **Note**: On newer versions of the provider, you must explicitly set `deletion_protection=false`
 * (and run `pulumi update` to write the field to state) in order to destroy an instance.
 * It is recommended to not set this field (or set it to true) until you&#39;re ready to destroy.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.bigquery.Dataset;
 * import com.pulumi.gcp.bigquery.DatasetArgs;
 * import com.pulumi.gcp.bigquery.Table;
 * import com.pulumi.gcp.bigquery.TableArgs;
 * import com.pulumi.gcp.bigquery.inputs.TableTimePartitioningArgs;
 * import com.pulumi.gcp.bigquery.inputs.TableExternalDataConfigurationArgs;
 * import com.pulumi.gcp.bigquery.inputs.TableExternalDataConfigurationGoogleSheetsOptionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultDataset = new Dataset(&#34;defaultDataset&#34;, DatasetArgs.builder()        
 *             .datasetId(&#34;foo&#34;)
 *             .friendlyName(&#34;test&#34;)
 *             .description(&#34;This is a test description&#34;)
 *             .location(&#34;EU&#34;)
 *             .defaultTableExpirationMs(3600000)
 *             .labels(Map.of(&#34;env&#34;, &#34;default&#34;))
 *             .build());
 * 
 *         var defaultTable = new Table(&#34;defaultTable&#34;, TableArgs.builder()        
 *             .datasetId(defaultDataset.datasetId())
 *             .tableId(&#34;bar&#34;)
 *             .timePartitioning(TableTimePartitioningArgs.builder()
 *                 .type(&#34;DAY&#34;)
 *                 .build())
 *             .labels(Map.of(&#34;env&#34;, &#34;default&#34;))
 *             .schema(&#34;&#34;&#34;
 * [
 *   {
 *     &#34;name&#34;: &#34;permalink&#34;,
 *     &#34;type&#34;: &#34;STRING&#34;,
 *     &#34;mode&#34;: &#34;NULLABLE&#34;,
 *     &#34;description&#34;: &#34;The Permalink&#34;
 *   },
 *   {
 *     &#34;name&#34;: &#34;state&#34;,
 *     &#34;type&#34;: &#34;STRING&#34;,
 *     &#34;mode&#34;: &#34;NULLABLE&#34;,
 *     &#34;description&#34;: &#34;State where the head office is located&#34;
 *   }
 * ]
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *         var sheet = new Table(&#34;sheet&#34;, TableArgs.builder()        
 *             .datasetId(defaultDataset.datasetId())
 *             .tableId(&#34;sheet&#34;)
 *             .externalDataConfiguration(TableExternalDataConfigurationArgs.builder()
 *                 .autodetect(true)
 *                 .sourceFormat(&#34;GOOGLE_SHEETS&#34;)
 *                 .googleSheetsOptions(TableExternalDataConfigurationGoogleSheetsOptionsArgs.builder()
 *                     .skipLeadingRows(1)
 *                     .build())
 *                 .sourceUris(&#34;https://docs.google.com/spreadsheets/d/123456789012345&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * BigQuery tables imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:bigquery/table:Table default projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:bigquery/table:Table default {{project}}/{{dataset_id}}/{{table_id}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:bigquery/table:Table default {{dataset_id}}/{{table_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:bigquery/table:Table")
public class Table extends com.pulumi.resources.CustomResource {
    /**
     * Specifies column names to use for data clustering.
     * Up to four top-level columns are allowed, and should be specified in
     * descending priority order.
     * 
     */
    @Export(name="clusterings", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> clusterings;

    /**
     * @return Specifies column names to use for data clustering.
     * Up to four top-level columns are allowed, and should be specified in
     * descending priority order.
     * 
     */
    public Output<Optional<List<String>>> clusterings() {
        return Codegen.optional(this.clusterings);
    }
    /**
     * The time when this table was created, in milliseconds since the epoch.
     * 
     */
    @Export(name="creationTime", type=Integer.class, parameters={})
    private Output<Integer> creationTime;

    /**
     * @return The time when this table was created, in milliseconds since the epoch.
     * 
     */
    public Output<Integer> creationTime() {
        return this.creationTime;
    }
    /**
     * The dataset ID to create the table in.
     * Changing this forces a new resource to be created.
     * 
     */
    @Export(name="datasetId", type=String.class, parameters={})
    private Output<String> datasetId;

    /**
     * @return The dataset ID to create the table in.
     * Changing this forces a new resource to be created.
     * 
     */
    public Output<String> datasetId() {
        return this.datasetId;
    }
    /**
     * Whether or not to allow the provider to destroy the instance. Unless this field is set to false
     * in state, a `=destroy` or `=update` that would delete the instance will fail.
     * 
     */
    @Export(name="deletionProtection", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> deletionProtection;

    /**
     * @return Whether or not to allow the provider to destroy the instance. Unless this field is set to false
     * in state, a `=destroy` or `=update` that would delete the instance will fail.
     * 
     */
    public Output<Optional<Boolean>> deletionProtection() {
        return Codegen.optional(this.deletionProtection);
    }
    /**
     * The field description.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The field description.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Specifies how the table should be encrypted.
     * If left blank, the table will be encrypted with a Google-managed key; that process
     * is transparent to the user.  Structure is documented below.
     * 
     */
    @Export(name="encryptionConfiguration", type=TableEncryptionConfiguration.class, parameters={})
    private Output</* @Nullable */ TableEncryptionConfiguration> encryptionConfiguration;

    /**
     * @return Specifies how the table should be encrypted.
     * If left blank, the table will be encrypted with a Google-managed key; that process
     * is transparent to the user.  Structure is documented below.
     * 
     */
    public Output<Optional<TableEncryptionConfiguration>> encryptionConfiguration() {
        return Codegen.optional(this.encryptionConfiguration);
    }
    /**
     * A hash of the resource.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return A hash of the resource.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * The time when this table expires, in
     * milliseconds since the epoch. If not present, the table will persist
     * indefinitely. Expired tables will be deleted and their storage
     * reclaimed.
     * 
     */
    @Export(name="expirationTime", type=Integer.class, parameters={})
    private Output<Integer> expirationTime;

    /**
     * @return The time when this table expires, in
     * milliseconds since the epoch. If not present, the table will persist
     * indefinitely. Expired tables will be deleted and their storage
     * reclaimed.
     * 
     */
    public Output<Integer> expirationTime() {
        return this.expirationTime;
    }
    /**
     * Describes the data format,
     * location, and other properties of a table stored outside of BigQuery.
     * By defining these properties, the data source can then be queried as
     * if it were a standard BigQuery table. Structure is documented below.
     * 
     */
    @Export(name="externalDataConfiguration", type=TableExternalDataConfiguration.class, parameters={})
    private Output</* @Nullable */ TableExternalDataConfiguration> externalDataConfiguration;

    /**
     * @return Describes the data format,
     * location, and other properties of a table stored outside of BigQuery.
     * By defining these properties, the data source can then be queried as
     * if it were a standard BigQuery table. Structure is documented below.
     * 
     */
    public Output<Optional<TableExternalDataConfiguration>> externalDataConfiguration() {
        return Codegen.optional(this.externalDataConfiguration);
    }
    /**
     * A descriptive name for the table.
     * 
     */
    @Export(name="friendlyName", type=String.class, parameters={})
    private Output</* @Nullable */ String> friendlyName;

    /**
     * @return A descriptive name for the table.
     * 
     */
    public Output<Optional<String>> friendlyName() {
        return Codegen.optional(this.friendlyName);
    }
    /**
     * A mapping of labels to assign to the resource.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return A mapping of labels to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The time when this table was last modified, in milliseconds since the epoch.
     * 
     */
    @Export(name="lastModifiedTime", type=Integer.class, parameters={})
    private Output<Integer> lastModifiedTime;

    /**
     * @return The time when this table was last modified, in milliseconds since the epoch.
     * 
     */
    public Output<Integer> lastModifiedTime() {
        return this.lastModifiedTime;
    }
    /**
     * The geographic location where the table resides. This value is inherited from the dataset.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The geographic location where the table resides. This value is inherited from the dataset.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * If specified, configures this table as a materialized view.
     * Structure is documented below.
     * 
     */
    @Export(name="materializedView", type=TableMaterializedView.class, parameters={})
    private Output</* @Nullable */ TableMaterializedView> materializedView;

    /**
     * @return If specified, configures this table as a materialized view.
     * Structure is documented below.
     * 
     */
    public Output<Optional<TableMaterializedView>> materializedView() {
        return Codegen.optional(this.materializedView);
    }
    /**
     * The size of this table in bytes, excluding any data in the streaming buffer.
     * 
     */
    @Export(name="numBytes", type=Integer.class, parameters={})
    private Output<Integer> numBytes;

    /**
     * @return The size of this table in bytes, excluding any data in the streaming buffer.
     * 
     */
    public Output<Integer> numBytes() {
        return this.numBytes;
    }
    /**
     * The number of bytes in the table that are considered &#34;long-term storage&#34;.
     * 
     */
    @Export(name="numLongTermBytes", type=Integer.class, parameters={})
    private Output<Integer> numLongTermBytes;

    /**
     * @return The number of bytes in the table that are considered &#34;long-term storage&#34;.
     * 
     */
    public Output<Integer> numLongTermBytes() {
        return this.numLongTermBytes;
    }
    /**
     * The number of rows of data in this table, excluding any data in the streaming buffer.
     * 
     */
    @Export(name="numRows", type=Integer.class, parameters={})
    private Output<Integer> numRows;

    /**
     * @return The number of rows of data in this table, excluding any data in the streaming buffer.
     * 
     */
    public Output<Integer> numRows() {
        return this.numRows;
    }
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * If specified, configures range-based
     * partitioning for this table. Structure is documented below.
     * 
     */
    @Export(name="rangePartitioning", type=TableRangePartitioning.class, parameters={})
    private Output</* @Nullable */ TableRangePartitioning> rangePartitioning;

    /**
     * @return If specified, configures range-based
     * partitioning for this table. Structure is documented below.
     * 
     */
    public Output<Optional<TableRangePartitioning>> rangePartitioning() {
        return Codegen.optional(this.rangePartitioning);
    }
    /**
     * A JSON schema for the table.
     * 
     */
    @Export(name="schema", type=String.class, parameters={})
    private Output<String> schema;

    /**
     * @return A JSON schema for the table.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * A unique ID for the resource.
     * Changing this forces a new resource to be created.
     * 
     */
    @Export(name="tableId", type=String.class, parameters={})
    private Output<String> tableId;

    /**
     * @return A unique ID for the resource.
     * Changing this forces a new resource to be created.
     * 
     */
    public Output<String> tableId() {
        return this.tableId;
    }
    /**
     * If specified, configures time-based
     * partitioning for this table. Structure is documented below.
     * 
     */
    @Export(name="timePartitioning", type=TableTimePartitioning.class, parameters={})
    private Output</* @Nullable */ TableTimePartitioning> timePartitioning;

    /**
     * @return If specified, configures time-based
     * partitioning for this table. Structure is documented below.
     * 
     */
    public Output<Optional<TableTimePartitioning>> timePartitioning() {
        return Codegen.optional(this.timePartitioning);
    }
    /**
     * The supported types are DAY, HOUR, MONTH, and YEAR,
     * which will generate one partition per day, hour, month, and year, respectively.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The supported types are DAY, HOUR, MONTH, and YEAR,
     * which will generate one partition per day, hour, month, and year, respectively.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * If specified, configures this table as a view.
     * Structure is documented below.
     * 
     */
    @Export(name="view", type=TableView.class, parameters={})
    private Output</* @Nullable */ TableView> view;

    /**
     * @return If specified, configures this table as a view.
     * Structure is documented below.
     * 
     */
    public Output<Optional<TableView>> view() {
        return Codegen.optional(this.view);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Table(String name) {
        this(name, TableArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Table(String name, TableArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Table(String name, TableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigquery/table:Table", name, args == null ? TableArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Table(String name, Output<String> id, @Nullable TableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigquery/table:Table", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Table get(String name, Output<String> id, @Nullable TableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Table(name, id, state, options);
    }
}
