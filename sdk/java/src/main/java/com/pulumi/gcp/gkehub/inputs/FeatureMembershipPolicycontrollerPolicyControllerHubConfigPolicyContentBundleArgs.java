// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs Empty = new FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs();

    /**
     * The name of the bundle.
     * 
     */
    @Import(name="bundleName", required=true)
    private Output<String> bundleName;

    /**
     * @return The name of the bundle.
     * 
     */
    public Output<String> bundleName() {
        return this.bundleName;
    }

    /**
     * The set of namespaces to be exempted from the bundle.
     * 
     */
    @Import(name="exemptedNamespaces")
    private @Nullable Output<List<String>> exemptedNamespaces;

    /**
     * @return The set of namespaces to be exempted from the bundle.
     * 
     */
    public Optional<Output<List<String>>> exemptedNamespaces() {
        return Optional.ofNullable(this.exemptedNamespaces);
    }

    private FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs() {}

    private FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs(FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs $) {
        this.bundleName = $.bundleName;
        this.exemptedNamespaces = $.exemptedNamespaces;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs $;

        public Builder() {
            $ = new FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs();
        }

        public Builder(FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs defaults) {
            $ = new FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bundleName The name of the bundle.
         * 
         * @return builder
         * 
         */
        public Builder bundleName(Output<String> bundleName) {
            $.bundleName = bundleName;
            return this;
        }

        /**
         * @param bundleName The name of the bundle.
         * 
         * @return builder
         * 
         */
        public Builder bundleName(String bundleName) {
            return bundleName(Output.of(bundleName));
        }

        /**
         * @param exemptedNamespaces The set of namespaces to be exempted from the bundle.
         * 
         * @return builder
         * 
         */
        public Builder exemptedNamespaces(@Nullable Output<List<String>> exemptedNamespaces) {
            $.exemptedNamespaces = exemptedNamespaces;
            return this;
        }

        /**
         * @param exemptedNamespaces The set of namespaces to be exempted from the bundle.
         * 
         * @return builder
         * 
         */
        public Builder exemptedNamespaces(List<String> exemptedNamespaces) {
            return exemptedNamespaces(Output.of(exemptedNamespaces));
        }

        /**
         * @param exemptedNamespaces The set of namespaces to be exempted from the bundle.
         * 
         * @return builder
         * 
         */
        public Builder exemptedNamespaces(String... exemptedNamespaces) {
            return exemptedNamespaces(List.of(exemptedNamespaces));
        }

        public FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs build() {
            if ($.bundleName == null) {
                throw new MissingRequiredPropertyException("FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs", "bundleName");
            }
            return $;
        }
    }

}
