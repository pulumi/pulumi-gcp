// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetImagesImage {
    /**
     * @return The size of the image tar.gz archive stored in Google Cloud Storage in bytes.
     * 
     */
    private Integer archiveSizeBytes;
    /**
     * @return The creation timestamp in RFC3339 text format.
     * 
     */
    private String creationTimestamp;
    /**
     * @return An optional description of this image.
     * 
     */
    private String description;
    /**
     * @return The size of the image when restored onto a persistent disk in gigabytes.
     * 
     */
    private Integer diskSizeGb;
    /**
     * @return The family name of the image.
     * 
     */
    private String family;
    private Integer imageId;
    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return The name of the image.
     * 
     */
    private String name;
    /**
     * @return The URI of the image.
     * 
     */
    private String selfLink;
    /**
     * @return The URL of the source disk used to create this image.
     * 
     */
    private String sourceDisk;
    /**
     * @return The ID value of the disk used to create this image.
     * 
     */
    private String sourceDiskId;
    /**
     * @return The ID value of the image used to create this image.
     * 
     */
    private String sourceImageId;

    private GetImagesImage() {}
    /**
     * @return The size of the image tar.gz archive stored in Google Cloud Storage in bytes.
     * 
     */
    public Integer archiveSizeBytes() {
        return this.archiveSizeBytes;
    }
    /**
     * @return The creation timestamp in RFC3339 text format.
     * 
     */
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * @return An optional description of this image.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The size of the image when restored onto a persistent disk in gigabytes.
     * 
     */
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }
    /**
     * @return The family name of the image.
     * 
     */
    public String family() {
        return this.family;
    }
    public Integer imageId() {
        return this.imageId;
    }
    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The name of the image.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The URI of the image.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return The URL of the source disk used to create this image.
     * 
     */
    public String sourceDisk() {
        return this.sourceDisk;
    }
    /**
     * @return The ID value of the disk used to create this image.
     * 
     */
    public String sourceDiskId() {
        return this.sourceDiskId;
    }
    /**
     * @return The ID value of the image used to create this image.
     * 
     */
    public String sourceImageId() {
        return this.sourceImageId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagesImage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer archiveSizeBytes;
        private String creationTimestamp;
        private String description;
        private Integer diskSizeGb;
        private String family;
        private Integer imageId;
        private Map<String,String> labels;
        private String name;
        private String selfLink;
        private String sourceDisk;
        private String sourceDiskId;
        private String sourceImageId;
        public Builder() {}
        public Builder(GetImagesImage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveSizeBytes = defaults.archiveSizeBytes;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.family = defaults.family;
    	      this.imageId = defaults.imageId;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.selfLink = defaults.selfLink;
    	      this.sourceDisk = defaults.sourceDisk;
    	      this.sourceDiskId = defaults.sourceDiskId;
    	      this.sourceImageId = defaults.sourceImageId;
        }

        @CustomType.Setter
        public Builder archiveSizeBytes(Integer archiveSizeBytes) {
            if (archiveSizeBytes == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "archiveSizeBytes");
            }
            this.archiveSizeBytes = archiveSizeBytes;
            return this;
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            if (creationTimestamp == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "creationTimestamp");
            }
            this.creationTimestamp = creationTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(Integer diskSizeGb) {
            if (diskSizeGb == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "diskSizeGb");
            }
            this.diskSizeGb = diskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder family(String family) {
            if (family == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "family");
            }
            this.family = family;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(Integer imageId) {
            if (imageId == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "imageId");
            }
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDisk(String sourceDisk) {
            if (sourceDisk == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "sourceDisk");
            }
            this.sourceDisk = sourceDisk;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDiskId(String sourceDiskId) {
            if (sourceDiskId == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "sourceDiskId");
            }
            this.sourceDiskId = sourceDiskId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceImageId(String sourceImageId) {
            if (sourceImageId == null) {
              throw new MissingRequiredPropertyException("GetImagesImage", "sourceImageId");
            }
            this.sourceImageId = sourceImageId;
            return this;
        }
        public GetImagesImage build() {
            final var _resultValue = new GetImagesImage();
            _resultValue.archiveSizeBytes = archiveSizeBytes;
            _resultValue.creationTimestamp = creationTimestamp;
            _resultValue.description = description;
            _resultValue.diskSizeGb = diskSizeGb;
            _resultValue.family = family;
            _resultValue.imageId = imageId;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.selfLink = selfLink;
            _resultValue.sourceDisk = sourceDisk;
            _resultValue.sourceDiskId = sourceDiskId;
            _resultValue.sourceImageId = sourceImageId;
            return _resultValue;
        }
    }
}
