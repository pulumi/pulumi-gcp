// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.memorystore.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.memorystore.outputs.GetInstanceCrossInstanceReplicationConfigMembership;
import com.pulumi.gcp.memorystore.outputs.GetInstanceCrossInstanceReplicationConfigPrimaryInstance;
import com.pulumi.gcp.memorystore.outputs.GetInstanceCrossInstanceReplicationConfigSecondaryInstance;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceCrossInstanceReplicationConfig {
    /**
     * @return The instance role supports the following values:
     * 1. &#39;INSTANCE_ROLE_UNSPECIFIED&#39;: This is an independent instance that has never participated in cross instance replication. It allows both reads and writes.
     * 2. &#39;NONE&#39;: This is an independent instance that previously participated in cross instance replication(either as a &#39;PRIMARY&#39; or &#39;SECONDARY&#39; cluster). It allows both reads and writes.
     * 3. &#39;PRIMARY&#39;: This instance serves as the replication source for secondary instance that are replicating from it. Any data written to it is automatically replicated to its secondary clusters. It allows both reads and writes.
     * 4. &#39;SECONDARY&#39;: This instance replicates data from the primary instance. It allows only reads. Possible values: [&#34;INSTANCE_ROLE_UNSPECIFIED&#34;, &#34;NONE&#34;, &#34;PRIMARY&#34;, &#34;SECONDARY&#34;]
     * 
     */
    private String instanceRole;
    /**
     * @return An output only view of all the member instance participating in cross instance replication. This field is populated for all the member clusters irrespective of their cluster role.
     * 
     */
    private List<GetInstanceCrossInstanceReplicationConfigMembership> memberships;
    /**
     * @return This field is only set for a secondary instance. Details of the primary instance that is used as the replication source for this secondary instance. This is allowed to be set only for clusters whose cluster role is of type &#39;SECONDARY&#39;.
     * 
     */
    private List<GetInstanceCrossInstanceReplicationConfigPrimaryInstance> primaryInstances;
    /**
     * @return List of secondary instances that are replicating from this primary cluster. This is allowed to be set only for instances whose cluster role is of type &#39;PRIMARY&#39;.
     * 
     */
    private List<GetInstanceCrossInstanceReplicationConfigSecondaryInstance> secondaryInstances;
    /**
     * @return The last time cross instance replication config was updated.
     * 
     */
    private String updateTime;

    private GetInstanceCrossInstanceReplicationConfig() {}
    /**
     * @return The instance role supports the following values:
     * 1. &#39;INSTANCE_ROLE_UNSPECIFIED&#39;: This is an independent instance that has never participated in cross instance replication. It allows both reads and writes.
     * 2. &#39;NONE&#39;: This is an independent instance that previously participated in cross instance replication(either as a &#39;PRIMARY&#39; or &#39;SECONDARY&#39; cluster). It allows both reads and writes.
     * 3. &#39;PRIMARY&#39;: This instance serves as the replication source for secondary instance that are replicating from it. Any data written to it is automatically replicated to its secondary clusters. It allows both reads and writes.
     * 4. &#39;SECONDARY&#39;: This instance replicates data from the primary instance. It allows only reads. Possible values: [&#34;INSTANCE_ROLE_UNSPECIFIED&#34;, &#34;NONE&#34;, &#34;PRIMARY&#34;, &#34;SECONDARY&#34;]
     * 
     */
    public String instanceRole() {
        return this.instanceRole;
    }
    /**
     * @return An output only view of all the member instance participating in cross instance replication. This field is populated for all the member clusters irrespective of their cluster role.
     * 
     */
    public List<GetInstanceCrossInstanceReplicationConfigMembership> memberships() {
        return this.memberships;
    }
    /**
     * @return This field is only set for a secondary instance. Details of the primary instance that is used as the replication source for this secondary instance. This is allowed to be set only for clusters whose cluster role is of type &#39;SECONDARY&#39;.
     * 
     */
    public List<GetInstanceCrossInstanceReplicationConfigPrimaryInstance> primaryInstances() {
        return this.primaryInstances;
    }
    /**
     * @return List of secondary instances that are replicating from this primary cluster. This is allowed to be set only for instances whose cluster role is of type &#39;PRIMARY&#39;.
     * 
     */
    public List<GetInstanceCrossInstanceReplicationConfigSecondaryInstance> secondaryInstances() {
        return this.secondaryInstances;
    }
    /**
     * @return The last time cross instance replication config was updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceCrossInstanceReplicationConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String instanceRole;
        private List<GetInstanceCrossInstanceReplicationConfigMembership> memberships;
        private List<GetInstanceCrossInstanceReplicationConfigPrimaryInstance> primaryInstances;
        private List<GetInstanceCrossInstanceReplicationConfigSecondaryInstance> secondaryInstances;
        private String updateTime;
        public Builder() {}
        public Builder(GetInstanceCrossInstanceReplicationConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.instanceRole = defaults.instanceRole;
    	      this.memberships = defaults.memberships;
    	      this.primaryInstances = defaults.primaryInstances;
    	      this.secondaryInstances = defaults.secondaryInstances;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder instanceRole(String instanceRole) {
            if (instanceRole == null) {
              throw new MissingRequiredPropertyException("GetInstanceCrossInstanceReplicationConfig", "instanceRole");
            }
            this.instanceRole = instanceRole;
            return this;
        }
        @CustomType.Setter
        public Builder memberships(List<GetInstanceCrossInstanceReplicationConfigMembership> memberships) {
            if (memberships == null) {
              throw new MissingRequiredPropertyException("GetInstanceCrossInstanceReplicationConfig", "memberships");
            }
            this.memberships = memberships;
            return this;
        }
        public Builder memberships(GetInstanceCrossInstanceReplicationConfigMembership... memberships) {
            return memberships(List.of(memberships));
        }
        @CustomType.Setter
        public Builder primaryInstances(List<GetInstanceCrossInstanceReplicationConfigPrimaryInstance> primaryInstances) {
            if (primaryInstances == null) {
              throw new MissingRequiredPropertyException("GetInstanceCrossInstanceReplicationConfig", "primaryInstances");
            }
            this.primaryInstances = primaryInstances;
            return this;
        }
        public Builder primaryInstances(GetInstanceCrossInstanceReplicationConfigPrimaryInstance... primaryInstances) {
            return primaryInstances(List.of(primaryInstances));
        }
        @CustomType.Setter
        public Builder secondaryInstances(List<GetInstanceCrossInstanceReplicationConfigSecondaryInstance> secondaryInstances) {
            if (secondaryInstances == null) {
              throw new MissingRequiredPropertyException("GetInstanceCrossInstanceReplicationConfig", "secondaryInstances");
            }
            this.secondaryInstances = secondaryInstances;
            return this;
        }
        public Builder secondaryInstances(GetInstanceCrossInstanceReplicationConfigSecondaryInstance... secondaryInstances) {
            return secondaryInstances(List.of(secondaryInstances));
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetInstanceCrossInstanceReplicationConfig", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetInstanceCrossInstanceReplicationConfig build() {
            final var _resultValue = new GetInstanceCrossInstanceReplicationConfig();
            _resultValue.instanceRole = instanceRole;
            _resultValue.memberships = memberships;
            _resultValue.primaryInstances = primaryInstances;
            _resultValue.secondaryInstances = secondaryInstances;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
