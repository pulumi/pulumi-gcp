// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.applicationintegration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AuthConfigDecryptedCredentialOauth2AuthorizationCode {
    /**
     * @return The auth url endpoint to send the auth code request to.
     * 
     */
    private @Nullable String authEndpoint;
    /**
     * @return The client&#39;s id.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return The client&#39;s secret.
     * 
     */
    private @Nullable String clientSecret;
    /**
     * @return A space-delimited list of requested scope permissions.
     * 
     */
    private @Nullable String scope;
    /**
     * @return The token url endpoint to send the token request to.
     * 
     */
    private @Nullable String tokenEndpoint;

    private AuthConfigDecryptedCredentialOauth2AuthorizationCode() {}
    /**
     * @return The auth url endpoint to send the auth code request to.
     * 
     */
    public Optional<String> authEndpoint() {
        return Optional.ofNullable(this.authEndpoint);
    }
    /**
     * @return The client&#39;s id.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return The client&#39;s secret.
     * 
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return A space-delimited list of requested scope permissions.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return The token url endpoint to send the token request to.
     * 
     */
    public Optional<String> tokenEndpoint() {
        return Optional.ofNullable(this.tokenEndpoint);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthConfigDecryptedCredentialOauth2AuthorizationCode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authEndpoint;
        private @Nullable String clientId;
        private @Nullable String clientSecret;
        private @Nullable String scope;
        private @Nullable String tokenEndpoint;
        public Builder() {}
        public Builder(AuthConfigDecryptedCredentialOauth2AuthorizationCode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authEndpoint = defaults.authEndpoint;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.scope = defaults.scope;
    	      this.tokenEndpoint = defaults.tokenEndpoint;
        }

        @CustomType.Setter
        public Builder authEndpoint(@Nullable String authEndpoint) {

            this.authEndpoint = authEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {

            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {

            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {

            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder tokenEndpoint(@Nullable String tokenEndpoint) {

            this.tokenEndpoint = tokenEndpoint;
            return this;
        }
        public AuthConfigDecryptedCredentialOauth2AuthorizationCode build() {
            final var _resultValue = new AuthConfigDecryptedCredentialOauth2AuthorizationCode();
            _resultValue.authEndpoint = authEndpoint;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.scope = scope;
            _resultValue.tokenEndpoint = tokenEndpoint;
            return _resultValue;
        }
    }
}
