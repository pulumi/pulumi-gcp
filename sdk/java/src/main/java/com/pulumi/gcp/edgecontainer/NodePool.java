// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.edgecontainer;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.edgecontainer.NodePoolArgs;
import com.pulumi.gcp.edgecontainer.inputs.NodePoolState;
import com.pulumi.gcp.edgecontainer.outputs.NodePoolLocalDiskEncryption;
import com.pulumi.gcp.edgecontainer.outputs.NodePoolNodeConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &#34;A set of Kubernetes nodes in a cluster with common configuration and specification.&#34;
 * 
 * To get more information about NodePool, see:
 * 
 * * [API documentation](https://cloud.google.com/distributed-cloud/edge/latest/docs/reference/container/rest/v1/projects.locations.clusters.nodePools)
 * * How-to Guides
 *     * [Google Distributed Cloud Edge](https://cloud.google.com/distributed-cloud/edge/latest/docs)
 * 
 * ## Example Usage
 * 
 * ### Edgecontainer Node Pool
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.edgecontainer.Cluster;
 * import com.pulumi.gcp.edgecontainer.ClusterArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterAuthorizationArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterAuthorizationAdminUsersArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterNetworkingArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterFleetArgs;
 * import com.pulumi.gcp.edgecontainer.NodePool;
 * import com.pulumi.gcp.edgecontainer.NodePoolArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var cluster = new Cluster("cluster", ClusterArgs.builder()
 *             .name("default")
 *             .location("us-central1")
 *             .authorization(ClusterAuthorizationArgs.builder()
 *                 .adminUsers(ClusterAuthorizationAdminUsersArgs.builder()
 *                     .username("admin}{@literal @}{@code hashicorptest.com")
 *                     .build())
 *                 .build())
 *             .networking(ClusterNetworkingArgs.builder()
 *                 .clusterIpv4CidrBlocks("10.0.0.0/16")
 *                 .servicesIpv4CidrBlocks("10.1.0.0/16")
 *                 .build())
 *             .fleet(ClusterFleetArgs.builder()
 *                 .project(String.format("projects/%s", project.number()))
 *                 .build())
 *             .build());
 * 
 *         var default_ = new NodePool("default", NodePoolArgs.builder()
 *             .name("nodepool-1")
 *             .cluster(cluster.name())
 *             .location("us-central1")
 *             .nodeLocation("us-central1-edge-example-edgesite")
 *             .nodeCount(3)
 *             .labels(Map.ofEntries(
 *                 Map.entry("my_key", "my_val"),
 *                 Map.entry("other_key", "other_val")
 *             ))
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Edgecontainer Node Pool With Cmek
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.edgecontainer.Cluster;
 * import com.pulumi.gcp.edgecontainer.ClusterArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterAuthorizationArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterAuthorizationAdminUsersArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterNetworkingArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterFleetArgs;
 * import com.pulumi.gcp.kms.KeyRing;
 * import com.pulumi.gcp.kms.KeyRingArgs;
 * import com.pulumi.gcp.kms.CryptoKey;
 * import com.pulumi.gcp.kms.CryptoKeyArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMember;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
 * import com.pulumi.gcp.edgecontainer.NodePool;
 * import com.pulumi.gcp.edgecontainer.NodePoolArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.NodePoolLocalDiskEncryptionArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var cluster = new Cluster("cluster", ClusterArgs.builder()
 *             .name("default")
 *             .location("us-central1")
 *             .authorization(ClusterAuthorizationArgs.builder()
 *                 .adminUsers(ClusterAuthorizationAdminUsersArgs.builder()
 *                     .username("admin}{@literal @}{@code hashicorptest.com")
 *                     .build())
 *                 .build())
 *             .networking(ClusterNetworkingArgs.builder()
 *                 .clusterIpv4CidrBlocks("10.0.0.0/16")
 *                 .servicesIpv4CidrBlocks("10.1.0.0/16")
 *                 .build())
 *             .fleet(ClusterFleetArgs.builder()
 *                 .project(String.format("projects/%s", project.number()))
 *                 .build())
 *             .build());
 * 
 *         var keyRing = new KeyRing("keyRing", KeyRingArgs.builder()
 *             .name("keyring")
 *             .location("us-central1")
 *             .build());
 * 
 *         var cryptoKeyCryptoKey = new CryptoKey("cryptoKeyCryptoKey", CryptoKeyArgs.builder()
 *             .name("key")
 *             .keyRing(keyRing.id())
 *             .build());
 * 
 *         var cryptoKey = new CryptoKeyIAMMember("cryptoKey", CryptoKeyIAMMemberArgs.builder()
 *             .cryptoKeyId(cryptoKeyCryptoKey.id())
 *             .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-edgecontainer.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         var default_ = new NodePool("default", NodePoolArgs.builder()
 *             .name("nodepool-1")
 *             .cluster(cluster.name())
 *             .location("us-central1")
 *             .nodeLocation("us-central1-edge-example-edgesite")
 *             .nodeCount(3)
 *             .localDiskEncryption(NodePoolLocalDiskEncryptionArgs.builder()
 *                 .kmsKey(cryptoKeyCryptoKey.id())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(cryptoKey)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Edgecontainer Local Control Plane Node Pool
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.edgecontainer.Cluster;
 * import com.pulumi.gcp.edgecontainer.ClusterArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterAuthorizationArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterAuthorizationAdminUsersArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterNetworkingArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterFleetArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterControlPlaneArgs;
 * import com.pulumi.gcp.edgecontainer.inputs.ClusterControlPlaneLocalArgs;
 * import com.pulumi.gcp.edgecontainer.NodePool;
 * import com.pulumi.gcp.edgecontainer.NodePoolArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var default_ = new Cluster("default", ClusterArgs.builder()
 *             .name("default")
 *             .location("us-central1")
 *             .authorization(ClusterAuthorizationArgs.builder()
 *                 .adminUsers(ClusterAuthorizationAdminUsersArgs.builder()
 *                     .username("admin}{@literal @}{@code hashicorptest.com")
 *                     .build())
 *                 .build())
 *             .networking(ClusterNetworkingArgs.builder()
 *                 .clusterIpv4CidrBlocks("10.0.0.0/16")
 *                 .servicesIpv4CidrBlocks("10.1.0.0/16")
 *                 .build())
 *             .fleet(ClusterFleetArgs.builder()
 *                 .project(String.format("projects/%s", project.number()))
 *                 .build())
 *             .externalLoadBalancerIpv4AddressPools("10.100.0.0-10.100.0.10")
 *             .controlPlane(ClusterControlPlaneArgs.builder()
 *                 .local(ClusterControlPlaneLocalArgs.builder()
 *                     .nodeLocation("us-central1-edge-example-edgesite")
 *                     .nodeCount(1)
 *                     .machineFilter("machine-name")
 *                     .sharedDeploymentPolicy("ALLOWED")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var defaultNodePool = new NodePool("defaultNodePool", NodePoolArgs.builder()
 *             .name("nodepool-1")
 *             .cluster(cluster.name())
 *             .location("us-central1")
 *             .nodeLocation("us-central1-edge-example-edgesite")
 *             .nodeCount(3)
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * NodePool can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/nodePools/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{cluster}}/{{name}}`
 * 
 * * `{{location}}/{{cluster}}/{{name}}`
 * 
 * When using the `pulumi import` command, NodePool can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:edgecontainer/nodePool:NodePool default projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/nodePools/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:edgecontainer/nodePool:NodePool default {{project}}/{{location}}/{{cluster}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:edgecontainer/nodePool:NodePool default {{location}}/{{cluster}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:edgecontainer/nodePool:NodePool")
public class NodePool extends com.pulumi.resources.CustomResource {
    /**
     * The name of the target Distributed Cloud Edge Cluster.
     * 
     * ***
     * 
     */
    @Export(name="cluster", refs={String.class}, tree="[0]")
    private Output<String> cluster;

    /**
     * @return The name of the target Distributed Cloud Edge Cluster.
     * 
     * ***
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }
    /**
     * The time when the node pool was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The time when the node pool was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Labels associated with this resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels associated with this resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Local disk encryption options. This field is only used when enabling CMEK support.
     * Structure is documented below.
     * 
     */
    @Export(name="localDiskEncryption", refs={NodePoolLocalDiskEncryption.class}, tree="[0]")
    private Output</* @Nullable */ NodePoolLocalDiskEncryption> localDiskEncryption;

    /**
     * @return Local disk encryption options. This field is only used when enabling CMEK support.
     * Structure is documented below.
     * 
     */
    public Output<Optional<NodePoolLocalDiskEncryption>> localDiskEncryption() {
        return Codegen.optional(this.localDiskEncryption);
    }
    /**
     * The location of the resource.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Only machines matching this filter will be allowed to join the node pool.
     * The filtering language accepts strings like &#34;name=&lt;name&gt;&#34;, and is
     * documented in more detail in [AIP-160](https://google.aip.dev/160).
     * 
     */
    @Export(name="machineFilter", refs={String.class}, tree="[0]")
    private Output<String> machineFilter;

    /**
     * @return Only machines matching this filter will be allowed to join the node pool.
     * The filtering language accepts strings like &#34;name=&lt;name&gt;&#34;, and is
     * documented in more detail in [AIP-160](https://google.aip.dev/160).
     * 
     */
    public Output<String> machineFilter() {
        return this.machineFilter;
    }
    /**
     * The resource name of the node pool.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name of the node pool.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Configuration for each node in the NodePool
     * Structure is documented below.
     * 
     */
    @Export(name="nodeConfig", refs={NodePoolNodeConfig.class}, tree="[0]")
    private Output<NodePoolNodeConfig> nodeConfig;

    /**
     * @return Configuration for each node in the NodePool
     * Structure is documented below.
     * 
     */
    public Output<NodePoolNodeConfig> nodeConfig() {
        return this.nodeConfig;
    }
    /**
     * The number of nodes in the pool.
     * 
     */
    @Export(name="nodeCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> nodeCount;

    /**
     * @return The number of nodes in the pool.
     * 
     */
    public Output<Integer> nodeCount() {
        return this.nodeCount;
    }
    /**
     * Name of the Google Distributed Cloud Edge zone where this node pool will be created. For example: `us-central1-edge-customer-a`.
     * 
     */
    @Export(name="nodeLocation", refs={String.class}, tree="[0]")
    private Output<String> nodeLocation;

    /**
     * @return Name of the Google Distributed Cloud Edge zone where this node pool will be created. For example: `us-central1-edge-customer-a`.
     * 
     */
    public Output<String> nodeLocation() {
        return this.nodeLocation;
    }
    /**
     * The lowest release version among all worker nodes.
     * 
     */
    @Export(name="nodeVersion", refs={String.class}, tree="[0]")
    private Output<String> nodeVersion;

    /**
     * @return The lowest release version among all worker nodes.
     * 
     */
    public Output<String> nodeVersion() {
        return this.nodeVersion;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The time when the node pool was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The time when the node pool was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NodePool(java.lang.String name) {
        this(name, NodePoolArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NodePool(java.lang.String name, NodePoolArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NodePool(java.lang.String name, NodePoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:edgecontainer/nodePool:NodePool", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NodePool(java.lang.String name, Output<java.lang.String> id, @Nullable NodePoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:edgecontainer/nodePool:NodePool", name, state, makeResourceOptions(options, id), false);
    }

    private static NodePoolArgs makeArgs(NodePoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NodePoolArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NodePool get(java.lang.String name, Output<java.lang.String> id, @Nullable NodePoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NodePool(name, id, state, options);
    }
}
