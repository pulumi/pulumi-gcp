// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExtensionsInstanceRuntimeDataProcessingStateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExtensionsInstanceRuntimeDataProcessingStateArgs Empty = new ExtensionsInstanceRuntimeDataProcessingStateArgs();

    /**
     * Details about the processing. e.g. This could include the type of
     * processing in progress or it could list errors or failures.
     * This information will be shown in the console on the detail page
     * for the extension instance.
     * 
     */
    @Import(name="detailMessage")
    private @Nullable Output<String> detailMessage;

    /**
     * @return Details about the processing. e.g. This could include the type of
     * processing in progress or it could list errors or failures.
     * This information will be shown in the console on the detail page
     * for the extension instance.
     * 
     */
    public Optional<Output<String>> detailMessage() {
        return Optional.ofNullable(this.detailMessage);
    }

    /**
     * The processing state of the extension instance.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The processing state of the extension instance.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private ExtensionsInstanceRuntimeDataProcessingStateArgs() {}

    private ExtensionsInstanceRuntimeDataProcessingStateArgs(ExtensionsInstanceRuntimeDataProcessingStateArgs $) {
        this.detailMessage = $.detailMessage;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExtensionsInstanceRuntimeDataProcessingStateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExtensionsInstanceRuntimeDataProcessingStateArgs $;

        public Builder() {
            $ = new ExtensionsInstanceRuntimeDataProcessingStateArgs();
        }

        public Builder(ExtensionsInstanceRuntimeDataProcessingStateArgs defaults) {
            $ = new ExtensionsInstanceRuntimeDataProcessingStateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param detailMessage Details about the processing. e.g. This could include the type of
         * processing in progress or it could list errors or failures.
         * This information will be shown in the console on the detail page
         * for the extension instance.
         * 
         * @return builder
         * 
         */
        public Builder detailMessage(@Nullable Output<String> detailMessage) {
            $.detailMessage = detailMessage;
            return this;
        }

        /**
         * @param detailMessage Details about the processing. e.g. This could include the type of
         * processing in progress or it could list errors or failures.
         * This information will be shown in the console on the detail page
         * for the extension instance.
         * 
         * @return builder
         * 
         */
        public Builder detailMessage(String detailMessage) {
            return detailMessage(Output.of(detailMessage));
        }

        /**
         * @param state The processing state of the extension instance.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The processing state of the extension instance.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public ExtensionsInstanceRuntimeDataProcessingStateArgs build() {
            return $;
        }
    }

}
