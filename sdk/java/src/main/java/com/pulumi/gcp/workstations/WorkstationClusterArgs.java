// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workstations;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.workstations.inputs.WorkstationClusterPrivateClusterConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkstationClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkstationClusterArgs Empty = new WorkstationClusterArgs();

    /**
     * Client-specified annotations. This is distinct from labels.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Client-specified annotations. This is distinct from labels.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Human-readable name for this resource.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Human-readable name for this resource.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location where the workstation cluster should reside.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location where the workstation cluster should reside.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The relative resource name of the VPC network on which the instance can be accessed.
     * It is specified in the following form: &#34;projects/{projectNumber}/global/networks/{network_id}&#34;.
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    /**
     * @return The relative resource name of the VPC network on which the instance can be accessed.
     * It is specified in the following form: &#34;projects/{projectNumber}/global/networks/{network_id}&#34;.
     * 
     */
    public Output<String> network() {
        return this.network;
    }

    /**
     * Configuration for private cluster.
     * Structure is documented below.
     * 
     */
    @Import(name="privateClusterConfig")
    private @Nullable Output<WorkstationClusterPrivateClusterConfigArgs> privateClusterConfig;

    /**
     * @return Configuration for private cluster.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WorkstationClusterPrivateClusterConfigArgs>> privateClusterConfig() {
        return Optional.ofNullable(this.privateClusterConfig);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Name of the Compute Engine subnetwork in which instances associated with this cluster will be created.
     * Must be part of the subnetwork specified for this cluster.
     * 
     */
    @Import(name="subnetwork", required=true)
    private Output<String> subnetwork;

    /**
     * @return Name of the Compute Engine subnetwork in which instances associated with this cluster will be created.
     * Must be part of the subnetwork specified for this cluster.
     * 
     */
    public Output<String> subnetwork() {
        return this.subnetwork;
    }

    /**
     * The ID of the workstation cluster.
     * 
     */
    @Import(name="workstationClusterId", required=true)
    private Output<String> workstationClusterId;

    /**
     * @return The ID of the workstation cluster.
     * 
     */
    public Output<String> workstationClusterId() {
        return this.workstationClusterId;
    }

    private WorkstationClusterArgs() {}

    private WorkstationClusterArgs(WorkstationClusterArgs $) {
        this.annotations = $.annotations;
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.location = $.location;
        this.network = $.network;
        this.privateClusterConfig = $.privateClusterConfig;
        this.project = $.project;
        this.subnetwork = $.subnetwork;
        this.workstationClusterId = $.workstationClusterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkstationClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkstationClusterArgs $;

        public Builder() {
            $ = new WorkstationClusterArgs();
        }

        public Builder(WorkstationClusterArgs defaults) {
            $ = new WorkstationClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Client-specified annotations. This is distinct from labels.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Client-specified annotations. This is distinct from labels.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param displayName Human-readable name for this resource.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Human-readable name for this resource.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param labels Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location where the workstation cluster should reside.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location where the workstation cluster should reside.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param network The relative resource name of the VPC network on which the instance can be accessed.
         * It is specified in the following form: &#34;projects/{projectNumber}/global/networks/{network_id}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The relative resource name of the VPC network on which the instance can be accessed.
         * It is specified in the following form: &#34;projects/{projectNumber}/global/networks/{network_id}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param privateClusterConfig Configuration for private cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder privateClusterConfig(@Nullable Output<WorkstationClusterPrivateClusterConfigArgs> privateClusterConfig) {
            $.privateClusterConfig = privateClusterConfig;
            return this;
        }

        /**
         * @param privateClusterConfig Configuration for private cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder privateClusterConfig(WorkstationClusterPrivateClusterConfigArgs privateClusterConfig) {
            return privateClusterConfig(Output.of(privateClusterConfig));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param subnetwork Name of the Compute Engine subnetwork in which instances associated with this cluster will be created.
         * Must be part of the subnetwork specified for this cluster.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(Output<String> subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        /**
         * @param subnetwork Name of the Compute Engine subnetwork in which instances associated with this cluster will be created.
         * Must be part of the subnetwork specified for this cluster.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(String subnetwork) {
            return subnetwork(Output.of(subnetwork));
        }

        /**
         * @param workstationClusterId The ID of the workstation cluster.
         * 
         * @return builder
         * 
         */
        public Builder workstationClusterId(Output<String> workstationClusterId) {
            $.workstationClusterId = workstationClusterId;
            return this;
        }

        /**
         * @param workstationClusterId The ID of the workstation cluster.
         * 
         * @return builder
         * 
         */
        public Builder workstationClusterId(String workstationClusterId) {
            return workstationClusterId(Output.of(workstationClusterId));
        }

        public WorkstationClusterArgs build() {
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.subnetwork = Objects.requireNonNull($.subnetwork, "expected parameter 'subnetwork' to be non-null");
            $.workstationClusterId = Objects.requireNonNull($.workstationClusterId, "expected parameter 'workstationClusterId' to be non-null");
            return $;
        }
    }

}
