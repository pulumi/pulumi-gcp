// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkconnectivity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceConnectionPolicyPscConnectionErrorInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceConnectionPolicyPscConnectionErrorInfoArgs Empty = new ServiceConnectionPolicyPscConnectionErrorInfoArgs();

    /**
     * The logical grouping to which the &#34;reason&#34; belongs.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The logical grouping to which the &#34;reason&#34; belongs.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Additional structured details about this error.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return Additional structured details about this error.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The reason of the error.
     * 
     */
    @Import(name="reason")
    private @Nullable Output<String> reason;

    /**
     * @return The reason of the error.
     * 
     */
    public Optional<Output<String>> reason() {
        return Optional.ofNullable(this.reason);
    }

    private ServiceConnectionPolicyPscConnectionErrorInfoArgs() {}

    private ServiceConnectionPolicyPscConnectionErrorInfoArgs(ServiceConnectionPolicyPscConnectionErrorInfoArgs $) {
        this.domain = $.domain;
        this.metadata = $.metadata;
        this.reason = $.reason;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceConnectionPolicyPscConnectionErrorInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceConnectionPolicyPscConnectionErrorInfoArgs $;

        public Builder() {
            $ = new ServiceConnectionPolicyPscConnectionErrorInfoArgs();
        }

        public Builder(ServiceConnectionPolicyPscConnectionErrorInfoArgs defaults) {
            $ = new ServiceConnectionPolicyPscConnectionErrorInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The logical grouping to which the &#34;reason&#34; belongs.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The logical grouping to which the &#34;reason&#34; belongs.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param metadata Additional structured details about this error.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Additional structured details about this error.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param reason The reason of the error.
         * 
         * @return builder
         * 
         */
        public Builder reason(@Nullable Output<String> reason) {
            $.reason = reason;
            return this;
        }

        /**
         * @param reason The reason of the error.
         * 
         * @return builder
         * 
         */
        public Builder reason(String reason) {
            return reason(Output.of(reason));
        }

        public ServiceConnectionPolicyPscConnectionErrorInfoArgs build() {
            return $;
        }
    }

}
