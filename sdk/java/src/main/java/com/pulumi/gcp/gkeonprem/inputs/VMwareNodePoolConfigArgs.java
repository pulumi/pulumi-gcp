// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkeonprem.inputs.VMwareNodePoolConfigTaintArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareNodePoolConfigVsphereConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VMwareNodePoolConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final VMwareNodePoolConfigArgs Empty = new VMwareNodePoolConfigArgs();

    /**
     * VMware disk size to be used during creation.
     * 
     */
    @Import(name="bootDiskSizeGb")
    private @Nullable Output<Integer> bootDiskSizeGb;

    /**
     * @return VMware disk size to be used during creation.
     * 
     */
    public Optional<Output<Integer>> bootDiskSizeGb() {
        return Optional.ofNullable(this.bootDiskSizeGb);
    }

    /**
     * The number of CPUs for each node in the node pool.
     * 
     */
    @Import(name="cpus")
    private @Nullable Output<Integer> cpus;

    /**
     * @return The number of CPUs for each node in the node pool.
     * 
     */
    public Optional<Output<Integer>> cpus() {
        return Optional.ofNullable(this.cpus);
    }

    /**
     * Allow node pool traffic to be load balanced. Only works for clusters with
     * MetalLB load balancers.
     * 
     */
    @Import(name="enableLoadBalancer")
    private @Nullable Output<Boolean> enableLoadBalancer;

    /**
     * @return Allow node pool traffic to be load balanced. Only works for clusters with
     * MetalLB load balancers.
     * 
     */
    public Optional<Output<Boolean>> enableLoadBalancer() {
        return Optional.ofNullable(this.enableLoadBalancer);
    }

    /**
     * The OS image name in vCenter, only valid when using Windows.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return The OS image name in vCenter, only valid when using Windows.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * The OS image to be used for each node in a node pool.
     * Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
     * 
     */
    @Import(name="imageType", required=true)
    private Output<String> imageType;

    /**
     * @return The OS image to be used for each node in a node pool.
     * Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
     * 
     */
    public Output<String> imageType() {
        return this.imageType;
    }

    /**
     * The map of Kubernetes labels (key/value pairs) to be applied to each node.
     * These will added in addition to any default label(s) that
     * Kubernetes may apply to the node.
     * In case of conflict in label keys, the applied set may differ depending on
     * the Kubernetes version -- it&#39;s best to assume the behavior is undefined
     * and conflicts should be avoided.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The map of Kubernetes labels (key/value pairs) to be applied to each node.
     * These will added in addition to any default label(s) that
     * Kubernetes may apply to the node.
     * In case of conflict in label keys, the applied set may differ depending on
     * the Kubernetes version -- it&#39;s best to assume the behavior is undefined
     * and conflicts should be avoided.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The megabytes of memory for each node in the node pool.
     * 
     */
    @Import(name="memoryMb")
    private @Nullable Output<Integer> memoryMb;

    /**
     * @return The megabytes of memory for each node in the node pool.
     * 
     */
    public Optional<Output<Integer>> memoryMb() {
        return Optional.ofNullable(this.memoryMb);
    }

    /**
     * The number of nodes in the node pool.
     * 
     */
    @Import(name="replicas")
    private @Nullable Output<Integer> replicas;

    /**
     * @return The number of nodes in the node pool.
     * 
     */
    public Optional<Output<Integer>> replicas() {
        return Optional.ofNullable(this.replicas);
    }

    /**
     * The initial taints assigned to nodes of this node pool.
     * Structure is documented below.
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<VMwareNodePoolConfigTaintArgs>> taints;

    /**
     * @return The initial taints assigned to nodes of this node pool.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<VMwareNodePoolConfigTaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    /**
     * (Output)
     * Specifies the vSphere config for node pool.
     * Structure is documented below.
     * 
     */
    @Import(name="vsphereConfigs")
    private @Nullable Output<List<VMwareNodePoolConfigVsphereConfigArgs>> vsphereConfigs;

    /**
     * @return (Output)
     * Specifies the vSphere config for node pool.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<VMwareNodePoolConfigVsphereConfigArgs>>> vsphereConfigs() {
        return Optional.ofNullable(this.vsphereConfigs);
    }

    private VMwareNodePoolConfigArgs() {}

    private VMwareNodePoolConfigArgs(VMwareNodePoolConfigArgs $) {
        this.bootDiskSizeGb = $.bootDiskSizeGb;
        this.cpus = $.cpus;
        this.enableLoadBalancer = $.enableLoadBalancer;
        this.image = $.image;
        this.imageType = $.imageType;
        this.labels = $.labels;
        this.memoryMb = $.memoryMb;
        this.replicas = $.replicas;
        this.taints = $.taints;
        this.vsphereConfigs = $.vsphereConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VMwareNodePoolConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VMwareNodePoolConfigArgs $;

        public Builder() {
            $ = new VMwareNodePoolConfigArgs();
        }

        public Builder(VMwareNodePoolConfigArgs defaults) {
            $ = new VMwareNodePoolConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootDiskSizeGb VMware disk size to be used during creation.
         * 
         * @return builder
         * 
         */
        public Builder bootDiskSizeGb(@Nullable Output<Integer> bootDiskSizeGb) {
            $.bootDiskSizeGb = bootDiskSizeGb;
            return this;
        }

        /**
         * @param bootDiskSizeGb VMware disk size to be used during creation.
         * 
         * @return builder
         * 
         */
        public Builder bootDiskSizeGb(Integer bootDiskSizeGb) {
            return bootDiskSizeGb(Output.of(bootDiskSizeGb));
        }

        /**
         * @param cpus The number of CPUs for each node in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder cpus(@Nullable Output<Integer> cpus) {
            $.cpus = cpus;
            return this;
        }

        /**
         * @param cpus The number of CPUs for each node in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder cpus(Integer cpus) {
            return cpus(Output.of(cpus));
        }

        /**
         * @param enableLoadBalancer Allow node pool traffic to be load balanced. Only works for clusters with
         * MetalLB load balancers.
         * 
         * @return builder
         * 
         */
        public Builder enableLoadBalancer(@Nullable Output<Boolean> enableLoadBalancer) {
            $.enableLoadBalancer = enableLoadBalancer;
            return this;
        }

        /**
         * @param enableLoadBalancer Allow node pool traffic to be load balanced. Only works for clusters with
         * MetalLB load balancers.
         * 
         * @return builder
         * 
         */
        public Builder enableLoadBalancer(Boolean enableLoadBalancer) {
            return enableLoadBalancer(Output.of(enableLoadBalancer));
        }

        /**
         * @param image The OS image name in vCenter, only valid when using Windows.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The OS image name in vCenter, only valid when using Windows.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param imageType The OS image to be used for each node in a node pool.
         * Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
         * 
         * @return builder
         * 
         */
        public Builder imageType(Output<String> imageType) {
            $.imageType = imageType;
            return this;
        }

        /**
         * @param imageType The OS image to be used for each node in a node pool.
         * Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
         * 
         * @return builder
         * 
         */
        public Builder imageType(String imageType) {
            return imageType(Output.of(imageType));
        }

        /**
         * @param labels The map of Kubernetes labels (key/value pairs) to be applied to each node.
         * These will added in addition to any default label(s) that
         * Kubernetes may apply to the node.
         * In case of conflict in label keys, the applied set may differ depending on
         * the Kubernetes version -- it&#39;s best to assume the behavior is undefined
         * and conflicts should be avoided.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The map of Kubernetes labels (key/value pairs) to be applied to each node.
         * These will added in addition to any default label(s) that
         * Kubernetes may apply to the node.
         * In case of conflict in label keys, the applied set may differ depending on
         * the Kubernetes version -- it&#39;s best to assume the behavior is undefined
         * and conflicts should be avoided.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param memoryMb The megabytes of memory for each node in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder memoryMb(@Nullable Output<Integer> memoryMb) {
            $.memoryMb = memoryMb;
            return this;
        }

        /**
         * @param memoryMb The megabytes of memory for each node in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder memoryMb(Integer memoryMb) {
            return memoryMb(Output.of(memoryMb));
        }

        /**
         * @param replicas The number of nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder replicas(@Nullable Output<Integer> replicas) {
            $.replicas = replicas;
            return this;
        }

        /**
         * @param replicas The number of nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder replicas(Integer replicas) {
            return replicas(Output.of(replicas));
        }

        /**
         * @param taints The initial taints assigned to nodes of this node pool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder taints(@Nullable Output<List<VMwareNodePoolConfigTaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints The initial taints assigned to nodes of this node pool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder taints(List<VMwareNodePoolConfigTaintArgs> taints) {
            return taints(Output.of(taints));
        }

        /**
         * @param taints The initial taints assigned to nodes of this node pool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder taints(VMwareNodePoolConfigTaintArgs... taints) {
            return taints(List.of(taints));
        }

        /**
         * @param vsphereConfigs (Output)
         * Specifies the vSphere config for node pool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vsphereConfigs(@Nullable Output<List<VMwareNodePoolConfigVsphereConfigArgs>> vsphereConfigs) {
            $.vsphereConfigs = vsphereConfigs;
            return this;
        }

        /**
         * @param vsphereConfigs (Output)
         * Specifies the vSphere config for node pool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vsphereConfigs(List<VMwareNodePoolConfigVsphereConfigArgs> vsphereConfigs) {
            return vsphereConfigs(Output.of(vsphereConfigs));
        }

        /**
         * @param vsphereConfigs (Output)
         * Specifies the vSphere config for node pool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vsphereConfigs(VMwareNodePoolConfigVsphereConfigArgs... vsphereConfigs) {
            return vsphereConfigs(List.of(vsphereConfigs));
        }

        public VMwareNodePoolConfigArgs build() {
            $.imageType = Objects.requireNonNull($.imageType, "expected parameter 'imageType' to be non-null");
            return $;
        }
    }

}
