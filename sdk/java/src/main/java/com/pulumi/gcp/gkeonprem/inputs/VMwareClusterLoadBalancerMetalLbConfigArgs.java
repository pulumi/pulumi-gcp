// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs;
import java.util.List;
import java.util.Objects;


public final class VMwareClusterLoadBalancerMetalLbConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final VMwareClusterLoadBalancerMetalLbConfigArgs Empty = new VMwareClusterLoadBalancerMetalLbConfigArgs();

    /**
     * AddressPools is a list of non-overlapping IP pools used by load balancer
     * typed services. All addresses must be routable to load balancer nodes.
     * IngressVIP must be included in the pools.
     * Structure is documented below.
     * 
     */
    @Import(name="addressPools", required=true)
    private Output<List<VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs>> addressPools;

    /**
     * @return AddressPools is a list of non-overlapping IP pools used by load balancer
     * typed services. All addresses must be routable to load balancer nodes.
     * IngressVIP must be included in the pools.
     * Structure is documented below.
     * 
     */
    public Output<List<VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs>> addressPools() {
        return this.addressPools;
    }

    private VMwareClusterLoadBalancerMetalLbConfigArgs() {}

    private VMwareClusterLoadBalancerMetalLbConfigArgs(VMwareClusterLoadBalancerMetalLbConfigArgs $) {
        this.addressPools = $.addressPools;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VMwareClusterLoadBalancerMetalLbConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VMwareClusterLoadBalancerMetalLbConfigArgs $;

        public Builder() {
            $ = new VMwareClusterLoadBalancerMetalLbConfigArgs();
        }

        public Builder(VMwareClusterLoadBalancerMetalLbConfigArgs defaults) {
            $ = new VMwareClusterLoadBalancerMetalLbConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressPools AddressPools is a list of non-overlapping IP pools used by load balancer
         * typed services. All addresses must be routable to load balancer nodes.
         * IngressVIP must be included in the pools.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder addressPools(Output<List<VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs>> addressPools) {
            $.addressPools = addressPools;
            return this;
        }

        /**
         * @param addressPools AddressPools is a list of non-overlapping IP pools used by load balancer
         * typed services. All addresses must be routable to load balancer nodes.
         * IngressVIP must be included in the pools.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder addressPools(List<VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs> addressPools) {
            return addressPools(Output.of(addressPools));
        }

        /**
         * @param addressPools AddressPools is a list of non-overlapping IP pools used by load balancer
         * typed services. All addresses must be routable to load balancer nodes.
         * IngressVIP must be included in the pools.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder addressPools(VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs... addressPools) {
            return addressPools(List.of(addressPools));
        }

        public VMwareClusterLoadBalancerMetalLbConfigArgs build() {
            $.addressPools = Objects.requireNonNull($.addressPools, "expected parameter 'addressPools' to be non-null");
            return $;
        }
    }

}
