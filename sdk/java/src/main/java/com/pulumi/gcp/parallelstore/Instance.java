// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.parallelstore;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.parallelstore.InstanceArgs;
import com.pulumi.gcp.parallelstore.inputs.InstanceState;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Parallelstore Instance.
 * 
 * ## Example Usage
 * 
 * ### Parallelstore Instance Basic Beta
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.parallelstore.Instance;
 * import com.pulumi.gcp.parallelstore.InstanceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("network")
 *             .autoCreateSubnetworks(true)
 *             .mtu(8896)
 *             .build());
 * 
 *         // Create an IP address
 *         var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
 *             .name("address")
 *             .purpose("VPC_PEERING")
 *             .addressType("INTERNAL")
 *             .prefixLength(24)
 *             .network(network.id())
 *             .build());
 * 
 *         // Create a private connection
 *         var default_ = new Connection("default", ConnectionArgs.builder()
 *             .network(network.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(privateIpAlloc.name())
 *             .build());
 * 
 *         var instance = new Instance("instance", InstanceArgs.builder()
 *             .instanceId("instance")
 *             .location("us-central1-a")
 *             .description("test instance")
 *             .capacityGib(12000)
 *             .network(network.name())
 *             .fileStripeLevel("FILE_STRIPE_LEVEL_MIN")
 *             .directoryStripeLevel("DIRECTORY_STRIPE_LEVEL_MIN")
 *             .deploymentType("SCRATCH")
 *             .labels(Map.of("test", "value"))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(default_)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Parallelstore Instance Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.parallelstore.Instance;
 * import com.pulumi.gcp.parallelstore.InstanceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("network")
 *             .autoCreateSubnetworks(true)
 *             .mtu(8896)
 *             .build());
 * 
 *         // Create an IP address
 *         var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
 *             .name("address")
 *             .purpose("VPC_PEERING")
 *             .addressType("INTERNAL")
 *             .prefixLength(24)
 *             .network(network.id())
 *             .build());
 * 
 *         // Create a private connection
 *         var default_ = new Connection("default", ConnectionArgs.builder()
 *             .network(network.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(privateIpAlloc.name())
 *             .build());
 * 
 *         var instance = new Instance("instance", InstanceArgs.builder()
 *             .instanceId("instance")
 *             .location("us-central1-a")
 *             .description("test instance")
 *             .capacityGib(12000)
 *             .network(network.name())
 *             .fileStripeLevel("FILE_STRIPE_LEVEL_MIN")
 *             .directoryStripeLevel("DIRECTORY_STRIPE_LEVEL_MIN")
 *             .deploymentType("SCRATCH")
 *             .labels(Map.of("test", "value"))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(default_)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Instance can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/instances/{{instance_id}}`
 * 
 * * `{{project}}/{{location}}/{{instance_id}}`
 * 
 * * `{{location}}/{{instance_id}}`
 * 
 * When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:parallelstore/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{instance_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:parallelstore/instance:Instance default {{project}}/{{location}}/{{instance_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:parallelstore/instance:Instance default {{location}}/{{instance_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:parallelstore/instance:Instance")
public class Instance extends com.pulumi.resources.CustomResource {
    /**
     * Output only. List of access_points.
     * Contains a list of IPv4 addresses used for client side configuration.
     * 
     */
    @Export(name="accessPoints", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> accessPoints;

    /**
     * @return Output only. List of access_points.
     * Contains a list of IPv4 addresses used for client side configuration.
     * 
     */
    public Output<List<String>> accessPoints() {
        return this.accessPoints;
    }
    /**
     * Required. Immutable. Storage capacity of Parallelstore instance in Gibibytes (GiB).
     * 
     */
    @Export(name="capacityGib", refs={String.class}, tree="[0]")
    private Output<String> capacityGib;

    /**
     * @return Required. Immutable. Storage capacity of Parallelstore instance in Gibibytes (GiB).
     * 
     */
    public Output<String> capacityGib() {
        return this.capacityGib;
    }
    /**
     * The time when the instance was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The time when the instance was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The version of DAOS software running in the instance.
     * 
     */
    @Export(name="daosVersion", refs={String.class}, tree="[0]")
    private Output<String> daosVersion;

    /**
     * @return The version of DAOS software running in the instance.
     * 
     */
    public Output<String> daosVersion() {
        return this.daosVersion;
    }
    /**
     * Parallelstore Instance deployment type.
     * Possible values:
     * DEPLOYMENT_TYPE_UNSPECIFIED
     * SCRATCH
     * PERSISTENT
     * 
     */
    @Export(name="deploymentType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deploymentType;

    /**
     * @return Parallelstore Instance deployment type.
     * Possible values:
     * DEPLOYMENT_TYPE_UNSPECIFIED
     * SCRATCH
     * PERSISTENT
     * 
     */
    public Output<Optional<String>> deploymentType() {
        return Codegen.optional(this.deploymentType);
    }
    /**
     * The description of the instance. 2048 characters or less.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the instance. 2048 characters or less.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Stripe level for directories.
     * MIN when directory has a small number of files.
     * MAX when directory has a large number of files.
     * Possible values:
     * DIRECTORY_STRIPE_LEVEL_UNSPECIFIED
     * DIRECTORY_STRIPE_LEVEL_MIN
     * DIRECTORY_STRIPE_LEVEL_BALANCED
     * DIRECTORY_STRIPE_LEVEL_MAX
     * 
     */
    @Export(name="directoryStripeLevel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> directoryStripeLevel;

    /**
     * @return Stripe level for directories.
     * MIN when directory has a small number of files.
     * MAX when directory has a large number of files.
     * Possible values:
     * DIRECTORY_STRIPE_LEVEL_UNSPECIFIED
     * DIRECTORY_STRIPE_LEVEL_MIN
     * DIRECTORY_STRIPE_LEVEL_BALANCED
     * DIRECTORY_STRIPE_LEVEL_MAX
     * 
     */
    public Output<Optional<String>> directoryStripeLevel() {
        return Codegen.optional(this.directoryStripeLevel);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Immutable. Contains the id of the allocated IP address
     * range associated with the private service access connection for example, \&#34;test-default\&#34;
     * associated with IP range 10.0.0.0/29. This field is populated by the service
     * and contains the value currently used by the service.
     * 
     */
    @Export(name="effectiveReservedIpRange", refs={String.class}, tree="[0]")
    private Output<String> effectiveReservedIpRange;

    /**
     * @return Immutable. Contains the id of the allocated IP address
     * range associated with the private service access connection for example, \&#34;test-default\&#34;
     * associated with IP range 10.0.0.0/29. This field is populated by the service
     * and contains the value currently used by the service.
     * 
     */
    public Output<String> effectiveReservedIpRange() {
        return this.effectiveReservedIpRange;
    }
    /**
     * Stripe level for files.
     * MIN better suited for small size files.
     * MAX higher throughput performance for larger files.
     * Possible values:
     * FILE_STRIPE_LEVEL_UNSPECIFIED
     * FILE_STRIPE_LEVEL_MIN
     * FILE_STRIPE_LEVEL_BALANCED
     * FILE_STRIPE_LEVEL_MAX
     * 
     */
    @Export(name="fileStripeLevel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> fileStripeLevel;

    /**
     * @return Stripe level for files.
     * MIN better suited for small size files.
     * MAX higher throughput performance for larger files.
     * Possible values:
     * FILE_STRIPE_LEVEL_UNSPECIFIED
     * FILE_STRIPE_LEVEL_MIN
     * FILE_STRIPE_LEVEL_BALANCED
     * FILE_STRIPE_LEVEL_MAX
     * 
     */
    public Output<Optional<String>> fileStripeLevel() {
        return Codegen.optional(this.fileStripeLevel);
    }
    /**
     * The logical name of the Parallelstore instance in the user project with the following restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the customer project/ location
     * 
     * ***
     * 
     */
    @Export(name="instanceId", refs={String.class}, tree="[0]")
    private Output<String> instanceId;

    /**
     * @return The logical name of the Parallelstore instance in the user project with the following restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the customer project/ location
     * 
     * ***
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }
    /**
     * Cloud Labels are a flexible and lightweight mechanism for
     * organizing cloud resources into groups that reflect a customer&#39;s organizational
     * needs and deployment strategies. Cloud Labels can be used to filter collections
     * of resources. They can be used to control how resource metrics are aggregated.
     * And they can be used as arguments to policy management rules (e.g. route, firewall,
     * load balancing, etc.).
     * * Label keys must be between 1 and 63 characters long and must conform to
     *   the following regular expression: `a-z{0,62}`.
     * * Label values must be between 0 and 63 characters long and must conform
     *   to the regular expression `[a-z0-9_-]{0,63}`.
     * * No more than 64 labels can be associated with a given resource.
     *   See https://goo.gl/xmQnxf for more information on and examples of labels.
     *   If you plan to use labels in your own code, please note that additional
     *   characters may be allowed in the future. Therefore, you are advised to use
     *   an internal label representation, such as JSON, which doesn&#39;t rely upon
     *   specific characters being disallowed.  For example, representing labels
     *   as the string:  `name + &#34;_&#34; + value` would prove problematic if we were to
     *   allow `&#34;_&#34;` in a future release. &#34;
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Cloud Labels are a flexible and lightweight mechanism for
     * organizing cloud resources into groups that reflect a customer&#39;s organizational
     * needs and deployment strategies. Cloud Labels can be used to filter collections
     * of resources. They can be used to control how resource metrics are aggregated.
     * And they can be used as arguments to policy management rules (e.g. route, firewall,
     * load balancing, etc.).
     * * Label keys must be between 1 and 63 characters long and must conform to
     *   the following regular expression: `a-z{0,62}`.
     * * Label values must be between 0 and 63 characters long and must conform
     *   to the regular expression `[a-z0-9_-]{0,63}`.
     * * No more than 64 labels can be associated with a given resource.
     *   See https://goo.gl/xmQnxf for more information on and examples of labels.
     *   If you plan to use labels in your own code, please note that additional
     *   characters may be allowed in the future. Therefore, you are advised to use
     *   an internal label representation, such as JSON, which doesn&#39;t rely upon
     *   specific characters being disallowed.  For example, representing labels
     *   as the string:  `name + &#34;_&#34; + value` would prove problematic if we were to
     *   allow `&#34;_&#34;` in a future release. &#34;
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Part of `parent`. See documentation of `projectsId`.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Part of `parent`. See documentation of `projectsId`.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Identifier. The resource name of the instance, in the format
     * `projects/{project}/locations/{location}/instances/{instance_id}`
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. The resource name of the instance, in the format
     * `projects/{project}/locations/{location}/instances/{instance_id}`
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Immutable. The name of the Google Compute Engine [VPC network](https://cloud.google.com/vpc/docs/vpc)
     * to which the instance is connected.
     * 
     */
    @Export(name="network", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> network;

    /**
     * @return Immutable. The name of the Google Compute Engine [VPC network](https://cloud.google.com/vpc/docs/vpc)
     * to which the instance is connected.
     * 
     */
    public Output<Optional<String>> network() {
        return Codegen.optional(this.network);
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Immutable. Contains the id of the allocated IP address range
     * associated with the private service access connection for example, \&#34;test-default\&#34;
     * associated with IP range 10.0.0.0/29. If no range id is provided all ranges will
     * be considered.
     * 
     */
    @Export(name="reservedIpRange", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> reservedIpRange;

    /**
     * @return Immutable. Contains the id of the allocated IP address range
     * associated with the private service access connection for example, \&#34;test-default\&#34;
     * associated with IP range 10.0.0.0/29. If no range id is provided all ranges will
     * be considered.
     * 
     */
    public Output<Optional<String>> reservedIpRange() {
        return Codegen.optional(this.reservedIpRange);
    }
    /**
     * The instance state.
     * Possible values:
     * STATE_UNSPECIFIED
     * CREATING
     * ACTIVE
     * DELETING
     * FAILED
     * UPGRADING
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The instance state.
     * Possible values:
     * STATE_UNSPECIFIED
     * CREATING
     * ACTIVE
     * DELETING
     * FAILED
     * UPGRADING
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The time when the instance was updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The time when the instance was updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Instance(java.lang.String name) {
        this(name, InstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Instance(java.lang.String name, InstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Instance(java.lang.String name, InstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:parallelstore/instance:Instance", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Instance(java.lang.String name, Output<java.lang.String> id, @Nullable InstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:parallelstore/instance:Instance", name, state, makeResourceOptions(options, id), false);
    }

    private static InstanceArgs makeArgs(InstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InstanceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Instance get(java.lang.String name, Output<java.lang.String> id, @Nullable InstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Instance(name, id, state, options);
    }
}
