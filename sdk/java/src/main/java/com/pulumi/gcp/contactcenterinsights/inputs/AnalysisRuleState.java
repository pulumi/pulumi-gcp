// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.contactcenterinsights.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.contactcenterinsights.inputs.AnalysisRuleAnnotatorSelectorArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalysisRuleState extends com.pulumi.resources.ResourceArgs {

    public static final AnalysisRuleState Empty = new AnalysisRuleState();

    /**
     * If true, apply this rule to conversations. Otherwise, this rule is
     * inactive and saved as a draft.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return If true, apply this rule to conversations. Otherwise, this rule is
     * inactive and saved as a draft.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Percentage of conversations that we should apply this analysis setting
     * automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
     * are sampled in a determenestic way. The original runtimePercentage &amp;
     * upload percentage will be replaced by defining filters on the conversation.
     * 
     */
    @Import(name="analysisPercentage")
    private @Nullable Output<Double> analysisPercentage;

    /**
     * @return Percentage of conversations that we should apply this analysis setting
     * automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
     * are sampled in a determenestic way. The original runtimePercentage &amp;
     * upload percentage will be replaced by defining filters on the conversation.
     * 
     */
    public Optional<Output<Double>> analysisPercentage() {
        return Optional.ofNullable(this.analysisPercentage);
    }

    /**
     * Selector of all available annotators and phrase matchers to run.
     * Structure is documented below.
     * 
     */
    @Import(name="annotatorSelector")
    private @Nullable Output<AnalysisRuleAnnotatorSelectorArgs> annotatorSelector;

    /**
     * @return Selector of all available annotators and phrase matchers to run.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AnalysisRuleAnnotatorSelectorArgs>> annotatorSelector() {
        return Optional.ofNullable(this.annotatorSelector);
    }

    /**
     * Filter for the conversations that should apply this analysis
     * rule. An empty filter means this analysis rule applies to all
     * conversations.
     * Refer to https://cloud.google.com/contact-center/insights/docs/filtering
     * for details.
     * 
     */
    @Import(name="conversationFilter")
    private @Nullable Output<String> conversationFilter;

    /**
     * @return Filter for the conversations that should apply this analysis
     * rule. An empty filter means this analysis rule applies to all
     * conversations.
     * Refer to https://cloud.google.com/contact-center/insights/docs/filtering
     * for details.
     * 
     */
    public Optional<Output<String>> conversationFilter() {
        return Optional.ofNullable(this.conversationFilter);
    }

    /**
     * Output only. The time at which this analysis rule was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. The time at which this analysis rule was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Display Name of the analysis rule.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display Name of the analysis rule.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location of the resource.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the analysis rule. Randomly generated by Insights.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the analysis rule. Randomly generated by Insights.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Output only. The most recent time at which this analysis rule was updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. The most recent time at which this analysis rule was updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private AnalysisRuleState() {}

    private AnalysisRuleState(AnalysisRuleState $) {
        this.active = $.active;
        this.analysisPercentage = $.analysisPercentage;
        this.annotatorSelector = $.annotatorSelector;
        this.conversationFilter = $.conversationFilter;
        this.createTime = $.createTime;
        this.displayName = $.displayName;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalysisRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalysisRuleState $;

        public Builder() {
            $ = new AnalysisRuleState();
        }

        public Builder(AnalysisRuleState defaults) {
            $ = new AnalysisRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param active If true, apply this rule to conversations. Otherwise, this rule is
         * inactive and saved as a draft.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active If true, apply this rule to conversations. Otherwise, this rule is
         * inactive and saved as a draft.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param analysisPercentage Percentage of conversations that we should apply this analysis setting
         * automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
         * are sampled in a determenestic way. The original runtimePercentage &amp;
         * upload percentage will be replaced by defining filters on the conversation.
         * 
         * @return builder
         * 
         */
        public Builder analysisPercentage(@Nullable Output<Double> analysisPercentage) {
            $.analysisPercentage = analysisPercentage;
            return this;
        }

        /**
         * @param analysisPercentage Percentage of conversations that we should apply this analysis setting
         * automatically, between [0, 1]. For example, 0.1 means 10%. Conversations
         * are sampled in a determenestic way. The original runtimePercentage &amp;
         * upload percentage will be replaced by defining filters on the conversation.
         * 
         * @return builder
         * 
         */
        public Builder analysisPercentage(Double analysisPercentage) {
            return analysisPercentage(Output.of(analysisPercentage));
        }

        /**
         * @param annotatorSelector Selector of all available annotators and phrase matchers to run.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder annotatorSelector(@Nullable Output<AnalysisRuleAnnotatorSelectorArgs> annotatorSelector) {
            $.annotatorSelector = annotatorSelector;
            return this;
        }

        /**
         * @param annotatorSelector Selector of all available annotators and phrase matchers to run.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder annotatorSelector(AnalysisRuleAnnotatorSelectorArgs annotatorSelector) {
            return annotatorSelector(Output.of(annotatorSelector));
        }

        /**
         * @param conversationFilter Filter for the conversations that should apply this analysis
         * rule. An empty filter means this analysis rule applies to all
         * conversations.
         * Refer to https://cloud.google.com/contact-center/insights/docs/filtering
         * for details.
         * 
         * @return builder
         * 
         */
        public Builder conversationFilter(@Nullable Output<String> conversationFilter) {
            $.conversationFilter = conversationFilter;
            return this;
        }

        /**
         * @param conversationFilter Filter for the conversations that should apply this analysis
         * rule. An empty filter means this analysis rule applies to all
         * conversations.
         * Refer to https://cloud.google.com/contact-center/insights/docs/filtering
         * for details.
         * 
         * @return builder
         * 
         */
        public Builder conversationFilter(String conversationFilter) {
            return conversationFilter(Output.of(conversationFilter));
        }

        /**
         * @param createTime Output only. The time at which this analysis rule was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. The time at which this analysis rule was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param displayName Display Name of the analysis rule.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display Name of the analysis rule.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param location Location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the analysis rule. Randomly generated by Insights.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the analysis rule. Randomly generated by Insights.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param updateTime Output only. The most recent time at which this analysis rule was updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. The most recent time at which this analysis rule was updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public AnalysisRuleState build() {
            return $;
        }
    }

}
