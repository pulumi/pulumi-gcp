// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddomains.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistrationManagementSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistrationManagementSettingsArgs Empty = new RegistrationManagementSettingsArgs();

    /**
     * The desired renewal method for this Registration. The actual renewalMethod is automatically updated to reflect this choice.
     * If unset or equal to RENEWAL_METHOD_UNSPECIFIED, the actual renewalMethod is treated as if it were set to AUTOMATIC_RENEWAL.
     * You cannot use RENEWAL_DISABLED during resource creation, and you can update the renewal status only when the Registration
     * resource has state ACTIVE or SUSPENDED.
     * When preferredRenewalMethod is set to AUTOMATIC_RENEWAL, the actual renewalMethod can be set to RENEWAL_DISABLED in case of
     * problems with the billing account or reported domain abuse. In such cases, check the issues field on the Registration. After
     * the problem is resolved, the renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
     * 
     */
    @Import(name="preferredRenewalMethod")
    private @Nullable Output<String> preferredRenewalMethod;

    /**
     * @return The desired renewal method for this Registration. The actual renewalMethod is automatically updated to reflect this choice.
     * If unset or equal to RENEWAL_METHOD_UNSPECIFIED, the actual renewalMethod is treated as if it were set to AUTOMATIC_RENEWAL.
     * You cannot use RENEWAL_DISABLED during resource creation, and you can update the renewal status only when the Registration
     * resource has state ACTIVE or SUSPENDED.
     * When preferredRenewalMethod is set to AUTOMATIC_RENEWAL, the actual renewalMethod can be set to RENEWAL_DISABLED in case of
     * problems with the billing account or reported domain abuse. In such cases, check the issues field on the Registration. After
     * the problem is resolved, the renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
     * 
     */
    public Optional<Output<String>> preferredRenewalMethod() {
        return Optional.ofNullable(this.preferredRenewalMethod);
    }

    /**
     * (Output)
     * Output only. The actual renewal method for this Registration. When preferredRenewalMethod is set to AUTOMATIC_RENEWAL,
     * the actual renewalMethod can be equal to RENEWAL_DISABLED—for example, when there are problems with the billing account
     * or reported domain abuse. In such cases, check the issues field on the Registration. After the problem is resolved, the
     * renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
     * 
     */
    @Import(name="renewalMethod")
    private @Nullable Output<String> renewalMethod;

    /**
     * @return (Output)
     * Output only. The actual renewal method for this Registration. When preferredRenewalMethod is set to AUTOMATIC_RENEWAL,
     * the actual renewalMethod can be equal to RENEWAL_DISABLED—for example, when there are problems with the billing account
     * or reported domain abuse. In such cases, check the issues field on the Registration. After the problem is resolved, the
     * renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
     * 
     */
    public Optional<Output<String>> renewalMethod() {
        return Optional.ofNullable(this.renewalMethod);
    }

    /**
     * Controls whether the domain can be transferred to another registrar. Values are UNLOCKED or LOCKED.
     * 
     */
    @Import(name="transferLockState")
    private @Nullable Output<String> transferLockState;

    /**
     * @return Controls whether the domain can be transferred to another registrar. Values are UNLOCKED or LOCKED.
     * 
     */
    public Optional<Output<String>> transferLockState() {
        return Optional.ofNullable(this.transferLockState);
    }

    private RegistrationManagementSettingsArgs() {}

    private RegistrationManagementSettingsArgs(RegistrationManagementSettingsArgs $) {
        this.preferredRenewalMethod = $.preferredRenewalMethod;
        this.renewalMethod = $.renewalMethod;
        this.transferLockState = $.transferLockState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistrationManagementSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistrationManagementSettingsArgs $;

        public Builder() {
            $ = new RegistrationManagementSettingsArgs();
        }

        public Builder(RegistrationManagementSettingsArgs defaults) {
            $ = new RegistrationManagementSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param preferredRenewalMethod The desired renewal method for this Registration. The actual renewalMethod is automatically updated to reflect this choice.
         * If unset or equal to RENEWAL_METHOD_UNSPECIFIED, the actual renewalMethod is treated as if it were set to AUTOMATIC_RENEWAL.
         * You cannot use RENEWAL_DISABLED during resource creation, and you can update the renewal status only when the Registration
         * resource has state ACTIVE or SUSPENDED.
         * When preferredRenewalMethod is set to AUTOMATIC_RENEWAL, the actual renewalMethod can be set to RENEWAL_DISABLED in case of
         * problems with the billing account or reported domain abuse. In such cases, check the issues field on the Registration. After
         * the problem is resolved, the renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
         * 
         * @return builder
         * 
         */
        public Builder preferredRenewalMethod(@Nullable Output<String> preferredRenewalMethod) {
            $.preferredRenewalMethod = preferredRenewalMethod;
            return this;
        }

        /**
         * @param preferredRenewalMethod The desired renewal method for this Registration. The actual renewalMethod is automatically updated to reflect this choice.
         * If unset or equal to RENEWAL_METHOD_UNSPECIFIED, the actual renewalMethod is treated as if it were set to AUTOMATIC_RENEWAL.
         * You cannot use RENEWAL_DISABLED during resource creation, and you can update the renewal status only when the Registration
         * resource has state ACTIVE or SUSPENDED.
         * When preferredRenewalMethod is set to AUTOMATIC_RENEWAL, the actual renewalMethod can be set to RENEWAL_DISABLED in case of
         * problems with the billing account or reported domain abuse. In such cases, check the issues field on the Registration. After
         * the problem is resolved, the renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
         * 
         * @return builder
         * 
         */
        public Builder preferredRenewalMethod(String preferredRenewalMethod) {
            return preferredRenewalMethod(Output.of(preferredRenewalMethod));
        }

        /**
         * @param renewalMethod (Output)
         * Output only. The actual renewal method for this Registration. When preferredRenewalMethod is set to AUTOMATIC_RENEWAL,
         * the actual renewalMethod can be equal to RENEWAL_DISABLED—for example, when there are problems with the billing account
         * or reported domain abuse. In such cases, check the issues field on the Registration. After the problem is resolved, the
         * renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
         * 
         * @return builder
         * 
         */
        public Builder renewalMethod(@Nullable Output<String> renewalMethod) {
            $.renewalMethod = renewalMethod;
            return this;
        }

        /**
         * @param renewalMethod (Output)
         * Output only. The actual renewal method for this Registration. When preferredRenewalMethod is set to AUTOMATIC_RENEWAL,
         * the actual renewalMethod can be equal to RENEWAL_DISABLED—for example, when there are problems with the billing account
         * or reported domain abuse. In such cases, check the issues field on the Registration. After the problem is resolved, the
         * renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
         * 
         * @return builder
         * 
         */
        public Builder renewalMethod(String renewalMethod) {
            return renewalMethod(Output.of(renewalMethod));
        }

        /**
         * @param transferLockState Controls whether the domain can be transferred to another registrar. Values are UNLOCKED or LOCKED.
         * 
         * @return builder
         * 
         */
        public Builder transferLockState(@Nullable Output<String> transferLockState) {
            $.transferLockState = transferLockState;
            return this;
        }

        /**
         * @param transferLockState Controls whether the domain can be transferred to another registrar. Values are UNLOCKED or LOCKED.
         * 
         * @return builder
         * 
         */
        public Builder transferLockState(String transferLockState) {
            return transferLockState(Output.of(transferLockState));
        }

        public RegistrationManagementSettingsArgs build() {
            return $;
        }
    }

}
