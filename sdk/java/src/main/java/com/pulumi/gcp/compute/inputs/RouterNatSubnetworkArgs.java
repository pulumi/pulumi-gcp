// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouterNatSubnetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouterNatSubnetworkArgs Empty = new RouterNatSubnetworkArgs();

    /**
     * Self-link of subnetwork to NAT
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Self-link of subnetwork to NAT
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * List of the secondary ranges of the subnetwork that are allowed
     * to use NAT. This can be populated only if
     * `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
     * sourceIpRangesToNat
     * 
     */
    @Import(name="secondaryIpRangeNames")
    private @Nullable Output<List<String>> secondaryIpRangeNames;

    /**
     * @return List of the secondary ranges of the subnetwork that are allowed
     * to use NAT. This can be populated only if
     * `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
     * sourceIpRangesToNat
     * 
     */
    public Optional<Output<List<String>>> secondaryIpRangeNames() {
        return Optional.ofNullable(this.secondaryIpRangeNames);
    }

    /**
     * List of options for which source IPs in the subnetwork
     * should have NAT enabled. Supported values include:
     * `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
     * `PRIMARY_IP_RANGE`.
     * 
     */
    @Import(name="sourceIpRangesToNats", required=true)
    private Output<List<String>> sourceIpRangesToNats;

    /**
     * @return List of options for which source IPs in the subnetwork
     * should have NAT enabled. Supported values include:
     * `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
     * `PRIMARY_IP_RANGE`.
     * 
     */
    public Output<List<String>> sourceIpRangesToNats() {
        return this.sourceIpRangesToNats;
    }

    private RouterNatSubnetworkArgs() {}

    private RouterNatSubnetworkArgs(RouterNatSubnetworkArgs $) {
        this.name = $.name;
        this.secondaryIpRangeNames = $.secondaryIpRangeNames;
        this.sourceIpRangesToNats = $.sourceIpRangesToNats;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterNatSubnetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterNatSubnetworkArgs $;

        public Builder() {
            $ = new RouterNatSubnetworkArgs();
        }

        public Builder(RouterNatSubnetworkArgs defaults) {
            $ = new RouterNatSubnetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Self-link of subnetwork to NAT
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Self-link of subnetwork to NAT
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secondaryIpRangeNames List of the secondary ranges of the subnetwork that are allowed
         * to use NAT. This can be populated only if
         * `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
         * sourceIpRangesToNat
         * 
         * @return builder
         * 
         */
        public Builder secondaryIpRangeNames(@Nullable Output<List<String>> secondaryIpRangeNames) {
            $.secondaryIpRangeNames = secondaryIpRangeNames;
            return this;
        }

        /**
         * @param secondaryIpRangeNames List of the secondary ranges of the subnetwork that are allowed
         * to use NAT. This can be populated only if
         * `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
         * sourceIpRangesToNat
         * 
         * @return builder
         * 
         */
        public Builder secondaryIpRangeNames(List<String> secondaryIpRangeNames) {
            return secondaryIpRangeNames(Output.of(secondaryIpRangeNames));
        }

        /**
         * @param secondaryIpRangeNames List of the secondary ranges of the subnetwork that are allowed
         * to use NAT. This can be populated only if
         * `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
         * sourceIpRangesToNat
         * 
         * @return builder
         * 
         */
        public Builder secondaryIpRangeNames(String... secondaryIpRangeNames) {
            return secondaryIpRangeNames(List.of(secondaryIpRangeNames));
        }

        /**
         * @param sourceIpRangesToNats List of options for which source IPs in the subnetwork
         * should have NAT enabled. Supported values include:
         * `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
         * `PRIMARY_IP_RANGE`.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpRangesToNats(Output<List<String>> sourceIpRangesToNats) {
            $.sourceIpRangesToNats = sourceIpRangesToNats;
            return this;
        }

        /**
         * @param sourceIpRangesToNats List of options for which source IPs in the subnetwork
         * should have NAT enabled. Supported values include:
         * `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
         * `PRIMARY_IP_RANGE`.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpRangesToNats(List<String> sourceIpRangesToNats) {
            return sourceIpRangesToNats(Output.of(sourceIpRangesToNats));
        }

        /**
         * @param sourceIpRangesToNats List of options for which source IPs in the subnetwork
         * should have NAT enabled. Supported values include:
         * `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
         * `PRIMARY_IP_RANGE`.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpRangesToNats(String... sourceIpRangesToNats) {
            return sourceIpRangesToNats(List.of(sourceIpRangesToNats));
        }

        public RouterNatSubnetworkArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.sourceIpRangesToNats = Objects.requireNonNull($.sourceIpRangesToNats, "expected parameter 'sourceIpRangesToNats' to be non-null");
            return $;
        }
    }

}
