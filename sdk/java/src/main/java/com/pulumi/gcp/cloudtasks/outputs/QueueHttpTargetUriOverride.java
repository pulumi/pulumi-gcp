// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudtasks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.cloudtasks.outputs.QueueHttpTargetUriOverridePathOverride;
import com.pulumi.gcp.cloudtasks.outputs.QueueHttpTargetUriOverrideQueryOverride;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class QueueHttpTargetUriOverride {
    /**
     * @return Host override.
     * When specified, replaces the host part of the task URL.
     * For example, if the task URL is &#34;https://www.google.com&#34;, and host value
     * is set to &#34;example.net&#34;, the overridden URI will be changed to &#34;https://example.net&#34;.
     * Host value cannot be an empty string (INVALID_ARGUMENT).
     * 
     */
    private @Nullable String host;
    /**
     * @return URI path.
     * When specified, replaces the existing path of the task URL.
     * Setting the path value to an empty string clears the URI path segment.
     * Structure is documented below.
     * 
     */
    private @Nullable QueueHttpTargetUriOverridePathOverride pathOverride;
    /**
     * @return Port override.
     * When specified, replaces the port part of the task URI.
     * For instance, for a URI http://www.google.com/foo and port=123, the overridden URI becomes http://www.google.com:123/foo.
     * Note that the port value must be a positive integer.
     * Setting the port to 0 (Zero) clears the URI port.
     * 
     */
    private @Nullable String port;
    /**
     * @return URI query.
     * When specified, replaces the query part of the task URI. Setting the query value to an empty string clears the URI query segment.
     * Structure is documented below.
     * 
     */
    private @Nullable QueueHttpTargetUriOverrideQueryOverride queryOverride;
    /**
     * @return Scheme override.
     * When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
     * Possible values are: `HTTP`, `HTTPS`.
     * 
     */
    private @Nullable String scheme;
    /**
     * @return URI Override Enforce Mode
     * When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
     * Possible values are: `ALWAYS`, `IF_NOT_EXISTS`.
     * 
     */
    private @Nullable String uriOverrideEnforceMode;

    private QueueHttpTargetUriOverride() {}
    /**
     * @return Host override.
     * When specified, replaces the host part of the task URL.
     * For example, if the task URL is &#34;https://www.google.com&#34;, and host value
     * is set to &#34;example.net&#34;, the overridden URI will be changed to &#34;https://example.net&#34;.
     * Host value cannot be an empty string (INVALID_ARGUMENT).
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return URI path.
     * When specified, replaces the existing path of the task URL.
     * Setting the path value to an empty string clears the URI path segment.
     * Structure is documented below.
     * 
     */
    public Optional<QueueHttpTargetUriOverridePathOverride> pathOverride() {
        return Optional.ofNullable(this.pathOverride);
    }
    /**
     * @return Port override.
     * When specified, replaces the port part of the task URI.
     * For instance, for a URI http://www.google.com/foo and port=123, the overridden URI becomes http://www.google.com:123/foo.
     * Note that the port value must be a positive integer.
     * Setting the port to 0 (Zero) clears the URI port.
     * 
     */
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return URI query.
     * When specified, replaces the query part of the task URI. Setting the query value to an empty string clears the URI query segment.
     * Structure is documented below.
     * 
     */
    public Optional<QueueHttpTargetUriOverrideQueryOverride> queryOverride() {
        return Optional.ofNullable(this.queryOverride);
    }
    /**
     * @return Scheme override.
     * When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
     * Possible values are: `HTTP`, `HTTPS`.
     * 
     */
    public Optional<String> scheme() {
        return Optional.ofNullable(this.scheme);
    }
    /**
     * @return URI Override Enforce Mode
     * When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
     * Possible values are: `ALWAYS`, `IF_NOT_EXISTS`.
     * 
     */
    public Optional<String> uriOverrideEnforceMode() {
        return Optional.ofNullable(this.uriOverrideEnforceMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueueHttpTargetUriOverride defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String host;
        private @Nullable QueueHttpTargetUriOverridePathOverride pathOverride;
        private @Nullable String port;
        private @Nullable QueueHttpTargetUriOverrideQueryOverride queryOverride;
        private @Nullable String scheme;
        private @Nullable String uriOverrideEnforceMode;
        public Builder() {}
        public Builder(QueueHttpTargetUriOverride defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.pathOverride = defaults.pathOverride;
    	      this.port = defaults.port;
    	      this.queryOverride = defaults.queryOverride;
    	      this.scheme = defaults.scheme;
    	      this.uriOverrideEnforceMode = defaults.uriOverrideEnforceMode;
        }

        @CustomType.Setter
        public Builder host(@Nullable String host) {

            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder pathOverride(@Nullable QueueHttpTargetUriOverridePathOverride pathOverride) {

            this.pathOverride = pathOverride;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable String port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder queryOverride(@Nullable QueueHttpTargetUriOverrideQueryOverride queryOverride) {

            this.queryOverride = queryOverride;
            return this;
        }
        @CustomType.Setter
        public Builder scheme(@Nullable String scheme) {

            this.scheme = scheme;
            return this;
        }
        @CustomType.Setter
        public Builder uriOverrideEnforceMode(@Nullable String uriOverrideEnforceMode) {

            this.uriOverrideEnforceMode = uriOverrideEnforceMode;
            return this;
        }
        public QueueHttpTargetUriOverride build() {
            final var _resultValue = new QueueHttpTargetUriOverride();
            _resultValue.host = host;
            _resultValue.pathOverride = pathOverride;
            _resultValue.port = port;
            _resultValue.queryOverride = queryOverride;
            _resultValue.scheme = scheme;
            _resultValue.uriOverrideEnforceMode = uriOverrideEnforceMode;
            return _resultValue;
        }
    }
}
