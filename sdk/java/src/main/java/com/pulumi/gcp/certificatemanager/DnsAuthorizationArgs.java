// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificatemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsAuthorizationArgs Empty = new DnsAuthorizationArgs();

    /**
     * A human-readable description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human-readable description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A domain which is being authorized. A DnsAuthorization resource covers a
     * single domain and its wildcard, e.g. authorization for &#34;example.com&#34; can
     * be used to issue certificates for &#34;example.com&#34; and &#34;*.example.com&#34;.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return A domain which is being authorized. A DnsAuthorization resource covers a
     * single domain and its wildcard, e.g. authorization for &#34;example.com&#34; can
     * be used to issue certificates for &#34;example.com&#34; and &#34;*.example.com&#34;.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * Set of label tags associated with the DNS Authorization resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Set of label tags associated with the DNS Authorization resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The Certificate Manager location. If not specified, &#34;global&#34; is used.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Certificate Manager location. If not specified, &#34;global&#34; is used.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of the resource; provided by the client when the resource is created.
     * The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
     * and all following characters must be a dash, underscore, letter or digit.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource; provided by the client when the resource is created.
     * The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
     * and all following characters must be a dash, underscore, letter or digit.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * type of DNS authorization. If unset during the resource creation, FIXED_RECORD will
     * be used for global resources, and PER_PROJECT_RECORD will be used for other locations.
     * FIXED_RECORD DNS authorization uses DNS-01 validation method
     * PER_PROJECT_RECORD DNS authorization allows for independent management
     * of Google-managed certificates with DNS authorization across multiple
     * projects.
     * Possible values are: `FIXED_RECORD`, `PER_PROJECT_RECORD`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return type of DNS authorization. If unset during the resource creation, FIXED_RECORD will
     * be used for global resources, and PER_PROJECT_RECORD will be used for other locations.
     * FIXED_RECORD DNS authorization uses DNS-01 validation method
     * PER_PROJECT_RECORD DNS authorization allows for independent management
     * of Google-managed certificates with DNS authorization across multiple
     * projects.
     * Possible values are: `FIXED_RECORD`, `PER_PROJECT_RECORD`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DnsAuthorizationArgs() {}

    private DnsAuthorizationArgs(DnsAuthorizationArgs $) {
        this.description = $.description;
        this.domain = $.domain;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsAuthorizationArgs $;

        public Builder() {
            $ = new DnsAuthorizationArgs();
        }

        public Builder(DnsAuthorizationArgs defaults) {
            $ = new DnsAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A human-readable description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human-readable description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domain A domain which is being authorized. A DnsAuthorization resource covers a
         * single domain and its wildcard, e.g. authorization for &#34;example.com&#34; can
         * be used to issue certificates for &#34;example.com&#34; and &#34;*.example.com&#34;.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain A domain which is being authorized. A DnsAuthorization resource covers a
         * single domain and its wildcard, e.g. authorization for &#34;example.com&#34; can
         * be used to issue certificates for &#34;example.com&#34; and &#34;*.example.com&#34;.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param labels Set of label tags associated with the DNS Authorization resource.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Set of label tags associated with the DNS Authorization resource.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The Certificate Manager location. If not specified, &#34;global&#34; is used.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Certificate Manager location. If not specified, &#34;global&#34; is used.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Name of the resource; provided by the client when the resource is created.
         * The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
         * and all following characters must be a dash, underscore, letter or digit.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource; provided by the client when the resource is created.
         * The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
         * and all following characters must be a dash, underscore, letter or digit.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param type type of DNS authorization. If unset during the resource creation, FIXED_RECORD will
         * be used for global resources, and PER_PROJECT_RECORD will be used for other locations.
         * FIXED_RECORD DNS authorization uses DNS-01 validation method
         * PER_PROJECT_RECORD DNS authorization allows for independent management
         * of Google-managed certificates with DNS authorization across multiple
         * projects.
         * Possible values are: `FIXED_RECORD`, `PER_PROJECT_RECORD`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type type of DNS authorization. If unset during the resource creation, FIXED_RECORD will
         * be used for global resources, and PER_PROJECT_RECORD will be used for other locations.
         * FIXED_RECORD DNS authorization uses DNS-01 validation method
         * PER_PROJECT_RECORD DNS authorization allows for independent management
         * of Google-managed certificates with DNS authorization across multiple
         * projects.
         * Possible values are: `FIXED_RECORD`, `PER_PROJECT_RECORD`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DnsAuthorizationArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("DnsAuthorizationArgs", "domain");
            }
            return $;
        }
    }

}
