// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutoscalerAutoscalingPolicyCpuUtilizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoscalerAutoscalingPolicyCpuUtilizationArgs Empty = new AutoscalerAutoscalingPolicyCpuUtilizationArgs();

    /**
     * Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are:
     * - NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics.
     * - OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
     * 
     */
    @Import(name="predictiveMethod")
    private @Nullable Output<String> predictiveMethod;

    /**
     * @return Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are:
     * - NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics.
     * - OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
     * 
     */
    public Optional<Output<String>> predictiveMethod() {
        return Optional.ofNullable(this.predictiveMethod);
    }

    /**
     * Fraction of backend capacity utilization (set in HTTP(s) load
     * balancing configuration) that autoscaler should maintain. Must
     * be a positive float value. If not defined, the default is 0.8.
     * 
     */
    @Import(name="target", required=true)
    private Output<Double> target;

    /**
     * @return Fraction of backend capacity utilization (set in HTTP(s) load
     * balancing configuration) that autoscaler should maintain. Must
     * be a positive float value. If not defined, the default is 0.8.
     * 
     */
    public Output<Double> target() {
        return this.target;
    }

    private AutoscalerAutoscalingPolicyCpuUtilizationArgs() {}

    private AutoscalerAutoscalingPolicyCpuUtilizationArgs(AutoscalerAutoscalingPolicyCpuUtilizationArgs $) {
        this.predictiveMethod = $.predictiveMethod;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoscalerAutoscalingPolicyCpuUtilizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoscalerAutoscalingPolicyCpuUtilizationArgs $;

        public Builder() {
            $ = new AutoscalerAutoscalingPolicyCpuUtilizationArgs();
        }

        public Builder(AutoscalerAutoscalingPolicyCpuUtilizationArgs defaults) {
            $ = new AutoscalerAutoscalingPolicyCpuUtilizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param predictiveMethod Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are:
         * - NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics.
         * - OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
         * 
         * @return builder
         * 
         */
        public Builder predictiveMethod(@Nullable Output<String> predictiveMethod) {
            $.predictiveMethod = predictiveMethod;
            return this;
        }

        /**
         * @param predictiveMethod Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are:
         * - NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics.
         * - OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
         * 
         * @return builder
         * 
         */
        public Builder predictiveMethod(String predictiveMethod) {
            return predictiveMethod(Output.of(predictiveMethod));
        }

        /**
         * @param target Fraction of backend capacity utilization (set in HTTP(s) load
         * balancing configuration) that autoscaler should maintain. Must
         * be a positive float value. If not defined, the default is 0.8.
         * 
         * @return builder
         * 
         */
        public Builder target(Output<Double> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target Fraction of backend capacity utilization (set in HTTP(s) load
         * balancing configuration) that autoscaler should maintain. Must
         * be a positive float value. If not defined, the default is 0.8.
         * 
         * @return builder
         * 
         */
        public Builder target(Double target) {
            return target(Output.of(target));
        }

        public AutoscalerAutoscalingPolicyCpuUtilizationArgs build() {
            $.target = Objects.requireNonNull($.target, "expected parameter 'target' to be non-null");
            return $;
        }
    }

}
