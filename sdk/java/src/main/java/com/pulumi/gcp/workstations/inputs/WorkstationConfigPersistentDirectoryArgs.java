// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workstations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.workstations.inputs.WorkstationConfigPersistentDirectoryGcePdArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkstationConfigPersistentDirectoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkstationConfigPersistentDirectoryArgs Empty = new WorkstationConfigPersistentDirectoryArgs();

    /**
     * A directory to persist across workstation sessions, backed by a Compute Engine regional persistent disk. Can only be updated if not empty during creation.
     * Structure is documented below.
     * 
     */
    @Import(name="gcePd")
    private @Nullable Output<WorkstationConfigPersistentDirectoryGcePdArgs> gcePd;

    /**
     * @return A directory to persist across workstation sessions, backed by a Compute Engine regional persistent disk. Can only be updated if not empty during creation.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WorkstationConfigPersistentDirectoryGcePdArgs>> gcePd() {
        return Optional.ofNullable(this.gcePd);
    }

    /**
     * Location of this directory in the running workstation.
     * 
     */
    @Import(name="mountPath")
    private @Nullable Output<String> mountPath;

    /**
     * @return Location of this directory in the running workstation.
     * 
     */
    public Optional<Output<String>> mountPath() {
        return Optional.ofNullable(this.mountPath);
    }

    private WorkstationConfigPersistentDirectoryArgs() {}

    private WorkstationConfigPersistentDirectoryArgs(WorkstationConfigPersistentDirectoryArgs $) {
        this.gcePd = $.gcePd;
        this.mountPath = $.mountPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkstationConfigPersistentDirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkstationConfigPersistentDirectoryArgs $;

        public Builder() {
            $ = new WorkstationConfigPersistentDirectoryArgs();
        }

        public Builder(WorkstationConfigPersistentDirectoryArgs defaults) {
            $ = new WorkstationConfigPersistentDirectoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gcePd A directory to persist across workstation sessions, backed by a Compute Engine regional persistent disk. Can only be updated if not empty during creation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gcePd(@Nullable Output<WorkstationConfigPersistentDirectoryGcePdArgs> gcePd) {
            $.gcePd = gcePd;
            return this;
        }

        /**
         * @param gcePd A directory to persist across workstation sessions, backed by a Compute Engine regional persistent disk. Can only be updated if not empty during creation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gcePd(WorkstationConfigPersistentDirectoryGcePdArgs gcePd) {
            return gcePd(Output.of(gcePd));
        }

        /**
         * @param mountPath Location of this directory in the running workstation.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(@Nullable Output<String> mountPath) {
            $.mountPath = mountPath;
            return this;
        }

        /**
         * @param mountPath Location of this directory in the running workstation.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(String mountPath) {
            return mountPath(Output.of(mountPath));
        }

        public WorkstationConfigPersistentDirectoryArgs build() {
            return $;
        }
    }

}
