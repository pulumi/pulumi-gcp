// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetSecurityPolicyAdaptiveProtectionConfigAutoDeployConfig {
    /**
     * @return Rules are only automatically deployed for alerts on potential attacks with confidence scores greater than this threshold.
     * 
     */
    private Double confidenceThreshold;
    /**
     * @return Google Cloud Armor stops applying the action in the automatically deployed rule to an identified attacker after this duration. The rule continues to operate against new requests.
     * 
     */
    private Integer expirationSec;
    /**
     * @return Rules are only automatically deployed when the estimated impact to baseline traffic from the suggested mitigation is below this threshold.
     * 
     */
    private Double impactedBaselineThreshold;
    /**
     * @return Identifies new attackers only when the load to the backend service that is under attack exceeds this threshold.
     * 
     */
    private Double loadThreshold;

    private GetSecurityPolicyAdaptiveProtectionConfigAutoDeployConfig() {}
    /**
     * @return Rules are only automatically deployed for alerts on potential attacks with confidence scores greater than this threshold.
     * 
     */
    public Double confidenceThreshold() {
        return this.confidenceThreshold;
    }
    /**
     * @return Google Cloud Armor stops applying the action in the automatically deployed rule to an identified attacker after this duration. The rule continues to operate against new requests.
     * 
     */
    public Integer expirationSec() {
        return this.expirationSec;
    }
    /**
     * @return Rules are only automatically deployed when the estimated impact to baseline traffic from the suggested mitigation is below this threshold.
     * 
     */
    public Double impactedBaselineThreshold() {
        return this.impactedBaselineThreshold;
    }
    /**
     * @return Identifies new attackers only when the load to the backend service that is under attack exceeds this threshold.
     * 
     */
    public Double loadThreshold() {
        return this.loadThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityPolicyAdaptiveProtectionConfigAutoDeployConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double confidenceThreshold;
        private Integer expirationSec;
        private Double impactedBaselineThreshold;
        private Double loadThreshold;
        public Builder() {}
        public Builder(GetSecurityPolicyAdaptiveProtectionConfigAutoDeployConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.confidenceThreshold = defaults.confidenceThreshold;
    	      this.expirationSec = defaults.expirationSec;
    	      this.impactedBaselineThreshold = defaults.impactedBaselineThreshold;
    	      this.loadThreshold = defaults.loadThreshold;
        }

        @CustomType.Setter
        public Builder confidenceThreshold(Double confidenceThreshold) {
            if (confidenceThreshold == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyAdaptiveProtectionConfigAutoDeployConfig", "confidenceThreshold");
            }
            this.confidenceThreshold = confidenceThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder expirationSec(Integer expirationSec) {
            if (expirationSec == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyAdaptiveProtectionConfigAutoDeployConfig", "expirationSec");
            }
            this.expirationSec = expirationSec;
            return this;
        }
        @CustomType.Setter
        public Builder impactedBaselineThreshold(Double impactedBaselineThreshold) {
            if (impactedBaselineThreshold == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyAdaptiveProtectionConfigAutoDeployConfig", "impactedBaselineThreshold");
            }
            this.impactedBaselineThreshold = impactedBaselineThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder loadThreshold(Double loadThreshold) {
            if (loadThreshold == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyAdaptiveProtectionConfigAutoDeployConfig", "loadThreshold");
            }
            this.loadThreshold = loadThreshold;
            return this;
        }
        public GetSecurityPolicyAdaptiveProtectionConfigAutoDeployConfig build() {
            final var _resultValue = new GetSecurityPolicyAdaptiveProtectionConfigAutoDeployConfig();
            _resultValue.confidenceThreshold = confidenceThreshold;
            _resultValue.expirationSec = expirationSec;
            _resultValue.impactedBaselineThreshold = impactedBaselineThreshold;
            _resultValue.loadThreshold = loadThreshold;
            return _resultValue;
        }
    }
}
