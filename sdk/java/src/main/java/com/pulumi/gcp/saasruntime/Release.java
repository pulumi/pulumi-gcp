// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.saasruntime;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.saasruntime.ReleaseArgs;
import com.pulumi.gcp.saasruntime.inputs.ReleaseState;
import com.pulumi.gcp.saasruntime.outputs.ReleaseBlueprint;
import com.pulumi.gcp.saasruntime.outputs.ReleaseInputVariable;
import com.pulumi.gcp.saasruntime.outputs.ReleaseInputVariableDefault;
import com.pulumi.gcp.saasruntime.outputs.ReleaseOutputVariable;
import com.pulumi.gcp.saasruntime.outputs.ReleaseReleaseRequirements;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A version to be propagated and deployed to Units. It points to a specific version of a Blueprint that can be applied to Units, for example, via a Rollout.
 * 
 * ## Example Usage
 * 
 * ### Saas Runtime Release Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.saasruntime.SaaS;
 * import com.pulumi.gcp.saasruntime.SaaSArgs;
 * import com.pulumi.gcp.saasruntime.inputs.SaaSLocationArgs;
 * import com.pulumi.gcp.saasruntime.UnitKind;
 * import com.pulumi.gcp.saasruntime.UnitKindArgs;
 * import com.pulumi.gcp.saasruntime.Release;
 * import com.pulumi.gcp.saasruntime.ReleaseArgs;
 * import com.pulumi.gcp.saasruntime.inputs.ReleaseBlueprintArgs;
 * import com.pulumi.gcp.saasruntime.inputs.ReleaseInputVariableDefaultArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var exampleSaas = new SaaS("exampleSaas", SaaSArgs.builder()
 *             .saasId("example-saas")
 *             .location("global")
 *             .locations(SaaSLocationArgs.builder()
 *                 .name("us-central1")
 *                 .build())
 *             .build());
 * 
 *         var exampleUnitkind = new UnitKind("exampleUnitkind", UnitKindArgs.builder()
 *             .location("global")
 *             .unitKindId("example-unitkind")
 *             .saas(exampleSaas.id())
 *             .build());
 * 
 *         var examplePrevious = new Release("examplePrevious", ReleaseArgs.builder()
 *             .location("global")
 *             .releaseId("previous-release")
 *             .unitKind(exampleUnitkind.id())
 *             .blueprint(ReleaseBlueprintArgs.builder()
 *                 .package_("us-central1-docker.pkg.dev/ci-test-project-188019/test-repo/tf-test-easysaas-alpha-image}{@literal @}{@code sha256:7992fdbaeaf998ecd31a7f937bb26e38a781ecf49b24857a6176c1e9bfc299ee")
 *                 .build())
 *             .build());
 * 
 *         var example = new Release("example", ReleaseArgs.builder()
 *             .location("global")
 *             .releaseId("example-release")
 *             .unitKind(exampleUnitkind.id())
 *             .blueprint(ReleaseBlueprintArgs.builder()
 *                 .package_("us-central1-docker.pkg.dev/ci-test-project-188019/test-repo/tf-test-easysaas-beta-image}{@literal @}{@code sha256:7bba0fa85b2956df7768f7b32e715b6fe11f4f4193e2a70a35bf3f286a6cdf9e")
 *                 .build())
 *             .inputVariableDefaults(ReleaseInputVariableDefaultArgs.builder()
 *                 .variable("name")
 *                 .value("test")
 *                 .type("STRING")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Release can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/releases/{{release_id}}`
 * 
 * * `{{project}}/{{location}}/{{release_id}}`
 * 
 * * `{{location}}/{{release_id}}`
 * 
 * When using the `pulumi import` command, Release can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:saasruntime/release:Release default projects/{{project}}/locations/{{location}}/releases/{{release_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:saasruntime/release:Release default {{project}}/{{location}}/{{release_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:saasruntime/release:Release default {{location}}/{{release_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:saasruntime/release:Release")
public class Release extends com.pulumi.resources.CustomResource {
    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotations;

    /**
     * @return Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    @Export(name="blueprint", refs={ReleaseBlueprint.class}, tree="[0]")
    private Output</* @Nullable */ ReleaseBlueprint> blueprint;

    public Output<Optional<ReleaseBlueprint>> blueprint() {
        return Codegen.optional(this.blueprint);
    }
    /**
     * The timestamp when the resource was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The timestamp when the resource was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    @Export(name="effectiveAnnotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveAnnotations;

    public Output<Map<String,String>> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * An opaque value that uniquely identifies a version or
     * generation of a resource. It can be used to confirm that the client
     * and server agree on the ordering of a resource being written.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return An opaque value that uniquely identifies a version or
     * generation of a resource. It can be used to confirm that the client
     * and server agree on the ordering of a resource being written.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * Mapping of input variables to default values. Maximum 100
     * Structure is documented below.
     * 
     */
    @Export(name="inputVariableDefaults", refs={List.class,ReleaseInputVariableDefault.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ReleaseInputVariableDefault>> inputVariableDefaults;

    /**
     * @return Mapping of input variables to default values. Maximum 100
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<ReleaseInputVariableDefault>>> inputVariableDefaults() {
        return Codegen.optional(this.inputVariableDefaults);
    }
    /**
     * List of input variables declared on the blueprint and can be present with
     * their values on the unit spec
     * Structure is documented below.
     * 
     */
    @Export(name="inputVariables", refs={List.class,ReleaseInputVariable.class}, tree="[0,1]")
    private Output<List<ReleaseInputVariable>> inputVariables;

    /**
     * @return List of input variables declared on the blueprint and can be present with
     * their values on the unit spec
     * Structure is documented below.
     * 
     */
    public Output<List<ReleaseInputVariable>> inputVariables() {
        return this.inputVariables;
    }
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * &#34;projects/{project}/locations/{location}/releases/{release}&#34;
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * &#34;projects/{project}/locations/{location}/releases/{release}&#34;
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * List of output variables declared on the blueprint and can be present with
     * their values on the unit status
     * Structure is documented below.
     * 
     */
    @Export(name="outputVariables", refs={List.class,ReleaseOutputVariable.class}, tree="[0,1]")
    private Output<List<ReleaseOutputVariable>> outputVariables;

    /**
     * @return List of output variables declared on the blueprint and can be present with
     * their values on the unit status
     * Structure is documented below.
     * 
     */
    public Output<List<ReleaseOutputVariable>> outputVariables() {
        return this.outputVariables;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The ID value for the new release.
     * 
     */
    @Export(name="releaseId", refs={String.class}, tree="[0]")
    private Output<String> releaseId;

    /**
     * @return The ID value for the new release.
     * 
     */
    public Output<String> releaseId() {
        return this.releaseId;
    }
    /**
     * Set of requirements to be fulfilled on the Unit when using this Release.
     * Structure is documented below.
     * 
     */
    @Export(name="releaseRequirements", refs={ReleaseReleaseRequirements.class}, tree="[0]")
    private Output</* @Nullable */ ReleaseReleaseRequirements> releaseRequirements;

    /**
     * @return Set of requirements to be fulfilled on the Unit when using this Release.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ReleaseReleaseRequirements>> releaseRequirements() {
        return Codegen.optional(this.releaseRequirements);
    }
    /**
     * The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Reference to the UnitKind this Release corresponds to (required and
     * immutable once created).
     * 
     */
    @Export(name="unitKind", refs={String.class}, tree="[0]")
    private Output<String> unitKind;

    /**
     * @return Reference to the UnitKind this Release corresponds to (required and
     * immutable once created).
     * 
     */
    public Output<String> unitKind() {
        return this.unitKind;
    }
    /**
     * The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Release(java.lang.String name) {
        this(name, ReleaseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Release(java.lang.String name, ReleaseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Release(java.lang.String name, ReleaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:saasruntime/release:Release", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Release(java.lang.String name, Output<java.lang.String> id, @Nullable ReleaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:saasruntime/release:Release", name, state, makeResourceOptions(options, id), false);
    }

    private static ReleaseArgs makeArgs(ReleaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ReleaseArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Release get(java.lang.String name, Output<java.lang.String> id, @Nullable ReleaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Release(name, id, state, options);
    }
}
