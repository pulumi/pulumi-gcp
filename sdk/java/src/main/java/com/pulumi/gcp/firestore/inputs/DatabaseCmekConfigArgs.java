// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firestore.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseCmekConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseCmekConfigArgs Empty = new DatabaseCmekConfigArgs();

    /**
     * (Output)
     * Currently in-use KMS key versions (https://cloud.google.com/kms/docs/resource-hierarchy#key_versions).
     * During key rotation (https://cloud.google.com/kms/docs/key-rotation), there can be
     * multiple in-use key versions.
     * The expected format is
     * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`.
     * 
     */
    @Import(name="activeKeyVersions")
    private @Nullable Output<List<String>> activeKeyVersions;

    /**
     * @return (Output)
     * Currently in-use KMS key versions (https://cloud.google.com/kms/docs/resource-hierarchy#key_versions).
     * During key rotation (https://cloud.google.com/kms/docs/key-rotation), there can be
     * multiple in-use key versions.
     * The expected format is
     * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`.
     * 
     */
    public Optional<Output<List<String>>> activeKeyVersions() {
        return Optional.ofNullable(this.activeKeyVersions);
    }

    /**
     * The resource ID of a Cloud KMS key. If set, the database created will
     * be a Customer-managed Encryption Key (CMEK) database encrypted with
     * this key. This feature is allowlist only in initial launch.
     * Only keys in the same location as this database are allowed to be used
     * for encryption. For Firestore&#39;s nam5 multi-region, this corresponds to Cloud KMS
     * multi-region us. For Firestore&#39;s eur3 multi-region, this corresponds to
     * Cloud KMS multi-region europe. See https://cloud.google.com/kms/docs/locations.
     * This value should be the KMS key resource ID in the format of
     * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
     * How to retrieve this resource ID is listed at
     * https://cloud.google.com/kms/docs/getting-resource-ids#getting_the_id_for_a_key_and_version.
     * 
     */
    @Import(name="kmsKeyName", required=true)
    private Output<String> kmsKeyName;

    /**
     * @return The resource ID of a Cloud KMS key. If set, the database created will
     * be a Customer-managed Encryption Key (CMEK) database encrypted with
     * this key. This feature is allowlist only in initial launch.
     * Only keys in the same location as this database are allowed to be used
     * for encryption. For Firestore&#39;s nam5 multi-region, this corresponds to Cloud KMS
     * multi-region us. For Firestore&#39;s eur3 multi-region, this corresponds to
     * Cloud KMS multi-region europe. See https://cloud.google.com/kms/docs/locations.
     * This value should be the KMS key resource ID in the format of
     * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
     * How to retrieve this resource ID is listed at
     * https://cloud.google.com/kms/docs/getting-resource-ids#getting_the_id_for_a_key_and_version.
     * 
     */
    public Output<String> kmsKeyName() {
        return this.kmsKeyName;
    }

    private DatabaseCmekConfigArgs() {}

    private DatabaseCmekConfigArgs(DatabaseCmekConfigArgs $) {
        this.activeKeyVersions = $.activeKeyVersions;
        this.kmsKeyName = $.kmsKeyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseCmekConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseCmekConfigArgs $;

        public Builder() {
            $ = new DatabaseCmekConfigArgs();
        }

        public Builder(DatabaseCmekConfigArgs defaults) {
            $ = new DatabaseCmekConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeKeyVersions (Output)
         * Currently in-use KMS key versions (https://cloud.google.com/kms/docs/resource-hierarchy#key_versions).
         * During key rotation (https://cloud.google.com/kms/docs/key-rotation), there can be
         * multiple in-use key versions.
         * The expected format is
         * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`.
         * 
         * @return builder
         * 
         */
        public Builder activeKeyVersions(@Nullable Output<List<String>> activeKeyVersions) {
            $.activeKeyVersions = activeKeyVersions;
            return this;
        }

        /**
         * @param activeKeyVersions (Output)
         * Currently in-use KMS key versions (https://cloud.google.com/kms/docs/resource-hierarchy#key_versions).
         * During key rotation (https://cloud.google.com/kms/docs/key-rotation), there can be
         * multiple in-use key versions.
         * The expected format is
         * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`.
         * 
         * @return builder
         * 
         */
        public Builder activeKeyVersions(List<String> activeKeyVersions) {
            return activeKeyVersions(Output.of(activeKeyVersions));
        }

        /**
         * @param activeKeyVersions (Output)
         * Currently in-use KMS key versions (https://cloud.google.com/kms/docs/resource-hierarchy#key_versions).
         * During key rotation (https://cloud.google.com/kms/docs/key-rotation), there can be
         * multiple in-use key versions.
         * The expected format is
         * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`.
         * 
         * @return builder
         * 
         */
        public Builder activeKeyVersions(String... activeKeyVersions) {
            return activeKeyVersions(List.of(activeKeyVersions));
        }

        /**
         * @param kmsKeyName The resource ID of a Cloud KMS key. If set, the database created will
         * be a Customer-managed Encryption Key (CMEK) database encrypted with
         * this key. This feature is allowlist only in initial launch.
         * Only keys in the same location as this database are allowed to be used
         * for encryption. For Firestore&#39;s nam5 multi-region, this corresponds to Cloud KMS
         * multi-region us. For Firestore&#39;s eur3 multi-region, this corresponds to
         * Cloud KMS multi-region europe. See https://cloud.google.com/kms/docs/locations.
         * This value should be the KMS key resource ID in the format of
         * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
         * How to retrieve this resource ID is listed at
         * https://cloud.google.com/kms/docs/getting-resource-ids#getting_the_id_for_a_key_and_version.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyName(Output<String> kmsKeyName) {
            $.kmsKeyName = kmsKeyName;
            return this;
        }

        /**
         * @param kmsKeyName The resource ID of a Cloud KMS key. If set, the database created will
         * be a Customer-managed Encryption Key (CMEK) database encrypted with
         * this key. This feature is allowlist only in initial launch.
         * Only keys in the same location as this database are allowed to be used
         * for encryption. For Firestore&#39;s nam5 multi-region, this corresponds to Cloud KMS
         * multi-region us. For Firestore&#39;s eur3 multi-region, this corresponds to
         * Cloud KMS multi-region europe. See https://cloud.google.com/kms/docs/locations.
         * This value should be the KMS key resource ID in the format of
         * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
         * How to retrieve this resource ID is listed at
         * https://cloud.google.com/kms/docs/getting-resource-ids#getting_the_id_for_a_key_and_version.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyName(String kmsKeyName) {
            return kmsKeyName(Output.of(kmsKeyName));
        }

        public DatabaseCmekConfigArgs build() {
            if ($.kmsKeyName == null) {
                throw new MissingRequiredPropertyException("DatabaseCmekConfigArgs", "kmsKeyName");
            }
            return $;
        }
    }

}
