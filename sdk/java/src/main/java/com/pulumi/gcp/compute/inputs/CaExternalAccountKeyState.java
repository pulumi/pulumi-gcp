// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CaExternalAccountKeyState extends com.pulumi.resources.ResourceArgs {

    public static final CaExternalAccountKeyState Empty = new CaExternalAccountKeyState();

    /**
     * Base64-URL-encoded HS256 key. It is generated by the PublicCertificateAuthorityService
     * when the ExternalAccountKey is created.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="b64MacKey")
    private @Nullable Output<String> b64MacKey;

    /**
     * @return Base64-URL-encoded HS256 key. It is generated by the PublicCertificateAuthorityService
     * when the ExternalAccountKey is created.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> b64MacKey() {
        return Optional.ofNullable(this.b64MacKey);
    }

    /**
     * It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    /**
     * @return It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * Location for the externalAccountKey. Currently only `global` is supported.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location for the externalAccountKey. Currently only `global` is supported.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Resource name. projects/{project}/locations/{location}/externalAccountKeys/{keyId}.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Resource name. projects/{project}/locations/{location}/externalAccountKeys/{keyId}.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private CaExternalAccountKeyState() {}

    private CaExternalAccountKeyState(CaExternalAccountKeyState $) {
        this.b64MacKey = $.b64MacKey;
        this.keyId = $.keyId;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CaExternalAccountKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CaExternalAccountKeyState $;

        public Builder() {
            $ = new CaExternalAccountKeyState();
        }

        public Builder(CaExternalAccountKeyState defaults) {
            $ = new CaExternalAccountKeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param b64MacKey Base64-URL-encoded HS256 key. It is generated by the PublicCertificateAuthorityService
         * when the ExternalAccountKey is created.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder b64MacKey(@Nullable Output<String> b64MacKey) {
            $.b64MacKey = b64MacKey;
            return this;
        }

        /**
         * @param b64MacKey Base64-URL-encoded HS256 key. It is generated by the PublicCertificateAuthorityService
         * when the ExternalAccountKey is created.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder b64MacKey(String b64MacKey) {
            return b64MacKey(Output.of(b64MacKey));
        }

        /**
         * @param keyId It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param location Location for the externalAccountKey. Currently only `global` is supported.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location for the externalAccountKey. Currently only `global` is supported.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Resource name. projects/{project}/locations/{location}/externalAccountKeys/{keyId}.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Resource name. projects/{project}/locations/{location}/externalAccountKeys/{keyId}.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public CaExternalAccountKeyState build() {
            return $;
        }
    }

}
