// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBuildArtifact;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBuildAvailableSecret;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBuildOption;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBuildSecret;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBuildSource;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBuildStep;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetTriggerBuild {
    private List<GetTriggerBuildArtifact> artifacts;
    private List<GetTriggerBuildAvailableSecret> availableSecrets;
    private List<String> images;
    private String logsBucket;
    private List<GetTriggerBuildOption> options;
    private String queueTtl;
    private List<GetTriggerBuildSecret> secrets;
    private List<GetTriggerBuildSource> sources;
    private List<GetTriggerBuildStep> steps;
    private Map<String,String> substitutions;
    private List<String> tags;
    private String timeout;

    private GetTriggerBuild() {}
    public List<GetTriggerBuildArtifact> artifacts() {
        return this.artifacts;
    }
    public List<GetTriggerBuildAvailableSecret> availableSecrets() {
        return this.availableSecrets;
    }
    public List<String> images() {
        return this.images;
    }
    public String logsBucket() {
        return this.logsBucket;
    }
    public List<GetTriggerBuildOption> options() {
        return this.options;
    }
    public String queueTtl() {
        return this.queueTtl;
    }
    public List<GetTriggerBuildSecret> secrets() {
        return this.secrets;
    }
    public List<GetTriggerBuildSource> sources() {
        return this.sources;
    }
    public List<GetTriggerBuildStep> steps() {
        return this.steps;
    }
    public Map<String,String> substitutions() {
        return this.substitutions;
    }
    public List<String> tags() {
        return this.tags;
    }
    public String timeout() {
        return this.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTriggerBuild defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetTriggerBuildArtifact> artifacts;
        private List<GetTriggerBuildAvailableSecret> availableSecrets;
        private List<String> images;
        private String logsBucket;
        private List<GetTriggerBuildOption> options;
        private String queueTtl;
        private List<GetTriggerBuildSecret> secrets;
        private List<GetTriggerBuildSource> sources;
        private List<GetTriggerBuildStep> steps;
        private Map<String,String> substitutions;
        private List<String> tags;
        private String timeout;
        public Builder() {}
        public Builder(GetTriggerBuild defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifacts = defaults.artifacts;
    	      this.availableSecrets = defaults.availableSecrets;
    	      this.images = defaults.images;
    	      this.logsBucket = defaults.logsBucket;
    	      this.options = defaults.options;
    	      this.queueTtl = defaults.queueTtl;
    	      this.secrets = defaults.secrets;
    	      this.sources = defaults.sources;
    	      this.steps = defaults.steps;
    	      this.substitutions = defaults.substitutions;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder artifacts(List<GetTriggerBuildArtifact> artifacts) {
            this.artifacts = Objects.requireNonNull(artifacts);
            return this;
        }
        public Builder artifacts(GetTriggerBuildArtifact... artifacts) {
            return artifacts(List.of(artifacts));
        }
        @CustomType.Setter
        public Builder availableSecrets(List<GetTriggerBuildAvailableSecret> availableSecrets) {
            this.availableSecrets = Objects.requireNonNull(availableSecrets);
            return this;
        }
        public Builder availableSecrets(GetTriggerBuildAvailableSecret... availableSecrets) {
            return availableSecrets(List.of(availableSecrets));
        }
        @CustomType.Setter
        public Builder images(List<String> images) {
            this.images = Objects.requireNonNull(images);
            return this;
        }
        public Builder images(String... images) {
            return images(List.of(images));
        }
        @CustomType.Setter
        public Builder logsBucket(String logsBucket) {
            this.logsBucket = Objects.requireNonNull(logsBucket);
            return this;
        }
        @CustomType.Setter
        public Builder options(List<GetTriggerBuildOption> options) {
            this.options = Objects.requireNonNull(options);
            return this;
        }
        public Builder options(GetTriggerBuildOption... options) {
            return options(List.of(options));
        }
        @CustomType.Setter
        public Builder queueTtl(String queueTtl) {
            this.queueTtl = Objects.requireNonNull(queueTtl);
            return this;
        }
        @CustomType.Setter
        public Builder secrets(List<GetTriggerBuildSecret> secrets) {
            this.secrets = Objects.requireNonNull(secrets);
            return this;
        }
        public Builder secrets(GetTriggerBuildSecret... secrets) {
            return secrets(List.of(secrets));
        }
        @CustomType.Setter
        public Builder sources(List<GetTriggerBuildSource> sources) {
            this.sources = Objects.requireNonNull(sources);
            return this;
        }
        public Builder sources(GetTriggerBuildSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder steps(List<GetTriggerBuildStep> steps) {
            this.steps = Objects.requireNonNull(steps);
            return this;
        }
        public Builder steps(GetTriggerBuildStep... steps) {
            return steps(List.of(steps));
        }
        @CustomType.Setter
        public Builder substitutions(Map<String,String> substitutions) {
            this.substitutions = Objects.requireNonNull(substitutions);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder timeout(String timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }
        public GetTriggerBuild build() {
            final var o = new GetTriggerBuild();
            o.artifacts = artifacts;
            o.availableSecrets = availableSecrets;
            o.images = images;
            o.logsBucket = logsBucket;
            o.options = options;
            o.queueTtl = queueTtl;
            o.secrets = secrets;
            o.sources = sources;
            o.steps = steps;
            o.substitutions = substitutions;
            o.tags = tags;
            o.timeout = timeout;
            return o;
        }
    }
}
