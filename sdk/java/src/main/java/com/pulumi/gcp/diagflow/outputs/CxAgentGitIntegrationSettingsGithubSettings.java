// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CxAgentGitIntegrationSettingsGithubSettings {
    /**
     * @return The access token used to authenticate the access to the GitHub repository.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    private @Nullable String accessToken;
    /**
     * @return A list of branches configured to be used from Dialogflow.
     * 
     */
    private @Nullable List<String> branches;
    /**
     * @return The unique repository display name for the GitHub repository.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The GitHub repository URI related to the agent.
     * 
     */
    private @Nullable String repositoryUri;
    /**
     * @return The branch of the GitHub repository tracked for this agent.
     * 
     */
    private @Nullable String trackingBranch;

    private CxAgentGitIntegrationSettingsGithubSettings() {}
    /**
     * @return The access token used to authenticate the access to the GitHub repository.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }
    /**
     * @return A list of branches configured to be used from Dialogflow.
     * 
     */
    public List<String> branches() {
        return this.branches == null ? List.of() : this.branches;
    }
    /**
     * @return The unique repository display name for the GitHub repository.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The GitHub repository URI related to the agent.
     * 
     */
    public Optional<String> repositoryUri() {
        return Optional.ofNullable(this.repositoryUri);
    }
    /**
     * @return The branch of the GitHub repository tracked for this agent.
     * 
     */
    public Optional<String> trackingBranch() {
        return Optional.ofNullable(this.trackingBranch);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxAgentGitIntegrationSettingsGithubSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessToken;
        private @Nullable List<String> branches;
        private @Nullable String displayName;
        private @Nullable String repositoryUri;
        private @Nullable String trackingBranch;
        public Builder() {}
        public Builder(CxAgentGitIntegrationSettingsGithubSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessToken = defaults.accessToken;
    	      this.branches = defaults.branches;
    	      this.displayName = defaults.displayName;
    	      this.repositoryUri = defaults.repositoryUri;
    	      this.trackingBranch = defaults.trackingBranch;
        }

        @CustomType.Setter
        public Builder accessToken(@Nullable String accessToken) {

            this.accessToken = accessToken;
            return this;
        }
        @CustomType.Setter
        public Builder branches(@Nullable List<String> branches) {

            this.branches = branches;
            return this;
        }
        public Builder branches(String... branches) {
            return branches(List.of(branches));
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryUri(@Nullable String repositoryUri) {

            this.repositoryUri = repositoryUri;
            return this;
        }
        @CustomType.Setter
        public Builder trackingBranch(@Nullable String trackingBranch) {

            this.trackingBranch = trackingBranch;
            return this;
        }
        public CxAgentGitIntegrationSettingsGithubSettings build() {
            final var _resultValue = new CxAgentGitIntegrationSettingsGithubSettings();
            _resultValue.accessToken = accessToken;
            _resultValue.branches = branches;
            _resultValue.displayName = displayName;
            _resultValue.repositoryUri = repositoryUri;
            _resultValue.trackingBranch = trackingBranch;
            return _resultValue;
        }
    }
}
