// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRegionInstanceGroupManagerUpdatePolicy {
    /**
     * @return The instance redistribution policy for regional managed instance groups. Valid values are: &#34;PROACTIVE&#34;, &#34;NONE&#34;. If PROACTIVE (default), the group attempts to maintain an even distribution of VM instances across zones in the region. If NONE, proactive redistribution is disabled.
     * 
     */
    private String instanceRedistributionType;
    /**
     * @return Specifies a fixed number of VM instances. This must be a positive integer. Conflicts with max_surge_percent. Both cannot be 0
     * 
     */
    private Integer maxSurgeFixed;
    /**
     * @return Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%. Conflicts with max_surge_fixed.
     * 
     */
    private Integer maxSurgePercent;
    /**
     * @return Specifies a fixed number of VM instances. This must be a positive integer.
     * 
     */
    private Integer maxUnavailableFixed;
    /**
     * @return Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
     * 
     */
    private Integer maxUnavailablePercent;
    /**
     * @return Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600].
     * 
     */
    private Integer minReadySec;
    /**
     * @return Minimal action to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to update without stopping instances, RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a REFRESH, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
     * 
     */
    private String minimalAction;
    /**
     * @return Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart, RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all.
     * 
     */
    private String mostDisruptiveAllowedAction;
    /**
     * @return The instance replacement method for regional managed instance groups. Valid values are: &#34;RECREATE&#34;, &#34;SUBSTITUTE&#34;. If SUBSTITUTE (default), the group replaces VM instances with new instances that have randomly generated names. If RECREATE, instance names are preserved.  You must also set maxUnavailableFixed or maxUnavailablePercent to be greater than 0.
     * 
     */
    private String replacementMethod;
    /**
     * @return The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
     * 
     */
    private String type;

    private GetRegionInstanceGroupManagerUpdatePolicy() {}
    /**
     * @return The instance redistribution policy for regional managed instance groups. Valid values are: &#34;PROACTIVE&#34;, &#34;NONE&#34;. If PROACTIVE (default), the group attempts to maintain an even distribution of VM instances across zones in the region. If NONE, proactive redistribution is disabled.
     * 
     */
    public String instanceRedistributionType() {
        return this.instanceRedistributionType;
    }
    /**
     * @return Specifies a fixed number of VM instances. This must be a positive integer. Conflicts with max_surge_percent. Both cannot be 0
     * 
     */
    public Integer maxSurgeFixed() {
        return this.maxSurgeFixed;
    }
    /**
     * @return Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%. Conflicts with max_surge_fixed.
     * 
     */
    public Integer maxSurgePercent() {
        return this.maxSurgePercent;
    }
    /**
     * @return Specifies a fixed number of VM instances. This must be a positive integer.
     * 
     */
    public Integer maxUnavailableFixed() {
        return this.maxUnavailableFixed;
    }
    /**
     * @return Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
     * 
     */
    public Integer maxUnavailablePercent() {
        return this.maxUnavailablePercent;
    }
    /**
     * @return Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600].
     * 
     */
    public Integer minReadySec() {
        return this.minReadySec;
    }
    /**
     * @return Minimal action to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to update without stopping instances, RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a REFRESH, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
     * 
     */
    public String minimalAction() {
        return this.minimalAction;
    }
    /**
     * @return Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart, RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all.
     * 
     */
    public String mostDisruptiveAllowedAction() {
        return this.mostDisruptiveAllowedAction;
    }
    /**
     * @return The instance replacement method for regional managed instance groups. Valid values are: &#34;RECREATE&#34;, &#34;SUBSTITUTE&#34;. If SUBSTITUTE (default), the group replaces VM instances with new instances that have randomly generated names. If RECREATE, instance names are preserved.  You must also set maxUnavailableFixed or maxUnavailablePercent to be greater than 0.
     * 
     */
    public String replacementMethod() {
        return this.replacementMethod;
    }
    /**
     * @return The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionInstanceGroupManagerUpdatePolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String instanceRedistributionType;
        private Integer maxSurgeFixed;
        private Integer maxSurgePercent;
        private Integer maxUnavailableFixed;
        private Integer maxUnavailablePercent;
        private Integer minReadySec;
        private String minimalAction;
        private String mostDisruptiveAllowedAction;
        private String replacementMethod;
        private String type;
        public Builder() {}
        public Builder(GetRegionInstanceGroupManagerUpdatePolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.instanceRedistributionType = defaults.instanceRedistributionType;
    	      this.maxSurgeFixed = defaults.maxSurgeFixed;
    	      this.maxSurgePercent = defaults.maxSurgePercent;
    	      this.maxUnavailableFixed = defaults.maxUnavailableFixed;
    	      this.maxUnavailablePercent = defaults.maxUnavailablePercent;
    	      this.minReadySec = defaults.minReadySec;
    	      this.minimalAction = defaults.minimalAction;
    	      this.mostDisruptiveAllowedAction = defaults.mostDisruptiveAllowedAction;
    	      this.replacementMethod = defaults.replacementMethod;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder instanceRedistributionType(String instanceRedistributionType) {
            if (instanceRedistributionType == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerUpdatePolicy", "instanceRedistributionType");
            }
            this.instanceRedistributionType = instanceRedistributionType;
            return this;
        }
        @CustomType.Setter
        public Builder maxSurgeFixed(Integer maxSurgeFixed) {
            if (maxSurgeFixed == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerUpdatePolicy", "maxSurgeFixed");
            }
            this.maxSurgeFixed = maxSurgeFixed;
            return this;
        }
        @CustomType.Setter
        public Builder maxSurgePercent(Integer maxSurgePercent) {
            if (maxSurgePercent == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerUpdatePolicy", "maxSurgePercent");
            }
            this.maxSurgePercent = maxSurgePercent;
            return this;
        }
        @CustomType.Setter
        public Builder maxUnavailableFixed(Integer maxUnavailableFixed) {
            if (maxUnavailableFixed == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerUpdatePolicy", "maxUnavailableFixed");
            }
            this.maxUnavailableFixed = maxUnavailableFixed;
            return this;
        }
        @CustomType.Setter
        public Builder maxUnavailablePercent(Integer maxUnavailablePercent) {
            if (maxUnavailablePercent == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerUpdatePolicy", "maxUnavailablePercent");
            }
            this.maxUnavailablePercent = maxUnavailablePercent;
            return this;
        }
        @CustomType.Setter
        public Builder minReadySec(Integer minReadySec) {
            if (minReadySec == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerUpdatePolicy", "minReadySec");
            }
            this.minReadySec = minReadySec;
            return this;
        }
        @CustomType.Setter
        public Builder minimalAction(String minimalAction) {
            if (minimalAction == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerUpdatePolicy", "minimalAction");
            }
            this.minimalAction = minimalAction;
            return this;
        }
        @CustomType.Setter
        public Builder mostDisruptiveAllowedAction(String mostDisruptiveAllowedAction) {
            if (mostDisruptiveAllowedAction == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerUpdatePolicy", "mostDisruptiveAllowedAction");
            }
            this.mostDisruptiveAllowedAction = mostDisruptiveAllowedAction;
            return this;
        }
        @CustomType.Setter
        public Builder replacementMethod(String replacementMethod) {
            if (replacementMethod == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerUpdatePolicy", "replacementMethod");
            }
            this.replacementMethod = replacementMethod;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceGroupManagerUpdatePolicy", "type");
            }
            this.type = type;
            return this;
        }
        public GetRegionInstanceGroupManagerUpdatePolicy build() {
            final var _resultValue = new GetRegionInstanceGroupManagerUpdatePolicy();
            _resultValue.instanceRedistributionType = instanceRedistributionType;
            _resultValue.maxSurgeFixed = maxSurgeFixed;
            _resultValue.maxSurgePercent = maxSurgePercent;
            _resultValue.maxUnavailableFixed = maxUnavailableFixed;
            _resultValue.maxUnavailablePercent = maxUnavailablePercent;
            _resultValue.minReadySec = minReadySec;
            _resultValue.minimalAction = minimalAction;
            _resultValue.mostDisruptiveAllowedAction = mostDisruptiveAllowedAction;
            _resultValue.replacementMethod = replacementMethod;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
