// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.containeranalysis.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.containeranalysis.inputs.NoteAttestationAuthorityHintArgs;
import java.util.Objects;


public final class NoteAttestationAuthorityArgs extends com.pulumi.resources.ResourceArgs {

    public static final NoteAttestationAuthorityArgs Empty = new NoteAttestationAuthorityArgs();

    /**
     * This submessage provides human-readable hints about the purpose of
     * the AttestationAuthority. Because the name of a Note acts as its
     * resource reference, it is important to disambiguate the canonical
     * name of the Note (which might be a UUID for security purposes)
     * from &#34;readable&#34; names more suitable for debug output. Note that
     * these hints should NOT be used to look up AttestationAuthorities
     * in security sensitive contexts, such as when looking up
     * Attestations to verify.
     * Structure is documented below.
     * 
     */
    @Import(name="hint", required=true)
    private Output<NoteAttestationAuthorityHintArgs> hint;

    /**
     * @return This submessage provides human-readable hints about the purpose of
     * the AttestationAuthority. Because the name of a Note acts as its
     * resource reference, it is important to disambiguate the canonical
     * name of the Note (which might be a UUID for security purposes)
     * from &#34;readable&#34; names more suitable for debug output. Note that
     * these hints should NOT be used to look up AttestationAuthorities
     * in security sensitive contexts, such as when looking up
     * Attestations to verify.
     * Structure is documented below.
     * 
     */
    public Output<NoteAttestationAuthorityHintArgs> hint() {
        return this.hint;
    }

    private NoteAttestationAuthorityArgs() {}

    private NoteAttestationAuthorityArgs(NoteAttestationAuthorityArgs $) {
        this.hint = $.hint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NoteAttestationAuthorityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NoteAttestationAuthorityArgs $;

        public Builder() {
            $ = new NoteAttestationAuthorityArgs();
        }

        public Builder(NoteAttestationAuthorityArgs defaults) {
            $ = new NoteAttestationAuthorityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hint This submessage provides human-readable hints about the purpose of
         * the AttestationAuthority. Because the name of a Note acts as its
         * resource reference, it is important to disambiguate the canonical
         * name of the Note (which might be a UUID for security purposes)
         * from &#34;readable&#34; names more suitable for debug output. Note that
         * these hints should NOT be used to look up AttestationAuthorities
         * in security sensitive contexts, such as when looking up
         * Attestations to verify.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hint(Output<NoteAttestationAuthorityHintArgs> hint) {
            $.hint = hint;
            return this;
        }

        /**
         * @param hint This submessage provides human-readable hints about the purpose of
         * the AttestationAuthority. Because the name of a Note acts as its
         * resource reference, it is important to disambiguate the canonical
         * name of the Note (which might be a UUID for security purposes)
         * from &#34;readable&#34; names more suitable for debug output. Note that
         * these hints should NOT be used to look up AttestationAuthorities
         * in security sensitive contexts, such as when looking up
         * Attestations to verify.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hint(NoteAttestationAuthorityHintArgs hint) {
            return hint(Output.of(hint));
        }

        public NoteAttestationAuthorityArgs build() {
            $.hint = Objects.requireNonNull($.hint, "expected parameter 'hint' to be non-null");
            return $;
        }
    }

}
