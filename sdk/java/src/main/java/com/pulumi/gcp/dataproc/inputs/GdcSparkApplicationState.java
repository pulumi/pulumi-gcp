// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataproc.inputs.GdcSparkApplicationPysparkApplicationConfigArgs;
import com.pulumi.gcp.dataproc.inputs.GdcSparkApplicationSparkApplicationConfigArgs;
import com.pulumi.gcp.dataproc.inputs.GdcSparkApplicationSparkRApplicationConfigArgs;
import com.pulumi.gcp.dataproc.inputs.GdcSparkApplicationSparkSqlApplicationConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GdcSparkApplicationState extends com.pulumi.resources.ResourceArgs {

    public static final GdcSparkApplicationState Empty = new GdcSparkApplicationState();

    /**
     * The annotations to associate with this application. Annotations may be used to store client information, but are not used by the server.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return The annotations to associate with this application. Annotations may be used to store client information, but are not used by the server.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * An ApplicationEnvironment from which to inherit configuration properties.
     * 
     */
    @Import(name="applicationEnvironment")
    private @Nullable Output<String> applicationEnvironment;

    /**
     * @return An ApplicationEnvironment from which to inherit configuration properties.
     * 
     */
    public Optional<Output<String>> applicationEnvironment() {
        return Optional.ofNullable(this.applicationEnvironment);
    }

    /**
     * The timestamp when the resource was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The timestamp when the resource was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * List of container image uris for additional file dependencies. Dependent files are sequentially copied from each image. If a file with the same name exists in 2 images then the file from later image is used.
     * 
     */
    @Import(name="dependencyImages")
    private @Nullable Output<List<String>> dependencyImages;

    /**
     * @return List of container image uris for additional file dependencies. Dependent files are sequentially copied from each image. If a file with the same name exists in 2 images then the file from later image is used.
     * 
     */
    public Optional<Output<List<String>>> dependencyImages() {
        return Optional.ofNullable(this.dependencyImages);
    }

    /**
     * User-provided human-readable name to be used in user interfaces.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User-provided human-readable name to be used in user interfaces.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="effectiveAnnotations")
    private @Nullable Output<Map<String,String>> effectiveAnnotations;

    public Optional<Output<Map<String,String>>> effectiveAnnotations() {
        return Optional.ofNullable(this.effectiveAnnotations);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * The labels to associate with this application. Labels may be used for filtering and billing tracking.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels to associate with this application. Labels may be used for filtering and billing tracking.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location of the spark application.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the spark application.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * URL for a monitoring UI for this application (for eventual Spark PHS/UI support) Out of scope for private GA
     * 
     */
    @Import(name="monitoringEndpoint")
    private @Nullable Output<String> monitoringEndpoint;

    /**
     * @return URL for a monitoring UI for this application (for eventual Spark PHS/UI support) Out of scope for private GA
     * 
     */
    public Optional<Output<String>> monitoringEndpoint() {
        return Optional.ofNullable(this.monitoringEndpoint);
    }

    /**
     * Identifier. The name of the application. Format: projects/{project}/locations/{location}/serviceInstances/{service_instance}/sparkApplications/{application}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. The name of the application. Format: projects/{project}/locations/{location}/serviceInstances/{service_instance}/sparkApplications/{application}
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Kubernetes namespace in which to create the application. This namespace must already exist on the cluster.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The Kubernetes namespace in which to create the application. This namespace must already exist on the cluster.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * An HCFS URI pointing to the location of stdout and stdout of the application Mainly useful for Pantheon and gcloud Not in scope for private GA
     * 
     */
    @Import(name="outputUri")
    private @Nullable Output<String> outputUri;

    /**
     * @return An HCFS URI pointing to the location of stdout and stdout of the application Mainly useful for Pantheon and gcloud Not in scope for private GA
     * 
     */
    public Optional<Output<String>> outputUri() {
        return Optional.ofNullable(this.outputUri);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * application-specific properties.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    /**
     * @return application-specific properties.
     * 
     */
    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Represents the PySparkApplicationConfig.
     * Structure is documented below.
     * 
     */
    @Import(name="pysparkApplicationConfig")
    private @Nullable Output<GdcSparkApplicationPysparkApplicationConfigArgs> pysparkApplicationConfig;

    /**
     * @return Represents the PySparkApplicationConfig.
     * Structure is documented below.
     * 
     */
    public Optional<Output<GdcSparkApplicationPysparkApplicationConfigArgs>> pysparkApplicationConfig() {
        return Optional.ofNullable(this.pysparkApplicationConfig);
    }

    /**
     * Whether the application is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.
     * 
     */
    @Import(name="reconciling")
    private @Nullable Output<Boolean> reconciling;

    /**
     * @return Whether the application is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.
     * 
     */
    public Optional<Output<Boolean>> reconciling() {
        return Optional.ofNullable(this.reconciling);
    }

    /**
     * The id of the service instance to which this spark application belongs.
     * 
     */
    @Import(name="serviceinstance")
    private @Nullable Output<String> serviceinstance;

    /**
     * @return The id of the service instance to which this spark application belongs.
     * 
     */
    public Optional<Output<String>> serviceinstance() {
        return Optional.ofNullable(this.serviceinstance);
    }

    /**
     * Represents the SparkApplicationConfig.
     * Structure is documented below.
     * 
     */
    @Import(name="sparkApplicationConfig")
    private @Nullable Output<GdcSparkApplicationSparkApplicationConfigArgs> sparkApplicationConfig;

    /**
     * @return Represents the SparkApplicationConfig.
     * Structure is documented below.
     * 
     */
    public Optional<Output<GdcSparkApplicationSparkApplicationConfigArgs>> sparkApplicationConfig() {
        return Optional.ofNullable(this.sparkApplicationConfig);
    }

    /**
     * The id of the application
     * 
     */
    @Import(name="sparkApplicationId")
    private @Nullable Output<String> sparkApplicationId;

    /**
     * @return The id of the application
     * 
     */
    public Optional<Output<String>> sparkApplicationId() {
        return Optional.ofNullable(this.sparkApplicationId);
    }

    /**
     * Represents the SparkRApplicationConfig.
     * Structure is documented below.
     * 
     */
    @Import(name="sparkRApplicationConfig")
    private @Nullable Output<GdcSparkApplicationSparkRApplicationConfigArgs> sparkRApplicationConfig;

    /**
     * @return Represents the SparkRApplicationConfig.
     * Structure is documented below.
     * 
     */
    public Optional<Output<GdcSparkApplicationSparkRApplicationConfigArgs>> sparkRApplicationConfig() {
        return Optional.ofNullable(this.sparkRApplicationConfig);
    }

    /**
     * Represents the SparkRApplicationConfig.
     * Structure is documented below.
     * 
     */
    @Import(name="sparkSqlApplicationConfig")
    private @Nullable Output<GdcSparkApplicationSparkSqlApplicationConfigArgs> sparkSqlApplicationConfig;

    /**
     * @return Represents the SparkRApplicationConfig.
     * Structure is documented below.
     * 
     */
    public Optional<Output<GdcSparkApplicationSparkSqlApplicationConfigArgs>> sparkSqlApplicationConfig() {
        return Optional.ofNullable(this.sparkSqlApplicationConfig);
    }

    /**
     * The current state.
     * Possible values:
     * * `STATE_UNSPECIFIED`
     * * `PENDING`
     * * `RUNNING`
     * * `CANCELLING`
     * * `CANCELLED`
     * * `SUCCEEDED`
     * * `FAILED`
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state.
     * Possible values:
     * * `STATE_UNSPECIFIED`
     * * `PENDING`
     * * `RUNNING`
     * * `CANCELLING`
     * * `CANCELLED`
     * * `SUCCEEDED`
     * * `FAILED`
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A message explaining the current state.
     * 
     */
    @Import(name="stateMessage")
    private @Nullable Output<String> stateMessage;

    /**
     * @return A message explaining the current state.
     * 
     */
    public Optional<Output<String>> stateMessage() {
        return Optional.ofNullable(this.stateMessage);
    }

    /**
     * System generated unique identifier for this application, formatted as UUID4.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return System generated unique identifier for this application, formatted as UUID4.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The timestamp when the resource was most recently updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return The timestamp when the resource was most recently updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * The Dataproc version of this application.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The Dataproc version of this application.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private GdcSparkApplicationState() {}

    private GdcSparkApplicationState(GdcSparkApplicationState $) {
        this.annotations = $.annotations;
        this.applicationEnvironment = $.applicationEnvironment;
        this.createTime = $.createTime;
        this.dependencyImages = $.dependencyImages;
        this.displayName = $.displayName;
        this.effectiveAnnotations = $.effectiveAnnotations;
        this.effectiveLabels = $.effectiveLabels;
        this.labels = $.labels;
        this.location = $.location;
        this.monitoringEndpoint = $.monitoringEndpoint;
        this.name = $.name;
        this.namespace = $.namespace;
        this.outputUri = $.outputUri;
        this.project = $.project;
        this.properties = $.properties;
        this.pulumiLabels = $.pulumiLabels;
        this.pysparkApplicationConfig = $.pysparkApplicationConfig;
        this.reconciling = $.reconciling;
        this.serviceinstance = $.serviceinstance;
        this.sparkApplicationConfig = $.sparkApplicationConfig;
        this.sparkApplicationId = $.sparkApplicationId;
        this.sparkRApplicationConfig = $.sparkRApplicationConfig;
        this.sparkSqlApplicationConfig = $.sparkSqlApplicationConfig;
        this.state = $.state;
        this.stateMessage = $.stateMessage;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GdcSparkApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GdcSparkApplicationState $;

        public Builder() {
            $ = new GdcSparkApplicationState();
        }

        public Builder(GdcSparkApplicationState defaults) {
            $ = new GdcSparkApplicationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations The annotations to associate with this application. Annotations may be used to store client information, but are not used by the server.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations The annotations to associate with this application. Annotations may be used to store client information, but are not used by the server.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param applicationEnvironment An ApplicationEnvironment from which to inherit configuration properties.
         * 
         * @return builder
         * 
         */
        public Builder applicationEnvironment(@Nullable Output<String> applicationEnvironment) {
            $.applicationEnvironment = applicationEnvironment;
            return this;
        }

        /**
         * @param applicationEnvironment An ApplicationEnvironment from which to inherit configuration properties.
         * 
         * @return builder
         * 
         */
        public Builder applicationEnvironment(String applicationEnvironment) {
            return applicationEnvironment(Output.of(applicationEnvironment));
        }

        /**
         * @param createTime The timestamp when the resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The timestamp when the resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dependencyImages List of container image uris for additional file dependencies. Dependent files are sequentially copied from each image. If a file with the same name exists in 2 images then the file from later image is used.
         * 
         * @return builder
         * 
         */
        public Builder dependencyImages(@Nullable Output<List<String>> dependencyImages) {
            $.dependencyImages = dependencyImages;
            return this;
        }

        /**
         * @param dependencyImages List of container image uris for additional file dependencies. Dependent files are sequentially copied from each image. If a file with the same name exists in 2 images then the file from later image is used.
         * 
         * @return builder
         * 
         */
        public Builder dependencyImages(List<String> dependencyImages) {
            return dependencyImages(Output.of(dependencyImages));
        }

        /**
         * @param dependencyImages List of container image uris for additional file dependencies. Dependent files are sequentially copied from each image. If a file with the same name exists in 2 images then the file from later image is used.
         * 
         * @return builder
         * 
         */
        public Builder dependencyImages(String... dependencyImages) {
            return dependencyImages(List.of(dependencyImages));
        }

        /**
         * @param displayName User-provided human-readable name to be used in user interfaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User-provided human-readable name to be used in user interfaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder effectiveAnnotations(@Nullable Output<Map<String,String>> effectiveAnnotations) {
            $.effectiveAnnotations = effectiveAnnotations;
            return this;
        }

        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            return effectiveAnnotations(Output.of(effectiveAnnotations));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param labels The labels to associate with this application. Labels may be used for filtering and billing tracking.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels to associate with this application. Labels may be used for filtering and billing tracking.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location of the spark application.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the spark application.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param monitoringEndpoint URL for a monitoring UI for this application (for eventual Spark PHS/UI support) Out of scope for private GA
         * 
         * @return builder
         * 
         */
        public Builder monitoringEndpoint(@Nullable Output<String> monitoringEndpoint) {
            $.monitoringEndpoint = monitoringEndpoint;
            return this;
        }

        /**
         * @param monitoringEndpoint URL for a monitoring UI for this application (for eventual Spark PHS/UI support) Out of scope for private GA
         * 
         * @return builder
         * 
         */
        public Builder monitoringEndpoint(String monitoringEndpoint) {
            return monitoringEndpoint(Output.of(monitoringEndpoint));
        }

        /**
         * @param name Identifier. The name of the application. Format: projects/{project}/locations/{location}/serviceInstances/{service_instance}/sparkApplications/{application}
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. The name of the application. Format: projects/{project}/locations/{location}/serviceInstances/{service_instance}/sparkApplications/{application}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The Kubernetes namespace in which to create the application. This namespace must already exist on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Kubernetes namespace in which to create the application. This namespace must already exist on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param outputUri An HCFS URI pointing to the location of stdout and stdout of the application Mainly useful for Pantheon and gcloud Not in scope for private GA
         * 
         * @return builder
         * 
         */
        public Builder outputUri(@Nullable Output<String> outputUri) {
            $.outputUri = outputUri;
            return this;
        }

        /**
         * @param outputUri An HCFS URI pointing to the location of stdout and stdout of the application Mainly useful for Pantheon and gcloud Not in scope for private GA
         * 
         * @return builder
         * 
         */
        public Builder outputUri(String outputUri) {
            return outputUri(Output.of(outputUri));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param properties application-specific properties.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties application-specific properties.
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param pysparkApplicationConfig Represents the PySparkApplicationConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pysparkApplicationConfig(@Nullable Output<GdcSparkApplicationPysparkApplicationConfigArgs> pysparkApplicationConfig) {
            $.pysparkApplicationConfig = pysparkApplicationConfig;
            return this;
        }

        /**
         * @param pysparkApplicationConfig Represents the PySparkApplicationConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pysparkApplicationConfig(GdcSparkApplicationPysparkApplicationConfigArgs pysparkApplicationConfig) {
            return pysparkApplicationConfig(Output.of(pysparkApplicationConfig));
        }

        /**
         * @param reconciling Whether the application is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(@Nullable Output<Boolean> reconciling) {
            $.reconciling = reconciling;
            return this;
        }

        /**
         * @param reconciling Whether the application is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(Boolean reconciling) {
            return reconciling(Output.of(reconciling));
        }

        /**
         * @param serviceinstance The id of the service instance to which this spark application belongs.
         * 
         * @return builder
         * 
         */
        public Builder serviceinstance(@Nullable Output<String> serviceinstance) {
            $.serviceinstance = serviceinstance;
            return this;
        }

        /**
         * @param serviceinstance The id of the service instance to which this spark application belongs.
         * 
         * @return builder
         * 
         */
        public Builder serviceinstance(String serviceinstance) {
            return serviceinstance(Output.of(serviceinstance));
        }

        /**
         * @param sparkApplicationConfig Represents the SparkApplicationConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkApplicationConfig(@Nullable Output<GdcSparkApplicationSparkApplicationConfigArgs> sparkApplicationConfig) {
            $.sparkApplicationConfig = sparkApplicationConfig;
            return this;
        }

        /**
         * @param sparkApplicationConfig Represents the SparkApplicationConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkApplicationConfig(GdcSparkApplicationSparkApplicationConfigArgs sparkApplicationConfig) {
            return sparkApplicationConfig(Output.of(sparkApplicationConfig));
        }

        /**
         * @param sparkApplicationId The id of the application
         * 
         * @return builder
         * 
         */
        public Builder sparkApplicationId(@Nullable Output<String> sparkApplicationId) {
            $.sparkApplicationId = sparkApplicationId;
            return this;
        }

        /**
         * @param sparkApplicationId The id of the application
         * 
         * @return builder
         * 
         */
        public Builder sparkApplicationId(String sparkApplicationId) {
            return sparkApplicationId(Output.of(sparkApplicationId));
        }

        /**
         * @param sparkRApplicationConfig Represents the SparkRApplicationConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkRApplicationConfig(@Nullable Output<GdcSparkApplicationSparkRApplicationConfigArgs> sparkRApplicationConfig) {
            $.sparkRApplicationConfig = sparkRApplicationConfig;
            return this;
        }

        /**
         * @param sparkRApplicationConfig Represents the SparkRApplicationConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkRApplicationConfig(GdcSparkApplicationSparkRApplicationConfigArgs sparkRApplicationConfig) {
            return sparkRApplicationConfig(Output.of(sparkRApplicationConfig));
        }

        /**
         * @param sparkSqlApplicationConfig Represents the SparkRApplicationConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkSqlApplicationConfig(@Nullable Output<GdcSparkApplicationSparkSqlApplicationConfigArgs> sparkSqlApplicationConfig) {
            $.sparkSqlApplicationConfig = sparkSqlApplicationConfig;
            return this;
        }

        /**
         * @param sparkSqlApplicationConfig Represents the SparkRApplicationConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkSqlApplicationConfig(GdcSparkApplicationSparkSqlApplicationConfigArgs sparkSqlApplicationConfig) {
            return sparkSqlApplicationConfig(Output.of(sparkSqlApplicationConfig));
        }

        /**
         * @param state The current state.
         * Possible values:
         * * `STATE_UNSPECIFIED`
         * * `PENDING`
         * * `RUNNING`
         * * `CANCELLING`
         * * `CANCELLED`
         * * `SUCCEEDED`
         * * `FAILED`
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state.
         * Possible values:
         * * `STATE_UNSPECIFIED`
         * * `PENDING`
         * * `RUNNING`
         * * `CANCELLING`
         * * `CANCELLED`
         * * `SUCCEEDED`
         * * `FAILED`
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stateMessage A message explaining the current state.
         * 
         * @return builder
         * 
         */
        public Builder stateMessage(@Nullable Output<String> stateMessage) {
            $.stateMessage = stateMessage;
            return this;
        }

        /**
         * @param stateMessage A message explaining the current state.
         * 
         * @return builder
         * 
         */
        public Builder stateMessage(String stateMessage) {
            return stateMessage(Output.of(stateMessage));
        }

        /**
         * @param uid System generated unique identifier for this application, formatted as UUID4.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid System generated unique identifier for this application, formatted as UUID4.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime The timestamp when the resource was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime The timestamp when the resource was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param version The Dataproc version of this application.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The Dataproc version of this application.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public GdcSparkApplicationState build() {
            return $;
        }
    }

}
