// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.managedkafka.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.managedkafka.inputs.AclAclEntryArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclState extends com.pulumi.resources.ResourceArgs {

    public static final AclState Empty = new AclState();

    /**
     * The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
     * Structure is documented below.
     * 
     */
    @Import(name="aclEntries")
    private @Nullable Output<List<AclAclEntryArgs>> aclEntries;

    /**
     * @return The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<AclAclEntryArgs>>> aclEntries() {
        return Optional.ofNullable(this.aclEntries);
    }

    /**
     * The ID to use for the acl, which will become the final component of the acl&#39;s name. The structure of `aclId` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl. `aclId` is structured like one of the following:
     * For acls on the cluster: `cluster`
     * For acls on a single resource within the cluster: `topic/{resource_name}` `consumerGroup/{resource_name}` `transactionalId/{resource_name}`
     * For acls on all resources that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}` `transactionalIdPrefixed/{resource_name}`
     * For acls on all resources of a given type (i.e. the wildcard literal &#39;*&#39;&#39;): `allTopics` (represents `topic/*`) `allConsumerGroups` (represents `consumerGroup/*`) `allTransactionalIds` (represents `transactionalId/*`).
     * 
     */
    @Import(name="aclId")
    private @Nullable Output<String> aclId;

    /**
     * @return The ID to use for the acl, which will become the final component of the acl&#39;s name. The structure of `aclId` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl. `aclId` is structured like one of the following:
     * For acls on the cluster: `cluster`
     * For acls on a single resource within the cluster: `topic/{resource_name}` `consumerGroup/{resource_name}` `transactionalId/{resource_name}`
     * For acls on all resources that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}` `transactionalIdPrefixed/{resource_name}`
     * For acls on all resources of a given type (i.e. the wildcard literal &#39;*&#39;&#39;): `allTopics` (represents `topic/*`) `allConsumerGroups` (represents `consumerGroup/*`) `allTransactionalIds` (represents `transactionalId/*`).
     * 
     */
    public Optional<Output<String>> aclId() {
        return Optional.ofNullable(this.aclId);
    }

    /**
     * The cluster name.
     * 
     */
    @Import(name="cluster")
    private @Nullable Output<String> cluster;

    /**
     * @return The cluster name.
     * 
     */
    public Optional<Output<String>> cluster() {
        return Optional.ofNullable(this.cluster);
    }

    /**
     * `etag` is used for concurrency control. An `etag` is returned in the
     * response to `GetAcl` and `CreateAcl`. Callers are required to put that etag
     * in the request to `UpdateAcl` to ensure that their change will be applied
     * to the same version of the acl that exists in the Kafka Cluster.
     * A terminal &#39;T&#39; character in the etag indicates that the AclEntries were
     * truncated due to repeated field limits.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return `etag` is used for concurrency control. An `etag` is returned in the
     * response to `GetAcl` and `CreateAcl`. Callers are required to put that etag
     * in the request to `UpdateAcl` to ensure that their change will be applied
     * to the same version of the acl that exists in the Kafka Cluster.
     * A terminal &#39;T&#39; character in the etag indicates that the AclEntries were
     * truncated due to repeated field limits.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the acl. The `ACL_ID` segment is used when connecting directly to the cluster. Must be in the format `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/acls/ACL_ID`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the acl. The `ACL_ID` segment is used when connecting directly to the cluster. Must be in the format `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/acls/ACL_ID`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The acl pattern type derived from the name. One of: LITERAL, PREFIXED.
     * 
     */
    @Import(name="patternType")
    private @Nullable Output<String> patternType;

    /**
     * @return The acl pattern type derived from the name. One of: LITERAL, PREFIXED.
     * 
     */
    public Optional<Output<String>> patternType() {
        return Optional.ofNullable(this.patternType);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The acl resource name derived from the name. For cluster resource_type, this is always &#34;kafka-cluster&#34;. Can be the wildcard literal &#34;*&#34;.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    /**
     * @return The acl resource name derived from the name. For cluster resource_type, this is always &#34;kafka-cluster&#34;. Can be the wildcard literal &#34;*&#34;.
     * 
     */
    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * The acl resource type derived from the name. One of: CLUSTER, TOPIC, GROUP, TRANSACTIONAL_ID.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return The acl resource type derived from the name. One of: CLUSTER, TOPIC, GROUP, TRANSACTIONAL_ID.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    private AclState() {}

    private AclState(AclState $) {
        this.aclEntries = $.aclEntries;
        this.aclId = $.aclId;
        this.cluster = $.cluster;
        this.etag = $.etag;
        this.location = $.location;
        this.name = $.name;
        this.patternType = $.patternType;
        this.project = $.project;
        this.resourceName = $.resourceName;
        this.resourceType = $.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclState $;

        public Builder() {
            $ = new AclState();
        }

        public Builder(AclState defaults) {
            $ = new AclState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclEntries The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder aclEntries(@Nullable Output<List<AclAclEntryArgs>> aclEntries) {
            $.aclEntries = aclEntries;
            return this;
        }

        /**
         * @param aclEntries The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder aclEntries(List<AclAclEntryArgs> aclEntries) {
            return aclEntries(Output.of(aclEntries));
        }

        /**
         * @param aclEntries The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder aclEntries(AclAclEntryArgs... aclEntries) {
            return aclEntries(List.of(aclEntries));
        }

        /**
         * @param aclId The ID to use for the acl, which will become the final component of the acl&#39;s name. The structure of `aclId` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl. `aclId` is structured like one of the following:
         * For acls on the cluster: `cluster`
         * For acls on a single resource within the cluster: `topic/{resource_name}` `consumerGroup/{resource_name}` `transactionalId/{resource_name}`
         * For acls on all resources that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}` `transactionalIdPrefixed/{resource_name}`
         * For acls on all resources of a given type (i.e. the wildcard literal &#39;*&#39;&#39;): `allTopics` (represents `topic/*`) `allConsumerGroups` (represents `consumerGroup/*`) `allTransactionalIds` (represents `transactionalId/*`).
         * 
         * @return builder
         * 
         */
        public Builder aclId(@Nullable Output<String> aclId) {
            $.aclId = aclId;
            return this;
        }

        /**
         * @param aclId The ID to use for the acl, which will become the final component of the acl&#39;s name. The structure of `aclId` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl. `aclId` is structured like one of the following:
         * For acls on the cluster: `cluster`
         * For acls on a single resource within the cluster: `topic/{resource_name}` `consumerGroup/{resource_name}` `transactionalId/{resource_name}`
         * For acls on all resources that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}` `transactionalIdPrefixed/{resource_name}`
         * For acls on all resources of a given type (i.e. the wildcard literal &#39;*&#39;&#39;): `allTopics` (represents `topic/*`) `allConsumerGroups` (represents `consumerGroup/*`) `allTransactionalIds` (represents `transactionalId/*`).
         * 
         * @return builder
         * 
         */
        public Builder aclId(String aclId) {
            return aclId(Output.of(aclId));
        }

        /**
         * @param cluster The cluster name.
         * 
         * @return builder
         * 
         */
        public Builder cluster(@Nullable Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster The cluster name.
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param etag `etag` is used for concurrency control. An `etag` is returned in the
         * response to `GetAcl` and `CreateAcl`. Callers are required to put that etag
         * in the request to `UpdateAcl` to ensure that their change will be applied
         * to the same version of the acl that exists in the Kafka Cluster.
         * A terminal &#39;T&#39; character in the etag indicates that the AclEntries were
         * truncated due to repeated field limits.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag `etag` is used for concurrency control. An `etag` is returned in the
         * response to `GetAcl` and `CreateAcl`. Callers are required to put that etag
         * in the request to `UpdateAcl` to ensure that their change will be applied
         * to the same version of the acl that exists in the Kafka Cluster.
         * A terminal &#39;T&#39; character in the etag indicates that the AclEntries were
         * truncated due to repeated field limits.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param location ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the acl. The `ACL_ID` segment is used when connecting directly to the cluster. Must be in the format `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/acls/ACL_ID`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the acl. The `ACL_ID` segment is used when connecting directly to the cluster. Must be in the format `projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/acls/ACL_ID`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param patternType The acl pattern type derived from the name. One of: LITERAL, PREFIXED.
         * 
         * @return builder
         * 
         */
        public Builder patternType(@Nullable Output<String> patternType) {
            $.patternType = patternType;
            return this;
        }

        /**
         * @param patternType The acl pattern type derived from the name. One of: LITERAL, PREFIXED.
         * 
         * @return builder
         * 
         */
        public Builder patternType(String patternType) {
            return patternType(Output.of(patternType));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param resourceName The acl resource name derived from the name. For cluster resource_type, this is always &#34;kafka-cluster&#34;. Can be the wildcard literal &#34;*&#34;.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName The acl resource name derived from the name. For cluster resource_type, this is always &#34;kafka-cluster&#34;. Can be the wildcard literal &#34;*&#34;.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param resourceType The acl resource type derived from the name. One of: CLUSTER, TOPIC, GROUP, TRANSACTIONAL_ID.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The acl resource type derived from the name. One of: CLUSTER, TOPIC, GROUP, TRANSACTIONAL_ID.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public AclState build() {
            return $;
        }
    }

}
