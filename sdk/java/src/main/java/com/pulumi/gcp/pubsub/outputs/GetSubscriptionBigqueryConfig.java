// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSubscriptionBigqueryConfig {
    /**
     * @return When true and useTopicSchema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery.
     * Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription&#39;s backlog.
     * 
     */
    private Boolean dropUnknownFields;
    /**
     * @return The name of the table to which to write data, of the form {projectId}:{datasetId}.{tableId}
     * 
     */
    private String table;
    /**
     * @return When true, use the topic&#39;s schema as the columns to write to in BigQuery, if it exists.
     * 
     */
    private Boolean useTopicSchema;
    /**
     * @return When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
     * The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
     * 
     */
    private Boolean writeMetadata;

    private GetSubscriptionBigqueryConfig() {}
    /**
     * @return When true and useTopicSchema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery.
     * Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription&#39;s backlog.
     * 
     */
    public Boolean dropUnknownFields() {
        return this.dropUnknownFields;
    }
    /**
     * @return The name of the table to which to write data, of the form {projectId}:{datasetId}.{tableId}
     * 
     */
    public String table() {
        return this.table;
    }
    /**
     * @return When true, use the topic&#39;s schema as the columns to write to in BigQuery, if it exists.
     * 
     */
    public Boolean useTopicSchema() {
        return this.useTopicSchema;
    }
    /**
     * @return When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
     * The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
     * 
     */
    public Boolean writeMetadata() {
        return this.writeMetadata;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionBigqueryConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean dropUnknownFields;
        private String table;
        private Boolean useTopicSchema;
        private Boolean writeMetadata;
        public Builder() {}
        public Builder(GetSubscriptionBigqueryConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dropUnknownFields = defaults.dropUnknownFields;
    	      this.table = defaults.table;
    	      this.useTopicSchema = defaults.useTopicSchema;
    	      this.writeMetadata = defaults.writeMetadata;
        }

        @CustomType.Setter
        public Builder dropUnknownFields(Boolean dropUnknownFields) {
            if (dropUnknownFields == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionBigqueryConfig", "dropUnknownFields");
            }
            this.dropUnknownFields = dropUnknownFields;
            return this;
        }
        @CustomType.Setter
        public Builder table(String table) {
            if (table == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionBigqueryConfig", "table");
            }
            this.table = table;
            return this;
        }
        @CustomType.Setter
        public Builder useTopicSchema(Boolean useTopicSchema) {
            if (useTopicSchema == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionBigqueryConfig", "useTopicSchema");
            }
            this.useTopicSchema = useTopicSchema;
            return this;
        }
        @CustomType.Setter
        public Builder writeMetadata(Boolean writeMetadata) {
            if (writeMetadata == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionBigqueryConfig", "writeMetadata");
            }
            this.writeMetadata = writeMetadata;
            return this;
        }
        public GetSubscriptionBigqueryConfig build() {
            final var _resultValue = new GetSubscriptionBigqueryConfig();
            _resultValue.dropUnknownFields = dropUnknownFields;
            _resultValue.table = table;
            _resultValue.useTopicSchema = useTopicSchema;
            _resultValue.writeMetadata = writeMetadata;
            return _resultValue;
        }
    }
}
