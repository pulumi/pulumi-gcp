// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.discoveryengine.outputs.DataStoreDocumentProcessingConfigParsingConfigOverrideDigitalParsingConfig;
import com.pulumi.gcp.discoveryengine.outputs.DataStoreDocumentProcessingConfigParsingConfigOverrideLayoutParsingConfig;
import com.pulumi.gcp.discoveryengine.outputs.DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfig;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataStoreDocumentProcessingConfigParsingConfigOverride {
    /**
     * @return Configurations applied to digital parser.
     * 
     */
    private @Nullable DataStoreDocumentProcessingConfigParsingConfigOverrideDigitalParsingConfig digitalParsingConfig;
    /**
     * @return The identifier for this object. Format specified above.
     * 
     */
    private String fileType;
    /**
     * @return Configurations applied to layout parser.
     * 
     */
    private @Nullable DataStoreDocumentProcessingConfigParsingConfigOverrideLayoutParsingConfig layoutParsingConfig;
    /**
     * @return Configurations applied to OCR parser. Currently it only applies to PDFs.
     * Structure is documented below.
     * 
     */
    private @Nullable DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfig ocrParsingConfig;

    private DataStoreDocumentProcessingConfigParsingConfigOverride() {}
    /**
     * @return Configurations applied to digital parser.
     * 
     */
    public Optional<DataStoreDocumentProcessingConfigParsingConfigOverrideDigitalParsingConfig> digitalParsingConfig() {
        return Optional.ofNullable(this.digitalParsingConfig);
    }
    /**
     * @return The identifier for this object. Format specified above.
     * 
     */
    public String fileType() {
        return this.fileType;
    }
    /**
     * @return Configurations applied to layout parser.
     * 
     */
    public Optional<DataStoreDocumentProcessingConfigParsingConfigOverrideLayoutParsingConfig> layoutParsingConfig() {
        return Optional.ofNullable(this.layoutParsingConfig);
    }
    /**
     * @return Configurations applied to OCR parser. Currently it only applies to PDFs.
     * Structure is documented below.
     * 
     */
    public Optional<DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfig> ocrParsingConfig() {
        return Optional.ofNullable(this.ocrParsingConfig);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataStoreDocumentProcessingConfigParsingConfigOverride defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DataStoreDocumentProcessingConfigParsingConfigOverrideDigitalParsingConfig digitalParsingConfig;
        private String fileType;
        private @Nullable DataStoreDocumentProcessingConfigParsingConfigOverrideLayoutParsingConfig layoutParsingConfig;
        private @Nullable DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfig ocrParsingConfig;
        public Builder() {}
        public Builder(DataStoreDocumentProcessingConfigParsingConfigOverride defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.digitalParsingConfig = defaults.digitalParsingConfig;
    	      this.fileType = defaults.fileType;
    	      this.layoutParsingConfig = defaults.layoutParsingConfig;
    	      this.ocrParsingConfig = defaults.ocrParsingConfig;
        }

        @CustomType.Setter
        public Builder digitalParsingConfig(@Nullable DataStoreDocumentProcessingConfigParsingConfigOverrideDigitalParsingConfig digitalParsingConfig) {

            this.digitalParsingConfig = digitalParsingConfig;
            return this;
        }
        @CustomType.Setter
        public Builder fileType(String fileType) {
            if (fileType == null) {
              throw new MissingRequiredPropertyException("DataStoreDocumentProcessingConfigParsingConfigOverride", "fileType");
            }
            this.fileType = fileType;
            return this;
        }
        @CustomType.Setter
        public Builder layoutParsingConfig(@Nullable DataStoreDocumentProcessingConfigParsingConfigOverrideLayoutParsingConfig layoutParsingConfig) {

            this.layoutParsingConfig = layoutParsingConfig;
            return this;
        }
        @CustomType.Setter
        public Builder ocrParsingConfig(@Nullable DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfig ocrParsingConfig) {

            this.ocrParsingConfig = ocrParsingConfig;
            return this;
        }
        public DataStoreDocumentProcessingConfigParsingConfigOverride build() {
            final var _resultValue = new DataStoreDocumentProcessingConfigParsingConfigOverride();
            _resultValue.digitalParsingConfig = digitalParsingConfig;
            _resultValue.fileType = fileType;
            _resultValue.layoutParsingConfig = layoutParsingConfig;
            _resultValue.ocrParsingConfig = ocrParsingConfig;
            return _resultValue;
        }
    }
}
