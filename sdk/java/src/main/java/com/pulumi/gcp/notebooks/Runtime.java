// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.notebooks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.notebooks.RuntimeArgs;
import com.pulumi.gcp.notebooks.inputs.RuntimeState;
import com.pulumi.gcp.notebooks.outputs.RuntimeAccessConfig;
import com.pulumi.gcp.notebooks.outputs.RuntimeMetric;
import com.pulumi.gcp.notebooks.outputs.RuntimeSoftwareConfig;
import com.pulumi.gcp.notebooks.outputs.RuntimeVirtualMachine;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &gt; **Warning:** `google_notebook_runtime` is deprecated and will be removed in a future major release. Use `gcp.workbench.Instance` instead.
 * 
 * A Cloud AI Platform Notebook runtime.
 * 
 * &gt; **Note:** Due to limitations of the Notebooks Runtime API, many fields
 * in this resource do not properly detect drift. These fields will also not
 * appear in state once imported.
 * 
 * To get more information about Runtime, see:
 * 
 * * [API documentation](https://cloud.google.com/ai-platform/notebooks/docs/reference/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/ai-platform-notebooks)
 * 
 * ## Example Usage
 * 
 * ### Notebook Runtime Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.notebooks.Runtime;
 * import com.pulumi.gcp.notebooks.RuntimeArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeAccessConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var runtime = new Runtime("runtime", RuntimeArgs.builder()
 *             .name("notebooks-runtime")
 *             .location("us-central1")
 *             .accessConfig(RuntimeAccessConfigArgs.builder()
 *                 .accessType("SINGLE_USER")
 *                 .runtimeOwner("admin}{@literal @}{@code hashicorptest.com")
 *                 .build())
 *             .virtualMachine(RuntimeVirtualMachineArgs.builder()
 *                 .virtualMachineConfig(RuntimeVirtualMachineVirtualMachineConfigArgs.builder()
 *                     .machineType("n1-standard-4")
 *                     .dataDisk(RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs.builder()
 *                         .initializeParams(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs.builder()
 *                             .diskSizeGb(100)
 *                             .diskType("PD_STANDARD")
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Notebook Runtime Basic Gpu
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.notebooks.Runtime;
 * import com.pulumi.gcp.notebooks.RuntimeArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeAccessConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeSoftwareConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigAcceleratorConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var runtimeGpu = new Runtime("runtimeGpu", RuntimeArgs.builder()
 *             .name("notebooks-runtime-gpu")
 *             .location("us-central1")
 *             .accessConfig(RuntimeAccessConfigArgs.builder()
 *                 .accessType("SINGLE_USER")
 *                 .runtimeOwner("admin}{@literal @}{@code hashicorptest.com")
 *                 .build())
 *             .softwareConfig(RuntimeSoftwareConfigArgs.builder()
 *                 .installGpuDriver(true)
 *                 .build())
 *             .virtualMachine(RuntimeVirtualMachineArgs.builder()
 *                 .virtualMachineConfig(RuntimeVirtualMachineVirtualMachineConfigArgs.builder()
 *                     .machineType("n1-standard-4")
 *                     .dataDisk(RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs.builder()
 *                         .initializeParams(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs.builder()
 *                             .diskSizeGb(100)
 *                             .diskType("PD_STANDARD")
 *                             .build())
 *                         .build())
 *                     .acceleratorConfig(RuntimeVirtualMachineVirtualMachineConfigAcceleratorConfigArgs.builder()
 *                         .coreCount(1)
 *                         .type("NVIDIA_TESLA_V100")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Notebook Runtime Basic Container
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.notebooks.Runtime;
 * import com.pulumi.gcp.notebooks.RuntimeArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeAccessConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var runtimeContainer = new Runtime("runtimeContainer", RuntimeArgs.builder()
 *             .name("notebooks-runtime-container")
 *             .location("us-central1")
 *             .accessConfig(RuntimeAccessConfigArgs.builder()
 *                 .accessType("SINGLE_USER")
 *                 .runtimeOwner("admin}{@literal @}{@code hashicorptest.com")
 *                 .build())
 *             .virtualMachine(RuntimeVirtualMachineArgs.builder()
 *                 .virtualMachineConfig(RuntimeVirtualMachineVirtualMachineConfigArgs.builder()
 *                     .machineType("n1-standard-4")
 *                     .dataDisk(RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs.builder()
 *                         .initializeParams(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs.builder()
 *                             .diskSizeGb(100)
 *                             .diskType("PD_STANDARD")
 *                             .build())
 *                         .build())
 *                     .containerImages(                    
 *                         RuntimeVirtualMachineVirtualMachineConfigContainerImageArgs.builder()
 *                             .repository("gcr.io/deeplearning-platform-release/base-cpu")
 *                             .tag("latest")
 *                             .build(),
 *                         RuntimeVirtualMachineVirtualMachineConfigContainerImageArgs.builder()
 *                             .repository("gcr.io/deeplearning-platform-release/beam-notebooks")
 *                             .tag("latest")
 *                             .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Notebook Runtime Kernels
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.notebooks.Runtime;
 * import com.pulumi.gcp.notebooks.RuntimeArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeAccessConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeSoftwareConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var runtimeContainer = new Runtime("runtimeContainer", RuntimeArgs.builder()
 *             .name("notebooks-runtime-kernel")
 *             .location("us-central1")
 *             .accessConfig(RuntimeAccessConfigArgs.builder()
 *                 .accessType("SINGLE_USER")
 *                 .runtimeOwner("admin}{@literal @}{@code hashicorptest.com")
 *                 .build())
 *             .softwareConfig(RuntimeSoftwareConfigArgs.builder()
 *                 .kernels(RuntimeSoftwareConfigKernelArgs.builder()
 *                     .repository("gcr.io/deeplearning-platform-release/base-cpu")
 *                     .tag("latest")
 *                     .build())
 *                 .build())
 *             .virtualMachine(RuntimeVirtualMachineArgs.builder()
 *                 .virtualMachineConfig(RuntimeVirtualMachineVirtualMachineConfigArgs.builder()
 *                     .machineType("n1-standard-4")
 *                     .dataDisk(RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs.builder()
 *                         .initializeParams(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs.builder()
 *                             .diskSizeGb(100)
 *                             .diskType("PD_STANDARD")
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .labels(Map.of("k", "val"))
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Notebook Runtime Script
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.notebooks.Runtime;
 * import com.pulumi.gcp.notebooks.RuntimeArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeAccessConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeSoftwareConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var runtimeContainer = new Runtime("runtimeContainer", RuntimeArgs.builder()
 *             .name("notebooks-runtime-script")
 *             .location("us-central1")
 *             .accessConfig(RuntimeAccessConfigArgs.builder()
 *                 .accessType("SINGLE_USER")
 *                 .runtimeOwner("admin}{@literal @}{@code hashicorptest.com")
 *                 .build())
 *             .softwareConfig(RuntimeSoftwareConfigArgs.builder()
 *                 .postStartupScriptBehavior("RUN_EVERY_START")
 *                 .build())
 *             .virtualMachine(RuntimeVirtualMachineArgs.builder()
 *                 .virtualMachineConfig(RuntimeVirtualMachineVirtualMachineConfigArgs.builder()
 *                     .machineType("n1-standard-4")
 *                     .dataDisk(RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs.builder()
 *                         .initializeParams(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs.builder()
 *                             .diskSizeGb(100)
 *                             .diskType("PD_STANDARD")
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .labels(Map.of("k", "val"))
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Runtime can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/runtimes/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, Runtime can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:notebooks/runtime:Runtime default projects/{{project}}/locations/{{location}}/runtimes/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:notebooks/runtime:Runtime default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:notebooks/runtime:Runtime default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:notebooks/runtime:Runtime")
public class Runtime extends com.pulumi.resources.CustomResource {
    /**
     * The config settings for accessing runtime.
     * Structure is documented below.
     * 
     */
    @Export(name="accessConfig", refs={RuntimeAccessConfig.class}, tree="[0]")
    private Output</* @Nullable */ RuntimeAccessConfig> accessConfig;

    /**
     * @return The config settings for accessing runtime.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RuntimeAccessConfig>> accessConfig() {
        return Codegen.optional(this.accessConfig);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * The health state of this runtime. For a list of possible output
     * values, see `https://cloud.google.com/vertex-ai/docs/workbench/
     * reference/rest/v1/projects.locations.runtimes#healthstate`.
     * 
     */
    @Export(name="healthState", refs={String.class}, tree="[0]")
    private Output<String> healthState;

    /**
     * @return The health state of this runtime. For a list of possible output
     * values, see `https://cloud.google.com/vertex-ai/docs/workbench/
     * reference/rest/v1/projects.locations.runtimes#healthstate`.
     * 
     */
    public Output<String> healthState() {
        return this.healthState;
    }
    /**
     * The labels to associate with this runtime. Label **keys** must
     * contain 1 to 63 characters, and must conform to [RFC 1035]
     * (https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be
     * empty, but, if present, must contain 1 to 63 characters, and must
     * conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No
     * more than 32 labels can be associated with a cluster.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return The labels to associate with this runtime. Label **keys** must
     * contain 1 to 63 characters, and must conform to [RFC 1035]
     * (https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be
     * empty, but, if present, must contain 1 to 63 characters, and must
     * conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No
     * more than 32 labels can be associated with a cluster.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * A reference to the zone where the machine resides.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return A reference to the zone where the machine resides.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Contains Runtime daemon metrics such as Service status and JupyterLab
     * status
     * Structure is documented below.
     * 
     */
    @Export(name="metrics", refs={List.class,RuntimeMetric.class}, tree="[0,1]")
    private Output<List<RuntimeMetric>> metrics;

    /**
     * @return Contains Runtime daemon metrics such as Service status and JupyterLab
     * status
     * Structure is documented below.
     * 
     */
    public Output<List<RuntimeMetric>> metrics() {
        return this.metrics;
    }
    /**
     * The name specified for the Notebook runtime.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name specified for the Notebook runtime.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The config settings for software inside the runtime.
     * Structure is documented below.
     * 
     */
    @Export(name="softwareConfig", refs={RuntimeSoftwareConfig.class}, tree="[0]")
    private Output<RuntimeSoftwareConfig> softwareConfig;

    /**
     * @return The config settings for software inside the runtime.
     * Structure is documented below.
     * 
     */
    public Output<RuntimeSoftwareConfig> softwareConfig() {
        return this.softwareConfig;
    }
    /**
     * The state of this runtime.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The state of this runtime.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Use a Compute Engine VM image to start the managed notebook instance.
     * Structure is documented below.
     * 
     */
    @Export(name="virtualMachine", refs={RuntimeVirtualMachine.class}, tree="[0]")
    private Output</* @Nullable */ RuntimeVirtualMachine> virtualMachine;

    /**
     * @return Use a Compute Engine VM image to start the managed notebook instance.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RuntimeVirtualMachine>> virtualMachine() {
        return Codegen.optional(this.virtualMachine);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Runtime(java.lang.String name) {
        this(name, RuntimeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Runtime(java.lang.String name, RuntimeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Runtime(java.lang.String name, RuntimeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:notebooks/runtime:Runtime", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Runtime(java.lang.String name, Output<java.lang.String> id, @Nullable RuntimeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:notebooks/runtime:Runtime", name, state, makeResourceOptions(options, id), false);
    }

    private static RuntimeArgs makeArgs(RuntimeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RuntimeArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Runtime get(java.lang.String name, Output<java.lang.String> id, @Nullable RuntimeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Runtime(name, id, state, options);
    }
}
