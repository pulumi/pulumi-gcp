// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.notebooks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.notebooks.RuntimeArgs;
import com.pulumi.gcp.notebooks.inputs.RuntimeState;
import com.pulumi.gcp.notebooks.outputs.RuntimeAccessConfig;
import com.pulumi.gcp.notebooks.outputs.RuntimeMetric;
import com.pulumi.gcp.notebooks.outputs.RuntimeSoftwareConfig;
import com.pulumi.gcp.notebooks.outputs.RuntimeVirtualMachine;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Cloud AI Platform Notebook runtime.
 * 
 * &gt; **Note:** Due to limitations of the Notebooks Runtime API, many fields
 * in this resource do not properly detect drift. These fields will also not
 * appear in state once imported.
 * 
 * To get more information about Runtime, see:
 * 
 * * [API documentation](https://cloud.google.com/ai-platform/notebooks/docs/reference/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/ai-platform-notebooks)
 * 
 * ## Example Usage
 * ### Notebook Runtime Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.notebooks.Runtime;
 * import com.pulumi.gcp.notebooks.RuntimeArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeAccessConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var runtime = new Runtime(&#34;runtime&#34;, RuntimeArgs.builder()        
 *             .accessConfig(RuntimeAccessConfigArgs.builder()
 *                 .accessType(&#34;SINGLE_USER&#34;)
 *                 .runtimeOwner(&#34;admin@hashicorptest.com&#34;)
 *                 .build())
 *             .location(&#34;us-central1&#34;)
 *             .virtualMachine(RuntimeVirtualMachineArgs.builder()
 *                 .virtualMachineConfig(RuntimeVirtualMachineVirtualMachineConfigArgs.builder()
 *                     .dataDisk(RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs.builder()
 *                         .initializeParams(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs.builder()
 *                             .diskSizeGb(&#34;100&#34;)
 *                             .diskType(&#34;PD_STANDARD&#34;)
 *                             .build())
 *                         .build())
 *                     .machineType(&#34;n1-standard-4&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Notebook Runtime Basic Gpu
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.notebooks.Runtime;
 * import com.pulumi.gcp.notebooks.RuntimeArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeAccessConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeSoftwareConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigAcceleratorConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var runtimeGpu = new Runtime(&#34;runtimeGpu&#34;, RuntimeArgs.builder()        
 *             .accessConfig(RuntimeAccessConfigArgs.builder()
 *                 .accessType(&#34;SINGLE_USER&#34;)
 *                 .runtimeOwner(&#34;admin@hashicorptest.com&#34;)
 *                 .build())
 *             .location(&#34;us-central1&#34;)
 *             .softwareConfig(RuntimeSoftwareConfigArgs.builder()
 *                 .installGpuDriver(true)
 *                 .build())
 *             .virtualMachine(RuntimeVirtualMachineArgs.builder()
 *                 .virtualMachineConfig(RuntimeVirtualMachineVirtualMachineConfigArgs.builder()
 *                     .acceleratorConfig(RuntimeVirtualMachineVirtualMachineConfigAcceleratorConfigArgs.builder()
 *                         .coreCount(&#34;1&#34;)
 *                         .type(&#34;NVIDIA_TESLA_V100&#34;)
 *                         .build())
 *                     .dataDisk(RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs.builder()
 *                         .initializeParams(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs.builder()
 *                             .diskSizeGb(&#34;100&#34;)
 *                             .diskType(&#34;PD_STANDARD&#34;)
 *                             .build())
 *                         .build())
 *                     .machineType(&#34;n1-standard-4&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Notebook Runtime Basic Container
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.notebooks.Runtime;
 * import com.pulumi.gcp.notebooks.RuntimeArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeAccessConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var runtimeContainer = new Runtime(&#34;runtimeContainer&#34;, RuntimeArgs.builder()        
 *             .accessConfig(RuntimeAccessConfigArgs.builder()
 *                 .accessType(&#34;SINGLE_USER&#34;)
 *                 .runtimeOwner(&#34;admin@hashicorptest.com&#34;)
 *                 .build())
 *             .location(&#34;us-central1&#34;)
 *             .virtualMachine(RuntimeVirtualMachineArgs.builder()
 *                 .virtualMachineConfig(RuntimeVirtualMachineVirtualMachineConfigArgs.builder()
 *                     .containerImages(                    
 *                         RuntimeVirtualMachineVirtualMachineConfigContainerImageArgs.builder()
 *                             .repository(&#34;gcr.io/deeplearning-platform-release/base-cpu&#34;)
 *                             .tag(&#34;latest&#34;)
 *                             .build(),
 *                         RuntimeVirtualMachineVirtualMachineConfigContainerImageArgs.builder()
 *                             .repository(&#34;gcr.io/deeplearning-platform-release/beam-notebooks&#34;)
 *                             .tag(&#34;latest&#34;)
 *                             .build())
 *                     .dataDisk(RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs.builder()
 *                         .initializeParams(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs.builder()
 *                             .diskSizeGb(&#34;100&#34;)
 *                             .diskType(&#34;PD_STANDARD&#34;)
 *                             .build())
 *                         .build())
 *                     .machineType(&#34;n1-standard-4&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Notebook Runtime Kernels
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.notebooks.Runtime;
 * import com.pulumi.gcp.notebooks.RuntimeArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeAccessConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeSoftwareConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var runtimeContainer = new Runtime(&#34;runtimeContainer&#34;, RuntimeArgs.builder()        
 *             .accessConfig(RuntimeAccessConfigArgs.builder()
 *                 .accessType(&#34;SINGLE_USER&#34;)
 *                 .runtimeOwner(&#34;admin@hashicorptest.com&#34;)
 *                 .build())
 *             .location(&#34;us-central1&#34;)
 *             .softwareConfig(RuntimeSoftwareConfigArgs.builder()
 *                 .kernels(RuntimeSoftwareConfigKernelArgs.builder()
 *                     .repository(&#34;gcr.io/deeplearning-platform-release/base-cpu&#34;)
 *                     .tag(&#34;latest&#34;)
 *                     .build())
 *                 .build())
 *             .virtualMachine(RuntimeVirtualMachineArgs.builder()
 *                 .virtualMachineConfig(RuntimeVirtualMachineVirtualMachineConfigArgs.builder()
 *                     .dataDisk(RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs.builder()
 *                         .initializeParams(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs.builder()
 *                             .diskSizeGb(&#34;100&#34;)
 *                             .diskType(&#34;PD_STANDARD&#34;)
 *                             .build())
 *                         .build())
 *                     .machineType(&#34;n1-standard-4&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Notebook Runtime Script
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.notebooks.Runtime;
 * import com.pulumi.gcp.notebooks.RuntimeArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeAccessConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeSoftwareConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs;
 * import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var runtimeContainer = new Runtime(&#34;runtimeContainer&#34;, RuntimeArgs.builder()        
 *             .accessConfig(RuntimeAccessConfigArgs.builder()
 *                 .accessType(&#34;SINGLE_USER&#34;)
 *                 .runtimeOwner(&#34;admin@hashicorptest.com&#34;)
 *                 .build())
 *             .location(&#34;us-central1&#34;)
 *             .softwareConfig(RuntimeSoftwareConfigArgs.builder()
 *                 .postStartupScriptBehavior(&#34;RUN_EVERY_START&#34;)
 *                 .build())
 *             .virtualMachine(RuntimeVirtualMachineArgs.builder()
 *                 .virtualMachineConfig(RuntimeVirtualMachineVirtualMachineConfigArgs.builder()
 *                     .dataDisk(RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs.builder()
 *                         .initializeParams(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs.builder()
 *                             .diskSizeGb(&#34;100&#34;)
 *                             .diskType(&#34;PD_STANDARD&#34;)
 *                             .build())
 *                         .build())
 *                     .machineType(&#34;n1-standard-4&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Runtime can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:notebooks/runtime:Runtime default projects/{{project}}/locations/{{location}}/runtimes/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:notebooks/runtime:Runtime default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:notebooks/runtime:Runtime default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:notebooks/runtime:Runtime")
public class Runtime extends com.pulumi.resources.CustomResource {
    /**
     * The config settings for accessing runtime.
     * Structure is documented below.
     * 
     */
    @Export(name="accessConfig", type=RuntimeAccessConfig.class, parameters={})
    private Output</* @Nullable */ RuntimeAccessConfig> accessConfig;

    /**
     * @return The config settings for accessing runtime.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RuntimeAccessConfig>> accessConfig() {
        return Codegen.optional(this.accessConfig);
    }
    /**
     * The health state of this runtime. For a list of possible output
     * values, see `https://cloud.google.com/vertex-ai/docs/workbench/
     * reference/rest/v1/projects.locations.runtimes#healthstate`.
     * 
     */
    @Export(name="healthState", type=String.class, parameters={})
    private Output<String> healthState;

    /**
     * @return The health state of this runtime. For a list of possible output
     * values, see `https://cloud.google.com/vertex-ai/docs/workbench/
     * reference/rest/v1/projects.locations.runtimes#healthstate`.
     * 
     */
    public Output<String> healthState() {
        return this.healthState;
    }
    /**
     * A reference to the zone where the machine resides.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return A reference to the zone where the machine resides.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Contains Runtime daemon metrics such as Service status and JupyterLab
     * status
     * Structure is documented below.
     * 
     */
    @Export(name="metrics", type=List.class, parameters={RuntimeMetric.class})
    private Output<List<RuntimeMetric>> metrics;

    /**
     * @return Contains Runtime daemon metrics such as Service status and JupyterLab
     * status
     * Structure is documented below.
     * 
     */
    public Output<List<RuntimeMetric>> metrics() {
        return this.metrics;
    }
    /**
     * The name specified for the Notebook runtime.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name specified for the Notebook runtime.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The config settings for software inside the runtime.
     * Structure is documented below.
     * 
     */
    @Export(name="softwareConfig", type=RuntimeSoftwareConfig.class, parameters={})
    private Output<RuntimeSoftwareConfig> softwareConfig;

    /**
     * @return The config settings for software inside the runtime.
     * Structure is documented below.
     * 
     */
    public Output<RuntimeSoftwareConfig> softwareConfig() {
        return this.softwareConfig;
    }
    /**
     * The state of this runtime.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The state of this runtime.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Use a Compute Engine VM image to start the managed notebook instance.
     * Structure is documented below.
     * 
     */
    @Export(name="virtualMachine", type=RuntimeVirtualMachine.class, parameters={})
    private Output</* @Nullable */ RuntimeVirtualMachine> virtualMachine;

    /**
     * @return Use a Compute Engine VM image to start the managed notebook instance.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RuntimeVirtualMachine>> virtualMachine() {
        return Codegen.optional(this.virtualMachine);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Runtime(String name) {
        this(name, RuntimeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Runtime(String name, RuntimeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Runtime(String name, RuntimeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:notebooks/runtime:Runtime", name, args == null ? RuntimeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Runtime(String name, Output<String> id, @Nullable RuntimeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:notebooks/runtime:Runtime", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Runtime get(String name, Output<String> id, @Nullable RuntimeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Runtime(name, id, state, options);
    }
}
