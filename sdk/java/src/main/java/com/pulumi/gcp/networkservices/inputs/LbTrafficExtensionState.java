// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.networkservices.inputs.LbTrafficExtensionExtensionChainArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LbTrafficExtensionState extends com.pulumi.resources.ResourceArgs {

    public static final LbTrafficExtensionState Empty = new LbTrafficExtensionState();

    /**
     * A human-readable description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human-readable description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * A set of ordered extension chains that contain the match conditions and extensions to execute.
     * Match conditions for each extension chain are evaluated in sequence for a given request.
     * The first extension chain that has a condition that matches the request is executed.
     * Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
     * Structure is documented below.
     * 
     */
    @Import(name="extensionChains")
    private @Nullable Output<List<LbTrafficExtensionExtensionChainArgs>> extensionChains;

    /**
     * @return A set of ordered extension chains that contain the match conditions and extensions to execute.
     * Match conditions for each extension chain are evaluated in sequence for a given request.
     * The first extension chain that has a condition that matches the request is executed.
     * Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<LbTrafficExtensionExtensionChainArgs>>> extensionChains() {
        return Optional.ofNullable(this.extensionChains);
    }

    /**
     * A list of references to the forwarding rules to which this service extension is attached to.
     * At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
     * 
     */
    @Import(name="forwardingRules")
    private @Nullable Output<List<String>> forwardingRules;

    /**
     * @return A list of references to the forwarding rules to which this service extension is attached to.
     * At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
     * 
     */
    public Optional<Output<List<String>>> forwardingRules() {
        return Optional.ofNullable(this.forwardingRules);
    }

    /**
     * Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field &#39;effective_labels&#39; for all of the labels
     * present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field &#39;effective_labels&#39; for all of the labels
     * present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
     * more information, refer to Choosing a load balancer. Possible values: [&#34;LOAD_BALANCING_SCHEME_UNSPECIFIED&#34;,
     * &#34;INTERNAL_MANAGED&#34;, &#34;EXTERNAL_MANAGED&#34;]
     * 
     */
    @Import(name="loadBalancingScheme")
    private @Nullable Output<String> loadBalancingScheme;

    /**
     * @return All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
     * more information, refer to Choosing a load balancer. Possible values: [&#34;LOAD_BALANCING_SCHEME_UNSPECIFIED&#34;,
     * &#34;INTERNAL_MANAGED&#34;, &#34;EXTERNAL_MANAGED&#34;]
     * 
     */
    public Optional<Output<String>> loadBalancingScheme() {
        return Optional.ofNullable(this.loadBalancingScheme);
    }

    /**
     * The location of the traffic extension
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the traffic extension
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    private LbTrafficExtensionState() {}

    private LbTrafficExtensionState(LbTrafficExtensionState $) {
        this.description = $.description;
        this.effectiveLabels = $.effectiveLabels;
        this.extensionChains = $.extensionChains;
        this.forwardingRules = $.forwardingRules;
        this.labels = $.labels;
        this.loadBalancingScheme = $.loadBalancingScheme;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LbTrafficExtensionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LbTrafficExtensionState $;

        public Builder() {
            $ = new LbTrafficExtensionState();
        }

        public Builder(LbTrafficExtensionState defaults) {
            $ = new LbTrafficExtensionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A human-readable description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human-readable description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param extensionChains A set of ordered extension chains that contain the match conditions and extensions to execute.
         * Match conditions for each extension chain are evaluated in sequence for a given request.
         * The first extension chain that has a condition that matches the request is executed.
         * Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder extensionChains(@Nullable Output<List<LbTrafficExtensionExtensionChainArgs>> extensionChains) {
            $.extensionChains = extensionChains;
            return this;
        }

        /**
         * @param extensionChains A set of ordered extension chains that contain the match conditions and extensions to execute.
         * Match conditions for each extension chain are evaluated in sequence for a given request.
         * The first extension chain that has a condition that matches the request is executed.
         * Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder extensionChains(List<LbTrafficExtensionExtensionChainArgs> extensionChains) {
            return extensionChains(Output.of(extensionChains));
        }

        /**
         * @param extensionChains A set of ordered extension chains that contain the match conditions and extensions to execute.
         * Match conditions for each extension chain are evaluated in sequence for a given request.
         * The first extension chain that has a condition that matches the request is executed.
         * Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder extensionChains(LbTrafficExtensionExtensionChainArgs... extensionChains) {
            return extensionChains(List.of(extensionChains));
        }

        /**
         * @param forwardingRules A list of references to the forwarding rules to which this service extension is attached to.
         * At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRules(@Nullable Output<List<String>> forwardingRules) {
            $.forwardingRules = forwardingRules;
            return this;
        }

        /**
         * @param forwardingRules A list of references to the forwarding rules to which this service extension is attached to.
         * At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRules(List<String> forwardingRules) {
            return forwardingRules(Output.of(forwardingRules));
        }

        /**
         * @param forwardingRules A list of references to the forwarding rules to which this service extension is attached to.
         * At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRules(String... forwardingRules) {
            return forwardingRules(List.of(forwardingRules));
        }

        /**
         * @param labels Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
         * manage the labels present in your configuration. Please refer to the field &#39;effective_labels&#39; for all of the labels
         * present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
         * manage the labels present in your configuration. Please refer to the field &#39;effective_labels&#39; for all of the labels
         * present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param loadBalancingScheme All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
         * more information, refer to Choosing a load balancer. Possible values: [&#34;LOAD_BALANCING_SCHEME_UNSPECIFIED&#34;,
         * &#34;INTERNAL_MANAGED&#34;, &#34;EXTERNAL_MANAGED&#34;]
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingScheme(@Nullable Output<String> loadBalancingScheme) {
            $.loadBalancingScheme = loadBalancingScheme;
            return this;
        }

        /**
         * @param loadBalancingScheme All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
         * more information, refer to Choosing a load balancer. Possible values: [&#34;LOAD_BALANCING_SCHEME_UNSPECIFIED&#34;,
         * &#34;INTERNAL_MANAGED&#34;, &#34;EXTERNAL_MANAGED&#34;]
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingScheme(String loadBalancingScheme) {
            return loadBalancingScheme(Output.of(loadBalancingScheme));
        }

        /**
         * @param location The location of the traffic extension
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the traffic extension
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        public LbTrafficExtensionState build() {
            return $;
        }
    }

}
