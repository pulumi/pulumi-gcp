// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class RepositoryGitRemoteSettingsSshAuthenticationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryGitRemoteSettingsSshAuthenticationConfigArgs Empty = new RepositoryGitRemoteSettingsSshAuthenticationConfigArgs();

    /**
     * Content of a public SSH key to verify an identity of a remote Git host.
     * 
     */
    @Import(name="hostPublicKey", required=true)
    private Output<String> hostPublicKey;

    /**
     * @return Content of a public SSH key to verify an identity of a remote Git host.
     * 
     */
    public Output<String> hostPublicKey() {
        return this.hostPublicKey;
    }

    /**
     * The name of the Secret Manager secret version to use as a ssh private key for Git operations. Must be in the format projects/*{@literal /}secrets/*{@literal /}versions/*.
     * 
     */
    @Import(name="userPrivateKeySecretVersion", required=true)
    private Output<String> userPrivateKeySecretVersion;

    /**
     * @return The name of the Secret Manager secret version to use as a ssh private key for Git operations. Must be in the format projects/*{@literal /}secrets/*{@literal /}versions/*.
     * 
     */
    public Output<String> userPrivateKeySecretVersion() {
        return this.userPrivateKeySecretVersion;
    }

    private RepositoryGitRemoteSettingsSshAuthenticationConfigArgs() {}

    private RepositoryGitRemoteSettingsSshAuthenticationConfigArgs(RepositoryGitRemoteSettingsSshAuthenticationConfigArgs $) {
        this.hostPublicKey = $.hostPublicKey;
        this.userPrivateKeySecretVersion = $.userPrivateKeySecretVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryGitRemoteSettingsSshAuthenticationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryGitRemoteSettingsSshAuthenticationConfigArgs $;

        public Builder() {
            $ = new RepositoryGitRemoteSettingsSshAuthenticationConfigArgs();
        }

        public Builder(RepositoryGitRemoteSettingsSshAuthenticationConfigArgs defaults) {
            $ = new RepositoryGitRemoteSettingsSshAuthenticationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostPublicKey Content of a public SSH key to verify an identity of a remote Git host.
         * 
         * @return builder
         * 
         */
        public Builder hostPublicKey(Output<String> hostPublicKey) {
            $.hostPublicKey = hostPublicKey;
            return this;
        }

        /**
         * @param hostPublicKey Content of a public SSH key to verify an identity of a remote Git host.
         * 
         * @return builder
         * 
         */
        public Builder hostPublicKey(String hostPublicKey) {
            return hostPublicKey(Output.of(hostPublicKey));
        }

        /**
         * @param userPrivateKeySecretVersion The name of the Secret Manager secret version to use as a ssh private key for Git operations. Must be in the format projects/*{@literal /}secrets/*{@literal /}versions/*.
         * 
         * @return builder
         * 
         */
        public Builder userPrivateKeySecretVersion(Output<String> userPrivateKeySecretVersion) {
            $.userPrivateKeySecretVersion = userPrivateKeySecretVersion;
            return this;
        }

        /**
         * @param userPrivateKeySecretVersion The name of the Secret Manager secret version to use as a ssh private key for Git operations. Must be in the format projects/*{@literal /}secrets/*{@literal /}versions/*.
         * 
         * @return builder
         * 
         */
        public Builder userPrivateKeySecretVersion(String userPrivateKeySecretVersion) {
            return userPrivateKeySecretVersion(Output.of(userPrivateKeySecretVersion));
        }

        public RepositoryGitRemoteSettingsSshAuthenticationConfigArgs build() {
            if ($.hostPublicKey == null) {
                throw new MissingRequiredPropertyException("RepositoryGitRemoteSettingsSshAuthenticationConfigArgs", "hostPublicKey");
            }
            if ($.userPrivateKeySecretVersion == null) {
                throw new MissingRequiredPropertyException("RepositoryGitRemoteSettingsSshAuthenticationConfigArgs", "userPrivateKeySecretVersion");
            }
            return $;
        }
    }

}
