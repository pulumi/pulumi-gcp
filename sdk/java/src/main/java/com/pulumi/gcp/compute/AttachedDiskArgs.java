// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttachedDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttachedDiskArgs Empty = new AttachedDiskArgs();

    /**
     * Specifies a unique device name of your choice that is
     * reflected into the /dev/disk/by-id/google-* tree of a Linux operating
     * system running within the instance. This name can be used to
     * reference the device for mounting, resizing, and so on, from within
     * the instance.
     * 
     */
    @Import(name="deviceName")
    private @Nullable Output<String> deviceName;

    /**
     * @return Specifies a unique device name of your choice that is
     * reflected into the /dev/disk/by-id/google-* tree of a Linux operating
     * system running within the instance. This name can be used to
     * reference the device for mounting, resizing, and so on, from within
     * the instance.
     * 
     */
    public Optional<Output<String>> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }

    /**
     * `name` or `self_link` of the disk that will be attached.
     * 
     */
    @Import(name="disk", required=true)
    private Output<String> disk;

    /**
     * @return `name` or `self_link` of the disk that will be attached.
     * 
     */
    public Output<String> disk() {
        return this.disk;
    }

    /**
     * `name` or `self_link` of the compute instance that the disk will be attached to.
     * If the `self_link` is provided then `zone` and `project` are extracted from the
     * self link. If only the name is used then `zone` and `project` must be defined
     * as properties on the resource or provider.
     * 
     */
    @Import(name="instance", required=true)
    private Output<String> instance;

    /**
     * @return `name` or `self_link` of the compute instance that the disk will be attached to.
     * If the `self_link` is provided then `zone` and `project` are extracted from the
     * self link. If only the name is used then `zone` and `project` must be defined
     * as properties on the resource or provider.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }

    /**
     * The mode in which to attach this disk, either READ_WRITE or
     * READ_ONLY. If not specified, the default is to attach the disk in
     * READ_WRITE mode.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The mode in which to attach this disk, either READ_WRITE or
     * READ_ONLY. If not specified, the default is to attach the disk in
     * READ_WRITE mode.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The project that the referenced compute instance is a part of. If `instance` is referenced by its
     * `self_link` the project defined in the link will take precedence.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project that the referenced compute instance is a part of. If `instance` is referenced by its
     * `self_link` the project defined in the link will take precedence.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The zone that the referenced compute instance is located within. If `instance` is referenced by its
     * `self_link` the zone defined in the link will take precedence.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The zone that the referenced compute instance is located within. If `instance` is referenced by its
     * `self_link` the zone defined in the link will take precedence.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private AttachedDiskArgs() {}

    private AttachedDiskArgs(AttachedDiskArgs $) {
        this.deviceName = $.deviceName;
        this.disk = $.disk;
        this.instance = $.instance;
        this.mode = $.mode;
        this.project = $.project;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttachedDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttachedDiskArgs $;

        public Builder() {
            $ = new AttachedDiskArgs();
        }

        public Builder(AttachedDiskArgs defaults) {
            $ = new AttachedDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deviceName Specifies a unique device name of your choice that is
         * reflected into the /dev/disk/by-id/google-* tree of a Linux operating
         * system running within the instance. This name can be used to
         * reference the device for mounting, resizing, and so on, from within
         * the instance.
         * 
         * @return builder
         * 
         */
        public Builder deviceName(@Nullable Output<String> deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        /**
         * @param deviceName Specifies a unique device name of your choice that is
         * reflected into the /dev/disk/by-id/google-* tree of a Linux operating
         * system running within the instance. This name can be used to
         * reference the device for mounting, resizing, and so on, from within
         * the instance.
         * 
         * @return builder
         * 
         */
        public Builder deviceName(String deviceName) {
            return deviceName(Output.of(deviceName));
        }

        /**
         * @param disk `name` or `self_link` of the disk that will be attached.
         * 
         * @return builder
         * 
         */
        public Builder disk(Output<String> disk) {
            $.disk = disk;
            return this;
        }

        /**
         * @param disk `name` or `self_link` of the disk that will be attached.
         * 
         * @return builder
         * 
         */
        public Builder disk(String disk) {
            return disk(Output.of(disk));
        }

        /**
         * @param instance `name` or `self_link` of the compute instance that the disk will be attached to.
         * If the `self_link` is provided then `zone` and `project` are extracted from the
         * self link. If only the name is used then `zone` and `project` must be defined
         * as properties on the resource or provider.
         * 
         * @return builder
         * 
         */
        public Builder instance(Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance `name` or `self_link` of the compute instance that the disk will be attached to.
         * If the `self_link` is provided then `zone` and `project` are extracted from the
         * self link. If only the name is used then `zone` and `project` must be defined
         * as properties on the resource or provider.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param mode The mode in which to attach this disk, either READ_WRITE or
         * READ_ONLY. If not specified, the default is to attach the disk in
         * READ_WRITE mode.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The mode in which to attach this disk, either READ_WRITE or
         * READ_ONLY. If not specified, the default is to attach the disk in
         * READ_WRITE mode.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param project The project that the referenced compute instance is a part of. If `instance` is referenced by its
         * `self_link` the project defined in the link will take precedence.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project that the referenced compute instance is a part of. If `instance` is referenced by its
         * `self_link` the project defined in the link will take precedence.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param zone The zone that the referenced compute instance is located within. If `instance` is referenced by its
         * `self_link` the zone defined in the link will take precedence.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The zone that the referenced compute instance is located within. If `instance` is referenced by its
         * `self_link` the zone defined in the link will take precedence.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public AttachedDiskArgs build() {
            $.disk = Objects.requireNonNull($.disk, "expected parameter 'disk' to be non-null");
            $.instance = Objects.requireNonNull($.instance, "expected parameter 'instance' to be non-null");
            return $;
        }
    }

}
