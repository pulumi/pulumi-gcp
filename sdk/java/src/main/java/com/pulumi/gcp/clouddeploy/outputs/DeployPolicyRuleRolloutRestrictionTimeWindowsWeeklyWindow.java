// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddeploy.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.clouddeploy.outputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTime;
import com.pulumi.gcp.clouddeploy.outputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTime;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindow {
    /**
     * @return Days of week. If left empty, all days of the week will be included.
     * Each value may be one of: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
     * 
     */
    private @Nullable List<String> daysOfWeeks;
    /**
     * @return End time (exclusive). Use 24:00 to indicate midnight. If you specify endTime you must also specify startTime. If left empty, this will block for the entire day for the days specified in daysOfWeek.
     * Structure is documented below.
     * 
     */
    private @Nullable DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTime endTime;
    /**
     * @return Start time (inclusive). Use 00:00 for the beginning of the day. If you specify startTime you must also specify endTime. If left empty, this will block for the entire day for the days specified in daysOfWeek.
     * Structure is documented below.
     * 
     */
    private @Nullable DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTime startTime;

    private DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindow() {}
    /**
     * @return Days of week. If left empty, all days of the week will be included.
     * Each value may be one of: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
     * 
     */
    public List<String> daysOfWeeks() {
        return this.daysOfWeeks == null ? List.of() : this.daysOfWeeks;
    }
    /**
     * @return End time (exclusive). Use 24:00 to indicate midnight. If you specify endTime you must also specify startTime. If left empty, this will block for the entire day for the days specified in daysOfWeek.
     * Structure is documented below.
     * 
     */
    public Optional<DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTime> endTime() {
        return Optional.ofNullable(this.endTime);
    }
    /**
     * @return Start time (inclusive). Use 00:00 for the beginning of the day. If you specify startTime you must also specify endTime. If left empty, this will block for the entire day for the days specified in daysOfWeek.
     * Structure is documented below.
     * 
     */
    public Optional<DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTime> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindow defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> daysOfWeeks;
        private @Nullable DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTime endTime;
        private @Nullable DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTime startTime;
        public Builder() {}
        public Builder(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindow defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.daysOfWeeks = defaults.daysOfWeeks;
    	      this.endTime = defaults.endTime;
    	      this.startTime = defaults.startTime;
        }

        @CustomType.Setter
        public Builder daysOfWeeks(@Nullable List<String> daysOfWeeks) {

            this.daysOfWeeks = daysOfWeeks;
            return this;
        }
        public Builder daysOfWeeks(String... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }
        @CustomType.Setter
        public Builder endTime(@Nullable DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTime endTime) {

            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTime startTime) {

            this.startTime = startTime;
            return this;
        }
        public DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindow build() {
            final var _resultValue = new DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindow();
            _resultValue.daysOfWeeks = daysOfWeeks;
            _resultValue.endTime = endTime;
            _resultValue.startTime = startTime;
            return _resultValue;
        }
    }
}
