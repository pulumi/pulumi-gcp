// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntryAspectAspectArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntryAspectAspectArgs Empty = new EntryAspectAspectArgs();

    /**
     * (Output)
     * The resource name of the type used to create this Aspect.
     * 
     */
    @Import(name="aspectType")
    private @Nullable Output<String> aspectType;

    /**
     * @return (Output)
     * The resource name of the type used to create this Aspect.
     * 
     */
    public Optional<Output<String>> aspectType() {
        return Optional.ofNullable(this.aspectType);
    }

    /**
     * (Output)
     * The time when the Aspect was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return (Output)
     * The time when the Aspect was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The content of the aspect in JSON form, according to its aspect type schema. The maximum size of the field is 120KB (encoded as UTF-8).
     * 
     */
    @Import(name="data", required=true)
    private Output<String> data;

    /**
     * @return The content of the aspect in JSON form, according to its aspect type schema. The maximum size of the field is 120KB (encoded as UTF-8).
     * 
     */
    public Output<String> data() {
        return this.data;
    }

    /**
     * (Output)
     * The path in the entry under which the aspect is attached.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return (Output)
     * The path in the entry under which the aspect is attached.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * (Output)
     * The time when the Aspect was last modified.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return (Output)
     * The time when the Aspect was last modified.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private EntryAspectAspectArgs() {}

    private EntryAspectAspectArgs(EntryAspectAspectArgs $) {
        this.aspectType = $.aspectType;
        this.createTime = $.createTime;
        this.data = $.data;
        this.path = $.path;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntryAspectAspectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntryAspectAspectArgs $;

        public Builder() {
            $ = new EntryAspectAspectArgs();
        }

        public Builder(EntryAspectAspectArgs defaults) {
            $ = new EntryAspectAspectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aspectType (Output)
         * The resource name of the type used to create this Aspect.
         * 
         * @return builder
         * 
         */
        public Builder aspectType(@Nullable Output<String> aspectType) {
            $.aspectType = aspectType;
            return this;
        }

        /**
         * @param aspectType (Output)
         * The resource name of the type used to create this Aspect.
         * 
         * @return builder
         * 
         */
        public Builder aspectType(String aspectType) {
            return aspectType(Output.of(aspectType));
        }

        /**
         * @param createTime (Output)
         * The time when the Aspect was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime (Output)
         * The time when the Aspect was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param data The content of the aspect in JSON form, according to its aspect type schema. The maximum size of the field is 120KB (encoded as UTF-8).
         * 
         * @return builder
         * 
         */
        public Builder data(Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data The content of the aspect in JSON form, according to its aspect type schema. The maximum size of the field is 120KB (encoded as UTF-8).
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        /**
         * @param path (Output)
         * The path in the entry under which the aspect is attached.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path (Output)
         * The path in the entry under which the aspect is attached.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param updateTime (Output)
         * The time when the Aspect was last modified.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime (Output)
         * The time when the Aspect was last modified.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public EntryAspectAspectArgs build() {
            if ($.data == null) {
                throw new MissingRequiredPropertyException("EntryAspectAspectArgs", "data");
            }
            return $;
        }
    }

}
