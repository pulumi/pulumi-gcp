// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodePoolNodeConfigBootDisk {
    /**
     * @return Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
     * 
     */
    private @Nullable String diskType;
    /**
     * @return Configured IOPs provisioning. Only valid with disk type hyperdisk-balanced.
     * 
     */
    private @Nullable Integer provisionedIops;
    /**
     * @return Configured throughput provisioning. Only valid with disk type hyperdisk-balanced.
     * 
     */
    private @Nullable Integer provisionedThroughput;
    /**
     * @return Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
     * 
     */
    private @Nullable Integer sizeGb;

    private NodePoolNodeConfigBootDisk() {}
    /**
     * @return Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
     * 
     */
    public Optional<String> diskType() {
        return Optional.ofNullable(this.diskType);
    }
    /**
     * @return Configured IOPs provisioning. Only valid with disk type hyperdisk-balanced.
     * 
     */
    public Optional<Integer> provisionedIops() {
        return Optional.ofNullable(this.provisionedIops);
    }
    /**
     * @return Configured throughput provisioning. Only valid with disk type hyperdisk-balanced.
     * 
     */
    public Optional<Integer> provisionedThroughput() {
        return Optional.ofNullable(this.provisionedThroughput);
    }
    /**
     * @return Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
     * 
     */
    public Optional<Integer> sizeGb() {
        return Optional.ofNullable(this.sizeGb);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodePoolNodeConfigBootDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String diskType;
        private @Nullable Integer provisionedIops;
        private @Nullable Integer provisionedThroughput;
        private @Nullable Integer sizeGb;
        public Builder() {}
        public Builder(NodePoolNodeConfigBootDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskType = defaults.diskType;
    	      this.provisionedIops = defaults.provisionedIops;
    	      this.provisionedThroughput = defaults.provisionedThroughput;
    	      this.sizeGb = defaults.sizeGb;
        }

        @CustomType.Setter
        public Builder diskType(@Nullable String diskType) {

            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder provisionedIops(@Nullable Integer provisionedIops) {

            this.provisionedIops = provisionedIops;
            return this;
        }
        @CustomType.Setter
        public Builder provisionedThroughput(@Nullable Integer provisionedThroughput) {

            this.provisionedThroughput = provisionedThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder sizeGb(@Nullable Integer sizeGb) {

            this.sizeGb = sizeGb;
            return this;
        }
        public NodePoolNodeConfigBootDisk build() {
            final var _resultValue = new NodePoolNodeConfigBootDisk();
            _resultValue.diskType = diskType;
            _resultValue.provisionedIops = provisionedIops;
            _resultValue.provisionedThroughput = provisionedThroughput;
            _resultValue.sizeGb = sizeGb;
            return _resultValue;
        }
    }
}
