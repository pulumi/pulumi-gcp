// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.netapp.BackupArgs;
import com.pulumi.gcp.netapp.inputs.BackupState;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * NetApp Volumes supports volume backups, which are copies of your volumes
 * stored independently from the volume. Backups are stored in backup vaults,
 * which are containers for backups. If a volume is lost or deleted, you can
 * use backups to restore your data to a new volume.
 * 
 * When you create the first backup of a volume, all of the volume&#39;s used
 * data is sent to the backup vault. Subsequent backups of the same volume
 * only include data that has changed from the previous backup. This allows
 * for fast incremental-forever backups and reduces the required capacity
 * inside the backup vault.
 * 
 * You can create manual and scheduled backups. Manual backups can be taken
 * from a volume or from an existing volume snapshot. Scheduled backups
 * require a backup policy.
 * 
 * To get more information about Backup, see:
 * 
 * * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.backupVaults.backups)
 * * How-to Guides
 *     * [Documentation](https://cloud.google.com/netapp/volumes/docs/protect-data/about-volume-backups)
 * 
 * ## Example Usage
 * 
 * ### Netapp Backup
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.ComputeFunctions;
 * import com.pulumi.gcp.compute.inputs.GetNetworkArgs;
 * import com.pulumi.gcp.netapp.StoragePool;
 * import com.pulumi.gcp.netapp.StoragePoolArgs;
 * import com.pulumi.gcp.netapp.BackupVault;
 * import com.pulumi.gcp.netapp.BackupVaultArgs;
 * import com.pulumi.gcp.netapp.Volume;
 * import com.pulumi.gcp.netapp.VolumeArgs;
 * import com.pulumi.gcp.netapp.inputs.VolumeBackupConfigArgs;
 * import com.pulumi.gcp.netapp.Backup;
 * import com.pulumi.gcp.netapp.BackupArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var default = ComputeFunctions.getNetwork(GetNetworkArgs.builder()
 *             .name("network")
 *             .build());
 * 
 *         var defaultStoragePool = new StoragePool("defaultStoragePool", StoragePoolArgs.builder()
 *             .name("backup-pool")
 *             .location("us-central1")
 *             .serviceLevel("PREMIUM")
 *             .capacityGib("2048")
 *             .network(default_.id())
 *             .build());
 * 
 *         var defaultBackupVault = new BackupVault("defaultBackupVault", BackupVaultArgs.builder()
 *             .name("backup-vault")
 *             .location(defaultStoragePool.location())
 *             .build());
 * 
 *         var defaultVolume = new Volume("defaultVolume", VolumeArgs.builder()
 *             .name("backup-volume")
 *             .location(defaultStoragePool.location())
 *             .capacityGib("100")
 *             .shareName("backup-volume")
 *             .storagePool(defaultStoragePool.name())
 *             .protocols("NFSV3")
 *             .deletionPolicy("FORCE")
 *             .backupConfig(VolumeBackupConfigArgs.builder()
 *                 .backupVault(defaultBackupVault.id())
 *                 .build())
 *             .build());
 * 
 *         var testBackup = new Backup("testBackup", BackupArgs.builder()
 *             .name("test-backup")
 *             .location(defaultBackupVault.location())
 *             .vaultName(defaultBackupVault.name())
 *             .sourceVolume(defaultVolume.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Backup can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/backupVaults/{{vault_name}}/backups/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{vault_name}}/{{name}}`
 * 
 * * `{{location}}/{{vault_name}}/{{name}}`
 * 
 * When using the `pulumi import` command, Backup can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:netapp/backup:Backup default projects/{{project}}/locations/{{location}}/backupVaults/{{vault_name}}/backups/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:netapp/backup:Backup default {{project}}/{{location}}/{{vault_name}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:netapp/backup:Backup default {{location}}/{{vault_name}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:netapp/backup:Backup")
public class Backup extends com.pulumi.resources.CustomResource {
    /**
     * Region in which backup is stored.
     * 
     */
    @Export(name="backupRegion", refs={String.class}, tree="[0]")
    private Output<String> backupRegion;

    /**
     * @return Region in which backup is stored.
     * 
     */
    public Output<String> backupRegion() {
        return this.backupRegion;
    }
    /**
     * Type of backup, manually created or created by a backup policy. Possible Values : [TYPE_UNSPECIFIED, MANUAL, SCHEDULED]
     * 
     */
    @Export(name="backupType", refs={String.class}, tree="[0]")
    private Output<String> backupType;

    /**
     * @return Type of backup, manually created or created by a backup policy. Possible Values : [TYPE_UNSPECIFIED, MANUAL, SCHEDULED]
     * 
     */
    public Output<String> backupType() {
        return this.backupType;
    }
    /**
     * Backups of a volume build incrementally on top of each other. They form a &#34;backup chain&#34;.
     * Total size of all backups in a chain in bytes = baseline backup size + sum(incremental backup size)
     * 
     */
    @Export(name="chainStorageBytes", refs={String.class}, tree="[0]")
    private Output<String> chainStorageBytes;

    /**
     * @return Backups of a volume build incrementally on top of each other. They form a &#34;backup chain&#34;.
     * Total size of all backups in a chain in bytes = baseline backup size + sum(incremental backup size)
     * 
     */
    public Output<String> chainStorageBytes() {
        return this.chainStorageBytes;
    }
    /**
     * Create time of the backup. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Create time of the backup. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Location of the backup.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Location of the backup.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The resource name of the backup. Needs to be unique per location.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name of the backup. Needs to be unique per location.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * If specified, backup will be created from the given snapshot. If not specified,
     * there will be a new snapshot taken to initiate the backup creation.
     * Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
     * 
     */
    @Export(name="sourceSnapshot", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceSnapshot;

    /**
     * @return If specified, backup will be created from the given snapshot. If not specified,
     * there will be a new snapshot taken to initiate the backup creation.
     * Format: `projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}``
     * 
     */
    public Output<Optional<String>> sourceSnapshot() {
        return Codegen.optional(this.sourceSnapshot);
    }
    /**
     * ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
     * 
     */
    @Export(name="sourceVolume", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceVolume;

    /**
     * @return ID of volumes this backup belongs to. Format: `projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}``
     * 
     */
    public Output<Optional<String>> sourceVolume() {
        return Codegen.optional(this.sourceVolume);
    }
    /**
     * The state of the Backup Vault. Possible Values : [STATE_UNSPECIFIED, CREATING, UPLOADING, READY, DELETING, ERROR, UPDATING]
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The state of the Backup Vault. Possible Values : [STATE_UNSPECIFIED, CREATING, UPLOADING, READY, DELETING, ERROR, UPDATING]
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Name of the backup vault to store the backup in.
     * 
     */
    @Export(name="vaultName", refs={String.class}, tree="[0]")
    private Output<String> vaultName;

    /**
     * @return Name of the backup vault to store the backup in.
     * 
     */
    public Output<String> vaultName() {
        return this.vaultName;
    }
    /**
     * Region of the volume from which the backup was created.
     * 
     */
    @Export(name="volumeRegion", refs={String.class}, tree="[0]")
    private Output<String> volumeRegion;

    /**
     * @return Region of the volume from which the backup was created.
     * 
     */
    public Output<String> volumeRegion() {
        return this.volumeRegion;
    }
    /**
     * Size of the file system when the backup was created. When creating a new volume from the backup, the volume capacity will have to be at least as big.
     * 
     */
    @Export(name="volumeUsageBytes", refs={String.class}, tree="[0]")
    private Output<String> volumeUsageBytes;

    /**
     * @return Size of the file system when the backup was created. When creating a new volume from the backup, the volume capacity will have to be at least as big.
     * 
     */
    public Output<String> volumeUsageBytes() {
        return this.volumeUsageBytes;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Backup(java.lang.String name) {
        this(name, BackupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Backup(java.lang.String name, BackupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Backup(java.lang.String name, BackupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:netapp/backup:Backup", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Backup(java.lang.String name, Output<java.lang.String> id, @Nullable BackupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:netapp/backup:Backup", name, state, makeResourceOptions(options, id), false);
    }

    private static BackupArgs makeArgs(BackupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BackupArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Backup get(java.lang.String name, Output<java.lang.String> id, @Nullable BackupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Backup(name, id, state, options);
    }
}
