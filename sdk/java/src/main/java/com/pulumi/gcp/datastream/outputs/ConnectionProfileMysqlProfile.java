// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.datastream.outputs.ConnectionProfileMysqlProfileSslConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionProfileMysqlProfile {
    /**
     * @return Hostname for the MySQL connection.
     * 
     */
    private String hostname;
    /**
     * @return Password for the MySQL connection.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    private @Nullable String password;
    /**
     * @return Port for the MySQL connection.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return A reference to a Secret Manager resource name storing the user&#39;s password.
     * 
     */
    private @Nullable String secretManagerStoredPassword;
    /**
     * @return SSL configuration for the MySQL connection.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionProfileMysqlProfileSslConfig sslConfig;
    /**
     * @return Username for the MySQL connection.
     * 
     */
    private String username;

    private ConnectionProfileMysqlProfile() {}
    /**
     * @return Hostname for the MySQL connection.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return Password for the MySQL connection.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Port for the MySQL connection.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return A reference to a Secret Manager resource name storing the user&#39;s password.
     * 
     */
    public Optional<String> secretManagerStoredPassword() {
        return Optional.ofNullable(this.secretManagerStoredPassword);
    }
    /**
     * @return SSL configuration for the MySQL connection.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionProfileMysqlProfileSslConfig> sslConfig() {
        return Optional.ofNullable(this.sslConfig);
    }
    /**
     * @return Username for the MySQL connection.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionProfileMysqlProfile defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String hostname;
        private @Nullable String password;
        private @Nullable Integer port;
        private @Nullable String secretManagerStoredPassword;
        private @Nullable ConnectionProfileMysqlProfileSslConfig sslConfig;
        private String username;
        public Builder() {}
        public Builder(ConnectionProfileMysqlProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostname = defaults.hostname;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.secretManagerStoredPassword = defaults.secretManagerStoredPassword;
    	      this.sslConfig = defaults.sslConfig;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("ConnectionProfileMysqlProfile", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder secretManagerStoredPassword(@Nullable String secretManagerStoredPassword) {

            this.secretManagerStoredPassword = secretManagerStoredPassword;
            return this;
        }
        @CustomType.Setter
        public Builder sslConfig(@Nullable ConnectionProfileMysqlProfileSslConfig sslConfig) {

            this.sslConfig = sslConfig;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("ConnectionProfileMysqlProfile", "username");
            }
            this.username = username;
            return this;
        }
        public ConnectionProfileMysqlProfile build() {
            final var _resultValue = new ConnectionProfileMysqlProfile();
            _resultValue.hostname = hostname;
            _resultValue.password = password;
            _resultValue.port = port;
            _resultValue.secretManagerStoredPassword = secretManagerStoredPassword;
            _resultValue.sslConfig = sslConfig;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
