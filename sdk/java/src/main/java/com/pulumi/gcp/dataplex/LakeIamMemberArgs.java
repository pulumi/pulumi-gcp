// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.LakeIamMemberConditionArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LakeIamMemberArgs extends com.pulumi.resources.ResourceArgs {

    public static final LakeIamMemberArgs Empty = new LakeIamMemberArgs();

    @Import(name="condition")
    private @Nullable Output<LakeIamMemberConditionArgs> condition;

    public Optional<Output<LakeIamMemberConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    @Import(name="lake", required=true)
    private Output<String> lake;

    public Output<String> lake() {
        return this.lake;
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="member", required=true)
    private Output<String> member;

    public Output<String> member() {
        return this.member;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="role", required=true)
    private Output<String> role;

    public Output<String> role() {
        return this.role;
    }

    private LakeIamMemberArgs() {}

    private LakeIamMemberArgs(LakeIamMemberArgs $) {
        this.condition = $.condition;
        this.lake = $.lake;
        this.location = $.location;
        this.member = $.member;
        this.project = $.project;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LakeIamMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LakeIamMemberArgs $;

        public Builder() {
            $ = new LakeIamMemberArgs();
        }

        public Builder(LakeIamMemberArgs defaults) {
            $ = new LakeIamMemberArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<LakeIamMemberConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(LakeIamMemberConditionArgs condition) {
            return condition(Output.of(condition));
        }

        public Builder lake(Output<String> lake) {
            $.lake = lake;
            return this;
        }

        public Builder lake(String lake) {
            return lake(Output.of(lake));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder member(Output<String> member) {
            $.member = member;
            return this;
        }

        public Builder member(String member) {
            return member(Output.of(member));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public LakeIamMemberArgs build() {
            $.lake = Objects.requireNonNull($.lake, "expected parameter 'lake' to be non-null");
            $.member = Objects.requireNonNull($.member, "expected parameter 'member' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            return $;
        }
    }

}
