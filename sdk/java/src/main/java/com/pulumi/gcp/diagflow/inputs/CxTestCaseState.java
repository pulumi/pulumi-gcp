// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.CxTestCaseLastTestResultArgs;
import com.pulumi.gcp.diagflow.inputs.CxTestCaseTestCaseConversationTurnArgs;
import com.pulumi.gcp.diagflow.inputs.CxTestCaseTestConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxTestCaseState extends com.pulumi.resources.ResourceArgs {

    public static final CxTestCaseState Empty = new CxTestCaseState();

    /**
     * When the test was created. A timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTime")
    private @Nullable Output<String> creationTime;

    /**
     * @return When the test was created. A timestamp in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    /**
     * The human-readable name of the test case, unique within the agent. Limit of 200 characters.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The human-readable name of the test case, unique within the agent. Limit of 200 characters.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The latest test result.
     * Structure is documented below.
     * 
     */
    @Import(name="lastTestResults")
    private @Nullable Output<List<CxTestCaseLastTestResultArgs>> lastTestResults;

    /**
     * @return The latest test result.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<CxTestCaseLastTestResultArgs>>> lastTestResults() {
        return Optional.ofNullable(this.lastTestResults);
    }

    /**
     * The unique identifier of the page.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/pages/&lt;Page ID&gt;.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique identifier of the page.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/pages/&lt;Page ID&gt;.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Additional freeform notes about the test case. Limit of 400 characters.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return Additional freeform notes about the test case. Limit of 400 characters.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * The agent to create the test case for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return The agent to create the test case for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
     * Each tag should start with &#34;#&#34; and has a limit of 30 characters
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
     * Each tag should start with &#34;#&#34; and has a limit of 30 characters
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
     * Structure is documented below.
     * 
     */
    @Import(name="testCaseConversationTurns")
    private @Nullable Output<List<CxTestCaseTestCaseConversationTurnArgs>> testCaseConversationTurns;

    /**
     * @return The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<CxTestCaseTestCaseConversationTurnArgs>>> testCaseConversationTurns() {
        return Optional.ofNullable(this.testCaseConversationTurns);
    }

    /**
     * Config for the test case.
     * Structure is documented below.
     * 
     */
    @Import(name="testConfig")
    private @Nullable Output<CxTestCaseTestConfigArgs> testConfig;

    /**
     * @return Config for the test case.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxTestCaseTestConfigArgs>> testConfig() {
        return Optional.ofNullable(this.testConfig);
    }

    private CxTestCaseState() {}

    private CxTestCaseState(CxTestCaseState $) {
        this.creationTime = $.creationTime;
        this.displayName = $.displayName;
        this.lastTestResults = $.lastTestResults;
        this.name = $.name;
        this.notes = $.notes;
        this.parent = $.parent;
        this.tags = $.tags;
        this.testCaseConversationTurns = $.testCaseConversationTurns;
        this.testConfig = $.testConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxTestCaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxTestCaseState $;

        public Builder() {
            $ = new CxTestCaseState();
        }

        public Builder(CxTestCaseState defaults) {
            $ = new CxTestCaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param creationTime When the test was created. A timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTime(@Nullable Output<String> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        /**
         * @param creationTime When the test was created. A timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTime(String creationTime) {
            return creationTime(Output.of(creationTime));
        }

        /**
         * @param displayName The human-readable name of the test case, unique within the agent. Limit of 200 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human-readable name of the test case, unique within the agent. Limit of 200 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param lastTestResults The latest test result.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder lastTestResults(@Nullable Output<List<CxTestCaseLastTestResultArgs>> lastTestResults) {
            $.lastTestResults = lastTestResults;
            return this;
        }

        /**
         * @param lastTestResults The latest test result.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder lastTestResults(List<CxTestCaseLastTestResultArgs> lastTestResults) {
            return lastTestResults(Output.of(lastTestResults));
        }

        /**
         * @param lastTestResults The latest test result.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder lastTestResults(CxTestCaseLastTestResultArgs... lastTestResults) {
            return lastTestResults(List.of(lastTestResults));
        }

        /**
         * @param name The unique identifier of the page.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/pages/&lt;Page ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique identifier of the page.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/pages/&lt;Page ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notes Additional freeform notes about the test case. Limit of 400 characters.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes Additional freeform notes about the test case. Limit of 400 characters.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param parent The agent to create the test case for.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The agent to create the test case for.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param tags Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
         * Each tag should start with &#34;#&#34; and has a limit of 30 characters
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
         * Each tag should start with &#34;#&#34; and has a limit of 30 characters
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
         * Each tag should start with &#34;#&#34; and has a limit of 30 characters
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param testCaseConversationTurns The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder testCaseConversationTurns(@Nullable Output<List<CxTestCaseTestCaseConversationTurnArgs>> testCaseConversationTurns) {
            $.testCaseConversationTurns = testCaseConversationTurns;
            return this;
        }

        /**
         * @param testCaseConversationTurns The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder testCaseConversationTurns(List<CxTestCaseTestCaseConversationTurnArgs> testCaseConversationTurns) {
            return testCaseConversationTurns(Output.of(testCaseConversationTurns));
        }

        /**
         * @param testCaseConversationTurns The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder testCaseConversationTurns(CxTestCaseTestCaseConversationTurnArgs... testCaseConversationTurns) {
            return testCaseConversationTurns(List.of(testCaseConversationTurns));
        }

        /**
         * @param testConfig Config for the test case.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder testConfig(@Nullable Output<CxTestCaseTestConfigArgs> testConfig) {
            $.testConfig = testConfig;
            return this;
        }

        /**
         * @param testConfig Config for the test case.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder testConfig(CxTestCaseTestConfigArgs testConfig) {
            return testConfig(Output.of(testConfig));
        }

        public CxTestCaseState build() {
            return $;
        }
    }

}
