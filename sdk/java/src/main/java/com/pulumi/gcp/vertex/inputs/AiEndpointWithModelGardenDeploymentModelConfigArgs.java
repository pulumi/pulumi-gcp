// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.vertex.inputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiEndpointWithModelGardenDeploymentModelConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiEndpointWithModelGardenDeploymentModelConfigArgs Empty = new AiEndpointWithModelGardenDeploymentModelConfigArgs();

    /**
     * Whether the user accepts the End User License Agreement (EULA)
     * for the model.
     * 
     */
    @Import(name="acceptEula")
    private @Nullable Output<Boolean> acceptEula;

    /**
     * @return Whether the user accepts the End User License Agreement (EULA)
     * for the model.
     * 
     */
    public Optional<Output<Boolean>> acceptEula() {
        return Optional.ofNullable(this.acceptEula);
    }

    /**
     * Specification of a container for serving predictions. Some fields in this
     * message correspond to fields in the [Kubernetes Container v1 core
     * specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
     * Structure is documented below.
     * 
     */
    @Import(name="containerSpec")
    private @Nullable Output<AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs> containerSpec;

    /**
     * @return Specification of a container for serving predictions. Some fields in this
     * message correspond to fields in the [Kubernetes Container v1 core
     * specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
     * Structure is documented below.
     * 
     */
    public Optional<Output<AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs>> containerSpec() {
        return Optional.ofNullable(this.containerSpec);
    }

    /**
     * The Hugging Face read access token used to access the model
     * artifacts of gated models.
     * 
     */
    @Import(name="huggingFaceAccessToken")
    private @Nullable Output<String> huggingFaceAccessToken;

    /**
     * @return The Hugging Face read access token used to access the model
     * artifacts of gated models.
     * 
     */
    public Optional<Output<String>> huggingFaceAccessToken() {
        return Optional.ofNullable(this.huggingFaceAccessToken);
    }

    /**
     * If true, the model will deploy with a cached version instead of directly
     * downloading the model artifacts from Hugging Face. This is suitable for
     * VPC-SC users with limited internet access.
     * 
     */
    @Import(name="huggingFaceCacheEnabled")
    private @Nullable Output<Boolean> huggingFaceCacheEnabled;

    /**
     * @return If true, the model will deploy with a cached version instead of directly
     * downloading the model artifacts from Hugging Face. This is suitable for
     * VPC-SC users with limited internet access.
     * 
     */
    public Optional<Output<Boolean>> huggingFaceCacheEnabled() {
        return Optional.ofNullable(this.huggingFaceCacheEnabled);
    }

    /**
     * The user-specified display name of the uploaded model. If not
     * set, a default name will be used.
     * 
     */
    @Import(name="modelDisplayName")
    private @Nullable Output<String> modelDisplayName;

    /**
     * @return The user-specified display name of the uploaded model. If not
     * set, a default name will be used.
     * 
     */
    public Optional<Output<String>> modelDisplayName() {
        return Optional.ofNullable(this.modelDisplayName);
    }

    private AiEndpointWithModelGardenDeploymentModelConfigArgs() {}

    private AiEndpointWithModelGardenDeploymentModelConfigArgs(AiEndpointWithModelGardenDeploymentModelConfigArgs $) {
        this.acceptEula = $.acceptEula;
        this.containerSpec = $.containerSpec;
        this.huggingFaceAccessToken = $.huggingFaceAccessToken;
        this.huggingFaceCacheEnabled = $.huggingFaceCacheEnabled;
        this.modelDisplayName = $.modelDisplayName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiEndpointWithModelGardenDeploymentModelConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiEndpointWithModelGardenDeploymentModelConfigArgs $;

        public Builder() {
            $ = new AiEndpointWithModelGardenDeploymentModelConfigArgs();
        }

        public Builder(AiEndpointWithModelGardenDeploymentModelConfigArgs defaults) {
            $ = new AiEndpointWithModelGardenDeploymentModelConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptEula Whether the user accepts the End User License Agreement (EULA)
         * for the model.
         * 
         * @return builder
         * 
         */
        public Builder acceptEula(@Nullable Output<Boolean> acceptEula) {
            $.acceptEula = acceptEula;
            return this;
        }

        /**
         * @param acceptEula Whether the user accepts the End User License Agreement (EULA)
         * for the model.
         * 
         * @return builder
         * 
         */
        public Builder acceptEula(Boolean acceptEula) {
            return acceptEula(Output.of(acceptEula));
        }

        /**
         * @param containerSpec Specification of a container for serving predictions. Some fields in this
         * message correspond to fields in the [Kubernetes Container v1 core
         * specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder containerSpec(@Nullable Output<AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs> containerSpec) {
            $.containerSpec = containerSpec;
            return this;
        }

        /**
         * @param containerSpec Specification of a container for serving predictions. Some fields in this
         * message correspond to fields in the [Kubernetes Container v1 core
         * specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder containerSpec(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs containerSpec) {
            return containerSpec(Output.of(containerSpec));
        }

        /**
         * @param huggingFaceAccessToken The Hugging Face read access token used to access the model
         * artifacts of gated models.
         * 
         * @return builder
         * 
         */
        public Builder huggingFaceAccessToken(@Nullable Output<String> huggingFaceAccessToken) {
            $.huggingFaceAccessToken = huggingFaceAccessToken;
            return this;
        }

        /**
         * @param huggingFaceAccessToken The Hugging Face read access token used to access the model
         * artifacts of gated models.
         * 
         * @return builder
         * 
         */
        public Builder huggingFaceAccessToken(String huggingFaceAccessToken) {
            return huggingFaceAccessToken(Output.of(huggingFaceAccessToken));
        }

        /**
         * @param huggingFaceCacheEnabled If true, the model will deploy with a cached version instead of directly
         * downloading the model artifacts from Hugging Face. This is suitable for
         * VPC-SC users with limited internet access.
         * 
         * @return builder
         * 
         */
        public Builder huggingFaceCacheEnabled(@Nullable Output<Boolean> huggingFaceCacheEnabled) {
            $.huggingFaceCacheEnabled = huggingFaceCacheEnabled;
            return this;
        }

        /**
         * @param huggingFaceCacheEnabled If true, the model will deploy with a cached version instead of directly
         * downloading the model artifacts from Hugging Face. This is suitable for
         * VPC-SC users with limited internet access.
         * 
         * @return builder
         * 
         */
        public Builder huggingFaceCacheEnabled(Boolean huggingFaceCacheEnabled) {
            return huggingFaceCacheEnabled(Output.of(huggingFaceCacheEnabled));
        }

        /**
         * @param modelDisplayName The user-specified display name of the uploaded model. If not
         * set, a default name will be used.
         * 
         * @return builder
         * 
         */
        public Builder modelDisplayName(@Nullable Output<String> modelDisplayName) {
            $.modelDisplayName = modelDisplayName;
            return this;
        }

        /**
         * @param modelDisplayName The user-specified display name of the uploaded model. If not
         * set, a default name will be used.
         * 
         * @return builder
         * 
         */
        public Builder modelDisplayName(String modelDisplayName) {
            return modelDisplayName(Output.of(modelDisplayName));
        }

        public AiEndpointWithModelGardenDeploymentModelConfigArgs build() {
            return $;
        }
    }

}
