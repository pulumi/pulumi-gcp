// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpRouteRuleMatchQueryParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRouteRuleMatchQueryParameterArgs Empty = new HttpRouteRuleMatchQueryParameterArgs();

    /**
     * The value of the query parameter must exactly match the contents of exactMatch.
     * 
     */
    @Import(name="exactMatch")
    private @Nullable Output<String> exactMatch;

    /**
     * @return The value of the query parameter must exactly match the contents of exactMatch.
     * 
     */
    public Optional<Output<String>> exactMatch() {
        return Optional.ofNullable(this.exactMatch);
    }

    /**
     * Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not.
     * 
     */
    @Import(name="presentMatch")
    private @Nullable Output<Boolean> presentMatch;

    /**
     * @return Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not.
     * 
     */
    public Optional<Output<Boolean>> presentMatch() {
        return Optional.ofNullable(this.presentMatch);
    }

    /**
     * The name of the query parameter to match.
     * 
     */
    @Import(name="queryParameter")
    private @Nullable Output<String> queryParameter;

    /**
     * @return The name of the query parameter to match.
     * 
     */
    public Optional<Output<String>> queryParameter() {
        return Optional.ofNullable(this.queryParameter);
    }

    /**
     * The value of the query parameter must match the regular expression specified by regexMatch.For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
     * 
     */
    @Import(name="regexMatch")
    private @Nullable Output<String> regexMatch;

    /**
     * @return The value of the query parameter must match the regular expression specified by regexMatch.For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
     * 
     */
    public Optional<Output<String>> regexMatch() {
        return Optional.ofNullable(this.regexMatch);
    }

    private HttpRouteRuleMatchQueryParameterArgs() {}

    private HttpRouteRuleMatchQueryParameterArgs(HttpRouteRuleMatchQueryParameterArgs $) {
        this.exactMatch = $.exactMatch;
        this.presentMatch = $.presentMatch;
        this.queryParameter = $.queryParameter;
        this.regexMatch = $.regexMatch;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRouteRuleMatchQueryParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRouteRuleMatchQueryParameterArgs $;

        public Builder() {
            $ = new HttpRouteRuleMatchQueryParameterArgs();
        }

        public Builder(HttpRouteRuleMatchQueryParameterArgs defaults) {
            $ = new HttpRouteRuleMatchQueryParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param exactMatch The value of the query parameter must exactly match the contents of exactMatch.
         * 
         * @return builder
         * 
         */
        public Builder exactMatch(@Nullable Output<String> exactMatch) {
            $.exactMatch = exactMatch;
            return this;
        }

        /**
         * @param exactMatch The value of the query parameter must exactly match the contents of exactMatch.
         * 
         * @return builder
         * 
         */
        public Builder exactMatch(String exactMatch) {
            return exactMatch(Output.of(exactMatch));
        }

        /**
         * @param presentMatch Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not.
         * 
         * @return builder
         * 
         */
        public Builder presentMatch(@Nullable Output<Boolean> presentMatch) {
            $.presentMatch = presentMatch;
            return this;
        }

        /**
         * @param presentMatch Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not.
         * 
         * @return builder
         * 
         */
        public Builder presentMatch(Boolean presentMatch) {
            return presentMatch(Output.of(presentMatch));
        }

        /**
         * @param queryParameter The name of the query parameter to match.
         * 
         * @return builder
         * 
         */
        public Builder queryParameter(@Nullable Output<String> queryParameter) {
            $.queryParameter = queryParameter;
            return this;
        }

        /**
         * @param queryParameter The name of the query parameter to match.
         * 
         * @return builder
         * 
         */
        public Builder queryParameter(String queryParameter) {
            return queryParameter(Output.of(queryParameter));
        }

        /**
         * @param regexMatch The value of the query parameter must match the regular expression specified by regexMatch.For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
         * 
         * @return builder
         * 
         */
        public Builder regexMatch(@Nullable Output<String> regexMatch) {
            $.regexMatch = regexMatch;
            return this;
        }

        /**
         * @param regexMatch The value of the query parameter must match the regular expression specified by regexMatch.For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
         * 
         * @return builder
         * 
         */
        public Builder regexMatch(String regexMatch) {
            return regexMatch(Output.of(regexMatch));
        }

        public HttpRouteRuleMatchQueryParameterArgs build() {
            return $;
        }
    }

}
