// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMix {
    /**
     * @return The base capacity that will always use Standard VMs to avoid risk of more preemption than the minimum capacity you need. Dataproc will create only standard VMs until it reaches standardCapacityBase, then it will start using standardCapacityPercentAboveBase to mix Spot with Standard VMs. eg. If 15 instances are requested and standardCapacityBase is 5, Dataproc will create 5 standard VMs and then start mixing spot and standard VMs for remaining 10 instances.
     * 
     */
    private @Nullable Integer standardCapacityBase;
    /**
     * @return The percentage of target capacity that should use Standard VM. The remaining percentage will use Spot VMs. The percentage applies only to the capacity above standardCapacityBase. eg. If 15 instances are requested and standardCapacityBase is 5 and standardCapacityPercentAboveBase is 30, Dataproc will create 5 standard VMs and then start mixing spot and standard VMs for remaining 10 instances. The mix will be 30% standard and 70% spot.
     * ***
     * 
     */
    private @Nullable Integer standardCapacityPercentAboveBase;

    private ClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMix() {}
    /**
     * @return The base capacity that will always use Standard VMs to avoid risk of more preemption than the minimum capacity you need. Dataproc will create only standard VMs until it reaches standardCapacityBase, then it will start using standardCapacityPercentAboveBase to mix Spot with Standard VMs. eg. If 15 instances are requested and standardCapacityBase is 5, Dataproc will create 5 standard VMs and then start mixing spot and standard VMs for remaining 10 instances.
     * 
     */
    public Optional<Integer> standardCapacityBase() {
        return Optional.ofNullable(this.standardCapacityBase);
    }
    /**
     * @return The percentage of target capacity that should use Standard VM. The remaining percentage will use Spot VMs. The percentage applies only to the capacity above standardCapacityBase. eg. If 15 instances are requested and standardCapacityBase is 5 and standardCapacityPercentAboveBase is 30, Dataproc will create 5 standard VMs and then start mixing spot and standard VMs for remaining 10 instances. The mix will be 30% standard and 70% spot.
     * ***
     * 
     */
    public Optional<Integer> standardCapacityPercentAboveBase() {
        return Optional.ofNullable(this.standardCapacityPercentAboveBase);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMix defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer standardCapacityBase;
        private @Nullable Integer standardCapacityPercentAboveBase;
        public Builder() {}
        public Builder(ClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMix defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.standardCapacityBase = defaults.standardCapacityBase;
    	      this.standardCapacityPercentAboveBase = defaults.standardCapacityPercentAboveBase;
        }

        @CustomType.Setter
        public Builder standardCapacityBase(@Nullable Integer standardCapacityBase) {

            this.standardCapacityBase = standardCapacityBase;
            return this;
        }
        @CustomType.Setter
        public Builder standardCapacityPercentAboveBase(@Nullable Integer standardCapacityPercentAboveBase) {

            this.standardCapacityPercentAboveBase = standardCapacityPercentAboveBase;
            return this;
        }
        public ClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMix build() {
            final var _resultValue = new ClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMix();
            _resultValue.standardCapacityBase = standardCapacityBase;
            _resultValue.standardCapacityPercentAboveBase = standardCapacityPercentAboveBase;
            return _resultValue;
        }
    }
}
