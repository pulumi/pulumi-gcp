// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.saasruntime.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.saasruntime.inputs.UnitKindDependencyArgs;
import com.pulumi.gcp.saasruntime.inputs.UnitKindInputVariableMappingArgs;
import com.pulumi.gcp.saasruntime.inputs.UnitKindOutputVariableMappingArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UnitKindState extends com.pulumi.resources.ResourceArgs {

    public static final UnitKindState Empty = new UnitKindState();

    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The timestamp when the resource was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The timestamp when the resource was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * List of other unit kinds that this release will depend on. Dependencies
     * will be automatically provisioned if not found. Maximum 10.
     * Structure is documented below.
     * 
     */
    @Import(name="dependencies")
    private @Nullable Output<List<UnitKindDependencyArgs>> dependencies;

    /**
     * @return List of other unit kinds that this release will depend on. Dependencies
     * will be automatically provisioned if not found. Maximum 10.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<UnitKindDependencyArgs>>> dependencies() {
        return Optional.ofNullable(this.dependencies);
    }

    @Import(name="effectiveAnnotations")
    private @Nullable Output<Map<String,String>> effectiveAnnotations;

    public Optional<Output<Map<String,String>>> effectiveAnnotations() {
        return Optional.ofNullable(this.effectiveAnnotations);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * An opaque value that uniquely identifies a version or
     * generation of a resource. It can be used to confirm that the client
     * and server agree on the ordering of a resource being written.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return An opaque value that uniquely identifies a version or
     * generation of a resource. It can be used to confirm that the client
     * and server agree on the ordering of a resource being written.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * List of inputVariables for this release that will either be retrieved from
     * a dependency’s outputVariables, or will be passed on to a dependency’s
     * inputVariables. Maximum 100.
     * Structure is documented below.
     * 
     */
    @Import(name="inputVariableMappings")
    private @Nullable Output<List<UnitKindInputVariableMappingArgs>> inputVariableMappings;

    /**
     * @return List of inputVariables for this release that will either be retrieved from
     * a dependency’s outputVariables, or will be passed on to a dependency’s
     * inputVariables. Maximum 100.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<UnitKindInputVariableMappingArgs>>> inputVariableMappings() {
        return Optional.ofNullable(this.inputVariableMappings);
    }

    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * &#34;projects/{project}/locations/{location}/unitKinds/{unitKind}&#34;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * &#34;projects/{project}/locations/{location}/unitKinds/{unitKind}&#34;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of outputVariables for this unit kind will be passed to this unit&#39;s
     * outputVariables. Maximum 100.
     * Structure is documented below.
     * 
     */
    @Import(name="outputVariableMappings")
    private @Nullable Output<List<UnitKindOutputVariableMappingArgs>> outputVariableMappings;

    /**
     * @return List of outputVariables for this unit kind will be passed to this unit&#39;s
     * outputVariables. Maximum 100.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<UnitKindOutputVariableMappingArgs>>> outputVariableMappings() {
        return Optional.ofNullable(this.outputVariableMappings);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * A reference to the Saas that defines the product (managed service) that
     * the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
     * common data model. Immutable once set.
     * 
     */
    @Import(name="saas")
    private @Nullable Output<String> saas;

    /**
     * @return A reference to the Saas that defines the product (managed service) that
     * the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
     * common data model. Immutable once set.
     * 
     */
    public Optional<Output<String>> saas() {
        return Optional.ofNullable(this.saas);
    }

    /**
     * The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The ID value for the new unit kind.
     * 
     */
    @Import(name="unitKindId")
    private @Nullable Output<String> unitKindId;

    /**
     * @return The ID value for the new unit kind.
     * 
     */
    public Optional<Output<String>> unitKindId() {
        return Optional.ofNullable(this.unitKindId);
    }

    /**
     * The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private UnitKindState() {}

    private UnitKindState(UnitKindState $) {
        this.annotations = $.annotations;
        this.createTime = $.createTime;
        this.dependencies = $.dependencies;
        this.effectiveAnnotations = $.effectiveAnnotations;
        this.effectiveLabels = $.effectiveLabels;
        this.etag = $.etag;
        this.inputVariableMappings = $.inputVariableMappings;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.outputVariableMappings = $.outputVariableMappings;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.saas = $.saas;
        this.uid = $.uid;
        this.unitKindId = $.unitKindId;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UnitKindState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UnitKindState $;

        public Builder() {
            $ = new UnitKindState();
        }

        public Builder(UnitKindState defaults) {
            $ = new UnitKindState(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations is an unstructured key-value map stored with a resource that
         * may be set by external tools to store and retrieve arbitrary metadata.
         * They are not queryable and should be preserved when modifying objects.
         * More info: https://kubernetes.io/docs/user-guide/annotations
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations is an unstructured key-value map stored with a resource that
         * may be set by external tools to store and retrieve arbitrary metadata.
         * They are not queryable and should be preserved when modifying objects.
         * More info: https://kubernetes.io/docs/user-guide/annotations
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param createTime The timestamp when the resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The timestamp when the resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dependencies List of other unit kinds that this release will depend on. Dependencies
         * will be automatically provisioned if not found. Maximum 10.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dependencies(@Nullable Output<List<UnitKindDependencyArgs>> dependencies) {
            $.dependencies = dependencies;
            return this;
        }

        /**
         * @param dependencies List of other unit kinds that this release will depend on. Dependencies
         * will be automatically provisioned if not found. Maximum 10.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dependencies(List<UnitKindDependencyArgs> dependencies) {
            return dependencies(Output.of(dependencies));
        }

        /**
         * @param dependencies List of other unit kinds that this release will depend on. Dependencies
         * will be automatically provisioned if not found. Maximum 10.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dependencies(UnitKindDependencyArgs... dependencies) {
            return dependencies(List.of(dependencies));
        }

        public Builder effectiveAnnotations(@Nullable Output<Map<String,String>> effectiveAnnotations) {
            $.effectiveAnnotations = effectiveAnnotations;
            return this;
        }

        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            return effectiveAnnotations(Output.of(effectiveAnnotations));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param etag An opaque value that uniquely identifies a version or
         * generation of a resource. It can be used to confirm that the client
         * and server agree on the ordering of a resource being written.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag An opaque value that uniquely identifies a version or
         * generation of a resource. It can be used to confirm that the client
         * and server agree on the ordering of a resource being written.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param inputVariableMappings List of inputVariables for this release that will either be retrieved from
         * a dependency’s outputVariables, or will be passed on to a dependency’s
         * inputVariables. Maximum 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inputVariableMappings(@Nullable Output<List<UnitKindInputVariableMappingArgs>> inputVariableMappings) {
            $.inputVariableMappings = inputVariableMappings;
            return this;
        }

        /**
         * @param inputVariableMappings List of inputVariables for this release that will either be retrieved from
         * a dependency’s outputVariables, or will be passed on to a dependency’s
         * inputVariables. Maximum 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inputVariableMappings(List<UnitKindInputVariableMappingArgs> inputVariableMappings) {
            return inputVariableMappings(Output.of(inputVariableMappings));
        }

        /**
         * @param inputVariableMappings List of inputVariables for this release that will either be retrieved from
         * a dependency’s outputVariables, or will be passed on to a dependency’s
         * inputVariables. Maximum 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inputVariableMappings(UnitKindInputVariableMappingArgs... inputVariableMappings) {
            return inputVariableMappings(List.of(inputVariableMappings));
        }

        /**
         * @param labels The labels on the resource, which can be used for categorization.
         * similar to Kubernetes resource labels.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels on the resource, which can be used for categorization.
         * similar to Kubernetes resource labels.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Identifier. The resource name (full URI of the resource) following the standard naming
         * scheme:
         * &#34;projects/{project}/locations/{location}/unitKinds/{unitKind}&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. The resource name (full URI of the resource) following the standard naming
         * scheme:
         * &#34;projects/{project}/locations/{location}/unitKinds/{unitKind}&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param outputVariableMappings List of outputVariables for this unit kind will be passed to this unit&#39;s
         * outputVariables. Maximum 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder outputVariableMappings(@Nullable Output<List<UnitKindOutputVariableMappingArgs>> outputVariableMappings) {
            $.outputVariableMappings = outputVariableMappings;
            return this;
        }

        /**
         * @param outputVariableMappings List of outputVariables for this unit kind will be passed to this unit&#39;s
         * outputVariables. Maximum 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder outputVariableMappings(List<UnitKindOutputVariableMappingArgs> outputVariableMappings) {
            return outputVariableMappings(Output.of(outputVariableMappings));
        }

        /**
         * @param outputVariableMappings List of outputVariables for this unit kind will be passed to this unit&#39;s
         * outputVariables. Maximum 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder outputVariableMappings(UnitKindOutputVariableMappingArgs... outputVariableMappings) {
            return outputVariableMappings(List.of(outputVariableMappings));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param saas A reference to the Saas that defines the product (managed service) that
         * the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
         * common data model. Immutable once set.
         * 
         * @return builder
         * 
         */
        public Builder saas(@Nullable Output<String> saas) {
            $.saas = saas;
            return this;
        }

        /**
         * @param saas A reference to the Saas that defines the product (managed service) that
         * the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
         * common data model. Immutable once set.
         * 
         * @return builder
         * 
         */
        public Builder saas(String saas) {
            return saas(Output.of(saas));
        }

        /**
         * @param uid The unique identifier of the resource. UID is unique in the time
         * and space for this resource within the scope of the service. It is
         * typically generated by the server on successful creation of a resource
         * and must not be changed. UID is used to uniquely identify resources
         * with resource name reuses. This should be a UUID4.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The unique identifier of the resource. UID is unique in the time
         * and space for this resource within the scope of the service. It is
         * typically generated by the server on successful creation of a resource
         * and must not be changed. UID is used to uniquely identify resources
         * with resource name reuses. This should be a UUID4.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param unitKindId The ID value for the new unit kind.
         * 
         * @return builder
         * 
         */
        public Builder unitKindId(@Nullable Output<String> unitKindId) {
            $.unitKindId = unitKindId;
            return this;
        }

        /**
         * @param unitKindId The ID value for the new unit kind.
         * 
         * @return builder
         * 
         */
        public Builder unitKindId(String unitKindId) {
            return unitKindId(Output.of(unitKindId));
        }

        /**
         * @param updateTime The timestamp when the resource was last updated. Any
         * change to the resource made by users must refresh this value.
         * Changes to a resource made by the service should refresh this value.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime The timestamp when the resource was last updated. Any
         * change to the resource made by users must refresh this value.
         * Changes to a resource made by the service should refresh this value.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public UnitKindState build() {
            return $;
        }
    }

}
