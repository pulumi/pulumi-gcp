// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.backupdisasterrecovery.outputs.GetDataSourceBackupConfigInfo;
import com.pulumi.gcp.backupdisasterrecovery.outputs.GetDataSourceDataSourceBackupApplianceApplication;
import com.pulumi.gcp.backupdisasterrecovery.outputs.GetDataSourceDataSourceGcpResource;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDataSourceResult {
    private List<GetDataSourceBackupConfigInfo> backupConfigInfos;
    private String backupCount;
    private String backupVaultId;
    private String configState;
    private String createTime;
    private List<GetDataSourceDataSourceBackupApplianceApplication> dataSourceBackupApplianceApplications;
    private List<GetDataSourceDataSourceGcpResource> dataSourceGcpResources;
    private String dataSourceId;
    private String etag;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private String location;
    private String name;
    private String project;
    private String state;
    private String totalStoredBytes;
    private String updateTime;

    private GetDataSourceResult() {}
    public List<GetDataSourceBackupConfigInfo> backupConfigInfos() {
        return this.backupConfigInfos;
    }
    public String backupCount() {
        return this.backupCount;
    }
    public String backupVaultId() {
        return this.backupVaultId;
    }
    public String configState() {
        return this.configState;
    }
    public String createTime() {
        return this.createTime;
    }
    public List<GetDataSourceDataSourceBackupApplianceApplication> dataSourceBackupApplianceApplications() {
        return this.dataSourceBackupApplianceApplications;
    }
    public List<GetDataSourceDataSourceGcpResource> dataSourceGcpResources() {
        return this.dataSourceGcpResources;
    }
    public String dataSourceId() {
        return this.dataSourceId;
    }
    public String etag() {
        return this.etag;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public String project() {
        return this.project;
    }
    public String state() {
        return this.state;
    }
    public String totalStoredBytes() {
        return this.totalStoredBytes;
    }
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSourceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDataSourceBackupConfigInfo> backupConfigInfos;
        private String backupCount;
        private String backupVaultId;
        private String configState;
        private String createTime;
        private List<GetDataSourceDataSourceBackupApplianceApplication> dataSourceBackupApplianceApplications;
        private List<GetDataSourceDataSourceGcpResource> dataSourceGcpResources;
        private String dataSourceId;
        private String etag;
        private String id;
        private Map<String,String> labels;
        private String location;
        private String name;
        private String project;
        private String state;
        private String totalStoredBytes;
        private String updateTime;
        public Builder() {}
        public Builder(GetDataSourceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupConfigInfos = defaults.backupConfigInfos;
    	      this.backupCount = defaults.backupCount;
    	      this.backupVaultId = defaults.backupVaultId;
    	      this.configState = defaults.configState;
    	      this.createTime = defaults.createTime;
    	      this.dataSourceBackupApplianceApplications = defaults.dataSourceBackupApplianceApplications;
    	      this.dataSourceGcpResources = defaults.dataSourceGcpResources;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
    	      this.totalStoredBytes = defaults.totalStoredBytes;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder backupConfigInfos(List<GetDataSourceBackupConfigInfo> backupConfigInfos) {
            if (backupConfigInfos == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "backupConfigInfos");
            }
            this.backupConfigInfos = backupConfigInfos;
            return this;
        }
        public Builder backupConfigInfos(GetDataSourceBackupConfigInfo... backupConfigInfos) {
            return backupConfigInfos(List.of(backupConfigInfos));
        }
        @CustomType.Setter
        public Builder backupCount(String backupCount) {
            if (backupCount == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "backupCount");
            }
            this.backupCount = backupCount;
            return this;
        }
        @CustomType.Setter
        public Builder backupVaultId(String backupVaultId) {
            if (backupVaultId == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "backupVaultId");
            }
            this.backupVaultId = backupVaultId;
            return this;
        }
        @CustomType.Setter
        public Builder configState(String configState) {
            if (configState == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "configState");
            }
            this.configState = configState;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceBackupApplianceApplications(List<GetDataSourceDataSourceBackupApplianceApplication> dataSourceBackupApplianceApplications) {
            if (dataSourceBackupApplianceApplications == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "dataSourceBackupApplianceApplications");
            }
            this.dataSourceBackupApplianceApplications = dataSourceBackupApplianceApplications;
            return this;
        }
        public Builder dataSourceBackupApplianceApplications(GetDataSourceDataSourceBackupApplianceApplication... dataSourceBackupApplianceApplications) {
            return dataSourceBackupApplianceApplications(List.of(dataSourceBackupApplianceApplications));
        }
        @CustomType.Setter
        public Builder dataSourceGcpResources(List<GetDataSourceDataSourceGcpResource> dataSourceGcpResources) {
            if (dataSourceGcpResources == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "dataSourceGcpResources");
            }
            this.dataSourceGcpResources = dataSourceGcpResources;
            return this;
        }
        public Builder dataSourceGcpResources(GetDataSourceDataSourceGcpResource... dataSourceGcpResources) {
            return dataSourceGcpResources(List.of(dataSourceGcpResources));
        }
        @CustomType.Setter
        public Builder dataSourceId(String dataSourceId) {
            if (dataSourceId == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "dataSourceId");
            }
            this.dataSourceId = dataSourceId;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            if (etag == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "etag");
            }
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder totalStoredBytes(String totalStoredBytes) {
            if (totalStoredBytes == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "totalStoredBytes");
            }
            this.totalStoredBytes = totalStoredBytes;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetDataSourceResult build() {
            final var _resultValue = new GetDataSourceResult();
            _resultValue.backupConfigInfos = backupConfigInfos;
            _resultValue.backupCount = backupCount;
            _resultValue.backupVaultId = backupVaultId;
            _resultValue.configState = configState;
            _resultValue.createTime = createTime;
            _resultValue.dataSourceBackupApplianceApplications = dataSourceBackupApplianceApplications;
            _resultValue.dataSourceGcpResources = dataSourceGcpResources;
            _resultValue.dataSourceId = dataSourceId;
            _resultValue.etag = etag;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.state = state;
            _resultValue.totalStoredBytes = totalStoredBytes;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
