// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetJobBinaryAuthorization {
    /**
     * @return If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
     * 
     */
    private String breakglassJustification;
    /**
     * @return The path to a binary authorization policy. Format: projects/{project}/platforms/cloudRun/{policy-name}
     * 
     */
    private String policy;
    /**
     * @return If True, indicates to use the default project&#39;s binary authorization policy. If False, binary authorization will be disabled.
     * 
     */
    private Boolean useDefault;

    private GetJobBinaryAuthorization() {}
    /**
     * @return If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
     * 
     */
    public String breakglassJustification() {
        return this.breakglassJustification;
    }
    /**
     * @return The path to a binary authorization policy. Format: projects/{project}/platforms/cloudRun/{policy-name}
     * 
     */
    public String policy() {
        return this.policy;
    }
    /**
     * @return If True, indicates to use the default project&#39;s binary authorization policy. If False, binary authorization will be disabled.
     * 
     */
    public Boolean useDefault() {
        return this.useDefault;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobBinaryAuthorization defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String breakglassJustification;
        private String policy;
        private Boolean useDefault;
        public Builder() {}
        public Builder(GetJobBinaryAuthorization defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.breakglassJustification = defaults.breakglassJustification;
    	      this.policy = defaults.policy;
    	      this.useDefault = defaults.useDefault;
        }

        @CustomType.Setter
        public Builder breakglassJustification(String breakglassJustification) {
            if (breakglassJustification == null) {
              throw new MissingRequiredPropertyException("GetJobBinaryAuthorization", "breakglassJustification");
            }
            this.breakglassJustification = breakglassJustification;
            return this;
        }
        @CustomType.Setter
        public Builder policy(String policy) {
            if (policy == null) {
              throw new MissingRequiredPropertyException("GetJobBinaryAuthorization", "policy");
            }
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder useDefault(Boolean useDefault) {
            if (useDefault == null) {
              throw new MissingRequiredPropertyException("GetJobBinaryAuthorization", "useDefault");
            }
            this.useDefault = useDefault;
            return this;
        }
        public GetJobBinaryAuthorization build() {
            final var _resultValue = new GetJobBinaryAuthorization();
            _resultValue.breakglassJustification = breakglassJustification;
            _resultValue.policy = policy;
            _resultValue.useDefault = useDefault;
            return _resultValue;
        }
    }
}
