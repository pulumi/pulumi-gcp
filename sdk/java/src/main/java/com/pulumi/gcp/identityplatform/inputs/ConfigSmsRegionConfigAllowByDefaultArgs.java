// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.identityplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigSmsRegionConfigAllowByDefaultArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigSmsRegionConfigAllowByDefaultArgs Empty = new ConfigSmsRegionConfigAllowByDefaultArgs();

    /**
     * Two letter unicode region codes to disallow as defined by &lt;https://cldr.unicode.org/&gt; The full list of these region codes is here: &lt;https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json&gt;
     * 
     */
    @Import(name="disallowedRegions")
    private @Nullable Output<List<String>> disallowedRegions;

    /**
     * @return Two letter unicode region codes to disallow as defined by &lt;https://cldr.unicode.org/&gt; The full list of these region codes is here: &lt;https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json&gt;
     * 
     */
    public Optional<Output<List<String>>> disallowedRegions() {
        return Optional.ofNullable(this.disallowedRegions);
    }

    private ConfigSmsRegionConfigAllowByDefaultArgs() {}

    private ConfigSmsRegionConfigAllowByDefaultArgs(ConfigSmsRegionConfigAllowByDefaultArgs $) {
        this.disallowedRegions = $.disallowedRegions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigSmsRegionConfigAllowByDefaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigSmsRegionConfigAllowByDefaultArgs $;

        public Builder() {
            $ = new ConfigSmsRegionConfigAllowByDefaultArgs();
        }

        public Builder(ConfigSmsRegionConfigAllowByDefaultArgs defaults) {
            $ = new ConfigSmsRegionConfigAllowByDefaultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disallowedRegions Two letter unicode region codes to disallow as defined by &lt;https://cldr.unicode.org/&gt; The full list of these region codes is here: &lt;https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json&gt;
         * 
         * @return builder
         * 
         */
        public Builder disallowedRegions(@Nullable Output<List<String>> disallowedRegions) {
            $.disallowedRegions = disallowedRegions;
            return this;
        }

        /**
         * @param disallowedRegions Two letter unicode region codes to disallow as defined by &lt;https://cldr.unicode.org/&gt; The full list of these region codes is here: &lt;https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json&gt;
         * 
         * @return builder
         * 
         */
        public Builder disallowedRegions(List<String> disallowedRegions) {
            return disallowedRegions(Output.of(disallowedRegions));
        }

        /**
         * @param disallowedRegions Two letter unicode region codes to disallow as defined by &lt;https://cldr.unicode.org/&gt; The full list of these region codes is here: &lt;https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json&gt;
         * 
         * @return builder
         * 
         */
        public Builder disallowedRegions(String... disallowedRegions) {
            return disallowedRegions(List.of(disallowedRegions));
        }

        public ConfigSmsRegionConfigAllowByDefaultArgs build() {
            return $;
        }
    }

}
