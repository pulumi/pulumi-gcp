// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.artifactregistry.outputs.GetNpmPackagesNpmPackage;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNpmPackagesResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String location;
    /**
     * @return A list of all retrieved Artifact Registry Npm packages. Structure is defined below.
     * 
     */
    private List<GetNpmPackagesNpmPackage> npmPackages;
    private @Nullable String project;
    private String repositoryId;

    private GetNpmPackagesResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String location() {
        return this.location;
    }
    /**
     * @return A list of all retrieved Artifact Registry Npm packages. Structure is defined below.
     * 
     */
    public List<GetNpmPackagesNpmPackage> npmPackages() {
        return this.npmPackages;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String repositoryId() {
        return this.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNpmPackagesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String location;
        private List<GetNpmPackagesNpmPackage> npmPackages;
        private @Nullable String project;
        private String repositoryId;
        public Builder() {}
        public Builder(GetNpmPackagesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.npmPackages = defaults.npmPackages;
    	      this.project = defaults.project;
    	      this.repositoryId = defaults.repositoryId;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNpmPackagesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetNpmPackagesResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder npmPackages(List<GetNpmPackagesNpmPackage> npmPackages) {
            if (npmPackages == null) {
              throw new MissingRequiredPropertyException("GetNpmPackagesResult", "npmPackages");
            }
            this.npmPackages = npmPackages;
            return this;
        }
        public Builder npmPackages(GetNpmPackagesNpmPackage... npmPackages) {
            return npmPackages(List.of(npmPackages));
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetNpmPackagesResult", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        public GetNpmPackagesResult build() {
            final var _resultValue = new GetNpmPackagesResult();
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.npmPackages = npmPackages;
            _resultValue.project = project;
            _resultValue.repositoryId = repositoryId;
            return _resultValue;
        }
    }
}
