// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.composer.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EnvironmentConfigPrivateEnvironmentConfig {
    /**
     * @return When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    private @Nullable String cloudComposerConnectionSubnetwork;
    /**
     * @return The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    private @Nullable String cloudComposerNetworkIpv4CidrBlock;
    /**
     * @return The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block.
     * 
     */
    private @Nullable String cloudSqlIpv4CidrBlock;
    /**
     * @return Mode of internal communication within the Composer environment. Must be one of &#34;VPC_PEERING&#34; or &#34;PRIVATE_SERVICE_CONNECT&#34;.
     * 
     */
    private @Nullable String connectionType;
    /**
     * @return If true, access to the public endpoint of the GKE cluster is denied. If this field is set to true, ip_allocation_policy.use_ip_aliases must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private @Nullable Boolean enablePrivateEndpoint;
    /**
     * @return When enabled, IPs from public (non-RFC1918) ranges can be used for ip_allocation_policy.cluster_ipv4_cidr_block and ip_allocation_policy.service_ipv4_cidr_block.
     * 
     */
    private @Nullable Boolean enablePrivatelyUsedPublicIps;
    /**
     * @return The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster&#39;s network. If left blank, the default value of &#39;172.16.0.0/28&#39; is used.
     * 
     */
    private @Nullable String masterIpv4CidrBlock;
    /**
     * @return The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from masterIpv4CidrBlock and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private @Nullable String webServerIpv4CidrBlock;

    private EnvironmentConfigPrivateEnvironmentConfig() {}
    /**
     * @return When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    public Optional<String> cloudComposerConnectionSubnetwork() {
        return Optional.ofNullable(this.cloudComposerConnectionSubnetwork);
    }
    /**
     * @return The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    public Optional<String> cloudComposerNetworkIpv4CidrBlock() {
        return Optional.ofNullable(this.cloudComposerNetworkIpv4CidrBlock);
    }
    /**
     * @return The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block.
     * 
     */
    public Optional<String> cloudSqlIpv4CidrBlock() {
        return Optional.ofNullable(this.cloudSqlIpv4CidrBlock);
    }
    /**
     * @return Mode of internal communication within the Composer environment. Must be one of &#34;VPC_PEERING&#34; or &#34;PRIVATE_SERVICE_CONNECT&#34;.
     * 
     */
    public Optional<String> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }
    /**
     * @return If true, access to the public endpoint of the GKE cluster is denied. If this field is set to true, ip_allocation_policy.use_ip_aliases must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public Optional<Boolean> enablePrivateEndpoint() {
        return Optional.ofNullable(this.enablePrivateEndpoint);
    }
    /**
     * @return When enabled, IPs from public (non-RFC1918) ranges can be used for ip_allocation_policy.cluster_ipv4_cidr_block and ip_allocation_policy.service_ipv4_cidr_block.
     * 
     */
    public Optional<Boolean> enablePrivatelyUsedPublicIps() {
        return Optional.ofNullable(this.enablePrivatelyUsedPublicIps);
    }
    /**
     * @return The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster&#39;s network. If left blank, the default value of &#39;172.16.0.0/28&#39; is used.
     * 
     */
    public Optional<String> masterIpv4CidrBlock() {
        return Optional.ofNullable(this.masterIpv4CidrBlock);
    }
    /**
     * @return The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from masterIpv4CidrBlock and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public Optional<String> webServerIpv4CidrBlock() {
        return Optional.ofNullable(this.webServerIpv4CidrBlock);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentConfigPrivateEnvironmentConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cloudComposerConnectionSubnetwork;
        private @Nullable String cloudComposerNetworkIpv4CidrBlock;
        private @Nullable String cloudSqlIpv4CidrBlock;
        private @Nullable String connectionType;
        private @Nullable Boolean enablePrivateEndpoint;
        private @Nullable Boolean enablePrivatelyUsedPublicIps;
        private @Nullable String masterIpv4CidrBlock;
        private @Nullable String webServerIpv4CidrBlock;
        public Builder() {}
        public Builder(EnvironmentConfigPrivateEnvironmentConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudComposerConnectionSubnetwork = defaults.cloudComposerConnectionSubnetwork;
    	      this.cloudComposerNetworkIpv4CidrBlock = defaults.cloudComposerNetworkIpv4CidrBlock;
    	      this.cloudSqlIpv4CidrBlock = defaults.cloudSqlIpv4CidrBlock;
    	      this.connectionType = defaults.connectionType;
    	      this.enablePrivateEndpoint = defaults.enablePrivateEndpoint;
    	      this.enablePrivatelyUsedPublicIps = defaults.enablePrivatelyUsedPublicIps;
    	      this.masterIpv4CidrBlock = defaults.masterIpv4CidrBlock;
    	      this.webServerIpv4CidrBlock = defaults.webServerIpv4CidrBlock;
        }

        @CustomType.Setter
        public Builder cloudComposerConnectionSubnetwork(@Nullable String cloudComposerConnectionSubnetwork) {

            this.cloudComposerConnectionSubnetwork = cloudComposerConnectionSubnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder cloudComposerNetworkIpv4CidrBlock(@Nullable String cloudComposerNetworkIpv4CidrBlock) {

            this.cloudComposerNetworkIpv4CidrBlock = cloudComposerNetworkIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder cloudSqlIpv4CidrBlock(@Nullable String cloudSqlIpv4CidrBlock) {

            this.cloudSqlIpv4CidrBlock = cloudSqlIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(@Nullable String connectionType) {

            this.connectionType = connectionType;
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivateEndpoint(@Nullable Boolean enablePrivateEndpoint) {

            this.enablePrivateEndpoint = enablePrivateEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivatelyUsedPublicIps(@Nullable Boolean enablePrivatelyUsedPublicIps) {

            this.enablePrivatelyUsedPublicIps = enablePrivatelyUsedPublicIps;
            return this;
        }
        @CustomType.Setter
        public Builder masterIpv4CidrBlock(@Nullable String masterIpv4CidrBlock) {

            this.masterIpv4CidrBlock = masterIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder webServerIpv4CidrBlock(@Nullable String webServerIpv4CidrBlock) {

            this.webServerIpv4CidrBlock = webServerIpv4CidrBlock;
            return this;
        }
        public EnvironmentConfigPrivateEnvironmentConfig build() {
            final var _resultValue = new EnvironmentConfigPrivateEnvironmentConfig();
            _resultValue.cloudComposerConnectionSubnetwork = cloudComposerConnectionSubnetwork;
            _resultValue.cloudComposerNetworkIpv4CidrBlock = cloudComposerNetworkIpv4CidrBlock;
            _resultValue.cloudSqlIpv4CidrBlock = cloudSqlIpv4CidrBlock;
            _resultValue.connectionType = connectionType;
            _resultValue.enablePrivateEndpoint = enablePrivateEndpoint;
            _resultValue.enablePrivatelyUsedPublicIps = enablePrivatelyUsedPublicIps;
            _resultValue.masterIpv4CidrBlock = masterIpv4CidrBlock;
            _resultValue.webServerIpv4CidrBlock = webServerIpv4CidrBlock;
            return _resultValue;
        }
    }
}
