// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs Empty = new AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs();

    /**
     * Configuration options for using brute force search, which simply implements the standard linear search in the database for each query. It is primarily meant for benchmarking and to generate the ground truth for approximate search.
     * 
     */
    @Import(name="bruteForceConfig")
    private @Nullable Output<AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgs> bruteForceConfig;

    /**
     * @return Configuration options for using brute force search, which simply implements the standard linear search in the database for each query. It is primarily meant for benchmarking and to generate the ground truth for approximate search.
     * 
     */
    public Optional<Output<AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgs>> bruteForceConfig() {
        return Optional.ofNullable(this.bruteForceConfig);
    }

    /**
     * Column of crowding. This column contains crowding attribute which is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k&#39; of the k neighbors returned have the same value of crowdingAttribute.
     * 
     */
    @Import(name="crowdingColumn")
    private @Nullable Output<String> crowdingColumn;

    /**
     * @return Column of crowding. This column contains crowding attribute which is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k&#39; of the k neighbors returned have the same value of crowdingAttribute.
     * 
     */
    public Optional<Output<String>> crowdingColumn() {
        return Optional.ofNullable(this.crowdingColumn);
    }

    /**
     * The distance measure used in nearest neighbor search.
     * For details on allowed values, see the [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureOnlineStores.featureViews#DistanceMeasureType).
     * Possible values are: `SQUARED_L2_DISTANCE`, `COSINE_DISTANCE`, `DOT_PRODUCT_DISTANCE`.
     * 
     */
    @Import(name="distanceMeasureType")
    private @Nullable Output<String> distanceMeasureType;

    /**
     * @return The distance measure used in nearest neighbor search.
     * For details on allowed values, see the [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureOnlineStores.featureViews#DistanceMeasureType).
     * Possible values are: `SQUARED_L2_DISTANCE`, `COSINE_DISTANCE`, `DOT_PRODUCT_DISTANCE`.
     * 
     */
    public Optional<Output<String>> distanceMeasureType() {
        return Optional.ofNullable(this.distanceMeasureType);
    }

    /**
     * Column of embedding. This column contains the source data to create index for vector search.
     * 
     */
    @Import(name="embeddingColumn", required=true)
    private Output<String> embeddingColumn;

    /**
     * @return Column of embedding. This column contains the source data to create index for vector search.
     * 
     */
    public Output<String> embeddingColumn() {
        return this.embeddingColumn;
    }

    /**
     * The number of dimensions of the input embedding.
     * 
     */
    @Import(name="embeddingDimension")
    private @Nullable Output<Integer> embeddingDimension;

    /**
     * @return The number of dimensions of the input embedding.
     * 
     */
    public Optional<Output<Integer>> embeddingDimension() {
        return Optional.ofNullable(this.embeddingDimension);
    }

    /**
     * Columns of features that are used to filter vector search results.
     * 
     */
    @Import(name="filterColumns")
    private @Nullable Output<List<String>> filterColumns;

    /**
     * @return Columns of features that are used to filter vector search results.
     * 
     */
    public Optional<Output<List<String>>> filterColumns() {
        return Optional.ofNullable(this.filterColumns);
    }

    /**
     * Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing). Please refer to this paper for more details: &lt;https://arxiv.org/abs/1908.10396&gt;
     * Structure is documented below.
     * 
     */
    @Import(name="treeAhConfig")
    private @Nullable Output<AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs> treeAhConfig;

    /**
     * @return Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing). Please refer to this paper for more details: &lt;https://arxiv.org/abs/1908.10396&gt;
     * Structure is documented below.
     * 
     */
    public Optional<Output<AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs>> treeAhConfig() {
        return Optional.ofNullable(this.treeAhConfig);
    }

    private AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs() {}

    private AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs(AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs $) {
        this.bruteForceConfig = $.bruteForceConfig;
        this.crowdingColumn = $.crowdingColumn;
        this.distanceMeasureType = $.distanceMeasureType;
        this.embeddingColumn = $.embeddingColumn;
        this.embeddingDimension = $.embeddingDimension;
        this.filterColumns = $.filterColumns;
        this.treeAhConfig = $.treeAhConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs $;

        public Builder() {
            $ = new AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs();
        }

        public Builder(AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs defaults) {
            $ = new AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bruteForceConfig Configuration options for using brute force search, which simply implements the standard linear search in the database for each query. It is primarily meant for benchmarking and to generate the ground truth for approximate search.
         * 
         * @return builder
         * 
         */
        public Builder bruteForceConfig(@Nullable Output<AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgs> bruteForceConfig) {
            $.bruteForceConfig = bruteForceConfig;
            return this;
        }

        /**
         * @param bruteForceConfig Configuration options for using brute force search, which simply implements the standard linear search in the database for each query. It is primarily meant for benchmarking and to generate the ground truth for approximate search.
         * 
         * @return builder
         * 
         */
        public Builder bruteForceConfig(AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgs bruteForceConfig) {
            return bruteForceConfig(Output.of(bruteForceConfig));
        }

        /**
         * @param crowdingColumn Column of crowding. This column contains crowding attribute which is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k&#39; of the k neighbors returned have the same value of crowdingAttribute.
         * 
         * @return builder
         * 
         */
        public Builder crowdingColumn(@Nullable Output<String> crowdingColumn) {
            $.crowdingColumn = crowdingColumn;
            return this;
        }

        /**
         * @param crowdingColumn Column of crowding. This column contains crowding attribute which is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k&#39; of the k neighbors returned have the same value of crowdingAttribute.
         * 
         * @return builder
         * 
         */
        public Builder crowdingColumn(String crowdingColumn) {
            return crowdingColumn(Output.of(crowdingColumn));
        }

        /**
         * @param distanceMeasureType The distance measure used in nearest neighbor search.
         * For details on allowed values, see the [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureOnlineStores.featureViews#DistanceMeasureType).
         * Possible values are: `SQUARED_L2_DISTANCE`, `COSINE_DISTANCE`, `DOT_PRODUCT_DISTANCE`.
         * 
         * @return builder
         * 
         */
        public Builder distanceMeasureType(@Nullable Output<String> distanceMeasureType) {
            $.distanceMeasureType = distanceMeasureType;
            return this;
        }

        /**
         * @param distanceMeasureType The distance measure used in nearest neighbor search.
         * For details on allowed values, see the [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureOnlineStores.featureViews#DistanceMeasureType).
         * Possible values are: `SQUARED_L2_DISTANCE`, `COSINE_DISTANCE`, `DOT_PRODUCT_DISTANCE`.
         * 
         * @return builder
         * 
         */
        public Builder distanceMeasureType(String distanceMeasureType) {
            return distanceMeasureType(Output.of(distanceMeasureType));
        }

        /**
         * @param embeddingColumn Column of embedding. This column contains the source data to create index for vector search.
         * 
         * @return builder
         * 
         */
        public Builder embeddingColumn(Output<String> embeddingColumn) {
            $.embeddingColumn = embeddingColumn;
            return this;
        }

        /**
         * @param embeddingColumn Column of embedding. This column contains the source data to create index for vector search.
         * 
         * @return builder
         * 
         */
        public Builder embeddingColumn(String embeddingColumn) {
            return embeddingColumn(Output.of(embeddingColumn));
        }

        /**
         * @param embeddingDimension The number of dimensions of the input embedding.
         * 
         * @return builder
         * 
         */
        public Builder embeddingDimension(@Nullable Output<Integer> embeddingDimension) {
            $.embeddingDimension = embeddingDimension;
            return this;
        }

        /**
         * @param embeddingDimension The number of dimensions of the input embedding.
         * 
         * @return builder
         * 
         */
        public Builder embeddingDimension(Integer embeddingDimension) {
            return embeddingDimension(Output.of(embeddingDimension));
        }

        /**
         * @param filterColumns Columns of features that are used to filter vector search results.
         * 
         * @return builder
         * 
         */
        public Builder filterColumns(@Nullable Output<List<String>> filterColumns) {
            $.filterColumns = filterColumns;
            return this;
        }

        /**
         * @param filterColumns Columns of features that are used to filter vector search results.
         * 
         * @return builder
         * 
         */
        public Builder filterColumns(List<String> filterColumns) {
            return filterColumns(Output.of(filterColumns));
        }

        /**
         * @param filterColumns Columns of features that are used to filter vector search results.
         * 
         * @return builder
         * 
         */
        public Builder filterColumns(String... filterColumns) {
            return filterColumns(List.of(filterColumns));
        }

        /**
         * @param treeAhConfig Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing). Please refer to this paper for more details: &lt;https://arxiv.org/abs/1908.10396&gt;
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder treeAhConfig(@Nullable Output<AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs> treeAhConfig) {
            $.treeAhConfig = treeAhConfig;
            return this;
        }

        /**
         * @param treeAhConfig Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing). Please refer to this paper for more details: &lt;https://arxiv.org/abs/1908.10396&gt;
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder treeAhConfig(AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs treeAhConfig) {
            return treeAhConfig(Output.of(treeAhConfig));
        }

        public AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs build() {
            if ($.embeddingColumn == null) {
                throw new MissingRequiredPropertyException("AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs", "embeddingColumn");
            }
            return $;
        }
    }

}
