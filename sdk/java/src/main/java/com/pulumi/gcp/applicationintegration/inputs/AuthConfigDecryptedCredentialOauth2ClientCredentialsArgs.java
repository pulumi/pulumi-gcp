// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.applicationintegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.applicationintegration.inputs.AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs Empty = new AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs();

    /**
     * The client&#39;s ID.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The client&#39;s ID.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client&#39;s secret.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return The client&#39;s secret.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * Represent how to pass parameters to fetch access token Possible values: [&#34;REQUEST_TYPE_UNSPECIFIED&#34;, &#34;REQUEST_BODY&#34;, &#34;QUERY_PARAMETERS&#34;, &#34;ENCODED_HEADER&#34;]
     * 
     */
    @Import(name="requestType")
    private @Nullable Output<String> requestType;

    /**
     * @return Represent how to pass parameters to fetch access token Possible values: [&#34;REQUEST_TYPE_UNSPECIFIED&#34;, &#34;REQUEST_BODY&#34;, &#34;QUERY_PARAMETERS&#34;, &#34;ENCODED_HEADER&#34;]
     * 
     */
    public Optional<Output<String>> requestType() {
        return Optional.ofNullable(this.requestType);
    }

    /**
     * A space-delimited list of requested scope permissions.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return A space-delimited list of requested scope permissions.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
     * 
     */
    @Import(name="tokenEndpoint")
    private @Nullable Output<String> tokenEndpoint;

    /**
     * @return The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
     * 
     */
    public Optional<Output<String>> tokenEndpoint() {
        return Optional.ofNullable(this.tokenEndpoint);
    }

    /**
     * Token parameters for the auth request.
     * 
     */
    @Import(name="tokenParams")
    private @Nullable Output<AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsArgs> tokenParams;

    /**
     * @return Token parameters for the auth request.
     * 
     */
    public Optional<Output<AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsArgs>> tokenParams() {
        return Optional.ofNullable(this.tokenParams);
    }

    private AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs() {}

    private AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs(AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs $) {
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.requestType = $.requestType;
        this.scope = $.scope;
        this.tokenEndpoint = $.tokenEndpoint;
        this.tokenParams = $.tokenParams;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs $;

        public Builder() {
            $ = new AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs();
        }

        public Builder(AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs defaults) {
            $ = new AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId The client&#39;s ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The client&#39;s ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The client&#39;s secret.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The client&#39;s secret.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param requestType Represent how to pass parameters to fetch access token Possible values: [&#34;REQUEST_TYPE_UNSPECIFIED&#34;, &#34;REQUEST_BODY&#34;, &#34;QUERY_PARAMETERS&#34;, &#34;ENCODED_HEADER&#34;]
         * 
         * @return builder
         * 
         */
        public Builder requestType(@Nullable Output<String> requestType) {
            $.requestType = requestType;
            return this;
        }

        /**
         * @param requestType Represent how to pass parameters to fetch access token Possible values: [&#34;REQUEST_TYPE_UNSPECIFIED&#34;, &#34;REQUEST_BODY&#34;, &#34;QUERY_PARAMETERS&#34;, &#34;ENCODED_HEADER&#34;]
         * 
         * @return builder
         * 
         */
        public Builder requestType(String requestType) {
            return requestType(Output.of(requestType));
        }

        /**
         * @param scope A space-delimited list of requested scope permissions.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope A space-delimited list of requested scope permissions.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param tokenEndpoint The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
         * 
         * @return builder
         * 
         */
        public Builder tokenEndpoint(@Nullable Output<String> tokenEndpoint) {
            $.tokenEndpoint = tokenEndpoint;
            return this;
        }

        /**
         * @param tokenEndpoint The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
         * 
         * @return builder
         * 
         */
        public Builder tokenEndpoint(String tokenEndpoint) {
            return tokenEndpoint(Output.of(tokenEndpoint));
        }

        /**
         * @param tokenParams Token parameters for the auth request.
         * 
         * @return builder
         * 
         */
        public Builder tokenParams(@Nullable Output<AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsArgs> tokenParams) {
            $.tokenParams = tokenParams;
            return this;
        }

        /**
         * @param tokenParams Token parameters for the auth request.
         * 
         * @return builder
         * 
         */
        public Builder tokenParams(AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsArgs tokenParams) {
            return tokenParams(Output.of(tokenParams));
        }

        public AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs build() {
            return $;
        }
    }

}
