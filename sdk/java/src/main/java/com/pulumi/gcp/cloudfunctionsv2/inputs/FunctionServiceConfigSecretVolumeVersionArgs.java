// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudfunctionsv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class FunctionServiceConfigSecretVolumeVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionServiceConfigSecretVolumeVersionArgs Empty = new FunctionServiceConfigSecretVolumeVersionArgs();

    /**
     * Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mountPath as &#39;/etc/secrets&#39; and path as secretFoo would mount the secret value file at /etc/secrets/secret_foo.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mountPath as &#39;/etc/secrets&#39; and path as secretFoo would mount the secret value file at /etc/secrets/secret_foo.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Version of the secret (version number or the string &#39;latest&#39;). It is preferable to use latest version with secret volumes as secret value changes are reflected immediately.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return Version of the secret (version number or the string &#39;latest&#39;). It is preferable to use latest version with secret volumes as secret value changes are reflected immediately.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private FunctionServiceConfigSecretVolumeVersionArgs() {}

    private FunctionServiceConfigSecretVolumeVersionArgs(FunctionServiceConfigSecretVolumeVersionArgs $) {
        this.path = $.path;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionServiceConfigSecretVolumeVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionServiceConfigSecretVolumeVersionArgs $;

        public Builder() {
            $ = new FunctionServiceConfigSecretVolumeVersionArgs();
        }

        public Builder(FunctionServiceConfigSecretVolumeVersionArgs defaults) {
            $ = new FunctionServiceConfigSecretVolumeVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param path Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mountPath as &#39;/etc/secrets&#39; and path as secretFoo would mount the secret value file at /etc/secrets/secret_foo.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mountPath as &#39;/etc/secrets&#39; and path as secretFoo would mount the secret value file at /etc/secrets/secret_foo.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param version Version of the secret (version number or the string &#39;latest&#39;). It is preferable to use latest version with secret volumes as secret value changes are reflected immediately.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of the secret (version number or the string &#39;latest&#39;). It is preferable to use latest version with secret volumes as secret value changes are reflected immediately.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public FunctionServiceConfigSecretVolumeVersionArgs build() {
            if ($.path == null) {
                throw new MissingRequiredPropertyException("FunctionServiceConfigSecretVolumeVersionArgs", "path");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("FunctionServiceConfigSecretVolumeVersionArgs", "version");
            }
            return $;
        }
    }

}
