// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeHybridReplicationParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeHybridReplicationParametersArgs Empty = new VolumeHybridReplicationParametersArgs();

    /**
     * Optional. Name of source cluster location associated with the Hybrid replication. This is a free-form field for the display purpose only.
     * 
     */
    @Import(name="clusterLocation")
    private @Nullable Output<String> clusterLocation;

    /**
     * @return Optional. Name of source cluster location associated with the Hybrid replication. This is a free-form field for the display purpose only.
     * 
     */
    public Optional<Output<String>> clusterLocation() {
        return Optional.ofNullable(this.clusterLocation);
    }

    /**
     * Optional. Description of the replication.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. Description of the replication.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. Labels to be added to the replication as the key value pairs.
     * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels to be added to the replication as the key value pairs.
     * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Required. Name of the user&#39;s local source cluster to be peered with the destination cluster.
     * 
     */
    @Import(name="peerClusterName")
    private @Nullable Output<String> peerClusterName;

    /**
     * @return Required. Name of the user&#39;s local source cluster to be peered with the destination cluster.
     * 
     */
    public Optional<Output<String>> peerClusterName() {
        return Optional.ofNullable(this.peerClusterName);
    }

    /**
     * Required. List of node ip addresses to be peered with.
     * 
     */
    @Import(name="peerIpAddresses")
    private @Nullable Output<String> peerIpAddresses;

    /**
     * @return Required. List of node ip addresses to be peered with.
     * 
     */
    public Optional<Output<String>> peerIpAddresses() {
        return Optional.ofNullable(this.peerIpAddresses);
    }

    /**
     * Required. Name of the user&#39;s local source vserver svm to be peered with the destination vserver svm.
     * 
     */
    @Import(name="peerSvmName")
    private @Nullable Output<String> peerSvmName;

    /**
     * @return Required. Name of the user&#39;s local source vserver svm to be peered with the destination vserver svm.
     * 
     */
    public Optional<Output<String>> peerSvmName() {
        return Optional.ofNullable(this.peerSvmName);
    }

    /**
     * Required. Name of the user&#39;s local source volume to be peered with the destination volume.
     * 
     */
    @Import(name="peerVolumeName")
    private @Nullable Output<String> peerVolumeName;

    /**
     * @return Required. Name of the user&#39;s local source volume to be peered with the destination volume.
     * 
     */
    public Optional<Output<String>> peerVolumeName() {
        return Optional.ofNullable(this.peerVolumeName);
    }

    /**
     * Required. Desired name for the replication of this volume.
     * 
     */
    @Import(name="replication")
    private @Nullable Output<String> replication;

    /**
     * @return Required. Desired name for the replication of this volume.
     * 
     */
    public Optional<Output<String>> replication() {
        return Optional.ofNullable(this.replication);
    }

    private VolumeHybridReplicationParametersArgs() {}

    private VolumeHybridReplicationParametersArgs(VolumeHybridReplicationParametersArgs $) {
        this.clusterLocation = $.clusterLocation;
        this.description = $.description;
        this.labels = $.labels;
        this.peerClusterName = $.peerClusterName;
        this.peerIpAddresses = $.peerIpAddresses;
        this.peerSvmName = $.peerSvmName;
        this.peerVolumeName = $.peerVolumeName;
        this.replication = $.replication;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeHybridReplicationParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeHybridReplicationParametersArgs $;

        public Builder() {
            $ = new VolumeHybridReplicationParametersArgs();
        }

        public Builder(VolumeHybridReplicationParametersArgs defaults) {
            $ = new VolumeHybridReplicationParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterLocation Optional. Name of source cluster location associated with the Hybrid replication. This is a free-form field for the display purpose only.
         * 
         * @return builder
         * 
         */
        public Builder clusterLocation(@Nullable Output<String> clusterLocation) {
            $.clusterLocation = clusterLocation;
            return this;
        }

        /**
         * @param clusterLocation Optional. Name of source cluster location associated with the Hybrid replication. This is a free-form field for the display purpose only.
         * 
         * @return builder
         * 
         */
        public Builder clusterLocation(String clusterLocation) {
            return clusterLocation(Output.of(clusterLocation));
        }

        /**
         * @param description Optional. Description of the replication.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. Description of the replication.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param labels Optional. Labels to be added to the replication as the key value pairs.
         * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels to be added to the replication as the key value pairs.
         * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param peerClusterName Required. Name of the user&#39;s local source cluster to be peered with the destination cluster.
         * 
         * @return builder
         * 
         */
        public Builder peerClusterName(@Nullable Output<String> peerClusterName) {
            $.peerClusterName = peerClusterName;
            return this;
        }

        /**
         * @param peerClusterName Required. Name of the user&#39;s local source cluster to be peered with the destination cluster.
         * 
         * @return builder
         * 
         */
        public Builder peerClusterName(String peerClusterName) {
            return peerClusterName(Output.of(peerClusterName));
        }

        /**
         * @param peerIpAddresses Required. List of node ip addresses to be peered with.
         * 
         * @return builder
         * 
         */
        public Builder peerIpAddresses(@Nullable Output<String> peerIpAddresses) {
            $.peerIpAddresses = peerIpAddresses;
            return this;
        }

        /**
         * @param peerIpAddresses Required. List of node ip addresses to be peered with.
         * 
         * @return builder
         * 
         */
        public Builder peerIpAddresses(String peerIpAddresses) {
            return peerIpAddresses(Output.of(peerIpAddresses));
        }

        /**
         * @param peerSvmName Required. Name of the user&#39;s local source vserver svm to be peered with the destination vserver svm.
         * 
         * @return builder
         * 
         */
        public Builder peerSvmName(@Nullable Output<String> peerSvmName) {
            $.peerSvmName = peerSvmName;
            return this;
        }

        /**
         * @param peerSvmName Required. Name of the user&#39;s local source vserver svm to be peered with the destination vserver svm.
         * 
         * @return builder
         * 
         */
        public Builder peerSvmName(String peerSvmName) {
            return peerSvmName(Output.of(peerSvmName));
        }

        /**
         * @param peerVolumeName Required. Name of the user&#39;s local source volume to be peered with the destination volume.
         * 
         * @return builder
         * 
         */
        public Builder peerVolumeName(@Nullable Output<String> peerVolumeName) {
            $.peerVolumeName = peerVolumeName;
            return this;
        }

        /**
         * @param peerVolumeName Required. Name of the user&#39;s local source volume to be peered with the destination volume.
         * 
         * @return builder
         * 
         */
        public Builder peerVolumeName(String peerVolumeName) {
            return peerVolumeName(Output.of(peerVolumeName));
        }

        /**
         * @param replication Required. Desired name for the replication of this volume.
         * 
         * @return builder
         * 
         */
        public Builder replication(@Nullable Output<String> replication) {
            $.replication = replication;
            return this;
        }

        /**
         * @param replication Required. Desired name for the replication of this volume.
         * 
         * @return builder
         * 
         */
        public Builder replication(String replication) {
            return replication(Output.of(replication));
        }

        public VolumeHybridReplicationParametersArgs build() {
            return $;
        }
    }

}
