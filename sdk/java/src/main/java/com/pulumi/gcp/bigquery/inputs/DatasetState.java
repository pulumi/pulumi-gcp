// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigquery.inputs.DatasetAccessArgs;
import com.pulumi.gcp.bigquery.inputs.DatasetDefaultEncryptionConfigurationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatasetState extends com.pulumi.resources.ResourceArgs {

    public static final DatasetState Empty = new DatasetState();

    /**
     * An array of objects that define dataset access for one or more entities.
     * Structure is documented below.
     * 
     */
    @Import(name="accesses")
    private @Nullable Output<List<DatasetAccessArgs>> accesses;

    /**
     * @return An array of objects that define dataset access for one or more entities.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatasetAccessArgs>>> accesses() {
        return Optional.ofNullable(this.accesses);
    }

    /**
     * The time when this dataset was created, in milliseconds since the
     * epoch.
     * 
     */
    @Import(name="creationTime")
    private @Nullable Output<Integer> creationTime;

    /**
     * @return The time when this dataset was created, in milliseconds since the
     * epoch.
     * 
     */
    public Optional<Output<Integer>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    /**
     * A unique ID for this dataset, without the project name. The ID
     * must contain only letters (a-z, A-Z), numbers (0-9), or
     * underscores (_). The maximum length is 1,024 characters.
     * 
     * ***
     * 
     */
    @Import(name="datasetId")
    private @Nullable Output<String> datasetId;

    /**
     * @return A unique ID for this dataset, without the project name. The ID
     * must contain only letters (a-z, A-Z), numbers (0-9), or
     * underscores (_). The maximum length is 1,024 characters.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> datasetId() {
        return Optional.ofNullable(this.datasetId);
    }

    /**
     * Defines the default collation specification of future tables created
     * in the dataset. If a table is created in this dataset without table-level
     * default collation, then the table inherits the dataset default collation,
     * which is applied to the string fields that do not have explicit collation
     * specified. A change to this field affects only tables created afterwards,
     * and does not alter the existing tables.
     * The following values are supported:
     * - &#39;und:ci&#39;: undetermined locale, case insensitive.
     * - &#39;&#39;: empty string. Default to case-sensitive behavior.
     * 
     */
    @Import(name="defaultCollation")
    private @Nullable Output<String> defaultCollation;

    /**
     * @return Defines the default collation specification of future tables created
     * in the dataset. If a table is created in this dataset without table-level
     * default collation, then the table inherits the dataset default collation,
     * which is applied to the string fields that do not have explicit collation
     * specified. A change to this field affects only tables created afterwards,
     * and does not alter the existing tables.
     * The following values are supported:
     * - &#39;und:ci&#39;: undetermined locale, case insensitive.
     * - &#39;&#39;: empty string. Default to case-sensitive behavior.
     * 
     */
    public Optional<Output<String>> defaultCollation() {
        return Optional.ofNullable(this.defaultCollation);
    }

    /**
     * The default encryption key for all tables in the dataset. Once this property is set,
     * all newly-created partitioned tables in the dataset will have encryption key set to
     * this value, unless table creation request (or query) overrides the key.
     * Structure is documented below.
     * 
     */
    @Import(name="defaultEncryptionConfiguration")
    private @Nullable Output<DatasetDefaultEncryptionConfigurationArgs> defaultEncryptionConfiguration;

    /**
     * @return The default encryption key for all tables in the dataset. Once this property is set,
     * all newly-created partitioned tables in the dataset will have encryption key set to
     * this value, unless table creation request (or query) overrides the key.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DatasetDefaultEncryptionConfigurationArgs>> defaultEncryptionConfiguration() {
        return Optional.ofNullable(this.defaultEncryptionConfiguration);
    }

    /**
     * The default partition expiration for all partitioned tables in
     * the dataset, in milliseconds.
     * 
     * Once this property is set, all newly-created partitioned tables in
     * the dataset will have an `expirationMs` property in the `timePartitioning`
     * settings set to this value, and changing the value will only
     * affect new tables, not existing ones. The storage in a partition will
     * have an expiration time of its partition time plus this value.
     * Setting this property overrides the use of `defaultTableExpirationMs`
     * for partitioned tables: only one of `defaultTableExpirationMs` and
     * `defaultPartitionExpirationMs` will be used for any new partitioned
     * table. If you provide an explicit `timePartitioning.expirationMs` when
     * creating or updating a partitioned table, that value takes precedence
     * over the default partition expiration time indicated by this property.
     * 
     */
    @Import(name="defaultPartitionExpirationMs")
    private @Nullable Output<Integer> defaultPartitionExpirationMs;

    /**
     * @return The default partition expiration for all partitioned tables in
     * the dataset, in milliseconds.
     * 
     * Once this property is set, all newly-created partitioned tables in
     * the dataset will have an `expirationMs` property in the `timePartitioning`
     * settings set to this value, and changing the value will only
     * affect new tables, not existing ones. The storage in a partition will
     * have an expiration time of its partition time plus this value.
     * Setting this property overrides the use of `defaultTableExpirationMs`
     * for partitioned tables: only one of `defaultTableExpirationMs` and
     * `defaultPartitionExpirationMs` will be used for any new partitioned
     * table. If you provide an explicit `timePartitioning.expirationMs` when
     * creating or updating a partitioned table, that value takes precedence
     * over the default partition expiration time indicated by this property.
     * 
     */
    public Optional<Output<Integer>> defaultPartitionExpirationMs() {
        return Optional.ofNullable(this.defaultPartitionExpirationMs);
    }

    /**
     * The default lifetime of all tables in the dataset, in milliseconds.
     * The minimum value is 3600000 milliseconds (one hour).
     * 
     * Once this property is set, all newly-created tables in the dataset
     * will have an `expirationTime` property set to the creation time plus
     * the value in this property, and changing the value will only affect
     * new tables, not existing ones. When the `expirationTime` for a given
     * table is reached, that table will be deleted automatically.
     * If a table&#39;s `expirationTime` is modified or removed before the
     * table expires, or if you provide an explicit `expirationTime` when
     * creating a table, that value takes precedence over the default
     * expiration time indicated by this property.
     * 
     */
    @Import(name="defaultTableExpirationMs")
    private @Nullable Output<Integer> defaultTableExpirationMs;

    /**
     * @return The default lifetime of all tables in the dataset, in milliseconds.
     * The minimum value is 3600000 milliseconds (one hour).
     * 
     * Once this property is set, all newly-created tables in the dataset
     * will have an `expirationTime` property set to the creation time plus
     * the value in this property, and changing the value will only affect
     * new tables, not existing ones. When the `expirationTime` for a given
     * table is reached, that table will be deleted automatically.
     * If a table&#39;s `expirationTime` is modified or removed before the
     * table expires, or if you provide an explicit `expirationTime` when
     * creating a table, that value takes precedence over the default
     * expiration time indicated by this property.
     * 
     */
    public Optional<Output<Integer>> defaultTableExpirationMs() {
        return Optional.ofNullable(this.defaultTableExpirationMs);
    }

    /**
     * If set to `true`, delete all the tables in the
     * dataset when destroying the resource; otherwise,
     * destroying the resource will fail if tables are present.
     * 
     */
    @Import(name="deleteContentsOnDestroy")
    private @Nullable Output<Boolean> deleteContentsOnDestroy;

    /**
     * @return If set to `true`, delete all the tables in the
     * dataset when destroying the resource; otherwise,
     * destroying the resource will fail if tables are present.
     * 
     */
    public Optional<Output<Boolean>> deleteContentsOnDestroy() {
        return Optional.ofNullable(this.deleteContentsOnDestroy);
    }

    /**
     * A user-friendly description of the dataset
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A user-friendly description of the dataset
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
     * clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
     * clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * A hash of the resource.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return A hash of the resource.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * A descriptive name for the dataset
     * 
     */
    @Import(name="friendlyName")
    private @Nullable Output<String> friendlyName;

    /**
     * @return A descriptive name for the dataset
     * 
     */
    public Optional<Output<String>> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }

    /**
     * TRUE if the dataset and its table names are case-insensitive, otherwise FALSE.
     * By default, this is FALSE, which means the dataset and its table names are
     * case-sensitive. This field does not affect routine references.
     * 
     */
    @Import(name="isCaseInsensitive")
    private @Nullable Output<Boolean> isCaseInsensitive;

    /**
     * @return TRUE if the dataset and its table names are case-insensitive, otherwise FALSE.
     * By default, this is FALSE, which means the dataset and its table names are
     * case-sensitive. This field does not affect routine references.
     * 
     */
    public Optional<Output<Boolean>> isCaseInsensitive() {
        return Optional.ofNullable(this.isCaseInsensitive);
    }

    /**
     * The labels associated with this dataset. You can use these to
     * organize and group your datasets.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels associated with this dataset. You can use these to
     * organize and group your datasets.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The date when this dataset or any of its tables was last modified, in
     * milliseconds since the epoch.
     * 
     */
    @Import(name="lastModifiedTime")
    private @Nullable Output<Integer> lastModifiedTime;

    /**
     * @return The date when this dataset or any of its tables was last modified, in
     * milliseconds since the epoch.
     * 
     */
    public Optional<Output<Integer>> lastModifiedTime() {
        return Optional.ofNullable(this.lastModifiedTime);
    }

    /**
     * The geographic location where the dataset should reside.
     * See [official docs](https://cloud.google.com/bigquery/docs/dataset-locations).
     * 
     * There are two types of locations, regional or multi-regional. A regional
     * location is a specific geographic place, such as Tokyo, and a multi-regional
     * location is a large geographic area, such as the United States, that
     * contains at least two geographic places.
     * 
     * The default value is multi-regional location `US`.
     * Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geographic location where the dataset should reside.
     * See [official docs](https://cloud.google.com/bigquery/docs/dataset-locations).
     * 
     * There are two types of locations, regional or multi-regional. A regional
     * location is a specific geographic place, such as Tokyo, and a multi-regional
     * location is a large geographic area, such as the United States, that
     * contains at least two geographic places.
     * 
     * The default value is multi-regional location `US`.
     * Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days).
     * 
     */
    @Import(name="maxTimeTravelHours")
    private @Nullable Output<String> maxTimeTravelHours;

    /**
     * @return Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days).
     * 
     */
    public Optional<Output<String>> maxTimeTravelHours() {
        return Optional.ofNullable(this.maxTimeTravelHours);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Specifies the storage billing model for the dataset.
     * Set this flag value to LOGICAL to use logical bytes for storage billing,
     * or to PHYSICAL to use physical bytes instead.
     * LOGICAL is the default if this flag isn&#39;t specified.
     * 
     */
    @Import(name="storageBillingModel")
    private @Nullable Output<String> storageBillingModel;

    /**
     * @return Specifies the storage billing model for the dataset.
     * Set this flag value to LOGICAL to use logical bytes for storage billing,
     * or to PHYSICAL to use physical bytes instead.
     * LOGICAL is the default if this flag isn&#39;t specified.
     * 
     */
    public Optional<Output<String>> storageBillingModel() {
        return Optional.ofNullable(this.storageBillingModel);
    }

    private DatasetState() {}

    private DatasetState(DatasetState $) {
        this.accesses = $.accesses;
        this.creationTime = $.creationTime;
        this.datasetId = $.datasetId;
        this.defaultCollation = $.defaultCollation;
        this.defaultEncryptionConfiguration = $.defaultEncryptionConfiguration;
        this.defaultPartitionExpirationMs = $.defaultPartitionExpirationMs;
        this.defaultTableExpirationMs = $.defaultTableExpirationMs;
        this.deleteContentsOnDestroy = $.deleteContentsOnDestroy;
        this.description = $.description;
        this.effectiveLabels = $.effectiveLabels;
        this.etag = $.etag;
        this.friendlyName = $.friendlyName;
        this.isCaseInsensitive = $.isCaseInsensitive;
        this.labels = $.labels;
        this.lastModifiedTime = $.lastModifiedTime;
        this.location = $.location;
        this.maxTimeTravelHours = $.maxTimeTravelHours;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.selfLink = $.selfLink;
        this.storageBillingModel = $.storageBillingModel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetState $;

        public Builder() {
            $ = new DatasetState();
        }

        public Builder(DatasetState defaults) {
            $ = new DatasetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accesses An array of objects that define dataset access for one or more entities.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder accesses(@Nullable Output<List<DatasetAccessArgs>> accesses) {
            $.accesses = accesses;
            return this;
        }

        /**
         * @param accesses An array of objects that define dataset access for one or more entities.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder accesses(List<DatasetAccessArgs> accesses) {
            return accesses(Output.of(accesses));
        }

        /**
         * @param accesses An array of objects that define dataset access for one or more entities.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder accesses(DatasetAccessArgs... accesses) {
            return accesses(List.of(accesses));
        }

        /**
         * @param creationTime The time when this dataset was created, in milliseconds since the
         * epoch.
         * 
         * @return builder
         * 
         */
        public Builder creationTime(@Nullable Output<Integer> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        /**
         * @param creationTime The time when this dataset was created, in milliseconds since the
         * epoch.
         * 
         * @return builder
         * 
         */
        public Builder creationTime(Integer creationTime) {
            return creationTime(Output.of(creationTime));
        }

        /**
         * @param datasetId A unique ID for this dataset, without the project name. The ID
         * must contain only letters (a-z, A-Z), numbers (0-9), or
         * underscores (_). The maximum length is 1,024 characters.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder datasetId(@Nullable Output<String> datasetId) {
            $.datasetId = datasetId;
            return this;
        }

        /**
         * @param datasetId A unique ID for this dataset, without the project name. The ID
         * must contain only letters (a-z, A-Z), numbers (0-9), or
         * underscores (_). The maximum length is 1,024 characters.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder datasetId(String datasetId) {
            return datasetId(Output.of(datasetId));
        }

        /**
         * @param defaultCollation Defines the default collation specification of future tables created
         * in the dataset. If a table is created in this dataset without table-level
         * default collation, then the table inherits the dataset default collation,
         * which is applied to the string fields that do not have explicit collation
         * specified. A change to this field affects only tables created afterwards,
         * and does not alter the existing tables.
         * The following values are supported:
         * - &#39;und:ci&#39;: undetermined locale, case insensitive.
         * - &#39;&#39;: empty string. Default to case-sensitive behavior.
         * 
         * @return builder
         * 
         */
        public Builder defaultCollation(@Nullable Output<String> defaultCollation) {
            $.defaultCollation = defaultCollation;
            return this;
        }

        /**
         * @param defaultCollation Defines the default collation specification of future tables created
         * in the dataset. If a table is created in this dataset without table-level
         * default collation, then the table inherits the dataset default collation,
         * which is applied to the string fields that do not have explicit collation
         * specified. A change to this field affects only tables created afterwards,
         * and does not alter the existing tables.
         * The following values are supported:
         * - &#39;und:ci&#39;: undetermined locale, case insensitive.
         * - &#39;&#39;: empty string. Default to case-sensitive behavior.
         * 
         * @return builder
         * 
         */
        public Builder defaultCollation(String defaultCollation) {
            return defaultCollation(Output.of(defaultCollation));
        }

        /**
         * @param defaultEncryptionConfiguration The default encryption key for all tables in the dataset. Once this property is set,
         * all newly-created partitioned tables in the dataset will have encryption key set to
         * this value, unless table creation request (or query) overrides the key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder defaultEncryptionConfiguration(@Nullable Output<DatasetDefaultEncryptionConfigurationArgs> defaultEncryptionConfiguration) {
            $.defaultEncryptionConfiguration = defaultEncryptionConfiguration;
            return this;
        }

        /**
         * @param defaultEncryptionConfiguration The default encryption key for all tables in the dataset. Once this property is set,
         * all newly-created partitioned tables in the dataset will have encryption key set to
         * this value, unless table creation request (or query) overrides the key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder defaultEncryptionConfiguration(DatasetDefaultEncryptionConfigurationArgs defaultEncryptionConfiguration) {
            return defaultEncryptionConfiguration(Output.of(defaultEncryptionConfiguration));
        }

        /**
         * @param defaultPartitionExpirationMs The default partition expiration for all partitioned tables in
         * the dataset, in milliseconds.
         * 
         * Once this property is set, all newly-created partitioned tables in
         * the dataset will have an `expirationMs` property in the `timePartitioning`
         * settings set to this value, and changing the value will only
         * affect new tables, not existing ones. The storage in a partition will
         * have an expiration time of its partition time plus this value.
         * Setting this property overrides the use of `defaultTableExpirationMs`
         * for partitioned tables: only one of `defaultTableExpirationMs` and
         * `defaultPartitionExpirationMs` will be used for any new partitioned
         * table. If you provide an explicit `timePartitioning.expirationMs` when
         * creating or updating a partitioned table, that value takes precedence
         * over the default partition expiration time indicated by this property.
         * 
         * @return builder
         * 
         */
        public Builder defaultPartitionExpirationMs(@Nullable Output<Integer> defaultPartitionExpirationMs) {
            $.defaultPartitionExpirationMs = defaultPartitionExpirationMs;
            return this;
        }

        /**
         * @param defaultPartitionExpirationMs The default partition expiration for all partitioned tables in
         * the dataset, in milliseconds.
         * 
         * Once this property is set, all newly-created partitioned tables in
         * the dataset will have an `expirationMs` property in the `timePartitioning`
         * settings set to this value, and changing the value will only
         * affect new tables, not existing ones. The storage in a partition will
         * have an expiration time of its partition time plus this value.
         * Setting this property overrides the use of `defaultTableExpirationMs`
         * for partitioned tables: only one of `defaultTableExpirationMs` and
         * `defaultPartitionExpirationMs` will be used for any new partitioned
         * table. If you provide an explicit `timePartitioning.expirationMs` when
         * creating or updating a partitioned table, that value takes precedence
         * over the default partition expiration time indicated by this property.
         * 
         * @return builder
         * 
         */
        public Builder defaultPartitionExpirationMs(Integer defaultPartitionExpirationMs) {
            return defaultPartitionExpirationMs(Output.of(defaultPartitionExpirationMs));
        }

        /**
         * @param defaultTableExpirationMs The default lifetime of all tables in the dataset, in milliseconds.
         * The minimum value is 3600000 milliseconds (one hour).
         * 
         * Once this property is set, all newly-created tables in the dataset
         * will have an `expirationTime` property set to the creation time plus
         * the value in this property, and changing the value will only affect
         * new tables, not existing ones. When the `expirationTime` for a given
         * table is reached, that table will be deleted automatically.
         * If a table&#39;s `expirationTime` is modified or removed before the
         * table expires, or if you provide an explicit `expirationTime` when
         * creating a table, that value takes precedence over the default
         * expiration time indicated by this property.
         * 
         * @return builder
         * 
         */
        public Builder defaultTableExpirationMs(@Nullable Output<Integer> defaultTableExpirationMs) {
            $.defaultTableExpirationMs = defaultTableExpirationMs;
            return this;
        }

        /**
         * @param defaultTableExpirationMs The default lifetime of all tables in the dataset, in milliseconds.
         * The minimum value is 3600000 milliseconds (one hour).
         * 
         * Once this property is set, all newly-created tables in the dataset
         * will have an `expirationTime` property set to the creation time plus
         * the value in this property, and changing the value will only affect
         * new tables, not existing ones. When the `expirationTime` for a given
         * table is reached, that table will be deleted automatically.
         * If a table&#39;s `expirationTime` is modified or removed before the
         * table expires, or if you provide an explicit `expirationTime` when
         * creating a table, that value takes precedence over the default
         * expiration time indicated by this property.
         * 
         * @return builder
         * 
         */
        public Builder defaultTableExpirationMs(Integer defaultTableExpirationMs) {
            return defaultTableExpirationMs(Output.of(defaultTableExpirationMs));
        }

        /**
         * @param deleteContentsOnDestroy If set to `true`, delete all the tables in the
         * dataset when destroying the resource; otherwise,
         * destroying the resource will fail if tables are present.
         * 
         * @return builder
         * 
         */
        public Builder deleteContentsOnDestroy(@Nullable Output<Boolean> deleteContentsOnDestroy) {
            $.deleteContentsOnDestroy = deleteContentsOnDestroy;
            return this;
        }

        /**
         * @param deleteContentsOnDestroy If set to `true`, delete all the tables in the
         * dataset when destroying the resource; otherwise,
         * destroying the resource will fail if tables are present.
         * 
         * @return builder
         * 
         */
        public Builder deleteContentsOnDestroy(Boolean deleteContentsOnDestroy) {
            return deleteContentsOnDestroy(Output.of(deleteContentsOnDestroy));
        }

        /**
         * @param description A user-friendly description of the dataset
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A user-friendly description of the dataset
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
         * clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
         * clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param etag A hash of the resource.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag A hash of the resource.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param friendlyName A descriptive name for the dataset
         * 
         * @return builder
         * 
         */
        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            $.friendlyName = friendlyName;
            return this;
        }

        /**
         * @param friendlyName A descriptive name for the dataset
         * 
         * @return builder
         * 
         */
        public Builder friendlyName(String friendlyName) {
            return friendlyName(Output.of(friendlyName));
        }

        /**
         * @param isCaseInsensitive TRUE if the dataset and its table names are case-insensitive, otherwise FALSE.
         * By default, this is FALSE, which means the dataset and its table names are
         * case-sensitive. This field does not affect routine references.
         * 
         * @return builder
         * 
         */
        public Builder isCaseInsensitive(@Nullable Output<Boolean> isCaseInsensitive) {
            $.isCaseInsensitive = isCaseInsensitive;
            return this;
        }

        /**
         * @param isCaseInsensitive TRUE if the dataset and its table names are case-insensitive, otherwise FALSE.
         * By default, this is FALSE, which means the dataset and its table names are
         * case-sensitive. This field does not affect routine references.
         * 
         * @return builder
         * 
         */
        public Builder isCaseInsensitive(Boolean isCaseInsensitive) {
            return isCaseInsensitive(Output.of(isCaseInsensitive));
        }

        /**
         * @param labels The labels associated with this dataset. You can use these to
         * organize and group your datasets.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels associated with this dataset. You can use these to
         * organize and group your datasets.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param lastModifiedTime The date when this dataset or any of its tables was last modified, in
         * milliseconds since the epoch.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedTime(@Nullable Output<Integer> lastModifiedTime) {
            $.lastModifiedTime = lastModifiedTime;
            return this;
        }

        /**
         * @param lastModifiedTime The date when this dataset or any of its tables was last modified, in
         * milliseconds since the epoch.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedTime(Integer lastModifiedTime) {
            return lastModifiedTime(Output.of(lastModifiedTime));
        }

        /**
         * @param location The geographic location where the dataset should reside.
         * See [official docs](https://cloud.google.com/bigquery/docs/dataset-locations).
         * 
         * There are two types of locations, regional or multi-regional. A regional
         * location is a specific geographic place, such as Tokyo, and a multi-regional
         * location is a large geographic area, such as the United States, that
         * contains at least two geographic places.
         * 
         * The default value is multi-regional location `US`.
         * Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the dataset should reside.
         * See [official docs](https://cloud.google.com/bigquery/docs/dataset-locations).
         * 
         * There are two types of locations, regional or multi-regional. A regional
         * location is a specific geographic place, such as Tokyo, and a multi-regional
         * location is a large geographic area, such as the United States, that
         * contains at least two geographic places.
         * 
         * The default value is multi-regional location `US`.
         * Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maxTimeTravelHours Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days).
         * 
         * @return builder
         * 
         */
        public Builder maxTimeTravelHours(@Nullable Output<String> maxTimeTravelHours) {
            $.maxTimeTravelHours = maxTimeTravelHours;
            return this;
        }

        /**
         * @param maxTimeTravelHours Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days).
         * 
         * @return builder
         * 
         */
        public Builder maxTimeTravelHours(String maxTimeTravelHours) {
            return maxTimeTravelHours(Output.of(maxTimeTravelHours));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        /**
         * @param storageBillingModel Specifies the storage billing model for the dataset.
         * Set this flag value to LOGICAL to use logical bytes for storage billing,
         * or to PHYSICAL to use physical bytes instead.
         * LOGICAL is the default if this flag isn&#39;t specified.
         * 
         * @return builder
         * 
         */
        public Builder storageBillingModel(@Nullable Output<String> storageBillingModel) {
            $.storageBillingModel = storageBillingModel;
            return this;
        }

        /**
         * @param storageBillingModel Specifies the storage billing model for the dataset.
         * Set this flag value to LOGICAL to use logical bytes for storage billing,
         * or to PHYSICAL to use physical bytes instead.
         * LOGICAL is the default if this flag isn&#39;t specified.
         * 
         * @return builder
         * 
         */
        public Builder storageBillingModel(String storageBillingModel) {
            return storageBillingModel(Output.of(storageBillingModel));
        }

        public DatasetState build() {
            return $;
        }
    }

}
