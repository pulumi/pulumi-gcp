// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.RegionUrlMapDefaultRouteActionRequestMirrorPolicy;
import com.pulumi.gcp.compute.outputs.RegionUrlMapDefaultRouteActionRetryPolicy;
import com.pulumi.gcp.compute.outputs.RegionUrlMapDefaultRouteActionWeightedBackendService;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionUrlMapDefaultRouteAction {
    /**
     * @return Specifies the policy on how requests intended for the route&#39;s backends are shadowed to a separate mirrored backend service.
     * The load balancer does not wait for responses from the shadow service. Before sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
     * Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
     * Structure is documented below.
     * 
     */
    private @Nullable RegionUrlMapDefaultRouteActionRequestMirrorPolicy requestMirrorPolicy;
    /**
     * @return Specifies the retry policy associated with this route.
     * Structure is documented below.
     * 
     */
    private @Nullable RegionUrlMapDefaultRouteActionRetryPolicy retryPolicy;
    /**
     * @return A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number.
     * After a backend service is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
     * Structure is documented below.
     * 
     */
    private @Nullable List<RegionUrlMapDefaultRouteActionWeightedBackendService> weightedBackendServices;

    private RegionUrlMapDefaultRouteAction() {}
    /**
     * @return Specifies the policy on how requests intended for the route&#39;s backends are shadowed to a separate mirrored backend service.
     * The load balancer does not wait for responses from the shadow service. Before sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
     * Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
     * Structure is documented below.
     * 
     */
    public Optional<RegionUrlMapDefaultRouteActionRequestMirrorPolicy> requestMirrorPolicy() {
        return Optional.ofNullable(this.requestMirrorPolicy);
    }
    /**
     * @return Specifies the retry policy associated with this route.
     * Structure is documented below.
     * 
     */
    public Optional<RegionUrlMapDefaultRouteActionRetryPolicy> retryPolicy() {
        return Optional.ofNullable(this.retryPolicy);
    }
    /**
     * @return A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number.
     * After a backend service is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
     * Structure is documented below.
     * 
     */
    public List<RegionUrlMapDefaultRouteActionWeightedBackendService> weightedBackendServices() {
        return this.weightedBackendServices == null ? List.of() : this.weightedBackendServices;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionUrlMapDefaultRouteAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable RegionUrlMapDefaultRouteActionRequestMirrorPolicy requestMirrorPolicy;
        private @Nullable RegionUrlMapDefaultRouteActionRetryPolicy retryPolicy;
        private @Nullable List<RegionUrlMapDefaultRouteActionWeightedBackendService> weightedBackendServices;
        public Builder() {}
        public Builder(RegionUrlMapDefaultRouteAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.requestMirrorPolicy = defaults.requestMirrorPolicy;
    	      this.retryPolicy = defaults.retryPolicy;
    	      this.weightedBackendServices = defaults.weightedBackendServices;
        }

        @CustomType.Setter
        public Builder requestMirrorPolicy(@Nullable RegionUrlMapDefaultRouteActionRequestMirrorPolicy requestMirrorPolicy) {
            this.requestMirrorPolicy = requestMirrorPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder retryPolicy(@Nullable RegionUrlMapDefaultRouteActionRetryPolicy retryPolicy) {
            this.retryPolicy = retryPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder weightedBackendServices(@Nullable List<RegionUrlMapDefaultRouteActionWeightedBackendService> weightedBackendServices) {
            this.weightedBackendServices = weightedBackendServices;
            return this;
        }
        public Builder weightedBackendServices(RegionUrlMapDefaultRouteActionWeightedBackendService... weightedBackendServices) {
            return weightedBackendServices(List.of(weightedBackendServices));
        }
        public RegionUrlMapDefaultRouteAction build() {
            final var o = new RegionUrlMapDefaultRouteAction();
            o.requestMirrorPolicy = requestMirrorPolicy;
            o.retryPolicy = retryPolicy;
            o.weightedBackendServices = weightedBackendServices;
            return o;
        }
    }
}
