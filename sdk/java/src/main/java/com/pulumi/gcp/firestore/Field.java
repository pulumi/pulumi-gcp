// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firestore;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.firestore.FieldArgs;
import com.pulumi.gcp.firestore.inputs.FieldState;
import com.pulumi.gcp.firestore.outputs.FieldIndexConfig;
import com.pulumi.gcp.firestore.outputs.FieldTtlConfig;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Represents a single field in the database.
 * Fields are grouped by their &#34;Collection Group&#34;, which represent all collections
 * in the database with the same id.
 * 
 * To get more information about Field, see:
 * 
 * * [API documentation](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.collectionGroups.fields)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/firestore/docs/query-data/indexing)
 * 
 * &gt; **Warning:** This resource creates a Firestore Single Field override on a project that
 *  already has a Firestore database. If you haven&#39;t already created it, you may
 * create a `gcp.firestore.Database` resource with `locationId` set to your
 * chosen location.
 * 
 * ## Example Usage
 * 
 * ### Firestore Field Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firestore.Database;
 * import com.pulumi.gcp.firestore.DatabaseArgs;
 * import com.pulumi.gcp.firestore.Field;
 * import com.pulumi.gcp.firestore.FieldArgs;
 * import com.pulumi.gcp.firestore.inputs.FieldIndexConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var database = new Database("database", DatabaseArgs.builder()
 *             .project("my-project-name")
 *             .name("database-id")
 *             .locationId("nam5")
 *             .type("FIRESTORE_NATIVE")
 *             .deleteProtectionState("DELETE_PROTECTION_ENABLED")
 *             .deletionPolicy("DELETE")
 *             .build());
 * 
 *         var basic = new Field("basic", FieldArgs.builder()
 *             .project("my-project-name")
 *             .database(database.name())
 *             .collection("chatrooms__91980")
 *             .field("basic")
 *             .indexConfig(FieldIndexConfigArgs.builder()
 *                 .indexes(                
 *                     FieldIndexConfigIndexArgs.builder()
 *                         .order("ASCENDING")
 *                         .queryScope("COLLECTION_GROUP")
 *                         .build(),
 *                     FieldIndexConfigIndexArgs.builder()
 *                         .arrayConfig("CONTAINS")
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Firestore Field Timestamp
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firestore.Database;
 * import com.pulumi.gcp.firestore.DatabaseArgs;
 * import com.pulumi.gcp.firestore.Field;
 * import com.pulumi.gcp.firestore.FieldArgs;
 * import com.pulumi.gcp.firestore.inputs.FieldTtlConfigArgs;
 * import com.pulumi.gcp.firestore.inputs.FieldIndexConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var database = new Database("database", DatabaseArgs.builder()
 *             .project("my-project-name")
 *             .name("database-id")
 *             .locationId("nam5")
 *             .type("FIRESTORE_NATIVE")
 *             .deleteProtectionState("DELETE_PROTECTION_ENABLED")
 *             .deletionPolicy("DELETE")
 *             .build());
 * 
 *         var timestamp = new Field("timestamp", FieldArgs.builder()
 *             .project("my-project-name")
 *             .database(database.name())
 *             .collection("chatrooms")
 *             .field("timestamp")
 *             .ttlConfig(FieldTtlConfigArgs.builder()
 *                 .build())
 *             .indexConfig(FieldIndexConfigArgs.builder()
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Firestore Field Match Override
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firestore.Database;
 * import com.pulumi.gcp.firestore.DatabaseArgs;
 * import com.pulumi.gcp.firestore.Field;
 * import com.pulumi.gcp.firestore.FieldArgs;
 * import com.pulumi.gcp.firestore.inputs.FieldIndexConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var database = new Database("database", DatabaseArgs.builder()
 *             .project("my-project-name")
 *             .name("database-id")
 *             .locationId("nam5")
 *             .type("FIRESTORE_NATIVE")
 *             .deleteProtectionState("DELETE_PROTECTION_ENABLED")
 *             .deletionPolicy("DELETE")
 *             .build());
 * 
 *         var matchOverride = new Field("matchOverride", FieldArgs.builder()
 *             .project("my-project-name")
 *             .database(database.name())
 *             .collection("chatrooms__37118")
 *             .field("field_with_same_configuration_as_ancestor")
 *             .indexConfig(FieldIndexConfigArgs.builder()
 *                 .indexes(                
 *                     FieldIndexConfigIndexArgs.builder()
 *                         .order("ASCENDING")
 *                         .build(),
 *                     FieldIndexConfigIndexArgs.builder()
 *                         .order("DESCENDING")
 *                         .build(),
 *                     FieldIndexConfigIndexArgs.builder()
 *                         .arrayConfig("CONTAINS")
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Firestore Field Wildcard
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firestore.Database;
 * import com.pulumi.gcp.firestore.DatabaseArgs;
 * import com.pulumi.gcp.firestore.Field;
 * import com.pulumi.gcp.firestore.FieldArgs;
 * import com.pulumi.gcp.firestore.inputs.FieldIndexConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var database = new Database("database", DatabaseArgs.builder()
 *             .project("my-project-name")
 *             .name("database-id")
 *             .locationId("nam5")
 *             .type("FIRESTORE_NATIVE")
 *             .deleteProtectionState("DELETE_PROTECTION_ENABLED")
 *             .deletionPolicy("DELETE")
 *             .build());
 * 
 *         var wildcard = new Field("wildcard", FieldArgs.builder()
 *             .project("my-project-name")
 *             .database(database.name())
 *             .collection("chatrooms__80332")
 *             .field("*")
 *             .indexConfig(FieldIndexConfigArgs.builder()
 *                 .indexes(                
 *                     FieldIndexConfigIndexArgs.builder()
 *                         .order("ASCENDING")
 *                         .queryScope("COLLECTION_GROUP")
 *                         .build(),
 *                     FieldIndexConfigIndexArgs.builder()
 *                         .arrayConfig("CONTAINS")
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Field can be imported using any of these accepted formats:
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, Field can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:firestore/field:Field default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:firestore/field:Field")
public class Field extends com.pulumi.resources.CustomResource {
    /**
     * The id of the collection group to configure.
     * 
     */
    @Export(name="collection", refs={String.class}, tree="[0]")
    private Output<String> collection;

    /**
     * @return The id of the collection group to configure.
     * 
     */
    public Output<String> collection() {
        return this.collection;
    }
    /**
     * The Firestore database id. Defaults to `&#34;(default)&#34;`.
     * 
     */
    @Export(name="database", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> database;

    /**
     * @return The Firestore database id. Defaults to `&#34;(default)&#34;`.
     * 
     */
    public Output<Optional<String>> database() {
        return Codegen.optional(this.database);
    }
    /**
     * The id of the field to configure.
     * 
     */
    @Export(name="field", refs={String.class}, tree="[0]")
    private Output<String> field;

    /**
     * @return The id of the field to configure.
     * 
     */
    public Output<String> field() {
        return this.field;
    }
    /**
     * The single field index configuration for this field.
     * Creating an index configuration for this field will override any inherited configuration with the
     * indexes specified. Configuring the index configuration with an empty block disables all indexes on
     * the field.
     * Structure is documented below.
     * 
     */
    @Export(name="indexConfig", refs={FieldIndexConfig.class}, tree="[0]")
    private Output</* @Nullable */ FieldIndexConfig> indexConfig;

    /**
     * @return The single field index configuration for this field.
     * Creating an index configuration for this field will override any inherited configuration with the
     * indexes specified. Configuring the index configuration with an empty block disables all indexes on
     * the field.
     * Structure is documented below.
     * 
     */
    public Output<Optional<FieldIndexConfig>> indexConfig() {
        return Codegen.optional(this.indexConfig);
    }
    /**
     * The name of this field. Format:
     * `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}`
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of this field. Format:
     * `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}`
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The TTL configuration for this Field. If set to an empty block (i.e. `ttlConfig {}`), a TTL policy is configured based on the field. If unset, a TTL policy is not configured (or will be disabled upon updating the resource).
     * Structure is documented below.
     * 
     */
    @Export(name="ttlConfig", refs={FieldTtlConfig.class}, tree="[0]")
    private Output</* @Nullable */ FieldTtlConfig> ttlConfig;

    /**
     * @return The TTL configuration for this Field. If set to an empty block (i.e. `ttlConfig {}`), a TTL policy is configured based on the field. If unset, a TTL policy is not configured (or will be disabled upon updating the resource).
     * Structure is documented below.
     * 
     */
    public Output<Optional<FieldTtlConfig>> ttlConfig() {
        return Codegen.optional(this.ttlConfig);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Field(java.lang.String name) {
        this(name, FieldArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Field(java.lang.String name, FieldArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Field(java.lang.String name, FieldArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firestore/field:Field", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Field(java.lang.String name, Output<java.lang.String> id, @Nullable FieldState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firestore/field:Field", name, state, makeResourceOptions(options, id), false);
    }

    private static FieldArgs makeArgs(FieldArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? FieldArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Field get(java.lang.String name, Output<java.lang.String> id, @Nullable FieldState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Field(name, id, state, options);
    }
}
