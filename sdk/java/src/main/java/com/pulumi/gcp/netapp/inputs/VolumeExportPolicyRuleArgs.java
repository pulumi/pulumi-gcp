// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeExportPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeExportPolicyRuleArgs Empty = new VolumeExportPolicyRuleArgs();

    /**
     * Defines the access type for clients matching the `allowedClients` specification.
     * Possible values are: `READ_ONLY`, `READ_WRITE`, `READ_NONE`.
     * 
     */
    @Import(name="accessType")
    private @Nullable Output<String> accessType;

    /**
     * @return Defines the access type for clients matching the `allowedClients` specification.
     * Possible values are: `READ_ONLY`, `READ_WRITE`, `READ_NONE`.
     * 
     */
    public Optional<Output<String>> accessType() {
        return Optional.ofNullable(this.accessType);
    }

    /**
     * Defines the client ingress specification (allowed clients) as a comma separated list with IPv4 CIDRs or IPv4 host addresses.
     * 
     */
    @Import(name="allowedClients")
    private @Nullable Output<String> allowedClients;

    /**
     * @return Defines the client ingress specification (allowed clients) as a comma separated list with IPv4 CIDRs or IPv4 host addresses.
     * 
     */
    public Optional<Output<String>> allowedClients() {
        return Optional.ofNullable(this.allowedClients);
    }

    /**
     * If enabled, the root user (UID = 0) of the specified clients doesn&#39;t get mapped to nobody (UID = 65534). This is also known as no_root_squash.
     * 
     */
    @Import(name="hasRootAccess")
    private @Nullable Output<String> hasRootAccess;

    /**
     * @return If enabled, the root user (UID = 0) of the specified clients doesn&#39;t get mapped to nobody (UID = 65534). This is also known as no_root_squash.
     * 
     */
    public Optional<Output<String>> hasRootAccess() {
        return Optional.ofNullable(this.hasRootAccess);
    }

    /**
     * If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;authentication&#39; kerberos security mode.
     * 
     */
    @Import(name="kerberos5ReadOnly")
    private @Nullable Output<Boolean> kerberos5ReadOnly;

    /**
     * @return If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;authentication&#39; kerberos security mode.
     * 
     */
    public Optional<Output<Boolean>> kerberos5ReadOnly() {
        return Optional.ofNullable(this.kerberos5ReadOnly);
    }

    /**
     * If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;authentication&#39; kerberos security mode. The &#39;kerberos5ReadOnly&#39; value is ignored if this is enabled.
     * 
     */
    @Import(name="kerberos5ReadWrite")
    private @Nullable Output<Boolean> kerberos5ReadWrite;

    /**
     * @return If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;authentication&#39; kerberos security mode. The &#39;kerberos5ReadOnly&#39; value is ignored if this is enabled.
     * 
     */
    public Optional<Output<Boolean>> kerberos5ReadWrite() {
        return Optional.ofNullable(this.kerberos5ReadWrite);
    }

    /**
     * If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;integrity&#39; kerberos security mode.
     * 
     */
    @Import(name="kerberos5iReadOnly")
    private @Nullable Output<Boolean> kerberos5iReadOnly;

    /**
     * @return If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;integrity&#39; kerberos security mode.
     * 
     */
    public Optional<Output<Boolean>> kerberos5iReadOnly() {
        return Optional.ofNullable(this.kerberos5iReadOnly);
    }

    /**
     * If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;integrity&#39; kerberos security mode. The &#39;kerberos5iReadOnly&#39; value is ignored if this is enabled.
     * 
     */
    @Import(name="kerberos5iReadWrite")
    private @Nullable Output<Boolean> kerberos5iReadWrite;

    /**
     * @return If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;integrity&#39; kerberos security mode. The &#39;kerberos5iReadOnly&#39; value is ignored if this is enabled.
     * 
     */
    public Optional<Output<Boolean>> kerberos5iReadWrite() {
        return Optional.ofNullable(this.kerberos5iReadWrite);
    }

    /**
     * If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;privacy&#39; kerberos security mode.
     * 
     */
    @Import(name="kerberos5pReadOnly")
    private @Nullable Output<Boolean> kerberos5pReadOnly;

    /**
     * @return If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;privacy&#39; kerberos security mode.
     * 
     */
    public Optional<Output<Boolean>> kerberos5pReadOnly() {
        return Optional.ofNullable(this.kerberos5pReadOnly);
    }

    /**
     * If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;privacy&#39; kerberos security mode. The &#39;kerberos5pReadOnly&#39; value is ignored if this is enabled.
     * 
     */
    @Import(name="kerberos5pReadWrite")
    private @Nullable Output<Boolean> kerberos5pReadWrite;

    /**
     * @return If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;privacy&#39; kerberos security mode. The &#39;kerberos5pReadOnly&#39; value is ignored if this is enabled.
     * 
     */
    public Optional<Output<Boolean>> kerberos5pReadWrite() {
        return Optional.ofNullable(this.kerberos5pReadWrite);
    }

    /**
     * Enable to apply the export rule to NFSV3 clients.
     * 
     */
    @Import(name="nfsv3")
    private @Nullable Output<Boolean> nfsv3;

    /**
     * @return Enable to apply the export rule to NFSV3 clients.
     * 
     */
    public Optional<Output<Boolean>> nfsv3() {
        return Optional.ofNullable(this.nfsv3);
    }

    /**
     * Enable to apply the export rule to NFSV4.1 clients.
     * 
     */
    @Import(name="nfsv4")
    private @Nullable Output<Boolean> nfsv4;

    /**
     * @return Enable to apply the export rule to NFSV4.1 clients.
     * 
     */
    public Optional<Output<Boolean>> nfsv4() {
        return Optional.ofNullable(this.nfsv4);
    }

    private VolumeExportPolicyRuleArgs() {}

    private VolumeExportPolicyRuleArgs(VolumeExportPolicyRuleArgs $) {
        this.accessType = $.accessType;
        this.allowedClients = $.allowedClients;
        this.hasRootAccess = $.hasRootAccess;
        this.kerberos5ReadOnly = $.kerberos5ReadOnly;
        this.kerberos5ReadWrite = $.kerberos5ReadWrite;
        this.kerberos5iReadOnly = $.kerberos5iReadOnly;
        this.kerberos5iReadWrite = $.kerberos5iReadWrite;
        this.kerberos5pReadOnly = $.kerberos5pReadOnly;
        this.kerberos5pReadWrite = $.kerberos5pReadWrite;
        this.nfsv3 = $.nfsv3;
        this.nfsv4 = $.nfsv4;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeExportPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeExportPolicyRuleArgs $;

        public Builder() {
            $ = new VolumeExportPolicyRuleArgs();
        }

        public Builder(VolumeExportPolicyRuleArgs defaults) {
            $ = new VolumeExportPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessType Defines the access type for clients matching the `allowedClients` specification.
         * Possible values are: `READ_ONLY`, `READ_WRITE`, `READ_NONE`.
         * 
         * @return builder
         * 
         */
        public Builder accessType(@Nullable Output<String> accessType) {
            $.accessType = accessType;
            return this;
        }

        /**
         * @param accessType Defines the access type for clients matching the `allowedClients` specification.
         * Possible values are: `READ_ONLY`, `READ_WRITE`, `READ_NONE`.
         * 
         * @return builder
         * 
         */
        public Builder accessType(String accessType) {
            return accessType(Output.of(accessType));
        }

        /**
         * @param allowedClients Defines the client ingress specification (allowed clients) as a comma separated list with IPv4 CIDRs or IPv4 host addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedClients(@Nullable Output<String> allowedClients) {
            $.allowedClients = allowedClients;
            return this;
        }

        /**
         * @param allowedClients Defines the client ingress specification (allowed clients) as a comma separated list with IPv4 CIDRs or IPv4 host addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedClients(String allowedClients) {
            return allowedClients(Output.of(allowedClients));
        }

        /**
         * @param hasRootAccess If enabled, the root user (UID = 0) of the specified clients doesn&#39;t get mapped to nobody (UID = 65534). This is also known as no_root_squash.
         * 
         * @return builder
         * 
         */
        public Builder hasRootAccess(@Nullable Output<String> hasRootAccess) {
            $.hasRootAccess = hasRootAccess;
            return this;
        }

        /**
         * @param hasRootAccess If enabled, the root user (UID = 0) of the specified clients doesn&#39;t get mapped to nobody (UID = 65534). This is also known as no_root_squash.
         * 
         * @return builder
         * 
         */
        public Builder hasRootAccess(String hasRootAccess) {
            return hasRootAccess(Output.of(hasRootAccess));
        }

        /**
         * @param kerberos5ReadOnly If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;authentication&#39; kerberos security mode.
         * 
         * @return builder
         * 
         */
        public Builder kerberos5ReadOnly(@Nullable Output<Boolean> kerberos5ReadOnly) {
            $.kerberos5ReadOnly = kerberos5ReadOnly;
            return this;
        }

        /**
         * @param kerberos5ReadOnly If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;authentication&#39; kerberos security mode.
         * 
         * @return builder
         * 
         */
        public Builder kerberos5ReadOnly(Boolean kerberos5ReadOnly) {
            return kerberos5ReadOnly(Output.of(kerberos5ReadOnly));
        }

        /**
         * @param kerberos5ReadWrite If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;authentication&#39; kerberos security mode. The &#39;kerberos5ReadOnly&#39; value is ignored if this is enabled.
         * 
         * @return builder
         * 
         */
        public Builder kerberos5ReadWrite(@Nullable Output<Boolean> kerberos5ReadWrite) {
            $.kerberos5ReadWrite = kerberos5ReadWrite;
            return this;
        }

        /**
         * @param kerberos5ReadWrite If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;authentication&#39; kerberos security mode. The &#39;kerberos5ReadOnly&#39; value is ignored if this is enabled.
         * 
         * @return builder
         * 
         */
        public Builder kerberos5ReadWrite(Boolean kerberos5ReadWrite) {
            return kerberos5ReadWrite(Output.of(kerberos5ReadWrite));
        }

        /**
         * @param kerberos5iReadOnly If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;integrity&#39; kerberos security mode.
         * 
         * @return builder
         * 
         */
        public Builder kerberos5iReadOnly(@Nullable Output<Boolean> kerberos5iReadOnly) {
            $.kerberos5iReadOnly = kerberos5iReadOnly;
            return this;
        }

        /**
         * @param kerberos5iReadOnly If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;integrity&#39; kerberos security mode.
         * 
         * @return builder
         * 
         */
        public Builder kerberos5iReadOnly(Boolean kerberos5iReadOnly) {
            return kerberos5iReadOnly(Output.of(kerberos5iReadOnly));
        }

        /**
         * @param kerberos5iReadWrite If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;integrity&#39; kerberos security mode. The &#39;kerberos5iReadOnly&#39; value is ignored if this is enabled.
         * 
         * @return builder
         * 
         */
        public Builder kerberos5iReadWrite(@Nullable Output<Boolean> kerberos5iReadWrite) {
            $.kerberos5iReadWrite = kerberos5iReadWrite;
            return this;
        }

        /**
         * @param kerberos5iReadWrite If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;integrity&#39; kerberos security mode. The &#39;kerberos5iReadOnly&#39; value is ignored if this is enabled.
         * 
         * @return builder
         * 
         */
        public Builder kerberos5iReadWrite(Boolean kerberos5iReadWrite) {
            return kerberos5iReadWrite(Output.of(kerberos5iReadWrite));
        }

        /**
         * @param kerberos5pReadOnly If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;privacy&#39; kerberos security mode.
         * 
         * @return builder
         * 
         */
        public Builder kerberos5pReadOnly(@Nullable Output<Boolean> kerberos5pReadOnly) {
            $.kerberos5pReadOnly = kerberos5pReadOnly;
            return this;
        }

        /**
         * @param kerberos5pReadOnly If enabled (true) the rule defines a read only access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;privacy&#39; kerberos security mode.
         * 
         * @return builder
         * 
         */
        public Builder kerberos5pReadOnly(Boolean kerberos5pReadOnly) {
            return kerberos5pReadOnly(Output.of(kerberos5pReadOnly));
        }

        /**
         * @param kerberos5pReadWrite If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;privacy&#39; kerberos security mode. The &#39;kerberos5pReadOnly&#39; value is ignored if this is enabled.
         * 
         * @return builder
         * 
         */
        public Builder kerberos5pReadWrite(@Nullable Output<Boolean> kerberos5pReadWrite) {
            $.kerberos5pReadWrite = kerberos5pReadWrite;
            return this;
        }

        /**
         * @param kerberos5pReadWrite If enabled (true) the rule defines read and write access for clients matching the &#39;allowedClients&#39; specification. It enables nfs clients to mount using &#39;privacy&#39; kerberos security mode. The &#39;kerberos5pReadOnly&#39; value is ignored if this is enabled.
         * 
         * @return builder
         * 
         */
        public Builder kerberos5pReadWrite(Boolean kerberos5pReadWrite) {
            return kerberos5pReadWrite(Output.of(kerberos5pReadWrite));
        }

        /**
         * @param nfsv3 Enable to apply the export rule to NFSV3 clients.
         * 
         * @return builder
         * 
         */
        public Builder nfsv3(@Nullable Output<Boolean> nfsv3) {
            $.nfsv3 = nfsv3;
            return this;
        }

        /**
         * @param nfsv3 Enable to apply the export rule to NFSV3 clients.
         * 
         * @return builder
         * 
         */
        public Builder nfsv3(Boolean nfsv3) {
            return nfsv3(Output.of(nfsv3));
        }

        /**
         * @param nfsv4 Enable to apply the export rule to NFSV4.1 clients.
         * 
         * @return builder
         * 
         */
        public Builder nfsv4(@Nullable Output<Boolean> nfsv4) {
            $.nfsv4 = nfsv4;
            return this;
        }

        /**
         * @param nfsv4 Enable to apply the export rule to NFSV4.1 clients.
         * 
         * @return builder
         * 
         */
        public Builder nfsv4(Boolean nfsv4) {
            return nfsv4(Output.of(nfsv4));
        }

        public VolumeExportPolicyRuleArgs build() {
            return $;
        }
    }

}
