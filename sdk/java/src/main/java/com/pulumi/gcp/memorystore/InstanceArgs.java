// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.memorystore;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.memorystore.inputs.InstanceDesiredPscAutoConnectionArgs;
import com.pulumi.gcp.memorystore.inputs.InstancePersistenceConfigArgs;
import com.pulumi.gcp.memorystore.inputs.InstanceZoneDistributionConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * Optional. Immutable. Authorization mode of the instance. Possible values:
     * AUTH_DISABLED
     * IAM_AUTH
     * 
     */
    @Import(name="authorizationMode")
    private @Nullable Output<String> authorizationMode;

    /**
     * @return Optional. Immutable. Authorization mode of the instance. Possible values:
     * AUTH_DISABLED
     * IAM_AUTH
     * 
     */
    public Optional<Output<String>> authorizationMode() {
        return Optional.ofNullable(this.authorizationMode);
    }

    /**
     * Optional. If set to true deletion of the instance will fail.
     * 
     */
    @Import(name="deletionProtectionEnabled")
    private @Nullable Output<Boolean> deletionProtectionEnabled;

    /**
     * @return Optional. If set to true deletion of the instance will fail.
     * 
     */
    public Optional<Output<Boolean>> deletionProtectionEnabled() {
        return Optional.ofNullable(this.deletionProtectionEnabled);
    }

    /**
     * Required. Immutable. User inputs for the auto-created PSC connections.
     * 
     */
    @Import(name="desiredPscAutoConnections", required=true)
    private Output<List<InstanceDesiredPscAutoConnectionArgs>> desiredPscAutoConnections;

    /**
     * @return Required. Immutable. User inputs for the auto-created PSC connections.
     * 
     */
    public Output<List<InstanceDesiredPscAutoConnectionArgs>> desiredPscAutoConnections() {
        return this.desiredPscAutoConnections;
    }

    /**
     * Optional. User-provided engine configurations for the instance.
     * 
     */
    @Import(name="engineConfigs")
    private @Nullable Output<Map<String,String>> engineConfigs;

    /**
     * @return Optional. User-provided engine configurations for the instance.
     * 
     */
    public Optional<Output<Map<String,String>>> engineConfigs() {
        return Optional.ofNullable(this.engineConfigs);
    }

    /**
     * Optional. Immutable. Engine version of the instance.
     * 
     */
    @Import(name="engineVersion")
    private @Nullable Output<String> engineVersion;

    /**
     * @return Optional. Immutable. Engine version of the instance.
     * 
     */
    public Optional<Output<String>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    /**
     * Required. The ID to use for the instance, which will become the final component of
     * the instance&#39;s resource name.
     * This value is subject to the following restrictions:
     * * Must be 4-63 characters in length
     * * Must begin with a letter or digit
     * * Must contain only lowercase letters, digits, and hyphens
     * * Must not end with a hyphen
     * * Must be unique within a location
     * 
     * ***
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return Required. The ID to use for the instance, which will become the final component of
     * the instance&#39;s resource name.
     * This value is subject to the following restrictions:
     * * Must be 4-63 characters in length
     * * Must begin with a letter or digit
     * * Must contain only lowercase letters, digits, and hyphens
     * * Must not end with a hyphen
     * * Must be unique within a location
     * 
     * ***
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Optional. Labels to represent user-provided metadata.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels to represent user-provided metadata.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `memorystore.googleapis.com/CertificateAuthority`.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `memorystore.googleapis.com/CertificateAuthority`.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Optional. cluster or cluster-disabled.
     * Possible values:
     * CLUSTER
     * CLUSTER_DISABLED
     * Possible values are: `CLUSTER`, `CLUSTER_DISABLED`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Optional. cluster or cluster-disabled.
     * Possible values:
     * CLUSTER
     * CLUSTER_DISABLED
     * Possible values are: `CLUSTER`, `CLUSTER_DISABLED`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Optional. Immutable. Machine type for individual nodes of the instance.
     * Possible values:
     * SHARED_CORE_NANO
     * HIGHMEM_MEDIUM
     * HIGHMEM_XLARGE
     * STANDARD_SMALL
     * 
     */
    @Import(name="nodeType")
    private @Nullable Output<String> nodeType;

    /**
     * @return Optional. Immutable. Machine type for individual nodes of the instance.
     * Possible values:
     * SHARED_CORE_NANO
     * HIGHMEM_MEDIUM
     * HIGHMEM_XLARGE
     * STANDARD_SMALL
     * 
     */
    public Optional<Output<String>> nodeType() {
        return Optional.ofNullable(this.nodeType);
    }

    /**
     * Represents persistence configuration for a instance.
     * Structure is documented below.
     * 
     */
    @Import(name="persistenceConfig")
    private @Nullable Output<InstancePersistenceConfigArgs> persistenceConfig;

    /**
     * @return Represents persistence configuration for a instance.
     * Structure is documented below.
     * 
     */
    public Optional<Output<InstancePersistenceConfigArgs>> persistenceConfig() {
        return Optional.ofNullable(this.persistenceConfig);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Optional. Number of replica nodes per shard. If omitted the default is 0 replicas.
     * 
     */
    @Import(name="replicaCount")
    private @Nullable Output<Integer> replicaCount;

    /**
     * @return Optional. Number of replica nodes per shard. If omitted the default is 0 replicas.
     * 
     */
    public Optional<Output<Integer>> replicaCount() {
        return Optional.ofNullable(this.replicaCount);
    }

    /**
     * Required. Number of shards for the instance.
     * 
     */
    @Import(name="shardCount", required=true)
    private Output<Integer> shardCount;

    /**
     * @return Required. Number of shards for the instance.
     * 
     */
    public Output<Integer> shardCount() {
        return this.shardCount;
    }

    /**
     * Optional. Immutable. In-transit encryption mode of the instance.
     * Possible values:
     * TRANSIT_ENCRYPTION_DISABLED
     * SERVER_AUTHENTICATION
     * 
     */
    @Import(name="transitEncryptionMode")
    private @Nullable Output<String> transitEncryptionMode;

    /**
     * @return Optional. Immutable. In-transit encryption mode of the instance.
     * Possible values:
     * TRANSIT_ENCRYPTION_DISABLED
     * SERVER_AUTHENTICATION
     * 
     */
    public Optional<Output<String>> transitEncryptionMode() {
        return Optional.ofNullable(this.transitEncryptionMode);
    }

    /**
     * Zone distribution configuration for allocation of instance resources.
     * Structure is documented below.
     * 
     */
    @Import(name="zoneDistributionConfig")
    private @Nullable Output<InstanceZoneDistributionConfigArgs> zoneDistributionConfig;

    /**
     * @return Zone distribution configuration for allocation of instance resources.
     * Structure is documented below.
     * 
     */
    public Optional<Output<InstanceZoneDistributionConfigArgs>> zoneDistributionConfig() {
        return Optional.ofNullable(this.zoneDistributionConfig);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.authorizationMode = $.authorizationMode;
        this.deletionProtectionEnabled = $.deletionProtectionEnabled;
        this.desiredPscAutoConnections = $.desiredPscAutoConnections;
        this.engineConfigs = $.engineConfigs;
        this.engineVersion = $.engineVersion;
        this.instanceId = $.instanceId;
        this.labels = $.labels;
        this.location = $.location;
        this.mode = $.mode;
        this.nodeType = $.nodeType;
        this.persistenceConfig = $.persistenceConfig;
        this.project = $.project;
        this.replicaCount = $.replicaCount;
        this.shardCount = $.shardCount;
        this.transitEncryptionMode = $.transitEncryptionMode;
        this.zoneDistributionConfig = $.zoneDistributionConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationMode Optional. Immutable. Authorization mode of the instance. Possible values:
         * AUTH_DISABLED
         * IAM_AUTH
         * 
         * @return builder
         * 
         */
        public Builder authorizationMode(@Nullable Output<String> authorizationMode) {
            $.authorizationMode = authorizationMode;
            return this;
        }

        /**
         * @param authorizationMode Optional. Immutable. Authorization mode of the instance. Possible values:
         * AUTH_DISABLED
         * IAM_AUTH
         * 
         * @return builder
         * 
         */
        public Builder authorizationMode(String authorizationMode) {
            return authorizationMode(Output.of(authorizationMode));
        }

        /**
         * @param deletionProtectionEnabled Optional. If set to true deletion of the instance will fail.
         * 
         * @return builder
         * 
         */
        public Builder deletionProtectionEnabled(@Nullable Output<Boolean> deletionProtectionEnabled) {
            $.deletionProtectionEnabled = deletionProtectionEnabled;
            return this;
        }

        /**
         * @param deletionProtectionEnabled Optional. If set to true deletion of the instance will fail.
         * 
         * @return builder
         * 
         */
        public Builder deletionProtectionEnabled(Boolean deletionProtectionEnabled) {
            return deletionProtectionEnabled(Output.of(deletionProtectionEnabled));
        }

        /**
         * @param desiredPscAutoConnections Required. Immutable. User inputs for the auto-created PSC connections.
         * 
         * @return builder
         * 
         */
        public Builder desiredPscAutoConnections(Output<List<InstanceDesiredPscAutoConnectionArgs>> desiredPscAutoConnections) {
            $.desiredPscAutoConnections = desiredPscAutoConnections;
            return this;
        }

        /**
         * @param desiredPscAutoConnections Required. Immutable. User inputs for the auto-created PSC connections.
         * 
         * @return builder
         * 
         */
        public Builder desiredPscAutoConnections(List<InstanceDesiredPscAutoConnectionArgs> desiredPscAutoConnections) {
            return desiredPscAutoConnections(Output.of(desiredPscAutoConnections));
        }

        /**
         * @param desiredPscAutoConnections Required. Immutable. User inputs for the auto-created PSC connections.
         * 
         * @return builder
         * 
         */
        public Builder desiredPscAutoConnections(InstanceDesiredPscAutoConnectionArgs... desiredPscAutoConnections) {
            return desiredPscAutoConnections(List.of(desiredPscAutoConnections));
        }

        /**
         * @param engineConfigs Optional. User-provided engine configurations for the instance.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigs(@Nullable Output<Map<String,String>> engineConfigs) {
            $.engineConfigs = engineConfigs;
            return this;
        }

        /**
         * @param engineConfigs Optional. User-provided engine configurations for the instance.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigs(Map<String,String> engineConfigs) {
            return engineConfigs(Output.of(engineConfigs));
        }

        /**
         * @param engineVersion Optional. Immutable. Engine version of the instance.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        /**
         * @param engineVersion Optional. Immutable. Engine version of the instance.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        /**
         * @param instanceId Required. The ID to use for the instance, which will become the final component of
         * the instance&#39;s resource name.
         * This value is subject to the following restrictions:
         * * Must be 4-63 characters in length
         * * Must begin with a letter or digit
         * * Must contain only lowercase letters, digits, and hyphens
         * * Must not end with a hyphen
         * * Must be unique within a location
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId Required. The ID to use for the instance, which will become the final component of
         * the instance&#39;s resource name.
         * This value is subject to the following restrictions:
         * * Must be 4-63 characters in length
         * * Must begin with a letter or digit
         * * Must contain only lowercase letters, digits, and hyphens
         * * Must not end with a hyphen
         * * Must be unique within a location
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param labels Optional. Labels to represent user-provided metadata.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels to represent user-provided metadata.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `memorystore.googleapis.com/CertificateAuthority`.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `memorystore.googleapis.com/CertificateAuthority`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param mode Optional. cluster or cluster-disabled.
         * Possible values:
         * CLUSTER
         * CLUSTER_DISABLED
         * Possible values are: `CLUSTER`, `CLUSTER_DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Optional. cluster or cluster-disabled.
         * Possible values:
         * CLUSTER
         * CLUSTER_DISABLED
         * Possible values are: `CLUSTER`, `CLUSTER_DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param nodeType Optional. Immutable. Machine type for individual nodes of the instance.
         * Possible values:
         * SHARED_CORE_NANO
         * HIGHMEM_MEDIUM
         * HIGHMEM_XLARGE
         * STANDARD_SMALL
         * 
         * @return builder
         * 
         */
        public Builder nodeType(@Nullable Output<String> nodeType) {
            $.nodeType = nodeType;
            return this;
        }

        /**
         * @param nodeType Optional. Immutable. Machine type for individual nodes of the instance.
         * Possible values:
         * SHARED_CORE_NANO
         * HIGHMEM_MEDIUM
         * HIGHMEM_XLARGE
         * STANDARD_SMALL
         * 
         * @return builder
         * 
         */
        public Builder nodeType(String nodeType) {
            return nodeType(Output.of(nodeType));
        }

        /**
         * @param persistenceConfig Represents persistence configuration for a instance.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder persistenceConfig(@Nullable Output<InstancePersistenceConfigArgs> persistenceConfig) {
            $.persistenceConfig = persistenceConfig;
            return this;
        }

        /**
         * @param persistenceConfig Represents persistence configuration for a instance.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder persistenceConfig(InstancePersistenceConfigArgs persistenceConfig) {
            return persistenceConfig(Output.of(persistenceConfig));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param replicaCount Optional. Number of replica nodes per shard. If omitted the default is 0 replicas.
         * 
         * @return builder
         * 
         */
        public Builder replicaCount(@Nullable Output<Integer> replicaCount) {
            $.replicaCount = replicaCount;
            return this;
        }

        /**
         * @param replicaCount Optional. Number of replica nodes per shard. If omitted the default is 0 replicas.
         * 
         * @return builder
         * 
         */
        public Builder replicaCount(Integer replicaCount) {
            return replicaCount(Output.of(replicaCount));
        }

        /**
         * @param shardCount Required. Number of shards for the instance.
         * 
         * @return builder
         * 
         */
        public Builder shardCount(Output<Integer> shardCount) {
            $.shardCount = shardCount;
            return this;
        }

        /**
         * @param shardCount Required. Number of shards for the instance.
         * 
         * @return builder
         * 
         */
        public Builder shardCount(Integer shardCount) {
            return shardCount(Output.of(shardCount));
        }

        /**
         * @param transitEncryptionMode Optional. Immutable. In-transit encryption mode of the instance.
         * Possible values:
         * TRANSIT_ENCRYPTION_DISABLED
         * SERVER_AUTHENTICATION
         * 
         * @return builder
         * 
         */
        public Builder transitEncryptionMode(@Nullable Output<String> transitEncryptionMode) {
            $.transitEncryptionMode = transitEncryptionMode;
            return this;
        }

        /**
         * @param transitEncryptionMode Optional. Immutable. In-transit encryption mode of the instance.
         * Possible values:
         * TRANSIT_ENCRYPTION_DISABLED
         * SERVER_AUTHENTICATION
         * 
         * @return builder
         * 
         */
        public Builder transitEncryptionMode(String transitEncryptionMode) {
            return transitEncryptionMode(Output.of(transitEncryptionMode));
        }

        /**
         * @param zoneDistributionConfig Zone distribution configuration for allocation of instance resources.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder zoneDistributionConfig(@Nullable Output<InstanceZoneDistributionConfigArgs> zoneDistributionConfig) {
            $.zoneDistributionConfig = zoneDistributionConfig;
            return this;
        }

        /**
         * @param zoneDistributionConfig Zone distribution configuration for allocation of instance resources.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder zoneDistributionConfig(InstanceZoneDistributionConfigArgs zoneDistributionConfig) {
            return zoneDistributionConfig(Output.of(zoneDistributionConfig));
        }

        public InstanceArgs build() {
            if ($.desiredPscAutoConnections == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "desiredPscAutoConnections");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "instanceId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "location");
            }
            if ($.shardCount == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "shardCount");
            }
            return $;
        }
    }

}
