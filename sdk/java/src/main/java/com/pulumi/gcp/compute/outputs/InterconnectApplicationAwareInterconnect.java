// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.InterconnectApplicationAwareInterconnectBandwidthPercentagePolicy;
import com.pulumi.gcp.compute.outputs.InterconnectApplicationAwareInterconnectShapeAveragePercentage;
import com.pulumi.gcp.compute.outputs.InterconnectApplicationAwareInterconnectStrictPriorityPolicy;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InterconnectApplicationAwareInterconnect {
    /**
     * @return Bandwidth Percentage policy allows you to have granular control over how your Interconnect
     * bandwidth is utilized among your workloads mapping to different traffic classes.
     * Structure is documented below.
     * 
     */
    private @Nullable InterconnectApplicationAwareInterconnectBandwidthPercentagePolicy bandwidthPercentagePolicy;
    /**
     * @return A description for the AAI profile on this interconnect.
     * 
     */
    private @Nullable String profileDescription;
    /**
     * @return Optional field to specify a list of shape average percentages to be
     * applied in conjunction with StrictPriorityPolicy or BandwidthPercentagePolicy
     * Structure is documented below.
     * 
     */
    private @Nullable List<InterconnectApplicationAwareInterconnectShapeAveragePercentage> shapeAveragePercentages;
    /**
     * @return Specify configuration for StrictPriorityPolicy.
     * 
     */
    private @Nullable InterconnectApplicationAwareInterconnectStrictPriorityPolicy strictPriorityPolicy;

    private InterconnectApplicationAwareInterconnect() {}
    /**
     * @return Bandwidth Percentage policy allows you to have granular control over how your Interconnect
     * bandwidth is utilized among your workloads mapping to different traffic classes.
     * Structure is documented below.
     * 
     */
    public Optional<InterconnectApplicationAwareInterconnectBandwidthPercentagePolicy> bandwidthPercentagePolicy() {
        return Optional.ofNullable(this.bandwidthPercentagePolicy);
    }
    /**
     * @return A description for the AAI profile on this interconnect.
     * 
     */
    public Optional<String> profileDescription() {
        return Optional.ofNullable(this.profileDescription);
    }
    /**
     * @return Optional field to specify a list of shape average percentages to be
     * applied in conjunction with StrictPriorityPolicy or BandwidthPercentagePolicy
     * Structure is documented below.
     * 
     */
    public List<InterconnectApplicationAwareInterconnectShapeAveragePercentage> shapeAveragePercentages() {
        return this.shapeAveragePercentages == null ? List.of() : this.shapeAveragePercentages;
    }
    /**
     * @return Specify configuration for StrictPriorityPolicy.
     * 
     */
    public Optional<InterconnectApplicationAwareInterconnectStrictPriorityPolicy> strictPriorityPolicy() {
        return Optional.ofNullable(this.strictPriorityPolicy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InterconnectApplicationAwareInterconnect defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable InterconnectApplicationAwareInterconnectBandwidthPercentagePolicy bandwidthPercentagePolicy;
        private @Nullable String profileDescription;
        private @Nullable List<InterconnectApplicationAwareInterconnectShapeAveragePercentage> shapeAveragePercentages;
        private @Nullable InterconnectApplicationAwareInterconnectStrictPriorityPolicy strictPriorityPolicy;
        public Builder() {}
        public Builder(InterconnectApplicationAwareInterconnect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidthPercentagePolicy = defaults.bandwidthPercentagePolicy;
    	      this.profileDescription = defaults.profileDescription;
    	      this.shapeAveragePercentages = defaults.shapeAveragePercentages;
    	      this.strictPriorityPolicy = defaults.strictPriorityPolicy;
        }

        @CustomType.Setter
        public Builder bandwidthPercentagePolicy(@Nullable InterconnectApplicationAwareInterconnectBandwidthPercentagePolicy bandwidthPercentagePolicy) {

            this.bandwidthPercentagePolicy = bandwidthPercentagePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder profileDescription(@Nullable String profileDescription) {

            this.profileDescription = profileDescription;
            return this;
        }
        @CustomType.Setter
        public Builder shapeAveragePercentages(@Nullable List<InterconnectApplicationAwareInterconnectShapeAveragePercentage> shapeAveragePercentages) {

            this.shapeAveragePercentages = shapeAveragePercentages;
            return this;
        }
        public Builder shapeAveragePercentages(InterconnectApplicationAwareInterconnectShapeAveragePercentage... shapeAveragePercentages) {
            return shapeAveragePercentages(List.of(shapeAveragePercentages));
        }
        @CustomType.Setter
        public Builder strictPriorityPolicy(@Nullable InterconnectApplicationAwareInterconnectStrictPriorityPolicy strictPriorityPolicy) {

            this.strictPriorityPolicy = strictPriorityPolicy;
            return this;
        }
        public InterconnectApplicationAwareInterconnect build() {
            final var _resultValue = new InterconnectApplicationAwareInterconnect();
            _resultValue.bandwidthPercentagePolicy = bandwidthPercentagePolicy;
            _resultValue.profileDescription = profileDescription;
            _resultValue.shapeAveragePercentages = shapeAveragePercentages;
            _resultValue.strictPriorityPolicy = strictPriorityPolicy;
            return _resultValue;
        }
    }
}
