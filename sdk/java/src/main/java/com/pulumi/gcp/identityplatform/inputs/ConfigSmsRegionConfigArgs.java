// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.identityplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.identityplatform.inputs.ConfigSmsRegionConfigAllowByDefaultArgs;
import com.pulumi.gcp.identityplatform.inputs.ConfigSmsRegionConfigAllowlistOnlyArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigSmsRegionConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigSmsRegionConfigArgs Empty = new ConfigSmsRegionConfigArgs();

    /**
     * A policy of allowing SMS to every region by default and adding disallowed regions to a disallow list.
     * Structure is documented below.
     * 
     */
    @Import(name="allowByDefault")
    private @Nullable Output<ConfigSmsRegionConfigAllowByDefaultArgs> allowByDefault;

    /**
     * @return A policy of allowing SMS to every region by default and adding disallowed regions to a disallow list.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConfigSmsRegionConfigAllowByDefaultArgs>> allowByDefault() {
        return Optional.ofNullable(this.allowByDefault);
    }

    /**
     * A policy of only allowing regions by explicitly adding them to an allowlist.
     * Structure is documented below.
     * 
     */
    @Import(name="allowlistOnly")
    private @Nullable Output<ConfigSmsRegionConfigAllowlistOnlyArgs> allowlistOnly;

    /**
     * @return A policy of only allowing regions by explicitly adding them to an allowlist.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConfigSmsRegionConfigAllowlistOnlyArgs>> allowlistOnly() {
        return Optional.ofNullable(this.allowlistOnly);
    }

    private ConfigSmsRegionConfigArgs() {}

    private ConfigSmsRegionConfigArgs(ConfigSmsRegionConfigArgs $) {
        this.allowByDefault = $.allowByDefault;
        this.allowlistOnly = $.allowlistOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigSmsRegionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigSmsRegionConfigArgs $;

        public Builder() {
            $ = new ConfigSmsRegionConfigArgs();
        }

        public Builder(ConfigSmsRegionConfigArgs defaults) {
            $ = new ConfigSmsRegionConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowByDefault A policy of allowing SMS to every region by default and adding disallowed regions to a disallow list.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allowByDefault(@Nullable Output<ConfigSmsRegionConfigAllowByDefaultArgs> allowByDefault) {
            $.allowByDefault = allowByDefault;
            return this;
        }

        /**
         * @param allowByDefault A policy of allowing SMS to every region by default and adding disallowed regions to a disallow list.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allowByDefault(ConfigSmsRegionConfigAllowByDefaultArgs allowByDefault) {
            return allowByDefault(Output.of(allowByDefault));
        }

        /**
         * @param allowlistOnly A policy of only allowing regions by explicitly adding them to an allowlist.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allowlistOnly(@Nullable Output<ConfigSmsRegionConfigAllowlistOnlyArgs> allowlistOnly) {
            $.allowlistOnly = allowlistOnly;
            return this;
        }

        /**
         * @param allowlistOnly A policy of only allowing regions by explicitly adding them to an allowlist.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allowlistOnly(ConfigSmsRegionConfigAllowlistOnlyArgs allowlistOnly) {
            return allowlistOnly(Output.of(allowlistOnly));
        }

        public ConfigSmsRegionConfigArgs build() {
            return $;
        }
    }

}
