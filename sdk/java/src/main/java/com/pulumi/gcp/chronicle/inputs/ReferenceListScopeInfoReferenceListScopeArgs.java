// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.chronicle.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReferenceListScopeInfoReferenceListScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReferenceListScopeInfoReferenceListScopeArgs Empty = new ReferenceListScopeInfoReferenceListScopeArgs();

    /**
     * Optional. The list of scope names of the reference list. The scope names should be
     * full resource names and should be of the format:
     * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope_name}&#34;.
     * 
     */
    @Import(name="scopeNames")
    private @Nullable Output<List<String>> scopeNames;

    /**
     * @return Optional. The list of scope names of the reference list. The scope names should be
     * full resource names and should be of the format:
     * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope_name}&#34;.
     * 
     */
    public Optional<Output<List<String>>> scopeNames() {
        return Optional.ofNullable(this.scopeNames);
    }

    private ReferenceListScopeInfoReferenceListScopeArgs() {}

    private ReferenceListScopeInfoReferenceListScopeArgs(ReferenceListScopeInfoReferenceListScopeArgs $) {
        this.scopeNames = $.scopeNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReferenceListScopeInfoReferenceListScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReferenceListScopeInfoReferenceListScopeArgs $;

        public Builder() {
            $ = new ReferenceListScopeInfoReferenceListScopeArgs();
        }

        public Builder(ReferenceListScopeInfoReferenceListScopeArgs defaults) {
            $ = new ReferenceListScopeInfoReferenceListScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param scopeNames Optional. The list of scope names of the reference list. The scope names should be
         * full resource names and should be of the format:
         * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope_name}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scopeNames(@Nullable Output<List<String>> scopeNames) {
            $.scopeNames = scopeNames;
            return this;
        }

        /**
         * @param scopeNames Optional. The list of scope names of the reference list. The scope names should be
         * full resource names and should be of the format:
         * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope_name}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scopeNames(List<String> scopeNames) {
            return scopeNames(Output.of(scopeNames));
        }

        /**
         * @param scopeNames Optional. The list of scope names of the reference list. The scope names should be
         * full resource names and should be of the format:
         * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope_name}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scopeNames(String... scopeNames) {
            return scopeNames(List.of(scopeNames));
        }

        public ReferenceListScopeInfoReferenceListScopeArgs build() {
            return $;
        }
    }

}
