// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.netapp.outputs.VolumeReplicationDestinationVolumeParametersTieringPolicy;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VolumeReplicationDestinationVolumeParameters {
    /**
     * @return Description for the destination volume.
     * 
     */
    private @Nullable String description;
    /**
     * @return Share name for destination volume. If not specified, name of source volume&#39;s share name will be used.
     * 
     */
    private @Nullable String shareName;
    /**
     * @return Name of an existing storage pool for the destination volume with format: `projects/{{project}}/locations/{{location}}/storagePools/{{poolId}}`
     * 
     */
    private String storagePool;
    /**
     * @return Tiering policy for the volume.
     * Structure is documented below.
     * 
     */
    private @Nullable VolumeReplicationDestinationVolumeParametersTieringPolicy tieringPolicy;
    /**
     * @return Name for the destination volume to be created. If not specified, the name of the source volume will be used.
     * 
     */
    private @Nullable String volumeId;

    private VolumeReplicationDestinationVolumeParameters() {}
    /**
     * @return Description for the destination volume.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Share name for destination volume. If not specified, name of source volume&#39;s share name will be used.
     * 
     */
    public Optional<String> shareName() {
        return Optional.ofNullable(this.shareName);
    }
    /**
     * @return Name of an existing storage pool for the destination volume with format: `projects/{{project}}/locations/{{location}}/storagePools/{{poolId}}`
     * 
     */
    public String storagePool() {
        return this.storagePool;
    }
    /**
     * @return Tiering policy for the volume.
     * Structure is documented below.
     * 
     */
    public Optional<VolumeReplicationDestinationVolumeParametersTieringPolicy> tieringPolicy() {
        return Optional.ofNullable(this.tieringPolicy);
    }
    /**
     * @return Name for the destination volume to be created. If not specified, the name of the source volume will be used.
     * 
     */
    public Optional<String> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeReplicationDestinationVolumeParameters defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable String shareName;
        private String storagePool;
        private @Nullable VolumeReplicationDestinationVolumeParametersTieringPolicy tieringPolicy;
        private @Nullable String volumeId;
        public Builder() {}
        public Builder(VolumeReplicationDestinationVolumeParameters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.shareName = defaults.shareName;
    	      this.storagePool = defaults.storagePool;
    	      this.tieringPolicy = defaults.tieringPolicy;
    	      this.volumeId = defaults.volumeId;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder shareName(@Nullable String shareName) {

            this.shareName = shareName;
            return this;
        }
        @CustomType.Setter
        public Builder storagePool(String storagePool) {
            if (storagePool == null) {
              throw new MissingRequiredPropertyException("VolumeReplicationDestinationVolumeParameters", "storagePool");
            }
            this.storagePool = storagePool;
            return this;
        }
        @CustomType.Setter
        public Builder tieringPolicy(@Nullable VolumeReplicationDestinationVolumeParametersTieringPolicy tieringPolicy) {

            this.tieringPolicy = tieringPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder volumeId(@Nullable String volumeId) {

            this.volumeId = volumeId;
            return this;
        }
        public VolumeReplicationDestinationVolumeParameters build() {
            final var _resultValue = new VolumeReplicationDestinationVolumeParameters();
            _resultValue.description = description;
            _resultValue.shareName = shareName;
            _resultValue.storagePool = storagePool;
            _resultValue.tieringPolicy = tieringPolicy;
            _resultValue.volumeId = volumeId;
            return _resultValue;
        }
    }
}
