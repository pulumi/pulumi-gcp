// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class JobScheduling {
    /**
     * @return Maximum number of times per hour a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed.
     * 
     */
    private Integer maxFailuresPerHour;
    /**
     * @return Maximum number of times in total a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed.
     * 
     */
    private Integer maxFailuresTotal;

    private JobScheduling() {}
    /**
     * @return Maximum number of times per hour a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed.
     * 
     */
    public Integer maxFailuresPerHour() {
        return this.maxFailuresPerHour;
    }
    /**
     * @return Maximum number of times in total a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed.
     * 
     */
    public Integer maxFailuresTotal() {
        return this.maxFailuresTotal;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobScheduling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer maxFailuresPerHour;
        private Integer maxFailuresTotal;
        public Builder() {}
        public Builder(JobScheduling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxFailuresPerHour = defaults.maxFailuresPerHour;
    	      this.maxFailuresTotal = defaults.maxFailuresTotal;
        }

        @CustomType.Setter
        public Builder maxFailuresPerHour(Integer maxFailuresPerHour) {
            if (maxFailuresPerHour == null) {
              throw new MissingRequiredPropertyException("JobScheduling", "maxFailuresPerHour");
            }
            this.maxFailuresPerHour = maxFailuresPerHour;
            return this;
        }
        @CustomType.Setter
        public Builder maxFailuresTotal(Integer maxFailuresTotal) {
            if (maxFailuresTotal == null) {
              throw new MissingRequiredPropertyException("JobScheduling", "maxFailuresTotal");
            }
            this.maxFailuresTotal = maxFailuresTotal;
            return this;
        }
        public JobScheduling build() {
            final var _resultValue = new JobScheduling();
            _resultValue.maxFailuresPerHour = maxFailuresPerHour;
            _resultValue.maxFailuresTotal = maxFailuresTotal;
            return _resultValue;
        }
    }
}
