// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.vertex.inputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs Empty = new AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs();

    /**
     * Host name to connect to, defaults to the model serving container&#39;s IP.
     * You probably want to set &#34;Host&#34; in httpHeaders instead.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Host name to connect to, defaults to the model serving container&#39;s IP.
     * You probably want to set &#34;Host&#34; in httpHeaders instead.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Custom headers to set in the request. HTTP allows repeated headers.
     * Structure is documented below.
     * 
     */
    @Import(name="httpHeaders")
    private @Nullable Output<List<AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgs>> httpHeaders;

    /**
     * @return Custom headers to set in the request. HTTP allows repeated headers.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgs>>> httpHeaders() {
        return Optional.ofNullable(this.httpHeaders);
    }

    /**
     * Path to access on the HTTP server.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Path to access on the HTTP server.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Number of the port to access on the container.
     * Number must be in the range 1 to 65535.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Number of the port to access on the container.
     * Number must be in the range 1 to 65535.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Scheme to use for connecting to the host.
     * Defaults to HTTP. Acceptable values are &#34;HTTP&#34; or &#34;HTTPS&#34;.
     * 
     */
    @Import(name="scheme")
    private @Nullable Output<String> scheme;

    /**
     * @return Scheme to use for connecting to the host.
     * Defaults to HTTP. Acceptable values are &#34;HTTP&#34; or &#34;HTTPS&#34;.
     * 
     */
    public Optional<Output<String>> scheme() {
        return Optional.ofNullable(this.scheme);
    }

    private AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs() {}

    private AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs $) {
        this.host = $.host;
        this.httpHeaders = $.httpHeaders;
        this.path = $.path;
        this.port = $.port;
        this.scheme = $.scheme;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs $;

        public Builder() {
            $ = new AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs();
        }

        public Builder(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs defaults) {
            $ = new AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host Host name to connect to, defaults to the model serving container&#39;s IP.
         * You probably want to set &#34;Host&#34; in httpHeaders instead.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Host name to connect to, defaults to the model serving container&#39;s IP.
         * You probably want to set &#34;Host&#34; in httpHeaders instead.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param httpHeaders Custom headers to set in the request. HTTP allows repeated headers.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(@Nullable Output<List<AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgs>> httpHeaders) {
            $.httpHeaders = httpHeaders;
            return this;
        }

        /**
         * @param httpHeaders Custom headers to set in the request. HTTP allows repeated headers.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(List<AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgs> httpHeaders) {
            return httpHeaders(Output.of(httpHeaders));
        }

        /**
         * @param httpHeaders Custom headers to set in the request. HTTP allows repeated headers.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgs... httpHeaders) {
            return httpHeaders(List.of(httpHeaders));
        }

        /**
         * @param path Path to access on the HTTP server.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path to access on the HTTP server.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param port Number of the port to access on the container.
         * Number must be in the range 1 to 65535.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Number of the port to access on the container.
         * Number must be in the range 1 to 65535.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param scheme Scheme to use for connecting to the host.
         * Defaults to HTTP. Acceptable values are &#34;HTTP&#34; or &#34;HTTPS&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scheme(@Nullable Output<String> scheme) {
            $.scheme = scheme;
            return this;
        }

        /**
         * @param scheme Scheme to use for connecting to the host.
         * Defaults to HTTP. Acceptable values are &#34;HTTP&#34; or &#34;HTTPS&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scheme(String scheme) {
            return scheme(Output.of(scheme));
        }

        public AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs build() {
            return $;
        }
    }

}
