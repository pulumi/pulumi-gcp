// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.managedkafka;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.managedkafka.inputs.AclAclEntryArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclArgs extends com.pulumi.resources.ResourceArgs {

    public static final AclArgs Empty = new AclArgs();

    /**
     * The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
     * Structure is documented below.
     * 
     */
    @Import(name="aclEntries", required=true)
    private Output<List<AclAclEntryArgs>> aclEntries;

    /**
     * @return The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
     * Structure is documented below.
     * 
     */
    public Output<List<AclAclEntryArgs>> aclEntries() {
        return this.aclEntries;
    }

    /**
     * The ID to use for the acl, which will become the final component of the acl&#39;s name. The structure of `aclId` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl. `aclId` is structured like one of the following:
     * For acls on the cluster: `cluster`
     * For acls on a single resource within the cluster: `topic/{resource_name}` `consumerGroup/{resource_name}` `transactionalId/{resource_name}`
     * For acls on all resources that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}` `transactionalIdPrefixed/{resource_name}`
     * For acls on all resources of a given type (i.e. the wildcard literal &#39;*&#39;&#39;): `allTopics` (represents `topic/*`) `allConsumerGroups` (represents `consumerGroup/*`) `allTransactionalIds` (represents `transactionalId/*`).
     * 
     */
    @Import(name="aclId", required=true)
    private Output<String> aclId;

    /**
     * @return The ID to use for the acl, which will become the final component of the acl&#39;s name. The structure of `aclId` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl. `aclId` is structured like one of the following:
     * For acls on the cluster: `cluster`
     * For acls on a single resource within the cluster: `topic/{resource_name}` `consumerGroup/{resource_name}` `transactionalId/{resource_name}`
     * For acls on all resources that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}` `transactionalIdPrefixed/{resource_name}`
     * For acls on all resources of a given type (i.e. the wildcard literal &#39;*&#39;&#39;): `allTopics` (represents `topic/*`) `allConsumerGroups` (represents `consumerGroup/*`) `allTransactionalIds` (represents `transactionalId/*`).
     * 
     */
    public Output<String> aclId() {
        return this.aclId;
    }

    /**
     * The cluster name.
     * 
     */
    @Import(name="cluster", required=true)
    private Output<String> cluster;

    /**
     * @return The cluster name.
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }

    /**
     * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private AclArgs() {}

    private AclArgs(AclArgs $) {
        this.aclEntries = $.aclEntries;
        this.aclId = $.aclId;
        this.cluster = $.cluster;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclArgs $;

        public Builder() {
            $ = new AclArgs();
        }

        public Builder(AclArgs defaults) {
            $ = new AclArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclEntries The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder aclEntries(Output<List<AclAclEntryArgs>> aclEntries) {
            $.aclEntries = aclEntries;
            return this;
        }

        /**
         * @param aclEntries The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder aclEntries(List<AclAclEntryArgs> aclEntries) {
            return aclEntries(Output.of(aclEntries));
        }

        /**
         * @param aclEntries The acl entries that apply to the resource pattern. The maximum number of allowed entries is 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder aclEntries(AclAclEntryArgs... aclEntries) {
            return aclEntries(List.of(aclEntries));
        }

        /**
         * @param aclId The ID to use for the acl, which will become the final component of the acl&#39;s name. The structure of `aclId` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl. `aclId` is structured like one of the following:
         * For acls on the cluster: `cluster`
         * For acls on a single resource within the cluster: `topic/{resource_name}` `consumerGroup/{resource_name}` `transactionalId/{resource_name}`
         * For acls on all resources that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}` `transactionalIdPrefixed/{resource_name}`
         * For acls on all resources of a given type (i.e. the wildcard literal &#39;*&#39;&#39;): `allTopics` (represents `topic/*`) `allConsumerGroups` (represents `consumerGroup/*`) `allTransactionalIds` (represents `transactionalId/*`).
         * 
         * @return builder
         * 
         */
        public Builder aclId(Output<String> aclId) {
            $.aclId = aclId;
            return this;
        }

        /**
         * @param aclId The ID to use for the acl, which will become the final component of the acl&#39;s name. The structure of `aclId` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl. `aclId` is structured like one of the following:
         * For acls on the cluster: `cluster`
         * For acls on a single resource within the cluster: `topic/{resource_name}` `consumerGroup/{resource_name}` `transactionalId/{resource_name}`
         * For acls on all resources that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}` `transactionalIdPrefixed/{resource_name}`
         * For acls on all resources of a given type (i.e. the wildcard literal &#39;*&#39;&#39;): `allTopics` (represents `topic/*`) `allConsumerGroups` (represents `consumerGroup/*`) `allTransactionalIds` (represents `transactionalId/*`).
         * 
         * @return builder
         * 
         */
        public Builder aclId(String aclId) {
            return aclId(Output.of(aclId));
        }

        /**
         * @param cluster The cluster name.
         * 
         * @return builder
         * 
         */
        public Builder cluster(Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster The cluster name.
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param location ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public AclArgs build() {
            if ($.aclEntries == null) {
                throw new MissingRequiredPropertyException("AclArgs", "aclEntries");
            }
            if ($.aclId == null) {
                throw new MissingRequiredPropertyException("AclArgs", "aclId");
            }
            if ($.cluster == null) {
                throw new MissingRequiredPropertyException("AclArgs", "cluster");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("AclArgs", "location");
            }
            return $;
        }
    }

}
