// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class RouterNatLogConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouterNatLogConfigArgs Empty = new RouterNatLogConfigArgs();

    /**
     * Indicates whether or not to export logs.
     * 
     */
    @Import(name="enable", required=true)
    private Output<Boolean> enable;

    /**
     * @return Indicates whether or not to export logs.
     * 
     */
    public Output<Boolean> enable() {
        return this.enable;
    }

    /**
     * Specifies the desired filtering of logs on this NAT.
     * Possible values are `ERRORS_ONLY`, `TRANSLATIONS_ONLY`, and `ALL`.
     * 
     */
    @Import(name="filter", required=true)
    private Output<String> filter;

    /**
     * @return Specifies the desired filtering of logs on this NAT.
     * Possible values are `ERRORS_ONLY`, `TRANSLATIONS_ONLY`, and `ALL`.
     * 
     */
    public Output<String> filter() {
        return this.filter;
    }

    private RouterNatLogConfigArgs() {}

    private RouterNatLogConfigArgs(RouterNatLogConfigArgs $) {
        this.enable = $.enable;
        this.filter = $.filter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterNatLogConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterNatLogConfigArgs $;

        public Builder() {
            $ = new RouterNatLogConfigArgs();
        }

        public Builder(RouterNatLogConfigArgs defaults) {
            $ = new RouterNatLogConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enable Indicates whether or not to export logs.
         * 
         * @return builder
         * 
         */
        public Builder enable(Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        /**
         * @param enable Indicates whether or not to export logs.
         * 
         * @return builder
         * 
         */
        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        /**
         * @param filter Specifies the desired filtering of logs on this NAT.
         * Possible values are `ERRORS_ONLY`, `TRANSLATIONS_ONLY`, and `ALL`.
         * 
         * @return builder
         * 
         */
        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter Specifies the desired filtering of logs on this NAT.
         * Possible values are `ERRORS_ONLY`, `TRANSLATIONS_ONLY`, and `ALL`.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public RouterNatLogConfigArgs build() {
            $.enable = Objects.requireNonNull($.enable, "expected parameter 'enable' to be non-null");
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            return $;
        }
    }

}
