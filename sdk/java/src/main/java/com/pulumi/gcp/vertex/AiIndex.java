// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.vertex.AiIndexArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexState;
import com.pulumi.gcp.vertex.outputs.AiIndexDeployedIndex;
import com.pulumi.gcp.vertex.outputs.AiIndexIndexStat;
import com.pulumi.gcp.vertex.outputs.AiIndexMetadata;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A representation of a collection of database items organized in a way that allows for approximate nearest neighbor (a.k.a ANN) algorithms search.
 * 
 * To get more information about Index, see:
 * 
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes/)
 * 
 * ## Example Usage
 * ### Vertex Ai Index
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.vertex.AiIndex;
 * import com.pulumi.gcp.vertex.AiIndexArgs;
 * import com.pulumi.gcp.vertex.inputs.AiIndexMetadataArgs;
 * import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigArgs;
 * import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigArgs;
 * import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var bucket = new Bucket(&#34;bucket&#34;, BucketArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var data = new BucketObject(&#34;data&#34;, BucketObjectArgs.builder()        
 *             .bucket(bucket.name())
 *             .content(&#34;&#34;&#34;
 * {&#34;id&#34;: &#34;42&#34;, &#34;embedding&#34;: [0.5, 1.0], &#34;restricts&#34;: [{&#34;namespace&#34;: &#34;class&#34;, &#34;allow&#34;: [&#34;cat&#34;, &#34;pet&#34;]},{&#34;namespace&#34;: &#34;category&#34;, &#34;allow&#34;: [&#34;feline&#34;]}]}
 * {&#34;id&#34;: &#34;43&#34;, &#34;embedding&#34;: [0.6, 1.0], &#34;restricts&#34;: [{&#34;namespace&#34;: &#34;class&#34;, &#34;allow&#34;: [&#34;dog&#34;, &#34;pet&#34;]},{&#34;namespace&#34;: &#34;category&#34;, &#34;allow&#34;: [&#34;canine&#34;]}]}
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *         var index = new AiIndex(&#34;index&#34;, AiIndexArgs.builder()        
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .region(&#34;us-central1&#34;)
 *             .displayName(&#34;test-index&#34;)
 *             .description(&#34;index for test&#34;)
 *             .metadata(AiIndexMetadataArgs.builder()
 *                 .contentsDeltaUri(bucket.name().applyValue(name -&gt; String.format(&#34;gs://%s/contents&#34;, name)))
 *                 .config(AiIndexMetadataConfigArgs.builder()
 *                     .dimensions(2)
 *                     .approximateNeighborsCount(150)
 *                     .distanceMeasureType(&#34;DOT_PRODUCT_DISTANCE&#34;)
 *                     .algorithmConfig(AiIndexMetadataConfigAlgorithmConfigArgs.builder()
 *                         .treeAhConfig(AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs.builder()
 *                             .leafNodeEmbeddingCount(500)
 *                             .leafNodesToSearchPercent(7)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .indexUpdateMethod(&#34;BATCH_UPDATE&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Vertex Ai Index Streaming
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.vertex.AiIndex;
 * import com.pulumi.gcp.vertex.AiIndexArgs;
 * import com.pulumi.gcp.vertex.inputs.AiIndexMetadataArgs;
 * import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigArgs;
 * import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigArgs;
 * import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var bucket = new Bucket(&#34;bucket&#34;, BucketArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var data = new BucketObject(&#34;data&#34;, BucketObjectArgs.builder()        
 *             .bucket(bucket.name())
 *             .content(&#34;&#34;&#34;
 * {&#34;id&#34;: &#34;42&#34;, &#34;embedding&#34;: [0.5, 1.0], &#34;restricts&#34;: [{&#34;namespace&#34;: &#34;class&#34;, &#34;allow&#34;: [&#34;cat&#34;, &#34;pet&#34;]},{&#34;namespace&#34;: &#34;category&#34;, &#34;allow&#34;: [&#34;feline&#34;]}]}
 * {&#34;id&#34;: &#34;43&#34;, &#34;embedding&#34;: [0.6, 1.0], &#34;restricts&#34;: [{&#34;namespace&#34;: &#34;class&#34;, &#34;allow&#34;: [&#34;dog&#34;, &#34;pet&#34;]},{&#34;namespace&#34;: &#34;category&#34;, &#34;allow&#34;: [&#34;canine&#34;]}]}
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *         var index = new AiIndex(&#34;index&#34;, AiIndexArgs.builder()        
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .region(&#34;us-central1&#34;)
 *             .displayName(&#34;test-index&#34;)
 *             .description(&#34;index for test&#34;)
 *             .metadata(AiIndexMetadataArgs.builder()
 *                 .contentsDeltaUri(bucket.name().applyValue(name -&gt; String.format(&#34;gs://%s/contents&#34;, name)))
 *                 .config(AiIndexMetadataConfigArgs.builder()
 *                     .dimensions(2)
 *                     .distanceMeasureType(&#34;COSINE_DISTANCE&#34;)
 *                     .featureNormType(&#34;UNIT_L2_NORM&#34;)
 *                     .algorithmConfig(AiIndexMetadataConfigAlgorithmConfigArgs.builder()
 *                         .bruteForceConfig()
 *                         .build())
 *                     .build())
 *                 .build())
 *             .indexUpdateMethod(&#34;STREAM_UPDATE&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Index can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:vertex/aiIndex:AiIndex default projects/{{project}}/locations/{{region}}/indexes/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:vertex/aiIndex:AiIndex default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:vertex/aiIndex:AiIndex default {{region}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:vertex/aiIndex:AiIndex default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:vertex/aiIndex:AiIndex")
public class AiIndex extends com.pulumi.resources.CustomResource {
    /**
     * The timestamp of when the Index was created in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
     * fractional digits.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return The timestamp of when the Index was created in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
     * fractional digits.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had
     * been undeployed first.
     * 
     */
    @Export(name="deployedIndexes", type=List.class, parameters={AiIndexDeployedIndex.class})
    private Output<List<AiIndexDeployedIndex>> deployedIndexes;

    /**
     * @return The pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had
     * been undeployed first.
     * 
     */
    public Output<List<AiIndexDeployedIndex>> deployedIndexes() {
        return this.deployedIndexes;
    }
    /**
     * The description of the Index.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the Index.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Used to perform consistent read-modify-write updates.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return Used to perform consistent read-modify-write updates.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * Stats of the index resource.
     * 
     */
    @Export(name="indexStats", type=List.class, parameters={AiIndexIndexStat.class})
    private Output<List<AiIndexIndexStat>> indexStats;

    /**
     * @return Stats of the index resource.
     * 
     */
    public Output<List<AiIndexIndexStat>> indexStats() {
        return this.indexStats;
    }
    /**
     * The update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by default.
     * * BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update.
     * * STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be applied in corresponding DeployedIndexes in nearly real-time.
     * 
     */
    @Export(name="indexUpdateMethod", type=String.class, parameters={})
    private Output</* @Nullable */ String> indexUpdateMethod;

    /**
     * @return The update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by default.
     * * BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update.
     * * STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be applied in corresponding DeployedIndexes in nearly real-time.
     * 
     */
    public Output<Optional<String>> indexUpdateMethod() {
        return Codegen.optional(this.indexUpdateMethod);
    }
    /**
     * The labels with user-defined metadata to organize your Indexes.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return The labels with user-defined metadata to organize your Indexes.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * An additional information about the Index
     * Structure is documented below.
     * 
     */
    @Export(name="metadata", type=AiIndexMetadata.class, parameters={})
    private Output</* @Nullable */ AiIndexMetadata> metadata;

    /**
     * @return An additional information about the Index
     * Structure is documented below.
     * 
     */
    public Output<Optional<AiIndexMetadata>> metadata() {
        return Codegen.optional(this.metadata);
    }
    /**
     * Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific
     * to it. Unset if the Index does not have any additional information.
     * 
     */
    @Export(name="metadataSchemaUri", type=String.class, parameters={})
    private Output<String> metadataSchemaUri;

    /**
     * @return Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific
     * to it. Unset if the Index does not have any additional information.
     * 
     */
    public Output<String> metadataSchemaUri() {
        return this.metadataSchemaUri;
    }
    /**
     * The resource name of the Index.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The resource name of the Index.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The region of the index. eg us-central1
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output</* @Nullable */ String> region;

    /**
     * @return The region of the index. eg us-central1
     * 
     */
    public Output<Optional<String>> region() {
        return Codegen.optional(this.region);
    }
    /**
     * The timestamp of when the Index was last updated in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
     * fractional digits.
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return The timestamp of when the Index was last updated in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
     * fractional digits.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AiIndex(String name) {
        this(name, AiIndexArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AiIndex(String name, AiIndexArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AiIndex(String name, AiIndexArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:vertex/aiIndex:AiIndex", name, args == null ? AiIndexArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private AiIndex(String name, Output<String> id, @Nullable AiIndexState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:vertex/aiIndex:AiIndex", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AiIndex get(String name, Output<String> id, @Nullable AiIndexState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AiIndex(name, id, state, options);
    }
}
