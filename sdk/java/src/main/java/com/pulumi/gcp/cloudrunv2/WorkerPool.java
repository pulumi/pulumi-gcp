// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.cloudrunv2.WorkerPoolArgs;
import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolState;
import com.pulumi.gcp.cloudrunv2.outputs.WorkerPoolBinaryAuthorization;
import com.pulumi.gcp.cloudrunv2.outputs.WorkerPoolCondition;
import com.pulumi.gcp.cloudrunv2.outputs.WorkerPoolInstanceSplit;
import com.pulumi.gcp.cloudrunv2.outputs.WorkerPoolInstanceSplitStatus;
import com.pulumi.gcp.cloudrunv2.outputs.WorkerPoolScaling;
import com.pulumi.gcp.cloudrunv2.outputs.WorkerPoolTemplate;
import com.pulumi.gcp.cloudrunv2.outputs.WorkerPoolTerminalCondition;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * WorkerPool acts as a top-level container that manages a set of configurations and revision templates which implement a pull-based workload. WorkerPool exists to provide a singular abstraction which can be access controlled, reasoned about, and which encapsulates software lifecycle decisions such as rollout policy and team resource ownership.
 * 
 * To get more information about WorkerPool, see:
 * 
 * * [API documentation](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.workerPools)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/run/docs/)
 * 
 * ## Example Usage
 * 
 * ### Cloudrunv2 Worker Pool Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.cloudrunv2.WorkerPool;
 * import com.pulumi.gcp.cloudrunv2.WorkerPoolArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new WorkerPool("default", WorkerPoolArgs.builder()
 *             .name("cloudrun-worker-pool")
 *             .location("us-central1")
 *             .deletionProtection(false)
 *             .launchStage("BETA")
 *             .template(WorkerPoolTemplateArgs.builder()
 *                 .containers(WorkerPoolTemplateContainerArgs.builder()
 *                     .image("us-docker.pkg.dev/cloudrun/container/worker-pool")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudrunv2 Worker Pool Limits
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.cloudrunv2.WorkerPool;
 * import com.pulumi.gcp.cloudrunv2.WorkerPoolArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new WorkerPool("default", WorkerPoolArgs.builder()
 *             .name("cloudrun-worker-pool")
 *             .location("us-central1")
 *             .deletionProtection(false)
 *             .launchStage("BETA")
 *             .template(WorkerPoolTemplateArgs.builder()
 *                 .containers(WorkerPoolTemplateContainerArgs.builder()
 *                     .image("us-docker.pkg.dev/cloudrun/container/worker-pool")
 *                     .resources(WorkerPoolTemplateContainerResourcesArgs.builder()
 *                         .limits(Map.ofEntries(
 *                             Map.entry("cpu", "2"),
 *                             Map.entry("memory", "1024Mi")
 *                         ))
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudrunv2 Worker Pool Sql
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.cloudrunv2.WorkerPool;
 * import com.pulumi.gcp.cloudrunv2.WorkerPoolArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolInstanceSplitArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamMember;
 * import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var secret = new Secret("secret", SecretArgs.builder()
 *             .secretId("secret-1")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto(SecretReplicationAutoArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var secret_version_data = new SecretVersion("secret-version-data", SecretVersionArgs.builder()
 *             .secret(secret.name())
 *             .secretData("secret-data")
 *             .build());
 * 
 *         var instance = new DatabaseInstance("instance", DatabaseInstanceArgs.builder()
 *             .name("cloudrun-sql")
 *             .region("us-central1")
 *             .databaseVersion("MYSQL_5_7")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-f1-micro")
 *                 .build())
 *             .deletionProtection(true)
 *             .build());
 * 
 *         var default_ = new WorkerPool("default", WorkerPoolArgs.builder()
 *             .name("cloudrun-worker-pool")
 *             .location("us-central1")
 *             .deletionProtection(false)
 *             .launchStage("BETA")
 *             .template(WorkerPoolTemplateArgs.builder()
 *                 .volumes(WorkerPoolTemplateVolumeArgs.builder()
 *                     .name("cloudsql")
 *                     .cloudSqlInstance(WorkerPoolTemplateVolumeCloudSqlInstanceArgs.builder()
 *                         .instances(instance.connectionName())
 *                         .build())
 *                     .build())
 *                 .containers(WorkerPoolTemplateContainerArgs.builder()
 *                     .image("us-docker.pkg.dev/cloudrun/container/worker-pool")
 *                     .envs(                    
 *                         WorkerPoolTemplateContainerEnvArgs.builder()
 *                             .name("FOO")
 *                             .value("bar")
 *                             .build(),
 *                         WorkerPoolTemplateContainerEnvArgs.builder()
 *                             .name("SECRET_ENV_VAR")
 *                             .valueSource(WorkerPoolTemplateContainerEnvValueSourceArgs.builder()
 *                                 .secretKeyRef(WorkerPoolTemplateContainerEnvValueSourceSecretKeyRefArgs.builder()
 *                                     .secret(secret.secretId())
 *                                     .version("1")
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                     .volumeMounts(WorkerPoolTemplateContainerVolumeMountArgs.builder()
 *                         .name("cloudsql")
 *                         .mountPath("/cloudsql")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .instanceSplits(WorkerPoolInstanceSplitArgs.builder()
 *                 .type("INSTANCE_SPLIT_ALLOCATION_TYPE_LATEST")
 *                 .percent(100)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secret_version_data)
 *                 .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
 *             .secretId(secret.id())
 *             .role("roles/secretmanager.secretAccessor")
 *             .member(String.format("serviceAccount:%s-compute}{@literal @}{@code developer.gserviceaccount.com", project.number()))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secret)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudrunv2 Worker Pool Directvpc
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.cloudrunv2.WorkerPool;
 * import com.pulumi.gcp.cloudrunv2.WorkerPoolArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateVpcAccessArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new WorkerPool("default", WorkerPoolArgs.builder()
 *             .name("cloudrun-worker-pool")
 *             .location("us-central1")
 *             .deletionProtection(false)
 *             .launchStage("BETA")
 *             .template(WorkerPoolTemplateArgs.builder()
 *                 .containers(WorkerPoolTemplateContainerArgs.builder()
 *                     .image("us-docker.pkg.dev/cloudrun/container/worker-pool")
 *                     .build())
 *                 .vpcAccess(WorkerPoolTemplateVpcAccessArgs.builder()
 *                     .networkInterfaces(WorkerPoolTemplateVpcAccessNetworkInterfaceArgs.builder()
 *                         .network("default")
 *                         .subnetwork("default")
 *                         .tags(                        
 *                             "tag1",
 *                             "tag2",
 *                             "tag3")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudrunv2 Worker Pool Gpu
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.cloudrunv2.WorkerPool;
 * import com.pulumi.gcp.cloudrunv2.WorkerPoolArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateNodeSelectorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new WorkerPool("default", WorkerPoolArgs.builder()
 *             .name("cloudrun-worker-pool")
 *             .location("us-central1")
 *             .deletionProtection(false)
 *             .launchStage("ALPHA")
 *             .template(WorkerPoolTemplateArgs.builder()
 *                 .containers(WorkerPoolTemplateContainerArgs.builder()
 *                     .image("us-docker.pkg.dev/cloudrun/container/worker-pool")
 *                     .resources(WorkerPoolTemplateContainerResourcesArgs.builder()
 *                         .limits(Map.ofEntries(
 *                             Map.entry("cpu", "4"),
 *                             Map.entry("memory", "16Gi"),
 *                             Map.entry("nvidia.com/gpu", "1")
 *                         ))
 *                         .build())
 *                     .build())
 *                 .nodeSelector(WorkerPoolTemplateNodeSelectorArgs.builder()
 *                     .accelerator("nvidia-l4")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudrunv2 Worker Pool Secret
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.cloudrunv2.WorkerPool;
 * import com.pulumi.gcp.cloudrunv2.WorkerPoolArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamMember;
 * import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var secret = new Secret("secret", SecretArgs.builder()
 *             .secretId("secret-1")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto(SecretReplicationAutoArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var secret_version_data = new SecretVersion("secret-version-data", SecretVersionArgs.builder()
 *             .secret(secret.name())
 *             .secretData("secret-data")
 *             .build());
 * 
 *         var default_ = new WorkerPool("default", WorkerPoolArgs.builder()
 *             .name("cloudrun-worker-pool")
 *             .location("us-central1")
 *             .deletionProtection(false)
 *             .launchStage("BETA")
 *             .template(WorkerPoolTemplateArgs.builder()
 *                 .volumes(WorkerPoolTemplateVolumeArgs.builder()
 *                     .name("a-volume")
 *                     .secret(WorkerPoolTemplateVolumeSecretArgs.builder()
 *                         .secret(secret.secretId())
 *                         .defaultMode(292)
 *                         .items(WorkerPoolTemplateVolumeSecretItemArgs.builder()
 *                             .version("1")
 *                             .path("my-secret")
 *                             .mode(444)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .containers(WorkerPoolTemplateContainerArgs.builder()
 *                     .image("us-docker.pkg.dev/cloudrun/container/worker-pool")
 *                     .volumeMounts(WorkerPoolTemplateContainerVolumeMountArgs.builder()
 *                         .name("a-volume")
 *                         .mountPath("/secrets")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secret_version_data)
 *                 .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
 *             .secretId(secret.id())
 *             .role("roles/secretmanager.secretAccessor")
 *             .member(String.format("serviceAccount:%s-compute}{@literal @}{@code developer.gserviceaccount.com", project.number()))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secret)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudrunv2 Worker Pool Multicontainer
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.cloudrunv2.WorkerPool;
 * import com.pulumi.gcp.cloudrunv2.WorkerPoolArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new WorkerPool("default", WorkerPoolArgs.builder()
 *             .name("cloudrun-worker-pool")
 *             .location("us-central1")
 *             .deletionProtection(false)
 *             .launchStage("BETA")
 *             .template(WorkerPoolTemplateArgs.builder()
 *                 .containers(                
 *                     WorkerPoolTemplateContainerArgs.builder()
 *                         .name("hello-1")
 *                         .image("us-docker.pkg.dev/cloudrun/container/worker-pool")
 *                         .volumeMounts(WorkerPoolTemplateContainerVolumeMountArgs.builder()
 *                             .name("empty-dir-volume")
 *                             .mountPath("/mnt")
 *                             .build())
 *                         .build(),
 *                     WorkerPoolTemplateContainerArgs.builder()
 *                         .name("hello-2")
 *                         .image("us-docker.pkg.dev/cloudrun/container/worker-pool")
 *                         .build())
 *                 .volumes(WorkerPoolTemplateVolumeArgs.builder()
 *                     .name("empty-dir-volume")
 *                     .emptyDir(WorkerPoolTemplateVolumeEmptyDirArgs.builder()
 *                         .medium("MEMORY")
 *                         .sizeLimit("256Mi")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudrunv2 Worker Pool Mount Gcs
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.cloudrunv2.WorkerPool;
 * import com.pulumi.gcp.cloudrunv2.WorkerPoolArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultBucket = new Bucket("defaultBucket", BucketArgs.builder()
 *             .name("cloudrun-worker-pool")
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var default_ = new WorkerPool("default", WorkerPoolArgs.builder()
 *             .name("cloudrun-worker-pool")
 *             .location("us-central1")
 *             .deletionProtection(false)
 *             .launchStage("BETA")
 *             .template(WorkerPoolTemplateArgs.builder()
 *                 .containers(WorkerPoolTemplateContainerArgs.builder()
 *                     .image("us-docker.pkg.dev/cloudrun/container/worker-pool")
 *                     .volumeMounts(WorkerPoolTemplateContainerVolumeMountArgs.builder()
 *                         .name("bucket")
 *                         .mountPath("/var/www")
 *                         .build())
 *                     .build())
 *                 .volumes(WorkerPoolTemplateVolumeArgs.builder()
 *                     .name("bucket")
 *                     .gcs(WorkerPoolTemplateVolumeGcsArgs.builder()
 *                         .bucket(defaultBucket.name())
 *                         .readOnly(false)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudrunv2 Worker Pool Mount Nfs
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.filestore.Instance;
 * import com.pulumi.gcp.filestore.InstanceArgs;
 * import com.pulumi.gcp.filestore.inputs.InstanceFileSharesArgs;
 * import com.pulumi.gcp.filestore.inputs.InstanceNetworkArgs;
 * import com.pulumi.gcp.cloudrunv2.WorkerPool;
 * import com.pulumi.gcp.cloudrunv2.WorkerPoolArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateVpcAccessArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultInstance = new Instance("defaultInstance", InstanceArgs.builder()
 *             .name("cloudrun-worker-pool")
 *             .location("us-central1-b")
 *             .tier("BASIC_HDD")
 *             .fileShares(InstanceFileSharesArgs.builder()
 *                 .capacityGb(1024)
 *                 .name("share1")
 *                 .build())
 *             .networks(InstanceNetworkArgs.builder()
 *                 .network("default")
 *                 .modes("MODE_IPV4")
 *                 .build())
 *             .build());
 * 
 *         var default_ = new WorkerPool("default", WorkerPoolArgs.builder()
 *             .name("cloudrun-worker-pool")
 *             .location("us-central1")
 *             .deletionProtection(false)
 *             .launchStage("BETA")
 *             .template(WorkerPoolTemplateArgs.builder()
 *                 .containers(WorkerPoolTemplateContainerArgs.builder()
 *                     .image("us-docker.pkg.dev/cloudrun/container/worker-pool:latest")
 *                     .volumeMounts(WorkerPoolTemplateContainerVolumeMountArgs.builder()
 *                         .name("nfs")
 *                         .mountPath("/mnt/nfs/filestore")
 *                         .build())
 *                     .build())
 *                 .vpcAccess(WorkerPoolTemplateVpcAccessArgs.builder()
 *                     .networkInterfaces(WorkerPoolTemplateVpcAccessNetworkInterfaceArgs.builder()
 *                         .network("default")
 *                         .subnetwork("default")
 *                         .build())
 *                     .build())
 *                 .volumes(WorkerPoolTemplateVolumeArgs.builder()
 *                     .name("nfs")
 *                     .nfs(WorkerPoolTemplateVolumeNfsArgs.builder()
 *                         .server(defaultInstance.networks().applyValue(_networks -> _networks[0].ipAddresses()[0]))
 *                         .path("/share1")
 *                         .readOnly(false)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudrunv2 Worker Pool Custom Audiences
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.cloudrunv2.WorkerPool;
 * import com.pulumi.gcp.cloudrunv2.WorkerPoolArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.WorkerPoolTemplateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new WorkerPool("default", WorkerPoolArgs.builder()
 *             .name("cloudrun-worker-pool")
 *             .location("us-central1")
 *             .deletionProtection(false)
 *             .launchStage("BETA")
 *             .customAudiences("aud1")
 *             .template(WorkerPoolTemplateArgs.builder()
 *                 .containers(WorkerPoolTemplateContainerArgs.builder()
 *                     .image("us-docker.pkg.dev/cloudrun/container/worker-pool")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * WorkerPool can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/workerPools/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, WorkerPool can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:cloudrunv2/workerPool:WorkerPool default projects/{{project}}/locations/{{location}}/workerPools/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:cloudrunv2/workerPool:WorkerPool default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:cloudrunv2/workerPool:WorkerPool default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:cloudrunv2/workerPool:WorkerPool")
public class WorkerPool extends com.pulumi.resources.CustomResource {
    /**
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
     * should be preserved when modifying objects. Cloud Run API v2 does not support annotations with &#39;run.googleapis.com&#39;,
     * &#39;cloud.googleapis.com&#39;, &#39;serving.knative.dev&#39;, or &#39;autoscaling.knative.dev&#39; namespaces, and they will be rejected in new
     * resources. All system annotations in v1 now have a corresponding field in v2 WorkerPool. This field follows Kubernetes
     * annotations&#39; namespacing, limits, and rules. **Note**: This field is non-authoritative, and will only manage the
     * annotations present in your configuration. Please refer to the field &#39;effective_annotations&#39; for all of the annotations
     * present on the resource.
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotations;

    /**
     * @return Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
     * should be preserved when modifying objects. Cloud Run API v2 does not support annotations with &#39;run.googleapis.com&#39;,
     * &#39;cloud.googleapis.com&#39;, &#39;serving.knative.dev&#39;, or &#39;autoscaling.knative.dev&#39; namespaces, and they will be rejected in new
     * resources. All system annotations in v1 now have a corresponding field in v2 WorkerPool. This field follows Kubernetes
     * annotations&#39; namespacing, limits, and rules. **Note**: This field is non-authoritative, and will only manage the
     * annotations present in your configuration. Please refer to the field &#39;effective_annotations&#39; for all of the annotations
     * present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    /**
     * Settings for the Binary Authorization feature.
     * 
     */
    @Export(name="binaryAuthorization", refs={WorkerPoolBinaryAuthorization.class}, tree="[0]")
    private Output</* @Nullable */ WorkerPoolBinaryAuthorization> binaryAuthorization;

    /**
     * @return Settings for the Binary Authorization feature.
     * 
     */
    public Output<Optional<WorkerPoolBinaryAuthorization>> binaryAuthorization() {
        return Codegen.optional(this.binaryAuthorization);
    }
    /**
     * Arbitrary identifier for the API client.
     * 
     */
    @Export(name="client", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> client;

    /**
     * @return Arbitrary identifier for the API client.
     * 
     */
    public Output<Optional<String>> client() {
        return Codegen.optional(this.client);
    }
    /**
     * Arbitrary version identifier for the API client.
     * 
     */
    @Export(name="clientVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientVersion;

    /**
     * @return Arbitrary version identifier for the API client.
     * 
     */
    public Output<Optional<String>> clientVersion() {
        return Codegen.optional(this.clientVersion);
    }
    /**
     * The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the WorkerPool does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     * 
     */
    @Export(name="conditions", refs={List.class,WorkerPoolCondition.class}, tree="[0,1]")
    private Output<List<WorkerPoolCondition>> conditions;

    /**
     * @return The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the WorkerPool does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     * 
     */
    public Output<List<WorkerPoolCondition>> conditions() {
        return this.conditions;
    }
    /**
     * The creation time.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The creation time.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Email address of the authenticated creator.
     * 
     */
    @Export(name="creator", refs={String.class}, tree="[0]")
    private Output<String> creator;

    /**
     * @return Email address of the authenticated creator.
     * 
     */
    public Output<String> creator() {
        return this.creator;
    }
    /**
     * One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in
     * a string. The custom audiences are encoded in the token and used to authenticate requests. For more information, see
     * https://cloud.google.com/run/docs/configuring/custom-audiences.
     * 
     */
    @Export(name="customAudiences", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> customAudiences;

    /**
     * @return One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in
     * a string. The custom audiences are encoded in the token and used to authenticate requests. For more information, see
     * https://cloud.google.com/run/docs/configuring/custom-audiences.
     * 
     */
    public Output<Optional<List<String>>> customAudiences() {
        return Codegen.optional(this.customAudiences);
    }
    /**
     * The deletion time.
     * 
     */
    @Export(name="deleteTime", refs={String.class}, tree="[0]")
    private Output<String> deleteTime;

    /**
     * @return The deletion time.
     * 
     */
    public Output<String> deleteTime() {
        return this.deleteTime;
    }
    @Export(name="deletionProtection", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deletionProtection;

    public Output<Optional<Boolean>> deletionProtection() {
        return Codegen.optional(this.deletionProtection);
    }
    /**
     * User-provided description of the WorkerPool. This field currently has a 512-character limit.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return User-provided description of the WorkerPool. This field currently has a 512-character limit.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    @Export(name="effectiveAnnotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveAnnotations;

    public Output<Map<String,String>> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * For a deleted resource, the time after which it will be permanently deleted.
     * 
     */
    @Export(name="expireTime", refs={String.class}, tree="[0]")
    private Output<String> expireTime;

    /**
     * @return For a deleted resource, the time after which it will be permanently deleted.
     * 
     */
    public Output<String> expireTime() {
        return this.expireTime;
    }
    /**
     * A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     * 
     */
    @Export(name="generation", refs={String.class}, tree="[0]")
    private Output<String> generation;

    /**
     * @return A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     * 
     */
    public Output<String> generation() {
        return this.generation;
    }
    /**
     * Detailed status information for corresponding instance splits. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     * 
     */
    @Export(name="instanceSplitStatuses", refs={List.class,WorkerPoolInstanceSplitStatus.class}, tree="[0,1]")
    private Output<List<WorkerPoolInstanceSplitStatus>> instanceSplitStatuses;

    /**
     * @return Detailed status information for corresponding instance splits. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     * 
     */
    public Output<List<WorkerPoolInstanceSplitStatus>> instanceSplitStatuses() {
        return this.instanceSplitStatuses;
    }
    /**
     * Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is
     * empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.
     * 
     */
    @Export(name="instanceSplits", refs={List.class,WorkerPoolInstanceSplit.class}, tree="[0,1]")
    private Output<List<WorkerPoolInstanceSplit>> instanceSplits;

    /**
     * @return Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is
     * empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.
     * 
     */
    public Output<List<WorkerPoolInstanceSplit>> instanceSplits() {
        return this.instanceSplits;
    }
    /**
     * Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with
     * Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment,
     * state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
     * https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with
     * &#39;run.googleapis.com&#39;, &#39;cloud.googleapis.com&#39;, &#39;serving.knative.dev&#39;, or &#39;autoscaling.knative.dev&#39; namespaces, and they
     * will be rejected. All system labels in v1 now have a corresponding field in v2 WorkerPool. **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with
     * Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment,
     * state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
     * https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with
     * &#39;run.googleapis.com&#39;, &#39;cloud.googleapis.com&#39;, &#39;serving.knative.dev&#39;, or &#39;autoscaling.knative.dev&#39; namespaces, and they
     * will be rejected. All system labels in v1 now have a corresponding field in v2 WorkerPool. **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Email address of the last authenticated modifier.
     * 
     */
    @Export(name="lastModifier", refs={String.class}, tree="[0]")
    private Output<String> lastModifier;

    /**
     * @return Email address of the last authenticated modifier.
     * 
     */
    public Output<String> lastModifier() {
        return this.lastModifier;
    }
    /**
     * Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * 
     */
    @Export(name="latestCreatedRevision", refs={String.class}, tree="[0]")
    private Output<String> latestCreatedRevision;

    /**
     * @return Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * 
     */
    public Output<String> latestCreatedRevision() {
        return this.latestCreatedRevision;
    }
    /**
     * Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * 
     */
    @Export(name="latestReadyRevision", refs={String.class}, tree="[0]")
    private Output<String> latestReadyRevision;

    /**
     * @return Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * 
     */
    public Output<String> latestReadyRevision() {
        return this.latestReadyRevision;
    }
    /**
     * The launch stage as defined by [Google Cloud Platform Launch
     * Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA. If no value is
     * specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that
     * stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as
     * input, but only BETA and GA-level features are used, this field will be BETA on output. Possible values:
     * [&#34;UNIMPLEMENTED&#34;, &#34;PRELAUNCH&#34;, &#34;EARLY_ACCESS&#34;, &#34;ALPHA&#34;, &#34;BETA&#34;, &#34;GA&#34;, &#34;DEPRECATED&#34;]
     * 
     */
    @Export(name="launchStage", refs={String.class}, tree="[0]")
    private Output<String> launchStage;

    /**
     * @return The launch stage as defined by [Google Cloud Platform Launch
     * Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA. If no value is
     * specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that
     * stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as
     * input, but only BETA and GA-level features are used, this field will be BETA on output. Possible values:
     * [&#34;UNIMPLEMENTED&#34;, &#34;PRELAUNCH&#34;, &#34;EARLY_ACCESS&#34;, &#34;ALPHA&#34;, &#34;BETA&#34;, &#34;GA&#34;, &#34;DEPRECATED&#34;]
     * 
     */
    public Output<String> launchStage() {
        return this.launchStage;
    }
    /**
     * The location of the cloud run worker pool
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the cloud run worker pool
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Name of the WorkerPool.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the WorkerPool.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The generation of this WorkerPool currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     * 
     */
    @Export(name="observedGeneration", refs={String.class}, tree="[0]")
    private Output<String> observedGeneration;

    /**
     * @return The generation of this WorkerPool currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     * 
     */
    public Output<String> observedGeneration() {
        return this.observedGeneration;
    }
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Returns true if the WorkerPool is currently being acted upon by the system to bring it into the desired state.
     * When a new WorkerPool is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the WorkerPool to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the WorkerPool, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
     * If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
     * If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created WorkerPools. Additional information on the failure can be found in terminalCondition and conditions.
     * 
     */
    @Export(name="reconciling", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> reconciling;

    /**
     * @return Returns true if the WorkerPool is currently being acted upon by the system to bring it into the desired state.
     * When a new WorkerPool is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the WorkerPool to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the WorkerPool, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
     * If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
     * If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created WorkerPools. Additional information on the failure can be found in terminalCondition and conditions.
     * 
     */
    public Output<Boolean> reconciling() {
        return this.reconciling;
    }
    /**
     * Scaling settings that apply to the worker pool.
     * 
     */
    @Export(name="scaling", refs={WorkerPoolScaling.class}, tree="[0]")
    private Output<WorkerPoolScaling> scaling;

    /**
     * @return Scaling settings that apply to the worker pool.
     * 
     */
    public Output<WorkerPoolScaling> scaling() {
        return this.scaling;
    }
    /**
     * The template used to create revisions for this WorkerPool.
     * Structure is documented below.
     * 
     */
    @Export(name="template", refs={WorkerPoolTemplate.class}, tree="[0]")
    private Output<WorkerPoolTemplate> template;

    /**
     * @return The template used to create revisions for this WorkerPool.
     * Structure is documented below.
     * 
     */
    public Output<WorkerPoolTemplate> template() {
        return this.template;
    }
    /**
     * The Condition of this WorkerPool, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     * 
     */
    @Export(name="terminalConditions", refs={List.class,WorkerPoolTerminalCondition.class}, tree="[0,1]")
    private Output<List<WorkerPoolTerminalCondition>> terminalConditions;

    /**
     * @return The Condition of this WorkerPool, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     * 
     */
    public Output<List<WorkerPoolTerminalCondition>> terminalConditions() {
        return this.terminalConditions;
    }
    /**
     * Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * The last-modified time.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The last-modified time.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WorkerPool(java.lang.String name) {
        this(name, WorkerPoolArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WorkerPool(java.lang.String name, WorkerPoolArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WorkerPool(java.lang.String name, WorkerPoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudrunv2/workerPool:WorkerPool", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private WorkerPool(java.lang.String name, Output<java.lang.String> id, @Nullable WorkerPoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudrunv2/workerPool:WorkerPool", name, state, makeResourceOptions(options, id), false);
    }

    private static WorkerPoolArgs makeArgs(WorkerPoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? WorkerPoolArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WorkerPool get(java.lang.String name, Output<java.lang.String> id, @Nullable WorkerPoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new WorkerPool(name, id, state, options);
    }
}
