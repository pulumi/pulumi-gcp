// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddomains;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.clouddomains.inputs.RegistrationContactSettingsArgs;
import com.pulumi.gcp.clouddomains.inputs.RegistrationDnsSettingsArgs;
import com.pulumi.gcp.clouddomains.inputs.RegistrationManagementSettingsArgs;
import com.pulumi.gcp.clouddomains.inputs.RegistrationYearlyPriceArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistrationArgs Empty = new RegistrationArgs();

    /**
     * The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
     * 
     */
    @Import(name="contactNotices")
    private @Nullable Output<List<String>> contactNotices;

    /**
     * @return The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
     * 
     */
    public Optional<Output<List<String>>> contactNotices() {
        return Optional.ofNullable(this.contactNotices);
    }

    /**
     * Required. Settings for contact information linked to the Registration.
     * Structure is documented below.
     * 
     */
    @Import(name="contactSettings", required=true)
    private Output<RegistrationContactSettingsArgs> contactSettings;

    /**
     * @return Required. Settings for contact information linked to the Registration.
     * Structure is documented below.
     * 
     */
    public Output<RegistrationContactSettingsArgs> contactSettings() {
        return this.contactSettings;
    }

    /**
     * Settings controlling the DNS configuration of the Registration.
     * Structure is documented below.
     * 
     */
    @Import(name="dnsSettings")
    private @Nullable Output<RegistrationDnsSettingsArgs> dnsSettings;

    /**
     * @return Settings controlling the DNS configuration of the Registration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegistrationDnsSettingsArgs>> dnsSettings() {
        return Optional.ofNullable(this.dnsSettings);
    }

    /**
     * Required. The domain name. Unicode domain names must be expressed in Punycode format.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return Required. The domain name. Unicode domain names must be expressed in Punycode format.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
     * 
     */
    @Import(name="domainNotices")
    private @Nullable Output<List<String>> domainNotices;

    /**
     * @return The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
     * 
     */
    public Optional<Output<List<String>>> domainNotices() {
        return Optional.ofNullable(this.domainNotices);
    }

    /**
     * Set of labels associated with the Registration.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Set of labels associated with the Registration.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Settings for management of the Registration, including renewal, billing, and transfer
     * Structure is documented below.
     * 
     */
    @Import(name="managementSettings")
    private @Nullable Output<RegistrationManagementSettingsArgs> managementSettings;

    /**
     * @return Settings for management of the Registration, including renewal, billing, and transfer
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegistrationManagementSettingsArgs>> managementSettings() {
        return Optional.ofNullable(this.managementSettings);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
     * registrations.retrieveRegisterParameters or registrations.searchDomains calls.
     * Structure is documented below.
     * 
     */
    @Import(name="yearlyPrice", required=true)
    private Output<RegistrationYearlyPriceArgs> yearlyPrice;

    /**
     * @return Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
     * registrations.retrieveRegisterParameters or registrations.searchDomains calls.
     * Structure is documented below.
     * 
     */
    public Output<RegistrationYearlyPriceArgs> yearlyPrice() {
        return this.yearlyPrice;
    }

    private RegistrationArgs() {}

    private RegistrationArgs(RegistrationArgs $) {
        this.contactNotices = $.contactNotices;
        this.contactSettings = $.contactSettings;
        this.dnsSettings = $.dnsSettings;
        this.domainName = $.domainName;
        this.domainNotices = $.domainNotices;
        this.labels = $.labels;
        this.location = $.location;
        this.managementSettings = $.managementSettings;
        this.project = $.project;
        this.yearlyPrice = $.yearlyPrice;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistrationArgs $;

        public Builder() {
            $ = new RegistrationArgs();
        }

        public Builder(RegistrationArgs defaults) {
            $ = new RegistrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactNotices The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
         * 
         * @return builder
         * 
         */
        public Builder contactNotices(@Nullable Output<List<String>> contactNotices) {
            $.contactNotices = contactNotices;
            return this;
        }

        /**
         * @param contactNotices The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
         * 
         * @return builder
         * 
         */
        public Builder contactNotices(List<String> contactNotices) {
            return contactNotices(Output.of(contactNotices));
        }

        /**
         * @param contactNotices The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
         * 
         * @return builder
         * 
         */
        public Builder contactNotices(String... contactNotices) {
            return contactNotices(List.of(contactNotices));
        }

        /**
         * @param contactSettings Required. Settings for contact information linked to the Registration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder contactSettings(Output<RegistrationContactSettingsArgs> contactSettings) {
            $.contactSettings = contactSettings;
            return this;
        }

        /**
         * @param contactSettings Required. Settings for contact information linked to the Registration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder contactSettings(RegistrationContactSettingsArgs contactSettings) {
            return contactSettings(Output.of(contactSettings));
        }

        /**
         * @param dnsSettings Settings controlling the DNS configuration of the Registration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dnsSettings(@Nullable Output<RegistrationDnsSettingsArgs> dnsSettings) {
            $.dnsSettings = dnsSettings;
            return this;
        }

        /**
         * @param dnsSettings Settings controlling the DNS configuration of the Registration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dnsSettings(RegistrationDnsSettingsArgs dnsSettings) {
            return dnsSettings(Output.of(dnsSettings));
        }

        /**
         * @param domainName Required. The domain name. Unicode domain names must be expressed in Punycode format.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Required. The domain name. Unicode domain names must be expressed in Punycode format.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param domainNotices The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
         * 
         * @return builder
         * 
         */
        public Builder domainNotices(@Nullable Output<List<String>> domainNotices) {
            $.domainNotices = domainNotices;
            return this;
        }

        /**
         * @param domainNotices The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
         * 
         * @return builder
         * 
         */
        public Builder domainNotices(List<String> domainNotices) {
            return domainNotices(Output.of(domainNotices));
        }

        /**
         * @param domainNotices The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
         * 
         * @return builder
         * 
         */
        public Builder domainNotices(String... domainNotices) {
            return domainNotices(List.of(domainNotices));
        }

        /**
         * @param labels Set of labels associated with the Registration.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Set of labels associated with the Registration.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managementSettings Settings for management of the Registration, including renewal, billing, and transfer
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder managementSettings(@Nullable Output<RegistrationManagementSettingsArgs> managementSettings) {
            $.managementSettings = managementSettings;
            return this;
        }

        /**
         * @param managementSettings Settings for management of the Registration, including renewal, billing, and transfer
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder managementSettings(RegistrationManagementSettingsArgs managementSettings) {
            return managementSettings(Output.of(managementSettings));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param yearlyPrice Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
         * registrations.retrieveRegisterParameters or registrations.searchDomains calls.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder yearlyPrice(Output<RegistrationYearlyPriceArgs> yearlyPrice) {
            $.yearlyPrice = yearlyPrice;
            return this;
        }

        /**
         * @param yearlyPrice Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
         * registrations.retrieveRegisterParameters or registrations.searchDomains calls.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder yearlyPrice(RegistrationYearlyPriceArgs yearlyPrice) {
            return yearlyPrice(Output.of(yearlyPrice));
        }

        public RegistrationArgs build() {
            if ($.contactSettings == null) {
                throw new MissingRequiredPropertyException("RegistrationArgs", "contactSettings");
            }
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("RegistrationArgs", "domainName");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("RegistrationArgs", "location");
            }
            if ($.yearlyPrice == null) {
                throw new MissingRequiredPropertyException("RegistrationArgs", "yearlyPrice");
            }
            return $;
        }
    }

}
