// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.PacketMirroringCollectorIlbArgs;
import com.pulumi.gcp.compute.inputs.PacketMirroringFilterArgs;
import com.pulumi.gcp.compute.inputs.PacketMirroringMirroredResourcesArgs;
import com.pulumi.gcp.compute.inputs.PacketMirroringNetworkArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PacketMirroringState extends com.pulumi.resources.ResourceArgs {

    public static final PacketMirroringState Empty = new PacketMirroringState();

    /**
     * The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
     * that will be used as collector for mirrored traffic. The
     * specified forwarding rule must have is_mirroring_collector
     * set to true.
     * Structure is documented below.
     * 
     */
    @Import(name="collectorIlb")
    private @Nullable Output<PacketMirroringCollectorIlbArgs> collectorIlb;

    /**
     * @return The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
     * that will be used as collector for mirrored traffic. The
     * specified forwarding rule must have is_mirroring_collector
     * set to true.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PacketMirroringCollectorIlbArgs>> collectorIlb() {
        return Optional.ofNullable(this.collectorIlb);
    }

    /**
     * A human-readable description of the rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human-readable description of the rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A filter for mirrored traffic.  If unset, all traffic is mirrored.
     * Structure is documented below.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<PacketMirroringFilterArgs> filter;

    /**
     * @return A filter for mirrored traffic.  If unset, all traffic is mirrored.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PacketMirroringFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * A means of specifying which resources to mirror.
     * Structure is documented below.
     * 
     */
    @Import(name="mirroredResources")
    private @Nullable Output<PacketMirroringMirroredResourcesArgs> mirroredResources;

    /**
     * @return A means of specifying which resources to mirror.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PacketMirroringMirroredResourcesArgs>> mirroredResources() {
        return Optional.ofNullable(this.mirroredResources);
    }

    /**
     * The name of the packet mirroring rule
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the packet mirroring rule
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the mirrored VPC network. Only packets in this network
     * will be mirrored. All mirrored VMs should have a NIC in the given
     * network. All mirrored subnetworks should belong to the given network.
     * Structure is documented below.
     * 
     */
    @Import(name="network")
    private @Nullable Output<PacketMirroringNetworkArgs> network;

    /**
     * @return Specifies the mirrored VPC network. Only packets in this network
     * will be mirrored. All mirrored VMs should have a NIC in the given
     * network. All mirrored subnetworks should belong to the given network.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PacketMirroringNetworkArgs>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Since only one rule can be active at a time, priority is
     * used to break ties in the case of two rules that apply to
     * the same instances.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Since only one rule can be active at a time, priority is
     * used to break ties in the case of two rules that apply to
     * the same instances.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The Region in which the created address should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The Region in which the created address should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private PacketMirroringState() {}

    private PacketMirroringState(PacketMirroringState $) {
        this.collectorIlb = $.collectorIlb;
        this.description = $.description;
        this.filter = $.filter;
        this.mirroredResources = $.mirroredResources;
        this.name = $.name;
        this.network = $.network;
        this.priority = $.priority;
        this.project = $.project;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PacketMirroringState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PacketMirroringState $;

        public Builder() {
            $ = new PacketMirroringState();
        }

        public Builder(PacketMirroringState defaults) {
            $ = new PacketMirroringState(Objects.requireNonNull(defaults));
        }

        /**
         * @param collectorIlb The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
         * that will be used as collector for mirrored traffic. The
         * specified forwarding rule must have is_mirroring_collector
         * set to true.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder collectorIlb(@Nullable Output<PacketMirroringCollectorIlbArgs> collectorIlb) {
            $.collectorIlb = collectorIlb;
            return this;
        }

        /**
         * @param collectorIlb The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
         * that will be used as collector for mirrored traffic. The
         * specified forwarding rule must have is_mirroring_collector
         * set to true.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder collectorIlb(PacketMirroringCollectorIlbArgs collectorIlb) {
            return collectorIlb(Output.of(collectorIlb));
        }

        /**
         * @param description A human-readable description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human-readable description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param filter A filter for mirrored traffic.  If unset, all traffic is mirrored.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<PacketMirroringFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter A filter for mirrored traffic.  If unset, all traffic is mirrored.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder filter(PacketMirroringFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param mirroredResources A means of specifying which resources to mirror.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mirroredResources(@Nullable Output<PacketMirroringMirroredResourcesArgs> mirroredResources) {
            $.mirroredResources = mirroredResources;
            return this;
        }

        /**
         * @param mirroredResources A means of specifying which resources to mirror.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mirroredResources(PacketMirroringMirroredResourcesArgs mirroredResources) {
            return mirroredResources(Output.of(mirroredResources));
        }

        /**
         * @param name The name of the packet mirroring rule
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the packet mirroring rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network Specifies the mirrored VPC network. Only packets in this network
         * will be mirrored. All mirrored VMs should have a NIC in the given
         * network. All mirrored subnetworks should belong to the given network.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<PacketMirroringNetworkArgs> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Specifies the mirrored VPC network. Only packets in this network
         * will be mirrored. All mirrored VMs should have a NIC in the given
         * network. All mirrored subnetworks should belong to the given network.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder network(PacketMirroringNetworkArgs network) {
            return network(Output.of(network));
        }

        /**
         * @param priority Since only one rule can be active at a time, priority is
         * used to break ties in the case of two rules that apply to
         * the same instances.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Since only one rule can be active at a time, priority is
         * used to break ties in the case of two rules that apply to
         * the same instances.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region The Region in which the created address should reside.
         * If it is not provided, the provider region is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The Region in which the created address should reside.
         * If it is not provided, the provider region is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public PacketMirroringState build() {
            return $;
        }
    }

}
