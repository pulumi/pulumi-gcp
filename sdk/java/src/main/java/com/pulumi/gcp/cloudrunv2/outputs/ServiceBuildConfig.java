// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceBuildConfig {
    /**
     * @return The base image used to build the function.
     * 
     */
    private @Nullable String baseImage;
    /**
     * @return Sets whether the function will receive automatic base image updates.
     * 
     */
    private @Nullable Boolean enableAutomaticUpdates;
    /**
     * @return User-provided build-time environment variables for the function.
     * 
     */
    private @Nullable Map<String,String> environmentVariables;
    /**
     * @return The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;.
     * 
     */
    private @Nullable String functionTarget;
    /**
     * @return Artifact Registry URI to store the built image.
     * 
     */
    private @Nullable String imageUri;
    /**
     * @return (Output)
     * The Cloud Build name of the latest successful deployment of the function.
     * 
     */
    private @Nullable String name;
    /**
     * @return Service account to be used for building the container. The format of this field is `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.
     * 
     */
    private @Nullable String serviceAccount;
    /**
     * @return The Cloud Storage bucket URI where the function source code is located.
     * 
     */
    private @Nullable String sourceLocation;
    /**
     * @return Name of the Cloud Build Custom Worker Pool that should be used to build the Cloud Run function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool.
     * 
     */
    private @Nullable String workerPool;

    private ServiceBuildConfig() {}
    /**
     * @return The base image used to build the function.
     * 
     */
    public Optional<String> baseImage() {
        return Optional.ofNullable(this.baseImage);
    }
    /**
     * @return Sets whether the function will receive automatic base image updates.
     * 
     */
    public Optional<Boolean> enableAutomaticUpdates() {
        return Optional.ofNullable(this.enableAutomaticUpdates);
    }
    /**
     * @return User-provided build-time environment variables for the function.
     * 
     */
    public Map<String,String> environmentVariables() {
        return this.environmentVariables == null ? Map.of() : this.environmentVariables;
    }
    /**
     * @return The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;.
     * 
     */
    public Optional<String> functionTarget() {
        return Optional.ofNullable(this.functionTarget);
    }
    /**
     * @return Artifact Registry URI to store the built image.
     * 
     */
    public Optional<String> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }
    /**
     * @return (Output)
     * The Cloud Build name of the latest successful deployment of the function.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Service account to be used for building the container. The format of this field is `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.
     * 
     */
    public Optional<String> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }
    /**
     * @return The Cloud Storage bucket URI where the function source code is located.
     * 
     */
    public Optional<String> sourceLocation() {
        return Optional.ofNullable(this.sourceLocation);
    }
    /**
     * @return Name of the Cloud Build Custom Worker Pool that should be used to build the Cloud Run function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool.
     * 
     */
    public Optional<String> workerPool() {
        return Optional.ofNullable(this.workerPool);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceBuildConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String baseImage;
        private @Nullable Boolean enableAutomaticUpdates;
        private @Nullable Map<String,String> environmentVariables;
        private @Nullable String functionTarget;
        private @Nullable String imageUri;
        private @Nullable String name;
        private @Nullable String serviceAccount;
        private @Nullable String sourceLocation;
        private @Nullable String workerPool;
        public Builder() {}
        public Builder(ServiceBuildConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseImage = defaults.baseImage;
    	      this.enableAutomaticUpdates = defaults.enableAutomaticUpdates;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.functionTarget = defaults.functionTarget;
    	      this.imageUri = defaults.imageUri;
    	      this.name = defaults.name;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.sourceLocation = defaults.sourceLocation;
    	      this.workerPool = defaults.workerPool;
        }

        @CustomType.Setter
        public Builder baseImage(@Nullable String baseImage) {

            this.baseImage = baseImage;
            return this;
        }
        @CustomType.Setter
        public Builder enableAutomaticUpdates(@Nullable Boolean enableAutomaticUpdates) {

            this.enableAutomaticUpdates = enableAutomaticUpdates;
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(@Nullable Map<String,String> environmentVariables) {

            this.environmentVariables = environmentVariables;
            return this;
        }
        @CustomType.Setter
        public Builder functionTarget(@Nullable String functionTarget) {

            this.functionTarget = functionTarget;
            return this;
        }
        @CustomType.Setter
        public Builder imageUri(@Nullable String imageUri) {

            this.imageUri = imageUri;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(@Nullable String serviceAccount) {

            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder sourceLocation(@Nullable String sourceLocation) {

            this.sourceLocation = sourceLocation;
            return this;
        }
        @CustomType.Setter
        public Builder workerPool(@Nullable String workerPool) {

            this.workerPool = workerPool;
            return this;
        }
        public ServiceBuildConfig build() {
            final var _resultValue = new ServiceBuildConfig();
            _resultValue.baseImage = baseImage;
            _resultValue.enableAutomaticUpdates = enableAutomaticUpdates;
            _resultValue.environmentVariables = environmentVariables;
            _resultValue.functionTarget = functionTarget;
            _resultValue.imageUri = imageUri;
            _resultValue.name = name;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.sourceLocation = sourceLocation;
            _resultValue.workerPool = workerPool;
            return _resultValue;
        }
    }
}
