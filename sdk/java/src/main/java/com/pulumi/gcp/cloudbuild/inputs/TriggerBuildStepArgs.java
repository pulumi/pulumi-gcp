// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudbuild.inputs.TriggerBuildStepVolumeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerBuildStepArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerBuildStepArgs Empty = new TriggerBuildStepArgs();

    /**
     * A list of arguments that will be presented to the step when it is started.
     * If the image used to run the step&#39;s container has an entrypoint, the args
     * are used as arguments to that entrypoint. If the image does not define an
     * entrypoint, the first element in args is used as the entrypoint, and the
     * remainder will be used as arguments.
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<String>> args;

    /**
     * @return A list of arguments that will be presented to the step when it is started.
     * If the image used to run the step&#39;s container has an entrypoint, the args
     * are used as arguments to that entrypoint. If the image does not define an
     * entrypoint, the first element in args is used as the entrypoint, and the
     * remainder will be used as arguments.
     * 
     */
    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * Working directory to use when running this step&#39;s container.
     * If this value is a relative path, it is relative to the build&#39;s working
     * directory. If this value is absolute, it may be outside the build&#39;s working
     * directory, in which case the contents of the path may not be persisted
     * across build step executions, unless a `volume` for that path is specified.
     * If the build specifies a `RepoSource` with `dir` and a step with a
     * `dir`,
     * which specifies an absolute path, the `RepoSource` `dir` is ignored
     * for the step&#39;s execution.
     * 
     */
    @Import(name="dir")
    private @Nullable Output<String> dir;

    /**
     * @return Working directory to use when running this step&#39;s container.
     * If this value is a relative path, it is relative to the build&#39;s working
     * directory. If this value is absolute, it may be outside the build&#39;s working
     * directory, in which case the contents of the path may not be persisted
     * across build step executions, unless a `volume` for that path is specified.
     * If the build specifies a `RepoSource` with `dir` and a step with a
     * `dir`,
     * which specifies an absolute path, the `RepoSource` `dir` is ignored
     * for the step&#39;s execution.
     * 
     */
    public Optional<Output<String>> dir() {
        return Optional.ofNullable(this.dir);
    }

    /**
     * Entrypoint to be used instead of the build step image&#39;s
     * default entrypoint.
     * If unset, the image&#39;s default entrypoint is used
     * 
     */
    @Import(name="entrypoint")
    private @Nullable Output<String> entrypoint;

    /**
     * @return Entrypoint to be used instead of the build step image&#39;s
     * default entrypoint.
     * If unset, the image&#39;s default entrypoint is used
     * 
     */
    public Optional<Output<String>> entrypoint() {
        return Optional.ofNullable(this.entrypoint);
    }

    /**
     * A list of environment variable definitions to be used when
     * running a step.
     * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable
     * &#34;KEY&#34; being given the value &#34;VALUE&#34;.
     * 
     */
    @Import(name="envs")
    private @Nullable Output<List<String>> envs;

    /**
     * @return A list of environment variable definitions to be used when
     * running a step.
     * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable
     * &#34;KEY&#34; being given the value &#34;VALUE&#34;.
     * 
     */
    public Optional<Output<List<String>>> envs() {
        return Optional.ofNullable(this.envs);
    }

    /**
     * Unique identifier for this build step, used in `wait_for` to
     * reference this build step as a dependency.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique identifier for this build step, used in `wait_for` to
     * reference this build step as a dependency.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the container image that will run this particular build step.
     * If the image is available in the host&#39;s Docker daemon&#39;s cache, it will be
     * run directly. If not, the host will attempt to pull the image first, using
     * the builder service account&#39;s credentials if necessary.
     * The Docker daemon&#39;s cache will already have the latest versions of all of
     * the officially supported build steps (see https://github.com/GoogleCloudPlatform/cloud-builders
     * for images and examples).
     * The Docker daemon will also have cached many of the layers for some popular
     * images, like &#34;ubuntu&#34;, &#34;debian&#34;, but they will be refreshed at the time
     * you attempt to use them.
     * If you built an image in a previous build step, it will be stored in the
     * host&#39;s Docker daemon&#39;s cache and is available to use as the name for a
     * later build step.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the container image that will run this particular build step.
     * If the image is available in the host&#39;s Docker daemon&#39;s cache, it will be
     * run directly. If not, the host will attempt to pull the image first, using
     * the builder service account&#39;s credentials if necessary.
     * The Docker daemon&#39;s cache will already have the latest versions of all of
     * the officially supported build steps (see https://github.com/GoogleCloudPlatform/cloud-builders
     * for images and examples).
     * The Docker daemon will also have cached many of the layers for some popular
     * images, like &#34;ubuntu&#34;, &#34;debian&#34;, but they will be refreshed at the time
     * you attempt to use them.
     * If you built an image in a previous build step, it will be stored in the
     * host&#39;s Docker daemon&#39;s cache and is available to use as the name for a
     * later build step.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A shell script to be executed in the step.
     * When script is provided, the user cannot specify the entrypoint or args.
     * 
     */
    @Import(name="script")
    private @Nullable Output<String> script;

    /**
     * @return A shell script to be executed in the step.
     * When script is provided, the user cannot specify the entrypoint or args.
     * 
     */
    public Optional<Output<String>> script() {
        return Optional.ofNullable(this.script);
    }

    /**
     * A list of environment variables which are encrypted using
     * a Cloud Key
     * Management Service crypto key. These values must be specified in
     * the build&#39;s `Secret`.
     * 
     */
    @Import(name="secretEnvs")
    private @Nullable Output<List<String>> secretEnvs;

    /**
     * @return A list of environment variables which are encrypted using
     * a Cloud Key
     * Management Service crypto key. These values must be specified in
     * the build&#39;s `Secret`.
     * 
     */
    public Optional<Output<List<String>>> secretEnvs() {
        return Optional.ofNullable(this.secretEnvs);
    }

    /**
     * Time limit for executing this build step. If not defined,
     * the step has no
     * time limit and will be allowed to continue to run until either it
     * completes or the build itself times out.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    /**
     * @return Time limit for executing this build step. If not defined,
     * the step has no
     * time limit and will be allowed to continue to run until either it
     * completes or the build itself times out.
     * 
     */
    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Output only. Stores timing information for executing this
     * build step.
     * 
     */
    @Import(name="timing")
    private @Nullable Output<String> timing;

    /**
     * @return Output only. Stores timing information for executing this
     * build step.
     * 
     */
    public Optional<Output<String>> timing() {
        return Optional.ofNullable(this.timing);
    }

    /**
     * List of volumes to mount into the build step.
     * Each volume is created as an empty volume prior to execution of the
     * build step. Upon completion of the build, volumes and their contents
     * are discarded.
     * Using a named volume in only one step is not valid as it is
     * indicative of a build request with an incorrect configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<TriggerBuildStepVolumeArgs>> volumes;

    /**
     * @return List of volumes to mount into the build step.
     * Each volume is created as an empty volume prior to execution of the
     * build step. Upon completion of the build, volumes and their contents
     * are discarded.
     * Using a named volume in only one step is not valid as it is
     * indicative of a build request with an incorrect configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<TriggerBuildStepVolumeArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    /**
     * The ID(s) of the step(s) that this build step depends on.
     * This build step will not start until all the build steps in `wait_for`
     * have completed successfully. If `wait_for` is empty, this build step
     * will start when all previous build steps in the `Build.Steps` list
     * have completed successfully.
     * 
     */
    @Import(name="waitFors")
    private @Nullable Output<List<String>> waitFors;

    /**
     * @return The ID(s) of the step(s) that this build step depends on.
     * This build step will not start until all the build steps in `wait_for`
     * have completed successfully. If `wait_for` is empty, this build step
     * will start when all previous build steps in the `Build.Steps` list
     * have completed successfully.
     * 
     */
    public Optional<Output<List<String>>> waitFors() {
        return Optional.ofNullable(this.waitFors);
    }

    private TriggerBuildStepArgs() {}

    private TriggerBuildStepArgs(TriggerBuildStepArgs $) {
        this.args = $.args;
        this.dir = $.dir;
        this.entrypoint = $.entrypoint;
        this.envs = $.envs;
        this.id = $.id;
        this.name = $.name;
        this.script = $.script;
        this.secretEnvs = $.secretEnvs;
        this.timeout = $.timeout;
        this.timing = $.timing;
        this.volumes = $.volumes;
        this.waitFors = $.waitFors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerBuildStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerBuildStepArgs $;

        public Builder() {
            $ = new TriggerBuildStepArgs();
        }

        public Builder(TriggerBuildStepArgs defaults) {
            $ = new TriggerBuildStepArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param args A list of arguments that will be presented to the step when it is started.
         * If the image used to run the step&#39;s container has an entrypoint, the args
         * are used as arguments to that entrypoint. If the image does not define an
         * entrypoint, the first element in args is used as the entrypoint, and the
         * remainder will be used as arguments.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args A list of arguments that will be presented to the step when it is started.
         * If the image used to run the step&#39;s container has an entrypoint, the args
         * are used as arguments to that entrypoint. If the image does not define an
         * entrypoint, the first element in args is used as the entrypoint, and the
         * remainder will be used as arguments.
         * 
         * @return builder
         * 
         */
        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        /**
         * @param args A list of arguments that will be presented to the step when it is started.
         * If the image used to run the step&#39;s container has an entrypoint, the args
         * are used as arguments to that entrypoint. If the image does not define an
         * entrypoint, the first element in args is used as the entrypoint, and the
         * remainder will be used as arguments.
         * 
         * @return builder
         * 
         */
        public Builder args(String... args) {
            return args(List.of(args));
        }

        /**
         * @param dir Working directory to use when running this step&#39;s container.
         * If this value is a relative path, it is relative to the build&#39;s working
         * directory. If this value is absolute, it may be outside the build&#39;s working
         * directory, in which case the contents of the path may not be persisted
         * across build step executions, unless a `volume` for that path is specified.
         * If the build specifies a `RepoSource` with `dir` and a step with a
         * `dir`,
         * which specifies an absolute path, the `RepoSource` `dir` is ignored
         * for the step&#39;s execution.
         * 
         * @return builder
         * 
         */
        public Builder dir(@Nullable Output<String> dir) {
            $.dir = dir;
            return this;
        }

        /**
         * @param dir Working directory to use when running this step&#39;s container.
         * If this value is a relative path, it is relative to the build&#39;s working
         * directory. If this value is absolute, it may be outside the build&#39;s working
         * directory, in which case the contents of the path may not be persisted
         * across build step executions, unless a `volume` for that path is specified.
         * If the build specifies a `RepoSource` with `dir` and a step with a
         * `dir`,
         * which specifies an absolute path, the `RepoSource` `dir` is ignored
         * for the step&#39;s execution.
         * 
         * @return builder
         * 
         */
        public Builder dir(String dir) {
            return dir(Output.of(dir));
        }

        /**
         * @param entrypoint Entrypoint to be used instead of the build step image&#39;s
         * default entrypoint.
         * If unset, the image&#39;s default entrypoint is used
         * 
         * @return builder
         * 
         */
        public Builder entrypoint(@Nullable Output<String> entrypoint) {
            $.entrypoint = entrypoint;
            return this;
        }

        /**
         * @param entrypoint Entrypoint to be used instead of the build step image&#39;s
         * default entrypoint.
         * If unset, the image&#39;s default entrypoint is used
         * 
         * @return builder
         * 
         */
        public Builder entrypoint(String entrypoint) {
            return entrypoint(Output.of(entrypoint));
        }

        /**
         * @param envs A list of environment variable definitions to be used when
         * running a step.
         * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable
         * &#34;KEY&#34; being given the value &#34;VALUE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder envs(@Nullable Output<List<String>> envs) {
            $.envs = envs;
            return this;
        }

        /**
         * @param envs A list of environment variable definitions to be used when
         * running a step.
         * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable
         * &#34;KEY&#34; being given the value &#34;VALUE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder envs(List<String> envs) {
            return envs(Output.of(envs));
        }

        /**
         * @param envs A list of environment variable definitions to be used when
         * running a step.
         * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable
         * &#34;KEY&#34; being given the value &#34;VALUE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder envs(String... envs) {
            return envs(List.of(envs));
        }

        /**
         * @param id Unique identifier for this build step, used in `wait_for` to
         * reference this build step as a dependency.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier for this build step, used in `wait_for` to
         * reference this build step as a dependency.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name The name of the container image that will run this particular build step.
         * If the image is available in the host&#39;s Docker daemon&#39;s cache, it will be
         * run directly. If not, the host will attempt to pull the image first, using
         * the builder service account&#39;s credentials if necessary.
         * The Docker daemon&#39;s cache will already have the latest versions of all of
         * the officially supported build steps (see https://github.com/GoogleCloudPlatform/cloud-builders
         * for images and examples).
         * The Docker daemon will also have cached many of the layers for some popular
         * images, like &#34;ubuntu&#34;, &#34;debian&#34;, but they will be refreshed at the time
         * you attempt to use them.
         * If you built an image in a previous build step, it will be stored in the
         * host&#39;s Docker daemon&#39;s cache and is available to use as the name for a
         * later build step.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the container image that will run this particular build step.
         * If the image is available in the host&#39;s Docker daemon&#39;s cache, it will be
         * run directly. If not, the host will attempt to pull the image first, using
         * the builder service account&#39;s credentials if necessary.
         * The Docker daemon&#39;s cache will already have the latest versions of all of
         * the officially supported build steps (see https://github.com/GoogleCloudPlatform/cloud-builders
         * for images and examples).
         * The Docker daemon will also have cached many of the layers for some popular
         * images, like &#34;ubuntu&#34;, &#34;debian&#34;, but they will be refreshed at the time
         * you attempt to use them.
         * If you built an image in a previous build step, it will be stored in the
         * host&#39;s Docker daemon&#39;s cache and is available to use as the name for a
         * later build step.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param script A shell script to be executed in the step.
         * When script is provided, the user cannot specify the entrypoint or args.
         * 
         * @return builder
         * 
         */
        public Builder script(@Nullable Output<String> script) {
            $.script = script;
            return this;
        }

        /**
         * @param script A shell script to be executed in the step.
         * When script is provided, the user cannot specify the entrypoint or args.
         * 
         * @return builder
         * 
         */
        public Builder script(String script) {
            return script(Output.of(script));
        }

        /**
         * @param secretEnvs A list of environment variables which are encrypted using
         * a Cloud Key
         * Management Service crypto key. These values must be specified in
         * the build&#39;s `Secret`.
         * 
         * @return builder
         * 
         */
        public Builder secretEnvs(@Nullable Output<List<String>> secretEnvs) {
            $.secretEnvs = secretEnvs;
            return this;
        }

        /**
         * @param secretEnvs A list of environment variables which are encrypted using
         * a Cloud Key
         * Management Service crypto key. These values must be specified in
         * the build&#39;s `Secret`.
         * 
         * @return builder
         * 
         */
        public Builder secretEnvs(List<String> secretEnvs) {
            return secretEnvs(Output.of(secretEnvs));
        }

        /**
         * @param secretEnvs A list of environment variables which are encrypted using
         * a Cloud Key
         * Management Service crypto key. These values must be specified in
         * the build&#39;s `Secret`.
         * 
         * @return builder
         * 
         */
        public Builder secretEnvs(String... secretEnvs) {
            return secretEnvs(List.of(secretEnvs));
        }

        /**
         * @param timeout Time limit for executing this build step. If not defined,
         * the step has no
         * time limit and will be allowed to continue to run until either it
         * completes or the build itself times out.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Time limit for executing this build step. If not defined,
         * the step has no
         * time limit and will be allowed to continue to run until either it
         * completes or the build itself times out.
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param timing Output only. Stores timing information for executing this
         * build step.
         * 
         * @return builder
         * 
         */
        public Builder timing(@Nullable Output<String> timing) {
            $.timing = timing;
            return this;
        }

        /**
         * @param timing Output only. Stores timing information for executing this
         * build step.
         * 
         * @return builder
         * 
         */
        public Builder timing(String timing) {
            return timing(Output.of(timing));
        }

        /**
         * @param volumes List of volumes to mount into the build step.
         * Each volume is created as an empty volume prior to execution of the
         * build step. Upon completion of the build, volumes and their contents
         * are discarded.
         * Using a named volume in only one step is not valid as it is
         * indicative of a build request with an incorrect configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<TriggerBuildStepVolumeArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes List of volumes to mount into the build step.
         * Each volume is created as an empty volume prior to execution of the
         * build step. Upon completion of the build, volumes and their contents
         * are discarded.
         * Using a named volume in only one step is not valid as it is
         * indicative of a build request with an incorrect configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<TriggerBuildStepVolumeArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes List of volumes to mount into the build step.
         * Each volume is created as an empty volume prior to execution of the
         * build step. Upon completion of the build, volumes and their contents
         * are discarded.
         * Using a named volume in only one step is not valid as it is
         * indicative of a build request with an incorrect configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder volumes(TriggerBuildStepVolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }

        /**
         * @param waitFors The ID(s) of the step(s) that this build step depends on.
         * This build step will not start until all the build steps in `wait_for`
         * have completed successfully. If `wait_for` is empty, this build step
         * will start when all previous build steps in the `Build.Steps` list
         * have completed successfully.
         * 
         * @return builder
         * 
         */
        public Builder waitFors(@Nullable Output<List<String>> waitFors) {
            $.waitFors = waitFors;
            return this;
        }

        /**
         * @param waitFors The ID(s) of the step(s) that this build step depends on.
         * This build step will not start until all the build steps in `wait_for`
         * have completed successfully. If `wait_for` is empty, this build step
         * will start when all previous build steps in the `Build.Steps` list
         * have completed successfully.
         * 
         * @return builder
         * 
         */
        public Builder waitFors(List<String> waitFors) {
            return waitFors(Output.of(waitFors));
        }

        /**
         * @param waitFors The ID(s) of the step(s) that this build step depends on.
         * This build step will not start until all the build steps in `wait_for`
         * have completed successfully. If `wait_for` is empty, this build step
         * will start when all previous build steps in the `Build.Steps` list
         * have completed successfully.
         * 
         * @return builder
         * 
         */
        public Builder waitFors(String... waitFors) {
            return waitFors(List.of(waitFors));
        }

        public TriggerBuildStepArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
