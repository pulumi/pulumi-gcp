// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigquery.inputs.JobCopyDestinationEncryptionConfigurationArgs;
import com.pulumi.gcp.bigquery.inputs.JobCopyDestinationTableArgs;
import com.pulumi.gcp.bigquery.inputs.JobCopySourceTableArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobCopyArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobCopyArgs Empty = new JobCopyArgs();

    /**
     * Specifies whether the job is allowed to create new tables. The following values are supported:
     * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
     * CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result.
     * Creation, truncation and append actions occur as one atomic update upon job completion
     * Default value is `CREATE_IF_NEEDED`.
     * Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
     * 
     */
    @Import(name="createDisposition")
    private @Nullable Output<String> createDisposition;

    /**
     * @return Specifies whether the job is allowed to create new tables. The following values are supported:
     * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
     * CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result.
     * Creation, truncation and append actions occur as one atomic update upon job completion
     * Default value is `CREATE_IF_NEEDED`.
     * Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
     * 
     */
    public Optional<Output<String>> createDisposition() {
        return Optional.ofNullable(this.createDisposition);
    }

    /**
     * Custom encryption configuration (e.g., Cloud KMS keys)
     * Structure is documented below.
     * 
     */
    @Import(name="destinationEncryptionConfiguration")
    private @Nullable Output<JobCopyDestinationEncryptionConfigurationArgs> destinationEncryptionConfiguration;

    /**
     * @return Custom encryption configuration (e.g., Cloud KMS keys)
     * Structure is documented below.
     * 
     */
    public Optional<Output<JobCopyDestinationEncryptionConfigurationArgs>> destinationEncryptionConfiguration() {
        return Optional.ofNullable(this.destinationEncryptionConfiguration);
    }

    /**
     * The destination table.
     * Structure is documented below.
     * 
     */
    @Import(name="destinationTable")
    private @Nullable Output<JobCopyDestinationTableArgs> destinationTable;

    /**
     * @return The destination table.
     * Structure is documented below.
     * 
     */
    public Optional<Output<JobCopyDestinationTableArgs>> destinationTable() {
        return Optional.ofNullable(this.destinationTable);
    }

    /**
     * Source tables to copy.
     * Structure is documented below.
     * 
     */
    @Import(name="sourceTables", required=true)
    private Output<List<JobCopySourceTableArgs>> sourceTables;

    /**
     * @return Source tables to copy.
     * Structure is documented below.
     * 
     */
    public Output<List<JobCopySourceTableArgs>> sourceTables() {
        return this.sourceTables;
    }

    /**
     * Specifies the action that occurs if the destination table already exists. The following values are supported:
     * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
     * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
     * WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result.
     * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
     * Creation, truncation and append actions occur as one atomic update upon job completion.
     * Default value is `WRITE_EMPTY`.
     * Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
     * 
     */
    @Import(name="writeDisposition")
    private @Nullable Output<String> writeDisposition;

    /**
     * @return Specifies the action that occurs if the destination table already exists. The following values are supported:
     * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
     * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
     * WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result.
     * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
     * Creation, truncation and append actions occur as one atomic update upon job completion.
     * Default value is `WRITE_EMPTY`.
     * Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
     * 
     */
    public Optional<Output<String>> writeDisposition() {
        return Optional.ofNullable(this.writeDisposition);
    }

    private JobCopyArgs() {}

    private JobCopyArgs(JobCopyArgs $) {
        this.createDisposition = $.createDisposition;
        this.destinationEncryptionConfiguration = $.destinationEncryptionConfiguration;
        this.destinationTable = $.destinationTable;
        this.sourceTables = $.sourceTables;
        this.writeDisposition = $.writeDisposition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobCopyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobCopyArgs $;

        public Builder() {
            $ = new JobCopyArgs();
        }

        public Builder(JobCopyArgs defaults) {
            $ = new JobCopyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createDisposition Specifies whether the job is allowed to create new tables. The following values are supported:
         * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
         * CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result.
         * Creation, truncation and append actions occur as one atomic update upon job completion
         * Default value is `CREATE_IF_NEEDED`.
         * Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
         * 
         * @return builder
         * 
         */
        public Builder createDisposition(@Nullable Output<String> createDisposition) {
            $.createDisposition = createDisposition;
            return this;
        }

        /**
         * @param createDisposition Specifies whether the job is allowed to create new tables. The following values are supported:
         * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
         * CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result.
         * Creation, truncation and append actions occur as one atomic update upon job completion
         * Default value is `CREATE_IF_NEEDED`.
         * Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
         * 
         * @return builder
         * 
         */
        public Builder createDisposition(String createDisposition) {
            return createDisposition(Output.of(createDisposition));
        }

        /**
         * @param destinationEncryptionConfiguration Custom encryption configuration (e.g., Cloud KMS keys)
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationEncryptionConfiguration(@Nullable Output<JobCopyDestinationEncryptionConfigurationArgs> destinationEncryptionConfiguration) {
            $.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
            return this;
        }

        /**
         * @param destinationEncryptionConfiguration Custom encryption configuration (e.g., Cloud KMS keys)
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationEncryptionConfiguration(JobCopyDestinationEncryptionConfigurationArgs destinationEncryptionConfiguration) {
            return destinationEncryptionConfiguration(Output.of(destinationEncryptionConfiguration));
        }

        /**
         * @param destinationTable The destination table.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationTable(@Nullable Output<JobCopyDestinationTableArgs> destinationTable) {
            $.destinationTable = destinationTable;
            return this;
        }

        /**
         * @param destinationTable The destination table.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationTable(JobCopyDestinationTableArgs destinationTable) {
            return destinationTable(Output.of(destinationTable));
        }

        /**
         * @param sourceTables Source tables to copy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceTables(Output<List<JobCopySourceTableArgs>> sourceTables) {
            $.sourceTables = sourceTables;
            return this;
        }

        /**
         * @param sourceTables Source tables to copy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceTables(List<JobCopySourceTableArgs> sourceTables) {
            return sourceTables(Output.of(sourceTables));
        }

        /**
         * @param sourceTables Source tables to copy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceTables(JobCopySourceTableArgs... sourceTables) {
            return sourceTables(List.of(sourceTables));
        }

        /**
         * @param writeDisposition Specifies the action that occurs if the destination table already exists. The following values are supported:
         * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
         * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
         * WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result.
         * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
         * Creation, truncation and append actions occur as one atomic update upon job completion.
         * Default value is `WRITE_EMPTY`.
         * Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
         * 
         * @return builder
         * 
         */
        public Builder writeDisposition(@Nullable Output<String> writeDisposition) {
            $.writeDisposition = writeDisposition;
            return this;
        }

        /**
         * @param writeDisposition Specifies the action that occurs if the destination table already exists. The following values are supported:
         * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
         * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
         * WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result.
         * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
         * Creation, truncation and append actions occur as one atomic update upon job completion.
         * Default value is `WRITE_EMPTY`.
         * Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
         * 
         * @return builder
         * 
         */
        public Builder writeDisposition(String writeDisposition) {
            return writeDisposition(Output.of(writeDisposition));
        }

        public JobCopyArgs build() {
            $.sourceTables = Objects.requireNonNull($.sourceTables, "expected parameter 'sourceTables' to be non-null");
            return $;
        }
    }

}
