// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.accesscontextmanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimeterIngressPolicyIngressFromSourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServicePerimeterIngressPolicyIngressFromArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServicePerimeterIngressPolicyIngressFromArgs Empty = new ServicePerimeterIngressPolicyIngressFromArgs();

    /**
     * Identities can be an individual user, service account, Google group,
     * or third-party identity. For third-party identity, only single identities
     * are supported and other identity types are not supported.The v1 identities
     * that have the prefix user, group and serviceAccount in
     * https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.
     * 
     */
    @Import(name="identities")
    private @Nullable Output<List<String>> identities;

    /**
     * @return Identities can be an individual user, service account, Google group,
     * or third-party identity. For third-party identity, only single identities
     * are supported and other identity types are not supported.The v1 identities
     * that have the prefix user, group and serviceAccount in
     * https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.
     * 
     */
    public Optional<Output<List<String>>> identities() {
        return Optional.ofNullable(this.identities);
    }

    /**
     * Specifies the type of identities that are allowed access from outside the
     * perimeter. If left unspecified, then members of `identities` field will be
     * allowed access.
     * Possible values are: `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
     * 
     */
    @Import(name="identityType")
    private @Nullable Output<String> identityType;

    /**
     * @return Specifies the type of identities that are allowed access from outside the
     * perimeter. If left unspecified, then members of `identities` field will be
     * allowed access.
     * Possible values are: `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
     * 
     */
    public Optional<Output<String>> identityType() {
        return Optional.ofNullable(this.identityType);
    }

    /**
     * Sources that this `IngressPolicy` authorizes access from.
     * Structure is documented below.
     * 
     */
    @Import(name="sources")
    private @Nullable Output<List<ServicePerimeterIngressPolicyIngressFromSourceArgs>> sources;

    /**
     * @return Sources that this `IngressPolicy` authorizes access from.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ServicePerimeterIngressPolicyIngressFromSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    private ServicePerimeterIngressPolicyIngressFromArgs() {}

    private ServicePerimeterIngressPolicyIngressFromArgs(ServicePerimeterIngressPolicyIngressFromArgs $) {
        this.identities = $.identities;
        this.identityType = $.identityType;
        this.sources = $.sources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServicePerimeterIngressPolicyIngressFromArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServicePerimeterIngressPolicyIngressFromArgs $;

        public Builder() {
            $ = new ServicePerimeterIngressPolicyIngressFromArgs();
        }

        public Builder(ServicePerimeterIngressPolicyIngressFromArgs defaults) {
            $ = new ServicePerimeterIngressPolicyIngressFromArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identities Identities can be an individual user, service account, Google group,
         * or third-party identity. For third-party identity, only single identities
         * are supported and other identity types are not supported.The v1 identities
         * that have the prefix user, group and serviceAccount in
         * https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.
         * 
         * @return builder
         * 
         */
        public Builder identities(@Nullable Output<List<String>> identities) {
            $.identities = identities;
            return this;
        }

        /**
         * @param identities Identities can be an individual user, service account, Google group,
         * or third-party identity. For third-party identity, only single identities
         * are supported and other identity types are not supported.The v1 identities
         * that have the prefix user, group and serviceAccount in
         * https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.
         * 
         * @return builder
         * 
         */
        public Builder identities(List<String> identities) {
            return identities(Output.of(identities));
        }

        /**
         * @param identities Identities can be an individual user, service account, Google group,
         * or third-party identity. For third-party identity, only single identities
         * are supported and other identity types are not supported.The v1 identities
         * that have the prefix user, group and serviceAccount in
         * https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.
         * 
         * @return builder
         * 
         */
        public Builder identities(String... identities) {
            return identities(List.of(identities));
        }

        /**
         * @param identityType Specifies the type of identities that are allowed access from outside the
         * perimeter. If left unspecified, then members of `identities` field will be
         * allowed access.
         * Possible values are: `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
         * 
         * @return builder
         * 
         */
        public Builder identityType(@Nullable Output<String> identityType) {
            $.identityType = identityType;
            return this;
        }

        /**
         * @param identityType Specifies the type of identities that are allowed access from outside the
         * perimeter. If left unspecified, then members of `identities` field will be
         * allowed access.
         * Possible values are: `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
         * 
         * @return builder
         * 
         */
        public Builder identityType(String identityType) {
            return identityType(Output.of(identityType));
        }

        /**
         * @param sources Sources that this `IngressPolicy` authorizes access from.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable Output<List<ServicePerimeterIngressPolicyIngressFromSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources Sources that this `IngressPolicy` authorizes access from.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<ServicePerimeterIngressPolicyIngressFromSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources Sources that this `IngressPolicy` authorizes access from.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sources(ServicePerimeterIngressPolicyIngressFromSourceArgs... sources) {
            return sources(List.of(sources));
        }

        public ServicePerimeterIngressPolicyIngressFromArgs build() {
            return $;
        }
    }

}
