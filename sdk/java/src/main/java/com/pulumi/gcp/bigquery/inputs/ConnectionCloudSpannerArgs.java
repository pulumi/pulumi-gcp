// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionCloudSpannerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionCloudSpannerArgs Empty = new ConnectionCloudSpannerArgs();

    /**
     * Cloud Spanner database in the form `project/instance/database&#39;.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return Cloud Spanner database in the form `project/instance/database&#39;.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. The database role name must start with a letter, and can only contain letters, numbers, and underscores. For more details, see https://cloud.google.com/spanner/docs/fgac-about.
     * 
     */
    @Import(name="databaseRole")
    private @Nullable Output<String> databaseRole;

    /**
     * @return Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. The database role name must start with a letter, and can only contain letters, numbers, and underscores. For more details, see https://cloud.google.com/spanner/docs/fgac-about.
     * 
     */
    public Optional<Output<String>> databaseRole() {
        return Optional.ofNullable(this.databaseRole);
    }

    /**
     * Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. `useParallelism` and `useDataBoost` must be set when setting max parallelism.
     * 
     */
    @Import(name="maxParallelism")
    private @Nullable Output<Integer> maxParallelism;

    /**
     * @return Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. `useParallelism` and `useDataBoost` must be set when setting max parallelism.
     * 
     */
    public Optional<Output<Integer>> maxParallelism() {
        return Optional.ofNullable(this.maxParallelism);
    }

    /**
     * If set, the request will be executed via Spanner independent compute resources. `use_parallelism` must be set when using data boost.
     * 
     */
    @Import(name="useDataBoost")
    private @Nullable Output<Boolean> useDataBoost;

    /**
     * @return If set, the request will be executed via Spanner independent compute resources. `use_parallelism` must be set when using data boost.
     * 
     */
    public Optional<Output<Boolean>> useDataBoost() {
        return Optional.ofNullable(this.useDataBoost);
    }

    /**
     * If parallelism should be used when reading from Cloud Spanner.
     * 
     */
    @Import(name="useParallelism")
    private @Nullable Output<Boolean> useParallelism;

    /**
     * @return If parallelism should be used when reading from Cloud Spanner.
     * 
     */
    public Optional<Output<Boolean>> useParallelism() {
        return Optional.ofNullable(this.useParallelism);
    }

    /**
     * (Optional, Deprecated)
     * If the serverless analytics service should be used to read data from Cloud Spanner. `useParallelism` must be set when using serverless analytics.
     * 
     * &gt; **Warning:** `useServerlessAnalytics` is deprecated and will be removed in a future major release. Use `useDataBoost` instead.
     * 
     * @deprecated
     * `useServerlessAnalytics` is deprecated and will be removed in a future major release. Use `useDataBoost` instead.
     * 
     */
    @Deprecated /* `useServerlessAnalytics` is deprecated and will be removed in a future major release. Use `useDataBoost` instead. */
    @Import(name="useServerlessAnalytics")
    private @Nullable Output<Boolean> useServerlessAnalytics;

    /**
     * @return (Optional, Deprecated)
     * If the serverless analytics service should be used to read data from Cloud Spanner. `useParallelism` must be set when using serverless analytics.
     * 
     * &gt; **Warning:** `useServerlessAnalytics` is deprecated and will be removed in a future major release. Use `useDataBoost` instead.
     * 
     * @deprecated
     * `useServerlessAnalytics` is deprecated and will be removed in a future major release. Use `useDataBoost` instead.
     * 
     */
    @Deprecated /* `useServerlessAnalytics` is deprecated and will be removed in a future major release. Use `useDataBoost` instead. */
    public Optional<Output<Boolean>> useServerlessAnalytics() {
        return Optional.ofNullable(this.useServerlessAnalytics);
    }

    private ConnectionCloudSpannerArgs() {}

    private ConnectionCloudSpannerArgs(ConnectionCloudSpannerArgs $) {
        this.database = $.database;
        this.databaseRole = $.databaseRole;
        this.maxParallelism = $.maxParallelism;
        this.useDataBoost = $.useDataBoost;
        this.useParallelism = $.useParallelism;
        this.useServerlessAnalytics = $.useServerlessAnalytics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionCloudSpannerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionCloudSpannerArgs $;

        public Builder() {
            $ = new ConnectionCloudSpannerArgs();
        }

        public Builder(ConnectionCloudSpannerArgs defaults) {
            $ = new ConnectionCloudSpannerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param database Cloud Spanner database in the form `project/instance/database&#39;.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database Cloud Spanner database in the form `project/instance/database&#39;.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param databaseRole Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. The database role name must start with a letter, and can only contain letters, numbers, and underscores. For more details, see https://cloud.google.com/spanner/docs/fgac-about.
         * 
         * @return builder
         * 
         */
        public Builder databaseRole(@Nullable Output<String> databaseRole) {
            $.databaseRole = databaseRole;
            return this;
        }

        /**
         * @param databaseRole Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. The database role name must start with a letter, and can only contain letters, numbers, and underscores. For more details, see https://cloud.google.com/spanner/docs/fgac-about.
         * 
         * @return builder
         * 
         */
        public Builder databaseRole(String databaseRole) {
            return databaseRole(Output.of(databaseRole));
        }

        /**
         * @param maxParallelism Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. `useParallelism` and `useDataBoost` must be set when setting max parallelism.
         * 
         * @return builder
         * 
         */
        public Builder maxParallelism(@Nullable Output<Integer> maxParallelism) {
            $.maxParallelism = maxParallelism;
            return this;
        }

        /**
         * @param maxParallelism Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. `useParallelism` and `useDataBoost` must be set when setting max parallelism.
         * 
         * @return builder
         * 
         */
        public Builder maxParallelism(Integer maxParallelism) {
            return maxParallelism(Output.of(maxParallelism));
        }

        /**
         * @param useDataBoost If set, the request will be executed via Spanner independent compute resources. `use_parallelism` must be set when using data boost.
         * 
         * @return builder
         * 
         */
        public Builder useDataBoost(@Nullable Output<Boolean> useDataBoost) {
            $.useDataBoost = useDataBoost;
            return this;
        }

        /**
         * @param useDataBoost If set, the request will be executed via Spanner independent compute resources. `use_parallelism` must be set when using data boost.
         * 
         * @return builder
         * 
         */
        public Builder useDataBoost(Boolean useDataBoost) {
            return useDataBoost(Output.of(useDataBoost));
        }

        /**
         * @param useParallelism If parallelism should be used when reading from Cloud Spanner.
         * 
         * @return builder
         * 
         */
        public Builder useParallelism(@Nullable Output<Boolean> useParallelism) {
            $.useParallelism = useParallelism;
            return this;
        }

        /**
         * @param useParallelism If parallelism should be used when reading from Cloud Spanner.
         * 
         * @return builder
         * 
         */
        public Builder useParallelism(Boolean useParallelism) {
            return useParallelism(Output.of(useParallelism));
        }

        /**
         * @param useServerlessAnalytics (Optional, Deprecated)
         * If the serverless analytics service should be used to read data from Cloud Spanner. `useParallelism` must be set when using serverless analytics.
         * 
         * &gt; **Warning:** `useServerlessAnalytics` is deprecated and will be removed in a future major release. Use `useDataBoost` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * `useServerlessAnalytics` is deprecated and will be removed in a future major release. Use `useDataBoost` instead.
         * 
         */
        @Deprecated /* `useServerlessAnalytics` is deprecated and will be removed in a future major release. Use `useDataBoost` instead. */
        public Builder useServerlessAnalytics(@Nullable Output<Boolean> useServerlessAnalytics) {
            $.useServerlessAnalytics = useServerlessAnalytics;
            return this;
        }

        /**
         * @param useServerlessAnalytics (Optional, Deprecated)
         * If the serverless analytics service should be used to read data from Cloud Spanner. `useParallelism` must be set when using serverless analytics.
         * 
         * &gt; **Warning:** `useServerlessAnalytics` is deprecated and will be removed in a future major release. Use `useDataBoost` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * `useServerlessAnalytics` is deprecated and will be removed in a future major release. Use `useDataBoost` instead.
         * 
         */
        @Deprecated /* `useServerlessAnalytics` is deprecated and will be removed in a future major release. Use `useDataBoost` instead. */
        public Builder useServerlessAnalytics(Boolean useServerlessAnalytics) {
            return useServerlessAnalytics(Output.of(useServerlessAnalytics));
        }

        public ConnectionCloudSpannerArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("ConnectionCloudSpannerArgs", "database");
            }
            return $;
        }
    }

}
