// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.WireGroupArgs;
import com.pulumi.gcp.compute.inputs.WireGroupState;
import com.pulumi.gcp.compute.outputs.WireGroupEndpoint;
import com.pulumi.gcp.compute.outputs.WireGroupTopology;
import com.pulumi.gcp.compute.outputs.WireGroupWire;
import com.pulumi.gcp.compute.outputs.WireGroupWireGroupProperties;
import com.pulumi.gcp.compute.outputs.WireGroupWireProperties;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The WireGroup resource represents a group of redundant wires between interconnects in two different metros. Each WireGroup belongs to a CrossSiteNetwork. A wire group defines endpoints and the wires which exist between them.
 * 
 * To get more information about WireGroup, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/wireGroups)
 * * How-to Guides
 *     * [Create a WireGroup](https://cloud.google.com/network-connectivity/docs/interconnect/how-to/cross-site/modify-network#add-wire-group)
 * 
 * ## Example Usage
 * 
 * ### Compute Wire Group Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.compute.CrossSiteNetwork;
 * import com.pulumi.gcp.compute.CrossSiteNetworkArgs;
 * import com.pulumi.gcp.compute.WireGroup;
 * import com.pulumi.gcp.compute.WireGroupArgs;
 * import com.pulumi.gcp.compute.inputs.WireGroupWirePropertiesArgs;
 * import com.pulumi.gcp.compute.inputs.WireGroupWireGroupPropertiesArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var example_cross_site_network = new CrossSiteNetwork("example-cross-site-network", CrossSiteNetworkArgs.builder()
 *             .name("test-cross-site-network")
 *             .description("Example cross site network")
 *             .build());
 * 
 *         var example_test_wire_group = new WireGroup("example-test-wire-group", WireGroupArgs.builder()
 *             .name("test-wire-group")
 *             .description("Example Wire Group")
 *             .crossSiteNetwork("test-cross-site-network")
 *             .wireProperties(WireGroupWirePropertiesArgs.builder()
 *                 .bandwidthUnmetered(10)
 *                 .faultResponse("NONE")
 *                 .build())
 *             .wireGroupProperties(WireGroupWireGroupPropertiesArgs.builder()
 *                 .type("WIRE")
 *                 .build())
 *             .adminEnabled(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(example_cross_site_network)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * WireGroup can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}`
 * 
 * * `{{project}}/{{cross_site_network}}/{{name}}`
 * 
 * * `{{cross_site_network}}/{{name}}`
 * 
 * When using the `pulumi import` command, WireGroup can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:compute/wireGroup:WireGroup default projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/wireGroup:WireGroup default {{project}}/{{cross_site_network}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/wireGroup:WireGroup default {{cross_site_network}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/wireGroup:WireGroup")
public class WireGroup extends com.pulumi.resources.CustomResource {
    /**
     * Indicates whether the wire group is administratively enabled.
     * 
     */
    @Export(name="adminEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> adminEnabled;

    /**
     * @return Indicates whether the wire group is administratively enabled.
     * 
     */
    public Output<Optional<Boolean>> adminEnabled() {
        return Codegen.optional(this.adminEnabled);
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", refs={String.class}, tree="[0]")
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * Required cross site network to which wire group belongs.
     * 
     */
    @Export(name="crossSiteNetwork", refs={String.class}, tree="[0]")
    private Output<String> crossSiteNetwork;

    /**
     * @return Required cross site network to which wire group belongs.
     * 
     */
    public Output<String> crossSiteNetwork() {
        return this.crossSiteNetwork;
    }
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Endpoints grouped by location, each mapping to interconnect configurations.
     * Structure is documented below.
     * 
     */
    @Export(name="endpoints", refs={List.class,WireGroupEndpoint.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WireGroupEndpoint>> endpoints;

    /**
     * @return Endpoints grouped by location, each mapping to interconnect configurations.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<WireGroupEndpoint>>> endpoints() {
        return Codegen.optional(this.endpoints);
    }
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be
     * 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is created. The name must be
     * 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Topology details for the wire group configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="topologies", refs={List.class,WireGroupTopology.class}, tree="[0,1]")
    private Output<List<WireGroupTopology>> topologies;

    /**
     * @return Topology details for the wire group configuration.
     * Structure is documented below.
     * 
     */
    public Output<List<WireGroupTopology>> topologies() {
        return this.topologies;
    }
    /**
     * Properties specific to the wire group.
     * Structure is documented below.
     * 
     */
    @Export(name="wireGroupProperties", refs={WireGroupWireGroupProperties.class}, tree="[0]")
    private Output</* @Nullable */ WireGroupWireGroupProperties> wireGroupProperties;

    /**
     * @return Properties specific to the wire group.
     * Structure is documented below.
     * 
     */
    public Output<Optional<WireGroupWireGroupProperties>> wireGroupProperties() {
        return Codegen.optional(this.wireGroupProperties);
    }
    /**
     * Default properties for wires within the group.
     * Structure is documented below.
     * 
     */
    @Export(name="wireProperties", refs={WireGroupWireProperties.class}, tree="[0]")
    private Output</* @Nullable */ WireGroupWireProperties> wireProperties;

    /**
     * @return Default properties for wires within the group.
     * Structure is documented below.
     * 
     */
    public Output<Optional<WireGroupWireProperties>> wireProperties() {
        return Codegen.optional(this.wireProperties);
    }
    /**
     * The single/redundant wire(s) managed by the wire group.
     * Structure is documented below.
     * 
     */
    @Export(name="wires", refs={List.class,WireGroupWire.class}, tree="[0,1]")
    private Output<List<WireGroupWire>> wires;

    /**
     * @return The single/redundant wire(s) managed by the wire group.
     * Structure is documented below.
     * 
     */
    public Output<List<WireGroupWire>> wires() {
        return this.wires;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WireGroup(java.lang.String name) {
        this(name, WireGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WireGroup(java.lang.String name, WireGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WireGroup(java.lang.String name, WireGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/wireGroup:WireGroup", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private WireGroup(java.lang.String name, Output<java.lang.String> id, @Nullable WireGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/wireGroup:WireGroup", name, state, makeResourceOptions(options, id), false);
    }

    private static WireGroupArgs makeArgs(WireGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? WireGroupArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WireGroup get(java.lang.String name, Output<java.lang.String> id, @Nullable WireGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new WireGroup(name, id, state, options);
    }
}
