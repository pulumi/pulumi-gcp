// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.iam.inputs.WorkforcePoolProviderKeyKeyDataArgs;
import java.lang.String;
import java.util.Objects;


public final class WorkforcePoolProviderKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkforcePoolProviderKeyArgs Empty = new WorkforcePoolProviderKeyArgs();

    /**
     * Immutable. Public half of the asymmetric key.
     * Structure is documented below.
     * 
     */
    @Import(name="keyData", required=true)
    private Output<WorkforcePoolProviderKeyKeyDataArgs> keyData;

    /**
     * @return Immutable. Public half of the asymmetric key.
     * Structure is documented below.
     * 
     */
    public Output<WorkforcePoolProviderKeyKeyDataArgs> keyData() {
        return this.keyData;
    }

    /**
     * The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
     * 
     */
    @Import(name="keyId", required=true)
    private Output<String> keyId;

    /**
     * @return The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }

    /**
     * The location for the resource.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location for the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the provider.
     * 
     */
    @Import(name="providerId", required=true)
    private Output<String> providerId;

    /**
     * @return The ID of the provider.
     * 
     */
    public Output<String> providerId() {
        return this.providerId;
    }

    /**
     * The purpose of the key.
     * Possible values are: `ENCRYPTION`.
     * 
     */
    @Import(name="use", required=true)
    private Output<String> use;

    /**
     * @return The purpose of the key.
     * Possible values are: `ENCRYPTION`.
     * 
     */
    public Output<String> use() {
        return this.use;
    }

    /**
     * The ID of the workforce pool.
     * 
     */
    @Import(name="workforcePoolId", required=true)
    private Output<String> workforcePoolId;

    /**
     * @return The ID of the workforce pool.
     * 
     */
    public Output<String> workforcePoolId() {
        return this.workforcePoolId;
    }

    private WorkforcePoolProviderKeyArgs() {}

    private WorkforcePoolProviderKeyArgs(WorkforcePoolProviderKeyArgs $) {
        this.keyData = $.keyData;
        this.keyId = $.keyId;
        this.location = $.location;
        this.providerId = $.providerId;
        this.use = $.use;
        this.workforcePoolId = $.workforcePoolId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkforcePoolProviderKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkforcePoolProviderKeyArgs $;

        public Builder() {
            $ = new WorkforcePoolProviderKeyArgs();
        }

        public Builder(WorkforcePoolProviderKeyArgs defaults) {
            $ = new WorkforcePoolProviderKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyData Immutable. Public half of the asymmetric key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder keyData(Output<WorkforcePoolProviderKeyKeyDataArgs> keyData) {
            $.keyData = keyData;
            return this;
        }

        /**
         * @param keyData Immutable. Public half of the asymmetric key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder keyData(WorkforcePoolProviderKeyKeyDataArgs keyData) {
            return keyData(Output.of(keyData));
        }

        /**
         * @param keyId The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
         * 
         * @return builder
         * 
         */
        public Builder keyId(Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param location The location for the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param providerId The ID of the provider.
         * 
         * @return builder
         * 
         */
        public Builder providerId(Output<String> providerId) {
            $.providerId = providerId;
            return this;
        }

        /**
         * @param providerId The ID of the provider.
         * 
         * @return builder
         * 
         */
        public Builder providerId(String providerId) {
            return providerId(Output.of(providerId));
        }

        /**
         * @param use The purpose of the key.
         * Possible values are: `ENCRYPTION`.
         * 
         * @return builder
         * 
         */
        public Builder use(Output<String> use) {
            $.use = use;
            return this;
        }

        /**
         * @param use The purpose of the key.
         * Possible values are: `ENCRYPTION`.
         * 
         * @return builder
         * 
         */
        public Builder use(String use) {
            return use(Output.of(use));
        }

        /**
         * @param workforcePoolId The ID of the workforce pool.
         * 
         * @return builder
         * 
         */
        public Builder workforcePoolId(Output<String> workforcePoolId) {
            $.workforcePoolId = workforcePoolId;
            return this;
        }

        /**
         * @param workforcePoolId The ID of the workforce pool.
         * 
         * @return builder
         * 
         */
        public Builder workforcePoolId(String workforcePoolId) {
            return workforcePoolId(Output.of(workforcePoolId));
        }

        public WorkforcePoolProviderKeyArgs build() {
            if ($.keyData == null) {
                throw new MissingRequiredPropertyException("WorkforcePoolProviderKeyArgs", "keyData");
            }
            if ($.keyId == null) {
                throw new MissingRequiredPropertyException("WorkforcePoolProviderKeyArgs", "keyId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("WorkforcePoolProviderKeyArgs", "location");
            }
            if ($.providerId == null) {
                throw new MissingRequiredPropertyException("WorkforcePoolProviderKeyArgs", "providerId");
            }
            if ($.use == null) {
                throw new MissingRequiredPropertyException("WorkforcePoolProviderKeyArgs", "use");
            }
            if ($.workforcePoolId == null) {
                throw new MissingRequiredPropertyException("WorkforcePoolProviderKeyArgs", "workforcePoolId");
            }
            return $;
        }
    }

}
