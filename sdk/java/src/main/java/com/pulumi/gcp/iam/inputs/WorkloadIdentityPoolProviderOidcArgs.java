// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkloadIdentityPoolProviderOidcArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkloadIdentityPoolProviderOidcArgs Empty = new WorkloadIdentityPoolProviderOidcArgs();

    /**
     * Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange
     * requests are rejected if the token audience does not match one of the configured
     * values. Each audience may be at most 256 characters. A maximum of 10 audiences may
     * be configured.
     * If this list is empty, the OIDC token audience must be equal to the full canonical
     * resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix.
     * For example:
     * 
     */
    @Import(name="allowedAudiences")
    private @Nullable Output<List<String>> allowedAudiences;

    /**
     * @return Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange
     * requests are rejected if the token audience does not match one of the configured
     * values. Each audience may be at most 256 characters. A maximum of 10 audiences may
     * be configured.
     * If this list is empty, the OIDC token audience must be equal to the full canonical
     * resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix.
     * For example:
     * 
     */
    public Optional<Output<List<String>>> allowedAudiences() {
        return Optional.ofNullable(this.allowedAudiences);
    }

    /**
     * The OIDC issuer URL.
     * 
     */
    @Import(name="issuerUri", required=true)
    private Output<String> issuerUri;

    /**
     * @return The OIDC issuer URL.
     * 
     */
    public Output<String> issuerUri() {
        return this.issuerUri;
    }

    /**
     * OIDC JWKs in JSON String format. For details on definition of a
     * JWK, see https:tools.ietf.org/html/rfc7517. If not set, then we
     * use the `jwks_uri` from the discovery document fetched from the
     * .well-known path for the `issuer_uri`. Currently, RSA and EC asymmetric
     * keys are supported. The JWK must use following format and include only
     * the following fields:
     * 
     */
    @Import(name="jwksJson")
    private @Nullable Output<String> jwksJson;

    /**
     * @return OIDC JWKs in JSON String format. For details on definition of a
     * JWK, see https:tools.ietf.org/html/rfc7517. If not set, then we
     * use the `jwks_uri` from the discovery document fetched from the
     * .well-known path for the `issuer_uri`. Currently, RSA and EC asymmetric
     * keys are supported. The JWK must use following format and include only
     * the following fields:
     * 
     */
    public Optional<Output<String>> jwksJson() {
        return Optional.ofNullable(this.jwksJson);
    }

    private WorkloadIdentityPoolProviderOidcArgs() {}

    private WorkloadIdentityPoolProviderOidcArgs(WorkloadIdentityPoolProviderOidcArgs $) {
        this.allowedAudiences = $.allowedAudiences;
        this.issuerUri = $.issuerUri;
        this.jwksJson = $.jwksJson;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkloadIdentityPoolProviderOidcArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkloadIdentityPoolProviderOidcArgs $;

        public Builder() {
            $ = new WorkloadIdentityPoolProviderOidcArgs();
        }

        public Builder(WorkloadIdentityPoolProviderOidcArgs defaults) {
            $ = new WorkloadIdentityPoolProviderOidcArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedAudiences Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange
         * requests are rejected if the token audience does not match one of the configured
         * values. Each audience may be at most 256 characters. A maximum of 10 audiences may
         * be configured.
         * If this list is empty, the OIDC token audience must be equal to the full canonical
         * resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix.
         * For example:
         * 
         * @return builder
         * 
         */
        public Builder allowedAudiences(@Nullable Output<List<String>> allowedAudiences) {
            $.allowedAudiences = allowedAudiences;
            return this;
        }

        /**
         * @param allowedAudiences Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange
         * requests are rejected if the token audience does not match one of the configured
         * values. Each audience may be at most 256 characters. A maximum of 10 audiences may
         * be configured.
         * If this list is empty, the OIDC token audience must be equal to the full canonical
         * resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix.
         * For example:
         * 
         * @return builder
         * 
         */
        public Builder allowedAudiences(List<String> allowedAudiences) {
            return allowedAudiences(Output.of(allowedAudiences));
        }

        /**
         * @param allowedAudiences Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange
         * requests are rejected if the token audience does not match one of the configured
         * values. Each audience may be at most 256 characters. A maximum of 10 audiences may
         * be configured.
         * If this list is empty, the OIDC token audience must be equal to the full canonical
         * resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix.
         * For example:
         * 
         * @return builder
         * 
         */
        public Builder allowedAudiences(String... allowedAudiences) {
            return allowedAudiences(List.of(allowedAudiences));
        }

        /**
         * @param issuerUri The OIDC issuer URL.
         * 
         * @return builder
         * 
         */
        public Builder issuerUri(Output<String> issuerUri) {
            $.issuerUri = issuerUri;
            return this;
        }

        /**
         * @param issuerUri The OIDC issuer URL.
         * 
         * @return builder
         * 
         */
        public Builder issuerUri(String issuerUri) {
            return issuerUri(Output.of(issuerUri));
        }

        /**
         * @param jwksJson OIDC JWKs in JSON String format. For details on definition of a
         * JWK, see https:tools.ietf.org/html/rfc7517. If not set, then we
         * use the `jwks_uri` from the discovery document fetched from the
         * .well-known path for the `issuer_uri`. Currently, RSA and EC asymmetric
         * keys are supported. The JWK must use following format and include only
         * the following fields:
         * 
         * @return builder
         * 
         */
        public Builder jwksJson(@Nullable Output<String> jwksJson) {
            $.jwksJson = jwksJson;
            return this;
        }

        /**
         * @param jwksJson OIDC JWKs in JSON String format. For details on definition of a
         * JWK, see https:tools.ietf.org/html/rfc7517. If not set, then we
         * use the `jwks_uri` from the discovery document fetched from the
         * .well-known path for the `issuer_uri`. Currently, RSA and EC asymmetric
         * keys are supported. The JWK must use following format and include only
         * the following fields:
         * 
         * @return builder
         * 
         */
        public Builder jwksJson(String jwksJson) {
            return jwksJson(Output.of(jwksJson));
        }

        public WorkloadIdentityPoolProviderOidcArgs build() {
            if ($.issuerUri == null) {
                throw new MissingRequiredPropertyException("WorkloadIdentityPoolProviderOidcArgs", "issuerUri");
            }
            return $;
        }
    }

}
