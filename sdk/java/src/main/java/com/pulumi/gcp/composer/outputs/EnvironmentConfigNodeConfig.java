// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.composer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.composer.outputs.EnvironmentConfigNodeConfigIpAllocationPolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EnvironmentConfigNodeConfig {
    /**
     * @return IPv4 cidr range that will be used by Composer internal components.
     * 
     */
    private @Nullable String composerInternalIpv4CidrBlock;
    /**
     * @return PSC (Private Service Connect) Network entry point. Customers can pre-create the Network Attachment and point Cloud Composer environment to use. It is possible to share network attachment among many environments, provided enough IP addresses are available.
     * 
     */
    private @Nullable String composerNetworkAttachment;
    /**
     * @return The disk size in GB used for node VMs. Minimum size is 20GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private @Nullable Integer diskSizeGb;
    /**
     * @return Deploys &#39;ip-masq-agent&#39; daemon set in the GKE cluster and defines nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for all destination addresses, except between pods traffic. See: https://cloud.google.com/kubernetes-engine/docs/how-to/ip-masquerade-agent
     * 
     */
    private @Nullable Boolean enableIpMasqAgent;
    /**
     * @return Configuration for controlling how IPs are allocated in the GKE cluster. Cannot be updated.
     * 
     */
    private @Nullable EnvironmentConfigNodeConfigIpAllocationPolicy ipAllocationPolicy;
    /**
     * @return The Compute Engine machine type used for cluster instances, specified as a name or relative resource name. For example: &#34;projects/{project}/zones/{zone}/machineTypes/{machineType}&#34;. Must belong to the enclosing environment&#39;s project and region/zone. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private @Nullable String machineType;
    /**
     * @return The maximum pods per node in the GKE cluster allocated during environment creation. Lowering this value reduces IP address consumption by the Cloud Composer Kubernetes cluster. This value can only be set during environment creation, and only if the environment is VPC-Native. The range of possible values is 8-110, and the default is 32. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private @Nullable Integer maxPodsPerNode;
    /**
     * @return The Compute Engine machine type used for cluster instances, specified as a name or relative resource name. For example: &#34;projects/{project}/zones/{zone}/machineTypes/{machineType}&#34;. Must belong to the enclosing environment&#39;s project and region/zone. The network must belong to the environment&#39;s project. If unspecified, the &#34;default&#34; network ID in the environment&#39;s project is used. If a Custom Subnet Network is provided, subnetwork must also be provided.
     * 
     */
    private @Nullable String network;
    /**
     * @return The set of Google API scopes to be made available on all node VMs. Cannot be updated. If empty, defaults to [&#34;https://www.googleapis.com/auth/cloud-platform&#34;]. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private @Nullable List<String> oauthScopes;
    /**
     * @return The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the &#34;default&#34; Compute Engine service account is used. Cannot be updated. If given, note that the service account must have roles/composer.worker for any GCP resources created under the Cloud Composer Environment.
     * 
     */
    private @Nullable String serviceAccount;
    /**
     * @return The Compute Engine subnetwork to be used for machine communications, specified as a self-link, relative resource name (e.g. &#34;projects/{project}/regions/{region}/subnetworks/{subnetwork}&#34;), or by name. If subnetwork is provided, network must also be provided and the subnetwork must belong to the enclosing environment&#39;s project and region.
     * 
     */
    private @Nullable String subnetwork;
    /**
     * @return The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with RFC1035. Cannot be updated.
     * 
     */
    private @Nullable List<String> tags;
    /**
     * @return The Compute Engine zone in which to deploy the VMs running the Apache Airflow software, specified as the zone name or relative resource name (e.g. &#34;projects/{project}/zones/{zone}&#34;). Must belong to the enclosing environment&#39;s project and region. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private @Nullable String zone;

    private EnvironmentConfigNodeConfig() {}
    /**
     * @return IPv4 cidr range that will be used by Composer internal components.
     * 
     */
    public Optional<String> composerInternalIpv4CidrBlock() {
        return Optional.ofNullable(this.composerInternalIpv4CidrBlock);
    }
    /**
     * @return PSC (Private Service Connect) Network entry point. Customers can pre-create the Network Attachment and point Cloud Composer environment to use. It is possible to share network attachment among many environments, provided enough IP addresses are available.
     * 
     */
    public Optional<String> composerNetworkAttachment() {
        return Optional.ofNullable(this.composerNetworkAttachment);
    }
    /**
     * @return The disk size in GB used for node VMs. Minimum size is 20GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public Optional<Integer> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }
    /**
     * @return Deploys &#39;ip-masq-agent&#39; daemon set in the GKE cluster and defines nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for all destination addresses, except between pods traffic. See: https://cloud.google.com/kubernetes-engine/docs/how-to/ip-masquerade-agent
     * 
     */
    public Optional<Boolean> enableIpMasqAgent() {
        return Optional.ofNullable(this.enableIpMasqAgent);
    }
    /**
     * @return Configuration for controlling how IPs are allocated in the GKE cluster. Cannot be updated.
     * 
     */
    public Optional<EnvironmentConfigNodeConfigIpAllocationPolicy> ipAllocationPolicy() {
        return Optional.ofNullable(this.ipAllocationPolicy);
    }
    /**
     * @return The Compute Engine machine type used for cluster instances, specified as a name or relative resource name. For example: &#34;projects/{project}/zones/{zone}/machineTypes/{machineType}&#34;. Must belong to the enclosing environment&#39;s project and region/zone. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public Optional<String> machineType() {
        return Optional.ofNullable(this.machineType);
    }
    /**
     * @return The maximum pods per node in the GKE cluster allocated during environment creation. Lowering this value reduces IP address consumption by the Cloud Composer Kubernetes cluster. This value can only be set during environment creation, and only if the environment is VPC-Native. The range of possible values is 8-110, and the default is 32. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public Optional<Integer> maxPodsPerNode() {
        return Optional.ofNullable(this.maxPodsPerNode);
    }
    /**
     * @return The Compute Engine machine type used for cluster instances, specified as a name or relative resource name. For example: &#34;projects/{project}/zones/{zone}/machineTypes/{machineType}&#34;. Must belong to the enclosing environment&#39;s project and region/zone. The network must belong to the environment&#39;s project. If unspecified, the &#34;default&#34; network ID in the environment&#39;s project is used. If a Custom Subnet Network is provided, subnetwork must also be provided.
     * 
     */
    public Optional<String> network() {
        return Optional.ofNullable(this.network);
    }
    /**
     * @return The set of Google API scopes to be made available on all node VMs. Cannot be updated. If empty, defaults to [&#34;https://www.googleapis.com/auth/cloud-platform&#34;]. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public List<String> oauthScopes() {
        return this.oauthScopes == null ? List.of() : this.oauthScopes;
    }
    /**
     * @return The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the &#34;default&#34; Compute Engine service account is used. Cannot be updated. If given, note that the service account must have roles/composer.worker for any GCP resources created under the Cloud Composer Environment.
     * 
     */
    public Optional<String> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }
    /**
     * @return The Compute Engine subnetwork to be used for machine communications, specified as a self-link, relative resource name (e.g. &#34;projects/{project}/regions/{region}/subnetworks/{subnetwork}&#34;), or by name. If subnetwork is provided, network must also be provided and the subnetwork must belong to the enclosing environment&#39;s project and region.
     * 
     */
    public Optional<String> subnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }
    /**
     * @return The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with RFC1035. Cannot be updated.
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return The Compute Engine zone in which to deploy the VMs running the Apache Airflow software, specified as the zone name or relative resource name (e.g. &#34;projects/{project}/zones/{zone}&#34;). Must belong to the enclosing environment&#39;s project and region. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public Optional<String> zone() {
        return Optional.ofNullable(this.zone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentConfigNodeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String composerInternalIpv4CidrBlock;
        private @Nullable String composerNetworkAttachment;
        private @Nullable Integer diskSizeGb;
        private @Nullable Boolean enableIpMasqAgent;
        private @Nullable EnvironmentConfigNodeConfigIpAllocationPolicy ipAllocationPolicy;
        private @Nullable String machineType;
        private @Nullable Integer maxPodsPerNode;
        private @Nullable String network;
        private @Nullable List<String> oauthScopes;
        private @Nullable String serviceAccount;
        private @Nullable String subnetwork;
        private @Nullable List<String> tags;
        private @Nullable String zone;
        public Builder() {}
        public Builder(EnvironmentConfigNodeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.composerInternalIpv4CidrBlock = defaults.composerInternalIpv4CidrBlock;
    	      this.composerNetworkAttachment = defaults.composerNetworkAttachment;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.enableIpMasqAgent = defaults.enableIpMasqAgent;
    	      this.ipAllocationPolicy = defaults.ipAllocationPolicy;
    	      this.machineType = defaults.machineType;
    	      this.maxPodsPerNode = defaults.maxPodsPerNode;
    	      this.network = defaults.network;
    	      this.oauthScopes = defaults.oauthScopes;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.subnetwork = defaults.subnetwork;
    	      this.tags = defaults.tags;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder composerInternalIpv4CidrBlock(@Nullable String composerInternalIpv4CidrBlock) {

            this.composerInternalIpv4CidrBlock = composerInternalIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder composerNetworkAttachment(@Nullable String composerNetworkAttachment) {

            this.composerNetworkAttachment = composerNetworkAttachment;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(@Nullable Integer diskSizeGb) {

            this.diskSizeGb = diskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder enableIpMasqAgent(@Nullable Boolean enableIpMasqAgent) {

            this.enableIpMasqAgent = enableIpMasqAgent;
            return this;
        }
        @CustomType.Setter
        public Builder ipAllocationPolicy(@Nullable EnvironmentConfigNodeConfigIpAllocationPolicy ipAllocationPolicy) {

            this.ipAllocationPolicy = ipAllocationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder machineType(@Nullable String machineType) {

            this.machineType = machineType;
            return this;
        }
        @CustomType.Setter
        public Builder maxPodsPerNode(@Nullable Integer maxPodsPerNode) {

            this.maxPodsPerNode = maxPodsPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder network(@Nullable String network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder oauthScopes(@Nullable List<String> oauthScopes) {

            this.oauthScopes = oauthScopes;
            return this;
        }
        public Builder oauthScopes(String... oauthScopes) {
            return oauthScopes(List.of(oauthScopes));
        }
        @CustomType.Setter
        public Builder serviceAccount(@Nullable String serviceAccount) {

            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder subnetwork(@Nullable String subnetwork) {

            this.subnetwork = subnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder zone(@Nullable String zone) {

            this.zone = zone;
            return this;
        }
        public EnvironmentConfigNodeConfig build() {
            final var _resultValue = new EnvironmentConfigNodeConfig();
            _resultValue.composerInternalIpv4CidrBlock = composerInternalIpv4CidrBlock;
            _resultValue.composerNetworkAttachment = composerNetworkAttachment;
            _resultValue.diskSizeGb = diskSizeGb;
            _resultValue.enableIpMasqAgent = enableIpMasqAgent;
            _resultValue.ipAllocationPolicy = ipAllocationPolicy;
            _resultValue.machineType = machineType;
            _resultValue.maxPodsPerNode = maxPodsPerNode;
            _resultValue.network = network;
            _resultValue.oauthScopes = oauthScopes;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.subnetwork = subnetwork;
            _resultValue.tags = tags;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
