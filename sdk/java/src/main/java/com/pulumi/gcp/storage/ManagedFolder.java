// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.storage.ManagedFolderArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A Google Cloud Storage Managed Folder.
 * 
 * You can apply Identity and Access Management (IAM) policies to
 * managed folders to grant principals access only to the objects
 * within the managed folder, which lets you more finely control access
 * for specific data sets and tables within a bucket. You can nest
 * managed folders up to 15 levels deep, including the parent managed
 * folder.
 * 
 * Managed folders can only be created in buckets that have uniform
 * bucket-level access enabled.
 * 
 * To get more information about ManagedFolder, see:
 * 
 * * [API documentation](https://cloud.google.com/storage/docs/json_api/v1/managedFolder)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/storage/docs/managed-folders)
 * 
 * ## Example Usage
 * 
 * ### Storage Managed Folder Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.ManagedFolder;
 * import com.pulumi.gcp.storage.ManagedFolderArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name("my-bucket")
 *             .location("EU")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var folder = new ManagedFolder("folder", ManagedFolderArgs.builder()
 *             .bucket(bucket.name())
 *             .name("managed/folder/name/")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ManagedFolder can be imported using any of these accepted formats:
 * 
 * * `{{bucket}}/managedFolders/{{name}}`
 * 
 * * `{{bucket}}/{{name}}`
 * 
 * When using the `pulumi import` command, ManagedFolder can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:storage/managedFolder:ManagedFolder default {{bucket}}/managedFolders/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:storage/managedFolder:ManagedFolder default {{bucket}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:storage/managedFolder:ManagedFolder")
public class ManagedFolder extends com.pulumi.resources.CustomResource {
    /**
     * The name of the bucket that contains the managed folder.
     * 
     */
    @Export(name="bucket", refs={String.class}, tree="[0]")
    private Output<String> bucket;

    /**
     * @return The name of the bucket that contains the managed folder.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }
    /**
     * The timestamp at which this managed folder was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The timestamp at which this managed folder was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The metadata generation of the managed folder.
     * 
     */
    @Export(name="metageneration", refs={String.class}, tree="[0]")
    private Output<String> metageneration;

    /**
     * @return The metadata generation of the managed folder.
     * 
     */
    public Output<String> metageneration() {
        return this.metageneration;
    }
    /**
     * The name of the managed folder expressed as a path. Must include
     * trailing &#39;/&#39;. For example, `example_dir/example_dir2/`.
     * 
     * ***
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the managed folder expressed as a path. Must include
     * trailing &#39;/&#39;. For example, `example_dir/example_dir2/`.
     * 
     * ***
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", refs={String.class}, tree="[0]")
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * The timestamp at which this managed folder was most recently updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The timestamp at which this managed folder was most recently updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ManagedFolder(String name) {
        this(name, ManagedFolderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ManagedFolder(String name, ManagedFolderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ManagedFolder(String name, ManagedFolderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:storage/managedFolder:ManagedFolder", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private ManagedFolder(String name, Output<String> id, @Nullable ManagedFolderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:storage/managedFolder:ManagedFolder", name, state, makeResourceOptions(options, id));
    }

    private static ManagedFolderArgs makeArgs(ManagedFolderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ManagedFolderArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ManagedFolder get(String name, Output<String> id, @Nullable ManagedFolderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ManagedFolder(name, id, state, options);
    }
}
