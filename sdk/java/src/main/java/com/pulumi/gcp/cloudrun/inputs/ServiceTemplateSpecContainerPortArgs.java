// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTemplateSpecContainerPortArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTemplateSpecContainerPortArgs Empty = new ServiceTemplateSpecContainerPortArgs();

    /**
     * Port number the container listens on. This must be a valid port number (between 1 and 65535). Defaults to &#34;8080&#34;.
     * 
     */
    @Import(name="containerPort")
    private @Nullable Output<Integer> containerPort;

    /**
     * @return Port number the container listens on. This must be a valid port number (between 1 and 65535). Defaults to &#34;8080&#34;.
     * 
     */
    public Optional<Output<Integer>> containerPort() {
        return Optional.ofNullable(this.containerPort);
    }

    /**
     * If specified, used to specify which protocol to use. Allowed values are &#34;http1&#34; (HTTP/1) and &#34;h2c&#34; (HTTP/2 end-to-end). Defaults to &#34;http1&#34;.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return If specified, used to specify which protocol to use. Allowed values are &#34;http1&#34; (HTTP/1) and &#34;h2c&#34; (HTTP/2 end-to-end). Defaults to &#34;http1&#34;.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Protocol for port. Must be &#34;TCP&#34;. Defaults to &#34;TCP&#34;.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Protocol for port. Must be &#34;TCP&#34;. Defaults to &#34;TCP&#34;.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    private ServiceTemplateSpecContainerPortArgs() {}

    private ServiceTemplateSpecContainerPortArgs(ServiceTemplateSpecContainerPortArgs $) {
        this.containerPort = $.containerPort;
        this.name = $.name;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTemplateSpecContainerPortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTemplateSpecContainerPortArgs $;

        public Builder() {
            $ = new ServiceTemplateSpecContainerPortArgs();
        }

        public Builder(ServiceTemplateSpecContainerPortArgs defaults) {
            $ = new ServiceTemplateSpecContainerPortArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerPort Port number the container listens on. This must be a valid port number (between 1 and 65535). Defaults to &#34;8080&#34;.
         * 
         * @return builder
         * 
         */
        public Builder containerPort(@Nullable Output<Integer> containerPort) {
            $.containerPort = containerPort;
            return this;
        }

        /**
         * @param containerPort Port number the container listens on. This must be a valid port number (between 1 and 65535). Defaults to &#34;8080&#34;.
         * 
         * @return builder
         * 
         */
        public Builder containerPort(Integer containerPort) {
            return containerPort(Output.of(containerPort));
        }

        /**
         * @param name If specified, used to specify which protocol to use. Allowed values are &#34;http1&#34; (HTTP/1) and &#34;h2c&#34; (HTTP/2 end-to-end). Defaults to &#34;http1&#34;.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name If specified, used to specify which protocol to use. Allowed values are &#34;http1&#34; (HTTP/1) and &#34;h2c&#34; (HTTP/2 end-to-end). Defaults to &#34;http1&#34;.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protocol Protocol for port. Must be &#34;TCP&#34;. Defaults to &#34;TCP&#34;.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol for port. Must be &#34;TCP&#34;. Defaults to &#34;TCP&#34;.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public ServiceTemplateSpecContainerPortArgs build() {
            return $;
        }
    }

}
