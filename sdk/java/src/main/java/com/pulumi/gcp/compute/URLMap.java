// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.URLMapArgs;
import com.pulumi.gcp.compute.inputs.URLMapState;
import com.pulumi.gcp.compute.outputs.URLMapDefaultRouteAction;
import com.pulumi.gcp.compute.outputs.URLMapDefaultUrlRedirect;
import com.pulumi.gcp.compute.outputs.URLMapHeaderAction;
import com.pulumi.gcp.compute.outputs.URLMapHostRule;
import com.pulumi.gcp.compute.outputs.URLMapPathMatcher;
import com.pulumi.gcp.compute.outputs.URLMapTest;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * UrlMaps are used to route requests to a backend service based on rules
 * that you define for the host and path of an incoming URL.
 * 
 * To get more information about UrlMap, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/urlMaps)
 * 
 * ## Example Usage
 * ### Url Map Basic
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HttpHealthCheck(&#34;default&#34;, HttpHealthCheckArgs.builder()        
 *             .requestPath(&#34;/&#34;)
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .build());
 * 
 *         var login = new BackendService(&#34;login&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .build());
 * 
 *         var staticBucket = new Bucket(&#34;staticBucket&#34;, BucketArgs.builder()        
 *             .location(&#34;US&#34;)
 *             .build());
 * 
 *         var staticBackendBucket = new BackendBucket(&#34;staticBackendBucket&#34;, BackendBucketArgs.builder()        
 *             .bucketName(staticBucket.name())
 *             .enableCdn(true)
 *             .build());
 * 
 *         var urlmap = new URLMap(&#34;urlmap&#34;, URLMapArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .defaultService(staticBackendBucket.id())
 *             .hostRules(            
 *                 URLMapHostRuleArgs.builder()
 *                     .hosts(&#34;mysite.com&#34;)
 *                     .pathMatcher(&#34;mysite&#34;)
 *                     .build(),
 *                 URLMapHostRuleArgs.builder()
 *                     .hosts(&#34;myothersite.com&#34;)
 *                     .pathMatcher(&#34;otherpaths&#34;)
 *                     .build())
 *             .pathMatchers(            
 *                 URLMapPathMatcherArgs.builder()
 *                     .name(&#34;mysite&#34;)
 *                     .defaultService(staticBackendBucket.id())
 *                     .pathRules(                    
 *                         URLMapPathMatcherPathRuleArgs.builder()
 *                             .paths(&#34;/home&#34;)
 *                             .service(staticBackendBucket.id())
 *                             .build(),
 *                         URLMapPathMatcherPathRuleArgs.builder()
 *                             .paths(&#34;/login&#34;)
 *                             .service(login.id())
 *                             .build(),
 *                         URLMapPathMatcherPathRuleArgs.builder()
 *                             .paths(&#34;/static&#34;)
 *                             .service(staticBackendBucket.id())
 *                             .build())
 *                     .build(),
 *                 URLMapPathMatcherArgs.builder()
 *                     .name(&#34;otherpaths&#34;)
 *                     .defaultService(staticBackendBucket.id())
 *                     .build())
 *             .tests(URLMapTestArgs.builder()
 *                 .service(staticBackendBucket.id())
 *                 .host(&#34;hi.com&#34;)
 *                 .path(&#34;/home&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Url Map Traffic Director Route
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HealthCheck(&#34;default&#34;, HealthCheckArgs.builder()        
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var home = new BackendService(&#34;home&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .loadBalancingScheme(&#34;INTERNAL_SELF_MANAGED&#34;)
 *             .build());
 * 
 *         var urlmap = new URLMap(&#34;urlmap&#34;, URLMapArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .defaultService(home.id())
 *             .hostRules(URLMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(URLMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(home.id())
 *                 .routeRules(URLMapPathMatcherRouteRuleArgs.builder()
 *                     .priority(1)
 *                     .headerAction(URLMapPathMatcherRouteRuleHeaderActionArgs.builder()
 *                         .requestHeadersToRemoves(&#34;RemoveMe2&#34;)
 *                         .requestHeadersToAdds(URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs.builder()
 *                             .headerName(&#34;AddSomethingElse&#34;)
 *                             .headerValue(&#34;MyOtherValue&#34;)
 *                             .replace(true)
 *                             .build())
 *                         .responseHeadersToRemoves(&#34;RemoveMe3&#34;)
 *                         .responseHeadersToAdds(URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs.builder()
 *                             .headerName(&#34;AddMe&#34;)
 *                             .headerValue(&#34;MyValue&#34;)
 *                             .replace(false)
 *                             .build())
 *                         .build())
 *                     .matchRules(URLMapPathMatcherRouteRuleMatchRuleArgs.builder()
 *                         .fullPathMatch(&#34;a full path&#34;)
 *                         .headerMatches(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs.builder()
 *                             .headerName(&#34;someheader&#34;)
 *                             .exactMatch(&#34;match this exactly&#34;)
 *                             .invertMatch(true)
 *                             .build())
 *                         .ignoreCase(true)
 *                         .metadataFilters(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs.builder()
 *                             .filterMatchCriteria(&#34;MATCH_ANY&#34;)
 *                             .filterLabels(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs.builder()
 *                                 .name(&#34;PLANET&#34;)
 *                                 .value(&#34;MARS&#34;)
 *                                 .build())
 *                             .build())
 *                         .queryParameterMatches(URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs.builder()
 *                             .name(&#34;a query parameter&#34;)
 *                             .presentMatch(true)
 *                             .build())
 *                         .build())
 *                     .urlRedirect(URLMapPathMatcherRouteRuleUrlRedirectArgs.builder()
 *                         .hostRedirect(&#34;A host&#34;)
 *                         .httpsRedirect(false)
 *                         .pathRedirect(&#34;some/path&#34;)
 *                         .redirectResponseCode(&#34;TEMPORARY_REDIRECT&#34;)
 *                         .stripQuery(true)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .tests(URLMapTestArgs.builder()
 *                 .service(home.id())
 *                 .host(&#34;hi.com&#34;)
 *                 .path(&#34;/home&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Url Map Traffic Director Route Partial
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HealthCheck(&#34;default&#34;, HealthCheckArgs.builder()        
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var home = new BackendService(&#34;home&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .loadBalancingScheme(&#34;INTERNAL_SELF_MANAGED&#34;)
 *             .build());
 * 
 *         var urlmap = new URLMap(&#34;urlmap&#34;, URLMapArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .defaultService(home.id())
 *             .hostRules(URLMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(URLMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(home.id())
 *                 .routeRules(URLMapPathMatcherRouteRuleArgs.builder()
 *                     .priority(1)
 *                     .matchRules(URLMapPathMatcherRouteRuleMatchRuleArgs.builder()
 *                         .prefixMatch(&#34;/someprefix&#34;)
 *                         .headerMatches(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs.builder()
 *                             .headerName(&#34;someheader&#34;)
 *                             .exactMatch(&#34;match this exactly&#34;)
 *                             .invertMatch(true)
 *                             .build())
 *                         .build())
 *                     .urlRedirect(URLMapPathMatcherRouteRuleUrlRedirectArgs.builder()
 *                         .pathRedirect(&#34;some/path&#34;)
 *                         .redirectResponseCode(&#34;TEMPORARY_REDIRECT&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .tests(URLMapTestArgs.builder()
 *                 .service(home.id())
 *                 .host(&#34;hi.com&#34;)
 *                 .path(&#34;/home&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Url Map Traffic Director Path
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HealthCheck(&#34;default&#34;, HealthCheckArgs.builder()        
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var home = new BackendService(&#34;home&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .loadBalancingScheme(&#34;INTERNAL_SELF_MANAGED&#34;)
 *             .build());
 * 
 *         var urlmap = new URLMap(&#34;urlmap&#34;, URLMapArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .defaultService(home.id())
 *             .hostRules(URLMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(URLMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(home.id())
 *                 .pathRules(URLMapPathMatcherPathRuleArgs.builder()
 *                     .paths(&#34;/home&#34;)
 *                     .routeAction(URLMapPathMatcherPathRuleRouteActionArgs.builder()
 *                         .corsPolicy(URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs.builder()
 *                             .allowCredentials(true)
 *                             .allowHeaders(&#34;Allowed content&#34;)
 *                             .allowMethods(&#34;GET&#34;)
 *                             .allowOriginRegexes(&#34;abc.*&#34;)
 *                             .allowOrigins(&#34;Allowed origin&#34;)
 *                             .exposeHeaders(&#34;Exposed header&#34;)
 *                             .maxAge(30)
 *                             .disabled(false)
 *                             .build())
 *                         .faultInjectionPolicy(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs.builder()
 *                             .abort(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs.builder()
 *                                 .httpStatus(234)
 *                                 .percentage(5.6)
 *                                 .build())
 *                             .delay(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs.builder()
 *                                 .fixedDelay(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs.builder()
 *                                     .seconds(0)
 *                                     .nanos(50000)
 *                                     .build())
 *                                 .percentage(7.8)
 *                                 .build())
 *                             .build())
 *                         .requestMirrorPolicy(URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs.builder()
 *                             .backendService(home.id())
 *                             .build())
 *                         .retryPolicy(URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs.builder()
 *                             .numRetries(4)
 *                             .perTryTimeout(URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs.builder()
 *                                 .seconds(30)
 *                                 .build())
 *                             .retryConditions(                            
 *                                 &#34;5xx&#34;,
 *                                 &#34;deadline-exceeded&#34;)
 *                             .build())
 *                         .timeout(URLMapPathMatcherPathRuleRouteActionTimeoutArgs.builder()
 *                             .seconds(20)
 *                             .nanos(750000000)
 *                             .build())
 *                         .urlRewrite(URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs.builder()
 *                             .hostRewrite(&#34;A replacement header&#34;)
 *                             .pathPrefixRewrite(&#34;A replacement path&#34;)
 *                             .build())
 *                         .weightedBackendServices(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs.builder()
 *                             .backendService(home.id())
 *                             .weight(400)
 *                             .headerAction(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs.builder()
 *                                 .requestHeadersToRemoves(&#34;RemoveMe&#34;)
 *                                 .requestHeadersToAdds(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs.builder()
 *                                     .headerName(&#34;AddMe&#34;)
 *                                     .headerValue(&#34;MyValue&#34;)
 *                                     .replace(true)
 *                                     .build())
 *                                 .responseHeadersToRemoves(&#34;RemoveMe&#34;)
 *                                 .responseHeadersToAdds(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs.builder()
 *                                     .headerName(&#34;AddMe&#34;)
 *                                     .headerValue(&#34;MyValue&#34;)
 *                                     .replace(false)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .tests(URLMapTestArgs.builder()
 *                 .service(home.id())
 *                 .host(&#34;hi.com&#34;)
 *                 .path(&#34;/home&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Url Map Traffic Director Path Partial
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HealthCheck(&#34;default&#34;, HealthCheckArgs.builder()        
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var home = new BackendService(&#34;home&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .loadBalancingScheme(&#34;INTERNAL_SELF_MANAGED&#34;)
 *             .build());
 * 
 *         var urlmap = new URLMap(&#34;urlmap&#34;, URLMapArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .defaultService(home.id())
 *             .hostRules(URLMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(URLMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(home.id())
 *                 .pathRules(URLMapPathMatcherPathRuleArgs.builder()
 *                     .paths(&#34;/home&#34;)
 *                     .routeAction(URLMapPathMatcherPathRuleRouteActionArgs.builder()
 *                         .corsPolicy(URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs.builder()
 *                             .allowCredentials(true)
 *                             .allowHeaders(&#34;Allowed content&#34;)
 *                             .allowMethods(&#34;GET&#34;)
 *                             .allowOriginRegexes(&#34;abc.*&#34;)
 *                             .allowOrigins(&#34;Allowed origin&#34;)
 *                             .exposeHeaders(&#34;Exposed header&#34;)
 *                             .maxAge(30)
 *                             .disabled(false)
 *                             .build())
 *                         .weightedBackendServices(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs.builder()
 *                             .backendService(home.id())
 *                             .weight(400)
 *                             .headerAction(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs.builder()
 *                                 .requestHeadersToRemoves(&#34;RemoveMe&#34;)
 *                                 .requestHeadersToAdds(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs.builder()
 *                                     .headerName(&#34;AddMe&#34;)
 *                                     .headerValue(&#34;MyValue&#34;)
 *                                     .replace(true)
 *                                     .build())
 *                                 .responseHeadersToRemoves(&#34;RemoveMe&#34;)
 *                                 .responseHeadersToAdds(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs.builder()
 *                                     .headerName(&#34;AddMe&#34;)
 *                                     .headerValue(&#34;MyValue&#34;)
 *                                     .replace(false)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .tests(URLMapTestArgs.builder()
 *                 .service(home.id())
 *                 .host(&#34;hi.com&#34;)
 *                 .path(&#34;/home&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Url Map Header Based Routing
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHttpHealthCheck = new HttpHealthCheck(&#34;defaultHttpHealthCheck&#34;, HttpHealthCheckArgs.builder()        
 *             .requestPath(&#34;/&#34;)
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .build());
 * 
 *         var defaultBackendService = new BackendService(&#34;defaultBackendService&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(defaultHttpHealthCheck.id())
 *             .build());
 * 
 *         var service_a = new BackendService(&#34;service-a&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(defaultHttpHealthCheck.id())
 *             .build());
 * 
 *         var service_b = new BackendService(&#34;service-b&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(defaultHttpHealthCheck.id())
 *             .build());
 * 
 *         var urlmap = new URLMap(&#34;urlmap&#34;, URLMapArgs.builder()        
 *             .description(&#34;header-based routing example&#34;)
 *             .defaultService(defaultBackendService.id())
 *             .hostRules(URLMapHostRuleArgs.builder()
 *                 .hosts(&#34;*&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(URLMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(defaultBackendService.id())
 *                 .routeRules(                
 *                     URLMapPathMatcherRouteRuleArgs.builder()
 *                         .priority(1)
 *                         .service(service_a.id())
 *                         .matchRules(URLMapPathMatcherRouteRuleMatchRuleArgs.builder()
 *                             .prefixMatch(&#34;/&#34;)
 *                             .ignoreCase(true)
 *                             .headerMatches(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs.builder()
 *                                 .headerName(&#34;abtest&#34;)
 *                                 .exactMatch(&#34;a&#34;)
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     URLMapPathMatcherRouteRuleArgs.builder()
 *                         .priority(2)
 *                         .service(service_b.id())
 *                         .matchRules(URLMapPathMatcherRouteRuleMatchRuleArgs.builder()
 *                             .ignoreCase(true)
 *                             .prefixMatch(&#34;/&#34;)
 *                             .headerMatches(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs.builder()
 *                                 .headerName(&#34;abtest&#34;)
 *                                 .exactMatch(&#34;b&#34;)
 *                                 .build())
 *                             .build())
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Url Map Parameter Based Routing
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHttpHealthCheck = new HttpHealthCheck(&#34;defaultHttpHealthCheck&#34;, HttpHealthCheckArgs.builder()        
 *             .requestPath(&#34;/&#34;)
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .build());
 * 
 *         var defaultBackendService = new BackendService(&#34;defaultBackendService&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(defaultHttpHealthCheck.id())
 *             .build());
 * 
 *         var service_a = new BackendService(&#34;service-a&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(defaultHttpHealthCheck.id())
 *             .build());
 * 
 *         var service_b = new BackendService(&#34;service-b&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(defaultHttpHealthCheck.id())
 *             .build());
 * 
 *         var urlmap = new URLMap(&#34;urlmap&#34;, URLMapArgs.builder()        
 *             .description(&#34;parameter-based routing example&#34;)
 *             .defaultService(defaultBackendService.id())
 *             .hostRules(URLMapHostRuleArgs.builder()
 *                 .hosts(&#34;*&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(URLMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(defaultBackendService.id())
 *                 .routeRules(                
 *                     URLMapPathMatcherRouteRuleArgs.builder()
 *                         .priority(1)
 *                         .service(service_a.id())
 *                         .matchRules(URLMapPathMatcherRouteRuleMatchRuleArgs.builder()
 *                             .prefixMatch(&#34;/&#34;)
 *                             .ignoreCase(true)
 *                             .queryParameterMatches(URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs.builder()
 *                                 .name(&#34;abtest&#34;)
 *                                 .exactMatch(&#34;a&#34;)
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     URLMapPathMatcherRouteRuleArgs.builder()
 *                         .priority(2)
 *                         .service(service_b.id())
 *                         .matchRules(URLMapPathMatcherRouteRuleMatchRuleArgs.builder()
 *                             .ignoreCase(true)
 *                             .prefixMatch(&#34;/&#34;)
 *                             .queryParameterMatches(URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs.builder()
 *                                 .name(&#34;abtest&#34;)
 *                                 .exactMatch(&#34;b&#34;)
 *                                 .build())
 *                             .build())
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * UrlMap can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/uRLMap:URLMap default projects/{{project}}/global/urlMaps/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/uRLMap:URLMap default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/uRLMap:URLMap default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/uRLMap:URLMap")
public class URLMap extends com.pulumi.resources.CustomResource {
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", type=String.class, parameters={})
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
     * advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
     * to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
     * Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
     * Only one of defaultRouteAction or defaultUrlRedirect must be set.
     * Structure is documented below.
     * 
     */
    @Export(name="defaultRouteAction", type=URLMapDefaultRouteAction.class, parameters={})
    private Output</* @Nullable */ URLMapDefaultRouteAction> defaultRouteAction;

    /**
     * @return defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
     * advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
     * to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
     * Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
     * Only one of defaultRouteAction or defaultUrlRedirect must be set.
     * Structure is documented below.
     * 
     */
    public Output<Optional<URLMapDefaultRouteAction>> defaultRouteAction() {
        return Codegen.optional(this.defaultRouteAction);
    }
    /**
     * The backend service or backend bucket to use when none of the given paths match.
     * 
     */
    @Export(name="defaultService", type=String.class, parameters={})
    private Output</* @Nullable */ String> defaultService;

    /**
     * @return The backend service or backend bucket to use when none of the given paths match.
     * 
     */
    public Output<Optional<String>> defaultService() {
        return Codegen.optional(this.defaultService);
    }
    /**
     * When none of the specified hostRules match, the request is redirected to a URL specified
     * by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
     * defaultRouteAction must not be set.
     * Structure is documented below.
     * 
     */
    @Export(name="defaultUrlRedirect", type=URLMapDefaultUrlRedirect.class, parameters={})
    private Output</* @Nullable */ URLMapDefaultUrlRedirect> defaultUrlRedirect;

    /**
     * @return When none of the specified hostRules match, the request is redirected to a URL specified
     * by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
     * defaultRouteAction must not be set.
     * Structure is documented below.
     * 
     */
    public Output<Optional<URLMapDefaultUrlRedirect>> defaultUrlRedirect() {
        return Codegen.optional(this.defaultUrlRedirect);
    }
    /**
     * Description of this test case.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of this test case.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
     * 
     */
    @Export(name="fingerprint", type=String.class, parameters={})
    private Output<String> fingerprint;

    /**
     * @return Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
     * 
     */
    public Output<String> fingerprint() {
        return this.fingerprint;
    }
    /**
     * Specifies changes to request and response headers that need to take effect for
     * the selected backendService.
     * headerAction specified here take effect before headerAction in the enclosing
     * HttpRouteRule, PathMatcher and UrlMap.
     * Structure is documented below.
     * 
     */
    @Export(name="headerAction", type=URLMapHeaderAction.class, parameters={})
    private Output</* @Nullable */ URLMapHeaderAction> headerAction;

    /**
     * @return Specifies changes to request and response headers that need to take effect for
     * the selected backendService.
     * headerAction specified here take effect before headerAction in the enclosing
     * HttpRouteRule, PathMatcher and UrlMap.
     * Structure is documented below.
     * 
     */
    public Output<Optional<URLMapHeaderAction>> headerAction() {
        return Codegen.optional(this.headerAction);
    }
    /**
     * The list of HostRules to use against the URL.
     * Structure is documented below.
     * 
     */
    @Export(name="hostRules", type=List.class, parameters={URLMapHostRule.class})
    private Output</* @Nullable */ List<URLMapHostRule>> hostRules;

    /**
     * @return The list of HostRules to use against the URL.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<URLMapHostRule>>> hostRules() {
        return Codegen.optional(this.hostRules);
    }
    /**
     * The unique identifier for the resource.
     * 
     */
    @Export(name="mapId", type=Integer.class, parameters={})
    private Output<Integer> mapId;

    /**
     * @return The unique identifier for the resource.
     * 
     */
    public Output<Integer> mapId() {
        return this.mapId;
    }
    /**
     * The name of the query parameter to match. The query parameter must exist in the
     * request, in the absence of which the request match fails.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the query parameter to match. The query parameter must exist in the
     * request, in the absence of which the request match fails.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The name of the PathMatcher to use to match the path portion of the URL if the
     * hostRule matches the URL&#39;s host portion.
     * 
     */
    @Export(name="pathMatchers", type=List.class, parameters={URLMapPathMatcher.class})
    private Output</* @Nullable */ List<URLMapPathMatcher>> pathMatchers;

    /**
     * @return The name of the PathMatcher to use to match the path portion of the URL if the
     * hostRule matches the URL&#39;s host portion.
     * 
     */
    public Output<Optional<List<URLMapPathMatcher>>> pathMatchers() {
        return Codegen.optional(this.pathMatchers);
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * The list of expected URL mapping tests. Request to update this UrlMap will
     * succeed only if all of the test cases pass. You can specify a maximum of 100
     * tests per UrlMap.
     * Structure is documented below.
     * 
     */
    @Export(name="tests", type=List.class, parameters={URLMapTest.class})
    private Output</* @Nullable */ List<URLMapTest>> tests;

    /**
     * @return The list of expected URL mapping tests. Request to update this UrlMap will
     * succeed only if all of the test cases pass. You can specify a maximum of 100
     * tests per UrlMap.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<URLMapTest>>> tests() {
        return Codegen.optional(this.tests);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public URLMap(String name) {
        this(name, URLMapArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public URLMap(String name, @Nullable URLMapArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public URLMap(String name, @Nullable URLMapArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/uRLMap:URLMap", name, args == null ? URLMapArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private URLMap(String name, Output<String> id, @Nullable URLMapState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/uRLMap:URLMap", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static URLMap get(String name, Output<String> id, @Nullable URLMapState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new URLMap(name, id, state, options);
    }
}
