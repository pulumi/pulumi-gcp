// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForOrganizationOrchestratedResourceArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForOrganizationOrchestrationScopeArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForOrganizationOrchestrationStateArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForOrganizationState extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForOrganizationState Empty = new V2PolicyOrchestratorForOrganizationState();

    /**
     * Required. Action to be done by the orchestrator in
     * `projects/{project_id}/zones/{zone_id}` locations defined by the
     * `orchestration_scope`. Allowed values:
     * - `UPSERT` - Orchestrator will create or update target resources.
     * - `DELETE` - Orchestrator will delete target resources, if they exist
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Required. Action to be done by the orchestrator in
     * `projects/{project_id}/zones/{zone_id}` locations defined by the
     * `orchestration_scope`. Allowed values:
     * - `UPSERT` - Orchestrator will create or update target resources.
     * - `DELETE` - Orchestrator will delete target resources, if they exist
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Output only. Timestamp when the policy orchestrator resource was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. Timestamp when the policy orchestrator resource was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Optional. Freeform text describing the purpose of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. Freeform text describing the purpose of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * Output only. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return Output only. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Immutable. Identifier. In form of
     * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Immutable. Identifier. In form of
     * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Represents a resource that is being orchestrated by the policy orchestrator.
     * Structure is documented below.
     * 
     */
    @Import(name="orchestratedResource")
    private @Nullable Output<V2PolicyOrchestratorForOrganizationOrchestratedResourceArgs> orchestratedResource;

    /**
     * @return Represents a resource that is being orchestrated by the policy orchestrator.
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorForOrganizationOrchestratedResourceArgs>> orchestratedResource() {
        return Optional.ofNullable(this.orchestratedResource);
    }

    /**
     * Defines a set of selectors which drive which resources are in scope of policy
     * orchestration.
     * Structure is documented below.
     * 
     */
    @Import(name="orchestrationScope")
    private @Nullable Output<V2PolicyOrchestratorForOrganizationOrchestrationScopeArgs> orchestrationScope;

    /**
     * @return Defines a set of selectors which drive which resources are in scope of policy
     * orchestration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorForOrganizationOrchestrationScopeArgs>> orchestrationScope() {
        return Optional.ofNullable(this.orchestrationScope);
    }

    /**
     * Describes the state of the orchestration process.
     * Structure is documented below.
     * 
     */
    @Import(name="orchestrationStates")
    private @Nullable Output<List<V2PolicyOrchestratorForOrganizationOrchestrationStateArgs>> orchestrationStates;

    /**
     * @return Describes the state of the orchestration process.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<V2PolicyOrchestratorForOrganizationOrchestrationStateArgs>>> orchestrationStates() {
        return Optional.ofNullable(this.orchestrationStates);
    }

    /**
     * Part of `parent`. Required. The parent resource name in the form of:
     * * `organizations/{organization_id}/locations/global`
     * * `folders/{folder_id}/locations/global`
     * * `projects/{project_id_or_number}/locations/global`
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return Part of `parent`. Required. The parent resource name in the form of:
     * * `organizations/{organization_id}/locations/global`
     * * `folders/{folder_id}/locations/global`
     * * `projects/{project_id_or_number}/locations/global`
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * Required. The logical identifier of the policy orchestrator, with the following
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the parent.
     * 
     */
    @Import(name="policyOrchestratorId")
    private @Nullable Output<String> policyOrchestratorId;

    /**
     * @return Required. The logical identifier of the policy orchestrator, with the following
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the parent.
     * 
     */
    public Optional<Output<String>> policyOrchestratorId() {
        return Optional.ofNullable(this.policyOrchestratorId);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Output only. Set to true, if the there are ongoing changes being applied by the
     * orchestrator.
     * 
     */
    @Import(name="reconciling")
    private @Nullable Output<Boolean> reconciling;

    /**
     * @return Output only. Set to true, if the there are ongoing changes being applied by the
     * orchestrator.
     * 
     */
    public Optional<Output<Boolean>> reconciling() {
        return Optional.ofNullable(this.reconciling);
    }

    /**
     * Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
     * Allowed values:
     * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
     * - `STOPPED` - orchestrator won&#39;t make any changes.
     *   Note: There might be more states added in the future. We use string here
     *   instead of an enum, to avoid the need of propagating new states to all the
     *   client code.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
     * Allowed values:
     * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
     * - `STOPPED` - orchestrator won&#39;t make any changes.
     *   Note: There might be more states added in the future. We use string here
     *   instead of an enum, to avoid the need of propagating new states to all the
     *   client code.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Output only. Timestamp when the policy orchestrator resource was last modified.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. Timestamp when the policy orchestrator resource was last modified.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private V2PolicyOrchestratorForOrganizationState() {}

    private V2PolicyOrchestratorForOrganizationState(V2PolicyOrchestratorForOrganizationState $) {
        this.action = $.action;
        this.createTime = $.createTime;
        this.description = $.description;
        this.effectiveLabels = $.effectiveLabels;
        this.etag = $.etag;
        this.labels = $.labels;
        this.name = $.name;
        this.orchestratedResource = $.orchestratedResource;
        this.orchestrationScope = $.orchestrationScope;
        this.orchestrationStates = $.orchestrationStates;
        this.organizationId = $.organizationId;
        this.policyOrchestratorId = $.policyOrchestratorId;
        this.pulumiLabels = $.pulumiLabels;
        this.reconciling = $.reconciling;
        this.state = $.state;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForOrganizationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForOrganizationState $;

        public Builder() {
            $ = new V2PolicyOrchestratorForOrganizationState();
        }

        public Builder(V2PolicyOrchestratorForOrganizationState defaults) {
            $ = new V2PolicyOrchestratorForOrganizationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Required. Action to be done by the orchestrator in
         * `projects/{project_id}/zones/{zone_id}` locations defined by the
         * `orchestration_scope`. Allowed values:
         * - `UPSERT` - Orchestrator will create or update target resources.
         * - `DELETE` - Orchestrator will delete target resources, if they exist
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Required. Action to be done by the orchestrator in
         * `projects/{project_id}/zones/{zone_id}` locations defined by the
         * `orchestration_scope`. Allowed values:
         * - `UPSERT` - Orchestrator will create or update target resources.
         * - `DELETE` - Orchestrator will delete target resources, if they exist
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param createTime Output only. Timestamp when the policy orchestrator resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. Timestamp when the policy orchestrator resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Optional. Freeform text describing the purpose of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. Freeform text describing the purpose of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param etag Output only. This checksum is computed by the server based on the value of other
         * fields, and may be sent on update and delete requests to ensure the
         * client has an up-to-date value before proceeding.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag Output only. This checksum is computed by the server based on the value of other
         * fields, and may be sent on update and delete requests to ensure the
         * client has an up-to-date value before proceeding.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param labels Optional. Labels as key value pairs
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels as key value pairs
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Immutable. Identifier. In form of
         * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
         * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
         * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Immutable. Identifier. In form of
         * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
         * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
         * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orchestratedResource Represents a resource that is being orchestrated by the policy orchestrator.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orchestratedResource(@Nullable Output<V2PolicyOrchestratorForOrganizationOrchestratedResourceArgs> orchestratedResource) {
            $.orchestratedResource = orchestratedResource;
            return this;
        }

        /**
         * @param orchestratedResource Represents a resource that is being orchestrated by the policy orchestrator.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orchestratedResource(V2PolicyOrchestratorForOrganizationOrchestratedResourceArgs orchestratedResource) {
            return orchestratedResource(Output.of(orchestratedResource));
        }

        /**
         * @param orchestrationScope Defines a set of selectors which drive which resources are in scope of policy
         * orchestration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orchestrationScope(@Nullable Output<V2PolicyOrchestratorForOrganizationOrchestrationScopeArgs> orchestrationScope) {
            $.orchestrationScope = orchestrationScope;
            return this;
        }

        /**
         * @param orchestrationScope Defines a set of selectors which drive which resources are in scope of policy
         * orchestration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orchestrationScope(V2PolicyOrchestratorForOrganizationOrchestrationScopeArgs orchestrationScope) {
            return orchestrationScope(Output.of(orchestrationScope));
        }

        /**
         * @param orchestrationStates Describes the state of the orchestration process.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orchestrationStates(@Nullable Output<List<V2PolicyOrchestratorForOrganizationOrchestrationStateArgs>> orchestrationStates) {
            $.orchestrationStates = orchestrationStates;
            return this;
        }

        /**
         * @param orchestrationStates Describes the state of the orchestration process.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orchestrationStates(List<V2PolicyOrchestratorForOrganizationOrchestrationStateArgs> orchestrationStates) {
            return orchestrationStates(Output.of(orchestrationStates));
        }

        /**
         * @param orchestrationStates Describes the state of the orchestration process.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orchestrationStates(V2PolicyOrchestratorForOrganizationOrchestrationStateArgs... orchestrationStates) {
            return orchestrationStates(List.of(orchestrationStates));
        }

        /**
         * @param organizationId Part of `parent`. Required. The parent resource name in the form of:
         * * `organizations/{organization_id}/locations/global`
         * * `folders/{folder_id}/locations/global`
         * * `projects/{project_id_or_number}/locations/global`
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId Part of `parent`. Required. The parent resource name in the form of:
         * * `organizations/{organization_id}/locations/global`
         * * `folders/{folder_id}/locations/global`
         * * `projects/{project_id_or_number}/locations/global`
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param policyOrchestratorId Required. The logical identifier of the policy orchestrator, with the following
         * restrictions:
         * * Must contain only lowercase letters, numbers, and hyphens.
         * * Must start with a letter.
         * * Must be between 1-63 characters.
         * * Must end with a number or a letter.
         * * Must be unique within the parent.
         * 
         * @return builder
         * 
         */
        public Builder policyOrchestratorId(@Nullable Output<String> policyOrchestratorId) {
            $.policyOrchestratorId = policyOrchestratorId;
            return this;
        }

        /**
         * @param policyOrchestratorId Required. The logical identifier of the policy orchestrator, with the following
         * restrictions:
         * * Must contain only lowercase letters, numbers, and hyphens.
         * * Must start with a letter.
         * * Must be between 1-63 characters.
         * * Must end with a number or a letter.
         * * Must be unique within the parent.
         * 
         * @return builder
         * 
         */
        public Builder policyOrchestratorId(String policyOrchestratorId) {
            return policyOrchestratorId(Output.of(policyOrchestratorId));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param reconciling Output only. Set to true, if the there are ongoing changes being applied by the
         * orchestrator.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(@Nullable Output<Boolean> reconciling) {
            $.reconciling = reconciling;
            return this;
        }

        /**
         * @param reconciling Output only. Set to true, if the there are ongoing changes being applied by the
         * orchestrator.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(Boolean reconciling) {
            return reconciling(Output.of(reconciling));
        }

        /**
         * @param state Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
         * Allowed values:
         * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
         * - `STOPPED` - orchestrator won&#39;t make any changes.
         *   Note: There might be more states added in the future. We use string here
         *   instead of an enum, to avoid the need of propagating new states to all the
         *   client code.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
         * Allowed values:
         * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
         * - `STOPPED` - orchestrator won&#39;t make any changes.
         *   Note: There might be more states added in the future. We use string here
         *   instead of an enum, to avoid the need of propagating new states to all the
         *   client code.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param updateTime Output only. Timestamp when the policy orchestrator resource was last modified.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. Timestamp when the policy orchestrator resource was last modified.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public V2PolicyOrchestratorForOrganizationState build() {
            return $;
        }
    }

}
