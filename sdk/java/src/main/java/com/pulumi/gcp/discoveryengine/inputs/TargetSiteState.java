// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.discoveryengine.inputs.TargetSiteFailureReasonArgs;
import com.pulumi.gcp.discoveryengine.inputs.TargetSiteSiteVerificationInfoArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetSiteState extends com.pulumi.resources.ResourceArgs {

    public static final TargetSiteState Empty = new TargetSiteState();

    /**
     * The unique id of the data store.
     * 
     * ***
     * 
     */
    @Import(name="dataStoreId")
    private @Nullable Output<String> dataStoreId;

    /**
     * @return The unique id of the data store.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> dataStoreId() {
        return Optional.ofNullable(this.dataStoreId);
    }

    /**
     * If set to false, a uri_pattern is generated to include all pages whose
     * address contains the provided_uri_pattern. If set to true, an uri_pattern
     * is generated to try to be an exact match of the provided_uri_pattern or
     * just the specific page if the provided_uri_pattern is a specific one.
     * provided_uri_pattern is always normalized to generate the URI pattern to
     * be used by the search engine.
     * 
     */
    @Import(name="exactMatch")
    private @Nullable Output<Boolean> exactMatch;

    /**
     * @return If set to false, a uri_pattern is generated to include all pages whose
     * address contains the provided_uri_pattern. If set to true, an uri_pattern
     * is generated to try to be an exact match of the provided_uri_pattern or
     * just the specific page if the provided_uri_pattern is a specific one.
     * provided_uri_pattern is always normalized to generate the URI pattern to
     * be used by the search engine.
     * 
     */
    public Optional<Output<Boolean>> exactMatch() {
        return Optional.ofNullable(this.exactMatch);
    }

    /**
     * Site search indexing failure reasons.
     * Structure is documented below.
     * 
     */
    @Import(name="failureReasons")
    private @Nullable Output<List<TargetSiteFailureReasonArgs>> failureReasons;

    /**
     * @return Site search indexing failure reasons.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<TargetSiteFailureReasonArgs>>> failureReasons() {
        return Optional.ofNullable(this.failureReasons);
    }

    /**
     * This is system-generated based on the `provided_uri_pattern`.
     * 
     */
    @Import(name="generatedUriPattern")
    private @Nullable Output<String> generatedUriPattern;

    /**
     * @return This is system-generated based on the `provided_uri_pattern`.
     * 
     */
    public Optional<Output<String>> generatedUriPattern() {
        return Optional.ofNullable(this.generatedUriPattern);
    }

    /**
     * The indexing status.
     * 
     */
    @Import(name="indexingStatus")
    private @Nullable Output<String> indexingStatus;

    /**
     * @return The indexing status.
     * 
     */
    public Optional<Output<String>> indexingStatus() {
        return Optional.ofNullable(this.indexingStatus);
    }

    /**
     * The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The unique full resource name of the target site. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique full resource name of the target site. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The user provided URI pattern from which the `generated_uri_pattern` is
     * generated.
     * 
     */
    @Import(name="providedUriPattern")
    private @Nullable Output<String> providedUriPattern;

    /**
     * @return The user provided URI pattern from which the `generated_uri_pattern` is
     * generated.
     * 
     */
    public Optional<Output<String>> providedUriPattern() {
        return Optional.ofNullable(this.providedUriPattern);
    }

    /**
     * Root domain of the `provided_uri_pattern`.
     * 
     */
    @Import(name="rootDomainUri")
    private @Nullable Output<String> rootDomainUri;

    /**
     * @return Root domain of the `provided_uri_pattern`.
     * 
     */
    public Optional<Output<String>> rootDomainUri() {
        return Optional.ofNullable(this.rootDomainUri);
    }

    /**
     * Site ownership and validity verification status.
     * Structure is documented below.
     * 
     */
    @Import(name="siteVerificationInfos")
    private @Nullable Output<List<TargetSiteSiteVerificationInfoArgs>> siteVerificationInfos;

    /**
     * @return Site ownership and validity verification status.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<TargetSiteSiteVerificationInfoArgs>>> siteVerificationInfos() {
        return Optional.ofNullable(this.siteVerificationInfos);
    }

    /**
     * The unique id of the target site.
     * 
     */
    @Import(name="targetSiteId")
    private @Nullable Output<String> targetSiteId;

    /**
     * @return The unique id of the target site.
     * 
     */
    public Optional<Output<String>> targetSiteId() {
        return Optional.ofNullable(this.targetSiteId);
    }

    /**
     * The possible target site types.
     * Possible values are: `INCLUDE`, `EXCLUDE`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The possible target site types.
     * Possible values are: `INCLUDE`, `EXCLUDE`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The target site&#39;s last updated time.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return The target site&#39;s last updated time.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private TargetSiteState() {}

    private TargetSiteState(TargetSiteState $) {
        this.dataStoreId = $.dataStoreId;
        this.exactMatch = $.exactMatch;
        this.failureReasons = $.failureReasons;
        this.generatedUriPattern = $.generatedUriPattern;
        this.indexingStatus = $.indexingStatus;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.providedUriPattern = $.providedUriPattern;
        this.rootDomainUri = $.rootDomainUri;
        this.siteVerificationInfos = $.siteVerificationInfos;
        this.targetSiteId = $.targetSiteId;
        this.type = $.type;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetSiteState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetSiteState $;

        public Builder() {
            $ = new TargetSiteState();
        }

        public Builder(TargetSiteState defaults) {
            $ = new TargetSiteState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataStoreId The unique id of the data store.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder dataStoreId(@Nullable Output<String> dataStoreId) {
            $.dataStoreId = dataStoreId;
            return this;
        }

        /**
         * @param dataStoreId The unique id of the data store.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder dataStoreId(String dataStoreId) {
            return dataStoreId(Output.of(dataStoreId));
        }

        /**
         * @param exactMatch If set to false, a uri_pattern is generated to include all pages whose
         * address contains the provided_uri_pattern. If set to true, an uri_pattern
         * is generated to try to be an exact match of the provided_uri_pattern or
         * just the specific page if the provided_uri_pattern is a specific one.
         * provided_uri_pattern is always normalized to generate the URI pattern to
         * be used by the search engine.
         * 
         * @return builder
         * 
         */
        public Builder exactMatch(@Nullable Output<Boolean> exactMatch) {
            $.exactMatch = exactMatch;
            return this;
        }

        /**
         * @param exactMatch If set to false, a uri_pattern is generated to include all pages whose
         * address contains the provided_uri_pattern. If set to true, an uri_pattern
         * is generated to try to be an exact match of the provided_uri_pattern or
         * just the specific page if the provided_uri_pattern is a specific one.
         * provided_uri_pattern is always normalized to generate the URI pattern to
         * be used by the search engine.
         * 
         * @return builder
         * 
         */
        public Builder exactMatch(Boolean exactMatch) {
            return exactMatch(Output.of(exactMatch));
        }

        /**
         * @param failureReasons Site search indexing failure reasons.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder failureReasons(@Nullable Output<List<TargetSiteFailureReasonArgs>> failureReasons) {
            $.failureReasons = failureReasons;
            return this;
        }

        /**
         * @param failureReasons Site search indexing failure reasons.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder failureReasons(List<TargetSiteFailureReasonArgs> failureReasons) {
            return failureReasons(Output.of(failureReasons));
        }

        /**
         * @param failureReasons Site search indexing failure reasons.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder failureReasons(TargetSiteFailureReasonArgs... failureReasons) {
            return failureReasons(List.of(failureReasons));
        }

        /**
         * @param generatedUriPattern This is system-generated based on the `provided_uri_pattern`.
         * 
         * @return builder
         * 
         */
        public Builder generatedUriPattern(@Nullable Output<String> generatedUriPattern) {
            $.generatedUriPattern = generatedUriPattern;
            return this;
        }

        /**
         * @param generatedUriPattern This is system-generated based on the `provided_uri_pattern`.
         * 
         * @return builder
         * 
         */
        public Builder generatedUriPattern(String generatedUriPattern) {
            return generatedUriPattern(Output.of(generatedUriPattern));
        }

        /**
         * @param indexingStatus The indexing status.
         * 
         * @return builder
         * 
         */
        public Builder indexingStatus(@Nullable Output<String> indexingStatus) {
            $.indexingStatus = indexingStatus;
            return this;
        }

        /**
         * @param indexingStatus The indexing status.
         * 
         * @return builder
         * 
         */
        public Builder indexingStatus(String indexingStatus) {
            return indexingStatus(Output.of(indexingStatus));
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The unique full resource name of the target site. Values are of the format
         * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}`.
         * This field must be a UTF-8 encoded string with a length limit of 1024
         * characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique full resource name of the target site. Values are of the format
         * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}`.
         * This field must be a UTF-8 encoded string with a length limit of 1024
         * characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param providedUriPattern The user provided URI pattern from which the `generated_uri_pattern` is
         * generated.
         * 
         * @return builder
         * 
         */
        public Builder providedUriPattern(@Nullable Output<String> providedUriPattern) {
            $.providedUriPattern = providedUriPattern;
            return this;
        }

        /**
         * @param providedUriPattern The user provided URI pattern from which the `generated_uri_pattern` is
         * generated.
         * 
         * @return builder
         * 
         */
        public Builder providedUriPattern(String providedUriPattern) {
            return providedUriPattern(Output.of(providedUriPattern));
        }

        /**
         * @param rootDomainUri Root domain of the `provided_uri_pattern`.
         * 
         * @return builder
         * 
         */
        public Builder rootDomainUri(@Nullable Output<String> rootDomainUri) {
            $.rootDomainUri = rootDomainUri;
            return this;
        }

        /**
         * @param rootDomainUri Root domain of the `provided_uri_pattern`.
         * 
         * @return builder
         * 
         */
        public Builder rootDomainUri(String rootDomainUri) {
            return rootDomainUri(Output.of(rootDomainUri));
        }

        /**
         * @param siteVerificationInfos Site ownership and validity verification status.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder siteVerificationInfos(@Nullable Output<List<TargetSiteSiteVerificationInfoArgs>> siteVerificationInfos) {
            $.siteVerificationInfos = siteVerificationInfos;
            return this;
        }

        /**
         * @param siteVerificationInfos Site ownership and validity verification status.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder siteVerificationInfos(List<TargetSiteSiteVerificationInfoArgs> siteVerificationInfos) {
            return siteVerificationInfos(Output.of(siteVerificationInfos));
        }

        /**
         * @param siteVerificationInfos Site ownership and validity verification status.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder siteVerificationInfos(TargetSiteSiteVerificationInfoArgs... siteVerificationInfos) {
            return siteVerificationInfos(List.of(siteVerificationInfos));
        }

        /**
         * @param targetSiteId The unique id of the target site.
         * 
         * @return builder
         * 
         */
        public Builder targetSiteId(@Nullable Output<String> targetSiteId) {
            $.targetSiteId = targetSiteId;
            return this;
        }

        /**
         * @param targetSiteId The unique id of the target site.
         * 
         * @return builder
         * 
         */
        public Builder targetSiteId(String targetSiteId) {
            return targetSiteId(Output.of(targetSiteId));
        }

        /**
         * @param type The possible target site types.
         * Possible values are: `INCLUDE`, `EXCLUDE`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The possible target site types.
         * Possible values are: `INCLUDE`, `EXCLUDE`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updateTime The target site&#39;s last updated time.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime The target site&#39;s last updated time.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public TargetSiteState build() {
            return $;
        }
    }

}
