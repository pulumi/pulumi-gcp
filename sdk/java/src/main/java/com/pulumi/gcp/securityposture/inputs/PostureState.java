// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securityposture.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.securityposture.inputs.PosturePolicySetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PostureState extends com.pulumi.resources.ResourceArgs {

    public static final PostureState Empty = new PostureState();

    /**
     * Time the Posture was created in UTC.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Time the Posture was created in UTC.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Description of the posture.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the posture.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * For Resource freshness validation (https://google.aip.dev/154)
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return For Resource freshness validation (https://google.aip.dev/154)
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Location of the resource, eg: global.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location of the resource, eg: global.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of the posture.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the posture.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * List of policy sets for the posture.
     * Structure is documented below.
     * 
     */
    @Import(name="policySets")
    private @Nullable Output<List<PosturePolicySetArgs>> policySets;

    /**
     * @return List of policy sets for the posture.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<PosturePolicySetArgs>>> policySets() {
        return Optional.ofNullable(this.policySets);
    }

    /**
     * Id of the posture. It is an immutable field.
     * 
     */
    @Import(name="postureId")
    private @Nullable Output<String> postureId;

    /**
     * @return Id of the posture. It is an immutable field.
     * 
     */
    public Optional<Output<String>> postureId() {
        return Optional.ofNullable(this.postureId);
    }

    /**
     * If set, there are currently changes in flight to the posture.
     * 
     */
    @Import(name="reconciling")
    private @Nullable Output<Boolean> reconciling;

    /**
     * @return If set, there are currently changes in flight to the posture.
     * 
     */
    public Optional<Output<Boolean>> reconciling() {
        return Optional.ofNullable(this.reconciling);
    }

    /**
     * Revision_id of the posture.
     * 
     */
    @Import(name="revisionId")
    private @Nullable Output<String> revisionId;

    /**
     * @return Revision_id of the posture.
     * 
     */
    public Optional<Output<String>> revisionId() {
        return Optional.ofNullable(this.revisionId);
    }

    /**
     * State of the posture. Update to state field should not be triggered along with
     * with other field updates.
     * Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the posture. Update to state field should not be triggered along with
     * with other field updates.
     * Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Time the Posture was updated in UTC.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Time the Posture was updated in UTC.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private PostureState() {}

    private PostureState(PostureState $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.etag = $.etag;
        this.location = $.location;
        this.name = $.name;
        this.parent = $.parent;
        this.policySets = $.policySets;
        this.postureId = $.postureId;
        this.reconciling = $.reconciling;
        this.revisionId = $.revisionId;
        this.state = $.state;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PostureState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PostureState $;

        public Builder() {
            $ = new PostureState();
        }

        public Builder(PostureState defaults) {
            $ = new PostureState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Time the Posture was created in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Time the Posture was created in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Description of the posture.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the posture.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param etag For Resource freshness validation (https://google.aip.dev/154)
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag For Resource freshness validation (https://google.aip.dev/154)
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param location Location of the resource, eg: global.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of the resource, eg: global.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Name of the posture.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the posture.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parent The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param policySets List of policy sets for the posture.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder policySets(@Nullable Output<List<PosturePolicySetArgs>> policySets) {
            $.policySets = policySets;
            return this;
        }

        /**
         * @param policySets List of policy sets for the posture.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder policySets(List<PosturePolicySetArgs> policySets) {
            return policySets(Output.of(policySets));
        }

        /**
         * @param policySets List of policy sets for the posture.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder policySets(PosturePolicySetArgs... policySets) {
            return policySets(List.of(policySets));
        }

        /**
         * @param postureId Id of the posture. It is an immutable field.
         * 
         * @return builder
         * 
         */
        public Builder postureId(@Nullable Output<String> postureId) {
            $.postureId = postureId;
            return this;
        }

        /**
         * @param postureId Id of the posture. It is an immutable field.
         * 
         * @return builder
         * 
         */
        public Builder postureId(String postureId) {
            return postureId(Output.of(postureId));
        }

        /**
         * @param reconciling If set, there are currently changes in flight to the posture.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(@Nullable Output<Boolean> reconciling) {
            $.reconciling = reconciling;
            return this;
        }

        /**
         * @param reconciling If set, there are currently changes in flight to the posture.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(Boolean reconciling) {
            return reconciling(Output.of(reconciling));
        }

        /**
         * @param revisionId Revision_id of the posture.
         * 
         * @return builder
         * 
         */
        public Builder revisionId(@Nullable Output<String> revisionId) {
            $.revisionId = revisionId;
            return this;
        }

        /**
         * @param revisionId Revision_id of the posture.
         * 
         * @return builder
         * 
         */
        public Builder revisionId(String revisionId) {
            return revisionId(Output.of(revisionId));
        }

        /**
         * @param state State of the posture. Update to state field should not be triggered along with
         * with other field updates.
         * Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the posture. Update to state field should not be triggered along with
         * with other field updates.
         * Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param updateTime Time the Posture was updated in UTC.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Time the Posture was updated in UTC.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public PostureState build() {
            return $;
        }
    }

}
