// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.priviligedaccessmanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.priviligedaccessmanager.inputs.EntitlementApprovalWorkflowManualApprovalsStepApproversArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntitlementApprovalWorkflowManualApprovalsStepArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntitlementApprovalWorkflowManualApprovalsStepArgs Empty = new EntitlementApprovalWorkflowManualApprovalsStepArgs();

    /**
     * How many users from the above list need to approve.
     * If there are not enough distinct users in the list above then the workflow
     * will indefinitely block. Should always be greater than 0. Currently 1 is the only
     * supported value.
     * 
     */
    @Import(name="approvalsNeeded")
    private @Nullable Output<Integer> approvalsNeeded;

    /**
     * @return How many users from the above list need to approve.
     * If there are not enough distinct users in the list above then the workflow
     * will indefinitely block. Should always be greater than 0. Currently 1 is the only
     * supported value.
     * 
     */
    public Optional<Output<Integer>> approvalsNeeded() {
        return Optional.ofNullable(this.approvalsNeeded);
    }

    /**
     * Optional. Additional email addresses to be notified when a grant is pending approval.
     * 
     */
    @Import(name="approverEmailRecipients")
    private @Nullable Output<List<String>> approverEmailRecipients;

    /**
     * @return Optional. Additional email addresses to be notified when a grant is pending approval.
     * 
     */
    public Optional<Output<List<String>>> approverEmailRecipients() {
        return Optional.ofNullable(this.approverEmailRecipients);
    }

    /**
     * The potential set of approvers in this step. This list should contain at only one entry.
     * Structure is documented below.
     * 
     */
    @Import(name="approvers", required=true)
    private Output<EntitlementApprovalWorkflowManualApprovalsStepApproversArgs> approvers;

    /**
     * @return The potential set of approvers in this step. This list should contain at only one entry.
     * Structure is documented below.
     * 
     */
    public Output<EntitlementApprovalWorkflowManualApprovalsStepApproversArgs> approvers() {
        return this.approvers;
    }

    private EntitlementApprovalWorkflowManualApprovalsStepArgs() {}

    private EntitlementApprovalWorkflowManualApprovalsStepArgs(EntitlementApprovalWorkflowManualApprovalsStepArgs $) {
        this.approvalsNeeded = $.approvalsNeeded;
        this.approverEmailRecipients = $.approverEmailRecipients;
        this.approvers = $.approvers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntitlementApprovalWorkflowManualApprovalsStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntitlementApprovalWorkflowManualApprovalsStepArgs $;

        public Builder() {
            $ = new EntitlementApprovalWorkflowManualApprovalsStepArgs();
        }

        public Builder(EntitlementApprovalWorkflowManualApprovalsStepArgs defaults) {
            $ = new EntitlementApprovalWorkflowManualApprovalsStepArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param approvalsNeeded How many users from the above list need to approve.
         * If there are not enough distinct users in the list above then the workflow
         * will indefinitely block. Should always be greater than 0. Currently 1 is the only
         * supported value.
         * 
         * @return builder
         * 
         */
        public Builder approvalsNeeded(@Nullable Output<Integer> approvalsNeeded) {
            $.approvalsNeeded = approvalsNeeded;
            return this;
        }

        /**
         * @param approvalsNeeded How many users from the above list need to approve.
         * If there are not enough distinct users in the list above then the workflow
         * will indefinitely block. Should always be greater than 0. Currently 1 is the only
         * supported value.
         * 
         * @return builder
         * 
         */
        public Builder approvalsNeeded(Integer approvalsNeeded) {
            return approvalsNeeded(Output.of(approvalsNeeded));
        }

        /**
         * @param approverEmailRecipients Optional. Additional email addresses to be notified when a grant is pending approval.
         * 
         * @return builder
         * 
         */
        public Builder approverEmailRecipients(@Nullable Output<List<String>> approverEmailRecipients) {
            $.approverEmailRecipients = approverEmailRecipients;
            return this;
        }

        /**
         * @param approverEmailRecipients Optional. Additional email addresses to be notified when a grant is pending approval.
         * 
         * @return builder
         * 
         */
        public Builder approverEmailRecipients(List<String> approverEmailRecipients) {
            return approverEmailRecipients(Output.of(approverEmailRecipients));
        }

        /**
         * @param approverEmailRecipients Optional. Additional email addresses to be notified when a grant is pending approval.
         * 
         * @return builder
         * 
         */
        public Builder approverEmailRecipients(String... approverEmailRecipients) {
            return approverEmailRecipients(List.of(approverEmailRecipients));
        }

        /**
         * @param approvers The potential set of approvers in this step. This list should contain at only one entry.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder approvers(Output<EntitlementApprovalWorkflowManualApprovalsStepApproversArgs> approvers) {
            $.approvers = approvers;
            return this;
        }

        /**
         * @param approvers The potential set of approvers in this step. This list should contain at only one entry.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder approvers(EntitlementApprovalWorkflowManualApprovalsStepApproversArgs approvers) {
            return approvers(Output.of(approvers));
        }

        public EntitlementApprovalWorkflowManualApprovalsStepArgs build() {
            if ($.approvers == null) {
                throw new MissingRequiredPropertyException("EntitlementApprovalWorkflowManualApprovalsStepArgs", "approvers");
            }
            return $;
        }
    }

}
