// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.apigee.inputs.DeveloperAppCredentialApiProductArgs;
import com.pulumi.gcp.apigee.inputs.DeveloperAppCredentialAttributeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeveloperAppCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeveloperAppCredentialArgs Empty = new DeveloperAppCredentialArgs();

    /**
     * List of API products associated with the developer app.
     * 
     */
    @Import(name="apiProducts")
    private @Nullable Output<List<DeveloperAppCredentialApiProductArgs>> apiProducts;

    /**
     * @return List of API products associated with the developer app.
     * 
     */
    public Optional<Output<List<DeveloperAppCredentialApiProductArgs>>> apiProducts() {
        return Optional.ofNullable(this.apiProducts);
    }

    /**
     * Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<List<DeveloperAppCredentialAttributeArgs>> attributes;

    /**
     * @return Developer attributes (name/value pairs). The custom attribute limit is 18.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DeveloperAppCredentialAttributeArgs>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * (Output)
     * Consumer key.
     * 
     */
    @Import(name="consumerKey")
    private @Nullable Output<String> consumerKey;

    /**
     * @return (Output)
     * Consumer key.
     * 
     */
    public Optional<Output<String>> consumerKey() {
        return Optional.ofNullable(this.consumerKey);
    }

    /**
     * (Output)
     * Secret key.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="consumerSecret")
    private @Nullable Output<String> consumerSecret;

    /**
     * @return (Output)
     * Secret key.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> consumerSecret() {
        return Optional.ofNullable(this.consumerSecret);
    }

    /**
     * (Output)
     * Time the credential will expire in milliseconds since epoch.
     * 
     */
    @Import(name="expiresAt")
    private @Nullable Output<String> expiresAt;

    /**
     * @return (Output)
     * Time the credential will expire in milliseconds since epoch.
     * 
     */
    public Optional<Output<String>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * (Output)
     * Time the credential was issued in milliseconds since epoch.
     * 
     */
    @Import(name="issuedAt")
    private @Nullable Output<String> issuedAt;

    /**
     * @return (Output)
     * Time the credential was issued in milliseconds since epoch.
     * 
     */
    public Optional<Output<String>> issuedAt() {
        return Optional.ofNullable(this.issuedAt);
    }

    /**
     * Scopes to apply to the developer app.
     * The specified scopes must already exist for the API product that
     * you associate with the developer app.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return Scopes to apply to the developer app.
     * The specified scopes must already exist for the API product that
     * you associate with the developer app.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * Status of the credential. Valid values include approved or revoked.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the credential. Valid values include approved or revoked.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private DeveloperAppCredentialArgs() {}

    private DeveloperAppCredentialArgs(DeveloperAppCredentialArgs $) {
        this.apiProducts = $.apiProducts;
        this.attributes = $.attributes;
        this.consumerKey = $.consumerKey;
        this.consumerSecret = $.consumerSecret;
        this.expiresAt = $.expiresAt;
        this.issuedAt = $.issuedAt;
        this.scopes = $.scopes;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeveloperAppCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeveloperAppCredentialArgs $;

        public Builder() {
            $ = new DeveloperAppCredentialArgs();
        }

        public Builder(DeveloperAppCredentialArgs defaults) {
            $ = new DeveloperAppCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiProducts List of API products associated with the developer app.
         * 
         * @return builder
         * 
         */
        public Builder apiProducts(@Nullable Output<List<DeveloperAppCredentialApiProductArgs>> apiProducts) {
            $.apiProducts = apiProducts;
            return this;
        }

        /**
         * @param apiProducts List of API products associated with the developer app.
         * 
         * @return builder
         * 
         */
        public Builder apiProducts(List<DeveloperAppCredentialApiProductArgs> apiProducts) {
            return apiProducts(Output.of(apiProducts));
        }

        /**
         * @param apiProducts List of API products associated with the developer app.
         * 
         * @return builder
         * 
         */
        public Builder apiProducts(DeveloperAppCredentialApiProductArgs... apiProducts) {
            return apiProducts(List.of(apiProducts));
        }

        /**
         * @param attributes Developer attributes (name/value pairs). The custom attribute limit is 18.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<List<DeveloperAppCredentialAttributeArgs>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Developer attributes (name/value pairs). The custom attribute limit is 18.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(List<DeveloperAppCredentialAttributeArgs> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param attributes Developer attributes (name/value pairs). The custom attribute limit is 18.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(DeveloperAppCredentialAttributeArgs... attributes) {
            return attributes(List.of(attributes));
        }

        /**
         * @param consumerKey (Output)
         * Consumer key.
         * 
         * @return builder
         * 
         */
        public Builder consumerKey(@Nullable Output<String> consumerKey) {
            $.consumerKey = consumerKey;
            return this;
        }

        /**
         * @param consumerKey (Output)
         * Consumer key.
         * 
         * @return builder
         * 
         */
        public Builder consumerKey(String consumerKey) {
            return consumerKey(Output.of(consumerKey));
        }

        /**
         * @param consumerSecret (Output)
         * Secret key.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder consumerSecret(@Nullable Output<String> consumerSecret) {
            $.consumerSecret = consumerSecret;
            return this;
        }

        /**
         * @param consumerSecret (Output)
         * Secret key.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder consumerSecret(String consumerSecret) {
            return consumerSecret(Output.of(consumerSecret));
        }

        /**
         * @param expiresAt (Output)
         * Time the credential will expire in milliseconds since epoch.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(@Nullable Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        /**
         * @param expiresAt (Output)
         * Time the credential will expire in milliseconds since epoch.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        /**
         * @param issuedAt (Output)
         * Time the credential was issued in milliseconds since epoch.
         * 
         * @return builder
         * 
         */
        public Builder issuedAt(@Nullable Output<String> issuedAt) {
            $.issuedAt = issuedAt;
            return this;
        }

        /**
         * @param issuedAt (Output)
         * Time the credential was issued in milliseconds since epoch.
         * 
         * @return builder
         * 
         */
        public Builder issuedAt(String issuedAt) {
            return issuedAt(Output.of(issuedAt));
        }

        /**
         * @param scopes Scopes to apply to the developer app.
         * The specified scopes must already exist for the API product that
         * you associate with the developer app.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Scopes to apply to the developer app.
         * The specified scopes must already exist for the API product that
         * you associate with the developer app.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Scopes to apply to the developer app.
         * The specified scopes must already exist for the API product that
         * you associate with the developer app.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param status Status of the credential. Valid values include approved or revoked.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the credential. Valid values include approved or revoked.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public DeveloperAppCredentialArgs build() {
            return $;
        }
    }

}
