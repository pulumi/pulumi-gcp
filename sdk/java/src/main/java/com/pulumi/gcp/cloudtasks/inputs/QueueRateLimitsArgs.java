// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudtasks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueueRateLimitsArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueueRateLimitsArgs Empty = new QueueRateLimitsArgs();

    /**
     * The max burst size.
     * Max burst size limits how fast tasks in queue are processed when many tasks are
     * in the queue and the rate is high. This field allows the queue to have a high
     * rate so processing starts shortly after a task is enqueued, but still limits
     * resource usage when many tasks are enqueued in a short period of time.
     * 
     */
    @Import(name="maxBurstSize")
    private @Nullable Output<Integer> maxBurstSize;

    /**
     * @return The max burst size.
     * Max burst size limits how fast tasks in queue are processed when many tasks are
     * in the queue and the rate is high. This field allows the queue to have a high
     * rate so processing starts shortly after a task is enqueued, but still limits
     * resource usage when many tasks are enqueued in a short period of time.
     * 
     */
    public Optional<Output<Integer>> maxBurstSize() {
        return Optional.ofNullable(this.maxBurstSize);
    }

    /**
     * The maximum number of concurrent tasks that Cloud Tasks allows to
     * be dispatched for this queue. After this threshold has been
     * reached, Cloud Tasks stops dispatching tasks until the number of
     * concurrent requests decreases.
     * 
     */
    @Import(name="maxConcurrentDispatches")
    private @Nullable Output<Integer> maxConcurrentDispatches;

    /**
     * @return The maximum number of concurrent tasks that Cloud Tasks allows to
     * be dispatched for this queue. After this threshold has been
     * reached, Cloud Tasks stops dispatching tasks until the number of
     * concurrent requests decreases.
     * 
     */
    public Optional<Output<Integer>> maxConcurrentDispatches() {
        return Optional.ofNullable(this.maxConcurrentDispatches);
    }

    /**
     * The maximum rate at which tasks are dispatched from this queue.
     * If unspecified when the queue is created, Cloud Tasks will pick the default.
     * 
     */
    @Import(name="maxDispatchesPerSecond")
    private @Nullable Output<Double> maxDispatchesPerSecond;

    /**
     * @return The maximum rate at which tasks are dispatched from this queue.
     * If unspecified when the queue is created, Cloud Tasks will pick the default.
     * 
     */
    public Optional<Output<Double>> maxDispatchesPerSecond() {
        return Optional.ofNullable(this.maxDispatchesPerSecond);
    }

    private QueueRateLimitsArgs() {}

    private QueueRateLimitsArgs(QueueRateLimitsArgs $) {
        this.maxBurstSize = $.maxBurstSize;
        this.maxConcurrentDispatches = $.maxConcurrentDispatches;
        this.maxDispatchesPerSecond = $.maxDispatchesPerSecond;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueueRateLimitsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueueRateLimitsArgs $;

        public Builder() {
            $ = new QueueRateLimitsArgs();
        }

        public Builder(QueueRateLimitsArgs defaults) {
            $ = new QueueRateLimitsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxBurstSize The max burst size.
         * Max burst size limits how fast tasks in queue are processed when many tasks are
         * in the queue and the rate is high. This field allows the queue to have a high
         * rate so processing starts shortly after a task is enqueued, but still limits
         * resource usage when many tasks are enqueued in a short period of time.
         * 
         * @return builder
         * 
         */
        public Builder maxBurstSize(@Nullable Output<Integer> maxBurstSize) {
            $.maxBurstSize = maxBurstSize;
            return this;
        }

        /**
         * @param maxBurstSize The max burst size.
         * Max burst size limits how fast tasks in queue are processed when many tasks are
         * in the queue and the rate is high. This field allows the queue to have a high
         * rate so processing starts shortly after a task is enqueued, but still limits
         * resource usage when many tasks are enqueued in a short period of time.
         * 
         * @return builder
         * 
         */
        public Builder maxBurstSize(Integer maxBurstSize) {
            return maxBurstSize(Output.of(maxBurstSize));
        }

        /**
         * @param maxConcurrentDispatches The maximum number of concurrent tasks that Cloud Tasks allows to
         * be dispatched for this queue. After this threshold has been
         * reached, Cloud Tasks stops dispatching tasks until the number of
         * concurrent requests decreases.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentDispatches(@Nullable Output<Integer> maxConcurrentDispatches) {
            $.maxConcurrentDispatches = maxConcurrentDispatches;
            return this;
        }

        /**
         * @param maxConcurrentDispatches The maximum number of concurrent tasks that Cloud Tasks allows to
         * be dispatched for this queue. After this threshold has been
         * reached, Cloud Tasks stops dispatching tasks until the number of
         * concurrent requests decreases.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentDispatches(Integer maxConcurrentDispatches) {
            return maxConcurrentDispatches(Output.of(maxConcurrentDispatches));
        }

        /**
         * @param maxDispatchesPerSecond The maximum rate at which tasks are dispatched from this queue.
         * If unspecified when the queue is created, Cloud Tasks will pick the default.
         * 
         * @return builder
         * 
         */
        public Builder maxDispatchesPerSecond(@Nullable Output<Double> maxDispatchesPerSecond) {
            $.maxDispatchesPerSecond = maxDispatchesPerSecond;
            return this;
        }

        /**
         * @param maxDispatchesPerSecond The maximum rate at which tasks are dispatched from this queue.
         * If unspecified when the queue is created, Cloud Tasks will pick the default.
         * 
         * @return builder
         * 
         */
        public Builder maxDispatchesPerSecond(Double maxDispatchesPerSecond) {
            return maxDispatchesPerSecond(Output.of(maxDispatchesPerSecond));
        }

        public QueueRateLimitsArgs build() {
            return $;
        }
    }

}
