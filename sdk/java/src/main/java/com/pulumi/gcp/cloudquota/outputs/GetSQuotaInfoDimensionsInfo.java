// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudquota.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudquota.outputs.GetSQuotaInfoDimensionsInfoDetail;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSQuotaInfoDimensionsInfo {
    /**
     * @return The applicable regions or zones of this dimensions info. The field will be set to `[&#39;global&#39;]` for quotas that are not per region or per zone. Otherwise, it will be set to the list of locations this dimension info is applicable to.
     * 
     */
    private List<String> applicableLocations;
    /**
     * @return The quota details for a map of dimensions.
     * 
     */
    private List<GetSQuotaInfoDimensionsInfoDetail> details;
    /**
     * @return The map of dimensions for this dimensions info. The key of a map entry is &#34;region&#34;, &#34;zone&#34; or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {&#34;provider&#34; : &#34;Foo Inc&#34;} where &#34;provider&#34; is a service specific dimension of a quota.
     * 
     */
    private Map<String,String> dimensions;

    private GetSQuotaInfoDimensionsInfo() {}
    /**
     * @return The applicable regions or zones of this dimensions info. The field will be set to `[&#39;global&#39;]` for quotas that are not per region or per zone. Otherwise, it will be set to the list of locations this dimension info is applicable to.
     * 
     */
    public List<String> applicableLocations() {
        return this.applicableLocations;
    }
    /**
     * @return The quota details for a map of dimensions.
     * 
     */
    public List<GetSQuotaInfoDimensionsInfoDetail> details() {
        return this.details;
    }
    /**
     * @return The map of dimensions for this dimensions info. The key of a map entry is &#34;region&#34;, &#34;zone&#34; or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {&#34;provider&#34; : &#34;Foo Inc&#34;} where &#34;provider&#34; is a service specific dimension of a quota.
     * 
     */
    public Map<String,String> dimensions() {
        return this.dimensions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSQuotaInfoDimensionsInfo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> applicableLocations;
        private List<GetSQuotaInfoDimensionsInfoDetail> details;
        private Map<String,String> dimensions;
        public Builder() {}
        public Builder(GetSQuotaInfoDimensionsInfo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicableLocations = defaults.applicableLocations;
    	      this.details = defaults.details;
    	      this.dimensions = defaults.dimensions;
        }

        @CustomType.Setter
        public Builder applicableLocations(List<String> applicableLocations) {
            if (applicableLocations == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoDimensionsInfo", "applicableLocations");
            }
            this.applicableLocations = applicableLocations;
            return this;
        }
        public Builder applicableLocations(String... applicableLocations) {
            return applicableLocations(List.of(applicableLocations));
        }
        @CustomType.Setter
        public Builder details(List<GetSQuotaInfoDimensionsInfoDetail> details) {
            if (details == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoDimensionsInfo", "details");
            }
            this.details = details;
            return this;
        }
        public Builder details(GetSQuotaInfoDimensionsInfoDetail... details) {
            return details(List.of(details));
        }
        @CustomType.Setter
        public Builder dimensions(Map<String,String> dimensions) {
            if (dimensions == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoDimensionsInfo", "dimensions");
            }
            this.dimensions = dimensions;
            return this;
        }
        public GetSQuotaInfoDimensionsInfo build() {
            final var _resultValue = new GetSQuotaInfoDimensionsInfo();
            _resultValue.applicableLocations = applicableLocations;
            _resultValue.details = details;
            _resultValue.dimensions = dimensions;
            return _resultValue;
        }
    }
}
