// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vmwareengine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.vmwareengine.outputs.ClusterAutoscalingSettingsAutoscalingPolicy;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterAutoscalingSettings {
    /**
     * @return The map with autoscaling policies applied to the cluster.
     * The key is the identifier of the policy.
     * It must meet the following requirements:
     * * Only contains 1-63 alphanumeric characters and hyphens
     * * Begins with an alphabetical character
     * * Ends with a non-hyphen character
     * * Not formatted as a UUID
     * * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
     *   Currently the map must contain only one element
     *   that describes the autoscaling policy for compute nodes.
     *   Structure is documented below.
     * 
     */
    private List<ClusterAutoscalingSettingsAutoscalingPolicy> autoscalingPolicies;
    /**
     * @return The minimum duration between consecutive autoscale operations.
     * It starts once addition or removal of nodes is fully completed.
     * Minimum cool down period is 30m.
     * Cool down period must be in whole minutes (for example, 30m, 31m, 50m).
     * Mandatory for successful addition of autoscaling settings in cluster.
     * 
     */
    private @Nullable String coolDownPeriod;
    /**
     * @return Maximum number of nodes of any type in a cluster.
     * Mandatory for successful addition of autoscaling settings in cluster.
     * 
     */
    private @Nullable Integer maxClusterNodeCount;
    /**
     * @return Minimum number of nodes of any type in a cluster.
     * Mandatory for successful addition of autoscaling settings in cluster.
     * 
     */
    private @Nullable Integer minClusterNodeCount;

    private ClusterAutoscalingSettings() {}
    /**
     * @return The map with autoscaling policies applied to the cluster.
     * The key is the identifier of the policy.
     * It must meet the following requirements:
     * * Only contains 1-63 alphanumeric characters and hyphens
     * * Begins with an alphabetical character
     * * Ends with a non-hyphen character
     * * Not formatted as a UUID
     * * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
     *   Currently the map must contain only one element
     *   that describes the autoscaling policy for compute nodes.
     *   Structure is documented below.
     * 
     */
    public List<ClusterAutoscalingSettingsAutoscalingPolicy> autoscalingPolicies() {
        return this.autoscalingPolicies;
    }
    /**
     * @return The minimum duration between consecutive autoscale operations.
     * It starts once addition or removal of nodes is fully completed.
     * Minimum cool down period is 30m.
     * Cool down period must be in whole minutes (for example, 30m, 31m, 50m).
     * Mandatory for successful addition of autoscaling settings in cluster.
     * 
     */
    public Optional<String> coolDownPeriod() {
        return Optional.ofNullable(this.coolDownPeriod);
    }
    /**
     * @return Maximum number of nodes of any type in a cluster.
     * Mandatory for successful addition of autoscaling settings in cluster.
     * 
     */
    public Optional<Integer> maxClusterNodeCount() {
        return Optional.ofNullable(this.maxClusterNodeCount);
    }
    /**
     * @return Minimum number of nodes of any type in a cluster.
     * Mandatory for successful addition of autoscaling settings in cluster.
     * 
     */
    public Optional<Integer> minClusterNodeCount() {
        return Optional.ofNullable(this.minClusterNodeCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterAutoscalingSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<ClusterAutoscalingSettingsAutoscalingPolicy> autoscalingPolicies;
        private @Nullable String coolDownPeriod;
        private @Nullable Integer maxClusterNodeCount;
        private @Nullable Integer minClusterNodeCount;
        public Builder() {}
        public Builder(ClusterAutoscalingSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscalingPolicies = defaults.autoscalingPolicies;
    	      this.coolDownPeriod = defaults.coolDownPeriod;
    	      this.maxClusterNodeCount = defaults.maxClusterNodeCount;
    	      this.minClusterNodeCount = defaults.minClusterNodeCount;
        }

        @CustomType.Setter
        public Builder autoscalingPolicies(List<ClusterAutoscalingSettingsAutoscalingPolicy> autoscalingPolicies) {
            if (autoscalingPolicies == null) {
              throw new MissingRequiredPropertyException("ClusterAutoscalingSettings", "autoscalingPolicies");
            }
            this.autoscalingPolicies = autoscalingPolicies;
            return this;
        }
        public Builder autoscalingPolicies(ClusterAutoscalingSettingsAutoscalingPolicy... autoscalingPolicies) {
            return autoscalingPolicies(List.of(autoscalingPolicies));
        }
        @CustomType.Setter
        public Builder coolDownPeriod(@Nullable String coolDownPeriod) {

            this.coolDownPeriod = coolDownPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder maxClusterNodeCount(@Nullable Integer maxClusterNodeCount) {

            this.maxClusterNodeCount = maxClusterNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder minClusterNodeCount(@Nullable Integer minClusterNodeCount) {

            this.minClusterNodeCount = minClusterNodeCount;
            return this;
        }
        public ClusterAutoscalingSettings build() {
            final var _resultValue = new ClusterAutoscalingSettings();
            _resultValue.autoscalingPolicies = autoscalingPolicies;
            _resultValue.coolDownPeriod = coolDownPeriod;
            _resultValue.maxClusterNodeCount = maxClusterNodeCount;
            _resultValue.minClusterNodeCount = minClusterNodeCount;
            return _resultValue;
        }
    }
}
