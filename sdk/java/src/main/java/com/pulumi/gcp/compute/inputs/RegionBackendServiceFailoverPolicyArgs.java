// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionBackendServiceFailoverPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionBackendServiceFailoverPolicyArgs Empty = new RegionBackendServiceFailoverPolicyArgs();

    /**
     * On failover or failback, this field indicates whether connection drain
     * will be honored. Setting this to true has the following effect: connections
     * to the old active pool are not drained. Connections to the new active pool
     * use the timeout of 10 min (currently fixed). Setting to false has the
     * following effect: both old and new connections will have a drain timeout
     * of 10 min.
     * This can be set to true only if the protocol is TCP.
     * The default is false.
     * 
     */
    @Import(name="disableConnectionDrainOnFailover")
    private @Nullable Output<Boolean> disableConnectionDrainOnFailover;

    /**
     * @return On failover or failback, this field indicates whether connection drain
     * will be honored. Setting this to true has the following effect: connections
     * to the old active pool are not drained. Connections to the new active pool
     * use the timeout of 10 min (currently fixed). Setting to false has the
     * following effect: both old and new connections will have a drain timeout
     * of 10 min.
     * This can be set to true only if the protocol is TCP.
     * The default is false.
     * 
     */
    public Optional<Output<Boolean>> disableConnectionDrainOnFailover() {
        return Optional.ofNullable(this.disableConnectionDrainOnFailover);
    }

    /**
     * This option is used only when no healthy VMs are detected in the primary
     * and backup instance groups. When set to true, traffic is dropped. When
     * set to false, new connections are sent across all VMs in the primary group.
     * The default is false.
     * 
     */
    @Import(name="dropTrafficIfUnhealthy")
    private @Nullable Output<Boolean> dropTrafficIfUnhealthy;

    /**
     * @return This option is used only when no healthy VMs are detected in the primary
     * and backup instance groups. When set to true, traffic is dropped. When
     * set to false, new connections are sent across all VMs in the primary group.
     * The default is false.
     * 
     */
    public Optional<Output<Boolean>> dropTrafficIfUnhealthy() {
        return Optional.ofNullable(this.dropTrafficIfUnhealthy);
    }

    /**
     * The value of the field must be in [0, 1]. If the ratio of the healthy
     * VMs in the primary backend is at or below this number, traffic arriving
     * at the load-balanced IP will be directed to the failover backend.
     * In case where &#39;failoverRatio&#39; is not set or all the VMs in the backup
     * backend are unhealthy, the traffic will be directed back to the primary
     * backend in the &#34;force&#34; mode, where traffic will be spread to the healthy
     * VMs with the best effort, or to all VMs when no VM is healthy.
     * This field is only used with l4 load balancing.
     * 
     */
    @Import(name="failoverRatio")
    private @Nullable Output<Double> failoverRatio;

    /**
     * @return The value of the field must be in [0, 1]. If the ratio of the healthy
     * VMs in the primary backend is at or below this number, traffic arriving
     * at the load-balanced IP will be directed to the failover backend.
     * In case where &#39;failoverRatio&#39; is not set or all the VMs in the backup
     * backend are unhealthy, the traffic will be directed back to the primary
     * backend in the &#34;force&#34; mode, where traffic will be spread to the healthy
     * VMs with the best effort, or to all VMs when no VM is healthy.
     * This field is only used with l4 load balancing.
     * 
     */
    public Optional<Output<Double>> failoverRatio() {
        return Optional.ofNullable(this.failoverRatio);
    }

    private RegionBackendServiceFailoverPolicyArgs() {}

    private RegionBackendServiceFailoverPolicyArgs(RegionBackendServiceFailoverPolicyArgs $) {
        this.disableConnectionDrainOnFailover = $.disableConnectionDrainOnFailover;
        this.dropTrafficIfUnhealthy = $.dropTrafficIfUnhealthy;
        this.failoverRatio = $.failoverRatio;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionBackendServiceFailoverPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionBackendServiceFailoverPolicyArgs $;

        public Builder() {
            $ = new RegionBackendServiceFailoverPolicyArgs();
        }

        public Builder(RegionBackendServiceFailoverPolicyArgs defaults) {
            $ = new RegionBackendServiceFailoverPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disableConnectionDrainOnFailover On failover or failback, this field indicates whether connection drain
         * will be honored. Setting this to true has the following effect: connections
         * to the old active pool are not drained. Connections to the new active pool
         * use the timeout of 10 min (currently fixed). Setting to false has the
         * following effect: both old and new connections will have a drain timeout
         * of 10 min.
         * This can be set to true only if the protocol is TCP.
         * The default is false.
         * 
         * @return builder
         * 
         */
        public Builder disableConnectionDrainOnFailover(@Nullable Output<Boolean> disableConnectionDrainOnFailover) {
            $.disableConnectionDrainOnFailover = disableConnectionDrainOnFailover;
            return this;
        }

        /**
         * @param disableConnectionDrainOnFailover On failover or failback, this field indicates whether connection drain
         * will be honored. Setting this to true has the following effect: connections
         * to the old active pool are not drained. Connections to the new active pool
         * use the timeout of 10 min (currently fixed). Setting to false has the
         * following effect: both old and new connections will have a drain timeout
         * of 10 min.
         * This can be set to true only if the protocol is TCP.
         * The default is false.
         * 
         * @return builder
         * 
         */
        public Builder disableConnectionDrainOnFailover(Boolean disableConnectionDrainOnFailover) {
            return disableConnectionDrainOnFailover(Output.of(disableConnectionDrainOnFailover));
        }

        /**
         * @param dropTrafficIfUnhealthy This option is used only when no healthy VMs are detected in the primary
         * and backup instance groups. When set to true, traffic is dropped. When
         * set to false, new connections are sent across all VMs in the primary group.
         * The default is false.
         * 
         * @return builder
         * 
         */
        public Builder dropTrafficIfUnhealthy(@Nullable Output<Boolean> dropTrafficIfUnhealthy) {
            $.dropTrafficIfUnhealthy = dropTrafficIfUnhealthy;
            return this;
        }

        /**
         * @param dropTrafficIfUnhealthy This option is used only when no healthy VMs are detected in the primary
         * and backup instance groups. When set to true, traffic is dropped. When
         * set to false, new connections are sent across all VMs in the primary group.
         * The default is false.
         * 
         * @return builder
         * 
         */
        public Builder dropTrafficIfUnhealthy(Boolean dropTrafficIfUnhealthy) {
            return dropTrafficIfUnhealthy(Output.of(dropTrafficIfUnhealthy));
        }

        /**
         * @param failoverRatio The value of the field must be in [0, 1]. If the ratio of the healthy
         * VMs in the primary backend is at or below this number, traffic arriving
         * at the load-balanced IP will be directed to the failover backend.
         * In case where &#39;failoverRatio&#39; is not set or all the VMs in the backup
         * backend are unhealthy, the traffic will be directed back to the primary
         * backend in the &#34;force&#34; mode, where traffic will be spread to the healthy
         * VMs with the best effort, or to all VMs when no VM is healthy.
         * This field is only used with l4 load balancing.
         * 
         * @return builder
         * 
         */
        public Builder failoverRatio(@Nullable Output<Double> failoverRatio) {
            $.failoverRatio = failoverRatio;
            return this;
        }

        /**
         * @param failoverRatio The value of the field must be in [0, 1]. If the ratio of the healthy
         * VMs in the primary backend is at or below this number, traffic arriving
         * at the load-balanced IP will be directed to the failover backend.
         * In case where &#39;failoverRatio&#39; is not set or all the VMs in the backup
         * backend are unhealthy, the traffic will be directed back to the primary
         * backend in the &#34;force&#34; mode, where traffic will be spread to the healthy
         * VMs with the best effort, or to all VMs when no VM is healthy.
         * This field is only used with l4 load balancing.
         * 
         * @return builder
         * 
         */
        public Builder failoverRatio(Double failoverRatio) {
            return failoverRatio(Output.of(failoverRatio));
        }

        public RegionBackendServiceFailoverPolicyArgs build() {
            return $;
        }
    }

}
