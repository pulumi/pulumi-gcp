// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkebackup;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.gkebackup.BackupChannelArgs;
import com.pulumi.gcp.gkebackup.inputs.BackupChannelState;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A BackupChannel imposes constraints on where clusters can be backed up.
 * The BackupChannel should be in the same project and region
 * as the cluster being backed up.
 * The backup can be created only in destination_project.
 * 
 * To get more information about BackupChannel, see:
 * 
 * * [API documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/projects.locations.backupChannels)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke)
 * 
 * ## Example Usage
 * 
 * ### Gkebackup Backupchannel Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.gkebackup.BackupChannel;
 * import com.pulumi.gcp.gkebackup.BackupChannelArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var basic = new BackupChannel("basic", BackupChannelArgs.builder()
 *             .name("basic-channel")
 *             .location("us-central1")
 *             .description("Description")
 *             .destinationProject("projects/24240755850")
 *             .labels(Map.of("key", "some-value"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * BackupChannel can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/backupChannels/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, BackupChannel can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:gkebackup/backupChannel:BackupChannel default projects/{{project}}/locations/{{location}}/backupChannels/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:gkebackup/backupChannel:BackupChannel default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:gkebackup/backupChannel:BackupChannel default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:gkebackup/backupChannel:BackupChannel")
public class BackupChannel extends com.pulumi.resources.CustomResource {
    /**
     * User specified descriptive string for this BackupChannel.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return User specified descriptive string for this BackupChannel.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The project where Backups are allowed to be stored.
     * The format is `projects/{project}`.
     * {project} can be project number or project id.
     * 
     */
    @Export(name="destinationProject", refs={String.class}, tree="[0]")
    private Output<String> destinationProject;

    /**
     * @return The project where Backups are allowed to be stored.
     * The format is `projects/{project}`.
     * {project} can be project number or project id.
     * 
     */
    public Output<String> destinationProject() {
        return this.destinationProject;
    }
    /**
     * The project_id where Backups are allowed to be stored.
     * Example Project ID: &#34;my-project-id&#34;.
     * 
     */
    @Export(name="destinationProjectId", refs={String.class}, tree="[0]")
    private Output<String> destinationProjectId;

    /**
     * @return The project_id where Backups are allowed to be stored.
     * Example Project ID: &#34;my-project-id&#34;.
     * 
     */
    public Output<String> destinationProjectId() {
        return this.destinationProjectId;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * etag is used for optimistic concurrency control as a way to help prevent simultaneous
     * updates of a backup channel from overwriting each other. It is strongly suggested that
     * systems make use of the &#39;etag&#39; in the read-modify-write cycle to perform BackupChannel updates
     * in order to avoid race conditions: An etag is returned in the response to backupChannels.get,
     * and systems are expected to put that etag in the request to backupChannels.patch or
     * backupChannels.delete to ensure that their change will be applied to the same version of the resource.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return etag is used for optimistic concurrency control as a way to help prevent simultaneous
     * updates of a backup channel from overwriting each other. It is strongly suggested that
     * systems make use of the &#39;etag&#39; in the read-modify-write cycle to perform BackupChannel updates
     * in order to avoid race conditions: An etag is returned in the response to backupChannels.get,
     * and systems are expected to put that etag in the request to backupChannels.patch or
     * backupChannels.delete to ensure that their change will be applied to the same version of the resource.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * Description: A set of custom labels supplied by the user.
     * A list of key-&gt;value pairs.
     * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Description: A set of custom labels supplied by the user.
     * A list of key-&gt;value pairs.
     * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The region of the Backup Channel.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The region of the Backup Channel.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The full name of the BackupChannel Resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The full name of the BackupChannel Resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Server generated, unique identifier of UUID format.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Server generated, unique identifier of UUID format.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BackupChannel(java.lang.String name) {
        this(name, BackupChannelArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BackupChannel(java.lang.String name, BackupChannelArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BackupChannel(java.lang.String name, BackupChannelArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:gkebackup/backupChannel:BackupChannel", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private BackupChannel(java.lang.String name, Output<java.lang.String> id, @Nullable BackupChannelState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:gkebackup/backupChannel:BackupChannel", name, state, makeResourceOptions(options, id), false);
    }

    private static BackupChannelArgs makeArgs(BackupChannelArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BackupChannelArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BackupChannel get(java.lang.String name, Output<java.lang.String> id, @Nullable BackupChannelState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BackupChannel(name, id, state, options);
    }
}
