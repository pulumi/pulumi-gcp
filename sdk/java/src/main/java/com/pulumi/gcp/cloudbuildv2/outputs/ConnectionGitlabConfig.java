// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuildv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.cloudbuildv2.outputs.ConnectionGitlabConfigAuthorizerCredential;
import com.pulumi.gcp.cloudbuildv2.outputs.ConnectionGitlabConfigReadAuthorizerCredential;
import com.pulumi.gcp.cloudbuildv2.outputs.ConnectionGitlabConfigServiceDirectoryConfig;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionGitlabConfig {
    /**
     * @return Required. A GitLab personal access token with the `api` scope access.
     * 
     */
    private ConnectionGitlabConfigAuthorizerCredential authorizerCredential;
    /**
     * @return The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
     * 
     */
    private @Nullable String hostUri;
    /**
     * @return Required. A GitLab personal access token with the minimum `read_api` scope access.
     * 
     */
    private ConnectionGitlabConfigReadAuthorizerCredential readAuthorizerCredential;
    /**
     * @return Output only. Version of the GitLab Enterprise server running on the `host_uri`.
     * 
     */
    private @Nullable String serverVersion;
    /**
     * @return Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
     * 
     */
    private @Nullable ConnectionGitlabConfigServiceDirectoryConfig serviceDirectoryConfig;
    /**
     * @return SSL certificate to use for requests to GitLab Enterprise.
     * 
     */
    private @Nullable String sslCa;
    /**
     * @return Required. Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    private String webhookSecretSecretVersion;

    private ConnectionGitlabConfig() {}
    /**
     * @return Required. A GitLab personal access token with the `api` scope access.
     * 
     */
    public ConnectionGitlabConfigAuthorizerCredential authorizerCredential() {
        return this.authorizerCredential;
    }
    /**
     * @return The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
     * 
     */
    public Optional<String> hostUri() {
        return Optional.ofNullable(this.hostUri);
    }
    /**
     * @return Required. A GitLab personal access token with the minimum `read_api` scope access.
     * 
     */
    public ConnectionGitlabConfigReadAuthorizerCredential readAuthorizerCredential() {
        return this.readAuthorizerCredential;
    }
    /**
     * @return Output only. Version of the GitLab Enterprise server running on the `host_uri`.
     * 
     */
    public Optional<String> serverVersion() {
        return Optional.ofNullable(this.serverVersion);
    }
    /**
     * @return Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
     * 
     */
    public Optional<ConnectionGitlabConfigServiceDirectoryConfig> serviceDirectoryConfig() {
        return Optional.ofNullable(this.serviceDirectoryConfig);
    }
    /**
     * @return SSL certificate to use for requests to GitLab Enterprise.
     * 
     */
    public Optional<String> sslCa() {
        return Optional.ofNullable(this.sslCa);
    }
    /**
     * @return Required. Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    public String webhookSecretSecretVersion() {
        return this.webhookSecretSecretVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionGitlabConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ConnectionGitlabConfigAuthorizerCredential authorizerCredential;
        private @Nullable String hostUri;
        private ConnectionGitlabConfigReadAuthorizerCredential readAuthorizerCredential;
        private @Nullable String serverVersion;
        private @Nullable ConnectionGitlabConfigServiceDirectoryConfig serviceDirectoryConfig;
        private @Nullable String sslCa;
        private String webhookSecretSecretVersion;
        public Builder() {}
        public Builder(ConnectionGitlabConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizerCredential = defaults.authorizerCredential;
    	      this.hostUri = defaults.hostUri;
    	      this.readAuthorizerCredential = defaults.readAuthorizerCredential;
    	      this.serverVersion = defaults.serverVersion;
    	      this.serviceDirectoryConfig = defaults.serviceDirectoryConfig;
    	      this.sslCa = defaults.sslCa;
    	      this.webhookSecretSecretVersion = defaults.webhookSecretSecretVersion;
        }

        @CustomType.Setter
        public Builder authorizerCredential(ConnectionGitlabConfigAuthorizerCredential authorizerCredential) {
            this.authorizerCredential = Objects.requireNonNull(authorizerCredential);
            return this;
        }
        @CustomType.Setter
        public Builder hostUri(@Nullable String hostUri) {
            this.hostUri = hostUri;
            return this;
        }
        @CustomType.Setter
        public Builder readAuthorizerCredential(ConnectionGitlabConfigReadAuthorizerCredential readAuthorizerCredential) {
            this.readAuthorizerCredential = Objects.requireNonNull(readAuthorizerCredential);
            return this;
        }
        @CustomType.Setter
        public Builder serverVersion(@Nullable String serverVersion) {
            this.serverVersion = serverVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serviceDirectoryConfig(@Nullable ConnectionGitlabConfigServiceDirectoryConfig serviceDirectoryConfig) {
            this.serviceDirectoryConfig = serviceDirectoryConfig;
            return this;
        }
        @CustomType.Setter
        public Builder sslCa(@Nullable String sslCa) {
            this.sslCa = sslCa;
            return this;
        }
        @CustomType.Setter
        public Builder webhookSecretSecretVersion(String webhookSecretSecretVersion) {
            this.webhookSecretSecretVersion = Objects.requireNonNull(webhookSecretSecretVersion);
            return this;
        }
        public ConnectionGitlabConfig build() {
            final var o = new ConnectionGitlabConfig();
            o.authorizerCredential = authorizerCredential;
            o.hostUri = hostUri;
            o.readAuthorizerCredential = readAuthorizerCredential;
            o.serverVersion = serverVersion;
            o.serviceDirectoryConfig = serviceDirectoryConfig;
            o.sslCa = sslCa;
            o.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return o;
        }
    }
}
