// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GdcSparkApplicationSparkRApplicationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GdcSparkApplicationSparkRApplicationConfigArgs Empty = new GdcSparkApplicationSparkRApplicationConfigArgs();

    /**
     * HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     * 
     */
    @Import(name="archiveUris")
    private @Nullable Output<List<String>> archiveUris;

    /**
     * @return HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     * 
     */
    public Optional<Output<List<String>>> archiveUris() {
        return Optional.ofNullable(this.archiveUris);
    }

    /**
     * The arguments to pass to the driver.  Do not include arguments, such as `--conf`, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<String>> args;

    /**
     * @return The arguments to pass to the driver.  Do not include arguments, such as `--conf`, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
     * 
     */
    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
     * 
     */
    @Import(name="fileUris")
    private @Nullable Output<List<String>> fileUris;

    /**
     * @return HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
     * 
     */
    public Optional<Output<List<String>>> fileUris() {
        return Optional.ofNullable(this.fileUris);
    }

    /**
     * The HCFS URI of the main R file to use as the driver. Must be a .R file.
     * 
     */
    @Import(name="mainRFileUri", required=true)
    private Output<String> mainRFileUri;

    /**
     * @return The HCFS URI of the main R file to use as the driver. Must be a .R file.
     * 
     */
    public Output<String> mainRFileUri() {
        return this.mainRFileUri;
    }

    private GdcSparkApplicationSparkRApplicationConfigArgs() {}

    private GdcSparkApplicationSparkRApplicationConfigArgs(GdcSparkApplicationSparkRApplicationConfigArgs $) {
        this.archiveUris = $.archiveUris;
        this.args = $.args;
        this.fileUris = $.fileUris;
        this.mainRFileUri = $.mainRFileUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GdcSparkApplicationSparkRApplicationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GdcSparkApplicationSparkRApplicationConfigArgs $;

        public Builder() {
            $ = new GdcSparkApplicationSparkRApplicationConfigArgs();
        }

        public Builder(GdcSparkApplicationSparkRApplicationConfigArgs defaults) {
            $ = new GdcSparkApplicationSparkRApplicationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archiveUris HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
         * 
         * @return builder
         * 
         */
        public Builder archiveUris(@Nullable Output<List<String>> archiveUris) {
            $.archiveUris = archiveUris;
            return this;
        }

        /**
         * @param archiveUris HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
         * 
         * @return builder
         * 
         */
        public Builder archiveUris(List<String> archiveUris) {
            return archiveUris(Output.of(archiveUris));
        }

        /**
         * @param archiveUris HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
         * 
         * @return builder
         * 
         */
        public Builder archiveUris(String... archiveUris) {
            return archiveUris(List.of(archiveUris));
        }

        /**
         * @param args The arguments to pass to the driver.  Do not include arguments, such as `--conf`, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args The arguments to pass to the driver.  Do not include arguments, such as `--conf`, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
         * 
         * @return builder
         * 
         */
        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        /**
         * @param args The arguments to pass to the driver.  Do not include arguments, such as `--conf`, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
         * 
         * @return builder
         * 
         */
        public Builder args(String... args) {
            return args(List.of(args));
        }

        /**
         * @param fileUris HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
         * 
         * @return builder
         * 
         */
        public Builder fileUris(@Nullable Output<List<String>> fileUris) {
            $.fileUris = fileUris;
            return this;
        }

        /**
         * @param fileUris HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
         * 
         * @return builder
         * 
         */
        public Builder fileUris(List<String> fileUris) {
            return fileUris(Output.of(fileUris));
        }

        /**
         * @param fileUris HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
         * 
         * @return builder
         * 
         */
        public Builder fileUris(String... fileUris) {
            return fileUris(List.of(fileUris));
        }

        /**
         * @param mainRFileUri The HCFS URI of the main R file to use as the driver. Must be a .R file.
         * 
         * @return builder
         * 
         */
        public Builder mainRFileUri(Output<String> mainRFileUri) {
            $.mainRFileUri = mainRFileUri;
            return this;
        }

        /**
         * @param mainRFileUri The HCFS URI of the main R file to use as the driver. Must be a .R file.
         * 
         * @return builder
         * 
         */
        public Builder mainRFileUri(String mainRFileUri) {
            return mainRFileUri(Output.of(mainRFileUri));
        }

        public GdcSparkApplicationSparkRApplicationConfigArgs build() {
            if ($.mainRFileUri == null) {
                throw new MissingRequiredPropertyException("GdcSparkApplicationSparkRApplicationConfigArgs", "mainRFileUri");
            }
            return $;
        }
    }

}
