// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.bigtable.LogicalViewArgs;
import com.pulumi.gcp.bigtable.inputs.LogicalViewState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A logical view object that can be referenced in SQL queries.
 * 
 * To get more information about LogicalView, see:
 * 
 * * [API documentation](https://cloud.google.com/bigtable/docs/reference/admin/rest/v2/projects.instances.logicalViews)
 * 
 * ## Example Usage
 * 
 * ### Bigtable Logical View
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.bigtable.Instance;
 * import com.pulumi.gcp.bigtable.InstanceArgs;
 * import com.pulumi.gcp.bigtable.inputs.InstanceClusterArgs;
 * import com.pulumi.gcp.bigtable.Table;
 * import com.pulumi.gcp.bigtable.TableArgs;
 * import com.pulumi.gcp.bigtable.inputs.TableColumnFamilyArgs;
 * import com.pulumi.gcp.bigtable.LogicalView;
 * import com.pulumi.gcp.bigtable.LogicalViewArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var instance = new Instance("instance", InstanceArgs.builder()
 *             .name("bt-instance")
 *             .clusters(InstanceClusterArgs.builder()
 *                 .clusterId("cluster-1")
 *                 .zone("us-east1-b")
 *                 .numNodes(3)
 *                 .storageType("HDD")
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var table = new Table("table", TableArgs.builder()
 *             .name("bt-table")
 *             .instanceName(instance.name())
 *             .columnFamilies(TableColumnFamilyArgs.builder()
 *                 .family("CF")
 *                 .build())
 *             .build());
 * 
 *         var logicalView = new LogicalView("logicalView", LogicalViewArgs.builder()
 *             .logicalViewId("bt-logical-view")
 *             .instance(instance.name())
 *             .deletionProtection(false)
 *             .query("""
 * SELECT _key, CF
 * FROM ` + "`bt-table`" + `
 *             """)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(table)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * LogicalView can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/instances/{{instance}}/logicalViews/{{logical_view_id}}`
 * 
 * * `{{project}}/{{instance}}/{{logical_view_id}}`
 * 
 * * `{{instance}}/{{logical_view_id}}`
 * 
 * When using the `pulumi import` command, LogicalView can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:bigtable/logicalView:LogicalView default projects/{{project}}/instances/{{instance}}/logicalViews/{{logical_view_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:bigtable/logicalView:LogicalView default {{project}}/{{instance}}/{{logical_view_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:bigtable/logicalView:LogicalView default {{instance}}/{{logical_view_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:bigtable/logicalView:LogicalView")
public class LogicalView extends com.pulumi.resources.CustomResource {
    /**
     * Set to true to make the logical view protected against deletion.
     * 
     */
    @Export(name="deletionProtection", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deletionProtection;

    /**
     * @return Set to true to make the logical view protected against deletion.
     * 
     */
    public Output<Optional<Boolean>> deletionProtection() {
        return Codegen.optional(this.deletionProtection);
    }
    /**
     * The name of the instance to create the logical view within.
     * 
     */
    @Export(name="instance", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> instance;

    /**
     * @return The name of the instance to create the logical view within.
     * 
     */
    public Output<Optional<String>> instance() {
        return Codegen.optional(this.instance);
    }
    /**
     * The unique name of the logical view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     * 
     * ***
     * 
     */
    @Export(name="logicalViewId", refs={String.class}, tree="[0]")
    private Output<String> logicalViewId;

    /**
     * @return The unique name of the logical view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     * 
     * ***
     * 
     */
    public Output<String> logicalViewId() {
        return this.logicalViewId;
    }
    /**
     * The unique name of the requested logical view. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/logicalViews/&lt;logicalViewId&gt;`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The unique name of the requested logical view. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/logicalViews/&lt;logicalViewId&gt;`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The logical view&#39;s select query.
     * 
     */
    @Export(name="query", refs={String.class}, tree="[0]")
    private Output<String> query;

    /**
     * @return The logical view&#39;s select query.
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LogicalView(java.lang.String name) {
        this(name, LogicalViewArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LogicalView(java.lang.String name, LogicalViewArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LogicalView(java.lang.String name, LogicalViewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigtable/logicalView:LogicalView", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private LogicalView(java.lang.String name, Output<java.lang.String> id, @Nullable LogicalViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigtable/logicalView:LogicalView", name, state, makeResourceOptions(options, id), false);
    }

    private static LogicalViewArgs makeArgs(LogicalViewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LogicalViewArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LogicalView get(java.lang.String name, Output<java.lang.String> id, @Nullable LogicalViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LogicalView(name, id, state, options);
    }
}
