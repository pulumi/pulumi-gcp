// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterDatabaseEncryptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterDatabaseEncryptionArgs Empty = new ClusterDatabaseEncryptionArgs();

    /**
     * the key to use to encrypt/decrypt secrets.  See the [DatabaseEncryption definition](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters#Cluster.DatabaseEncryption) for more information.
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    /**
     * @return the key to use to encrypt/decrypt secrets.  See the [DatabaseEncryption definition](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters#Cluster.DatabaseEncryption) for more information.
     * 
     */
    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * `ENCRYPTED` or `DECRYPTED`
     * 
     */
    @Import(name="state", required=true)
    private Output<String> state;

    /**
     * @return `ENCRYPTED` or `DECRYPTED`
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    private ClusterDatabaseEncryptionArgs() {}

    private ClusterDatabaseEncryptionArgs(ClusterDatabaseEncryptionArgs $) {
        this.keyName = $.keyName;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterDatabaseEncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterDatabaseEncryptionArgs $;

        public Builder() {
            $ = new ClusterDatabaseEncryptionArgs();
        }

        public Builder(ClusterDatabaseEncryptionArgs defaults) {
            $ = new ClusterDatabaseEncryptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyName the key to use to encrypt/decrypt secrets.  See the [DatabaseEncryption definition](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters#Cluster.DatabaseEncryption) for more information.
         * 
         * @return builder
         * 
         */
        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName the key to use to encrypt/decrypt secrets.  See the [DatabaseEncryption definition](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters#Cluster.DatabaseEncryption) for more information.
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param state `ENCRYPTED` or `DECRYPTED`
         * 
         * @return builder
         * 
         */
        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state `ENCRYPTED` or `DECRYPTED`
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public ClusterDatabaseEncryptionArgs build() {
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
