// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.firebase.inputs.AppHostingBuildSourceArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppHostingBuildArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppHostingBuildArgs Empty = new AppHostingBuildArgs();

    /**
     * Unstructured key value map that may be set by external tools to
     * store and arbitrary metadata. They are not queryable and should be
     * preserved when modifying objects.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Unstructured key value map that may be set by external tools to
     * store and arbitrary metadata. They are not queryable and should be
     * preserved when modifying objects.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The ID of the Backend that this Build applies to
     * 
     */
    @Import(name="backend", required=true)
    private Output<String> backend;

    /**
     * @return The ID of the Backend that this Build applies to
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }

    /**
     * The user-specified ID of the build being created.
     * 
     */
    @Import(name="buildId", required=true)
    private Output<String> buildId;

    /**
     * @return The user-specified ID of the build being created.
     * 
     */
    public Output<String> buildId() {
        return this.buildId;
    }

    /**
     * Human-readable name. 63 character limit.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Human-readable name. 63 character limit.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Unstructured key value map that can be used to organize and categorize
     * objects.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Unstructured key value map that can be used to organize and categorize
     * objects.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location of the Backend that this Build applies to
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the Backend that this Build applies to
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The source for the build.
     * Structure is documented below.
     * 
     */
    @Import(name="source", required=true)
    private Output<AppHostingBuildSourceArgs> source;

    /**
     * @return The source for the build.
     * Structure is documented below.
     * 
     */
    public Output<AppHostingBuildSourceArgs> source() {
        return this.source;
    }

    private AppHostingBuildArgs() {}

    private AppHostingBuildArgs(AppHostingBuildArgs $) {
        this.annotations = $.annotations;
        this.backend = $.backend;
        this.buildId = $.buildId;
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppHostingBuildArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppHostingBuildArgs $;

        public Builder() {
            $ = new AppHostingBuildArgs();
        }

        public Builder(AppHostingBuildArgs defaults) {
            $ = new AppHostingBuildArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Unstructured key value map that may be set by external tools to
         * store and arbitrary metadata. They are not queryable and should be
         * preserved when modifying objects.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Unstructured key value map that may be set by external tools to
         * store and arbitrary metadata. They are not queryable and should be
         * preserved when modifying objects.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param backend The ID of the Backend that this Build applies to
         * 
         * @return builder
         * 
         */
        public Builder backend(Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The ID of the Backend that this Build applies to
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param buildId The user-specified ID of the build being created.
         * 
         * @return builder
         * 
         */
        public Builder buildId(Output<String> buildId) {
            $.buildId = buildId;
            return this;
        }

        /**
         * @param buildId The user-specified ID of the build being created.
         * 
         * @return builder
         * 
         */
        public Builder buildId(String buildId) {
            return buildId(Output.of(buildId));
        }

        /**
         * @param displayName Human-readable name. 63 character limit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Human-readable name. 63 character limit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param labels Unstructured key value map that can be used to organize and categorize
         * objects.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Unstructured key value map that can be used to organize and categorize
         * objects.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location of the Backend that this Build applies to
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the Backend that this Build applies to
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param source The source for the build.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<AppHostingBuildSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source for the build.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder source(AppHostingBuildSourceArgs source) {
            return source(Output.of(source));
        }

        public AppHostingBuildArgs build() {
            if ($.backend == null) {
                throw new MissingRequiredPropertyException("AppHostingBuildArgs", "backend");
            }
            if ($.buildId == null) {
                throw new MissingRequiredPropertyException("AppHostingBuildArgs", "buildId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("AppHostingBuildArgs", "location");
            }
            if ($.source == null) {
                throw new MissingRequiredPropertyException("AppHostingBuildArgs", "source");
            }
            return $;
        }
    }

}
