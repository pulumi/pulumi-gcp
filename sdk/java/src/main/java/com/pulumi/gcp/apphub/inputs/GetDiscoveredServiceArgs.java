// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apphub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDiscoveredServiceArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDiscoveredServiceArgs Empty = new GetDiscoveredServiceArgs();

    /**
     * The location of the discovered service.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the discovered service.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The host project of the discovered service.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The host project of the discovered service.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The uri of the service.
     * 
     */
    @Import(name="serviceUri", required=true)
    private Output<String> serviceUri;

    /**
     * @return The uri of the service.
     * 
     */
    public Output<String> serviceUri() {
        return this.serviceUri;
    }

    private GetDiscoveredServiceArgs() {}

    private GetDiscoveredServiceArgs(GetDiscoveredServiceArgs $) {
        this.location = $.location;
        this.project = $.project;
        this.serviceUri = $.serviceUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDiscoveredServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDiscoveredServiceArgs $;

        public Builder() {
            $ = new GetDiscoveredServiceArgs();
        }

        public Builder(GetDiscoveredServiceArgs defaults) {
            $ = new GetDiscoveredServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location The location of the discovered service.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the discovered service.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The host project of the discovered service.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The host project of the discovered service.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceUri The uri of the service.
         * 
         * @return builder
         * 
         */
        public Builder serviceUri(Output<String> serviceUri) {
            $.serviceUri = serviceUri;
            return this;
        }

        /**
         * @param serviceUri The uri of the service.
         * 
         * @return builder
         * 
         */
        public Builder serviceUri(String serviceUri) {
            return serviceUri(Output.of(serviceUri));
        }

        public GetDiscoveredServiceArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetDiscoveredServiceArgs", "location");
            }
            if ($.serviceUri == null) {
                throw new MissingRequiredPropertyException("GetDiscoveredServiceArgs", "serviceUri");
            }
            return $;
        }
    }

}
