// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddeploy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworkingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworkingArgs Empty = new DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworkingArgs();

    /**
     * Required. Name of the Kubernetes Deployment whose traffic is managed by the specified Service.
     * 
     */
    @Import(name="deployment", required=true)
    private Output<String> deployment;

    /**
     * @return Required. Name of the Kubernetes Deployment whose traffic is managed by the specified Service.
     * 
     */
    public Output<String> deployment() {
        return this.deployment;
    }

    /**
     * Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.
     * 
     */
    @Import(name="disablePodOverprovisioning")
    private @Nullable Output<Boolean> disablePodOverprovisioning;

    /**
     * @return Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.
     * 
     */
    public Optional<Output<Boolean>> disablePodOverprovisioning() {
        return Optional.ofNullable(this.disablePodOverprovisioning);
    }

    /**
     * Required. Name of the Kubernetes Service.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return Required. Name of the Kubernetes Service.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    private DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworkingArgs() {}

    private DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworkingArgs(DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworkingArgs $) {
        this.deployment = $.deployment;
        this.disablePodOverprovisioning = $.disablePodOverprovisioning;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworkingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworkingArgs $;

        public Builder() {
            $ = new DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworkingArgs();
        }

        public Builder(DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworkingArgs defaults) {
            $ = new DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworkingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deployment Required. Name of the Kubernetes Deployment whose traffic is managed by the specified Service.
         * 
         * @return builder
         * 
         */
        public Builder deployment(Output<String> deployment) {
            $.deployment = deployment;
            return this;
        }

        /**
         * @param deployment Required. Name of the Kubernetes Deployment whose traffic is managed by the specified Service.
         * 
         * @return builder
         * 
         */
        public Builder deployment(String deployment) {
            return deployment(Output.of(deployment));
        }

        /**
         * @param disablePodOverprovisioning Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder disablePodOverprovisioning(@Nullable Output<Boolean> disablePodOverprovisioning) {
            $.disablePodOverprovisioning = disablePodOverprovisioning;
            return this;
        }

        /**
         * @param disablePodOverprovisioning Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder disablePodOverprovisioning(Boolean disablePodOverprovisioning) {
            return disablePodOverprovisioning(Output.of(disablePodOverprovisioning));
        }

        /**
         * @param service Required. Name of the Kubernetes Service.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Required. Name of the Kubernetes Service.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public DeliveryPipelineSerialPipelineStageStrategyCanaryRuntimeConfigKubernetesServiceNetworkingArgs build() {
            $.deployment = Objects.requireNonNull($.deployment, "expected parameter 'deployment' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            return $;
        }
    }

}
