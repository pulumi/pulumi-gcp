// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workstations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkstationConfigEphemeralDirectoryGcePdArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkstationConfigEphemeralDirectoryGcePdArgs Empty = new WorkstationConfigEphemeralDirectoryGcePdArgs();

    /**
     * Type of the disk to use. Defaults to `&#34;pd-standard&#34;`.
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<String> diskType;

    /**
     * @return Type of the disk to use. Defaults to `&#34;pd-standard&#34;`.
     * 
     */
    public Optional<Output<String>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * Whether the disk is read only. If true, the disk may be shared by multiple VMs and `sourceSnapshot` must be set.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    /**
     * @return Whether the disk is read only. If true, the disk may be shared by multiple VMs and `sourceSnapshot` must be set.
     * 
     */
    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * Name of the disk image to use as the source for the disk.
     * Must be empty `sourceSnapshot` is set.
     * Updating `sourceImage` will update content in the ephemeral directory after the workstation is restarted.
     * 
     */
    @Import(name="sourceImage")
    private @Nullable Output<String> sourceImage;

    /**
     * @return Name of the disk image to use as the source for the disk.
     * Must be empty `sourceSnapshot` is set.
     * Updating `sourceImage` will update content in the ephemeral directory after the workstation is restarted.
     * 
     */
    public Optional<Output<String>> sourceImage() {
        return Optional.ofNullable(this.sourceImage);
    }

    /**
     * Name of the snapshot to use as the source for the disk.
     * Must be empty if `sourceImage` is set.
     * Must be empty if `read_only` is false.
     * Updating `source_snapshot` will update content in the ephemeral directory after the workstation is restarted.
     * 
     */
    @Import(name="sourceSnapshot")
    private @Nullable Output<String> sourceSnapshot;

    /**
     * @return Name of the snapshot to use as the source for the disk.
     * Must be empty if `sourceImage` is set.
     * Must be empty if `read_only` is false.
     * Updating `source_snapshot` will update content in the ephemeral directory after the workstation is restarted.
     * 
     */
    public Optional<Output<String>> sourceSnapshot() {
        return Optional.ofNullable(this.sourceSnapshot);
    }

    private WorkstationConfigEphemeralDirectoryGcePdArgs() {}

    private WorkstationConfigEphemeralDirectoryGcePdArgs(WorkstationConfigEphemeralDirectoryGcePdArgs $) {
        this.diskType = $.diskType;
        this.readOnly = $.readOnly;
        this.sourceImage = $.sourceImage;
        this.sourceSnapshot = $.sourceSnapshot;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkstationConfigEphemeralDirectoryGcePdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkstationConfigEphemeralDirectoryGcePdArgs $;

        public Builder() {
            $ = new WorkstationConfigEphemeralDirectoryGcePdArgs();
        }

        public Builder(WorkstationConfigEphemeralDirectoryGcePdArgs defaults) {
            $ = new WorkstationConfigEphemeralDirectoryGcePdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskType Type of the disk to use. Defaults to `&#34;pd-standard&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable Output<String> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType Type of the disk to use. Defaults to `&#34;pd-standard&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param readOnly Whether the disk is read only. If true, the disk may be shared by multiple VMs and `sourceSnapshot` must be set.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        /**
         * @param readOnly Whether the disk is read only. If true, the disk may be shared by multiple VMs and `sourceSnapshot` must be set.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        /**
         * @param sourceImage Name of the disk image to use as the source for the disk.
         * Must be empty `sourceSnapshot` is set.
         * Updating `sourceImage` will update content in the ephemeral directory after the workstation is restarted.
         * 
         * @return builder
         * 
         */
        public Builder sourceImage(@Nullable Output<String> sourceImage) {
            $.sourceImage = sourceImage;
            return this;
        }

        /**
         * @param sourceImage Name of the disk image to use as the source for the disk.
         * Must be empty `sourceSnapshot` is set.
         * Updating `sourceImage` will update content in the ephemeral directory after the workstation is restarted.
         * 
         * @return builder
         * 
         */
        public Builder sourceImage(String sourceImage) {
            return sourceImage(Output.of(sourceImage));
        }

        /**
         * @param sourceSnapshot Name of the snapshot to use as the source for the disk.
         * Must be empty if `sourceImage` is set.
         * Must be empty if `read_only` is false.
         * Updating `source_snapshot` will update content in the ephemeral directory after the workstation is restarted.
         * 
         * @return builder
         * 
         */
        public Builder sourceSnapshot(@Nullable Output<String> sourceSnapshot) {
            $.sourceSnapshot = sourceSnapshot;
            return this;
        }

        /**
         * @param sourceSnapshot Name of the snapshot to use as the source for the disk.
         * Must be empty if `sourceImage` is set.
         * Must be empty if `read_only` is false.
         * Updating `source_snapshot` will update content in the ephemeral directory after the workstation is restarted.
         * 
         * @return builder
         * 
         */
        public Builder sourceSnapshot(String sourceSnapshot) {
            return sourceSnapshot(Output.of(sourceSnapshot));
        }

        public WorkstationConfigEphemeralDirectoryGcePdArgs build() {
            return $;
        }
    }

}
