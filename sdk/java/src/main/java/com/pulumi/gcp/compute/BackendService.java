// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.BackendServiceArgs;
import com.pulumi.gcp.compute.inputs.BackendServiceState;
import com.pulumi.gcp.compute.outputs.BackendServiceBackend;
import com.pulumi.gcp.compute.outputs.BackendServiceCdnPolicy;
import com.pulumi.gcp.compute.outputs.BackendServiceCircuitBreakers;
import com.pulumi.gcp.compute.outputs.BackendServiceConsistentHash;
import com.pulumi.gcp.compute.outputs.BackendServiceCustomMetric;
import com.pulumi.gcp.compute.outputs.BackendServiceDynamicForwarding;
import com.pulumi.gcp.compute.outputs.BackendServiceIap;
import com.pulumi.gcp.compute.outputs.BackendServiceLocalityLbPolicy;
import com.pulumi.gcp.compute.outputs.BackendServiceLogConfig;
import com.pulumi.gcp.compute.outputs.BackendServiceMaxStreamDuration;
import com.pulumi.gcp.compute.outputs.BackendServiceNetworkPassThroughLbTrafficPolicy;
import com.pulumi.gcp.compute.outputs.BackendServiceOutlierDetection;
import com.pulumi.gcp.compute.outputs.BackendServiceSecuritySettings;
import com.pulumi.gcp.compute.outputs.BackendServiceStrongSessionAffinityCookie;
import com.pulumi.gcp.compute.outputs.BackendServiceTlsSettings;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Backend Service defines a group of virtual machines that will serve
 * traffic for load balancing. This resource is a global backend service,
 * appropriate for external load balancing or self-managed internal load balancing.
 * For managed internal load balancing, use a regional backend service instead.
 * 
 * Currently self-managed internal load balancing is only available in beta.
 * 
 * &gt; **Note:** Recreating a `gcp.compute.BackendService` that references other dependent resources like `gcp.compute.URLMap` will give a `resourceInUseByAnotherResource` error, when modifying the number of other dependent resources.
 * Use `lifecycle.create_before_destroy` on the dependent resources to avoid this type of error as shown in the Dynamic Backends example.
 * 
 * To get more information about BackendService, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/v1/backendServices)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/compute/docs/load-balancing/http/backend-service)
 * 
 * &gt; **Warning:** All arguments including the following potentially sensitive
 * values will be stored in the raw state as plain text: `iap.oauth2_client_secret`, `iap.oauth2_client_secret_sha256`, `security_settings.aws_v4_authentication.access_key`.
 * 
 * ## Example Usage
 * 
 * ### Backend Service Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HttpHealthCheck;
 * import com.pulumi.gcp.compute.HttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHttpHealthCheck = new HttpHealthCheck("defaultHttpHealthCheck", HttpHealthCheckArgs.builder()
 *             .name("health-check")
 *             .requestPath("/")
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .build());
 * 
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .healthChecks(defaultHttpHealthCheck.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service External Iap
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceIapArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("tf-test-backend-service-external")
 *             .protocol("HTTP")
 *             .loadBalancingScheme("EXTERNAL")
 *             .iap(BackendServiceIapArgs.builder()
 *                 .enabled(true)
 *                 .oauth2ClientId("abc")
 *                 .oauth2ClientSecret("xyz")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Cache Simple
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HttpHealthCheck;
 * import com.pulumi.gcp.compute.HttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceCdnPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHttpHealthCheck = new HttpHealthCheck("defaultHttpHealthCheck", HttpHealthCheckArgs.builder()
 *             .name("health-check")
 *             .requestPath("/")
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .build());
 * 
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .healthChecks(defaultHttpHealthCheck.id())
 *             .enableCdn(true)
 *             .cdnPolicy(BackendServiceCdnPolicyArgs.builder()
 *                 .signedUrlCacheMaxAgeSec(7200)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Cache Include Http Headers
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceCdnPolicyArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceCdnPolicyCacheKeyPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .enableCdn(true)
 *             .cdnPolicy(BackendServiceCdnPolicyArgs.builder()
 *                 .cacheMode("USE_ORIGIN_HEADERS")
 *                 .cacheKeyPolicy(BackendServiceCdnPolicyCacheKeyPolicyArgs.builder()
 *                     .includeHost(true)
 *                     .includeProtocol(true)
 *                     .includeQueryString(true)
 *                     .includeHttpHeaders("X-My-Header-Field")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Cache Include Named Cookies
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceCdnPolicyArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceCdnPolicyCacheKeyPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .enableCdn(true)
 *             .cdnPolicy(BackendServiceCdnPolicyArgs.builder()
 *                 .cacheMode("CACHE_ALL_STATIC")
 *                 .defaultTtl(3600)
 *                 .clientTtl(7200)
 *                 .maxTtl(10800)
 *                 .cacheKeyPolicy(BackendServiceCdnPolicyCacheKeyPolicyArgs.builder()
 *                     .includeHost(true)
 *                     .includeProtocol(true)
 *                     .includeQueryString(true)
 *                     .includeNamedCookies(                    
 *                         "__next_preview_data",
 *                         "__prerender_bypass")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Cache
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HttpHealthCheck;
 * import com.pulumi.gcp.compute.HttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceCdnPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHttpHealthCheck = new HttpHealthCheck("defaultHttpHealthCheck", HttpHealthCheckArgs.builder()
 *             .name("health-check")
 *             .requestPath("/")
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .build());
 * 
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .healthChecks(defaultHttpHealthCheck.id())
 *             .enableCdn(true)
 *             .cdnPolicy(BackendServiceCdnPolicyArgs.builder()
 *                 .cacheMode("CACHE_ALL_STATIC")
 *                 .defaultTtl(3600)
 *                 .clientTtl(7200)
 *                 .maxTtl(10800)
 *                 .negativeCaching(true)
 *                 .signedUrlCacheMaxAgeSec(7200)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Cache Bypass Cache On Request Headers
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HttpHealthCheck;
 * import com.pulumi.gcp.compute.HttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceCdnPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHttpHealthCheck = new HttpHealthCheck("defaultHttpHealthCheck", HttpHealthCheckArgs.builder()
 *             .name("health-check")
 *             .requestPath("/")
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .build());
 * 
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .healthChecks(defaultHttpHealthCheck.id())
 *             .enableCdn(true)
 *             .cdnPolicy(BackendServiceCdnPolicyArgs.builder()
 *                 .cacheMode("CACHE_ALL_STATIC")
 *                 .defaultTtl(3600)
 *                 .clientTtl(7200)
 *                 .maxTtl(10800)
 *                 .negativeCaching(true)
 *                 .signedUrlCacheMaxAgeSec(7200)
 *                 .bypassCacheOnRequestHeaders(                
 *                     BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs.builder()
 *                         .headerName("Authorization")
 *                         .build(),
 *                     BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs.builder()
 *                         .headerName("Proxy-Authorization")
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Traffic Director Round Robin
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var healthCheck = new HealthCheck("healthCheck", HealthCheckArgs.builder()
 *             .name("health-check")
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .healthChecks(healthCheck.id())
 *             .loadBalancingScheme("INTERNAL_SELF_MANAGED")
 *             .localityLbPolicy("ROUND_ROBIN")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Traffic Director Ring Hash
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceCircuitBreakersArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceConsistentHashArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceConsistentHashHttpCookieArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceConsistentHashHttpCookieTtlArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceOutlierDetectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var healthCheck = new HealthCheck("healthCheck", HealthCheckArgs.builder()
 *             .name("health-check")
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .healthChecks(healthCheck.id())
 *             .loadBalancingScheme("INTERNAL_SELF_MANAGED")
 *             .localityLbPolicy("RING_HASH")
 *             .sessionAffinity("HTTP_COOKIE")
 *             .circuitBreakers(BackendServiceCircuitBreakersArgs.builder()
 *                 .maxConnections(10)
 *                 .build())
 *             .consistentHash(BackendServiceConsistentHashArgs.builder()
 *                 .httpCookie(BackendServiceConsistentHashHttpCookieArgs.builder()
 *                     .ttl(BackendServiceConsistentHashHttpCookieTtlArgs.builder()
 *                         .seconds(11)
 *                         .nanos(1111)
 *                         .build())
 *                     .name("mycookie")
 *                     .build())
 *                 .build())
 *             .outlierDetection(BackendServiceOutlierDetectionArgs.builder()
 *                 .consecutiveErrors(2)
 *                 .consecutiveGatewayFailure(5)
 *                 .enforcingConsecutiveErrors(100)
 *                 .enforcingConsecutiveGatewayFailure(0)
 *                 .enforcingSuccessRate(100)
 *                 .maxEjectionPercent(10)
 *                 .successRateMinimumHosts(5)
 *                 .successRateRequestVolume(100)
 *                 .successRateStdevFactor(1900)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Stateful Session Affinity
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceStrongSessionAffinityCookieArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceStrongSessionAffinityCookieTtlArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var healthCheck = new HealthCheck("healthCheck", HealthCheckArgs.builder()
 *             .name("health-check")
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .healthChecks(healthCheck.id())
 *             .loadBalancingScheme("EXTERNAL_MANAGED")
 *             .localityLbPolicy("RING_HASH")
 *             .sessionAffinity("STRONG_COOKIE_AFFINITY")
 *             .strongSessionAffinityCookie(BackendServiceStrongSessionAffinityCookieArgs.builder()
 *                 .ttl(BackendServiceStrongSessionAffinityCookieTtlArgs.builder()
 *                     .seconds(11)
 *                     .nanos(1111)
 *                     .build())
 *                 .name("mycookie")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Network Endpoint
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.GlobalNetworkEndpointGroup;
 * import com.pulumi.gcp.compute.GlobalNetworkEndpointGroupArgs;
 * import com.pulumi.gcp.compute.GlobalNetworkEndpoint;
 * import com.pulumi.gcp.compute.GlobalNetworkEndpointArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceBackendArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var externalProxy = new GlobalNetworkEndpointGroup("externalProxy", GlobalNetworkEndpointGroupArgs.builder()
 *             .name("network-endpoint")
 *             .networkEndpointType("INTERNET_FQDN_PORT")
 *             .defaultPort(443)
 *             .build());
 * 
 *         var proxy = new GlobalNetworkEndpoint("proxy", GlobalNetworkEndpointArgs.builder()
 *             .globalNetworkEndpointGroup(externalProxy.id())
 *             .fqdn("test.example.com")
 *             .port(externalProxy.defaultPort())
 *             .build());
 * 
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .enableCdn(true)
 *             .timeoutSec(10)
 *             .connectionDrainingTimeoutSec(10)
 *             .customRequestHeaders(proxy.fqdn().applyValue(_fqdn -> String.format("host: %s", _fqdn)))
 *             .customResponseHeaders("X-Cache-Hit: {cdn_cache_status}")
 *             .backends(BackendServiceBackendArgs.builder()
 *                 .group(externalProxy.id())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service External Managed
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHealthCheck = new HealthCheck("defaultHealthCheck", HealthCheckArgs.builder()
 *             .name("health-check")
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .healthChecks(defaultHealthCheck.id())
 *             .loadBalancingScheme("EXTERNAL_MANAGED")
 *             .protocol("H2C")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Ip Address Selection Policy
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .loadBalancingScheme("EXTERNAL_MANAGED")
 *             .ipAddressSelectionPolicy("IPV6_ONLY")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Custom Metrics
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.NetworkEndpointGroup;
 * import com.pulumi.gcp.compute.NetworkEndpointGroupArgs;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceCustomMetricArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceBackendArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceLogConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Network("default", NetworkArgs.builder()
 *             .name("network")
 *             .build());
 * 
 *         // Zonal NEG with GCE_VM_IP_PORT
 *         var defaultNetworkEndpointGroup = new NetworkEndpointGroup("defaultNetworkEndpointGroup", NetworkEndpointGroupArgs.builder()
 *             .name("network-endpoint")
 *             .network(default_.id())
 *             .defaultPort(90)
 *             .zone("us-central1-a")
 *             .networkEndpointType("GCE_VM_IP_PORT")
 *             .build());
 * 
 *         var defaultHealthCheck = new HealthCheck("defaultHealthCheck", HealthCheckArgs.builder()
 *             .name("health-check")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var defaultBackendService = new BackendService("defaultBackendService", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .healthChecks(defaultHealthCheck.id())
 *             .loadBalancingScheme("EXTERNAL_MANAGED")
 *             .localityLbPolicy("WEIGHTED_ROUND_ROBIN")
 *             .customMetrics(BackendServiceCustomMetricArgs.builder()
 *                 .name("orca.application_utilization")
 *                 .dryRun(false)
 *                 .build())
 *             .backends(BackendServiceBackendArgs.builder()
 *                 .group(defaultNetworkEndpointGroup.id())
 *                 .balancingMode("CUSTOM_METRICS")
 *                 .customMetrics(                
 *                     BackendServiceBackendCustomMetricArgs.builder()
 *                         .name("orca.cpu_utilization")
 *                         .maxUtilization(0.9)
 *                         .dryRun(true)
 *                         .build(),
 *                     BackendServiceBackendCustomMetricArgs.builder()
 *                         .name("orca.named_metrics.foo")
 *                         .dryRun(false)
 *                         .build())
 *                 .build())
 *             .logConfig(BackendServiceLogConfigArgs.builder()
 *                 .enable(true)
 *                 .optionalMode("CUSTOM")
 *                 .optionalFields(                
 *                     "orca_load_report",
 *                     "tls.protocol")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Tls Settings
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.networksecurity.BackendAuthenticationConfig;
 * import com.pulumi.gcp.networksecurity.BackendAuthenticationConfigArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceTlsSettingsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHealthCheck = new HealthCheck("defaultHealthCheck", HealthCheckArgs.builder()
 *             .name("health-check")
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var defaultBackendAuthenticationConfig = new BackendAuthenticationConfig("defaultBackendAuthenticationConfig", BackendAuthenticationConfigArgs.builder()
 *             .name("authentication")
 *             .wellKnownRoots("PUBLIC_ROOTS")
 *             .build());
 * 
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .healthChecks(defaultHealthCheck.id())
 *             .loadBalancingScheme("EXTERNAL_MANAGED")
 *             .protocol("HTTPS")
 *             .tlsSettings(BackendServiceTlsSettingsArgs.builder()
 *                 .sni("example.com")
 *                 .subjectAltNames(                
 *                     BackendServiceTlsSettingsSubjectAltNameArgs.builder()
 *                         .dnsName("example.com")
 *                         .build(),
 *                     BackendServiceTlsSettingsSubjectAltNameArgs.builder()
 *                         .uniformResourceIdentifier("https://example.com")
 *                         .build())
 *                 .authenticationConfig(defaultBackendAuthenticationConfig.id().applyValue(_id -> String.format("//networksecurity.googleapis.com/%s", _id)))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Backend Service Dynamic Forwarding
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceDynamicForwardingArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceDynamicForwardingIpPortSelectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .loadBalancingScheme("INTERNAL_MANAGED")
 *             .dynamicForwarding(BackendServiceDynamicForwardingArgs.builder()
 *                 .ipPortSelection(BackendServiceDynamicForwardingIpPortSelectionArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * BackendService can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/global/backendServices/{{name}}`
 * 
 * * `{{project}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, BackendService can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:compute/backendService:BackendService default projects/{{project}}/global/backendServices/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/backendService:BackendService default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/backendService:BackendService default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/backendService:BackendService")
public class BackendService extends com.pulumi.resources.CustomResource {
    /**
     * Lifetime of cookies in seconds if session_affinity is
     * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
     * only until the end of the browser session (or equivalent). The
     * maximum allowed value for TTL is one day.
     * When the load balancing scheme is INTERNAL, this field is not used.
     * 
     */
    @Export(name="affinityCookieTtlSec", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> affinityCookieTtlSec;

    /**
     * @return Lifetime of cookies in seconds if session_affinity is
     * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
     * only until the end of the browser session (or equivalent). The
     * maximum allowed value for TTL is one day.
     * When the load balancing scheme is INTERNAL, this field is not used.
     * 
     */
    public Output<Optional<Integer>> affinityCookieTtlSec() {
        return Codegen.optional(this.affinityCookieTtlSec);
    }
    /**
     * The set of backends that serve this BackendService.
     * Structure is documented below.
     * 
     */
    @Export(name="backends", refs={List.class,BackendServiceBackend.class}, tree="[0,1]")
    private Output</* @Nullable */ List<BackendServiceBackend>> backends;

    /**
     * @return The set of backends that serve this BackendService.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<BackendServiceBackend>>> backends() {
        return Codegen.optional(this.backends);
    }
    /**
     * Cloud CDN configuration for this BackendService.
     * Structure is documented below.
     * 
     */
    @Export(name="cdnPolicy", refs={BackendServiceCdnPolicy.class}, tree="[0]")
    private Output<BackendServiceCdnPolicy> cdnPolicy;

    /**
     * @return Cloud CDN configuration for this BackendService.
     * Structure is documented below.
     * 
     */
    public Output<BackendServiceCdnPolicy> cdnPolicy() {
        return this.cdnPolicy;
    }
    /**
     * Settings controlling the volume of connections to a backend service. This field
     * is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @Export(name="circuitBreakers", refs={BackendServiceCircuitBreakers.class}, tree="[0]")
    private Output</* @Nullable */ BackendServiceCircuitBreakers> circuitBreakers;

    /**
     * @return Settings controlling the volume of connections to a backend service. This field
     * is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    public Output<Optional<BackendServiceCircuitBreakers>> circuitBreakers() {
        return Codegen.optional(this.circuitBreakers);
    }
    /**
     * Compress text responses using Brotli or gzip compression, based on the client&#39;s Accept-Encoding header.
     * Possible values are: `AUTOMATIC`, `DISABLED`.
     * 
     */
    @Export(name="compressionMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> compressionMode;

    /**
     * @return Compress text responses using Brotli or gzip compression, based on the client&#39;s Accept-Encoding header.
     * Possible values are: `AUTOMATIC`, `DISABLED`.
     * 
     */
    public Output<Optional<String>> compressionMode() {
        return Codegen.optional(this.compressionMode);
    }
    /**
     * Time for which instance will be drained (not accept new
     * connections, but still work to finish started).
     * 
     */
    @Export(name="connectionDrainingTimeoutSec", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> connectionDrainingTimeoutSec;

    /**
     * @return Time for which instance will be drained (not accept new
     * connections, but still work to finish started).
     * 
     */
    public Output<Optional<Integer>> connectionDrainingTimeoutSec() {
        return Codegen.optional(this.connectionDrainingTimeoutSec);
    }
    /**
     * Consistent Hash-based load balancing can be used to provide soft session
     * affinity based on HTTP headers, cookies or other properties. This load balancing
     * policy is applicable only for HTTP connections. The affinity to a particular
     * destination host will be lost when one or more hosts are added/removed from the
     * destination service. This field specifies parameters that control consistent
     * hashing. This field only applies if the load_balancing_scheme is set to
     * INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
     * set to MAGLEV or RING_HASH.
     * Structure is documented below.
     * 
     */
    @Export(name="consistentHash", refs={BackendServiceConsistentHash.class}, tree="[0]")
    private Output</* @Nullable */ BackendServiceConsistentHash> consistentHash;

    /**
     * @return Consistent Hash-based load balancing can be used to provide soft session
     * affinity based on HTTP headers, cookies or other properties. This load balancing
     * policy is applicable only for HTTP connections. The affinity to a particular
     * destination host will be lost when one or more hosts are added/removed from the
     * destination service. This field specifies parameters that control consistent
     * hashing. This field only applies if the load_balancing_scheme is set to
     * INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
     * set to MAGLEV or RING_HASH.
     * Structure is documented below.
     * 
     */
    public Output<Optional<BackendServiceConsistentHash>> consistentHash() {
        return Codegen.optional(this.consistentHash);
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", refs={String.class}, tree="[0]")
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * List of custom metrics that are used for the WEIGHTED_ROUND_ROBIN locality_lb_policy.
     * Structure is documented below.
     * 
     */
    @Export(name="customMetrics", refs={List.class,BackendServiceCustomMetric.class}, tree="[0,1]")
    private Output</* @Nullable */ List<BackendServiceCustomMetric>> customMetrics;

    /**
     * @return List of custom metrics that are used for the WEIGHTED_ROUND_ROBIN locality_lb_policy.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<BackendServiceCustomMetric>>> customMetrics() {
        return Codegen.optional(this.customMetrics);
    }
    /**
     * Headers that the HTTP/S load balancer should add to proxied
     * requests.
     * 
     */
    @Export(name="customRequestHeaders", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> customRequestHeaders;

    /**
     * @return Headers that the HTTP/S load balancer should add to proxied
     * requests.
     * 
     */
    public Output<Optional<List<String>>> customRequestHeaders() {
        return Codegen.optional(this.customRequestHeaders);
    }
    /**
     * Headers that the HTTP/S load balancer should add to proxied
     * responses.
     * 
     */
    @Export(name="customResponseHeaders", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> customResponseHeaders;

    /**
     * @return Headers that the HTTP/S load balancer should add to proxied
     * responses.
     * 
     */
    public Output<Optional<List<String>>> customResponseHeaders() {
        return Codegen.optional(this.customResponseHeaders);
    }
    /**
     * An optional description of this resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Dynamic forwarding configuration. This field is used to configure the backend service with dynamic forwarding
     * feature which together with Service Extension allows customized and complex routing logic.
     * Structure is documented below.
     * 
     */
    @Export(name="dynamicForwarding", refs={BackendServiceDynamicForwarding.class}, tree="[0]")
    private Output</* @Nullable */ BackendServiceDynamicForwarding> dynamicForwarding;

    /**
     * @return Dynamic forwarding configuration. This field is used to configure the backend service with dynamic forwarding
     * feature which together with Service Extension allows customized and complex routing logic.
     * Structure is documented below.
     * 
     */
    public Output<Optional<BackendServiceDynamicForwarding>> dynamicForwarding() {
        return Codegen.optional(this.dynamicForwarding);
    }
    /**
     * The resource URL for the edge security policy associated with this backend service.
     * 
     */
    @Export(name="edgeSecurityPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> edgeSecurityPolicy;

    /**
     * @return The resource URL for the edge security policy associated with this backend service.
     * 
     */
    public Output<Optional<String>> edgeSecurityPolicy() {
        return Codegen.optional(this.edgeSecurityPolicy);
    }
    /**
     * If true, enable Cloud CDN for this BackendService.
     * 
     */
    @Export(name="enableCdn", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableCdn;

    /**
     * @return If true, enable Cloud CDN for this BackendService.
     * 
     */
    public Output<Optional<Boolean>> enableCdn() {
        return Codegen.optional(this.enableCdn);
    }
    /**
     * Specifies the canary migration state. Possible values are PREPARE, TEST_BY_PERCENTAGE, and
     * TEST_ALL_TRAFFIC.
     * To begin the migration from EXTERNAL to EXTERNAL_MANAGED, the state must be changed to
     * PREPARE. The state must be changed to TEST_ALL_TRAFFIC before the loadBalancingScheme can be
     * changed to EXTERNAL_MANAGED. Optionally, the TEST_BY_PERCENTAGE state can be used to migrate
     * traffic by percentage using externalManagedMigrationTestingPercentage.
     * Rolling back a migration requires the states to be set in reverse order. So changing the
     * scheme from EXTERNAL_MANAGED to EXTERNAL requires the state to be set to TEST_ALL_TRAFFIC at
     * the same time. Optionally, the TEST_BY_PERCENTAGE state can be used to migrate some traffic
     * back to EXTERNAL or PREPARE can be used to migrate all traffic back to EXTERNAL.
     * Possible values are: `PREPARE`, `TEST_BY_PERCENTAGE`, `TEST_ALL_TRAFFIC`.
     * 
     */
    @Export(name="externalManagedMigrationState", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> externalManagedMigrationState;

    /**
     * @return Specifies the canary migration state. Possible values are PREPARE, TEST_BY_PERCENTAGE, and
     * TEST_ALL_TRAFFIC.
     * To begin the migration from EXTERNAL to EXTERNAL_MANAGED, the state must be changed to
     * PREPARE. The state must be changed to TEST_ALL_TRAFFIC before the loadBalancingScheme can be
     * changed to EXTERNAL_MANAGED. Optionally, the TEST_BY_PERCENTAGE state can be used to migrate
     * traffic by percentage using externalManagedMigrationTestingPercentage.
     * Rolling back a migration requires the states to be set in reverse order. So changing the
     * scheme from EXTERNAL_MANAGED to EXTERNAL requires the state to be set to TEST_ALL_TRAFFIC at
     * the same time. Optionally, the TEST_BY_PERCENTAGE state can be used to migrate some traffic
     * back to EXTERNAL or PREPARE can be used to migrate all traffic back to EXTERNAL.
     * Possible values are: `PREPARE`, `TEST_BY_PERCENTAGE`, `TEST_ALL_TRAFFIC`.
     * 
     */
    public Output<Optional<String>> externalManagedMigrationState() {
        return Codegen.optional(this.externalManagedMigrationState);
    }
    /**
     * Determines the fraction of requests that should be processed by the Global external
     * Application Load Balancer.
     * The value of this field must be in the range [0, 100].
     * Session affinity options will slightly affect this routing behavior, for more details,
     * see: Session Affinity.
     * This value can only be set if the loadBalancingScheme in the backend service is set to
     * EXTERNAL (when using the Classic ALB) and the migration state is TEST_BY_PERCENTAGE.
     * 
     */
    @Export(name="externalManagedMigrationTestingPercentage", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> externalManagedMigrationTestingPercentage;

    /**
     * @return Determines the fraction of requests that should be processed by the Global external
     * Application Load Balancer.
     * The value of this field must be in the range [0, 100].
     * Session affinity options will slightly affect this routing behavior, for more details,
     * see: Session Affinity.
     * This value can only be set if the loadBalancingScheme in the backend service is set to
     * EXTERNAL (when using the Classic ALB) and the migration state is TEST_BY_PERCENTAGE.
     * 
     */
    public Output<Optional<Double>> externalManagedMigrationTestingPercentage() {
        return Codegen.optional(this.externalManagedMigrationTestingPercentage);
    }
    /**
     * Fingerprint of this resource. A hash of the contents stored in this
     * object. This field is used in optimistic locking.
     * 
     */
    @Export(name="fingerprint", refs={String.class}, tree="[0]")
    private Output<String> fingerprint;

    /**
     * @return Fingerprint of this resource. A hash of the contents stored in this
     * object. This field is used in optimistic locking.
     * 
     */
    public Output<String> fingerprint() {
        return this.fingerprint;
    }
    /**
     * The unique identifier for the resource. This identifier is defined by the server.
     * 
     */
    @Export(name="generatedId", refs={Integer.class}, tree="[0]")
    private Output<Integer> generatedId;

    /**
     * @return The unique identifier for the resource. This identifier is defined by the server.
     * 
     */
    public Output<Integer> generatedId() {
        return this.generatedId;
    }
    /**
     * The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
     * for health checking this BackendService. Currently at most one health
     * check can be specified.
     * A health check must be specified unless the backend service uses an internet
     * or serverless NEG as a backend.
     * For internal load balancing, a URL to a HealthCheck resource must be specified instead.
     * 
     */
    @Export(name="healthChecks", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> healthChecks;

    /**
     * @return The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
     * for health checking this BackendService. Currently at most one health
     * check can be specified.
     * A health check must be specified unless the backend service uses an internet
     * or serverless NEG as a backend.
     * For internal load balancing, a URL to a HealthCheck resource must be specified instead.
     * 
     */
    public Output<Optional<String>> healthChecks() {
        return Codegen.optional(this.healthChecks);
    }
    /**
     * Settings for enabling Cloud Identity Aware Proxy.
     * If OAuth client is not set, the Google-managed OAuth client is used.
     * Structure is documented below.
     * 
     */
    @Export(name="iap", refs={BackendServiceIap.class}, tree="[0]")
    private Output<BackendServiceIap> iap;

    /**
     * @return Settings for enabling Cloud Identity Aware Proxy.
     * If OAuth client is not set, the Google-managed OAuth client is used.
     * Structure is documented below.
     * 
     */
    public Output<BackendServiceIap> iap() {
        return this.iap;
    }
    /**
     * Specifies preference of traffic to the backend (from the proxy and from the client for proxyless gRPC).
     * Possible values are: `IPV4_ONLY`, `PREFER_IPV6`, `IPV6_ONLY`.
     * 
     */
    @Export(name="ipAddressSelectionPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipAddressSelectionPolicy;

    /**
     * @return Specifies preference of traffic to the backend (from the proxy and from the client for proxyless gRPC).
     * Possible values are: `IPV4_ONLY`, `PREFER_IPV6`, `IPV6_ONLY`.
     * 
     */
    public Output<Optional<String>> ipAddressSelectionPolicy() {
        return Codegen.optional(this.ipAddressSelectionPolicy);
    }
    /**
     * Indicates whether the backend service will be used with internal or
     * external load balancing. A backend service created for one type of
     * load balancing cannot be used with the other. For more information, refer to
     * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
     * Default value is `EXTERNAL`.
     * Possible values are: `EXTERNAL`, `INTERNAL_SELF_MANAGED`, `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
     * 
     */
    @Export(name="loadBalancingScheme", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> loadBalancingScheme;

    /**
     * @return Indicates whether the backend service will be used with internal or
     * external load balancing. A backend service created for one type of
     * load balancing cannot be used with the other. For more information, refer to
     * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
     * Default value is `EXTERNAL`.
     * Possible values are: `EXTERNAL`, `INTERNAL_SELF_MANAGED`, `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`.
     * 
     */
    public Output<Optional<String>> loadBalancingScheme() {
        return Codegen.optional(this.loadBalancingScheme);
    }
    /**
     * A list of locality load balancing policies to be used in order of
     * preference. Either the policy or the customPolicy field should be set.
     * Overrides any value set in the localityLbPolicy field.
     * localityLbPolicies is only supported when the BackendService is referenced
     * by a URL Map that is referenced by a target gRPC proxy that has the
     * validateForProxyless field set to true.
     * Structure is documented below.
     * 
     */
    @Export(name="localityLbPolicies", refs={List.class,BackendServiceLocalityLbPolicy.class}, tree="[0,1]")
    private Output</* @Nullable */ List<BackendServiceLocalityLbPolicy>> localityLbPolicies;

    /**
     * @return A list of locality load balancing policies to be used in order of
     * preference. Either the policy or the customPolicy field should be set.
     * Overrides any value set in the localityLbPolicy field.
     * localityLbPolicies is only supported when the BackendService is referenced
     * by a URL Map that is referenced by a target gRPC proxy that has the
     * validateForProxyless field set to true.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<BackendServiceLocalityLbPolicy>>> localityLbPolicies() {
        return Codegen.optional(this.localityLbPolicies);
    }
    /**
     * The load balancing algorithm used within the scope of the locality.
     * The possible values are:
     * * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
     *   is selected in round robin order.
     * * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
     *   hosts and picks the host which has fewer active requests.
     * * `RING_HASH`: The ring/modulo hash load balancer implements consistent
     *   hashing to backends. The algorithm has the property that the
     *   addition/removal of a host from a set of N hosts only affects
     *   1/N of the requests.
     * * `RANDOM`: The load balancer selects a random healthy host.
     * * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
     *   connection metadata, i.e., connections are opened
     *   to the same address as the destination address of
     *   the incoming connection before the connection
     *   was redirected to the load balancer.
     * * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
     *   Maglev is not as stable as ring hash but has faster table lookup
     *   build times and host selection times. For more information about
     *   Maglev, refer to https://ai.google/research/pubs/pub44824
     * * `WEIGHTED_MAGLEV`: Per-instance weighted Load Balancing via health check
     *   reported weights. Only applicable to loadBalancingScheme
     *   EXTERNAL. If set, the Backend Service must
     *   configure a non legacy HTTP-based Health Check, and
     *   health check replies are expected to contain
     *   non-standard HTTP response header field
     *   X-Load-Balancing-Endpoint-Weight to specify the
     *   per-instance weights. If set, Load Balancing is weight
     *   based on the per-instance weights reported in the last
     *   processed health check replies, as long as every
     *   instance either reported a valid weight or had
     *   UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains
     *   equal-weight.
     * * `WEIGHTED_ROUND_ROBIN`: Per-endpoint weighted round-robin Load Balancing using weights computed
     *   from Backend reported Custom Metrics. If set, the Backend Service
     *   responses are expected to contain non-standard HTTP response header field
     *   X-Endpoint-Load-Metrics. The reported metrics
     *   to use for computing the weights are specified via the
     *   backends[].customMetrics fields.
     *   locality_lb_policy is applicable to either:
     * * A regional backend service with the service_protocol set to HTTP, HTTPS, HTTP2 or H2C,
     *   and loadBalancingScheme set to INTERNAL_MANAGED.
     * * A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * * A regional backend service with loadBalancingScheme set to EXTERNAL (External Network
     *   Load Balancing). Only MAGLEV and WEIGHTED_MAGLEV values are possible for External
     *   Network Load Balancing. The default is MAGLEV.
     *   If session_affinity is not NONE, and locality_lb_policy is not set to MAGLEV, WEIGHTED_MAGLEV,
     *   or RING_HASH, session affinity settings will not take effect.
     *   Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced
     *   by a URL map that is bound to target gRPC proxy that has validate_for_proxyless
     *   field set to true.
     *   Possible values are: `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, `MAGLEV`, `WEIGHTED_MAGLEV`, `WEIGHTED_ROUND_ROBIN`.
     * 
     */
    @Export(name="localityLbPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> localityLbPolicy;

    /**
     * @return The load balancing algorithm used within the scope of the locality.
     * The possible values are:
     * * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
     *   is selected in round robin order.
     * * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
     *   hosts and picks the host which has fewer active requests.
     * * `RING_HASH`: The ring/modulo hash load balancer implements consistent
     *   hashing to backends. The algorithm has the property that the
     *   addition/removal of a host from a set of N hosts only affects
     *   1/N of the requests.
     * * `RANDOM`: The load balancer selects a random healthy host.
     * * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
     *   connection metadata, i.e., connections are opened
     *   to the same address as the destination address of
     *   the incoming connection before the connection
     *   was redirected to the load balancer.
     * * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
     *   Maglev is not as stable as ring hash but has faster table lookup
     *   build times and host selection times. For more information about
     *   Maglev, refer to https://ai.google/research/pubs/pub44824
     * * `WEIGHTED_MAGLEV`: Per-instance weighted Load Balancing via health check
     *   reported weights. Only applicable to loadBalancingScheme
     *   EXTERNAL. If set, the Backend Service must
     *   configure a non legacy HTTP-based Health Check, and
     *   health check replies are expected to contain
     *   non-standard HTTP response header field
     *   X-Load-Balancing-Endpoint-Weight to specify the
     *   per-instance weights. If set, Load Balancing is weight
     *   based on the per-instance weights reported in the last
     *   processed health check replies, as long as every
     *   instance either reported a valid weight or had
     *   UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains
     *   equal-weight.
     * * `WEIGHTED_ROUND_ROBIN`: Per-endpoint weighted round-robin Load Balancing using weights computed
     *   from Backend reported Custom Metrics. If set, the Backend Service
     *   responses are expected to contain non-standard HTTP response header field
     *   X-Endpoint-Load-Metrics. The reported metrics
     *   to use for computing the weights are specified via the
     *   backends[].customMetrics fields.
     *   locality_lb_policy is applicable to either:
     * * A regional backend service with the service_protocol set to HTTP, HTTPS, HTTP2 or H2C,
     *   and loadBalancingScheme set to INTERNAL_MANAGED.
     * * A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * * A regional backend service with loadBalancingScheme set to EXTERNAL (External Network
     *   Load Balancing). Only MAGLEV and WEIGHTED_MAGLEV values are possible for External
     *   Network Load Balancing. The default is MAGLEV.
     *   If session_affinity is not NONE, and locality_lb_policy is not set to MAGLEV, WEIGHTED_MAGLEV,
     *   or RING_HASH, session affinity settings will not take effect.
     *   Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced
     *   by a URL map that is bound to target gRPC proxy that has validate_for_proxyless
     *   field set to true.
     *   Possible values are: `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, `MAGLEV`, `WEIGHTED_MAGLEV`, `WEIGHTED_ROUND_ROBIN`.
     * 
     */
    public Output<Optional<String>> localityLbPolicy() {
        return Codegen.optional(this.localityLbPolicy);
    }
    /**
     * This field denotes the logging options for the load balancer traffic served by this backend service.
     * If logging is enabled, logs will be exported to Stackdriver.
     * Structure is documented below.
     * 
     */
    @Export(name="logConfig", refs={BackendServiceLogConfig.class}, tree="[0]")
    private Output<BackendServiceLogConfig> logConfig;

    /**
     * @return This field denotes the logging options for the load balancer traffic served by this backend service.
     * If logging is enabled, logs will be exported to Stackdriver.
     * Structure is documented below.
     * 
     */
    public Output<BackendServiceLogConfig> logConfig() {
        return this.logConfig;
    }
    /**
     * Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the
     * beginning of the stream until the response has been completely processed, including all retries. A stream that
     * does not complete in this duration is closed.
     * If not specified, there will be no timeout limit, i.e. the maximum duration is infinite.
     * This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service.
     * This field is only allowed when the loadBalancingScheme of the backend service is INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @Export(name="maxStreamDuration", refs={BackendServiceMaxStreamDuration.class}, tree="[0]")
    private Output</* @Nullable */ BackendServiceMaxStreamDuration> maxStreamDuration;

    /**
     * @return Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the
     * beginning of the stream until the response has been completely processed, including all retries. A stream that
     * does not complete in this duration is closed.
     * If not specified, there will be no timeout limit, i.e. the maximum duration is infinite.
     * This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service.
     * This field is only allowed when the loadBalancingScheme of the backend service is INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    public Output<Optional<BackendServiceMaxStreamDuration>> maxStreamDuration() {
        return Codegen.optional(this.maxStreamDuration);
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     * ***
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     * ***
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Configures traffic steering properties of internal passthrough Network Load Balancers.
     * Structure is documented below.
     * 
     */
    @Export(name="networkPassThroughLbTrafficPolicy", refs={BackendServiceNetworkPassThroughLbTrafficPolicy.class}, tree="[0]")
    private Output</* @Nullable */ BackendServiceNetworkPassThroughLbTrafficPolicy> networkPassThroughLbTrafficPolicy;

    /**
     * @return Configures traffic steering properties of internal passthrough Network Load Balancers.
     * Structure is documented below.
     * 
     */
    public Output<Optional<BackendServiceNetworkPassThroughLbTrafficPolicy>> networkPassThroughLbTrafficPolicy() {
        return Codegen.optional(this.networkPassThroughLbTrafficPolicy);
    }
    /**
     * Settings controlling eviction of unhealthy hosts from the load balancing pool.
     * Applicable backend service types can be a global backend service with the
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
     * Structure is documented below.
     * 
     */
    @Export(name="outlierDetection", refs={BackendServiceOutlierDetection.class}, tree="[0]")
    private Output</* @Nullable */ BackendServiceOutlierDetection> outlierDetection;

    /**
     * @return Settings controlling eviction of unhealthy hosts from the load balancing pool.
     * Applicable backend service types can be a global backend service with the
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
     * Structure is documented below.
     * 
     */
    public Output<Optional<BackendServiceOutlierDetection>> outlierDetection() {
        return Codegen.optional(this.outlierDetection);
    }
    /**
     * Name of backend port. The same name should appear in the instance
     * groups referenced by this service. Required when the load balancing
     * scheme is EXTERNAL.
     * 
     */
    @Export(name="portName", refs={String.class}, tree="[0]")
    private Output<String> portName;

    /**
     * @return Name of backend port. The same name should appear in the instance
     * groups referenced by this service. Required when the load balancing
     * scheme is EXTERNAL.
     * 
     */
    public Output<String> portName() {
        return this.portName;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The protocol this BackendService uses to communicate with backends.
     * The default is HTTP. Possible values are HTTP, HTTPS, HTTP2, H2C, TCP, SSL, UDP
     * or GRPC. Refer to the documentation for the load balancers or for Traffic Director
     * for more information. Must be set to GRPC when the backend service is referenced
     * by a URL map that is bound to target gRPC proxy.
     * Possible values are: `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, `UDP`, `GRPC`, `UNSPECIFIED`, `H2C`.
     * 
     */
    @Export(name="protocol", refs={String.class}, tree="[0]")
    private Output<String> protocol;

    /**
     * @return The protocol this BackendService uses to communicate with backends.
     * The default is HTTP. Possible values are HTTP, HTTPS, HTTP2, H2C, TCP, SSL, UDP
     * or GRPC. Refer to the documentation for the load balancers or for Traffic Director
     * for more information. Must be set to GRPC when the backend service is referenced
     * by a URL map that is bound to target gRPC proxy.
     * Possible values are: `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, `UDP`, `GRPC`, `UNSPECIFIED`, `H2C`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }
    /**
     * The security policy associated with this backend service.
     * 
     */
    @Export(name="securityPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> securityPolicy;

    /**
     * @return The security policy associated with this backend service.
     * 
     */
    public Output<Optional<String>> securityPolicy() {
        return Codegen.optional(this.securityPolicy);
    }
    /**
     * The security settings that apply to this backend service. This field is applicable to either
     * a regional backend service with the service_protocol set to HTTP, HTTPS, HTTP2 or H2C, and
     * load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
     * load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @Export(name="securitySettings", refs={BackendServiceSecuritySettings.class}, tree="[0]")
    private Output</* @Nullable */ BackendServiceSecuritySettings> securitySettings;

    /**
     * @return The security settings that apply to this backend service. This field is applicable to either
     * a regional backend service with the service_protocol set to HTTP, HTTPS, HTTP2 or H2C, and
     * load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
     * load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    public Output<Optional<BackendServiceSecuritySettings>> securitySettings() {
        return Codegen.optional(this.securitySettings);
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", refs={String.class}, tree="[0]")
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * URL to networkservices.ServiceLbPolicy resource.
     * Can only be set if load balancing scheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED or INTERNAL_SELF_MANAGED and the scope is global.
     * 
     */
    @Export(name="serviceLbPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceLbPolicy;

    /**
     * @return URL to networkservices.ServiceLbPolicy resource.
     * Can only be set if load balancing scheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED or INTERNAL_SELF_MANAGED and the scope is global.
     * 
     */
    public Output<Optional<String>> serviceLbPolicy() {
        return Codegen.optional(this.serviceLbPolicy);
    }
    /**
     * Type of session affinity to use. The default is NONE. Session affinity is
     * not applicable if the protocol is UDP.
     * Possible values are: `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, `STRONG_COOKIE_AFFINITY`.
     * 
     */
    @Export(name="sessionAffinity", refs={String.class}, tree="[0]")
    private Output<String> sessionAffinity;

    /**
     * @return Type of session affinity to use. The default is NONE. Session affinity is
     * not applicable if the protocol is UDP.
     * Possible values are: `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, `STRONG_COOKIE_AFFINITY`.
     * 
     */
    public Output<String> sessionAffinity() {
        return this.sessionAffinity;
    }
    /**
     * Describes the HTTP cookie used for stateful session affinity. This field is applicable and required if the sessionAffinity is set to STRONG_COOKIE_AFFINITY.
     * Structure is documented below.
     * 
     */
    @Export(name="strongSessionAffinityCookie", refs={BackendServiceStrongSessionAffinityCookie.class}, tree="[0]")
    private Output</* @Nullable */ BackendServiceStrongSessionAffinityCookie> strongSessionAffinityCookie;

    /**
     * @return Describes the HTTP cookie used for stateful session affinity. This field is applicable and required if the sessionAffinity is set to STRONG_COOKIE_AFFINITY.
     * Structure is documented below.
     * 
     */
    public Output<Optional<BackendServiceStrongSessionAffinityCookie>> strongSessionAffinityCookie() {
        return Codegen.optional(this.strongSessionAffinityCookie);
    }
    /**
     * The backend service timeout has a different meaning depending on the type of load balancer.
     * For more information see, [Backend service settings](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices).
     * The default is 30 seconds.
     * The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
     * 
     */
    @Export(name="timeoutSec", refs={Integer.class}, tree="[0]")
    private Output<Integer> timeoutSec;

    /**
     * @return The backend service timeout has a different meaning depending on the type of load balancer.
     * For more information see, [Backend service settings](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices).
     * The default is 30 seconds.
     * The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
     * 
     */
    public Output<Integer> timeoutSec() {
        return this.timeoutSec;
    }
    /**
     * Configuration for Backend Authenticated TLS and mTLS. May only be specified when the backend protocol is SSL, HTTPS or HTTP2.
     * Structure is documented below.
     * 
     */
    @Export(name="tlsSettings", refs={BackendServiceTlsSettings.class}, tree="[0]")
    private Output</* @Nullable */ BackendServiceTlsSettings> tlsSettings;

    /**
     * @return Configuration for Backend Authenticated TLS and mTLS. May only be specified when the backend protocol is SSL, HTTPS or HTTP2.
     * Structure is documented below.
     * 
     */
    public Output<Optional<BackendServiceTlsSettings>> tlsSettings() {
        return Codegen.optional(this.tlsSettings);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BackendService(java.lang.String name) {
        this(name, BackendServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BackendService(java.lang.String name, @Nullable BackendServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BackendService(java.lang.String name, @Nullable BackendServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/backendService:BackendService", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private BackendService(java.lang.String name, Output<java.lang.String> id, @Nullable BackendServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/backendService:BackendService", name, state, makeResourceOptions(options, id), false);
    }

    private static BackendServiceArgs makeArgs(@Nullable BackendServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BackendServiceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BackendService get(java.lang.String name, Output<java.lang.String> id, @Nullable BackendServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BackendService(name, id, state, options);
    }
}
