// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigquery.outputs.GetTableTableConstraintForeignKeyColumnReference;
import com.pulumi.gcp.bigquery.outputs.GetTableTableConstraintForeignKeyReferencedTable;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTableTableConstraintForeignKey {
    /**
     * @return The pair of the foreign key column and primary key column.
     * 
     */
    private List<GetTableTableConstraintForeignKeyColumnReference> columnReferences;
    /**
     * @return Set only if the foreign key constraint is named.
     * 
     */
    private String name;
    /**
     * @return The table that holds the primary key and is referenced by this foreign key.
     * 
     */
    private List<GetTableTableConstraintForeignKeyReferencedTable> referencedTables;

    private GetTableTableConstraintForeignKey() {}
    /**
     * @return The pair of the foreign key column and primary key column.
     * 
     */
    public List<GetTableTableConstraintForeignKeyColumnReference> columnReferences() {
        return this.columnReferences;
    }
    /**
     * @return Set only if the foreign key constraint is named.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The table that holds the primary key and is referenced by this foreign key.
     * 
     */
    public List<GetTableTableConstraintForeignKeyReferencedTable> referencedTables() {
        return this.referencedTables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableTableConstraintForeignKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetTableTableConstraintForeignKeyColumnReference> columnReferences;
        private String name;
        private List<GetTableTableConstraintForeignKeyReferencedTable> referencedTables;
        public Builder() {}
        public Builder(GetTableTableConstraintForeignKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnReferences = defaults.columnReferences;
    	      this.name = defaults.name;
    	      this.referencedTables = defaults.referencedTables;
        }

        @CustomType.Setter
        public Builder columnReferences(List<GetTableTableConstraintForeignKeyColumnReference> columnReferences) {
            if (columnReferences == null) {
              throw new MissingRequiredPropertyException("GetTableTableConstraintForeignKey", "columnReferences");
            }
            this.columnReferences = columnReferences;
            return this;
        }
        public Builder columnReferences(GetTableTableConstraintForeignKeyColumnReference... columnReferences) {
            return columnReferences(List.of(columnReferences));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTableTableConstraintForeignKey", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder referencedTables(List<GetTableTableConstraintForeignKeyReferencedTable> referencedTables) {
            if (referencedTables == null) {
              throw new MissingRequiredPropertyException("GetTableTableConstraintForeignKey", "referencedTables");
            }
            this.referencedTables = referencedTables;
            return this;
        }
        public Builder referencedTables(GetTableTableConstraintForeignKeyReferencedTable... referencedTables) {
            return referencedTables(List.of(referencedTables));
        }
        public GetTableTableConstraintForeignKey build() {
            final var _resultValue = new GetTableTableConstraintForeignKey();
            _resultValue.columnReferences = columnReferences;
            _resultValue.name = name;
            _resultValue.referencedTables = referencedTables;
            return _resultValue;
        }
    }
}
