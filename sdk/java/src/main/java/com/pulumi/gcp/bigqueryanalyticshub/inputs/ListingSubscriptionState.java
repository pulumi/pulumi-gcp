// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigqueryanalyticshub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.ListingSubscriptionCommercialInfoArgs;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.ListingSubscriptionDestinationDatasetArgs;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.ListingSubscriptionLinkedDatasetMapArgs;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.ListingSubscriptionLinkedResourceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListingSubscriptionState extends com.pulumi.resources.ResourceArgs {

    public static final ListingSubscriptionState Empty = new ListingSubscriptionState();

    /**
     * Commercial info metadata for this subscription. This is set if this is a commercial subscription i.e. if this subscription was created from subscribing to a commercial listing.
     * Structure is documented below.
     * 
     */
    @Import(name="commercialInfos")
    private @Nullable Output<List<ListingSubscriptionCommercialInfoArgs>> commercialInfos;

    /**
     * @return Commercial info metadata for this subscription. This is set if this is a commercial subscription i.e. if this subscription was created from subscribing to a commercial listing.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ListingSubscriptionCommercialInfoArgs>>> commercialInfos() {
        return Optional.ofNullable(this.commercialInfos);
    }

    /**
     * Timestamp when the subscription was created.
     * 
     */
    @Import(name="creationTime")
    private @Nullable Output<String> creationTime;

    /**
     * @return Timestamp when the subscription was created.
     * 
     */
    public Optional<Output<String>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    /**
     * The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    @Import(name="dataExchangeId")
    private @Nullable Output<String> dataExchangeId;

    /**
     * @return The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    public Optional<Output<String>> dataExchangeId() {
        return Optional.ofNullable(this.dataExchangeId);
    }

    /**
     * The destination dataset for this subscription.
     * Structure is documented below.
     * 
     */
    @Import(name="destinationDataset")
    private @Nullable Output<ListingSubscriptionDestinationDatasetArgs> destinationDataset;

    /**
     * @return The destination dataset for this subscription.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ListingSubscriptionDestinationDatasetArgs>> destinationDataset() {
        return Optional.ofNullable(this.destinationDataset);
    }

    /**
     * Timestamp when the subscription was last modified.
     * 
     */
    @Import(name="lastModifyTime")
    private @Nullable Output<String> lastModifyTime;

    /**
     * @return Timestamp when the subscription was last modified.
     * 
     */
    public Optional<Output<String>> lastModifyTime() {
        return Optional.ofNullable(this.lastModifyTime);
    }

    /**
     * Output only. Map of listing resource names to associated linked resource,
     * e.g. projects/123/locations/US/dataExchanges/456/listings/789 &gt; projects/123/datasets/my_dataset
     * Structure is documented below.
     * 
     */
    @Import(name="linkedDatasetMaps")
    private @Nullable Output<List<ListingSubscriptionLinkedDatasetMapArgs>> linkedDatasetMaps;

    /**
     * @return Output only. Map of listing resource names to associated linked resource,
     * e.g. projects/123/locations/US/dataExchanges/456/listings/789 &gt; projects/123/datasets/my_dataset
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ListingSubscriptionLinkedDatasetMapArgs>>> linkedDatasetMaps() {
        return Optional.ofNullable(this.linkedDatasetMaps);
    }

    /**
     * Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
     * Structure is documented below.
     * 
     */
    @Import(name="linkedResources")
    private @Nullable Output<List<ListingSubscriptionLinkedResourceArgs>> linkedResources;

    /**
     * @return Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ListingSubscriptionLinkedResourceArgs>>> linkedResources() {
        return Optional.ofNullable(this.linkedResources);
    }

    /**
     * The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    @Import(name="listingId")
    private @Nullable Output<String> listingId;

    /**
     * @return The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    public Optional<Output<String>> listingId() {
        return Optional.ofNullable(this.listingId);
    }

    /**
     * The name of the location of the data exchange. Distinct from the location of the destination data set.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The name of the location of the data exchange. Distinct from the location of the destination data set.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Output only. By default, false. If true, the Subscriber agreed to the email sharing mandate that is enabled for Listing.
     * 
     */
    @Import(name="logLinkedDatasetQueryUserEmail")
    private @Nullable Output<Boolean> logLinkedDatasetQueryUserEmail;

    /**
     * @return Output only. By default, false. If true, the Subscriber agreed to the email sharing mandate that is enabled for Listing.
     * 
     */
    public Optional<Output<Boolean>> logLinkedDatasetQueryUserEmail() {
        return Optional.ofNullable(this.logLinkedDatasetQueryUserEmail);
    }

    /**
     * The resource name of the subscription. e.g. &#34;projects/myproject/locations/US/subscriptions/123&#34;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the subscription. e.g. &#34;projects/myproject/locations/US/subscriptions/123&#34;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Display name of the project of this subscription.
     * 
     */
    @Import(name="organizationDisplayName")
    private @Nullable Output<String> organizationDisplayName;

    /**
     * @return Display name of the project of this subscription.
     * 
     */
    public Optional<Output<String>> organizationDisplayName() {
        return Optional.ofNullable(this.organizationDisplayName);
    }

    /**
     * Organization of the project this subscription belongs to.
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return Organization of the project this subscription belongs to.
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Listing shared asset type.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return Listing shared asset type.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * Current state of the subscription.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Current state of the subscription.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Email of the subscriber.
     * 
     */
    @Import(name="subscriberContact")
    private @Nullable Output<String> subscriberContact;

    /**
     * @return Email of the subscriber.
     * 
     */
    public Optional<Output<String>> subscriberContact() {
        return Optional.ofNullable(this.subscriberContact);
    }

    /**
     * The subscription id used to reference the subscription.
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    /**
     * @return The subscription id used to reference the subscription.
     * 
     */
    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    private ListingSubscriptionState() {}

    private ListingSubscriptionState(ListingSubscriptionState $) {
        this.commercialInfos = $.commercialInfos;
        this.creationTime = $.creationTime;
        this.dataExchangeId = $.dataExchangeId;
        this.destinationDataset = $.destinationDataset;
        this.lastModifyTime = $.lastModifyTime;
        this.linkedDatasetMaps = $.linkedDatasetMaps;
        this.linkedResources = $.linkedResources;
        this.listingId = $.listingId;
        this.location = $.location;
        this.logLinkedDatasetQueryUserEmail = $.logLinkedDatasetQueryUserEmail;
        this.name = $.name;
        this.organizationDisplayName = $.organizationDisplayName;
        this.organizationId = $.organizationId;
        this.project = $.project;
        this.resourceType = $.resourceType;
        this.state = $.state;
        this.subscriberContact = $.subscriberContact;
        this.subscriptionId = $.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListingSubscriptionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListingSubscriptionState $;

        public Builder() {
            $ = new ListingSubscriptionState();
        }

        public Builder(ListingSubscriptionState defaults) {
            $ = new ListingSubscriptionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param commercialInfos Commercial info metadata for this subscription. This is set if this is a commercial subscription i.e. if this subscription was created from subscribing to a commercial listing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder commercialInfos(@Nullable Output<List<ListingSubscriptionCommercialInfoArgs>> commercialInfos) {
            $.commercialInfos = commercialInfos;
            return this;
        }

        /**
         * @param commercialInfos Commercial info metadata for this subscription. This is set if this is a commercial subscription i.e. if this subscription was created from subscribing to a commercial listing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder commercialInfos(List<ListingSubscriptionCommercialInfoArgs> commercialInfos) {
            return commercialInfos(Output.of(commercialInfos));
        }

        /**
         * @param commercialInfos Commercial info metadata for this subscription. This is set if this is a commercial subscription i.e. if this subscription was created from subscribing to a commercial listing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder commercialInfos(ListingSubscriptionCommercialInfoArgs... commercialInfos) {
            return commercialInfos(List.of(commercialInfos));
        }

        /**
         * @param creationTime Timestamp when the subscription was created.
         * 
         * @return builder
         * 
         */
        public Builder creationTime(@Nullable Output<String> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        /**
         * @param creationTime Timestamp when the subscription was created.
         * 
         * @return builder
         * 
         */
        public Builder creationTime(String creationTime) {
            return creationTime(Output.of(creationTime));
        }

        /**
         * @param dataExchangeId The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeId(@Nullable Output<String> dataExchangeId) {
            $.dataExchangeId = dataExchangeId;
            return this;
        }

        /**
         * @param dataExchangeId The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeId(String dataExchangeId) {
            return dataExchangeId(Output.of(dataExchangeId));
        }

        /**
         * @param destinationDataset The destination dataset for this subscription.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationDataset(@Nullable Output<ListingSubscriptionDestinationDatasetArgs> destinationDataset) {
            $.destinationDataset = destinationDataset;
            return this;
        }

        /**
         * @param destinationDataset The destination dataset for this subscription.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationDataset(ListingSubscriptionDestinationDatasetArgs destinationDataset) {
            return destinationDataset(Output.of(destinationDataset));
        }

        /**
         * @param lastModifyTime Timestamp when the subscription was last modified.
         * 
         * @return builder
         * 
         */
        public Builder lastModifyTime(@Nullable Output<String> lastModifyTime) {
            $.lastModifyTime = lastModifyTime;
            return this;
        }

        /**
         * @param lastModifyTime Timestamp when the subscription was last modified.
         * 
         * @return builder
         * 
         */
        public Builder lastModifyTime(String lastModifyTime) {
            return lastModifyTime(Output.of(lastModifyTime));
        }

        /**
         * @param linkedDatasetMaps Output only. Map of listing resource names to associated linked resource,
         * e.g. projects/123/locations/US/dataExchanges/456/listings/789 &gt; projects/123/datasets/my_dataset
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder linkedDatasetMaps(@Nullable Output<List<ListingSubscriptionLinkedDatasetMapArgs>> linkedDatasetMaps) {
            $.linkedDatasetMaps = linkedDatasetMaps;
            return this;
        }

        /**
         * @param linkedDatasetMaps Output only. Map of listing resource names to associated linked resource,
         * e.g. projects/123/locations/US/dataExchanges/456/listings/789 &gt; projects/123/datasets/my_dataset
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder linkedDatasetMaps(List<ListingSubscriptionLinkedDatasetMapArgs> linkedDatasetMaps) {
            return linkedDatasetMaps(Output.of(linkedDatasetMaps));
        }

        /**
         * @param linkedDatasetMaps Output only. Map of listing resource names to associated linked resource,
         * e.g. projects/123/locations/US/dataExchanges/456/listings/789 &gt; projects/123/datasets/my_dataset
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder linkedDatasetMaps(ListingSubscriptionLinkedDatasetMapArgs... linkedDatasetMaps) {
            return linkedDatasetMaps(List.of(linkedDatasetMaps));
        }

        /**
         * @param linkedResources Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder linkedResources(@Nullable Output<List<ListingSubscriptionLinkedResourceArgs>> linkedResources) {
            $.linkedResources = linkedResources;
            return this;
        }

        /**
         * @param linkedResources Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder linkedResources(List<ListingSubscriptionLinkedResourceArgs> linkedResources) {
            return linkedResources(Output.of(linkedResources));
        }

        /**
         * @param linkedResources Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder linkedResources(ListingSubscriptionLinkedResourceArgs... linkedResources) {
            return linkedResources(List.of(linkedResources));
        }

        /**
         * @param listingId The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder listingId(@Nullable Output<String> listingId) {
            $.listingId = listingId;
            return this;
        }

        /**
         * @param listingId The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder listingId(String listingId) {
            return listingId(Output.of(listingId));
        }

        /**
         * @param location The name of the location of the data exchange. Distinct from the location of the destination data set.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of the location of the data exchange. Distinct from the location of the destination data set.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logLinkedDatasetQueryUserEmail Output only. By default, false. If true, the Subscriber agreed to the email sharing mandate that is enabled for Listing.
         * 
         * @return builder
         * 
         */
        public Builder logLinkedDatasetQueryUserEmail(@Nullable Output<Boolean> logLinkedDatasetQueryUserEmail) {
            $.logLinkedDatasetQueryUserEmail = logLinkedDatasetQueryUserEmail;
            return this;
        }

        /**
         * @param logLinkedDatasetQueryUserEmail Output only. By default, false. If true, the Subscriber agreed to the email sharing mandate that is enabled for Listing.
         * 
         * @return builder
         * 
         */
        public Builder logLinkedDatasetQueryUserEmail(Boolean logLinkedDatasetQueryUserEmail) {
            return logLinkedDatasetQueryUserEmail(Output.of(logLinkedDatasetQueryUserEmail));
        }

        /**
         * @param name The resource name of the subscription. e.g. &#34;projects/myproject/locations/US/subscriptions/123&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the subscription. e.g. &#34;projects/myproject/locations/US/subscriptions/123&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param organizationDisplayName Display name of the project of this subscription.
         * 
         * @return builder
         * 
         */
        public Builder organizationDisplayName(@Nullable Output<String> organizationDisplayName) {
            $.organizationDisplayName = organizationDisplayName;
            return this;
        }

        /**
         * @param organizationDisplayName Display name of the project of this subscription.
         * 
         * @return builder
         * 
         */
        public Builder organizationDisplayName(String organizationDisplayName) {
            return organizationDisplayName(Output.of(organizationDisplayName));
        }

        /**
         * @param organizationId Organization of the project this subscription belongs to.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId Organization of the project this subscription belongs to.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param resourceType Listing shared asset type.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType Listing shared asset type.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param state Current state of the subscription.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Current state of the subscription.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subscriberContact Email of the subscriber.
         * 
         * @return builder
         * 
         */
        public Builder subscriberContact(@Nullable Output<String> subscriberContact) {
            $.subscriberContact = subscriberContact;
            return this;
        }

        /**
         * @param subscriberContact Email of the subscriber.
         * 
         * @return builder
         * 
         */
        public Builder subscriberContact(String subscriberContact) {
            return subscriberContact(Output.of(subscriberContact));
        }

        /**
         * @param subscriptionId The subscription id used to reference the subscription.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId The subscription id used to reference the subscription.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        public ListingSubscriptionState build() {
            return $;
        }
    }

}
