// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class TriggerBuildAvailableSecretsSecretManagerArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerBuildAvailableSecretsSecretManagerArgs Empty = new TriggerBuildAvailableSecretsSecretManagerArgs();

    /**
     * Environment variable name to associate with the secret. Secret environment
     * variables must be unique across all of a build&#39;s secrets, and must be used
     * by at least one build step.
     * 
     */
    @Import(name="env", required=true)
    private Output<String> env;

    /**
     * @return Environment variable name to associate with the secret. Secret environment
     * variables must be unique across all of a build&#39;s secrets, and must be used
     * by at least one build step.
     * 
     */
    public Output<String> env() {
        return this.env;
    }

    /**
     * Resource name of the SecretVersion. In format: projects/*&#47;secrets/*&#47;versions/*
     * 
     */
    @Import(name="versionName", required=true)
    private Output<String> versionName;

    /**
     * @return Resource name of the SecretVersion. In format: projects/*&#47;secrets/*&#47;versions/*
     * 
     */
    public Output<String> versionName() {
        return this.versionName;
    }

    private TriggerBuildAvailableSecretsSecretManagerArgs() {}

    private TriggerBuildAvailableSecretsSecretManagerArgs(TriggerBuildAvailableSecretsSecretManagerArgs $) {
        this.env = $.env;
        this.versionName = $.versionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerBuildAvailableSecretsSecretManagerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerBuildAvailableSecretsSecretManagerArgs $;

        public Builder() {
            $ = new TriggerBuildAvailableSecretsSecretManagerArgs();
        }

        public Builder(TriggerBuildAvailableSecretsSecretManagerArgs defaults) {
            $ = new TriggerBuildAvailableSecretsSecretManagerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param env Environment variable name to associate with the secret. Secret environment
         * variables must be unique across all of a build&#39;s secrets, and must be used
         * by at least one build step.
         * 
         * @return builder
         * 
         */
        public Builder env(Output<String> env) {
            $.env = env;
            return this;
        }

        /**
         * @param env Environment variable name to associate with the secret. Secret environment
         * variables must be unique across all of a build&#39;s secrets, and must be used
         * by at least one build step.
         * 
         * @return builder
         * 
         */
        public Builder env(String env) {
            return env(Output.of(env));
        }

        /**
         * @param versionName Resource name of the SecretVersion. In format: projects/*&#47;secrets/*&#47;versions/*
         * 
         * @return builder
         * 
         */
        public Builder versionName(Output<String> versionName) {
            $.versionName = versionName;
            return this;
        }

        /**
         * @param versionName Resource name of the SecretVersion. In format: projects/*&#47;secrets/*&#47;versions/*
         * 
         * @return builder
         * 
         */
        public Builder versionName(String versionName) {
            return versionName(Output.of(versionName));
        }

        public TriggerBuildAvailableSecretsSecretManagerArgs build() {
            if ($.env == null) {
                throw new MissingRequiredPropertyException("TriggerBuildAvailableSecretsSecretManagerArgs", "env");
            }
            if ($.versionName == null) {
                throw new MissingRequiredPropertyException("TriggerBuildAvailableSecretsSecretManagerArgs", "versionName");
            }
            return $;
        }
    }

}
