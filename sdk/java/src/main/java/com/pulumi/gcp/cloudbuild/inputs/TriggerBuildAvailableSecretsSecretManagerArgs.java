// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class TriggerBuildAvailableSecretsSecretManagerArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerBuildAvailableSecretsSecretManagerArgs Empty = new TriggerBuildAvailableSecretsSecretManagerArgs();

    /**
     * A list of global environment variable definitions that will exist for all build steps
     * in this build. If a variable is defined in both globally and in a build step,
     * the variable will use the build step value.
     * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
     * 
     */
    @Import(name="env", required=true)
    private Output<String> env;

    /**
     * @return A list of global environment variable definitions that will exist for all build steps
     * in this build. If a variable is defined in both globally and in a build step,
     * the variable will use the build step value.
     * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
     * 
     */
    public Output<String> env() {
        return this.env;
    }

    /**
     * Resource name of the SecretVersion. In format: projects/*{@literal /}secrets/*{@literal /}versions/*
     * 
     */
    @Import(name="versionName", required=true)
    private Output<String> versionName;

    /**
     * @return Resource name of the SecretVersion. In format: projects/*{@literal /}secrets/*{@literal /}versions/*
     * 
     */
    public Output<String> versionName() {
        return this.versionName;
    }

    private TriggerBuildAvailableSecretsSecretManagerArgs() {}

    private TriggerBuildAvailableSecretsSecretManagerArgs(TriggerBuildAvailableSecretsSecretManagerArgs $) {
        this.env = $.env;
        this.versionName = $.versionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerBuildAvailableSecretsSecretManagerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerBuildAvailableSecretsSecretManagerArgs $;

        public Builder() {
            $ = new TriggerBuildAvailableSecretsSecretManagerArgs();
        }

        public Builder(TriggerBuildAvailableSecretsSecretManagerArgs defaults) {
            $ = new TriggerBuildAvailableSecretsSecretManagerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param env A list of global environment variable definitions that will exist for all build steps
         * in this build. If a variable is defined in both globally and in a build step,
         * the variable will use the build step value.
         * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder env(Output<String> env) {
            $.env = env;
            return this;
        }

        /**
         * @param env A list of global environment variable definitions that will exist for all build steps
         * in this build. If a variable is defined in both globally and in a build step,
         * the variable will use the build step value.
         * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder env(String env) {
            return env(Output.of(env));
        }

        /**
         * @param versionName Resource name of the SecretVersion. In format: projects/*{@literal /}secrets/*{@literal /}versions/*
         * 
         * @return builder
         * 
         */
        public Builder versionName(Output<String> versionName) {
            $.versionName = versionName;
            return this;
        }

        /**
         * @param versionName Resource name of the SecretVersion. In format: projects/*{@literal /}secrets/*{@literal /}versions/*
         * 
         * @return builder
         * 
         */
        public Builder versionName(String versionName) {
            return versionName(Output.of(versionName));
        }

        public TriggerBuildAvailableSecretsSecretManagerArgs build() {
            $.env = Objects.requireNonNull($.env, "expected parameter 'env' to be non-null");
            $.versionName = Objects.requireNonNull($.versionName, "expected parameter 'versionName' to be non-null");
            return $;
        }
    }

}
