// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.applicationintegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthConfigDecryptedCredentialJwtArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthConfigDecryptedCredentialJwtArgs Empty = new AuthConfigDecryptedCredentialJwtArgs();

    /**
     * (Output)
     * The token calculated by the header, payload and signature.
     * 
     */
    @Import(name="jwt")
    private @Nullable Output<String> jwt;

    /**
     * @return (Output)
     * The token calculated by the header, payload and signature.
     * 
     */
    public Optional<Output<String>> jwt() {
        return Optional.ofNullable(this.jwt);
    }

    /**
     * Identifies which algorithm is used to generate the signature.
     * 
     */
    @Import(name="jwtHeader")
    private @Nullable Output<String> jwtHeader;

    /**
     * @return Identifies which algorithm is used to generate the signature.
     * 
     */
    public Optional<Output<String>> jwtHeader() {
        return Optional.ofNullable(this.jwtHeader);
    }

    /**
     * Contains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens. Custom claims are usually also included, depending on the purpose of the token.
     * 
     */
    @Import(name="jwtPayload")
    private @Nullable Output<String> jwtPayload;

    /**
     * @return Contains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens. Custom claims are usually also included, depending on the purpose of the token.
     * 
     */
    public Optional<Output<String>> jwtPayload() {
        return Optional.ofNullable(this.jwtPayload);
    }

    /**
     * User&#39;s pre-shared secret to sign the token.
     * 
     */
    @Import(name="secret")
    private @Nullable Output<String> secret;

    /**
     * @return User&#39;s pre-shared secret to sign the token.
     * 
     */
    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    private AuthConfigDecryptedCredentialJwtArgs() {}

    private AuthConfigDecryptedCredentialJwtArgs(AuthConfigDecryptedCredentialJwtArgs $) {
        this.jwt = $.jwt;
        this.jwtHeader = $.jwtHeader;
        this.jwtPayload = $.jwtPayload;
        this.secret = $.secret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthConfigDecryptedCredentialJwtArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthConfigDecryptedCredentialJwtArgs $;

        public Builder() {
            $ = new AuthConfigDecryptedCredentialJwtArgs();
        }

        public Builder(AuthConfigDecryptedCredentialJwtArgs defaults) {
            $ = new AuthConfigDecryptedCredentialJwtArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param jwt (Output)
         * The token calculated by the header, payload and signature.
         * 
         * @return builder
         * 
         */
        public Builder jwt(@Nullable Output<String> jwt) {
            $.jwt = jwt;
            return this;
        }

        /**
         * @param jwt (Output)
         * The token calculated by the header, payload and signature.
         * 
         * @return builder
         * 
         */
        public Builder jwt(String jwt) {
            return jwt(Output.of(jwt));
        }

        /**
         * @param jwtHeader Identifies which algorithm is used to generate the signature.
         * 
         * @return builder
         * 
         */
        public Builder jwtHeader(@Nullable Output<String> jwtHeader) {
            $.jwtHeader = jwtHeader;
            return this;
        }

        /**
         * @param jwtHeader Identifies which algorithm is used to generate the signature.
         * 
         * @return builder
         * 
         */
        public Builder jwtHeader(String jwtHeader) {
            return jwtHeader(Output.of(jwtHeader));
        }

        /**
         * @param jwtPayload Contains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens. Custom claims are usually also included, depending on the purpose of the token.
         * 
         * @return builder
         * 
         */
        public Builder jwtPayload(@Nullable Output<String> jwtPayload) {
            $.jwtPayload = jwtPayload;
            return this;
        }

        /**
         * @param jwtPayload Contains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens. Custom claims are usually also included, depending on the purpose of the token.
         * 
         * @return builder
         * 
         */
        public Builder jwtPayload(String jwtPayload) {
            return jwtPayload(Output.of(jwtPayload));
        }

        /**
         * @param secret User&#39;s pre-shared secret to sign the token.
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret User&#39;s pre-shared secret to sign the token.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        public AuthConfigDecryptedCredentialJwtArgs build() {
            return $;
        }
    }

}
