// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.GlobalForwardingRuleMetadataFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlobalForwardingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalForwardingRuleArgs Empty = new GlobalForwardingRuleArgs();

    /**
     * This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
     * 
     */
    @Import(name="allowPscGlobalAccess")
    private @Nullable Output<Boolean> allowPscGlobalAccess;

    /**
     * @return This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
     * 
     */
    public Optional<Output<Boolean>> allowPscGlobalAccess() {
        return Optional.ofNullable(this.allowPscGlobalAccess);
    }

    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * IP address for which this forwarding rule accepts traffic. When a client
     * sends traffic to this IP address, the forwarding rule directs the traffic
     * to the referenced `target`.
     * While creating a forwarding rule, specifying an `IPAddress` is
     * required under the following circumstances:
     * * When the `target` is set to `targetGrpcProxy` and
     *   `validateForProxyless` is set to `true`, the
     *   `IPAddress` should be set to `0.0.0.0`.
     * * When the `target` is a Private Service Connect Google APIs
     *   bundle, you must specify an `IPAddress`.
     * 
     * Otherwise, you can optionally specify an IP address that references an
     * existing static (reserved) IP address resource. When omitted, Google Cloud
     * assigns an ephemeral IP address.
     * Use one of the following formats to specify an IP address while creating a
     * forwarding rule:
     * * IP address number, as in `100.1.2.3`
     * * IPv6 address range, as in `2600:1234::/96`
     * * Full resource URL, as in
     *   `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
     * * Partial URL or by name, as in:
     * * `projects/project_id/regions/region/addresses/address-name`
     * * `regions/region/addresses/address-name`
     * * `global/addresses/address-name`
     * * `address-name`
     * 
     * The forwarding rule&#39;s `target`,
     * and in most cases, also the `loadBalancingScheme`, determine the
     * type of IP address that you can use. For detailed information, see
     * [IP address
     * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * When reading an `IPAddress`, the API always returns the IP
     * address number.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return IP address for which this forwarding rule accepts traffic. When a client
     * sends traffic to this IP address, the forwarding rule directs the traffic
     * to the referenced `target`.
     * While creating a forwarding rule, specifying an `IPAddress` is
     * required under the following circumstances:
     * * When the `target` is set to `targetGrpcProxy` and
     *   `validateForProxyless` is set to `true`, the
     *   `IPAddress` should be set to `0.0.0.0`.
     * * When the `target` is a Private Service Connect Google APIs
     *   bundle, you must specify an `IPAddress`.
     * 
     * Otherwise, you can optionally specify an IP address that references an
     * existing static (reserved) IP address resource. When omitted, Google Cloud
     * assigns an ephemeral IP address.
     * Use one of the following formats to specify an IP address while creating a
     * forwarding rule:
     * * IP address number, as in `100.1.2.3`
     * * IPv6 address range, as in `2600:1234::/96`
     * * Full resource URL, as in
     *   `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
     * * Partial URL or by name, as in:
     * * `projects/project_id/regions/region/addresses/address-name`
     * * `regions/region/addresses/address-name`
     * * `global/addresses/address-name`
     * * `address-name`
     * 
     * The forwarding rule&#39;s `target`,
     * and in most cases, also the `loadBalancingScheme`, determine the
     * type of IP address that you can use. For detailed information, see
     * [IP address
     * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * When reading an `IPAddress`, the API always returns the IP
     * address number.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The IP protocol to which this rule applies.
     * For protocol forwarding, valid
     * options are `TCP`, `UDP`, `ESP`,
     * `AH`, `SCTP`, `ICMP` and
     * `L3_DEFAULT`.
     * The valid IP protocols are different for different load balancing products
     * as described in [Load balancing
     * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
     * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`.
     * 
     */
    @Import(name="ipProtocol")
    private @Nullable Output<String> ipProtocol;

    /**
     * @return The IP protocol to which this rule applies.
     * For protocol forwarding, valid
     * options are `TCP`, `UDP`, `ESP`,
     * `AH`, `SCTP`, `ICMP` and
     * `L3_DEFAULT`.
     * The valid IP protocols are different for different load balancing products
     * as described in [Load balancing
     * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
     * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`.
     * 
     */
    public Optional<Output<String>> ipProtocol() {
        return Optional.ofNullable(this.ipProtocol);
    }

    /**
     * The IP Version that will be used by this global forwarding rule.
     * Possible values are: `IPV4`, `IPV6`.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<String> ipVersion;

    /**
     * @return The IP Version that will be used by this global forwarding rule.
     * Possible values are: `IPV4`, `IPV6`.
     * 
     */
    public Optional<Output<String>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Specifies the forwarding rule type.
     * For more information about forwarding rules, refer to
     * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
     * Default value is `EXTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
     * 
     */
    @Import(name="loadBalancingScheme")
    private @Nullable Output<String> loadBalancingScheme;

    /**
     * @return Specifies the forwarding rule type.
     * For more information about forwarding rules, refer to
     * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
     * Default value is `EXTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
     * 
     */
    public Optional<Output<String>> loadBalancingScheme() {
        return Optional.ofNullable(this.loadBalancingScheme);
    }

    /**
     * Opaque filter criteria used by Loadbalancer to restrict routing
     * configuration to a limited set xDS compliant clients. In their xDS
     * requests to Loadbalancer, xDS clients present node metadata. If a
     * match takes place, the relevant routing configuration is made available
     * to those proxies.
     * For each metadataFilter in this list, if its filterMatchCriteria is set
     * to MATCH_ANY, at least one of the filterLabels must match the
     * corresponding label provided in the metadata. If its filterMatchCriteria
     * is set to MATCH_ALL, then all of its filterLabels must match with
     * corresponding labels in the provided metadata.
     * metadataFilters specified here can be overridden by those specified in
     * the UrlMap that this ForwardingRule references.
     * metadataFilters only applies to Loadbalancers that have their
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @Import(name="metadataFilters")
    private @Nullable Output<List<GlobalForwardingRuleMetadataFilterArgs>> metadataFilters;

    /**
     * @return Opaque filter criteria used by Loadbalancer to restrict routing
     * configuration to a limited set xDS compliant clients. In their xDS
     * requests to Loadbalancer, xDS clients present node metadata. If a
     * match takes place, the relevant routing configuration is made available
     * to those proxies.
     * For each metadataFilter in this list, if its filterMatchCriteria is set
     * to MATCH_ANY, at least one of the filterLabels must match the
     * corresponding label provided in the metadata. If its filterMatchCriteria
     * is set to MATCH_ALL, then all of its filterLabels must match with
     * corresponding labels in the provided metadata.
     * metadataFilters specified here can be overridden by those specified in
     * the UrlMap that this ForwardingRule references.
     * metadataFilters only applies to Loadbalancers that have their
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<GlobalForwardingRuleMetadataFilterArgs>>> metadataFilters() {
        return Optional.ofNullable(this.metadataFilters);
    }

    /**
     * Name of the resource; provided by the client when the resource is created.
     * The name must be 1-63 characters long, and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
     * Specifically, the name must be 1-63 characters long and match the regular
     * expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit, except the last character, which
     * cannot be a dash.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, the forwarding rule name must be a 1-20 characters string with
     * lowercase letters and numbers and must start with a letter.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource; provided by the client when the resource is created.
     * The name must be 1-63 characters long, and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
     * Specifically, the name must be 1-63 characters long and match the regular
     * expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit, except the last character, which
     * cannot be a dash.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, the forwarding rule name must be a 1-20 characters string with
     * lowercase letters and numbers and must start with a letter.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * This field is not used for external load balancing.
     * For Internal TCP/UDP Load Balancing, this field identifies the network that
     * the load balanced IP should belong to for this Forwarding Rule.
     * If the subnetwork is specified, the network of the subnetwork will be used.
     * If neither subnetwork nor this field is specified, the default network will
     * be used.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, a network must be provided.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return This field is not used for external load balancing.
     * For Internal TCP/UDP Load Balancing, this field identifies the network that
     * the load balanced IP should belong to for this Forwarding Rule.
     * If the subnetwork is specified, the network of the subnetwork will be used.
     * If neither subnetwork nor this field is specified, the default network will
     * be used.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, a network must be provided.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
     * 
     */
    @Import(name="noAutomateDnsZone")
    private @Nullable Output<Boolean> noAutomateDnsZone;

    /**
     * @return This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
     * 
     */
    public Optional<Output<Boolean>> noAutomateDnsZone() {
        return Optional.ofNullable(this.noAutomateDnsZone);
    }

    /**
     * This field can only be used:
     * * If `IPProtocol` is one of TCP, UDP, or SCTP.
     * * By backend service-based network load balancers, target pool-based
     * network load balancers, internal proxy load balancers, external proxy load
     * balancers, Traffic Director, external protocol forwarding, and Classic VPN.
     * Some products have restrictions on what ports can be used. See
     * [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
     * for details.
     * 
     * * TargetHttpProxy: 80, 8080
     * * TargetHttpsProxy: 443
     * * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     * 1883, 5222
     * * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     * 1883, 5222
     * * TargetVpnGateway: 500, 4500
     * 
     */
    @Import(name="portRange")
    private @Nullable Output<String> portRange;

    /**
     * @return This field can only be used:
     * * If `IPProtocol` is one of TCP, UDP, or SCTP.
     * * By backend service-based network load balancers, target pool-based
     * network load balancers, internal proxy load balancers, external proxy load
     * balancers, Traffic Director, external protocol forwarding, and Classic VPN.
     * Some products have restrictions on what ports can be used. See
     * [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
     * for details.
     * 
     * * TargetHttpProxy: 80, 8080
     * * TargetHttpsProxy: 443
     * * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     * 1883, 5222
     * * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     * 1883, 5222
     * * TargetVpnGateway: 500, 4500
     * 
     */
    public Optional<Output<String>> portRange() {
        return Optional.ofNullable(this.portRange);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
     * 
     */
    @Import(name="sourceIpRanges")
    private @Nullable Output<List<String>> sourceIpRanges;

    /**
     * @return If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
     * 
     */
    public Optional<Output<List<String>>> sourceIpRanges() {
        return Optional.ofNullable(this.sourceIpRanges);
    }

    /**
     * This field identifies the subnetwork that the load balanced IP should
     * belong to for this Forwarding Rule, used in internal load balancing and
     * network load balancing with IPv6.
     * If the network specified is in auto subnet mode, this field is optional.
     * However, a subnetwork must be specified if the network is in custom subnet
     * mode or when creating external forwarding rule with IPv6.
     * 
     */
    @Import(name="subnetwork")
    private @Nullable Output<String> subnetwork;

    /**
     * @return This field identifies the subnetwork that the load balanced IP should
     * belong to for this Forwarding Rule, used in internal load balancing and
     * network load balancing with IPv6.
     * If the network specified is in auto subnet mode, this field is optional.
     * However, a subnetwork must be specified if the network is in custom subnet
     * mode or when creating external forwarding rule with IPv6.
     * 
     */
    public Optional<Output<String>> subnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }

    /**
     * The URL of the target resource to receive the matched traffic.  For
     * regional forwarding rules, this target must be in the same region as the
     * forwarding rule. For global forwarding rules, this target must be a global
     * load balancing resource.
     * The forwarded traffic must be of a type appropriate to the target object.
     * *  For load balancers, see the &#34;Target&#34; column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
     * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
     * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
     * 
     * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
     * 
     * ***
     * 
     */
    @Import(name="target", required=true)
    private Output<String> target;

    /**
     * @return The URL of the target resource to receive the matched traffic.  For
     * regional forwarding rules, this target must be in the same region as the
     * forwarding rule. For global forwarding rules, this target must be a global
     * load balancing resource.
     * The forwarded traffic must be of a type appropriate to the target object.
     * *  For load balancers, see the &#34;Target&#34; column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
     * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
     * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
     * 
     * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
     * 
     * ***
     * 
     */
    public Output<String> target() {
        return this.target;
    }

    private GlobalForwardingRuleArgs() {}

    private GlobalForwardingRuleArgs(GlobalForwardingRuleArgs $) {
        this.allowPscGlobalAccess = $.allowPscGlobalAccess;
        this.description = $.description;
        this.ipAddress = $.ipAddress;
        this.ipProtocol = $.ipProtocol;
        this.ipVersion = $.ipVersion;
        this.labels = $.labels;
        this.loadBalancingScheme = $.loadBalancingScheme;
        this.metadataFilters = $.metadataFilters;
        this.name = $.name;
        this.network = $.network;
        this.noAutomateDnsZone = $.noAutomateDnsZone;
        this.portRange = $.portRange;
        this.project = $.project;
        this.sourceIpRanges = $.sourceIpRanges;
        this.subnetwork = $.subnetwork;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalForwardingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalForwardingRuleArgs $;

        public Builder() {
            $ = new GlobalForwardingRuleArgs();
        }

        public Builder(GlobalForwardingRuleArgs defaults) {
            $ = new GlobalForwardingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowPscGlobalAccess This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
         * 
         * @return builder
         * 
         */
        public Builder allowPscGlobalAccess(@Nullable Output<Boolean> allowPscGlobalAccess) {
            $.allowPscGlobalAccess = allowPscGlobalAccess;
            return this;
        }

        /**
         * @param allowPscGlobalAccess This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
         * 
         * @return builder
         * 
         */
        public Builder allowPscGlobalAccess(Boolean allowPscGlobalAccess) {
            return allowPscGlobalAccess(Output.of(allowPscGlobalAccess));
        }

        /**
         * @param description An optional description of this resource. Provide this property when
         * you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource. Provide this property when
         * you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipAddress IP address for which this forwarding rule accepts traffic. When a client
         * sends traffic to this IP address, the forwarding rule directs the traffic
         * to the referenced `target`.
         * While creating a forwarding rule, specifying an `IPAddress` is
         * required under the following circumstances:
         * * When the `target` is set to `targetGrpcProxy` and
         *   `validateForProxyless` is set to `true`, the
         *   `IPAddress` should be set to `0.0.0.0`.
         * * When the `target` is a Private Service Connect Google APIs
         *   bundle, you must specify an `IPAddress`.
         * 
         * Otherwise, you can optionally specify an IP address that references an
         * existing static (reserved) IP address resource. When omitted, Google Cloud
         * assigns an ephemeral IP address.
         * Use one of the following formats to specify an IP address while creating a
         * forwarding rule:
         * * IP address number, as in `100.1.2.3`
         * * IPv6 address range, as in `2600:1234::/96`
         * * Full resource URL, as in
         *   `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
         * * Partial URL or by name, as in:
         * * `projects/project_id/regions/region/addresses/address-name`
         * * `regions/region/addresses/address-name`
         * * `global/addresses/address-name`
         * * `address-name`
         * 
         * The forwarding rule&#39;s `target`,
         * and in most cases, also the `loadBalancingScheme`, determine the
         * type of IP address that you can use. For detailed information, see
         * [IP address
         * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
         * When reading an `IPAddress`, the API always returns the IP
         * address number.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress IP address for which this forwarding rule accepts traffic. When a client
         * sends traffic to this IP address, the forwarding rule directs the traffic
         * to the referenced `target`.
         * While creating a forwarding rule, specifying an `IPAddress` is
         * required under the following circumstances:
         * * When the `target` is set to `targetGrpcProxy` and
         *   `validateForProxyless` is set to `true`, the
         *   `IPAddress` should be set to `0.0.0.0`.
         * * When the `target` is a Private Service Connect Google APIs
         *   bundle, you must specify an `IPAddress`.
         * 
         * Otherwise, you can optionally specify an IP address that references an
         * existing static (reserved) IP address resource. When omitted, Google Cloud
         * assigns an ephemeral IP address.
         * Use one of the following formats to specify an IP address while creating a
         * forwarding rule:
         * * IP address number, as in `100.1.2.3`
         * * IPv6 address range, as in `2600:1234::/96`
         * * Full resource URL, as in
         *   `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
         * * Partial URL or by name, as in:
         * * `projects/project_id/regions/region/addresses/address-name`
         * * `regions/region/addresses/address-name`
         * * `global/addresses/address-name`
         * * `address-name`
         * 
         * The forwarding rule&#39;s `target`,
         * and in most cases, also the `loadBalancingScheme`, determine the
         * type of IP address that you can use. For detailed information, see
         * [IP address
         * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
         * When reading an `IPAddress`, the API always returns the IP
         * address number.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param ipProtocol The IP protocol to which this rule applies.
         * For protocol forwarding, valid
         * options are `TCP`, `UDP`, `ESP`,
         * `AH`, `SCTP`, `ICMP` and
         * `L3_DEFAULT`.
         * The valid IP protocols are different for different load balancing products
         * as described in [Load balancing
         * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
         * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(@Nullable Output<String> ipProtocol) {
            $.ipProtocol = ipProtocol;
            return this;
        }

        /**
         * @param ipProtocol The IP protocol to which this rule applies.
         * For protocol forwarding, valid
         * options are `TCP`, `UDP`, `ESP`,
         * `AH`, `SCTP`, `ICMP` and
         * `L3_DEFAULT`.
         * The valid IP protocols are different for different load balancing products
         * as described in [Load balancing
         * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
         * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(String ipProtocol) {
            return ipProtocol(Output.of(ipProtocol));
        }

        /**
         * @param ipVersion The IP Version that will be used by this global forwarding rule.
         * Possible values are: `IPV4`, `IPV6`.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<String> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP Version that will be used by this global forwarding rule.
         * Possible values are: `IPV4`, `IPV6`.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(String ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param labels Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param loadBalancingScheme Specifies the forwarding rule type.
         * For more information about forwarding rules, refer to
         * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
         * Default value is `EXTERNAL`.
         * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingScheme(@Nullable Output<String> loadBalancingScheme) {
            $.loadBalancingScheme = loadBalancingScheme;
            return this;
        }

        /**
         * @param loadBalancingScheme Specifies the forwarding rule type.
         * For more information about forwarding rules, refer to
         * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
         * Default value is `EXTERNAL`.
         * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingScheme(String loadBalancingScheme) {
            return loadBalancingScheme(Output.of(loadBalancingScheme));
        }

        /**
         * @param metadataFilters Opaque filter criteria used by Loadbalancer to restrict routing
         * configuration to a limited set xDS compliant clients. In their xDS
         * requests to Loadbalancer, xDS clients present node metadata. If a
         * match takes place, the relevant routing configuration is made available
         * to those proxies.
         * For each metadataFilter in this list, if its filterMatchCriteria is set
         * to MATCH_ANY, at least one of the filterLabels must match the
         * corresponding label provided in the metadata. If its filterMatchCriteria
         * is set to MATCH_ALL, then all of its filterLabels must match with
         * corresponding labels in the provided metadata.
         * metadataFilters specified here can be overridden by those specified in
         * the UrlMap that this ForwardingRule references.
         * metadataFilters only applies to Loadbalancers that have their
         * loadBalancingScheme set to INTERNAL_SELF_MANAGED.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder metadataFilters(@Nullable Output<List<GlobalForwardingRuleMetadataFilterArgs>> metadataFilters) {
            $.metadataFilters = metadataFilters;
            return this;
        }

        /**
         * @param metadataFilters Opaque filter criteria used by Loadbalancer to restrict routing
         * configuration to a limited set xDS compliant clients. In their xDS
         * requests to Loadbalancer, xDS clients present node metadata. If a
         * match takes place, the relevant routing configuration is made available
         * to those proxies.
         * For each metadataFilter in this list, if its filterMatchCriteria is set
         * to MATCH_ANY, at least one of the filterLabels must match the
         * corresponding label provided in the metadata. If its filterMatchCriteria
         * is set to MATCH_ALL, then all of its filterLabels must match with
         * corresponding labels in the provided metadata.
         * metadataFilters specified here can be overridden by those specified in
         * the UrlMap that this ForwardingRule references.
         * metadataFilters only applies to Loadbalancers that have their
         * loadBalancingScheme set to INTERNAL_SELF_MANAGED.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder metadataFilters(List<GlobalForwardingRuleMetadataFilterArgs> metadataFilters) {
            return metadataFilters(Output.of(metadataFilters));
        }

        /**
         * @param metadataFilters Opaque filter criteria used by Loadbalancer to restrict routing
         * configuration to a limited set xDS compliant clients. In their xDS
         * requests to Loadbalancer, xDS clients present node metadata. If a
         * match takes place, the relevant routing configuration is made available
         * to those proxies.
         * For each metadataFilter in this list, if its filterMatchCriteria is set
         * to MATCH_ANY, at least one of the filterLabels must match the
         * corresponding label provided in the metadata. If its filterMatchCriteria
         * is set to MATCH_ALL, then all of its filterLabels must match with
         * corresponding labels in the provided metadata.
         * metadataFilters specified here can be overridden by those specified in
         * the UrlMap that this ForwardingRule references.
         * metadataFilters only applies to Loadbalancers that have their
         * loadBalancingScheme set to INTERNAL_SELF_MANAGED.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder metadataFilters(GlobalForwardingRuleMetadataFilterArgs... metadataFilters) {
            return metadataFilters(List.of(metadataFilters));
        }

        /**
         * @param name Name of the resource; provided by the client when the resource is created.
         * The name must be 1-63 characters long, and comply with
         * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
         * Specifically, the name must be 1-63 characters long and match the regular
         * expression `a-z?` which means the first
         * character must be a lowercase letter, and all following characters must
         * be a dash, lowercase letter, or digit, except the last character, which
         * cannot be a dash.
         * For Private Service Connect forwarding rules that forward traffic to Google
         * APIs, the forwarding rule name must be a 1-20 characters string with
         * lowercase letters and numbers and must start with a letter.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource; provided by the client when the resource is created.
         * The name must be 1-63 characters long, and comply with
         * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
         * Specifically, the name must be 1-63 characters long and match the regular
         * expression `a-z?` which means the first
         * character must be a lowercase letter, and all following characters must
         * be a dash, lowercase letter, or digit, except the last character, which
         * cannot be a dash.
         * For Private Service Connect forwarding rules that forward traffic to Google
         * APIs, the forwarding rule name must be a 1-20 characters string with
         * lowercase letters and numbers and must start with a letter.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network This field is not used for external load balancing.
         * For Internal TCP/UDP Load Balancing, this field identifies the network that
         * the load balanced IP should belong to for this Forwarding Rule.
         * If the subnetwork is specified, the network of the subnetwork will be used.
         * If neither subnetwork nor this field is specified, the default network will
         * be used.
         * For Private Service Connect forwarding rules that forward traffic to Google
         * APIs, a network must be provided.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network This field is not used for external load balancing.
         * For Internal TCP/UDP Load Balancing, this field identifies the network that
         * the load balanced IP should belong to for this Forwarding Rule.
         * If the subnetwork is specified, the network of the subnetwork will be used.
         * If neither subnetwork nor this field is specified, the default network will
         * be used.
         * For Private Service Connect forwarding rules that forward traffic to Google
         * APIs, a network must be provided.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param noAutomateDnsZone This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
         * 
         * @return builder
         * 
         */
        public Builder noAutomateDnsZone(@Nullable Output<Boolean> noAutomateDnsZone) {
            $.noAutomateDnsZone = noAutomateDnsZone;
            return this;
        }

        /**
         * @param noAutomateDnsZone This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
         * 
         * @return builder
         * 
         */
        public Builder noAutomateDnsZone(Boolean noAutomateDnsZone) {
            return noAutomateDnsZone(Output.of(noAutomateDnsZone));
        }

        /**
         * @param portRange This field can only be used:
         * * If `IPProtocol` is one of TCP, UDP, or SCTP.
         * * By backend service-based network load balancers, target pool-based
         * network load balancers, internal proxy load balancers, external proxy load
         * balancers, Traffic Director, external protocol forwarding, and Classic VPN.
         * Some products have restrictions on what ports can be used. See
         * [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
         * for details.
         * 
         * * TargetHttpProxy: 80, 8080
         * * TargetHttpsProxy: 443
         * * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
         * 1883, 5222
         * * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
         * 1883, 5222
         * * TargetVpnGateway: 500, 4500
         * 
         * @return builder
         * 
         */
        public Builder portRange(@Nullable Output<String> portRange) {
            $.portRange = portRange;
            return this;
        }

        /**
         * @param portRange This field can only be used:
         * * If `IPProtocol` is one of TCP, UDP, or SCTP.
         * * By backend service-based network load balancers, target pool-based
         * network load balancers, internal proxy load balancers, external proxy load
         * balancers, Traffic Director, external protocol forwarding, and Classic VPN.
         * Some products have restrictions on what ports can be used. See
         * [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
         * for details.
         * 
         * * TargetHttpProxy: 80, 8080
         * * TargetHttpsProxy: 443
         * * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
         * 1883, 5222
         * * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
         * 1883, 5222
         * * TargetVpnGateway: 500, 4500
         * 
         * @return builder
         * 
         */
        public Builder portRange(String portRange) {
            return portRange(Output.of(portRange));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param sourceIpRanges If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
         * 
         * @return builder
         * 
         */
        public Builder sourceIpRanges(@Nullable Output<List<String>> sourceIpRanges) {
            $.sourceIpRanges = sourceIpRanges;
            return this;
        }

        /**
         * @param sourceIpRanges If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
         * 
         * @return builder
         * 
         */
        public Builder sourceIpRanges(List<String> sourceIpRanges) {
            return sourceIpRanges(Output.of(sourceIpRanges));
        }

        /**
         * @param sourceIpRanges If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
         * 
         * @return builder
         * 
         */
        public Builder sourceIpRanges(String... sourceIpRanges) {
            return sourceIpRanges(List.of(sourceIpRanges));
        }

        /**
         * @param subnetwork This field identifies the subnetwork that the load balanced IP should
         * belong to for this Forwarding Rule, used in internal load balancing and
         * network load balancing with IPv6.
         * If the network specified is in auto subnet mode, this field is optional.
         * However, a subnetwork must be specified if the network is in custom subnet
         * mode or when creating external forwarding rule with IPv6.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(@Nullable Output<String> subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        /**
         * @param subnetwork This field identifies the subnetwork that the load balanced IP should
         * belong to for this Forwarding Rule, used in internal load balancing and
         * network load balancing with IPv6.
         * If the network specified is in auto subnet mode, this field is optional.
         * However, a subnetwork must be specified if the network is in custom subnet
         * mode or when creating external forwarding rule with IPv6.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(String subnetwork) {
            return subnetwork(Output.of(subnetwork));
        }

        /**
         * @param target The URL of the target resource to receive the matched traffic.  For
         * regional forwarding rules, this target must be in the same region as the
         * forwarding rule. For global forwarding rules, this target must be a global
         * load balancing resource.
         * The forwarded traffic must be of a type appropriate to the target object.
         * *  For load balancers, see the &#34;Target&#34; column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
         * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
         * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
         * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
         * 
         * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder target(Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The URL of the target resource to receive the matched traffic.  For
         * regional forwarding rules, this target must be in the same region as the
         * forwarding rule. For global forwarding rules, this target must be a global
         * load balancing resource.
         * The forwarded traffic must be of a type appropriate to the target object.
         * *  For load balancers, see the &#34;Target&#34; column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
         * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
         * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
         * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
         * 
         * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        public GlobalForwardingRuleArgs build() {
            $.target = Objects.requireNonNull($.target, "expected parameter 'target' to be non-null");
            return $;
        }
    }

}
