// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.inputs.FutureReservationAggregateReservationArgs;
import com.pulumi.gcp.compute.inputs.FutureReservationAutoCreatedReservationsDurationArgs;
import com.pulumi.gcp.compute.inputs.FutureReservationCommitmentInfoArgs;
import com.pulumi.gcp.compute.inputs.FutureReservationShareSettingsArgs;
import com.pulumi.gcp.compute.inputs.FutureReservationSpecificSkuPropertiesArgs;
import com.pulumi.gcp.compute.inputs.FutureReservationTimeWindowArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FutureReservationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FutureReservationArgs Empty = new FutureReservationArgs();

    /**
     * Aggregate reservation details for the future reservation.
     * Structure is documented below.
     * 
     */
    @Import(name="aggregateReservation")
    private @Nullable Output<FutureReservationAggregateReservationArgs> aggregateReservation;

    /**
     * @return Aggregate reservation details for the future reservation.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FutureReservationAggregateReservationArgs>> aggregateReservation() {
        return Optional.ofNullable(this.aggregateReservation);
    }

    /**
     * Future timestamp when the FR auto-created reservations will be deleted by Compute Engine.
     * 
     */
    @Import(name="autoCreatedReservationsDeleteTime")
    private @Nullable Output<String> autoCreatedReservationsDeleteTime;

    /**
     * @return Future timestamp when the FR auto-created reservations will be deleted by Compute Engine.
     * 
     */
    public Optional<Output<String>> autoCreatedReservationsDeleteTime() {
        return Optional.ofNullable(this.autoCreatedReservationsDeleteTime);
    }

    /**
     * Specifies the duration of auto-created reservations. It represents relative time to future reservation startTime when auto-created reservations will be automatically deleted by Compute Engine. Duration time unit is represented as a count of seconds and fractions of seconds at nanosecond resolution.
     * Structure is documented below.
     * 
     */
    @Import(name="autoCreatedReservationsDuration")
    private @Nullable Output<FutureReservationAutoCreatedReservationsDurationArgs> autoCreatedReservationsDuration;

    /**
     * @return Specifies the duration of auto-created reservations. It represents relative time to future reservation startTime when auto-created reservations will be automatically deleted by Compute Engine. Duration time unit is represented as a count of seconds and fractions of seconds at nanosecond resolution.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FutureReservationAutoCreatedReservationsDurationArgs>> autoCreatedReservationsDuration() {
        return Optional.ofNullable(this.autoCreatedReservationsDuration);
    }

    /**
     * Setting for enabling or disabling automatic deletion for auto-created reservation. If set to true, auto-created reservations will be deleted at Future Reservation&#39;s end time (default) or at user&#39;s defined timestamp if any of the [autoCreatedReservationsDeleteTime, autoCreatedReservationsDuration] values is specified. For keeping auto-created reservation indefinitely, this value should be set to false.
     * 
     */
    @Import(name="autoDeleteAutoCreatedReservations")
    private @Nullable Output<Boolean> autoDeleteAutoCreatedReservations;

    /**
     * @return Setting for enabling or disabling automatic deletion for auto-created reservation. If set to true, auto-created reservations will be deleted at Future Reservation&#39;s end time (default) or at user&#39;s defined timestamp if any of the [autoCreatedReservationsDeleteTime, autoCreatedReservationsDuration] values is specified. For keeping auto-created reservation indefinitely, this value should be set to false.
     * 
     */
    public Optional<Output<Boolean>> autoDeleteAutoCreatedReservations() {
        return Optional.ofNullable(this.autoDeleteAutoCreatedReservations);
    }

    /**
     * If not present, then FR will not deliver a new commitment or update an existing commitment.
     * Structure is documented below.
     * 
     */
    @Import(name="commitmentInfo")
    private @Nullable Output<FutureReservationCommitmentInfoArgs> commitmentInfo;

    /**
     * @return If not present, then FR will not deliver a new commitment or update an existing commitment.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FutureReservationCommitmentInfoArgs>> commitmentInfo() {
        return Optional.ofNullable(this.commitmentInfo);
    }

    /**
     * Type of the deployment requested as part of future reservation.
     * Possible values are: `DENSE`, `FLEXIBLE`.
     * 
     */
    @Import(name="deploymentType")
    private @Nullable Output<String> deploymentType;

    /**
     * @return Type of the deployment requested as part of future reservation.
     * Possible values are: `DENSE`, `FLEXIBLE`.
     * 
     */
    public Optional<Output<String>> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the las
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the las
     * character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Name prefix for the reservations to be created at the time of delivery. The name prefix must comply with RFC1035. Maximum allowed length for name prefix is 20. Automatically created reservations name format will be -date-####.
     * 
     */
    @Import(name="namePrefix")
    private @Nullable Output<String> namePrefix;

    /**
     * @return Name prefix for the reservations to be created at the time of delivery. The name prefix must comply with RFC1035. Maximum allowed length for name prefix is 20. Automatically created reservations name format will be -date-####.
     * 
     */
    public Optional<Output<String>> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }

    /**
     * Planning state before being submitted for evaluation
     * Possible values are: `DRAFT`, `SUBMITTED`.
     * 
     */
    @Import(name="planningStatus")
    private @Nullable Output<String> planningStatus;

    /**
     * @return Planning state before being submitted for evaluation
     * Possible values are: `DRAFT`, `SUBMITTED`.
     * 
     */
    public Optional<Output<String>> planningStatus() {
        return Optional.ofNullable(this.planningStatus);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The reservation mode which determines reservation-termination behavior and expected pricing.
     * Possible values are: `CALENDAR`, `DEFAULT`.
     * 
     */
    @Import(name="reservationMode")
    private @Nullable Output<String> reservationMode;

    /**
     * @return The reservation mode which determines reservation-termination behavior and expected pricing.
     * Possible values are: `CALENDAR`, `DEFAULT`.
     * 
     */
    public Optional<Output<String>> reservationMode() {
        return Optional.ofNullable(this.reservationMode);
    }

    /**
     * Name of reservations where the capacity is provisioned at the time of delivery of future reservations. If the reservation with the given name does not exist already, it is created automatically at the time of Approval with INACTIVE state till specified start-time. Either provide the reservationName or a namePrefix.
     * 
     */
    @Import(name="reservationName")
    private @Nullable Output<String> reservationName;

    /**
     * @return Name of reservations where the capacity is provisioned at the time of delivery of future reservations. If the reservation with the given name does not exist already, it is created automatically at the time of Approval with INACTIVE state till specified start-time. Either provide the reservationName or a namePrefix.
     * 
     */
    public Optional<Output<String>> reservationName() {
        return Optional.ofNullable(this.reservationName);
    }

    /**
     * Maintenance information for this reservation
     * Possible values are: `GROUPED`, `INDEPENDENT`.
     * 
     */
    @Import(name="schedulingType")
    private @Nullable Output<String> schedulingType;

    /**
     * @return Maintenance information for this reservation
     * Possible values are: `GROUPED`, `INDEPENDENT`.
     * 
     */
    public Optional<Output<String>> schedulingType() {
        return Optional.ofNullable(this.schedulingType);
    }

    /**
     * Settings for sharing the future reservation
     * Structure is documented below.
     * 
     */
    @Import(name="shareSettings")
    private @Nullable Output<FutureReservationShareSettingsArgs> shareSettings;

    /**
     * @return Settings for sharing the future reservation
     * Structure is documented below.
     * 
     */
    public Optional<Output<FutureReservationShareSettingsArgs>> shareSettings() {
        return Optional.ofNullable(this.shareSettings);
    }

    /**
     * Indicates whether the auto-created reservation can be consumed by VMs with affinity for &#34;any&#34; reservation. If the field is set, then only VMs that target the reservation by name can consume from the delivered reservation.
     * 
     */
    @Import(name="specificReservationRequired")
    private @Nullable Output<Boolean> specificReservationRequired;

    /**
     * @return Indicates whether the auto-created reservation can be consumed by VMs with affinity for &#34;any&#34; reservation. If the field is set, then only VMs that target the reservation by name can consume from the delivered reservation.
     * 
     */
    public Optional<Output<Boolean>> specificReservationRequired() {
        return Optional.ofNullable(this.specificReservationRequired);
    }

    /**
     * Future Reservation configuration to indicate instance properties and total count.
     * Structure is documented below.
     * 
     */
    @Import(name="specificSkuProperties")
    private @Nullable Output<FutureReservationSpecificSkuPropertiesArgs> specificSkuProperties;

    /**
     * @return Future Reservation configuration to indicate instance properties and total count.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FutureReservationSpecificSkuPropertiesArgs>> specificSkuProperties() {
        return Optional.ofNullable(this.specificSkuProperties);
    }

    /**
     * Time window for this Future Reservation.
     * Structure is documented below.
     * 
     */
    @Import(name="timeWindow", required=true)
    private Output<FutureReservationTimeWindowArgs> timeWindow;

    /**
     * @return Time window for this Future Reservation.
     * Structure is documented below.
     * 
     */
    public Output<FutureReservationTimeWindowArgs> timeWindow() {
        return this.timeWindow;
    }

    private FutureReservationArgs() {}

    private FutureReservationArgs(FutureReservationArgs $) {
        this.aggregateReservation = $.aggregateReservation;
        this.autoCreatedReservationsDeleteTime = $.autoCreatedReservationsDeleteTime;
        this.autoCreatedReservationsDuration = $.autoCreatedReservationsDuration;
        this.autoDeleteAutoCreatedReservations = $.autoDeleteAutoCreatedReservations;
        this.commitmentInfo = $.commitmentInfo;
        this.deploymentType = $.deploymentType;
        this.description = $.description;
        this.name = $.name;
        this.namePrefix = $.namePrefix;
        this.planningStatus = $.planningStatus;
        this.project = $.project;
        this.reservationMode = $.reservationMode;
        this.reservationName = $.reservationName;
        this.schedulingType = $.schedulingType;
        this.shareSettings = $.shareSettings;
        this.specificReservationRequired = $.specificReservationRequired;
        this.specificSkuProperties = $.specificSkuProperties;
        this.timeWindow = $.timeWindow;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FutureReservationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FutureReservationArgs $;

        public Builder() {
            $ = new FutureReservationArgs();
        }

        public Builder(FutureReservationArgs defaults) {
            $ = new FutureReservationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregateReservation Aggregate reservation details for the future reservation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder aggregateReservation(@Nullable Output<FutureReservationAggregateReservationArgs> aggregateReservation) {
            $.aggregateReservation = aggregateReservation;
            return this;
        }

        /**
         * @param aggregateReservation Aggregate reservation details for the future reservation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder aggregateReservation(FutureReservationAggregateReservationArgs aggregateReservation) {
            return aggregateReservation(Output.of(aggregateReservation));
        }

        /**
         * @param autoCreatedReservationsDeleteTime Future timestamp when the FR auto-created reservations will be deleted by Compute Engine.
         * 
         * @return builder
         * 
         */
        public Builder autoCreatedReservationsDeleteTime(@Nullable Output<String> autoCreatedReservationsDeleteTime) {
            $.autoCreatedReservationsDeleteTime = autoCreatedReservationsDeleteTime;
            return this;
        }

        /**
         * @param autoCreatedReservationsDeleteTime Future timestamp when the FR auto-created reservations will be deleted by Compute Engine.
         * 
         * @return builder
         * 
         */
        public Builder autoCreatedReservationsDeleteTime(String autoCreatedReservationsDeleteTime) {
            return autoCreatedReservationsDeleteTime(Output.of(autoCreatedReservationsDeleteTime));
        }

        /**
         * @param autoCreatedReservationsDuration Specifies the duration of auto-created reservations. It represents relative time to future reservation startTime when auto-created reservations will be automatically deleted by Compute Engine. Duration time unit is represented as a count of seconds and fractions of seconds at nanosecond resolution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoCreatedReservationsDuration(@Nullable Output<FutureReservationAutoCreatedReservationsDurationArgs> autoCreatedReservationsDuration) {
            $.autoCreatedReservationsDuration = autoCreatedReservationsDuration;
            return this;
        }

        /**
         * @param autoCreatedReservationsDuration Specifies the duration of auto-created reservations. It represents relative time to future reservation startTime when auto-created reservations will be automatically deleted by Compute Engine. Duration time unit is represented as a count of seconds and fractions of seconds at nanosecond resolution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoCreatedReservationsDuration(FutureReservationAutoCreatedReservationsDurationArgs autoCreatedReservationsDuration) {
            return autoCreatedReservationsDuration(Output.of(autoCreatedReservationsDuration));
        }

        /**
         * @param autoDeleteAutoCreatedReservations Setting for enabling or disabling automatic deletion for auto-created reservation. If set to true, auto-created reservations will be deleted at Future Reservation&#39;s end time (default) or at user&#39;s defined timestamp if any of the [autoCreatedReservationsDeleteTime, autoCreatedReservationsDuration] values is specified. For keeping auto-created reservation indefinitely, this value should be set to false.
         * 
         * @return builder
         * 
         */
        public Builder autoDeleteAutoCreatedReservations(@Nullable Output<Boolean> autoDeleteAutoCreatedReservations) {
            $.autoDeleteAutoCreatedReservations = autoDeleteAutoCreatedReservations;
            return this;
        }

        /**
         * @param autoDeleteAutoCreatedReservations Setting for enabling or disabling automatic deletion for auto-created reservation. If set to true, auto-created reservations will be deleted at Future Reservation&#39;s end time (default) or at user&#39;s defined timestamp if any of the [autoCreatedReservationsDeleteTime, autoCreatedReservationsDuration] values is specified. For keeping auto-created reservation indefinitely, this value should be set to false.
         * 
         * @return builder
         * 
         */
        public Builder autoDeleteAutoCreatedReservations(Boolean autoDeleteAutoCreatedReservations) {
            return autoDeleteAutoCreatedReservations(Output.of(autoDeleteAutoCreatedReservations));
        }

        /**
         * @param commitmentInfo If not present, then FR will not deliver a new commitment or update an existing commitment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder commitmentInfo(@Nullable Output<FutureReservationCommitmentInfoArgs> commitmentInfo) {
            $.commitmentInfo = commitmentInfo;
            return this;
        }

        /**
         * @param commitmentInfo If not present, then FR will not deliver a new commitment or update an existing commitment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder commitmentInfo(FutureReservationCommitmentInfoArgs commitmentInfo) {
            return commitmentInfo(Output.of(commitmentInfo));
        }

        /**
         * @param deploymentType Type of the deployment requested as part of future reservation.
         * Possible values are: `DENSE`, `FLEXIBLE`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(@Nullable Output<String> deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        /**
         * @param deploymentType Type of the deployment requested as part of future reservation.
         * Possible values are: `DENSE`, `FLEXIBLE`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(String deploymentType) {
            return deploymentType(Output.of(deploymentType));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the las
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the las
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namePrefix Name prefix for the reservations to be created at the time of delivery. The name prefix must comply with RFC1035. Maximum allowed length for name prefix is 20. Automatically created reservations name format will be -date-####.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        /**
         * @param namePrefix Name prefix for the reservations to be created at the time of delivery. The name prefix must comply with RFC1035. Maximum allowed length for name prefix is 20. Automatically created reservations name format will be -date-####.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        /**
         * @param planningStatus Planning state before being submitted for evaluation
         * Possible values are: `DRAFT`, `SUBMITTED`.
         * 
         * @return builder
         * 
         */
        public Builder planningStatus(@Nullable Output<String> planningStatus) {
            $.planningStatus = planningStatus;
            return this;
        }

        /**
         * @param planningStatus Planning state before being submitted for evaluation
         * Possible values are: `DRAFT`, `SUBMITTED`.
         * 
         * @return builder
         * 
         */
        public Builder planningStatus(String planningStatus) {
            return planningStatus(Output.of(planningStatus));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param reservationMode The reservation mode which determines reservation-termination behavior and expected pricing.
         * Possible values are: `CALENDAR`, `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder reservationMode(@Nullable Output<String> reservationMode) {
            $.reservationMode = reservationMode;
            return this;
        }

        /**
         * @param reservationMode The reservation mode which determines reservation-termination behavior and expected pricing.
         * Possible values are: `CALENDAR`, `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder reservationMode(String reservationMode) {
            return reservationMode(Output.of(reservationMode));
        }

        /**
         * @param reservationName Name of reservations where the capacity is provisioned at the time of delivery of future reservations. If the reservation with the given name does not exist already, it is created automatically at the time of Approval with INACTIVE state till specified start-time. Either provide the reservationName or a namePrefix.
         * 
         * @return builder
         * 
         */
        public Builder reservationName(@Nullable Output<String> reservationName) {
            $.reservationName = reservationName;
            return this;
        }

        /**
         * @param reservationName Name of reservations where the capacity is provisioned at the time of delivery of future reservations. If the reservation with the given name does not exist already, it is created automatically at the time of Approval with INACTIVE state till specified start-time. Either provide the reservationName or a namePrefix.
         * 
         * @return builder
         * 
         */
        public Builder reservationName(String reservationName) {
            return reservationName(Output.of(reservationName));
        }

        /**
         * @param schedulingType Maintenance information for this reservation
         * Possible values are: `GROUPED`, `INDEPENDENT`.
         * 
         * @return builder
         * 
         */
        public Builder schedulingType(@Nullable Output<String> schedulingType) {
            $.schedulingType = schedulingType;
            return this;
        }

        /**
         * @param schedulingType Maintenance information for this reservation
         * Possible values are: `GROUPED`, `INDEPENDENT`.
         * 
         * @return builder
         * 
         */
        public Builder schedulingType(String schedulingType) {
            return schedulingType(Output.of(schedulingType));
        }

        /**
         * @param shareSettings Settings for sharing the future reservation
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder shareSettings(@Nullable Output<FutureReservationShareSettingsArgs> shareSettings) {
            $.shareSettings = shareSettings;
            return this;
        }

        /**
         * @param shareSettings Settings for sharing the future reservation
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder shareSettings(FutureReservationShareSettingsArgs shareSettings) {
            return shareSettings(Output.of(shareSettings));
        }

        /**
         * @param specificReservationRequired Indicates whether the auto-created reservation can be consumed by VMs with affinity for &#34;any&#34; reservation. If the field is set, then only VMs that target the reservation by name can consume from the delivered reservation.
         * 
         * @return builder
         * 
         */
        public Builder specificReservationRequired(@Nullable Output<Boolean> specificReservationRequired) {
            $.specificReservationRequired = specificReservationRequired;
            return this;
        }

        /**
         * @param specificReservationRequired Indicates whether the auto-created reservation can be consumed by VMs with affinity for &#34;any&#34; reservation. If the field is set, then only VMs that target the reservation by name can consume from the delivered reservation.
         * 
         * @return builder
         * 
         */
        public Builder specificReservationRequired(Boolean specificReservationRequired) {
            return specificReservationRequired(Output.of(specificReservationRequired));
        }

        /**
         * @param specificSkuProperties Future Reservation configuration to indicate instance properties and total count.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder specificSkuProperties(@Nullable Output<FutureReservationSpecificSkuPropertiesArgs> specificSkuProperties) {
            $.specificSkuProperties = specificSkuProperties;
            return this;
        }

        /**
         * @param specificSkuProperties Future Reservation configuration to indicate instance properties and total count.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder specificSkuProperties(FutureReservationSpecificSkuPropertiesArgs specificSkuProperties) {
            return specificSkuProperties(Output.of(specificSkuProperties));
        }

        /**
         * @param timeWindow Time window for this Future Reservation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timeWindow(Output<FutureReservationTimeWindowArgs> timeWindow) {
            $.timeWindow = timeWindow;
            return this;
        }

        /**
         * @param timeWindow Time window for this Future Reservation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timeWindow(FutureReservationTimeWindowArgs timeWindow) {
            return timeWindow(Output.of(timeWindow));
        }

        public FutureReservationArgs build() {
            if ($.timeWindow == null) {
                throw new MissingRequiredPropertyException("FutureReservationArgs", "timeWindow");
            }
            return $;
        }
    }

}
