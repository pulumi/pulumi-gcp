// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.netapp.KmsconfigArgs;
import com.pulumi.gcp.netapp.inputs.KmsconfigState;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * NetApp Volumes always encrypts your data at rest using volume-specific keys.
 * 
 * A CMEK policy (customer-managed encryption key) warps such volume-specific keys in a key stored in Cloud Key Management Service (KMS).
 * 
 * To get more information about kmsconfig, see:
 * 
 * * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.kmsConfigs)
 * * How-to Guides
 *     * [Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/cmek/cmek-overview)
 * 
 * ## Example Usage
 * 
 * ### Kms Config Create
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.kms.KeyRing;
 * import com.pulumi.gcp.kms.KeyRingArgs;
 * import com.pulumi.gcp.kms.CryptoKey;
 * import com.pulumi.gcp.kms.CryptoKeyArgs;
 * import com.pulumi.gcp.netapp.Kmsconfig;
 * import com.pulumi.gcp.netapp.KmsconfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var keyring = new KeyRing("keyring", KeyRingArgs.builder()
 *             .name("key-ring")
 *             .location("us-central1")
 *             .build());
 * 
 *         var cryptoKey = new CryptoKey("cryptoKey", CryptoKeyArgs.builder()
 *             .name("crypto-name")
 *             .keyRing(keyring.id())
 *             .build());
 * 
 *         var kmsConfig = new Kmsconfig("kmsConfig", KmsconfigArgs.builder()
 *             .name("kms-test")
 *             .description("this is a test description")
 *             .cryptoKeyName(cryptoKey.id())
 *             .location("us-central1")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * kmsconfig can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, kmsconfig can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:netapp/kmsconfig:Kmsconfig default projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:netapp/kmsconfig:Kmsconfig default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:netapp/kmsconfig:Kmsconfig default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:netapp/kmsconfig:Kmsconfig")
public class Kmsconfig extends com.pulumi.resources.CustomResource {
    /**
     * Resource name of the KMS key to use. Only regional keys are supported. Format: `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}`.
     * 
     */
    @Export(name="cryptoKeyName", refs={String.class}, tree="[0]")
    private Output<String> cryptoKeyName;

    /**
     * @return Resource name of the KMS key to use. Only regional keys are supported. Format: `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}`.
     * 
     */
    public Output<String> cryptoKeyName() {
        return this.cryptoKeyName;
    }
    /**
     * Description for the CMEK policy.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description for the CMEK policy.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access.
     * To make the policy work, a CMEK policy check is required, which verifies key access.
     * 
     */
    @Export(name="instructions", refs={String.class}, tree="[0]")
    private Output<String> instructions;

    /**
     * @return Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access.
     * To make the policy work, a CMEK policy check is required, which verifies key access.
     * 
     */
    public Output<String> instructions() {
        return this.instructions;
    }
    /**
     * Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Name of the policy location. CMEK policies apply to the whole region.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Name of the policy location. CMEK policies apply to the whole region.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Name of the CMEK policy.
     * 
     * ***
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the CMEK policy.
     * 
     * ***
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The Service account which needs to have access to the  provided KMS key.
     * 
     */
    @Export(name="serviceAccount", refs={String.class}, tree="[0]")
    private Output<String> serviceAccount;

    /**
     * @return The Service account which needs to have access to the  provided KMS key.
     * 
     */
    public Output<String> serviceAccount() {
        return this.serviceAccount;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Kmsconfig(String name) {
        this(name, KmsconfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Kmsconfig(String name, KmsconfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Kmsconfig(String name, KmsconfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:netapp/kmsconfig:Kmsconfig", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private Kmsconfig(String name, Output<String> id, @Nullable KmsconfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:netapp/kmsconfig:Kmsconfig", name, state, makeResourceOptions(options, id));
    }

    private static KmsconfigArgs makeArgs(KmsconfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? KmsconfigArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Kmsconfig get(String name, Output<String> id, @Nullable KmsconfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Kmsconfig(name, id, state, options);
    }
}
