// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs Empty = new NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs();

    /**
     * The type of GPU sharing strategy to enable on the GPU node. Possible values are described in the API package (https://pkg.go.dev/google.golang.org/api/container/v1#GPUSharingConfig)
     * 
     */
    @Import(name="gpuSharingStrategy", required=true)
    private Output<String> gpuSharingStrategy;

    /**
     * @return The type of GPU sharing strategy to enable on the GPU node. Possible values are described in the API package (https://pkg.go.dev/google.golang.org/api/container/v1#GPUSharingConfig)
     * 
     */
    public Output<String> gpuSharingStrategy() {
        return this.gpuSharingStrategy;
    }

    /**
     * The maximum number of containers that can share a GPU.
     * 
     */
    @Import(name="maxSharedClientsPerGpu", required=true)
    private Output<Integer> maxSharedClientsPerGpu;

    /**
     * @return The maximum number of containers that can share a GPU.
     * 
     */
    public Output<Integer> maxSharedClientsPerGpu() {
        return this.maxSharedClientsPerGpu;
    }

    private NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs() {}

    private NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs(NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs $) {
        this.gpuSharingStrategy = $.gpuSharingStrategy;
        this.maxSharedClientsPerGpu = $.maxSharedClientsPerGpu;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs $;

        public Builder() {
            $ = new NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs();
        }

        public Builder(NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs defaults) {
            $ = new NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gpuSharingStrategy The type of GPU sharing strategy to enable on the GPU node. Possible values are described in the API package (https://pkg.go.dev/google.golang.org/api/container/v1#GPUSharingConfig)
         * 
         * @return builder
         * 
         */
        public Builder gpuSharingStrategy(Output<String> gpuSharingStrategy) {
            $.gpuSharingStrategy = gpuSharingStrategy;
            return this;
        }

        /**
         * @param gpuSharingStrategy The type of GPU sharing strategy to enable on the GPU node. Possible values are described in the API package (https://pkg.go.dev/google.golang.org/api/container/v1#GPUSharingConfig)
         * 
         * @return builder
         * 
         */
        public Builder gpuSharingStrategy(String gpuSharingStrategy) {
            return gpuSharingStrategy(Output.of(gpuSharingStrategy));
        }

        /**
         * @param maxSharedClientsPerGpu The maximum number of containers that can share a GPU.
         * 
         * @return builder
         * 
         */
        public Builder maxSharedClientsPerGpu(Output<Integer> maxSharedClientsPerGpu) {
            $.maxSharedClientsPerGpu = maxSharedClientsPerGpu;
            return this;
        }

        /**
         * @param maxSharedClientsPerGpu The maximum number of containers that can share a GPU.
         * 
         * @return builder
         * 
         */
        public Builder maxSharedClientsPerGpu(Integer maxSharedClientsPerGpu) {
            return maxSharedClientsPerGpu(Output.of(maxSharedClientsPerGpu));
        }

        public NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs build() {
            if ($.gpuSharingStrategy == null) {
                throw new MissingRequiredPropertyException("NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs", "gpuSharingStrategy");
            }
            if ($.maxSharedClientsPerGpu == null) {
                throw new MissingRequiredPropertyException("NodePoolNodeConfigGuestAcceleratorGpuSharingConfigArgs", "maxSharedClientsPerGpu");
            }
            return $;
        }
    }

}
