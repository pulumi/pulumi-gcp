// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.biglake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.biglake.DatabaseArgs;
import com.pulumi.gcp.biglake.inputs.DatabaseState;
import com.pulumi.gcp.biglake.outputs.DatabaseHiveOptions;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Databases are containers of tables.
 * 
 * To get more information about Database, see:
 * 
 * * [API documentation](https://cloud.google.com/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases)
 * * How-to Guides
 *     * [Manage open source metadata with BigLake Metastore](https://cloud.google.com/bigquery/docs/manage-open-source-metadata#create_databases)
 * 
 * ## Example Usage
 * ### Biglake Database
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.biglake.Catalog;
 * import com.pulumi.gcp.biglake.CatalogArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.biglake.Database;
 * import com.pulumi.gcp.biglake.DatabaseArgs;
 * import com.pulumi.gcp.biglake.inputs.DatabaseHiveOptionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var catalog = new Catalog(&#34;catalog&#34;, CatalogArgs.builder()        
 *             .location(&#34;US&#34;)
 *             .build());
 * 
 *         var bucket = new Bucket(&#34;bucket&#34;, BucketArgs.builder()        
 *             .location(&#34;US&#34;)
 *             .forceDestroy(true)
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var metadataFolder = new BucketObject(&#34;metadataFolder&#34;, BucketObjectArgs.builder()        
 *             .content(&#34; &#34;)
 *             .bucket(bucket.name())
 *             .build());
 * 
 *         var database = new Database(&#34;database&#34;, DatabaseArgs.builder()        
 *             .catalog(catalog.id())
 *             .type(&#34;HIVE&#34;)
 *             .hiveOptions(DatabaseHiveOptionsArgs.builder()
 *                 .locationUri(Output.tuple(bucket.name(), metadataFolder.name()).applyValue(values -&gt; {
 *                     var bucketName = values.t1;
 *                     var metadataFolderName = values.t2;
 *                     return String.format(&#34;gs://%s/%s&#34;, bucketName,metadataFolderName);
 *                 }))
 *                 .parameters(Map.of(&#34;owner&#34;, &#34;John Doe&#34;))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Database can be imported using any of these accepted formats:
 * 
 * ```sh
 *  $ pulumi import gcp:biglake/database:Database default {{catalog}}/databases/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:biglake/database:Database")
public class Database extends com.pulumi.resources.CustomResource {
    /**
     * The parent catalog.
     * 
     */
    @Export(name="catalog", type=String.class, parameters={})
    private Output<String> catalog;

    /**
     * @return The parent catalog.
     * 
     */
    public Output<String> catalog() {
        return this.catalog;
    }
    /**
     * Output only. The creation time of the database. A timestamp in RFC3339
     * UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional
     * digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and
     * &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return Output only. The creation time of the database. A timestamp in RFC3339
     * UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional
     * digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and
     * &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Output only. The deletion time of the database. Only set after the
     * database is deleted. A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with
     * nanosecond resolution and up to nine fractional digits. Examples:
     * &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Export(name="deleteTime", type=String.class, parameters={})
    private Output<String> deleteTime;

    /**
     * @return Output only. The deletion time of the database. Only set after the
     * database is deleted. A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with
     * nanosecond resolution and up to nine fractional digits. Examples:
     * &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Output<String> deleteTime() {
        return this.deleteTime;
    }
    /**
     * Output only. The time when this database is considered expired. Only set
     * after the database is deleted. A timestamp in RFC3339 UTC &#34;Zulu&#34; format,
     * with nanosecond resolution and up to nine fractional digits. Examples:
     * &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Export(name="expireTime", type=String.class, parameters={})
    private Output<String> expireTime;

    /**
     * @return Output only. The time when this database is considered expired. Only set
     * after the database is deleted. A timestamp in RFC3339 UTC &#34;Zulu&#34; format,
     * with nanosecond resolution and up to nine fractional digits. Examples:
     * &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Output<String> expireTime() {
        return this.expireTime;
    }
    /**
     * Options of a Hive database.
     * Structure is documented below.
     * 
     */
    @Export(name="hiveOptions", type=DatabaseHiveOptions.class, parameters={})
    private Output<DatabaseHiveOptions> hiveOptions;

    /**
     * @return Options of a Hive database.
     * Structure is documented below.
     * 
     */
    public Output<DatabaseHiveOptions> hiveOptions() {
        return this.hiveOptions;
    }
    /**
     * The name of the database.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the database.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The database type.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The database type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Output only. The last modification time of the database. A timestamp in
     * RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
     * fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and
     * &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return Output only. The last modification time of the database. A timestamp in
     * RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
     * fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and
     * &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Database(String name) {
        this(name, DatabaseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Database(String name, DatabaseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Database(String name, DatabaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:biglake/database:Database", name, args == null ? DatabaseArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Database(String name, Output<String> id, @Nullable DatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:biglake/database:Database", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Database get(String name, Output<String> id, @Nullable DatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Database(name, id, state, options);
    }
}
