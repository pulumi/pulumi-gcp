// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolNodeConfigBootDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolNodeConfigBootDiskArgs Empty = new NodePoolNodeConfigBootDiskArgs();

    /**
     * Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<String> diskType;

    /**
     * @return Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
     * 
     */
    public Optional<Output<String>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * Configured IOPs provisioning. Only valid with disk type hyperdisk-balanced.
     * 
     */
    @Import(name="provisionedIops")
    private @Nullable Output<Integer> provisionedIops;

    /**
     * @return Configured IOPs provisioning. Only valid with disk type hyperdisk-balanced.
     * 
     */
    public Optional<Output<Integer>> provisionedIops() {
        return Optional.ofNullable(this.provisionedIops);
    }

    /**
     * Configured throughput provisioning. Only valid with disk type hyperdisk-balanced.
     * 
     */
    @Import(name="provisionedThroughput")
    private @Nullable Output<Integer> provisionedThroughput;

    /**
     * @return Configured throughput provisioning. Only valid with disk type hyperdisk-balanced.
     * 
     */
    public Optional<Output<Integer>> provisionedThroughput() {
        return Optional.ofNullable(this.provisionedThroughput);
    }

    /**
     * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
     * 
     */
    @Import(name="sizeGb")
    private @Nullable Output<Integer> sizeGb;

    /**
     * @return Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
     * 
     */
    public Optional<Output<Integer>> sizeGb() {
        return Optional.ofNullable(this.sizeGb);
    }

    private NodePoolNodeConfigBootDiskArgs() {}

    private NodePoolNodeConfigBootDiskArgs(NodePoolNodeConfigBootDiskArgs $) {
        this.diskType = $.diskType;
        this.provisionedIops = $.provisionedIops;
        this.provisionedThroughput = $.provisionedThroughput;
        this.sizeGb = $.sizeGb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolNodeConfigBootDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolNodeConfigBootDiskArgs $;

        public Builder() {
            $ = new NodePoolNodeConfigBootDiskArgs();
        }

        public Builder(NodePoolNodeConfigBootDiskArgs defaults) {
            $ = new NodePoolNodeConfigBootDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskType Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable Output<String> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param provisionedIops Configured IOPs provisioning. Only valid with disk type hyperdisk-balanced.
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(@Nullable Output<Integer> provisionedIops) {
            $.provisionedIops = provisionedIops;
            return this;
        }

        /**
         * @param provisionedIops Configured IOPs provisioning. Only valid with disk type hyperdisk-balanced.
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(Integer provisionedIops) {
            return provisionedIops(Output.of(provisionedIops));
        }

        /**
         * @param provisionedThroughput Configured throughput provisioning. Only valid with disk type hyperdisk-balanced.
         * 
         * @return builder
         * 
         */
        public Builder provisionedThroughput(@Nullable Output<Integer> provisionedThroughput) {
            $.provisionedThroughput = provisionedThroughput;
            return this;
        }

        /**
         * @param provisionedThroughput Configured throughput provisioning. Only valid with disk type hyperdisk-balanced.
         * 
         * @return builder
         * 
         */
        public Builder provisionedThroughput(Integer provisionedThroughput) {
            return provisionedThroughput(Output.of(provisionedThroughput));
        }

        /**
         * @param sizeGb Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(@Nullable Output<Integer> sizeGb) {
            $.sizeGb = sizeGb;
            return this;
        }

        /**
         * @param sizeGb Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(Integer sizeGb) {
            return sizeGb(Output.of(sizeGb));
        }

        public NodePoolNodeConfigBootDiskArgs build() {
            return $;
        }
    }

}
