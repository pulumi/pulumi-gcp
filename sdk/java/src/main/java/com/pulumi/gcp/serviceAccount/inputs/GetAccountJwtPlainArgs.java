// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.serviceAccount.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAccountJwtPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAccountJwtPlainArgs Empty = new GetAccountJwtPlainArgs();

    /**
     * Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.
     * 
     */
    @Import(name="delegates")
    private @Nullable List<String> delegates;

    /**
     * @return Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.
     * 
     */
    public Optional<List<String>> delegates() {
        return Optional.ofNullable(this.delegates);
    }

    /**
     * The JSON-encoded JWT claims set to include in the self-signed JWT.
     * 
     */
    @Import(name="payload", required=true)
    private String payload;

    /**
     * @return The JSON-encoded JWT claims set to include in the self-signed JWT.
     * 
     */
    public String payload() {
        return this.payload;
    }

    /**
     * The email of the service account that will sign the JWT.
     * 
     */
    @Import(name="targetServiceAccount", required=true)
    private String targetServiceAccount;

    /**
     * @return The email of the service account that will sign the JWT.
     * 
     */
    public String targetServiceAccount() {
        return this.targetServiceAccount;
    }

    private GetAccountJwtPlainArgs() {}

    private GetAccountJwtPlainArgs(GetAccountJwtPlainArgs $) {
        this.delegates = $.delegates;
        this.payload = $.payload;
        this.targetServiceAccount = $.targetServiceAccount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAccountJwtPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAccountJwtPlainArgs $;

        public Builder() {
            $ = new GetAccountJwtPlainArgs();
        }

        public Builder(GetAccountJwtPlainArgs defaults) {
            $ = new GetAccountJwtPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delegates Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.
         * 
         * @return builder
         * 
         */
        public Builder delegates(@Nullable List<String> delegates) {
            $.delegates = delegates;
            return this;
        }

        /**
         * @param delegates Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.
         * 
         * @return builder
         * 
         */
        public Builder delegates(String... delegates) {
            return delegates(List.of(delegates));
        }

        /**
         * @param payload The JSON-encoded JWT claims set to include in the self-signed JWT.
         * 
         * @return builder
         * 
         */
        public Builder payload(String payload) {
            $.payload = payload;
            return this;
        }

        /**
         * @param targetServiceAccount The email of the service account that will sign the JWT.
         * 
         * @return builder
         * 
         */
        public Builder targetServiceAccount(String targetServiceAccount) {
            $.targetServiceAccount = targetServiceAccount;
            return this;
        }

        public GetAccountJwtPlainArgs build() {
            $.payload = Objects.requireNonNull($.payload, "expected parameter 'payload' to be non-null");
            $.targetServiceAccount = Objects.requireNonNull($.targetServiceAccount, "expected parameter 'targetServiceAccount' to be non-null");
            return $;
        }
    }

}
