// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionPerInstanceConfigPreservedStateDisk {
    /**
     * @return A value that prescribes what should happen to the stateful disk when the VM instance is deleted.
     * The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
     * `NEVER` - detach the disk when the VM is deleted, but do not delete the disk.
     * `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently
     * deleted from the instance group.
     * Default value is `NEVER`.
     * Possible values are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
     * 
     */
    private final @Nullable String deleteRule;
    /**
     * @return A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance.
     * 
     */
    private final String deviceName;
    /**
     * @return The mode of the disk.
     * Default value is `READ_WRITE`.
     * Possible values are `READ_ONLY` and `READ_WRITE`.
     * 
     */
    private final @Nullable String mode;
    /**
     * @return The URI of an existing persistent disk to attach under the specified device-name in the format
     * `projects/project-id/zones/zone/disks/disk-name`.
     * 
     */
    private final String source;

    @CustomType.Constructor
    private RegionPerInstanceConfigPreservedStateDisk(
        @CustomType.Parameter("deleteRule") @Nullable String deleteRule,
        @CustomType.Parameter("deviceName") String deviceName,
        @CustomType.Parameter("mode") @Nullable String mode,
        @CustomType.Parameter("source") String source) {
        this.deleteRule = deleteRule;
        this.deviceName = deviceName;
        this.mode = mode;
        this.source = source;
    }

    /**
     * @return A value that prescribes what should happen to the stateful disk when the VM instance is deleted.
     * The available options are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
     * `NEVER` - detach the disk when the VM is deleted, but do not delete the disk.
     * `ON_PERMANENT_INSTANCE_DELETION` will delete the stateful disk when the VM is permanently
     * deleted from the instance group.
     * Default value is `NEVER`.
     * Possible values are `NEVER` and `ON_PERMANENT_INSTANCE_DELETION`.
     * 
     */
    public Optional<String> deleteRule() {
        return Optional.ofNullable(this.deleteRule);
    }
    /**
     * @return A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance.
     * 
     */
    public String deviceName() {
        return this.deviceName;
    }
    /**
     * @return The mode of the disk.
     * Default value is `READ_WRITE`.
     * Possible values are `READ_ONLY` and `READ_WRITE`.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return The URI of an existing persistent disk to attach under the specified device-name in the format
     * `projects/project-id/zones/zone/disks/disk-name`.
     * 
     */
    public String source() {
        return this.source;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionPerInstanceConfigPreservedStateDisk defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String deleteRule;
        private String deviceName;
        private @Nullable String mode;
        private String source;

        public Builder() {
    	      // Empty
        }

        public Builder(RegionPerInstanceConfigPreservedStateDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteRule = defaults.deleteRule;
    	      this.deviceName = defaults.deviceName;
    	      this.mode = defaults.mode;
    	      this.source = defaults.source;
        }

        public Builder deleteRule(@Nullable String deleteRule) {
            this.deleteRule = deleteRule;
            return this;
        }
        public Builder deviceName(String deviceName) {
            this.deviceName = Objects.requireNonNull(deviceName);
            return this;
        }
        public Builder mode(@Nullable String mode) {
            this.mode = mode;
            return this;
        }
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }        public RegionPerInstanceConfigPreservedStateDisk build() {
            return new RegionPerInstanceConfigPreservedStateDisk(deleteRule, deviceName, mode, source);
        }
    }
}
