// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FolderSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final FolderSettingsArgs Empty = new FolderSettingsArgs();

    /**
     * If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
     * 
     */
    @Import(name="disableDefaultSink")
    private @Nullable Output<Boolean> disableDefaultSink;

    /**
     * @return If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
     * 
     */
    public Optional<Output<Boolean>> disableDefaultSink() {
        return Optional.ofNullable(this.disableDefaultSink);
    }

    /**
     * The folder for which to retrieve settings.
     * 
     */
    @Import(name="folder", required=true)
    private Output<String> folder;

    /**
     * @return The folder for which to retrieve settings.
     * 
     */
    public Output<String> folder() {
        return this.folder;
    }

    /**
     * The resource name for the configured Cloud KMS key.
     * 
     */
    @Import(name="kmsKeyName")
    private @Nullable Output<String> kmsKeyName;

    /**
     * @return The resource name for the configured Cloud KMS key.
     * 
     */
    public Optional<Output<String>> kmsKeyName() {
        return Optional.ofNullable(this.kmsKeyName);
    }

    /**
     * The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
     * 
     */
    @Import(name="storageLocation")
    private @Nullable Output<String> storageLocation;

    /**
     * @return The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
     * 
     */
    public Optional<Output<String>> storageLocation() {
        return Optional.ofNullable(this.storageLocation);
    }

    private FolderSettingsArgs() {}

    private FolderSettingsArgs(FolderSettingsArgs $) {
        this.disableDefaultSink = $.disableDefaultSink;
        this.folder = $.folder;
        this.kmsKeyName = $.kmsKeyName;
        this.storageLocation = $.storageLocation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FolderSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FolderSettingsArgs $;

        public Builder() {
            $ = new FolderSettingsArgs();
        }

        public Builder(FolderSettingsArgs defaults) {
            $ = new FolderSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disableDefaultSink If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
         * 
         * @return builder
         * 
         */
        public Builder disableDefaultSink(@Nullable Output<Boolean> disableDefaultSink) {
            $.disableDefaultSink = disableDefaultSink;
            return this;
        }

        /**
         * @param disableDefaultSink If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
         * 
         * @return builder
         * 
         */
        public Builder disableDefaultSink(Boolean disableDefaultSink) {
            return disableDefaultSink(Output.of(disableDefaultSink));
        }

        /**
         * @param folder The folder for which to retrieve settings.
         * 
         * @return builder
         * 
         */
        public Builder folder(Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The folder for which to retrieve settings.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param kmsKeyName The resource name for the configured Cloud KMS key.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyName(@Nullable Output<String> kmsKeyName) {
            $.kmsKeyName = kmsKeyName;
            return this;
        }

        /**
         * @param kmsKeyName The resource name for the configured Cloud KMS key.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyName(String kmsKeyName) {
            return kmsKeyName(Output.of(kmsKeyName));
        }

        /**
         * @param storageLocation The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
         * 
         * @return builder
         * 
         */
        public Builder storageLocation(@Nullable Output<String> storageLocation) {
            $.storageLocation = storageLocation;
            return this;
        }

        /**
         * @param storageLocation The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
         * 
         * @return builder
         * 
         */
        public Builder storageLocation(String storageLocation) {
            return storageLocation(Output.of(storageLocation));
        }

        public FolderSettingsArgs build() {
            if ($.folder == null) {
                throw new MissingRequiredPropertyException("FolderSettingsArgs", "folder");
            }
            return $;
        }
    }

}
