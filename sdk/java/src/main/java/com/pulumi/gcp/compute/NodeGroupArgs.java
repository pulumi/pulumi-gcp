// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.inputs.NodeGroupAutoscalingPolicyArgs;
import com.pulumi.gcp.compute.inputs.NodeGroupMaintenanceWindowArgs;
import com.pulumi.gcp.compute.inputs.NodeGroupShareSettingsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodeGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeGroupArgs Empty = new NodeGroupArgs();

    /**
     * If you use sole-tenant nodes for your workloads, you can use the node
     * group autoscaler to automatically manage the sizes of your node groups.
     * One of `initial_size` or `autoscaling_policy` must be configured on resource creation.
     * Structure is documented below.
     * 
     */
    @Import(name="autoscalingPolicy")
    private @Nullable Output<NodeGroupAutoscalingPolicyArgs> autoscalingPolicy;

    /**
     * @return If you use sole-tenant nodes for your workloads, you can use the node
     * group autoscaler to automatically manage the sizes of your node groups.
     * One of `initial_size` or `autoscaling_policy` must be configured on resource creation.
     * Structure is documented below.
     * 
     */
    public Optional<Output<NodeGroupAutoscalingPolicyArgs>> autoscalingPolicy() {
        return Optional.ofNullable(this.autoscalingPolicy);
    }

    /**
     * An optional textual description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional textual description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The initial number of nodes in the node group. One of `initial_size` or `autoscaling_policy` must be configured on resource creation.
     * 
     */
    @Import(name="initialSize")
    private @Nullable Output<Integer> initialSize;

    /**
     * @return The initial number of nodes in the node group. One of `initial_size` or `autoscaling_policy` must be configured on resource creation.
     * 
     */
    public Optional<Output<Integer>> initialSize() {
        return Optional.ofNullable(this.initialSize);
    }

    /**
     * Specifies the frequency of planned maintenance events. Set to one of the following:
     * - AS_NEEDED: Hosts are eligible to receive infrastructure and hypervisor updates as they become available.
     * - RECURRENT: Hosts receive planned infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live migrations and terminations, on individual VMs.
     *   Possible values are: `AS_NEEDED`, `RECURRENT`.
     * 
     */
    @Import(name="maintenanceInterval")
    private @Nullable Output<String> maintenanceInterval;

    /**
     * @return Specifies the frequency of planned maintenance events. Set to one of the following:
     * - AS_NEEDED: Hosts are eligible to receive infrastructure and hypervisor updates as they become available.
     * - RECURRENT: Hosts receive planned infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live migrations and terminations, on individual VMs.
     *   Possible values are: `AS_NEEDED`, `RECURRENT`.
     * 
     */
    public Optional<Output<String>> maintenanceInterval() {
        return Optional.ofNullable(this.maintenanceInterval);
    }

    /**
     * Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
     * 
     */
    @Import(name="maintenancePolicy")
    private @Nullable Output<String> maintenancePolicy;

    /**
     * @return Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
     * 
     */
    public Optional<Output<String>> maintenancePolicy() {
        return Optional.ofNullable(this.maintenancePolicy);
    }

    /**
     * contains properties for the timeframe of maintenance
     * Structure is documented below.
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<NodeGroupMaintenanceWindowArgs> maintenanceWindow;

    /**
     * @return contains properties for the timeframe of maintenance
     * Structure is documented below.
     * 
     */
    public Optional<Output<NodeGroupMaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The URL of the node template to which this node group belongs.
     * 
     * ***
     * 
     */
    @Import(name="nodeTemplate", required=true)
    private Output<String> nodeTemplate;

    /**
     * @return The URL of the node template to which this node group belongs.
     * 
     * ***
     * 
     */
    public Output<String> nodeTemplate() {
        return this.nodeTemplate;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Share settings for the node group.
     * Structure is documented below.
     * 
     */
    @Import(name="shareSettings")
    private @Nullable Output<NodeGroupShareSettingsArgs> shareSettings;

    /**
     * @return Share settings for the node group.
     * Structure is documented below.
     * 
     */
    public Optional<Output<NodeGroupShareSettingsArgs>> shareSettings() {
        return Optional.ofNullable(this.shareSettings);
    }

    /**
     * Zone where this node group is located
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return Zone where this node group is located
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private NodeGroupArgs() {}

    private NodeGroupArgs(NodeGroupArgs $) {
        this.autoscalingPolicy = $.autoscalingPolicy;
        this.description = $.description;
        this.initialSize = $.initialSize;
        this.maintenanceInterval = $.maintenanceInterval;
        this.maintenancePolicy = $.maintenancePolicy;
        this.maintenanceWindow = $.maintenanceWindow;
        this.name = $.name;
        this.nodeTemplate = $.nodeTemplate;
        this.project = $.project;
        this.shareSettings = $.shareSettings;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeGroupArgs $;

        public Builder() {
            $ = new NodeGroupArgs();
        }

        public Builder(NodeGroupArgs defaults) {
            $ = new NodeGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoscalingPolicy If you use sole-tenant nodes for your workloads, you can use the node
         * group autoscaler to automatically manage the sizes of your node groups.
         * One of `initial_size` or `autoscaling_policy` must be configured on resource creation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingPolicy(@Nullable Output<NodeGroupAutoscalingPolicyArgs> autoscalingPolicy) {
            $.autoscalingPolicy = autoscalingPolicy;
            return this;
        }

        /**
         * @param autoscalingPolicy If you use sole-tenant nodes for your workloads, you can use the node
         * group autoscaler to automatically manage the sizes of your node groups.
         * One of `initial_size` or `autoscaling_policy` must be configured on resource creation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingPolicy(NodeGroupAutoscalingPolicyArgs autoscalingPolicy) {
            return autoscalingPolicy(Output.of(autoscalingPolicy));
        }

        /**
         * @param description An optional textual description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional textual description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param initialSize The initial number of nodes in the node group. One of `initial_size` or `autoscaling_policy` must be configured on resource creation.
         * 
         * @return builder
         * 
         */
        public Builder initialSize(@Nullable Output<Integer> initialSize) {
            $.initialSize = initialSize;
            return this;
        }

        /**
         * @param initialSize The initial number of nodes in the node group. One of `initial_size` or `autoscaling_policy` must be configured on resource creation.
         * 
         * @return builder
         * 
         */
        public Builder initialSize(Integer initialSize) {
            return initialSize(Output.of(initialSize));
        }

        /**
         * @param maintenanceInterval Specifies the frequency of planned maintenance events. Set to one of the following:
         * - AS_NEEDED: Hosts are eligible to receive infrastructure and hypervisor updates as they become available.
         * - RECURRENT: Hosts receive planned infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live migrations and terminations, on individual VMs.
         *   Possible values are: `AS_NEEDED`, `RECURRENT`.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceInterval(@Nullable Output<String> maintenanceInterval) {
            $.maintenanceInterval = maintenanceInterval;
            return this;
        }

        /**
         * @param maintenanceInterval Specifies the frequency of planned maintenance events. Set to one of the following:
         * - AS_NEEDED: Hosts are eligible to receive infrastructure and hypervisor updates as they become available.
         * - RECURRENT: Hosts receive planned infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live migrations and terminations, on individual VMs.
         *   Possible values are: `AS_NEEDED`, `RECURRENT`.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceInterval(String maintenanceInterval) {
            return maintenanceInterval(Output.of(maintenanceInterval));
        }

        /**
         * @param maintenancePolicy Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
         * 
         * @return builder
         * 
         */
        public Builder maintenancePolicy(@Nullable Output<String> maintenancePolicy) {
            $.maintenancePolicy = maintenancePolicy;
            return this;
        }

        /**
         * @param maintenancePolicy Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
         * 
         * @return builder
         * 
         */
        public Builder maintenancePolicy(String maintenancePolicy) {
            return maintenancePolicy(Output.of(maintenancePolicy));
        }

        /**
         * @param maintenanceWindow contains properties for the timeframe of maintenance
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(@Nullable Output<NodeGroupMaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceWindow contains properties for the timeframe of maintenance
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(NodeGroupMaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeTemplate The URL of the node template to which this node group belongs.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder nodeTemplate(Output<String> nodeTemplate) {
            $.nodeTemplate = nodeTemplate;
            return this;
        }

        /**
         * @param nodeTemplate The URL of the node template to which this node group belongs.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder nodeTemplate(String nodeTemplate) {
            return nodeTemplate(Output.of(nodeTemplate));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param shareSettings Share settings for the node group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder shareSettings(@Nullable Output<NodeGroupShareSettingsArgs> shareSettings) {
            $.shareSettings = shareSettings;
            return this;
        }

        /**
         * @param shareSettings Share settings for the node group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder shareSettings(NodeGroupShareSettingsArgs shareSettings) {
            return shareSettings(Output.of(shareSettings));
        }

        /**
         * @param zone Zone where this node group is located
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Zone where this node group is located
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public NodeGroupArgs build() {
            if ($.nodeTemplate == null) {
                throw new MissingRequiredPropertyException("NodeGroupArgs", "nodeTemplate");
            }
            return $;
        }
    }

}
