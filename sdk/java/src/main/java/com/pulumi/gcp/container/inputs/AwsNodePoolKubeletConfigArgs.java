// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AwsNodePoolKubeletConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AwsNodePoolKubeletConfigArgs Empty = new AwsNodePoolKubeletConfigArgs();

    /**
     * Whether or not to enable CPU CFS quota. Defaults to true.
     * 
     */
    @Import(name="cpuCfsQuota")
    private @Nullable Output<Boolean> cpuCfsQuota;

    /**
     * @return Whether or not to enable CPU CFS quota. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> cpuCfsQuota() {
        return Optional.ofNullable(this.cpuCfsQuota);
    }

    /**
     * Optional. The CPU CFS quota period to use for the node. Defaults to &#34;100ms&#34;.
     * 
     */
    @Import(name="cpuCfsQuotaPeriod")
    private @Nullable Output<String> cpuCfsQuotaPeriod;

    /**
     * @return Optional. The CPU CFS quota period to use for the node. Defaults to &#34;100ms&#34;.
     * 
     */
    public Optional<Output<String>> cpuCfsQuotaPeriod() {
        return Optional.ofNullable(this.cpuCfsQuotaPeriod);
    }

    /**
     * The CpuManagerPolicy to use for the node. Defaults to &#34;none&#34;.
     * 
     */
    @Import(name="cpuManagerPolicy")
    private @Nullable Output<String> cpuManagerPolicy;

    /**
     * @return The CpuManagerPolicy to use for the node. Defaults to &#34;none&#34;.
     * 
     */
    public Optional<Output<String>> cpuManagerPolicy() {
        return Optional.ofNullable(this.cpuManagerPolicy);
    }

    /**
     * Optional. The maximum number of PIDs in each pod running on the node. The limit scales automatically based on underlying machine size if left unset.
     * 
     */
    @Import(name="podPidsLimit")
    private @Nullable Output<Integer> podPidsLimit;

    /**
     * @return Optional. The maximum number of PIDs in each pod running on the node. The limit scales automatically based on underlying machine size if left unset.
     * 
     */
    public Optional<Output<Integer>> podPidsLimit() {
        return Optional.ofNullable(this.podPidsLimit);
    }

    private AwsNodePoolKubeletConfigArgs() {}

    private AwsNodePoolKubeletConfigArgs(AwsNodePoolKubeletConfigArgs $) {
        this.cpuCfsQuota = $.cpuCfsQuota;
        this.cpuCfsQuotaPeriod = $.cpuCfsQuotaPeriod;
        this.cpuManagerPolicy = $.cpuManagerPolicy;
        this.podPidsLimit = $.podPidsLimit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AwsNodePoolKubeletConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AwsNodePoolKubeletConfigArgs $;

        public Builder() {
            $ = new AwsNodePoolKubeletConfigArgs();
        }

        public Builder(AwsNodePoolKubeletConfigArgs defaults) {
            $ = new AwsNodePoolKubeletConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpuCfsQuota Whether or not to enable CPU CFS quota. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder cpuCfsQuota(@Nullable Output<Boolean> cpuCfsQuota) {
            $.cpuCfsQuota = cpuCfsQuota;
            return this;
        }

        /**
         * @param cpuCfsQuota Whether or not to enable CPU CFS quota. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder cpuCfsQuota(Boolean cpuCfsQuota) {
            return cpuCfsQuota(Output.of(cpuCfsQuota));
        }

        /**
         * @param cpuCfsQuotaPeriod Optional. The CPU CFS quota period to use for the node. Defaults to &#34;100ms&#34;.
         * 
         * @return builder
         * 
         */
        public Builder cpuCfsQuotaPeriod(@Nullable Output<String> cpuCfsQuotaPeriod) {
            $.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            return this;
        }

        /**
         * @param cpuCfsQuotaPeriod Optional. The CPU CFS quota period to use for the node. Defaults to &#34;100ms&#34;.
         * 
         * @return builder
         * 
         */
        public Builder cpuCfsQuotaPeriod(String cpuCfsQuotaPeriod) {
            return cpuCfsQuotaPeriod(Output.of(cpuCfsQuotaPeriod));
        }

        /**
         * @param cpuManagerPolicy The CpuManagerPolicy to use for the node. Defaults to &#34;none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder cpuManagerPolicy(@Nullable Output<String> cpuManagerPolicy) {
            $.cpuManagerPolicy = cpuManagerPolicy;
            return this;
        }

        /**
         * @param cpuManagerPolicy The CpuManagerPolicy to use for the node. Defaults to &#34;none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder cpuManagerPolicy(String cpuManagerPolicy) {
            return cpuManagerPolicy(Output.of(cpuManagerPolicy));
        }

        /**
         * @param podPidsLimit Optional. The maximum number of PIDs in each pod running on the node. The limit scales automatically based on underlying machine size if left unset.
         * 
         * @return builder
         * 
         */
        public Builder podPidsLimit(@Nullable Output<Integer> podPidsLimit) {
            $.podPidsLimit = podPidsLimit;
            return this;
        }

        /**
         * @param podPidsLimit Optional. The maximum number of PIDs in each pod running on the node. The limit scales automatically based on underlying machine size if left unset.
         * 
         * @return builder
         * 
         */
        public Builder podPidsLimit(Integer podPidsLimit) {
            return podPidsLimit(Output.of(podPidsLimit));
        }

        public AwsNodePoolKubeletConfigArgs build() {
            return $;
        }
    }

}
