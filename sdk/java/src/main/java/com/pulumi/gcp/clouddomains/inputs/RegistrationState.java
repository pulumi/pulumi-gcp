// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddomains.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.clouddomains.inputs.RegistrationContactSettingsArgs;
import com.pulumi.gcp.clouddomains.inputs.RegistrationDnsSettingsArgs;
import com.pulumi.gcp.clouddomains.inputs.RegistrationManagementSettingsArgs;
import com.pulumi.gcp.clouddomains.inputs.RegistrationYearlyPriceArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistrationState extends com.pulumi.resources.ResourceArgs {

    public static final RegistrationState Empty = new RegistrationState();

    /**
     * The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
     * 
     */
    @Import(name="contactNotices")
    private @Nullable Output<List<String>> contactNotices;

    /**
     * @return The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
     * 
     */
    public Optional<Output<List<String>>> contactNotices() {
        return Optional.ofNullable(this.contactNotices);
    }

    /**
     * Required. Settings for contact information linked to the Registration.
     * Structure is documented below.
     * 
     */
    @Import(name="contactSettings")
    private @Nullable Output<RegistrationContactSettingsArgs> contactSettings;

    /**
     * @return Required. Settings for contact information linked to the Registration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegistrationContactSettingsArgs>> contactSettings() {
        return Optional.ofNullable(this.contactSettings);
    }

    /**
     * Output only. Time at which the automation was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. Time at which the automation was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Settings controlling the DNS configuration of the Registration.
     * Structure is documented below.
     * 
     */
    @Import(name="dnsSettings")
    private @Nullable Output<RegistrationDnsSettingsArgs> dnsSettings;

    /**
     * @return Settings controlling the DNS configuration of the Registration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegistrationDnsSettingsArgs>> dnsSettings() {
        return Optional.ofNullable(this.dnsSettings);
    }

    /**
     * Required. The domain name. Unicode domain names must be expressed in Punycode format.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return Required. The domain name. Unicode domain names must be expressed in Punycode format.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
     * 
     */
    @Import(name="domainNotices")
    private @Nullable Output<List<String>> domainNotices;

    /**
     * @return The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
     * 
     */
    public Optional<Output<List<String>>> domainNotices() {
        return Optional.ofNullable(this.domainNotices);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * Output only. Time at which the automation was updated.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    /**
     * @return Output only. Time at which the automation was updated.
     * 
     */
    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * Output only. The set of issues with the Registration that require attention.
     * 
     */
    @Import(name="issues")
    private @Nullable Output<List<String>> issues;

    /**
     * @return Output only. The set of issues with the Registration that require attention.
     * 
     */
    public Optional<Output<List<String>>> issues() {
        return Optional.ofNullable(this.issues);
    }

    /**
     * Set of labels associated with the Registration.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Set of labels associated with the Registration.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Settings for management of the Registration, including renewal, billing, and transfer
     * Structure is documented below.
     * 
     */
    @Import(name="managementSettings")
    private @Nullable Output<RegistrationManagementSettingsArgs> managementSettings;

    /**
     * @return Settings for management of the Registration, including renewal, billing, and transfer
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegistrationManagementSettingsArgs>> managementSettings() {
        return Optional.ofNullable(this.managementSettings);
    }

    /**
     * Output only. Name of the Registration resource, in the format projects/*{@literal /}locations/*{@literal /}registrations/&lt;domain_name&gt;.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Output only. Name of the Registration resource, in the format projects/*{@literal /}locations/*{@literal /}registrations/&lt;domain_name&gt;.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
     * 
     */
    @Import(name="registerFailureReason")
    private @Nullable Output<String> registerFailureReason;

    /**
     * @return Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
     * 
     */
    public Optional<Output<String>> registerFailureReason() {
        return Optional.ofNullable(this.registerFailureReason);
    }

    /**
     * Output only. The current state of the Registration.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Output only. The current state of the Registration.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Output only. Set of options for the contactSettings.privacy field that this Registration supports.
     * 
     */
    @Import(name="supportedPrivacies")
    private @Nullable Output<List<String>> supportedPrivacies;

    /**
     * @return Output only. Set of options for the contactSettings.privacy field that this Registration supports.
     * 
     */
    public Optional<Output<List<String>>> supportedPrivacies() {
        return Optional.ofNullable(this.supportedPrivacies);
    }

    /**
     * Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
     * registrations.retrieveRegisterParameters or registrations.searchDomains calls.
     * Structure is documented below.
     * 
     */
    @Import(name="yearlyPrice")
    private @Nullable Output<RegistrationYearlyPriceArgs> yearlyPrice;

    /**
     * @return Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
     * registrations.retrieveRegisterParameters or registrations.searchDomains calls.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegistrationYearlyPriceArgs>> yearlyPrice() {
        return Optional.ofNullable(this.yearlyPrice);
    }

    private RegistrationState() {}

    private RegistrationState(RegistrationState $) {
        this.contactNotices = $.contactNotices;
        this.contactSettings = $.contactSettings;
        this.createTime = $.createTime;
        this.dnsSettings = $.dnsSettings;
        this.domainName = $.domainName;
        this.domainNotices = $.domainNotices;
        this.effectiveLabels = $.effectiveLabels;
        this.expireTime = $.expireTime;
        this.issues = $.issues;
        this.labels = $.labels;
        this.location = $.location;
        this.managementSettings = $.managementSettings;
        this.name = $.name;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.registerFailureReason = $.registerFailureReason;
        this.state = $.state;
        this.supportedPrivacies = $.supportedPrivacies;
        this.yearlyPrice = $.yearlyPrice;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistrationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistrationState $;

        public Builder() {
            $ = new RegistrationState();
        }

        public Builder(RegistrationState defaults) {
            $ = new RegistrationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactNotices The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
         * 
         * @return builder
         * 
         */
        public Builder contactNotices(@Nullable Output<List<String>> contactNotices) {
            $.contactNotices = contactNotices;
            return this;
        }

        /**
         * @param contactNotices The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
         * 
         * @return builder
         * 
         */
        public Builder contactNotices(List<String> contactNotices) {
            return contactNotices(Output.of(contactNotices));
        }

        /**
         * @param contactNotices The list of contact notices that the caller acknowledges. Possible value is PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
         * 
         * @return builder
         * 
         */
        public Builder contactNotices(String... contactNotices) {
            return contactNotices(List.of(contactNotices));
        }

        /**
         * @param contactSettings Required. Settings for contact information linked to the Registration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder contactSettings(@Nullable Output<RegistrationContactSettingsArgs> contactSettings) {
            $.contactSettings = contactSettings;
            return this;
        }

        /**
         * @param contactSettings Required. Settings for contact information linked to the Registration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder contactSettings(RegistrationContactSettingsArgs contactSettings) {
            return contactSettings(Output.of(contactSettings));
        }

        /**
         * @param createTime Output only. Time at which the automation was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. Time at which the automation was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dnsSettings Settings controlling the DNS configuration of the Registration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dnsSettings(@Nullable Output<RegistrationDnsSettingsArgs> dnsSettings) {
            $.dnsSettings = dnsSettings;
            return this;
        }

        /**
         * @param dnsSettings Settings controlling the DNS configuration of the Registration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dnsSettings(RegistrationDnsSettingsArgs dnsSettings) {
            return dnsSettings(Output.of(dnsSettings));
        }

        /**
         * @param domainName Required. The domain name. Unicode domain names must be expressed in Punycode format.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Required. The domain name. Unicode domain names must be expressed in Punycode format.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param domainNotices The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
         * 
         * @return builder
         * 
         */
        public Builder domainNotices(@Nullable Output<List<String>> domainNotices) {
            $.domainNotices = domainNotices;
            return this;
        }

        /**
         * @param domainNotices The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
         * 
         * @return builder
         * 
         */
        public Builder domainNotices(List<String> domainNotices) {
            return domainNotices(Output.of(domainNotices));
        }

        /**
         * @param domainNotices The list of domain notices that you acknowledge. Possible value is HSTS_PRELOADED
         * 
         * @return builder
         * 
         */
        public Builder domainNotices(String... domainNotices) {
            return domainNotices(List.of(domainNotices));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param expireTime Output only. Time at which the automation was updated.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        /**
         * @param expireTime Output only. Time at which the automation was updated.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        /**
         * @param issues Output only. The set of issues with the Registration that require attention.
         * 
         * @return builder
         * 
         */
        public Builder issues(@Nullable Output<List<String>> issues) {
            $.issues = issues;
            return this;
        }

        /**
         * @param issues Output only. The set of issues with the Registration that require attention.
         * 
         * @return builder
         * 
         */
        public Builder issues(List<String> issues) {
            return issues(Output.of(issues));
        }

        /**
         * @param issues Output only. The set of issues with the Registration that require attention.
         * 
         * @return builder
         * 
         */
        public Builder issues(String... issues) {
            return issues(List.of(issues));
        }

        /**
         * @param labels Set of labels associated with the Registration.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Set of labels associated with the Registration.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managementSettings Settings for management of the Registration, including renewal, billing, and transfer
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder managementSettings(@Nullable Output<RegistrationManagementSettingsArgs> managementSettings) {
            $.managementSettings = managementSettings;
            return this;
        }

        /**
         * @param managementSettings Settings for management of the Registration, including renewal, billing, and transfer
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder managementSettings(RegistrationManagementSettingsArgs managementSettings) {
            return managementSettings(Output.of(managementSettings));
        }

        /**
         * @param name Output only. Name of the Registration resource, in the format projects/*{@literal /}locations/*{@literal /}registrations/&lt;domain_name&gt;.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Output only. Name of the Registration resource, in the format projects/*{@literal /}locations/*{@literal /}registrations/&lt;domain_name&gt;.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param registerFailureReason Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
         * 
         * @return builder
         * 
         */
        public Builder registerFailureReason(@Nullable Output<String> registerFailureReason) {
            $.registerFailureReason = registerFailureReason;
            return this;
        }

        /**
         * @param registerFailureReason Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
         * 
         * @return builder
         * 
         */
        public Builder registerFailureReason(String registerFailureReason) {
            return registerFailureReason(Output.of(registerFailureReason));
        }

        /**
         * @param state Output only. The current state of the Registration.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Output only. The current state of the Registration.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param supportedPrivacies Output only. Set of options for the contactSettings.privacy field that this Registration supports.
         * 
         * @return builder
         * 
         */
        public Builder supportedPrivacies(@Nullable Output<List<String>> supportedPrivacies) {
            $.supportedPrivacies = supportedPrivacies;
            return this;
        }

        /**
         * @param supportedPrivacies Output only. Set of options for the contactSettings.privacy field that this Registration supports.
         * 
         * @return builder
         * 
         */
        public Builder supportedPrivacies(List<String> supportedPrivacies) {
            return supportedPrivacies(Output.of(supportedPrivacies));
        }

        /**
         * @param supportedPrivacies Output only. Set of options for the contactSettings.privacy field that this Registration supports.
         * 
         * @return builder
         * 
         */
        public Builder supportedPrivacies(String... supportedPrivacies) {
            return supportedPrivacies(List.of(supportedPrivacies));
        }

        /**
         * @param yearlyPrice Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
         * registrations.retrieveRegisterParameters or registrations.searchDomains calls.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder yearlyPrice(@Nullable Output<RegistrationYearlyPriceArgs> yearlyPrice) {
            $.yearlyPrice = yearlyPrice;
            return this;
        }

        /**
         * @param yearlyPrice Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from
         * registrations.retrieveRegisterParameters or registrations.searchDomains calls.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder yearlyPrice(RegistrationYearlyPriceArgs yearlyPrice) {
            return yearlyPrice(Output.of(yearlyPrice));
        }

        public RegistrationState build() {
            return $;
        }
    }

}
