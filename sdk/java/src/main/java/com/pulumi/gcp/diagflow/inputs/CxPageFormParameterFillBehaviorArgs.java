// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs;
import com.pulumi.gcp.diagflow.inputs.CxPageFormParameterFillBehaviorRepromptEventHandlerArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxPageFormParameterFillBehaviorArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxPageFormParameterFillBehaviorArgs Empty = new CxPageFormParameterFillBehaviorArgs();

    /**
     * The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
     * Structure is documented below.
     * 
     */
    @Import(name="initialPromptFulfillment")
    private @Nullable Output<CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs> initialPromptFulfillment;

    /**
     * @return The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs>> initialPromptFulfillment() {
        return Optional.ofNullable(this.initialPromptFulfillment);
    }

    /**
     * The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:
     * * sys.no-match-&lt;N&gt;, where N can be from 1 to 6
     * * sys.no-match-default
     * * sys.no-input-&lt;N&gt;, where N can be from 1 to 6
     * * sys.no-input-default
     * * sys.invalid-parameter
     *   [initialPromptFulfillment][initialPromptFulfillment] provides the first prompt for the parameter.
     *   If the user&#39;s response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the sys.no-match-1/sys.no-input-1 handler (if defined) will be called to provide a prompt. The sys.no-match-2/sys.no-input-2 handler (if defined) will respond to the next no-match/no-input event, and so on.
     *   A sys.no-match-default or sys.no-input-default handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed.
     *   A sys.invalid-parameter handler can be defined to handle the case where the parameter values have been invalidated by webhook. For example, if the user&#39;s response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the sys.invalid-parameter handler (if defined) will be called to provide a prompt.
     *   If the event handler for the corresponding event can&#39;t be found on the parameter, initialPromptFulfillment will be re-prompted.
     *   Structure is documented below.
     * 
     */
    @Import(name="repromptEventHandlers")
    private @Nullable Output<List<CxPageFormParameterFillBehaviorRepromptEventHandlerArgs>> repromptEventHandlers;

    /**
     * @return The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:
     * * sys.no-match-&lt;N&gt;, where N can be from 1 to 6
     * * sys.no-match-default
     * * sys.no-input-&lt;N&gt;, where N can be from 1 to 6
     * * sys.no-input-default
     * * sys.invalid-parameter
     *   [initialPromptFulfillment][initialPromptFulfillment] provides the first prompt for the parameter.
     *   If the user&#39;s response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the sys.no-match-1/sys.no-input-1 handler (if defined) will be called to provide a prompt. The sys.no-match-2/sys.no-input-2 handler (if defined) will respond to the next no-match/no-input event, and so on.
     *   A sys.no-match-default or sys.no-input-default handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed.
     *   A sys.invalid-parameter handler can be defined to handle the case where the parameter values have been invalidated by webhook. For example, if the user&#39;s response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the sys.invalid-parameter handler (if defined) will be called to provide a prompt.
     *   If the event handler for the corresponding event can&#39;t be found on the parameter, initialPromptFulfillment will be re-prompted.
     *   Structure is documented below.
     * 
     */
    public Optional<Output<List<CxPageFormParameterFillBehaviorRepromptEventHandlerArgs>>> repromptEventHandlers() {
        return Optional.ofNullable(this.repromptEventHandlers);
    }

    private CxPageFormParameterFillBehaviorArgs() {}

    private CxPageFormParameterFillBehaviorArgs(CxPageFormParameterFillBehaviorArgs $) {
        this.initialPromptFulfillment = $.initialPromptFulfillment;
        this.repromptEventHandlers = $.repromptEventHandlers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxPageFormParameterFillBehaviorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxPageFormParameterFillBehaviorArgs $;

        public Builder() {
            $ = new CxPageFormParameterFillBehaviorArgs();
        }

        public Builder(CxPageFormParameterFillBehaviorArgs defaults) {
            $ = new CxPageFormParameterFillBehaviorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param initialPromptFulfillment The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder initialPromptFulfillment(@Nullable Output<CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs> initialPromptFulfillment) {
            $.initialPromptFulfillment = initialPromptFulfillment;
            return this;
        }

        /**
         * @param initialPromptFulfillment The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder initialPromptFulfillment(CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs initialPromptFulfillment) {
            return initialPromptFulfillment(Output.of(initialPromptFulfillment));
        }

        /**
         * @param repromptEventHandlers The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:
         * * sys.no-match-&lt;N&gt;, where N can be from 1 to 6
         * * sys.no-match-default
         * * sys.no-input-&lt;N&gt;, where N can be from 1 to 6
         * * sys.no-input-default
         * * sys.invalid-parameter
         *   [initialPromptFulfillment][initialPromptFulfillment] provides the first prompt for the parameter.
         *   If the user&#39;s response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the sys.no-match-1/sys.no-input-1 handler (if defined) will be called to provide a prompt. The sys.no-match-2/sys.no-input-2 handler (if defined) will respond to the next no-match/no-input event, and so on.
         *   A sys.no-match-default or sys.no-input-default handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed.
         *   A sys.invalid-parameter handler can be defined to handle the case where the parameter values have been invalidated by webhook. For example, if the user&#39;s response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the sys.invalid-parameter handler (if defined) will be called to provide a prompt.
         *   If the event handler for the corresponding event can&#39;t be found on the parameter, initialPromptFulfillment will be re-prompted.
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder repromptEventHandlers(@Nullable Output<List<CxPageFormParameterFillBehaviorRepromptEventHandlerArgs>> repromptEventHandlers) {
            $.repromptEventHandlers = repromptEventHandlers;
            return this;
        }

        /**
         * @param repromptEventHandlers The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:
         * * sys.no-match-&lt;N&gt;, where N can be from 1 to 6
         * * sys.no-match-default
         * * sys.no-input-&lt;N&gt;, where N can be from 1 to 6
         * * sys.no-input-default
         * * sys.invalid-parameter
         *   [initialPromptFulfillment][initialPromptFulfillment] provides the first prompt for the parameter.
         *   If the user&#39;s response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the sys.no-match-1/sys.no-input-1 handler (if defined) will be called to provide a prompt. The sys.no-match-2/sys.no-input-2 handler (if defined) will respond to the next no-match/no-input event, and so on.
         *   A sys.no-match-default or sys.no-input-default handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed.
         *   A sys.invalid-parameter handler can be defined to handle the case where the parameter values have been invalidated by webhook. For example, if the user&#39;s response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the sys.invalid-parameter handler (if defined) will be called to provide a prompt.
         *   If the event handler for the corresponding event can&#39;t be found on the parameter, initialPromptFulfillment will be re-prompted.
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder repromptEventHandlers(List<CxPageFormParameterFillBehaviorRepromptEventHandlerArgs> repromptEventHandlers) {
            return repromptEventHandlers(Output.of(repromptEventHandlers));
        }

        /**
         * @param repromptEventHandlers The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:
         * * sys.no-match-&lt;N&gt;, where N can be from 1 to 6
         * * sys.no-match-default
         * * sys.no-input-&lt;N&gt;, where N can be from 1 to 6
         * * sys.no-input-default
         * * sys.invalid-parameter
         *   [initialPromptFulfillment][initialPromptFulfillment] provides the first prompt for the parameter.
         *   If the user&#39;s response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the sys.no-match-1/sys.no-input-1 handler (if defined) will be called to provide a prompt. The sys.no-match-2/sys.no-input-2 handler (if defined) will respond to the next no-match/no-input event, and so on.
         *   A sys.no-match-default or sys.no-input-default handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed.
         *   A sys.invalid-parameter handler can be defined to handle the case where the parameter values have been invalidated by webhook. For example, if the user&#39;s response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the sys.invalid-parameter handler (if defined) will be called to provide a prompt.
         *   If the event handler for the corresponding event can&#39;t be found on the parameter, initialPromptFulfillment will be re-prompted.
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder repromptEventHandlers(CxPageFormParameterFillBehaviorRepromptEventHandlerArgs... repromptEventHandlers) {
            return repromptEventHandlers(List.of(repromptEventHandlers));
        }

        public CxPageFormParameterFillBehaviorArgs build() {
            return $;
        }
    }

}
