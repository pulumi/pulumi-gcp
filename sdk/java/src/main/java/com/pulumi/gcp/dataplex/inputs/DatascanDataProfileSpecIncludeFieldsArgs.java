// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatascanDataProfileSpecIncludeFieldsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatascanDataProfileSpecIncludeFieldsArgs Empty = new DatascanDataProfileSpecIncludeFieldsArgs();

    /**
     * Expected input is a list of fully qualified names of fields as in the schema.
     * Only top-level field names for nested fields are supported.
     * For instance, if &#39;x&#39; is of nested field type, listing &#39;x&#39; is supported but &#39;x.y.z&#39; is not supported. Here &#39;y&#39; and &#39;y.z&#39; are nested fields of &#39;x&#39;.
     * 
     */
    @Import(name="fieldNames")
    private @Nullable Output<List<String>> fieldNames;

    /**
     * @return Expected input is a list of fully qualified names of fields as in the schema.
     * Only top-level field names for nested fields are supported.
     * For instance, if &#39;x&#39; is of nested field type, listing &#39;x&#39; is supported but &#39;x.y.z&#39; is not supported. Here &#39;y&#39; and &#39;y.z&#39; are nested fields of &#39;x&#39;.
     * 
     */
    public Optional<Output<List<String>>> fieldNames() {
        return Optional.ofNullable(this.fieldNames);
    }

    private DatascanDataProfileSpecIncludeFieldsArgs() {}

    private DatascanDataProfileSpecIncludeFieldsArgs(DatascanDataProfileSpecIncludeFieldsArgs $) {
        this.fieldNames = $.fieldNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatascanDataProfileSpecIncludeFieldsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatascanDataProfileSpecIncludeFieldsArgs $;

        public Builder() {
            $ = new DatascanDataProfileSpecIncludeFieldsArgs();
        }

        public Builder(DatascanDataProfileSpecIncludeFieldsArgs defaults) {
            $ = new DatascanDataProfileSpecIncludeFieldsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fieldNames Expected input is a list of fully qualified names of fields as in the schema.
         * Only top-level field names for nested fields are supported.
         * For instance, if &#39;x&#39; is of nested field type, listing &#39;x&#39; is supported but &#39;x.y.z&#39; is not supported. Here &#39;y&#39; and &#39;y.z&#39; are nested fields of &#39;x&#39;.
         * 
         * @return builder
         * 
         */
        public Builder fieldNames(@Nullable Output<List<String>> fieldNames) {
            $.fieldNames = fieldNames;
            return this;
        }

        /**
         * @param fieldNames Expected input is a list of fully qualified names of fields as in the schema.
         * Only top-level field names for nested fields are supported.
         * For instance, if &#39;x&#39; is of nested field type, listing &#39;x&#39; is supported but &#39;x.y.z&#39; is not supported. Here &#39;y&#39; and &#39;y.z&#39; are nested fields of &#39;x&#39;.
         * 
         * @return builder
         * 
         */
        public Builder fieldNames(List<String> fieldNames) {
            return fieldNames(Output.of(fieldNames));
        }

        /**
         * @param fieldNames Expected input is a list of fully qualified names of fields as in the schema.
         * Only top-level field names for nested fields are supported.
         * For instance, if &#39;x&#39; is of nested field type, listing &#39;x&#39; is supported but &#39;x.y.z&#39; is not supported. Here &#39;y&#39; and &#39;y.z&#39; are nested fields of &#39;x&#39;.
         * 
         * @return builder
         * 
         */
        public Builder fieldNames(String... fieldNames) {
            return fieldNames(List.of(fieldNames));
        }

        public DatascanDataProfileSpecIncludeFieldsArgs build() {
            return $;
        }
    }

}
